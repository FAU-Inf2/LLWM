; ModuleID = '<stdin>'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.infomap = type { i8*, i8* }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.slotvec = type { i64, i8* }
%struct.passwd = type { i8*, i8*, i32, i32, i8*, i8*, i8* }
%struct.group = type { i8*, i8*, i32, i8** }
%struct.__mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.1 = private unnamed_addr constant [33 x i8] c"Usage: %s [OPTION]... [USER]...\0A\00", align 1
@.str.2 = private unnamed_addr constant [105 x i8] c"Print user and group information for each specified USER,\0Aor (when USER omitted) for the current user.\0A\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [521 x i8] c"  -a             ignore, for compatibility with other versions\0A  -Z, --context  print only the security context of the process\0A  -g, --group    print only the effective group ID\0A  -G, --groups   print all group IDs\0A  -n, --name     print a name instead of a number, for -ugG\0A  -r, --real     print the real ID instead of the effective ID, with -ugG\0A  -u, --user     print only the effective user ID\0A  -z, --zero     delimit entries with NUL characters, not whitespace;\0A                   not permitted in default format\0A\00", align 1
@.str.4 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.5 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.6 = private unnamed_addr constant [71 x i8] c"\0AWithout any OPTION, print some useful set of identified information.\0A\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"id\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.29, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.31, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.31, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.31, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.31, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.35 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.13 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.36 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.37 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.38 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.39 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.40 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.41 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.8 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.28 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.29 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.30 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.31 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.32 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.33 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.34 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.10 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"agnruzGZ\00", align 1
@longopts = internal constant [10 x %struct.option] [%struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.42, i32 0, i32 0), i32 0, i32* null, i32 90 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.43, i32 0, i32 0), i32 0, i32* null, i32 103 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.44, i32 0, i32 0), i32 0, i32* null, i32 71 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.45, i32 0, i32 0), i32 0, i32* null, i32 110 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.46, i32 0, i32 0), i32 0, i32* null, i32 114 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.47, i32 0, i32 0), i32 0, i32* null, i32 117 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.48, i32 0, i32 0), i32 0, i32* null, i32 122 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.49, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.50, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16, !dbg !0
@.str.12 = private unnamed_addr constant [55 x i8] c"--context (-Z) works only on an SELinux-enabled kernel\00", align 1
@just_context = internal global i8 0, align 1, !dbg !25
@just_group = internal global i8 0, align 1, !dbg !28
@use_name = internal global i8 0, align 1, !dbg !30
@use_real = internal global i8 0, align 1, !dbg !32
@just_user = internal global i8 0, align 1, !dbg !34
@opt_zero = internal global i8 0, align 1, !dbg !36
@just_group_list = internal global i8 0, align 1, !dbg !38
@.str.14 = private unnamed_addr constant [15 x i8] c"Arnold Robbins\00", align 1
@.str.15 = private unnamed_addr constant [16 x i8] c"David MacKenzie\00", align 1
@optind = external dso_local global i32, align 4
@.str.16 = private unnamed_addr constant [50 x i8] c"cannot print security context when user specified\00", align 1
@.str.17 = private unnamed_addr constant [44 x i8] c"cannot print \22only\22 of more than one choice\00", align 1
@.str.18 = private unnamed_addr constant [54 x i8] c"cannot print only names or real IDs in default format\00", align 1
@.str.19 = private unnamed_addr constant [46 x i8] c"option --zero not permitted in default format\00", align 1
@.str.20 = private unnamed_addr constant [16 x i8] c"POSIXLY_CORRECT\00", align 1
@context = internal global i8* null, align 8, !dbg !40
@.str.21 = private unnamed_addr constant [26 x i8] c"can't get process context\00", align 1
@multiple_users = internal global i8 0, align 1, !dbg !42
@euid = internal global i32 0, align 4, !dbg !17
@.str.22 = private unnamed_addr constant [17 x i8] c"%s: no such user\00", align 1
@ok = internal global i8 1, align 1, !dbg !44
@ruid = internal global i32 0, align 4, !dbg !10
@egid = internal global i32 0, align 4, !dbg !23
@rgid = internal global i32 0, align 4, !dbg !19
@.str.23 = private unnamed_addr constant [25 x i8] c"cannot get effective UID\00", align 1
@.str.24 = private unnamed_addr constant [20 x i8] c"cannot get real UID\00", align 1
@.str.25 = private unnamed_addr constant [25 x i8] c"cannot get effective GID\00", align 1
@.str.26 = private unnamed_addr constant [20 x i8] c"cannot get real GID\00", align 1
@.str.52 = private unnamed_addr constant [7 x i8] c"uid=%s\00", align 1
@.str.53 = private unnamed_addr constant [5 x i8] c"(%s)\00", align 1
@.str.54 = private unnamed_addr constant [8 x i8] c" gid=%s\00", align 1
@.str.55 = private unnamed_addr constant [9 x i8] c" euid=%s\00", align 1
@.str.56 = private unnamed_addr constant [9 x i8] c" egid=%s\00", align 1
@.str.57 = private unnamed_addr constant [33 x i8] c"failed to get groups for user %s\00", align 1
@.str.58 = private unnamed_addr constant [45 x i8] c"failed to get groups for the current process\00", align 1
@.str.59 = private unnamed_addr constant [9 x i8] c" groups=\00", align 1
@.str.60 = private unnamed_addr constant [12 x i8] c" context=%s\00", align 1
@gidtostr_ptr.buf = internal global [21 x i8] zeroinitializer, align 16, !dbg !56
@uidtostr_ptr.buf = internal global [21 x i8] zeroinitializer, align 16, !dbg !46
@.str.51 = private unnamed_addr constant [32 x i8] c"cannot find name for user ID %s\00", align 1
@.str.42 = private unnamed_addr constant [8 x i8] c"context\00", align 1
@.str.43 = private unnamed_addr constant [6 x i8] c"group\00", align 1
@.str.44 = private unnamed_addr constant [7 x i8] c"groups\00", align 1
@.str.45 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.46 = private unnamed_addr constant [5 x i8] c"real\00", align 1
@.str.47 = private unnamed_addr constant [5 x i8] c"user\00", align 1
@.str.48 = private unnamed_addr constant [5 x i8] c"zero\00", align 1
@.str.49 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.50 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.61 = private unnamed_addr constant [33 x i8] c"failed to get groups for user %s\00", align 1
@.str.1.62 = private unnamed_addr constant [45 x i8] c"failed to get groups for the current process\00", align 1
@.str.2.63 = private unnamed_addr constant [34 x i8] c"cannot find name for group ID %lu\00", align 1
@gidtostr_ptr.buf.65 = internal global [21 x i8] zeroinitializer, align 16, !dbg !78
@Version = internal global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.68, i32 0, i32 0), align 8, !dbg !86
@.str.68 = private unnamed_addr constant [5 x i8] c"8.32\00", align 1
@ignore_EPIPE = internal global i8 0, align 1, !dbg !91
@.str.71 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@file_name = internal global i8* null, align 8, !dbg !96
@.str.1.72 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.73 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@exit_failure = internal global i32 1, align 4, !dbg !99
@.str.80 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.81 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.82 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external dso_local global i8*, align 8
@program_name = internal global i8* null, align 8, !dbg !106
@program_invocation_name = external dso_local global i8*, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8, !dbg !113
@slotvec = internal global %struct.slotvec* @slotvec0, align 8, !dbg !165
@nslots = internal global i32 1, align 4, !dbg !172
@slotvec0 = internal global %struct.slotvec { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8, !dbg !174
@slot0 = internal global [256 x i8] zeroinitializer, align 16, !dbg !160
@.str.10.85 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.86 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.87 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.88 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.89 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.90 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.91 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.92 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.93 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@quote_quoting_options = internal global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, i8* null, i8* null }, align 8, !dbg !148
@parse_with_separator.E_bad_spec = internal global i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2.105, i32 0, i32 0), align 8, !dbg !176
@.str.3.102 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@parse_with_separator.E_invalid_user = internal global i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.104, i32 0, i32 0), align 8, !dbg !189
@parse_with_separator.E_invalid_group = internal global i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.103, i32 0, i32 0), align 8, !dbg !191
@.str.1.103 = private unnamed_addr constant [14 x i8] c"invalid group\00", align 1
@.str.104 = private unnamed_addr constant [13 x i8] c"invalid user\00", align 1
@.str.2.105 = private unnamed_addr constant [13 x i8] c"invalid spec\00", align 1
@.str.106 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.107 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.108 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.109 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4.110 = private unnamed_addr constant [171 x i8] c"License GPLv3+: GNU GPL version 3 or later <%s>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.5.111 = private unnamed_addr constant [34 x i8] c"https://gnu.org/licenses/gpl.html\00", align 1
@.str.6.112 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.7.113 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.8.114 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.9.115 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.10.116 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.11.117 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.12.118 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.13.119 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.14.120 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.15.121 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@version_etc_copyright = internal constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16, !dbg !193
@.str.1.136 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.137 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.142 = private unnamed_addr constant [38 x i8] c"0 <= strtol_base && strtol_base <= 36\00", align 1
@.str.1.143 = private unnamed_addr constant [16 x i8] c"./lib/xstrtol.c\00", align 1
@__PRETTY_FUNCTION__.xstrtoul = private unnamed_addr constant [81 x i8] c"strtol_error xstrtoul(const char *, char **, int, unsigned long *, const char *)\00", align 1
@.str.152 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.153 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.156 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.157 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@inVal0 = global i32 0
@inVal1 = global i8** null
@.compVal0 = private global [2 x i8] c"+\00"
@.compVal1 = private global [4 x i8] c"\01  \00"
@.compVal2 = private global [1 x i8] zeroinitializer
@x = common global i32 0
@y = common global i32 0
@x.1 = common global i32 0
@y.2 = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0
@x.67 = common global i32 0
@y.68 = common global i32 0
@x.69 = common global i32 0
@y.70 = common global i32 0
@x.71 = common global i32 0
@y.72 = common global i32 0
@x.73 = common global i32 0
@y.74 = common global i32 0
@x.75 = common global i32 0
@y.76 = common global i32 0
@x.77 = common global i32 0
@y.78 = common global i32 0
@x.79 = common global i32 0
@y.80 = common global i32 0
@x.81 = common global i32 0
@y.82 = common global i32 0
@x.83 = common global i32 0
@y.84 = common global i32 0
@x.85 = common global i32 0
@y.86 = common global i32 0
@x.87 = common global i32 0
@y.88 = common global i32 0
@x.89 = common global i32 0
@y.90 = common global i32 0
@x.91 = common global i32 0
@y.92 = common global i32 0
@x.93 = common global i32 0
@y.94 = common global i32 0
@x.95 = common global i32 0
@y.96 = common global i32 0
@x.97 = common global i32 0
@y.98 = common global i32 0
@x.99 = common global i32 0
@y.100 = common global i32 0
@x.101 = common global i32 0
@y.102 = common global i32 0
@x.103 = common global i32 0
@y.104 = common global i32 0
@x.105 = common global i32 0
@y.106 = common global i32 0
@x.107 = common global i32 0
@y.108 = common global i32 0
@x.109 = common global i32 0
@y.110 = common global i32 0
@x.111 = common global i32 0
@y.112 = common global i32 0
@x.113 = common global i32 0
@y.114 = common global i32 0
@x.115 = common global i32 0
@y.116 = common global i32 0

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @usage(i32) #0 !dbg !269 {
  %2 = load i32, i32* @x
  %3 = load i32, i32* @y
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !272, metadata !DIExpression()), !dbg !273
  %11 = load i32, i32* %10, align 4, !dbg !274
  %12 = icmp ne i32 %11, 0, !dbg !276
  %13 = load i32, i32* @x
  %14 = load i32, i32* @y
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %44, !dbg !277

21:                                               ; preds = %originalBBpart2
  br label %22, !dbg !278

22:                                               ; preds = %21
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !279
  %24 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !279
  %25 = load i8*, i8** @program_name, align 8, !dbg !279
  %26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* %24, i8* %25), !dbg !279
  br label %27, !dbg !279

27:                                               ; preds = %22
  %28 = load i32, i32* @x
  %29 = load i32, i32* @y
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load i32, i32* @x
  %37 = load i32, i32* @y
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %79, !dbg !279

44:                                               ; preds = %originalBBpart2
  %45 = load i32, i32* @x
  %46 = load i32, i32* @y
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  %53 = call i8* @gettext(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !281
  %54 = load i8*, i8** @program_name, align 8, !dbg !283
  %55 = call i32 (i8*, ...) @printf(i8* %53, i8* %54), !dbg !284
  %56 = call i8* @gettext(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !285
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !285
  %58 = call i32 @fputs_unlocked(i8* %56, %struct._IO_FILE* %57), !dbg !285
  %59 = call i8* @gettext(i8* getelementptr inbounds ([521 x i8], [521 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !286
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !286
  %61 = call i32 @fputs_unlocked(i8* %59, %struct._IO_FILE* %60), !dbg !286
  %62 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !287
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !287
  %64 = call i32 @fputs_unlocked(i8* %62, %struct._IO_FILE* %63), !dbg !287
  %65 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !288
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !288
  %67 = call i32 @fputs_unlocked(i8* %65, %struct._IO_FILE* %66), !dbg !288
  %68 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !289
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !289
  %70 = call i32 @fputs_unlocked(i8* %68, %struct._IO_FILE* %69), !dbg !289
  call void @emit_ancillary_info(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0)), !dbg !290
  %71 = load i32, i32* @x
  %72 = load i32, i32* @y
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %79

79:                                               ; preds = %originalBBpart28, %originalBBpart24
  %80 = load i32, i32* @x
  %81 = load i32, i32* @y
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %79, %originalBB10alteredBB
  %88 = load i32, i32* %10, align 4, !dbg !291
  call void @exit(i32 %88) #12, !dbg !292
  %89 = load i32, i32* @x
  %90 = load i32, i32* @y
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  unreachable, !dbg !292

originalBBalteredBB:                              ; preds = %originalBB, %1
  %97 = alloca i32, align 4
  store i32 %0, i32* %97, align 4
  call void @llvm.dbg.declare(metadata i32* %97, metadata !293, metadata !DIExpression()), !dbg !273
  %98 = load i32, i32* %97, align 4, !dbg !274
  %99 = icmp ne i32 %98, 0, !dbg !276
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  %100 = call i8* @gettext(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !281
  %101 = load i8*, i8** @program_name, align 8, !dbg !283
  %102 = call i32 (i8*, ...) @printf(i8* %100, i8* %101), !dbg !284
  %103 = call i8* @gettext(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !285
  %104 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !285
  %105 = call i32 @fputs_unlocked(i8* %103, %struct._IO_FILE* %104), !dbg !285
  %106 = call i8* @gettext(i8* getelementptr inbounds ([521 x i8], [521 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !286
  %107 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !286
  %108 = call i32 @fputs_unlocked(i8* %106, %struct._IO_FILE* %107), !dbg !286
  %109 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !287
  %110 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !287
  %111 = call i32 @fputs_unlocked(i8* %109, %struct._IO_FILE* %110), !dbg !287
  %112 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !288
  %113 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !288
  %114 = call i32 @fputs_unlocked(i8* %112, %struct._IO_FILE* %113), !dbg !288
  %115 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !289
  %116 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !289
  %117 = call i32 @fputs_unlocked(i8* %115, %struct._IO_FILE* %116), !dbg !289
  call void @emit_ancillary_info(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0)), !dbg !290
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %79
  %118 = load i32, i32* %10, align 4, !dbg !291
  call void @exit(i32 %118) #12, !dbg !292
  br label %originalBB10
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local i8* @gettext(i8*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(i8*) #4 !dbg !341 {
  %2 = load i32, i32* @x.1
  %3 = load i32, i32* @y.2
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca [7 x %struct.infomap], align 16
  %12 = alloca i8*, align 8
  %13 = alloca %struct.infomap*, align 8
  %14 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !345, metadata !DIExpression()), !dbg !346
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %11, metadata !347, metadata !DIExpression()), !dbg !356
  %15 = bitcast [7 x %struct.infomap]* %11 to i8*, !dbg !356
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !356
  call void @llvm.dbg.declare(metadata i8** %12, metadata !357, metadata !DIExpression()), !dbg !358
  %16 = load i8*, i8** %10, align 8, !dbg !359
  store i8* %16, i8** %12, align 8, !dbg !358
  call void @llvm.dbg.declare(metadata %struct.infomap** %13, metadata !360, metadata !DIExpression()), !dbg !362
  %17 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %11, i64 0, i64 0, !dbg !363
  store %struct.infomap* %17, %struct.infomap** %13, align 8, !dbg !362
  %18 = load i32, i32* @x.1
  %19 = load i32, i32* @y.2
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %26, !dbg !364

26:                                               ; preds = %originalBBpart228, %originalBBpart2
  %27 = load i32, i32* @x.1
  %28 = load i32, i32* @y.2
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !365
  %36 = getelementptr inbounds %struct.infomap, %struct.infomap* %35, i32 0, i32 0, !dbg !366
  %37 = load i8*, i8** %36, align 8, !dbg !366
  %38 = icmp ne i8* %37, null, !dbg !365
  %39 = load i32, i32* @x.1
  %40 = load i32, i32* @y.2
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %71, !dbg !367

47:                                               ; preds = %originalBBpart24
  %48 = load i32, i32* @x.1
  %49 = load i32, i32* @y.2
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = load i8*, i8** %10, align 8, !dbg !368
  %57 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !368
  %58 = getelementptr inbounds %struct.infomap, %struct.infomap* %57, i32 0, i32 0, !dbg !368
  %59 = load i8*, i8** %58, align 8, !dbg !368
  %60 = call i32 @strcmp(i8* %56, i8* %59) #13, !dbg !368
  %61 = icmp eq i32 %60, 0, !dbg !368
  %62 = xor i1 %61, true, !dbg !369
  %63 = load i32, i32* @x.1
  %64 = load i32, i32* @y.2
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart220, label %originalBB6alteredBB

originalBBpart220:                                ; preds = %originalBB6
  br label %71

71:                                               ; preds = %originalBBpart220, %originalBBpart24
  %72 = phi i1 [ false, %originalBBpart24 ], [ %62, %originalBBpart220 ], !dbg !370
  %73 = load i32, i32* @x.1
  %74 = load i32, i32* @y.2
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %71, %originalBB22alteredBB
  %81 = load i32, i32* @x.1
  %82 = load i32, i32* @y.2
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %72, label %89, label %108, !dbg !364

89:                                               ; preds = %originalBBpart224
  %90 = load i32, i32* @x.1
  %91 = load i32, i32* @y.2
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %89, %originalBB26alteredBB
  %98 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !371
  %99 = getelementptr inbounds %struct.infomap, %struct.infomap* %98, i32 1, !dbg !371
  store %struct.infomap* %99, %struct.infomap** %13, align 8, !dbg !371
  %100 = load i32, i32* @x.1
  %101 = load i32, i32* @y.2
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %26, !dbg !364, !llvm.loop !372

108:                                              ; preds = %originalBBpart224
  %109 = load i32, i32* @x.1
  %110 = load i32, i32* @y.2
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %108, %originalBB30alteredBB
  %117 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !373
  %118 = getelementptr inbounds %struct.infomap, %struct.infomap* %117, i32 0, i32 1, !dbg !375
  %119 = load i8*, i8** %118, align 8, !dbg !375
  %120 = icmp ne i8* %119, null, !dbg !373
  %121 = load i32, i32* @x.1
  %122 = load i32, i32* @y.2
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %120, label %129, label %149, !dbg !376

129:                                              ; preds = %originalBBpart232
  %130 = load i32, i32* @x.1
  %131 = load i32, i32* @y.2
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %129, %originalBB34alteredBB
  %138 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !377
  %139 = getelementptr inbounds %struct.infomap, %struct.infomap* %138, i32 0, i32 1, !dbg !378
  %140 = load i8*, i8** %139, align 8, !dbg !378
  store i8* %140, i8** %12, align 8, !dbg !379
  %141 = load i32, i32* @x.1
  %142 = load i32, i32* @y.2
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %149, !dbg !380

149:                                              ; preds = %originalBBpart236, %originalBBpart232
  %150 = load i32, i32* @x.1
  %151 = load i32, i32* @y.2
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %149, %originalBB38alteredBB
  %158 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35, i64 0, i64 0)) #10, !dbg !381
  %159 = call i32 (i8*, ...) @printf(i8* %158, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.36, i64 0, i64 0)), !dbg !382
  call void @llvm.dbg.declare(metadata i8** %14, metadata !383, metadata !DIExpression()), !dbg !384
  %160 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !385
  store i8* %160, i8** %14, align 8, !dbg !384
  %161 = load i8*, i8** %14, align 8, !dbg !386
  %162 = icmp ne i8* %161, null, !dbg !386
  %163 = load i32, i32* @x.1
  %164 = load i32, i32* @y.2
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %162, label %171, label %211, !dbg !388

171:                                              ; preds = %originalBBpart240
  %172 = load i32, i32* @x.1
  %173 = load i32, i32* @y.2
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %171, %originalBB42alteredBB
  %180 = load i8*, i8** %14, align 8, !dbg !389
  %181 = call i32 @strncmp(i8* %180, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.37, i64 0, i64 0), i64 3) #13, !dbg !389
  %182 = icmp ne i32 %181, 0, !dbg !389
  %183 = load i32, i32* @x.1
  %184 = load i32, i32* @y.2
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br i1 %182, label %191, label %211, !dbg !390

191:                                              ; preds = %originalBBpart244
  %192 = load i32, i32* @x.1
  %193 = load i32, i32* @y.2
  %194 = sub i32 %192, 1
  %195 = mul i32 %192, %194
  %196 = urem i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %197, %198
  br i1 %199, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %191, %originalBB46alteredBB
  %200 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.38, i64 0, i64 0)) #10, !dbg !391
  %201 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !391
  %202 = call i32 @fputs_unlocked(i8* %200, %struct._IO_FILE* %201), !dbg !391
  %203 = load i32, i32* @x.1
  %204 = load i32, i32* @y.2
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %211, !dbg !393

211:                                              ; preds = %originalBBpart248, %originalBBpart244, %originalBBpart240
  %212 = load i32, i32* @x.1
  %213 = load i32, i32* @y.2
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %211, %originalBB50alteredBB
  %220 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.39, i64 0, i64 0)) #10, !dbg !394
  %221 = load i8*, i8** %10, align 8, !dbg !395
  %222 = call i32 (i8*, ...) @printf(i8* %220, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.36, i64 0, i64 0), i8* %221), !dbg !396
  %223 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.40, i64 0, i64 0)) #10, !dbg !397
  %224 = load i8*, i8** %12, align 8, !dbg !398
  %225 = load i8*, i8** %12, align 8, !dbg !399
  %226 = load i8*, i8** %10, align 8, !dbg !400
  %227 = icmp eq i8* %225, %226, !dbg !401
  %228 = zext i1 %227 to i64, !dbg !399
  %229 = select i1 %227, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.41, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0), !dbg !399
  %230 = call i32 (i8*, ...) @printf(i8* %223, i8* %224, i8* %229), !dbg !402
  %231 = load i32, i32* @x.1
  %232 = load i32, i32* @y.2
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  ret void, !dbg !403

originalBBalteredBB:                              ; preds = %originalBB, %1
  %239 = alloca i8*, align 8
  %240 = alloca [7 x %struct.infomap], align 16
  %241 = alloca i8*, align 8
  %242 = alloca %struct.infomap*, align 8
  %243 = alloca i8*, align 8
  store i8* %0, i8** %239, align 8
  call void @llvm.dbg.declare(metadata i8** %239, metadata !404, metadata !DIExpression()), !dbg !346
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %240, metadata !452, metadata !DIExpression()), !dbg !356
  %244 = bitcast [7 x %struct.infomap]* %240 to i8*, !dbg !356
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %244, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !356
  call void @llvm.dbg.declare(metadata i8** %241, metadata !459, metadata !DIExpression()), !dbg !358
  %245 = load i8*, i8** %239, align 8, !dbg !359
  store i8* %245, i8** %241, align 8, !dbg !358
  call void @llvm.dbg.declare(metadata %struct.infomap** %242, metadata !460, metadata !DIExpression()), !dbg !362
  %246 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %240, i64 0, i64 0, !dbg !363
  store %struct.infomap* %246, %struct.infomap** %242, align 8, !dbg !362
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %247 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !365
  %248 = getelementptr inbounds %struct.infomap, %struct.infomap* %247, i32 0, i32 0, !dbg !366
  %249 = load i8*, i8** %248, align 8, !dbg !366
  %250 = icmp ne i8* %249, null, !dbg !365
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %251 = load i8*, i8** %10, align 8, !dbg !368
  %252 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !368
  %253 = getelementptr inbounds %struct.infomap, %struct.infomap* %252, i32 0, i32 0, !dbg !368
  %254 = load i8*, i8** %253, align 8, !dbg !368
  %255 = call i32 @strcmp(i8* %251, i8* %254) #13, !dbg !368
  %256 = icmp eq i32 %255, 0, !dbg !368
  %_ = sub i1 false, %256
  %gen = add i1 %_, true
  %_7 = shl i1 %256, true
  %_8 = sub i1 false, %256
  %gen9 = add i1 %_8, true
  %_10 = sub i1 %256, true
  %gen11 = mul i1 %_10, true
  %_12 = sub i1 false, %256
  %gen13 = add i1 %_12, true
  %_14 = shl i1 %256, true
  %_15 = shl i1 %256, true
  %_16 = shl i1 %256, true
  %_17 = sub i1 false, %256
  %gen18 = add i1 %_17, true
  %257 = xor i1 %256, true, !dbg !369
  br label %originalBB6

originalBB22alteredBB:                            ; preds = %originalBB22, %71
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %89
  %258 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !371
  %259 = getelementptr inbounds %struct.infomap, %struct.infomap* %258, i32 1, !dbg !371
  store %struct.infomap* %259, %struct.infomap** %13, align 8, !dbg !371
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %108
  %260 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !373
  %261 = getelementptr inbounds %struct.infomap, %struct.infomap* %260, i32 0, i32 1, !dbg !375
  %262 = load i8*, i8** %261, align 8, !dbg !375
  %263 = icmp ne i8* %262, null, !dbg !373
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %129
  %264 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !377
  %265 = getelementptr inbounds %struct.infomap, %struct.infomap* %264, i32 0, i32 1, !dbg !378
  %266 = load i8*, i8** %265, align 8, !dbg !378
  store i8* %266, i8** %12, align 8, !dbg !379
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %149
  %267 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35, i64 0, i64 0)) #10, !dbg !381
  %268 = call i32 (i8*, ...) @printf(i8* %267, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.36, i64 0, i64 0)), !dbg !382
  call void @llvm.dbg.declare(metadata !4, metadata !462, metadata !DIExpression()), !dbg !384
  %269 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !385
  store i8* %269, i8** %14, align 8, !dbg !384
  %270 = load i8*, i8** %14, align 8, !dbg !386
  %271 = icmp ne i8* %270, null, !dbg !386
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %171
  %272 = load i8*, i8** %14, align 8, !dbg !389
  %273 = call i32 @strncmp(i8* %272, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.37, i64 0, i64 0), i64 3) #13, !dbg !389
  %274 = icmp ne i32 %273, 0, !dbg !389
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %191
  %275 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.38, i64 0, i64 0)) #10, !dbg !391
  %276 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !391
  %277 = call i32 @fputs_unlocked(i8* %275, %struct._IO_FILE* %276), !dbg !391
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %211
  %278 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.39, i64 0, i64 0)) #10, !dbg !394
  %279 = load i8*, i8** %10, align 8, !dbg !395
  %280 = call i32 (i8*, ...) @printf(i8* %278, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.36, i64 0, i64 0), i8* %279), !dbg !396
  %281 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.40, i64 0, i64 0)) #10, !dbg !397
  %282 = load i8*, i8** %12, align 8, !dbg !398
  %283 = load i8*, i8** %12, align 8, !dbg !399
  %284 = load i8*, i8** %10, align 8, !dbg !400
  %285 = icmp eq i8* %283, %284, !dbg !401
  %286 = zext i1 %285 to i64, !dbg !399
  %287 = select i1 %285, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.41, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0), !dbg !399
  %288 = call i32 (i8*, ...) @printf(i8* %281, i8* %282, i8* %287), !dbg !402
  br label %originalBB50
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #7

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) #4 !dbg !510 {
  %3 = load i32, i32* @x.3
  %4 = load i32, i32* @y.4
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8**, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i8, align 1
  %17 = alloca i8*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i8, align 1
  %20 = alloca %struct.passwd*, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  store i32 0, i32* %11, align 4
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !513, metadata !DIExpression()), !dbg !514
  store i8** %1, i8*** %13, align 8
  call void @llvm.dbg.declare(metadata i8*** %13, metadata !515, metadata !DIExpression()), !dbg !516
  call void @llvm.dbg.declare(metadata i32* %14, metadata !517, metadata !DIExpression()), !dbg !518
  call void @llvm.dbg.declare(metadata i32* %15, metadata !519, metadata !DIExpression()), !dbg !520
  store i32 0, i32* %15, align 4, !dbg !520
  call void @llvm.dbg.declare(metadata i8* %16, metadata !521, metadata !DIExpression()), !dbg !522
  %24 = call zeroext i1 @is_smack_enabled(), !dbg !523
  %25 = zext i1 %24 to i8, !dbg !522
  store i8 %25, i8* %16, align 1, !dbg !522
  call void @llvm.dbg.declare(metadata i8** %17, metadata !524, metadata !DIExpression()), !dbg !525
  store i8* null, i8** %17, align 8, !dbg !525
  %26 = load i8**, i8*** %13, align 8, !dbg !526
  %27 = getelementptr inbounds i8*, i8** %26, i64 0, !dbg !526
  %28 = load i8*, i8** %27, align 8, !dbg !526
  call void @set_program_name(i8* %28), !dbg !527
  %29 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0)) #10, !dbg !528
  %30 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !529
  %31 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !530
  %32 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !531
  %33 = load i32, i32* @x.3
  %34 = load i32, i32* @y.4
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %41, !dbg !532

41:                                               ; preds = %originalBBpart256, %originalBBpart2
  %42 = load i32, i32* @x.3
  %43 = load i32, i32* @y.4
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %41, %originalBB1alteredBB
  %50 = load i32, i32* %12, align 4, !dbg !533
  %51 = load i8**, i8*** %13, align 8, !dbg !534
  %52 = call i32 @getopt_long(i32 %50, i8** %51, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i64 0, i64 0), %struct.option* getelementptr inbounds ([10 x %struct.option], [10 x %struct.option]* @longopts, i64 0, i64 0), i32* null) #10, !dbg !535
  store i32 %52, i32* %14, align 4, !dbg !536
  %53 = icmp ne i32 %52, -1, !dbg !537
  %54 = load i32, i32* @x.3
  %55 = load i32, i32* @y.4
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %53, label %62, label %291, !dbg !532

62:                                               ; preds = %originalBBpart24
  %63 = load i32, i32* @x.3
  %64 = load i32, i32* @y.4
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %62, %originalBB6alteredBB
  %71 = load i32, i32* %14, align 4, !dbg !538
  %72 = load i32, i32* @x.3
  %73 = load i32, i32* @y.4
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  switch i32 %71, label %257 [
    i32 97, label %80
    i32 90, label %97
    i32 103, label %151
    i32 110, label %168
    i32 114, label %185
    i32 117, label %202
    i32 122, label %219
    i32 71, label %220
    i32 -130, label %237
    i32 -131, label %254
  ], !dbg !540

80:                                               ; preds = %originalBBpart28
  %81 = load i32, i32* @x.3
  %82 = load i32, i32* @y.4
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %80, %originalBB10alteredBB
  %89 = load i32, i32* @x.3
  %90 = load i32, i32* @y.4
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %274, !dbg !541

97:                                               ; preds = %originalBBpart28
  %98 = load i32, i32* @x.3
  %99 = load i32, i32* @y.4
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %97, %originalBB14alteredBB
  %106 = load i32, i32* %15, align 4, !dbg !543
  %107 = icmp ne i32 %106, 0, !dbg !543
  %108 = load i32, i32* @x.3
  %109 = load i32, i32* @y.4
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %107, label %134, label %116, !dbg !545

116:                                              ; preds = %originalBBpart216
  %117 = load i32, i32* @x.3
  %118 = load i32, i32* @y.4
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %116, %originalBB18alteredBB
  %125 = call i8* @gettext(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !546
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %125), !dbg !546
  %126 = load i32, i32* @x.3
  %127 = load i32, i32* @y.4
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  unreachable, !dbg !546

134:                                              ; preds = %originalBBpart216
  %135 = load i32, i32* @x.3
  %136 = load i32, i32* @y.4
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %134, %originalBB22alteredBB
  store i8 1, i8* @just_context, align 1, !dbg !547
  %143 = load i32, i32* @x.3
  %144 = load i32, i32* @y.4
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %274, !dbg !548

151:                                              ; preds = %originalBBpart28
  %152 = load i32, i32* @x.3
  %153 = load i32, i32* @y.4
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %151, %originalBB26alteredBB
  store i8 1, i8* @just_group, align 1, !dbg !549
  %160 = load i32, i32* @x.3
  %161 = load i32, i32* @y.4
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %274, !dbg !550

168:                                              ; preds = %originalBBpart28
  %169 = load i32, i32* @x.3
  %170 = load i32, i32* @y.4
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %168, %originalBB30alteredBB
  store i8 1, i8* @use_name, align 1, !dbg !551
  %177 = load i32, i32* @x.3
  %178 = load i32, i32* @y.4
  %179 = sub i32 %177, 1
  %180 = mul i32 %177, %179
  %181 = urem i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %178, 10
  %184 = or i1 %182, %183
  br i1 %184, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %274, !dbg !552

185:                                              ; preds = %originalBBpart28
  %186 = load i32, i32* @x.3
  %187 = load i32, i32* @y.4
  %188 = sub i32 %186, 1
  %189 = mul i32 %186, %188
  %190 = urem i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %191, %192
  br i1 %193, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %185, %originalBB34alteredBB
  store i8 1, i8* @use_real, align 1, !dbg !553
  %194 = load i32, i32* @x.3
  %195 = load i32, i32* @y.4
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %274, !dbg !554

202:                                              ; preds = %originalBBpart28
  %203 = load i32, i32* @x.3
  %204 = load i32, i32* @y.4
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %202, %originalBB38alteredBB
  store i8 1, i8* @just_user, align 1, !dbg !555
  %211 = load i32, i32* @x.3
  %212 = load i32, i32* @y.4
  %213 = sub i32 %211, 1
  %214 = mul i32 %211, %213
  %215 = urem i32 %214, 2
  %216 = icmp eq i32 %215, 0
  %217 = icmp slt i32 %212, 10
  %218 = or i1 %216, %217
  br i1 %218, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %274, !dbg !556

219:                                              ; preds = %originalBBpart28
  store i8 1, i8* @opt_zero, align 1, !dbg !557
  br label %274, !dbg !558

220:                                              ; preds = %originalBBpart28
  %221 = load i32, i32* @x.3
  %222 = load i32, i32* @y.4
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %220, %originalBB42alteredBB
  store i8 1, i8* @just_group_list, align 1, !dbg !559
  %229 = load i32, i32* @x.3
  %230 = load i32, i32* @y.4
  %231 = sub i32 %229, 1
  %232 = mul i32 %229, %231
  %233 = urem i32 %232, 2
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %234, %235
  br i1 %236, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %274, !dbg !560

237:                                              ; preds = %originalBBpart28
  %238 = load i32, i32* @x.3
  %239 = load i32, i32* @y.4
  %240 = sub i32 %238, 1
  %241 = mul i32 %238, %240
  %242 = urem i32 %241, 2
  %243 = icmp eq i32 %242, 0
  %244 = icmp slt i32 %239, 10
  %245 = or i1 %243, %244
  br i1 %245, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %237, %originalBB46alteredBB
  call void @usage(i32 0) #14, !dbg !561
  %246 = load i32, i32* @x.3
  %247 = load i32, i32* @y.4
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  unreachable, !dbg !561

254:                                              ; preds = %originalBBpart28
  %255 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !562
  %256 = load i8*, i8** @Version, align 8, !dbg !562
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %255, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i64 0, i64 0), i8* %256, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i64 0, i64 0), i8* null), !dbg !562
  call void @exit(i32 0) #12, !dbg !562
  unreachable, !dbg !562

257:                                              ; preds = %originalBBpart28
  %258 = load i32, i32* @x.3
  %259 = load i32, i32* @y.4
  %260 = sub i32 %258, 1
  %261 = mul i32 %258, %260
  %262 = urem i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %263, %264
  br i1 %265, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %257, %originalBB50alteredBB
  call void @usage(i32 1) #14, !dbg !563
  %266 = load i32, i32* @x.3
  %267 = load i32, i32* @y.4
  %268 = sub i32 %266, 1
  %269 = mul i32 %266, %268
  %270 = urem i32 %269, 2
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %271, %272
  br i1 %273, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  unreachable, !dbg !563

274:                                              ; preds = %originalBBpart244, %219, %originalBBpart240, %originalBBpart236, %originalBBpart232, %originalBBpart228, %originalBBpart224, %originalBBpart212
  %275 = load i32, i32* @x.3
  %276 = load i32, i32* @y.4
  %277 = sub i32 %275, 1
  %278 = mul i32 %275, %277
  %279 = urem i32 %278, 2
  %280 = icmp eq i32 %279, 0
  %281 = icmp slt i32 %276, 10
  %282 = or i1 %280, %281
  br i1 %282, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %274, %originalBB54alteredBB
  %283 = load i32, i32* @x.3
  %284 = load i32, i32* @y.4
  %285 = sub i32 %283, 1
  %286 = mul i32 %283, %285
  %287 = urem i32 %286, 2
  %288 = icmp eq i32 %287, 0
  %289 = icmp slt i32 %284, 10
  %290 = or i1 %288, %289
  br i1 %290, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br label %41, !dbg !532, !llvm.loop !564

291:                                              ; preds = %originalBBpart24
  call void @llvm.dbg.declare(metadata i64* %18, metadata !566, metadata !DIExpression()), !dbg !567
  %292 = load i32, i32* @x.3
  %293 = load i32, i32* @y.4
  %294 = sub i32 %292, 1
  %295 = mul i32 %292, %294
  %296 = urem i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = icmp slt i32 %293, 10
  %299 = or i1 %297, %298
  br i1 %299, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %291, %originalBB58alteredBB
  %300 = load i32, i32* %12, align 4, !dbg !568
  %301 = load i32, i32* @optind, align 4, !dbg !569
  %302 = sub nsw i32 %300, %301, !dbg !570
  %303 = sext i32 %302 to i64, !dbg !568
  store i64 %303, i64* %18, align 8, !dbg !567
  %304 = load i64, i64* %18, align 8, !dbg !571
  %305 = icmp ne i64 %304, 0, !dbg !571
  %306 = load i32, i32* @x.3
  %307 = load i32, i32* @y.4
  %308 = sub i32 %306, 1
  %309 = mul i32 %306, %308
  %310 = urem i32 %309, 2
  %311 = icmp eq i32 %310, 0
  %312 = icmp slt i32 %307, 10
  %313 = or i1 %311, %312
  br i1 %313, label %originalBBpart261, label %originalBB58alteredBB

originalBBpart261:                                ; preds = %originalBB58
  br i1 %305, label %314, label %351, !dbg !573

314:                                              ; preds = %originalBBpart261
  %315 = load i32, i32* @x.3
  %316 = load i32, i32* @y.4
  %317 = sub i32 %315, 1
  %318 = mul i32 %315, %317
  %319 = urem i32 %318, 2
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %320, %321
  br i1 %322, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %314, %originalBB63alteredBB
  %323 = load i8, i8* @just_context, align 1, !dbg !574
  %324 = trunc i8 %323 to i1, !dbg !574
  %325 = load i32, i32* @x.3
  %326 = load i32, i32* @y.4
  %327 = sub i32 %325, 1
  %328 = mul i32 %325, %327
  %329 = urem i32 %328, 2
  %330 = icmp eq i32 %329, 0
  %331 = icmp slt i32 %326, 10
  %332 = or i1 %330, %331
  br i1 %332, label %originalBBpart265, label %originalBB63alteredBB

originalBBpart265:                                ; preds = %originalBB63
  br i1 %324, label %333, label %351, !dbg !575

333:                                              ; preds = %originalBBpart265
  %334 = load i32, i32* @x.3
  %335 = load i32, i32* @y.4
  %336 = sub i32 %334, 1
  %337 = mul i32 %334, %336
  %338 = urem i32 %337, 2
  %339 = icmp eq i32 %338, 0
  %340 = icmp slt i32 %335, 10
  %341 = or i1 %339, %340
  br i1 %341, label %originalBB67, label %originalBB67alteredBB

originalBB67:                                     ; preds = %333, %originalBB67alteredBB
  %342 = call i8* @gettext(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !576
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %342), !dbg !576
  %343 = load i32, i32* @x.3
  %344 = load i32, i32* @y.4
  %345 = sub i32 %343, 1
  %346 = mul i32 %343, %345
  %347 = urem i32 %346, 2
  %348 = icmp eq i32 %347, 0
  %349 = icmp slt i32 %344, 10
  %350 = or i1 %348, %349
  br i1 %350, label %originalBBpart269, label %originalBB67alteredBB

originalBBpart269:                                ; preds = %originalBB67
  unreachable, !dbg !576

351:                                              ; preds = %originalBBpart265, %originalBBpart261
  %352 = load i32, i32* @x.3
  %353 = load i32, i32* @y.4
  %354 = sub i32 %352, 1
  %355 = mul i32 %352, %354
  %356 = urem i32 %355, 2
  %357 = icmp eq i32 %356, 0
  %358 = icmp slt i32 %353, 10
  %359 = or i1 %357, %358
  br i1 %359, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %351, %originalBB71alteredBB
  %360 = load i8, i8* @just_user, align 1, !dbg !577
  %361 = trunc i8 %360 to i1, !dbg !577
  %362 = zext i1 %361 to i32, !dbg !577
  %363 = load i8, i8* @just_group, align 1, !dbg !579
  %364 = trunc i8 %363 to i1, !dbg !579
  %365 = zext i1 %364 to i32, !dbg !579
  %366 = add nsw i32 %362, %365, !dbg !580
  %367 = load i8, i8* @just_group_list, align 1, !dbg !581
  %368 = trunc i8 %367 to i1, !dbg !581
  %369 = zext i1 %368 to i32, !dbg !581
  %370 = add nsw i32 %366, %369, !dbg !582
  %371 = load i8, i8* @just_context, align 1, !dbg !583
  %372 = trunc i8 %371 to i1, !dbg !583
  %373 = zext i1 %372 to i32, !dbg !583
  %374 = add nsw i32 %370, %373, !dbg !584
  %375 = icmp sgt i32 %374, 1, !dbg !585
  %376 = load i32, i32* @x.3
  %377 = load i32, i32* @y.4
  %378 = sub i32 %376, 1
  %379 = mul i32 %376, %378
  %380 = urem i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %381, %382
  br i1 %383, label %originalBBpart285, label %originalBB71alteredBB

originalBBpart285:                                ; preds = %originalBB71
  br i1 %375, label %384, label %402, !dbg !586

384:                                              ; preds = %originalBBpart285
  %385 = load i32, i32* @x.3
  %386 = load i32, i32* @y.4
  %387 = sub i32 %385, 1
  %388 = mul i32 %385, %387
  %389 = urem i32 %388, 2
  %390 = icmp eq i32 %389, 0
  %391 = icmp slt i32 %386, 10
  %392 = or i1 %390, %391
  br i1 %392, label %originalBB87, label %originalBB87alteredBB

originalBB87:                                     ; preds = %384, %originalBB87alteredBB
  %393 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.17, i64 0, i64 0)) #10, !dbg !587
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %393), !dbg !587
  %394 = load i32, i32* @x.3
  %395 = load i32, i32* @y.4
  %396 = sub i32 %394, 1
  %397 = mul i32 %394, %396
  %398 = urem i32 %397, 2
  %399 = icmp eq i32 %398, 0
  %400 = icmp slt i32 %395, 10
  %401 = or i1 %399, %400
  br i1 %401, label %originalBBpart289, label %originalBB87alteredBB

originalBBpart289:                                ; preds = %originalBB87
  unreachable, !dbg !587

402:                                              ; preds = %originalBBpart285
  call void @llvm.dbg.declare(metadata i8* %19, metadata !588, metadata !DIExpression()), !dbg !589
  %403 = load i32, i32* @x.3
  %404 = load i32, i32* @y.4
  %405 = sub i32 %403, 1
  %406 = mul i32 %403, %405
  %407 = urem i32 %406, 2
  %408 = icmp eq i32 %407, 0
  %409 = icmp slt i32 %404, 10
  %410 = or i1 %408, %409
  br i1 %410, label %originalBB91, label %originalBB91alteredBB

originalBB91:                                     ; preds = %402, %originalBB91alteredBB
  %411 = load i8, i8* @just_user, align 1, !dbg !590
  %412 = trunc i8 %411 to i1, !dbg !590
  %413 = load i32, i32* @x.3
  %414 = load i32, i32* @y.4
  %415 = sub i32 %413, 1
  %416 = mul i32 %413, %415
  %417 = urem i32 %416, 2
  %418 = icmp eq i32 %417, 0
  %419 = icmp slt i32 %414, 10
  %420 = or i1 %418, %419
  br i1 %420, label %originalBBpart293, label %originalBB91alteredBB

originalBBpart293:                                ; preds = %originalBB91
  br i1 %412, label %462, label %421, !dbg !591

421:                                              ; preds = %originalBBpart293
  %422 = load i32, i32* @x.3
  %423 = load i32, i32* @y.4
  %424 = sub i32 %422, 1
  %425 = mul i32 %422, %424
  %426 = urem i32 %425, 2
  %427 = icmp eq i32 %426, 0
  %428 = icmp slt i32 %423, 10
  %429 = or i1 %427, %428
  br i1 %429, label %originalBB95, label %originalBB95alteredBB

originalBB95:                                     ; preds = %421, %originalBB95alteredBB
  %430 = load i8, i8* @just_group, align 1, !dbg !592
  %431 = trunc i8 %430 to i1, !dbg !592
  %432 = load i32, i32* @x.3
  %433 = load i32, i32* @y.4
  %434 = sub i32 %432, 1
  %435 = mul i32 %432, %434
  %436 = urem i32 %435, 2
  %437 = icmp eq i32 %436, 0
  %438 = icmp slt i32 %433, 10
  %439 = or i1 %437, %438
  br i1 %439, label %originalBBpart297, label %originalBB95alteredBB

originalBBpart297:                                ; preds = %originalBB95
  br i1 %431, label %462, label %440, !dbg !593

440:                                              ; preds = %originalBBpart297
  %441 = load i32, i32* @x.3
  %442 = load i32, i32* @y.4
  %443 = sub i32 %441, 1
  %444 = mul i32 %441, %443
  %445 = urem i32 %444, 2
  %446 = icmp eq i32 %445, 0
  %447 = icmp slt i32 %442, 10
  %448 = or i1 %446, %447
  br i1 %448, label %originalBB99, label %originalBB99alteredBB

originalBB99:                                     ; preds = %440, %originalBB99alteredBB
  %449 = load i8, i8* @just_group_list, align 1, !dbg !594
  %450 = trunc i8 %449 to i1, !dbg !594
  %451 = load i32, i32* @x.3
  %452 = load i32, i32* @y.4
  %453 = sub i32 %451, 1
  %454 = mul i32 %451, %453
  %455 = urem i32 %454, 2
  %456 = icmp eq i32 %455, 0
  %457 = icmp slt i32 %452, 10
  %458 = or i1 %456, %457
  br i1 %458, label %originalBBpart2101, label %originalBB99alteredBB

originalBBpart2101:                               ; preds = %originalBB99
  br i1 %450, label %462, label %459, !dbg !595

459:                                              ; preds = %originalBBpart2101
  %460 = load i8, i8* @just_context, align 1, !dbg !596
  %461 = trunc i8 %460 to i1, !dbg !596
  br label %462, !dbg !595

462:                                              ; preds = %459, %originalBBpart2101, %originalBBpart297, %originalBBpart293
  %463 = phi i1 [ true, %originalBBpart2101 ], [ true, %originalBBpart297 ], [ true, %originalBBpart293 ], [ %461, %459 ]
  %464 = xor i1 %463, true, !dbg !597
  %465 = zext i1 %464 to i8, !dbg !589
  store i8 %465, i8* %19, align 1, !dbg !589
  %466 = load i8, i8* %19, align 1, !dbg !598
  %467 = trunc i8 %466 to i1, !dbg !598
  br i1 %467, label %468, label %524, !dbg !600

468:                                              ; preds = %462
  %469 = load i32, i32* @x.3
  %470 = load i32, i32* @y.4
  %471 = sub i32 %469, 1
  %472 = mul i32 %469, %471
  %473 = urem i32 %472, 2
  %474 = icmp eq i32 %473, 0
  %475 = icmp slt i32 %470, 10
  %476 = or i1 %474, %475
  br i1 %476, label %originalBB103, label %originalBB103alteredBB

originalBB103:                                    ; preds = %468, %originalBB103alteredBB
  %477 = load i8, i8* @use_real, align 1, !dbg !601
  %478 = trunc i8 %477 to i1, !dbg !601
  %479 = load i32, i32* @x.3
  %480 = load i32, i32* @y.4
  %481 = sub i32 %479, 1
  %482 = mul i32 %479, %481
  %483 = urem i32 %482, 2
  %484 = icmp eq i32 %483, 0
  %485 = icmp slt i32 %480, 10
  %486 = or i1 %484, %485
  br i1 %486, label %originalBBpart2105, label %originalBB103alteredBB

originalBBpart2105:                               ; preds = %originalBB103
  br i1 %478, label %506, label %487, !dbg !602

487:                                              ; preds = %originalBBpart2105
  %488 = load i32, i32* @x.3
  %489 = load i32, i32* @y.4
  %490 = sub i32 %488, 1
  %491 = mul i32 %488, %490
  %492 = urem i32 %491, 2
  %493 = icmp eq i32 %492, 0
  %494 = icmp slt i32 %489, 10
  %495 = or i1 %493, %494
  br i1 %495, label %originalBB107, label %originalBB107alteredBB

originalBB107:                                    ; preds = %487, %originalBB107alteredBB
  %496 = load i8, i8* @use_name, align 1, !dbg !603
  %497 = trunc i8 %496 to i1, !dbg !603
  %498 = load i32, i32* @x.3
  %499 = load i32, i32* @y.4
  %500 = sub i32 %498, 1
  %501 = mul i32 %498, %500
  %502 = urem i32 %501, 2
  %503 = icmp eq i32 %502, 0
  %504 = icmp slt i32 %499, 10
  %505 = or i1 %503, %504
  br i1 %505, label %originalBBpart2109, label %originalBB107alteredBB

originalBBpart2109:                               ; preds = %originalBB107
  br i1 %497, label %506, label %524, !dbg !604

506:                                              ; preds = %originalBBpart2109, %originalBBpart2105
  %507 = load i32, i32* @x.3
  %508 = load i32, i32* @y.4
  %509 = sub i32 %507, 1
  %510 = mul i32 %507, %509
  %511 = urem i32 %510, 2
  %512 = icmp eq i32 %511, 0
  %513 = icmp slt i32 %508, 10
  %514 = or i1 %512, %513
  br i1 %514, label %originalBB111, label %originalBB111alteredBB

originalBB111:                                    ; preds = %506, %originalBB111alteredBB
  %515 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.18, i64 0, i64 0)) #10, !dbg !605
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %515), !dbg !605
  %516 = load i32, i32* @x.3
  %517 = load i32, i32* @y.4
  %518 = sub i32 %516, 1
  %519 = mul i32 %516, %518
  %520 = urem i32 %519, 2
  %521 = icmp eq i32 %520, 0
  %522 = icmp slt i32 %517, 10
  %523 = or i1 %521, %522
  br i1 %523, label %originalBBpart2113, label %originalBB111alteredBB

originalBBpart2113:                               ; preds = %originalBB111
  unreachable, !dbg !605

524:                                              ; preds = %originalBBpart2109, %462
  %525 = load i32, i32* @x.3
  %526 = load i32, i32* @y.4
  %527 = sub i32 %525, 1
  %528 = mul i32 %525, %527
  %529 = urem i32 %528, 2
  %530 = icmp eq i32 %529, 0
  %531 = icmp slt i32 %526, 10
  %532 = or i1 %530, %531
  br i1 %532, label %originalBB115, label %originalBB115alteredBB

originalBB115:                                    ; preds = %524, %originalBB115alteredBB
  %533 = load i8, i8* %19, align 1, !dbg !606
  %534 = trunc i8 %533 to i1, !dbg !606
  %535 = load i32, i32* @x.3
  %536 = load i32, i32* @y.4
  %537 = sub i32 %535, 1
  %538 = mul i32 %535, %537
  %539 = urem i32 %538, 2
  %540 = icmp eq i32 %539, 0
  %541 = icmp slt i32 %536, 10
  %542 = or i1 %540, %541
  br i1 %542, label %originalBBpart2117, label %originalBB115alteredBB

originalBBpart2117:                               ; preds = %originalBB115
  br i1 %534, label %543, label %580, !dbg !608

543:                                              ; preds = %originalBBpart2117
  %544 = load i32, i32* @x.3
  %545 = load i32, i32* @y.4
  %546 = sub i32 %544, 1
  %547 = mul i32 %544, %546
  %548 = urem i32 %547, 2
  %549 = icmp eq i32 %548, 0
  %550 = icmp slt i32 %545, 10
  %551 = or i1 %549, %550
  br i1 %551, label %originalBB119, label %originalBB119alteredBB

originalBB119:                                    ; preds = %543, %originalBB119alteredBB
  %552 = load i8, i8* @opt_zero, align 1, !dbg !609
  %553 = trunc i8 %552 to i1, !dbg !609
  %554 = load i32, i32* @x.3
  %555 = load i32, i32* @y.4
  %556 = sub i32 %554, 1
  %557 = mul i32 %554, %556
  %558 = urem i32 %557, 2
  %559 = icmp eq i32 %558, 0
  %560 = icmp slt i32 %555, 10
  %561 = or i1 %559, %560
  br i1 %561, label %originalBBpart2121, label %originalBB119alteredBB

originalBBpart2121:                               ; preds = %originalBB119
  br i1 %553, label %562, label %580, !dbg !610

562:                                              ; preds = %originalBBpart2121
  %563 = load i32, i32* @x.3
  %564 = load i32, i32* @y.4
  %565 = sub i32 %563, 1
  %566 = mul i32 %563, %565
  %567 = urem i32 %566, 2
  %568 = icmp eq i32 %567, 0
  %569 = icmp slt i32 %564, 10
  %570 = or i1 %568, %569
  br i1 %570, label %originalBB123, label %originalBB123alteredBB

originalBB123:                                    ; preds = %562, %originalBB123alteredBB
  %571 = call i8* @gettext(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.19, i64 0, i64 0)) #10, !dbg !611
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %571), !dbg !611
  %572 = load i32, i32* @x.3
  %573 = load i32, i32* @y.4
  %574 = sub i32 %572, 1
  %575 = mul i32 %572, %574
  %576 = urem i32 %575, 2
  %577 = icmp eq i32 %576, 0
  %578 = icmp slt i32 %573, 10
  %579 = or i1 %577, %578
  br i1 %579, label %originalBBpart2125, label %originalBB123alteredBB

originalBBpart2125:                               ; preds = %originalBB123
  unreachable, !dbg !611

580:                                              ; preds = %originalBBpart2121, %originalBBpart2117
  %581 = load i32, i32* @x.3
  %582 = load i32, i32* @y.4
  %583 = sub i32 %581, 1
  %584 = mul i32 %581, %583
  %585 = urem i32 %584, 2
  %586 = icmp eq i32 %585, 0
  %587 = icmp slt i32 %582, 10
  %588 = or i1 %586, %587
  br i1 %588, label %originalBB127, label %originalBB127alteredBB

originalBB127:                                    ; preds = %580, %originalBB127alteredBB
  %589 = load i64, i64* %18, align 8, !dbg !612
  %590 = load i32, i32* @x.3
  %591 = load i32, i32* @y.4
  %592 = sub i32 %590, 1
  %593 = mul i32 %590, %592
  %594 = urem i32 %593, 2
  %595 = icmp eq i32 %594, 0
  %596 = icmp slt i32 %591, 10
  %597 = or i1 %595, %596
  br i1 %597, label %originalBBpart2129, label %originalBB127alteredBB

originalBBpart2129:                               ; preds = %originalBB127
  br label %598, !dbg !614

598:                                              ; preds = %originalBBpart2129
  %599 = load i32, i32* @x.3
  %600 = load i32, i32* @y.4
  %601 = sub i32 %599, 1
  %602 = mul i32 %599, %601
  %603 = urem i32 %602, 2
  %604 = icmp eq i32 %603, 0
  %605 = icmp slt i32 %600, 10
  %606 = or i1 %604, %605
  br i1 %606, label %originalBB131, label %originalBB131alteredBB

originalBB131:                                    ; preds = %598, %originalBB131alteredBB
  %collatzVar = alloca i32
  %607 = load i32, i32* @x.3
  %608 = load i32, i32* @y.4
  %609 = sub i32 %607, 1
  %610 = mul i32 %607, %609
  %611 = urem i32 %610, 2
  %612 = icmp eq i32 %611, 0
  %613 = icmp slt i32 %608, 10
  %614 = or i1 %612, %613
  br i1 %614, label %originalBBpart2133, label %originalBB131alteredBB

originalBBpart2133:                               ; preds = %originalBB131
  br label %615

615:                                              ; preds = %originalBBpart2133
  %616 = load i32, i32* @inVal0
  %617 = icmp sgt i32 %616, 1
  br i1 %617, label %635, label %618

618:                                              ; preds = %615
  %619 = load i32, i32* @x.3
  %620 = load i32, i32* @y.4
  %621 = sub i32 %619, 1
  %622 = mul i32 %619, %621
  %623 = urem i32 %622, 2
  %624 = icmp eq i32 %623, 0
  %625 = icmp slt i32 %620, 10
  %626 = or i1 %624, %625
  br i1 %626, label %originalBB135, label %originalBB135alteredBB

originalBB135:                                    ; preds = %618, %originalBB135alteredBB
  store i32 88, i32* %collatzVar
  %627 = load i32, i32* @x.3
  %628 = load i32, i32* @y.4
  %629 = sub i32 %627, 1
  %630 = mul i32 %627, %629
  %631 = urem i32 %630, 2
  %632 = icmp eq i32 %631, 0
  %633 = icmp slt i32 %628, 10
  %634 = or i1 %632, %633
  br i1 %634, label %originalBBpart2137, label %originalBB135alteredBB

originalBBpart2137:                               ; preds = %originalBB135
  br label %635

635:                                              ; preds = %originalBBpart2137, %615
  %636 = load i32, i32* @x.3
  %637 = load i32, i32* @y.4
  %638 = sub i32 %636, 1
  %639 = mul i32 %636, %638
  %640 = urem i32 %639, 2
  %641 = icmp eq i32 %640, 0
  %642 = icmp slt i32 %637, 10
  %643 = or i1 %641, %642
  br i1 %643, label %originalBB139, label %originalBB139alteredBB

originalBB139:                                    ; preds = %635, %originalBB139alteredBB
  %644 = load i8**, i8*** @inVal1
  %645 = getelementptr inbounds i8*, i8** %644, i64 1
  %646 = load i8*, i8** %645
  %647 = trunc i64 0 to i32
  %controle = call i32 @controle(i8* %646, i32 %647)
  store i32 %controle, i32* %collatzVar
  %648 = load i32, i32* @x.3
  %649 = load i32, i32* @y.4
  %650 = sub i32 %648, 1
  %651 = mul i32 %648, %650
  %652 = urem i32 %651, 2
  %653 = icmp eq i32 %652, 0
  %654 = icmp slt i32 %649, 10
  %655 = or i1 %653, %654
  br i1 %655, label %originalBBpart2141, label %originalBB139alteredBB

originalBBpart2141:                               ; preds = %originalBB139
  br label %656

656:                                              ; preds = %originalBBpart2197, %originalBBpart2191, %originalBBpart2141
  %657 = load i32, i32* @x.3
  %658 = load i32, i32* @y.4
  %659 = sub i32 %657, 1
  %660 = mul i32 %657, %659
  %661 = urem i32 %660, 2
  %662 = icmp eq i32 %661, 0
  %663 = icmp slt i32 %658, 10
  %664 = or i1 %662, %663
  br i1 %664, label %originalBB143, label %originalBB143alteredBB

originalBB143:                                    ; preds = %656, %originalBB143alteredBB
  %665 = load i32, i32* %collatzVar
  %666 = icmp sgt i32 %665, 1
  %667 = load i32, i32* @x.3
  %668 = load i32, i32* @y.4
  %669 = sub i32 %667, 1
  %670 = mul i32 %667, %669
  %671 = urem i32 %670, 2
  %672 = icmp eq i32 %671, 0
  %673 = icmp slt i32 %668, 10
  %674 = or i1 %672, %673
  br i1 %674, label %originalBBpart2145, label %originalBB143alteredBB

originalBBpart2145:                               ; preds = %originalBB143
  br i1 %666, label %675, label %968

675:                                              ; preds = %originalBBpart2145
  %676 = load i32, i32* @x.3
  %677 = load i32, i32* @y.4
  %678 = sub i32 %676, 1
  %679 = mul i32 %676, %678
  %680 = urem i32 %679, 2
  %681 = icmp eq i32 %680, 0
  %682 = icmp slt i32 %677, 10
  %683 = or i1 %681, %682
  br i1 %683, label %originalBB147, label %originalBB147alteredBB

originalBB147:                                    ; preds = %675, %originalBB147alteredBB
  %684 = load i32, i32* %collatzVar
  %685 = srem i32 %684, 2
  %686 = icmp eq i32 %685, 0
  %687 = load i32, i32* @x.3
  %688 = load i32, i32* @y.4
  %689 = sub i32 %687, 1
  %690 = mul i32 %687, %689
  %691 = urem i32 %690, 2
  %692 = icmp eq i32 %691, 0
  %693 = icmp slt i32 %688, 10
  %694 = or i1 %692, %693
  br i1 %694, label %originalBBpart2157, label %originalBB147alteredBB

originalBBpart2157:                               ; preds = %originalBB147
  br i1 %686, label %695, label %714

695:                                              ; preds = %originalBBpart2157
  %696 = load i32, i32* @x.3
  %697 = load i32, i32* @y.4
  %698 = sub i32 %696, 1
  %699 = mul i32 %696, %698
  %700 = urem i32 %699, 2
  %701 = icmp eq i32 %700, 0
  %702 = icmp slt i32 %697, 10
  %703 = or i1 %701, %702
  br i1 %703, label %originalBB159, label %originalBB159alteredBB

originalBB159:                                    ; preds = %695, %originalBB159alteredBB
  %704 = load i32, i32* %collatzVar
  %705 = sdiv i32 %704, 2
  store i32 %705, i32* %collatzVar
  %706 = load i32, i32* @x.3
  %707 = load i32, i32* @y.4
  %708 = sub i32 %706, 1
  %709 = mul i32 %706, %708
  %710 = urem i32 %709, 2
  %711 = icmp eq i32 %710, 0
  %712 = icmp slt i32 %707, 10
  %713 = or i1 %711, %712
  br i1 %713, label %originalBBpart2163, label %originalBB159alteredBB

originalBBpart2163:                               ; preds = %originalBB159
  br label %734

714:                                              ; preds = %originalBBpart2157
  %715 = load i32, i32* @x.3
  %716 = load i32, i32* @y.4
  %717 = sub i32 %715, 1
  %718 = mul i32 %715, %717
  %719 = urem i32 %718, 2
  %720 = icmp eq i32 %719, 0
  %721 = icmp slt i32 %716, 10
  %722 = or i1 %720, %721
  br i1 %722, label %originalBB165, label %originalBB165alteredBB

originalBB165:                                    ; preds = %714, %originalBB165alteredBB
  %723 = load i32, i32* %collatzVar
  %724 = mul i32 %723, 3
  %725 = add i32 %724, 1
  store i32 %725, i32* %collatzVar
  %726 = load i32, i32* @x.3
  %727 = load i32, i32* @y.4
  %728 = sub i32 %726, 1
  %729 = mul i32 %726, %728
  %730 = urem i32 %729, 2
  %731 = icmp eq i32 %730, 0
  %732 = icmp slt i32 %727, 10
  %733 = or i1 %731, %732
  br i1 %733, label %originalBBpart2180, label %originalBB165alteredBB

originalBBpart2180:                               ; preds = %originalBB165
  br label %734

734:                                              ; preds = %originalBBpart2180, %originalBBpart2163
  %735 = load i32, i32* @x.3
  %736 = load i32, i32* @y.4
  %737 = sub i32 %735, 1
  %738 = mul i32 %735, %737
  %739 = urem i32 %738, 2
  %740 = icmp eq i32 %739, 0
  %741 = icmp slt i32 %736, 10
  %742 = or i1 %740, %741
  br i1 %742, label %originalBB182, label %originalBB182alteredBB

originalBB182:                                    ; preds = %734, %originalBB182alteredBB
  %743 = load i32, i32* %collatzVar
  %744 = sext i32 %743 to i64
  %745 = sext i32 -2 to i64
  %746 = sub i64 %589, %744
  %747 = icmp sgt i64 %746, %745
  %748 = load i32, i32* @x.3
  %749 = load i32, i32* @y.4
  %750 = sub i32 %748, 1
  %751 = mul i32 %748, %750
  %752 = urem i32 %751, 2
  %753 = icmp eq i32 %752, 0
  %754 = icmp slt i32 %749, 10
  %755 = or i1 %753, %754
  br i1 %755, label %originalBBpart2191, label %originalBB182alteredBB

originalBBpart2191:                               ; preds = %originalBB182
  br i1 %747, label %756, label %656

756:                                              ; preds = %originalBBpart2191
  %757 = load i32, i32* @x.3
  %758 = load i32, i32* @y.4
  %759 = sub i32 %757, 1
  %760 = mul i32 %757, %759
  %761 = urem i32 %760, 2
  %762 = icmp eq i32 %761, 0
  %763 = icmp slt i32 %758, 10
  %764 = or i1 %762, %763
  br i1 %764, label %originalBB193, label %originalBB193alteredBB

originalBB193:                                    ; preds = %756, %originalBB193alteredBB
  %765 = load i32, i32* %collatzVar
  %766 = sext i32 %765 to i64
  %767 = sext i32 2 to i64
  %768 = add i64 %589, %766
  %769 = icmp slt i64 %768, %767
  %770 = load i32, i32* @x.3
  %771 = load i32, i32* @y.4
  %772 = sub i32 %770, 1
  %773 = mul i32 %770, %772
  %774 = urem i32 %773, 2
  %775 = icmp eq i32 %774, 0
  %776 = icmp slt i32 %771, 10
  %777 = or i1 %775, %776
  br i1 %777, label %originalBBpart2197, label %originalBB193alteredBB

originalBBpart2197:                               ; preds = %originalBB193
  br i1 %769, label %778, label %656

778:                                              ; preds = %originalBBpart2197
  %779 = load i32, i32* @x.3
  %780 = load i32, i32* @y.4
  %781 = sub i32 %779, 1
  %782 = mul i32 %779, %781
  %783 = urem i32 %782, 2
  %784 = icmp eq i32 %783, 0
  %785 = icmp slt i32 %780, 10
  %786 = or i1 %784, %785
  br i1 %786, label %originalBB199, label %originalBB199alteredBB

originalBB199:                                    ; preds = %778, %originalBB199alteredBB
  %787 = load i8, i8* @just_context, align 1, !dbg !615
  %788 = trunc i8 %787 to i1, !dbg !615
  %789 = load i32, i32* @x.3
  %790 = load i32, i32* @y.4
  %791 = sub i32 %789, 1
  %792 = mul i32 %789, %791
  %793 = urem i32 %792, 2
  %794 = icmp eq i32 %793, 0
  %795 = icmp slt i32 %790, 10
  %796 = or i1 %794, %795
  br i1 %796, label %originalBBpart2201, label %originalBB199alteredBB

originalBBpart2201:                               ; preds = %originalBB199
  br i1 %788, label %835, label %797, !dbg !616

797:                                              ; preds = %originalBBpart2201
  %798 = load i32, i32* @x.3
  %799 = load i32, i32* @y.4
  %800 = sub i32 %798, 1
  %801 = mul i32 %798, %800
  %802 = urem i32 %801, 2
  %803 = icmp eq i32 %802, 0
  %804 = icmp slt i32 %799, 10
  %805 = or i1 %803, %804
  br i1 %805, label %originalBB203, label %originalBB203alteredBB

originalBB203:                                    ; preds = %797, %originalBB203alteredBB
  %806 = load i8, i8* %19, align 1, !dbg !617
  %807 = trunc i8 %806 to i1, !dbg !617
  %808 = load i32, i32* @x.3
  %809 = load i32, i32* @y.4
  %810 = sub i32 %808, 1
  %811 = mul i32 %808, %810
  %812 = urem i32 %811, 2
  %813 = icmp eq i32 %812, 0
  %814 = icmp slt i32 %809, 10
  %815 = or i1 %813, %814
  br i1 %815, label %originalBBpart2205, label %originalBB203alteredBB

originalBBpart2205:                               ; preds = %originalBB203
  br i1 %807, label %816, label %968, !dbg !618

816:                                              ; preds = %originalBBpart2205
  %817 = load i32, i32* @x.3
  %818 = load i32, i32* @y.4
  %819 = sub i32 %817, 1
  %820 = mul i32 %817, %819
  %821 = urem i32 %820, 2
  %822 = icmp eq i32 %821, 0
  %823 = icmp slt i32 %818, 10
  %824 = or i1 %822, %823
  br i1 %824, label %originalBB207, label %originalBB207alteredBB

originalBB207:                                    ; preds = %816, %originalBB207alteredBB
  %825 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0)) #10, !dbg !619
  %826 = icmp ne i8* %825, null, !dbg !619
  %827 = load i32, i32* @x.3
  %828 = load i32, i32* @y.4
  %829 = sub i32 %827, 1
  %830 = mul i32 %827, %829
  %831 = urem i32 %830, 2
  %832 = icmp eq i32 %831, 0
  %833 = icmp slt i32 %828, 10
  %834 = or i1 %832, %833
  br i1 %834, label %originalBBpart2209, label %originalBB207alteredBB

originalBBpart2209:                               ; preds = %originalBB207
  br i1 %826, label %968, label %835, !dbg !620

835:                                              ; preds = %originalBBpart2209, %originalBBpart2201
  %836 = load i32, i32* @x.3
  %837 = load i32, i32* @y.4
  %838 = sub i32 %836, 1
  %839 = mul i32 %836, %838
  %840 = urem i32 %839, 2
  %841 = icmp eq i32 %840, 0
  %842 = icmp slt i32 %837, 10
  %843 = or i1 %841, %842
  br i1 %843, label %originalBB211, label %originalBB211alteredBB

originalBB211:                                    ; preds = %835, %originalBB211alteredBB
  %844 = load i32, i32* %15, align 4, !dbg !621
  %845 = icmp ne i32 %844, 0, !dbg !621
  %846 = load i32, i32* @x.3
  %847 = load i32, i32* @y.4
  %848 = sub i32 %846, 1
  %849 = mul i32 %846, %848
  %850 = urem i32 %849, 2
  %851 = icmp eq i32 %850, 0
  %852 = icmp slt i32 %847, 10
  %853 = or i1 %851, %852
  br i1 %853, label %originalBBpart2213, label %originalBB211alteredBB

originalBBpart2213:                               ; preds = %originalBB211
  br i1 %845, label %854, label %892, !dbg !624

854:                                              ; preds = %originalBBpart2213
  %855 = load i32, i32* @x.3
  %856 = load i32, i32* @y.4
  %857 = sub i32 %855, 1
  %858 = mul i32 %855, %857
  %859 = urem i32 %858, 2
  %860 = icmp eq i32 %859, 0
  %861 = icmp slt i32 %856, 10
  %862 = or i1 %860, %861
  br i1 %862, label %originalBB215, label %originalBB215alteredBB

originalBB215:                                    ; preds = %854, %originalBB215alteredBB
  %863 = call i32 @getcon(i8** @context), !dbg !625
  %864 = icmp ne i32 %863, 0, !dbg !625
  %865 = load i32, i32* @x.3
  %866 = load i32, i32* @y.4
  %867 = sub i32 %865, 1
  %868 = mul i32 %865, %867
  %869 = urem i32 %868, 2
  %870 = icmp eq i32 %869, 0
  %871 = icmp slt i32 %866, 10
  %872 = or i1 %870, %871
  br i1 %872, label %originalBBpart2217, label %originalBB215alteredBB

originalBBpart2217:                               ; preds = %originalBB215
  br i1 %864, label %873, label %892, !dbg !626

873:                                              ; preds = %originalBBpart2217
  %874 = load i32, i32* @x.3
  %875 = load i32, i32* @y.4
  %876 = sub i32 %874, 1
  %877 = mul i32 %874, %876
  %878 = urem i32 %877, 2
  %879 = icmp eq i32 %878, 0
  %880 = icmp slt i32 %875, 10
  %881 = or i1 %879, %880
  br i1 %881, label %originalBB219, label %originalBB219alteredBB

originalBB219:                                    ; preds = %873, %originalBB219alteredBB
  %882 = load i8, i8* @just_context, align 1, !dbg !627
  %883 = trunc i8 %882 to i1, !dbg !627
  %884 = load i32, i32* @x.3
  %885 = load i32, i32* @y.4
  %886 = sub i32 %884, 1
  %887 = mul i32 %884, %886
  %888 = urem i32 %887, 2
  %889 = icmp eq i32 %888, 0
  %890 = icmp slt i32 %885, 10
  %891 = or i1 %889, %890
  br i1 %891, label %originalBBpart2221, label %originalBB219alteredBB

originalBBpart2221:                               ; preds = %originalBB219
  br i1 %883, label %949, label %892, !dbg !628

892:                                              ; preds = %originalBBpart2221, %originalBBpart2217, %originalBBpart2213
  %893 = load i32, i32* @x.3
  %894 = load i32, i32* @y.4
  %895 = sub i32 %893, 1
  %896 = mul i32 %893, %895
  %897 = urem i32 %896, 2
  %898 = icmp eq i32 %897, 0
  %899 = icmp slt i32 %894, 10
  %900 = or i1 %898, %899
  br i1 %900, label %originalBB223, label %originalBB223alteredBB

originalBB223:                                    ; preds = %892, %originalBB223alteredBB
  %901 = load i8, i8* %16, align 1, !dbg !629
  %902 = trunc i8 %901 to i1, !dbg !629
  %903 = load i32, i32* @x.3
  %904 = load i32, i32* @y.4
  %905 = sub i32 %903, 1
  %906 = mul i32 %903, %905
  %907 = urem i32 %906, 2
  %908 = icmp eq i32 %907, 0
  %909 = icmp slt i32 %904, 10
  %910 = or i1 %908, %909
  br i1 %910, label %originalBBpart2225, label %originalBB223alteredBB

originalBBpart2225:                               ; preds = %originalBB223
  br i1 %902, label %911, label %951, !dbg !630

911:                                              ; preds = %originalBBpart2225
  %912 = load i32, i32* @x.3
  %913 = load i32, i32* @y.4
  %914 = sub i32 %912, 1
  %915 = mul i32 %912, %914
  %916 = urem i32 %915, 2
  %917 = icmp eq i32 %916, 0
  %918 = icmp slt i32 %913, 10
  %919 = or i1 %917, %918
  br i1 %919, label %originalBB227, label %originalBB227alteredBB

originalBB227:                                    ; preds = %911, %originalBB227alteredBB
  %920 = call i64 @smack_new_label_from_self(i8** @context), !dbg !631
  %921 = icmp slt i64 %920, 0, !dbg !632
  %922 = load i32, i32* @x.3
  %923 = load i32, i32* @y.4
  %924 = sub i32 %922, 1
  %925 = mul i32 %922, %924
  %926 = urem i32 %925, 2
  %927 = icmp eq i32 %926, 0
  %928 = icmp slt i32 %923, 10
  %929 = or i1 %927, %928
  br i1 %929, label %originalBBpart2229, label %originalBB227alteredBB

originalBBpart2229:                               ; preds = %originalBB227
  br i1 %921, label %930, label %951, !dbg !633

930:                                              ; preds = %originalBBpart2229
  %931 = load i32, i32* @x.3
  %932 = load i32, i32* @y.4
  %933 = sub i32 %931, 1
  %934 = mul i32 %931, %933
  %935 = urem i32 %934, 2
  %936 = icmp eq i32 %935, 0
  %937 = icmp slt i32 %932, 10
  %938 = or i1 %936, %937
  br i1 %938, label %originalBB231, label %originalBB231alteredBB

originalBB231:                                    ; preds = %930, %originalBB231alteredBB
  %939 = load i8, i8* @just_context, align 1, !dbg !634
  %940 = trunc i8 %939 to i1, !dbg !634
  %941 = load i32, i32* @x.3
  %942 = load i32, i32* @y.4
  %943 = sub i32 %941, 1
  %944 = mul i32 %941, %943
  %945 = urem i32 %944, 2
  %946 = icmp eq i32 %945, 0
  %947 = icmp slt i32 %942, 10
  %948 = or i1 %946, %947
  br i1 %948, label %originalBBpart2233, label %originalBB231alteredBB

originalBBpart2233:                               ; preds = %originalBB231
  br i1 %940, label %949, label %951, !dbg !635

949:                                              ; preds = %originalBBpart2233, %originalBBpart2221
  %950 = call i8* @gettext(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.21, i64 0, i64 0)) #10, !dbg !636
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %950), !dbg !636
  unreachable, !dbg !636

951:                                              ; preds = %originalBBpart2233, %originalBBpart2229, %originalBBpart2225
  %952 = load i32, i32* @x.3
  %953 = load i32, i32* @y.4
  %954 = sub i32 %952, 1
  %955 = mul i32 %952, %954
  %956 = urem i32 %955, 2
  %957 = icmp eq i32 %956, 0
  %958 = icmp slt i32 %953, 10
  %959 = or i1 %957, %958
  br i1 %959, label %originalBB235, label %originalBB235alteredBB

originalBB235:                                    ; preds = %951, %originalBB235alteredBB
  %960 = load i32, i32* @x.3
  %961 = load i32, i32* @y.4
  %962 = sub i32 %960, 1
  %963 = mul i32 %960, %962
  %964 = urem i32 %963, 2
  %965 = icmp eq i32 %964, 0
  %966 = icmp slt i32 %961, 10
  %967 = or i1 %965, %966
  br i1 %967, label %originalBBpart2237, label %originalBB235alteredBB

originalBBpart2237:                               ; preds = %originalBB235
  br label %968, !dbg !637

968:                                              ; preds = %originalBBpart2237, %originalBBpart2209, %originalBBpart2205, %originalBBpart2145
  %969 = load i32, i32* @x.3
  %970 = load i32, i32* @y.4
  %971 = sub i32 %969, 1
  %972 = mul i32 %969, %971
  %973 = urem i32 %972, 2
  %974 = icmp eq i32 %973, 0
  %975 = icmp slt i32 %970, 10
  %976 = or i1 %974, %975
  br i1 %976, label %originalBB239, label %originalBB239alteredBB

originalBB239:                                    ; preds = %968, %originalBB239alteredBB
  %977 = load i64, i64* %18, align 8, !dbg !638
  %978 = icmp uge i64 %977, 1, !dbg !640
  %979 = load i32, i32* @x.3
  %980 = load i32, i32* @y.4
  %981 = sub i32 %979, 1
  %982 = mul i32 %979, %981
  %983 = urem i32 %982, 2
  %984 = icmp eq i32 %983, 0
  %985 = icmp slt i32 %980, 10
  %986 = or i1 %984, %985
  br i1 %986, label %originalBBpart2241, label %originalBB239alteredBB

originalBBpart2241:                               ; preds = %originalBB239
  br i1 %978, label %987, label %1216, !dbg !641

987:                                              ; preds = %originalBBpart2241
  %988 = load i64, i64* %18, align 8, !dbg !642
  %989 = icmp ugt i64 %988, 1, !dbg !644
  %990 = zext i1 %989 to i64, !dbg !642
  %991 = select i1 %989, i32 1, i32 0, !dbg !642
  %992 = icmp ne i32 %991, 0, !dbg !642
  %993 = zext i1 %992 to i8, !dbg !645
  store i8 %993, i8* @multiple_users, align 1, !dbg !645
  %994 = load i32, i32* @optind, align 4, !dbg !646
  %995 = sext i32 %994 to i64, !dbg !646
  %996 = load i64, i64* %18, align 8, !dbg !647
  %997 = add i64 %996, %995, !dbg !647
  store i64 %997, i64* %18, align 8, !dbg !647
  br label %998, !dbg !648

998:                                              ; preds = %originalBBpart2283, %987
  %999 = load i32, i32* @x.3
  %1000 = load i32, i32* @y.4
  %1001 = sub i32 %999, 1
  %1002 = mul i32 %999, %1001
  %1003 = urem i32 %1002, 2
  %1004 = icmp eq i32 %1003, 0
  %1005 = icmp slt i32 %1000, 10
  %1006 = or i1 %1004, %1005
  br i1 %1006, label %originalBB243, label %originalBB243alteredBB

originalBB243:                                    ; preds = %998, %originalBB243alteredBB
  %1007 = load i32, i32* @optind, align 4, !dbg !649
  %1008 = sext i32 %1007 to i64, !dbg !649
  %1009 = load i64, i64* %18, align 8, !dbg !652
  %1010 = icmp ult i64 %1008, %1009, !dbg !653
  %1011 = load i32, i32* @x.3
  %1012 = load i32, i32* @y.4
  %1013 = sub i32 %1011, 1
  %1014 = mul i32 %1011, %1013
  %1015 = urem i32 %1014, 2
  %1016 = icmp eq i32 %1015, 0
  %1017 = icmp slt i32 %1012, 10
  %1018 = or i1 %1016, %1017
  br i1 %1018, label %originalBBpart2245, label %originalBB243alteredBB

originalBBpart2245:                               ; preds = %originalBB243
  br i1 %1010, label %1019, label %1199, !dbg !654

1019:                                             ; preds = %originalBBpart2245
  call void @llvm.dbg.declare(metadata %struct.passwd** %20, metadata !655, metadata !DIExpression()), !dbg !668
  %1020 = load i32, i32* @x.3
  %1021 = load i32, i32* @y.4
  %1022 = sub i32 %1020, 1
  %1023 = mul i32 %1020, %1022
  %1024 = urem i32 %1023, 2
  %1025 = icmp eq i32 %1024, 0
  %1026 = icmp slt i32 %1021, 10
  %1027 = or i1 %1025, %1026
  br i1 %1027, label %originalBB247, label %originalBB247alteredBB

originalBB247:                                    ; preds = %1019, %originalBB247alteredBB
  store %struct.passwd* null, %struct.passwd** %20, align 8, !dbg !668
  call void @llvm.dbg.declare(metadata i8** %21, metadata !669, metadata !DIExpression()), !dbg !670
  %1028 = load i8**, i8*** %13, align 8, !dbg !671
  %1029 = load i32, i32* @optind, align 4, !dbg !672
  %1030 = sext i32 %1029 to i64, !dbg !671
  %1031 = getelementptr inbounds i8*, i8** %1028, i64 %1030, !dbg !671
  %1032 = load i8*, i8** %1031, align 8, !dbg !671
  store i8* %1032, i8** %21, align 8, !dbg !670
  %1033 = load i8*, i8** %21, align 8, !dbg !673
  %1034 = load i8, i8* %1033, align 1, !dbg !675
  %1035 = icmp ne i8 %1034, 0, !dbg !675
  %1036 = load i32, i32* @x.3
  %1037 = load i32, i32* @y.4
  %1038 = sub i32 %1036, 1
  %1039 = mul i32 %1036, %1038
  %1040 = urem i32 %1039, 2
  %1041 = icmp eq i32 %1040, 0
  %1042 = icmp slt i32 %1037, 10
  %1043 = or i1 %1041, %1042
  br i1 %1043, label %originalBBpart2249, label %originalBB247alteredBB

originalBBpart2249:                               ; preds = %originalBB247
  br i1 %1035, label %1044, label %1100, !dbg !676

1044:                                             ; preds = %originalBBpart2249
  %1045 = load i32, i32* @x.3
  %1046 = load i32, i32* @y.4
  %1047 = sub i32 %1045, 1
  %1048 = mul i32 %1045, %1047
  %1049 = urem i32 %1048, 2
  %1050 = icmp eq i32 %1049, 0
  %1051 = icmp slt i32 %1046, 10
  %1052 = or i1 %1050, %1051
  br i1 %1052, label %originalBB251, label %originalBB251alteredBB

originalBB251:                                    ; preds = %1044, %originalBB251alteredBB
  %1053 = load i8*, i8** %21, align 8, !dbg !677
  %1054 = call i8* @parse_user_spec(i8* %1053, i32* @euid, i32* null, i8** null, i8** null), !dbg !680
  %1055 = icmp eq i8* %1054, null, !dbg !681
  %1056 = load i32, i32* @x.3
  %1057 = load i32, i32* @y.4
  %1058 = sub i32 %1056, 1
  %1059 = mul i32 %1056, %1058
  %1060 = urem i32 %1059, 2
  %1061 = icmp eq i32 %1060, 0
  %1062 = icmp slt i32 %1057, 10
  %1063 = or i1 %1061, %1062
  br i1 %1063, label %originalBBpart2253, label %originalBB251alteredBB

originalBBpart2253:                               ; preds = %originalBB251
  br i1 %1055, label %1064, label %1083, !dbg !682

1064:                                             ; preds = %originalBBpart2253
  %1065 = load i32, i32* @x.3
  %1066 = load i32, i32* @y.4
  %1067 = sub i32 %1065, 1
  %1068 = mul i32 %1065, %1067
  %1069 = urem i32 %1068, 2
  %1070 = icmp eq i32 %1069, 0
  %1071 = icmp slt i32 %1066, 10
  %1072 = or i1 %1070, %1071
  br i1 %1072, label %originalBB255, label %originalBB255alteredBB

originalBB255:                                    ; preds = %1064, %originalBB255alteredBB
  %1073 = load i32, i32* @euid, align 4, !dbg !683
  %1074 = call %struct.passwd* @getpwuid(i32 %1073), !dbg !685
  store %struct.passwd* %1074, %struct.passwd** %20, align 8, !dbg !686
  %1075 = load i32, i32* @x.3
  %1076 = load i32, i32* @y.4
  %1077 = sub i32 %1075, 1
  %1078 = mul i32 %1075, %1077
  %1079 = urem i32 %1078, 2
  %1080 = icmp eq i32 %1079, 0
  %1081 = icmp slt i32 %1076, 10
  %1082 = or i1 %1080, %1081
  br i1 %1082, label %originalBBpart2257, label %originalBB255alteredBB

originalBBpart2257:                               ; preds = %originalBB255
  br label %1083, !dbg !687

1083:                                             ; preds = %originalBBpart2257, %originalBBpart2253
  %1084 = load i32, i32* @x.3
  %1085 = load i32, i32* @y.4
  %1086 = sub i32 %1084, 1
  %1087 = mul i32 %1084, %1086
  %1088 = urem i32 %1087, 2
  %1089 = icmp eq i32 %1088, 0
  %1090 = icmp slt i32 %1085, 10
  %1091 = or i1 %1089, %1090
  br i1 %1091, label %originalBB259, label %originalBB259alteredBB

originalBB259:                                    ; preds = %1083, %originalBB259alteredBB
  %1092 = load i32, i32* @x.3
  %1093 = load i32, i32* @y.4
  %1094 = sub i32 %1092, 1
  %1095 = mul i32 %1092, %1094
  %1096 = urem i32 %1095, 2
  %1097 = icmp eq i32 %1096, 0
  %1098 = icmp slt i32 %1093, 10
  %1099 = or i1 %1097, %1098
  br i1 %1099, label %originalBBpart2261, label %originalBB259alteredBB

originalBBpart2261:                               ; preds = %originalBB259
  br label %1100, !dbg !688

1100:                                             ; preds = %originalBBpart2261, %originalBBpart2249
  %1101 = load i32, i32* @x.3
  %1102 = load i32, i32* @y.4
  %1103 = sub i32 %1101, 1
  %1104 = mul i32 %1101, %1103
  %1105 = urem i32 %1104, 2
  %1106 = icmp eq i32 %1105, 0
  %1107 = icmp slt i32 %1102, 10
  %1108 = or i1 %1106, %1107
  br i1 %1108, label %originalBB263, label %originalBB263alteredBB

originalBB263:                                    ; preds = %1100, %originalBB263alteredBB
  %1109 = load %struct.passwd*, %struct.passwd** %20, align 8, !dbg !689
  %1110 = icmp eq %struct.passwd* %1109, null, !dbg !691
  %1111 = load i32, i32* @x.3
  %1112 = load i32, i32* @y.4
  %1113 = sub i32 %1111, 1
  %1114 = mul i32 %1111, %1113
  %1115 = urem i32 %1114, 2
  %1116 = icmp eq i32 %1115, 0
  %1117 = icmp slt i32 %1112, 10
  %1118 = or i1 %1116, %1117
  br i1 %1118, label %originalBBpart2265, label %originalBB263alteredBB

originalBBpart2265:                               ; preds = %originalBB263
  br i1 %1110, label %1119, label %1151, !dbg !692

1119:                                             ; preds = %originalBBpart2265
  %1120 = load i32, i32* @x.3
  %1121 = load i32, i32* @y.4
  %1122 = sub i32 %1120, 1
  %1123 = mul i32 %1120, %1122
  %1124 = urem i32 %1123, 2
  %1125 = icmp eq i32 %1124, 0
  %1126 = icmp slt i32 %1121, 10
  %1127 = or i1 %1125, %1126
  br i1 %1127, label %originalBB267, label %originalBB267alteredBB

originalBB267:                                    ; preds = %1119, %originalBB267alteredBB
  %1128 = call i32* @__errno_location() #15, !dbg !693
  %1129 = load i32, i32* %1128, align 4, !dbg !693
  %1130 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.22, i64 0, i64 0)) #10, !dbg !695
  %1131 = load i8**, i8*** %13, align 8, !dbg !696
  %1132 = load i32, i32* @optind, align 4, !dbg !697
  %1133 = sext i32 %1132 to i64, !dbg !696
  %1134 = getelementptr inbounds i8*, i8** %1131, i64 %1133, !dbg !696
  %1135 = load i8*, i8** %1134, align 8, !dbg !696
  %1136 = call i8* @quote(i8* %1135), !dbg !698
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %1129, i8* %1130, i8* %1136), !dbg !699
  %1137 = load i8, i8* @ok, align 1, !dbg !700
  %1138 = trunc i8 %1137 to i1, !dbg !700
  %1139 = zext i1 %1138 to i32, !dbg !700
  %1140 = and i32 %1139, 0, !dbg !700
  %1141 = icmp ne i32 %1140, 0, !dbg !700
  %1142 = zext i1 %1141 to i8, !dbg !700
  store i8 %1142, i8* @ok, align 1, !dbg !700
  %1143 = load i32, i32* @x.3
  %1144 = load i32, i32* @y.4
  %1145 = sub i32 %1143, 1
  %1146 = mul i32 %1143, %1145
  %1147 = urem i32 %1146, 2
  %1148 = icmp eq i32 %1147, 0
  %1149 = icmp slt i32 %1144, 10
  %1150 = or i1 %1148, %1149
  br i1 %1150, label %originalBBpart2270, label %originalBB267alteredBB

originalBBpart2270:                               ; preds = %originalBB267
  br label %1180, !dbg !701

1151:                                             ; preds = %originalBBpart2265
  %1152 = load i32, i32* @x.3
  %1153 = load i32, i32* @y.4
  %1154 = sub i32 %1152, 1
  %1155 = mul i32 %1152, %1154
  %1156 = urem i32 %1155, 2
  %1157 = icmp eq i32 %1156, 0
  %1158 = icmp slt i32 %1153, 10
  %1159 = or i1 %1157, %1158
  br i1 %1159, label %originalBB272, label %originalBB272alteredBB

originalBB272:                                    ; preds = %1151, %originalBB272alteredBB
  %1160 = load %struct.passwd*, %struct.passwd** %20, align 8, !dbg !702
  %1161 = getelementptr inbounds %struct.passwd, %struct.passwd* %1160, i32 0, i32 0, !dbg !703
  %1162 = load i8*, i8** %1161, align 8, !dbg !703
  %1163 = call noalias i8* @xstrdup(i8* %1162), !dbg !704
  store i8* %1163, i8** %17, align 8, !dbg !705
  %1164 = load %struct.passwd*, %struct.passwd** %20, align 8, !dbg !706
  %1165 = getelementptr inbounds %struct.passwd, %struct.passwd* %1164, i32 0, i32 2, !dbg !707
  %1166 = load i32, i32* %1165, align 8, !dbg !707
  store i32 %1166, i32* @euid, align 4, !dbg !708
  store i32 %1166, i32* @ruid, align 4, !dbg !709
  %1167 = load %struct.passwd*, %struct.passwd** %20, align 8, !dbg !710
  %1168 = getelementptr inbounds %struct.passwd, %struct.passwd* %1167, i32 0, i32 3, !dbg !711
  %1169 = load i32, i32* %1168, align 4, !dbg !711
  store i32 %1169, i32* @egid, align 4, !dbg !712
  store i32 %1169, i32* @rgid, align 4, !dbg !713
  %1170 = load i8*, i8** %17, align 8, !dbg !714
  call void @print_stuff(i8* %1170), !dbg !715
  %1171 = load i8*, i8** %17, align 8, !dbg !716
  call void @free(i8* %1171) #10, !dbg !717
  %1172 = load i32, i32* @x.3
  %1173 = load i32, i32* @y.4
  %1174 = sub i32 %1172, 1
  %1175 = mul i32 %1172, %1174
  %1176 = urem i32 %1175, 2
  %1177 = icmp eq i32 %1176, 0
  %1178 = icmp slt i32 %1173, 10
  %1179 = or i1 %1177, %1178
  br i1 %1179, label %originalBBpart2274, label %originalBB272alteredBB

originalBBpart2274:                               ; preds = %originalBB272
  br label %1180, !dbg !718

1180:                                             ; preds = %originalBBpart2274, %originalBBpart2270
  %1181 = load i32, i32* @x.3
  %1182 = load i32, i32* @y.4
  %1183 = sub i32 %1181, 1
  %1184 = mul i32 %1181, %1183
  %1185 = urem i32 %1184, 2
  %1186 = icmp eq i32 %1185, 0
  %1187 = icmp slt i32 %1182, 10
  %1188 = or i1 %1186, %1187
  br i1 %1188, label %originalBB276, label %originalBB276alteredBB

originalBB276:                                    ; preds = %1180, %originalBB276alteredBB
  %1189 = load i32, i32* @optind, align 4, !dbg !719
  %1190 = add nsw i32 %1189, 1, !dbg !719
  store i32 %1190, i32* @optind, align 4, !dbg !719
  %1191 = load i32, i32* @x.3
  %1192 = load i32, i32* @y.4
  %1193 = sub i32 %1191, 1
  %1194 = mul i32 %1191, %1193
  %1195 = urem i32 %1194, 2
  %1196 = icmp eq i32 %1195, 0
  %1197 = icmp slt i32 %1192, 10
  %1198 = or i1 %1196, %1197
  br i1 %1198, label %originalBBpart2283, label %originalBB276alteredBB

originalBBpart2283:                               ; preds = %originalBB276
  br label %998, !dbg !720, !llvm.loop !721

1199:                                             ; preds = %originalBBpart2245
  %1200 = load i32, i32* @x.3
  %1201 = load i32, i32* @y.4
  %1202 = sub i32 %1200, 1
  %1203 = mul i32 %1200, %1202
  %1204 = urem i32 %1203, 2
  %1205 = icmp eq i32 %1204, 0
  %1206 = icmp slt i32 %1201, 10
  %1207 = or i1 %1205, %1206
  br i1 %1207, label %originalBB285, label %originalBB285alteredBB

originalBB285:                                    ; preds = %1199, %originalBB285alteredBB
  %1208 = load i32, i32* @x.3
  %1209 = load i32, i32* @y.4
  %1210 = sub i32 %1208, 1
  %1211 = mul i32 %1208, %1210
  %1212 = urem i32 %1211, 2
  %1213 = icmp eq i32 %1212, 0
  %1214 = icmp slt i32 %1209, 10
  %1215 = or i1 %1213, %1214
  br i1 %1215, label %originalBBpart2288, label %originalBB285alteredBB

originalBBpart2288:                               ; preds = %originalBB285
  br label %1719, !dbg !723

1216:                                             ; preds = %originalBBpart2241
  call void @llvm.dbg.declare(metadata i32* %22, metadata !724, metadata !DIExpression()), !dbg !726
  %1217 = load i32, i32* @x.3
  %1218 = load i32, i32* @y.4
  %1219 = sub i32 %1217, 1
  %1220 = mul i32 %1217, %1219
  %1221 = urem i32 %1220, 2
  %1222 = icmp eq i32 %1221, 0
  %1223 = icmp slt i32 %1218, 10
  %1224 = or i1 %1222, %1223
  br i1 %1224, label %originalBB290, label %originalBB290alteredBB

originalBB290:                                    ; preds = %1216, %originalBB290alteredBB
  store i32 -1, i32* %22, align 4, !dbg !726
  call void @llvm.dbg.declare(metadata i32* %23, metadata !727, metadata !DIExpression()), !dbg !728
  store i32 -1, i32* %23, align 4, !dbg !728
  %1225 = load i8, i8* @just_user, align 1, !dbg !729
  %1226 = trunc i8 %1225 to i1, !dbg !729
  %1227 = load i32, i32* @x.3
  %1228 = load i32, i32* @y.4
  %1229 = sub i32 %1227, 1
  %1230 = mul i32 %1227, %1229
  %1231 = urem i32 %1230, 2
  %1232 = icmp eq i32 %1231, 0
  %1233 = icmp slt i32 %1228, 10
  %1234 = or i1 %1232, %1233
  br i1 %1234, label %originalBBpart2292, label %originalBB290alteredBB

originalBBpart2292:                               ; preds = %originalBB290
  br i1 %1226, label %1235, label %1254, !dbg !731

1235:                                             ; preds = %originalBBpart2292
  %1236 = load i32, i32* @x.3
  %1237 = load i32, i32* @y.4
  %1238 = sub i32 %1236, 1
  %1239 = mul i32 %1236, %1238
  %1240 = urem i32 %1239, 2
  %1241 = icmp eq i32 %1240, 0
  %1242 = icmp slt i32 %1237, 10
  %1243 = or i1 %1241, %1242
  br i1 %1243, label %originalBB294, label %originalBB294alteredBB

originalBB294:                                    ; preds = %1235, %originalBB294alteredBB
  %1244 = load i8, i8* @use_real, align 1, !dbg !732
  %1245 = trunc i8 %1244 to i1, !dbg !732
  %1246 = load i32, i32* @x.3
  %1247 = load i32, i32* @y.4
  %1248 = sub i32 %1246, 1
  %1249 = mul i32 %1246, %1248
  %1250 = urem i32 %1249, 2
  %1251 = icmp eq i32 %1250, 0
  %1252 = icmp slt i32 %1247, 10
  %1253 = or i1 %1251, %1252
  br i1 %1253, label %originalBBpart2296, label %originalBB294alteredBB

originalBBpart2296:                               ; preds = %originalBB294
  br i1 %1245, label %1374, label %1295, !dbg !729

1254:                                             ; preds = %originalBBpart2292
  %1255 = load i8, i8* @just_group, align 1, !dbg !733
  %1256 = trunc i8 %1255 to i1, !dbg !733
  br i1 %1256, label %1374, label %1257, !dbg !734

1257:                                             ; preds = %1254
  %1258 = load i32, i32* @x.3
  %1259 = load i32, i32* @y.4
  %1260 = sub i32 %1258, 1
  %1261 = mul i32 %1258, %1260
  %1262 = urem i32 %1261, 2
  %1263 = icmp eq i32 %1262, 0
  %1264 = icmp slt i32 %1259, 10
  %1265 = or i1 %1263, %1264
  br i1 %1265, label %originalBB298, label %originalBB298alteredBB

originalBB298:                                    ; preds = %1257, %originalBB298alteredBB
  %1266 = load i8, i8* @just_group_list, align 1, !dbg !735
  %1267 = trunc i8 %1266 to i1, !dbg !735
  %1268 = load i32, i32* @x.3
  %1269 = load i32, i32* @y.4
  %1270 = sub i32 %1268, 1
  %1271 = mul i32 %1268, %1270
  %1272 = urem i32 %1271, 2
  %1273 = icmp eq i32 %1272, 0
  %1274 = icmp slt i32 %1269, 10
  %1275 = or i1 %1273, %1274
  br i1 %1275, label %originalBBpart2300, label %originalBB298alteredBB

originalBBpart2300:                               ; preds = %originalBB298
  br i1 %1267, label %1374, label %1276, !dbg !736

1276:                                             ; preds = %originalBBpart2300
  %1277 = load i32, i32* @x.3
  %1278 = load i32, i32* @y.4
  %1279 = sub i32 %1277, 1
  %1280 = mul i32 %1277, %1279
  %1281 = urem i32 %1280, 2
  %1282 = icmp eq i32 %1281, 0
  %1283 = icmp slt i32 %1278, 10
  %1284 = or i1 %1282, %1283
  br i1 %1284, label %originalBB302, label %originalBB302alteredBB

originalBB302:                                    ; preds = %1276, %originalBB302alteredBB
  %1285 = load i8, i8* @just_context, align 1, !dbg !737
  %1286 = trunc i8 %1285 to i1, !dbg !737
  %1287 = load i32, i32* @x.3
  %1288 = load i32, i32* @y.4
  %1289 = sub i32 %1287, 1
  %1290 = mul i32 %1287, %1289
  %1291 = urem i32 %1290, 2
  %1292 = icmp eq i32 %1291, 0
  %1293 = icmp slt i32 %1288, 10
  %1294 = or i1 %1292, %1293
  br i1 %1294, label %originalBBpart2304, label %originalBB302alteredBB

originalBBpart2304:                               ; preds = %originalBB302
  br i1 %1286, label %1374, label %1295, !dbg !731

1295:                                             ; preds = %originalBBpart2304, %originalBBpart2296
  %1296 = load i32, i32* @x.3
  %1297 = load i32, i32* @y.4
  %1298 = sub i32 %1296, 1
  %1299 = mul i32 %1296, %1298
  %1300 = urem i32 %1299, 2
  %1301 = icmp eq i32 %1300, 0
  %1302 = icmp slt i32 %1297, 10
  %1303 = or i1 %1301, %1302
  br i1 %1303, label %originalBB306, label %originalBB306alteredBB

originalBB306:                                    ; preds = %1295, %originalBB306alteredBB
  %1304 = call i32* @__errno_location() #15, !dbg !738
  store i32 0, i32* %1304, align 4, !dbg !740
  %1305 = call i32 @geteuid() #10, !dbg !741
  store i32 %1305, i32* @euid, align 4, !dbg !742
  %1306 = load i32, i32* @euid, align 4, !dbg !743
  %1307 = load i32, i32* %22, align 4, !dbg !745
  %1308 = icmp eq i32 %1306, %1307, !dbg !746
  %1309 = load i32, i32* @x.3
  %1310 = load i32, i32* @y.4
  %1311 = sub i32 %1309, 1
  %1312 = mul i32 %1309, %1311
  %1313 = urem i32 %1312, 2
  %1314 = icmp eq i32 %1313, 0
  %1315 = icmp slt i32 %1310, 10
  %1316 = or i1 %1314, %1315
  br i1 %1316, label %originalBBpart2308, label %originalBB306alteredBB

originalBBpart2308:                               ; preds = %originalBB306
  br i1 %1308, label %1317, label %1357, !dbg !747

1317:                                             ; preds = %originalBBpart2308
  %1318 = load i32, i32* @x.3
  %1319 = load i32, i32* @y.4
  %1320 = sub i32 %1318, 1
  %1321 = mul i32 %1318, %1320
  %1322 = urem i32 %1321, 2
  %1323 = icmp eq i32 %1322, 0
  %1324 = icmp slt i32 %1319, 10
  %1325 = or i1 %1323, %1324
  br i1 %1325, label %originalBB310, label %originalBB310alteredBB

originalBB310:                                    ; preds = %1317, %originalBB310alteredBB
  %1326 = call i32* @__errno_location() #15, !dbg !748
  %1327 = load i32, i32* %1326, align 4, !dbg !748
  %1328 = icmp ne i32 %1327, 0, !dbg !748
  %1329 = load i32, i32* @x.3
  %1330 = load i32, i32* @y.4
  %1331 = sub i32 %1329, 1
  %1332 = mul i32 %1329, %1331
  %1333 = urem i32 %1332, 2
  %1334 = icmp eq i32 %1333, 0
  %1335 = icmp slt i32 %1330, 10
  %1336 = or i1 %1334, %1335
  br i1 %1336, label %originalBBpart2312, label %originalBB310alteredBB

originalBBpart2312:                               ; preds = %originalBB310
  br i1 %1328, label %1337, label %1357, !dbg !749

1337:                                             ; preds = %originalBBpart2312
  %1338 = load i32, i32* @x.3
  %1339 = load i32, i32* @y.4
  %1340 = sub i32 %1338, 1
  %1341 = mul i32 %1338, %1340
  %1342 = urem i32 %1341, 2
  %1343 = icmp eq i32 %1342, 0
  %1344 = icmp slt i32 %1339, 10
  %1345 = or i1 %1343, %1344
  br i1 %1345, label %originalBB314, label %originalBB314alteredBB

originalBB314:                                    ; preds = %1337, %originalBB314alteredBB
  %1346 = call i32* @__errno_location() #15, !dbg !750
  %1347 = load i32, i32* %1346, align 4, !dbg !750
  %1348 = call i8* @gettext(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.23, i64 0, i64 0)) #10, !dbg !750
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1347, i8* %1348), !dbg !750
  %1349 = load i32, i32* @x.3
  %1350 = load i32, i32* @y.4
  %1351 = sub i32 %1349, 1
  %1352 = mul i32 %1349, %1351
  %1353 = urem i32 %1352, 2
  %1354 = icmp eq i32 %1353, 0
  %1355 = icmp slt i32 %1350, 10
  %1356 = or i1 %1354, %1355
  br i1 %1356, label %originalBBpart2316, label %originalBB314alteredBB

originalBBpart2316:                               ; preds = %originalBB314
  unreachable, !dbg !750

1357:                                             ; preds = %originalBBpart2312, %originalBBpart2308
  %1358 = load i32, i32* @x.3
  %1359 = load i32, i32* @y.4
  %1360 = sub i32 %1358, 1
  %1361 = mul i32 %1358, %1360
  %1362 = urem i32 %1361, 2
  %1363 = icmp eq i32 %1362, 0
  %1364 = icmp slt i32 %1359, 10
  %1365 = or i1 %1363, %1364
  br i1 %1365, label %originalBB318, label %originalBB318alteredBB

originalBB318:                                    ; preds = %1357, %originalBB318alteredBB
  %1366 = load i32, i32* @x.3
  %1367 = load i32, i32* @y.4
  %1368 = sub i32 %1366, 1
  %1369 = mul i32 %1366, %1368
  %1370 = urem i32 %1369, 2
  %1371 = icmp eq i32 %1370, 0
  %1372 = icmp slt i32 %1367, 10
  %1373 = or i1 %1371, %1372
  br i1 %1373, label %originalBBpart2320, label %originalBB318alteredBB

originalBBpart2320:                               ; preds = %originalBB318
  br label %1374, !dbg !751

1374:                                             ; preds = %originalBBpart2320, %originalBBpart2304, %originalBBpart2300, %1254, %originalBBpart2296
  %1375 = load i8, i8* @just_user, align 1, !dbg !752
  %1376 = trunc i8 %1375 to i1, !dbg !752
  br i1 %1376, label %1377, label %1380, !dbg !754

1377:                                             ; preds = %1374
  %1378 = load i8, i8* @use_real, align 1, !dbg !755
  %1379 = trunc i8 %1378 to i1, !dbg !755
  br i1 %1379, label %1437, label %1500, !dbg !752

1380:                                             ; preds = %1374
  %1381 = load i32, i32* @x.3
  %1382 = load i32, i32* @y.4
  %1383 = sub i32 %1381, 1
  %1384 = mul i32 %1381, %1383
  %1385 = urem i32 %1384, 2
  %1386 = icmp eq i32 %1385, 0
  %1387 = icmp slt i32 %1382, 10
  %1388 = or i1 %1386, %1387
  br i1 %1388, label %originalBB322, label %originalBB322alteredBB

originalBB322:                                    ; preds = %1380, %originalBB322alteredBB
  %1389 = load i8, i8* @just_group, align 1, !dbg !756
  %1390 = trunc i8 %1389 to i1, !dbg !756
  %1391 = load i32, i32* @x.3
  %1392 = load i32, i32* @y.4
  %1393 = sub i32 %1391, 1
  %1394 = mul i32 %1391, %1393
  %1395 = urem i32 %1394, 2
  %1396 = icmp eq i32 %1395, 0
  %1397 = icmp slt i32 %1392, 10
  %1398 = or i1 %1396, %1397
  br i1 %1398, label %originalBBpart2324, label %originalBB322alteredBB

originalBBpart2324:                               ; preds = %originalBB322
  br i1 %1390, label %1500, label %1399, !dbg !757

1399:                                             ; preds = %originalBBpart2324
  %1400 = load i32, i32* @x.3
  %1401 = load i32, i32* @y.4
  %1402 = sub i32 %1400, 1
  %1403 = mul i32 %1400, %1402
  %1404 = urem i32 %1403, 2
  %1405 = icmp eq i32 %1404, 0
  %1406 = icmp slt i32 %1401, 10
  %1407 = or i1 %1405, %1406
  br i1 %1407, label %originalBB326, label %originalBB326alteredBB

originalBB326:                                    ; preds = %1399, %originalBB326alteredBB
  %1408 = load i8, i8* @just_group_list, align 1, !dbg !758
  %1409 = trunc i8 %1408 to i1, !dbg !758
  %1410 = load i32, i32* @x.3
  %1411 = load i32, i32* @y.4
  %1412 = sub i32 %1410, 1
  %1413 = mul i32 %1410, %1412
  %1414 = urem i32 %1413, 2
  %1415 = icmp eq i32 %1414, 0
  %1416 = icmp slt i32 %1411, 10
  %1417 = or i1 %1415, %1416
  br i1 %1417, label %originalBBpart2328, label %originalBB326alteredBB

originalBBpart2328:                               ; preds = %originalBB326
  br i1 %1409, label %1437, label %1418, !dbg !759

1418:                                             ; preds = %originalBBpart2328
  %1419 = load i32, i32* @x.3
  %1420 = load i32, i32* @y.4
  %1421 = sub i32 %1419, 1
  %1422 = mul i32 %1419, %1421
  %1423 = urem i32 %1422, 2
  %1424 = icmp eq i32 %1423, 0
  %1425 = icmp slt i32 %1420, 10
  %1426 = or i1 %1424, %1425
  br i1 %1426, label %originalBB330, label %originalBB330alteredBB

originalBB330:                                    ; preds = %1418, %originalBB330alteredBB
  %1427 = load i8, i8* @just_context, align 1, !dbg !760
  %1428 = trunc i8 %1427 to i1, !dbg !760
  %1429 = load i32, i32* @x.3
  %1430 = load i32, i32* @y.4
  %1431 = sub i32 %1429, 1
  %1432 = mul i32 %1429, %1431
  %1433 = urem i32 %1432, 2
  %1434 = icmp eq i32 %1433, 0
  %1435 = icmp slt i32 %1430, 10
  %1436 = or i1 %1434, %1435
  br i1 %1436, label %originalBBpart2332, label %originalBB330alteredBB

originalBBpart2332:                               ; preds = %originalBB330
  br i1 %1428, label %1500, label %1437, !dbg !754

1437:                                             ; preds = %originalBBpart2332, %originalBBpart2328, %1377
  %1438 = load i32, i32* @x.3
  %1439 = load i32, i32* @y.4
  %1440 = sub i32 %1438, 1
  %1441 = mul i32 %1438, %1440
  %1442 = urem i32 %1441, 2
  %1443 = icmp eq i32 %1442, 0
  %1444 = icmp slt i32 %1439, 10
  %1445 = or i1 %1443, %1444
  br i1 %1445, label %originalBB334, label %originalBB334alteredBB

originalBB334:                                    ; preds = %1437, %originalBB334alteredBB
  %1446 = call i32* @__errno_location() #15, !dbg !761
  store i32 0, i32* %1446, align 4, !dbg !763
  %1447 = call i32 @getuid() #10, !dbg !764
  store i32 %1447, i32* @ruid, align 4, !dbg !765
  %1448 = load i32, i32* @ruid, align 4, !dbg !766
  %1449 = load i32, i32* %22, align 4, !dbg !768
  %1450 = icmp eq i32 %1448, %1449, !dbg !769
  %1451 = load i32, i32* @x.3
  %1452 = load i32, i32* @y.4
  %1453 = sub i32 %1451, 1
  %1454 = mul i32 %1451, %1453
  %1455 = urem i32 %1454, 2
  %1456 = icmp eq i32 %1455, 0
  %1457 = icmp slt i32 %1452, 10
  %1458 = or i1 %1456, %1457
  br i1 %1458, label %originalBBpart2336, label %originalBB334alteredBB

originalBBpart2336:                               ; preds = %originalBB334
  br i1 %1450, label %1459, label %1483, !dbg !770

1459:                                             ; preds = %originalBBpart2336
  %1460 = load i32, i32* @x.3
  %1461 = load i32, i32* @y.4
  %1462 = sub i32 %1460, 1
  %1463 = mul i32 %1460, %1462
  %1464 = urem i32 %1463, 2
  %1465 = icmp eq i32 %1464, 0
  %1466 = icmp slt i32 %1461, 10
  %1467 = or i1 %1465, %1466
  br i1 %1467, label %originalBB338, label %originalBB338alteredBB

originalBB338:                                    ; preds = %1459, %originalBB338alteredBB
  %1468 = call i32* @__errno_location() #15, !dbg !771
  %1469 = load i32, i32* %1468, align 4, !dbg !771
  %1470 = icmp ne i32 %1469, 0, !dbg !771
  %1471 = load i32, i32* @x.3
  %1472 = load i32, i32* @y.4
  %1473 = sub i32 %1471, 1
  %1474 = mul i32 %1471, %1473
  %1475 = urem i32 %1474, 2
  %1476 = icmp eq i32 %1475, 0
  %1477 = icmp slt i32 %1472, 10
  %1478 = or i1 %1476, %1477
  br i1 %1478, label %originalBBpart2340, label %originalBB338alteredBB

originalBBpart2340:                               ; preds = %originalBB338
  br i1 %1470, label %1479, label %1483, !dbg !772

1479:                                             ; preds = %originalBBpart2340
  %1480 = call i32* @__errno_location() #15, !dbg !773
  %1481 = load i32, i32* %1480, align 4, !dbg !773
  %1482 = call i8* @gettext(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.24, i64 0, i64 0)) #10, !dbg !773
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1481, i8* %1482), !dbg !773
  unreachable, !dbg !773

1483:                                             ; preds = %originalBBpart2340, %originalBBpart2336
  %1484 = load i32, i32* @x.3
  %1485 = load i32, i32* @y.4
  %1486 = sub i32 %1484, 1
  %1487 = mul i32 %1484, %1486
  %1488 = urem i32 %1487, 2
  %1489 = icmp eq i32 %1488, 0
  %1490 = icmp slt i32 %1485, 10
  %1491 = or i1 %1489, %1490
  br i1 %1491, label %originalBB342, label %originalBB342alteredBB

originalBB342:                                    ; preds = %1483, %originalBB342alteredBB
  %1492 = load i32, i32* @x.3
  %1493 = load i32, i32* @y.4
  %1494 = sub i32 %1492, 1
  %1495 = mul i32 %1492, %1494
  %1496 = urem i32 %1495, 2
  %1497 = icmp eq i32 %1496, 0
  %1498 = icmp slt i32 %1493, 10
  %1499 = or i1 %1497, %1498
  br i1 %1499, label %originalBBpart2344, label %originalBB342alteredBB

originalBBpart2344:                               ; preds = %originalBB342
  br label %1500, !dbg !774

1500:                                             ; preds = %originalBBpart2344, %originalBBpart2332, %originalBBpart2324, %1377
  %1501 = load i32, i32* @x.3
  %1502 = load i32, i32* @y.4
  %1503 = sub i32 %1501, 1
  %1504 = mul i32 %1501, %1503
  %1505 = urem i32 %1504, 2
  %1506 = icmp eq i32 %1505, 0
  %1507 = icmp slt i32 %1502, 10
  %1508 = or i1 %1506, %1507
  br i1 %1508, label %originalBB346, label %originalBB346alteredBB

originalBB346:                                    ; preds = %1500, %originalBB346alteredBB
  %1509 = load i8, i8* @just_user, align 1, !dbg !775
  %1510 = trunc i8 %1509 to i1, !dbg !775
  %1511 = load i32, i32* @x.3
  %1512 = load i32, i32* @y.4
  %1513 = sub i32 %1511, 1
  %1514 = mul i32 %1511, %1513
  %1515 = urem i32 %1514, 2
  %1516 = icmp eq i32 %1515, 0
  %1517 = icmp slt i32 %1512, 10
  %1518 = or i1 %1516, %1517
  br i1 %1518, label %originalBBpart2348, label %originalBB346alteredBB

originalBBpart2348:                               ; preds = %originalBB346
  br i1 %1510, label %1701, label %1519, !dbg !777

1519:                                             ; preds = %originalBBpart2348
  %1520 = load i32, i32* @x.3
  %1521 = load i32, i32* @y.4
  %1522 = sub i32 %1520, 1
  %1523 = mul i32 %1520, %1522
  %1524 = urem i32 %1523, 2
  %1525 = icmp eq i32 %1524, 0
  %1526 = icmp slt i32 %1521, 10
  %1527 = or i1 %1525, %1526
  br i1 %1527, label %originalBB350, label %originalBB350alteredBB

originalBB350:                                    ; preds = %1519, %originalBB350alteredBB
  %1528 = load i8, i8* @just_group, align 1, !dbg !778
  %1529 = trunc i8 %1528 to i1, !dbg !778
  %1530 = load i32, i32* @x.3
  %1531 = load i32, i32* @y.4
  %1532 = sub i32 %1530, 1
  %1533 = mul i32 %1530, %1532
  %1534 = urem i32 %1533, 2
  %1535 = icmp eq i32 %1534, 0
  %1536 = icmp slt i32 %1531, 10
  %1537 = or i1 %1535, %1536
  br i1 %1537, label %originalBBpart2352, label %originalBB350alteredBB

originalBBpart2352:                               ; preds = %originalBB350
  br i1 %1529, label %1576, label %1538, !dbg !779

1538:                                             ; preds = %originalBBpart2352
  %1539 = load i32, i32* @x.3
  %1540 = load i32, i32* @y.4
  %1541 = sub i32 %1539, 1
  %1542 = mul i32 %1539, %1541
  %1543 = urem i32 %1542, 2
  %1544 = icmp eq i32 %1543, 0
  %1545 = icmp slt i32 %1540, 10
  %1546 = or i1 %1544, %1545
  br i1 %1546, label %originalBB354, label %originalBB354alteredBB

originalBB354:                                    ; preds = %1538, %originalBB354alteredBB
  %1547 = load i8, i8* @just_group_list, align 1, !dbg !780
  %1548 = trunc i8 %1547 to i1, !dbg !780
  %1549 = load i32, i32* @x.3
  %1550 = load i32, i32* @y.4
  %1551 = sub i32 %1549, 1
  %1552 = mul i32 %1549, %1551
  %1553 = urem i32 %1552, 2
  %1554 = icmp eq i32 %1553, 0
  %1555 = icmp slt i32 %1550, 10
  %1556 = or i1 %1554, %1555
  br i1 %1556, label %originalBBpart2356, label %originalBB354alteredBB

originalBBpart2356:                               ; preds = %originalBB354
  br i1 %1548, label %1576, label %1557, !dbg !781

1557:                                             ; preds = %originalBBpart2356
  %1558 = load i32, i32* @x.3
  %1559 = load i32, i32* @y.4
  %1560 = sub i32 %1558, 1
  %1561 = mul i32 %1558, %1560
  %1562 = urem i32 %1561, 2
  %1563 = icmp eq i32 %1562, 0
  %1564 = icmp slt i32 %1559, 10
  %1565 = or i1 %1563, %1564
  br i1 %1565, label %originalBB358, label %originalBB358alteredBB

originalBB358:                                    ; preds = %1557, %originalBB358alteredBB
  %1566 = load i8, i8* @just_context, align 1, !dbg !782
  %1567 = trunc i8 %1566 to i1, !dbg !782
  %1568 = load i32, i32* @x.3
  %1569 = load i32, i32* @y.4
  %1570 = sub i32 %1568, 1
  %1571 = mul i32 %1568, %1570
  %1572 = urem i32 %1571, 2
  %1573 = icmp eq i32 %1572, 0
  %1574 = icmp slt i32 %1569, 10
  %1575 = or i1 %1573, %1574
  br i1 %1575, label %originalBBpart2360, label %originalBB358alteredBB

originalBBpart2360:                               ; preds = %originalBB358
  br i1 %1567, label %1701, label %1576, !dbg !783

1576:                                             ; preds = %originalBBpart2360, %originalBBpart2356, %originalBBpart2352
  %1577 = load i32, i32* @x.3
  %1578 = load i32, i32* @y.4
  %1579 = sub i32 %1577, 1
  %1580 = mul i32 %1577, %1579
  %1581 = urem i32 %1580, 2
  %1582 = icmp eq i32 %1581, 0
  %1583 = icmp slt i32 %1578, 10
  %1584 = or i1 %1582, %1583
  br i1 %1584, label %originalBB362, label %originalBB362alteredBB

originalBB362:                                    ; preds = %1576, %originalBB362alteredBB
  %1585 = call i32* @__errno_location() #15, !dbg !784
  store i32 0, i32* %1585, align 4, !dbg !786
  %1586 = call i32 @getegid() #10, !dbg !787
  store i32 %1586, i32* @egid, align 4, !dbg !788
  %1587 = load i32, i32* @egid, align 4, !dbg !789
  %1588 = load i32, i32* %23, align 4, !dbg !791
  %1589 = icmp eq i32 %1587, %1588, !dbg !792
  %1590 = load i32, i32* @x.3
  %1591 = load i32, i32* @y.4
  %1592 = sub i32 %1590, 1
  %1593 = mul i32 %1590, %1592
  %1594 = urem i32 %1593, 2
  %1595 = icmp eq i32 %1594, 0
  %1596 = icmp slt i32 %1591, 10
  %1597 = or i1 %1595, %1596
  br i1 %1597, label %originalBBpart2364, label %originalBB362alteredBB

originalBBpart2364:                               ; preds = %originalBB362
  br i1 %1589, label %1598, label %1638, !dbg !793

1598:                                             ; preds = %originalBBpart2364
  %1599 = load i32, i32* @x.3
  %1600 = load i32, i32* @y.4
  %1601 = sub i32 %1599, 1
  %1602 = mul i32 %1599, %1601
  %1603 = urem i32 %1602, 2
  %1604 = icmp eq i32 %1603, 0
  %1605 = icmp slt i32 %1600, 10
  %1606 = or i1 %1604, %1605
  br i1 %1606, label %originalBB366, label %originalBB366alteredBB

originalBB366:                                    ; preds = %1598, %originalBB366alteredBB
  %1607 = call i32* @__errno_location() #15, !dbg !794
  %1608 = load i32, i32* %1607, align 4, !dbg !794
  %1609 = icmp ne i32 %1608, 0, !dbg !794
  %1610 = load i32, i32* @x.3
  %1611 = load i32, i32* @y.4
  %1612 = sub i32 %1610, 1
  %1613 = mul i32 %1610, %1612
  %1614 = urem i32 %1613, 2
  %1615 = icmp eq i32 %1614, 0
  %1616 = icmp slt i32 %1611, 10
  %1617 = or i1 %1615, %1616
  br i1 %1617, label %originalBBpart2368, label %originalBB366alteredBB

originalBBpart2368:                               ; preds = %originalBB366
  br i1 %1609, label %1618, label %1638, !dbg !795

1618:                                             ; preds = %originalBBpart2368
  %1619 = load i32, i32* @x.3
  %1620 = load i32, i32* @y.4
  %1621 = sub i32 %1619, 1
  %1622 = mul i32 %1619, %1621
  %1623 = urem i32 %1622, 2
  %1624 = icmp eq i32 %1623, 0
  %1625 = icmp slt i32 %1620, 10
  %1626 = or i1 %1624, %1625
  br i1 %1626, label %originalBB370, label %originalBB370alteredBB

originalBB370:                                    ; preds = %1618, %originalBB370alteredBB
  %1627 = call i32* @__errno_location() #15, !dbg !796
  %1628 = load i32, i32* %1627, align 4, !dbg !796
  %1629 = call i8* @gettext(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.25, i64 0, i64 0)) #10, !dbg !796
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1628, i8* %1629), !dbg !796
  %1630 = load i32, i32* @x.3
  %1631 = load i32, i32* @y.4
  %1632 = sub i32 %1630, 1
  %1633 = mul i32 %1630, %1632
  %1634 = urem i32 %1633, 2
  %1635 = icmp eq i32 %1634, 0
  %1636 = icmp slt i32 %1631, 10
  %1637 = or i1 %1635, %1636
  br i1 %1637, label %originalBBpart2372, label %originalBB370alteredBB

originalBBpart2372:                               ; preds = %originalBB370
  unreachable, !dbg !796

1638:                                             ; preds = %originalBBpart2368, %originalBBpart2364
  %1639 = call i32* @__errno_location() #15, !dbg !797
  store i32 0, i32* %1639, align 4, !dbg !798
  %1640 = call i32 @getgid() #10, !dbg !799
  store i32 %1640, i32* @rgid, align 4, !dbg !800
  %1641 = load i32, i32* @rgid, align 4, !dbg !801
  %1642 = load i32, i32* %23, align 4, !dbg !803
  %1643 = icmp eq i32 %1641, %1642, !dbg !804
  br i1 %1643, label %1644, label %1684, !dbg !805

1644:                                             ; preds = %1638
  %1645 = load i32, i32* @x.3
  %1646 = load i32, i32* @y.4
  %1647 = sub i32 %1645, 1
  %1648 = mul i32 %1645, %1647
  %1649 = urem i32 %1648, 2
  %1650 = icmp eq i32 %1649, 0
  %1651 = icmp slt i32 %1646, 10
  %1652 = or i1 %1650, %1651
  br i1 %1652, label %originalBB374, label %originalBB374alteredBB

originalBB374:                                    ; preds = %1644, %originalBB374alteredBB
  %1653 = call i32* @__errno_location() #15, !dbg !806
  %1654 = load i32, i32* %1653, align 4, !dbg !806
  %1655 = icmp ne i32 %1654, 0, !dbg !806
  %1656 = load i32, i32* @x.3
  %1657 = load i32, i32* @y.4
  %1658 = sub i32 %1656, 1
  %1659 = mul i32 %1656, %1658
  %1660 = urem i32 %1659, 2
  %1661 = icmp eq i32 %1660, 0
  %1662 = icmp slt i32 %1657, 10
  %1663 = or i1 %1661, %1662
  br i1 %1663, label %originalBBpart2376, label %originalBB374alteredBB

originalBBpart2376:                               ; preds = %originalBB374
  br i1 %1655, label %1664, label %1684, !dbg !807

1664:                                             ; preds = %originalBBpart2376
  %1665 = load i32, i32* @x.3
  %1666 = load i32, i32* @y.4
  %1667 = sub i32 %1665, 1
  %1668 = mul i32 %1665, %1667
  %1669 = urem i32 %1668, 2
  %1670 = icmp eq i32 %1669, 0
  %1671 = icmp slt i32 %1666, 10
  %1672 = or i1 %1670, %1671
  br i1 %1672, label %originalBB378, label %originalBB378alteredBB

originalBB378:                                    ; preds = %1664, %originalBB378alteredBB
  %1673 = call i32* @__errno_location() #15, !dbg !808
  %1674 = load i32, i32* %1673, align 4, !dbg !808
  %1675 = call i8* @gettext(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.26, i64 0, i64 0)) #10, !dbg !808
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1674, i8* %1675), !dbg !808
  %1676 = load i32, i32* @x.3
  %1677 = load i32, i32* @y.4
  %1678 = sub i32 %1676, 1
  %1679 = mul i32 %1676, %1678
  %1680 = urem i32 %1679, 2
  %1681 = icmp eq i32 %1680, 0
  %1682 = icmp slt i32 %1677, 10
  %1683 = or i1 %1681, %1682
  br i1 %1683, label %originalBBpart2380, label %originalBB378alteredBB

originalBBpart2380:                               ; preds = %originalBB378
  unreachable, !dbg !808

1684:                                             ; preds = %originalBBpart2376, %1638
  %1685 = load i32, i32* @x.3
  %1686 = load i32, i32* @y.4
  %1687 = sub i32 %1685, 1
  %1688 = mul i32 %1685, %1687
  %1689 = urem i32 %1688, 2
  %1690 = icmp eq i32 %1689, 0
  %1691 = icmp slt i32 %1686, 10
  %1692 = or i1 %1690, %1691
  br i1 %1692, label %originalBB382, label %originalBB382alteredBB

originalBB382:                                    ; preds = %1684, %originalBB382alteredBB
  %1693 = load i32, i32* @x.3
  %1694 = load i32, i32* @y.4
  %1695 = sub i32 %1693, 1
  %1696 = mul i32 %1693, %1695
  %1697 = urem i32 %1696, 2
  %1698 = icmp eq i32 %1697, 0
  %1699 = icmp slt i32 %1694, 10
  %1700 = or i1 %1698, %1699
  br i1 %1700, label %originalBBpart2384, label %originalBB382alteredBB

originalBBpart2384:                               ; preds = %originalBB382
  br label %1701, !dbg !809

1701:                                             ; preds = %originalBBpart2384, %originalBBpart2360, %originalBBpart2348
  %1702 = load i32, i32* @x.3
  %1703 = load i32, i32* @y.4
  %1704 = sub i32 %1702, 1
  %1705 = mul i32 %1702, %1704
  %1706 = urem i32 %1705, 2
  %1707 = icmp eq i32 %1706, 0
  %1708 = icmp slt i32 %1703, 10
  %1709 = or i1 %1707, %1708
  br i1 %1709, label %originalBB386, label %originalBB386alteredBB

originalBB386:                                    ; preds = %1701, %originalBB386alteredBB
  %1710 = load i8*, i8** %17, align 8, !dbg !810
  call void @print_stuff(i8* %1710), !dbg !811
  %1711 = load i32, i32* @x.3
  %1712 = load i32, i32* @y.4
  %1713 = sub i32 %1711, 1
  %1714 = mul i32 %1711, %1713
  %1715 = urem i32 %1714, 2
  %1716 = icmp eq i32 %1715, 0
  %1717 = icmp slt i32 %1712, 10
  %1718 = or i1 %1716, %1717
  br i1 %1718, label %originalBBpart2388, label %originalBB386alteredBB

originalBBpart2388:                               ; preds = %originalBB386
  br label %1719

1719:                                             ; preds = %originalBBpart2388, %originalBBpart2288
  %1720 = load i32, i32* @x.3
  %1721 = load i32, i32* @y.4
  %1722 = sub i32 %1720, 1
  %1723 = mul i32 %1720, %1722
  %1724 = urem i32 %1723, 2
  %1725 = icmp eq i32 %1724, 0
  %1726 = icmp slt i32 %1721, 10
  %1727 = or i1 %1725, %1726
  br i1 %1727, label %originalBB390, label %originalBB390alteredBB

originalBB390:                                    ; preds = %1719, %originalBB390alteredBB
  %1728 = load i8, i8* @ok, align 1, !dbg !812
  %1729 = trunc i8 %1728 to i1, !dbg !812
  %1730 = zext i1 %1729 to i64, !dbg !812
  %1731 = select i1 %1729, i32 0, i32 1, !dbg !812
  %1732 = load i32, i32* @x.3
  %1733 = load i32, i32* @y.4
  %1734 = sub i32 %1732, 1
  %1735 = mul i32 %1732, %1734
  %1736 = urem i32 %1735, 2
  %1737 = icmp eq i32 %1736, 0
  %1738 = icmp slt i32 %1733, 10
  %1739 = or i1 %1737, %1738
  br i1 %1739, label %originalBBpart2392, label %originalBB390alteredBB

originalBBpart2392:                               ; preds = %originalBB390
  ret i32 %1731, !dbg !813

originalBBalteredBB:                              ; preds = %originalBB, %2
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %1740 = alloca i32, align 4
  %1741 = alloca i32, align 4
  %1742 = alloca i8**, align 8
  %1743 = alloca i32, align 4
  %1744 = alloca i32, align 4
  %1745 = alloca i8, align 1
  %1746 = alloca i8*, align 8
  %1747 = alloca i64, align 8
  %1748 = alloca i8, align 1
  %1749 = alloca %struct.passwd*, align 8
  %1750 = alloca i8*, align 8
  %1751 = alloca i32, align 4
  %1752 = alloca i32, align 4
  store i32 0, i32* %1740, align 4
  store i32 %0, i32* %1741, align 4
  call void @llvm.dbg.declare(metadata i32* %1741, metadata !814, metadata !DIExpression()), !dbg !514
  store i8** %1, i8*** %1742, align 8
  call void @llvm.dbg.declare(metadata i8*** %1742, metadata !862, metadata !DIExpression()), !dbg !516
  call void @llvm.dbg.declare(metadata i32* %1743, metadata !863, metadata !DIExpression()), !dbg !518
  call void @llvm.dbg.declare(metadata i32* %1744, metadata !864, metadata !DIExpression()), !dbg !520
  store i32 0, i32* %1744, align 4, !dbg !520
  call void @llvm.dbg.declare(metadata i8* %1745, metadata !865, metadata !DIExpression()), !dbg !522
  %1753 = call zeroext i1 @is_smack_enabled(), !dbg !523
  %1754 = zext i1 %1753 to i8, !dbg !522
  store i8 %1754, i8* %1745, align 1, !dbg !522
  call void @llvm.dbg.declare(metadata i8** %1746, metadata !866, metadata !DIExpression()), !dbg !525
  store i8* null, i8** %1746, align 8, !dbg !525
  %1755 = load i8**, i8*** %1742, align 8, !dbg !526
  %1756 = getelementptr inbounds i8*, i8** %1755, i64 0, !dbg !526
  %1757 = load i8*, i8** %1756, align 8, !dbg !526
  call void @set_program_name(i8* %1757), !dbg !527
  %1758 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0)) #10, !dbg !528
  %1759 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !529
  %1760 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !530
  %1761 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !531
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %41
  %1762 = load i32, i32* %12, align 4, !dbg !533
  %1763 = load i8**, i8*** %13, align 8, !dbg !534
  %1764 = call i32 @getopt_long(i32 %1762, i8** %1763, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i64 0, i64 0), %struct.option* getelementptr inbounds ([10 x %struct.option], [10 x %struct.option]* @longopts, i64 0, i64 0), i32* null) #10, !dbg !535
  store i32 %1764, i32* %14, align 4, !dbg !536
  %1765 = icmp ne i32 %1764, -1, !dbg !537
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %62
  %1766 = load i32, i32* %14, align 4, !dbg !538
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %80
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %97
  %1767 = load i32, i32* %15, align 4, !dbg !543
  %1768 = icmp ne i32 %1767, 0, !dbg !543
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %116
  %1769 = call i8* @gettext(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !546
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %1769), !dbg !546
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %134
  store i8 1, i8* @just_context, align 1, !dbg !547
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %151
  store i8 1, i8* @just_group, align 1, !dbg !549
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %168
  store i8 1, i8* @use_name, align 1, !dbg !551
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %185
  store i8 1, i8* @use_real, align 1, !dbg !553
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %202
  store i8 1, i8* @just_user, align 1, !dbg !555
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %220
  store i8 1, i8* @just_group_list, align 1, !dbg !559
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %237
  call void @usage(i32 0) #14, !dbg !561
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %257
  call void @usage(i32 1) #14, !dbg !563
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %274
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %291
  %1770 = load i32, i32* %12, align 4, !dbg !568
  %1771 = load i32, i32* @optind, align 4, !dbg !569
  %_ = shl i32 %1770, %1771
  %_59 = sub i32 %1770, %1771
  %gen = mul i32 %_59, %1771
  %1772 = sub nsw i32 %1770, %1771, !dbg !570
  %1773 = sext i32 %1772 to i64, !dbg !568
  store i64 %1773, i64* %18, align 8, !dbg !567
  %1774 = load i64, i64* %18, align 8, !dbg !571
  %1775 = icmp ne i64 %1774, 0, !dbg !571
  br label %originalBB58

originalBB63alteredBB:                            ; preds = %originalBB63, %314
  %1776 = load i8, i8* @just_context, align 1, !dbg !574
  %1777 = trunc i8 %1776 to i1, !dbg !574
  br label %originalBB63

originalBB67alteredBB:                            ; preds = %originalBB67, %333
  %1778 = call i8* @gettext(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !576
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %1778), !dbg !576
  br label %originalBB67

originalBB71alteredBB:                            ; preds = %originalBB71, %351
  %1779 = load i8, i8* @just_user, align 1, !dbg !577
  %1780 = trunc i8 %1779 to i1, !dbg !577
  %1781 = zext i1 %1780 to i32, !dbg !577
  %1782 = load i8, i8* @just_group, align 1, !dbg !579
  %1783 = trunc i8 %1782 to i1, !dbg !579
  %1784 = zext i1 %1783 to i32, !dbg !579
  %_72 = sub i32 %1781, %1784
  %gen73 = mul i32 %_72, %1784
  %_74 = sub i32 0, %1781
  %gen75 = add i32 %_74, %1784
  %1785 = add nsw i32 %1781, %1784, !dbg !580
  %1786 = load i8, i8* @just_group_list, align 1, !dbg !581
  %1787 = trunc i8 %1786 to i1, !dbg !581
  %1788 = zext i1 %1787 to i32, !dbg !581
  %_76 = sub i32 0, %1785
  %gen77 = add i32 %_76, %1788
  %_78 = shl i32 %1785, %1788
  %_79 = shl i32 %1785, %1788
  %1789 = add nsw i32 %1785, %1788, !dbg !582
  %1790 = load i8, i8* @just_context, align 1, !dbg !583
  %1791 = trunc i8 %1790 to i1, !dbg !583
  %1792 = zext i1 %1791 to i32, !dbg !583
  %_80 = sub i32 0, %1789
  %gen81 = add i32 %_80, %1792
  %_82 = sub i32 %1789, %1792
  %gen83 = mul i32 %_82, %1792
  %1793 = add nsw i32 %1789, %1792, !dbg !584
  %1794 = icmp sgt i32 %1793, 1, !dbg !585
  br label %originalBB71

originalBB87alteredBB:                            ; preds = %originalBB87, %384
  %1795 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.17, i64 0, i64 0)) #10, !dbg !587
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %1795), !dbg !587
  br label %originalBB87

originalBB91alteredBB:                            ; preds = %originalBB91, %402
  %1796 = load i8, i8* @just_user, align 1, !dbg !590
  %1797 = trunc i8 %1796 to i1, !dbg !590
  br label %originalBB91

originalBB95alteredBB:                            ; preds = %originalBB95, %421
  %1798 = load i8, i8* @just_group, align 1, !dbg !592
  %1799 = trunc i8 %1798 to i1, !dbg !592
  br label %originalBB95

originalBB99alteredBB:                            ; preds = %originalBB99, %440
  %1800 = load i8, i8* @just_group_list, align 1, !dbg !594
  %1801 = trunc i8 %1800 to i1, !dbg !594
  br label %originalBB99

originalBB103alteredBB:                           ; preds = %originalBB103, %468
  %1802 = load i8, i8* @use_real, align 1, !dbg !601
  %1803 = trunc i8 %1802 to i1, !dbg !601
  br label %originalBB103

originalBB107alteredBB:                           ; preds = %originalBB107, %487
  %1804 = load i8, i8* @use_name, align 1, !dbg !603
  %1805 = trunc i8 %1804 to i1, !dbg !603
  br label %originalBB107

originalBB111alteredBB:                           ; preds = %originalBB111, %506
  %1806 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.18, i64 0, i64 0)) #10, !dbg !605
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %1806), !dbg !605
  br label %originalBB111

originalBB115alteredBB:                           ; preds = %originalBB115, %524
  %1807 = load i8, i8* %19, align 1, !dbg !606
  %1808 = trunc i8 %1807 to i1, !dbg !606
  br label %originalBB115

originalBB119alteredBB:                           ; preds = %originalBB119, %543
  %1809 = load i8, i8* @opt_zero, align 1, !dbg !609
  %1810 = trunc i8 %1809 to i1, !dbg !609
  br label %originalBB119

originalBB123alteredBB:                           ; preds = %originalBB123, %562
  %1811 = call i8* @gettext(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.19, i64 0, i64 0)) #10, !dbg !611
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %1811), !dbg !611
  br label %originalBB123

originalBB127alteredBB:                           ; preds = %originalBB127, %580
  %1812 = load i64, i64* %18, align 8, !dbg !612
  br label %originalBB127

originalBB131alteredBB:                           ; preds = %originalBB131, %598
  %collatzVaralteredBB = alloca i32
  br label %originalBB131

originalBB135alteredBB:                           ; preds = %originalBB135, %618
  store i32 88, i32* %collatzVar
  br label %originalBB135

originalBB139alteredBB:                           ; preds = %originalBB139, %635
  %1813 = load i8**, i8*** @inVal1
  %1814 = getelementptr inbounds i8*, i8** %1813, i64 1
  %1815 = load i8*, i8** %1814
  %1816 = trunc i64 0 to i32
  %controlealteredBB = call i32 @controle(i8* %1815, i32 %1816)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB139

originalBB143alteredBB:                           ; preds = %originalBB143, %656
  %1817 = load i32, i32* %collatzVar
  %1818 = icmp sgt i32 %1817, 1
  br label %originalBB143

originalBB147alteredBB:                           ; preds = %originalBB147, %675
  %1819 = load i32, i32* %collatzVar
  %_148 = shl i32 %1819, 2
  %_149 = sub i32 %1819, 2
  %gen150 = mul i32 %_149, 2
  %_151 = sub i32 %1819, 2
  %gen152 = mul i32 %_151, 2
  %_153 = sub i32 %1819, 2
  %gen154 = mul i32 %_153, 2
  %_155 = shl i32 %1819, 2
  %1820 = srem i32 %1819, 2
  %1821 = icmp eq i32 %1820, 0
  br label %originalBB147

originalBB159alteredBB:                           ; preds = %originalBB159, %695
  %1822 = load i32, i32* %collatzVar
  %_160 = shl i32 %1822, 2
  %_161 = shl i32 %1822, 2
  %1823 = sdiv i32 %1822, 2
  store i32 %1823, i32* %collatzVar
  br label %originalBB159

originalBB165alteredBB:                           ; preds = %originalBB165, %714
  %1824 = load i32, i32* %collatzVar
  %_166 = shl i32 %1824, 3
  %_167 = sub i32 0, %1824
  %gen168 = add i32 %_167, 3
  %_169 = sub i32 0, %1824
  %gen170 = add i32 %_169, 3
  %_171 = shl i32 %1824, 3
  %_172 = sub i32 %1824, 3
  %gen173 = mul i32 %_172, 3
  %_174 = sub i32 %1824, 3
  %gen175 = mul i32 %_174, 3
  %_176 = shl i32 %1824, 3
  %1825 = mul i32 %1824, 3
  %_177 = sub i32 0, %1825
  %gen178 = add i32 %_177, 1
  %1826 = add i32 %1825, 1
  store i32 %1826, i32* %collatzVar
  br label %originalBB165

originalBB182alteredBB:                           ; preds = %originalBB182, %734
  %1827 = load i32, i32* %collatzVar
  %1828 = sext i32 %1827 to i64
  %1829 = sext i32 -2 to i64
  %_183 = sub i64 0, %589
  %gen184 = add i64 %_183, %1828
  %_185 = shl i64 %589, %1828
  %_186 = sub i64 %589, %1828
  %gen187 = mul i64 %_186, %1828
  %_188 = sub i64 %589, %1828
  %gen189 = mul i64 %_188, %1828
  %1830 = sub i64 %589, %1828
  %1831 = icmp sgt i64 %1830, %1829
  br label %originalBB182

originalBB193alteredBB:                           ; preds = %originalBB193, %756
  %1832 = load i32, i32* %collatzVar
  %1833 = sext i32 %1832 to i64
  %1834 = sext i32 2 to i64
  %_194 = sub i64 0, %589
  %gen195 = add i64 %_194, %1833
  %1835 = add i64 %589, %1833
  %1836 = icmp slt i64 %1835, %1834
  br label %originalBB193

originalBB199alteredBB:                           ; preds = %originalBB199, %778
  %1837 = load i8, i8* @just_context, align 1, !dbg !615
  %1838 = trunc i8 %1837 to i1, !dbg !615
  br label %originalBB199

originalBB203alteredBB:                           ; preds = %originalBB203, %797
  %1839 = load i8, i8* %19, align 1, !dbg !617
  %1840 = trunc i8 %1839 to i1, !dbg !617
  br label %originalBB203

originalBB207alteredBB:                           ; preds = %originalBB207, %816
  %1841 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0)) #10, !dbg !619
  %1842 = icmp ne i8* %1841, null, !dbg !619
  br label %originalBB207

originalBB211alteredBB:                           ; preds = %originalBB211, %835
  %1843 = load i32, i32* %15, align 4, !dbg !621
  %1844 = icmp ne i32 %1843, 0, !dbg !621
  br label %originalBB211

originalBB215alteredBB:                           ; preds = %originalBB215, %854
  %1845 = call i32 @getcon(i8** @context), !dbg !625
  %1846 = icmp ne i32 %1845, 0, !dbg !625
  br label %originalBB215

originalBB219alteredBB:                           ; preds = %originalBB219, %873
  %1847 = load i8, i8* @just_context, align 1, !dbg !627
  %1848 = trunc i8 %1847 to i1, !dbg !627
  br label %originalBB219

originalBB223alteredBB:                           ; preds = %originalBB223, %892
  %1849 = load i8, i8* %16, align 1, !dbg !629
  %1850 = trunc i8 %1849 to i1, !dbg !629
  br label %originalBB223

originalBB227alteredBB:                           ; preds = %originalBB227, %911
  %1851 = call i64 @smack_new_label_from_self(i8** @context), !dbg !631
  %1852 = icmp slt i64 %1851, 0, !dbg !632
  br label %originalBB227

originalBB231alteredBB:                           ; preds = %originalBB231, %930
  %1853 = load i8, i8* @just_context, align 1, !dbg !634
  %1854 = trunc i8 %1853 to i1, !dbg !634
  br label %originalBB231

originalBB235alteredBB:                           ; preds = %originalBB235, %951
  br label %originalBB235

originalBB239alteredBB:                           ; preds = %originalBB239, %968
  %1855 = load i64, i64* %18, align 8, !dbg !638
  %1856 = icmp uge i64 %1855, 1, !dbg !640
  br label %originalBB239

originalBB243alteredBB:                           ; preds = %originalBB243, %998
  %1857 = load i32, i32* @optind, align 4, !dbg !649
  %1858 = sext i32 %1857 to i64, !dbg !649
  %1859 = load i64, i64* %18, align 8, !dbg !652
  %1860 = icmp ult i64 %1858, %1859, !dbg !653
  br label %originalBB243

originalBB247alteredBB:                           ; preds = %originalBB247, %1019
  store %struct.passwd* null, %struct.passwd** %20, align 8, !dbg !668
  call void @llvm.dbg.declare(metadata !4, metadata !867, metadata !DIExpression()), !dbg !670
  %1861 = load i8**, i8*** %13, align 8, !dbg !671
  %1862 = load i32, i32* @optind, align 4, !dbg !672
  %1863 = sext i32 %1862 to i64, !dbg !671
  %1864 = getelementptr inbounds i8*, i8** %1861, i64 %1863, !dbg !671
  %1865 = load i8*, i8** %1864, align 8, !dbg !671
  store i8* %1865, i8** %21, align 8, !dbg !670
  %1866 = load i8*, i8** %21, align 8, !dbg !673
  %1867 = load i8, i8* %1866, align 1, !dbg !675
  %1868 = icmp ne i8 %1867, 0, !dbg !675
  br label %originalBB247

originalBB251alteredBB:                           ; preds = %originalBB251, %1044
  %1869 = load i8*, i8** %21, align 8, !dbg !677
  %1870 = call i8* @parse_user_spec(i8* %1869, i32* @euid, i32* null, i8** null, i8** null), !dbg !680
  %1871 = icmp eq i8* %1870, null, !dbg !681
  br label %originalBB251

originalBB255alteredBB:                           ; preds = %originalBB255, %1064
  %1872 = load i32, i32* @euid, align 4, !dbg !683
  %1873 = call %struct.passwd* @getpwuid(i32 %1872), !dbg !685
  store %struct.passwd* %1873, %struct.passwd** %20, align 8, !dbg !686
  br label %originalBB255

originalBB259alteredBB:                           ; preds = %originalBB259, %1083
  br label %originalBB259

originalBB263alteredBB:                           ; preds = %originalBB263, %1100
  %1874 = load %struct.passwd*, %struct.passwd** %20, align 8, !dbg !689
  %1875 = icmp eq %struct.passwd* %1874, null, !dbg !691
  br label %originalBB263

originalBB267alteredBB:                           ; preds = %originalBB267, %1119
  %1876 = call i32* @__errno_location() #15, !dbg !693
  %1877 = load i32, i32* %1876, align 4, !dbg !693
  %1878 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.22, i64 0, i64 0)) #10, !dbg !695
  %1879 = load i8**, i8*** %13, align 8, !dbg !696
  %1880 = load i32, i32* @optind, align 4, !dbg !697
  %1881 = sext i32 %1880 to i64, !dbg !696
  %1882 = getelementptr inbounds i8*, i8** %1879, i64 %1881, !dbg !696
  %1883 = load i8*, i8** %1882, align 8, !dbg !696
  %1884 = call i8* @quote(i8* %1883), !dbg !698
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %1877, i8* %1878, i8* %1884), !dbg !699
  %1885 = load i8, i8* @ok, align 1, !dbg !700
  %1886 = trunc i8 %1885 to i1, !dbg !700
  %1887 = zext i1 %1886 to i32, !dbg !700
  %_268 = shl i32 %1887, 0
  %1888 = and i32 %1887, 0, !dbg !700
  %1889 = icmp ne i32 %1888, 0, !dbg !700
  %1890 = zext i1 %1889 to i8, !dbg !700
  store i8 %1890, i8* @ok, align 1, !dbg !700
  br label %originalBB267

originalBB272alteredBB:                           ; preds = %originalBB272, %1151
  %1891 = load %struct.passwd*, %struct.passwd** %20, align 8, !dbg !702
  %1892 = getelementptr inbounds %struct.passwd, %struct.passwd* %1891, i32 0, i32 0, !dbg !703
  %1893 = load i8*, i8** %1892, align 8, !dbg !703
  %1894 = call noalias i8* @xstrdup(i8* %1893), !dbg !704
  store i8* %1894, i8** %17, align 8, !dbg !705
  %1895 = load %struct.passwd*, %struct.passwd** %20, align 8, !dbg !706
  %1896 = getelementptr inbounds %struct.passwd, %struct.passwd* %1895, i32 0, i32 2, !dbg !707
  %1897 = load i32, i32* %1896, align 8, !dbg !707
  store i32 %1897, i32* @euid, align 4, !dbg !708
  store i32 %1897, i32* @ruid, align 4, !dbg !709
  %1898 = load %struct.passwd*, %struct.passwd** %20, align 8, !dbg !710
  %1899 = getelementptr inbounds %struct.passwd, %struct.passwd* %1898, i32 0, i32 3, !dbg !711
  %1900 = load i32, i32* %1899, align 4, !dbg !711
  store i32 %1900, i32* @egid, align 4, !dbg !712
  store i32 %1900, i32* @rgid, align 4, !dbg !713
  %1901 = load i8*, i8** %17, align 8, !dbg !714
  call void @print_stuff(i8* %1901), !dbg !715
  %1902 = load i8*, i8** %17, align 8, !dbg !716
  call void @free(i8* %1902) #10, !dbg !717
  br label %originalBB272

originalBB276alteredBB:                           ; preds = %originalBB276, %1180
  %1903 = load i32, i32* @optind, align 4, !dbg !719
  %_277 = sub i32 %1903, 1
  %gen278 = mul i32 %_277, 1
  %_279 = shl i32 %1903, 1
  %_280 = sub i32 0, %1903
  %gen281 = add i32 %_280, 1
  %1904 = add nsw i32 %1903, 1, !dbg !719
  store i32 %1904, i32* @optind, align 4, !dbg !719
  br label %originalBB276

originalBB285alteredBB:                           ; preds = %originalBB285, %1199
  br label %originalBB285

originalBB290alteredBB:                           ; preds = %originalBB290, %1216
  store i32 -1, i32* %22, align 4, !dbg !726
  call void @llvm.dbg.declare(metadata !4, metadata !920, metadata !DIExpression()), !dbg !728
  store i32 -1, i32* %23, align 4, !dbg !728
  %1905 = load i8, i8* @just_user, align 1, !dbg !729
  %1906 = trunc i8 %1905 to i1, !dbg !729
  br label %originalBB290

originalBB294alteredBB:                           ; preds = %originalBB294, %1235
  %1907 = load i8, i8* @use_real, align 1, !dbg !732
  %1908 = trunc i8 %1907 to i1, !dbg !732
  br label %originalBB294

originalBB298alteredBB:                           ; preds = %originalBB298, %1257
  %1909 = load i8, i8* @just_group_list, align 1, !dbg !735
  %1910 = trunc i8 %1909 to i1, !dbg !735
  br label %originalBB298

originalBB302alteredBB:                           ; preds = %originalBB302, %1276
  %1911 = load i8, i8* @just_context, align 1, !dbg !737
  %1912 = trunc i8 %1911 to i1, !dbg !737
  br label %originalBB302

originalBB306alteredBB:                           ; preds = %originalBB306, %1295
  %1913 = call i32* @__errno_location() #15, !dbg !738
  store i32 0, i32* %1913, align 4, !dbg !740
  %1914 = call i32 @geteuid() #10, !dbg !741
  store i32 %1914, i32* @euid, align 4, !dbg !742
  %1915 = load i32, i32* @euid, align 4, !dbg !743
  %1916 = load i32, i32* %22, align 4, !dbg !745
  %1917 = icmp eq i32 %1915, %1916, !dbg !746
  br label %originalBB306

originalBB310alteredBB:                           ; preds = %originalBB310, %1317
  %1918 = call i32* @__errno_location() #15, !dbg !748
  %1919 = load i32, i32* %1918, align 4, !dbg !748
  %1920 = icmp ne i32 %1919, 0, !dbg !748
  br label %originalBB310

originalBB314alteredBB:                           ; preds = %originalBB314, %1337
  %1921 = call i32* @__errno_location() #15, !dbg !750
  %1922 = load i32, i32* %1921, align 4, !dbg !750
  %1923 = call i8* @gettext(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.23, i64 0, i64 0)) #10, !dbg !750
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1922, i8* %1923), !dbg !750
  br label %originalBB314

originalBB318alteredBB:                           ; preds = %originalBB318, %1357
  br label %originalBB318

originalBB322alteredBB:                           ; preds = %originalBB322, %1380
  %1924 = load i8, i8* @just_group, align 1, !dbg !756
  %1925 = trunc i8 %1924 to i1, !dbg !756
  br label %originalBB322

originalBB326alteredBB:                           ; preds = %originalBB326, %1399
  %1926 = load i8, i8* @just_group_list, align 1, !dbg !758
  %1927 = trunc i8 %1926 to i1, !dbg !758
  br label %originalBB326

originalBB330alteredBB:                           ; preds = %originalBB330, %1418
  %1928 = load i8, i8* @just_context, align 1, !dbg !760
  %1929 = trunc i8 %1928 to i1, !dbg !760
  br label %originalBB330

originalBB334alteredBB:                           ; preds = %originalBB334, %1437
  %1930 = call i32* @__errno_location() #15, !dbg !761
  store i32 0, i32* %1930, align 4, !dbg !763
  %1931 = call i32 @getuid() #10, !dbg !764
  store i32 %1931, i32* @ruid, align 4, !dbg !765
  %1932 = load i32, i32* @ruid, align 4, !dbg !766
  %1933 = load i32, i32* %22, align 4, !dbg !768
  %1934 = icmp eq i32 %1932, %1933, !dbg !769
  br label %originalBB334

originalBB338alteredBB:                           ; preds = %originalBB338, %1459
  %1935 = call i32* @__errno_location() #15, !dbg !771
  %1936 = load i32, i32* %1935, align 4, !dbg !771
  %1937 = icmp ne i32 %1936, 0, !dbg !771
  br label %originalBB338

originalBB342alteredBB:                           ; preds = %originalBB342, %1483
  br label %originalBB342

originalBB346alteredBB:                           ; preds = %originalBB346, %1500
  %1938 = load i8, i8* @just_user, align 1, !dbg !775
  %1939 = trunc i8 %1938 to i1, !dbg !775
  br label %originalBB346

originalBB350alteredBB:                           ; preds = %originalBB350, %1519
  %1940 = load i8, i8* @just_group, align 1, !dbg !778
  %1941 = trunc i8 %1940 to i1, !dbg !778
  br label %originalBB350

originalBB354alteredBB:                           ; preds = %originalBB354, %1538
  %1942 = load i8, i8* @just_group_list, align 1, !dbg !780
  %1943 = trunc i8 %1942 to i1, !dbg !780
  br label %originalBB354

originalBB358alteredBB:                           ; preds = %originalBB358, %1557
  %1944 = load i8, i8* @just_context, align 1, !dbg !782
  %1945 = trunc i8 %1944 to i1, !dbg !782
  br label %originalBB358

originalBB362alteredBB:                           ; preds = %originalBB362, %1576
  %1946 = call i32* @__errno_location() #15, !dbg !784
  store i32 0, i32* %1946, align 4, !dbg !786
  %1947 = call i32 @getegid() #10, !dbg !787
  store i32 %1947, i32* @egid, align 4, !dbg !788
  %1948 = load i32, i32* @egid, align 4, !dbg !789
  %1949 = load i32, i32* %23, align 4, !dbg !791
  %1950 = icmp eq i32 %1948, %1949, !dbg !792
  br label %originalBB362

originalBB366alteredBB:                           ; preds = %originalBB366, %1598
  %1951 = call i32* @__errno_location() #15, !dbg !794
  %1952 = load i32, i32* %1951, align 4, !dbg !794
  %1953 = icmp ne i32 %1952, 0, !dbg !794
  br label %originalBB366

originalBB370alteredBB:                           ; preds = %originalBB370, %1618
  %1954 = call i32* @__errno_location() #15, !dbg !796
  %1955 = load i32, i32* %1954, align 4, !dbg !796
  %1956 = call i8* @gettext(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.25, i64 0, i64 0)) #10, !dbg !796
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1955, i8* %1956), !dbg !796
  br label %originalBB370

originalBB374alteredBB:                           ; preds = %originalBB374, %1644
  %1957 = call i32* @__errno_location() #15, !dbg !806
  %1958 = load i32, i32* %1957, align 4, !dbg !806
  %1959 = icmp ne i32 %1958, 0, !dbg !806
  br label %originalBB374

originalBB378alteredBB:                           ; preds = %originalBB378, %1664
  %1960 = call i32* @__errno_location() #15, !dbg !808
  %1961 = load i32, i32* %1960, align 4, !dbg !808
  %1962 = call i8* @gettext(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.26, i64 0, i64 0)) #10, !dbg !808
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1961, i8* %1962), !dbg !808
  br label %originalBB378

originalBB382alteredBB:                           ; preds = %originalBB382, %1684
  br label %originalBB382

originalBB386alteredBB:                           ; preds = %originalBB386, %1701
  %1963 = load i8*, i8** %17, align 8, !dbg !810
  call void @print_stuff(i8* %1963), !dbg !811
  br label %originalBB386

originalBB390alteredBB:                           ; preds = %originalBB390, %1719
  %1964 = load i8, i8* @ok, align 1, !dbg !812
  %1965 = trunc i8 %1964 to i1, !dbg !812
  %1966 = zext i1 %1965 to i64, !dbg !812
  %1967 = select i1 %1965, i32 0, i32 1, !dbg !812
  br label %originalBB390
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @is_smack_enabled() #4 !dbg !970 {
  %1 = load i32, i32* @x.5
  %2 = load i32, i32* @y.6
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = load i32, i32* @x.5
  %10 = load i32, i32* @y.6
  %11 = sub i32 %9, 1
  %12 = mul i32 %9, %11
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %10, 10
  %16 = or i1 %14, %15
  br i1 %16, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i1 false, !dbg !974

originalBBalteredBB:                              ; preds = %originalBB, %0
  br label %originalBB
}

; Function Attrs: nounwind
declare dso_local i8* @bindtextdomain(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @textdomain(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @atexit(void ()*) #2

; Function Attrs: nounwind
declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #2

declare dso_local void @error(i32, i32, i8*, ...) #3

; Function Attrs: nounwind
declare dso_local i8* @getenv(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @smack_new_label_from_self(i8**) #4 !dbg !975 {
  %2 = load i32, i32* @x.7
  %3 = load i32, i32* @y.8
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8**, align 8
  store i8** %0, i8*** %10, align 8
  call void @llvm.dbg.declare(metadata i8*** %10, metadata !982, metadata !DIExpression()), !dbg !983
  %11 = load i32, i32* @x.7
  %12 = load i32, i32* @y.8
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i64 -1, !dbg !984

originalBBalteredBB:                              ; preds = %originalBB, %1
  %19 = alloca i8**, align 8
  store i8** %0, i8*** %19, align 8
  call void @llvm.dbg.declare(metadata i8*** %19, metadata !985, metadata !DIExpression()), !dbg !983
  br label %originalBB
}

declare dso_local %struct.passwd* @getpwuid(i32) #3

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #8

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_stuff(i8*) #4 !dbg !1033 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !1034, metadata !DIExpression()), !dbg !1035
  %3 = load i8, i8* @just_user, align 1, !dbg !1036
  %4 = trunc i8 %3 to i1, !dbg !1036
  br i1 %4, label %5, label %62, !dbg !1038

5:                                                ; preds = %1
  %6 = load i8, i8* @use_real, align 1, !dbg !1039
  %7 = trunc i8 %6 to i1, !dbg !1039
  br i1 %7, label %8, label %26, !dbg !1039

8:                                                ; preds = %5
  %9 = load i32, i32* @x.9
  %10 = load i32, i32* @y.10
  %11 = sub i32 %9, 1
  %12 = mul i32 %9, %11
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %10, 10
  %16 = or i1 %14, %15
  br i1 %16, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %8, %originalBBalteredBB
  %17 = load i32, i32* @ruid, align 4, !dbg !1040
  %18 = load i32, i32* @x.9
  %19 = load i32, i32* @y.10
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %44, !dbg !1039

26:                                               ; preds = %5
  %27 = load i32, i32* @x.9
  %28 = load i32, i32* @y.10
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load i32, i32* @euid, align 4, !dbg !1041
  %36 = load i32, i32* @x.9
  %37 = load i32, i32* @y.10
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %44, !dbg !1039

44:                                               ; preds = %originalBBpart24, %originalBBpart2
  %45 = phi i32 [ %17, %originalBBpart2 ], [ %35, %originalBBpart24 ], !dbg !1039
  %46 = load i32, i32* @x.9
  %47 = load i32, i32* @y.10
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  call void @print_user(i32 %45), !dbg !1042
  %54 = load i32, i32* @x.9
  %55 = load i32, i32* @y.10
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %311, !dbg !1042

62:                                               ; preds = %1
  %63 = load i32, i32* @x.9
  %64 = load i32, i32* @y.10
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %62, %originalBB10alteredBB
  %71 = load i8, i8* @just_group, align 1, !dbg !1043
  %72 = trunc i8 %71 to i1, !dbg !1043
  %73 = load i32, i32* @x.9
  %74 = load i32, i32* @y.10
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %72, label %81, label %164, !dbg !1045

81:                                               ; preds = %originalBBpart212
  %82 = load i32, i32* @x.9
  %83 = load i32, i32* @y.10
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %81, %originalBB14alteredBB
  %90 = load i8, i8* @use_real, align 1, !dbg !1046
  %91 = trunc i8 %90 to i1, !dbg !1046
  %92 = load i32, i32* @x.9
  %93 = load i32, i32* @y.10
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %91, label %100, label %118, !dbg !1046

100:                                              ; preds = %originalBBpart216
  %101 = load i32, i32* @x.9
  %102 = load i32, i32* @y.10
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %100, %originalBB18alteredBB
  %109 = load i32, i32* @rgid, align 4, !dbg !1047
  %110 = load i32, i32* @x.9
  %111 = load i32, i32* @y.10
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %136, !dbg !1046

118:                                              ; preds = %originalBBpart216
  %119 = load i32, i32* @x.9
  %120 = load i32, i32* @y.10
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %118, %originalBB22alteredBB
  %127 = load i32, i32* @egid, align 4, !dbg !1048
  %128 = load i32, i32* @x.9
  %129 = load i32, i32* @y.10
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %136, !dbg !1046

136:                                              ; preds = %originalBBpart224, %originalBBpart220
  %137 = phi i32 [ %109, %originalBBpart220 ], [ %127, %originalBBpart224 ], !dbg !1046
  %138 = load i32, i32* @x.9
  %139 = load i32, i32* @y.10
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %136, %originalBB26alteredBB
  %146 = load i8, i8* @use_name, align 1, !dbg !1049
  %147 = trunc i8 %146 to i1, !dbg !1049
  %148 = call zeroext i1 @print_group(i32 %137, i1 zeroext %147), !dbg !1050
  %149 = zext i1 %148 to i32, !dbg !1050
  %150 = load i8, i8* @ok, align 1, !dbg !1051
  %151 = trunc i8 %150 to i1, !dbg !1051
  %152 = zext i1 %151 to i32, !dbg !1051
  %153 = and i32 %152, %149, !dbg !1051
  %154 = icmp ne i32 %153, 0, !dbg !1051
  %155 = zext i1 %154 to i8, !dbg !1051
  store i8 %155, i8* @ok, align 1, !dbg !1051
  %156 = load i32, i32* @x.9
  %157 = load i32, i32* @y.10
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBBpart239, label %originalBB26alteredBB

originalBBpart239:                                ; preds = %originalBB26
  br label %294, !dbg !1052

164:                                              ; preds = %originalBBpart212
  %165 = load i32, i32* @x.9
  %166 = load i32, i32* @y.10
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %164, %originalBB41alteredBB
  %173 = load i8, i8* @just_group_list, align 1, !dbg !1053
  %174 = trunc i8 %173 to i1, !dbg !1053
  %175 = load i32, i32* @x.9
  %176 = load i32, i32* @y.10
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %originalBBpart243, label %originalBB41alteredBB

originalBBpart243:                                ; preds = %originalBB41
  br i1 %174, label %183, label %219, !dbg !1055

183:                                              ; preds = %originalBBpart243
  %184 = load i32, i32* @x.9
  %185 = load i32, i32* @y.10
  %186 = sub i32 %184, 1
  %187 = mul i32 %184, %186
  %188 = urem i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %189, %190
  br i1 %191, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %183, %originalBB45alteredBB
  %192 = load i8*, i8** %2, align 8, !dbg !1056
  %193 = load i32, i32* @ruid, align 4, !dbg !1057
  %194 = load i32, i32* @rgid, align 4, !dbg !1058
  %195 = load i32, i32* @egid, align 4, !dbg !1059
  %196 = load i8, i8* @use_name, align 1, !dbg !1060
  %197 = trunc i8 %196 to i1, !dbg !1060
  %198 = load i8, i8* @opt_zero, align 1, !dbg !1061
  %199 = trunc i8 %198 to i1, !dbg !1061
  %200 = zext i1 %199 to i64, !dbg !1061
  %201 = select i1 %199, i32 0, i32 32, !dbg !1061
  %202 = trunc i32 %201 to i8, !dbg !1061
  %203 = call zeroext i1 @print_group_list(i8* %192, i32 %193, i32 %194, i32 %195, i1 zeroext %197, i8 signext %202), !dbg !1062
  %204 = zext i1 %203 to i32, !dbg !1062
  %205 = load i8, i8* @ok, align 1, !dbg !1063
  %206 = trunc i8 %205 to i1, !dbg !1063
  %207 = zext i1 %206 to i32, !dbg !1063
  %208 = and i32 %207, %204, !dbg !1063
  %209 = icmp ne i32 %208, 0, !dbg !1063
  %210 = zext i1 %209 to i8, !dbg !1063
  store i8 %210, i8* @ok, align 1, !dbg !1063
  %211 = load i32, i32* @x.9
  %212 = load i32, i32* @y.10
  %213 = sub i32 %211, 1
  %214 = mul i32 %211, %213
  %215 = urem i32 %214, 2
  %216 = icmp eq i32 %215, 0
  %217 = icmp slt i32 %212, 10
  %218 = or i1 %216, %217
  br i1 %218, label %originalBBpart249, label %originalBB45alteredBB

originalBBpart249:                                ; preds = %originalBB45
  br label %277, !dbg !1064

219:                                              ; preds = %originalBBpart243
  %220 = load i32, i32* @x.9
  %221 = load i32, i32* @y.10
  %222 = sub i32 %220, 1
  %223 = mul i32 %220, %222
  %224 = urem i32 %223, 2
  %225 = icmp eq i32 %224, 0
  %226 = icmp slt i32 %221, 10
  %227 = or i1 %225, %226
  br i1 %227, label %originalBB51, label %originalBB51alteredBB

originalBB51:                                     ; preds = %219, %originalBB51alteredBB
  %228 = load i8, i8* @just_context, align 1, !dbg !1065
  %229 = trunc i8 %228 to i1, !dbg !1065
  %230 = load i32, i32* @x.9
  %231 = load i32, i32* @y.10
  %232 = sub i32 %230, 1
  %233 = mul i32 %230, %232
  %234 = urem i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = icmp slt i32 %231, 10
  %237 = or i1 %235, %236
  br i1 %237, label %originalBBpart253, label %originalBB51alteredBB

originalBBpart253:                                ; preds = %originalBB51
  br i1 %229, label %238, label %258, !dbg !1067

238:                                              ; preds = %originalBBpart253
  %239 = load i32, i32* @x.9
  %240 = load i32, i32* @y.10
  %241 = sub i32 %239, 1
  %242 = mul i32 %239, %241
  %243 = urem i32 %242, 2
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %244, %245
  br i1 %246, label %originalBB55, label %originalBB55alteredBB

originalBB55:                                     ; preds = %238, %originalBB55alteredBB
  %247 = load i8*, i8** @context, align 8, !dbg !1068
  %248 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1068
  %249 = call i32 @fputs_unlocked(i8* %247, %struct._IO_FILE* %248), !dbg !1068
  %250 = load i32, i32* @x.9
  %251 = load i32, i32* @y.10
  %252 = sub i32 %250, 1
  %253 = mul i32 %250, %252
  %254 = urem i32 %253, 2
  %255 = icmp eq i32 %254, 0
  %256 = icmp slt i32 %251, 10
  %257 = or i1 %255, %256
  br i1 %257, label %originalBBpart257, label %originalBB55alteredBB

originalBBpart257:                                ; preds = %originalBB55
  br label %260, !dbg !1068

258:                                              ; preds = %originalBBpart253
  %259 = load i8*, i8** %2, align 8, !dbg !1069
  call void @print_full_info(i8* %259), !dbg !1070
  br label %260

260:                                              ; preds = %258, %originalBBpart257
  %261 = load i32, i32* @x.9
  %262 = load i32, i32* @y.10
  %263 = sub i32 %261, 1
  %264 = mul i32 %261, %263
  %265 = urem i32 %264, 2
  %266 = icmp eq i32 %265, 0
  %267 = icmp slt i32 %262, 10
  %268 = or i1 %266, %267
  br i1 %268, label %originalBB59, label %originalBB59alteredBB

originalBB59:                                     ; preds = %260, %originalBB59alteredBB
  %269 = load i32, i32* @x.9
  %270 = load i32, i32* @y.10
  %271 = sub i32 %269, 1
  %272 = mul i32 %269, %271
  %273 = urem i32 %272, 2
  %274 = icmp eq i32 %273, 0
  %275 = icmp slt i32 %270, 10
  %276 = or i1 %274, %275
  br i1 %276, label %originalBBpart261, label %originalBB59alteredBB

originalBBpart261:                                ; preds = %originalBB59
  br label %277

277:                                              ; preds = %originalBBpart261, %originalBBpart249
  %278 = load i32, i32* @x.9
  %279 = load i32, i32* @y.10
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %277, %originalBB63alteredBB
  %286 = load i32, i32* @x.9
  %287 = load i32, i32* @y.10
  %288 = sub i32 %286, 1
  %289 = mul i32 %286, %288
  %290 = urem i32 %289, 2
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %291, %292
  br i1 %293, label %originalBBpart265, label %originalBB63alteredBB

originalBBpart265:                                ; preds = %originalBB63
  br label %294

294:                                              ; preds = %originalBBpart265, %originalBBpart239
  %295 = load i32, i32* @x.9
  %296 = load i32, i32* @y.10
  %297 = sub i32 %295, 1
  %298 = mul i32 %295, %297
  %299 = urem i32 %298, 2
  %300 = icmp eq i32 %299, 0
  %301 = icmp slt i32 %296, 10
  %302 = or i1 %300, %301
  br i1 %302, label %originalBB67, label %originalBB67alteredBB

originalBB67:                                     ; preds = %294, %originalBB67alteredBB
  %303 = load i32, i32* @x.9
  %304 = load i32, i32* @y.10
  %305 = sub i32 %303, 1
  %306 = mul i32 %303, %305
  %307 = urem i32 %306, 2
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %308, %309
  br i1 %310, label %originalBBpart269, label %originalBB67alteredBB

originalBBpart269:                                ; preds = %originalBB67
  br label %311

311:                                              ; preds = %originalBBpart269, %originalBBpart28
  %312 = load i32, i32* @x.9
  %313 = load i32, i32* @y.10
  %314 = sub i32 %312, 1
  %315 = mul i32 %312, %314
  %316 = urem i32 %315, 2
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %317, %318
  br i1 %319, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %311, %originalBB71alteredBB
  %320 = load i8, i8* @opt_zero, align 1, !dbg !1071
  %321 = trunc i8 %320 to i1, !dbg !1071
  %322 = load i32, i32* @x.9
  %323 = load i32, i32* @y.10
  %324 = sub i32 %322, 1
  %325 = mul i32 %322, %324
  %326 = urem i32 %325, 2
  %327 = icmp eq i32 %326, 0
  %328 = icmp slt i32 %323, 10
  %329 = or i1 %327, %328
  br i1 %329, label %originalBBpart273, label %originalBB71alteredBB

originalBBpart273:                                ; preds = %originalBB71
  br i1 %321, label %330, label %371, !dbg !1073

330:                                              ; preds = %originalBBpart273
  %331 = load i8, i8* @just_group_list, align 1, !dbg !1074
  %332 = trunc i8 %331 to i1, !dbg !1074
  br i1 %332, label %333, label %371, !dbg !1075

333:                                              ; preds = %330
  %334 = load i32, i32* @x.9
  %335 = load i32, i32* @y.10
  %336 = sub i32 %334, 1
  %337 = mul i32 %334, %336
  %338 = urem i32 %337, 2
  %339 = icmp eq i32 %338, 0
  %340 = icmp slt i32 %335, 10
  %341 = or i1 %339, %340
  br i1 %341, label %originalBB75, label %originalBB75alteredBB

originalBB75:                                     ; preds = %333, %originalBB75alteredBB
  %342 = load i8, i8* @multiple_users, align 1, !dbg !1076
  %343 = trunc i8 %342 to i1, !dbg !1076
  %344 = load i32, i32* @x.9
  %345 = load i32, i32* @y.10
  %346 = sub i32 %344, 1
  %347 = mul i32 %344, %346
  %348 = urem i32 %347, 2
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %349, %350
  br i1 %351, label %originalBBpart277, label %originalBB75alteredBB

originalBBpart277:                                ; preds = %originalBB75
  br i1 %343, label %352, label %371, !dbg !1077

352:                                              ; preds = %originalBBpart277
  %353 = load i32, i32* @x.9
  %354 = load i32, i32* @y.10
  %355 = sub i32 %353, 1
  %356 = mul i32 %353, %355
  %357 = urem i32 %356, 2
  %358 = icmp eq i32 %357, 0
  %359 = icmp slt i32 %354, 10
  %360 = or i1 %358, %359
  br i1 %360, label %originalBB79, label %originalBB79alteredBB

originalBB79:                                     ; preds = %352, %originalBB79alteredBB
  %361 = call i32 @putchar_unlocked(i32 0), !dbg !1078
  %362 = call i32 @putchar_unlocked(i32 0), !dbg !1080
  %363 = load i32, i32* @x.9
  %364 = load i32, i32* @y.10
  %365 = sub i32 %363, 1
  %366 = mul i32 %363, %365
  %367 = urem i32 %366, 2
  %368 = icmp eq i32 %367, 0
  %369 = icmp slt i32 %364, 10
  %370 = or i1 %368, %369
  br i1 %370, label %originalBBpart281, label %originalBB79alteredBB

originalBBpart281:                                ; preds = %originalBB79
  br label %393, !dbg !1081

371:                                              ; preds = %originalBBpart277, %330, %originalBBpart273
  %372 = load i32, i32* @x.9
  %373 = load i32, i32* @y.10
  %374 = sub i32 %372, 1
  %375 = mul i32 %372, %374
  %376 = urem i32 %375, 2
  %377 = icmp eq i32 %376, 0
  %378 = icmp slt i32 %373, 10
  %379 = or i1 %377, %378
  br i1 %379, label %originalBB83, label %originalBB83alteredBB

originalBB83:                                     ; preds = %371, %originalBB83alteredBB
  %380 = load i8, i8* @opt_zero, align 1, !dbg !1082
  %381 = trunc i8 %380 to i1, !dbg !1082
  %382 = zext i1 %381 to i64, !dbg !1082
  %383 = select i1 %381, i32 0, i32 10, !dbg !1082
  %384 = call i32 @putchar_unlocked(i32 %383), !dbg !1082
  %385 = load i32, i32* @x.9
  %386 = load i32, i32* @y.10
  %387 = sub i32 %385, 1
  %388 = mul i32 %385, %387
  %389 = urem i32 %388, 2
  %390 = icmp eq i32 %389, 0
  %391 = icmp slt i32 %386, 10
  %392 = or i1 %390, %391
  br i1 %392, label %originalBBpart285, label %originalBB83alteredBB

originalBBpart285:                                ; preds = %originalBB83
  br label %393

393:                                              ; preds = %originalBBpart285, %originalBBpart281
  ret void, !dbg !1084

originalBBalteredBB:                              ; preds = %originalBB, %8
  %394 = load i32, i32* @ruid, align 4, !dbg !1040
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %395 = load i32, i32* @euid, align 4, !dbg !1041
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  call void @print_user(i32 %45), !dbg !1042
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %62
  %396 = load i8, i8* @just_group, align 1, !dbg !1043
  %397 = trunc i8 %396 to i1, !dbg !1043
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %81
  %398 = load i8, i8* @use_real, align 1, !dbg !1046
  %399 = trunc i8 %398 to i1, !dbg !1046
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %100
  %400 = load i32, i32* @rgid, align 4, !dbg !1047
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %118
  %401 = load i32, i32* @egid, align 4, !dbg !1048
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %136
  %402 = load i8, i8* @use_name, align 1, !dbg !1049
  %403 = trunc i8 %402 to i1, !dbg !1049
  %404 = call zeroext i1 @print_group(i32 %137, i1 zeroext %403), !dbg !1050
  %405 = zext i1 %404 to i32, !dbg !1050
  %406 = load i8, i8* @ok, align 1, !dbg !1051
  %407 = trunc i8 %406 to i1, !dbg !1051
  %408 = zext i1 %407 to i32, !dbg !1051
  %_ = shl i32 %408, %405
  %_27 = sub i32 0, %408
  %gen = add i32 %_27, %405
  %_28 = sub i32 %408, %405
  %gen29 = mul i32 %_28, %405
  %_30 = sub i32 0, %408
  %gen31 = add i32 %_30, %405
  %_32 = sub i32 %408, %405
  %gen33 = mul i32 %_32, %405
  %_34 = sub i32 0, %408
  %gen35 = add i32 %_34, %405
  %_36 = sub i32 %408, %405
  %gen37 = mul i32 %_36, %405
  %409 = and i32 %408, %405, !dbg !1051
  %410 = icmp ne i32 %409, 0, !dbg !1051
  %411 = zext i1 %410 to i8, !dbg !1051
  store i8 %411, i8* @ok, align 1, !dbg !1051
  br label %originalBB26

originalBB41alteredBB:                            ; preds = %originalBB41, %164
  %412 = load i8, i8* @just_group_list, align 1, !dbg !1053
  %413 = trunc i8 %412 to i1, !dbg !1053
  br label %originalBB41

originalBB45alteredBB:                            ; preds = %originalBB45, %183
  %414 = load i8*, i8** %2, align 8, !dbg !1056
  %415 = load i32, i32* @ruid, align 4, !dbg !1057
  %416 = load i32, i32* @rgid, align 4, !dbg !1058
  %417 = load i32, i32* @egid, align 4, !dbg !1059
  %418 = load i8, i8* @use_name, align 1, !dbg !1060
  %419 = trunc i8 %418 to i1, !dbg !1060
  %420 = load i8, i8* @opt_zero, align 1, !dbg !1061
  %421 = trunc i8 %420 to i1, !dbg !1061
  %422 = zext i1 %421 to i64, !dbg !1061
  %423 = select i1 %421, i32 0, i32 32, !dbg !1061
  %424 = trunc i32 %423 to i8, !dbg !1061
  %425 = call zeroext i1 @print_group_list(i8* %414, i32 %415, i32 %416, i32 %417, i1 zeroext %419, i8 signext %424), !dbg !1062
  %426 = zext i1 %425 to i32, !dbg !1062
  %427 = load i8, i8* @ok, align 1, !dbg !1063
  %428 = trunc i8 %427 to i1, !dbg !1063
  %429 = zext i1 %428 to i32, !dbg !1063
  %_46 = sub i32 %429, %426
  %gen47 = mul i32 %_46, %426
  %430 = and i32 %429, %426, !dbg !1063
  %431 = icmp ne i32 %430, 0, !dbg !1063
  %432 = zext i1 %431 to i8, !dbg !1063
  store i8 %432, i8* @ok, align 1, !dbg !1063
  br label %originalBB45

originalBB51alteredBB:                            ; preds = %originalBB51, %219
  %433 = load i8, i8* @just_context, align 1, !dbg !1065
  %434 = trunc i8 %433 to i1, !dbg !1065
  br label %originalBB51

originalBB55alteredBB:                            ; preds = %originalBB55, %238
  %435 = load i8*, i8** @context, align 8, !dbg !1068
  %436 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1068
  %437 = call i32 @fputs_unlocked(i8* %435, %struct._IO_FILE* %436), !dbg !1068
  br label %originalBB55

originalBB59alteredBB:                            ; preds = %originalBB59, %260
  br label %originalBB59

originalBB63alteredBB:                            ; preds = %originalBB63, %277
  br label %originalBB63

originalBB67alteredBB:                            ; preds = %originalBB67, %294
  br label %originalBB67

originalBB71alteredBB:                            ; preds = %originalBB71, %311
  %438 = load i8, i8* @opt_zero, align 1, !dbg !1071
  %439 = trunc i8 %438 to i1, !dbg !1071
  br label %originalBB71

originalBB75alteredBB:                            ; preds = %originalBB75, %333
  %440 = load i8, i8* @multiple_users, align 1, !dbg !1076
  %441 = trunc i8 %440 to i1, !dbg !1076
  br label %originalBB75

originalBB79alteredBB:                            ; preds = %originalBB79, %352
  %442 = call i32 @putchar_unlocked(i32 0), !dbg !1078
  %443 = call i32 @putchar_unlocked(i32 0), !dbg !1080
  br label %originalBB79

originalBB83alteredBB:                            ; preds = %originalBB83, %371
  %444 = load i8, i8* @opt_zero, align 1, !dbg !1082
  %445 = trunc i8 %444 to i1, !dbg !1082
  %446 = zext i1 %445 to i64, !dbg !1082
  %447 = select i1 %445, i32 0, i32 10, !dbg !1082
  %448 = call i32 @putchar_unlocked(i32 %447), !dbg !1082
  br label %originalBB83
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @geteuid() #2

; Function Attrs: nounwind
declare dso_local i32 @getuid() #2

; Function Attrs: nounwind
declare dso_local i32 @getegid() #2

; Function Attrs: nounwind
declare dso_local i32 @getgid() #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_user(i32) #4 !dbg !1085 {
  %2 = load i32, i32* @x.11
  %3 = load i32, i32* @y.12
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct.passwd*, align 8
  %12 = alloca i8*, align 8
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !1088, metadata !DIExpression()), !dbg !1089
  call void @llvm.dbg.declare(metadata %struct.passwd** %11, metadata !1090, metadata !DIExpression()), !dbg !1091
  store %struct.passwd* null, %struct.passwd** %11, align 8, !dbg !1091
  %13 = load i8, i8* @use_name, align 1, !dbg !1092
  %14 = trunc i8 %13 to i1, !dbg !1092
  %15 = load i32, i32* @x.11
  %16 = load i32, i32* @y.12
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %86, !dbg !1094

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.11
  %25 = load i32, i32* @y.12
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  %32 = load i32, i32* %10, align 4, !dbg !1095
  %33 = call %struct.passwd* @getpwuid(i32 %32), !dbg !1097
  store %struct.passwd* %33, %struct.passwd** %11, align 8, !dbg !1098
  %34 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !1099
  %35 = icmp eq %struct.passwd* %34, null, !dbg !1101
  %36 = load i32, i32* @x.11
  %37 = load i32, i32* @y.12
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %35, label %44, label %69, !dbg !1102

44:                                               ; preds = %originalBBpart24
  %45 = load i32, i32* @x.11
  %46 = load i32, i32* @y.12
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  %53 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.51, i64 0, i64 0)) #10, !dbg !1103
  %54 = call i8* @uidtostr_ptr(i32* %10), !dbg !1105
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %53, i8* %54), !dbg !1106
  %55 = load i8, i8* @ok, align 1, !dbg !1107
  %56 = trunc i8 %55 to i1, !dbg !1107
  %57 = zext i1 %56 to i32, !dbg !1107
  %58 = and i32 %57, 0, !dbg !1107
  %59 = icmp ne i32 %58, 0, !dbg !1107
  %60 = zext i1 %59 to i8, !dbg !1107
  store i8 %60, i8* @ok, align 1, !dbg !1107
  %61 = load i32, i32* @x.11
  %62 = load i32, i32* @y.12
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart218, label %originalBB6alteredBB

originalBBpart218:                                ; preds = %originalBB6
  br label %69, !dbg !1108

69:                                               ; preds = %originalBBpart218, %originalBBpart24
  %70 = load i32, i32* @x.11
  %71 = load i32, i32* @y.12
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %69, %originalBB20alteredBB
  %78 = load i32, i32* @x.11
  %79 = load i32, i32* @y.12
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  br label %86, !dbg !1109

86:                                               ; preds = %originalBBpart222, %originalBBpart2
  call void @llvm.dbg.declare(metadata i8** %12, metadata !1110, metadata !DIExpression()), !dbg !1111
  %87 = load i32, i32* @x.11
  %88 = load i32, i32* @y.12
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %86, %originalBB24alteredBB
  %95 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !1112
  %96 = icmp ne %struct.passwd* %95, null, !dbg !1112
  %97 = load i32, i32* @x.11
  %98 = load i32, i32* @y.12
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBBpart227, label %originalBB24alteredBB

originalBBpart227:                                ; preds = %originalBB24
  br i1 %96, label %105, label %125, !dbg !1112

105:                                              ; preds = %originalBBpart227
  %106 = load i32, i32* @x.11
  %107 = load i32, i32* @y.12
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %105, %originalBB29alteredBB
  %114 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !1113
  %115 = getelementptr inbounds %struct.passwd, %struct.passwd* %114, i32 0, i32 0, !dbg !1114
  %116 = load i8*, i8** %115, align 8, !dbg !1114
  %117 = load i32, i32* @x.11
  %118 = load i32, i32* @y.12
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br label %143, !dbg !1112

125:                                              ; preds = %originalBBpart227
  %126 = load i32, i32* @x.11
  %127 = load i32, i32* @y.12
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %125, %originalBB33alteredBB
  %134 = call i8* @uidtostr_ptr(i32* %10), !dbg !1115
  %135 = load i32, i32* @x.11
  %136 = load i32, i32* @y.12
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br label %143, !dbg !1112

143:                                              ; preds = %originalBBpart235, %originalBBpart231
  %144 = phi i8* [ %116, %originalBBpart231 ], [ %134, %originalBBpart235 ], !dbg !1112
  %145 = load i32, i32* @x.11
  %146 = load i32, i32* @y.12
  %147 = sub i32 %145, 1
  %148 = mul i32 %145, %147
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %150, %151
  br i1 %152, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %143, %originalBB37alteredBB
  store i8* %144, i8** %12, align 8, !dbg !1111
  %153 = load i8*, i8** %12, align 8, !dbg !1116
  %154 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1116
  %155 = call i32 @fputs_unlocked(i8* %153, %struct._IO_FILE* %154), !dbg !1116
  %156 = load i32, i32* @x.11
  %157 = load i32, i32* @y.12
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  ret void, !dbg !1117

originalBBalteredBB:                              ; preds = %originalBB, %1
  %164 = alloca i32, align 4
  %165 = alloca %struct.passwd*, align 8
  %166 = alloca i8*, align 8
  store i32 %0, i32* %164, align 4
  call void @llvm.dbg.declare(metadata i32* %164, metadata !1118, metadata !DIExpression()), !dbg !1089
  call void @llvm.dbg.declare(metadata %struct.passwd** %165, metadata !1166, metadata !DIExpression()), !dbg !1091
  store %struct.passwd* null, %struct.passwd** %165, align 8, !dbg !1091
  %167 = load i8, i8* @use_name, align 1, !dbg !1092
  %168 = trunc i8 %167 to i1, !dbg !1092
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  %169 = load i32, i32* %10, align 4, !dbg !1095
  %170 = call %struct.passwd* @getpwuid(i32 %169), !dbg !1097
  store %struct.passwd* %170, %struct.passwd** %11, align 8, !dbg !1098
  %171 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !1099
  %172 = icmp eq %struct.passwd* %171, null, !dbg !1101
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  %173 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.51, i64 0, i64 0)) #10, !dbg !1103
  %174 = call i8* @uidtostr_ptr(i32* %10), !dbg !1105
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %173, i8* %174), !dbg !1106
  %175 = load i8, i8* @ok, align 1, !dbg !1107
  %176 = trunc i8 %175 to i1, !dbg !1107
  %177 = zext i1 %176 to i32, !dbg !1107
  %_ = sub i32 0, %177
  %gen = add i32 %_, 0
  %_7 = sub i32 %177, 0
  %gen8 = mul i32 %_7, 0
  %_9 = sub i32 0, %177
  %gen10 = add i32 %_9, 0
  %_11 = sub i32 0, %177
  %gen12 = add i32 %_11, 0
  %_13 = sub i32 %177, 0
  %gen14 = mul i32 %_13, 0
  %_15 = shl i32 %177, 0
  %_16 = shl i32 %177, 0
  %178 = and i32 %177, 0, !dbg !1107
  %179 = icmp ne i32 %178, 0, !dbg !1107
  %180 = zext i1 %179 to i8, !dbg !1107
  store i8 %180, i8* @ok, align 1, !dbg !1107
  br label %originalBB6

originalBB20alteredBB:                            ; preds = %originalBB20, %69
  br label %originalBB20

originalBB24alteredBB:                            ; preds = %originalBB24, %86
  %181 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !1112
  %182 = icmp ne %struct.passwd* %181, null, !dbg !1112
  br label %originalBB24

originalBB29alteredBB:                            ; preds = %originalBB29, %105
  %183 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !1113
  %184 = getelementptr inbounds %struct.passwd, %struct.passwd* %183, i32 0, i32 0, !dbg !1114
  %185 = load i8*, i8** %184, align 8, !dbg !1114
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %125
  %186 = call i8* @uidtostr_ptr(i32* %10), !dbg !1115
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %143
  store i8* %144, i8** %12, align 8, !dbg !1111
  %187 = load i8*, i8** %12, align 8, !dbg !1116
  %188 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1116
  %189 = call i32 @fputs_unlocked(i8* %187, %struct._IO_FILE* %188), !dbg !1116
  br label %originalBB37
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_full_info(i8*) #4 !dbg !1177 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.passwd*, align 8
  %4 = alloca %struct.group*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !1178, metadata !DIExpression()), !dbg !1179
  call void @llvm.dbg.declare(metadata %struct.passwd** %3, metadata !1180, metadata !DIExpression()), !dbg !1181
  call void @llvm.dbg.declare(metadata %struct.group** %4, metadata !1182, metadata !DIExpression()), !dbg !1191
  %9 = call i8* @gettext(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.52, i64 0, i64 0)) #10, !dbg !1192
  %10 = call i8* @uidtostr_ptr(i32* @ruid), !dbg !1193
  %11 = call i32 (i8*, ...) @printf(i8* %9, i8* %10), !dbg !1194
  %12 = load i32, i32* @ruid, align 4, !dbg !1195
  %13 = call %struct.passwd* @getpwuid(i32 %12), !dbg !1196
  store %struct.passwd* %13, %struct.passwd** %3, align 8, !dbg !1197
  %14 = load %struct.passwd*, %struct.passwd** %3, align 8, !dbg !1198
  %15 = icmp ne %struct.passwd* %14, null, !dbg !1198
  br i1 %15, label %16, label %37, !dbg !1200

16:                                               ; preds = %1
  %17 = load i32, i32* @x.13
  %18 = load i32, i32* @y.14
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %16, %originalBBalteredBB
  %25 = load %struct.passwd*, %struct.passwd** %3, align 8, !dbg !1201
  %26 = getelementptr inbounds %struct.passwd, %struct.passwd* %25, i32 0, i32 0, !dbg !1202
  %27 = load i8*, i8** %26, align 8, !dbg !1202
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %27), !dbg !1203
  %29 = load i32, i32* @x.13
  %30 = load i32, i32* @y.14
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %37, !dbg !1203

37:                                               ; preds = %originalBBpart2, %1
  %38 = load i32, i32* @x.13
  %39 = load i32, i32* @y.14
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %46 = call i8* @gettext(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.54, i64 0, i64 0)) #10, !dbg !1204
  %47 = call i8* @gidtostr_ptr(i32* @rgid), !dbg !1205
  %48 = call i32 (i8*, ...) @printf(i8* %46, i8* %47), !dbg !1206
  %49 = load i32, i32* @rgid, align 4, !dbg !1207
  %50 = call %struct.group* @getgrgid(i32 %49), !dbg !1208
  store %struct.group* %50, %struct.group** %4, align 8, !dbg !1209
  %51 = load %struct.group*, %struct.group** %4, align 8, !dbg !1210
  %52 = icmp ne %struct.group* %51, null, !dbg !1210
  %53 = load i32, i32* @x.13
  %54 = load i32, i32* @y.14
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %52, label %61, label %82, !dbg !1212

61:                                               ; preds = %originalBBpart24
  %62 = load i32, i32* @x.13
  %63 = load i32, i32* @y.14
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %61, %originalBB6alteredBB
  %70 = load %struct.group*, %struct.group** %4, align 8, !dbg !1213
  %71 = getelementptr inbounds %struct.group, %struct.group* %70, i32 0, i32 0, !dbg !1214
  %72 = load i8*, i8** %71, align 8, !dbg !1214
  %73 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %72), !dbg !1215
  %74 = load i32, i32* @x.13
  %75 = load i32, i32* @y.14
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %82, !dbg !1215

82:                                               ; preds = %originalBBpart28, %originalBBpart24
  %83 = load i32, i32* @euid, align 4, !dbg !1216
  %84 = load i32, i32* @ruid, align 4, !dbg !1218
  %85 = icmp ne i32 %83, %84, !dbg !1219
  br i1 %85, label %86, label %132, !dbg !1220

86:                                               ; preds = %82
  %87 = load i32, i32* @x.13
  %88 = load i32, i32* @y.14
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %86, %originalBB10alteredBB
  %95 = call i8* @gettext(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.55, i64 0, i64 0)) #10, !dbg !1221
  %96 = call i8* @uidtostr_ptr(i32* @euid), !dbg !1223
  %97 = call i32 (i8*, ...) @printf(i8* %95, i8* %96), !dbg !1224
  %98 = load i32, i32* @euid, align 4, !dbg !1225
  %99 = call %struct.passwd* @getpwuid(i32 %98), !dbg !1226
  store %struct.passwd* %99, %struct.passwd** %3, align 8, !dbg !1227
  %100 = load %struct.passwd*, %struct.passwd** %3, align 8, !dbg !1228
  %101 = icmp ne %struct.passwd* %100, null, !dbg !1228
  %102 = load i32, i32* @x.13
  %103 = load i32, i32* @y.14
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %101, label %110, label %115, !dbg !1230

110:                                              ; preds = %originalBBpart212
  %111 = load %struct.passwd*, %struct.passwd** %3, align 8, !dbg !1231
  %112 = getelementptr inbounds %struct.passwd, %struct.passwd* %111, i32 0, i32 0, !dbg !1232
  %113 = load i8*, i8** %112, align 8, !dbg !1232
  %114 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %113), !dbg !1233
  br label %115, !dbg !1233

115:                                              ; preds = %110, %originalBBpart212
  %116 = load i32, i32* @x.13
  %117 = load i32, i32* @y.14
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %115, %originalBB14alteredBB
  %124 = load i32, i32* @x.13
  %125 = load i32, i32* @y.14
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %132, !dbg !1234

132:                                              ; preds = %originalBBpart216, %82
  %133 = load i32, i32* @x.13
  %134 = load i32, i32* @y.14
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %132, %originalBB18alteredBB
  %141 = load i32, i32* @egid, align 4, !dbg !1235
  %142 = load i32, i32* @rgid, align 4, !dbg !1237
  %143 = icmp ne i32 %141, %142, !dbg !1238
  %144 = load i32, i32* @x.13
  %145 = load i32, i32* @y.14
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %143, label %152, label %214, !dbg !1239

152:                                              ; preds = %originalBBpart220
  %153 = load i32, i32* @x.13
  %154 = load i32, i32* @y.14
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %152, %originalBB22alteredBB
  %161 = call i8* @gettext(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.56, i64 0, i64 0)) #10, !dbg !1240
  %162 = call i8* @gidtostr_ptr(i32* @egid), !dbg !1242
  %163 = call i32 (i8*, ...) @printf(i8* %161, i8* %162), !dbg !1243
  %164 = load i32, i32* @egid, align 4, !dbg !1244
  %165 = call %struct.group* @getgrgid(i32 %164), !dbg !1245
  store %struct.group* %165, %struct.group** %4, align 8, !dbg !1246
  %166 = load %struct.group*, %struct.group** %4, align 8, !dbg !1247
  %167 = icmp ne %struct.group* %166, null, !dbg !1247
  %168 = load i32, i32* @x.13
  %169 = load i32, i32* @y.14
  %170 = sub i32 %168, 1
  %171 = mul i32 %168, %170
  %172 = urem i32 %171, 2
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %173, %174
  br i1 %175, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %167, label %176, label %197, !dbg !1249

176:                                              ; preds = %originalBBpart224
  %177 = load i32, i32* @x.13
  %178 = load i32, i32* @y.14
  %179 = sub i32 %177, 1
  %180 = mul i32 %177, %179
  %181 = urem i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %178, 10
  %184 = or i1 %182, %183
  br i1 %184, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %176, %originalBB26alteredBB
  %185 = load %struct.group*, %struct.group** %4, align 8, !dbg !1250
  %186 = getelementptr inbounds %struct.group, %struct.group* %185, i32 0, i32 0, !dbg !1251
  %187 = load i8*, i8** %186, align 8, !dbg !1251
  %188 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %187), !dbg !1252
  %189 = load i32, i32* @x.13
  %190 = load i32, i32* @y.14
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %197, !dbg !1252

197:                                              ; preds = %originalBBpart228, %originalBBpart224
  %198 = load i32, i32* @x.13
  %199 = load i32, i32* @y.14
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %197, %originalBB30alteredBB
  %206 = load i32, i32* @x.13
  %207 = load i32, i32* @y.14
  %208 = sub i32 %206, 1
  %209 = mul i32 %206, %208
  %210 = urem i32 %209, 2
  %211 = icmp eq i32 %210, 0
  %212 = icmp slt i32 %207, 10
  %213 = or i1 %211, %212
  br i1 %213, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %214, !dbg !1253

214:                                              ; preds = %originalBBpart232, %originalBBpart220
  call void @llvm.dbg.declare(metadata i32** %5, metadata !1254, metadata !DIExpression()), !dbg !1256
  call void @llvm.dbg.declare(metadata i32* %6, metadata !1257, metadata !DIExpression()), !dbg !1258
  %215 = load i32, i32* @x.13
  %216 = load i32, i32* @y.14
  %217 = sub i32 %215, 1
  %218 = mul i32 %215, %217
  %219 = urem i32 %218, 2
  %220 = icmp eq i32 %219, 0
  %221 = icmp slt i32 %216, 10
  %222 = or i1 %220, %221
  br i1 %222, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %214, %originalBB34alteredBB
  %223 = load i8*, i8** %2, align 8, !dbg !1259
  %224 = icmp ne i8* %223, null, !dbg !1259
  %225 = load i32, i32* @x.13
  %226 = load i32, i32* @y.14
  %227 = sub i32 %225, 1
  %228 = mul i32 %225, %227
  %229 = urem i32 %228, 2
  %230 = icmp eq i32 %229, 0
  %231 = icmp slt i32 %226, 10
  %232 = or i1 %230, %231
  br i1 %232, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %224, label %233, label %307, !dbg !1261

233:                                              ; preds = %originalBBpart236
  %234 = load i32, i32* @x.13
  %235 = load i32, i32* @y.14
  %236 = sub i32 %234, 1
  %237 = mul i32 %234, %236
  %238 = urem i32 %237, 2
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %239, %240
  br i1 %241, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %233, %originalBB38alteredBB
  %242 = load %struct.passwd*, %struct.passwd** %3, align 8, !dbg !1262
  %243 = icmp ne %struct.passwd* %242, null, !dbg !1262
  %244 = load i32, i32* @x.13
  %245 = load i32, i32* @y.14
  %246 = sub i32 %244, 1
  %247 = mul i32 %244, %246
  %248 = urem i32 %247, 2
  %249 = icmp eq i32 %248, 0
  %250 = icmp slt i32 %245, 10
  %251 = or i1 %249, %250
  br i1 %251, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %243, label %252, label %272, !dbg !1262

252:                                              ; preds = %originalBBpart240
  %253 = load i32, i32* @x.13
  %254 = load i32, i32* @y.14
  %255 = sub i32 %253, 1
  %256 = mul i32 %253, %255
  %257 = urem i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %258, %259
  br i1 %260, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %252, %originalBB42alteredBB
  %261 = load %struct.passwd*, %struct.passwd** %3, align 8, !dbg !1263
  %262 = getelementptr inbounds %struct.passwd, %struct.passwd* %261, i32 0, i32 3, !dbg !1264
  %263 = load i32, i32* %262, align 4, !dbg !1264
  %264 = load i32, i32* @x.13
  %265 = load i32, i32* @y.14
  %266 = sub i32 %264, 1
  %267 = mul i32 %264, %266
  %268 = urem i32 %267, 2
  %269 = icmp eq i32 %268, 0
  %270 = icmp slt i32 %265, 10
  %271 = or i1 %269, %270
  br i1 %271, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %289, !dbg !1262

272:                                              ; preds = %originalBBpart240
  %273 = load i32, i32* @x.13
  %274 = load i32, i32* @y.14
  %275 = sub i32 %273, 1
  %276 = mul i32 %273, %275
  %277 = urem i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %278, %279
  br i1 %280, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %272, %originalBB46alteredBB
  %281 = load i32, i32* @x.13
  %282 = load i32, i32* @y.14
  %283 = sub i32 %281, 1
  %284 = mul i32 %281, %283
  %285 = urem i32 %284, 2
  %286 = icmp eq i32 %285, 0
  %287 = icmp slt i32 %282, 10
  %288 = or i1 %286, %287
  br i1 %288, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %289, !dbg !1262

289:                                              ; preds = %originalBBpart248, %originalBBpart244
  %290 = phi i32 [ %263, %originalBBpart244 ], [ -1, %originalBBpart248 ], !dbg !1262
  %291 = load i32, i32* @x.13
  %292 = load i32, i32* @y.14
  %293 = sub i32 %291, 1
  %294 = mul i32 %291, %293
  %295 = urem i32 %294, 2
  %296 = icmp eq i32 %295, 0
  %297 = icmp slt i32 %292, 10
  %298 = or i1 %296, %297
  br i1 %298, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %289, %originalBB50alteredBB
  store i32 %290, i32* %6, align 4, !dbg !1265
  %299 = load i32, i32* @x.13
  %300 = load i32, i32* @y.14
  %301 = sub i32 %299, 1
  %302 = mul i32 %299, %301
  %303 = urem i32 %302, 2
  %304 = icmp eq i32 %303, 0
  %305 = icmp slt i32 %300, 10
  %306 = or i1 %304, %305
  br i1 %306, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br label %325, !dbg !1266

307:                                              ; preds = %originalBBpart236
  %308 = load i32, i32* @x.13
  %309 = load i32, i32* @y.14
  %310 = sub i32 %308, 1
  %311 = mul i32 %308, %310
  %312 = urem i32 %311, 2
  %313 = icmp eq i32 %312, 0
  %314 = icmp slt i32 %309, 10
  %315 = or i1 %313, %314
  br i1 %315, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %307, %originalBB54alteredBB
  %316 = load i32, i32* @egid, align 4, !dbg !1267
  store i32 %316, i32* %6, align 4, !dbg !1268
  %317 = load i32, i32* @x.13
  %318 = load i32, i32* @y.14
  %319 = sub i32 %317, 1
  %320 = mul i32 %317, %319
  %321 = urem i32 %320, 2
  %322 = icmp eq i32 %321, 0
  %323 = icmp slt i32 %318, 10
  %324 = or i1 %322, %323
  br i1 %324, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br label %325

325:                                              ; preds = %originalBBpart256, %originalBBpart252
  call void @llvm.dbg.declare(metadata i32* %7, metadata !1269, metadata !DIExpression()), !dbg !1270
  %326 = load i32, i32* @x.13
  %327 = load i32, i32* @y.14
  %328 = sub i32 %326, 1
  %329 = mul i32 %326, %328
  %330 = urem i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %331, %332
  br i1 %333, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %325, %originalBB58alteredBB
  %334 = load i8*, i8** %2, align 8, !dbg !1271
  %335 = load i32, i32* %6, align 4, !dbg !1272
  %336 = call i32 @xgetgroups(i8* %334, i32 %335, i32** %5), !dbg !1273
  store i32 %336, i32* %7, align 4, !dbg !1270
  %337 = load i32, i32* %7, align 4, !dbg !1274
  %338 = icmp slt i32 %337, 0, !dbg !1276
  %339 = load i32, i32* @x.13
  %340 = load i32, i32* @y.14
  %341 = sub i32 %339, 1
  %342 = mul i32 %339, %341
  %343 = urem i32 %342, 2
  %344 = icmp eq i32 %343, 0
  %345 = icmp slt i32 %340, 10
  %346 = or i1 %344, %345
  br i1 %346, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br i1 %338, label %347, label %431, !dbg !1277

347:                                              ; preds = %originalBBpart260
  %348 = load i32, i32* @x.13
  %349 = load i32, i32* @y.14
  %350 = sub i32 %348, 1
  %351 = mul i32 %348, %350
  %352 = urem i32 %351, 2
  %353 = icmp eq i32 %352, 0
  %354 = icmp slt i32 %349, 10
  %355 = or i1 %353, %354
  br i1 %355, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %347, %originalBB62alteredBB
  %356 = load i8*, i8** %2, align 8, !dbg !1278
  %357 = icmp ne i8* %356, null, !dbg !1278
  %358 = load i32, i32* @x.13
  %359 = load i32, i32* @y.14
  %360 = sub i32 %358, 1
  %361 = mul i32 %358, %360
  %362 = urem i32 %361, 2
  %363 = icmp eq i32 %362, 0
  %364 = icmp slt i32 %359, 10
  %365 = or i1 %363, %364
  br i1 %365, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br i1 %357, label %366, label %388, !dbg !1281

366:                                              ; preds = %originalBBpart264
  %367 = load i32, i32* @x.13
  %368 = load i32, i32* @y.14
  %369 = sub i32 %367, 1
  %370 = mul i32 %367, %369
  %371 = urem i32 %370, 2
  %372 = icmp eq i32 %371, 0
  %373 = icmp slt i32 %368, 10
  %374 = or i1 %372, %373
  br i1 %374, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %366, %originalBB66alteredBB
  %375 = call i32* @__errno_location() #15, !dbg !1282
  %376 = load i32, i32* %375, align 4, !dbg !1282
  %377 = call i8* @gettext(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.57, i64 0, i64 0)) #10, !dbg !1283
  %378 = load i8*, i8** %2, align 8, !dbg !1284
  %379 = call i8* @quote(i8* %378), !dbg !1285
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %376, i8* %377, i8* %379), !dbg !1286
  %380 = load i32, i32* @x.13
  %381 = load i32, i32* @y.14
  %382 = sub i32 %380, 1
  %383 = mul i32 %380, %382
  %384 = urem i32 %383, 2
  %385 = icmp eq i32 %384, 0
  %386 = icmp slt i32 %381, 10
  %387 = or i1 %385, %386
  br i1 %387, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br label %408, !dbg !1286

388:                                              ; preds = %originalBBpart264
  %389 = load i32, i32* @x.13
  %390 = load i32, i32* @y.14
  %391 = sub i32 %389, 1
  %392 = mul i32 %389, %391
  %393 = urem i32 %392, 2
  %394 = icmp eq i32 %393, 0
  %395 = icmp slt i32 %390, 10
  %396 = or i1 %394, %395
  br i1 %396, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %388, %originalBB70alteredBB
  %397 = call i32* @__errno_location() #15, !dbg !1287
  %398 = load i32, i32* %397, align 4, !dbg !1287
  %399 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.58, i64 0, i64 0)) #10, !dbg !1288
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %398, i8* %399), !dbg !1289
  %400 = load i32, i32* @x.13
  %401 = load i32, i32* @y.14
  %402 = sub i32 %400, 1
  %403 = mul i32 %400, %402
  %404 = urem i32 %403, 2
  %405 = icmp eq i32 %404, 0
  %406 = icmp slt i32 %401, 10
  %407 = or i1 %405, %406
  br i1 %407, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br label %408

408:                                              ; preds = %originalBBpart272, %originalBBpart268
  %409 = load i32, i32* @x.13
  %410 = load i32, i32* @y.14
  %411 = sub i32 %409, 1
  %412 = mul i32 %409, %411
  %413 = urem i32 %412, 2
  %414 = icmp eq i32 %413, 0
  %415 = icmp slt i32 %410, 10
  %416 = or i1 %414, %415
  br i1 %416, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %408, %originalBB74alteredBB
  %417 = load i8, i8* @ok, align 1, !dbg !1290
  %418 = trunc i8 %417 to i1, !dbg !1290
  %419 = zext i1 %418 to i32, !dbg !1290
  %420 = and i32 %419, 0, !dbg !1290
  %421 = icmp ne i32 %420, 0, !dbg !1290
  %422 = zext i1 %421 to i8, !dbg !1290
  store i8 %422, i8* @ok, align 1, !dbg !1290
  %423 = load i32, i32* @x.13
  %424 = load i32, i32* @y.14
  %425 = sub i32 %423, 1
  %426 = mul i32 %423, %425
  %427 = urem i32 %426, 2
  %428 = icmp eq i32 %427, 0
  %429 = icmp slt i32 %424, 10
  %430 = or i1 %428, %429
  br i1 %430, label %originalBBpart287, label %originalBB74alteredBB

originalBBpart287:                                ; preds = %originalBB74
  br label %642, !dbg !1291

431:                                              ; preds = %originalBBpart260
  %432 = load i32, i32* @x.13
  %433 = load i32, i32* @y.14
  %434 = sub i32 %432, 1
  %435 = mul i32 %432, %434
  %436 = urem i32 %435, 2
  %437 = icmp eq i32 %436, 0
  %438 = icmp slt i32 %433, 10
  %439 = or i1 %437, %438
  br i1 %439, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %431, %originalBB89alteredBB
  %440 = load i32, i32* %7, align 4, !dbg !1292
  %441 = icmp sgt i32 %440, 0, !dbg !1294
  %442 = load i32, i32* @x.13
  %443 = load i32, i32* @y.14
  %444 = sub i32 %442, 1
  %445 = mul i32 %442, %444
  %446 = urem i32 %445, 2
  %447 = icmp eq i32 %446, 0
  %448 = icmp slt i32 %443, 10
  %449 = or i1 %447, %448
  br i1 %449, label %originalBBpart291, label %originalBB89alteredBB

originalBBpart291:                                ; preds = %originalBB89
  br i1 %441, label %450, label %470, !dbg !1295

450:                                              ; preds = %originalBBpart291
  %451 = load i32, i32* @x.13
  %452 = load i32, i32* @y.14
  %453 = sub i32 %451, 1
  %454 = mul i32 %451, %453
  %455 = urem i32 %454, 2
  %456 = icmp eq i32 %455, 0
  %457 = icmp slt i32 %452, 10
  %458 = or i1 %456, %457
  br i1 %458, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %450, %originalBB93alteredBB
  %459 = call i8* @gettext(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.59, i64 0, i64 0)) #10, !dbg !1296
  %460 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1296
  %461 = call i32 @fputs_unlocked(i8* %459, %struct._IO_FILE* %460), !dbg !1296
  %462 = load i32, i32* @x.13
  %463 = load i32, i32* @y.14
  %464 = sub i32 %462, 1
  %465 = mul i32 %462, %464
  %466 = urem i32 %465, 2
  %467 = icmp eq i32 %466, 0
  %468 = icmp slt i32 %463, 10
  %469 = or i1 %467, %468
  br i1 %469, label %originalBBpart295, label %originalBB93alteredBB

originalBBpart295:                                ; preds = %originalBB93
  br label %470, !dbg !1296

470:                                              ; preds = %originalBBpart295, %originalBBpart291
  call void @llvm.dbg.declare(metadata i32* %8, metadata !1297, metadata !DIExpression()), !dbg !1299
  %471 = load i32, i32* @x.13
  %472 = load i32, i32* @y.14
  %473 = sub i32 %471, 1
  %474 = mul i32 %471, %473
  %475 = urem i32 %474, 2
  %476 = icmp eq i32 %475, 0
  %477 = icmp slt i32 %472, 10
  %478 = or i1 %476, %477
  br i1 %478, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %470, %originalBB97alteredBB
  store i32 0, i32* %8, align 4, !dbg !1299
  %479 = load i32, i32* @x.13
  %480 = load i32, i32* @y.14
  %481 = sub i32 %479, 1
  %482 = mul i32 %479, %481
  %483 = urem i32 %482, 2
  %484 = icmp eq i32 %483, 0
  %485 = icmp slt i32 %480, 10
  %486 = or i1 %484, %485
  br i1 %486, label %originalBBpart299, label %originalBB97alteredBB

originalBBpart299:                                ; preds = %originalBB97
  br label %487, !dbg !1300

487:                                              ; preds = %originalBBpart2121, %originalBBpart299
  %488 = load i32, i32* @x.13
  %489 = load i32, i32* @y.14
  %490 = sub i32 %488, 1
  %491 = mul i32 %488, %490
  %492 = urem i32 %491, 2
  %493 = icmp eq i32 %492, 0
  %494 = icmp slt i32 %489, 10
  %495 = or i1 %493, %494
  br i1 %495, label %originalBB101, label %originalBB101alteredBB

originalBB101:                                    ; preds = %487, %originalBB101alteredBB
  %496 = load i32, i32* %8, align 4, !dbg !1301
  %497 = load i32, i32* %7, align 4, !dbg !1303
  %498 = icmp slt i32 %496, %497, !dbg !1304
  %499 = load i32, i32* @x.13
  %500 = load i32, i32* @y.14
  %501 = sub i32 %499, 1
  %502 = mul i32 %499, %501
  %503 = urem i32 %502, 2
  %504 = icmp eq i32 %503, 0
  %505 = icmp slt i32 %500, 10
  %506 = or i1 %504, %505
  br i1 %506, label %originalBBpart2103, label %originalBB101alteredBB

originalBBpart2103:                               ; preds = %originalBB101
  br i1 %498, label %507, label %601, !dbg !1305

507:                                              ; preds = %originalBBpart2103
  %508 = load i32, i32* %8, align 4, !dbg !1306
  %509 = icmp sgt i32 %508, 0, !dbg !1309
  br i1 %509, label %510, label %512, !dbg !1310

510:                                              ; preds = %507
  %511 = call i32 @putchar_unlocked(i32 44), !dbg !1311
  br label %512, !dbg !1311

512:                                              ; preds = %510, %507
  %513 = load i32, i32* @x.13
  %514 = load i32, i32* @y.14
  %515 = sub i32 %513, 1
  %516 = mul i32 %513, %515
  %517 = urem i32 %516, 2
  %518 = icmp eq i32 %517, 0
  %519 = icmp slt i32 %514, 10
  %520 = or i1 %518, %519
  br i1 %520, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %512, %originalBB105alteredBB
  %521 = load i32*, i32** %5, align 8, !dbg !1312
  %522 = load i32, i32* %8, align 4, !dbg !1312
  %523 = sext i32 %522 to i64, !dbg !1312
  %524 = getelementptr inbounds i32, i32* %521, i64 %523, !dbg !1312
  %525 = call i8* @gidtostr_ptr(i32* %524), !dbg !1312
  %526 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1312
  %527 = call i32 @fputs_unlocked(i8* %525, %struct._IO_FILE* %526), !dbg !1312
  %528 = load i32*, i32** %5, align 8, !dbg !1313
  %529 = load i32, i32* %8, align 4, !dbg !1314
  %530 = sext i32 %529 to i64, !dbg !1313
  %531 = getelementptr inbounds i32, i32* %528, i64 %530, !dbg !1313
  %532 = load i32, i32* %531, align 4, !dbg !1313
  %533 = call %struct.group* @getgrgid(i32 %532), !dbg !1315
  store %struct.group* %533, %struct.group** %4, align 8, !dbg !1316
  %534 = load %struct.group*, %struct.group** %4, align 8, !dbg !1317
  %535 = icmp ne %struct.group* %534, null, !dbg !1317
  %536 = load i32, i32* @x.13
  %537 = load i32, i32* @y.14
  %538 = sub i32 %536, 1
  %539 = mul i32 %536, %538
  %540 = urem i32 %539, 2
  %541 = icmp eq i32 %540, 0
  %542 = icmp slt i32 %537, 10
  %543 = or i1 %541, %542
  br i1 %543, label %originalBBpart2107, label %originalBB105alteredBB

originalBBpart2107:                               ; preds = %originalBB105
  br i1 %535, label %544, label %565, !dbg !1319

544:                                              ; preds = %originalBBpart2107
  %545 = load i32, i32* @x.13
  %546 = load i32, i32* @y.14
  %547 = sub i32 %545, 1
  %548 = mul i32 %545, %547
  %549 = urem i32 %548, 2
  %550 = icmp eq i32 %549, 0
  %551 = icmp slt i32 %546, 10
  %552 = or i1 %550, %551
  br i1 %552, label %originalBB109, label %originalBB109alteredBB

originalBB109:                                    ; preds = %544, %originalBB109alteredBB
  %553 = load %struct.group*, %struct.group** %4, align 8, !dbg !1320
  %554 = getelementptr inbounds %struct.group, %struct.group* %553, i32 0, i32 0, !dbg !1321
  %555 = load i8*, i8** %554, align 8, !dbg !1321
  %556 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %555), !dbg !1322
  %557 = load i32, i32* @x.13
  %558 = load i32, i32* @y.14
  %559 = sub i32 %557, 1
  %560 = mul i32 %557, %559
  %561 = urem i32 %560, 2
  %562 = icmp eq i32 %561, 0
  %563 = icmp slt i32 %558, 10
  %564 = or i1 %562, %563
  br i1 %564, label %originalBBpart2111, label %originalBB109alteredBB

originalBBpart2111:                               ; preds = %originalBB109
  br label %565, !dbg !1322

565:                                              ; preds = %originalBBpart2111, %originalBBpart2107
  %566 = load i32, i32* @x.13
  %567 = load i32, i32* @y.14
  %568 = sub i32 %566, 1
  %569 = mul i32 %566, %568
  %570 = urem i32 %569, 2
  %571 = icmp eq i32 %570, 0
  %572 = icmp slt i32 %567, 10
  %573 = or i1 %571, %572
  br i1 %573, label %originalBB113, label %originalBB113alteredBB

originalBB113:                                    ; preds = %565, %originalBB113alteredBB
  %574 = load i32, i32* @x.13
  %575 = load i32, i32* @y.14
  %576 = sub i32 %574, 1
  %577 = mul i32 %574, %576
  %578 = urem i32 %577, 2
  %579 = icmp eq i32 %578, 0
  %580 = icmp slt i32 %575, 10
  %581 = or i1 %579, %580
  br i1 %581, label %originalBBpart2115, label %originalBB113alteredBB

originalBBpart2115:                               ; preds = %originalBB113
  br label %582, !dbg !1323

582:                                              ; preds = %originalBBpart2115
  %583 = load i32, i32* @x.13
  %584 = load i32, i32* @y.14
  %585 = sub i32 %583, 1
  %586 = mul i32 %583, %585
  %587 = urem i32 %586, 2
  %588 = icmp eq i32 %587, 0
  %589 = icmp slt i32 %584, 10
  %590 = or i1 %588, %589
  br i1 %590, label %originalBB117, label %originalBB117alteredBB

originalBB117:                                    ; preds = %582, %originalBB117alteredBB
  %591 = load i32, i32* %8, align 4, !dbg !1324
  %592 = add nsw i32 %591, 1, !dbg !1324
  store i32 %592, i32* %8, align 4, !dbg !1324
  %593 = load i32, i32* @x.13
  %594 = load i32, i32* @y.14
  %595 = sub i32 %593, 1
  %596 = mul i32 %593, %595
  %597 = urem i32 %596, 2
  %598 = icmp eq i32 %597, 0
  %599 = icmp slt i32 %594, 10
  %600 = or i1 %598, %599
  br i1 %600, label %originalBBpart2121, label %originalBB117alteredBB

originalBBpart2121:                               ; preds = %originalBB117
  br label %487, !dbg !1325, !llvm.loop !1326

601:                                              ; preds = %originalBBpart2103
  %602 = load i32, i32* @x.13
  %603 = load i32, i32* @y.14
  %604 = sub i32 %602, 1
  %605 = mul i32 %602, %604
  %606 = urem i32 %605, 2
  %607 = icmp eq i32 %606, 0
  %608 = icmp slt i32 %603, 10
  %609 = or i1 %607, %608
  br i1 %609, label %originalBB123, label %originalBB123alteredBB

originalBB123:                                    ; preds = %601, %originalBB123alteredBB
  %610 = load i32*, i32** %5, align 8, !dbg !1328
  %611 = bitcast i32* %610 to i8*, !dbg !1328
  call void @free(i8* %611) #10, !dbg !1329
  %612 = load i8*, i8** @context, align 8, !dbg !1330
  %613 = icmp ne i8* %612, null, !dbg !1330
  %614 = load i32, i32* @x.13
  %615 = load i32, i32* @y.14
  %616 = sub i32 %614, 1
  %617 = mul i32 %614, %616
  %618 = urem i32 %617, 2
  %619 = icmp eq i32 %618, 0
  %620 = icmp slt i32 %615, 10
  %621 = or i1 %619, %620
  br i1 %621, label %originalBBpart2125, label %originalBB123alteredBB

originalBBpart2125:                               ; preds = %originalBB123
  br i1 %613, label %622, label %642, !dbg !1332

622:                                              ; preds = %originalBBpart2125
  %623 = load i32, i32* @x.13
  %624 = load i32, i32* @y.14
  %625 = sub i32 %623, 1
  %626 = mul i32 %623, %625
  %627 = urem i32 %626, 2
  %628 = icmp eq i32 %627, 0
  %629 = icmp slt i32 %624, 10
  %630 = or i1 %628, %629
  br i1 %630, label %originalBB127, label %originalBB127alteredBB

originalBB127:                                    ; preds = %622, %originalBB127alteredBB
  %631 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.60, i64 0, i64 0)) #10, !dbg !1333
  %632 = load i8*, i8** @context, align 8, !dbg !1334
  %633 = call i32 (i8*, ...) @printf(i8* %631, i8* %632), !dbg !1335
  %634 = load i32, i32* @x.13
  %635 = load i32, i32* @y.14
  %636 = sub i32 %634, 1
  %637 = mul i32 %634, %636
  %638 = urem i32 %637, 2
  %639 = icmp eq i32 %638, 0
  %640 = icmp slt i32 %635, 10
  %641 = or i1 %639, %640
  br i1 %641, label %originalBBpart2129, label %originalBB127alteredBB

originalBBpart2129:                               ; preds = %originalBB127
  br label %642, !dbg !1335

642:                                              ; preds = %originalBBpart2129, %originalBBpart2125, %originalBBpart287
  %643 = load i32, i32* @x.13
  %644 = load i32, i32* @y.14
  %645 = sub i32 %643, 1
  %646 = mul i32 %643, %645
  %647 = urem i32 %646, 2
  %648 = icmp eq i32 %647, 0
  %649 = icmp slt i32 %644, 10
  %650 = or i1 %648, %649
  br i1 %650, label %originalBB131, label %originalBB131alteredBB

originalBB131:                                    ; preds = %642, %originalBB131alteredBB
  %651 = load i32, i32* @x.13
  %652 = load i32, i32* @y.14
  %653 = sub i32 %651, 1
  %654 = mul i32 %651, %653
  %655 = urem i32 %654, 2
  %656 = icmp eq i32 %655, 0
  %657 = icmp slt i32 %652, 10
  %658 = or i1 %656, %657
  br i1 %658, label %originalBBpart2133, label %originalBB131alteredBB

originalBBpart2133:                               ; preds = %originalBB131
  ret void, !dbg !1336

originalBBalteredBB:                              ; preds = %originalBB, %16
  %659 = load %struct.passwd*, %struct.passwd** %3, align 8, !dbg !1201
  %660 = getelementptr inbounds %struct.passwd, %struct.passwd* %659, i32 0, i32 0, !dbg !1202
  %661 = load i8*, i8** %660, align 8, !dbg !1202
  %662 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %661), !dbg !1203
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %663 = call i8* @gettext(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.54, i64 0, i64 0)) #10, !dbg !1204
  %664 = call i8* @gidtostr_ptr(i32* @rgid), !dbg !1205
  %665 = call i32 (i8*, ...) @printf(i8* %663, i8* %664), !dbg !1206
  %666 = load i32, i32* @rgid, align 4, !dbg !1207
  %667 = call %struct.group* @getgrgid(i32 %666), !dbg !1208
  store %struct.group* %667, %struct.group** %4, align 8, !dbg !1209
  %668 = load %struct.group*, %struct.group** %4, align 8, !dbg !1210
  %669 = icmp ne %struct.group* %668, null, !dbg !1210
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %61
  %670 = load %struct.group*, %struct.group** %4, align 8, !dbg !1213
  %671 = getelementptr inbounds %struct.group, %struct.group* %670, i32 0, i32 0, !dbg !1214
  %672 = load i8*, i8** %671, align 8, !dbg !1214
  %673 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %672), !dbg !1215
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %86
  %674 = call i8* @gettext(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.55, i64 0, i64 0)) #10, !dbg !1221
  %675 = call i8* @uidtostr_ptr(i32* @euid), !dbg !1223
  %676 = call i32 (i8*, ...) @printf(i8* %674, i8* %675), !dbg !1224
  %677 = load i32, i32* @euid, align 4, !dbg !1225
  %678 = call %struct.passwd* @getpwuid(i32 %677), !dbg !1226
  store %struct.passwd* %678, %struct.passwd** %3, align 8, !dbg !1227
  %679 = load %struct.passwd*, %struct.passwd** %3, align 8, !dbg !1228
  %680 = icmp ne %struct.passwd* %679, null, !dbg !1228
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %115
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %132
  %681 = load i32, i32* @egid, align 4, !dbg !1235
  %682 = load i32, i32* @rgid, align 4, !dbg !1237
  %683 = icmp ne i32 %681, %682, !dbg !1238
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %152
  %684 = call i8* @gettext(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.56, i64 0, i64 0)) #10, !dbg !1240
  %685 = call i8* @gidtostr_ptr(i32* @egid), !dbg !1242
  %686 = call i32 (i8*, ...) @printf(i8* %684, i8* %685), !dbg !1243
  %687 = load i32, i32* @egid, align 4, !dbg !1244
  %688 = call %struct.group* @getgrgid(i32 %687), !dbg !1245
  store %struct.group* %688, %struct.group** %4, align 8, !dbg !1246
  %689 = load %struct.group*, %struct.group** %4, align 8, !dbg !1247
  %690 = icmp ne %struct.group* %689, null, !dbg !1247
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %176
  %691 = load %struct.group*, %struct.group** %4, align 8, !dbg !1250
  %692 = getelementptr inbounds %struct.group, %struct.group* %691, i32 0, i32 0, !dbg !1251
  %693 = load i8*, i8** %692, align 8, !dbg !1251
  %694 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %693), !dbg !1252
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %197
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %214
  %695 = load i8*, i8** %2, align 8, !dbg !1259
  %696 = icmp ne i8* %695, null, !dbg !1259
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %233
  %697 = load %struct.passwd*, %struct.passwd** %3, align 8, !dbg !1262
  %698 = icmp ne %struct.passwd* %697, null, !dbg !1262
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %252
  %699 = load %struct.passwd*, %struct.passwd** %3, align 8, !dbg !1263
  %700 = getelementptr inbounds %struct.passwd, %struct.passwd* %699, i32 0, i32 3, !dbg !1264
  %701 = load i32, i32* %700, align 4, !dbg !1264
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %272
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %289
  store i32 %290, i32* %6, align 4, !dbg !1265
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %307
  %702 = load i32, i32* @egid, align 4, !dbg !1267
  store i32 %702, i32* %6, align 4, !dbg !1268
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %325
  %703 = load i8*, i8** %2, align 8, !dbg !1271
  %704 = load i32, i32* %6, align 4, !dbg !1272
  %705 = call i32 @xgetgroups(i8* %703, i32 %704, i32** %5), !dbg !1273
  store i32 %705, i32* %7, align 4, !dbg !1270
  %706 = load i32, i32* %7, align 4, !dbg !1274
  %707 = icmp slt i32 %706, 0, !dbg !1276
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %347
  %708 = load i8*, i8** %2, align 8, !dbg !1278
  %709 = icmp ne i8* %708, null, !dbg !1278
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %366
  %710 = call i32* @__errno_location() #15, !dbg !1282
  %711 = load i32, i32* %710, align 4, !dbg !1282
  %712 = call i8* @gettext(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.57, i64 0, i64 0)) #10, !dbg !1283
  %713 = load i8*, i8** %2, align 8, !dbg !1284
  %714 = call i8* @quote(i8* %713), !dbg !1285
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %711, i8* %712, i8* %714), !dbg !1286
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %388
  %715 = call i32* @__errno_location() #15, !dbg !1287
  %716 = load i32, i32* %715, align 4, !dbg !1287
  %717 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.58, i64 0, i64 0)) #10, !dbg !1288
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %716, i8* %717), !dbg !1289
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %408
  %718 = load i8, i8* @ok, align 1, !dbg !1290
  %719 = trunc i8 %718 to i1, !dbg !1290
  %720 = zext i1 %719 to i32, !dbg !1290
  %_ = sub i32 %720, 0
  %gen = mul i32 %_, 0
  %_75 = sub i32 %720, 0
  %gen76 = mul i32 %_75, 0
  %_77 = shl i32 %720, 0
  %_78 = sub i32 %720, 0
  %gen79 = mul i32 %_78, 0
  %_80 = sub i32 0, %720
  %gen81 = add i32 %_80, 0
  %_82 = sub i32 0, %720
  %gen83 = add i32 %_82, 0
  %_84 = shl i32 %720, 0
  %_85 = shl i32 %720, 0
  %721 = and i32 %720, 0, !dbg !1290
  %722 = icmp ne i32 %721, 0, !dbg !1290
  %723 = zext i1 %722 to i8, !dbg !1290
  store i8 %723, i8* @ok, align 1, !dbg !1290
  br label %originalBB74

originalBB89alteredBB:                            ; preds = %originalBB89, %431
  %724 = load i32, i32* %7, align 4, !dbg !1292
  %725 = icmp sgt i32 %724, 0, !dbg !1294
  br label %originalBB89

originalBB93alteredBB:                            ; preds = %originalBB93, %450
  %726 = call i8* @gettext(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.59, i64 0, i64 0)) #10, !dbg !1296
  %727 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1296
  %728 = call i32 @fputs_unlocked(i8* %726, %struct._IO_FILE* %727), !dbg !1296
  br label %originalBB93

originalBB97alteredBB:                            ; preds = %originalBB97, %470
  store i32 0, i32* %8, align 4, !dbg !1299
  br label %originalBB97

originalBB101alteredBB:                           ; preds = %originalBB101, %487
  %729 = load i32, i32* %8, align 4, !dbg !1301
  %730 = load i32, i32* %7, align 4, !dbg !1303
  %731 = icmp slt i32 %729, %730, !dbg !1304
  br label %originalBB101

originalBB105alteredBB:                           ; preds = %originalBB105, %512
  %732 = load i32*, i32** %5, align 8, !dbg !1312
  %733 = load i32, i32* %8, align 4, !dbg !1312
  %734 = sext i32 %733 to i64, !dbg !1312
  %735 = getelementptr inbounds i32, i32* %732, i64 %734, !dbg !1312
  %736 = call i8* @gidtostr_ptr(i32* %735), !dbg !1312
  %737 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1312
  %738 = call i32 @fputs_unlocked(i8* %736, %struct._IO_FILE* %737), !dbg !1312
  %739 = load i32*, i32** %5, align 8, !dbg !1313
  %740 = load i32, i32* %8, align 4, !dbg !1314
  %741 = sext i32 %740 to i64, !dbg !1313
  %742 = getelementptr inbounds i32, i32* %739, i64 %741, !dbg !1313
  %743 = load i32, i32* %742, align 4, !dbg !1313
  %744 = call %struct.group* @getgrgid(i32 %743), !dbg !1315
  store %struct.group* %744, %struct.group** %4, align 8, !dbg !1316
  %745 = load %struct.group*, %struct.group** %4, align 8, !dbg !1317
  %746 = icmp ne %struct.group* %745, null, !dbg !1317
  br label %originalBB105

originalBB109alteredBB:                           ; preds = %originalBB109, %544
  %747 = load %struct.group*, %struct.group** %4, align 8, !dbg !1320
  %748 = getelementptr inbounds %struct.group, %struct.group* %747, i32 0, i32 0, !dbg !1321
  %749 = load i8*, i8** %748, align 8, !dbg !1321
  %750 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %749), !dbg !1322
  br label %originalBB109

originalBB113alteredBB:                           ; preds = %originalBB113, %565
  br label %originalBB113

originalBB117alteredBB:                           ; preds = %originalBB117, %582
  %751 = load i32, i32* %8, align 4, !dbg !1324
  %_118 = sub i32 0, %751
  %gen119 = add i32 %_118, 1
  %752 = add nsw i32 %751, 1, !dbg !1324
  store i32 %752, i32* %8, align 4, !dbg !1324
  br label %originalBB117

originalBB123alteredBB:                           ; preds = %originalBB123, %601
  %753 = load i32*, i32** %5, align 8, !dbg !1328
  %754 = bitcast i32* %753 to i8*, !dbg !1328
  call void @free(i8* %754) #10, !dbg !1329
  %755 = load i8*, i8** @context, align 8, !dbg !1330
  %756 = icmp ne i8* %755, null, !dbg !1330
  br label %originalBB123

originalBB127alteredBB:                           ; preds = %originalBB127, %622
  %757 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.60, i64 0, i64 0)) #10, !dbg !1333
  %758 = load i8*, i8** @context, align 8, !dbg !1334
  %759 = call i32 (i8*, ...) @printf(i8* %757, i8* %758), !dbg !1335
  br label %originalBB127

originalBB131alteredBB:                           ; preds = %originalBB131, %642
  br label %originalBB131
}

declare dso_local i32 @putchar_unlocked(i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @uidtostr_ptr(i32*) #4 !dbg !48 {
  %2 = load i32, i32* @x.15
  %3 = load i32, i32* @y.16
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32*, align 8
  store i32* %0, i32** %10, align 8
  call void @llvm.dbg.declare(metadata i32** %10, metadata !1337, metadata !DIExpression()), !dbg !1338
  %11 = load i32*, i32** %10, align 8, !dbg !1339
  %12 = load i32, i32* %11, align 4, !dbg !1340
  %13 = zext i32 %12 to i64, !dbg !1340
  %14 = call i8* @umaxtostr(i64 %13, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @uidtostr_ptr.buf, i64 0, i64 0)), !dbg !1341
  %15 = load i32, i32* @x.15
  %16 = load i32, i32* @y.16
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !1342

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32*, align 8
  store i32* %0, i32** %23, align 8
  call void @llvm.dbg.declare(metadata i32** %23, metadata !1343, metadata !DIExpression()), !dbg !1338
  %24 = load i32*, i32** %23, align 8, !dbg !1339
  %25 = load i32, i32* %24, align 4, !dbg !1340
  %26 = zext i32 %25 to i64, !dbg !1340
  %27 = call i8* @umaxtostr(i64 %26, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @uidtostr_ptr.buf, i64 0, i64 0)), !dbg !1341
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gidtostr_ptr(i32*) #4 !dbg !58 {
  %2 = alloca i32*, align 8
  store i32* %0, i32** %2, align 8
  call void @llvm.dbg.declare(metadata i32** %2, metadata !1390, metadata !DIExpression()), !dbg !1391
  %3 = load i32*, i32** %2, align 8, !dbg !1392
  %4 = load i32, i32* %3, align 4, !dbg !1393
  %5 = zext i32 %4 to i64, !dbg !1393
  %6 = call i8* @umaxtostr(i64 %5, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @gidtostr_ptr.buf, i64 0, i64 0)), !dbg !1394
  ret i8* %6, !dbg !1395
}

declare dso_local %struct.group* @getgrgid(i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @print_group_list(i8*, i32, i32, i32, i1 zeroext, i8 signext) #4 !dbg !1396 {
  %7 = load i32, i32* @x.19
  %8 = load i32, i32* @y.20
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %6, %originalBBalteredBB
  %15 = alloca i1, align 1
  %16 = alloca i8*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i8, align 1
  %21 = alloca i8, align 1
  %22 = alloca i8, align 1
  %23 = alloca %struct.passwd*, align 8
  %24 = alloca i32*, align 8
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  store i8* %0, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !1399, metadata !DIExpression()), !dbg !1400
  store i32 %1, i32* %17, align 4
  call void @llvm.dbg.declare(metadata i32* %17, metadata !1401, metadata !DIExpression()), !dbg !1402
  store i32 %2, i32* %18, align 4
  call void @llvm.dbg.declare(metadata i32* %18, metadata !1403, metadata !DIExpression()), !dbg !1404
  store i32 %3, i32* %19, align 4
  call void @llvm.dbg.declare(metadata i32* %19, metadata !1405, metadata !DIExpression()), !dbg !1406
  %27 = zext i1 %4 to i8
  store i8 %27, i8* %20, align 1
  call void @llvm.dbg.declare(metadata i8* %20, metadata !1407, metadata !DIExpression()), !dbg !1408
  store i8 %5, i8* %21, align 1
  call void @llvm.dbg.declare(metadata i8* %21, metadata !1409, metadata !DIExpression()), !dbg !1410
  call void @llvm.dbg.declare(metadata i8* %22, metadata !1411, metadata !DIExpression()), !dbg !1412
  store i8 1, i8* %22, align 1, !dbg !1412
  call void @llvm.dbg.declare(metadata %struct.passwd** %23, metadata !1413, metadata !DIExpression()), !dbg !1424
  store %struct.passwd* null, %struct.passwd** %23, align 8, !dbg !1424
  %28 = load i8*, i8** %16, align 8, !dbg !1425
  %29 = icmp ne i8* %28, null, !dbg !1425
  %30 = load i32, i32* @x.19
  %31 = load i32, i32* @y.20
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %29, label %38, label %77, !dbg !1427

38:                                               ; preds = %originalBBpart2
  %39 = load i32, i32* %17, align 4, !dbg !1428
  %40 = call %struct.passwd* @getpwuid(i32 %39), !dbg !1430
  store %struct.passwd* %40, %struct.passwd** %23, align 8, !dbg !1431
  %41 = load %struct.passwd*, %struct.passwd** %23, align 8, !dbg !1432
  %42 = icmp eq %struct.passwd* %41, null, !dbg !1434
  br i1 %42, label %43, label %60, !dbg !1435

43:                                               ; preds = %38
  %44 = load i32, i32* @x.19
  %45 = load i32, i32* @y.20
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %43, %originalBB1alteredBB
  store i8 0, i8* %22, align 1, !dbg !1436
  %52 = load i32, i32* @x.19
  %53 = load i32, i32* @y.20
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %60, !dbg !1437

60:                                               ; preds = %originalBBpart24, %38
  %61 = load i32, i32* @x.19
  %62 = load i32, i32* @y.20
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %60, %originalBB6alteredBB
  %69 = load i32, i32* @x.19
  %70 = load i32, i32* @y.20
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %77, !dbg !1438

77:                                               ; preds = %originalBBpart28, %originalBBpart2
  %78 = load i32, i32* @x.19
  %79 = load i32, i32* @y.20
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %77, %originalBB10alteredBB
  %86 = load i32, i32* %18, align 4, !dbg !1439
  %87 = load i8, i8* %20, align 1, !dbg !1441
  %88 = trunc i8 %87 to i1, !dbg !1441
  %89 = call zeroext i1 @print_group(i32 %86, i1 zeroext %88), !dbg !1442
  %90 = load i32, i32* @x.19
  %91 = load i32, i32* @y.20
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %89, label %115, label %98, !dbg !1443

98:                                               ; preds = %originalBBpart212
  %99 = load i32, i32* @x.19
  %100 = load i32, i32* @y.20
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %98, %originalBB14alteredBB
  store i8 0, i8* %22, align 1, !dbg !1444
  %107 = load i32, i32* @x.19
  %108 = load i32, i32* @y.20
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %115, !dbg !1445

115:                                              ; preds = %originalBBpart216, %originalBBpart212
  %116 = load i32, i32* @x.19
  %117 = load i32, i32* @y.20
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %115, %originalBB18alteredBB
  %124 = load i32, i32* %19, align 4, !dbg !1446
  %125 = load i32, i32* %18, align 4, !dbg !1448
  %126 = icmp ne i32 %124, %125, !dbg !1449
  %127 = load i32, i32* @x.19
  %128 = load i32, i32* @y.20
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %126, label %135, label %177, !dbg !1450

135:                                              ; preds = %originalBBpart220
  %136 = load i32, i32* @x.19
  %137 = load i32, i32* @y.20
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %135, %originalBB22alteredBB
  %144 = load i8, i8* %21, align 1, !dbg !1451
  %145 = sext i8 %144 to i32, !dbg !1451
  %146 = call i32 @putchar_unlocked(i32 %145), !dbg !1451
  %147 = load i32, i32* %19, align 4, !dbg !1453
  %148 = load i8, i8* %20, align 1, !dbg !1455
  %149 = trunc i8 %148 to i1, !dbg !1455
  %150 = call zeroext i1 @print_group(i32 %147, i1 zeroext %149), !dbg !1456
  %151 = load i32, i32* @x.19
  %152 = load i32, i32* @y.20
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %150, label %160, label %159, !dbg !1457

159:                                              ; preds = %originalBBpart224
  store i8 0, i8* %22, align 1, !dbg !1458
  br label %160, !dbg !1459

160:                                              ; preds = %159, %originalBBpart224
  %161 = load i32, i32* @x.19
  %162 = load i32, i32* @y.20
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %160, %originalBB26alteredBB
  %169 = load i32, i32* @x.19
  %170 = load i32, i32* @y.20
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %177, !dbg !1460

177:                                              ; preds = %originalBBpart228, %originalBBpart220
  call void @llvm.dbg.declare(metadata i32** %24, metadata !1461, metadata !DIExpression()), !dbg !1463
  call void @llvm.dbg.declare(metadata i32* %25, metadata !1464, metadata !DIExpression()), !dbg !1465
  %178 = load i8*, i8** %16, align 8, !dbg !1466
  %179 = load %struct.passwd*, %struct.passwd** %23, align 8, !dbg !1467
  %180 = icmp ne %struct.passwd* %179, null, !dbg !1467
  br i1 %180, label %181, label %201, !dbg !1467

181:                                              ; preds = %177
  %182 = load i32, i32* @x.19
  %183 = load i32, i32* @y.20
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %181, %originalBB30alteredBB
  %190 = load %struct.passwd*, %struct.passwd** %23, align 8, !dbg !1468
  %191 = getelementptr inbounds %struct.passwd, %struct.passwd* %190, i32 0, i32 3, !dbg !1469
  %192 = load i32, i32* %191, align 4, !dbg !1469
  %193 = load i32, i32* @x.19
  %194 = load i32, i32* @y.20
  %195 = sub i32 %193, 1
  %196 = mul i32 %193, %195
  %197 = urem i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %198, %199
  br i1 %200, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %203, !dbg !1467

201:                                              ; preds = %177
  %202 = load i32, i32* %19, align 4, !dbg !1470
  br label %203, !dbg !1467

203:                                              ; preds = %201, %originalBBpart232
  %204 = phi i32 [ %192, %originalBBpart232 ], [ %202, %201 ], !dbg !1467
  %205 = call i32 @xgetgroups(i8* %178, i32 %204, i32** %24), !dbg !1471
  store i32 %205, i32* %25, align 4, !dbg !1465
  %206 = load i32, i32* %25, align 4, !dbg !1472
  %207 = icmp slt i32 %206, 0, !dbg !1474
  br i1 %207, label %208, label %286, !dbg !1475

208:                                              ; preds = %203
  %209 = load i32, i32* @x.19
  %210 = load i32, i32* @y.20
  %211 = sub i32 %209, 1
  %212 = mul i32 %209, %211
  %213 = urem i32 %212, 2
  %214 = icmp eq i32 %213, 0
  %215 = icmp slt i32 %210, 10
  %216 = or i1 %214, %215
  br i1 %216, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %208, %originalBB34alteredBB
  %217 = load i8*, i8** %16, align 8, !dbg !1476
  %218 = icmp ne i8* %217, null, !dbg !1476
  %219 = load i32, i32* @x.19
  %220 = load i32, i32* @y.20
  %221 = sub i32 %219, 1
  %222 = mul i32 %219, %221
  %223 = urem i32 %222, 2
  %224 = icmp eq i32 %223, 0
  %225 = icmp slt i32 %220, 10
  %226 = or i1 %224, %225
  br i1 %226, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %218, label %227, label %249, !dbg !1479

227:                                              ; preds = %originalBBpart236
  %228 = load i32, i32* @x.19
  %229 = load i32, i32* @y.20
  %230 = sub i32 %228, 1
  %231 = mul i32 %228, %230
  %232 = urem i32 %231, 2
  %233 = icmp eq i32 %232, 0
  %234 = icmp slt i32 %229, 10
  %235 = or i1 %233, %234
  br i1 %235, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %227, %originalBB38alteredBB
  %236 = call i32* @__errno_location() #15, !dbg !1480
  %237 = load i32, i32* %236, align 4, !dbg !1480
  %238 = call i8* @gettext(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.61, i64 0, i64 0)) #10, !dbg !1482
  %239 = load i8*, i8** %16, align 8, !dbg !1483
  %240 = call i8* @quote(i8* %239), !dbg !1484
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %237, i8* %238, i8* %240), !dbg !1485
  %241 = load i32, i32* @x.19
  %242 = load i32, i32* @y.20
  %243 = sub i32 %241, 1
  %244 = mul i32 %241, %243
  %245 = urem i32 %244, 2
  %246 = icmp eq i32 %245, 0
  %247 = icmp slt i32 %242, 10
  %248 = or i1 %246, %247
  br i1 %248, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %269, !dbg !1486

249:                                              ; preds = %originalBBpart236
  %250 = load i32, i32* @x.19
  %251 = load i32, i32* @y.20
  %252 = sub i32 %250, 1
  %253 = mul i32 %250, %252
  %254 = urem i32 %253, 2
  %255 = icmp eq i32 %254, 0
  %256 = icmp slt i32 %251, 10
  %257 = or i1 %255, %256
  br i1 %257, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %249, %originalBB42alteredBB
  %258 = call i32* @__errno_location() #15, !dbg !1487
  %259 = load i32, i32* %258, align 4, !dbg !1487
  %260 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1.62, i64 0, i64 0)) #10, !dbg !1489
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %259, i8* %260), !dbg !1490
  %261 = load i32, i32* @x.19
  %262 = load i32, i32* @y.20
  %263 = sub i32 %261, 1
  %264 = mul i32 %261, %263
  %265 = urem i32 %264, 2
  %266 = icmp eq i32 %265, 0
  %267 = icmp slt i32 %262, 10
  %268 = or i1 %266, %267
  br i1 %268, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %269

269:                                              ; preds = %originalBBpart244, %originalBBpart240
  %270 = load i32, i32* @x.19
  %271 = load i32, i32* @y.20
  %272 = sub i32 %270, 1
  %273 = mul i32 %270, %272
  %274 = urem i32 %273, 2
  %275 = icmp eq i32 %274, 0
  %276 = icmp slt i32 %271, 10
  %277 = or i1 %275, %276
  br i1 %277, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %269, %originalBB46alteredBB
  store i1 false, i1* %15, align 1, !dbg !1491
  %278 = load i32, i32* @x.19
  %279 = load i32, i32* @y.20
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %474, !dbg !1491

286:                                              ; preds = %203
  call void @llvm.dbg.declare(metadata i32* %26, metadata !1492, metadata !DIExpression()), !dbg !1494
  %287 = load i32, i32* @x.19
  %288 = load i32, i32* @y.20
  %289 = sub i32 %287, 1
  %290 = mul i32 %287, %289
  %291 = urem i32 %290, 2
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %292, %293
  br i1 %294, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %286, %originalBB50alteredBB
  store i32 0, i32* %26, align 4, !dbg !1494
  %295 = load i32, i32* @x.19
  %296 = load i32, i32* @y.20
  %297 = sub i32 %295, 1
  %298 = mul i32 %295, %297
  %299 = urem i32 %298, 2
  %300 = icmp eq i32 %299, 0
  %301 = icmp slt i32 %296, 10
  %302 = or i1 %300, %301
  br i1 %302, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br label %303, !dbg !1495

303:                                              ; preds = %originalBBpart294, %originalBBpart252
  %304 = load i32, i32* %26, align 4, !dbg !1496
  %305 = load i32, i32* %25, align 4, !dbg !1498
  %306 = icmp slt i32 %304, %305, !dbg !1499
  br i1 %306, label %307, label %453, !dbg !1500

307:                                              ; preds = %303
  %308 = load i32, i32* @x.19
  %309 = load i32, i32* @y.20
  %310 = sub i32 %308, 1
  %311 = mul i32 %308, %310
  %312 = urem i32 %311, 2
  %313 = icmp eq i32 %312, 0
  %314 = icmp slt i32 %309, 10
  %315 = or i1 %313, %314
  br i1 %315, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %307, %originalBB54alteredBB
  %316 = load i32*, i32** %24, align 8, !dbg !1501
  %317 = load i32, i32* %26, align 4, !dbg !1503
  %318 = sext i32 %317 to i64, !dbg !1501
  %319 = getelementptr inbounds i32, i32* %316, i64 %318, !dbg !1501
  %320 = load i32, i32* %319, align 4, !dbg !1501
  %321 = load i32, i32* %18, align 4, !dbg !1504
  %322 = icmp ne i32 %320, %321, !dbg !1505
  %323 = load i32, i32* @x.19
  %324 = load i32, i32* @y.20
  %325 = sub i32 %323, 1
  %326 = mul i32 %323, %325
  %327 = urem i32 %326, 2
  %328 = icmp eq i32 %327, 0
  %329 = icmp slt i32 %324, 10
  %330 = or i1 %328, %329
  br i1 %330, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br i1 %322, label %331, label %417, !dbg !1506

331:                                              ; preds = %originalBBpart256
  %332 = load i32, i32* @x.19
  %333 = load i32, i32* @y.20
  %334 = sub i32 %332, 1
  %335 = mul i32 %332, %334
  %336 = urem i32 %335, 2
  %337 = icmp eq i32 %336, 0
  %338 = icmp slt i32 %333, 10
  %339 = or i1 %337, %338
  br i1 %339, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %331, %originalBB58alteredBB
  %340 = load i32*, i32** %24, align 8, !dbg !1507
  %341 = load i32, i32* %26, align 4, !dbg !1508
  %342 = sext i32 %341 to i64, !dbg !1507
  %343 = getelementptr inbounds i32, i32* %340, i64 %342, !dbg !1507
  %344 = load i32, i32* %343, align 4, !dbg !1507
  %345 = load i32, i32* %19, align 4, !dbg !1509
  %346 = icmp ne i32 %344, %345, !dbg !1510
  %347 = load i32, i32* @x.19
  %348 = load i32, i32* @y.20
  %349 = sub i32 %347, 1
  %350 = mul i32 %347, %349
  %351 = urem i32 %350, 2
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %352, %353
  br i1 %354, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br i1 %346, label %355, label %417, !dbg !1511

355:                                              ; preds = %originalBBpart260
  %356 = load i32, i32* @x.19
  %357 = load i32, i32* @y.20
  %358 = sub i32 %356, 1
  %359 = mul i32 %356, %358
  %360 = urem i32 %359, 2
  %361 = icmp eq i32 %360, 0
  %362 = icmp slt i32 %357, 10
  %363 = or i1 %361, %362
  br i1 %363, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %355, %originalBB62alteredBB
  %364 = load i8, i8* %21, align 1, !dbg !1512
  %365 = sext i8 %364 to i32, !dbg !1512
  %366 = call i32 @putchar_unlocked(i32 %365), !dbg !1512
  %367 = load i32*, i32** %24, align 8, !dbg !1514
  %368 = load i32, i32* %26, align 4, !dbg !1516
  %369 = sext i32 %368 to i64, !dbg !1514
  %370 = getelementptr inbounds i32, i32* %367, i64 %369, !dbg !1514
  %371 = load i32, i32* %370, align 4, !dbg !1514
  %372 = load i8, i8* %20, align 1, !dbg !1517
  %373 = trunc i8 %372 to i1, !dbg !1517
  %374 = call zeroext i1 @print_group(i32 %371, i1 zeroext %373), !dbg !1518
  %375 = load i32, i32* @x.19
  %376 = load i32, i32* @y.20
  %377 = sub i32 %375, 1
  %378 = mul i32 %375, %377
  %379 = urem i32 %378, 2
  %380 = icmp eq i32 %379, 0
  %381 = icmp slt i32 %376, 10
  %382 = or i1 %380, %381
  br i1 %382, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br i1 %374, label %400, label %383, !dbg !1519

383:                                              ; preds = %originalBBpart264
  %384 = load i32, i32* @x.19
  %385 = load i32, i32* @y.20
  %386 = sub i32 %384, 1
  %387 = mul i32 %384, %386
  %388 = urem i32 %387, 2
  %389 = icmp eq i32 %388, 0
  %390 = icmp slt i32 %385, 10
  %391 = or i1 %389, %390
  br i1 %391, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %383, %originalBB66alteredBB
  store i8 0, i8* %22, align 1, !dbg !1520
  %392 = load i32, i32* @x.19
  %393 = load i32, i32* @y.20
  %394 = sub i32 %392, 1
  %395 = mul i32 %392, %394
  %396 = urem i32 %395, 2
  %397 = icmp eq i32 %396, 0
  %398 = icmp slt i32 %393, 10
  %399 = or i1 %397, %398
  br i1 %399, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br label %400, !dbg !1521

400:                                              ; preds = %originalBBpart268, %originalBBpart264
  %401 = load i32, i32* @x.19
  %402 = load i32, i32* @y.20
  %403 = sub i32 %401, 1
  %404 = mul i32 %401, %403
  %405 = urem i32 %404, 2
  %406 = icmp eq i32 %405, 0
  %407 = icmp slt i32 %402, 10
  %408 = or i1 %406, %407
  br i1 %408, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %400, %originalBB70alteredBB
  %409 = load i32, i32* @x.19
  %410 = load i32, i32* @y.20
  %411 = sub i32 %409, 1
  %412 = mul i32 %409, %411
  %413 = urem i32 %412, 2
  %414 = icmp eq i32 %413, 0
  %415 = icmp slt i32 %410, 10
  %416 = or i1 %414, %415
  br i1 %416, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br label %417, !dbg !1522

417:                                              ; preds = %originalBBpart272, %originalBBpart260, %originalBBpart256
  %418 = load i32, i32* @x.19
  %419 = load i32, i32* @y.20
  %420 = sub i32 %418, 1
  %421 = mul i32 %418, %420
  %422 = urem i32 %421, 2
  %423 = icmp eq i32 %422, 0
  %424 = icmp slt i32 %419, 10
  %425 = or i1 %423, %424
  br i1 %425, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %417, %originalBB74alteredBB
  %426 = load i32, i32* @x.19
  %427 = load i32, i32* @y.20
  %428 = sub i32 %426, 1
  %429 = mul i32 %426, %428
  %430 = urem i32 %429, 2
  %431 = icmp eq i32 %430, 0
  %432 = icmp slt i32 %427, 10
  %433 = or i1 %431, %432
  br i1 %433, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br label %434, !dbg !1509

434:                                              ; preds = %originalBBpart276
  %435 = load i32, i32* @x.19
  %436 = load i32, i32* @y.20
  %437 = sub i32 %435, 1
  %438 = mul i32 %435, %437
  %439 = urem i32 %438, 2
  %440 = icmp eq i32 %439, 0
  %441 = icmp slt i32 %436, 10
  %442 = or i1 %440, %441
  br i1 %442, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %434, %originalBB78alteredBB
  %443 = load i32, i32* %26, align 4, !dbg !1523
  %444 = add nsw i32 %443, 1, !dbg !1523
  store i32 %444, i32* %26, align 4, !dbg !1523
  %445 = load i32, i32* @x.19
  %446 = load i32, i32* @y.20
  %447 = sub i32 %445, 1
  %448 = mul i32 %445, %447
  %449 = urem i32 %448, 2
  %450 = icmp eq i32 %449, 0
  %451 = icmp slt i32 %446, 10
  %452 = or i1 %450, %451
  br i1 %452, label %originalBBpart294, label %originalBB78alteredBB

originalBBpart294:                                ; preds = %originalBB78
  br label %303, !dbg !1524, !llvm.loop !1525

453:                                              ; preds = %303
  %454 = load i32, i32* @x.19
  %455 = load i32, i32* @y.20
  %456 = sub i32 %454, 1
  %457 = mul i32 %454, %456
  %458 = urem i32 %457, 2
  %459 = icmp eq i32 %458, 0
  %460 = icmp slt i32 %455, 10
  %461 = or i1 %459, %460
  br i1 %461, label %originalBB96, label %originalBB96alteredBB

originalBB96:                                     ; preds = %453, %originalBB96alteredBB
  %462 = load i32*, i32** %24, align 8, !dbg !1527
  %463 = bitcast i32* %462 to i8*, !dbg !1527
  call void @free(i8* %463) #10, !dbg !1528
  %464 = load i8, i8* %22, align 1, !dbg !1529
  %465 = trunc i8 %464 to i1, !dbg !1529
  store i1 %465, i1* %15, align 1, !dbg !1530
  %466 = load i32, i32* @x.19
  %467 = load i32, i32* @y.20
  %468 = sub i32 %466, 1
  %469 = mul i32 %466, %468
  %470 = urem i32 %469, 2
  %471 = icmp eq i32 %470, 0
  %472 = icmp slt i32 %467, 10
  %473 = or i1 %471, %472
  br i1 %473, label %originalBBpart298, label %originalBB96alteredBB

originalBBpart298:                                ; preds = %originalBB96
  br label %474, !dbg !1530

474:                                              ; preds = %originalBBpart298, %originalBBpart248
  %475 = load i1, i1* %15, align 1, !dbg !1531
  ret i1 %475, !dbg !1531

originalBBalteredBB:                              ; preds = %originalBB, %6
  %476 = alloca i1, align 1
  %477 = alloca i8*, align 8
  %478 = alloca i32, align 4
  %479 = alloca i32, align 4
  %480 = alloca i32, align 4
  %481 = alloca i8, align 1
  %482 = alloca i8, align 1
  %483 = alloca i8, align 1
  %484 = alloca %struct.passwd*, align 8
  %485 = alloca i32*, align 8
  %486 = alloca i32, align 4
  %487 = alloca i32, align 4
  store i8* %0, i8** %477, align 8
  call void @llvm.dbg.declare(metadata i8** %477, metadata !1532, metadata !DIExpression()), !dbg !1400
  store i32 %1, i32* %478, align 4
  call void @llvm.dbg.declare(metadata i32* %478, metadata !1539, metadata !DIExpression()), !dbg !1402
  store i32 %2, i32* %479, align 4
  call void @llvm.dbg.declare(metadata i32* %479, metadata !1540, metadata !DIExpression()), !dbg !1404
  store i32 %3, i32* %480, align 4
  call void @llvm.dbg.declare(metadata i32* %480, metadata !1541, metadata !DIExpression()), !dbg !1406
  %488 = zext i1 %4 to i8
  store i8 %488, i8* %481, align 1
  call void @llvm.dbg.declare(metadata i8* %481, metadata !1542, metadata !DIExpression()), !dbg !1408
  store i8 %5, i8* %482, align 1
  call void @llvm.dbg.declare(metadata i8* %482, metadata !1543, metadata !DIExpression()), !dbg !1410
  call void @llvm.dbg.declare(metadata i8* %483, metadata !1544, metadata !DIExpression()), !dbg !1412
  store i8 1, i8* %483, align 1, !dbg !1412
  call void @llvm.dbg.declare(metadata %struct.passwd** %484, metadata !1545, metadata !DIExpression()), !dbg !1424
  store %struct.passwd* null, %struct.passwd** %484, align 8, !dbg !1424
  %489 = load i8*, i8** %477, align 8, !dbg !1425
  %490 = icmp ne i8* %489, null, !dbg !1425
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %43
  store i8 0, i8* %22, align 1, !dbg !1436
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %60
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %77
  %491 = load i32, i32* %18, align 4, !dbg !1439
  %492 = load i8, i8* %20, align 1, !dbg !1441
  %493 = trunc i8 %492 to i1, !dbg !1441
  %494 = call zeroext i1 @print_group(i32 %491, i1 zeroext %493), !dbg !1442
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %98
  store i8 0, i8* %22, align 1, !dbg !1444
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %115
  %495 = load i32, i32* %19, align 4, !dbg !1446
  %496 = load i32, i32* %18, align 4, !dbg !1448
  %497 = icmp ne i32 %495, %496, !dbg !1449
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %135
  %498 = load i8, i8* %21, align 1, !dbg !1451
  %499 = sext i8 %498 to i32, !dbg !1451
  %500 = call i32 @putchar_unlocked(i32 %499), !dbg !1451
  %501 = load i32, i32* %19, align 4, !dbg !1453
  %502 = load i8, i8* %20, align 1, !dbg !1455
  %503 = trunc i8 %502 to i1, !dbg !1455
  %504 = call zeroext i1 @print_group(i32 %501, i1 zeroext %503), !dbg !1456
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %160
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %181
  %505 = load %struct.passwd*, %struct.passwd** %23, align 8, !dbg !1468
  %506 = getelementptr inbounds %struct.passwd, %struct.passwd* %505, i32 0, i32 3, !dbg !1469
  %507 = load i32, i32* %506, align 4, !dbg !1469
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %208
  %508 = load i8*, i8** %16, align 8, !dbg !1476
  %509 = icmp ne i8* %508, null, !dbg !1476
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %227
  %510 = call i32* @__errno_location() #15, !dbg !1480
  %511 = load i32, i32* %510, align 4, !dbg !1480
  %512 = call i8* @gettext(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.61, i64 0, i64 0)) #10, !dbg !1482
  %513 = load i8*, i8** %16, align 8, !dbg !1483
  %514 = call i8* @quote(i8* %513), !dbg !1484
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %511, i8* %512, i8* %514), !dbg !1485
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %249
  %515 = call i32* @__errno_location() #15, !dbg !1487
  %516 = load i32, i32* %515, align 4, !dbg !1487
  %517 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1.62, i64 0, i64 0)) #10, !dbg !1489
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %516, i8* %517), !dbg !1490
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %269
  store i1 false, i1* %15, align 1, !dbg !1491
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %286
  store i32 0, i32* %26, align 4, !dbg !1494
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %307
  %518 = load i32*, i32** %24, align 8, !dbg !1501
  %519 = load i32, i32* %26, align 4, !dbg !1503
  %520 = sext i32 %519 to i64, !dbg !1501
  %521 = getelementptr inbounds i32, i32* %518, i64 %520, !dbg !1501
  %522 = load i32, i32* %521, align 4, !dbg !1501
  %523 = load i32, i32* %18, align 4, !dbg !1504
  %524 = icmp ne i32 %522, %523, !dbg !1505
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %331
  %525 = load i32*, i32** %24, align 8, !dbg !1507
  %526 = load i32, i32* %26, align 4, !dbg !1508
  %527 = sext i32 %526 to i64, !dbg !1507
  %528 = getelementptr inbounds i32, i32* %525, i64 %527, !dbg !1507
  %529 = load i32, i32* %528, align 4, !dbg !1507
  %530 = load i32, i32* %19, align 4, !dbg !1509
  %531 = icmp ne i32 %529, %530, !dbg !1510
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %355
  %532 = load i8, i8* %21, align 1, !dbg !1512
  %533 = sext i8 %532 to i32, !dbg !1512
  %534 = call i32 @putchar_unlocked(i32 %533), !dbg !1512
  %535 = load i32*, i32** %24, align 8, !dbg !1514
  %536 = load i32, i32* %26, align 4, !dbg !1516
  %537 = sext i32 %536 to i64, !dbg !1514
  %538 = getelementptr inbounds i32, i32* %535, i64 %537, !dbg !1514
  %539 = load i32, i32* %538, align 4, !dbg !1514
  %540 = load i8, i8* %20, align 1, !dbg !1517
  %541 = trunc i8 %540 to i1, !dbg !1517
  %542 = call zeroext i1 @print_group(i32 %539, i1 zeroext %541), !dbg !1518
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %383
  store i8 0, i8* %22, align 1, !dbg !1520
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %400
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %417
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %434
  %543 = load i32, i32* %26, align 4, !dbg !1523
  %_ = shl i32 %543, 1
  %_79 = sub i32 0, %543
  %gen = add i32 %_79, 1
  %_80 = sub i32 %543, 1
  %gen81 = mul i32 %_80, 1
  %_82 = shl i32 %543, 1
  %_83 = sub i32 0, %543
  %gen84 = add i32 %_83, 1
  %_85 = sub i32 0, %543
  %gen86 = add i32 %_85, 1
  %_87 = sub i32 %543, 1
  %gen88 = mul i32 %_87, 1
  %_89 = sub i32 %543, 1
  %gen90 = mul i32 %_89, 1
  %_91 = sub i32 %543, 1
  %gen92 = mul i32 %_91, 1
  %544 = add nsw i32 %543, 1, !dbg !1523
  store i32 %544, i32* %26, align 4, !dbg !1523
  br label %originalBB78

originalBB96alteredBB:                            ; preds = %originalBB96, %453
  %545 = load i32*, i32** %24, align 8, !dbg !1527
  %546 = bitcast i32* %545 to i8*, !dbg !1527
  call void @free(i8* %546) #10, !dbg !1528
  %547 = load i8, i8* %22, align 1, !dbg !1529
  %548 = trunc i8 %547 to i1, !dbg !1529
  store i1 %548, i1* %15, align 1, !dbg !1530
  br label %originalBB96
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @print_group(i32, i1 zeroext) #4 !dbg !1556 {
  %3 = load i32, i32* @x.21
  %4 = load i32, i32* @y.22
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8, align 1
  %13 = alloca %struct.group*, align 8
  %14 = alloca i8, align 1
  %15 = alloca i8*, align 8
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !1559, metadata !DIExpression()), !dbg !1560
  %16 = zext i1 %1 to i8
  store i8 %16, i8* %12, align 1
  call void @llvm.dbg.declare(metadata i8* %12, metadata !1561, metadata !DIExpression()), !dbg !1562
  call void @llvm.dbg.declare(metadata %struct.group** %13, metadata !1563, metadata !DIExpression()), !dbg !1571
  store %struct.group* null, %struct.group** %13, align 8, !dbg !1571
  call void @llvm.dbg.declare(metadata i8* %14, metadata !1572, metadata !DIExpression()), !dbg !1573
  store i8 1, i8* %14, align 1, !dbg !1573
  %17 = load i8, i8* %12, align 1, !dbg !1574
  %18 = trunc i8 %17 to i1, !dbg !1574
  %19 = load i32, i32* @x.21
  %20 = load i32, i32* @y.22
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %69, !dbg !1576

27:                                               ; preds = %originalBBpart2
  %28 = load i32, i32* @x.21
  %29 = load i32, i32* @y.22
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load i32, i32* %11, align 4, !dbg !1577
  %37 = call %struct.group* @getgrgid(i32 %36), !dbg !1579
  store %struct.group* %37, %struct.group** %13, align 8, !dbg !1580
  %38 = load %struct.group*, %struct.group** %13, align 8, !dbg !1581
  %39 = icmp eq %struct.group* %38, null, !dbg !1583
  %40 = load i32, i32* @x.21
  %41 = load i32, i32* @y.22
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %39, label %48, label %68, !dbg !1584

48:                                               ; preds = %originalBBpart24
  %49 = load i32, i32* @x.21
  %50 = load i32, i32* @y.22
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = call i8* @gettext(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2.63, i64 0, i64 0)) #10, !dbg !1585
  %58 = load i32, i32* %11, align 4, !dbg !1587
  %59 = zext i32 %58 to i64, !dbg !1588
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %57, i64 %59), !dbg !1589
  store i8 0, i8* %14, align 1, !dbg !1590
  %60 = load i32, i32* @x.21
  %61 = load i32, i32* @y.22
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %68, !dbg !1591

68:                                               ; preds = %originalBBpart28, %originalBBpart24
  br label %69, !dbg !1592

69:                                               ; preds = %68, %originalBBpart2
  call void @llvm.dbg.declare(metadata i8** %15, metadata !1593, metadata !DIExpression()), !dbg !1594
  %70 = load i32, i32* @x.21
  %71 = load i32, i32* @y.22
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %69, %originalBB10alteredBB
  %78 = load %struct.group*, %struct.group** %13, align 8, !dbg !1595
  %79 = icmp ne %struct.group* %78, null, !dbg !1595
  %80 = load i32, i32* @x.21
  %81 = load i32, i32* @y.22
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %79, label %88, label %108, !dbg !1595

88:                                               ; preds = %originalBBpart212
  %89 = load i32, i32* @x.21
  %90 = load i32, i32* @y.22
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %88, %originalBB14alteredBB
  %97 = load %struct.group*, %struct.group** %13, align 8, !dbg !1596
  %98 = getelementptr inbounds %struct.group, %struct.group* %97, i32 0, i32 0, !dbg !1597
  %99 = load i8*, i8** %98, align 8, !dbg !1597
  %100 = load i32, i32* @x.21
  %101 = load i32, i32* @y.22
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %126, !dbg !1595

108:                                              ; preds = %originalBBpart212
  %109 = load i32, i32* @x.21
  %110 = load i32, i32* @y.22
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %108, %originalBB18alteredBB
  %117 = call i8* @gidtostr_ptr.64(i32* %11), !dbg !1598
  %118 = load i32, i32* @x.21
  %119 = load i32, i32* @y.22
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %126, !dbg !1595

126:                                              ; preds = %originalBBpart220, %originalBBpart216
  %127 = phi i8* [ %99, %originalBBpart216 ], [ %117, %originalBBpart220 ], !dbg !1595
  store i8* %127, i8** %15, align 8, !dbg !1594
  %128 = load i8*, i8** %15, align 8, !dbg !1599
  %129 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1599
  %130 = call i32 @fputs_unlocked(i8* %128, %struct._IO_FILE* %129), !dbg !1599
  %131 = load i8, i8* %14, align 1, !dbg !1600
  %132 = trunc i8 %131 to i1, !dbg !1600
  ret i1 %132, !dbg !1601

originalBBalteredBB:                              ; preds = %originalBB, %2
  %133 = alloca i32, align 4
  %134 = alloca i8, align 1
  %135 = alloca %struct.group*, align 8
  %136 = alloca i8, align 1
  %137 = alloca i8*, align 8
  store i32 %0, i32* %133, align 4
  call void @llvm.dbg.declare(metadata i32* %133, metadata !1602, metadata !DIExpression()), !dbg !1560
  %138 = zext i1 %1 to i8
  store i8 %138, i8* %134, align 1
  call void @llvm.dbg.declare(metadata i8* %134, metadata !1609, metadata !DIExpression()), !dbg !1562
  call void @llvm.dbg.declare(metadata %struct.group** %135, metadata !1610, metadata !DIExpression()), !dbg !1571
  store %struct.group* null, %struct.group** %135, align 8, !dbg !1571
  call void @llvm.dbg.declare(metadata i8* %136, metadata !1618, metadata !DIExpression()), !dbg !1573
  store i8 1, i8* %136, align 1, !dbg !1573
  %139 = load i8, i8* %134, align 1, !dbg !1574
  %140 = trunc i8 %139 to i1, !dbg !1574
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  %141 = load i32, i32* %11, align 4, !dbg !1577
  %142 = call %struct.group* @getgrgid(i32 %141), !dbg !1579
  store %struct.group* %142, %struct.group** %13, align 8, !dbg !1580
  %143 = load %struct.group*, %struct.group** %13, align 8, !dbg !1581
  %144 = icmp eq %struct.group* %143, null, !dbg !1583
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %145 = call i8* @gettext(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2.63, i64 0, i64 0)) #10, !dbg !1585
  %146 = load i32, i32* %11, align 4, !dbg !1587
  %147 = zext i32 %146 to i64, !dbg !1588
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %145, i64 %147), !dbg !1589
  store i8 0, i8* %14, align 1, !dbg !1590
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %69
  %148 = load %struct.group*, %struct.group** %13, align 8, !dbg !1595
  %149 = icmp ne %struct.group* %148, null, !dbg !1595
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %88
  %150 = load %struct.group*, %struct.group** %13, align 8, !dbg !1596
  %151 = getelementptr inbounds %struct.group, %struct.group* %150, i32 0, i32 0, !dbg !1597
  %152 = load i8*, i8** %151, align 8, !dbg !1597
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %108
  %153 = call i8* @gidtostr_ptr.64(i32* %11), !dbg !1598
  br label %originalBB18
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gidtostr_ptr.64(i32*) #4 !dbg !80 {
  %2 = load i32, i32* @x.23
  %3 = load i32, i32* @y.24
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32*, align 8
  store i32* %0, i32** %10, align 8
  call void @llvm.dbg.declare(metadata i32** %10, metadata !1619, metadata !DIExpression()), !dbg !1620
  %11 = load i32*, i32** %10, align 8, !dbg !1621
  %12 = load i32, i32* %11, align 4, !dbg !1622
  %13 = zext i32 %12 to i64, !dbg !1622
  %14 = call i8* @umaxtostr(i64 %13, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @gidtostr_ptr.buf.65, i64 0, i64 0)), !dbg !1623
  %15 = load i32, i32* @x.23
  %16 = load i32, i32* @y.24
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !1624

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32*, align 8
  store i32* %0, i32** %23, align 8
  call void @llvm.dbg.declare(metadata i32** %23, metadata !1625, metadata !DIExpression()), !dbg !1620
  %24 = load i32*, i32** %23, align 8, !dbg !1621
  %25 = load i32, i32* %24, align 4, !dbg !1622
  %26 = zext i32 %25 to i64, !dbg !1622
  %27 = call i8* @umaxtostr(i64 %26, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @gidtostr_ptr.buf.65, i64 0, i64 0)), !dbg !1623
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @close_stdout() #4 !dbg !1631 {
  %1 = load i32, i32* @x.25
  %2 = load i32, i32* @y.26
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1634
  %11 = call i32 @close_stream(%struct._IO_FILE* %10), !dbg !1636
  %12 = icmp ne i32 %11, 0, !dbg !1637
  %13 = load i32, i32* @x.25
  %14 = load i32, i32* @y.26
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %124, !dbg !1638

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.25
  %23 = load i32, i32* @y.26
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i8, i8* @ignore_EPIPE, align 1, !dbg !1639
  %31 = trunc i8 %30 to i1, !dbg !1639
  %32 = load i32, i32* @x.25
  %33 = load i32, i32* @y.26
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %31, label %40, label %60, !dbg !1640

40:                                               ; preds = %originalBBpart24
  %41 = load i32, i32* @x.25
  %42 = load i32, i32* @y.26
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %40, %originalBB6alteredBB
  %49 = call i32* @__errno_location() #15, !dbg !1641
  %50 = load i32, i32* %49, align 4, !dbg !1641
  %51 = icmp eq i32 %50, 32, !dbg !1642
  %52 = load i32, i32* @x.25
  %53 = load i32, i32* @y.26
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %51, label %124, label %60, !dbg !1643

60:                                               ; preds = %originalBBpart28, %originalBBpart24
  call void @llvm.dbg.declare(metadata i8** %9, metadata !1644, metadata !DIExpression()), !dbg !1646
  %61 = load i32, i32* @x.25
  %62 = load i32, i32* @y.26
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  %69 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.71, i64 0, i64 0)) #10, !dbg !1647
  store i8* %69, i8** %9, align 8, !dbg !1646
  %70 = load i8*, i8** @file_name, align 8, !dbg !1648
  %71 = icmp ne i8* %70, null, !dbg !1648
  %72 = load i32, i32* @x.25
  %73 = load i32, i32* @y.26
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %71, label %80, label %102, !dbg !1650

80:                                               ; preds = %originalBBpart212
  %81 = load i32, i32* @x.25
  %82 = load i32, i32* @y.26
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %80, %originalBB14alteredBB
  %89 = call i32* @__errno_location() #15, !dbg !1651
  %90 = load i32, i32* %89, align 4, !dbg !1651
  %91 = load i8*, i8** @file_name, align 8, !dbg !1652
  %92 = call i8* @quotearg_colon(i8* %91), !dbg !1653
  %93 = load i8*, i8** %9, align 8, !dbg !1654
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %90, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.72, i64 0, i64 0), i8* %92, i8* %93), !dbg !1655
  %94 = load i32, i32* @x.25
  %95 = load i32, i32* @y.26
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %122, !dbg !1655

102:                                              ; preds = %originalBBpart212
  %103 = load i32, i32* @x.25
  %104 = load i32, i32* @y.26
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %102, %originalBB18alteredBB
  %111 = call i32* @__errno_location() #15, !dbg !1656
  %112 = load i32, i32* %111, align 4, !dbg !1656
  %113 = load i8*, i8** %9, align 8, !dbg !1657
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %112, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.73, i64 0, i64 0), i8* %113), !dbg !1658
  %114 = load i32, i32* @x.25
  %115 = load i32, i32* @y.26
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %122

122:                                              ; preds = %originalBBpart220, %originalBBpart216
  %123 = load volatile i32, i32* @exit_failure, align 4, !dbg !1659
  call void @_exit(i32 %123) #14, !dbg !1660
  unreachable, !dbg !1660

124:                                              ; preds = %originalBBpart28, %originalBBpart2
  %125 = load i32, i32* @x.25
  %126 = load i32, i32* @y.26
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %124, %originalBB22alteredBB
  %133 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1661
  %134 = call i32 @close_stream(%struct._IO_FILE* %133), !dbg !1663
  %135 = icmp ne i32 %134, 0, !dbg !1664
  %136 = load i32, i32* @x.25
  %137 = load i32, i32* @y.26
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %135, label %144, label %162, !dbg !1665

144:                                              ; preds = %originalBBpart224
  %145 = load i32, i32* @x.25
  %146 = load i32, i32* @y.26
  %147 = sub i32 %145, 1
  %148 = mul i32 %145, %147
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %150, %151
  br i1 %152, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %144, %originalBB26alteredBB
  %153 = load volatile i32, i32* @exit_failure, align 4, !dbg !1666
  call void @_exit(i32 %153) #14, !dbg !1667
  %154 = load i32, i32* @x.25
  %155 = load i32, i32* @y.26
  %156 = sub i32 %154, 1
  %157 = mul i32 %154, %156
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %159, %160
  br i1 %161, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  unreachable, !dbg !1667

162:                                              ; preds = %originalBBpart224
  %163 = load i32, i32* @x.25
  %164 = load i32, i32* @y.26
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %162, %originalBB30alteredBB
  %171 = load i32, i32* @x.25
  %172 = load i32, i32* @y.26
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  ret void, !dbg !1668

originalBBalteredBB:                              ; preds = %originalBB, %0
  %179 = alloca i8*, align 8
  %180 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1634
  %181 = call i32 @close_stream(%struct._IO_FILE* %180), !dbg !1636
  %182 = icmp ne i32 %181, 0, !dbg !1637
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %183 = load i8, i8* @ignore_EPIPE, align 1, !dbg !1639
  %184 = trunc i8 %183 to i1, !dbg !1639
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %40
  %185 = call i32* @__errno_location() #15, !dbg !1641
  %186 = load i32, i32* %185, align 4, !dbg !1641
  %187 = icmp eq i32 %186, 32, !dbg !1642
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  %188 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.71, i64 0, i64 0)) #10, !dbg !1647
  store i8* %188, i8** %9, align 8, !dbg !1646
  %189 = load i8*, i8** @file_name, align 8, !dbg !1648
  %190 = icmp ne i8* %189, null, !dbg !1648
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %80
  %191 = call i32* @__errno_location() #15, !dbg !1651
  %192 = load i32, i32* %191, align 4, !dbg !1651
  %193 = load i8*, i8** @file_name, align 8, !dbg !1652
  %194 = call i8* @quotearg_colon(i8* %193), !dbg !1653
  %195 = load i8*, i8** %9, align 8, !dbg !1654
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %192, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.72, i64 0, i64 0), i8* %194, i8* %195), !dbg !1655
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %102
  %196 = call i32* @__errno_location() #15, !dbg !1656
  %197 = load i32, i32* %196, align 4, !dbg !1656
  %198 = load i8*, i8** %9, align 8, !dbg !1657
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %197, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.73, i64 0, i64 0), i8* %198), !dbg !1658
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %124
  %199 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1661
  %200 = call i32 @close_stream(%struct._IO_FILE* %199), !dbg !1663
  %201 = icmp ne i32 %200, 0, !dbg !1664
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %144
  %202 = load volatile i32, i32* @exit_failure, align 4, !dbg !1666
  call void @_exit(i32 %202) #14, !dbg !1667
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %162
  br label %originalBB30
}

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #9

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @umaxtostr(i64, i8*) #4 !dbg !1669 {
  %3 = load i32, i32* @x.27
  %4 = load i32, i32* @y.28
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i64, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  store i64 %0, i64* %11, align 8
  call void @llvm.dbg.declare(metadata i64* %11, metadata !1673, metadata !DIExpression()), !dbg !1674
  store i8* %1, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !1675, metadata !DIExpression()), !dbg !1676
  call void @llvm.dbg.declare(metadata i8** %13, metadata !1677, metadata !DIExpression()), !dbg !1678
  %14 = load i8*, i8** %12, align 8, !dbg !1679
  %15 = getelementptr inbounds i8, i8* %14, i64 20, !dbg !1680
  store i8* %15, i8** %13, align 8, !dbg !1678
  %16 = load i8*, i8** %13, align 8, !dbg !1681
  store i8 0, i8* %16, align 1, !dbg !1682
  %17 = load i64, i64* %11, align 8, !dbg !1683
  %18 = icmp ult i64 %17, 0, !dbg !1685
  %19 = load i32, i32* @x.27
  %20 = load i32, i32* @y.28
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %74, !dbg !1686

27:                                               ; preds = %originalBBpart2
  %28 = load i32, i32* @x.27
  %29 = load i32, i32* @y.28
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load i32, i32* @x.27
  %37 = load i32, i32* @y.28
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %44, !dbg !1687

44:                                               ; preds = %51, %originalBBpart24
  %45 = load i64, i64* %11, align 8, !dbg !1689
  %46 = urem i64 %45, 10, !dbg !1690
  %47 = sub i64 48, %46, !dbg !1691
  %48 = trunc i64 %47 to i8, !dbg !1692
  %49 = load i8*, i8** %13, align 8, !dbg !1693
  %50 = getelementptr inbounds i8, i8* %49, i32 -1, !dbg !1693
  store i8* %50, i8** %13, align 8, !dbg !1693
  store i8 %48, i8* %50, align 1, !dbg !1694
  br label %51, !dbg !1695

51:                                               ; preds = %44
  %52 = load i64, i64* %11, align 8, !dbg !1696
  %53 = udiv i64 %52, 10, !dbg !1696
  store i64 %53, i64* %11, align 8, !dbg !1696
  %54 = icmp ne i64 %53, 0, !dbg !1697
  br i1 %54, label %44, label %55, !dbg !1695, !llvm.loop !1698

55:                                               ; preds = %51
  %56 = load i32, i32* @x.27
  %57 = load i32, i32* @y.28
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %55, %originalBB6alteredBB
  %64 = load i8*, i8** %13, align 8, !dbg !1700
  %65 = getelementptr inbounds i8, i8* %64, i32 -1, !dbg !1700
  store i8* %65, i8** %13, align 8, !dbg !1700
  store i8 45, i8* %65, align 1, !dbg !1701
  %66 = load i32, i32* @x.27
  %67 = load i32, i32* @y.28
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %151, !dbg !1702

74:                                               ; preds = %originalBBpart2
  %75 = load i32, i32* @x.27
  %76 = load i32, i32* @y.28
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %74, %originalBB10alteredBB
  %83 = load i32, i32* @x.27
  %84 = load i32, i32* @y.28
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %91, !dbg !1703

91:                                               ; preds = %originalBBpart225, %originalBBpart212
  %92 = load i32, i32* @x.27
  %93 = load i32, i32* @y.28
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %91, %originalBB14alteredBB
  %100 = load i64, i64* %11, align 8, !dbg !1705
  %101 = urem i64 %100, 10, !dbg !1706
  %102 = add i64 48, %101, !dbg !1707
  %103 = trunc i64 %102 to i8, !dbg !1708
  %104 = load i8*, i8** %13, align 8, !dbg !1709
  %105 = getelementptr inbounds i8, i8* %104, i32 -1, !dbg !1709
  store i8* %105, i8** %13, align 8, !dbg !1709
  store i8 %103, i8* %105, align 1, !dbg !1710
  %106 = load i32, i32* @x.27
  %107 = load i32, i32* @y.28
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart219, label %originalBB14alteredBB

originalBBpart219:                                ; preds = %originalBB14
  br label %114, !dbg !1711

114:                                              ; preds = %originalBBpart219
  %115 = load i32, i32* @x.27
  %116 = load i32, i32* @y.28
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBB21, label %originalBB21alteredBB

originalBB21:                                     ; preds = %114, %originalBB21alteredBB
  %123 = load i64, i64* %11, align 8, !dbg !1712
  %124 = udiv i64 %123, 10, !dbg !1712
  store i64 %124, i64* %11, align 8, !dbg !1712
  %125 = icmp ne i64 %124, 0, !dbg !1713
  %126 = load i32, i32* @x.27
  %127 = load i32, i32* @y.28
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart225, label %originalBB21alteredBB

originalBBpart225:                                ; preds = %originalBB21
  br i1 %125, label %91, label %134, !dbg !1711, !llvm.loop !1714

134:                                              ; preds = %originalBBpart225
  %135 = load i32, i32* @x.27
  %136 = load i32, i32* @y.28
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %134, %originalBB27alteredBB
  %143 = load i32, i32* @x.27
  %144 = load i32, i32* @y.28
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br label %151

151:                                              ; preds = %originalBBpart229, %originalBBpart28
  %152 = load i32, i32* @x.27
  %153 = load i32, i32* @y.28
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %151, %originalBB31alteredBB
  %160 = load i8*, i8** %13, align 8, !dbg !1716
  %161 = load i32, i32* @x.27
  %162 = load i32, i32* @y.28
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  ret i8* %160, !dbg !1717

originalBBalteredBB:                              ; preds = %originalBB, %2
  %169 = alloca i64, align 8
  %170 = alloca i8*, align 8
  %171 = alloca i8*, align 8
  store i64 %0, i64* %169, align 8
  call void @llvm.dbg.declare(metadata i64* %169, metadata !1718, metadata !DIExpression()), !dbg !1674
  store i8* %1, i8** %170, align 8
  call void @llvm.dbg.declare(metadata i8** %170, metadata !1721, metadata !DIExpression()), !dbg !1676
  call void @llvm.dbg.declare(metadata i8** %171, metadata !1722, metadata !DIExpression()), !dbg !1678
  %172 = load i8*, i8** %170, align 8, !dbg !1679
  %173 = getelementptr inbounds i8, i8* %172, i64 20, !dbg !1680
  store i8* %173, i8** %171, align 8, !dbg !1678
  %174 = load i8*, i8** %171, align 8, !dbg !1681
  store i8 0, i8* %174, align 1, !dbg !1682
  %175 = load i64, i64* %169, align 8, !dbg !1683
  %176 = icmp ult i64 %175, 0, !dbg !1685
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %55
  %177 = load i8*, i8** %13, align 8, !dbg !1700
  %178 = getelementptr inbounds i8, i8* %177, i32 -1, !dbg !1700
  store i8* %178, i8** %13, align 8, !dbg !1700
  store i8 45, i8* %178, align 1, !dbg !1701
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %74
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %91
  %179 = load i64, i64* %11, align 8, !dbg !1705
  %_ = shl i64 %179, 10
  %_15 = shl i64 %179, 10
  %180 = urem i64 %179, 10, !dbg !1706
  %_16 = sub i64 0, 48
  %gen = add i64 %_16, %180
  %_17 = shl i64 48, %180
  %181 = add i64 48, %180, !dbg !1707
  %182 = trunc i64 %181 to i8, !dbg !1708
  %183 = load i8*, i8** %13, align 8, !dbg !1709
  %184 = getelementptr inbounds i8, i8* %183, i32 -1, !dbg !1709
  store i8* %184, i8** %13, align 8, !dbg !1709
  store i8 %182, i8* %184, align 1, !dbg !1710
  br label %originalBB14

originalBB21alteredBB:                            ; preds = %originalBB21, %114
  %185 = load i64, i64* %11, align 8, !dbg !1712
  %_22 = sub i64 %185, 10
  %gen23 = mul i64 %_22, 10
  %186 = udiv i64 %185, 10, !dbg !1712
  store i64 %186, i64* %11, align 8, !dbg !1712
  %187 = icmp ne i64 %186, 0, !dbg !1713
  br label %originalBB21

originalBB27alteredBB:                            ; preds = %originalBB27, %134
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %151
  %188 = load i8*, i8** %13, align 8, !dbg !1716
  br label %originalBB31
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_program_name(i8*) #4 !dbg !1723 {
  %2 = load i32, i32* @x.29
  %3 = load i32, i32* @y.30
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !1724, metadata !DIExpression()), !dbg !1725
  call void @llvm.dbg.declare(metadata i8** %11, metadata !1726, metadata !DIExpression()), !dbg !1727
  call void @llvm.dbg.declare(metadata i8** %12, metadata !1728, metadata !DIExpression()), !dbg !1729
  %13 = load i8*, i8** %10, align 8, !dbg !1730
  %14 = icmp eq i8* %13, null, !dbg !1732
  %15 = load i32, i32* @x.29
  %16 = load i32, i32* @y.30
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %26, !dbg !1733

23:                                               ; preds = %originalBBpart2
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1734
  %25 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.80, i64 0, i64 0), %struct._IO_FILE* %24), !dbg !1736
  call void @abort() #12, !dbg !1737
  unreachable, !dbg !1737

26:                                               ; preds = %originalBBpart2
  %27 = load i32, i32* @x.29
  %28 = load i32, i32* @y.30
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load i8*, i8** %10, align 8, !dbg !1738
  %36 = call i8* @strrchr(i8* %35, i32 47) #13, !dbg !1739
  store i8* %36, i8** %11, align 8, !dbg !1740
  %37 = load i8*, i8** %11, align 8, !dbg !1741
  %38 = icmp ne i8* %37, null, !dbg !1742
  %39 = load i32, i32* @x.29
  %40 = load i32, i32* @y.30
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %50, !dbg !1741

47:                                               ; preds = %originalBBpart24
  %48 = load i8*, i8** %11, align 8, !dbg !1743
  %49 = getelementptr inbounds i8, i8* %48, i64 1, !dbg !1744
  br label %68, !dbg !1741

50:                                               ; preds = %originalBBpart24
  %51 = load i32, i32* @x.29
  %52 = load i32, i32* @y.30
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %50, %originalBB6alteredBB
  %59 = load i8*, i8** %10, align 8, !dbg !1745
  %60 = load i32, i32* @x.29
  %61 = load i32, i32* @y.30
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %68, !dbg !1741

68:                                               ; preds = %originalBBpart28, %47
  %69 = phi i8* [ %49, %47 ], [ %59, %originalBBpart28 ], !dbg !1741
  %70 = load i32, i32* @x.29
  %71 = load i32, i32* @y.30
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %68, %originalBB10alteredBB
  store i8* %69, i8** %12, align 8, !dbg !1746
  %78 = load i8*, i8** %12, align 8, !dbg !1747
  %79 = load i8*, i8** %10, align 8, !dbg !1749
  %80 = ptrtoint i8* %78 to i64, !dbg !1750
  %81 = ptrtoint i8* %79 to i64, !dbg !1750
  %82 = sub i64 %80, %81, !dbg !1750
  %83 = icmp sge i64 %82, 7, !dbg !1751
  %84 = load i32, i32* @x.29
  %85 = load i32, i32* @y.30
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart213, label %originalBB10alteredBB

originalBBpart213:                                ; preds = %originalBB10
  br i1 %83, label %92, label %155, !dbg !1752

92:                                               ; preds = %originalBBpart213
  %93 = load i8*, i8** %12, align 8, !dbg !1753
  %94 = getelementptr inbounds i8, i8* %93, i64 -7, !dbg !1754
  %95 = call i32 @strncmp(i8* %94, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.81, i64 0, i64 0), i64 7) #13, !dbg !1755
  %96 = icmp eq i32 %95, 0, !dbg !1756
  br i1 %96, label %97, label %155, !dbg !1757

97:                                               ; preds = %92
  %98 = load i32, i32* @x.29
  %99 = load i32, i32* @y.30
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %97, %originalBB15alteredBB
  %106 = load i8*, i8** %12, align 8, !dbg !1758
  store i8* %106, i8** %10, align 8, !dbg !1760
  %107 = load i8*, i8** %12, align 8, !dbg !1761
  %108 = call i32 @strncmp(i8* %107, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.82, i64 0, i64 0), i64 3) #13, !dbg !1763
  %109 = icmp eq i32 %108, 0, !dbg !1764
  %110 = load i32, i32* @x.29
  %111 = load i32, i32* @y.30
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  br i1 %109, label %118, label %138, !dbg !1765

118:                                              ; preds = %originalBBpart217
  %119 = load i32, i32* @x.29
  %120 = load i32, i32* @y.30
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %118, %originalBB19alteredBB
  %127 = load i8*, i8** %12, align 8, !dbg !1766
  %128 = getelementptr inbounds i8, i8* %127, i64 3, !dbg !1768
  store i8* %128, i8** %10, align 8, !dbg !1769
  %129 = load i8*, i8** %10, align 8, !dbg !1770
  store i8* %129, i8** @program_invocation_short_name, align 8, !dbg !1771
  %130 = load i32, i32* @x.29
  %131 = load i32, i32* @y.30
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br label %138, !dbg !1772

138:                                              ; preds = %originalBBpart221, %originalBBpart217
  %139 = load i32, i32* @x.29
  %140 = load i32, i32* @y.30
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %138, %originalBB23alteredBB
  %147 = load i32, i32* @x.29
  %148 = load i32, i32* @y.30
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br label %155, !dbg !1773

155:                                              ; preds = %originalBBpart225, %92, %originalBBpart213
  %156 = load i32, i32* @x.29
  %157 = load i32, i32* @y.30
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %155, %originalBB27alteredBB
  %164 = load i8*, i8** %10, align 8, !dbg !1774
  store i8* %164, i8** @program_name, align 8, !dbg !1775
  %165 = load i8*, i8** %10, align 8, !dbg !1776
  store i8* %165, i8** @program_invocation_name, align 8, !dbg !1777
  %166 = load i32, i32* @x.29
  %167 = load i32, i32* @y.30
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  ret void, !dbg !1778

originalBBalteredBB:                              ; preds = %originalBB, %1
  %174 = alloca i8*, align 8
  %175 = alloca i8*, align 8
  %176 = alloca i8*, align 8
  store i8* %0, i8** %174, align 8
  call void @llvm.dbg.declare(metadata i8** %174, metadata !1779, metadata !DIExpression()), !dbg !1725
  call void @llvm.dbg.declare(metadata i8** %175, metadata !1785, metadata !DIExpression()), !dbg !1727
  call void @llvm.dbg.declare(metadata i8** %176, metadata !1786, metadata !DIExpression()), !dbg !1729
  %177 = load i8*, i8** %174, align 8, !dbg !1730
  %178 = icmp eq i8* %177, null, !dbg !1732
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %179 = load i8*, i8** %10, align 8, !dbg !1738
  %180 = call i8* @strrchr(i8* %179, i32 47) #13, !dbg !1739
  store i8* %180, i8** %11, align 8, !dbg !1740
  %181 = load i8*, i8** %11, align 8, !dbg !1741
  %182 = icmp ne i8* %181, null, !dbg !1742
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %50
  %183 = load i8*, i8** %10, align 8, !dbg !1745
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %68
  store i8* %69, i8** %12, align 8, !dbg !1746
  %184 = load i8*, i8** %12, align 8, !dbg !1747
  %185 = load i8*, i8** %10, align 8, !dbg !1749
  %186 = ptrtoint i8* %184 to i64, !dbg !1750
  %187 = ptrtoint i8* %185 to i64, !dbg !1750
  %_ = shl i64 %186, %187
  %_11 = sub i64 0, %186
  %gen = add i64 %_11, %187
  %188 = sub i64 %186, %187, !dbg !1750
  %189 = icmp sge i64 %188, 7, !dbg !1751
  br label %originalBB10

originalBB15alteredBB:                            ; preds = %originalBB15, %97
  %190 = load i8*, i8** %12, align 8, !dbg !1758
  store i8* %190, i8** %10, align 8, !dbg !1760
  %191 = load i8*, i8** %12, align 8, !dbg !1761
  %192 = call i32 @strncmp(i8* %191, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.82, i64 0, i64 0), i64 3) #13, !dbg !1763
  %193 = icmp eq i32 %192, 0, !dbg !1764
  br label %originalBB15

originalBB19alteredBB:                            ; preds = %originalBB19, %118
  %194 = load i8*, i8** %12, align 8, !dbg !1766
  %195 = getelementptr inbounds i8, i8* %194, i64 3, !dbg !1768
  store i8* %195, i8** %10, align 8, !dbg !1769
  %196 = load i8*, i8** %10, align 8, !dbg !1770
  store i8* %196, i8** @program_invocation_short_name, align 8, !dbg !1771
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %138
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %155
  %197 = load i8*, i8** %10, align 8, !dbg !1774
  store i8* %197, i8** @program_name, align 8, !dbg !1775
  %198 = load i8*, i8** %10, align 8, !dbg !1776
  store i8* %198, i8** @program_invocation_name, align 8, !dbg !1777
  br label %originalBB27
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #3

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #5

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @set_char_quoting(%struct.quoting_options*, i8 signext, i32) #4 !dbg !1787 {
  %4 = load i32, i32* @x.31
  %5 = load i32, i32* @y.32
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca %struct.quoting_options*, align 8
  %13 = alloca i8, align 1
  %14 = alloca i32, align 4
  %15 = alloca i8, align 1
  %16 = alloca i32*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %12, metadata !1791, metadata !DIExpression()), !dbg !1792
  store i8 %1, i8* %13, align 1
  call void @llvm.dbg.declare(metadata i8* %13, metadata !1793, metadata !DIExpression()), !dbg !1794
  store i32 %2, i32* %14, align 4
  call void @llvm.dbg.declare(metadata i32* %14, metadata !1795, metadata !DIExpression()), !dbg !1796
  call void @llvm.dbg.declare(metadata i8* %15, metadata !1797, metadata !DIExpression()), !dbg !1798
  %19 = load i8, i8* %13, align 1, !dbg !1799
  store i8 %19, i8* %15, align 1, !dbg !1798
  call void @llvm.dbg.declare(metadata i32** %16, metadata !1800, metadata !DIExpression()), !dbg !1802
  %20 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !1803
  %21 = icmp ne %struct.quoting_options* %20, null, !dbg !1803
  %22 = load i32, i32* @x.31
  %23 = load i32, i32* @y.32
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %48, !dbg !1803

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.31
  %32 = load i32, i32* @y.32
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !1804
  %40 = load i32, i32* @x.31
  %41 = load i32, i32* @y.32
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %49, !dbg !1803

48:                                               ; preds = %originalBBpart2
  br label %49, !dbg !1803

49:                                               ; preds = %48, %originalBBpart24
  %50 = phi %struct.quoting_options* [ %39, %originalBBpart24 ], [ @default_quoting_options, %48 ], !dbg !1803
  %51 = load i32, i32* @x.31
  %52 = load i32, i32* @y.32
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %49, %originalBB6alteredBB
  %59 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %50, i32 0, i32 2, !dbg !1805
  %60 = getelementptr inbounds [8 x i32], [8 x i32]* %59, i64 0, i64 0, !dbg !1806
  %61 = load i8, i8* %15, align 1, !dbg !1807
  %62 = zext i8 %61 to i64, !dbg !1807
  %63 = udiv i64 %62, 32, !dbg !1808
  %64 = getelementptr inbounds i32, i32* %60, i64 %63, !dbg !1809
  store i32* %64, i32** %16, align 8, !dbg !1802
  call void @llvm.dbg.declare(metadata i32* %17, metadata !1810, metadata !DIExpression()), !dbg !1811
  %65 = load i8, i8* %15, align 1, !dbg !1812
  %66 = zext i8 %65 to i64, !dbg !1812
  %67 = urem i64 %66, 32, !dbg !1813
  %68 = trunc i64 %67 to i32, !dbg !1812
  store i32 %68, i32* %17, align 4, !dbg !1811
  call void @llvm.dbg.declare(metadata i32* %18, metadata !1814, metadata !DIExpression()), !dbg !1815
  %69 = load i32*, i32** %16, align 8, !dbg !1816
  %70 = load i32, i32* %69, align 4, !dbg !1817
  %71 = load i32, i32* %17, align 4, !dbg !1818
  %72 = lshr i32 %70, %71, !dbg !1819
  %73 = and i32 %72, 1, !dbg !1820
  store i32 %73, i32* %18, align 4, !dbg !1815
  %74 = load i32, i32* %14, align 4, !dbg !1821
  %75 = and i32 %74, 1, !dbg !1822
  %76 = load i32, i32* %18, align 4, !dbg !1823
  %77 = xor i32 %75, %76, !dbg !1824
  %78 = load i32, i32* %17, align 4, !dbg !1825
  %79 = shl i32 %77, %78, !dbg !1826
  %80 = load i32*, i32** %16, align 8, !dbg !1827
  %81 = load i32, i32* %80, align 4, !dbg !1828
  %82 = xor i32 %81, %79, !dbg !1828
  store i32 %82, i32* %80, align 4, !dbg !1828
  %83 = load i32, i32* %18, align 4, !dbg !1829
  %84 = load i32, i32* @x.31
  %85 = load i32, i32* @y.32
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart266, label %originalBB6alteredBB

originalBBpart266:                                ; preds = %originalBB6
  ret i32 %83, !dbg !1830

originalBBalteredBB:                              ; preds = %originalBB, %3
  %92 = alloca %struct.quoting_options*, align 8
  %93 = alloca i8, align 1
  %94 = alloca i32, align 4
  %95 = alloca i8, align 1
  %96 = alloca i32*, align 8
  %97 = alloca i32, align 4
  %98 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %92, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %92, metadata !1831, metadata !DIExpression()), !dbg !1792
  store i8 %1, i8* %93, align 1
  call void @llvm.dbg.declare(metadata i8* %93, metadata !1866, metadata !DIExpression()), !dbg !1794
  store i32 %2, i32* %94, align 4
  call void @llvm.dbg.declare(metadata i32* %94, metadata !1867, metadata !DIExpression()), !dbg !1796
  call void @llvm.dbg.declare(metadata i8* %95, metadata !1868, metadata !DIExpression()), !dbg !1798
  %99 = load i8, i8* %93, align 1, !dbg !1799
  store i8 %99, i8* %95, align 1, !dbg !1798
  call void @llvm.dbg.declare(metadata i32** %96, metadata !1869, metadata !DIExpression()), !dbg !1802
  %100 = load %struct.quoting_options*, %struct.quoting_options** %92, align 8, !dbg !1803
  %101 = icmp ne %struct.quoting_options* %100, null, !dbg !1803
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %102 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !1804
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %49
  %103 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %50, i32 0, i32 2, !dbg !1805
  %104 = getelementptr inbounds [8 x i32], [8 x i32]* %103, i64 0, i64 0, !dbg !1806
  %105 = load i8, i8* %15, align 1, !dbg !1807
  %106 = zext i8 %105 to i64, !dbg !1807
  %_ = sub i64 %106, 32
  %gen = mul i64 %_, 32
  %_7 = sub i64 %106, 32
  %gen8 = mul i64 %_7, 32
  %_9 = sub i64 0, %106
  %gen10 = add i64 %_9, 32
  %_11 = sub i64 %106, 32
  %gen12 = mul i64 %_11, 32
  %_13 = sub i64 0, %106
  %gen14 = add i64 %_13, 32
  %_15 = sub i64 0, %106
  %gen16 = add i64 %_15, 32
  %107 = udiv i64 %106, 32, !dbg !1808
  %108 = getelementptr inbounds i32, i32* %104, i64 %107, !dbg !1809
  store i32* %108, i32** %16, align 8, !dbg !1802
  call void @llvm.dbg.declare(metadata !4, metadata !1870, metadata !DIExpression()), !dbg !1811
  %109 = load i8, i8* %15, align 1, !dbg !1812
  %110 = zext i8 %109 to i64, !dbg !1812
  %_17 = shl i64 %110, 32
  %111 = urem i64 %110, 32, !dbg !1813
  %112 = trunc i64 %111 to i32, !dbg !1812
  store i32 %112, i32* %17, align 4, !dbg !1811
  call void @llvm.dbg.declare(metadata !4, metadata !1905, metadata !DIExpression()), !dbg !1815
  %113 = load i32*, i32** %16, align 8, !dbg !1816
  %114 = load i32, i32* %113, align 4, !dbg !1817
  %115 = load i32, i32* %17, align 4, !dbg !1818
  %_18 = sub i32 %114, %115
  %gen19 = mul i32 %_18, %115
  %116 = lshr i32 %114, %115, !dbg !1819
  %_20 = sub i32 0, %116
  %gen21 = add i32 %_20, 1
  %_22 = shl i32 %116, 1
  %_23 = sub i32 %116, 1
  %gen24 = mul i32 %_23, 1
  %_25 = sub i32 %116, 1
  %gen26 = mul i32 %_25, 1
  %_27 = shl i32 %116, 1
  %117 = and i32 %116, 1, !dbg !1820
  store i32 %117, i32* %18, align 4, !dbg !1815
  %118 = load i32, i32* %14, align 4, !dbg !1821
  %_28 = sub i32 0, %118
  %gen29 = add i32 %_28, 1
  %_30 = sub i32 0, %118
  %gen31 = add i32 %_30, 1
  %_32 = sub i32 0, %118
  %gen33 = add i32 %_32, 1
  %_34 = shl i32 %118, 1
  %119 = and i32 %118, 1, !dbg !1822
  %120 = load i32, i32* %18, align 4, !dbg !1823
  %_35 = sub i32 0, %119
  %gen36 = add i32 %_35, %120
  %_37 = shl i32 %119, %120
  %_38 = shl i32 %119, %120
  %_39 = sub i32 0, %119
  %gen40 = add i32 %_39, %120
  %_41 = sub i32 %119, %120
  %gen42 = mul i32 %_41, %120
  %_43 = shl i32 %119, %120
  %121 = xor i32 %119, %120, !dbg !1824
  %122 = load i32, i32* %17, align 4, !dbg !1825
  %_44 = sub i32 %121, %122
  %gen45 = mul i32 %_44, %122
  %_46 = sub i32 %121, %122
  %gen47 = mul i32 %_46, %122
  %_48 = shl i32 %121, %122
  %_49 = sub i32 0, %121
  %gen50 = add i32 %_49, %122
  %_51 = sub i32 %121, %122
  %gen52 = mul i32 %_51, %122
  %_53 = shl i32 %121, %122
  %123 = shl i32 %121, %122, !dbg !1826
  %124 = load i32*, i32** %16, align 8, !dbg !1827
  %125 = load i32, i32* %124, align 4, !dbg !1828
  %_54 = shl i32 %125, %123
  %_55 = sub i32 0, %125
  %gen56 = add i32 %_55, %123
  %_57 = sub i32 0, %125
  %gen58 = add i32 %_57, %123
  %_59 = sub i32 %125, %123
  %gen60 = mul i32 %_59, %123
  %_61 = shl i32 %125, %123
  %_62 = shl i32 %125, %123
  %_63 = sub i32 0, %125
  %gen64 = add i32 %_63, %123
  %126 = xor i32 %125, %123, !dbg !1828
  store i32 %126, i32* %124, align 4, !dbg !1828
  %127 = load i32, i32* %18, align 4, !dbg !1829
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char_mem(i8*, i64, i8 signext) #4 !dbg !1906 {
  %4 = load i32, i32* @x.33
  %5 = load i32, i32* @y.34
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8, align 1
  %15 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !1909, metadata !DIExpression()), !dbg !1910
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !1911, metadata !DIExpression()), !dbg !1912
  store i8 %2, i8* %14, align 1
  call void @llvm.dbg.declare(metadata i8* %14, metadata !1913, metadata !DIExpression()), !dbg !1914
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %15, metadata !1915, metadata !DIExpression()), !dbg !1916
  %16 = bitcast %struct.quoting_options* %15 to i8*, !dbg !1917
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !1917
  %17 = load i8, i8* %14, align 1, !dbg !1918
  %18 = call i32 @set_char_quoting(%struct.quoting_options* %15, i8 signext %17, i32 1), !dbg !1919
  %19 = load i8*, i8** %12, align 8, !dbg !1920
  %20 = load i64, i64* %13, align 8, !dbg !1921
  %21 = call i8* @quotearg_n_options(i32 0, i8* %19, i64 %20, %struct.quoting_options* %15), !dbg !1922
  %22 = load i32, i32* @x.33
  %23 = load i32, i32* @y.34
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %21, !dbg !1923

originalBBalteredBB:                              ; preds = %originalBB, %3
  %30 = alloca i8*, align 8
  %31 = alloca i64, align 8
  %32 = alloca i8, align 1
  %33 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %30, align 8
  call void @llvm.dbg.declare(metadata i8** %30, metadata !1924, metadata !DIExpression()), !dbg !1910
  store i64 %1, i64* %31, align 8
  call void @llvm.dbg.declare(metadata i64* %31, metadata !1956, metadata !DIExpression()), !dbg !1912
  store i8 %2, i8* %32, align 1
  call void @llvm.dbg.declare(metadata i8* %32, metadata !1957, metadata !DIExpression()), !dbg !1914
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %33, metadata !1958, metadata !DIExpression()), !dbg !1916
  %34 = bitcast %struct.quoting_options* %33 to i8*, !dbg !1917
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !1917
  %35 = load i8, i8* %32, align 1, !dbg !1918
  %36 = call i32 @set_char_quoting(%struct.quoting_options* %33, i8 signext %35, i32 1), !dbg !1919
  %37 = load i8*, i8** %30, align 8, !dbg !1920
  %38 = load i64, i64* %31, align 8, !dbg !1921
  %39 = call i8* @quotearg_n_options(i32 0, i8* %37, i64 %38, %struct.quoting_options* %33), !dbg !1922
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_options(i32, i8*, i64, %struct.quoting_options*) #4 !dbg !1959 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.quoting_options*, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.slotvec*, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store i32 %0, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !1964, metadata !DIExpression()), !dbg !1965
  store i8* %1, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !1966, metadata !DIExpression()), !dbg !1967
  store i64 %2, i64* %7, align 8
  call void @llvm.dbg.declare(metadata i64* %7, metadata !1968, metadata !DIExpression()), !dbg !1969
  store %struct.quoting_options* %3, %struct.quoting_options** %8, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %8, metadata !1970, metadata !DIExpression()), !dbg !1971
  call void @llvm.dbg.declare(metadata i32* %9, metadata !1972, metadata !DIExpression()), !dbg !1973
  %17 = call i32* @__errno_location() #15, !dbg !1974
  %18 = load i32, i32* %17, align 4, !dbg !1974
  store i32 %18, i32* %9, align 4, !dbg !1973
  call void @llvm.dbg.declare(metadata %struct.slotvec** %10, metadata !1975, metadata !DIExpression()), !dbg !1976
  %19 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !1977
  store %struct.slotvec* %19, %struct.slotvec** %10, align 8, !dbg !1976
  %20 = load i32, i32* %5, align 4, !dbg !1978
  %21 = icmp slt i32 %20, 0, !dbg !1980
  br i1 %21, label %22, label %39, !dbg !1981

22:                                               ; preds = %4
  %23 = load i32, i32* @x.35
  %24 = load i32, i32* @y.36
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %22, %originalBBalteredBB
  call void @abort() #12, !dbg !1982
  %31 = load i32, i32* @x.35
  %32 = load i32, i32* @y.36
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !1982

39:                                               ; preds = %4
  %40 = load i32, i32* @x.35
  %41 = load i32, i32* @y.36
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %39, %originalBB1alteredBB
  %48 = load i32, i32* @nslots, align 4, !dbg !1983
  %49 = load i32, i32* %5, align 4, !dbg !1985
  %50 = icmp sle i32 %48, %49, !dbg !1986
  %51 = load i32, i32* @x.35
  %52 = load i32, i32* @y.36
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %50, label %59, label %213, !dbg !1987

59:                                               ; preds = %originalBBpart24
  call void @llvm.dbg.declare(metadata i8* %11, metadata !1988, metadata !DIExpression()), !dbg !1990
  %60 = load i32, i32* @x.35
  %61 = load i32, i32* @y.36
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %59, %originalBB6alteredBB
  %68 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1991
  %69 = icmp eq %struct.slotvec* %68, @slotvec0, !dbg !1992
  %70 = zext i1 %69 to i8, !dbg !1990
  store i8 %70, i8* %11, align 1, !dbg !1990
  call void @llvm.dbg.declare(metadata i32* %12, metadata !1993, metadata !DIExpression()), !dbg !1994
  store i32 2147483646, i32* %12, align 4, !dbg !1994
  %71 = load i32, i32* %12, align 4, !dbg !1995
  %72 = load i32, i32* %5, align 4, !dbg !1997
  %73 = icmp slt i32 %71, %72, !dbg !1998
  %74 = load i32, i32* @x.35
  %75 = load i32, i32* @y.36
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %73, label %82, label %99, !dbg !1999

82:                                               ; preds = %originalBBpart28
  %83 = load i32, i32* @x.35
  %84 = load i32, i32* @y.36
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %82, %originalBB10alteredBB
  call void @xalloc_die() #14, !dbg !2000
  %91 = load i32, i32* @x.35
  %92 = load i32, i32* @y.36
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  unreachable, !dbg !2000

99:                                               ; preds = %originalBBpart28
  %100 = load i8, i8* %11, align 1, !dbg !2001
  %101 = trunc i8 %100 to i1, !dbg !2001
  br i1 %101, label %102, label %119, !dbg !2001

102:                                              ; preds = %99
  %103 = load i32, i32* @x.35
  %104 = load i32, i32* @y.36
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %102, %originalBB14alteredBB
  %111 = load i32, i32* @x.35
  %112 = load i32, i32* @y.36
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %137, !dbg !2001

119:                                              ; preds = %99
  %120 = load i32, i32* @x.35
  %121 = load i32, i32* @y.36
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %119, %originalBB18alteredBB
  %128 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2002
  %129 = load i32, i32* @x.35
  %130 = load i32, i32* @y.36
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %137, !dbg !2001

137:                                              ; preds = %originalBBpart220, %originalBBpart216
  %138 = phi %struct.slotvec* [ null, %originalBBpart216 ], [ %128, %originalBBpart220 ], !dbg !2001
  %139 = load i32, i32* @x.35
  %140 = load i32, i32* @y.36
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %137, %originalBB22alteredBB
  %147 = bitcast %struct.slotvec* %138 to i8*, !dbg !2001
  %148 = load i32, i32* %5, align 4, !dbg !2003
  %149 = add nsw i32 %148, 1, !dbg !2004
  %150 = sext i32 %149 to i64, !dbg !2005
  %151 = mul i64 %150, 16, !dbg !2006
  %152 = call i8* @xrealloc(i8* %147, i64 %151), !dbg !2007
  %153 = bitcast i8* %152 to %struct.slotvec*, !dbg !2007
  store %struct.slotvec* %153, %struct.slotvec** %10, align 8, !dbg !2008
  store %struct.slotvec* %153, %struct.slotvec** @slotvec, align 8, !dbg !2009
  %154 = load i8, i8* %11, align 1, !dbg !2010
  %155 = trunc i8 %154 to i1, !dbg !2010
  %156 = load i32, i32* @x.35
  %157 = load i32, i32* @y.36
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBBpart243, label %originalBB22alteredBB

originalBBpart243:                                ; preds = %originalBB22
  br i1 %155, label %164, label %183, !dbg !2012

164:                                              ; preds = %originalBBpart243
  %165 = load i32, i32* @x.35
  %166 = load i32, i32* @y.36
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %164, %originalBB45alteredBB
  %173 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2013
  %174 = bitcast %struct.slotvec* %173 to i8*, !dbg !2014
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %174, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !2014
  %175 = load i32, i32* @x.35
  %176 = load i32, i32* @y.36
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %originalBBpart247, label %originalBB45alteredBB

originalBBpart247:                                ; preds = %originalBB45
  br label %183, !dbg !2015

183:                                              ; preds = %originalBBpart247, %originalBBpart243
  %184 = load i32, i32* @x.35
  %185 = load i32, i32* @y.36
  %186 = sub i32 %184, 1
  %187 = mul i32 %184, %186
  %188 = urem i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %189, %190
  br i1 %191, label %originalBB49, label %originalBB49alteredBB

originalBB49:                                     ; preds = %183, %originalBB49alteredBB
  %192 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2016
  %193 = load i32, i32* @nslots, align 4, !dbg !2017
  %194 = sext i32 %193 to i64, !dbg !2018
  %195 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %192, i64 %194, !dbg !2018
  %196 = bitcast %struct.slotvec* %195 to i8*, !dbg !2019
  %197 = load i32, i32* %5, align 4, !dbg !2020
  %198 = add nsw i32 %197, 1, !dbg !2021
  %199 = load i32, i32* @nslots, align 4, !dbg !2022
  %200 = sub nsw i32 %198, %199, !dbg !2023
  %201 = sext i32 %200 to i64, !dbg !2024
  %202 = mul i64 %201, 16, !dbg !2025
  call void @llvm.memset.p0i8.i64(i8* align 8 %196, i8 0, i64 %202, i1 false), !dbg !2019
  %203 = load i32, i32* %5, align 4, !dbg !2026
  %204 = add nsw i32 %203, 1, !dbg !2027
  store i32 %204, i32* @nslots, align 4, !dbg !2028
  %205 = load i32, i32* @x.35
  %206 = load i32, i32* @y.36
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBBpart282, label %originalBB49alteredBB

originalBBpart282:                                ; preds = %originalBB49
  br label %213, !dbg !2029

213:                                              ; preds = %originalBBpart282, %originalBBpart24
  call void @llvm.dbg.declare(metadata i64* %13, metadata !2030, metadata !DIExpression()), !dbg !2032
  %214 = load i32, i32* @x.35
  %215 = load i32, i32* @y.36
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBB84, label %originalBB84alteredBB

originalBB84:                                     ; preds = %213, %originalBB84alteredBB
  %222 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2033
  %223 = load i32, i32* %5, align 4, !dbg !2034
  %224 = sext i32 %223 to i64, !dbg !2033
  %225 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %222, i64 %224, !dbg !2033
  %226 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %225, i32 0, i32 0, !dbg !2035
  %227 = load i64, i64* %226, align 8, !dbg !2035
  store i64 %227, i64* %13, align 8, !dbg !2032
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2036, metadata !DIExpression()), !dbg !2037
  %228 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2038
  %229 = load i32, i32* %5, align 4, !dbg !2039
  %230 = sext i32 %229 to i64, !dbg !2038
  %231 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %228, i64 %230, !dbg !2038
  %232 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %231, i32 0, i32 1, !dbg !2040
  %233 = load i8*, i8** %232, align 8, !dbg !2040
  store i8* %233, i8** %14, align 8, !dbg !2037
  call void @llvm.dbg.declare(metadata i32* %15, metadata !2041, metadata !DIExpression()), !dbg !2042
  %234 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2043
  %235 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %234, i32 0, i32 1, !dbg !2044
  %236 = load i32, i32* %235, align 4, !dbg !2044
  %237 = or i32 %236, 1, !dbg !2045
  store i32 %237, i32* %15, align 4, !dbg !2042
  call void @llvm.dbg.declare(metadata i64* %16, metadata !2046, metadata !DIExpression()), !dbg !2047
  %238 = load i8*, i8** %14, align 8, !dbg !2048
  %239 = load i64, i64* %13, align 8, !dbg !2049
  %240 = load i8*, i8** %6, align 8, !dbg !2050
  %241 = load i64, i64* %7, align 8, !dbg !2051
  %242 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2052
  %243 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %242, i32 0, i32 0, !dbg !2053
  %244 = load i32, i32* %243, align 8, !dbg !2053
  %245 = load i32, i32* %15, align 4, !dbg !2054
  %246 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2055
  %247 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %246, i32 0, i32 2, !dbg !2056
  %248 = getelementptr inbounds [8 x i32], [8 x i32]* %247, i64 0, i64 0, !dbg !2055
  %249 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2057
  %250 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %249, i32 0, i32 3, !dbg !2058
  %251 = load i8*, i8** %250, align 8, !dbg !2058
  %252 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2059
  %253 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %252, i32 0, i32 4, !dbg !2060
  %254 = load i8*, i8** %253, align 8, !dbg !2060
  %255 = call i64 @quotearg_buffer_restyled(i8* %238, i64 %239, i8* %240, i64 %241, i32 %244, i32 %245, i32* %248, i8* %251, i8* %254), !dbg !2061
  store i64 %255, i64* %16, align 8, !dbg !2047
  %256 = load i64, i64* %13, align 8, !dbg !2062
  %257 = load i64, i64* %16, align 8, !dbg !2064
  %258 = icmp ule i64 %256, %257, !dbg !2065
  %259 = load i32, i32* @x.35
  %260 = load i32, i32* @y.36
  %261 = sub i32 %259, 1
  %262 = mul i32 %259, %261
  %263 = urem i32 %262, 2
  %264 = icmp eq i32 %263, 0
  %265 = icmp slt i32 %260, 10
  %266 = or i1 %264, %265
  br i1 %266, label %originalBBpart2100, label %originalBB84alteredBB

originalBBpart2100:                               ; preds = %originalBB84
  br i1 %258, label %267, label %337, !dbg !2066

267:                                              ; preds = %originalBBpart2100
  %268 = load i64, i64* %16, align 8, !dbg !2067
  %269 = add i64 %268, 1, !dbg !2069
  store i64 %269, i64* %13, align 8, !dbg !2070
  %270 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2071
  %271 = load i32, i32* %5, align 4, !dbg !2072
  %272 = sext i32 %271 to i64, !dbg !2071
  %273 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %270, i64 %272, !dbg !2071
  %274 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %273, i32 0, i32 0, !dbg !2073
  store i64 %269, i64* %274, align 8, !dbg !2074
  %275 = load i8*, i8** %14, align 8, !dbg !2075
  %276 = icmp ne i8* %275, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !2077
  br i1 %276, label %277, label %295, !dbg !2078

277:                                              ; preds = %267
  %278 = load i32, i32* @x.35
  %279 = load i32, i32* @y.36
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBB102, label %originalBB102alteredBB

originalBB102:                                    ; preds = %277, %originalBB102alteredBB
  %286 = load i8*, i8** %14, align 8, !dbg !2079
  call void @free(i8* %286) #10, !dbg !2080
  %287 = load i32, i32* @x.35
  %288 = load i32, i32* @y.36
  %289 = sub i32 %287, 1
  %290 = mul i32 %287, %289
  %291 = urem i32 %290, 2
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %292, %293
  br i1 %294, label %originalBBpart2104, label %originalBB102alteredBB

originalBBpart2104:                               ; preds = %originalBB102
  br label %295, !dbg !2080

295:                                              ; preds = %originalBBpart2104, %267
  %296 = load i32, i32* @x.35
  %297 = load i32, i32* @y.36
  %298 = sub i32 %296, 1
  %299 = mul i32 %296, %298
  %300 = urem i32 %299, 2
  %301 = icmp eq i32 %300, 0
  %302 = icmp slt i32 %297, 10
  %303 = or i1 %301, %302
  br i1 %303, label %originalBB106, label %originalBB106alteredBB

originalBB106:                                    ; preds = %295, %originalBB106alteredBB
  %304 = load i64, i64* %13, align 8, !dbg !2081
  %305 = call noalias i8* @xcharalloc(i64 %304), !dbg !2082
  store i8* %305, i8** %14, align 8, !dbg !2083
  %306 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2084
  %307 = load i32, i32* %5, align 4, !dbg !2085
  %308 = sext i32 %307 to i64, !dbg !2084
  %309 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %306, i64 %308, !dbg !2084
  %310 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %309, i32 0, i32 1, !dbg !2086
  store i8* %305, i8** %310, align 8, !dbg !2087
  %311 = load i8*, i8** %14, align 8, !dbg !2088
  %312 = load i64, i64* %13, align 8, !dbg !2089
  %313 = load i8*, i8** %6, align 8, !dbg !2090
  %314 = load i64, i64* %7, align 8, !dbg !2091
  %315 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2092
  %316 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %315, i32 0, i32 0, !dbg !2093
  %317 = load i32, i32* %316, align 8, !dbg !2093
  %318 = load i32, i32* %15, align 4, !dbg !2094
  %319 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2095
  %320 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %319, i32 0, i32 2, !dbg !2096
  %321 = getelementptr inbounds [8 x i32], [8 x i32]* %320, i64 0, i64 0, !dbg !2095
  %322 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2097
  %323 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %322, i32 0, i32 3, !dbg !2098
  %324 = load i8*, i8** %323, align 8, !dbg !2098
  %325 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2099
  %326 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %325, i32 0, i32 4, !dbg !2100
  %327 = load i8*, i8** %326, align 8, !dbg !2100
  %328 = call i64 @quotearg_buffer_restyled(i8* %311, i64 %312, i8* %313, i64 %314, i32 %317, i32 %318, i32* %321, i8* %324, i8* %327), !dbg !2101
  %329 = load i32, i32* @x.35
  %330 = load i32, i32* @y.36
  %331 = sub i32 %329, 1
  %332 = mul i32 %329, %331
  %333 = urem i32 %332, 2
  %334 = icmp eq i32 %333, 0
  %335 = icmp slt i32 %330, 10
  %336 = or i1 %334, %335
  br i1 %336, label %originalBBpart2108, label %originalBB106alteredBB

originalBBpart2108:                               ; preds = %originalBB106
  br label %337, !dbg !2102

337:                                              ; preds = %originalBBpart2108, %originalBBpart2100
  %338 = load i32, i32* @x.35
  %339 = load i32, i32* @y.36
  %340 = sub i32 %338, 1
  %341 = mul i32 %338, %340
  %342 = urem i32 %341, 2
  %343 = icmp eq i32 %342, 0
  %344 = icmp slt i32 %339, 10
  %345 = or i1 %343, %344
  br i1 %345, label %originalBB110, label %originalBB110alteredBB

originalBB110:                                    ; preds = %337, %originalBB110alteredBB
  %346 = load i32, i32* %9, align 4, !dbg !2103
  %347 = call i32* @__errno_location() #15, !dbg !2104
  store i32 %346, i32* %347, align 4, !dbg !2105
  %348 = load i8*, i8** %14, align 8, !dbg !2106
  %349 = load i32, i32* @x.35
  %350 = load i32, i32* @y.36
  %351 = sub i32 %349, 1
  %352 = mul i32 %349, %351
  %353 = urem i32 %352, 2
  %354 = icmp eq i32 %353, 0
  %355 = icmp slt i32 %350, 10
  %356 = or i1 %354, %355
  br i1 %356, label %originalBBpart2112, label %originalBB110alteredBB

originalBBpart2112:                               ; preds = %originalBB110
  ret i8* %348, !dbg !2107

originalBBalteredBB:                              ; preds = %originalBB, %22
  call void @abort() #12, !dbg !1982
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %39
  %357 = load i32, i32* @nslots, align 4, !dbg !1983
  %358 = load i32, i32* %5, align 4, !dbg !1985
  %359 = icmp sle i32 %357, %358, !dbg !1986
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %59
  %360 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1991
  %361 = icmp eq %struct.slotvec* %360, @slotvec0, !dbg !1992
  %362 = zext i1 %361 to i8, !dbg !1990
  store i8 %362, i8* %11, align 1, !dbg !1990
  call void @llvm.dbg.declare(metadata !4, metadata !2108, metadata !DIExpression()), !dbg !1994
  store i32 2147483646, i32* %12, align 4, !dbg !1994
  %363 = load i32, i32* %12, align 4, !dbg !1995
  %364 = load i32, i32* %5, align 4, !dbg !1997
  %365 = icmp slt i32 %363, %364, !dbg !1998
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %82
  call void @xalloc_die() #14, !dbg !2000
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %102
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %119
  %366 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2002
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %137
  %367 = bitcast %struct.slotvec* %138 to i8*, !dbg !2001
  %368 = load i32, i32* %5, align 4, !dbg !2003
  %_ = sub i32 0, %368
  %gen = add i32 %_, 1
  %_23 = sub i32 0, %368
  %gen24 = add i32 %_23, 1
  %_25 = sub i32 %368, 1
  %gen26 = mul i32 %_25, 1
  %_27 = sub i32 0, %368
  %gen28 = add i32 %_27, 1
  %_29 = shl i32 %368, 1
  %369 = add nsw i32 %368, 1, !dbg !2004
  %370 = sext i32 %369 to i64, !dbg !2005
  %_30 = sub i64 %370, 16
  %gen31 = mul i64 %_30, 16
  %_32 = shl i64 %370, 16
  %_33 = sub i64 %370, 16
  %gen34 = mul i64 %_33, 16
  %_35 = sub i64 0, %370
  %gen36 = add i64 %_35, 16
  %_37 = sub i64 %370, 16
  %gen38 = mul i64 %_37, 16
  %_39 = sub i64 %370, 16
  %gen40 = mul i64 %_39, 16
  %_41 = shl i64 %370, 16
  %371 = mul i64 %370, 16, !dbg !2006
  %372 = call i8* @xrealloc(i8* %367, i64 %371), !dbg !2007
  %373 = bitcast i8* %372 to %struct.slotvec*, !dbg !2007
  store %struct.slotvec* %373, %struct.slotvec** %10, align 8, !dbg !2008
  store %struct.slotvec* %373, %struct.slotvec** @slotvec, align 8, !dbg !2009
  %374 = load i8, i8* %11, align 1, !dbg !2010
  %375 = trunc i8 %374 to i1, !dbg !2010
  br label %originalBB22

originalBB45alteredBB:                            ; preds = %originalBB45, %164
  %376 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2013
  %377 = bitcast %struct.slotvec* %376 to i8*, !dbg !2014
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %377, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !2014
  br label %originalBB45

originalBB49alteredBB:                            ; preds = %originalBB49, %183
  %378 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2016
  %379 = load i32, i32* @nslots, align 4, !dbg !2017
  %380 = sext i32 %379 to i64, !dbg !2018
  %381 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %378, i64 %380, !dbg !2018
  %382 = bitcast %struct.slotvec* %381 to i8*, !dbg !2019
  %383 = load i32, i32* %5, align 4, !dbg !2020
  %_50 = sub i32 0, %383
  %gen51 = add i32 %_50, 1
  %_52 = sub i32 %383, 1
  %gen53 = mul i32 %_52, 1
  %_54 = sub i32 0, %383
  %gen55 = add i32 %_54, 1
  %_56 = shl i32 %383, 1
  %384 = add nsw i32 %383, 1, !dbg !2021
  %385 = load i32, i32* @nslots, align 4, !dbg !2022
  %_57 = sub i32 %384, %385
  %gen58 = mul i32 %_57, %385
  %_59 = sub i32 0, %384
  %gen60 = add i32 %_59, %385
  %_61 = shl i32 %384, %385
  %386 = sub nsw i32 %384, %385, !dbg !2023
  %387 = sext i32 %386 to i64, !dbg !2024
  %_62 = sub i64 %387, 16
  %gen63 = mul i64 %_62, 16
  %_64 = sub i64 %387, 16
  %gen65 = mul i64 %_64, 16
  %_66 = sub i64 %387, 16
  %gen67 = mul i64 %_66, 16
  %388 = mul i64 %387, 16, !dbg !2025
  call void @llvm.memset.p0i8.i64(i8* align 8 %382, i8 0, i64 %388, i1 false), !dbg !2019
  %389 = load i32, i32* %5, align 4, !dbg !2026
  %_68 = sub i32 %389, 1
  %gen69 = mul i32 %_68, 1
  %_70 = sub i32 %389, 1
  %gen71 = mul i32 %_70, 1
  %_72 = shl i32 %389, 1
  %_73 = sub i32 %389, 1
  %gen74 = mul i32 %_73, 1
  %_75 = sub i32 0, %389
  %gen76 = add i32 %_75, 1
  %_77 = sub i32 %389, 1
  %gen78 = mul i32 %_77, 1
  %_79 = sub i32 %389, 1
  %gen80 = mul i32 %_79, 1
  %390 = add nsw i32 %389, 1, !dbg !2027
  store i32 %390, i32* @nslots, align 4, !dbg !2028
  br label %originalBB49

originalBB84alteredBB:                            ; preds = %originalBB84, %213
  %391 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2033
  %392 = load i32, i32* %5, align 4, !dbg !2034
  %393 = sext i32 %392 to i64, !dbg !2033
  %394 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %391, i64 %393, !dbg !2033
  %395 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %394, i32 0, i32 0, !dbg !2035
  %396 = load i64, i64* %395, align 8, !dbg !2035
  store i64 %396, i64* %13, align 8, !dbg !2032
  call void @llvm.dbg.declare(metadata !4, metadata !2146, metadata !DIExpression()), !dbg !2037
  %397 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2038
  %398 = load i32, i32* %5, align 4, !dbg !2039
  %399 = sext i32 %398 to i64, !dbg !2038
  %400 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %397, i64 %399, !dbg !2038
  %401 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %400, i32 0, i32 1, !dbg !2040
  %402 = load i8*, i8** %401, align 8, !dbg !2040
  store i8* %402, i8** %14, align 8, !dbg !2037
  call void @llvm.dbg.declare(metadata !4, metadata !2183, metadata !DIExpression()), !dbg !2042
  %403 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2043
  %404 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %403, i32 0, i32 1, !dbg !2044
  %405 = load i32, i32* %404, align 4, !dbg !2044
  %_85 = shl i32 %405, 1
  %_86 = shl i32 %405, 1
  %_87 = sub i32 %405, 1
  %gen88 = mul i32 %_87, 1
  %_89 = sub i32 %405, 1
  %gen90 = mul i32 %_89, 1
  %_91 = sub i32 0, %405
  %gen92 = add i32 %_91, 1
  %_93 = sub i32 0, %405
  %gen94 = add i32 %_93, 1
  %_95 = sub i32 0, %405
  %gen96 = add i32 %_95, 1
  %_97 = sub i32 0, %405
  %gen98 = add i32 %_97, 1
  %406 = or i32 %405, 1, !dbg !2045
  store i32 %406, i32* %15, align 4, !dbg !2042
  call void @llvm.dbg.declare(metadata !4, metadata !2184, metadata !DIExpression()), !dbg !2047
  %407 = load i8*, i8** %14, align 8, !dbg !2048
  %408 = load i64, i64* %13, align 8, !dbg !2049
  %409 = load i8*, i8** %6, align 8, !dbg !2050
  %410 = load i64, i64* %7, align 8, !dbg !2051
  %411 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2052
  %412 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %411, i32 0, i32 0, !dbg !2053
  %413 = load i32, i32* %412, align 8, !dbg !2053
  %414 = load i32, i32* %15, align 4, !dbg !2054
  %415 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2055
  %416 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %415, i32 0, i32 2, !dbg !2056
  %417 = getelementptr inbounds [8 x i32], [8 x i32]* %416, i64 0, i64 0, !dbg !2055
  %418 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2057
  %419 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %418, i32 0, i32 3, !dbg !2058
  %420 = load i8*, i8** %419, align 8, !dbg !2058
  %421 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2059
  %422 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %421, i32 0, i32 4, !dbg !2060
  %423 = load i8*, i8** %422, align 8, !dbg !2060
  %424 = call i64 @quotearg_buffer_restyled(i8* %407, i64 %408, i8* %409, i64 %410, i32 %413, i32 %414, i32* %417, i8* %420, i8* %423), !dbg !2061
  store i64 %424, i64* %16, align 8, !dbg !2047
  %425 = load i64, i64* %13, align 8, !dbg !2062
  %426 = load i64, i64* %16, align 8, !dbg !2064
  %427 = icmp ule i64 %425, %426, !dbg !2065
  br label %originalBB84

originalBB102alteredBB:                           ; preds = %originalBB102, %277
  %428 = load i8*, i8** %14, align 8, !dbg !2079
  call void @free(i8* %428) #10, !dbg !2080
  br label %originalBB102

originalBB106alteredBB:                           ; preds = %originalBB106, %295
  %429 = load i64, i64* %13, align 8, !dbg !2081
  %430 = call noalias i8* @xcharalloc(i64 %429), !dbg !2082
  store i8* %430, i8** %14, align 8, !dbg !2083
  %431 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2084
  %432 = load i32, i32* %5, align 4, !dbg !2085
  %433 = sext i32 %432 to i64, !dbg !2084
  %434 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %431, i64 %433, !dbg !2084
  %435 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %434, i32 0, i32 1, !dbg !2086
  store i8* %430, i8** %435, align 8, !dbg !2087
  %436 = load i8*, i8** %14, align 8, !dbg !2088
  %437 = load i64, i64* %13, align 8, !dbg !2089
  %438 = load i8*, i8** %6, align 8, !dbg !2090
  %439 = load i64, i64* %7, align 8, !dbg !2091
  %440 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2092
  %441 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %440, i32 0, i32 0, !dbg !2093
  %442 = load i32, i32* %441, align 8, !dbg !2093
  %443 = load i32, i32* %15, align 4, !dbg !2094
  %444 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2095
  %445 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %444, i32 0, i32 2, !dbg !2096
  %446 = getelementptr inbounds [8 x i32], [8 x i32]* %445, i64 0, i64 0, !dbg !2095
  %447 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2097
  %448 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %447, i32 0, i32 3, !dbg !2098
  %449 = load i8*, i8** %448, align 8, !dbg !2098
  %450 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2099
  %451 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %450, i32 0, i32 4, !dbg !2100
  %452 = load i8*, i8** %451, align 8, !dbg !2100
  %453 = call i64 @quotearg_buffer_restyled(i8* %436, i64 %437, i8* %438, i64 %439, i32 %442, i32 %443, i32* %446, i8* %449, i8* %452), !dbg !2101
  br label %originalBB106

originalBB110alteredBB:                           ; preds = %originalBB110, %337
  %454 = load i32, i32* %9, align 4, !dbg !2103
  %455 = call i32* @__errno_location() #15, !dbg !2104
  store i32 %454, i32* %455, align 4, !dbg !2105
  %456 = load i8*, i8** %14, align 8, !dbg !2106
  br label %originalBB110
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(i8*, i64, i8*, i64, i32, i32, i32*, i8*, i8*) #4 !dbg !2185 {
  %10 = load i32, i32* @x.37
  %11 = load i32, i32* @y.38
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  %18 = alloca i64, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i64, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i8*, align 8
  %32 = alloca i64, align 8
  %33 = alloca i8, align 1
  %34 = alloca i8, align 1
  %35 = alloca i8, align 1
  %36 = alloca i8, align 1
  %37 = alloca i8, align 1
  %38 = alloca i8, align 1
  %39 = alloca i8, align 1
  %40 = alloca i8, align 1
  %41 = alloca i8, align 1
  %42 = alloca i8, align 1
  %43 = alloca i8, align 1
  %44 = alloca i64, align 8
  %45 = alloca i8, align 1
  %46 = alloca %struct.__mbstate_t, align 4
  %47 = alloca i32, align 4
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  store i8* %0, i8** %19, align 8
  call void @llvm.dbg.declare(metadata i8** %19, metadata !2190, metadata !DIExpression()), !dbg !2191
  store i64 %1, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !2192, metadata !DIExpression()), !dbg !2193
  store i8* %2, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !2194, metadata !DIExpression()), !dbg !2195
  store i64 %3, i64* %22, align 8
  call void @llvm.dbg.declare(metadata i64* %22, metadata !2196, metadata !DIExpression()), !dbg !2197
  store i32 %4, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !2198, metadata !DIExpression()), !dbg !2199
  store i32 %5, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !2200, metadata !DIExpression()), !dbg !2201
  store i32* %6, i32** %25, align 8
  call void @llvm.dbg.declare(metadata i32** %25, metadata !2202, metadata !DIExpression()), !dbg !2203
  store i8* %7, i8** %26, align 8
  call void @llvm.dbg.declare(metadata i8** %26, metadata !2204, metadata !DIExpression()), !dbg !2205
  store i8* %8, i8** %27, align 8
  call void @llvm.dbg.declare(metadata i8** %27, metadata !2206, metadata !DIExpression()), !dbg !2207
  call void @llvm.dbg.declare(metadata i64* %28, metadata !2208, metadata !DIExpression()), !dbg !2209
  call void @llvm.dbg.declare(metadata i64* %29, metadata !2210, metadata !DIExpression()), !dbg !2211
  store i64 0, i64* %29, align 8, !dbg !2211
  call void @llvm.dbg.declare(metadata i64* %30, metadata !2212, metadata !DIExpression()), !dbg !2213
  store i64 0, i64* %30, align 8, !dbg !2213
  call void @llvm.dbg.declare(metadata i8** %31, metadata !2214, metadata !DIExpression()), !dbg !2215
  store i8* null, i8** %31, align 8, !dbg !2215
  call void @llvm.dbg.declare(metadata i64* %32, metadata !2216, metadata !DIExpression()), !dbg !2217
  store i64 0, i64* %32, align 8, !dbg !2217
  call void @llvm.dbg.declare(metadata i8* %33, metadata !2218, metadata !DIExpression()), !dbg !2219
  store i8 0, i8* %33, align 1, !dbg !2219
  call void @llvm.dbg.declare(metadata i8* %34, metadata !2220, metadata !DIExpression()), !dbg !2221
  %51 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !2222
  %52 = icmp eq i64 %51, 1, !dbg !2223
  %53 = zext i1 %52 to i8, !dbg !2221
  store i8 %53, i8* %34, align 1, !dbg !2221
  call void @llvm.dbg.declare(metadata i8* %35, metadata !2224, metadata !DIExpression()), !dbg !2225
  %54 = load i32, i32* %24, align 4, !dbg !2226
  %55 = and i32 %54, 2, !dbg !2227
  %56 = icmp ne i32 %55, 0, !dbg !2228
  %57 = zext i1 %56 to i8, !dbg !2225
  store i8 %57, i8* %35, align 1, !dbg !2225
  call void @llvm.dbg.declare(metadata i8* %36, metadata !2229, metadata !DIExpression()), !dbg !2230
  store i8 0, i8* %36, align 1, !dbg !2230
  call void @llvm.dbg.declare(metadata i8* %37, metadata !2231, metadata !DIExpression()), !dbg !2232
  store i8 0, i8* %37, align 1, !dbg !2232
  call void @llvm.dbg.declare(metadata i8* %38, metadata !2233, metadata !DIExpression()), !dbg !2234
  store i8 1, i8* %38, align 1, !dbg !2234
  %58 = load i32, i32* @x.37
  %59 = load i32, i32* @y.38
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %66, !dbg !2235

66:                                               ; preds = %originalBBpart21548, %originalBBpart2
  call void @llvm.dbg.label(metadata !2236), !dbg !2237
  %67 = load i32, i32* @x.37
  %68 = load i32, i32* @y.38
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %66, %originalBB12alteredBB
  %75 = load i32, i32* %23, align 4, !dbg !2238
  %76 = load i32, i32* @x.37
  %77 = load i32, i32* @y.38
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart214, label %originalBB12alteredBB

originalBBpart214:                                ; preds = %originalBB12
  switch i32 %75, label %632 [
    i32 6, label %84
    i32 5, label %101
    i32 7, label %214
    i32 8, label %231
    i32 9, label %231
    i32 10, label %231
    i32 3, label %415
    i32 1, label %432
    i32 4, label %449
    i32 2, label %502
    i32 0, label %615
  ], !dbg !2239

84:                                               ; preds = %originalBBpart214
  %85 = load i32, i32* @x.37
  %86 = load i32, i32* @y.38
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB16, label %originalBB16alteredBB

originalBB16:                                     ; preds = %84, %originalBB16alteredBB
  store i32 5, i32* %23, align 4, !dbg !2240
  store i8 1, i8* %35, align 1, !dbg !2242
  %93 = load i32, i32* @x.37
  %94 = load i32, i32* @y.38
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart218, label %originalBB16alteredBB

originalBBpart218:                                ; preds = %originalBB16
  br label %101, !dbg !2243

101:                                              ; preds = %originalBBpart218, %originalBBpart214
  %102 = load i32, i32* @x.37
  %103 = load i32, i32* @y.38
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %101, %originalBB20alteredBB
  %110 = load i8, i8* %35, align 1, !dbg !2244
  %111 = trunc i8 %110 to i1, !dbg !2244
  %112 = load i32, i32* @x.37
  %113 = load i32, i32* @y.38
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  br i1 %111, label %213, label %120, !dbg !2246

120:                                              ; preds = %originalBBpart222
  %121 = load i32, i32* @x.37
  %122 = load i32, i32* @y.38
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %120, %originalBB24alteredBB
  %129 = load i32, i32* @x.37
  %130 = load i32, i32* @y.38
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart226, label %originalBB24alteredBB

originalBBpart226:                                ; preds = %originalBB24
  br label %137, !dbg !2247

137:                                              ; preds = %originalBBpart226
  %138 = load i32, i32* @x.37
  %139 = load i32, i32* @y.38
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB28, label %originalBB28alteredBB

originalBB28:                                     ; preds = %137, %originalBB28alteredBB
  %146 = load i64, i64* %29, align 8, !dbg !2248
  %147 = load i64, i64* %20, align 8, !dbg !2248
  %148 = icmp ult i64 %146, %147, !dbg !2248
  %149 = load i32, i32* @x.37
  %150 = load i32, i32* @y.38
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart230, label %originalBB28alteredBB

originalBBpart230:                                ; preds = %originalBB28
  br i1 %148, label %157, label %177, !dbg !2251

157:                                              ; preds = %originalBBpart230
  %158 = load i32, i32* @x.37
  %159 = load i32, i32* @y.38
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBB32, label %originalBB32alteredBB

originalBB32:                                     ; preds = %157, %originalBB32alteredBB
  %166 = load i8*, i8** %19, align 8, !dbg !2248
  %167 = load i64, i64* %29, align 8, !dbg !2248
  %168 = getelementptr inbounds i8, i8* %166, i64 %167, !dbg !2248
  store i8 34, i8* %168, align 1, !dbg !2248
  %169 = load i32, i32* @x.37
  %170 = load i32, i32* @y.38
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart234, label %originalBB32alteredBB

originalBBpart234:                                ; preds = %originalBB32
  br label %177, !dbg !2248

177:                                              ; preds = %originalBBpart234, %originalBBpart230
  %178 = load i32, i32* @x.37
  %179 = load i32, i32* @y.38
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBB36, label %originalBB36alteredBB

originalBB36:                                     ; preds = %177, %originalBB36alteredBB
  %186 = load i64, i64* %29, align 8, !dbg !2251
  %187 = add i64 %186, 1, !dbg !2251
  store i64 %187, i64* %29, align 8, !dbg !2251
  %188 = load i32, i32* @x.37
  %189 = load i32, i32* @y.38
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBBpart248, label %originalBB36alteredBB

originalBBpart248:                                ; preds = %originalBB36
  br label %196, !dbg !2251

196:                                              ; preds = %originalBBpart248
  %197 = load i32, i32* @x.37
  %198 = load i32, i32* @y.38
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %196, %originalBB50alteredBB
  %205 = load i32, i32* @x.37
  %206 = load i32, i32* @y.38
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br label %213, !dbg !2251

213:                                              ; preds = %originalBBpart252, %originalBBpart222
  store i8 1, i8* %33, align 1, !dbg !2252
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.85, i64 0, i64 0), i8** %31, align 8, !dbg !2253
  store i64 1, i64* %32, align 8, !dbg !2254
  br label %649, !dbg !2255

214:                                              ; preds = %originalBBpart214
  %215 = load i32, i32* @x.37
  %216 = load i32, i32* @y.38
  %217 = sub i32 %215, 1
  %218 = mul i32 %215, %217
  %219 = urem i32 %218, 2
  %220 = icmp eq i32 %219, 0
  %221 = icmp slt i32 %216, 10
  %222 = or i1 %220, %221
  br i1 %222, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %214, %originalBB54alteredBB
  store i8 1, i8* %33, align 1, !dbg !2256
  store i8 0, i8* %35, align 1, !dbg !2257
  %223 = load i32, i32* @x.37
  %224 = load i32, i32* @y.38
  %225 = sub i32 %223, 1
  %226 = mul i32 %223, %225
  %227 = urem i32 %226, 2
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %228, %229
  br i1 %230, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br label %649, !dbg !2258

231:                                              ; preds = %originalBBpart214, %originalBBpart214, %originalBBpart214
  %232 = load i32, i32* @x.37
  %233 = load i32, i32* @y.38
  %234 = sub i32 %232, 1
  %235 = mul i32 %232, %234
  %236 = urem i32 %235, 2
  %237 = icmp eq i32 %236, 0
  %238 = icmp slt i32 %233, 10
  %239 = or i1 %237, %238
  br i1 %239, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %231, %originalBB58alteredBB
  %240 = load i32, i32* %23, align 4, !dbg !2259
  %241 = icmp ne i32 %240, 10, !dbg !2262
  %242 = load i32, i32* @x.37
  %243 = load i32, i32* @y.38
  %244 = sub i32 %242, 1
  %245 = mul i32 %242, %244
  %246 = urem i32 %245, 2
  %247 = icmp eq i32 %246, 0
  %248 = icmp slt i32 %243, 10
  %249 = or i1 %247, %248
  br i1 %249, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br i1 %241, label %250, label %271, !dbg !2263

250:                                              ; preds = %originalBBpart260
  %251 = load i32, i32* @x.37
  %252 = load i32, i32* @y.38
  %253 = sub i32 %251, 1
  %254 = mul i32 %251, %253
  %255 = urem i32 %254, 2
  %256 = icmp eq i32 %255, 0
  %257 = icmp slt i32 %252, 10
  %258 = or i1 %256, %257
  br i1 %258, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %250, %originalBB62alteredBB
  %259 = load i32, i32* %23, align 4, !dbg !2264
  %260 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.86, i64 0, i64 0), i32 %259), !dbg !2266
  store i8* %260, i8** %26, align 8, !dbg !2267
  %261 = load i32, i32* %23, align 4, !dbg !2268
  %262 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.87, i64 0, i64 0), i32 %261), !dbg !2269
  store i8* %262, i8** %27, align 8, !dbg !2270
  %263 = load i32, i32* @x.37
  %264 = load i32, i32* @y.38
  %265 = sub i32 %263, 1
  %266 = mul i32 %263, %265
  %267 = urem i32 %266, 2
  %268 = icmp eq i32 %267, 0
  %269 = icmp slt i32 %264, 10
  %270 = or i1 %268, %269
  br i1 %270, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br label %271, !dbg !2271

271:                                              ; preds = %originalBBpart264, %originalBBpart260
  %272 = load i8, i8* %35, align 1, !dbg !2272
  %273 = trunc i8 %272 to i1, !dbg !2272
  br i1 %273, label %395, label %274, !dbg !2274

274:                                              ; preds = %271
  %275 = load i32, i32* @x.37
  %276 = load i32, i32* @y.38
  %277 = sub i32 %275, 1
  %278 = mul i32 %275, %277
  %279 = urem i32 %278, 2
  %280 = icmp eq i32 %279, 0
  %281 = icmp slt i32 %276, 10
  %282 = or i1 %280, %281
  br i1 %282, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %274, %originalBB66alteredBB
  %283 = load i8*, i8** %26, align 8, !dbg !2275
  store i8* %283, i8** %31, align 8, !dbg !2277
  %284 = load i32, i32* @x.37
  %285 = load i32, i32* @y.38
  %286 = sub i32 %284, 1
  %287 = mul i32 %284, %286
  %288 = urem i32 %287, 2
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %289, %290
  br i1 %291, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br label %292, !dbg !2278

292:                                              ; preds = %375, %originalBBpart268
  %293 = load i32, i32* @x.37
  %294 = load i32, i32* @y.38
  %295 = sub i32 %293, 1
  %296 = mul i32 %293, %295
  %297 = urem i32 %296, 2
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %298, %299
  br i1 %300, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %292, %originalBB70alteredBB
  %301 = load i8*, i8** %31, align 8, !dbg !2279
  %302 = load i8, i8* %301, align 1, !dbg !2281
  %303 = icmp ne i8 %302, 0, !dbg !2282
  %304 = load i32, i32* @x.37
  %305 = load i32, i32* @y.38
  %306 = sub i32 %304, 1
  %307 = mul i32 %304, %306
  %308 = urem i32 %307, 2
  %309 = icmp eq i32 %308, 0
  %310 = icmp slt i32 %305, 10
  %311 = or i1 %309, %310
  br i1 %311, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br i1 %303, label %312, label %378, !dbg !2282

312:                                              ; preds = %originalBBpart272
  %313 = load i32, i32* @x.37
  %314 = load i32, i32* @y.38
  %315 = sub i32 %313, 1
  %316 = mul i32 %313, %315
  %317 = urem i32 %316, 2
  %318 = icmp eq i32 %317, 0
  %319 = icmp slt i32 %314, 10
  %320 = or i1 %318, %319
  br i1 %320, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %312, %originalBB74alteredBB
  %321 = load i32, i32* @x.37
  %322 = load i32, i32* @y.38
  %323 = sub i32 %321, 1
  %324 = mul i32 %321, %323
  %325 = urem i32 %324, 2
  %326 = icmp eq i32 %325, 0
  %327 = icmp slt i32 %322, 10
  %328 = or i1 %326, %327
  br i1 %328, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br label %329, !dbg !2283

329:                                              ; preds = %originalBBpart276
  %330 = load i32, i32* @x.37
  %331 = load i32, i32* @y.38
  %332 = sub i32 %330, 1
  %333 = mul i32 %330, %332
  %334 = urem i32 %333, 2
  %335 = icmp eq i32 %334, 0
  %336 = icmp slt i32 %331, 10
  %337 = or i1 %335, %336
  br i1 %337, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %329, %originalBB78alteredBB
  %338 = load i64, i64* %29, align 8, !dbg !2284
  %339 = load i64, i64* %20, align 8, !dbg !2284
  %340 = icmp ult i64 %338, %339, !dbg !2284
  %341 = load i32, i32* @x.37
  %342 = load i32, i32* @y.38
  %343 = sub i32 %341, 1
  %344 = mul i32 %341, %343
  %345 = urem i32 %344, 2
  %346 = icmp eq i32 %345, 0
  %347 = icmp slt i32 %342, 10
  %348 = or i1 %346, %347
  br i1 %348, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br i1 %340, label %349, label %355, !dbg !2287

349:                                              ; preds = %originalBBpart280
  %350 = load i8*, i8** %31, align 8, !dbg !2284
  %351 = load i8, i8* %350, align 1, !dbg !2284
  %352 = load i8*, i8** %19, align 8, !dbg !2284
  %353 = load i64, i64* %29, align 8, !dbg !2284
  %354 = getelementptr inbounds i8, i8* %352, i64 %353, !dbg !2284
  store i8 %351, i8* %354, align 1, !dbg !2284
  br label %355, !dbg !2284

355:                                              ; preds = %349, %originalBBpart280
  %356 = load i32, i32* @x.37
  %357 = load i32, i32* @y.38
  %358 = sub i32 %356, 1
  %359 = mul i32 %356, %358
  %360 = urem i32 %359, 2
  %361 = icmp eq i32 %360, 0
  %362 = icmp slt i32 %357, 10
  %363 = or i1 %361, %362
  br i1 %363, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %355, %originalBB82alteredBB
  %364 = load i64, i64* %29, align 8, !dbg !2287
  %365 = add i64 %364, 1, !dbg !2287
  store i64 %365, i64* %29, align 8, !dbg !2287
  %366 = load i32, i32* @x.37
  %367 = load i32, i32* @y.38
  %368 = sub i32 %366, 1
  %369 = mul i32 %366, %368
  %370 = urem i32 %369, 2
  %371 = icmp eq i32 %370, 0
  %372 = icmp slt i32 %367, 10
  %373 = or i1 %371, %372
  br i1 %373, label %originalBBpart296, label %originalBB82alteredBB

originalBBpart296:                                ; preds = %originalBB82
  br label %374, !dbg !2287

374:                                              ; preds = %originalBBpart296
  br label %375, !dbg !2287

375:                                              ; preds = %374
  %376 = load i8*, i8** %31, align 8, !dbg !2288
  %377 = getelementptr inbounds i8, i8* %376, i32 1, !dbg !2288
  store i8* %377, i8** %31, align 8, !dbg !2288
  br label %292, !dbg !2289, !llvm.loop !2290

378:                                              ; preds = %originalBBpart272
  %379 = load i32, i32* @x.37
  %380 = load i32, i32* @y.38
  %381 = sub i32 %379, 1
  %382 = mul i32 %379, %381
  %383 = urem i32 %382, 2
  %384 = icmp eq i32 %383, 0
  %385 = icmp slt i32 %380, 10
  %386 = or i1 %384, %385
  br i1 %386, label %originalBB98, label %originalBB98alteredBB

originalBB98:                                     ; preds = %378, %originalBB98alteredBB
  %387 = load i32, i32* @x.37
  %388 = load i32, i32* @y.38
  %389 = sub i32 %387, 1
  %390 = mul i32 %387, %389
  %391 = urem i32 %390, 2
  %392 = icmp eq i32 %391, 0
  %393 = icmp slt i32 %388, 10
  %394 = or i1 %392, %393
  br i1 %394, label %originalBBpart2100, label %originalBB98alteredBB

originalBBpart2100:                               ; preds = %originalBB98
  br label %395, !dbg !2291

395:                                              ; preds = %originalBBpart2100, %271
  %396 = load i32, i32* @x.37
  %397 = load i32, i32* @y.38
  %398 = sub i32 %396, 1
  %399 = mul i32 %396, %398
  %400 = urem i32 %399, 2
  %401 = icmp eq i32 %400, 0
  %402 = icmp slt i32 %397, 10
  %403 = or i1 %401, %402
  br i1 %403, label %originalBB102, label %originalBB102alteredBB

originalBB102:                                    ; preds = %395, %originalBB102alteredBB
  store i8 1, i8* %33, align 1, !dbg !2292
  %404 = load i8*, i8** %27, align 8, !dbg !2293
  store i8* %404, i8** %31, align 8, !dbg !2294
  %405 = load i8*, i8** %31, align 8, !dbg !2295
  %406 = call i64 @strlen(i8* %405) #13, !dbg !2296
  store i64 %406, i64* %32, align 8, !dbg !2297
  %407 = load i32, i32* @x.37
  %408 = load i32, i32* @y.38
  %409 = sub i32 %407, 1
  %410 = mul i32 %407, %409
  %411 = urem i32 %410, 2
  %412 = icmp eq i32 %411, 0
  %413 = icmp slt i32 %408, 10
  %414 = or i1 %412, %413
  br i1 %414, label %originalBBpart2104, label %originalBB102alteredBB

originalBBpart2104:                               ; preds = %originalBB102
  br label %649, !dbg !2298

415:                                              ; preds = %originalBBpart214
  %416 = load i32, i32* @x.37
  %417 = load i32, i32* @y.38
  %418 = sub i32 %416, 1
  %419 = mul i32 %416, %418
  %420 = urem i32 %419, 2
  %421 = icmp eq i32 %420, 0
  %422 = icmp slt i32 %417, 10
  %423 = or i1 %421, %422
  br i1 %423, label %originalBB106, label %originalBB106alteredBB

originalBB106:                                    ; preds = %415, %originalBB106alteredBB
  store i8 1, i8* %33, align 1, !dbg !2299
  %424 = load i32, i32* @x.37
  %425 = load i32, i32* @y.38
  %426 = sub i32 %424, 1
  %427 = mul i32 %424, %426
  %428 = urem i32 %427, 2
  %429 = icmp eq i32 %428, 0
  %430 = icmp slt i32 %425, 10
  %431 = or i1 %429, %430
  br i1 %431, label %originalBBpart2108, label %originalBB106alteredBB

originalBBpart2108:                               ; preds = %originalBB106
  br label %432, !dbg !2300

432:                                              ; preds = %originalBBpart2108, %originalBBpart214
  %433 = load i32, i32* @x.37
  %434 = load i32, i32* @y.38
  %435 = sub i32 %433, 1
  %436 = mul i32 %433, %435
  %437 = urem i32 %436, 2
  %438 = icmp eq i32 %437, 0
  %439 = icmp slt i32 %434, 10
  %440 = or i1 %438, %439
  br i1 %440, label %originalBB110, label %originalBB110alteredBB

originalBB110:                                    ; preds = %432, %originalBB110alteredBB
  store i8 1, i8* %35, align 1, !dbg !2301
  %441 = load i32, i32* @x.37
  %442 = load i32, i32* @y.38
  %443 = sub i32 %441, 1
  %444 = mul i32 %441, %443
  %445 = urem i32 %444, 2
  %446 = icmp eq i32 %445, 0
  %447 = icmp slt i32 %442, 10
  %448 = or i1 %446, %447
  br i1 %448, label %originalBBpart2112, label %originalBB110alteredBB

originalBBpart2112:                               ; preds = %originalBB110
  br label %449, !dbg !2302

449:                                              ; preds = %originalBBpart2112, %originalBBpart214
  %450 = load i32, i32* @x.37
  %451 = load i32, i32* @y.38
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBB114, label %originalBB114alteredBB

originalBB114:                                    ; preds = %449, %originalBB114alteredBB
  %458 = load i8, i8* %35, align 1, !dbg !2303
  %459 = trunc i8 %458 to i1, !dbg !2303
  %460 = load i32, i32* @x.37
  %461 = load i32, i32* @y.38
  %462 = sub i32 %460, 1
  %463 = mul i32 %460, %462
  %464 = urem i32 %463, 2
  %465 = icmp eq i32 %464, 0
  %466 = icmp slt i32 %461, 10
  %467 = or i1 %465, %466
  br i1 %467, label %originalBBpart2116, label %originalBB114alteredBB

originalBBpart2116:                               ; preds = %originalBB114
  br i1 %459, label %485, label %468, !dbg !2305

468:                                              ; preds = %originalBBpart2116
  %469 = load i32, i32* @x.37
  %470 = load i32, i32* @y.38
  %471 = sub i32 %469, 1
  %472 = mul i32 %469, %471
  %473 = urem i32 %472, 2
  %474 = icmp eq i32 %473, 0
  %475 = icmp slt i32 %470, 10
  %476 = or i1 %474, %475
  br i1 %476, label %originalBB118, label %originalBB118alteredBB

originalBB118:                                    ; preds = %468, %originalBB118alteredBB
  store i8 1, i8* %33, align 1, !dbg !2306
  %477 = load i32, i32* @x.37
  %478 = load i32, i32* @y.38
  %479 = sub i32 %477, 1
  %480 = mul i32 %477, %479
  %481 = urem i32 %480, 2
  %482 = icmp eq i32 %481, 0
  %483 = icmp slt i32 %478, 10
  %484 = or i1 %482, %483
  br i1 %484, label %originalBBpart2120, label %originalBB118alteredBB

originalBBpart2120:                               ; preds = %originalBB118
  br label %485, !dbg !2307

485:                                              ; preds = %originalBBpart2120, %originalBBpart2116
  %486 = load i32, i32* @x.37
  %487 = load i32, i32* @y.38
  %488 = sub i32 %486, 1
  %489 = mul i32 %486, %488
  %490 = urem i32 %489, 2
  %491 = icmp eq i32 %490, 0
  %492 = icmp slt i32 %487, 10
  %493 = or i1 %491, %492
  br i1 %493, label %originalBB122, label %originalBB122alteredBB

originalBB122:                                    ; preds = %485, %originalBB122alteredBB
  %494 = load i32, i32* @x.37
  %495 = load i32, i32* @y.38
  %496 = sub i32 %494, 1
  %497 = mul i32 %494, %496
  %498 = urem i32 %497, 2
  %499 = icmp eq i32 %498, 0
  %500 = icmp slt i32 %495, 10
  %501 = or i1 %499, %500
  br i1 %501, label %originalBBpart2124, label %originalBB122alteredBB

originalBBpart2124:                               ; preds = %originalBB122
  br label %502, !dbg !2308

502:                                              ; preds = %originalBBpart2124, %originalBBpart214
  %503 = load i32, i32* @x.37
  %504 = load i32, i32* @y.38
  %505 = sub i32 %503, 1
  %506 = mul i32 %503, %505
  %507 = urem i32 %506, 2
  %508 = icmp eq i32 %507, 0
  %509 = icmp slt i32 %504, 10
  %510 = or i1 %508, %509
  br i1 %510, label %originalBB126, label %originalBB126alteredBB

originalBB126:                                    ; preds = %502, %originalBB126alteredBB
  store i32 2, i32* %23, align 4, !dbg !2309
  %511 = load i8, i8* %35, align 1, !dbg !2310
  %512 = trunc i8 %511 to i1, !dbg !2310
  %513 = load i32, i32* @x.37
  %514 = load i32, i32* @y.38
  %515 = sub i32 %513, 1
  %516 = mul i32 %513, %515
  %517 = urem i32 %516, 2
  %518 = icmp eq i32 %517, 0
  %519 = icmp slt i32 %514, 10
  %520 = or i1 %518, %519
  br i1 %520, label %originalBBpart2128, label %originalBB126alteredBB

originalBBpart2128:                               ; preds = %originalBB126
  br i1 %512, label %598, label %521, !dbg !2312

521:                                              ; preds = %originalBBpart2128
  %522 = load i32, i32* @x.37
  %523 = load i32, i32* @y.38
  %524 = sub i32 %522, 1
  %525 = mul i32 %522, %524
  %526 = urem i32 %525, 2
  %527 = icmp eq i32 %526, 0
  %528 = icmp slt i32 %523, 10
  %529 = or i1 %527, %528
  br i1 %529, label %originalBB130, label %originalBB130alteredBB

originalBB130:                                    ; preds = %521, %originalBB130alteredBB
  %530 = load i32, i32* @x.37
  %531 = load i32, i32* @y.38
  %532 = sub i32 %530, 1
  %533 = mul i32 %530, %532
  %534 = urem i32 %533, 2
  %535 = icmp eq i32 %534, 0
  %536 = icmp slt i32 %531, 10
  %537 = or i1 %535, %536
  br i1 %537, label %originalBBpart2132, label %originalBB130alteredBB

originalBBpart2132:                               ; preds = %originalBB130
  br label %538, !dbg !2313

538:                                              ; preds = %originalBBpart2132
  %539 = load i32, i32* @x.37
  %540 = load i32, i32* @y.38
  %541 = sub i32 %539, 1
  %542 = mul i32 %539, %541
  %543 = urem i32 %542, 2
  %544 = icmp eq i32 %543, 0
  %545 = icmp slt i32 %540, 10
  %546 = or i1 %544, %545
  br i1 %546, label %originalBB134, label %originalBB134alteredBB

originalBB134:                                    ; preds = %538, %originalBB134alteredBB
  %547 = load i64, i64* %29, align 8, !dbg !2314
  %548 = load i64, i64* %20, align 8, !dbg !2314
  %549 = icmp ult i64 %547, %548, !dbg !2314
  %550 = load i32, i32* @x.37
  %551 = load i32, i32* @y.38
  %552 = sub i32 %550, 1
  %553 = mul i32 %550, %552
  %554 = urem i32 %553, 2
  %555 = icmp eq i32 %554, 0
  %556 = icmp slt i32 %551, 10
  %557 = or i1 %555, %556
  br i1 %557, label %originalBBpart2136, label %originalBB134alteredBB

originalBBpart2136:                               ; preds = %originalBB134
  br i1 %549, label %558, label %578, !dbg !2317

558:                                              ; preds = %originalBBpart2136
  %559 = load i32, i32* @x.37
  %560 = load i32, i32* @y.38
  %561 = sub i32 %559, 1
  %562 = mul i32 %559, %561
  %563 = urem i32 %562, 2
  %564 = icmp eq i32 %563, 0
  %565 = icmp slt i32 %560, 10
  %566 = or i1 %564, %565
  br i1 %566, label %originalBB138, label %originalBB138alteredBB

originalBB138:                                    ; preds = %558, %originalBB138alteredBB
  %567 = load i8*, i8** %19, align 8, !dbg !2314
  %568 = load i64, i64* %29, align 8, !dbg !2314
  %569 = getelementptr inbounds i8, i8* %567, i64 %568, !dbg !2314
  store i8 39, i8* %569, align 1, !dbg !2314
  %570 = load i32, i32* @x.37
  %571 = load i32, i32* @y.38
  %572 = sub i32 %570, 1
  %573 = mul i32 %570, %572
  %574 = urem i32 %573, 2
  %575 = icmp eq i32 %574, 0
  %576 = icmp slt i32 %571, 10
  %577 = or i1 %575, %576
  br i1 %577, label %originalBBpart2140, label %originalBB138alteredBB

originalBBpart2140:                               ; preds = %originalBB138
  br label %578, !dbg !2314

578:                                              ; preds = %originalBBpart2140, %originalBBpart2136
  %579 = load i32, i32* @x.37
  %580 = load i32, i32* @y.38
  %581 = sub i32 %579, 1
  %582 = mul i32 %579, %581
  %583 = urem i32 %582, 2
  %584 = icmp eq i32 %583, 0
  %585 = icmp slt i32 %580, 10
  %586 = or i1 %584, %585
  br i1 %586, label %originalBB142, label %originalBB142alteredBB

originalBB142:                                    ; preds = %578, %originalBB142alteredBB
  %587 = load i64, i64* %29, align 8, !dbg !2317
  %588 = add i64 %587, 1, !dbg !2317
  store i64 %588, i64* %29, align 8, !dbg !2317
  %589 = load i32, i32* @x.37
  %590 = load i32, i32* @y.38
  %591 = sub i32 %589, 1
  %592 = mul i32 %589, %591
  %593 = urem i32 %592, 2
  %594 = icmp eq i32 %593, 0
  %595 = icmp slt i32 %590, 10
  %596 = or i1 %594, %595
  br i1 %596, label %originalBBpart2151, label %originalBB142alteredBB

originalBBpart2151:                               ; preds = %originalBB142
  br label %597, !dbg !2317

597:                                              ; preds = %originalBBpart2151
  br label %598, !dbg !2317

598:                                              ; preds = %597, %originalBBpart2128
  %599 = load i32, i32* @x.37
  %600 = load i32, i32* @y.38
  %601 = sub i32 %599, 1
  %602 = mul i32 %599, %601
  %603 = urem i32 %602, 2
  %604 = icmp eq i32 %603, 0
  %605 = icmp slt i32 %600, 10
  %606 = or i1 %604, %605
  br i1 %606, label %originalBB153, label %originalBB153alteredBB

originalBB153:                                    ; preds = %598, %originalBB153alteredBB
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.87, i64 0, i64 0), i8** %31, align 8, !dbg !2318
  store i64 1, i64* %32, align 8, !dbg !2319
  %607 = load i32, i32* @x.37
  %608 = load i32, i32* @y.38
  %609 = sub i32 %607, 1
  %610 = mul i32 %607, %609
  %611 = urem i32 %610, 2
  %612 = icmp eq i32 %611, 0
  %613 = icmp slt i32 %608, 10
  %614 = or i1 %612, %613
  br i1 %614, label %originalBBpart2155, label %originalBB153alteredBB

originalBBpart2155:                               ; preds = %originalBB153
  br label %649, !dbg !2320

615:                                              ; preds = %originalBBpart214
  %616 = load i32, i32* @x.37
  %617 = load i32, i32* @y.38
  %618 = sub i32 %616, 1
  %619 = mul i32 %616, %618
  %620 = urem i32 %619, 2
  %621 = icmp eq i32 %620, 0
  %622 = icmp slt i32 %617, 10
  %623 = or i1 %621, %622
  br i1 %623, label %originalBB157, label %originalBB157alteredBB

originalBB157:                                    ; preds = %615, %originalBB157alteredBB
  store i8 0, i8* %35, align 1, !dbg !2321
  %624 = load i32, i32* @x.37
  %625 = load i32, i32* @y.38
  %626 = sub i32 %624, 1
  %627 = mul i32 %624, %626
  %628 = urem i32 %627, 2
  %629 = icmp eq i32 %628, 0
  %630 = icmp slt i32 %625, 10
  %631 = or i1 %629, %630
  br i1 %631, label %originalBBpart2159, label %originalBB157alteredBB

originalBBpart2159:                               ; preds = %originalBB157
  br label %649, !dbg !2322

632:                                              ; preds = %originalBBpart214
  %633 = load i32, i32* @x.37
  %634 = load i32, i32* @y.38
  %635 = sub i32 %633, 1
  %636 = mul i32 %633, %635
  %637 = urem i32 %636, 2
  %638 = icmp eq i32 %637, 0
  %639 = icmp slt i32 %634, 10
  %640 = or i1 %638, %639
  br i1 %640, label %originalBB161, label %originalBB161alteredBB

originalBB161:                                    ; preds = %632, %originalBB161alteredBB
  call void @abort() #12, !dbg !2323
  %641 = load i32, i32* @x.37
  %642 = load i32, i32* @y.38
  %643 = sub i32 %641, 1
  %644 = mul i32 %641, %643
  %645 = urem i32 %644, 2
  %646 = icmp eq i32 %645, 0
  %647 = icmp slt i32 %642, 10
  %648 = or i1 %646, %647
  br i1 %648, label %originalBBpart2163, label %originalBB161alteredBB

originalBBpart2163:                               ; preds = %originalBB161
  unreachable, !dbg !2323

649:                                              ; preds = %originalBBpart2159, %originalBBpart2155, %originalBBpart2104, %originalBBpart256, %213
  %650 = load i32, i32* @x.37
  %651 = load i32, i32* @y.38
  %652 = sub i32 %650, 1
  %653 = mul i32 %650, %652
  %654 = urem i32 %653, 2
  %655 = icmp eq i32 %654, 0
  %656 = icmp slt i32 %651, 10
  %657 = or i1 %655, %656
  br i1 %657, label %originalBB165, label %originalBB165alteredBB

originalBB165:                                    ; preds = %649, %originalBB165alteredBB
  store i64 0, i64* %28, align 8, !dbg !2324
  %658 = load i32, i32* @x.37
  %659 = load i32, i32* @y.38
  %660 = sub i32 %658, 1
  %661 = mul i32 %658, %660
  %662 = urem i32 %661, 2
  %663 = icmp eq i32 %662, 0
  %664 = icmp slt i32 %659, 10
  %665 = or i1 %663, %664
  br i1 %665, label %originalBBpart2167, label %originalBB165alteredBB

originalBBpart2167:                               ; preds = %originalBB165
  br label %666, !dbg !2326

666:                                              ; preds = %originalBBpart21508, %originalBBpart2167
  %667 = load i32, i32* @x.37
  %668 = load i32, i32* @y.38
  %669 = sub i32 %667, 1
  %670 = mul i32 %667, %669
  %671 = urem i32 %670, 2
  %672 = icmp eq i32 %671, 0
  %673 = icmp slt i32 %668, 10
  %674 = or i1 %672, %673
  br i1 %674, label %originalBB169, label %originalBB169alteredBB

originalBB169:                                    ; preds = %666, %originalBB169alteredBB
  %675 = load i64, i64* %22, align 8, !dbg !2327
  %676 = icmp eq i64 %675, -1, !dbg !2329
  %677 = load i32, i32* @x.37
  %678 = load i32, i32* @y.38
  %679 = sub i32 %677, 1
  %680 = mul i32 %677, %679
  %681 = urem i32 %680, 2
  %682 = icmp eq i32 %681, 0
  %683 = icmp slt i32 %678, 10
  %684 = or i1 %682, %683
  br i1 %684, label %originalBBpart2171, label %originalBB169alteredBB

originalBBpart2171:                               ; preds = %originalBB169
  br i1 %676, label %685, label %693, !dbg !2327

685:                                              ; preds = %originalBBpart2171
  %686 = load i8*, i8** %21, align 8, !dbg !2330
  %687 = load i64, i64* %28, align 8, !dbg !2331
  %688 = getelementptr inbounds i8, i8* %686, i64 %687, !dbg !2330
  %689 = load i8, i8* %688, align 1, !dbg !2330
  %690 = sext i8 %689 to i32, !dbg !2330
  %691 = icmp eq i32 %690, 0, !dbg !2332
  %692 = zext i1 %691 to i32, !dbg !2332
  br label %698, !dbg !2327

693:                                              ; preds = %originalBBpart2171
  %694 = load i64, i64* %28, align 8, !dbg !2333
  %695 = load i64, i64* %22, align 8, !dbg !2334
  %696 = icmp eq i64 %694, %695, !dbg !2335
  %697 = zext i1 %696 to i32, !dbg !2335
  br label %698, !dbg !2327

698:                                              ; preds = %693, %685
  %699 = phi i32 [ %692, %685 ], [ %697, %693 ], !dbg !2327
  %700 = load i32, i32* @x.37
  %701 = load i32, i32* @y.38
  %702 = sub i32 %700, 1
  %703 = mul i32 %700, %702
  %704 = urem i32 %703, 2
  %705 = icmp eq i32 %704, 0
  %706 = icmp slt i32 %701, 10
  %707 = or i1 %705, %706
  br i1 %707, label %originalBB173, label %originalBB173alteredBB

originalBB173:                                    ; preds = %698, %originalBB173alteredBB
  %708 = icmp ne i32 %699, 0, !dbg !2336
  %709 = xor i1 %708, true, !dbg !2336
  %710 = load i32, i32* @x.37
  %711 = load i32, i32* @y.38
  %712 = sub i32 %710, 1
  %713 = mul i32 %710, %712
  %714 = urem i32 %713, 2
  %715 = icmp eq i32 %714, 0
  %716 = icmp slt i32 %711, 10
  %717 = or i1 %715, %716
  br i1 %717, label %originalBBpart2177, label %originalBB173alteredBB

originalBBpart2177:                               ; preds = %originalBB173
  br i1 %709, label %718, label %5500, !dbg !2337

718:                                              ; preds = %originalBBpart2177
  call void @llvm.dbg.declare(metadata i8* %39, metadata !2338, metadata !DIExpression()), !dbg !2340
  call void @llvm.dbg.declare(metadata i8* %40, metadata !2341, metadata !DIExpression()), !dbg !2342
  call void @llvm.dbg.declare(metadata i8* %41, metadata !2343, metadata !DIExpression()), !dbg !2344
  %719 = load i32, i32* @x.37
  %720 = load i32, i32* @y.38
  %721 = sub i32 %719, 1
  %722 = mul i32 %719, %721
  %723 = urem i32 %722, 2
  %724 = icmp eq i32 %723, 0
  %725 = icmp slt i32 %720, 10
  %726 = or i1 %724, %725
  br i1 %726, label %originalBB179, label %originalBB179alteredBB

originalBB179:                                    ; preds = %718, %originalBB179alteredBB
  store i8 0, i8* %41, align 1, !dbg !2344
  call void @llvm.dbg.declare(metadata i8* %42, metadata !2345, metadata !DIExpression()), !dbg !2346
  store i8 0, i8* %42, align 1, !dbg !2346
  call void @llvm.dbg.declare(metadata i8* %43, metadata !2347, metadata !DIExpression()), !dbg !2348
  store i8 0, i8* %43, align 1, !dbg !2348
  %727 = load i8, i8* %33, align 1, !dbg !2349
  %728 = trunc i8 %727 to i1, !dbg !2349
  %729 = load i32, i32* @x.37
  %730 = load i32, i32* @y.38
  %731 = sub i32 %729, 1
  %732 = mul i32 %729, %731
  %733 = urem i32 %732, 2
  %734 = icmp eq i32 %733, 0
  %735 = icmp slt i32 %730, 10
  %736 = or i1 %734, %735
  br i1 %736, label %originalBBpart2181, label %originalBB179alteredBB

originalBBpart2181:                               ; preds = %originalBB179
  br i1 %728, label %737, label %901, !dbg !2351

737:                                              ; preds = %originalBBpart2181
  %738 = load i32, i32* @x.37
  %739 = load i32, i32* @y.38
  %740 = sub i32 %738, 1
  %741 = mul i32 %738, %740
  %742 = urem i32 %741, 2
  %743 = icmp eq i32 %742, 0
  %744 = icmp slt i32 %739, 10
  %745 = or i1 %743, %744
  br i1 %745, label %originalBB183, label %originalBB183alteredBB

originalBB183:                                    ; preds = %737, %originalBB183alteredBB
  %746 = load i32, i32* %23, align 4, !dbg !2352
  %747 = icmp ne i32 %746, 2, !dbg !2353
  %748 = load i32, i32* @x.37
  %749 = load i32, i32* @y.38
  %750 = sub i32 %748, 1
  %751 = mul i32 %748, %750
  %752 = urem i32 %751, 2
  %753 = icmp eq i32 %752, 0
  %754 = icmp slt i32 %749, 10
  %755 = or i1 %753, %754
  br i1 %755, label %originalBBpart2185, label %originalBB183alteredBB

originalBBpart2185:                               ; preds = %originalBB183
  br i1 %747, label %756, label %901, !dbg !2354

756:                                              ; preds = %originalBBpart2185
  %757 = load i32, i32* @x.37
  %758 = load i32, i32* @y.38
  %759 = sub i32 %757, 1
  %760 = mul i32 %757, %759
  %761 = urem i32 %760, 2
  %762 = icmp eq i32 %761, 0
  %763 = icmp slt i32 %758, 10
  %764 = or i1 %762, %763
  br i1 %764, label %originalBB187, label %originalBB187alteredBB

originalBB187:                                    ; preds = %756, %originalBB187alteredBB
  %765 = load i64, i64* %32, align 8, !dbg !2355
  %766 = icmp ne i64 %765, 0, !dbg !2355
  %767 = load i32, i32* @x.37
  %768 = load i32, i32* @y.38
  %769 = sub i32 %767, 1
  %770 = mul i32 %767, %769
  %771 = urem i32 %770, 2
  %772 = icmp eq i32 %771, 0
  %773 = icmp slt i32 %768, 10
  %774 = or i1 %772, %773
  br i1 %774, label %originalBBpart2189, label %originalBB187alteredBB

originalBBpart2189:                               ; preds = %originalBB187
  br i1 %766, label %775, label %901, !dbg !2356

775:                                              ; preds = %originalBBpart2189
  %776 = load i32, i32* @x.37
  %777 = load i32, i32* @y.38
  %778 = sub i32 %776, 1
  %779 = mul i32 %776, %778
  %780 = urem i32 %779, 2
  %781 = icmp eq i32 %780, 0
  %782 = icmp slt i32 %777, 10
  %783 = or i1 %781, %782
  br i1 %783, label %originalBB191, label %originalBB191alteredBB

originalBB191:                                    ; preds = %775, %originalBB191alteredBB
  %784 = load i64, i64* %28, align 8, !dbg !2357
  %785 = load i64, i64* %32, align 8, !dbg !2358
  %786 = add i64 %784, %785, !dbg !2359
  %787 = load i64, i64* %22, align 8, !dbg !2360
  %788 = icmp eq i64 %787, -1, !dbg !2361
  %789 = load i32, i32* @x.37
  %790 = load i32, i32* @y.38
  %791 = sub i32 %789, 1
  %792 = mul i32 %789, %791
  %793 = urem i32 %792, 2
  %794 = icmp eq i32 %793, 0
  %795 = icmp slt i32 %790, 10
  %796 = or i1 %794, %795
  br i1 %796, label %originalBBpart2194, label %originalBB191alteredBB

originalBBpart2194:                               ; preds = %originalBB191
  br i1 %788, label %797, label %835, !dbg !2362

797:                                              ; preds = %originalBBpart2194
  %798 = load i32, i32* @x.37
  %799 = load i32, i32* @y.38
  %800 = sub i32 %798, 1
  %801 = mul i32 %798, %800
  %802 = urem i32 %801, 2
  %803 = icmp eq i32 %802, 0
  %804 = icmp slt i32 %799, 10
  %805 = or i1 %803, %804
  br i1 %805, label %originalBB196, label %originalBB196alteredBB

originalBB196:                                    ; preds = %797, %originalBB196alteredBB
  %806 = load i64, i64* %32, align 8, !dbg !2363
  %807 = icmp ult i64 1, %806, !dbg !2364
  %808 = load i32, i32* @x.37
  %809 = load i32, i32* @y.38
  %810 = sub i32 %808, 1
  %811 = mul i32 %808, %810
  %812 = urem i32 %811, 2
  %813 = icmp eq i32 %812, 0
  %814 = icmp slt i32 %809, 10
  %815 = or i1 %813, %814
  br i1 %815, label %originalBBpart2198, label %originalBB196alteredBB

originalBBpart2198:                               ; preds = %originalBB196
  br i1 %807, label %816, label %835, !dbg !2360

816:                                              ; preds = %originalBBpart2198
  %817 = load i32, i32* @x.37
  %818 = load i32, i32* @y.38
  %819 = sub i32 %817, 1
  %820 = mul i32 %817, %819
  %821 = urem i32 %820, 2
  %822 = icmp eq i32 %821, 0
  %823 = icmp slt i32 %818, 10
  %824 = or i1 %822, %823
  br i1 %824, label %originalBB200, label %originalBB200alteredBB

originalBB200:                                    ; preds = %816, %originalBB200alteredBB
  %825 = load i8*, i8** %21, align 8, !dbg !2365
  %826 = call i64 @strlen(i8* %825) #13, !dbg !2366
  store i64 %826, i64* %22, align 8, !dbg !2367
  %827 = load i32, i32* @x.37
  %828 = load i32, i32* @y.38
  %829 = sub i32 %827, 1
  %830 = mul i32 %827, %829
  %831 = urem i32 %830, 2
  %832 = icmp eq i32 %831, 0
  %833 = icmp slt i32 %828, 10
  %834 = or i1 %832, %833
  br i1 %834, label %originalBBpart2202, label %originalBB200alteredBB

originalBBpart2202:                               ; preds = %originalBB200
  br label %837, !dbg !2360

835:                                              ; preds = %originalBBpart2198, %originalBBpart2194
  %836 = load i64, i64* %22, align 8, !dbg !2368
  br label %837, !dbg !2360

837:                                              ; preds = %835, %originalBBpart2202
  %838 = phi i64 [ %826, %originalBBpart2202 ], [ %836, %835 ], !dbg !2360
  %839 = icmp ule i64 %786, %838, !dbg !2369
  br i1 %839, label %840, label %901, !dbg !2370

840:                                              ; preds = %837
  %841 = load i8*, i8** %21, align 8, !dbg !2371
  %842 = load i64, i64* %28, align 8, !dbg !2372
  %843 = getelementptr inbounds i8, i8* %841, i64 %842, !dbg !2373
  %844 = load i8*, i8** %31, align 8, !dbg !2374
  %845 = load i64, i64* %32, align 8, !dbg !2375
  %846 = call i32 @memcmp(i8* %843, i8* %844, i64 %845) #13, !dbg !2376
  %847 = icmp eq i32 %846, 0, !dbg !2377
  br i1 %847, label %848, label %901, !dbg !2378

848:                                              ; preds = %840
  %849 = load i32, i32* @x.37
  %850 = load i32, i32* @y.38
  %851 = sub i32 %849, 1
  %852 = mul i32 %849, %851
  %853 = urem i32 %852, 2
  %854 = icmp eq i32 %853, 0
  %855 = icmp slt i32 %850, 10
  %856 = or i1 %854, %855
  br i1 %856, label %originalBB204, label %originalBB204alteredBB

originalBB204:                                    ; preds = %848, %originalBB204alteredBB
  %857 = load i8, i8* %35, align 1, !dbg !2379
  %858 = trunc i8 %857 to i1, !dbg !2379
  %859 = load i32, i32* @x.37
  %860 = load i32, i32* @y.38
  %861 = sub i32 %859, 1
  %862 = mul i32 %859, %861
  %863 = urem i32 %862, 2
  %864 = icmp eq i32 %863, 0
  %865 = icmp slt i32 %860, 10
  %866 = or i1 %864, %865
  br i1 %866, label %originalBBpart2206, label %originalBB204alteredBB

originalBBpart2206:                               ; preds = %originalBB204
  br i1 %858, label %867, label %884, !dbg !2382

867:                                              ; preds = %originalBBpart2206
  %868 = load i32, i32* @x.37
  %869 = load i32, i32* @y.38
  %870 = sub i32 %868, 1
  %871 = mul i32 %868, %870
  %872 = urem i32 %871, 2
  %873 = icmp eq i32 %872, 0
  %874 = icmp slt i32 %869, 10
  %875 = or i1 %873, %874
  br i1 %875, label %originalBB208, label %originalBB208alteredBB

originalBB208:                                    ; preds = %867, %originalBB208alteredBB
  %876 = load i32, i32* @x.37
  %877 = load i32, i32* @y.38
  %878 = sub i32 %876, 1
  %879 = mul i32 %876, %878
  %880 = urem i32 %879, 2
  %881 = icmp eq i32 %880, 0
  %882 = icmp slt i32 %877, 10
  %883 = or i1 %881, %882
  br i1 %883, label %originalBBpart2210, label %originalBB208alteredBB

originalBBpart2210:                               ; preds = %originalBB208
  br label %5982, !dbg !2383

884:                                              ; preds = %originalBBpart2206
  %885 = load i32, i32* @x.37
  %886 = load i32, i32* @y.38
  %887 = sub i32 %885, 1
  %888 = mul i32 %885, %887
  %889 = urem i32 %888, 2
  %890 = icmp eq i32 %889, 0
  %891 = icmp slt i32 %886, 10
  %892 = or i1 %890, %891
  br i1 %892, label %originalBB212, label %originalBB212alteredBB

originalBB212:                                    ; preds = %884, %originalBB212alteredBB
  store i8 1, i8* %41, align 1, !dbg !2384
  %893 = load i32, i32* @x.37
  %894 = load i32, i32* @y.38
  %895 = sub i32 %893, 1
  %896 = mul i32 %893, %895
  %897 = urem i32 %896, 2
  %898 = icmp eq i32 %897, 0
  %899 = icmp slt i32 %894, 10
  %900 = or i1 %898, %899
  br i1 %900, label %originalBBpart2214, label %originalBB212alteredBB

originalBBpart2214:                               ; preds = %originalBB212
  br label %901, !dbg !2385

901:                                              ; preds = %originalBBpart2214, %840, %837, %originalBBpart2189, %originalBBpart2185, %originalBBpart2181
  %902 = load i8*, i8** %21, align 8, !dbg !2386
  %903 = load i64, i64* %28, align 8, !dbg !2387
  %904 = getelementptr inbounds i8, i8* %902, i64 %903, !dbg !2386
  %905 = load i8, i8* %904, align 1, !dbg !2386
  store i8 %905, i8* %39, align 1, !dbg !2388
  %906 = load i8, i8* %39, align 1, !dbg !2389
  %907 = zext i8 %906 to i32, !dbg !2389
  switch i32 %907, label %2960 [
    i32 0, label %908
    i32 63, label %1605
    i32 7, label %2117
    i32 8, label %2134
    i32 12, label %2151
    i32 10, label %2168
    i32 13, label %2185
    i32 9, label %2186
    i32 11, label %2203
    i32 92, label %2220
    i32 123, label %2478
    i32 125, label %2478
    i32 35, label %2540
    i32 126, label %2540
    i32 32, label %2593
    i32 33, label %2610
    i32 34, label %2610
    i32 36, label %2610
    i32 38, label %2610
    i32 40, label %2610
    i32 41, label %2610
    i32 42, label %2610
    i32 59, label %2610
    i32 60, label %2610
    i32 61, label %2610
    i32 62, label %2610
    i32 91, label %2610
    i32 94, label %2610
    i32 96, label %2610
    i32 124, label %2610
    i32 39, label %2682
    i32 37, label %2943
    i32 43, label %2943
    i32 44, label %2943
    i32 45, label %2943
    i32 46, label %2943
    i32 47, label %2943
    i32 48, label %2943
    i32 49, label %2943
    i32 50, label %2943
    i32 51, label %2943
    i32 52, label %2943
    i32 53, label %2943
    i32 54, label %2943
    i32 55, label %2943
    i32 56, label %2943
    i32 57, label %2943
    i32 58, label %2943
    i32 65, label %2943
    i32 66, label %2943
    i32 67, label %2943
    i32 68, label %2943
    i32 69, label %2943
    i32 70, label %2943
    i32 71, label %2943
    i32 72, label %2943
    i32 73, label %2943
    i32 74, label %2943
    i32 75, label %2943
    i32 76, label %2943
    i32 77, label %2943
    i32 78, label %2943
    i32 79, label %2943
    i32 80, label %2943
    i32 81, label %2943
    i32 82, label %2943
    i32 83, label %2943
    i32 84, label %2943
    i32 85, label %2943
    i32 86, label %2943
    i32 87, label %2943
    i32 88, label %2943
    i32 89, label %2943
    i32 90, label %2943
    i32 93, label %2943
    i32 95, label %2943
    i32 97, label %2943
    i32 98, label %2943
    i32 99, label %2943
    i32 100, label %2943
    i32 101, label %2943
    i32 102, label %2943
    i32 103, label %2943
    i32 104, label %2943
    i32 105, label %2943
    i32 106, label %2943
    i32 107, label %2943
    i32 108, label %2943
    i32 109, label %2943
    i32 110, label %2943
    i32 111, label %2943
    i32 112, label %2943
    i32 113, label %2943
    i32 114, label %2943
    i32 115, label %2943
    i32 116, label %2943
    i32 117, label %2943
    i32 118, label %2943
    i32 119, label %2943
    i32 120, label %2943
    i32 121, label %2943
    i32 122, label %2943
  ], !dbg !2390

908:                                              ; preds = %901
  %909 = load i32, i32* @x.37
  %910 = load i32, i32* @y.38
  %911 = sub i32 %909, 1
  %912 = mul i32 %909, %911
  %913 = urem i32 %912, 2
  %914 = icmp eq i32 %913, 0
  %915 = icmp slt i32 %910, 10
  %916 = or i1 %914, %915
  br i1 %916, label %originalBB216, label %originalBB216alteredBB

originalBB216:                                    ; preds = %908, %originalBB216alteredBB
  %917 = load i8, i8* %33, align 1, !dbg !2391
  %918 = trunc i8 %917 to i1, !dbg !2391
  %919 = load i32, i32* @x.37
  %920 = load i32, i32* @y.38
  %921 = sub i32 %919, 1
  %922 = mul i32 %919, %921
  %923 = urem i32 %922, 2
  %924 = icmp eq i32 %923, 0
  %925 = icmp slt i32 %920, 10
  %926 = or i1 %924, %925
  br i1 %926, label %originalBBpart2218, label %originalBB216alteredBB

originalBBpart2218:                               ; preds = %originalBB216
  br i1 %918, label %927, label %1550, !dbg !2394

927:                                              ; preds = %originalBBpart2218
  br label %928, !dbg !2395

928:                                              ; preds = %927
  %929 = load i32, i32* @x.37
  %930 = load i32, i32* @y.38
  %931 = sub i32 %929, 1
  %932 = mul i32 %929, %931
  %933 = urem i32 %932, 2
  %934 = icmp eq i32 %933, 0
  %935 = icmp slt i32 %930, 10
  %936 = or i1 %934, %935
  br i1 %936, label %originalBB220, label %originalBB220alteredBB

originalBB220:                                    ; preds = %928, %originalBB220alteredBB
  %937 = load i8, i8* %35, align 1, !dbg !2397
  %938 = trunc i8 %937 to i1, !dbg !2397
  %939 = load i32, i32* @x.37
  %940 = load i32, i32* @y.38
  %941 = sub i32 %939, 1
  %942 = mul i32 %939, %941
  %943 = urem i32 %942, 2
  %944 = icmp eq i32 %943, 0
  %945 = icmp slt i32 %940, 10
  %946 = or i1 %944, %945
  br i1 %946, label %originalBBpart2222, label %originalBB220alteredBB

originalBBpart2222:                               ; preds = %originalBB220
  br i1 %938, label %947, label %964, !dbg !2400

947:                                              ; preds = %originalBBpart2222
  %948 = load i32, i32* @x.37
  %949 = load i32, i32* @y.38
  %950 = sub i32 %948, 1
  %951 = mul i32 %948, %950
  %952 = urem i32 %951, 2
  %953 = icmp eq i32 %952, 0
  %954 = icmp slt i32 %949, 10
  %955 = or i1 %953, %954
  br i1 %955, label %originalBB224, label %originalBB224alteredBB

originalBB224:                                    ; preds = %947, %originalBB224alteredBB
  %956 = load i32, i32* @x.37
  %957 = load i32, i32* @y.38
  %958 = sub i32 %956, 1
  %959 = mul i32 %956, %958
  %960 = urem i32 %959, 2
  %961 = icmp eq i32 %960, 0
  %962 = icmp slt i32 %957, 10
  %963 = or i1 %961, %962
  br i1 %963, label %originalBBpart2226, label %originalBB224alteredBB

originalBBpart2226:                               ; preds = %originalBB224
  br label %5982, !dbg !2397

964:                                              ; preds = %originalBBpart2222
  %965 = load i32, i32* @x.37
  %966 = load i32, i32* @y.38
  %967 = sub i32 %965, 1
  %968 = mul i32 %965, %967
  %969 = urem i32 %968, 2
  %970 = icmp eq i32 %969, 0
  %971 = icmp slt i32 %966, 10
  %972 = or i1 %970, %971
  br i1 %972, label %originalBB228, label %originalBB228alteredBB

originalBB228:                                    ; preds = %964, %originalBB228alteredBB
  store i8 1, i8* %42, align 1, !dbg !2400
  %973 = load i32, i32* %23, align 4, !dbg !2401
  %974 = icmp eq i32 %973, 2, !dbg !2401
  %975 = load i32, i32* @x.37
  %976 = load i32, i32* @y.38
  %977 = sub i32 %975, 1
  %978 = mul i32 %975, %977
  %979 = urem i32 %978, 2
  %980 = icmp eq i32 %979, 0
  %981 = icmp slt i32 %976, 10
  %982 = or i1 %980, %981
  br i1 %982, label %originalBBpart2230, label %originalBB228alteredBB

originalBBpart2230:                               ; preds = %originalBB228
  br i1 %974, label %983, label %1231, !dbg !2401

983:                                              ; preds = %originalBBpart2230
  %984 = load i32, i32* @x.37
  %985 = load i32, i32* @y.38
  %986 = sub i32 %984, 1
  %987 = mul i32 %984, %986
  %988 = urem i32 %987, 2
  %989 = icmp eq i32 %988, 0
  %990 = icmp slt i32 %985, 10
  %991 = or i1 %989, %990
  br i1 %991, label %originalBB232, label %originalBB232alteredBB

originalBB232:                                    ; preds = %983, %originalBB232alteredBB
  %992 = load i8, i8* %36, align 1, !dbg !2401
  %993 = trunc i8 %992 to i1, !dbg !2401
  %994 = load i32, i32* @x.37
  %995 = load i32, i32* @y.38
  %996 = sub i32 %994, 1
  %997 = mul i32 %994, %996
  %998 = urem i32 %997, 2
  %999 = icmp eq i32 %998, 0
  %1000 = icmp slt i32 %995, 10
  %1001 = or i1 %999, %1000
  br i1 %1001, label %originalBBpart2234, label %originalBB232alteredBB

originalBBpart2234:                               ; preds = %originalBB232
  br i1 %993, label %1231, label %1002, !dbg !2400

1002:                                             ; preds = %originalBBpart2234
  %1003 = load i32, i32* @x.37
  %1004 = load i32, i32* @y.38
  %1005 = sub i32 %1003, 1
  %1006 = mul i32 %1003, %1005
  %1007 = urem i32 %1006, 2
  %1008 = icmp eq i32 %1007, 0
  %1009 = icmp slt i32 %1004, 10
  %1010 = or i1 %1008, %1009
  br i1 %1010, label %originalBB236, label %originalBB236alteredBB

originalBB236:                                    ; preds = %1002, %originalBB236alteredBB
  %1011 = load i32, i32* @x.37
  %1012 = load i32, i32* @y.38
  %1013 = sub i32 %1011, 1
  %1014 = mul i32 %1011, %1013
  %1015 = urem i32 %1014, 2
  %1016 = icmp eq i32 %1015, 0
  %1017 = icmp slt i32 %1012, 10
  %1018 = or i1 %1016, %1017
  br i1 %1018, label %originalBBpart2238, label %originalBB236alteredBB

originalBBpart2238:                               ; preds = %originalBB236
  br label %1019, !dbg !2403

1019:                                             ; preds = %originalBBpart2238
  %1020 = load i32, i32* @x.37
  %1021 = load i32, i32* @y.38
  %1022 = sub i32 %1020, 1
  %1023 = mul i32 %1020, %1022
  %1024 = urem i32 %1023, 2
  %1025 = icmp eq i32 %1024, 0
  %1026 = icmp slt i32 %1021, 10
  %1027 = or i1 %1025, %1026
  br i1 %1027, label %originalBB240, label %originalBB240alteredBB

originalBB240:                                    ; preds = %1019, %originalBB240alteredBB
  %1028 = load i64, i64* %29, align 8, !dbg !2405
  %1029 = load i64, i64* %20, align 8, !dbg !2405
  %1030 = icmp ult i64 %1028, %1029, !dbg !2405
  %1031 = load i32, i32* @x.37
  %1032 = load i32, i32* @y.38
  %1033 = sub i32 %1031, 1
  %1034 = mul i32 %1031, %1033
  %1035 = urem i32 %1034, 2
  %1036 = icmp eq i32 %1035, 0
  %1037 = icmp slt i32 %1032, 10
  %1038 = or i1 %1036, %1037
  br i1 %1038, label %originalBBpart2242, label %originalBB240alteredBB

originalBBpart2242:                               ; preds = %originalBB240
  br i1 %1030, label %1039, label %1043, !dbg !2408

1039:                                             ; preds = %originalBBpart2242
  %1040 = load i8*, i8** %19, align 8, !dbg !2405
  %1041 = load i64, i64* %29, align 8, !dbg !2405
  %1042 = getelementptr inbounds i8, i8* %1040, i64 %1041, !dbg !2405
  store i8 39, i8* %1042, align 1, !dbg !2405
  br label %1043, !dbg !2405

1043:                                             ; preds = %1039, %originalBBpart2242
  %1044 = load i32, i32* @x.37
  %1045 = load i32, i32* @y.38
  %1046 = sub i32 %1044, 1
  %1047 = mul i32 %1044, %1046
  %1048 = urem i32 %1047, 2
  %1049 = icmp eq i32 %1048, 0
  %1050 = icmp slt i32 %1045, 10
  %1051 = or i1 %1049, %1050
  br i1 %1051, label %originalBB244, label %originalBB244alteredBB

originalBB244:                                    ; preds = %1043, %originalBB244alteredBB
  %1052 = load i64, i64* %29, align 8, !dbg !2408
  %1053 = add i64 %1052, 1, !dbg !2408
  store i64 %1053, i64* %29, align 8, !dbg !2408
  %1054 = load i32, i32* @x.37
  %1055 = load i32, i32* @y.38
  %1056 = sub i32 %1054, 1
  %1057 = mul i32 %1054, %1056
  %1058 = urem i32 %1057, 2
  %1059 = icmp eq i32 %1058, 0
  %1060 = icmp slt i32 %1055, 10
  %1061 = or i1 %1059, %1060
  br i1 %1061, label %originalBBpart2248, label %originalBB244alteredBB

originalBBpart2248:                               ; preds = %originalBB244
  br label %1062, !dbg !2408

1062:                                             ; preds = %originalBBpart2248
  %1063 = load i32, i32* @x.37
  %1064 = load i32, i32* @y.38
  %1065 = sub i32 %1063, 1
  %1066 = mul i32 %1063, %1065
  %1067 = urem i32 %1066, 2
  %1068 = icmp eq i32 %1067, 0
  %1069 = icmp slt i32 %1064, 10
  %1070 = or i1 %1068, %1069
  br i1 %1070, label %originalBB250, label %originalBB250alteredBB

originalBB250:                                    ; preds = %1062, %originalBB250alteredBB
  %1071 = load i32, i32* @x.37
  %1072 = load i32, i32* @y.38
  %1073 = sub i32 %1071, 1
  %1074 = mul i32 %1071, %1073
  %1075 = urem i32 %1074, 2
  %1076 = icmp eq i32 %1075, 0
  %1077 = icmp slt i32 %1072, 10
  %1078 = or i1 %1076, %1077
  br i1 %1078, label %originalBBpart2252, label %originalBB250alteredBB

originalBBpart2252:                               ; preds = %originalBB250
  br label %1079, !dbg !2403

1079:                                             ; preds = %originalBBpart2252
  %1080 = load i32, i32* @x.37
  %1081 = load i32, i32* @y.38
  %1082 = sub i32 %1080, 1
  %1083 = mul i32 %1080, %1082
  %1084 = urem i32 %1083, 2
  %1085 = icmp eq i32 %1084, 0
  %1086 = icmp slt i32 %1081, 10
  %1087 = or i1 %1085, %1086
  br i1 %1087, label %originalBB254, label %originalBB254alteredBB

originalBB254:                                    ; preds = %1079, %originalBB254alteredBB
  %1088 = load i64, i64* %29, align 8, !dbg !2409
  %1089 = load i64, i64* %20, align 8, !dbg !2409
  %1090 = icmp ult i64 %1088, %1089, !dbg !2409
  %1091 = load i32, i32* @x.37
  %1092 = load i32, i32* @y.38
  %1093 = sub i32 %1091, 1
  %1094 = mul i32 %1091, %1093
  %1095 = urem i32 %1094, 2
  %1096 = icmp eq i32 %1095, 0
  %1097 = icmp slt i32 %1092, 10
  %1098 = or i1 %1096, %1097
  br i1 %1098, label %originalBBpart2256, label %originalBB254alteredBB

originalBBpart2256:                               ; preds = %originalBB254
  br i1 %1090, label %1099, label %1119, !dbg !2412

1099:                                             ; preds = %originalBBpart2256
  %1100 = load i32, i32* @x.37
  %1101 = load i32, i32* @y.38
  %1102 = sub i32 %1100, 1
  %1103 = mul i32 %1100, %1102
  %1104 = urem i32 %1103, 2
  %1105 = icmp eq i32 %1104, 0
  %1106 = icmp slt i32 %1101, 10
  %1107 = or i1 %1105, %1106
  br i1 %1107, label %originalBB258, label %originalBB258alteredBB

originalBB258:                                    ; preds = %1099, %originalBB258alteredBB
  %1108 = load i8*, i8** %19, align 8, !dbg !2409
  %1109 = load i64, i64* %29, align 8, !dbg !2409
  %1110 = getelementptr inbounds i8, i8* %1108, i64 %1109, !dbg !2409
  store i8 36, i8* %1110, align 1, !dbg !2409
  %1111 = load i32, i32* @x.37
  %1112 = load i32, i32* @y.38
  %1113 = sub i32 %1111, 1
  %1114 = mul i32 %1111, %1113
  %1115 = urem i32 %1114, 2
  %1116 = icmp eq i32 %1115, 0
  %1117 = icmp slt i32 %1112, 10
  %1118 = or i1 %1116, %1117
  br i1 %1118, label %originalBBpart2260, label %originalBB258alteredBB

originalBBpart2260:                               ; preds = %originalBB258
  br label %1119, !dbg !2409

1119:                                             ; preds = %originalBBpart2260, %originalBBpart2256
  %1120 = load i32, i32* @x.37
  %1121 = load i32, i32* @y.38
  %1122 = sub i32 %1120, 1
  %1123 = mul i32 %1120, %1122
  %1124 = urem i32 %1123, 2
  %1125 = icmp eq i32 %1124, 0
  %1126 = icmp slt i32 %1121, 10
  %1127 = or i1 %1125, %1126
  br i1 %1127, label %originalBB262, label %originalBB262alteredBB

originalBB262:                                    ; preds = %1119, %originalBB262alteredBB
  %1128 = load i64, i64* %29, align 8, !dbg !2412
  %1129 = add i64 %1128, 1, !dbg !2412
  store i64 %1129, i64* %29, align 8, !dbg !2412
  %1130 = load i32, i32* @x.37
  %1131 = load i32, i32* @y.38
  %1132 = sub i32 %1130, 1
  %1133 = mul i32 %1130, %1132
  %1134 = urem i32 %1133, 2
  %1135 = icmp eq i32 %1134, 0
  %1136 = icmp slt i32 %1131, 10
  %1137 = or i1 %1135, %1136
  br i1 %1137, label %originalBBpart2271, label %originalBB262alteredBB

originalBBpart2271:                               ; preds = %originalBB262
  br label %1138, !dbg !2412

1138:                                             ; preds = %originalBBpart2271
  %1139 = load i32, i32* @x.37
  %1140 = load i32, i32* @y.38
  %1141 = sub i32 %1139, 1
  %1142 = mul i32 %1139, %1141
  %1143 = urem i32 %1142, 2
  %1144 = icmp eq i32 %1143, 0
  %1145 = icmp slt i32 %1140, 10
  %1146 = or i1 %1144, %1145
  br i1 %1146, label %originalBB273, label %originalBB273alteredBB

originalBB273:                                    ; preds = %1138, %originalBB273alteredBB
  %1147 = load i32, i32* @x.37
  %1148 = load i32, i32* @y.38
  %1149 = sub i32 %1147, 1
  %1150 = mul i32 %1147, %1149
  %1151 = urem i32 %1150, 2
  %1152 = icmp eq i32 %1151, 0
  %1153 = icmp slt i32 %1148, 10
  %1154 = or i1 %1152, %1153
  br i1 %1154, label %originalBBpart2275, label %originalBB273alteredBB

originalBBpart2275:                               ; preds = %originalBB273
  br label %1155, !dbg !2403

1155:                                             ; preds = %originalBBpart2275
  %1156 = load i32, i32* @x.37
  %1157 = load i32, i32* @y.38
  %1158 = sub i32 %1156, 1
  %1159 = mul i32 %1156, %1158
  %1160 = urem i32 %1159, 2
  %1161 = icmp eq i32 %1160, 0
  %1162 = icmp slt i32 %1157, 10
  %1163 = or i1 %1161, %1162
  br i1 %1163, label %originalBB277, label %originalBB277alteredBB

originalBB277:                                    ; preds = %1155, %originalBB277alteredBB
  %1164 = load i64, i64* %29, align 8, !dbg !2413
  %1165 = load i64, i64* %20, align 8, !dbg !2413
  %1166 = icmp ult i64 %1164, %1165, !dbg !2413
  %1167 = load i32, i32* @x.37
  %1168 = load i32, i32* @y.38
  %1169 = sub i32 %1167, 1
  %1170 = mul i32 %1167, %1169
  %1171 = urem i32 %1170, 2
  %1172 = icmp eq i32 %1171, 0
  %1173 = icmp slt i32 %1168, 10
  %1174 = or i1 %1172, %1173
  br i1 %1174, label %originalBBpart2279, label %originalBB277alteredBB

originalBBpart2279:                               ; preds = %originalBB277
  br i1 %1166, label %1175, label %1195, !dbg !2416

1175:                                             ; preds = %originalBBpart2279
  %1176 = load i32, i32* @x.37
  %1177 = load i32, i32* @y.38
  %1178 = sub i32 %1176, 1
  %1179 = mul i32 %1176, %1178
  %1180 = urem i32 %1179, 2
  %1181 = icmp eq i32 %1180, 0
  %1182 = icmp slt i32 %1177, 10
  %1183 = or i1 %1181, %1182
  br i1 %1183, label %originalBB281, label %originalBB281alteredBB

originalBB281:                                    ; preds = %1175, %originalBB281alteredBB
  %1184 = load i8*, i8** %19, align 8, !dbg !2413
  %1185 = load i64, i64* %29, align 8, !dbg !2413
  %1186 = getelementptr inbounds i8, i8* %1184, i64 %1185, !dbg !2413
  store i8 39, i8* %1186, align 1, !dbg !2413
  %1187 = load i32, i32* @x.37
  %1188 = load i32, i32* @y.38
  %1189 = sub i32 %1187, 1
  %1190 = mul i32 %1187, %1189
  %1191 = urem i32 %1190, 2
  %1192 = icmp eq i32 %1191, 0
  %1193 = icmp slt i32 %1188, 10
  %1194 = or i1 %1192, %1193
  br i1 %1194, label %originalBBpart2283, label %originalBB281alteredBB

originalBBpart2283:                               ; preds = %originalBB281
  br label %1195, !dbg !2413

1195:                                             ; preds = %originalBBpart2283, %originalBBpart2279
  %1196 = load i32, i32* @x.37
  %1197 = load i32, i32* @y.38
  %1198 = sub i32 %1196, 1
  %1199 = mul i32 %1196, %1198
  %1200 = urem i32 %1199, 2
  %1201 = icmp eq i32 %1200, 0
  %1202 = icmp slt i32 %1197, 10
  %1203 = or i1 %1201, %1202
  br i1 %1203, label %originalBB285, label %originalBB285alteredBB

originalBB285:                                    ; preds = %1195, %originalBB285alteredBB
  %1204 = load i64, i64* %29, align 8, !dbg !2416
  %1205 = add i64 %1204, 1, !dbg !2416
  store i64 %1205, i64* %29, align 8, !dbg !2416
  %1206 = load i32, i32* @x.37
  %1207 = load i32, i32* @y.38
  %1208 = sub i32 %1206, 1
  %1209 = mul i32 %1206, %1208
  %1210 = urem i32 %1209, 2
  %1211 = icmp eq i32 %1210, 0
  %1212 = icmp slt i32 %1207, 10
  %1213 = or i1 %1211, %1212
  br i1 %1213, label %originalBBpart2288, label %originalBB285alteredBB

originalBBpart2288:                               ; preds = %originalBB285
  br label %1214, !dbg !2416

1214:                                             ; preds = %originalBBpart2288
  %1215 = load i32, i32* @x.37
  %1216 = load i32, i32* @y.38
  %1217 = sub i32 %1215, 1
  %1218 = mul i32 %1215, %1217
  %1219 = urem i32 %1218, 2
  %1220 = icmp eq i32 %1219, 0
  %1221 = icmp slt i32 %1216, 10
  %1222 = or i1 %1220, %1221
  br i1 %1222, label %originalBB290, label %originalBB290alteredBB

originalBB290:                                    ; preds = %1214, %originalBB290alteredBB
  store i8 1, i8* %36, align 1, !dbg !2403
  %1223 = load i32, i32* @x.37
  %1224 = load i32, i32* @y.38
  %1225 = sub i32 %1223, 1
  %1226 = mul i32 %1223, %1225
  %1227 = urem i32 %1226, 2
  %1228 = icmp eq i32 %1227, 0
  %1229 = icmp slt i32 %1224, 10
  %1230 = or i1 %1228, %1229
  br i1 %1230, label %originalBBpart2292, label %originalBB290alteredBB

originalBBpart2292:                               ; preds = %originalBB290
  br label %1231, !dbg !2403

1231:                                             ; preds = %originalBBpart2292, %originalBBpart2234, %originalBBpart2230
  %1232 = load i32, i32* @x.37
  %1233 = load i32, i32* @y.38
  %1234 = sub i32 %1232, 1
  %1235 = mul i32 %1232, %1234
  %1236 = urem i32 %1235, 2
  %1237 = icmp eq i32 %1236, 0
  %1238 = icmp slt i32 %1233, 10
  %1239 = or i1 %1237, %1238
  br i1 %1239, label %originalBB294, label %originalBB294alteredBB

originalBB294:                                    ; preds = %1231, %originalBB294alteredBB
  %1240 = load i32, i32* @x.37
  %1241 = load i32, i32* @y.38
  %1242 = sub i32 %1240, 1
  %1243 = mul i32 %1240, %1242
  %1244 = urem i32 %1243, 2
  %1245 = icmp eq i32 %1244, 0
  %1246 = icmp slt i32 %1241, 10
  %1247 = or i1 %1245, %1246
  br i1 %1247, label %originalBBpart2296, label %originalBB294alteredBB

originalBBpart2296:                               ; preds = %originalBB294
  br label %1248, !dbg !2400

1248:                                             ; preds = %originalBBpart2296
  %1249 = load i32, i32* @x.37
  %1250 = load i32, i32* @y.38
  %1251 = sub i32 %1249, 1
  %1252 = mul i32 %1249, %1251
  %1253 = urem i32 %1252, 2
  %1254 = icmp eq i32 %1253, 0
  %1255 = icmp slt i32 %1250, 10
  %1256 = or i1 %1254, %1255
  br i1 %1256, label %originalBB298, label %originalBB298alteredBB

originalBB298:                                    ; preds = %1248, %originalBB298alteredBB
  %1257 = load i64, i64* %29, align 8, !dbg !2417
  %1258 = load i64, i64* %20, align 8, !dbg !2417
  %1259 = icmp ult i64 %1257, %1258, !dbg !2417
  %1260 = load i32, i32* @x.37
  %1261 = load i32, i32* @y.38
  %1262 = sub i32 %1260, 1
  %1263 = mul i32 %1260, %1262
  %1264 = urem i32 %1263, 2
  %1265 = icmp eq i32 %1264, 0
  %1266 = icmp slt i32 %1261, 10
  %1267 = or i1 %1265, %1266
  br i1 %1267, label %originalBBpart2300, label %originalBB298alteredBB

originalBBpart2300:                               ; preds = %originalBB298
  br i1 %1259, label %1268, label %1288, !dbg !2420

1268:                                             ; preds = %originalBBpart2300
  %1269 = load i32, i32* @x.37
  %1270 = load i32, i32* @y.38
  %1271 = sub i32 %1269, 1
  %1272 = mul i32 %1269, %1271
  %1273 = urem i32 %1272, 2
  %1274 = icmp eq i32 %1273, 0
  %1275 = icmp slt i32 %1270, 10
  %1276 = or i1 %1274, %1275
  br i1 %1276, label %originalBB302, label %originalBB302alteredBB

originalBB302:                                    ; preds = %1268, %originalBB302alteredBB
  %1277 = load i8*, i8** %19, align 8, !dbg !2417
  %1278 = load i64, i64* %29, align 8, !dbg !2417
  %1279 = getelementptr inbounds i8, i8* %1277, i64 %1278, !dbg !2417
  store i8 92, i8* %1279, align 1, !dbg !2417
  %1280 = load i32, i32* @x.37
  %1281 = load i32, i32* @y.38
  %1282 = sub i32 %1280, 1
  %1283 = mul i32 %1280, %1282
  %1284 = urem i32 %1283, 2
  %1285 = icmp eq i32 %1284, 0
  %1286 = icmp slt i32 %1281, 10
  %1287 = or i1 %1285, %1286
  br i1 %1287, label %originalBBpart2304, label %originalBB302alteredBB

originalBBpart2304:                               ; preds = %originalBB302
  br label %1288, !dbg !2417

1288:                                             ; preds = %originalBBpart2304, %originalBBpart2300
  %1289 = load i32, i32* @x.37
  %1290 = load i32, i32* @y.38
  %1291 = sub i32 %1289, 1
  %1292 = mul i32 %1289, %1291
  %1293 = urem i32 %1292, 2
  %1294 = icmp eq i32 %1293, 0
  %1295 = icmp slt i32 %1290, 10
  %1296 = or i1 %1294, %1295
  br i1 %1296, label %originalBB306, label %originalBB306alteredBB

originalBB306:                                    ; preds = %1288, %originalBB306alteredBB
  %1297 = load i64, i64* %29, align 8, !dbg !2420
  %1298 = add i64 %1297, 1, !dbg !2420
  store i64 %1298, i64* %29, align 8, !dbg !2420
  %1299 = load i32, i32* @x.37
  %1300 = load i32, i32* @y.38
  %1301 = sub i32 %1299, 1
  %1302 = mul i32 %1299, %1301
  %1303 = urem i32 %1302, 2
  %1304 = icmp eq i32 %1303, 0
  %1305 = icmp slt i32 %1300, 10
  %1306 = or i1 %1304, %1305
  br i1 %1306, label %originalBBpart2315, label %originalBB306alteredBB

originalBBpart2315:                               ; preds = %originalBB306
  br label %1307, !dbg !2420

1307:                                             ; preds = %originalBBpart2315
  %1308 = load i32, i32* @x.37
  %1309 = load i32, i32* @y.38
  %1310 = sub i32 %1308, 1
  %1311 = mul i32 %1308, %1310
  %1312 = urem i32 %1311, 2
  %1313 = icmp eq i32 %1312, 0
  %1314 = icmp slt i32 %1309, 10
  %1315 = or i1 %1313, %1314
  br i1 %1315, label %originalBB317, label %originalBB317alteredBB

originalBB317:                                    ; preds = %1307, %originalBB317alteredBB
  %1316 = load i32, i32* @x.37
  %1317 = load i32, i32* @y.38
  %1318 = sub i32 %1316, 1
  %1319 = mul i32 %1316, %1318
  %1320 = urem i32 %1319, 2
  %1321 = icmp eq i32 %1320, 0
  %1322 = icmp slt i32 %1317, 10
  %1323 = or i1 %1321, %1322
  br i1 %1323, label %originalBBpart2319, label %originalBB317alteredBB

originalBBpart2319:                               ; preds = %originalBB317
  br label %1324, !dbg !2400

1324:                                             ; preds = %originalBBpart2319
  %1325 = load i32, i32* @x.37
  %1326 = load i32, i32* @y.38
  %1327 = sub i32 %1325, 1
  %1328 = mul i32 %1325, %1327
  %1329 = urem i32 %1328, 2
  %1330 = icmp eq i32 %1329, 0
  %1331 = icmp slt i32 %1326, 10
  %1332 = or i1 %1330, %1331
  br i1 %1332, label %originalBB321, label %originalBB321alteredBB

originalBB321:                                    ; preds = %1324, %originalBB321alteredBB
  %1333 = load i32, i32* %23, align 4, !dbg !2421
  %1334 = icmp ne i32 %1333, 2, !dbg !2423
  %1335 = load i32, i32* @x.37
  %1336 = load i32, i32* @y.38
  %1337 = sub i32 %1335, 1
  %1338 = mul i32 %1335, %1337
  %1339 = urem i32 %1338, 2
  %1340 = icmp eq i32 %1339, 0
  %1341 = icmp slt i32 %1336, 10
  %1342 = or i1 %1340, %1341
  br i1 %1342, label %originalBBpart2323, label %originalBB321alteredBB

originalBBpart2323:                               ; preds = %originalBB321
  br i1 %1334, label %1343, label %1533, !dbg !2424

1343:                                             ; preds = %originalBBpart2323
  %1344 = load i32, i32* @x.37
  %1345 = load i32, i32* @y.38
  %1346 = sub i32 %1344, 1
  %1347 = mul i32 %1344, %1346
  %1348 = urem i32 %1347, 2
  %1349 = icmp eq i32 %1348, 0
  %1350 = icmp slt i32 %1345, 10
  %1351 = or i1 %1349, %1350
  br i1 %1351, label %originalBB325, label %originalBB325alteredBB

originalBB325:                                    ; preds = %1343, %originalBB325alteredBB
  %1352 = load i64, i64* %28, align 8, !dbg !2425
  %1353 = add i64 %1352, 1, !dbg !2426
  %1354 = load i64, i64* %22, align 8, !dbg !2427
  %1355 = icmp ult i64 %1353, %1354, !dbg !2428
  %1356 = load i32, i32* @x.37
  %1357 = load i32, i32* @y.38
  %1358 = sub i32 %1356, 1
  %1359 = mul i32 %1356, %1358
  %1360 = urem i32 %1359, 2
  %1361 = icmp eq i32 %1360, 0
  %1362 = icmp slt i32 %1357, 10
  %1363 = or i1 %1361, %1362
  br i1 %1363, label %originalBBpart2334, label %originalBB325alteredBB

originalBBpart2334:                               ; preds = %originalBB325
  br i1 %1355, label %1364, label %1533, !dbg !2429

1364:                                             ; preds = %originalBBpart2334
  %1365 = load i8*, i8** %21, align 8, !dbg !2430
  %1366 = load i64, i64* %28, align 8, !dbg !2431
  %1367 = add i64 %1366, 1, !dbg !2432
  %1368 = getelementptr inbounds i8, i8* %1365, i64 %1367, !dbg !2430
  %1369 = load i8, i8* %1368, align 1, !dbg !2430
  %1370 = sext i8 %1369 to i32, !dbg !2430
  %1371 = icmp sle i32 48, %1370, !dbg !2433
  br i1 %1371, label %1372, label %1533, !dbg !2434

1372:                                             ; preds = %1364
  %1373 = load i32, i32* @x.37
  %1374 = load i32, i32* @y.38
  %1375 = sub i32 %1373, 1
  %1376 = mul i32 %1373, %1375
  %1377 = urem i32 %1376, 2
  %1378 = icmp eq i32 %1377, 0
  %1379 = icmp slt i32 %1374, 10
  %1380 = or i1 %1378, %1379
  br i1 %1380, label %originalBB336, label %originalBB336alteredBB

originalBB336:                                    ; preds = %1372, %originalBB336alteredBB
  %1381 = load i8*, i8** %21, align 8, !dbg !2435
  %1382 = load i64, i64* %28, align 8, !dbg !2436
  %1383 = add i64 %1382, 1, !dbg !2437
  %1384 = getelementptr inbounds i8, i8* %1381, i64 %1383, !dbg !2435
  %1385 = load i8, i8* %1384, align 1, !dbg !2435
  %1386 = sext i8 %1385 to i32, !dbg !2435
  %1387 = icmp sle i32 %1386, 57, !dbg !2438
  %1388 = load i32, i32* @x.37
  %1389 = load i32, i32* @y.38
  %1390 = sub i32 %1388, 1
  %1391 = mul i32 %1388, %1390
  %1392 = urem i32 %1391, 2
  %1393 = icmp eq i32 %1392, 0
  %1394 = icmp slt i32 %1389, 10
  %1395 = or i1 %1393, %1394
  br i1 %1395, label %originalBBpart2343, label %originalBB336alteredBB

originalBBpart2343:                               ; preds = %originalBB336
  br i1 %1387, label %1396, label %1533, !dbg !2439

1396:                                             ; preds = %originalBBpart2343
  %1397 = load i32, i32* @x.37
  %1398 = load i32, i32* @y.38
  %1399 = sub i32 %1397, 1
  %1400 = mul i32 %1397, %1399
  %1401 = urem i32 %1400, 2
  %1402 = icmp eq i32 %1401, 0
  %1403 = icmp slt i32 %1398, 10
  %1404 = or i1 %1402, %1403
  br i1 %1404, label %originalBB345, label %originalBB345alteredBB

originalBB345:                                    ; preds = %1396, %originalBB345alteredBB
  %1405 = load i32, i32* @x.37
  %1406 = load i32, i32* @y.38
  %1407 = sub i32 %1405, 1
  %1408 = mul i32 %1405, %1407
  %1409 = urem i32 %1408, 2
  %1410 = icmp eq i32 %1409, 0
  %1411 = icmp slt i32 %1406, 10
  %1412 = or i1 %1410, %1411
  br i1 %1412, label %originalBBpart2347, label %originalBB345alteredBB

originalBBpart2347:                               ; preds = %originalBB345
  br label %1413, !dbg !2440

1413:                                             ; preds = %originalBBpart2347
  %1414 = load i32, i32* @x.37
  %1415 = load i32, i32* @y.38
  %1416 = sub i32 %1414, 1
  %1417 = mul i32 %1414, %1416
  %1418 = urem i32 %1417, 2
  %1419 = icmp eq i32 %1418, 0
  %1420 = icmp slt i32 %1415, 10
  %1421 = or i1 %1419, %1420
  br i1 %1421, label %originalBB349, label %originalBB349alteredBB

originalBB349:                                    ; preds = %1413, %originalBB349alteredBB
  %1422 = load i64, i64* %29, align 8, !dbg !2442
  %1423 = load i64, i64* %20, align 8, !dbg !2442
  %1424 = icmp ult i64 %1422, %1423, !dbg !2442
  %1425 = load i32, i32* @x.37
  %1426 = load i32, i32* @y.38
  %1427 = sub i32 %1425, 1
  %1428 = mul i32 %1425, %1427
  %1429 = urem i32 %1428, 2
  %1430 = icmp eq i32 %1429, 0
  %1431 = icmp slt i32 %1426, 10
  %1432 = or i1 %1430, %1431
  br i1 %1432, label %originalBBpart2351, label %originalBB349alteredBB

originalBBpart2351:                               ; preds = %originalBB349
  br i1 %1424, label %1433, label %1453, !dbg !2445

1433:                                             ; preds = %originalBBpart2351
  %1434 = load i32, i32* @x.37
  %1435 = load i32, i32* @y.38
  %1436 = sub i32 %1434, 1
  %1437 = mul i32 %1434, %1436
  %1438 = urem i32 %1437, 2
  %1439 = icmp eq i32 %1438, 0
  %1440 = icmp slt i32 %1435, 10
  %1441 = or i1 %1439, %1440
  br i1 %1441, label %originalBB353, label %originalBB353alteredBB

originalBB353:                                    ; preds = %1433, %originalBB353alteredBB
  %1442 = load i8*, i8** %19, align 8, !dbg !2442
  %1443 = load i64, i64* %29, align 8, !dbg !2442
  %1444 = getelementptr inbounds i8, i8* %1442, i64 %1443, !dbg !2442
  store i8 48, i8* %1444, align 1, !dbg !2442
  %1445 = load i32, i32* @x.37
  %1446 = load i32, i32* @y.38
  %1447 = sub i32 %1445, 1
  %1448 = mul i32 %1445, %1447
  %1449 = urem i32 %1448, 2
  %1450 = icmp eq i32 %1449, 0
  %1451 = icmp slt i32 %1446, 10
  %1452 = or i1 %1450, %1451
  br i1 %1452, label %originalBBpart2355, label %originalBB353alteredBB

originalBBpart2355:                               ; preds = %originalBB353
  br label %1453, !dbg !2442

1453:                                             ; preds = %originalBBpart2355, %originalBBpart2351
  %1454 = load i64, i64* %29, align 8, !dbg !2445
  %1455 = add i64 %1454, 1, !dbg !2445
  store i64 %1455, i64* %29, align 8, !dbg !2445
  br label %1456, !dbg !2445

1456:                                             ; preds = %1453
  %1457 = load i32, i32* @x.37
  %1458 = load i32, i32* @y.38
  %1459 = sub i32 %1457, 1
  %1460 = mul i32 %1457, %1459
  %1461 = urem i32 %1460, 2
  %1462 = icmp eq i32 %1461, 0
  %1463 = icmp slt i32 %1458, 10
  %1464 = or i1 %1462, %1463
  br i1 %1464, label %originalBB357, label %originalBB357alteredBB

originalBB357:                                    ; preds = %1456, %originalBB357alteredBB
  %1465 = load i32, i32* @x.37
  %1466 = load i32, i32* @y.38
  %1467 = sub i32 %1465, 1
  %1468 = mul i32 %1465, %1467
  %1469 = urem i32 %1468, 2
  %1470 = icmp eq i32 %1469, 0
  %1471 = icmp slt i32 %1466, 10
  %1472 = or i1 %1470, %1471
  br i1 %1472, label %originalBBpart2359, label %originalBB357alteredBB

originalBBpart2359:                               ; preds = %originalBB357
  br label %1473, !dbg !2446

1473:                                             ; preds = %originalBBpart2359
  %1474 = load i64, i64* %29, align 8, !dbg !2447
  %1475 = load i64, i64* %20, align 8, !dbg !2447
  %1476 = icmp ult i64 %1474, %1475, !dbg !2447
  br i1 %1476, label %1477, label %1497, !dbg !2450

1477:                                             ; preds = %1473
  %1478 = load i32, i32* @x.37
  %1479 = load i32, i32* @y.38
  %1480 = sub i32 %1478, 1
  %1481 = mul i32 %1478, %1480
  %1482 = urem i32 %1481, 2
  %1483 = icmp eq i32 %1482, 0
  %1484 = icmp slt i32 %1479, 10
  %1485 = or i1 %1483, %1484
  br i1 %1485, label %originalBB361, label %originalBB361alteredBB

originalBB361:                                    ; preds = %1477, %originalBB361alteredBB
  %1486 = load i8*, i8** %19, align 8, !dbg !2447
  %1487 = load i64, i64* %29, align 8, !dbg !2447
  %1488 = getelementptr inbounds i8, i8* %1486, i64 %1487, !dbg !2447
  store i8 48, i8* %1488, align 1, !dbg !2447
  %1489 = load i32, i32* @x.37
  %1490 = load i32, i32* @y.38
  %1491 = sub i32 %1489, 1
  %1492 = mul i32 %1489, %1491
  %1493 = urem i32 %1492, 2
  %1494 = icmp eq i32 %1493, 0
  %1495 = icmp slt i32 %1490, 10
  %1496 = or i1 %1494, %1495
  br i1 %1496, label %originalBBpart2363, label %originalBB361alteredBB

originalBBpart2363:                               ; preds = %originalBB361
  br label %1497, !dbg !2447

1497:                                             ; preds = %originalBBpart2363, %1473
  %1498 = load i32, i32* @x.37
  %1499 = load i32, i32* @y.38
  %1500 = sub i32 %1498, 1
  %1501 = mul i32 %1498, %1500
  %1502 = urem i32 %1501, 2
  %1503 = icmp eq i32 %1502, 0
  %1504 = icmp slt i32 %1499, 10
  %1505 = or i1 %1503, %1504
  br i1 %1505, label %originalBB365, label %originalBB365alteredBB

originalBB365:                                    ; preds = %1497, %originalBB365alteredBB
  %1506 = load i64, i64* %29, align 8, !dbg !2450
  %1507 = add i64 %1506, 1, !dbg !2450
  store i64 %1507, i64* %29, align 8, !dbg !2450
  %1508 = load i32, i32* @x.37
  %1509 = load i32, i32* @y.38
  %1510 = sub i32 %1508, 1
  %1511 = mul i32 %1508, %1510
  %1512 = urem i32 %1511, 2
  %1513 = icmp eq i32 %1512, 0
  %1514 = icmp slt i32 %1509, 10
  %1515 = or i1 %1513, %1514
  br i1 %1515, label %originalBBpart2378, label %originalBB365alteredBB

originalBBpart2378:                               ; preds = %originalBB365
  br label %1516, !dbg !2450

1516:                                             ; preds = %originalBBpart2378
  %1517 = load i32, i32* @x.37
  %1518 = load i32, i32* @y.38
  %1519 = sub i32 %1517, 1
  %1520 = mul i32 %1517, %1519
  %1521 = urem i32 %1520, 2
  %1522 = icmp eq i32 %1521, 0
  %1523 = icmp slt i32 %1518, 10
  %1524 = or i1 %1522, %1523
  br i1 %1524, label %originalBB380, label %originalBB380alteredBB

originalBB380:                                    ; preds = %1516, %originalBB380alteredBB
  %1525 = load i32, i32* @x.37
  %1526 = load i32, i32* @y.38
  %1527 = sub i32 %1525, 1
  %1528 = mul i32 %1525, %1527
  %1529 = urem i32 %1528, 2
  %1530 = icmp eq i32 %1529, 0
  %1531 = icmp slt i32 %1526, 10
  %1532 = or i1 %1530, %1531
  br i1 %1532, label %originalBBpart2382, label %originalBB380alteredBB

originalBBpart2382:                               ; preds = %originalBB380
  br label %1533, !dbg !2451

1533:                                             ; preds = %originalBBpart2382, %originalBBpart2343, %1364, %originalBBpart2334, %originalBBpart2323
  %1534 = load i32, i32* @x.37
  %1535 = load i32, i32* @y.38
  %1536 = sub i32 %1534, 1
  %1537 = mul i32 %1534, %1536
  %1538 = urem i32 %1537, 2
  %1539 = icmp eq i32 %1538, 0
  %1540 = icmp slt i32 %1535, 10
  %1541 = or i1 %1539, %1540
  br i1 %1541, label %originalBB384, label %originalBB384alteredBB

originalBB384:                                    ; preds = %1533, %originalBB384alteredBB
  store i8 48, i8* %39, align 1, !dbg !2452
  %1542 = load i32, i32* @x.37
  %1543 = load i32, i32* @y.38
  %1544 = sub i32 %1542, 1
  %1545 = mul i32 %1542, %1544
  %1546 = urem i32 %1545, 2
  %1547 = icmp eq i32 %1546, 0
  %1548 = icmp slt i32 %1543, 10
  %1549 = or i1 %1547, %1548
  br i1 %1549, label %originalBBpart2386, label %originalBB384alteredBB

originalBBpart2386:                               ; preds = %originalBB384
  br label %1588, !dbg !2453

1550:                                             ; preds = %originalBBpart2218
  %1551 = load i32, i32* @x.37
  %1552 = load i32, i32* @y.38
  %1553 = sub i32 %1551, 1
  %1554 = mul i32 %1551, %1553
  %1555 = urem i32 %1554, 2
  %1556 = icmp eq i32 %1555, 0
  %1557 = icmp slt i32 %1552, 10
  %1558 = or i1 %1556, %1557
  br i1 %1558, label %originalBB388, label %originalBB388alteredBB

originalBB388:                                    ; preds = %1550, %originalBB388alteredBB
  %1559 = load i32, i32* %24, align 4, !dbg !2454
  %1560 = and i32 %1559, 1, !dbg !2456
  %1561 = icmp ne i32 %1560, 0, !dbg !2456
  %1562 = load i32, i32* @x.37
  %1563 = load i32, i32* @y.38
  %1564 = sub i32 %1562, 1
  %1565 = mul i32 %1562, %1564
  %1566 = urem i32 %1565, 2
  %1567 = icmp eq i32 %1566, 0
  %1568 = icmp slt i32 %1563, 10
  %1569 = or i1 %1567, %1568
  br i1 %1569, label %originalBBpart2393, label %originalBB388alteredBB

originalBBpart2393:                               ; preds = %originalBB388
  br i1 %1561, label %1570, label %1571, !dbg !2457

1570:                                             ; preds = %originalBBpart2393
  br label %5481, !dbg !2458

1571:                                             ; preds = %originalBBpart2393
  %1572 = load i32, i32* @x.37
  %1573 = load i32, i32* @y.38
  %1574 = sub i32 %1572, 1
  %1575 = mul i32 %1572, %1574
  %1576 = urem i32 %1575, 2
  %1577 = icmp eq i32 %1576, 0
  %1578 = icmp slt i32 %1573, 10
  %1579 = or i1 %1577, %1578
  br i1 %1579, label %originalBB395, label %originalBB395alteredBB

originalBB395:                                    ; preds = %1571, %originalBB395alteredBB
  %1580 = load i32, i32* @x.37
  %1581 = load i32, i32* @y.38
  %1582 = sub i32 %1580, 1
  %1583 = mul i32 %1580, %1582
  %1584 = urem i32 %1583, 2
  %1585 = icmp eq i32 %1584, 0
  %1586 = icmp slt i32 %1581, 10
  %1587 = or i1 %1585, %1586
  br i1 %1587, label %originalBBpart2397, label %originalBB395alteredBB

originalBBpart2397:                               ; preds = %originalBB395
  br label %1588

1588:                                             ; preds = %originalBBpart2397, %originalBBpart2386
  %1589 = load i32, i32* @x.37
  %1590 = load i32, i32* @y.38
  %1591 = sub i32 %1589, 1
  %1592 = mul i32 %1589, %1591
  %1593 = urem i32 %1592, 2
  %1594 = icmp eq i32 %1593, 0
  %1595 = icmp slt i32 %1590, 10
  %1596 = or i1 %1594, %1595
  br i1 %1596, label %originalBB399, label %originalBB399alteredBB

originalBB399:                                    ; preds = %1588, %originalBB399alteredBB
  %1597 = load i32, i32* @x.37
  %1598 = load i32, i32* @y.38
  %1599 = sub i32 %1597, 1
  %1600 = mul i32 %1597, %1599
  %1601 = urem i32 %1600, 2
  %1602 = icmp eq i32 %1601, 0
  %1603 = icmp slt i32 %1598, 10
  %1604 = or i1 %1602, %1603
  br i1 %1604, label %originalBBpart2401, label %originalBB399alteredBB

originalBBpart2401:                               ; preds = %originalBB399
  br label %4585, !dbg !2459

1605:                                             ; preds = %901
  %1606 = load i32, i32* @x.37
  %1607 = load i32, i32* @y.38
  %1608 = sub i32 %1606, 1
  %1609 = mul i32 %1606, %1608
  %1610 = urem i32 %1609, 2
  %1611 = icmp eq i32 %1610, 0
  %1612 = icmp slt i32 %1607, 10
  %1613 = or i1 %1611, %1612
  br i1 %1613, label %originalBB403, label %originalBB403alteredBB

originalBB403:                                    ; preds = %1605, %originalBB403alteredBB
  %1614 = load i32, i32* %23, align 4, !dbg !2460
  %1615 = load i32, i32* @x.37
  %1616 = load i32, i32* @y.38
  %1617 = sub i32 %1615, 1
  %1618 = mul i32 %1615, %1617
  %1619 = urem i32 %1618, 2
  %1620 = icmp eq i32 %1619, 0
  %1621 = icmp slt i32 %1616, 10
  %1622 = or i1 %1620, %1621
  br i1 %1622, label %originalBBpart2405, label %originalBB403alteredBB

originalBBpart2405:                               ; preds = %originalBB403
  switch i32 %1614, label %2083 [
    i32 2, label %1623
    i32 5, label %1676
  ], !dbg !2461

1623:                                             ; preds = %originalBBpart2405
  %1624 = load i32, i32* @x.37
  %1625 = load i32, i32* @y.38
  %1626 = sub i32 %1624, 1
  %1627 = mul i32 %1624, %1626
  %1628 = urem i32 %1627, 2
  %1629 = icmp eq i32 %1628, 0
  %1630 = icmp slt i32 %1625, 10
  %1631 = or i1 %1629, %1630
  br i1 %1631, label %originalBB407, label %originalBB407alteredBB

originalBB407:                                    ; preds = %1623, %originalBB407alteredBB
  %1632 = load i8, i8* %35, align 1, !dbg !2462
  %1633 = trunc i8 %1632 to i1, !dbg !2462
  %1634 = load i32, i32* @x.37
  %1635 = load i32, i32* @y.38
  %1636 = sub i32 %1634, 1
  %1637 = mul i32 %1634, %1636
  %1638 = urem i32 %1637, 2
  %1639 = icmp eq i32 %1638, 0
  %1640 = icmp slt i32 %1635, 10
  %1641 = or i1 %1639, %1640
  br i1 %1641, label %originalBBpart2409, label %originalBB407alteredBB

originalBBpart2409:                               ; preds = %originalBB407
  br i1 %1633, label %1642, label %1659, !dbg !2465

1642:                                             ; preds = %originalBBpart2409
  %1643 = load i32, i32* @x.37
  %1644 = load i32, i32* @y.38
  %1645 = sub i32 %1643, 1
  %1646 = mul i32 %1643, %1645
  %1647 = urem i32 %1646, 2
  %1648 = icmp eq i32 %1647, 0
  %1649 = icmp slt i32 %1644, 10
  %1650 = or i1 %1648, %1649
  br i1 %1650, label %originalBB411, label %originalBB411alteredBB

originalBB411:                                    ; preds = %1642, %originalBB411alteredBB
  %1651 = load i32, i32* @x.37
  %1652 = load i32, i32* @y.38
  %1653 = sub i32 %1651, 1
  %1654 = mul i32 %1651, %1653
  %1655 = urem i32 %1654, 2
  %1656 = icmp eq i32 %1655, 0
  %1657 = icmp slt i32 %1652, 10
  %1658 = or i1 %1656, %1657
  br i1 %1658, label %originalBBpart2413, label %originalBB411alteredBB

originalBBpart2413:                               ; preds = %originalBB411
  br label %5982, !dbg !2466

1659:                                             ; preds = %originalBBpart2409
  %1660 = load i32, i32* @x.37
  %1661 = load i32, i32* @y.38
  %1662 = sub i32 %1660, 1
  %1663 = mul i32 %1660, %1662
  %1664 = urem i32 %1663, 2
  %1665 = icmp eq i32 %1664, 0
  %1666 = icmp slt i32 %1661, 10
  %1667 = or i1 %1665, %1666
  br i1 %1667, label %originalBB415, label %originalBB415alteredBB

originalBB415:                                    ; preds = %1659, %originalBB415alteredBB
  %1668 = load i32, i32* @x.37
  %1669 = load i32, i32* @y.38
  %1670 = sub i32 %1668, 1
  %1671 = mul i32 %1668, %1670
  %1672 = urem i32 %1671, 2
  %1673 = icmp eq i32 %1672, 0
  %1674 = icmp slt i32 %1669, 10
  %1675 = or i1 %1673, %1674
  br i1 %1675, label %originalBBpart2417, label %originalBB415alteredBB

originalBBpart2417:                               ; preds = %originalBB415
  br label %2100, !dbg !2467

1676:                                             ; preds = %originalBBpart2405
  %1677 = load i32, i32* @x.37
  %1678 = load i32, i32* @y.38
  %1679 = sub i32 %1677, 1
  %1680 = mul i32 %1677, %1679
  %1681 = urem i32 %1680, 2
  %1682 = icmp eq i32 %1681, 0
  %1683 = icmp slt i32 %1678, 10
  %1684 = or i1 %1682, %1683
  br i1 %1684, label %originalBB419, label %originalBB419alteredBB

originalBB419:                                    ; preds = %1676, %originalBB419alteredBB
  %1685 = load i32, i32* %24, align 4, !dbg !2468
  %1686 = and i32 %1685, 4, !dbg !2470
  %1687 = icmp ne i32 %1686, 0, !dbg !2470
  %1688 = load i32, i32* @x.37
  %1689 = load i32, i32* @y.38
  %1690 = sub i32 %1688, 1
  %1691 = mul i32 %1688, %1690
  %1692 = urem i32 %1691, 2
  %1693 = icmp eq i32 %1692, 0
  %1694 = icmp slt i32 %1689, 10
  %1695 = or i1 %1693, %1694
  br i1 %1695, label %originalBBpart2423, label %originalBB419alteredBB

originalBBpart2423:                               ; preds = %originalBB419
  br i1 %1687, label %1696, label %2082, !dbg !2471

1696:                                             ; preds = %originalBBpart2423
  %1697 = load i32, i32* @x.37
  %1698 = load i32, i32* @y.38
  %1699 = sub i32 %1697, 1
  %1700 = mul i32 %1697, %1699
  %1701 = urem i32 %1700, 2
  %1702 = icmp eq i32 %1701, 0
  %1703 = icmp slt i32 %1698, 10
  %1704 = or i1 %1702, %1703
  br i1 %1704, label %originalBB425, label %originalBB425alteredBB

originalBB425:                                    ; preds = %1696, %originalBB425alteredBB
  %1705 = load i64, i64* %28, align 8, !dbg !2472
  %1706 = add i64 %1705, 2, !dbg !2473
  %1707 = load i64, i64* %22, align 8, !dbg !2474
  %1708 = icmp ult i64 %1706, %1707, !dbg !2475
  %1709 = load i32, i32* @x.37
  %1710 = load i32, i32* @y.38
  %1711 = sub i32 %1709, 1
  %1712 = mul i32 %1709, %1711
  %1713 = urem i32 %1712, 2
  %1714 = icmp eq i32 %1713, 0
  %1715 = icmp slt i32 %1710, 10
  %1716 = or i1 %1714, %1715
  br i1 %1716, label %originalBBpart2437, label %originalBB425alteredBB

originalBBpart2437:                               ; preds = %originalBB425
  br i1 %1708, label %1717, label %2082, !dbg !2476

1717:                                             ; preds = %originalBBpart2437
  %1718 = load i32, i32* @x.37
  %1719 = load i32, i32* @y.38
  %1720 = sub i32 %1718, 1
  %1721 = mul i32 %1718, %1720
  %1722 = urem i32 %1721, 2
  %1723 = icmp eq i32 %1722, 0
  %1724 = icmp slt i32 %1719, 10
  %1725 = or i1 %1723, %1724
  br i1 %1725, label %originalBB439, label %originalBB439alteredBB

originalBB439:                                    ; preds = %1717, %originalBB439alteredBB
  %1726 = load i8*, i8** %21, align 8, !dbg !2477
  %1727 = load i64, i64* %28, align 8, !dbg !2478
  %1728 = add i64 %1727, 1, !dbg !2479
  %1729 = getelementptr inbounds i8, i8* %1726, i64 %1728, !dbg !2477
  %1730 = load i8, i8* %1729, align 1, !dbg !2477
  %1731 = sext i8 %1730 to i32, !dbg !2477
  %1732 = icmp eq i32 %1731, 63, !dbg !2480
  %1733 = load i32, i32* @x.37
  %1734 = load i32, i32* @y.38
  %1735 = sub i32 %1733, 1
  %1736 = mul i32 %1733, %1735
  %1737 = urem i32 %1736, 2
  %1738 = icmp eq i32 %1737, 0
  %1739 = icmp slt i32 %1734, 10
  %1740 = or i1 %1738, %1739
  br i1 %1740, label %originalBBpart2450, label %originalBB439alteredBB

originalBBpart2450:                               ; preds = %originalBB439
  br i1 %1732, label %1741, label %2082, !dbg !2481

1741:                                             ; preds = %originalBBpart2450
  %1742 = load i32, i32* @x.37
  %1743 = load i32, i32* @y.38
  %1744 = sub i32 %1742, 1
  %1745 = mul i32 %1742, %1744
  %1746 = urem i32 %1745, 2
  %1747 = icmp eq i32 %1746, 0
  %1748 = icmp slt i32 %1743, 10
  %1749 = or i1 %1747, %1748
  br i1 %1749, label %originalBB452, label %originalBB452alteredBB

originalBB452:                                    ; preds = %1741, %originalBB452alteredBB
  %1750 = load i8*, i8** %21, align 8, !dbg !2482
  %1751 = load i64, i64* %28, align 8, !dbg !2483
  %1752 = add i64 %1751, 2, !dbg !2484
  %1753 = getelementptr inbounds i8, i8* %1750, i64 %1752, !dbg !2482
  %1754 = load i8, i8* %1753, align 1, !dbg !2482
  %1755 = sext i8 %1754 to i32, !dbg !2482
  %1756 = load i32, i32* @x.37
  %1757 = load i32, i32* @y.38
  %1758 = sub i32 %1756, 1
  %1759 = mul i32 %1756, %1758
  %1760 = urem i32 %1759, 2
  %1761 = icmp eq i32 %1760, 0
  %1762 = icmp slt i32 %1757, 10
  %1763 = or i1 %1761, %1762
  br i1 %1763, label %originalBBpart2464, label %originalBB452alteredBB

originalBBpart2464:                               ; preds = %originalBB452
  switch i32 %1755, label %2048 [
    i32 33, label %1764
    i32 39, label %1764
    i32 40, label %1764
    i32 41, label %1764
    i32 45, label %1764
    i32 47, label %1764
    i32 60, label %1764
    i32 61, label %1764
    i32 62, label %1764
  ], !dbg !2485

1764:                                             ; preds = %originalBBpart2464, %originalBBpart2464, %originalBBpart2464, %originalBBpart2464, %originalBBpart2464, %originalBBpart2464, %originalBBpart2464, %originalBBpart2464, %originalBBpart2464
  %1765 = load i8, i8* %35, align 1, !dbg !2486
  %1766 = trunc i8 %1765 to i1, !dbg !2486
  br i1 %1766, label %1767, label %1768, !dbg !2489

1767:                                             ; preds = %1764
  br label %5982, !dbg !2490

1768:                                             ; preds = %1764
  %1769 = load i8*, i8** %21, align 8, !dbg !2491
  %1770 = load i64, i64* %28, align 8, !dbg !2492
  %1771 = add i64 %1770, 2, !dbg !2493
  %1772 = getelementptr inbounds i8, i8* %1769, i64 %1771, !dbg !2491
  %1773 = load i8, i8* %1772, align 1, !dbg !2491
  store i8 %1773, i8* %39, align 1, !dbg !2494
  %1774 = load i64, i64* %28, align 8, !dbg !2495
  %1775 = add i64 %1774, 2, !dbg !2495
  store i64 %1775, i64* %28, align 8, !dbg !2495
  br label %1776, !dbg !2496

1776:                                             ; preds = %1768
  %1777 = load i32, i32* @x.37
  %1778 = load i32, i32* @y.38
  %1779 = sub i32 %1777, 1
  %1780 = mul i32 %1777, %1779
  %1781 = urem i32 %1780, 2
  %1782 = icmp eq i32 %1781, 0
  %1783 = icmp slt i32 %1778, 10
  %1784 = or i1 %1782, %1783
  br i1 %1784, label %originalBB466, label %originalBB466alteredBB

originalBB466:                                    ; preds = %1776, %originalBB466alteredBB
  %1785 = load i64, i64* %29, align 8, !dbg !2497
  %1786 = load i64, i64* %20, align 8, !dbg !2497
  %1787 = icmp ult i64 %1785, %1786, !dbg !2497
  %1788 = load i32, i32* @x.37
  %1789 = load i32, i32* @y.38
  %1790 = sub i32 %1788, 1
  %1791 = mul i32 %1788, %1790
  %1792 = urem i32 %1791, 2
  %1793 = icmp eq i32 %1792, 0
  %1794 = icmp slt i32 %1789, 10
  %1795 = or i1 %1793, %1794
  br i1 %1795, label %originalBBpart2468, label %originalBB466alteredBB

originalBBpart2468:                               ; preds = %originalBB466
  br i1 %1787, label %1796, label %1816, !dbg !2500

1796:                                             ; preds = %originalBBpart2468
  %1797 = load i32, i32* @x.37
  %1798 = load i32, i32* @y.38
  %1799 = sub i32 %1797, 1
  %1800 = mul i32 %1797, %1799
  %1801 = urem i32 %1800, 2
  %1802 = icmp eq i32 %1801, 0
  %1803 = icmp slt i32 %1798, 10
  %1804 = or i1 %1802, %1803
  br i1 %1804, label %originalBB470, label %originalBB470alteredBB

originalBB470:                                    ; preds = %1796, %originalBB470alteredBB
  %1805 = load i8*, i8** %19, align 8, !dbg !2497
  %1806 = load i64, i64* %29, align 8, !dbg !2497
  %1807 = getelementptr inbounds i8, i8* %1805, i64 %1806, !dbg !2497
  store i8 63, i8* %1807, align 1, !dbg !2497
  %1808 = load i32, i32* @x.37
  %1809 = load i32, i32* @y.38
  %1810 = sub i32 %1808, 1
  %1811 = mul i32 %1808, %1810
  %1812 = urem i32 %1811, 2
  %1813 = icmp eq i32 %1812, 0
  %1814 = icmp slt i32 %1809, 10
  %1815 = or i1 %1813, %1814
  br i1 %1815, label %originalBBpart2472, label %originalBB470alteredBB

originalBBpart2472:                               ; preds = %originalBB470
  br label %1816, !dbg !2497

1816:                                             ; preds = %originalBBpart2472, %originalBBpart2468
  %1817 = load i32, i32* @x.37
  %1818 = load i32, i32* @y.38
  %1819 = sub i32 %1817, 1
  %1820 = mul i32 %1817, %1819
  %1821 = urem i32 %1820, 2
  %1822 = icmp eq i32 %1821, 0
  %1823 = icmp slt i32 %1818, 10
  %1824 = or i1 %1822, %1823
  br i1 %1824, label %originalBB474, label %originalBB474alteredBB

originalBB474:                                    ; preds = %1816, %originalBB474alteredBB
  %1825 = load i64, i64* %29, align 8, !dbg !2500
  %1826 = add i64 %1825, 1, !dbg !2500
  store i64 %1826, i64* %29, align 8, !dbg !2500
  %1827 = load i32, i32* @x.37
  %1828 = load i32, i32* @y.38
  %1829 = sub i32 %1827, 1
  %1830 = mul i32 %1827, %1829
  %1831 = urem i32 %1830, 2
  %1832 = icmp eq i32 %1831, 0
  %1833 = icmp slt i32 %1828, 10
  %1834 = or i1 %1832, %1833
  br i1 %1834, label %originalBBpart2486, label %originalBB474alteredBB

originalBBpart2486:                               ; preds = %originalBB474
  br label %1835, !dbg !2500

1835:                                             ; preds = %originalBBpart2486
  br label %1836, !dbg !2501

1836:                                             ; preds = %1835
  %1837 = load i32, i32* @x.37
  %1838 = load i32, i32* @y.38
  %1839 = sub i32 %1837, 1
  %1840 = mul i32 %1837, %1839
  %1841 = urem i32 %1840, 2
  %1842 = icmp eq i32 %1841, 0
  %1843 = icmp slt i32 %1838, 10
  %1844 = or i1 %1842, %1843
  br i1 %1844, label %originalBB488, label %originalBB488alteredBB

originalBB488:                                    ; preds = %1836, %originalBB488alteredBB
  %1845 = load i64, i64* %29, align 8, !dbg !2502
  %1846 = load i64, i64* %20, align 8, !dbg !2502
  %1847 = icmp ult i64 %1845, %1846, !dbg !2502
  %1848 = load i32, i32* @x.37
  %1849 = load i32, i32* @y.38
  %1850 = sub i32 %1848, 1
  %1851 = mul i32 %1848, %1850
  %1852 = urem i32 %1851, 2
  %1853 = icmp eq i32 %1852, 0
  %1854 = icmp slt i32 %1849, 10
  %1855 = or i1 %1853, %1854
  br i1 %1855, label %originalBBpart2490, label %originalBB488alteredBB

originalBBpart2490:                               ; preds = %originalBB488
  br i1 %1847, label %1856, label %1876, !dbg !2505

1856:                                             ; preds = %originalBBpart2490
  %1857 = load i32, i32* @x.37
  %1858 = load i32, i32* @y.38
  %1859 = sub i32 %1857, 1
  %1860 = mul i32 %1857, %1859
  %1861 = urem i32 %1860, 2
  %1862 = icmp eq i32 %1861, 0
  %1863 = icmp slt i32 %1858, 10
  %1864 = or i1 %1862, %1863
  br i1 %1864, label %originalBB492, label %originalBB492alteredBB

originalBB492:                                    ; preds = %1856, %originalBB492alteredBB
  %1865 = load i8*, i8** %19, align 8, !dbg !2502
  %1866 = load i64, i64* %29, align 8, !dbg !2502
  %1867 = getelementptr inbounds i8, i8* %1865, i64 %1866, !dbg !2502
  store i8 34, i8* %1867, align 1, !dbg !2502
  %1868 = load i32, i32* @x.37
  %1869 = load i32, i32* @y.38
  %1870 = sub i32 %1868, 1
  %1871 = mul i32 %1868, %1870
  %1872 = urem i32 %1871, 2
  %1873 = icmp eq i32 %1872, 0
  %1874 = icmp slt i32 %1869, 10
  %1875 = or i1 %1873, %1874
  br i1 %1875, label %originalBBpart2494, label %originalBB492alteredBB

originalBBpart2494:                               ; preds = %originalBB492
  br label %1876, !dbg !2502

1876:                                             ; preds = %originalBBpart2494, %originalBBpart2490
  %1877 = load i32, i32* @x.37
  %1878 = load i32, i32* @y.38
  %1879 = sub i32 %1877, 1
  %1880 = mul i32 %1877, %1879
  %1881 = urem i32 %1880, 2
  %1882 = icmp eq i32 %1881, 0
  %1883 = icmp slt i32 %1878, 10
  %1884 = or i1 %1882, %1883
  br i1 %1884, label %originalBB496, label %originalBB496alteredBB

originalBB496:                                    ; preds = %1876, %originalBB496alteredBB
  %1885 = load i64, i64* %29, align 8, !dbg !2505
  %1886 = add i64 %1885, 1, !dbg !2505
  store i64 %1886, i64* %29, align 8, !dbg !2505
  %1887 = load i32, i32* @x.37
  %1888 = load i32, i32* @y.38
  %1889 = sub i32 %1887, 1
  %1890 = mul i32 %1887, %1889
  %1891 = urem i32 %1890, 2
  %1892 = icmp eq i32 %1891, 0
  %1893 = icmp slt i32 %1888, 10
  %1894 = or i1 %1892, %1893
  br i1 %1894, label %originalBBpart2503, label %originalBB496alteredBB

originalBBpart2503:                               ; preds = %originalBB496
  br label %1895, !dbg !2505

1895:                                             ; preds = %originalBBpart2503
  %1896 = load i32, i32* @x.37
  %1897 = load i32, i32* @y.38
  %1898 = sub i32 %1896, 1
  %1899 = mul i32 %1896, %1898
  %1900 = urem i32 %1899, 2
  %1901 = icmp eq i32 %1900, 0
  %1902 = icmp slt i32 %1897, 10
  %1903 = or i1 %1901, %1902
  br i1 %1903, label %originalBB505, label %originalBB505alteredBB

originalBB505:                                    ; preds = %1895, %originalBB505alteredBB
  %1904 = load i32, i32* @x.37
  %1905 = load i32, i32* @y.38
  %1906 = sub i32 %1904, 1
  %1907 = mul i32 %1904, %1906
  %1908 = urem i32 %1907, 2
  %1909 = icmp eq i32 %1908, 0
  %1910 = icmp slt i32 %1905, 10
  %1911 = or i1 %1909, %1910
  br i1 %1911, label %originalBBpart2507, label %originalBB505alteredBB

originalBBpart2507:                               ; preds = %originalBB505
  br label %1912, !dbg !2506

1912:                                             ; preds = %originalBBpart2507
  %1913 = load i32, i32* @x.37
  %1914 = load i32, i32* @y.38
  %1915 = sub i32 %1913, 1
  %1916 = mul i32 %1913, %1915
  %1917 = urem i32 %1916, 2
  %1918 = icmp eq i32 %1917, 0
  %1919 = icmp slt i32 %1914, 10
  %1920 = or i1 %1918, %1919
  br i1 %1920, label %originalBB509, label %originalBB509alteredBB

originalBB509:                                    ; preds = %1912, %originalBB509alteredBB
  %1921 = load i64, i64* %29, align 8, !dbg !2507
  %1922 = load i64, i64* %20, align 8, !dbg !2507
  %1923 = icmp ult i64 %1921, %1922, !dbg !2507
  %1924 = load i32, i32* @x.37
  %1925 = load i32, i32* @y.38
  %1926 = sub i32 %1924, 1
  %1927 = mul i32 %1924, %1926
  %1928 = urem i32 %1927, 2
  %1929 = icmp eq i32 %1928, 0
  %1930 = icmp slt i32 %1925, 10
  %1931 = or i1 %1929, %1930
  br i1 %1931, label %originalBBpart2511, label %originalBB509alteredBB

originalBBpart2511:                               ; preds = %originalBB509
  br i1 %1923, label %1932, label %1952, !dbg !2510

1932:                                             ; preds = %originalBBpart2511
  %1933 = load i32, i32* @x.37
  %1934 = load i32, i32* @y.38
  %1935 = sub i32 %1933, 1
  %1936 = mul i32 %1933, %1935
  %1937 = urem i32 %1936, 2
  %1938 = icmp eq i32 %1937, 0
  %1939 = icmp slt i32 %1934, 10
  %1940 = or i1 %1938, %1939
  br i1 %1940, label %originalBB513, label %originalBB513alteredBB

originalBB513:                                    ; preds = %1932, %originalBB513alteredBB
  %1941 = load i8*, i8** %19, align 8, !dbg !2507
  %1942 = load i64, i64* %29, align 8, !dbg !2507
  %1943 = getelementptr inbounds i8, i8* %1941, i64 %1942, !dbg !2507
  store i8 34, i8* %1943, align 1, !dbg !2507
  %1944 = load i32, i32* @x.37
  %1945 = load i32, i32* @y.38
  %1946 = sub i32 %1944, 1
  %1947 = mul i32 %1944, %1946
  %1948 = urem i32 %1947, 2
  %1949 = icmp eq i32 %1948, 0
  %1950 = icmp slt i32 %1945, 10
  %1951 = or i1 %1949, %1950
  br i1 %1951, label %originalBBpart2515, label %originalBB513alteredBB

originalBBpart2515:                               ; preds = %originalBB513
  br label %1952, !dbg !2507

1952:                                             ; preds = %originalBBpart2515, %originalBBpart2511
  %1953 = load i32, i32* @x.37
  %1954 = load i32, i32* @y.38
  %1955 = sub i32 %1953, 1
  %1956 = mul i32 %1953, %1955
  %1957 = urem i32 %1956, 2
  %1958 = icmp eq i32 %1957, 0
  %1959 = icmp slt i32 %1954, 10
  %1960 = or i1 %1958, %1959
  br i1 %1960, label %originalBB517, label %originalBB517alteredBB

originalBB517:                                    ; preds = %1952, %originalBB517alteredBB
  %1961 = load i64, i64* %29, align 8, !dbg !2510
  %1962 = add i64 %1961, 1, !dbg !2510
  store i64 %1962, i64* %29, align 8, !dbg !2510
  %1963 = load i32, i32* @x.37
  %1964 = load i32, i32* @y.38
  %1965 = sub i32 %1963, 1
  %1966 = mul i32 %1963, %1965
  %1967 = urem i32 %1966, 2
  %1968 = icmp eq i32 %1967, 0
  %1969 = icmp slt i32 %1964, 10
  %1970 = or i1 %1968, %1969
  br i1 %1970, label %originalBBpart2522, label %originalBB517alteredBB

originalBBpart2522:                               ; preds = %originalBB517
  br label %1971, !dbg !2510

1971:                                             ; preds = %originalBBpart2522
  %1972 = load i32, i32* @x.37
  %1973 = load i32, i32* @y.38
  %1974 = sub i32 %1972, 1
  %1975 = mul i32 %1972, %1974
  %1976 = urem i32 %1975, 2
  %1977 = icmp eq i32 %1976, 0
  %1978 = icmp slt i32 %1973, 10
  %1979 = or i1 %1977, %1978
  br i1 %1979, label %originalBB524, label %originalBB524alteredBB

originalBB524:                                    ; preds = %1971, %originalBB524alteredBB
  %1980 = load i32, i32* @x.37
  %1981 = load i32, i32* @y.38
  %1982 = sub i32 %1980, 1
  %1983 = mul i32 %1980, %1982
  %1984 = urem i32 %1983, 2
  %1985 = icmp eq i32 %1984, 0
  %1986 = icmp slt i32 %1981, 10
  %1987 = or i1 %1985, %1986
  br i1 %1987, label %originalBBpart2526, label %originalBB524alteredBB

originalBBpart2526:                               ; preds = %originalBB524
  br label %1988, !dbg !2511

1988:                                             ; preds = %originalBBpart2526
  %1989 = load i32, i32* @x.37
  %1990 = load i32, i32* @y.38
  %1991 = sub i32 %1989, 1
  %1992 = mul i32 %1989, %1991
  %1993 = urem i32 %1992, 2
  %1994 = icmp eq i32 %1993, 0
  %1995 = icmp slt i32 %1990, 10
  %1996 = or i1 %1994, %1995
  br i1 %1996, label %originalBB528, label %originalBB528alteredBB

originalBB528:                                    ; preds = %1988, %originalBB528alteredBB
  %1997 = load i64, i64* %29, align 8, !dbg !2512
  %1998 = load i64, i64* %20, align 8, !dbg !2512
  %1999 = icmp ult i64 %1997, %1998, !dbg !2512
  %2000 = load i32, i32* @x.37
  %2001 = load i32, i32* @y.38
  %2002 = sub i32 %2000, 1
  %2003 = mul i32 %2000, %2002
  %2004 = urem i32 %2003, 2
  %2005 = icmp eq i32 %2004, 0
  %2006 = icmp slt i32 %2001, 10
  %2007 = or i1 %2005, %2006
  br i1 %2007, label %originalBBpart2530, label %originalBB528alteredBB

originalBBpart2530:                               ; preds = %originalBB528
  br i1 %1999, label %2008, label %2028, !dbg !2515

2008:                                             ; preds = %originalBBpart2530
  %2009 = load i32, i32* @x.37
  %2010 = load i32, i32* @y.38
  %2011 = sub i32 %2009, 1
  %2012 = mul i32 %2009, %2011
  %2013 = urem i32 %2012, 2
  %2014 = icmp eq i32 %2013, 0
  %2015 = icmp slt i32 %2010, 10
  %2016 = or i1 %2014, %2015
  br i1 %2016, label %originalBB532, label %originalBB532alteredBB

originalBB532:                                    ; preds = %2008, %originalBB532alteredBB
  %2017 = load i8*, i8** %19, align 8, !dbg !2512
  %2018 = load i64, i64* %29, align 8, !dbg !2512
  %2019 = getelementptr inbounds i8, i8* %2017, i64 %2018, !dbg !2512
  store i8 63, i8* %2019, align 1, !dbg !2512
  %2020 = load i32, i32* @x.37
  %2021 = load i32, i32* @y.38
  %2022 = sub i32 %2020, 1
  %2023 = mul i32 %2020, %2022
  %2024 = urem i32 %2023, 2
  %2025 = icmp eq i32 %2024, 0
  %2026 = icmp slt i32 %2021, 10
  %2027 = or i1 %2025, %2026
  br i1 %2027, label %originalBBpart2534, label %originalBB532alteredBB

originalBBpart2534:                               ; preds = %originalBB532
  br label %2028, !dbg !2512

2028:                                             ; preds = %originalBBpart2534, %originalBBpart2530
  %2029 = load i64, i64* %29, align 8, !dbg !2515
  %2030 = add i64 %2029, 1, !dbg !2515
  store i64 %2030, i64* %29, align 8, !dbg !2515
  br label %2031, !dbg !2515

2031:                                             ; preds = %2028
  %2032 = load i32, i32* @x.37
  %2033 = load i32, i32* @y.38
  %2034 = sub i32 %2032, 1
  %2035 = mul i32 %2032, %2034
  %2036 = urem i32 %2035, 2
  %2037 = icmp eq i32 %2036, 0
  %2038 = icmp slt i32 %2033, 10
  %2039 = or i1 %2037, %2038
  br i1 %2039, label %originalBB536, label %originalBB536alteredBB

originalBB536:                                    ; preds = %2031, %originalBB536alteredBB
  %2040 = load i32, i32* @x.37
  %2041 = load i32, i32* @y.38
  %2042 = sub i32 %2040, 1
  %2043 = mul i32 %2040, %2042
  %2044 = urem i32 %2043, 2
  %2045 = icmp eq i32 %2044, 0
  %2046 = icmp slt i32 %2041, 10
  %2047 = or i1 %2045, %2046
  br i1 %2047, label %originalBBpart2538, label %originalBB536alteredBB

originalBBpart2538:                               ; preds = %originalBB536
  br label %2065, !dbg !2516

2048:                                             ; preds = %originalBBpart2464
  %2049 = load i32, i32* @x.37
  %2050 = load i32, i32* @y.38
  %2051 = sub i32 %2049, 1
  %2052 = mul i32 %2049, %2051
  %2053 = urem i32 %2052, 2
  %2054 = icmp eq i32 %2053, 0
  %2055 = icmp slt i32 %2050, 10
  %2056 = or i1 %2054, %2055
  br i1 %2056, label %originalBB540, label %originalBB540alteredBB

originalBB540:                                    ; preds = %2048, %originalBB540alteredBB
  %2057 = load i32, i32* @x.37
  %2058 = load i32, i32* @y.38
  %2059 = sub i32 %2057, 1
  %2060 = mul i32 %2057, %2059
  %2061 = urem i32 %2060, 2
  %2062 = icmp eq i32 %2061, 0
  %2063 = icmp slt i32 %2058, 10
  %2064 = or i1 %2062, %2063
  br i1 %2064, label %originalBBpart2542, label %originalBB540alteredBB

originalBBpart2542:                               ; preds = %originalBB540
  br label %2065, !dbg !2517

2065:                                             ; preds = %originalBBpart2542, %originalBBpart2538
  %2066 = load i32, i32* @x.37
  %2067 = load i32, i32* @y.38
  %2068 = sub i32 %2066, 1
  %2069 = mul i32 %2066, %2068
  %2070 = urem i32 %2069, 2
  %2071 = icmp eq i32 %2070, 0
  %2072 = icmp slt i32 %2067, 10
  %2073 = or i1 %2071, %2072
  br i1 %2073, label %originalBB544, label %originalBB544alteredBB

originalBB544:                                    ; preds = %2065, %originalBB544alteredBB
  %2074 = load i32, i32* @x.37
  %2075 = load i32, i32* @y.38
  %2076 = sub i32 %2074, 1
  %2077 = mul i32 %2074, %2076
  %2078 = urem i32 %2077, 2
  %2079 = icmp eq i32 %2078, 0
  %2080 = icmp slt i32 %2075, 10
  %2081 = or i1 %2079, %2080
  br i1 %2081, label %originalBBpart2546, label %originalBB544alteredBB

originalBBpart2546:                               ; preds = %originalBB544
  br label %2082, !dbg !2518

2082:                                             ; preds = %originalBBpart2546, %originalBBpart2450, %originalBBpart2437, %originalBBpart2423
  br label %2100, !dbg !2519

2083:                                             ; preds = %originalBBpart2405
  %2084 = load i32, i32* @x.37
  %2085 = load i32, i32* @y.38
  %2086 = sub i32 %2084, 1
  %2087 = mul i32 %2084, %2086
  %2088 = urem i32 %2087, 2
  %2089 = icmp eq i32 %2088, 0
  %2090 = icmp slt i32 %2085, 10
  %2091 = or i1 %2089, %2090
  br i1 %2091, label %originalBB548, label %originalBB548alteredBB

originalBB548:                                    ; preds = %2083, %originalBB548alteredBB
  %2092 = load i32, i32* @x.37
  %2093 = load i32, i32* @y.38
  %2094 = sub i32 %2092, 1
  %2095 = mul i32 %2092, %2094
  %2096 = urem i32 %2095, 2
  %2097 = icmp eq i32 %2096, 0
  %2098 = icmp slt i32 %2093, 10
  %2099 = or i1 %2097, %2098
  br i1 %2099, label %originalBBpart2550, label %originalBB548alteredBB

originalBBpart2550:                               ; preds = %originalBB548
  br label %2100, !dbg !2520

2100:                                             ; preds = %originalBBpart2550, %2082, %originalBBpart2417
  %2101 = load i32, i32* @x.37
  %2102 = load i32, i32* @y.38
  %2103 = sub i32 %2101, 1
  %2104 = mul i32 %2101, %2103
  %2105 = urem i32 %2104, 2
  %2106 = icmp eq i32 %2105, 0
  %2107 = icmp slt i32 %2102, 10
  %2108 = or i1 %2106, %2107
  br i1 %2108, label %originalBB552, label %originalBB552alteredBB

originalBB552:                                    ; preds = %2100, %originalBB552alteredBB
  %2109 = load i32, i32* @x.37
  %2110 = load i32, i32* @y.38
  %2111 = sub i32 %2109, 1
  %2112 = mul i32 %2109, %2111
  %2113 = urem i32 %2112, 2
  %2114 = icmp eq i32 %2113, 0
  %2115 = icmp slt i32 %2110, 10
  %2116 = or i1 %2114, %2115
  br i1 %2116, label %originalBBpart2554, label %originalBB552alteredBB

originalBBpart2554:                               ; preds = %originalBB552
  br label %4585, !dbg !2521

2117:                                             ; preds = %901
  %2118 = load i32, i32* @x.37
  %2119 = load i32, i32* @y.38
  %2120 = sub i32 %2118, 1
  %2121 = mul i32 %2118, %2120
  %2122 = urem i32 %2121, 2
  %2123 = icmp eq i32 %2122, 0
  %2124 = icmp slt i32 %2119, 10
  %2125 = or i1 %2123, %2124
  br i1 %2125, label %originalBB556, label %originalBB556alteredBB

originalBB556:                                    ; preds = %2117, %originalBB556alteredBB
  store i8 97, i8* %40, align 1, !dbg !2522
  %2126 = load i32, i32* @x.37
  %2127 = load i32, i32* @y.38
  %2128 = sub i32 %2126, 1
  %2129 = mul i32 %2126, %2128
  %2130 = urem i32 %2129, 2
  %2131 = icmp eq i32 %2130, 0
  %2132 = icmp slt i32 %2127, 10
  %2133 = or i1 %2131, %2132
  br i1 %2133, label %originalBBpart2558, label %originalBB556alteredBB

originalBBpart2558:                               ; preds = %originalBB556
  br label %2424, !dbg !2523

2134:                                             ; preds = %901
  %2135 = load i32, i32* @x.37
  %2136 = load i32, i32* @y.38
  %2137 = sub i32 %2135, 1
  %2138 = mul i32 %2135, %2137
  %2139 = urem i32 %2138, 2
  %2140 = icmp eq i32 %2139, 0
  %2141 = icmp slt i32 %2136, 10
  %2142 = or i1 %2140, %2141
  br i1 %2142, label %originalBB560, label %originalBB560alteredBB

originalBB560:                                    ; preds = %2134, %originalBB560alteredBB
  store i8 98, i8* %40, align 1, !dbg !2524
  %2143 = load i32, i32* @x.37
  %2144 = load i32, i32* @y.38
  %2145 = sub i32 %2143, 1
  %2146 = mul i32 %2143, %2145
  %2147 = urem i32 %2146, 2
  %2148 = icmp eq i32 %2147, 0
  %2149 = icmp slt i32 %2144, 10
  %2150 = or i1 %2148, %2149
  br i1 %2150, label %originalBBpart2562, label %originalBB560alteredBB

originalBBpart2562:                               ; preds = %originalBB560
  br label %2424, !dbg !2525

2151:                                             ; preds = %901
  %2152 = load i32, i32* @x.37
  %2153 = load i32, i32* @y.38
  %2154 = sub i32 %2152, 1
  %2155 = mul i32 %2152, %2154
  %2156 = urem i32 %2155, 2
  %2157 = icmp eq i32 %2156, 0
  %2158 = icmp slt i32 %2153, 10
  %2159 = or i1 %2157, %2158
  br i1 %2159, label %originalBB564, label %originalBB564alteredBB

originalBB564:                                    ; preds = %2151, %originalBB564alteredBB
  store i8 102, i8* %40, align 1, !dbg !2526
  %2160 = load i32, i32* @x.37
  %2161 = load i32, i32* @y.38
  %2162 = sub i32 %2160, 1
  %2163 = mul i32 %2160, %2162
  %2164 = urem i32 %2163, 2
  %2165 = icmp eq i32 %2164, 0
  %2166 = icmp slt i32 %2161, 10
  %2167 = or i1 %2165, %2166
  br i1 %2167, label %originalBBpart2566, label %originalBB564alteredBB

originalBBpart2566:                               ; preds = %originalBB564
  br label %2424, !dbg !2527

2168:                                             ; preds = %901
  %2169 = load i32, i32* @x.37
  %2170 = load i32, i32* @y.38
  %2171 = sub i32 %2169, 1
  %2172 = mul i32 %2169, %2171
  %2173 = urem i32 %2172, 2
  %2174 = icmp eq i32 %2173, 0
  %2175 = icmp slt i32 %2170, 10
  %2176 = or i1 %2174, %2175
  br i1 %2176, label %originalBB568, label %originalBB568alteredBB

originalBB568:                                    ; preds = %2168, %originalBB568alteredBB
  store i8 110, i8* %40, align 1, !dbg !2528
  %2177 = load i32, i32* @x.37
  %2178 = load i32, i32* @y.38
  %2179 = sub i32 %2177, 1
  %2180 = mul i32 %2177, %2179
  %2181 = urem i32 %2180, 2
  %2182 = icmp eq i32 %2181, 0
  %2183 = icmp slt i32 %2178, 10
  %2184 = or i1 %2182, %2183
  br i1 %2184, label %originalBBpart2570, label %originalBB568alteredBB

originalBBpart2570:                               ; preds = %originalBB568
  br label %2352, !dbg !2529

2185:                                             ; preds = %901
  store i8 114, i8* %40, align 1, !dbg !2530
  br label %2352, !dbg !2531

2186:                                             ; preds = %901
  %2187 = load i32, i32* @x.37
  %2188 = load i32, i32* @y.38
  %2189 = sub i32 %2187, 1
  %2190 = mul i32 %2187, %2189
  %2191 = urem i32 %2190, 2
  %2192 = icmp eq i32 %2191, 0
  %2193 = icmp slt i32 %2188, 10
  %2194 = or i1 %2192, %2193
  br i1 %2194, label %originalBB572, label %originalBB572alteredBB

originalBB572:                                    ; preds = %2186, %originalBB572alteredBB
  store i8 116, i8* %40, align 1, !dbg !2532
  %2195 = load i32, i32* @x.37
  %2196 = load i32, i32* @y.38
  %2197 = sub i32 %2195, 1
  %2198 = mul i32 %2195, %2197
  %2199 = urem i32 %2198, 2
  %2200 = icmp eq i32 %2199, 0
  %2201 = icmp slt i32 %2196, 10
  %2202 = or i1 %2200, %2201
  br i1 %2202, label %originalBBpart2574, label %originalBB572alteredBB

originalBBpart2574:                               ; preds = %originalBB572
  br label %2352, !dbg !2533

2203:                                             ; preds = %901
  %2204 = load i32, i32* @x.37
  %2205 = load i32, i32* @y.38
  %2206 = sub i32 %2204, 1
  %2207 = mul i32 %2204, %2206
  %2208 = urem i32 %2207, 2
  %2209 = icmp eq i32 %2208, 0
  %2210 = icmp slt i32 %2205, 10
  %2211 = or i1 %2209, %2210
  br i1 %2211, label %originalBB576, label %originalBB576alteredBB

originalBB576:                                    ; preds = %2203, %originalBB576alteredBB
  store i8 118, i8* %40, align 1, !dbg !2534
  %2212 = load i32, i32* @x.37
  %2213 = load i32, i32* @y.38
  %2214 = sub i32 %2212, 1
  %2215 = mul i32 %2212, %2214
  %2216 = urem i32 %2215, 2
  %2217 = icmp eq i32 %2216, 0
  %2218 = icmp slt i32 %2213, 10
  %2219 = or i1 %2217, %2218
  br i1 %2219, label %originalBBpart2578, label %originalBB576alteredBB

originalBBpart2578:                               ; preds = %originalBB576
  br label %2424, !dbg !2535

2220:                                             ; preds = %901
  %2221 = load i32, i32* @x.37
  %2222 = load i32, i32* @y.38
  %2223 = sub i32 %2221, 1
  %2224 = mul i32 %2221, %2223
  %2225 = urem i32 %2224, 2
  %2226 = icmp eq i32 %2225, 0
  %2227 = icmp slt i32 %2222, 10
  %2228 = or i1 %2226, %2227
  br i1 %2228, label %originalBB580, label %originalBB580alteredBB

originalBB580:                                    ; preds = %2220, %originalBB580alteredBB
  %2229 = load i8, i8* %39, align 1, !dbg !2536
  store i8 %2229, i8* %40, align 1, !dbg !2537
  %2230 = load i32, i32* %23, align 4, !dbg !2538
  %2231 = icmp eq i32 %2230, 2, !dbg !2540
  %2232 = load i32, i32* @x.37
  %2233 = load i32, i32* @y.38
  %2234 = sub i32 %2232, 1
  %2235 = mul i32 %2232, %2234
  %2236 = urem i32 %2235, 2
  %2237 = icmp eq i32 %2236, 0
  %2238 = icmp slt i32 %2233, 10
  %2239 = or i1 %2237, %2238
  br i1 %2239, label %originalBBpart2582, label %originalBB580alteredBB

originalBBpart2582:                               ; preds = %originalBB580
  br i1 %2231, label %2240, label %2277, !dbg !2541

2240:                                             ; preds = %originalBBpart2582
  %2241 = load i32, i32* @x.37
  %2242 = load i32, i32* @y.38
  %2243 = sub i32 %2241, 1
  %2244 = mul i32 %2241, %2243
  %2245 = urem i32 %2244, 2
  %2246 = icmp eq i32 %2245, 0
  %2247 = icmp slt i32 %2242, 10
  %2248 = or i1 %2246, %2247
  br i1 %2248, label %originalBB584, label %originalBB584alteredBB

originalBB584:                                    ; preds = %2240, %originalBB584alteredBB
  %2249 = load i8, i8* %35, align 1, !dbg !2542
  %2250 = trunc i8 %2249 to i1, !dbg !2542
  %2251 = load i32, i32* @x.37
  %2252 = load i32, i32* @y.38
  %2253 = sub i32 %2251, 1
  %2254 = mul i32 %2251, %2253
  %2255 = urem i32 %2254, 2
  %2256 = icmp eq i32 %2255, 0
  %2257 = icmp slt i32 %2252, 10
  %2258 = or i1 %2256, %2257
  br i1 %2258, label %originalBBpart2586, label %originalBB584alteredBB

originalBBpart2586:                               ; preds = %originalBB584
  br i1 %2250, label %2259, label %2276, !dbg !2545

2259:                                             ; preds = %originalBBpart2586
  %2260 = load i32, i32* @x.37
  %2261 = load i32, i32* @y.38
  %2262 = sub i32 %2260, 1
  %2263 = mul i32 %2260, %2262
  %2264 = urem i32 %2263, 2
  %2265 = icmp eq i32 %2264, 0
  %2266 = icmp slt i32 %2261, 10
  %2267 = or i1 %2265, %2266
  br i1 %2267, label %originalBB588, label %originalBB588alteredBB

originalBB588:                                    ; preds = %2259, %originalBB588alteredBB
  %2268 = load i32, i32* @x.37
  %2269 = load i32, i32* @y.38
  %2270 = sub i32 %2268, 1
  %2271 = mul i32 %2268, %2270
  %2272 = urem i32 %2271, 2
  %2273 = icmp eq i32 %2272, 0
  %2274 = icmp slt i32 %2269, 10
  %2275 = or i1 %2273, %2274
  br i1 %2275, label %originalBBpart2590, label %originalBB588alteredBB

originalBBpart2590:                               ; preds = %originalBB588
  br label %5982, !dbg !2546

2276:                                             ; preds = %originalBBpart2586
  br label %5126, !dbg !2547

2277:                                             ; preds = %originalBBpart2582
  %2278 = load i32, i32* @x.37
  %2279 = load i32, i32* @y.38
  %2280 = sub i32 %2278, 1
  %2281 = mul i32 %2278, %2280
  %2282 = urem i32 %2281, 2
  %2283 = icmp eq i32 %2282, 0
  %2284 = icmp slt i32 %2279, 10
  %2285 = or i1 %2283, %2284
  br i1 %2285, label %originalBB592, label %originalBB592alteredBB

originalBB592:                                    ; preds = %2277, %originalBB592alteredBB
  %2286 = load i8, i8* %33, align 1, !dbg !2548
  %2287 = trunc i8 %2286 to i1, !dbg !2548
  %2288 = load i32, i32* @x.37
  %2289 = load i32, i32* @y.38
  %2290 = sub i32 %2288, 1
  %2291 = mul i32 %2288, %2290
  %2292 = urem i32 %2291, 2
  %2293 = icmp eq i32 %2292, 0
  %2294 = icmp slt i32 %2289, 10
  %2295 = or i1 %2293, %2294
  br i1 %2295, label %originalBBpart2594, label %originalBB592alteredBB

originalBBpart2594:                               ; preds = %originalBB592
  br i1 %2287, label %2296, label %2335, !dbg !2550

2296:                                             ; preds = %originalBBpart2594
  %2297 = load i32, i32* @x.37
  %2298 = load i32, i32* @y.38
  %2299 = sub i32 %2297, 1
  %2300 = mul i32 %2297, %2299
  %2301 = urem i32 %2300, 2
  %2302 = icmp eq i32 %2301, 0
  %2303 = icmp slt i32 %2298, 10
  %2304 = or i1 %2302, %2303
  br i1 %2304, label %originalBB596, label %originalBB596alteredBB

originalBB596:                                    ; preds = %2296, %originalBB596alteredBB
  %2305 = load i8, i8* %35, align 1, !dbg !2551
  %2306 = trunc i8 %2305 to i1, !dbg !2551
  %2307 = load i32, i32* @x.37
  %2308 = load i32, i32* @y.38
  %2309 = sub i32 %2307, 1
  %2310 = mul i32 %2307, %2309
  %2311 = urem i32 %2310, 2
  %2312 = icmp eq i32 %2311, 0
  %2313 = icmp slt i32 %2308, 10
  %2314 = or i1 %2312, %2313
  br i1 %2314, label %originalBBpart2598, label %originalBB596alteredBB

originalBBpart2598:                               ; preds = %originalBB596
  br i1 %2306, label %2315, label %2335, !dbg !2552

2315:                                             ; preds = %originalBBpart2598
  %2316 = load i32, i32* @x.37
  %2317 = load i32, i32* @y.38
  %2318 = sub i32 %2316, 1
  %2319 = mul i32 %2316, %2318
  %2320 = urem i32 %2319, 2
  %2321 = icmp eq i32 %2320, 0
  %2322 = icmp slt i32 %2317, 10
  %2323 = or i1 %2321, %2322
  br i1 %2323, label %originalBB600, label %originalBB600alteredBB

originalBB600:                                    ; preds = %2315, %originalBB600alteredBB
  %2324 = load i64, i64* %32, align 8, !dbg !2553
  %2325 = icmp ne i64 %2324, 0, !dbg !2553
  %2326 = load i32, i32* @x.37
  %2327 = load i32, i32* @y.38
  %2328 = sub i32 %2326, 1
  %2329 = mul i32 %2326, %2328
  %2330 = urem i32 %2329, 2
  %2331 = icmp eq i32 %2330, 0
  %2332 = icmp slt i32 %2327, 10
  %2333 = or i1 %2331, %2332
  br i1 %2333, label %originalBBpart2602, label %originalBB600alteredBB

originalBBpart2602:                               ; preds = %originalBB600
  br i1 %2325, label %2334, label %2335, !dbg !2554

2334:                                             ; preds = %originalBBpart2602
  br label %5126, !dbg !2555

2335:                                             ; preds = %originalBBpart2602, %originalBBpart2598, %originalBBpart2594
  %2336 = load i32, i32* @x.37
  %2337 = load i32, i32* @y.38
  %2338 = sub i32 %2336, 1
  %2339 = mul i32 %2336, %2338
  %2340 = urem i32 %2339, 2
  %2341 = icmp eq i32 %2340, 0
  %2342 = icmp slt i32 %2337, 10
  %2343 = or i1 %2341, %2342
  br i1 %2343, label %originalBB604, label %originalBB604alteredBB

originalBB604:                                    ; preds = %2335, %originalBB604alteredBB
  %2344 = load i32, i32* @x.37
  %2345 = load i32, i32* @y.38
  %2346 = sub i32 %2344, 1
  %2347 = mul i32 %2344, %2346
  %2348 = urem i32 %2347, 2
  %2349 = icmp eq i32 %2348, 0
  %2350 = icmp slt i32 %2345, 10
  %2351 = or i1 %2349, %2350
  br i1 %2351, label %originalBBpart2606, label %originalBB604alteredBB

originalBBpart2606:                               ; preds = %originalBB604
  br label %2352, !dbg !2553

2352:                                             ; preds = %originalBBpart2606, %originalBBpart2574, %2185, %originalBBpart2570
  call void @llvm.dbg.label(metadata !2556), !dbg !2557
  %2353 = load i32, i32* @x.37
  %2354 = load i32, i32* @y.38
  %2355 = sub i32 %2353, 1
  %2356 = mul i32 %2353, %2355
  %2357 = urem i32 %2356, 2
  %2358 = icmp eq i32 %2357, 0
  %2359 = icmp slt i32 %2354, 10
  %2360 = or i1 %2358, %2359
  br i1 %2360, label %originalBB608, label %originalBB608alteredBB

originalBB608:                                    ; preds = %2352, %originalBB608alteredBB
  %2361 = load i32, i32* %23, align 4, !dbg !2558
  %2362 = icmp eq i32 %2361, 2, !dbg !2560
  %2363 = load i32, i32* @x.37
  %2364 = load i32, i32* @y.38
  %2365 = sub i32 %2363, 1
  %2366 = mul i32 %2363, %2365
  %2367 = urem i32 %2366, 2
  %2368 = icmp eq i32 %2367, 0
  %2369 = icmp slt i32 %2364, 10
  %2370 = or i1 %2368, %2369
  br i1 %2370, label %originalBBpart2610, label %originalBB608alteredBB

originalBBpart2610:                               ; preds = %originalBB608
  br i1 %2362, label %2371, label %2407, !dbg !2561

2371:                                             ; preds = %originalBBpart2610
  %2372 = load i32, i32* @x.37
  %2373 = load i32, i32* @y.38
  %2374 = sub i32 %2372, 1
  %2375 = mul i32 %2372, %2374
  %2376 = urem i32 %2375, 2
  %2377 = icmp eq i32 %2376, 0
  %2378 = icmp slt i32 %2373, 10
  %2379 = or i1 %2377, %2378
  br i1 %2379, label %originalBB612, label %originalBB612alteredBB

originalBB612:                                    ; preds = %2371, %originalBB612alteredBB
  %2380 = load i8, i8* %35, align 1, !dbg !2562
  %2381 = trunc i8 %2380 to i1, !dbg !2562
  %2382 = load i32, i32* @x.37
  %2383 = load i32, i32* @y.38
  %2384 = sub i32 %2382, 1
  %2385 = mul i32 %2382, %2384
  %2386 = urem i32 %2385, 2
  %2387 = icmp eq i32 %2386, 0
  %2388 = icmp slt i32 %2383, 10
  %2389 = or i1 %2387, %2388
  br i1 %2389, label %originalBBpart2614, label %originalBB612alteredBB

originalBBpart2614:                               ; preds = %originalBB612
  br i1 %2381, label %2390, label %2407, !dbg !2563

2390:                                             ; preds = %originalBBpart2614
  %2391 = load i32, i32* @x.37
  %2392 = load i32, i32* @y.38
  %2393 = sub i32 %2391, 1
  %2394 = mul i32 %2391, %2393
  %2395 = urem i32 %2394, 2
  %2396 = icmp eq i32 %2395, 0
  %2397 = icmp slt i32 %2392, 10
  %2398 = or i1 %2396, %2397
  br i1 %2398, label %originalBB616, label %originalBB616alteredBB

originalBB616:                                    ; preds = %2390, %originalBB616alteredBB
  %2399 = load i32, i32* @x.37
  %2400 = load i32, i32* @y.38
  %2401 = sub i32 %2399, 1
  %2402 = mul i32 %2399, %2401
  %2403 = urem i32 %2402, 2
  %2404 = icmp eq i32 %2403, 0
  %2405 = icmp slt i32 %2400, 10
  %2406 = or i1 %2404, %2405
  br i1 %2406, label %originalBBpart2618, label %originalBB616alteredBB

originalBBpart2618:                               ; preds = %originalBB616
  br label %5982, !dbg !2564

2407:                                             ; preds = %originalBBpart2614, %originalBBpart2610
  %2408 = load i32, i32* @x.37
  %2409 = load i32, i32* @y.38
  %2410 = sub i32 %2408, 1
  %2411 = mul i32 %2408, %2410
  %2412 = urem i32 %2411, 2
  %2413 = icmp eq i32 %2412, 0
  %2414 = icmp slt i32 %2409, 10
  %2415 = or i1 %2413, %2414
  br i1 %2415, label %originalBB620, label %originalBB620alteredBB

originalBB620:                                    ; preds = %2407, %originalBB620alteredBB
  %2416 = load i32, i32* @x.37
  %2417 = load i32, i32* @y.38
  %2418 = sub i32 %2416, 1
  %2419 = mul i32 %2416, %2418
  %2420 = urem i32 %2419, 2
  %2421 = icmp eq i32 %2420, 0
  %2422 = icmp slt i32 %2417, 10
  %2423 = or i1 %2421, %2422
  br i1 %2423, label %originalBBpart2622, label %originalBB620alteredBB

originalBBpart2622:                               ; preds = %originalBB620
  br label %2424, !dbg !2562

2424:                                             ; preds = %originalBBpart2622, %originalBBpart2578, %originalBBpart2566, %originalBBpart2562, %originalBBpart2558
  call void @llvm.dbg.label(metadata !2565), !dbg !2566
  %2425 = load i32, i32* @x.37
  %2426 = load i32, i32* @y.38
  %2427 = sub i32 %2425, 1
  %2428 = mul i32 %2425, %2427
  %2429 = urem i32 %2428, 2
  %2430 = icmp eq i32 %2429, 0
  %2431 = icmp slt i32 %2426, 10
  %2432 = or i1 %2430, %2431
  br i1 %2432, label %originalBB624, label %originalBB624alteredBB

originalBB624:                                    ; preds = %2424, %originalBB624alteredBB
  %2433 = load i8, i8* %33, align 1, !dbg !2567
  %2434 = trunc i8 %2433 to i1, !dbg !2567
  %2435 = load i32, i32* @x.37
  %2436 = load i32, i32* @y.38
  %2437 = sub i32 %2435, 1
  %2438 = mul i32 %2435, %2437
  %2439 = urem i32 %2438, 2
  %2440 = icmp eq i32 %2439, 0
  %2441 = icmp slt i32 %2436, 10
  %2442 = or i1 %2440, %2441
  br i1 %2442, label %originalBBpart2626, label %originalBB624alteredBB

originalBBpart2626:                               ; preds = %originalBB624
  br i1 %2434, label %2443, label %2461, !dbg !2569

2443:                                             ; preds = %originalBBpart2626
  %2444 = load i32, i32* @x.37
  %2445 = load i32, i32* @y.38
  %2446 = sub i32 %2444, 1
  %2447 = mul i32 %2444, %2446
  %2448 = urem i32 %2447, 2
  %2449 = icmp eq i32 %2448, 0
  %2450 = icmp slt i32 %2445, 10
  %2451 = or i1 %2449, %2450
  br i1 %2451, label %originalBB628, label %originalBB628alteredBB

originalBB628:                                    ; preds = %2443, %originalBB628alteredBB
  %2452 = load i8, i8* %40, align 1, !dbg !2570
  store i8 %2452, i8* %39, align 1, !dbg !2572
  %2453 = load i32, i32* @x.37
  %2454 = load i32, i32* @y.38
  %2455 = sub i32 %2453, 1
  %2456 = mul i32 %2453, %2455
  %2457 = urem i32 %2456, 2
  %2458 = icmp eq i32 %2457, 0
  %2459 = icmp slt i32 %2454, 10
  %2460 = or i1 %2458, %2459
  br i1 %2460, label %originalBBpart2630, label %originalBB628alteredBB

originalBBpart2630:                               ; preds = %originalBB628
  br label %4712, !dbg !2573

2461:                                             ; preds = %originalBBpart2626
  %2462 = load i32, i32* @x.37
  %2463 = load i32, i32* @y.38
  %2464 = sub i32 %2462, 1
  %2465 = mul i32 %2462, %2464
  %2466 = urem i32 %2465, 2
  %2467 = icmp eq i32 %2466, 0
  %2468 = icmp slt i32 %2463, 10
  %2469 = or i1 %2467, %2468
  br i1 %2469, label %originalBB632, label %originalBB632alteredBB

originalBB632:                                    ; preds = %2461, %originalBB632alteredBB
  %2470 = load i32, i32* @x.37
  %2471 = load i32, i32* @y.38
  %2472 = sub i32 %2470, 1
  %2473 = mul i32 %2470, %2472
  %2474 = urem i32 %2473, 2
  %2475 = icmp eq i32 %2474, 0
  %2476 = icmp slt i32 %2471, 10
  %2477 = or i1 %2475, %2476
  br i1 %2477, label %originalBBpart2634, label %originalBB632alteredBB

originalBBpart2634:                               ; preds = %originalBB632
  br label %4585, !dbg !2574

2478:                                             ; preds = %901, %901
  %2479 = load i32, i32* @x.37
  %2480 = load i32, i32* @y.38
  %2481 = sub i32 %2479, 1
  %2482 = mul i32 %2479, %2481
  %2483 = urem i32 %2482, 2
  %2484 = icmp eq i32 %2483, 0
  %2485 = icmp slt i32 %2480, 10
  %2486 = or i1 %2484, %2485
  br i1 %2486, label %originalBB636, label %originalBB636alteredBB

originalBB636:                                    ; preds = %2478, %originalBB636alteredBB
  %2487 = load i64, i64* %22, align 8, !dbg !2575
  %2488 = icmp eq i64 %2487, -1, !dbg !2577
  %2489 = load i32, i32* @x.37
  %2490 = load i32, i32* @y.38
  %2491 = sub i32 %2489, 1
  %2492 = mul i32 %2489, %2491
  %2493 = urem i32 %2492, 2
  %2494 = icmp eq i32 %2493, 0
  %2495 = icmp slt i32 %2490, 10
  %2496 = or i1 %2494, %2495
  br i1 %2496, label %originalBBpart2638, label %originalBB636alteredBB

originalBBpart2638:                               ; preds = %originalBB636
  br i1 %2488, label %2497, label %2519, !dbg !2578

2497:                                             ; preds = %originalBBpart2638
  %2498 = load i32, i32* @x.37
  %2499 = load i32, i32* @y.38
  %2500 = sub i32 %2498, 1
  %2501 = mul i32 %2498, %2500
  %2502 = urem i32 %2501, 2
  %2503 = icmp eq i32 %2502, 0
  %2504 = icmp slt i32 %2499, 10
  %2505 = or i1 %2503, %2504
  br i1 %2505, label %originalBB640, label %originalBB640alteredBB

originalBB640:                                    ; preds = %2497, %originalBB640alteredBB
  %2506 = load i8*, i8** %21, align 8, !dbg !2579
  %2507 = getelementptr inbounds i8, i8* %2506, i64 1, !dbg !2579
  %2508 = load i8, i8* %2507, align 1, !dbg !2579
  %2509 = sext i8 %2508 to i32, !dbg !2579
  %2510 = icmp eq i32 %2509, 0, !dbg !2580
  %2511 = load i32, i32* @x.37
  %2512 = load i32, i32* @y.38
  %2513 = sub i32 %2511, 1
  %2514 = mul i32 %2511, %2513
  %2515 = urem i32 %2514, 2
  %2516 = icmp eq i32 %2515, 0
  %2517 = icmp slt i32 %2512, 10
  %2518 = or i1 %2516, %2517
  br i1 %2518, label %originalBBpart2642, label %originalBB640alteredBB

originalBBpart2642:                               ; preds = %originalBB640
  br i1 %2510, label %2539, label %2538, !dbg !2575

2519:                                             ; preds = %originalBBpart2638
  %2520 = load i32, i32* @x.37
  %2521 = load i32, i32* @y.38
  %2522 = sub i32 %2520, 1
  %2523 = mul i32 %2520, %2522
  %2524 = urem i32 %2523, 2
  %2525 = icmp eq i32 %2524, 0
  %2526 = icmp slt i32 %2521, 10
  %2527 = or i1 %2525, %2526
  br i1 %2527, label %originalBB644, label %originalBB644alteredBB

originalBB644:                                    ; preds = %2519, %originalBB644alteredBB
  %2528 = load i64, i64* %22, align 8, !dbg !2581
  %2529 = icmp eq i64 %2528, 1, !dbg !2582
  %2530 = load i32, i32* @x.37
  %2531 = load i32, i32* @y.38
  %2532 = sub i32 %2530, 1
  %2533 = mul i32 %2530, %2532
  %2534 = urem i32 %2533, 2
  %2535 = icmp eq i32 %2534, 0
  %2536 = icmp slt i32 %2531, 10
  %2537 = or i1 %2535, %2536
  br i1 %2537, label %originalBBpart2646, label %originalBB644alteredBB

originalBBpart2646:                               ; preds = %originalBB644
  br i1 %2529, label %2539, label %2538, !dbg !2578

2538:                                             ; preds = %originalBBpart2646, %originalBBpart2642
  br label %4585, !dbg !2583

2539:                                             ; preds = %originalBBpart2646, %originalBBpart2642
  br label %2540, !dbg !2584

2540:                                             ; preds = %2539, %901, %901
  %2541 = load i32, i32* @x.37
  %2542 = load i32, i32* @y.38
  %2543 = sub i32 %2541, 1
  %2544 = mul i32 %2541, %2543
  %2545 = urem i32 %2544, 2
  %2546 = icmp eq i32 %2545, 0
  %2547 = icmp slt i32 %2542, 10
  %2548 = or i1 %2546, %2547
  br i1 %2548, label %originalBB648, label %originalBB648alteredBB

originalBB648:                                    ; preds = %2540, %originalBB648alteredBB
  %2549 = load i64, i64* %28, align 8, !dbg !2585
  %2550 = icmp ne i64 %2549, 0, !dbg !2587
  %2551 = load i32, i32* @x.37
  %2552 = load i32, i32* @y.38
  %2553 = sub i32 %2551, 1
  %2554 = mul i32 %2551, %2553
  %2555 = urem i32 %2554, 2
  %2556 = icmp eq i32 %2555, 0
  %2557 = icmp slt i32 %2552, 10
  %2558 = or i1 %2556, %2557
  br i1 %2558, label %originalBBpart2650, label %originalBB648alteredBB

originalBBpart2650:                               ; preds = %originalBB648
  br i1 %2550, label %2559, label %2576, !dbg !2588

2559:                                             ; preds = %originalBBpart2650
  %2560 = load i32, i32* @x.37
  %2561 = load i32, i32* @y.38
  %2562 = sub i32 %2560, 1
  %2563 = mul i32 %2560, %2562
  %2564 = urem i32 %2563, 2
  %2565 = icmp eq i32 %2564, 0
  %2566 = icmp slt i32 %2561, 10
  %2567 = or i1 %2565, %2566
  br i1 %2567, label %originalBB652, label %originalBB652alteredBB

originalBB652:                                    ; preds = %2559, %originalBB652alteredBB
  %2568 = load i32, i32* @x.37
  %2569 = load i32, i32* @y.38
  %2570 = sub i32 %2568, 1
  %2571 = mul i32 %2568, %2570
  %2572 = urem i32 %2571, 2
  %2573 = icmp eq i32 %2572, 0
  %2574 = icmp slt i32 %2569, 10
  %2575 = or i1 %2573, %2574
  br i1 %2575, label %originalBBpart2654, label %originalBB652alteredBB

originalBBpart2654:                               ; preds = %originalBB652
  br label %4585, !dbg !2589

2576:                                             ; preds = %originalBBpart2650
  %2577 = load i32, i32* @x.37
  %2578 = load i32, i32* @y.38
  %2579 = sub i32 %2577, 1
  %2580 = mul i32 %2577, %2579
  %2581 = urem i32 %2580, 2
  %2582 = icmp eq i32 %2581, 0
  %2583 = icmp slt i32 %2578, 10
  %2584 = or i1 %2582, %2583
  br i1 %2584, label %originalBB656, label %originalBB656alteredBB

originalBB656:                                    ; preds = %2576, %originalBB656alteredBB
  %2585 = load i32, i32* @x.37
  %2586 = load i32, i32* @y.38
  %2587 = sub i32 %2585, 1
  %2588 = mul i32 %2585, %2587
  %2589 = urem i32 %2588, 2
  %2590 = icmp eq i32 %2589, 0
  %2591 = icmp slt i32 %2586, 10
  %2592 = or i1 %2590, %2591
  br i1 %2592, label %originalBBpart2658, label %originalBB656alteredBB

originalBBpart2658:                               ; preds = %originalBB656
  br label %2593, !dbg !2590

2593:                                             ; preds = %originalBBpart2658, %901
  %2594 = load i32, i32* @x.37
  %2595 = load i32, i32* @y.38
  %2596 = sub i32 %2594, 1
  %2597 = mul i32 %2594, %2596
  %2598 = urem i32 %2597, 2
  %2599 = icmp eq i32 %2598, 0
  %2600 = icmp slt i32 %2595, 10
  %2601 = or i1 %2599, %2600
  br i1 %2601, label %originalBB660, label %originalBB660alteredBB

originalBB660:                                    ; preds = %2593, %originalBB660alteredBB
  store i8 1, i8* %43, align 1, !dbg !2591
  %2602 = load i32, i32* @x.37
  %2603 = load i32, i32* @y.38
  %2604 = sub i32 %2602, 1
  %2605 = mul i32 %2602, %2604
  %2606 = urem i32 %2605, 2
  %2607 = icmp eq i32 %2606, 0
  %2608 = icmp slt i32 %2603, 10
  %2609 = or i1 %2607, %2608
  br i1 %2609, label %originalBBpart2662, label %originalBB660alteredBB

originalBBpart2662:                               ; preds = %originalBB660
  br label %2610, !dbg !2592

2610:                                             ; preds = %originalBBpart2662, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901
  %2611 = load i32, i32* @x.37
  %2612 = load i32, i32* @y.38
  %2613 = sub i32 %2611, 1
  %2614 = mul i32 %2611, %2613
  %2615 = urem i32 %2614, 2
  %2616 = icmp eq i32 %2615, 0
  %2617 = icmp slt i32 %2612, 10
  %2618 = or i1 %2616, %2617
  br i1 %2618, label %originalBB664, label %originalBB664alteredBB

originalBB664:                                    ; preds = %2610, %originalBB664alteredBB
  %2619 = load i32, i32* %23, align 4, !dbg !2593
  %2620 = icmp eq i32 %2619, 2, !dbg !2595
  %2621 = load i32, i32* @x.37
  %2622 = load i32, i32* @y.38
  %2623 = sub i32 %2621, 1
  %2624 = mul i32 %2621, %2623
  %2625 = urem i32 %2624, 2
  %2626 = icmp eq i32 %2625, 0
  %2627 = icmp slt i32 %2622, 10
  %2628 = or i1 %2626, %2627
  br i1 %2628, label %originalBBpart2666, label %originalBB664alteredBB

originalBBpart2666:                               ; preds = %originalBB664
  br i1 %2620, label %2629, label %2665, !dbg !2596

2629:                                             ; preds = %originalBBpart2666
  %2630 = load i32, i32* @x.37
  %2631 = load i32, i32* @y.38
  %2632 = sub i32 %2630, 1
  %2633 = mul i32 %2630, %2632
  %2634 = urem i32 %2633, 2
  %2635 = icmp eq i32 %2634, 0
  %2636 = icmp slt i32 %2631, 10
  %2637 = or i1 %2635, %2636
  br i1 %2637, label %originalBB668, label %originalBB668alteredBB

originalBB668:                                    ; preds = %2629, %originalBB668alteredBB
  %2638 = load i8, i8* %35, align 1, !dbg !2597
  %2639 = trunc i8 %2638 to i1, !dbg !2597
  %2640 = load i32, i32* @x.37
  %2641 = load i32, i32* @y.38
  %2642 = sub i32 %2640, 1
  %2643 = mul i32 %2640, %2642
  %2644 = urem i32 %2643, 2
  %2645 = icmp eq i32 %2644, 0
  %2646 = icmp slt i32 %2641, 10
  %2647 = or i1 %2645, %2646
  br i1 %2647, label %originalBBpart2670, label %originalBB668alteredBB

originalBBpart2670:                               ; preds = %originalBB668
  br i1 %2639, label %2648, label %2665, !dbg !2598

2648:                                             ; preds = %originalBBpart2670
  %2649 = load i32, i32* @x.37
  %2650 = load i32, i32* @y.38
  %2651 = sub i32 %2649, 1
  %2652 = mul i32 %2649, %2651
  %2653 = urem i32 %2652, 2
  %2654 = icmp eq i32 %2653, 0
  %2655 = icmp slt i32 %2650, 10
  %2656 = or i1 %2654, %2655
  br i1 %2656, label %originalBB672, label %originalBB672alteredBB

originalBB672:                                    ; preds = %2648, %originalBB672alteredBB
  %2657 = load i32, i32* @x.37
  %2658 = load i32, i32* @y.38
  %2659 = sub i32 %2657, 1
  %2660 = mul i32 %2657, %2659
  %2661 = urem i32 %2660, 2
  %2662 = icmp eq i32 %2661, 0
  %2663 = icmp slt i32 %2658, 10
  %2664 = or i1 %2662, %2663
  br i1 %2664, label %originalBBpart2674, label %originalBB672alteredBB

originalBBpart2674:                               ; preds = %originalBB672
  br label %5982, !dbg !2599

2665:                                             ; preds = %originalBBpart2670, %originalBBpart2666
  %2666 = load i32, i32* @x.37
  %2667 = load i32, i32* @y.38
  %2668 = sub i32 %2666, 1
  %2669 = mul i32 %2666, %2668
  %2670 = urem i32 %2669, 2
  %2671 = icmp eq i32 %2670, 0
  %2672 = icmp slt i32 %2667, 10
  %2673 = or i1 %2671, %2672
  br i1 %2673, label %originalBB676, label %originalBB676alteredBB

originalBB676:                                    ; preds = %2665, %originalBB676alteredBB
  %2674 = load i32, i32* @x.37
  %2675 = load i32, i32* @y.38
  %2676 = sub i32 %2674, 1
  %2677 = mul i32 %2674, %2676
  %2678 = urem i32 %2677, 2
  %2679 = icmp eq i32 %2678, 0
  %2680 = icmp slt i32 %2675, 10
  %2681 = or i1 %2679, %2680
  br i1 %2681, label %originalBBpart2678, label %originalBB676alteredBB

originalBBpart2678:                               ; preds = %originalBB676
  br label %4585, !dbg !2600

2682:                                             ; preds = %901
  store i8 1, i8* %37, align 1, !dbg !2601
  store i8 1, i8* %43, align 1, !dbg !2602
  %2683 = load i32, i32* %23, align 4, !dbg !2603
  %2684 = icmp eq i32 %2683, 2, !dbg !2605
  br i1 %2684, label %2685, label %2926, !dbg !2606

2685:                                             ; preds = %2682
  %2686 = load i8, i8* %35, align 1, !dbg !2607
  %2687 = trunc i8 %2686 to i1, !dbg !2607
  br i1 %2687, label %2688, label %2705, !dbg !2610

2688:                                             ; preds = %2685
  %2689 = load i32, i32* @x.37
  %2690 = load i32, i32* @y.38
  %2691 = sub i32 %2689, 1
  %2692 = mul i32 %2689, %2691
  %2693 = urem i32 %2692, 2
  %2694 = icmp eq i32 %2693, 0
  %2695 = icmp slt i32 %2690, 10
  %2696 = or i1 %2694, %2695
  br i1 %2696, label %originalBB680, label %originalBB680alteredBB

originalBB680:                                    ; preds = %2688, %originalBB680alteredBB
  %2697 = load i32, i32* @x.37
  %2698 = load i32, i32* @y.38
  %2699 = sub i32 %2697, 1
  %2700 = mul i32 %2697, %2699
  %2701 = urem i32 %2700, 2
  %2702 = icmp eq i32 %2701, 0
  %2703 = icmp slt i32 %2698, 10
  %2704 = or i1 %2702, %2703
  br i1 %2704, label %originalBBpart2682, label %originalBB680alteredBB

originalBBpart2682:                               ; preds = %originalBB680
  br label %5982, !dbg !2611

2705:                                             ; preds = %2685
  %2706 = load i32, i32* @x.37
  %2707 = load i32, i32* @y.38
  %2708 = sub i32 %2706, 1
  %2709 = mul i32 %2706, %2708
  %2710 = urem i32 %2709, 2
  %2711 = icmp eq i32 %2710, 0
  %2712 = icmp slt i32 %2707, 10
  %2713 = or i1 %2711, %2712
  br i1 %2713, label %originalBB684, label %originalBB684alteredBB

originalBB684:                                    ; preds = %2705, %originalBB684alteredBB
  %2714 = load i64, i64* %20, align 8, !dbg !2612
  %2715 = icmp ne i64 %2714, 0, !dbg !2612
  %2716 = load i32, i32* @x.37
  %2717 = load i32, i32* @y.38
  %2718 = sub i32 %2716, 1
  %2719 = mul i32 %2716, %2718
  %2720 = urem i32 %2719, 2
  %2721 = icmp eq i32 %2720, 0
  %2722 = icmp slt i32 %2717, 10
  %2723 = or i1 %2721, %2722
  br i1 %2723, label %originalBBpart2686, label %originalBB684alteredBB

originalBBpart2686:                               ; preds = %originalBB684
  br i1 %2715, label %2724, label %2761, !dbg !2614

2724:                                             ; preds = %originalBBpart2686
  %2725 = load i32, i32* @x.37
  %2726 = load i32, i32* @y.38
  %2727 = sub i32 %2725, 1
  %2728 = mul i32 %2725, %2727
  %2729 = urem i32 %2728, 2
  %2730 = icmp eq i32 %2729, 0
  %2731 = icmp slt i32 %2726, 10
  %2732 = or i1 %2730, %2731
  br i1 %2732, label %originalBB688, label %originalBB688alteredBB

originalBB688:                                    ; preds = %2724, %originalBB688alteredBB
  %2733 = load i64, i64* %30, align 8, !dbg !2615
  %2734 = icmp ne i64 %2733, 0, !dbg !2615
  %2735 = load i32, i32* @x.37
  %2736 = load i32, i32* @y.38
  %2737 = sub i32 %2735, 1
  %2738 = mul i32 %2735, %2737
  %2739 = urem i32 %2738, 2
  %2740 = icmp eq i32 %2739, 0
  %2741 = icmp slt i32 %2736, 10
  %2742 = or i1 %2740, %2741
  br i1 %2742, label %originalBBpart2690, label %originalBB688alteredBB

originalBBpart2690:                               ; preds = %originalBB688
  br i1 %2734, label %2761, label %2743, !dbg !2616

2743:                                             ; preds = %originalBBpart2690
  %2744 = load i32, i32* @x.37
  %2745 = load i32, i32* @y.38
  %2746 = sub i32 %2744, 1
  %2747 = mul i32 %2744, %2746
  %2748 = urem i32 %2747, 2
  %2749 = icmp eq i32 %2748, 0
  %2750 = icmp slt i32 %2745, 10
  %2751 = or i1 %2749, %2750
  br i1 %2751, label %originalBB692, label %originalBB692alteredBB

originalBB692:                                    ; preds = %2743, %originalBB692alteredBB
  %2752 = load i64, i64* %20, align 8, !dbg !2617
  store i64 %2752, i64* %30, align 8, !dbg !2619
  store i64 0, i64* %20, align 8, !dbg !2620
  %2753 = load i32, i32* @x.37
  %2754 = load i32, i32* @y.38
  %2755 = sub i32 %2753, 1
  %2756 = mul i32 %2753, %2755
  %2757 = urem i32 %2756, 2
  %2758 = icmp eq i32 %2757, 0
  %2759 = icmp slt i32 %2754, 10
  %2760 = or i1 %2758, %2759
  br i1 %2760, label %originalBBpart2694, label %originalBB692alteredBB

originalBBpart2694:                               ; preds = %originalBB692
  br label %2761, !dbg !2621

2761:                                             ; preds = %originalBBpart2694, %originalBBpart2690, %originalBBpart2686
  %2762 = load i32, i32* @x.37
  %2763 = load i32, i32* @y.38
  %2764 = sub i32 %2762, 1
  %2765 = mul i32 %2762, %2764
  %2766 = urem i32 %2765, 2
  %2767 = icmp eq i32 %2766, 0
  %2768 = icmp slt i32 %2763, 10
  %2769 = or i1 %2767, %2768
  br i1 %2769, label %originalBB696, label %originalBB696alteredBB

originalBB696:                                    ; preds = %2761, %originalBB696alteredBB
  %2770 = load i32, i32* @x.37
  %2771 = load i32, i32* @y.38
  %2772 = sub i32 %2770, 1
  %2773 = mul i32 %2770, %2772
  %2774 = urem i32 %2773, 2
  %2775 = icmp eq i32 %2774, 0
  %2776 = icmp slt i32 %2771, 10
  %2777 = or i1 %2775, %2776
  br i1 %2777, label %originalBBpart2698, label %originalBB696alteredBB

originalBBpart2698:                               ; preds = %originalBB696
  br label %2778, !dbg !2622

2778:                                             ; preds = %originalBBpart2698
  %2779 = load i32, i32* @x.37
  %2780 = load i32, i32* @y.38
  %2781 = sub i32 %2779, 1
  %2782 = mul i32 %2779, %2781
  %2783 = urem i32 %2782, 2
  %2784 = icmp eq i32 %2783, 0
  %2785 = icmp slt i32 %2780, 10
  %2786 = or i1 %2784, %2785
  br i1 %2786, label %originalBB700, label %originalBB700alteredBB

originalBB700:                                    ; preds = %2778, %originalBB700alteredBB
  %2787 = load i64, i64* %29, align 8, !dbg !2623
  %2788 = load i64, i64* %20, align 8, !dbg !2623
  %2789 = icmp ult i64 %2787, %2788, !dbg !2623
  %2790 = load i32, i32* @x.37
  %2791 = load i32, i32* @y.38
  %2792 = sub i32 %2790, 1
  %2793 = mul i32 %2790, %2792
  %2794 = urem i32 %2793, 2
  %2795 = icmp eq i32 %2794, 0
  %2796 = icmp slt i32 %2791, 10
  %2797 = or i1 %2795, %2796
  br i1 %2797, label %originalBBpart2702, label %originalBB700alteredBB

originalBBpart2702:                               ; preds = %originalBB700
  br i1 %2789, label %2798, label %2818, !dbg !2626

2798:                                             ; preds = %originalBBpart2702
  %2799 = load i32, i32* @x.37
  %2800 = load i32, i32* @y.38
  %2801 = sub i32 %2799, 1
  %2802 = mul i32 %2799, %2801
  %2803 = urem i32 %2802, 2
  %2804 = icmp eq i32 %2803, 0
  %2805 = icmp slt i32 %2800, 10
  %2806 = or i1 %2804, %2805
  br i1 %2806, label %originalBB704, label %originalBB704alteredBB

originalBB704:                                    ; preds = %2798, %originalBB704alteredBB
  %2807 = load i8*, i8** %19, align 8, !dbg !2623
  %2808 = load i64, i64* %29, align 8, !dbg !2623
  %2809 = getelementptr inbounds i8, i8* %2807, i64 %2808, !dbg !2623
  store i8 39, i8* %2809, align 1, !dbg !2623
  %2810 = load i32, i32* @x.37
  %2811 = load i32, i32* @y.38
  %2812 = sub i32 %2810, 1
  %2813 = mul i32 %2810, %2812
  %2814 = urem i32 %2813, 2
  %2815 = icmp eq i32 %2814, 0
  %2816 = icmp slt i32 %2811, 10
  %2817 = or i1 %2815, %2816
  br i1 %2817, label %originalBBpart2706, label %originalBB704alteredBB

originalBBpart2706:                               ; preds = %originalBB704
  br label %2818, !dbg !2623

2818:                                             ; preds = %originalBBpart2706, %originalBBpart2702
  %2819 = load i64, i64* %29, align 8, !dbg !2626
  %2820 = add i64 %2819, 1, !dbg !2626
  store i64 %2820, i64* %29, align 8, !dbg !2626
  br label %2821, !dbg !2626

2821:                                             ; preds = %2818
  %2822 = load i32, i32* @x.37
  %2823 = load i32, i32* @y.38
  %2824 = sub i32 %2822, 1
  %2825 = mul i32 %2822, %2824
  %2826 = urem i32 %2825, 2
  %2827 = icmp eq i32 %2826, 0
  %2828 = icmp slt i32 %2823, 10
  %2829 = or i1 %2827, %2828
  br i1 %2829, label %originalBB708, label %originalBB708alteredBB

originalBB708:                                    ; preds = %2821, %originalBB708alteredBB
  %2830 = load i32, i32* @x.37
  %2831 = load i32, i32* @y.38
  %2832 = sub i32 %2830, 1
  %2833 = mul i32 %2830, %2832
  %2834 = urem i32 %2833, 2
  %2835 = icmp eq i32 %2834, 0
  %2836 = icmp slt i32 %2831, 10
  %2837 = or i1 %2835, %2836
  br i1 %2837, label %originalBBpart2710, label %originalBB708alteredBB

originalBBpart2710:                               ; preds = %originalBB708
  br label %2838, !dbg !2627

2838:                                             ; preds = %originalBBpart2710
  %2839 = load i32, i32* @x.37
  %2840 = load i32, i32* @y.38
  %2841 = sub i32 %2839, 1
  %2842 = mul i32 %2839, %2841
  %2843 = urem i32 %2842, 2
  %2844 = icmp eq i32 %2843, 0
  %2845 = icmp slt i32 %2840, 10
  %2846 = or i1 %2844, %2845
  br i1 %2846, label %originalBB712, label %originalBB712alteredBB

originalBB712:                                    ; preds = %2838, %originalBB712alteredBB
  %2847 = load i64, i64* %29, align 8, !dbg !2628
  %2848 = load i64, i64* %20, align 8, !dbg !2628
  %2849 = icmp ult i64 %2847, %2848, !dbg !2628
  %2850 = load i32, i32* @x.37
  %2851 = load i32, i32* @y.38
  %2852 = sub i32 %2850, 1
  %2853 = mul i32 %2850, %2852
  %2854 = urem i32 %2853, 2
  %2855 = icmp eq i32 %2854, 0
  %2856 = icmp slt i32 %2851, 10
  %2857 = or i1 %2855, %2856
  br i1 %2857, label %originalBBpart2714, label %originalBB712alteredBB

originalBBpart2714:                               ; preds = %originalBB712
  br i1 %2849, label %2858, label %2862, !dbg !2631

2858:                                             ; preds = %originalBBpart2714
  %2859 = load i8*, i8** %19, align 8, !dbg !2628
  %2860 = load i64, i64* %29, align 8, !dbg !2628
  %2861 = getelementptr inbounds i8, i8* %2859, i64 %2860, !dbg !2628
  store i8 92, i8* %2861, align 1, !dbg !2628
  br label %2862, !dbg !2628

2862:                                             ; preds = %2858, %originalBBpart2714
  %2863 = load i64, i64* %29, align 8, !dbg !2631
  %2864 = add i64 %2863, 1, !dbg !2631
  store i64 %2864, i64* %29, align 8, !dbg !2631
  br label %2865, !dbg !2631

2865:                                             ; preds = %2862
  %2866 = load i32, i32* @x.37
  %2867 = load i32, i32* @y.38
  %2868 = sub i32 %2866, 1
  %2869 = mul i32 %2866, %2868
  %2870 = urem i32 %2869, 2
  %2871 = icmp eq i32 %2870, 0
  %2872 = icmp slt i32 %2867, 10
  %2873 = or i1 %2871, %2872
  br i1 %2873, label %originalBB716, label %originalBB716alteredBB

originalBB716:                                    ; preds = %2865, %originalBB716alteredBB
  %2874 = load i32, i32* @x.37
  %2875 = load i32, i32* @y.38
  %2876 = sub i32 %2874, 1
  %2877 = mul i32 %2874, %2876
  %2878 = urem i32 %2877, 2
  %2879 = icmp eq i32 %2878, 0
  %2880 = icmp slt i32 %2875, 10
  %2881 = or i1 %2879, %2880
  br i1 %2881, label %originalBBpart2718, label %originalBB716alteredBB

originalBBpart2718:                               ; preds = %originalBB716
  br label %2882, !dbg !2632

2882:                                             ; preds = %originalBBpart2718
  %2883 = load i64, i64* %29, align 8, !dbg !2633
  %2884 = load i64, i64* %20, align 8, !dbg !2633
  %2885 = icmp ult i64 %2883, %2884, !dbg !2633
  br i1 %2885, label %2886, label %2890, !dbg !2636

2886:                                             ; preds = %2882
  %2887 = load i8*, i8** %19, align 8, !dbg !2633
  %2888 = load i64, i64* %29, align 8, !dbg !2633
  %2889 = getelementptr inbounds i8, i8* %2887, i64 %2888, !dbg !2633
  store i8 39, i8* %2889, align 1, !dbg !2633
  br label %2890, !dbg !2633

2890:                                             ; preds = %2886, %2882
  %2891 = load i32, i32* @x.37
  %2892 = load i32, i32* @y.38
  %2893 = sub i32 %2891, 1
  %2894 = mul i32 %2891, %2893
  %2895 = urem i32 %2894, 2
  %2896 = icmp eq i32 %2895, 0
  %2897 = icmp slt i32 %2892, 10
  %2898 = or i1 %2896, %2897
  br i1 %2898, label %originalBB720, label %originalBB720alteredBB

originalBB720:                                    ; preds = %2890, %originalBB720alteredBB
  %2899 = load i64, i64* %29, align 8, !dbg !2636
  %2900 = add i64 %2899, 1, !dbg !2636
  store i64 %2900, i64* %29, align 8, !dbg !2636
  %2901 = load i32, i32* @x.37
  %2902 = load i32, i32* @y.38
  %2903 = sub i32 %2901, 1
  %2904 = mul i32 %2901, %2903
  %2905 = urem i32 %2904, 2
  %2906 = icmp eq i32 %2905, 0
  %2907 = icmp slt i32 %2902, 10
  %2908 = or i1 %2906, %2907
  br i1 %2908, label %originalBBpart2724, label %originalBB720alteredBB

originalBBpart2724:                               ; preds = %originalBB720
  br label %2909, !dbg !2636

2909:                                             ; preds = %originalBBpart2724
  %2910 = load i32, i32* @x.37
  %2911 = load i32, i32* @y.38
  %2912 = sub i32 %2910, 1
  %2913 = mul i32 %2910, %2912
  %2914 = urem i32 %2913, 2
  %2915 = icmp eq i32 %2914, 0
  %2916 = icmp slt i32 %2911, 10
  %2917 = or i1 %2915, %2916
  br i1 %2917, label %originalBB726, label %originalBB726alteredBB

originalBB726:                                    ; preds = %2909, %originalBB726alteredBB
  store i8 0, i8* %36, align 1, !dbg !2637
  %2918 = load i32, i32* @x.37
  %2919 = load i32, i32* @y.38
  %2920 = sub i32 %2918, 1
  %2921 = mul i32 %2918, %2920
  %2922 = urem i32 %2921, 2
  %2923 = icmp eq i32 %2922, 0
  %2924 = icmp slt i32 %2919, 10
  %2925 = or i1 %2923, %2924
  br i1 %2925, label %originalBBpart2728, label %originalBB726alteredBB

originalBBpart2728:                               ; preds = %originalBB726
  br label %2926, !dbg !2638

2926:                                             ; preds = %originalBBpart2728, %2682
  %2927 = load i32, i32* @x.37
  %2928 = load i32, i32* @y.38
  %2929 = sub i32 %2927, 1
  %2930 = mul i32 %2927, %2929
  %2931 = urem i32 %2930, 2
  %2932 = icmp eq i32 %2931, 0
  %2933 = icmp slt i32 %2928, 10
  %2934 = or i1 %2932, %2933
  br i1 %2934, label %originalBB730, label %originalBB730alteredBB

originalBB730:                                    ; preds = %2926, %originalBB730alteredBB
  %2935 = load i32, i32* @x.37
  %2936 = load i32, i32* @y.38
  %2937 = sub i32 %2935, 1
  %2938 = mul i32 %2935, %2937
  %2939 = urem i32 %2938, 2
  %2940 = icmp eq i32 %2939, 0
  %2941 = icmp slt i32 %2936, 10
  %2942 = or i1 %2940, %2941
  br i1 %2942, label %originalBBpart2732, label %originalBB730alteredBB

originalBBpart2732:                               ; preds = %originalBB730
  br label %4585, !dbg !2639

2943:                                             ; preds = %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901, %901
  %2944 = load i32, i32* @x.37
  %2945 = load i32, i32* @y.38
  %2946 = sub i32 %2944, 1
  %2947 = mul i32 %2944, %2946
  %2948 = urem i32 %2947, 2
  %2949 = icmp eq i32 %2948, 0
  %2950 = icmp slt i32 %2945, 10
  %2951 = or i1 %2949, %2950
  br i1 %2951, label %originalBB734, label %originalBB734alteredBB

originalBB734:                                    ; preds = %2943, %originalBB734alteredBB
  store i8 1, i8* %43, align 1, !dbg !2640
  %2952 = load i32, i32* @x.37
  %2953 = load i32, i32* @y.38
  %2954 = sub i32 %2952, 1
  %2955 = mul i32 %2952, %2954
  %2956 = urem i32 %2955, 2
  %2957 = icmp eq i32 %2956, 0
  %2958 = icmp slt i32 %2953, 10
  %2959 = or i1 %2957, %2958
  br i1 %2959, label %originalBBpart2736, label %originalBB734alteredBB

originalBBpart2736:                               ; preds = %originalBB734
  br label %4585, !dbg !2641

2960:                                             ; preds = %901
  call void @llvm.dbg.declare(metadata i64* %44, metadata !2642, metadata !DIExpression()), !dbg !2644
  call void @llvm.dbg.declare(metadata i8* %45, metadata !2645, metadata !DIExpression()), !dbg !2646
  %2961 = load i8, i8* %34, align 1, !dbg !2647
  %2962 = trunc i8 %2961 to i1, !dbg !2647
  br i1 %2962, label %2963, label %2991, !dbg !2649

2963:                                             ; preds = %2960
  %2964 = load i32, i32* @x.37
  %2965 = load i32, i32* @y.38
  %2966 = sub i32 %2964, 1
  %2967 = mul i32 %2964, %2966
  %2968 = urem i32 %2967, 2
  %2969 = icmp eq i32 %2968, 0
  %2970 = icmp slt i32 %2965, 10
  %2971 = or i1 %2969, %2970
  br i1 %2971, label %originalBB738, label %originalBB738alteredBB

originalBB738:                                    ; preds = %2963, %originalBB738alteredBB
  store i64 1, i64* %44, align 8, !dbg !2650
  %2972 = call i16** @__ctype_b_loc() #15, !dbg !2652
  %2973 = load i16*, i16** %2972, align 8, !dbg !2652
  %2974 = load i8, i8* %39, align 1, !dbg !2652
  %2975 = zext i8 %2974 to i32, !dbg !2652
  %2976 = sext i32 %2975 to i64, !dbg !2652
  %2977 = getelementptr inbounds i16, i16* %2973, i64 %2976, !dbg !2652
  %2978 = load i16, i16* %2977, align 2, !dbg !2652
  %2979 = zext i16 %2978 to i32, !dbg !2652
  %2980 = and i32 %2979, 16384, !dbg !2652
  %2981 = icmp ne i32 %2980, 0, !dbg !2653
  %2982 = zext i1 %2981 to i8, !dbg !2654
  store i8 %2982, i8* %45, align 1, !dbg !2654
  %2983 = load i32, i32* @x.37
  %2984 = load i32, i32* @y.38
  %2985 = sub i32 %2983, 1
  %2986 = mul i32 %2983, %2985
  %2987 = urem i32 %2986, 2
  %2988 = icmp eq i32 %2987, 0
  %2989 = icmp slt i32 %2984, 10
  %2990 = or i1 %2988, %2989
  br i1 %2990, label %originalBBpart2744, label %originalBB738alteredBB

originalBBpart2744:                               ; preds = %originalBB738
  br label %3504, !dbg !2655

2991:                                             ; preds = %2960
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %46, metadata !2656, metadata !DIExpression()), !dbg !2673
  %2992 = load i32, i32* @x.37
  %2993 = load i32, i32* @y.38
  %2994 = sub i32 %2992, 1
  %2995 = mul i32 %2992, %2994
  %2996 = urem i32 %2995, 2
  %2997 = icmp eq i32 %2996, 0
  %2998 = icmp slt i32 %2993, 10
  %2999 = or i1 %2997, %2998
  br i1 %2999, label %originalBB746, label %originalBB746alteredBB

originalBB746:                                    ; preds = %2991, %originalBB746alteredBB
  %3000 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !2674
  call void @llvm.memset.p0i8.i64(i8* align 4 %3000, i8 0, i64 8, i1 false), !dbg !2674
  store i64 0, i64* %44, align 8, !dbg !2675
  store i8 1, i8* %45, align 1, !dbg !2676
  %3001 = load i64, i64* %22, align 8, !dbg !2677
  %3002 = icmp eq i64 %3001, -1, !dbg !2679
  %3003 = load i32, i32* @x.37
  %3004 = load i32, i32* @y.38
  %3005 = sub i32 %3003, 1
  %3006 = mul i32 %3003, %3005
  %3007 = urem i32 %3006, 2
  %3008 = icmp eq i32 %3007, 0
  %3009 = icmp slt i32 %3004, 10
  %3010 = or i1 %3008, %3009
  br i1 %3010, label %originalBBpart2748, label %originalBB746alteredBB

originalBBpart2748:                               ; preds = %originalBB746
  br i1 %3002, label %3011, label %3014, !dbg !2680

3011:                                             ; preds = %originalBBpart2748
  %3012 = load i8*, i8** %21, align 8, !dbg !2681
  %3013 = call i64 @strlen(i8* %3012) #13, !dbg !2682
  store i64 %3013, i64* %22, align 8, !dbg !2683
  br label %3014, !dbg !2684

3014:                                             ; preds = %3011, %originalBBpart2748
  %3015 = load i32, i32* @x.37
  %3016 = load i32, i32* @y.38
  %3017 = sub i32 %3015, 1
  %3018 = mul i32 %3015, %3017
  %3019 = urem i32 %3018, 2
  %3020 = icmp eq i32 %3019, 0
  %3021 = icmp slt i32 %3016, 10
  %3022 = or i1 %3020, %3021
  br i1 %3022, label %originalBB750, label %originalBB750alteredBB

originalBB750:                                    ; preds = %3014, %originalBB750alteredBB
  %3023 = load i32, i32* @x.37
  %3024 = load i32, i32* @y.38
  %3025 = sub i32 %3023, 1
  %3026 = mul i32 %3023, %3025
  %3027 = urem i32 %3026, 2
  %3028 = icmp eq i32 %3027, 0
  %3029 = icmp slt i32 %3024, 10
  %3030 = or i1 %3028, %3029
  br i1 %3030, label %originalBBpart2752, label %originalBB750alteredBB

originalBBpart2752:                               ; preds = %originalBB750
  br label %3031, !dbg !2685

3031:                                             ; preds = %originalBBpart2892, %originalBBpart2752
  call void @llvm.dbg.declare(metadata i32* %47, metadata !2686, metadata !DIExpression()), !dbg !2689
  call void @llvm.dbg.declare(metadata i64* %48, metadata !2690, metadata !DIExpression()), !dbg !2691
  %3032 = load i32, i32* @x.37
  %3033 = load i32, i32* @y.38
  %3034 = sub i32 %3032, 1
  %3035 = mul i32 %3032, %3034
  %3036 = urem i32 %3035, 2
  %3037 = icmp eq i32 %3036, 0
  %3038 = icmp slt i32 %3033, 10
  %3039 = or i1 %3037, %3038
  br i1 %3039, label %originalBB754, label %originalBB754alteredBB

originalBB754:                                    ; preds = %3031, %originalBB754alteredBB
  %3040 = load i8*, i8** %21, align 8, !dbg !2692
  %3041 = load i64, i64* %28, align 8, !dbg !2693
  %3042 = load i64, i64* %44, align 8, !dbg !2694
  %3043 = add i64 %3041, %3042, !dbg !2695
  %3044 = getelementptr inbounds i8, i8* %3040, i64 %3043, !dbg !2692
  %3045 = load i64, i64* %22, align 8, !dbg !2696
  %3046 = load i64, i64* %28, align 8, !dbg !2697
  %3047 = load i64, i64* %44, align 8, !dbg !2698
  %3048 = add i64 %3046, %3047, !dbg !2699
  %3049 = sub i64 %3045, %3048, !dbg !2700
  %3050 = call i64 @rpl_mbrtowc(i32* %47, i8* %3044, i64 %3049, %struct.__mbstate_t* %46), !dbg !2701
  store i64 %3050, i64* %48, align 8, !dbg !2691
  %3051 = load i64, i64* %48, align 8, !dbg !2702
  %3052 = icmp eq i64 %3051, 0, !dbg !2704
  %3053 = load i32, i32* @x.37
  %3054 = load i32, i32* @y.38
  %3055 = sub i32 %3053, 1
  %3056 = mul i32 %3053, %3055
  %3057 = urem i32 %3056, 2
  %3058 = icmp eq i32 %3057, 0
  %3059 = icmp slt i32 %3054, 10
  %3060 = or i1 %3058, %3059
  br i1 %3060, label %originalBBpart2771, label %originalBB754alteredBB

originalBBpart2771:                               ; preds = %originalBB754
  br i1 %3052, label %3061, label %3078, !dbg !2705

3061:                                             ; preds = %originalBBpart2771
  %3062 = load i32, i32* @x.37
  %3063 = load i32, i32* @y.38
  %3064 = sub i32 %3062, 1
  %3065 = mul i32 %3062, %3064
  %3066 = urem i32 %3065, 2
  %3067 = icmp eq i32 %3066, 0
  %3068 = icmp slt i32 %3063, 10
  %3069 = or i1 %3067, %3068
  br i1 %3069, label %originalBB773, label %originalBB773alteredBB

originalBB773:                                    ; preds = %3061, %originalBB773alteredBB
  %3070 = load i32, i32* @x.37
  %3071 = load i32, i32* @y.38
  %3072 = sub i32 %3070, 1
  %3073 = mul i32 %3070, %3072
  %3074 = urem i32 %3073, 2
  %3075 = icmp eq i32 %3074, 0
  %3076 = icmp slt i32 %3071, 10
  %3077 = or i1 %3075, %3076
  br i1 %3077, label %originalBBpart2775, label %originalBB773alteredBB

originalBBpart2775:                               ; preds = %originalBB773
  br label %3487, !dbg !2706

3078:                                             ; preds = %originalBBpart2771
  %3079 = load i64, i64* %48, align 8, !dbg !2707
  %3080 = icmp eq i64 %3079, -1, !dbg !2709
  br i1 %3080, label %3081, label %3098, !dbg !2710

3081:                                             ; preds = %3078
  %3082 = load i32, i32* @x.37
  %3083 = load i32, i32* @y.38
  %3084 = sub i32 %3082, 1
  %3085 = mul i32 %3082, %3084
  %3086 = urem i32 %3085, 2
  %3087 = icmp eq i32 %3086, 0
  %3088 = icmp slt i32 %3083, 10
  %3089 = or i1 %3087, %3088
  br i1 %3089, label %originalBB777, label %originalBB777alteredBB

originalBB777:                                    ; preds = %3081, %originalBB777alteredBB
  store i8 0, i8* %45, align 1, !dbg !2711
  %3090 = load i32, i32* @x.37
  %3091 = load i32, i32* @y.38
  %3092 = sub i32 %3090, 1
  %3093 = mul i32 %3090, %3092
  %3094 = urem i32 %3093, 2
  %3095 = icmp eq i32 %3094, 0
  %3096 = icmp slt i32 %3091, 10
  %3097 = or i1 %3095, %3096
  br i1 %3097, label %originalBBpart2779, label %originalBB777alteredBB

originalBBpart2779:                               ; preds = %originalBB777
  br label %3487, !dbg !2713

3098:                                             ; preds = %3078
  %3099 = load i32, i32* @x.37
  %3100 = load i32, i32* @y.38
  %3101 = sub i32 %3099, 1
  %3102 = mul i32 %3099, %3101
  %3103 = urem i32 %3102, 2
  %3104 = icmp eq i32 %3103, 0
  %3105 = icmp slt i32 %3100, 10
  %3106 = or i1 %3104, %3105
  br i1 %3106, label %originalBB781, label %originalBB781alteredBB

originalBB781:                                    ; preds = %3098, %originalBB781alteredBB
  %3107 = load i64, i64* %48, align 8, !dbg !2714
  %3108 = icmp eq i64 %3107, -2, !dbg !2716
  %3109 = load i32, i32* @x.37
  %3110 = load i32, i32* @y.38
  %3111 = sub i32 %3109, 1
  %3112 = mul i32 %3109, %3111
  %3113 = urem i32 %3112, 2
  %3114 = icmp eq i32 %3113, 0
  %3115 = icmp slt i32 %3110, 10
  %3116 = or i1 %3114, %3115
  br i1 %3116, label %originalBBpart2783, label %originalBB781alteredBB

originalBBpart2783:                               ; preds = %originalBB781
  br i1 %3108, label %3117, label %3219, !dbg !2717

3117:                                             ; preds = %originalBBpart2783
  store i8 0, i8* %45, align 1, !dbg !2718
  br label %3118, !dbg !2720

3118:                                             ; preds = %originalBBpart2814, %3117
  %3119 = load i32, i32* @x.37
  %3120 = load i32, i32* @y.38
  %3121 = sub i32 %3119, 1
  %3122 = mul i32 %3119, %3121
  %3123 = urem i32 %3122, 2
  %3124 = icmp eq i32 %3123, 0
  %3125 = icmp slt i32 %3120, 10
  %3126 = or i1 %3124, %3125
  br i1 %3126, label %originalBB785, label %originalBB785alteredBB

originalBB785:                                    ; preds = %3118, %originalBB785alteredBB
  %3127 = load i64, i64* %28, align 8, !dbg !2721
  %3128 = load i64, i64* %44, align 8, !dbg !2722
  %3129 = add i64 %3127, %3128, !dbg !2723
  %3130 = load i64, i64* %22, align 8, !dbg !2724
  %3131 = icmp ult i64 %3129, %3130, !dbg !2725
  %3132 = load i32, i32* @x.37
  %3133 = load i32, i32* @y.38
  %3134 = sub i32 %3132, 1
  %3135 = mul i32 %3132, %3134
  %3136 = urem i32 %3135, 2
  %3137 = icmp eq i32 %3136, 0
  %3138 = icmp slt i32 %3133, 10
  %3139 = or i1 %3137, %3138
  br i1 %3139, label %originalBBpart2791, label %originalBB785alteredBB

originalBBpart2791:                               ; preds = %originalBB785
  br i1 %3131, label %3140, label %3165, !dbg !2726

3140:                                             ; preds = %originalBBpart2791
  %3141 = load i32, i32* @x.37
  %3142 = load i32, i32* @y.38
  %3143 = sub i32 %3141, 1
  %3144 = mul i32 %3141, %3143
  %3145 = urem i32 %3144, 2
  %3146 = icmp eq i32 %3145, 0
  %3147 = icmp slt i32 %3142, 10
  %3148 = or i1 %3146, %3147
  br i1 %3148, label %originalBB793, label %originalBB793alteredBB

originalBB793:                                    ; preds = %3140, %originalBB793alteredBB
  %3149 = load i8*, i8** %21, align 8, !dbg !2727
  %3150 = load i64, i64* %28, align 8, !dbg !2728
  %3151 = load i64, i64* %44, align 8, !dbg !2729
  %3152 = add i64 %3150, %3151, !dbg !2730
  %3153 = getelementptr inbounds i8, i8* %3149, i64 %3152, !dbg !2727
  %3154 = load i8, i8* %3153, align 1, !dbg !2727
  %3155 = sext i8 %3154 to i32, !dbg !2727
  %3156 = icmp ne i32 %3155, 0, !dbg !2726
  %3157 = load i32, i32* @x.37
  %3158 = load i32, i32* @y.38
  %3159 = sub i32 %3157, 1
  %3160 = mul i32 %3157, %3159
  %3161 = urem i32 %3160, 2
  %3162 = icmp eq i32 %3161, 0
  %3163 = icmp slt i32 %3158, 10
  %3164 = or i1 %3162, %3163
  br i1 %3164, label %originalBBpart2797, label %originalBB793alteredBB

originalBBpart2797:                               ; preds = %originalBB793
  br label %3165

3165:                                             ; preds = %originalBBpart2797, %originalBBpart2791
  %3166 = phi i1 [ false, %originalBBpart2791 ], [ %3156, %originalBBpart2797 ], !dbg !2731
  %3167 = load i32, i32* @x.37
  %3168 = load i32, i32* @y.38
  %3169 = sub i32 %3167, 1
  %3170 = mul i32 %3167, %3169
  %3171 = urem i32 %3170, 2
  %3172 = icmp eq i32 %3171, 0
  %3173 = icmp slt i32 %3168, 10
  %3174 = or i1 %3172, %3173
  br i1 %3174, label %originalBB799, label %originalBB799alteredBB

originalBB799:                                    ; preds = %3165, %originalBB799alteredBB
  %3175 = load i32, i32* @x.37
  %3176 = load i32, i32* @y.38
  %3177 = sub i32 %3175, 1
  %3178 = mul i32 %3175, %3177
  %3179 = urem i32 %3178, 2
  %3180 = icmp eq i32 %3179, 0
  %3181 = icmp slt i32 %3176, 10
  %3182 = or i1 %3180, %3181
  br i1 %3182, label %originalBBpart2801, label %originalBB799alteredBB

originalBBpart2801:                               ; preds = %originalBB799
  br i1 %3166, label %3183, label %3202, !dbg !2720

3183:                                             ; preds = %originalBBpart2801
  %3184 = load i32, i32* @x.37
  %3185 = load i32, i32* @y.38
  %3186 = sub i32 %3184, 1
  %3187 = mul i32 %3184, %3186
  %3188 = urem i32 %3187, 2
  %3189 = icmp eq i32 %3188, 0
  %3190 = icmp slt i32 %3185, 10
  %3191 = or i1 %3189, %3190
  br i1 %3191, label %originalBB803, label %originalBB803alteredBB

originalBB803:                                    ; preds = %3183, %originalBB803alteredBB
  %3192 = load i64, i64* %44, align 8, !dbg !2732
  %3193 = add i64 %3192, 1, !dbg !2732
  store i64 %3193, i64* %44, align 8, !dbg !2732
  %3194 = load i32, i32* @x.37
  %3195 = load i32, i32* @y.38
  %3196 = sub i32 %3194, 1
  %3197 = mul i32 %3194, %3196
  %3198 = urem i32 %3197, 2
  %3199 = icmp eq i32 %3198, 0
  %3200 = icmp slt i32 %3195, 10
  %3201 = or i1 %3199, %3200
  br i1 %3201, label %originalBBpart2814, label %originalBB803alteredBB

originalBBpart2814:                               ; preds = %originalBB803
  br label %3118, !dbg !2720, !llvm.loop !2733

3202:                                             ; preds = %originalBBpart2801
  %3203 = load i32, i32* @x.37
  %3204 = load i32, i32* @y.38
  %3205 = sub i32 %3203, 1
  %3206 = mul i32 %3203, %3205
  %3207 = urem i32 %3206, 2
  %3208 = icmp eq i32 %3207, 0
  %3209 = icmp slt i32 %3204, 10
  %3210 = or i1 %3208, %3209
  br i1 %3210, label %originalBB816, label %originalBB816alteredBB

originalBB816:                                    ; preds = %3202, %originalBB816alteredBB
  %3211 = load i32, i32* @x.37
  %3212 = load i32, i32* @y.38
  %3213 = sub i32 %3211, 1
  %3214 = mul i32 %3211, %3213
  %3215 = urem i32 %3214, 2
  %3216 = icmp eq i32 %3215, 0
  %3217 = icmp slt i32 %3212, 10
  %3218 = or i1 %3216, %3217
  br i1 %3218, label %originalBBpart2818, label %originalBB816alteredBB

originalBBpart2818:                               ; preds = %originalBB816
  br label %3487, !dbg !2734

3219:                                             ; preds = %originalBBpart2783
  %3220 = load i32, i32* @x.37
  %3221 = load i32, i32* @y.38
  %3222 = sub i32 %3220, 1
  %3223 = mul i32 %3220, %3222
  %3224 = urem i32 %3223, 2
  %3225 = icmp eq i32 %3224, 0
  %3226 = icmp slt i32 %3221, 10
  %3227 = or i1 %3225, %3226
  br i1 %3227, label %originalBB820, label %originalBB820alteredBB

originalBB820:                                    ; preds = %3219, %originalBB820alteredBB
  %3228 = load i8, i8* %35, align 1, !dbg !2735
  %3229 = trunc i8 %3228 to i1, !dbg !2735
  %3230 = load i32, i32* @x.37
  %3231 = load i32, i32* @y.38
  %3232 = sub i32 %3230, 1
  %3233 = mul i32 %3230, %3232
  %3234 = urem i32 %3233, 2
  %3235 = icmp eq i32 %3234, 0
  %3236 = icmp slt i32 %3231, 10
  %3237 = or i1 %3235, %3236
  br i1 %3237, label %originalBBpart2822, label %originalBB820alteredBB

originalBBpart2822:                               ; preds = %originalBB820
  br i1 %3229, label %3238, label %3359, !dbg !2738

3238:                                             ; preds = %originalBBpart2822
  %3239 = load i32, i32* %23, align 4, !dbg !2739
  %3240 = icmp eq i32 %3239, 2, !dbg !2740
  br i1 %3240, label %3241, label %3359, !dbg !2741

3241:                                             ; preds = %3238
  call void @llvm.dbg.declare(metadata i64* %49, metadata !2742, metadata !DIExpression()), !dbg !2744
  %3242 = load i32, i32* @x.37
  %3243 = load i32, i32* @y.38
  %3244 = sub i32 %3242, 1
  %3245 = mul i32 %3242, %3244
  %3246 = urem i32 %3245, 2
  %3247 = icmp eq i32 %3246, 0
  %3248 = icmp slt i32 %3243, 10
  %3249 = or i1 %3247, %3248
  br i1 %3249, label %originalBB824, label %originalBB824alteredBB

originalBB824:                                    ; preds = %3241, %originalBB824alteredBB
  store i64 1, i64* %49, align 8, !dbg !2745
  %3250 = load i32, i32* @x.37
  %3251 = load i32, i32* @y.38
  %3252 = sub i32 %3250, 1
  %3253 = mul i32 %3250, %3252
  %3254 = urem i32 %3253, 2
  %3255 = icmp eq i32 %3254, 0
  %3256 = icmp slt i32 %3251, 10
  %3257 = or i1 %3255, %3256
  br i1 %3257, label %originalBBpart2826, label %originalBB824alteredBB

originalBBpart2826:                               ; preds = %originalBB824
  br label %3258, !dbg !2747

3258:                                             ; preds = %originalBBpart2848, %originalBBpart2826
  %3259 = load i64, i64* %49, align 8, !dbg !2748
  %3260 = load i64, i64* %48, align 8, !dbg !2750
  %3261 = icmp ult i64 %3259, %3260, !dbg !2751
  br i1 %3261, label %3262, label %3342, !dbg !2752

3262:                                             ; preds = %3258
  %3263 = load i8*, i8** %21, align 8, !dbg !2753
  %3264 = load i64, i64* %28, align 8, !dbg !2754
  %3265 = load i64, i64* %44, align 8, !dbg !2755
  %3266 = add i64 %3264, %3265, !dbg !2756
  %3267 = load i64, i64* %49, align 8, !dbg !2757
  %3268 = add i64 %3266, %3267, !dbg !2758
  %3269 = getelementptr inbounds i8, i8* %3263, i64 %3268, !dbg !2753
  %3270 = load i8, i8* %3269, align 1, !dbg !2753
  %3271 = sext i8 %3270 to i32, !dbg !2753
  switch i32 %3271, label %3289 [
    i32 91, label %3272
    i32 92, label %3272
    i32 94, label %3272
    i32 96, label %3272
    i32 124, label %3272
  ], !dbg !2759

3272:                                             ; preds = %3262, %3262, %3262, %3262, %3262
  %3273 = load i32, i32* @x.37
  %3274 = load i32, i32* @y.38
  %3275 = sub i32 %3273, 1
  %3276 = mul i32 %3273, %3275
  %3277 = urem i32 %3276, 2
  %3278 = icmp eq i32 %3277, 0
  %3279 = icmp slt i32 %3274, 10
  %3280 = or i1 %3278, %3279
  br i1 %3280, label %originalBB828, label %originalBB828alteredBB

originalBB828:                                    ; preds = %3272, %originalBB828alteredBB
  %3281 = load i32, i32* @x.37
  %3282 = load i32, i32* @y.38
  %3283 = sub i32 %3281, 1
  %3284 = mul i32 %3281, %3283
  %3285 = urem i32 %3284, 2
  %3286 = icmp eq i32 %3285, 0
  %3287 = icmp slt i32 %3282, 10
  %3288 = or i1 %3286, %3287
  br i1 %3288, label %originalBBpart2830, label %originalBB828alteredBB

originalBBpart2830:                               ; preds = %originalBB828
  br label %5982, !dbg !2760

3289:                                             ; preds = %3262
  %3290 = load i32, i32* @x.37
  %3291 = load i32, i32* @y.38
  %3292 = sub i32 %3290, 1
  %3293 = mul i32 %3290, %3292
  %3294 = urem i32 %3293, 2
  %3295 = icmp eq i32 %3294, 0
  %3296 = icmp slt i32 %3291, 10
  %3297 = or i1 %3295, %3296
  br i1 %3297, label %originalBB832, label %originalBB832alteredBB

originalBB832:                                    ; preds = %3289, %originalBB832alteredBB
  %3298 = load i32, i32* @x.37
  %3299 = load i32, i32* @y.38
  %3300 = sub i32 %3298, 1
  %3301 = mul i32 %3298, %3300
  %3302 = urem i32 %3301, 2
  %3303 = icmp eq i32 %3302, 0
  %3304 = icmp slt i32 %3299, 10
  %3305 = or i1 %3303, %3304
  br i1 %3305, label %originalBBpart2834, label %originalBB832alteredBB

originalBBpart2834:                               ; preds = %originalBB832
  br label %3306, !dbg !2762

3306:                                             ; preds = %originalBBpart2834
  %3307 = load i32, i32* @x.37
  %3308 = load i32, i32* @y.38
  %3309 = sub i32 %3307, 1
  %3310 = mul i32 %3307, %3309
  %3311 = urem i32 %3310, 2
  %3312 = icmp eq i32 %3311, 0
  %3313 = icmp slt i32 %3308, 10
  %3314 = or i1 %3312, %3313
  br i1 %3314, label %originalBB836, label %originalBB836alteredBB

originalBB836:                                    ; preds = %3306, %originalBB836alteredBB
  %3315 = load i32, i32* @x.37
  %3316 = load i32, i32* @y.38
  %3317 = sub i32 %3315, 1
  %3318 = mul i32 %3315, %3317
  %3319 = urem i32 %3318, 2
  %3320 = icmp eq i32 %3319, 0
  %3321 = icmp slt i32 %3316, 10
  %3322 = or i1 %3320, %3321
  br i1 %3322, label %originalBBpart2838, label %originalBB836alteredBB

originalBBpart2838:                               ; preds = %originalBB836
  br label %3323, !dbg !2763

3323:                                             ; preds = %originalBBpart2838
  %3324 = load i32, i32* @x.37
  %3325 = load i32, i32* @y.38
  %3326 = sub i32 %3324, 1
  %3327 = mul i32 %3324, %3326
  %3328 = urem i32 %3327, 2
  %3329 = icmp eq i32 %3328, 0
  %3330 = icmp slt i32 %3325, 10
  %3331 = or i1 %3329, %3330
  br i1 %3331, label %originalBB840, label %originalBB840alteredBB

originalBB840:                                    ; preds = %3323, %originalBB840alteredBB
  %3332 = load i64, i64* %49, align 8, !dbg !2764
  %3333 = add i64 %3332, 1, !dbg !2764
  store i64 %3333, i64* %49, align 8, !dbg !2764
  %3334 = load i32, i32* @x.37
  %3335 = load i32, i32* @y.38
  %3336 = sub i32 %3334, 1
  %3337 = mul i32 %3334, %3336
  %3338 = urem i32 %3337, 2
  %3339 = icmp eq i32 %3338, 0
  %3340 = icmp slt i32 %3335, 10
  %3341 = or i1 %3339, %3340
  br i1 %3341, label %originalBBpart2848, label %originalBB840alteredBB

originalBBpart2848:                               ; preds = %originalBB840
  br label %3258, !dbg !2765, !llvm.loop !2766

3342:                                             ; preds = %3258
  %3343 = load i32, i32* @x.37
  %3344 = load i32, i32* @y.38
  %3345 = sub i32 %3343, 1
  %3346 = mul i32 %3343, %3345
  %3347 = urem i32 %3346, 2
  %3348 = icmp eq i32 %3347, 0
  %3349 = icmp slt i32 %3344, 10
  %3350 = or i1 %3348, %3349
  br i1 %3350, label %originalBB850, label %originalBB850alteredBB

originalBB850:                                    ; preds = %3342, %originalBB850alteredBB
  %3351 = load i32, i32* @x.37
  %3352 = load i32, i32* @y.38
  %3353 = sub i32 %3351, 1
  %3354 = mul i32 %3351, %3353
  %3355 = urem i32 %3354, 2
  %3356 = icmp eq i32 %3355, 0
  %3357 = icmp slt i32 %3352, 10
  %3358 = or i1 %3356, %3357
  br i1 %3358, label %originalBBpart2852, label %originalBB850alteredBB

originalBBpart2852:                               ; preds = %originalBB850
  br label %3359, !dbg !2768

3359:                                             ; preds = %originalBBpart2852, %3238, %originalBBpart2822
  %3360 = load i32, i32* @x.37
  %3361 = load i32, i32* @y.38
  %3362 = sub i32 %3360, 1
  %3363 = mul i32 %3360, %3362
  %3364 = urem i32 %3363, 2
  %3365 = icmp eq i32 %3364, 0
  %3366 = icmp slt i32 %3361, 10
  %3367 = or i1 %3365, %3366
  br i1 %3367, label %originalBB854, label %originalBB854alteredBB

originalBB854:                                    ; preds = %3359, %originalBB854alteredBB
  %3368 = load i32, i32* %47, align 4, !dbg !2769
  %3369 = call i32 @iswprint(i32 %3368) #10, !dbg !2771
  %3370 = icmp ne i32 %3369, 0, !dbg !2771
  %3371 = load i32, i32* @x.37
  %3372 = load i32, i32* @y.38
  %3373 = sub i32 %3371, 1
  %3374 = mul i32 %3371, %3373
  %3375 = urem i32 %3374, 2
  %3376 = icmp eq i32 %3375, 0
  %3377 = icmp slt i32 %3372, 10
  %3378 = or i1 %3376, %3377
  br i1 %3378, label %originalBBpart2856, label %originalBB854alteredBB

originalBBpart2856:                               ; preds = %originalBB854
  br i1 %3370, label %3396, label %3379, !dbg !2772

3379:                                             ; preds = %originalBBpart2856
  %3380 = load i32, i32* @x.37
  %3381 = load i32, i32* @y.38
  %3382 = sub i32 %3380, 1
  %3383 = mul i32 %3380, %3382
  %3384 = urem i32 %3383, 2
  %3385 = icmp eq i32 %3384, 0
  %3386 = icmp slt i32 %3381, 10
  %3387 = or i1 %3385, %3386
  br i1 %3387, label %originalBB858, label %originalBB858alteredBB

originalBB858:                                    ; preds = %3379, %originalBB858alteredBB
  store i8 0, i8* %45, align 1, !dbg !2773
  %3388 = load i32, i32* @x.37
  %3389 = load i32, i32* @y.38
  %3390 = sub i32 %3388, 1
  %3391 = mul i32 %3388, %3390
  %3392 = urem i32 %3391, 2
  %3393 = icmp eq i32 %3392, 0
  %3394 = icmp slt i32 %3389, 10
  %3395 = or i1 %3393, %3394
  br i1 %3395, label %originalBBpart2860, label %originalBB858alteredBB

originalBBpart2860:                               ; preds = %originalBB858
  br label %3396, !dbg !2774

3396:                                             ; preds = %originalBBpart2860, %originalBBpart2856
  %3397 = load i32, i32* @x.37
  %3398 = load i32, i32* @y.38
  %3399 = sub i32 %3397, 1
  %3400 = mul i32 %3397, %3399
  %3401 = urem i32 %3400, 2
  %3402 = icmp eq i32 %3401, 0
  %3403 = icmp slt i32 %3398, 10
  %3404 = or i1 %3402, %3403
  br i1 %3404, label %originalBB862, label %originalBB862alteredBB

originalBB862:                                    ; preds = %3396, %originalBB862alteredBB
  %3405 = load i64, i64* %48, align 8, !dbg !2775
  %3406 = load i64, i64* %44, align 8, !dbg !2776
  %3407 = add i64 %3406, %3405, !dbg !2776
  store i64 %3407, i64* %44, align 8, !dbg !2776
  %3408 = load i32, i32* @x.37
  %3409 = load i32, i32* @y.38
  %3410 = sub i32 %3408, 1
  %3411 = mul i32 %3408, %3410
  %3412 = urem i32 %3411, 2
  %3413 = icmp eq i32 %3412, 0
  %3414 = icmp slt i32 %3409, 10
  %3415 = or i1 %3413, %3414
  br i1 %3415, label %originalBBpart2874, label %originalBB862alteredBB

originalBBpart2874:                               ; preds = %originalBB862
  br label %3416

3416:                                             ; preds = %originalBBpart2874
  %3417 = load i32, i32* @x.37
  %3418 = load i32, i32* @y.38
  %3419 = sub i32 %3417, 1
  %3420 = mul i32 %3417, %3419
  %3421 = urem i32 %3420, 2
  %3422 = icmp eq i32 %3421, 0
  %3423 = icmp slt i32 %3418, 10
  %3424 = or i1 %3422, %3423
  br i1 %3424, label %originalBB876, label %originalBB876alteredBB

originalBB876:                                    ; preds = %3416, %originalBB876alteredBB
  %3425 = load i32, i32* @x.37
  %3426 = load i32, i32* @y.38
  %3427 = sub i32 %3425, 1
  %3428 = mul i32 %3425, %3427
  %3429 = urem i32 %3428, 2
  %3430 = icmp eq i32 %3429, 0
  %3431 = icmp slt i32 %3426, 10
  %3432 = or i1 %3430, %3431
  br i1 %3432, label %originalBBpart2878, label %originalBB876alteredBB

originalBBpart2878:                               ; preds = %originalBB876
  br label %3433

3433:                                             ; preds = %originalBBpart2878
  %3434 = load i32, i32* @x.37
  %3435 = load i32, i32* @y.38
  %3436 = sub i32 %3434, 1
  %3437 = mul i32 %3434, %3436
  %3438 = urem i32 %3437, 2
  %3439 = icmp eq i32 %3438, 0
  %3440 = icmp slt i32 %3435, 10
  %3441 = or i1 %3439, %3440
  br i1 %3441, label %originalBB880, label %originalBB880alteredBB

originalBB880:                                    ; preds = %3433, %originalBB880alteredBB
  %3442 = load i32, i32* @x.37
  %3443 = load i32, i32* @y.38
  %3444 = sub i32 %3442, 1
  %3445 = mul i32 %3442, %3444
  %3446 = urem i32 %3445, 2
  %3447 = icmp eq i32 %3446, 0
  %3448 = icmp slt i32 %3443, 10
  %3449 = or i1 %3447, %3448
  br i1 %3449, label %originalBBpart2882, label %originalBB880alteredBB

originalBBpart2882:                               ; preds = %originalBB880
  br label %3450

3450:                                             ; preds = %originalBBpart2882
  %3451 = load i32, i32* @x.37
  %3452 = load i32, i32* @y.38
  %3453 = sub i32 %3451, 1
  %3454 = mul i32 %3451, %3453
  %3455 = urem i32 %3454, 2
  %3456 = icmp eq i32 %3455, 0
  %3457 = icmp slt i32 %3452, 10
  %3458 = or i1 %3456, %3457
  br i1 %3458, label %originalBB884, label %originalBB884alteredBB

originalBB884:                                    ; preds = %3450, %originalBB884alteredBB
  %3459 = load i32, i32* @x.37
  %3460 = load i32, i32* @y.38
  %3461 = sub i32 %3459, 1
  %3462 = mul i32 %3459, %3461
  %3463 = urem i32 %3462, 2
  %3464 = icmp eq i32 %3463, 0
  %3465 = icmp slt i32 %3460, 10
  %3466 = or i1 %3464, %3465
  br i1 %3466, label %originalBBpart2886, label %originalBB884alteredBB

originalBBpart2886:                               ; preds = %originalBB884
  br label %3467, !dbg !2777

3467:                                             ; preds = %originalBBpart2886
  %3468 = load i32, i32* @x.37
  %3469 = load i32, i32* @y.38
  %3470 = sub i32 %3468, 1
  %3471 = mul i32 %3468, %3470
  %3472 = urem i32 %3471, 2
  %3473 = icmp eq i32 %3472, 0
  %3474 = icmp slt i32 %3469, 10
  %3475 = or i1 %3473, %3474
  br i1 %3475, label %originalBB888, label %originalBB888alteredBB

originalBB888:                                    ; preds = %3467, %originalBB888alteredBB
  %3476 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !2778
  %3477 = icmp ne i32 %3476, 0, !dbg !2779
  %3478 = xor i1 %3477, true, !dbg !2779
  %3479 = load i32, i32* @x.37
  %3480 = load i32, i32* @y.38
  %3481 = sub i32 %3479, 1
  %3482 = mul i32 %3479, %3481
  %3483 = urem i32 %3482, 2
  %3484 = icmp eq i32 %3483, 0
  %3485 = icmp slt i32 %3480, 10
  %3486 = or i1 %3484, %3485
  br i1 %3486, label %originalBBpart2892, label %originalBB888alteredBB

originalBBpart2892:                               ; preds = %originalBB888
  br i1 %3478, label %3031, label %3487, !dbg !2777, !llvm.loop !2780

3487:                                             ; preds = %originalBBpart2892, %originalBBpart2818, %originalBBpart2779, %originalBBpart2775
  %3488 = load i32, i32* @x.37
  %3489 = load i32, i32* @y.38
  %3490 = sub i32 %3488, 1
  %3491 = mul i32 %3488, %3490
  %3492 = urem i32 %3491, 2
  %3493 = icmp eq i32 %3492, 0
  %3494 = icmp slt i32 %3489, 10
  %3495 = or i1 %3493, %3494
  br i1 %3495, label %originalBB894, label %originalBB894alteredBB

originalBB894:                                    ; preds = %3487, %originalBB894alteredBB
  %3496 = load i32, i32* @x.37
  %3497 = load i32, i32* @y.38
  %3498 = sub i32 %3496, 1
  %3499 = mul i32 %3496, %3498
  %3500 = urem i32 %3499, 2
  %3501 = icmp eq i32 %3500, 0
  %3502 = icmp slt i32 %3497, 10
  %3503 = or i1 %3501, %3502
  br i1 %3503, label %originalBBpart2896, label %originalBB894alteredBB

originalBBpart2896:                               ; preds = %originalBB894
  br label %3504

3504:                                             ; preds = %originalBBpart2896, %originalBBpart2744
  %3505 = load i32, i32* @x.37
  %3506 = load i32, i32* @y.38
  %3507 = sub i32 %3505, 1
  %3508 = mul i32 %3505, %3507
  %3509 = urem i32 %3508, 2
  %3510 = icmp eq i32 %3509, 0
  %3511 = icmp slt i32 %3506, 10
  %3512 = or i1 %3510, %3511
  br i1 %3512, label %originalBB898, label %originalBB898alteredBB

originalBB898:                                    ; preds = %3504, %originalBB898alteredBB
  %3513 = load i8, i8* %45, align 1, !dbg !2782
  %3514 = trunc i8 %3513 to i1, !dbg !2782
  %3515 = zext i1 %3514 to i8, !dbg !2783
  store i8 %3515, i8* %43, align 1, !dbg !2783
  %3516 = load i64, i64* %44, align 8, !dbg !2784
  %3517 = icmp ult i64 1, %3516, !dbg !2786
  %3518 = load i32, i32* @x.37
  %3519 = load i32, i32* @y.38
  %3520 = sub i32 %3518, 1
  %3521 = mul i32 %3518, %3520
  %3522 = urem i32 %3521, 2
  %3523 = icmp eq i32 %3522, 0
  %3524 = icmp slt i32 %3519, 10
  %3525 = or i1 %3523, %3524
  br i1 %3525, label %originalBBpart2900, label %originalBB898alteredBB

originalBBpart2900:                               ; preds = %originalBB898
  br i1 %3517, label %3564, label %3526, !dbg !2787

3526:                                             ; preds = %originalBBpart2900
  %3527 = load i32, i32* @x.37
  %3528 = load i32, i32* @y.38
  %3529 = sub i32 %3527, 1
  %3530 = mul i32 %3527, %3529
  %3531 = urem i32 %3530, 2
  %3532 = icmp eq i32 %3531, 0
  %3533 = icmp slt i32 %3528, 10
  %3534 = or i1 %3532, %3533
  br i1 %3534, label %originalBB902, label %originalBB902alteredBB

originalBB902:                                    ; preds = %3526, %originalBB902alteredBB
  %3535 = load i8, i8* %33, align 1, !dbg !2788
  %3536 = trunc i8 %3535 to i1, !dbg !2788
  %3537 = load i32, i32* @x.37
  %3538 = load i32, i32* @y.38
  %3539 = sub i32 %3537, 1
  %3540 = mul i32 %3537, %3539
  %3541 = urem i32 %3540, 2
  %3542 = icmp eq i32 %3541, 0
  %3543 = icmp slt i32 %3538, 10
  %3544 = or i1 %3542, %3543
  br i1 %3544, label %originalBBpart2904, label %originalBB902alteredBB

originalBBpart2904:                               ; preds = %originalBB902
  br i1 %3536, label %3545, label %4568, !dbg !2789

3545:                                             ; preds = %originalBBpart2904
  %3546 = load i32, i32* @x.37
  %3547 = load i32, i32* @y.38
  %3548 = sub i32 %3546, 1
  %3549 = mul i32 %3546, %3548
  %3550 = urem i32 %3549, 2
  %3551 = icmp eq i32 %3550, 0
  %3552 = icmp slt i32 %3547, 10
  %3553 = or i1 %3551, %3552
  br i1 %3553, label %originalBB906, label %originalBB906alteredBB

originalBB906:                                    ; preds = %3545, %originalBB906alteredBB
  %3554 = load i8, i8* %45, align 1, !dbg !2790
  %3555 = trunc i8 %3554 to i1, !dbg !2790
  %3556 = load i32, i32* @x.37
  %3557 = load i32, i32* @y.38
  %3558 = sub i32 %3556, 1
  %3559 = mul i32 %3556, %3558
  %3560 = urem i32 %3559, 2
  %3561 = icmp eq i32 %3560, 0
  %3562 = icmp slt i32 %3557, 10
  %3563 = or i1 %3561, %3562
  br i1 %3563, label %originalBBpart2908, label %originalBB906alteredBB

originalBBpart2908:                               ; preds = %originalBB906
  br i1 %3555, label %4568, label %3564, !dbg !2791

3564:                                             ; preds = %originalBBpart2908, %originalBBpart2900
  call void @llvm.dbg.declare(metadata i64* %50, metadata !2792, metadata !DIExpression()), !dbg !2794
  %3565 = load i32, i32* @x.37
  %3566 = load i32, i32* @y.38
  %3567 = sub i32 %3565, 1
  %3568 = mul i32 %3565, %3567
  %3569 = urem i32 %3568, 2
  %3570 = icmp eq i32 %3569, 0
  %3571 = icmp slt i32 %3566, 10
  %3572 = or i1 %3570, %3571
  br i1 %3572, label %originalBB910, label %originalBB910alteredBB

originalBB910:                                    ; preds = %3564, %originalBB910alteredBB
  %3573 = load i64, i64* %28, align 8, !dbg !2795
  %3574 = load i64, i64* %44, align 8, !dbg !2796
  %3575 = add i64 %3573, %3574, !dbg !2797
  store i64 %3575, i64* %50, align 8, !dbg !2794
  %3576 = load i32, i32* @x.37
  %3577 = load i32, i32* @y.38
  %3578 = sub i32 %3576, 1
  %3579 = mul i32 %3576, %3578
  %3580 = urem i32 %3579, 2
  %3581 = icmp eq i32 %3580, 0
  %3582 = icmp slt i32 %3577, 10
  %3583 = or i1 %3581, %3582
  br i1 %3583, label %originalBBpart2918, label %originalBB910alteredBB

originalBBpart2918:                               ; preds = %originalBB910
  br label %3584, !dbg !2798

3584:                                             ; preds = %4545, %originalBBpart2918
  %3585 = load i32, i32* @x.37
  %3586 = load i32, i32* @y.38
  %3587 = sub i32 %3585, 1
  %3588 = mul i32 %3585, %3587
  %3589 = urem i32 %3588, 2
  %3590 = icmp eq i32 %3589, 0
  %3591 = icmp slt i32 %3586, 10
  %3592 = or i1 %3590, %3591
  br i1 %3592, label %originalBB920, label %originalBB920alteredBB

originalBB920:                                    ; preds = %3584, %originalBB920alteredBB
  %3593 = load i8, i8* %33, align 1, !dbg !2799
  %3594 = trunc i8 %3593 to i1, !dbg !2799
  %3595 = load i32, i32* @x.37
  %3596 = load i32, i32* @y.38
  %3597 = sub i32 %3595, 1
  %3598 = mul i32 %3595, %3597
  %3599 = urem i32 %3598, 2
  %3600 = icmp eq i32 %3599, 0
  %3601 = icmp slt i32 %3596, 10
  %3602 = or i1 %3600, %3601
  br i1 %3602, label %originalBBpart2922, label %originalBB920alteredBB

originalBBpart2922:                               ; preds = %originalBB920
  br i1 %3594, label %3603, label %4108, !dbg !2804

3603:                                             ; preds = %originalBBpart2922
  %3604 = load i8, i8* %45, align 1, !dbg !2805
  %3605 = trunc i8 %3604 to i1, !dbg !2805
  br i1 %3605, label %4108, label %3606, !dbg !2806

3606:                                             ; preds = %3603
  br label %3607, !dbg !2807

3607:                                             ; preds = %3606
  %3608 = load i8, i8* %35, align 1, !dbg !2809
  %3609 = trunc i8 %3608 to i1, !dbg !2809
  br i1 %3609, label %3610, label %3627, !dbg !2812

3610:                                             ; preds = %3607
  %3611 = load i32, i32* @x.37
  %3612 = load i32, i32* @y.38
  %3613 = sub i32 %3611, 1
  %3614 = mul i32 %3611, %3613
  %3615 = urem i32 %3614, 2
  %3616 = icmp eq i32 %3615, 0
  %3617 = icmp slt i32 %3612, 10
  %3618 = or i1 %3616, %3617
  br i1 %3618, label %originalBB924, label %originalBB924alteredBB

originalBB924:                                    ; preds = %3610, %originalBB924alteredBB
  %3619 = load i32, i32* @x.37
  %3620 = load i32, i32* @y.38
  %3621 = sub i32 %3619, 1
  %3622 = mul i32 %3619, %3621
  %3623 = urem i32 %3622, 2
  %3624 = icmp eq i32 %3623, 0
  %3625 = icmp slt i32 %3620, 10
  %3626 = or i1 %3624, %3625
  br i1 %3626, label %originalBBpart2926, label %originalBB924alteredBB

originalBBpart2926:                               ; preds = %originalBB924
  br label %5982, !dbg !2809

3627:                                             ; preds = %3607
  %3628 = load i32, i32* @x.37
  %3629 = load i32, i32* @y.38
  %3630 = sub i32 %3628, 1
  %3631 = mul i32 %3628, %3630
  %3632 = urem i32 %3631, 2
  %3633 = icmp eq i32 %3632, 0
  %3634 = icmp slt i32 %3629, 10
  %3635 = or i1 %3633, %3634
  br i1 %3635, label %originalBB928, label %originalBB928alteredBB

originalBB928:                                    ; preds = %3627, %originalBB928alteredBB
  store i8 1, i8* %42, align 1, !dbg !2812
  %3636 = load i32, i32* %23, align 4, !dbg !2813
  %3637 = icmp eq i32 %3636, 2, !dbg !2813
  %3638 = load i32, i32* @x.37
  %3639 = load i32, i32* @y.38
  %3640 = sub i32 %3638, 1
  %3641 = mul i32 %3638, %3640
  %3642 = urem i32 %3641, 2
  %3643 = icmp eq i32 %3642, 0
  %3644 = icmp slt i32 %3639, 10
  %3645 = or i1 %3643, %3644
  br i1 %3645, label %originalBBpart2930, label %originalBB928alteredBB

originalBBpart2930:                               ; preds = %originalBB928
  br i1 %3637, label %3646, label %3862, !dbg !2813

3646:                                             ; preds = %originalBBpart2930
  %3647 = load i32, i32* @x.37
  %3648 = load i32, i32* @y.38
  %3649 = sub i32 %3647, 1
  %3650 = mul i32 %3647, %3649
  %3651 = urem i32 %3650, 2
  %3652 = icmp eq i32 %3651, 0
  %3653 = icmp slt i32 %3648, 10
  %3654 = or i1 %3652, %3653
  br i1 %3654, label %originalBB932, label %originalBB932alteredBB

originalBB932:                                    ; preds = %3646, %originalBB932alteredBB
  %3655 = load i8, i8* %36, align 1, !dbg !2813
  %3656 = trunc i8 %3655 to i1, !dbg !2813
  %3657 = load i32, i32* @x.37
  %3658 = load i32, i32* @y.38
  %3659 = sub i32 %3657, 1
  %3660 = mul i32 %3657, %3659
  %3661 = urem i32 %3660, 2
  %3662 = icmp eq i32 %3661, 0
  %3663 = icmp slt i32 %3658, 10
  %3664 = or i1 %3662, %3663
  br i1 %3664, label %originalBBpart2934, label %originalBB932alteredBB

originalBBpart2934:                               ; preds = %originalBB932
  br i1 %3656, label %3862, label %3665, !dbg !2812

3665:                                             ; preds = %originalBBpart2934
  %3666 = load i32, i32* @x.37
  %3667 = load i32, i32* @y.38
  %3668 = sub i32 %3666, 1
  %3669 = mul i32 %3666, %3668
  %3670 = urem i32 %3669, 2
  %3671 = icmp eq i32 %3670, 0
  %3672 = icmp slt i32 %3667, 10
  %3673 = or i1 %3671, %3672
  br i1 %3673, label %originalBB936, label %originalBB936alteredBB

originalBB936:                                    ; preds = %3665, %originalBB936alteredBB
  %3674 = load i32, i32* @x.37
  %3675 = load i32, i32* @y.38
  %3676 = sub i32 %3674, 1
  %3677 = mul i32 %3674, %3676
  %3678 = urem i32 %3677, 2
  %3679 = icmp eq i32 %3678, 0
  %3680 = icmp slt i32 %3675, 10
  %3681 = or i1 %3679, %3680
  br i1 %3681, label %originalBBpart2938, label %originalBB936alteredBB

originalBBpart2938:                               ; preds = %originalBB936
  br label %3682, !dbg !2815

3682:                                             ; preds = %originalBBpart2938
  %3683 = load i32, i32* @x.37
  %3684 = load i32, i32* @y.38
  %3685 = sub i32 %3683, 1
  %3686 = mul i32 %3683, %3685
  %3687 = urem i32 %3686, 2
  %3688 = icmp eq i32 %3687, 0
  %3689 = icmp slt i32 %3684, 10
  %3690 = or i1 %3688, %3689
  br i1 %3690, label %originalBB940, label %originalBB940alteredBB

originalBB940:                                    ; preds = %3682, %originalBB940alteredBB
  %3691 = load i64, i64* %29, align 8, !dbg !2817
  %3692 = load i64, i64* %20, align 8, !dbg !2817
  %3693 = icmp ult i64 %3691, %3692, !dbg !2817
  %3694 = load i32, i32* @x.37
  %3695 = load i32, i32* @y.38
  %3696 = sub i32 %3694, 1
  %3697 = mul i32 %3694, %3696
  %3698 = urem i32 %3697, 2
  %3699 = icmp eq i32 %3698, 0
  %3700 = icmp slt i32 %3695, 10
  %3701 = or i1 %3699, %3700
  br i1 %3701, label %originalBBpart2942, label %originalBB940alteredBB

originalBBpart2942:                               ; preds = %originalBB940
  br i1 %3693, label %3702, label %3722, !dbg !2820

3702:                                             ; preds = %originalBBpart2942
  %3703 = load i32, i32* @x.37
  %3704 = load i32, i32* @y.38
  %3705 = sub i32 %3703, 1
  %3706 = mul i32 %3703, %3705
  %3707 = urem i32 %3706, 2
  %3708 = icmp eq i32 %3707, 0
  %3709 = icmp slt i32 %3704, 10
  %3710 = or i1 %3708, %3709
  br i1 %3710, label %originalBB944, label %originalBB944alteredBB

originalBB944:                                    ; preds = %3702, %originalBB944alteredBB
  %3711 = load i8*, i8** %19, align 8, !dbg !2817
  %3712 = load i64, i64* %29, align 8, !dbg !2817
  %3713 = getelementptr inbounds i8, i8* %3711, i64 %3712, !dbg !2817
  store i8 39, i8* %3713, align 1, !dbg !2817
  %3714 = load i32, i32* @x.37
  %3715 = load i32, i32* @y.38
  %3716 = sub i32 %3714, 1
  %3717 = mul i32 %3714, %3716
  %3718 = urem i32 %3717, 2
  %3719 = icmp eq i32 %3718, 0
  %3720 = icmp slt i32 %3715, 10
  %3721 = or i1 %3719, %3720
  br i1 %3721, label %originalBBpart2946, label %originalBB944alteredBB

originalBBpart2946:                               ; preds = %originalBB944
  br label %3722, !dbg !2817

3722:                                             ; preds = %originalBBpart2946, %originalBBpart2942
  %3723 = load i32, i32* @x.37
  %3724 = load i32, i32* @y.38
  %3725 = sub i32 %3723, 1
  %3726 = mul i32 %3723, %3725
  %3727 = urem i32 %3726, 2
  %3728 = icmp eq i32 %3727, 0
  %3729 = icmp slt i32 %3724, 10
  %3730 = or i1 %3728, %3729
  br i1 %3730, label %originalBB948, label %originalBB948alteredBB

originalBB948:                                    ; preds = %3722, %originalBB948alteredBB
  %3731 = load i64, i64* %29, align 8, !dbg !2820
  %3732 = add i64 %3731, 1, !dbg !2820
  store i64 %3732, i64* %29, align 8, !dbg !2820
  %3733 = load i32, i32* @x.37
  %3734 = load i32, i32* @y.38
  %3735 = sub i32 %3733, 1
  %3736 = mul i32 %3733, %3735
  %3737 = urem i32 %3736, 2
  %3738 = icmp eq i32 %3737, 0
  %3739 = icmp slt i32 %3734, 10
  %3740 = or i1 %3738, %3739
  br i1 %3740, label %originalBBpart2956, label %originalBB948alteredBB

originalBBpart2956:                               ; preds = %originalBB948
  br label %3741, !dbg !2820

3741:                                             ; preds = %originalBBpart2956
  br label %3742, !dbg !2815

3742:                                             ; preds = %3741
  %3743 = load i32, i32* @x.37
  %3744 = load i32, i32* @y.38
  %3745 = sub i32 %3743, 1
  %3746 = mul i32 %3743, %3745
  %3747 = urem i32 %3746, 2
  %3748 = icmp eq i32 %3747, 0
  %3749 = icmp slt i32 %3744, 10
  %3750 = or i1 %3748, %3749
  br i1 %3750, label %originalBB958, label %originalBB958alteredBB

originalBB958:                                    ; preds = %3742, %originalBB958alteredBB
  %3751 = load i64, i64* %29, align 8, !dbg !2821
  %3752 = load i64, i64* %20, align 8, !dbg !2821
  %3753 = icmp ult i64 %3751, %3752, !dbg !2821
  %3754 = load i32, i32* @x.37
  %3755 = load i32, i32* @y.38
  %3756 = sub i32 %3754, 1
  %3757 = mul i32 %3754, %3756
  %3758 = urem i32 %3757, 2
  %3759 = icmp eq i32 %3758, 0
  %3760 = icmp slt i32 %3755, 10
  %3761 = or i1 %3759, %3760
  br i1 %3761, label %originalBBpart2960, label %originalBB958alteredBB

originalBBpart2960:                               ; preds = %originalBB958
  br i1 %3753, label %3762, label %3766, !dbg !2824

3762:                                             ; preds = %originalBBpart2960
  %3763 = load i8*, i8** %19, align 8, !dbg !2821
  %3764 = load i64, i64* %29, align 8, !dbg !2821
  %3765 = getelementptr inbounds i8, i8* %3763, i64 %3764, !dbg !2821
  store i8 36, i8* %3765, align 1, !dbg !2821
  br label %3766, !dbg !2821

3766:                                             ; preds = %3762, %originalBBpart2960
  %3767 = load i32, i32* @x.37
  %3768 = load i32, i32* @y.38
  %3769 = sub i32 %3767, 1
  %3770 = mul i32 %3767, %3769
  %3771 = urem i32 %3770, 2
  %3772 = icmp eq i32 %3771, 0
  %3773 = icmp slt i32 %3768, 10
  %3774 = or i1 %3772, %3773
  br i1 %3774, label %originalBB962, label %originalBB962alteredBB

originalBB962:                                    ; preds = %3766, %originalBB962alteredBB
  %3775 = load i64, i64* %29, align 8, !dbg !2824
  %3776 = add i64 %3775, 1, !dbg !2824
  store i64 %3776, i64* %29, align 8, !dbg !2824
  %3777 = load i32, i32* @x.37
  %3778 = load i32, i32* @y.38
  %3779 = sub i32 %3777, 1
  %3780 = mul i32 %3777, %3779
  %3781 = urem i32 %3780, 2
  %3782 = icmp eq i32 %3781, 0
  %3783 = icmp slt i32 %3778, 10
  %3784 = or i1 %3782, %3783
  br i1 %3784, label %originalBBpart2967, label %originalBB962alteredBB

originalBBpart2967:                               ; preds = %originalBB962
  br label %3785, !dbg !2824

3785:                                             ; preds = %originalBBpart2967
  br label %3786, !dbg !2815

3786:                                             ; preds = %3785
  %3787 = load i32, i32* @x.37
  %3788 = load i32, i32* @y.38
  %3789 = sub i32 %3787, 1
  %3790 = mul i32 %3787, %3789
  %3791 = urem i32 %3790, 2
  %3792 = icmp eq i32 %3791, 0
  %3793 = icmp slt i32 %3788, 10
  %3794 = or i1 %3792, %3793
  br i1 %3794, label %originalBB969, label %originalBB969alteredBB

originalBB969:                                    ; preds = %3786, %originalBB969alteredBB
  %3795 = load i64, i64* %29, align 8, !dbg !2825
  %3796 = load i64, i64* %20, align 8, !dbg !2825
  %3797 = icmp ult i64 %3795, %3796, !dbg !2825
  %3798 = load i32, i32* @x.37
  %3799 = load i32, i32* @y.38
  %3800 = sub i32 %3798, 1
  %3801 = mul i32 %3798, %3800
  %3802 = urem i32 %3801, 2
  %3803 = icmp eq i32 %3802, 0
  %3804 = icmp slt i32 %3799, 10
  %3805 = or i1 %3803, %3804
  br i1 %3805, label %originalBBpart2971, label %originalBB969alteredBB

originalBBpart2971:                               ; preds = %originalBB969
  br i1 %3797, label %3806, label %3826, !dbg !2828

3806:                                             ; preds = %originalBBpart2971
  %3807 = load i32, i32* @x.37
  %3808 = load i32, i32* @y.38
  %3809 = sub i32 %3807, 1
  %3810 = mul i32 %3807, %3809
  %3811 = urem i32 %3810, 2
  %3812 = icmp eq i32 %3811, 0
  %3813 = icmp slt i32 %3808, 10
  %3814 = or i1 %3812, %3813
  br i1 %3814, label %originalBB973, label %originalBB973alteredBB

originalBB973:                                    ; preds = %3806, %originalBB973alteredBB
  %3815 = load i8*, i8** %19, align 8, !dbg !2825
  %3816 = load i64, i64* %29, align 8, !dbg !2825
  %3817 = getelementptr inbounds i8, i8* %3815, i64 %3816, !dbg !2825
  store i8 39, i8* %3817, align 1, !dbg !2825
  %3818 = load i32, i32* @x.37
  %3819 = load i32, i32* @y.38
  %3820 = sub i32 %3818, 1
  %3821 = mul i32 %3818, %3820
  %3822 = urem i32 %3821, 2
  %3823 = icmp eq i32 %3822, 0
  %3824 = icmp slt i32 %3819, 10
  %3825 = or i1 %3823, %3824
  br i1 %3825, label %originalBBpart2975, label %originalBB973alteredBB

originalBBpart2975:                               ; preds = %originalBB973
  br label %3826, !dbg !2825

3826:                                             ; preds = %originalBBpart2975, %originalBBpart2971
  %3827 = load i32, i32* @x.37
  %3828 = load i32, i32* @y.38
  %3829 = sub i32 %3827, 1
  %3830 = mul i32 %3827, %3829
  %3831 = urem i32 %3830, 2
  %3832 = icmp eq i32 %3831, 0
  %3833 = icmp slt i32 %3828, 10
  %3834 = or i1 %3832, %3833
  br i1 %3834, label %originalBB977, label %originalBB977alteredBB

originalBB977:                                    ; preds = %3826, %originalBB977alteredBB
  %3835 = load i64, i64* %29, align 8, !dbg !2828
  %3836 = add i64 %3835, 1, !dbg !2828
  store i64 %3836, i64* %29, align 8, !dbg !2828
  %3837 = load i32, i32* @x.37
  %3838 = load i32, i32* @y.38
  %3839 = sub i32 %3837, 1
  %3840 = mul i32 %3837, %3839
  %3841 = urem i32 %3840, 2
  %3842 = icmp eq i32 %3841, 0
  %3843 = icmp slt i32 %3838, 10
  %3844 = or i1 %3842, %3843
  br i1 %3844, label %originalBBpart2982, label %originalBB977alteredBB

originalBBpart2982:                               ; preds = %originalBB977
  br label %3845, !dbg !2828

3845:                                             ; preds = %originalBBpart2982
  %3846 = load i32, i32* @x.37
  %3847 = load i32, i32* @y.38
  %3848 = sub i32 %3846, 1
  %3849 = mul i32 %3846, %3848
  %3850 = urem i32 %3849, 2
  %3851 = icmp eq i32 %3850, 0
  %3852 = icmp slt i32 %3847, 10
  %3853 = or i1 %3851, %3852
  br i1 %3853, label %originalBB984, label %originalBB984alteredBB

originalBB984:                                    ; preds = %3845, %originalBB984alteredBB
  store i8 1, i8* %36, align 1, !dbg !2815
  %3854 = load i32, i32* @x.37
  %3855 = load i32, i32* @y.38
  %3856 = sub i32 %3854, 1
  %3857 = mul i32 %3854, %3856
  %3858 = urem i32 %3857, 2
  %3859 = icmp eq i32 %3858, 0
  %3860 = icmp slt i32 %3855, 10
  %3861 = or i1 %3859, %3860
  br i1 %3861, label %originalBBpart2986, label %originalBB984alteredBB

originalBBpart2986:                               ; preds = %originalBB984
  br label %3862, !dbg !2815

3862:                                             ; preds = %originalBBpart2986, %originalBBpart2934, %originalBBpart2930
  br label %3863, !dbg !2812

3863:                                             ; preds = %3862
  %3864 = load i32, i32* @x.37
  %3865 = load i32, i32* @y.38
  %3866 = sub i32 %3864, 1
  %3867 = mul i32 %3864, %3866
  %3868 = urem i32 %3867, 2
  %3869 = icmp eq i32 %3868, 0
  %3870 = icmp slt i32 %3865, 10
  %3871 = or i1 %3869, %3870
  br i1 %3871, label %originalBB988, label %originalBB988alteredBB

originalBB988:                                    ; preds = %3863, %originalBB988alteredBB
  %3872 = load i64, i64* %29, align 8, !dbg !2829
  %3873 = load i64, i64* %20, align 8, !dbg !2829
  %3874 = icmp ult i64 %3872, %3873, !dbg !2829
  %3875 = load i32, i32* @x.37
  %3876 = load i32, i32* @y.38
  %3877 = sub i32 %3875, 1
  %3878 = mul i32 %3875, %3877
  %3879 = urem i32 %3878, 2
  %3880 = icmp eq i32 %3879, 0
  %3881 = icmp slt i32 %3876, 10
  %3882 = or i1 %3880, %3881
  br i1 %3882, label %originalBBpart2990, label %originalBB988alteredBB

originalBBpart2990:                               ; preds = %originalBB988
  br i1 %3874, label %3883, label %3903, !dbg !2832

3883:                                             ; preds = %originalBBpart2990
  %3884 = load i32, i32* @x.37
  %3885 = load i32, i32* @y.38
  %3886 = sub i32 %3884, 1
  %3887 = mul i32 %3884, %3886
  %3888 = urem i32 %3887, 2
  %3889 = icmp eq i32 %3888, 0
  %3890 = icmp slt i32 %3885, 10
  %3891 = or i1 %3889, %3890
  br i1 %3891, label %originalBB992, label %originalBB992alteredBB

originalBB992:                                    ; preds = %3883, %originalBB992alteredBB
  %3892 = load i8*, i8** %19, align 8, !dbg !2829
  %3893 = load i64, i64* %29, align 8, !dbg !2829
  %3894 = getelementptr inbounds i8, i8* %3892, i64 %3893, !dbg !2829
  store i8 92, i8* %3894, align 1, !dbg !2829
  %3895 = load i32, i32* @x.37
  %3896 = load i32, i32* @y.38
  %3897 = sub i32 %3895, 1
  %3898 = mul i32 %3895, %3897
  %3899 = urem i32 %3898, 2
  %3900 = icmp eq i32 %3899, 0
  %3901 = icmp slt i32 %3896, 10
  %3902 = or i1 %3900, %3901
  br i1 %3902, label %originalBBpart2994, label %originalBB992alteredBB

originalBBpart2994:                               ; preds = %originalBB992
  br label %3903, !dbg !2829

3903:                                             ; preds = %originalBBpart2994, %originalBBpart2990
  %3904 = load i32, i32* @x.37
  %3905 = load i32, i32* @y.38
  %3906 = sub i32 %3904, 1
  %3907 = mul i32 %3904, %3906
  %3908 = urem i32 %3907, 2
  %3909 = icmp eq i32 %3908, 0
  %3910 = icmp slt i32 %3905, 10
  %3911 = or i1 %3909, %3910
  br i1 %3911, label %originalBB996, label %originalBB996alteredBB

originalBB996:                                    ; preds = %3903, %originalBB996alteredBB
  %3912 = load i64, i64* %29, align 8, !dbg !2832
  %3913 = add i64 %3912, 1, !dbg !2832
  store i64 %3913, i64* %29, align 8, !dbg !2832
  %3914 = load i32, i32* @x.37
  %3915 = load i32, i32* @y.38
  %3916 = sub i32 %3914, 1
  %3917 = mul i32 %3914, %3916
  %3918 = urem i32 %3917, 2
  %3919 = icmp eq i32 %3918, 0
  %3920 = icmp slt i32 %3915, 10
  %3921 = or i1 %3919, %3920
  br i1 %3921, label %originalBBpart21011, label %originalBB996alteredBB

originalBBpart21011:                              ; preds = %originalBB996
  br label %3922, !dbg !2832

3922:                                             ; preds = %originalBBpart21011
  %3923 = load i32, i32* @x.37
  %3924 = load i32, i32* @y.38
  %3925 = sub i32 %3923, 1
  %3926 = mul i32 %3923, %3925
  %3927 = urem i32 %3926, 2
  %3928 = icmp eq i32 %3927, 0
  %3929 = icmp slt i32 %3924, 10
  %3930 = or i1 %3928, %3929
  br i1 %3930, label %originalBB1013, label %originalBB1013alteredBB

originalBB1013:                                   ; preds = %3922, %originalBB1013alteredBB
  %3931 = load i32, i32* @x.37
  %3932 = load i32, i32* @y.38
  %3933 = sub i32 %3931, 1
  %3934 = mul i32 %3931, %3933
  %3935 = urem i32 %3934, 2
  %3936 = icmp eq i32 %3935, 0
  %3937 = icmp slt i32 %3932, 10
  %3938 = or i1 %3936, %3937
  br i1 %3938, label %originalBBpart21015, label %originalBB1013alteredBB

originalBBpart21015:                              ; preds = %originalBB1013
  br label %3939, !dbg !2812

3939:                                             ; preds = %originalBBpart21015
  br label %3940, !dbg !2833

3940:                                             ; preds = %3939
  %3941 = load i32, i32* @x.37
  %3942 = load i32, i32* @y.38
  %3943 = sub i32 %3941, 1
  %3944 = mul i32 %3941, %3943
  %3945 = urem i32 %3944, 2
  %3946 = icmp eq i32 %3945, 0
  %3947 = icmp slt i32 %3942, 10
  %3948 = or i1 %3946, %3947
  br i1 %3948, label %originalBB1017, label %originalBB1017alteredBB

originalBB1017:                                   ; preds = %3940, %originalBB1017alteredBB
  %3949 = load i64, i64* %29, align 8, !dbg !2834
  %3950 = load i64, i64* %20, align 8, !dbg !2834
  %3951 = icmp ult i64 %3949, %3950, !dbg !2834
  %3952 = load i32, i32* @x.37
  %3953 = load i32, i32* @y.38
  %3954 = sub i32 %3952, 1
  %3955 = mul i32 %3952, %3954
  %3956 = urem i32 %3955, 2
  %3957 = icmp eq i32 %3956, 0
  %3958 = icmp slt i32 %3953, 10
  %3959 = or i1 %3957, %3958
  br i1 %3959, label %originalBBpart21019, label %originalBB1017alteredBB

originalBBpart21019:                              ; preds = %originalBB1017
  br i1 %3951, label %3960, label %3985, !dbg !2837

3960:                                             ; preds = %originalBBpart21019
  %3961 = load i32, i32* @x.37
  %3962 = load i32, i32* @y.38
  %3963 = sub i32 %3961, 1
  %3964 = mul i32 %3961, %3963
  %3965 = urem i32 %3964, 2
  %3966 = icmp eq i32 %3965, 0
  %3967 = icmp slt i32 %3962, 10
  %3968 = or i1 %3966, %3967
  br i1 %3968, label %originalBB1021, label %originalBB1021alteredBB

originalBB1021:                                   ; preds = %3960, %originalBB1021alteredBB
  %3969 = load i8, i8* %39, align 1, !dbg !2834
  %3970 = zext i8 %3969 to i32, !dbg !2834
  %3971 = ashr i32 %3970, 6, !dbg !2834
  %3972 = add nsw i32 48, %3971, !dbg !2834
  %3973 = trunc i32 %3972 to i8, !dbg !2834
  %3974 = load i8*, i8** %19, align 8, !dbg !2834
  %3975 = load i64, i64* %29, align 8, !dbg !2834
  %3976 = getelementptr inbounds i8, i8* %3974, i64 %3975, !dbg !2834
  store i8 %3973, i8* %3976, align 1, !dbg !2834
  %3977 = load i32, i32* @x.37
  %3978 = load i32, i32* @y.38
  %3979 = sub i32 %3977, 1
  %3980 = mul i32 %3977, %3979
  %3981 = urem i32 %3980, 2
  %3982 = icmp eq i32 %3981, 0
  %3983 = icmp slt i32 %3978, 10
  %3984 = or i1 %3982, %3983
  br i1 %3984, label %originalBBpart21042, label %originalBB1021alteredBB

originalBBpart21042:                              ; preds = %originalBB1021
  br label %3985, !dbg !2834

3985:                                             ; preds = %originalBBpart21042, %originalBBpart21019
  %3986 = load i32, i32* @x.37
  %3987 = load i32, i32* @y.38
  %3988 = sub i32 %3986, 1
  %3989 = mul i32 %3986, %3988
  %3990 = urem i32 %3989, 2
  %3991 = icmp eq i32 %3990, 0
  %3992 = icmp slt i32 %3987, 10
  %3993 = or i1 %3991, %3992
  br i1 %3993, label %originalBB1044, label %originalBB1044alteredBB

originalBB1044:                                   ; preds = %3985, %originalBB1044alteredBB
  %3994 = load i64, i64* %29, align 8, !dbg !2837
  %3995 = add i64 %3994, 1, !dbg !2837
  store i64 %3995, i64* %29, align 8, !dbg !2837
  %3996 = load i32, i32* @x.37
  %3997 = load i32, i32* @y.38
  %3998 = sub i32 %3996, 1
  %3999 = mul i32 %3996, %3998
  %4000 = urem i32 %3999, 2
  %4001 = icmp eq i32 %4000, 0
  %4002 = icmp slt i32 %3997, 10
  %4003 = or i1 %4001, %4002
  br i1 %4003, label %originalBBpart21051, label %originalBB1044alteredBB

originalBBpart21051:                              ; preds = %originalBB1044
  br label %4004, !dbg !2837

4004:                                             ; preds = %originalBBpart21051
  %4005 = load i32, i32* @x.37
  %4006 = load i32, i32* @y.38
  %4007 = sub i32 %4005, 1
  %4008 = mul i32 %4005, %4007
  %4009 = urem i32 %4008, 2
  %4010 = icmp eq i32 %4009, 0
  %4011 = icmp slt i32 %4006, 10
  %4012 = or i1 %4010, %4011
  br i1 %4012, label %originalBB1053, label %originalBB1053alteredBB

originalBB1053:                                   ; preds = %4004, %originalBB1053alteredBB
  %4013 = load i32, i32* @x.37
  %4014 = load i32, i32* @y.38
  %4015 = sub i32 %4013, 1
  %4016 = mul i32 %4013, %4015
  %4017 = urem i32 %4016, 2
  %4018 = icmp eq i32 %4017, 0
  %4019 = icmp slt i32 %4014, 10
  %4020 = or i1 %4018, %4019
  br i1 %4020, label %originalBBpart21055, label %originalBB1053alteredBB

originalBBpart21055:                              ; preds = %originalBB1053
  br label %4021, !dbg !2838

4021:                                             ; preds = %originalBBpart21055
  %4022 = load i32, i32* @x.37
  %4023 = load i32, i32* @y.38
  %4024 = sub i32 %4022, 1
  %4025 = mul i32 %4022, %4024
  %4026 = urem i32 %4025, 2
  %4027 = icmp eq i32 %4026, 0
  %4028 = icmp slt i32 %4023, 10
  %4029 = or i1 %4027, %4028
  br i1 %4029, label %originalBB1057, label %originalBB1057alteredBB

originalBB1057:                                   ; preds = %4021, %originalBB1057alteredBB
  %4030 = load i64, i64* %29, align 8, !dbg !2839
  %4031 = load i64, i64* %20, align 8, !dbg !2839
  %4032 = icmp ult i64 %4030, %4031, !dbg !2839
  %4033 = load i32, i32* @x.37
  %4034 = load i32, i32* @y.38
  %4035 = sub i32 %4033, 1
  %4036 = mul i32 %4033, %4035
  %4037 = urem i32 %4036, 2
  %4038 = icmp eq i32 %4037, 0
  %4039 = icmp slt i32 %4034, 10
  %4040 = or i1 %4038, %4039
  br i1 %4040, label %originalBBpart21059, label %originalBB1057alteredBB

originalBBpart21059:                              ; preds = %originalBB1057
  br i1 %4032, label %4041, label %4067, !dbg !2842

4041:                                             ; preds = %originalBBpart21059
  %4042 = load i32, i32* @x.37
  %4043 = load i32, i32* @y.38
  %4044 = sub i32 %4042, 1
  %4045 = mul i32 %4042, %4044
  %4046 = urem i32 %4045, 2
  %4047 = icmp eq i32 %4046, 0
  %4048 = icmp slt i32 %4043, 10
  %4049 = or i1 %4047, %4048
  br i1 %4049, label %originalBB1061, label %originalBB1061alteredBB

originalBB1061:                                   ; preds = %4041, %originalBB1061alteredBB
  %4050 = load i8, i8* %39, align 1, !dbg !2839
  %4051 = zext i8 %4050 to i32, !dbg !2839
  %4052 = ashr i32 %4051, 3, !dbg !2839
  %4053 = and i32 %4052, 7, !dbg !2839
  %4054 = add nsw i32 48, %4053, !dbg !2839
  %4055 = trunc i32 %4054 to i8, !dbg !2839
  %4056 = load i8*, i8** %19, align 8, !dbg !2839
  %4057 = load i64, i64* %29, align 8, !dbg !2839
  %4058 = getelementptr inbounds i8, i8* %4056, i64 %4057, !dbg !2839
  store i8 %4055, i8* %4058, align 1, !dbg !2839
  %4059 = load i32, i32* @x.37
  %4060 = load i32, i32* @y.38
  %4061 = sub i32 %4059, 1
  %4062 = mul i32 %4059, %4061
  %4063 = urem i32 %4062, 2
  %4064 = icmp eq i32 %4063, 0
  %4065 = icmp slt i32 %4060, 10
  %4066 = or i1 %4064, %4065
  br i1 %4066, label %originalBBpart21084, label %originalBB1061alteredBB

originalBBpart21084:                              ; preds = %originalBB1061
  br label %4067, !dbg !2839

4067:                                             ; preds = %originalBBpart21084, %originalBBpart21059
  %4068 = load i32, i32* @x.37
  %4069 = load i32, i32* @y.38
  %4070 = sub i32 %4068, 1
  %4071 = mul i32 %4068, %4070
  %4072 = urem i32 %4071, 2
  %4073 = icmp eq i32 %4072, 0
  %4074 = icmp slt i32 %4069, 10
  %4075 = or i1 %4073, %4074
  br i1 %4075, label %originalBB1086, label %originalBB1086alteredBB

originalBB1086:                                   ; preds = %4067, %originalBB1086alteredBB
  %4076 = load i64, i64* %29, align 8, !dbg !2842
  %4077 = add i64 %4076, 1, !dbg !2842
  store i64 %4077, i64* %29, align 8, !dbg !2842
  %4078 = load i32, i32* @x.37
  %4079 = load i32, i32* @y.38
  %4080 = sub i32 %4078, 1
  %4081 = mul i32 %4078, %4080
  %4082 = urem i32 %4081, 2
  %4083 = icmp eq i32 %4082, 0
  %4084 = icmp slt i32 %4079, 10
  %4085 = or i1 %4083, %4084
  br i1 %4085, label %originalBBpart21093, label %originalBB1086alteredBB

originalBBpart21093:                              ; preds = %originalBB1086
  br label %4086, !dbg !2842

4086:                                             ; preds = %originalBBpart21093
  %4087 = load i32, i32* @x.37
  %4088 = load i32, i32* @y.38
  %4089 = sub i32 %4087, 1
  %4090 = mul i32 %4087, %4089
  %4091 = urem i32 %4090, 2
  %4092 = icmp eq i32 %4091, 0
  %4093 = icmp slt i32 %4088, 10
  %4094 = or i1 %4092, %4093
  br i1 %4094, label %originalBB1095, label %originalBB1095alteredBB

originalBB1095:                                   ; preds = %4086, %originalBB1095alteredBB
  %4095 = load i8, i8* %39, align 1, !dbg !2843
  %4096 = zext i8 %4095 to i32, !dbg !2843
  %4097 = and i32 %4096, 7, !dbg !2844
  %4098 = add nsw i32 48, %4097, !dbg !2845
  %4099 = trunc i32 %4098 to i8, !dbg !2846
  store i8 %4099, i8* %39, align 1, !dbg !2847
  %4100 = load i32, i32* @x.37
  %4101 = load i32, i32* @y.38
  %4102 = sub i32 %4100, 1
  %4103 = mul i32 %4100, %4102
  %4104 = urem i32 %4103, 2
  %4105 = icmp eq i32 %4104, 0
  %4106 = icmp slt i32 %4101, 10
  %4107 = or i1 %4105, %4106
  br i1 %4107, label %originalBBpart21122, label %originalBB1095alteredBB

originalBBpart21122:                              ; preds = %originalBB1095
  br label %4221, !dbg !2848

4108:                                             ; preds = %3603, %originalBBpart2922
  %4109 = load i32, i32* @x.37
  %4110 = load i32, i32* @y.38
  %4111 = sub i32 %4109, 1
  %4112 = mul i32 %4109, %4111
  %4113 = urem i32 %4112, 2
  %4114 = icmp eq i32 %4113, 0
  %4115 = icmp slt i32 %4110, 10
  %4116 = or i1 %4114, %4115
  br i1 %4116, label %originalBB1124, label %originalBB1124alteredBB

originalBB1124:                                   ; preds = %4108, %originalBB1124alteredBB
  %4117 = load i8, i8* %41, align 1, !dbg !2849
  %4118 = trunc i8 %4117 to i1, !dbg !2849
  %4119 = load i32, i32* @x.37
  %4120 = load i32, i32* @y.38
  %4121 = sub i32 %4119, 1
  %4122 = mul i32 %4119, %4121
  %4123 = urem i32 %4122, 2
  %4124 = icmp eq i32 %4123, 0
  %4125 = icmp slt i32 %4120, 10
  %4126 = or i1 %4124, %4125
  br i1 %4126, label %originalBBpart21126, label %originalBB1124alteredBB

originalBBpart21126:                              ; preds = %originalBB1124
  br i1 %4118, label %4127, label %4204, !dbg !2851

4127:                                             ; preds = %originalBBpart21126
  br label %4128, !dbg !2852

4128:                                             ; preds = %4127
  %4129 = load i32, i32* @x.37
  %4130 = load i32, i32* @y.38
  %4131 = sub i32 %4129, 1
  %4132 = mul i32 %4129, %4131
  %4133 = urem i32 %4132, 2
  %4134 = icmp eq i32 %4133, 0
  %4135 = icmp slt i32 %4130, 10
  %4136 = or i1 %4134, %4135
  br i1 %4136, label %originalBB1128, label %originalBB1128alteredBB

originalBB1128:                                   ; preds = %4128, %originalBB1128alteredBB
  %4137 = load i64, i64* %29, align 8, !dbg !2854
  %4138 = load i64, i64* %20, align 8, !dbg !2854
  %4139 = icmp ult i64 %4137, %4138, !dbg !2854
  %4140 = load i32, i32* @x.37
  %4141 = load i32, i32* @y.38
  %4142 = sub i32 %4140, 1
  %4143 = mul i32 %4140, %4142
  %4144 = urem i32 %4143, 2
  %4145 = icmp eq i32 %4144, 0
  %4146 = icmp slt i32 %4141, 10
  %4147 = or i1 %4145, %4146
  br i1 %4147, label %originalBBpart21130, label %originalBB1128alteredBB

originalBBpart21130:                              ; preds = %originalBB1128
  br i1 %4139, label %4148, label %4168, !dbg !2857

4148:                                             ; preds = %originalBBpart21130
  %4149 = load i32, i32* @x.37
  %4150 = load i32, i32* @y.38
  %4151 = sub i32 %4149, 1
  %4152 = mul i32 %4149, %4151
  %4153 = urem i32 %4152, 2
  %4154 = icmp eq i32 %4153, 0
  %4155 = icmp slt i32 %4150, 10
  %4156 = or i1 %4154, %4155
  br i1 %4156, label %originalBB1132, label %originalBB1132alteredBB

originalBB1132:                                   ; preds = %4148, %originalBB1132alteredBB
  %4157 = load i8*, i8** %19, align 8, !dbg !2854
  %4158 = load i64, i64* %29, align 8, !dbg !2854
  %4159 = getelementptr inbounds i8, i8* %4157, i64 %4158, !dbg !2854
  store i8 92, i8* %4159, align 1, !dbg !2854
  %4160 = load i32, i32* @x.37
  %4161 = load i32, i32* @y.38
  %4162 = sub i32 %4160, 1
  %4163 = mul i32 %4160, %4162
  %4164 = urem i32 %4163, 2
  %4165 = icmp eq i32 %4164, 0
  %4166 = icmp slt i32 %4161, 10
  %4167 = or i1 %4165, %4166
  br i1 %4167, label %originalBBpart21134, label %originalBB1132alteredBB

originalBBpart21134:                              ; preds = %originalBB1132
  br label %4168, !dbg !2854

4168:                                             ; preds = %originalBBpart21134, %originalBBpart21130
  %4169 = load i32, i32* @x.37
  %4170 = load i32, i32* @y.38
  %4171 = sub i32 %4169, 1
  %4172 = mul i32 %4169, %4171
  %4173 = urem i32 %4172, 2
  %4174 = icmp eq i32 %4173, 0
  %4175 = icmp slt i32 %4170, 10
  %4176 = or i1 %4174, %4175
  br i1 %4176, label %originalBB1136, label %originalBB1136alteredBB

originalBB1136:                                   ; preds = %4168, %originalBB1136alteredBB
  %4177 = load i64, i64* %29, align 8, !dbg !2857
  %4178 = add i64 %4177, 1, !dbg !2857
  store i64 %4178, i64* %29, align 8, !dbg !2857
  %4179 = load i32, i32* @x.37
  %4180 = load i32, i32* @y.38
  %4181 = sub i32 %4179, 1
  %4182 = mul i32 %4179, %4181
  %4183 = urem i32 %4182, 2
  %4184 = icmp eq i32 %4183, 0
  %4185 = icmp slt i32 %4180, 10
  %4186 = or i1 %4184, %4185
  br i1 %4186, label %originalBBpart21147, label %originalBB1136alteredBB

originalBBpart21147:                              ; preds = %originalBB1136
  br label %4187, !dbg !2857

4187:                                             ; preds = %originalBBpart21147
  %4188 = load i32, i32* @x.37
  %4189 = load i32, i32* @y.38
  %4190 = sub i32 %4188, 1
  %4191 = mul i32 %4188, %4190
  %4192 = urem i32 %4191, 2
  %4193 = icmp eq i32 %4192, 0
  %4194 = icmp slt i32 %4189, 10
  %4195 = or i1 %4193, %4194
  br i1 %4195, label %originalBB1149, label %originalBB1149alteredBB

originalBB1149:                                   ; preds = %4187, %originalBB1149alteredBB
  store i8 0, i8* %41, align 1, !dbg !2858
  %4196 = load i32, i32* @x.37
  %4197 = load i32, i32* @y.38
  %4198 = sub i32 %4196, 1
  %4199 = mul i32 %4196, %4198
  %4200 = urem i32 %4199, 2
  %4201 = icmp eq i32 %4200, 0
  %4202 = icmp slt i32 %4197, 10
  %4203 = or i1 %4201, %4202
  br i1 %4203, label %originalBBpart21151, label %originalBB1149alteredBB

originalBBpart21151:                              ; preds = %originalBB1149
  br label %4204, !dbg !2859

4204:                                             ; preds = %originalBBpart21151, %originalBBpart21126
  %4205 = load i32, i32* @x.37
  %4206 = load i32, i32* @y.38
  %4207 = sub i32 %4205, 1
  %4208 = mul i32 %4205, %4207
  %4209 = urem i32 %4208, 2
  %4210 = icmp eq i32 %4209, 0
  %4211 = icmp slt i32 %4206, 10
  %4212 = or i1 %4210, %4211
  br i1 %4212, label %originalBB1153, label %originalBB1153alteredBB

originalBB1153:                                   ; preds = %4204, %originalBB1153alteredBB
  %4213 = load i32, i32* @x.37
  %4214 = load i32, i32* @y.38
  %4215 = sub i32 %4213, 1
  %4216 = mul i32 %4213, %4215
  %4217 = urem i32 %4216, 2
  %4218 = icmp eq i32 %4217, 0
  %4219 = icmp slt i32 %4214, 10
  %4220 = or i1 %4218, %4219
  br i1 %4220, label %originalBBpart21155, label %originalBB1153alteredBB

originalBBpart21155:                              ; preds = %originalBB1153
  br label %4221

4221:                                             ; preds = %originalBBpart21155, %originalBBpart21122
  %4222 = load i32, i32* @x.37
  %4223 = load i32, i32* @y.38
  %4224 = sub i32 %4222, 1
  %4225 = mul i32 %4222, %4224
  %4226 = urem i32 %4225, 2
  %4227 = icmp eq i32 %4226, 0
  %4228 = icmp slt i32 %4223, 10
  %4229 = or i1 %4227, %4228
  br i1 %4229, label %originalBB1157, label %originalBB1157alteredBB

originalBB1157:                                   ; preds = %4221, %originalBB1157alteredBB
  %4230 = load i64, i64* %50, align 8, !dbg !2860
  %4231 = load i64, i64* %28, align 8, !dbg !2862
  %4232 = add i64 %4231, 1, !dbg !2863
  %4233 = icmp ule i64 %4230, %4232, !dbg !2864
  %4234 = load i32, i32* @x.37
  %4235 = load i32, i32* @y.38
  %4236 = sub i32 %4234, 1
  %4237 = mul i32 %4234, %4236
  %4238 = urem i32 %4237, 2
  %4239 = icmp eq i32 %4238, 0
  %4240 = icmp slt i32 %4235, 10
  %4241 = or i1 %4239, %4240
  br i1 %4241, label %originalBBpart21168, label %originalBB1157alteredBB

originalBBpart21168:                              ; preds = %originalBB1157
  br i1 %4233, label %4242, label %4259, !dbg !2865

4242:                                             ; preds = %originalBBpart21168
  %4243 = load i32, i32* @x.37
  %4244 = load i32, i32* @y.38
  %4245 = sub i32 %4243, 1
  %4246 = mul i32 %4243, %4245
  %4247 = urem i32 %4246, 2
  %4248 = icmp eq i32 %4247, 0
  %4249 = icmp slt i32 %4244, 10
  %4250 = or i1 %4248, %4249
  br i1 %4250, label %originalBB1170, label %originalBB1170alteredBB

originalBB1170:                                   ; preds = %4242, %originalBB1170alteredBB
  %4251 = load i32, i32* @x.37
  %4252 = load i32, i32* @y.38
  %4253 = sub i32 %4251, 1
  %4254 = mul i32 %4251, %4253
  %4255 = urem i32 %4254, 2
  %4256 = icmp eq i32 %4255, 0
  %4257 = icmp slt i32 %4252, 10
  %4258 = or i1 %4256, %4257
  br i1 %4258, label %originalBBpart21172, label %originalBB1170alteredBB

originalBBpart21172:                              ; preds = %originalBB1170
  br label %4551, !dbg !2866

4259:                                             ; preds = %originalBBpart21168
  %4260 = load i32, i32* @x.37
  %4261 = load i32, i32* @y.38
  %4262 = sub i32 %4260, 1
  %4263 = mul i32 %4260, %4262
  %4264 = urem i32 %4263, 2
  %4265 = icmp eq i32 %4264, 0
  %4266 = icmp slt i32 %4261, 10
  %4267 = or i1 %4265, %4266
  br i1 %4267, label %originalBB1174, label %originalBB1174alteredBB

originalBB1174:                                   ; preds = %4259, %originalBB1174alteredBB
  %4268 = load i32, i32* @x.37
  %4269 = load i32, i32* @y.38
  %4270 = sub i32 %4268, 1
  %4271 = mul i32 %4268, %4270
  %4272 = urem i32 %4271, 2
  %4273 = icmp eq i32 %4272, 0
  %4274 = icmp slt i32 %4269, 10
  %4275 = or i1 %4273, %4274
  br i1 %4275, label %originalBBpart21176, label %originalBB1174alteredBB

originalBBpart21176:                              ; preds = %originalBB1174
  br label %4276, !dbg !2867

4276:                                             ; preds = %originalBBpart21176
  %4277 = load i32, i32* @x.37
  %4278 = load i32, i32* @y.38
  %4279 = sub i32 %4277, 1
  %4280 = mul i32 %4277, %4279
  %4281 = urem i32 %4280, 2
  %4282 = icmp eq i32 %4281, 0
  %4283 = icmp slt i32 %4278, 10
  %4284 = or i1 %4282, %4283
  br i1 %4284, label %originalBB1178, label %originalBB1178alteredBB

originalBB1178:                                   ; preds = %4276, %originalBB1178alteredBB
  %4285 = load i8, i8* %36, align 1, !dbg !2868
  %4286 = trunc i8 %4285 to i1, !dbg !2868
  %4287 = load i32, i32* @x.37
  %4288 = load i32, i32* @y.38
  %4289 = sub i32 %4287, 1
  %4290 = mul i32 %4287, %4289
  %4291 = urem i32 %4290, 2
  %4292 = icmp eq i32 %4291, 0
  %4293 = icmp slt i32 %4288, 10
  %4294 = or i1 %4292, %4293
  br i1 %4294, label %originalBBpart21180, label %originalBB1178alteredBB

originalBBpart21180:                              ; preds = %originalBB1178
  br i1 %4286, label %4295, label %4451, !dbg !2868

4295:                                             ; preds = %originalBBpart21180
  %4296 = load i32, i32* @x.37
  %4297 = load i32, i32* @y.38
  %4298 = sub i32 %4296, 1
  %4299 = mul i32 %4296, %4298
  %4300 = urem i32 %4299, 2
  %4301 = icmp eq i32 %4300, 0
  %4302 = icmp slt i32 %4297, 10
  %4303 = or i1 %4301, %4302
  br i1 %4303, label %originalBB1182, label %originalBB1182alteredBB

originalBB1182:                                   ; preds = %4295, %originalBB1182alteredBB
  %4304 = load i8, i8* %42, align 1, !dbg !2868
  %4305 = trunc i8 %4304 to i1, !dbg !2868
  %4306 = load i32, i32* @x.37
  %4307 = load i32, i32* @y.38
  %4308 = sub i32 %4306, 1
  %4309 = mul i32 %4306, %4308
  %4310 = urem i32 %4309, 2
  %4311 = icmp eq i32 %4310, 0
  %4312 = icmp slt i32 %4307, 10
  %4313 = or i1 %4311, %4312
  br i1 %4313, label %originalBBpart21184, label %originalBB1182alteredBB

originalBBpart21184:                              ; preds = %originalBB1182
  br i1 %4305, label %4451, label %4314, !dbg !2871

4314:                                             ; preds = %originalBBpart21184
  %4315 = load i32, i32* @x.37
  %4316 = load i32, i32* @y.38
  %4317 = sub i32 %4315, 1
  %4318 = mul i32 %4315, %4317
  %4319 = urem i32 %4318, 2
  %4320 = icmp eq i32 %4319, 0
  %4321 = icmp slt i32 %4316, 10
  %4322 = or i1 %4320, %4321
  br i1 %4322, label %originalBB1186, label %originalBB1186alteredBB

originalBB1186:                                   ; preds = %4314, %originalBB1186alteredBB
  %4323 = load i32, i32* @x.37
  %4324 = load i32, i32* @y.38
  %4325 = sub i32 %4323, 1
  %4326 = mul i32 %4323, %4325
  %4327 = urem i32 %4326, 2
  %4328 = icmp eq i32 %4327, 0
  %4329 = icmp slt i32 %4324, 10
  %4330 = or i1 %4328, %4329
  br i1 %4330, label %originalBBpart21188, label %originalBB1186alteredBB

originalBBpart21188:                              ; preds = %originalBB1186
  br label %4331, !dbg !2872

4331:                                             ; preds = %originalBBpart21188
  %4332 = load i32, i32* @x.37
  %4333 = load i32, i32* @y.38
  %4334 = sub i32 %4332, 1
  %4335 = mul i32 %4332, %4334
  %4336 = urem i32 %4335, 2
  %4337 = icmp eq i32 %4336, 0
  %4338 = icmp slt i32 %4333, 10
  %4339 = or i1 %4337, %4338
  br i1 %4339, label %originalBB1190, label %originalBB1190alteredBB

originalBB1190:                                   ; preds = %4331, %originalBB1190alteredBB
  %4340 = load i64, i64* %29, align 8, !dbg !2874
  %4341 = load i64, i64* %20, align 8, !dbg !2874
  %4342 = icmp ult i64 %4340, %4341, !dbg !2874
  %4343 = load i32, i32* @x.37
  %4344 = load i32, i32* @y.38
  %4345 = sub i32 %4343, 1
  %4346 = mul i32 %4343, %4345
  %4347 = urem i32 %4346, 2
  %4348 = icmp eq i32 %4347, 0
  %4349 = icmp slt i32 %4344, 10
  %4350 = or i1 %4348, %4349
  br i1 %4350, label %originalBBpart21192, label %originalBB1190alteredBB

originalBBpart21192:                              ; preds = %originalBB1190
  br i1 %4342, label %4351, label %4371, !dbg !2877

4351:                                             ; preds = %originalBBpart21192
  %4352 = load i32, i32* @x.37
  %4353 = load i32, i32* @y.38
  %4354 = sub i32 %4352, 1
  %4355 = mul i32 %4352, %4354
  %4356 = urem i32 %4355, 2
  %4357 = icmp eq i32 %4356, 0
  %4358 = icmp slt i32 %4353, 10
  %4359 = or i1 %4357, %4358
  br i1 %4359, label %originalBB1194, label %originalBB1194alteredBB

originalBB1194:                                   ; preds = %4351, %originalBB1194alteredBB
  %4360 = load i8*, i8** %19, align 8, !dbg !2874
  %4361 = load i64, i64* %29, align 8, !dbg !2874
  %4362 = getelementptr inbounds i8, i8* %4360, i64 %4361, !dbg !2874
  store i8 39, i8* %4362, align 1, !dbg !2874
  %4363 = load i32, i32* @x.37
  %4364 = load i32, i32* @y.38
  %4365 = sub i32 %4363, 1
  %4366 = mul i32 %4363, %4365
  %4367 = urem i32 %4366, 2
  %4368 = icmp eq i32 %4367, 0
  %4369 = icmp slt i32 %4364, 10
  %4370 = or i1 %4368, %4369
  br i1 %4370, label %originalBBpart21196, label %originalBB1194alteredBB

originalBBpart21196:                              ; preds = %originalBB1194
  br label %4371, !dbg !2874

4371:                                             ; preds = %originalBBpart21196, %originalBBpart21192
  %4372 = load i32, i32* @x.37
  %4373 = load i32, i32* @y.38
  %4374 = sub i32 %4372, 1
  %4375 = mul i32 %4372, %4374
  %4376 = urem i32 %4375, 2
  %4377 = icmp eq i32 %4376, 0
  %4378 = icmp slt i32 %4373, 10
  %4379 = or i1 %4377, %4378
  br i1 %4379, label %originalBB1198, label %originalBB1198alteredBB

originalBB1198:                                   ; preds = %4371, %originalBB1198alteredBB
  %4380 = load i64, i64* %29, align 8, !dbg !2877
  %4381 = add i64 %4380, 1, !dbg !2877
  store i64 %4381, i64* %29, align 8, !dbg !2877
  %4382 = load i32, i32* @x.37
  %4383 = load i32, i32* @y.38
  %4384 = sub i32 %4382, 1
  %4385 = mul i32 %4382, %4384
  %4386 = urem i32 %4385, 2
  %4387 = icmp eq i32 %4386, 0
  %4388 = icmp slt i32 %4383, 10
  %4389 = or i1 %4387, %4388
  br i1 %4389, label %originalBBpart21216, label %originalBB1198alteredBB

originalBBpart21216:                              ; preds = %originalBB1198
  br label %4390, !dbg !2877

4390:                                             ; preds = %originalBBpart21216
  br label %4391, !dbg !2872

4391:                                             ; preds = %4390
  %4392 = load i32, i32* @x.37
  %4393 = load i32, i32* @y.38
  %4394 = sub i32 %4392, 1
  %4395 = mul i32 %4392, %4394
  %4396 = urem i32 %4395, 2
  %4397 = icmp eq i32 %4396, 0
  %4398 = icmp slt i32 %4393, 10
  %4399 = or i1 %4397, %4398
  br i1 %4399, label %originalBB1218, label %originalBB1218alteredBB

originalBB1218:                                   ; preds = %4391, %originalBB1218alteredBB
  %4400 = load i64, i64* %29, align 8, !dbg !2878
  %4401 = load i64, i64* %20, align 8, !dbg !2878
  %4402 = icmp ult i64 %4400, %4401, !dbg !2878
  %4403 = load i32, i32* @x.37
  %4404 = load i32, i32* @y.38
  %4405 = sub i32 %4403, 1
  %4406 = mul i32 %4403, %4405
  %4407 = urem i32 %4406, 2
  %4408 = icmp eq i32 %4407, 0
  %4409 = icmp slt i32 %4404, 10
  %4410 = or i1 %4408, %4409
  br i1 %4410, label %originalBBpart21220, label %originalBB1218alteredBB

originalBBpart21220:                              ; preds = %originalBB1218
  br i1 %4402, label %4411, label %4431, !dbg !2881

4411:                                             ; preds = %originalBBpart21220
  %4412 = load i32, i32* @x.37
  %4413 = load i32, i32* @y.38
  %4414 = sub i32 %4412, 1
  %4415 = mul i32 %4412, %4414
  %4416 = urem i32 %4415, 2
  %4417 = icmp eq i32 %4416, 0
  %4418 = icmp slt i32 %4413, 10
  %4419 = or i1 %4417, %4418
  br i1 %4419, label %originalBB1222, label %originalBB1222alteredBB

originalBB1222:                                   ; preds = %4411, %originalBB1222alteredBB
  %4420 = load i8*, i8** %19, align 8, !dbg !2878
  %4421 = load i64, i64* %29, align 8, !dbg !2878
  %4422 = getelementptr inbounds i8, i8* %4420, i64 %4421, !dbg !2878
  store i8 39, i8* %4422, align 1, !dbg !2878
  %4423 = load i32, i32* @x.37
  %4424 = load i32, i32* @y.38
  %4425 = sub i32 %4423, 1
  %4426 = mul i32 %4423, %4425
  %4427 = urem i32 %4426, 2
  %4428 = icmp eq i32 %4427, 0
  %4429 = icmp slt i32 %4424, 10
  %4430 = or i1 %4428, %4429
  br i1 %4430, label %originalBBpart21224, label %originalBB1222alteredBB

originalBBpart21224:                              ; preds = %originalBB1222
  br label %4431, !dbg !2878

4431:                                             ; preds = %originalBBpart21224, %originalBBpart21220
  %4432 = load i32, i32* @x.37
  %4433 = load i32, i32* @y.38
  %4434 = sub i32 %4432, 1
  %4435 = mul i32 %4432, %4434
  %4436 = urem i32 %4435, 2
  %4437 = icmp eq i32 %4436, 0
  %4438 = icmp slt i32 %4433, 10
  %4439 = or i1 %4437, %4438
  br i1 %4439, label %originalBB1226, label %originalBB1226alteredBB

originalBB1226:                                   ; preds = %4431, %originalBB1226alteredBB
  %4440 = load i64, i64* %29, align 8, !dbg !2881
  %4441 = add i64 %4440, 1, !dbg !2881
  store i64 %4441, i64* %29, align 8, !dbg !2881
  %4442 = load i32, i32* @x.37
  %4443 = load i32, i32* @y.38
  %4444 = sub i32 %4442, 1
  %4445 = mul i32 %4442, %4444
  %4446 = urem i32 %4445, 2
  %4447 = icmp eq i32 %4446, 0
  %4448 = icmp slt i32 %4443, 10
  %4449 = or i1 %4447, %4448
  br i1 %4449, label %originalBBpart21230, label %originalBB1226alteredBB

originalBBpart21230:                              ; preds = %originalBB1226
  br label %4450, !dbg !2881

4450:                                             ; preds = %originalBBpart21230
  store i8 0, i8* %36, align 1, !dbg !2872
  br label %4451, !dbg !2872

4451:                                             ; preds = %4450, %originalBBpart21184, %originalBBpart21180
  %4452 = load i32, i32* @x.37
  %4453 = load i32, i32* @y.38
  %4454 = sub i32 %4452, 1
  %4455 = mul i32 %4452, %4454
  %4456 = urem i32 %4455, 2
  %4457 = icmp eq i32 %4456, 0
  %4458 = icmp slt i32 %4453, 10
  %4459 = or i1 %4457, %4458
  br i1 %4459, label %originalBB1232, label %originalBB1232alteredBB

originalBB1232:                                   ; preds = %4451, %originalBB1232alteredBB
  %4460 = load i32, i32* @x.37
  %4461 = load i32, i32* @y.38
  %4462 = sub i32 %4460, 1
  %4463 = mul i32 %4460, %4462
  %4464 = urem i32 %4463, 2
  %4465 = icmp eq i32 %4464, 0
  %4466 = icmp slt i32 %4461, 10
  %4467 = or i1 %4465, %4466
  br i1 %4467, label %originalBBpart21234, label %originalBB1232alteredBB

originalBBpart21234:                              ; preds = %originalBB1232
  br label %4468, !dbg !2871

4468:                                             ; preds = %originalBBpart21234
  %4469 = load i32, i32* @x.37
  %4470 = load i32, i32* @y.38
  %4471 = sub i32 %4469, 1
  %4472 = mul i32 %4469, %4471
  %4473 = urem i32 %4472, 2
  %4474 = icmp eq i32 %4473, 0
  %4475 = icmp slt i32 %4470, 10
  %4476 = or i1 %4474, %4475
  br i1 %4476, label %originalBB1236, label %originalBB1236alteredBB

originalBB1236:                                   ; preds = %4468, %originalBB1236alteredBB
  %4477 = load i32, i32* @x.37
  %4478 = load i32, i32* @y.38
  %4479 = sub i32 %4477, 1
  %4480 = mul i32 %4477, %4479
  %4481 = urem i32 %4480, 2
  %4482 = icmp eq i32 %4481, 0
  %4483 = icmp slt i32 %4478, 10
  %4484 = or i1 %4482, %4483
  br i1 %4484, label %originalBBpart21238, label %originalBB1236alteredBB

originalBBpart21238:                              ; preds = %originalBB1236
  br label %4485, !dbg !2882

4485:                                             ; preds = %originalBBpart21238
  %4486 = load i32, i32* @x.37
  %4487 = load i32, i32* @y.38
  %4488 = sub i32 %4486, 1
  %4489 = mul i32 %4486, %4488
  %4490 = urem i32 %4489, 2
  %4491 = icmp eq i32 %4490, 0
  %4492 = icmp slt i32 %4487, 10
  %4493 = or i1 %4491, %4492
  br i1 %4493, label %originalBB1240, label %originalBB1240alteredBB

originalBB1240:                                   ; preds = %4485, %originalBB1240alteredBB
  %4494 = load i64, i64* %29, align 8, !dbg !2883
  %4495 = load i64, i64* %20, align 8, !dbg !2883
  %4496 = icmp ult i64 %4494, %4495, !dbg !2883
  %4497 = load i32, i32* @x.37
  %4498 = load i32, i32* @y.38
  %4499 = sub i32 %4497, 1
  %4500 = mul i32 %4497, %4499
  %4501 = urem i32 %4500, 2
  %4502 = icmp eq i32 %4501, 0
  %4503 = icmp slt i32 %4498, 10
  %4504 = or i1 %4502, %4503
  br i1 %4504, label %originalBBpart21242, label %originalBB1240alteredBB

originalBBpart21242:                              ; preds = %originalBB1240
  br i1 %4496, label %4505, label %4526, !dbg !2886

4505:                                             ; preds = %originalBBpart21242
  %4506 = load i32, i32* @x.37
  %4507 = load i32, i32* @y.38
  %4508 = sub i32 %4506, 1
  %4509 = mul i32 %4506, %4508
  %4510 = urem i32 %4509, 2
  %4511 = icmp eq i32 %4510, 0
  %4512 = icmp slt i32 %4507, 10
  %4513 = or i1 %4511, %4512
  br i1 %4513, label %originalBB1244, label %originalBB1244alteredBB

originalBB1244:                                   ; preds = %4505, %originalBB1244alteredBB
  %4514 = load i8, i8* %39, align 1, !dbg !2883
  %4515 = load i8*, i8** %19, align 8, !dbg !2883
  %4516 = load i64, i64* %29, align 8, !dbg !2883
  %4517 = getelementptr inbounds i8, i8* %4515, i64 %4516, !dbg !2883
  store i8 %4514, i8* %4517, align 1, !dbg !2883
  %4518 = load i32, i32* @x.37
  %4519 = load i32, i32* @y.38
  %4520 = sub i32 %4518, 1
  %4521 = mul i32 %4518, %4520
  %4522 = urem i32 %4521, 2
  %4523 = icmp eq i32 %4522, 0
  %4524 = icmp slt i32 %4519, 10
  %4525 = or i1 %4523, %4524
  br i1 %4525, label %originalBBpart21246, label %originalBB1244alteredBB

originalBBpart21246:                              ; preds = %originalBB1244
  br label %4526, !dbg !2883

4526:                                             ; preds = %originalBBpart21246, %originalBBpart21242
  %4527 = load i32, i32* @x.37
  %4528 = load i32, i32* @y.38
  %4529 = sub i32 %4527, 1
  %4530 = mul i32 %4527, %4529
  %4531 = urem i32 %4530, 2
  %4532 = icmp eq i32 %4531, 0
  %4533 = icmp slt i32 %4528, 10
  %4534 = or i1 %4532, %4533
  br i1 %4534, label %originalBB1248, label %originalBB1248alteredBB

originalBB1248:                                   ; preds = %4526, %originalBB1248alteredBB
  %4535 = load i64, i64* %29, align 8, !dbg !2886
  %4536 = add i64 %4535, 1, !dbg !2886
  store i64 %4536, i64* %29, align 8, !dbg !2886
  %4537 = load i32, i32* @x.37
  %4538 = load i32, i32* @y.38
  %4539 = sub i32 %4537, 1
  %4540 = mul i32 %4537, %4539
  %4541 = urem i32 %4540, 2
  %4542 = icmp eq i32 %4541, 0
  %4543 = icmp slt i32 %4538, 10
  %4544 = or i1 %4542, %4543
  br i1 %4544, label %originalBBpart21261, label %originalBB1248alteredBB

originalBBpart21261:                              ; preds = %originalBB1248
  br label %4545, !dbg !2886

4545:                                             ; preds = %originalBBpart21261
  %4546 = load i8*, i8** %21, align 8, !dbg !2887
  %4547 = load i64, i64* %28, align 8, !dbg !2888
  %4548 = add i64 %4547, 1, !dbg !2888
  store i64 %4548, i64* %28, align 8, !dbg !2888
  %4549 = getelementptr inbounds i8, i8* %4546, i64 %4548, !dbg !2887
  %4550 = load i8, i8* %4549, align 1, !dbg !2887
  store i8 %4550, i8* %39, align 1, !dbg !2889
  br label %3584, !dbg !2890, !llvm.loop !2891

4551:                                             ; preds = %originalBBpart21172
  %4552 = load i32, i32* @x.37
  %4553 = load i32, i32* @y.38
  %4554 = sub i32 %4552, 1
  %4555 = mul i32 %4552, %4554
  %4556 = urem i32 %4555, 2
  %4557 = icmp eq i32 %4556, 0
  %4558 = icmp slt i32 %4553, 10
  %4559 = or i1 %4557, %4558
  br i1 %4559, label %originalBB1263, label %originalBB1263alteredBB

originalBB1263:                                   ; preds = %4551, %originalBB1263alteredBB
  %4560 = load i32, i32* @x.37
  %4561 = load i32, i32* @y.38
  %4562 = sub i32 %4560, 1
  %4563 = mul i32 %4560, %4562
  %4564 = urem i32 %4563, 2
  %4565 = icmp eq i32 %4564, 0
  %4566 = icmp slt i32 %4561, 10
  %4567 = or i1 %4565, %4566
  br i1 %4567, label %originalBBpart21265, label %originalBB1263alteredBB

originalBBpart21265:                              ; preds = %originalBB1263
  br label %5126, !dbg !2894

4568:                                             ; preds = %originalBBpart2908, %originalBBpart2904
  %4569 = load i32, i32* @x.37
  %4570 = load i32, i32* @y.38
  %4571 = sub i32 %4569, 1
  %4572 = mul i32 %4569, %4571
  %4573 = urem i32 %4572, 2
  %4574 = icmp eq i32 %4573, 0
  %4575 = icmp slt i32 %4570, 10
  %4576 = or i1 %4574, %4575
  br i1 %4576, label %originalBB1267, label %originalBB1267alteredBB

originalBB1267:                                   ; preds = %4568, %originalBB1267alteredBB
  %4577 = load i32, i32* @x.37
  %4578 = load i32, i32* @y.38
  %4579 = sub i32 %4577, 1
  %4580 = mul i32 %4577, %4579
  %4581 = urem i32 %4580, 2
  %4582 = icmp eq i32 %4581, 0
  %4583 = icmp slt i32 %4578, 10
  %4584 = or i1 %4582, %4583
  br i1 %4584, label %originalBBpart21269, label %originalBB1267alteredBB

originalBBpart21269:                              ; preds = %originalBB1267
  br label %4585, !dbg !2895

4585:                                             ; preds = %originalBBpart21269, %originalBBpart2736, %originalBBpart2732, %originalBBpart2678, %originalBBpart2654, %2538, %originalBBpart2634, %originalBBpart2554, %originalBBpart2401
  %4586 = load i8, i8* %33, align 1, !dbg !2896
  %4587 = trunc i8 %4586 to i1, !dbg !2896
  br i1 %4587, label %4588, label %4607, !dbg !2898

4588:                                             ; preds = %4585
  %4589 = load i32, i32* @x.37
  %4590 = load i32, i32* @y.38
  %4591 = sub i32 %4589, 1
  %4592 = mul i32 %4589, %4591
  %4593 = urem i32 %4592, 2
  %4594 = icmp eq i32 %4593, 0
  %4595 = icmp slt i32 %4590, 10
  %4596 = or i1 %4594, %4595
  br i1 %4596, label %originalBB1271, label %originalBB1271alteredBB

originalBB1271:                                   ; preds = %4588, %originalBB1271alteredBB
  %4597 = load i32, i32* %23, align 4, !dbg !2899
  %4598 = icmp ne i32 %4597, 2, !dbg !2900
  %4599 = load i32, i32* @x.37
  %4600 = load i32, i32* @y.38
  %4601 = sub i32 %4599, 1
  %4602 = mul i32 %4599, %4601
  %4603 = urem i32 %4602, 2
  %4604 = icmp eq i32 %4603, 0
  %4605 = icmp slt i32 %4600, 10
  %4606 = or i1 %4604, %4605
  br i1 %4606, label %originalBBpart21273, label %originalBB1271alteredBB

originalBBpart21273:                              ; preds = %originalBB1271
  br i1 %4598, label %4626, label %4607, !dbg !2901

4607:                                             ; preds = %originalBBpart21273, %4585
  %4608 = load i32, i32* @x.37
  %4609 = load i32, i32* @y.38
  %4610 = sub i32 %4608, 1
  %4611 = mul i32 %4608, %4610
  %4612 = urem i32 %4611, 2
  %4613 = icmp eq i32 %4612, 0
  %4614 = icmp slt i32 %4609, 10
  %4615 = or i1 %4613, %4614
  br i1 %4615, label %originalBB1275, label %originalBB1275alteredBB

originalBB1275:                                   ; preds = %4607, %originalBB1275alteredBB
  %4616 = load i8, i8* %35, align 1, !dbg !2902
  %4617 = trunc i8 %4616 to i1, !dbg !2902
  %4618 = load i32, i32* @x.37
  %4619 = load i32, i32* @y.38
  %4620 = sub i32 %4618, 1
  %4621 = mul i32 %4618, %4620
  %4622 = urem i32 %4621, 2
  %4623 = icmp eq i32 %4622, 0
  %4624 = icmp slt i32 %4619, 10
  %4625 = or i1 %4623, %4624
  br i1 %4625, label %originalBBpart21277, label %originalBB1275alteredBB

originalBBpart21277:                              ; preds = %originalBB1275
  br i1 %4617, label %4626, label %4659, !dbg !2903

4626:                                             ; preds = %originalBBpart21277, %originalBBpart21273
  %4627 = load i32, i32* @x.37
  %4628 = load i32, i32* @y.38
  %4629 = sub i32 %4627, 1
  %4630 = mul i32 %4627, %4629
  %4631 = urem i32 %4630, 2
  %4632 = icmp eq i32 %4631, 0
  %4633 = icmp slt i32 %4628, 10
  %4634 = or i1 %4632, %4633
  br i1 %4634, label %originalBB1279, label %originalBB1279alteredBB

originalBB1279:                                   ; preds = %4626, %originalBB1279alteredBB
  %4635 = load i32*, i32** %25, align 8, !dbg !2904
  %4636 = icmp ne i32* %4635, null, !dbg !2904
  %4637 = load i32, i32* @x.37
  %4638 = load i32, i32* @y.38
  %4639 = sub i32 %4637, 1
  %4640 = mul i32 %4637, %4639
  %4641 = urem i32 %4640, 2
  %4642 = icmp eq i32 %4641, 0
  %4643 = icmp slt i32 %4638, 10
  %4644 = or i1 %4642, %4643
  br i1 %4644, label %originalBBpart21281, label %originalBB1279alteredBB

originalBBpart21281:                              ; preds = %originalBB1279
  br i1 %4636, label %4645, label %4659, !dbg !2905

4645:                                             ; preds = %originalBBpart21281
  %4646 = load i32*, i32** %25, align 8, !dbg !2906
  %4647 = load i8, i8* %39, align 1, !dbg !2907
  %4648 = zext i8 %4647 to i64, !dbg !2907
  %4649 = udiv i64 %4648, 32, !dbg !2908
  %4650 = getelementptr inbounds i32, i32* %4646, i64 %4649, !dbg !2906
  %4651 = load i32, i32* %4650, align 4, !dbg !2906
  %4652 = load i8, i8* %39, align 1, !dbg !2909
  %4653 = zext i8 %4652 to i64, !dbg !2909
  %4654 = urem i64 %4653, 32, !dbg !2910
  %4655 = trunc i64 %4654 to i32, !dbg !2911
  %4656 = lshr i32 %4651, %4655, !dbg !2911
  %4657 = and i32 %4656, 1, !dbg !2912
  %4658 = icmp ne i32 %4657, 0, !dbg !2912
  br i1 %4658, label %4695, label %4659, !dbg !2913

4659:                                             ; preds = %4645, %originalBBpart21281, %originalBBpart21277
  %4660 = load i32, i32* @x.37
  %4661 = load i32, i32* @y.38
  %4662 = sub i32 %4660, 1
  %4663 = mul i32 %4660, %4662
  %4664 = urem i32 %4663, 2
  %4665 = icmp eq i32 %4664, 0
  %4666 = icmp slt i32 %4661, 10
  %4667 = or i1 %4665, %4666
  br i1 %4667, label %originalBB1283, label %originalBB1283alteredBB

originalBB1283:                                   ; preds = %4659, %originalBB1283alteredBB
  %4668 = load i8, i8* %41, align 1, !dbg !2914
  %4669 = trunc i8 %4668 to i1, !dbg !2914
  %4670 = load i32, i32* @x.37
  %4671 = load i32, i32* @y.38
  %4672 = sub i32 %4670, 1
  %4673 = mul i32 %4670, %4672
  %4674 = urem i32 %4673, 2
  %4675 = icmp eq i32 %4674, 0
  %4676 = icmp slt i32 %4671, 10
  %4677 = or i1 %4675, %4676
  br i1 %4677, label %originalBBpart21285, label %originalBB1283alteredBB

originalBBpart21285:                              ; preds = %originalBB1283
  br i1 %4669, label %4695, label %4678, !dbg !2915

4678:                                             ; preds = %originalBBpart21285
  %4679 = load i32, i32* @x.37
  %4680 = load i32, i32* @y.38
  %4681 = sub i32 %4679, 1
  %4682 = mul i32 %4679, %4681
  %4683 = urem i32 %4682, 2
  %4684 = icmp eq i32 %4683, 0
  %4685 = icmp slt i32 %4680, 10
  %4686 = or i1 %4684, %4685
  br i1 %4686, label %originalBB1287, label %originalBB1287alteredBB

originalBB1287:                                   ; preds = %4678, %originalBB1287alteredBB
  %4687 = load i32, i32* @x.37
  %4688 = load i32, i32* @y.38
  %4689 = sub i32 %4687, 1
  %4690 = mul i32 %4687, %4689
  %4691 = urem i32 %4690, 2
  %4692 = icmp eq i32 %4691, 0
  %4693 = icmp slt i32 %4688, 10
  %4694 = or i1 %4692, %4693
  br i1 %4694, label %originalBBpart21289, label %originalBB1287alteredBB

originalBBpart21289:                              ; preds = %originalBB1287
  br label %5126, !dbg !2916

4695:                                             ; preds = %originalBBpart21285, %4645
  %4696 = load i32, i32* @x.37
  %4697 = load i32, i32* @y.38
  %4698 = sub i32 %4696, 1
  %4699 = mul i32 %4696, %4698
  %4700 = urem i32 %4699, 2
  %4701 = icmp eq i32 %4700, 0
  %4702 = icmp slt i32 %4697, 10
  %4703 = or i1 %4701, %4702
  br i1 %4703, label %originalBB1291, label %originalBB1291alteredBB

originalBB1291:                                   ; preds = %4695, %originalBB1291alteredBB
  %4704 = load i32, i32* @x.37
  %4705 = load i32, i32* @y.38
  %4706 = sub i32 %4704, 1
  %4707 = mul i32 %4704, %4706
  %4708 = urem i32 %4707, 2
  %4709 = icmp eq i32 %4708, 0
  %4710 = icmp slt i32 %4705, 10
  %4711 = or i1 %4709, %4710
  br i1 %4711, label %originalBBpart21293, label %originalBB1291alteredBB

originalBBpart21293:                              ; preds = %originalBB1291
  br label %4712, !dbg !2914

4712:                                             ; preds = %originalBBpart21293, %originalBBpart2630
  call void @llvm.dbg.label(metadata !2917), !dbg !2918
  %4713 = load i32, i32* @x.37
  %4714 = load i32, i32* @y.38
  %4715 = sub i32 %4713, 1
  %4716 = mul i32 %4713, %4715
  %4717 = urem i32 %4716, 2
  %4718 = icmp eq i32 %4717, 0
  %4719 = icmp slt i32 %4714, 10
  %4720 = or i1 %4718, %4719
  br i1 %4720, label %originalBB1295, label %originalBB1295alteredBB

originalBB1295:                                   ; preds = %4712, %originalBB1295alteredBB
  %4721 = load i32, i32* @x.37
  %4722 = load i32, i32* @y.38
  %4723 = sub i32 %4721, 1
  %4724 = mul i32 %4721, %4723
  %4725 = urem i32 %4724, 2
  %4726 = icmp eq i32 %4725, 0
  %4727 = icmp slt i32 %4722, 10
  %4728 = or i1 %4726, %4727
  br i1 %4728, label %originalBBpart21297, label %originalBB1295alteredBB

originalBBpart21297:                              ; preds = %originalBB1295
  br label %4729, !dbg !2919

4729:                                             ; preds = %originalBBpart21297
  %4730 = load i32, i32* @x.37
  %4731 = load i32, i32* @y.38
  %4732 = sub i32 %4730, 1
  %4733 = mul i32 %4730, %4732
  %4734 = urem i32 %4733, 2
  %4735 = icmp eq i32 %4734, 0
  %4736 = icmp slt i32 %4731, 10
  %4737 = or i1 %4735, %4736
  br i1 %4737, label %originalBB1299, label %originalBB1299alteredBB

originalBB1299:                                   ; preds = %4729, %originalBB1299alteredBB
  %4738 = load i8, i8* %35, align 1, !dbg !2920
  %4739 = trunc i8 %4738 to i1, !dbg !2920
  %4740 = load i32, i32* @x.37
  %4741 = load i32, i32* @y.38
  %4742 = sub i32 %4740, 1
  %4743 = mul i32 %4740, %4742
  %4744 = urem i32 %4743, 2
  %4745 = icmp eq i32 %4744, 0
  %4746 = icmp slt i32 %4741, 10
  %4747 = or i1 %4745, %4746
  br i1 %4747, label %originalBBpart21301, label %originalBB1299alteredBB

originalBBpart21301:                              ; preds = %originalBB1299
  br i1 %4739, label %4748, label %4765, !dbg !2923

4748:                                             ; preds = %originalBBpart21301
  %4749 = load i32, i32* @x.37
  %4750 = load i32, i32* @y.38
  %4751 = sub i32 %4749, 1
  %4752 = mul i32 %4749, %4751
  %4753 = urem i32 %4752, 2
  %4754 = icmp eq i32 %4753, 0
  %4755 = icmp slt i32 %4750, 10
  %4756 = or i1 %4754, %4755
  br i1 %4756, label %originalBB1303, label %originalBB1303alteredBB

originalBB1303:                                   ; preds = %4748, %originalBB1303alteredBB
  %4757 = load i32, i32* @x.37
  %4758 = load i32, i32* @y.38
  %4759 = sub i32 %4757, 1
  %4760 = mul i32 %4757, %4759
  %4761 = urem i32 %4760, 2
  %4762 = icmp eq i32 %4761, 0
  %4763 = icmp slt i32 %4758, 10
  %4764 = or i1 %4762, %4763
  br i1 %4764, label %originalBBpart21305, label %originalBB1303alteredBB

originalBBpart21305:                              ; preds = %originalBB1303
  br label %5982, !dbg !2920

4765:                                             ; preds = %originalBBpart21301
  %4766 = load i32, i32* @x.37
  %4767 = load i32, i32* @y.38
  %4768 = sub i32 %4766, 1
  %4769 = mul i32 %4766, %4768
  %4770 = urem i32 %4769, 2
  %4771 = icmp eq i32 %4770, 0
  %4772 = icmp slt i32 %4767, 10
  %4773 = or i1 %4771, %4772
  br i1 %4773, label %originalBB1307, label %originalBB1307alteredBB

originalBB1307:                                   ; preds = %4765, %originalBB1307alteredBB
  store i8 1, i8* %42, align 1, !dbg !2923
  %4774 = load i32, i32* %23, align 4, !dbg !2924
  %4775 = icmp eq i32 %4774, 2, !dbg !2924
  %4776 = load i32, i32* @x.37
  %4777 = load i32, i32* @y.38
  %4778 = sub i32 %4776, 1
  %4779 = mul i32 %4776, %4778
  %4780 = urem i32 %4779, 2
  %4781 = icmp eq i32 %4780, 0
  %4782 = icmp slt i32 %4777, 10
  %4783 = or i1 %4781, %4782
  br i1 %4783, label %originalBBpart21309, label %originalBB1307alteredBB

originalBBpart21309:                              ; preds = %originalBB1307
  br i1 %4775, label %4784, label %5016, !dbg !2924

4784:                                             ; preds = %originalBBpart21309
  %4785 = load i8, i8* %36, align 1, !dbg !2924
  %4786 = trunc i8 %4785 to i1, !dbg !2924
  br i1 %4786, label %5016, label %4787, !dbg !2923

4787:                                             ; preds = %4784
  %4788 = load i32, i32* @x.37
  %4789 = load i32, i32* @y.38
  %4790 = sub i32 %4788, 1
  %4791 = mul i32 %4788, %4790
  %4792 = urem i32 %4791, 2
  %4793 = icmp eq i32 %4792, 0
  %4794 = icmp slt i32 %4789, 10
  %4795 = or i1 %4793, %4794
  br i1 %4795, label %originalBB1311, label %originalBB1311alteredBB

originalBB1311:                                   ; preds = %4787, %originalBB1311alteredBB
  %4796 = load i32, i32* @x.37
  %4797 = load i32, i32* @y.38
  %4798 = sub i32 %4796, 1
  %4799 = mul i32 %4796, %4798
  %4800 = urem i32 %4799, 2
  %4801 = icmp eq i32 %4800, 0
  %4802 = icmp slt i32 %4797, 10
  %4803 = or i1 %4801, %4802
  br i1 %4803, label %originalBBpart21313, label %originalBB1311alteredBB

originalBBpart21313:                              ; preds = %originalBB1311
  br label %4804, !dbg !2926

4804:                                             ; preds = %originalBBpart21313
  %4805 = load i64, i64* %29, align 8, !dbg !2928
  %4806 = load i64, i64* %20, align 8, !dbg !2928
  %4807 = icmp ult i64 %4805, %4806, !dbg !2928
  br i1 %4807, label %4808, label %4828, !dbg !2931

4808:                                             ; preds = %4804
  %4809 = load i32, i32* @x.37
  %4810 = load i32, i32* @y.38
  %4811 = sub i32 %4809, 1
  %4812 = mul i32 %4809, %4811
  %4813 = urem i32 %4812, 2
  %4814 = icmp eq i32 %4813, 0
  %4815 = icmp slt i32 %4810, 10
  %4816 = or i1 %4814, %4815
  br i1 %4816, label %originalBB1315, label %originalBB1315alteredBB

originalBB1315:                                   ; preds = %4808, %originalBB1315alteredBB
  %4817 = load i8*, i8** %19, align 8, !dbg !2928
  %4818 = load i64, i64* %29, align 8, !dbg !2928
  %4819 = getelementptr inbounds i8, i8* %4817, i64 %4818, !dbg !2928
  store i8 39, i8* %4819, align 1, !dbg !2928
  %4820 = load i32, i32* @x.37
  %4821 = load i32, i32* @y.38
  %4822 = sub i32 %4820, 1
  %4823 = mul i32 %4820, %4822
  %4824 = urem i32 %4823, 2
  %4825 = icmp eq i32 %4824, 0
  %4826 = icmp slt i32 %4821, 10
  %4827 = or i1 %4825, %4826
  br i1 %4827, label %originalBBpart21317, label %originalBB1315alteredBB

originalBBpart21317:                              ; preds = %originalBB1315
  br label %4828, !dbg !2928

4828:                                             ; preds = %originalBBpart21317, %4804
  %4829 = load i32, i32* @x.37
  %4830 = load i32, i32* @y.38
  %4831 = sub i32 %4829, 1
  %4832 = mul i32 %4829, %4831
  %4833 = urem i32 %4832, 2
  %4834 = icmp eq i32 %4833, 0
  %4835 = icmp slt i32 %4830, 10
  %4836 = or i1 %4834, %4835
  br i1 %4836, label %originalBB1319, label %originalBB1319alteredBB

originalBB1319:                                   ; preds = %4828, %originalBB1319alteredBB
  %4837 = load i64, i64* %29, align 8, !dbg !2931
  %4838 = add i64 %4837, 1, !dbg !2931
  store i64 %4838, i64* %29, align 8, !dbg !2931
  %4839 = load i32, i32* @x.37
  %4840 = load i32, i32* @y.38
  %4841 = sub i32 %4839, 1
  %4842 = mul i32 %4839, %4841
  %4843 = urem i32 %4842, 2
  %4844 = icmp eq i32 %4843, 0
  %4845 = icmp slt i32 %4840, 10
  %4846 = or i1 %4844, %4845
  br i1 %4846, label %originalBBpart21334, label %originalBB1319alteredBB

originalBBpart21334:                              ; preds = %originalBB1319
  br label %4847, !dbg !2931

4847:                                             ; preds = %originalBBpart21334
  %4848 = load i32, i32* @x.37
  %4849 = load i32, i32* @y.38
  %4850 = sub i32 %4848, 1
  %4851 = mul i32 %4848, %4850
  %4852 = urem i32 %4851, 2
  %4853 = icmp eq i32 %4852, 0
  %4854 = icmp slt i32 %4849, 10
  %4855 = or i1 %4853, %4854
  br i1 %4855, label %originalBB1336, label %originalBB1336alteredBB

originalBB1336:                                   ; preds = %4847, %originalBB1336alteredBB
  %4856 = load i32, i32* @x.37
  %4857 = load i32, i32* @y.38
  %4858 = sub i32 %4856, 1
  %4859 = mul i32 %4856, %4858
  %4860 = urem i32 %4859, 2
  %4861 = icmp eq i32 %4860, 0
  %4862 = icmp slt i32 %4857, 10
  %4863 = or i1 %4861, %4862
  br i1 %4863, label %originalBBpart21338, label %originalBB1336alteredBB

originalBBpart21338:                              ; preds = %originalBB1336
  br label %4864, !dbg !2926

4864:                                             ; preds = %originalBBpart21338
  %4865 = load i32, i32* @x.37
  %4866 = load i32, i32* @y.38
  %4867 = sub i32 %4865, 1
  %4868 = mul i32 %4865, %4867
  %4869 = urem i32 %4868, 2
  %4870 = icmp eq i32 %4869, 0
  %4871 = icmp slt i32 %4866, 10
  %4872 = or i1 %4870, %4871
  br i1 %4872, label %originalBB1340, label %originalBB1340alteredBB

originalBB1340:                                   ; preds = %4864, %originalBB1340alteredBB
  %4873 = load i64, i64* %29, align 8, !dbg !2932
  %4874 = load i64, i64* %20, align 8, !dbg !2932
  %4875 = icmp ult i64 %4873, %4874, !dbg !2932
  %4876 = load i32, i32* @x.37
  %4877 = load i32, i32* @y.38
  %4878 = sub i32 %4876, 1
  %4879 = mul i32 %4876, %4878
  %4880 = urem i32 %4879, 2
  %4881 = icmp eq i32 %4880, 0
  %4882 = icmp slt i32 %4877, 10
  %4883 = or i1 %4881, %4882
  br i1 %4883, label %originalBBpart21342, label %originalBB1340alteredBB

originalBBpart21342:                              ; preds = %originalBB1340
  br i1 %4875, label %4884, label %4904, !dbg !2935

4884:                                             ; preds = %originalBBpart21342
  %4885 = load i32, i32* @x.37
  %4886 = load i32, i32* @y.38
  %4887 = sub i32 %4885, 1
  %4888 = mul i32 %4885, %4887
  %4889 = urem i32 %4888, 2
  %4890 = icmp eq i32 %4889, 0
  %4891 = icmp slt i32 %4886, 10
  %4892 = or i1 %4890, %4891
  br i1 %4892, label %originalBB1344, label %originalBB1344alteredBB

originalBB1344:                                   ; preds = %4884, %originalBB1344alteredBB
  %4893 = load i8*, i8** %19, align 8, !dbg !2932
  %4894 = load i64, i64* %29, align 8, !dbg !2932
  %4895 = getelementptr inbounds i8, i8* %4893, i64 %4894, !dbg !2932
  store i8 36, i8* %4895, align 1, !dbg !2932
  %4896 = load i32, i32* @x.37
  %4897 = load i32, i32* @y.38
  %4898 = sub i32 %4896, 1
  %4899 = mul i32 %4896, %4898
  %4900 = urem i32 %4899, 2
  %4901 = icmp eq i32 %4900, 0
  %4902 = icmp slt i32 %4897, 10
  %4903 = or i1 %4901, %4902
  br i1 %4903, label %originalBBpart21346, label %originalBB1344alteredBB

originalBBpart21346:                              ; preds = %originalBB1344
  br label %4904, !dbg !2932

4904:                                             ; preds = %originalBBpart21346, %originalBBpart21342
  %4905 = load i32, i32* @x.37
  %4906 = load i32, i32* @y.38
  %4907 = sub i32 %4905, 1
  %4908 = mul i32 %4905, %4907
  %4909 = urem i32 %4908, 2
  %4910 = icmp eq i32 %4909, 0
  %4911 = icmp slt i32 %4906, 10
  %4912 = or i1 %4910, %4911
  br i1 %4912, label %originalBB1348, label %originalBB1348alteredBB

originalBB1348:                                   ; preds = %4904, %originalBB1348alteredBB
  %4913 = load i64, i64* %29, align 8, !dbg !2935
  %4914 = add i64 %4913, 1, !dbg !2935
  store i64 %4914, i64* %29, align 8, !dbg !2935
  %4915 = load i32, i32* @x.37
  %4916 = load i32, i32* @y.38
  %4917 = sub i32 %4915, 1
  %4918 = mul i32 %4915, %4917
  %4919 = urem i32 %4918, 2
  %4920 = icmp eq i32 %4919, 0
  %4921 = icmp slt i32 %4916, 10
  %4922 = or i1 %4920, %4921
  br i1 %4922, label %originalBBpart21354, label %originalBB1348alteredBB

originalBBpart21354:                              ; preds = %originalBB1348
  br label %4923, !dbg !2935

4923:                                             ; preds = %originalBBpart21354
  %4924 = load i32, i32* @x.37
  %4925 = load i32, i32* @y.38
  %4926 = sub i32 %4924, 1
  %4927 = mul i32 %4924, %4926
  %4928 = urem i32 %4927, 2
  %4929 = icmp eq i32 %4928, 0
  %4930 = icmp slt i32 %4925, 10
  %4931 = or i1 %4929, %4930
  br i1 %4931, label %originalBB1356, label %originalBB1356alteredBB

originalBB1356:                                   ; preds = %4923, %originalBB1356alteredBB
  %4932 = load i32, i32* @x.37
  %4933 = load i32, i32* @y.38
  %4934 = sub i32 %4932, 1
  %4935 = mul i32 %4932, %4934
  %4936 = urem i32 %4935, 2
  %4937 = icmp eq i32 %4936, 0
  %4938 = icmp slt i32 %4933, 10
  %4939 = or i1 %4937, %4938
  br i1 %4939, label %originalBBpart21358, label %originalBB1356alteredBB

originalBBpart21358:                              ; preds = %originalBB1356
  br label %4940, !dbg !2926

4940:                                             ; preds = %originalBBpart21358
  %4941 = load i32, i32* @x.37
  %4942 = load i32, i32* @y.38
  %4943 = sub i32 %4941, 1
  %4944 = mul i32 %4941, %4943
  %4945 = urem i32 %4944, 2
  %4946 = icmp eq i32 %4945, 0
  %4947 = icmp slt i32 %4942, 10
  %4948 = or i1 %4946, %4947
  br i1 %4948, label %originalBB1360, label %originalBB1360alteredBB

originalBB1360:                                   ; preds = %4940, %originalBB1360alteredBB
  %4949 = load i64, i64* %29, align 8, !dbg !2936
  %4950 = load i64, i64* %20, align 8, !dbg !2936
  %4951 = icmp ult i64 %4949, %4950, !dbg !2936
  %4952 = load i32, i32* @x.37
  %4953 = load i32, i32* @y.38
  %4954 = sub i32 %4952, 1
  %4955 = mul i32 %4952, %4954
  %4956 = urem i32 %4955, 2
  %4957 = icmp eq i32 %4956, 0
  %4958 = icmp slt i32 %4953, 10
  %4959 = or i1 %4957, %4958
  br i1 %4959, label %originalBBpart21362, label %originalBB1360alteredBB

originalBBpart21362:                              ; preds = %originalBB1360
  br i1 %4951, label %4960, label %4980, !dbg !2939

4960:                                             ; preds = %originalBBpart21362
  %4961 = load i32, i32* @x.37
  %4962 = load i32, i32* @y.38
  %4963 = sub i32 %4961, 1
  %4964 = mul i32 %4961, %4963
  %4965 = urem i32 %4964, 2
  %4966 = icmp eq i32 %4965, 0
  %4967 = icmp slt i32 %4962, 10
  %4968 = or i1 %4966, %4967
  br i1 %4968, label %originalBB1364, label %originalBB1364alteredBB

originalBB1364:                                   ; preds = %4960, %originalBB1364alteredBB
  %4969 = load i8*, i8** %19, align 8, !dbg !2936
  %4970 = load i64, i64* %29, align 8, !dbg !2936
  %4971 = getelementptr inbounds i8, i8* %4969, i64 %4970, !dbg !2936
  store i8 39, i8* %4971, align 1, !dbg !2936
  %4972 = load i32, i32* @x.37
  %4973 = load i32, i32* @y.38
  %4974 = sub i32 %4972, 1
  %4975 = mul i32 %4972, %4974
  %4976 = urem i32 %4975, 2
  %4977 = icmp eq i32 %4976, 0
  %4978 = icmp slt i32 %4973, 10
  %4979 = or i1 %4977, %4978
  br i1 %4979, label %originalBBpart21366, label %originalBB1364alteredBB

originalBBpart21366:                              ; preds = %originalBB1364
  br label %4980, !dbg !2936

4980:                                             ; preds = %originalBBpart21366, %originalBBpart21362
  %4981 = load i32, i32* @x.37
  %4982 = load i32, i32* @y.38
  %4983 = sub i32 %4981, 1
  %4984 = mul i32 %4981, %4983
  %4985 = urem i32 %4984, 2
  %4986 = icmp eq i32 %4985, 0
  %4987 = icmp slt i32 %4982, 10
  %4988 = or i1 %4986, %4987
  br i1 %4988, label %originalBB1368, label %originalBB1368alteredBB

originalBB1368:                                   ; preds = %4980, %originalBB1368alteredBB
  %4989 = load i64, i64* %29, align 8, !dbg !2939
  %4990 = add i64 %4989, 1, !dbg !2939
  store i64 %4990, i64* %29, align 8, !dbg !2939
  %4991 = load i32, i32* @x.37
  %4992 = load i32, i32* @y.38
  %4993 = sub i32 %4991, 1
  %4994 = mul i32 %4991, %4993
  %4995 = urem i32 %4994, 2
  %4996 = icmp eq i32 %4995, 0
  %4997 = icmp slt i32 %4992, 10
  %4998 = or i1 %4996, %4997
  br i1 %4998, label %originalBBpart21372, label %originalBB1368alteredBB

originalBBpart21372:                              ; preds = %originalBB1368
  br label %4999, !dbg !2939

4999:                                             ; preds = %originalBBpart21372
  %5000 = load i32, i32* @x.37
  %5001 = load i32, i32* @y.38
  %5002 = sub i32 %5000, 1
  %5003 = mul i32 %5000, %5002
  %5004 = urem i32 %5003, 2
  %5005 = icmp eq i32 %5004, 0
  %5006 = icmp slt i32 %5001, 10
  %5007 = or i1 %5005, %5006
  br i1 %5007, label %originalBB1374, label %originalBB1374alteredBB

originalBB1374:                                   ; preds = %4999, %originalBB1374alteredBB
  store i8 1, i8* %36, align 1, !dbg !2926
  %5008 = load i32, i32* @x.37
  %5009 = load i32, i32* @y.38
  %5010 = sub i32 %5008, 1
  %5011 = mul i32 %5008, %5010
  %5012 = urem i32 %5011, 2
  %5013 = icmp eq i32 %5012, 0
  %5014 = icmp slt i32 %5009, 10
  %5015 = or i1 %5013, %5014
  br i1 %5015, label %originalBBpart21376, label %originalBB1374alteredBB

originalBBpart21376:                              ; preds = %originalBB1374
  br label %5016, !dbg !2926

5016:                                             ; preds = %originalBBpart21376, %4784, %originalBBpart21309
  %5017 = load i32, i32* @x.37
  %5018 = load i32, i32* @y.38
  %5019 = sub i32 %5017, 1
  %5020 = mul i32 %5017, %5019
  %5021 = urem i32 %5020, 2
  %5022 = icmp eq i32 %5021, 0
  %5023 = icmp slt i32 %5018, 10
  %5024 = or i1 %5022, %5023
  br i1 %5024, label %originalBB1378, label %originalBB1378alteredBB

originalBB1378:                                   ; preds = %5016, %originalBB1378alteredBB
  %5025 = load i32, i32* @x.37
  %5026 = load i32, i32* @y.38
  %5027 = sub i32 %5025, 1
  %5028 = mul i32 %5025, %5027
  %5029 = urem i32 %5028, 2
  %5030 = icmp eq i32 %5029, 0
  %5031 = icmp slt i32 %5026, 10
  %5032 = or i1 %5030, %5031
  br i1 %5032, label %originalBBpart21380, label %originalBB1378alteredBB

originalBBpart21380:                              ; preds = %originalBB1378
  br label %5033, !dbg !2923

5033:                                             ; preds = %originalBBpart21380
  %5034 = load i32, i32* @x.37
  %5035 = load i32, i32* @y.38
  %5036 = sub i32 %5034, 1
  %5037 = mul i32 %5034, %5036
  %5038 = urem i32 %5037, 2
  %5039 = icmp eq i32 %5038, 0
  %5040 = icmp slt i32 %5035, 10
  %5041 = or i1 %5039, %5040
  br i1 %5041, label %originalBB1382, label %originalBB1382alteredBB

originalBB1382:                                   ; preds = %5033, %originalBB1382alteredBB
  %5042 = load i64, i64* %29, align 8, !dbg !2940
  %5043 = load i64, i64* %20, align 8, !dbg !2940
  %5044 = icmp ult i64 %5042, %5043, !dbg !2940
  %5045 = load i32, i32* @x.37
  %5046 = load i32, i32* @y.38
  %5047 = sub i32 %5045, 1
  %5048 = mul i32 %5045, %5047
  %5049 = urem i32 %5048, 2
  %5050 = icmp eq i32 %5049, 0
  %5051 = icmp slt i32 %5046, 10
  %5052 = or i1 %5050, %5051
  br i1 %5052, label %originalBBpart21384, label %originalBB1382alteredBB

originalBBpart21384:                              ; preds = %originalBB1382
  br i1 %5044, label %5053, label %5073, !dbg !2943

5053:                                             ; preds = %originalBBpart21384
  %5054 = load i32, i32* @x.37
  %5055 = load i32, i32* @y.38
  %5056 = sub i32 %5054, 1
  %5057 = mul i32 %5054, %5056
  %5058 = urem i32 %5057, 2
  %5059 = icmp eq i32 %5058, 0
  %5060 = icmp slt i32 %5055, 10
  %5061 = or i1 %5059, %5060
  br i1 %5061, label %originalBB1386, label %originalBB1386alteredBB

originalBB1386:                                   ; preds = %5053, %originalBB1386alteredBB
  %5062 = load i8*, i8** %19, align 8, !dbg !2940
  %5063 = load i64, i64* %29, align 8, !dbg !2940
  %5064 = getelementptr inbounds i8, i8* %5062, i64 %5063, !dbg !2940
  store i8 92, i8* %5064, align 1, !dbg !2940
  %5065 = load i32, i32* @x.37
  %5066 = load i32, i32* @y.38
  %5067 = sub i32 %5065, 1
  %5068 = mul i32 %5065, %5067
  %5069 = urem i32 %5068, 2
  %5070 = icmp eq i32 %5069, 0
  %5071 = icmp slt i32 %5066, 10
  %5072 = or i1 %5070, %5071
  br i1 %5072, label %originalBBpart21388, label %originalBB1386alteredBB

originalBBpart21388:                              ; preds = %originalBB1386
  br label %5073, !dbg !2940

5073:                                             ; preds = %originalBBpart21388, %originalBBpart21384
  %5074 = load i32, i32* @x.37
  %5075 = load i32, i32* @y.38
  %5076 = sub i32 %5074, 1
  %5077 = mul i32 %5074, %5076
  %5078 = urem i32 %5077, 2
  %5079 = icmp eq i32 %5078, 0
  %5080 = icmp slt i32 %5075, 10
  %5081 = or i1 %5079, %5080
  br i1 %5081, label %originalBB1390, label %originalBB1390alteredBB

originalBB1390:                                   ; preds = %5073, %originalBB1390alteredBB
  %5082 = load i64, i64* %29, align 8, !dbg !2943
  %5083 = add i64 %5082, 1, !dbg !2943
  store i64 %5083, i64* %29, align 8, !dbg !2943
  %5084 = load i32, i32* @x.37
  %5085 = load i32, i32* @y.38
  %5086 = sub i32 %5084, 1
  %5087 = mul i32 %5084, %5086
  %5088 = urem i32 %5087, 2
  %5089 = icmp eq i32 %5088, 0
  %5090 = icmp slt i32 %5085, 10
  %5091 = or i1 %5089, %5090
  br i1 %5091, label %originalBBpart21396, label %originalBB1390alteredBB

originalBBpart21396:                              ; preds = %originalBB1390
  br label %5092, !dbg !2943

5092:                                             ; preds = %originalBBpart21396
  %5093 = load i32, i32* @x.37
  %5094 = load i32, i32* @y.38
  %5095 = sub i32 %5093, 1
  %5096 = mul i32 %5093, %5095
  %5097 = urem i32 %5096, 2
  %5098 = icmp eq i32 %5097, 0
  %5099 = icmp slt i32 %5094, 10
  %5100 = or i1 %5098, %5099
  br i1 %5100, label %originalBB1398, label %originalBB1398alteredBB

originalBB1398:                                   ; preds = %5092, %originalBB1398alteredBB
  %5101 = load i32, i32* @x.37
  %5102 = load i32, i32* @y.38
  %5103 = sub i32 %5101, 1
  %5104 = mul i32 %5101, %5103
  %5105 = urem i32 %5104, 2
  %5106 = icmp eq i32 %5105, 0
  %5107 = icmp slt i32 %5102, 10
  %5108 = or i1 %5106, %5107
  br i1 %5108, label %originalBBpart21400, label %originalBB1398alteredBB

originalBBpart21400:                              ; preds = %originalBB1398
  br label %5109, !dbg !2923

5109:                                             ; preds = %originalBBpart21400
  %5110 = load i32, i32* @x.37
  %5111 = load i32, i32* @y.38
  %5112 = sub i32 %5110, 1
  %5113 = mul i32 %5110, %5112
  %5114 = urem i32 %5113, 2
  %5115 = icmp eq i32 %5114, 0
  %5116 = icmp slt i32 %5111, 10
  %5117 = or i1 %5115, %5116
  br i1 %5117, label %originalBB1402, label %originalBB1402alteredBB

originalBB1402:                                   ; preds = %5109, %originalBB1402alteredBB
  %5118 = load i32, i32* @x.37
  %5119 = load i32, i32* @y.38
  %5120 = sub i32 %5118, 1
  %5121 = mul i32 %5118, %5120
  %5122 = urem i32 %5121, 2
  %5123 = icmp eq i32 %5122, 0
  %5124 = icmp slt i32 %5119, 10
  %5125 = or i1 %5123, %5124
  br i1 %5125, label %originalBBpart21404, label %originalBB1402alteredBB

originalBBpart21404:                              ; preds = %originalBB1402
  br label %5126, !dbg !2923

5126:                                             ; preds = %originalBBpart21404, %originalBBpart21289, %originalBBpart21265, %2334, %2276
  call void @llvm.dbg.label(metadata !2944), !dbg !2945
  %5127 = load i32, i32* @x.37
  %5128 = load i32, i32* @y.38
  %5129 = sub i32 %5127, 1
  %5130 = mul i32 %5127, %5129
  %5131 = urem i32 %5130, 2
  %5132 = icmp eq i32 %5131, 0
  %5133 = icmp slt i32 %5128, 10
  %5134 = or i1 %5132, %5133
  br i1 %5134, label %originalBB1406, label %originalBB1406alteredBB

originalBB1406:                                   ; preds = %5126, %originalBB1406alteredBB
  %5135 = load i32, i32* @x.37
  %5136 = load i32, i32* @y.38
  %5137 = sub i32 %5135, 1
  %5138 = mul i32 %5135, %5137
  %5139 = urem i32 %5138, 2
  %5140 = icmp eq i32 %5139, 0
  %5141 = icmp slt i32 %5136, 10
  %5142 = or i1 %5140, %5141
  br i1 %5142, label %originalBBpart21408, label %originalBB1406alteredBB

originalBBpart21408:                              ; preds = %originalBB1406
  br label %5143, !dbg !2946

5143:                                             ; preds = %originalBBpart21408
  %5144 = load i8, i8* %36, align 1, !dbg !2947
  %5145 = trunc i8 %5144 to i1, !dbg !2947
  br i1 %5145, label %5146, label %5334, !dbg !2947

5146:                                             ; preds = %5143
  %5147 = load i32, i32* @x.37
  %5148 = load i32, i32* @y.38
  %5149 = sub i32 %5147, 1
  %5150 = mul i32 %5147, %5149
  %5151 = urem i32 %5150, 2
  %5152 = icmp eq i32 %5151, 0
  %5153 = icmp slt i32 %5148, 10
  %5154 = or i1 %5152, %5153
  br i1 %5154, label %originalBB1410, label %originalBB1410alteredBB

originalBB1410:                                   ; preds = %5146, %originalBB1410alteredBB
  %5155 = load i8, i8* %42, align 1, !dbg !2947
  %5156 = trunc i8 %5155 to i1, !dbg !2947
  %5157 = load i32, i32* @x.37
  %5158 = load i32, i32* @y.38
  %5159 = sub i32 %5157, 1
  %5160 = mul i32 %5157, %5159
  %5161 = urem i32 %5160, 2
  %5162 = icmp eq i32 %5161, 0
  %5163 = icmp slt i32 %5158, 10
  %5164 = or i1 %5162, %5163
  br i1 %5164, label %originalBBpart21412, label %originalBB1410alteredBB

originalBBpart21412:                              ; preds = %originalBB1410
  br i1 %5156, label %5334, label %5165, !dbg !2950

5165:                                             ; preds = %originalBBpart21412
  %5166 = load i32, i32* @x.37
  %5167 = load i32, i32* @y.38
  %5168 = sub i32 %5166, 1
  %5169 = mul i32 %5166, %5168
  %5170 = urem i32 %5169, 2
  %5171 = icmp eq i32 %5170, 0
  %5172 = icmp slt i32 %5167, 10
  %5173 = or i1 %5171, %5172
  br i1 %5173, label %originalBB1414, label %originalBB1414alteredBB

originalBB1414:                                   ; preds = %5165, %originalBB1414alteredBB
  %5174 = load i32, i32* @x.37
  %5175 = load i32, i32* @y.38
  %5176 = sub i32 %5174, 1
  %5177 = mul i32 %5174, %5176
  %5178 = urem i32 %5177, 2
  %5179 = icmp eq i32 %5178, 0
  %5180 = icmp slt i32 %5175, 10
  %5181 = or i1 %5179, %5180
  br i1 %5181, label %originalBBpart21416, label %originalBB1414alteredBB

originalBBpart21416:                              ; preds = %originalBB1414
  br label %5182, !dbg !2951

5182:                                             ; preds = %originalBBpart21416
  %5183 = load i32, i32* @x.37
  %5184 = load i32, i32* @y.38
  %5185 = sub i32 %5183, 1
  %5186 = mul i32 %5183, %5185
  %5187 = urem i32 %5186, 2
  %5188 = icmp eq i32 %5187, 0
  %5189 = icmp slt i32 %5184, 10
  %5190 = or i1 %5188, %5189
  br i1 %5190, label %originalBB1418, label %originalBB1418alteredBB

originalBB1418:                                   ; preds = %5182, %originalBB1418alteredBB
  %5191 = load i64, i64* %29, align 8, !dbg !2953
  %5192 = load i64, i64* %20, align 8, !dbg !2953
  %5193 = icmp ult i64 %5191, %5192, !dbg !2953
  %5194 = load i32, i32* @x.37
  %5195 = load i32, i32* @y.38
  %5196 = sub i32 %5194, 1
  %5197 = mul i32 %5194, %5196
  %5198 = urem i32 %5197, 2
  %5199 = icmp eq i32 %5198, 0
  %5200 = icmp slt i32 %5195, 10
  %5201 = or i1 %5199, %5200
  br i1 %5201, label %originalBBpart21420, label %originalBB1418alteredBB

originalBBpart21420:                              ; preds = %originalBB1418
  br i1 %5193, label %5202, label %5222, !dbg !2956

5202:                                             ; preds = %originalBBpart21420
  %5203 = load i32, i32* @x.37
  %5204 = load i32, i32* @y.38
  %5205 = sub i32 %5203, 1
  %5206 = mul i32 %5203, %5205
  %5207 = urem i32 %5206, 2
  %5208 = icmp eq i32 %5207, 0
  %5209 = icmp slt i32 %5204, 10
  %5210 = or i1 %5208, %5209
  br i1 %5210, label %originalBB1422, label %originalBB1422alteredBB

originalBB1422:                                   ; preds = %5202, %originalBB1422alteredBB
  %5211 = load i8*, i8** %19, align 8, !dbg !2953
  %5212 = load i64, i64* %29, align 8, !dbg !2953
  %5213 = getelementptr inbounds i8, i8* %5211, i64 %5212, !dbg !2953
  store i8 39, i8* %5213, align 1, !dbg !2953
  %5214 = load i32, i32* @x.37
  %5215 = load i32, i32* @y.38
  %5216 = sub i32 %5214, 1
  %5217 = mul i32 %5214, %5216
  %5218 = urem i32 %5217, 2
  %5219 = icmp eq i32 %5218, 0
  %5220 = icmp slt i32 %5215, 10
  %5221 = or i1 %5219, %5220
  br i1 %5221, label %originalBBpart21424, label %originalBB1422alteredBB

originalBBpart21424:                              ; preds = %originalBB1422
  br label %5222, !dbg !2953

5222:                                             ; preds = %originalBBpart21424, %originalBBpart21420
  %5223 = load i32, i32* @x.37
  %5224 = load i32, i32* @y.38
  %5225 = sub i32 %5223, 1
  %5226 = mul i32 %5223, %5225
  %5227 = urem i32 %5226, 2
  %5228 = icmp eq i32 %5227, 0
  %5229 = icmp slt i32 %5224, 10
  %5230 = or i1 %5228, %5229
  br i1 %5230, label %originalBB1426, label %originalBB1426alteredBB

originalBB1426:                                   ; preds = %5222, %originalBB1426alteredBB
  %5231 = load i64, i64* %29, align 8, !dbg !2956
  %5232 = add i64 %5231, 1, !dbg !2956
  store i64 %5232, i64* %29, align 8, !dbg !2956
  %5233 = load i32, i32* @x.37
  %5234 = load i32, i32* @y.38
  %5235 = sub i32 %5233, 1
  %5236 = mul i32 %5233, %5235
  %5237 = urem i32 %5236, 2
  %5238 = icmp eq i32 %5237, 0
  %5239 = icmp slt i32 %5234, 10
  %5240 = or i1 %5238, %5239
  br i1 %5240, label %originalBBpart21438, label %originalBB1426alteredBB

originalBBpart21438:                              ; preds = %originalBB1426
  br label %5241, !dbg !2956

5241:                                             ; preds = %originalBBpart21438
  %5242 = load i32, i32* @x.37
  %5243 = load i32, i32* @y.38
  %5244 = sub i32 %5242, 1
  %5245 = mul i32 %5242, %5244
  %5246 = urem i32 %5245, 2
  %5247 = icmp eq i32 %5246, 0
  %5248 = icmp slt i32 %5243, 10
  %5249 = or i1 %5247, %5248
  br i1 %5249, label %originalBB1440, label %originalBB1440alteredBB

originalBB1440:                                   ; preds = %5241, %originalBB1440alteredBB
  %5250 = load i32, i32* @x.37
  %5251 = load i32, i32* @y.38
  %5252 = sub i32 %5250, 1
  %5253 = mul i32 %5250, %5252
  %5254 = urem i32 %5253, 2
  %5255 = icmp eq i32 %5254, 0
  %5256 = icmp slt i32 %5251, 10
  %5257 = or i1 %5255, %5256
  br i1 %5257, label %originalBBpart21442, label %originalBB1440alteredBB

originalBBpart21442:                              ; preds = %originalBB1440
  br label %5258, !dbg !2951

5258:                                             ; preds = %originalBBpart21442
  %5259 = load i32, i32* @x.37
  %5260 = load i32, i32* @y.38
  %5261 = sub i32 %5259, 1
  %5262 = mul i32 %5259, %5261
  %5263 = urem i32 %5262, 2
  %5264 = icmp eq i32 %5263, 0
  %5265 = icmp slt i32 %5260, 10
  %5266 = or i1 %5264, %5265
  br i1 %5266, label %originalBB1444, label %originalBB1444alteredBB

originalBB1444:                                   ; preds = %5258, %originalBB1444alteredBB
  %5267 = load i64, i64* %29, align 8, !dbg !2957
  %5268 = load i64, i64* %20, align 8, !dbg !2957
  %5269 = icmp ult i64 %5267, %5268, !dbg !2957
  %5270 = load i32, i32* @x.37
  %5271 = load i32, i32* @y.38
  %5272 = sub i32 %5270, 1
  %5273 = mul i32 %5270, %5272
  %5274 = urem i32 %5273, 2
  %5275 = icmp eq i32 %5274, 0
  %5276 = icmp slt i32 %5271, 10
  %5277 = or i1 %5275, %5276
  br i1 %5277, label %originalBBpart21446, label %originalBB1444alteredBB

originalBBpart21446:                              ; preds = %originalBB1444
  br i1 %5269, label %5278, label %5298, !dbg !2960

5278:                                             ; preds = %originalBBpart21446
  %5279 = load i32, i32* @x.37
  %5280 = load i32, i32* @y.38
  %5281 = sub i32 %5279, 1
  %5282 = mul i32 %5279, %5281
  %5283 = urem i32 %5282, 2
  %5284 = icmp eq i32 %5283, 0
  %5285 = icmp slt i32 %5280, 10
  %5286 = or i1 %5284, %5285
  br i1 %5286, label %originalBB1448, label %originalBB1448alteredBB

originalBB1448:                                   ; preds = %5278, %originalBB1448alteredBB
  %5287 = load i8*, i8** %19, align 8, !dbg !2957
  %5288 = load i64, i64* %29, align 8, !dbg !2957
  %5289 = getelementptr inbounds i8, i8* %5287, i64 %5288, !dbg !2957
  store i8 39, i8* %5289, align 1, !dbg !2957
  %5290 = load i32, i32* @x.37
  %5291 = load i32, i32* @y.38
  %5292 = sub i32 %5290, 1
  %5293 = mul i32 %5290, %5292
  %5294 = urem i32 %5293, 2
  %5295 = icmp eq i32 %5294, 0
  %5296 = icmp slt i32 %5291, 10
  %5297 = or i1 %5295, %5296
  br i1 %5297, label %originalBBpart21450, label %originalBB1448alteredBB

originalBBpart21450:                              ; preds = %originalBB1448
  br label %5298, !dbg !2957

5298:                                             ; preds = %originalBBpart21450, %originalBBpart21446
  %5299 = load i32, i32* @x.37
  %5300 = load i32, i32* @y.38
  %5301 = sub i32 %5299, 1
  %5302 = mul i32 %5299, %5301
  %5303 = urem i32 %5302, 2
  %5304 = icmp eq i32 %5303, 0
  %5305 = icmp slt i32 %5300, 10
  %5306 = or i1 %5304, %5305
  br i1 %5306, label %originalBB1452, label %originalBB1452alteredBB

originalBB1452:                                   ; preds = %5298, %originalBB1452alteredBB
  %5307 = load i64, i64* %29, align 8, !dbg !2960
  %5308 = add i64 %5307, 1, !dbg !2960
  store i64 %5308, i64* %29, align 8, !dbg !2960
  %5309 = load i32, i32* @x.37
  %5310 = load i32, i32* @y.38
  %5311 = sub i32 %5309, 1
  %5312 = mul i32 %5309, %5311
  %5313 = urem i32 %5312, 2
  %5314 = icmp eq i32 %5313, 0
  %5315 = icmp slt i32 %5310, 10
  %5316 = or i1 %5314, %5315
  br i1 %5316, label %originalBBpart21457, label %originalBB1452alteredBB

originalBBpart21457:                              ; preds = %originalBB1452
  br label %5317, !dbg !2960

5317:                                             ; preds = %originalBBpart21457
  %5318 = load i32, i32* @x.37
  %5319 = load i32, i32* @y.38
  %5320 = sub i32 %5318, 1
  %5321 = mul i32 %5318, %5320
  %5322 = urem i32 %5321, 2
  %5323 = icmp eq i32 %5322, 0
  %5324 = icmp slt i32 %5319, 10
  %5325 = or i1 %5323, %5324
  br i1 %5325, label %originalBB1459, label %originalBB1459alteredBB

originalBB1459:                                   ; preds = %5317, %originalBB1459alteredBB
  store i8 0, i8* %36, align 1, !dbg !2951
  %5326 = load i32, i32* @x.37
  %5327 = load i32, i32* @y.38
  %5328 = sub i32 %5326, 1
  %5329 = mul i32 %5326, %5328
  %5330 = urem i32 %5329, 2
  %5331 = icmp eq i32 %5330, 0
  %5332 = icmp slt i32 %5327, 10
  %5333 = or i1 %5331, %5332
  br i1 %5333, label %originalBBpart21461, label %originalBB1459alteredBB

originalBBpart21461:                              ; preds = %originalBB1459
  br label %5334, !dbg !2951

5334:                                             ; preds = %originalBBpart21461, %originalBBpart21412, %5143
  %5335 = load i32, i32* @x.37
  %5336 = load i32, i32* @y.38
  %5337 = sub i32 %5335, 1
  %5338 = mul i32 %5335, %5337
  %5339 = urem i32 %5338, 2
  %5340 = icmp eq i32 %5339, 0
  %5341 = icmp slt i32 %5336, 10
  %5342 = or i1 %5340, %5341
  br i1 %5342, label %originalBB1463, label %originalBB1463alteredBB

originalBB1463:                                   ; preds = %5334, %originalBB1463alteredBB
  %5343 = load i32, i32* @x.37
  %5344 = load i32, i32* @y.38
  %5345 = sub i32 %5343, 1
  %5346 = mul i32 %5343, %5345
  %5347 = urem i32 %5346, 2
  %5348 = icmp eq i32 %5347, 0
  %5349 = icmp slt i32 %5344, 10
  %5350 = or i1 %5348, %5349
  br i1 %5350, label %originalBBpart21465, label %originalBB1463alteredBB

originalBBpart21465:                              ; preds = %originalBB1463
  br label %5351, !dbg !2950

5351:                                             ; preds = %originalBBpart21465
  %5352 = load i32, i32* @x.37
  %5353 = load i32, i32* @y.38
  %5354 = sub i32 %5352, 1
  %5355 = mul i32 %5352, %5354
  %5356 = urem i32 %5355, 2
  %5357 = icmp eq i32 %5356, 0
  %5358 = icmp slt i32 %5353, 10
  %5359 = or i1 %5357, %5358
  br i1 %5359, label %originalBB1467, label %originalBB1467alteredBB

originalBB1467:                                   ; preds = %5351, %originalBB1467alteredBB
  %5360 = load i32, i32* @x.37
  %5361 = load i32, i32* @y.38
  %5362 = sub i32 %5360, 1
  %5363 = mul i32 %5360, %5362
  %5364 = urem i32 %5363, 2
  %5365 = icmp eq i32 %5364, 0
  %5366 = icmp slt i32 %5361, 10
  %5367 = or i1 %5365, %5366
  br i1 %5367, label %originalBBpart21469, label %originalBB1467alteredBB

originalBBpart21469:                              ; preds = %originalBB1467
  br label %5368, !dbg !2961

5368:                                             ; preds = %originalBBpart21469
  %5369 = load i32, i32* @x.37
  %5370 = load i32, i32* @y.38
  %5371 = sub i32 %5369, 1
  %5372 = mul i32 %5369, %5371
  %5373 = urem i32 %5372, 2
  %5374 = icmp eq i32 %5373, 0
  %5375 = icmp slt i32 %5370, 10
  %5376 = or i1 %5374, %5375
  br i1 %5376, label %originalBB1471, label %originalBB1471alteredBB

originalBB1471:                                   ; preds = %5368, %originalBB1471alteredBB
  %5377 = load i64, i64* %29, align 8, !dbg !2962
  %5378 = load i64, i64* %20, align 8, !dbg !2962
  %5379 = icmp ult i64 %5377, %5378, !dbg !2962
  %5380 = load i32, i32* @x.37
  %5381 = load i32, i32* @y.38
  %5382 = sub i32 %5380, 1
  %5383 = mul i32 %5380, %5382
  %5384 = urem i32 %5383, 2
  %5385 = icmp eq i32 %5384, 0
  %5386 = icmp slt i32 %5381, 10
  %5387 = or i1 %5385, %5386
  br i1 %5387, label %originalBBpart21473, label %originalBB1471alteredBB

originalBBpart21473:                              ; preds = %originalBB1471
  br i1 %5379, label %5388, label %5409, !dbg !2965

5388:                                             ; preds = %originalBBpart21473
  %5389 = load i32, i32* @x.37
  %5390 = load i32, i32* @y.38
  %5391 = sub i32 %5389, 1
  %5392 = mul i32 %5389, %5391
  %5393 = urem i32 %5392, 2
  %5394 = icmp eq i32 %5393, 0
  %5395 = icmp slt i32 %5390, 10
  %5396 = or i1 %5394, %5395
  br i1 %5396, label %originalBB1475, label %originalBB1475alteredBB

originalBB1475:                                   ; preds = %5388, %originalBB1475alteredBB
  %5397 = load i8, i8* %39, align 1, !dbg !2962
  %5398 = load i8*, i8** %19, align 8, !dbg !2962
  %5399 = load i64, i64* %29, align 8, !dbg !2962
  %5400 = getelementptr inbounds i8, i8* %5398, i64 %5399, !dbg !2962
  store i8 %5397, i8* %5400, align 1, !dbg !2962
  %5401 = load i32, i32* @x.37
  %5402 = load i32, i32* @y.38
  %5403 = sub i32 %5401, 1
  %5404 = mul i32 %5401, %5403
  %5405 = urem i32 %5404, 2
  %5406 = icmp eq i32 %5405, 0
  %5407 = icmp slt i32 %5402, 10
  %5408 = or i1 %5406, %5407
  br i1 %5408, label %originalBBpart21477, label %originalBB1475alteredBB

originalBBpart21477:                              ; preds = %originalBB1475
  br label %5409, !dbg !2962

5409:                                             ; preds = %originalBBpart21477, %originalBBpart21473
  %5410 = load i32, i32* @x.37
  %5411 = load i32, i32* @y.38
  %5412 = sub i32 %5410, 1
  %5413 = mul i32 %5410, %5412
  %5414 = urem i32 %5413, 2
  %5415 = icmp eq i32 %5414, 0
  %5416 = icmp slt i32 %5411, 10
  %5417 = or i1 %5415, %5416
  br i1 %5417, label %originalBB1479, label %originalBB1479alteredBB

originalBB1479:                                   ; preds = %5409, %originalBB1479alteredBB
  %5418 = load i64, i64* %29, align 8, !dbg !2965
  %5419 = add i64 %5418, 1, !dbg !2965
  store i64 %5419, i64* %29, align 8, !dbg !2965
  %5420 = load i32, i32* @x.37
  %5421 = load i32, i32* @y.38
  %5422 = sub i32 %5420, 1
  %5423 = mul i32 %5420, %5422
  %5424 = urem i32 %5423, 2
  %5425 = icmp eq i32 %5424, 0
  %5426 = icmp slt i32 %5421, 10
  %5427 = or i1 %5425, %5426
  br i1 %5427, label %originalBBpart21489, label %originalBB1479alteredBB

originalBBpart21489:                              ; preds = %originalBB1479
  br label %5428, !dbg !2965

5428:                                             ; preds = %originalBBpart21489
  %5429 = load i32, i32* @x.37
  %5430 = load i32, i32* @y.38
  %5431 = sub i32 %5429, 1
  %5432 = mul i32 %5429, %5431
  %5433 = urem i32 %5432, 2
  %5434 = icmp eq i32 %5433, 0
  %5435 = icmp slt i32 %5430, 10
  %5436 = or i1 %5434, %5435
  br i1 %5436, label %originalBB1491, label %originalBB1491alteredBB

originalBB1491:                                   ; preds = %5428, %originalBB1491alteredBB
  %5437 = load i8, i8* %43, align 1, !dbg !2966
  %5438 = trunc i8 %5437 to i1, !dbg !2966
  %5439 = load i32, i32* @x.37
  %5440 = load i32, i32* @y.38
  %5441 = sub i32 %5439, 1
  %5442 = mul i32 %5439, %5441
  %5443 = urem i32 %5442, 2
  %5444 = icmp eq i32 %5443, 0
  %5445 = icmp slt i32 %5440, 10
  %5446 = or i1 %5444, %5445
  br i1 %5446, label %originalBBpart21493, label %originalBB1491alteredBB

originalBBpart21493:                              ; preds = %originalBB1491
  br i1 %5438, label %5464, label %5447, !dbg !2968

5447:                                             ; preds = %originalBBpart21493
  %5448 = load i32, i32* @x.37
  %5449 = load i32, i32* @y.38
  %5450 = sub i32 %5448, 1
  %5451 = mul i32 %5448, %5450
  %5452 = urem i32 %5451, 2
  %5453 = icmp eq i32 %5452, 0
  %5454 = icmp slt i32 %5449, 10
  %5455 = or i1 %5453, %5454
  br i1 %5455, label %originalBB1495, label %originalBB1495alteredBB

originalBB1495:                                   ; preds = %5447, %originalBB1495alteredBB
  store i8 0, i8* %38, align 1, !dbg !2969
  %5456 = load i32, i32* @x.37
  %5457 = load i32, i32* @y.38
  %5458 = sub i32 %5456, 1
  %5459 = mul i32 %5456, %5458
  %5460 = urem i32 %5459, 2
  %5461 = icmp eq i32 %5460, 0
  %5462 = icmp slt i32 %5457, 10
  %5463 = or i1 %5461, %5462
  br i1 %5463, label %originalBBpart21497, label %originalBB1495alteredBB

originalBBpart21497:                              ; preds = %originalBB1495
  br label %5464, !dbg !2970

5464:                                             ; preds = %originalBBpart21497, %originalBBpart21493
  %5465 = load i32, i32* @x.37
  %5466 = load i32, i32* @y.38
  %5467 = sub i32 %5465, 1
  %5468 = mul i32 %5465, %5467
  %5469 = urem i32 %5468, 2
  %5470 = icmp eq i32 %5469, 0
  %5471 = icmp slt i32 %5466, 10
  %5472 = or i1 %5470, %5471
  br i1 %5472, label %originalBB1499, label %originalBB1499alteredBB

originalBB1499:                                   ; preds = %5464, %originalBB1499alteredBB
  %5473 = load i32, i32* @x.37
  %5474 = load i32, i32* @y.38
  %5475 = sub i32 %5473, 1
  %5476 = mul i32 %5473, %5475
  %5477 = urem i32 %5476, 2
  %5478 = icmp eq i32 %5477, 0
  %5479 = icmp slt i32 %5474, 10
  %5480 = or i1 %5478, %5479
  br i1 %5480, label %originalBBpart21501, label %originalBB1499alteredBB

originalBBpart21501:                              ; preds = %originalBB1499
  br label %5481, !dbg !2971

5481:                                             ; preds = %originalBBpart21501, %1570
  %5482 = load i32, i32* @x.37
  %5483 = load i32, i32* @y.38
  %5484 = sub i32 %5482, 1
  %5485 = mul i32 %5482, %5484
  %5486 = urem i32 %5485, 2
  %5487 = icmp eq i32 %5486, 0
  %5488 = icmp slt i32 %5483, 10
  %5489 = or i1 %5487, %5488
  br i1 %5489, label %originalBB1503, label %originalBB1503alteredBB

originalBB1503:                                   ; preds = %5481, %originalBB1503alteredBB
  %5490 = load i64, i64* %28, align 8, !dbg !2972
  %5491 = add i64 %5490, 1, !dbg !2972
  store i64 %5491, i64* %28, align 8, !dbg !2972
  %5492 = load i32, i32* @x.37
  %5493 = load i32, i32* @y.38
  %5494 = sub i32 %5492, 1
  %5495 = mul i32 %5492, %5494
  %5496 = urem i32 %5495, 2
  %5497 = icmp eq i32 %5496, 0
  %5498 = icmp slt i32 %5493, 10
  %5499 = or i1 %5497, %5498
  br i1 %5499, label %originalBBpart21508, label %originalBB1503alteredBB

originalBBpart21508:                              ; preds = %originalBB1503
  br label %666, !dbg !2973, !llvm.loop !2974

5500:                                             ; preds = %originalBBpart2177
  %5501 = load i64, i64* %29, align 8, !dbg !2976
  %5502 = icmp eq i64 %5501, 0, !dbg !2978
  br i1 %5502, label %5503, label %5558, !dbg !2979

5503:                                             ; preds = %5500
  %5504 = load i32, i32* @x.37
  %5505 = load i32, i32* @y.38
  %5506 = sub i32 %5504, 1
  %5507 = mul i32 %5504, %5506
  %5508 = urem i32 %5507, 2
  %5509 = icmp eq i32 %5508, 0
  %5510 = icmp slt i32 %5505, 10
  %5511 = or i1 %5509, %5510
  br i1 %5511, label %originalBB1510, label %originalBB1510alteredBB

originalBB1510:                                   ; preds = %5503, %originalBB1510alteredBB
  %5512 = load i32, i32* %23, align 4, !dbg !2980
  %5513 = icmp eq i32 %5512, 2, !dbg !2981
  %5514 = load i32, i32* @x.37
  %5515 = load i32, i32* @y.38
  %5516 = sub i32 %5514, 1
  %5517 = mul i32 %5514, %5516
  %5518 = urem i32 %5517, 2
  %5519 = icmp eq i32 %5518, 0
  %5520 = icmp slt i32 %5515, 10
  %5521 = or i1 %5519, %5520
  br i1 %5521, label %originalBBpart21512, label %originalBB1510alteredBB

originalBBpart21512:                              ; preds = %originalBB1510
  br i1 %5513, label %5522, label %5558, !dbg !2982

5522:                                             ; preds = %originalBBpart21512
  %5523 = load i32, i32* @x.37
  %5524 = load i32, i32* @y.38
  %5525 = sub i32 %5523, 1
  %5526 = mul i32 %5523, %5525
  %5527 = urem i32 %5526, 2
  %5528 = icmp eq i32 %5527, 0
  %5529 = icmp slt i32 %5524, 10
  %5530 = or i1 %5528, %5529
  br i1 %5530, label %originalBB1514, label %originalBB1514alteredBB

originalBB1514:                                   ; preds = %5522, %originalBB1514alteredBB
  %5531 = load i8, i8* %35, align 1, !dbg !2983
  %5532 = trunc i8 %5531 to i1, !dbg !2983
  %5533 = load i32, i32* @x.37
  %5534 = load i32, i32* @y.38
  %5535 = sub i32 %5533, 1
  %5536 = mul i32 %5533, %5535
  %5537 = urem i32 %5536, 2
  %5538 = icmp eq i32 %5537, 0
  %5539 = icmp slt i32 %5534, 10
  %5540 = or i1 %5538, %5539
  br i1 %5540, label %originalBBpart21516, label %originalBB1514alteredBB

originalBBpart21516:                              ; preds = %originalBB1514
  br i1 %5532, label %5541, label %5558, !dbg !2984

5541:                                             ; preds = %originalBBpart21516
  %5542 = load i32, i32* @x.37
  %5543 = load i32, i32* @y.38
  %5544 = sub i32 %5542, 1
  %5545 = mul i32 %5542, %5544
  %5546 = urem i32 %5545, 2
  %5547 = icmp eq i32 %5546, 0
  %5548 = icmp slt i32 %5543, 10
  %5549 = or i1 %5547, %5548
  br i1 %5549, label %originalBB1518, label %originalBB1518alteredBB

originalBB1518:                                   ; preds = %5541, %originalBB1518alteredBB
  %5550 = load i32, i32* @x.37
  %5551 = load i32, i32* @y.38
  %5552 = sub i32 %5550, 1
  %5553 = mul i32 %5550, %5552
  %5554 = urem i32 %5553, 2
  %5555 = icmp eq i32 %5554, 0
  %5556 = icmp slt i32 %5551, 10
  %5557 = or i1 %5555, %5556
  br i1 %5557, label %originalBBpart21520, label %originalBB1518alteredBB

originalBBpart21520:                              ; preds = %originalBB1518
  br label %5982, !dbg !2985

5558:                                             ; preds = %originalBBpart21516, %originalBBpart21512, %5500
  %5559 = load i32, i32* @x.37
  %5560 = load i32, i32* @y.38
  %5561 = sub i32 %5559, 1
  %5562 = mul i32 %5559, %5561
  %5563 = urem i32 %5562, 2
  %5564 = icmp eq i32 %5563, 0
  %5565 = icmp slt i32 %5560, 10
  %5566 = or i1 %5564, %5565
  br i1 %5566, label %originalBB1522, label %originalBB1522alteredBB

originalBB1522:                                   ; preds = %5558, %originalBB1522alteredBB
  %5567 = load i32, i32* %23, align 4, !dbg !2986
  %5568 = icmp eq i32 %5567, 2, !dbg !2988
  %5569 = load i32, i32* @x.37
  %5570 = load i32, i32* @y.38
  %5571 = sub i32 %5569, 1
  %5572 = mul i32 %5569, %5571
  %5573 = urem i32 %5572, 2
  %5574 = icmp eq i32 %5573, 0
  %5575 = icmp slt i32 %5570, 10
  %5576 = or i1 %5574, %5575
  br i1 %5576, label %originalBBpart21524, label %originalBB1522alteredBB

originalBBpart21524:                              ; preds = %originalBB1522
  br i1 %5568, label %5577, label %5734, !dbg !2989

5577:                                             ; preds = %originalBBpart21524
  %5578 = load i32, i32* @x.37
  %5579 = load i32, i32* @y.38
  %5580 = sub i32 %5578, 1
  %5581 = mul i32 %5578, %5580
  %5582 = urem i32 %5581, 2
  %5583 = icmp eq i32 %5582, 0
  %5584 = icmp slt i32 %5579, 10
  %5585 = or i1 %5583, %5584
  br i1 %5585, label %originalBB1526, label %originalBB1526alteredBB

originalBB1526:                                   ; preds = %5577, %originalBB1526alteredBB
  %5586 = load i8, i8* %35, align 1, !dbg !2990
  %5587 = trunc i8 %5586 to i1, !dbg !2990
  %5588 = load i32, i32* @x.37
  %5589 = load i32, i32* @y.38
  %5590 = sub i32 %5588, 1
  %5591 = mul i32 %5588, %5590
  %5592 = urem i32 %5591, 2
  %5593 = icmp eq i32 %5592, 0
  %5594 = icmp slt i32 %5589, 10
  %5595 = or i1 %5593, %5594
  br i1 %5595, label %originalBBpart21528, label %originalBB1526alteredBB

originalBBpart21528:                              ; preds = %originalBB1526
  br i1 %5587, label %5734, label %5596, !dbg !2991

5596:                                             ; preds = %originalBBpart21528
  %5597 = load i32, i32* @x.37
  %5598 = load i32, i32* @y.38
  %5599 = sub i32 %5597, 1
  %5600 = mul i32 %5597, %5599
  %5601 = urem i32 %5600, 2
  %5602 = icmp eq i32 %5601, 0
  %5603 = icmp slt i32 %5598, 10
  %5604 = or i1 %5602, %5603
  br i1 %5604, label %originalBB1530, label %originalBB1530alteredBB

originalBB1530:                                   ; preds = %5596, %originalBB1530alteredBB
  %5605 = load i8, i8* %37, align 1, !dbg !2992
  %5606 = trunc i8 %5605 to i1, !dbg !2992
  %5607 = load i32, i32* @x.37
  %5608 = load i32, i32* @y.38
  %5609 = sub i32 %5607, 1
  %5610 = mul i32 %5607, %5609
  %5611 = urem i32 %5610, 2
  %5612 = icmp eq i32 %5611, 0
  %5613 = icmp slt i32 %5608, 10
  %5614 = or i1 %5612, %5613
  br i1 %5614, label %originalBBpart21532, label %originalBB1530alteredBB

originalBBpart21532:                              ; preds = %originalBB1530
  br i1 %5606, label %5615, label %5734, !dbg !2993

5615:                                             ; preds = %originalBBpart21532
  %5616 = load i32, i32* @x.37
  %5617 = load i32, i32* @y.38
  %5618 = sub i32 %5616, 1
  %5619 = mul i32 %5616, %5618
  %5620 = urem i32 %5619, 2
  %5621 = icmp eq i32 %5620, 0
  %5622 = icmp slt i32 %5617, 10
  %5623 = or i1 %5621, %5622
  br i1 %5623, label %originalBB1534, label %originalBB1534alteredBB

originalBB1534:                                   ; preds = %5615, %originalBB1534alteredBB
  %5624 = load i8, i8* %38, align 1, !dbg !2994
  %5625 = trunc i8 %5624 to i1, !dbg !2994
  %5626 = load i32, i32* @x.37
  %5627 = load i32, i32* @y.38
  %5628 = sub i32 %5626, 1
  %5629 = mul i32 %5626, %5628
  %5630 = urem i32 %5629, 2
  %5631 = icmp eq i32 %5630, 0
  %5632 = icmp slt i32 %5627, 10
  %5633 = or i1 %5631, %5632
  br i1 %5633, label %originalBBpart21536, label %originalBB1534alteredBB

originalBBpart21536:                              ; preds = %originalBB1534
  br i1 %5625, label %5634, label %5660, !dbg !2997

5634:                                             ; preds = %originalBBpart21536
  %5635 = load i32, i32* @x.37
  %5636 = load i32, i32* @y.38
  %5637 = sub i32 %5635, 1
  %5638 = mul i32 %5635, %5637
  %5639 = urem i32 %5638, 2
  %5640 = icmp eq i32 %5639, 0
  %5641 = icmp slt i32 %5636, 10
  %5642 = or i1 %5640, %5641
  br i1 %5642, label %originalBB1538, label %originalBB1538alteredBB

originalBB1538:                                   ; preds = %5634, %originalBB1538alteredBB
  %5643 = load i8*, i8** %19, align 8, !dbg !2998
  %5644 = load i64, i64* %30, align 8, !dbg !2999
  %5645 = load i8*, i8** %21, align 8, !dbg !3000
  %5646 = load i64, i64* %22, align 8, !dbg !3001
  %5647 = load i32, i32* %24, align 4, !dbg !3002
  %5648 = load i32*, i32** %25, align 8, !dbg !3003
  %5649 = load i8*, i8** %26, align 8, !dbg !3004
  %5650 = load i8*, i8** %27, align 8, !dbg !3005
  %5651 = call i64 @quotearg_buffer_restyled(i8* %5643, i64 %5644, i8* %5645, i64 %5646, i32 5, i32 %5647, i32* %5648, i8* %5649, i8* %5650), !dbg !3006
  store i64 %5651, i64* %18, align 8, !dbg !3007
  %5652 = load i32, i32* @x.37
  %5653 = load i32, i32* @y.38
  %5654 = sub i32 %5652, 1
  %5655 = mul i32 %5652, %5654
  %5656 = urem i32 %5655, 2
  %5657 = icmp eq i32 %5656, 0
  %5658 = icmp slt i32 %5653, 10
  %5659 = or i1 %5657, %5658
  br i1 %5659, label %originalBBpart21540, label %originalBB1538alteredBB

originalBBpart21540:                              ; preds = %originalBB1538
  br label %6048, !dbg !3007

5660:                                             ; preds = %originalBBpart21536
  %5661 = load i32, i32* @x.37
  %5662 = load i32, i32* @y.38
  %5663 = sub i32 %5661, 1
  %5664 = mul i32 %5661, %5663
  %5665 = urem i32 %5664, 2
  %5666 = icmp eq i32 %5665, 0
  %5667 = icmp slt i32 %5662, 10
  %5668 = or i1 %5666, %5667
  br i1 %5668, label %originalBB1542, label %originalBB1542alteredBB

originalBB1542:                                   ; preds = %5660, %originalBB1542alteredBB
  %5669 = load i64, i64* %20, align 8, !dbg !3008
  %5670 = icmp ne i64 %5669, 0, !dbg !3008
  %5671 = load i32, i32* @x.37
  %5672 = load i32, i32* @y.38
  %5673 = sub i32 %5671, 1
  %5674 = mul i32 %5671, %5673
  %5675 = urem i32 %5674, 2
  %5676 = icmp eq i32 %5675, 0
  %5677 = icmp slt i32 %5672, 10
  %5678 = or i1 %5676, %5677
  br i1 %5678, label %originalBBpart21544, label %originalBB1542alteredBB

originalBBpart21544:                              ; preds = %originalBB1542
  br i1 %5670, label %5700, label %5679, !dbg !3010

5679:                                             ; preds = %originalBBpart21544
  %5680 = load i64, i64* %30, align 8, !dbg !3011
  %5681 = icmp ne i64 %5680, 0, !dbg !3011
  br i1 %5681, label %5682, label %5700, !dbg !3012

5682:                                             ; preds = %5679
  %5683 = load i32, i32* @x.37
  %5684 = load i32, i32* @y.38
  %5685 = sub i32 %5683, 1
  %5686 = mul i32 %5683, %5685
  %5687 = urem i32 %5686, 2
  %5688 = icmp eq i32 %5687, 0
  %5689 = icmp slt i32 %5684, 10
  %5690 = or i1 %5688, %5689
  br i1 %5690, label %originalBB1546, label %originalBB1546alteredBB

originalBB1546:                                   ; preds = %5682, %originalBB1546alteredBB
  %5691 = load i64, i64* %30, align 8, !dbg !3013
  store i64 %5691, i64* %20, align 8, !dbg !3015
  store i64 0, i64* %29, align 8, !dbg !3016
  %5692 = load i32, i32* @x.37
  %5693 = load i32, i32* @y.38
  %5694 = sub i32 %5692, 1
  %5695 = mul i32 %5692, %5694
  %5696 = urem i32 %5695, 2
  %5697 = icmp eq i32 %5696, 0
  %5698 = icmp slt i32 %5693, 10
  %5699 = or i1 %5697, %5698
  br i1 %5699, label %originalBBpart21548, label %originalBB1546alteredBB

originalBBpart21548:                              ; preds = %originalBB1546
  br label %66, !dbg !3017

5700:                                             ; preds = %5679, %originalBBpart21544
  %5701 = load i32, i32* @x.37
  %5702 = load i32, i32* @y.38
  %5703 = sub i32 %5701, 1
  %5704 = mul i32 %5701, %5703
  %5705 = urem i32 %5704, 2
  %5706 = icmp eq i32 %5705, 0
  %5707 = icmp slt i32 %5702, 10
  %5708 = or i1 %5706, %5707
  br i1 %5708, label %originalBB1550, label %originalBB1550alteredBB

originalBB1550:                                   ; preds = %5700, %originalBB1550alteredBB
  %5709 = load i32, i32* @x.37
  %5710 = load i32, i32* @y.38
  %5711 = sub i32 %5709, 1
  %5712 = mul i32 %5709, %5711
  %5713 = urem i32 %5712, 2
  %5714 = icmp eq i32 %5713, 0
  %5715 = icmp slt i32 %5710, 10
  %5716 = or i1 %5714, %5715
  br i1 %5716, label %originalBBpart21552, label %originalBB1550alteredBB

originalBBpart21552:                              ; preds = %originalBB1550
  br label %5717

5717:                                             ; preds = %originalBBpart21552
  %5718 = load i32, i32* @x.37
  %5719 = load i32, i32* @y.38
  %5720 = sub i32 %5718, 1
  %5721 = mul i32 %5718, %5720
  %5722 = urem i32 %5721, 2
  %5723 = icmp eq i32 %5722, 0
  %5724 = icmp slt i32 %5719, 10
  %5725 = or i1 %5723, %5724
  br i1 %5725, label %originalBB1554, label %originalBB1554alteredBB

originalBB1554:                                   ; preds = %5717, %originalBB1554alteredBB
  %5726 = load i32, i32* @x.37
  %5727 = load i32, i32* @y.38
  %5728 = sub i32 %5726, 1
  %5729 = mul i32 %5726, %5728
  %5730 = urem i32 %5729, 2
  %5731 = icmp eq i32 %5730, 0
  %5732 = icmp slt i32 %5727, 10
  %5733 = or i1 %5731, %5732
  br i1 %5733, label %originalBBpart21556, label %originalBB1554alteredBB

originalBBpart21556:                              ; preds = %originalBB1554
  br label %5734, !dbg !3018

5734:                                             ; preds = %originalBBpart21556, %originalBBpart21532, %originalBBpart21528, %originalBBpart21524
  %5735 = load i32, i32* @x.37
  %5736 = load i32, i32* @y.38
  %5737 = sub i32 %5735, 1
  %5738 = mul i32 %5735, %5737
  %5739 = urem i32 %5738, 2
  %5740 = icmp eq i32 %5739, 0
  %5741 = icmp slt i32 %5736, 10
  %5742 = or i1 %5740, %5741
  br i1 %5742, label %originalBB1558, label %originalBB1558alteredBB

originalBB1558:                                   ; preds = %5734, %originalBB1558alteredBB
  %5743 = load i8*, i8** %31, align 8, !dbg !3019
  %5744 = icmp ne i8* %5743, null, !dbg !3019
  %5745 = load i32, i32* @x.37
  %5746 = load i32, i32* @y.38
  %5747 = sub i32 %5745, 1
  %5748 = mul i32 %5745, %5747
  %5749 = urem i32 %5748, 2
  %5750 = icmp eq i32 %5749, 0
  %5751 = icmp slt i32 %5746, 10
  %5752 = or i1 %5750, %5751
  br i1 %5752, label %originalBBpart21560, label %originalBB1558alteredBB

originalBBpart21560:                              ; preds = %originalBB1558
  br i1 %5744, label %5753, label %5940, !dbg !3021

5753:                                             ; preds = %originalBBpart21560
  %5754 = load i32, i32* @x.37
  %5755 = load i32, i32* @y.38
  %5756 = sub i32 %5754, 1
  %5757 = mul i32 %5754, %5756
  %5758 = urem i32 %5757, 2
  %5759 = icmp eq i32 %5758, 0
  %5760 = icmp slt i32 %5755, 10
  %5761 = or i1 %5759, %5760
  br i1 %5761, label %originalBB1562, label %originalBB1562alteredBB

originalBB1562:                                   ; preds = %5753, %originalBB1562alteredBB
  %5762 = load i8, i8* %35, align 1, !dbg !3022
  %5763 = trunc i8 %5762 to i1, !dbg !3022
  %5764 = load i32, i32* @x.37
  %5765 = load i32, i32* @y.38
  %5766 = sub i32 %5764, 1
  %5767 = mul i32 %5764, %5766
  %5768 = urem i32 %5767, 2
  %5769 = icmp eq i32 %5768, 0
  %5770 = icmp slt i32 %5765, 10
  %5771 = or i1 %5769, %5770
  br i1 %5771, label %originalBBpart21564, label %originalBB1562alteredBB

originalBBpart21564:                              ; preds = %originalBB1562
  br i1 %5763, label %5940, label %5772, !dbg !3023

5772:                                             ; preds = %originalBBpart21564
  %5773 = load i32, i32* @x.37
  %5774 = load i32, i32* @y.38
  %5775 = sub i32 %5773, 1
  %5776 = mul i32 %5773, %5775
  %5777 = urem i32 %5776, 2
  %5778 = icmp eq i32 %5777, 0
  %5779 = icmp slt i32 %5774, 10
  %5780 = or i1 %5778, %5779
  br i1 %5780, label %originalBB1566, label %originalBB1566alteredBB

originalBB1566:                                   ; preds = %5772, %originalBB1566alteredBB
  %5781 = load i32, i32* @x.37
  %5782 = load i32, i32* @y.38
  %5783 = sub i32 %5781, 1
  %5784 = mul i32 %5781, %5783
  %5785 = urem i32 %5784, 2
  %5786 = icmp eq i32 %5785, 0
  %5787 = icmp slt i32 %5782, 10
  %5788 = or i1 %5786, %5787
  br i1 %5788, label %originalBBpart21568, label %originalBB1566alteredBB

originalBBpart21568:                              ; preds = %originalBB1566
  br label %5789, !dbg !3024

5789:                                             ; preds = %originalBBpart21610, %originalBBpart21568
  %5790 = load i32, i32* @x.37
  %5791 = load i32, i32* @y.38
  %5792 = sub i32 %5790, 1
  %5793 = mul i32 %5790, %5792
  %5794 = urem i32 %5793, 2
  %5795 = icmp eq i32 %5794, 0
  %5796 = icmp slt i32 %5791, 10
  %5797 = or i1 %5795, %5796
  br i1 %5797, label %originalBB1570, label %originalBB1570alteredBB

originalBB1570:                                   ; preds = %5789, %originalBB1570alteredBB
  %5798 = load i8*, i8** %31, align 8, !dbg !3025
  %5799 = load i8, i8* %5798, align 1, !dbg !3028
  %5800 = icmp ne i8 %5799, 0, !dbg !3029
  %5801 = load i32, i32* @x.37
  %5802 = load i32, i32* @y.38
  %5803 = sub i32 %5801, 1
  %5804 = mul i32 %5801, %5803
  %5805 = urem i32 %5804, 2
  %5806 = icmp eq i32 %5805, 0
  %5807 = icmp slt i32 %5802, 10
  %5808 = or i1 %5806, %5807
  br i1 %5808, label %originalBBpart21572, label %originalBB1570alteredBB

originalBBpart21572:                              ; preds = %originalBB1570
  br i1 %5800, label %5809, label %5923, !dbg !3029

5809:                                             ; preds = %originalBBpart21572
  %5810 = load i32, i32* @x.37
  %5811 = load i32, i32* @y.38
  %5812 = sub i32 %5810, 1
  %5813 = mul i32 %5810, %5812
  %5814 = urem i32 %5813, 2
  %5815 = icmp eq i32 %5814, 0
  %5816 = icmp slt i32 %5811, 10
  %5817 = or i1 %5815, %5816
  br i1 %5817, label %originalBB1574, label %originalBB1574alteredBB

originalBB1574:                                   ; preds = %5809, %originalBB1574alteredBB
  %5818 = load i32, i32* @x.37
  %5819 = load i32, i32* @y.38
  %5820 = sub i32 %5818, 1
  %5821 = mul i32 %5818, %5820
  %5822 = urem i32 %5821, 2
  %5823 = icmp eq i32 %5822, 0
  %5824 = icmp slt i32 %5819, 10
  %5825 = or i1 %5823, %5824
  br i1 %5825, label %originalBBpart21576, label %originalBB1574alteredBB

originalBBpart21576:                              ; preds = %originalBB1574
  br label %5826, !dbg !3030

5826:                                             ; preds = %originalBBpart21576
  %5827 = load i32, i32* @x.37
  %5828 = load i32, i32* @y.38
  %5829 = sub i32 %5827, 1
  %5830 = mul i32 %5827, %5829
  %5831 = urem i32 %5830, 2
  %5832 = icmp eq i32 %5831, 0
  %5833 = icmp slt i32 %5828, 10
  %5834 = or i1 %5832, %5833
  br i1 %5834, label %originalBB1578, label %originalBB1578alteredBB

originalBB1578:                                   ; preds = %5826, %originalBB1578alteredBB
  %5835 = load i64, i64* %29, align 8, !dbg !3031
  %5836 = load i64, i64* %20, align 8, !dbg !3031
  %5837 = icmp ult i64 %5835, %5836, !dbg !3031
  %5838 = load i32, i32* @x.37
  %5839 = load i32, i32* @y.38
  %5840 = sub i32 %5838, 1
  %5841 = mul i32 %5838, %5840
  %5842 = urem i32 %5841, 2
  %5843 = icmp eq i32 %5842, 0
  %5844 = icmp slt i32 %5839, 10
  %5845 = or i1 %5843, %5844
  br i1 %5845, label %originalBBpart21580, label %originalBB1578alteredBB

originalBBpart21580:                              ; preds = %originalBB1578
  br i1 %5837, label %5846, label %5868, !dbg !3034

5846:                                             ; preds = %originalBBpart21580
  %5847 = load i32, i32* @x.37
  %5848 = load i32, i32* @y.38
  %5849 = sub i32 %5847, 1
  %5850 = mul i32 %5847, %5849
  %5851 = urem i32 %5850, 2
  %5852 = icmp eq i32 %5851, 0
  %5853 = icmp slt i32 %5848, 10
  %5854 = or i1 %5852, %5853
  br i1 %5854, label %originalBB1582, label %originalBB1582alteredBB

originalBB1582:                                   ; preds = %5846, %originalBB1582alteredBB
  %5855 = load i8*, i8** %31, align 8, !dbg !3031
  %5856 = load i8, i8* %5855, align 1, !dbg !3031
  %5857 = load i8*, i8** %19, align 8, !dbg !3031
  %5858 = load i64, i64* %29, align 8, !dbg !3031
  %5859 = getelementptr inbounds i8, i8* %5857, i64 %5858, !dbg !3031
  store i8 %5856, i8* %5859, align 1, !dbg !3031
  %5860 = load i32, i32* @x.37
  %5861 = load i32, i32* @y.38
  %5862 = sub i32 %5860, 1
  %5863 = mul i32 %5860, %5862
  %5864 = urem i32 %5863, 2
  %5865 = icmp eq i32 %5864, 0
  %5866 = icmp slt i32 %5861, 10
  %5867 = or i1 %5865, %5866
  br i1 %5867, label %originalBBpart21584, label %originalBB1582alteredBB

originalBBpart21584:                              ; preds = %originalBB1582
  br label %5868, !dbg !3031

5868:                                             ; preds = %originalBBpart21584, %originalBBpart21580
  %5869 = load i32, i32* @x.37
  %5870 = load i32, i32* @y.38
  %5871 = sub i32 %5869, 1
  %5872 = mul i32 %5869, %5871
  %5873 = urem i32 %5872, 2
  %5874 = icmp eq i32 %5873, 0
  %5875 = icmp slt i32 %5870, 10
  %5876 = or i1 %5874, %5875
  br i1 %5876, label %originalBB1586, label %originalBB1586alteredBB

originalBB1586:                                   ; preds = %5868, %originalBB1586alteredBB
  %5877 = load i64, i64* %29, align 8, !dbg !3034
  %5878 = add i64 %5877, 1, !dbg !3034
  store i64 %5878, i64* %29, align 8, !dbg !3034
  %5879 = load i32, i32* @x.37
  %5880 = load i32, i32* @y.38
  %5881 = sub i32 %5879, 1
  %5882 = mul i32 %5879, %5881
  %5883 = urem i32 %5882, 2
  %5884 = icmp eq i32 %5883, 0
  %5885 = icmp slt i32 %5880, 10
  %5886 = or i1 %5884, %5885
  br i1 %5886, label %originalBBpart21602, label %originalBB1586alteredBB

originalBBpart21602:                              ; preds = %originalBB1586
  br label %5887, !dbg !3034

5887:                                             ; preds = %originalBBpart21602
  %5888 = load i32, i32* @x.37
  %5889 = load i32, i32* @y.38
  %5890 = sub i32 %5888, 1
  %5891 = mul i32 %5888, %5890
  %5892 = urem i32 %5891, 2
  %5893 = icmp eq i32 %5892, 0
  %5894 = icmp slt i32 %5889, 10
  %5895 = or i1 %5893, %5894
  br i1 %5895, label %originalBB1604, label %originalBB1604alteredBB

originalBB1604:                                   ; preds = %5887, %originalBB1604alteredBB
  %5896 = load i32, i32* @x.37
  %5897 = load i32, i32* @y.38
  %5898 = sub i32 %5896, 1
  %5899 = mul i32 %5896, %5898
  %5900 = urem i32 %5899, 2
  %5901 = icmp eq i32 %5900, 0
  %5902 = icmp slt i32 %5897, 10
  %5903 = or i1 %5901, %5902
  br i1 %5903, label %originalBBpart21606, label %originalBB1604alteredBB

originalBBpart21606:                              ; preds = %originalBB1604
  br label %5904, !dbg !3034

5904:                                             ; preds = %originalBBpart21606
  %5905 = load i32, i32* @x.37
  %5906 = load i32, i32* @y.38
  %5907 = sub i32 %5905, 1
  %5908 = mul i32 %5905, %5907
  %5909 = urem i32 %5908, 2
  %5910 = icmp eq i32 %5909, 0
  %5911 = icmp slt i32 %5906, 10
  %5912 = or i1 %5910, %5911
  br i1 %5912, label %originalBB1608, label %originalBB1608alteredBB

originalBB1608:                                   ; preds = %5904, %originalBB1608alteredBB
  %5913 = load i8*, i8** %31, align 8, !dbg !3035
  %5914 = getelementptr inbounds i8, i8* %5913, i32 1, !dbg !3035
  store i8* %5914, i8** %31, align 8, !dbg !3035
  %5915 = load i32, i32* @x.37
  %5916 = load i32, i32* @y.38
  %5917 = sub i32 %5915, 1
  %5918 = mul i32 %5915, %5917
  %5919 = urem i32 %5918, 2
  %5920 = icmp eq i32 %5919, 0
  %5921 = icmp slt i32 %5916, 10
  %5922 = or i1 %5920, %5921
  br i1 %5922, label %originalBBpart21610, label %originalBB1608alteredBB

originalBBpart21610:                              ; preds = %originalBB1608
  br label %5789, !dbg !3036, !llvm.loop !3037

5923:                                             ; preds = %originalBBpart21572
  %5924 = load i32, i32* @x.37
  %5925 = load i32, i32* @y.38
  %5926 = sub i32 %5924, 1
  %5927 = mul i32 %5924, %5926
  %5928 = urem i32 %5927, 2
  %5929 = icmp eq i32 %5928, 0
  %5930 = icmp slt i32 %5925, 10
  %5931 = or i1 %5929, %5930
  br i1 %5931, label %originalBB1612, label %originalBB1612alteredBB

originalBB1612:                                   ; preds = %5923, %originalBB1612alteredBB
  %5932 = load i32, i32* @x.37
  %5933 = load i32, i32* @y.38
  %5934 = sub i32 %5932, 1
  %5935 = mul i32 %5932, %5934
  %5936 = urem i32 %5935, 2
  %5937 = icmp eq i32 %5936, 0
  %5938 = icmp slt i32 %5933, 10
  %5939 = or i1 %5937, %5938
  br i1 %5939, label %originalBBpart21614, label %originalBB1612alteredBB

originalBBpart21614:                              ; preds = %originalBB1612
  br label %5940, !dbg !3038

5940:                                             ; preds = %originalBBpart21614, %originalBBpart21564, %originalBBpart21560
  %5941 = load i32, i32* @x.37
  %5942 = load i32, i32* @y.38
  %5943 = sub i32 %5941, 1
  %5944 = mul i32 %5941, %5943
  %5945 = urem i32 %5944, 2
  %5946 = icmp eq i32 %5945, 0
  %5947 = icmp slt i32 %5942, 10
  %5948 = or i1 %5946, %5947
  br i1 %5948, label %originalBB1616, label %originalBB1616alteredBB

originalBB1616:                                   ; preds = %5940, %originalBB1616alteredBB
  %5949 = load i64, i64* %29, align 8, !dbg !3039
  %5950 = load i64, i64* %20, align 8, !dbg !3041
  %5951 = icmp ult i64 %5949, %5950, !dbg !3042
  %5952 = load i32, i32* @x.37
  %5953 = load i32, i32* @y.38
  %5954 = sub i32 %5952, 1
  %5955 = mul i32 %5952, %5954
  %5956 = urem i32 %5955, 2
  %5957 = icmp eq i32 %5956, 0
  %5958 = icmp slt i32 %5953, 10
  %5959 = or i1 %5957, %5958
  br i1 %5959, label %originalBBpart21618, label %originalBB1616alteredBB

originalBBpart21618:                              ; preds = %originalBB1616
  br i1 %5951, label %5960, label %5964, !dbg !3043

5960:                                             ; preds = %originalBBpart21618
  %5961 = load i8*, i8** %19, align 8, !dbg !3044
  %5962 = load i64, i64* %29, align 8, !dbg !3045
  %5963 = getelementptr inbounds i8, i8* %5961, i64 %5962, !dbg !3044
  store i8 0, i8* %5963, align 1, !dbg !3046
  br label %5964, !dbg !3044

5964:                                             ; preds = %5960, %originalBBpart21618
  %5965 = load i32, i32* @x.37
  %5966 = load i32, i32* @y.38
  %5967 = sub i32 %5965, 1
  %5968 = mul i32 %5965, %5967
  %5969 = urem i32 %5968, 2
  %5970 = icmp eq i32 %5969, 0
  %5971 = icmp slt i32 %5966, 10
  %5972 = or i1 %5970, %5971
  br i1 %5972, label %originalBB1620, label %originalBB1620alteredBB

originalBB1620:                                   ; preds = %5964, %originalBB1620alteredBB
  %5973 = load i64, i64* %29, align 8, !dbg !3047
  store i64 %5973, i64* %18, align 8, !dbg !3048
  %5974 = load i32, i32* @x.37
  %5975 = load i32, i32* @y.38
  %5976 = sub i32 %5974, 1
  %5977 = mul i32 %5974, %5976
  %5978 = urem i32 %5977, 2
  %5979 = icmp eq i32 %5978, 0
  %5980 = icmp slt i32 %5975, 10
  %5981 = or i1 %5979, %5980
  br i1 %5981, label %originalBBpart21622, label %originalBB1620alteredBB

originalBBpart21622:                              ; preds = %originalBB1620
  br label %6048, !dbg !3048

5982:                                             ; preds = %originalBBpart21520, %originalBBpart21305, %originalBBpart2926, %originalBBpart2830, %originalBBpart2682, %originalBBpart2674, %originalBBpart2618, %originalBBpart2590, %1767, %originalBBpart2413, %originalBBpart2226, %originalBBpart2210
  call void @llvm.dbg.label(metadata !3049), !dbg !3050
  %5983 = load i32, i32* @x.37
  %5984 = load i32, i32* @y.38
  %5985 = sub i32 %5983, 1
  %5986 = mul i32 %5983, %5985
  %5987 = urem i32 %5986, 2
  %5988 = icmp eq i32 %5987, 0
  %5989 = icmp slt i32 %5984, 10
  %5990 = or i1 %5988, %5989
  br i1 %5990, label %originalBB1624, label %originalBB1624alteredBB

originalBB1624:                                   ; preds = %5982, %originalBB1624alteredBB
  %5991 = load i32, i32* %23, align 4, !dbg !3051
  %5992 = icmp eq i32 %5991, 2, !dbg !3053
  %5993 = load i32, i32* @x.37
  %5994 = load i32, i32* @y.38
  %5995 = sub i32 %5993, 1
  %5996 = mul i32 %5993, %5995
  %5997 = urem i32 %5996, 2
  %5998 = icmp eq i32 %5997, 0
  %5999 = icmp slt i32 %5994, 10
  %6000 = or i1 %5998, %5999
  br i1 %6000, label %originalBBpart21626, label %originalBB1624alteredBB

originalBBpart21626:                              ; preds = %originalBB1624
  br i1 %5992, label %6001, label %6021, !dbg !3054

6001:                                             ; preds = %originalBBpart21626
  %6002 = load i8, i8* %33, align 1, !dbg !3055
  %6003 = trunc i8 %6002 to i1, !dbg !3055
  br i1 %6003, label %6004, label %6021, !dbg !3056

6004:                                             ; preds = %6001
  %6005 = load i32, i32* @x.37
  %6006 = load i32, i32* @y.38
  %6007 = sub i32 %6005, 1
  %6008 = mul i32 %6005, %6007
  %6009 = urem i32 %6008, 2
  %6010 = icmp eq i32 %6009, 0
  %6011 = icmp slt i32 %6006, 10
  %6012 = or i1 %6010, %6011
  br i1 %6012, label %originalBB1628, label %originalBB1628alteredBB

originalBB1628:                                   ; preds = %6004, %originalBB1628alteredBB
  store i32 4, i32* %23, align 4, !dbg !3057
  %6013 = load i32, i32* @x.37
  %6014 = load i32, i32* @y.38
  %6015 = sub i32 %6013, 1
  %6016 = mul i32 %6013, %6015
  %6017 = urem i32 %6016, 2
  %6018 = icmp eq i32 %6017, 0
  %6019 = icmp slt i32 %6014, 10
  %6020 = or i1 %6018, %6019
  br i1 %6020, label %originalBBpart21630, label %originalBB1628alteredBB

originalBBpart21630:                              ; preds = %originalBB1628
  br label %6021, !dbg !3058

6021:                                             ; preds = %originalBBpart21630, %6001, %originalBBpart21626
  %6022 = load i32, i32* @x.37
  %6023 = load i32, i32* @y.38
  %6024 = sub i32 %6022, 1
  %6025 = mul i32 %6022, %6024
  %6026 = urem i32 %6025, 2
  %6027 = icmp eq i32 %6026, 0
  %6028 = icmp slt i32 %6023, 10
  %6029 = or i1 %6027, %6028
  br i1 %6029, label %originalBB1632, label %originalBB1632alteredBB

originalBB1632:                                   ; preds = %6021, %originalBB1632alteredBB
  %6030 = load i8*, i8** %19, align 8, !dbg !3059
  %6031 = load i64, i64* %20, align 8, !dbg !3060
  %6032 = load i8*, i8** %21, align 8, !dbg !3061
  %6033 = load i64, i64* %22, align 8, !dbg !3062
  %6034 = load i32, i32* %23, align 4, !dbg !3063
  %6035 = load i32, i32* %24, align 4, !dbg !3064
  %6036 = and i32 %6035, -3, !dbg !3065
  %6037 = load i8*, i8** %26, align 8, !dbg !3066
  %6038 = load i8*, i8** %27, align 8, !dbg !3067
  %6039 = call i64 @quotearg_buffer_restyled(i8* %6030, i64 %6031, i8* %6032, i64 %6033, i32 %6034, i32 %6036, i32* null, i8* %6037, i8* %6038), !dbg !3068
  store i64 %6039, i64* %18, align 8, !dbg !3069
  %6040 = load i32, i32* @x.37
  %6041 = load i32, i32* @y.38
  %6042 = sub i32 %6040, 1
  %6043 = mul i32 %6040, %6042
  %6044 = urem i32 %6043, 2
  %6045 = icmp eq i32 %6044, 0
  %6046 = icmp slt i32 %6041, 10
  %6047 = or i1 %6045, %6046
  br i1 %6047, label %originalBBpart21637, label %originalBB1632alteredBB

originalBBpart21637:                              ; preds = %originalBB1632
  br label %6048, !dbg !3069

6048:                                             ; preds = %originalBBpart21637, %originalBBpart21622, %originalBBpart21540
  %6049 = load i32, i32* @x.37
  %6050 = load i32, i32* @y.38
  %6051 = sub i32 %6049, 1
  %6052 = mul i32 %6049, %6051
  %6053 = urem i32 %6052, 2
  %6054 = icmp eq i32 %6053, 0
  %6055 = icmp slt i32 %6050, 10
  %6056 = or i1 %6054, %6055
  br i1 %6056, label %originalBB1639, label %originalBB1639alteredBB

originalBB1639:                                   ; preds = %6048, %originalBB1639alteredBB
  %6057 = load i64, i64* %18, align 8, !dbg !3070
  %6058 = load i32, i32* @x.37
  %6059 = load i32, i32* @y.38
  %6060 = sub i32 %6058, 1
  %6061 = mul i32 %6058, %6060
  %6062 = urem i32 %6061, 2
  %6063 = icmp eq i32 %6062, 0
  %6064 = icmp slt i32 %6059, 10
  %6065 = or i1 %6063, %6064
  br i1 %6065, label %originalBBpart21641, label %originalBB1639alteredBB

originalBBpart21641:                              ; preds = %originalBB1639
  ret i64 %6057, !dbg !3070

originalBBalteredBB:                              ; preds = %originalBB, %9
  %6066 = alloca i64, align 8
  %6067 = alloca i8*, align 8
  %6068 = alloca i64, align 8
  %6069 = alloca i8*, align 8
  %6070 = alloca i64, align 8
  %6071 = alloca i32, align 4
  %6072 = alloca i32, align 4
  %6073 = alloca i32*, align 8
  %6074 = alloca i8*, align 8
  %6075 = alloca i8*, align 8
  %6076 = alloca i64, align 8
  %6077 = alloca i64, align 8
  %6078 = alloca i64, align 8
  %6079 = alloca i8*, align 8
  %6080 = alloca i64, align 8
  %6081 = alloca i8, align 1
  %6082 = alloca i8, align 1
  %6083 = alloca i8, align 1
  %6084 = alloca i8, align 1
  %6085 = alloca i8, align 1
  %6086 = alloca i8, align 1
  %6087 = alloca i8, align 1
  %6088 = alloca i8, align 1
  %6089 = alloca i8, align 1
  %6090 = alloca i8, align 1
  %6091 = alloca i8, align 1
  %6092 = alloca i64, align 8
  %6093 = alloca i8, align 1
  %6094 = alloca %struct.__mbstate_t, align 4
  %6095 = alloca i32, align 4
  %6096 = alloca i64, align 8
  %6097 = alloca i64, align 8
  %6098 = alloca i64, align 8
  store i8* %0, i8** %6067, align 8
  call void @llvm.dbg.declare(metadata i8** %6067, metadata !3071, metadata !DIExpression()), !dbg !2191
  store i64 %1, i64* %6068, align 8
  call void @llvm.dbg.declare(metadata i64* %6068, metadata !3103, metadata !DIExpression()), !dbg !2193
  store i8* %2, i8** %6069, align 8
  call void @llvm.dbg.declare(metadata i8** %6069, metadata !3104, metadata !DIExpression()), !dbg !2195
  store i64 %3, i64* %6070, align 8
  call void @llvm.dbg.declare(metadata i64* %6070, metadata !3105, metadata !DIExpression()), !dbg !2197
  store i32 %4, i32* %6071, align 4
  call void @llvm.dbg.declare(metadata i32* %6071, metadata !3106, metadata !DIExpression()), !dbg !2199
  store i32 %5, i32* %6072, align 4
  call void @llvm.dbg.declare(metadata i32* %6072, metadata !3107, metadata !DIExpression()), !dbg !2201
  store i32* %6, i32** %6073, align 8
  call void @llvm.dbg.declare(metadata i32** %6073, metadata !3108, metadata !DIExpression()), !dbg !2203
  store i8* %7, i8** %6074, align 8
  call void @llvm.dbg.declare(metadata i8** %6074, metadata !3109, metadata !DIExpression()), !dbg !2205
  store i8* %8, i8** %6075, align 8
  call void @llvm.dbg.declare(metadata i8** %6075, metadata !3110, metadata !DIExpression()), !dbg !2207
  call void @llvm.dbg.declare(metadata i64* %6076, metadata !3111, metadata !DIExpression()), !dbg !2209
  call void @llvm.dbg.declare(metadata i64* %6077, metadata !3112, metadata !DIExpression()), !dbg !2211
  store i64 0, i64* %6077, align 8, !dbg !2211
  call void @llvm.dbg.declare(metadata i64* %6078, metadata !3113, metadata !DIExpression()), !dbg !2213
  store i64 0, i64* %6078, align 8, !dbg !2213
  call void @llvm.dbg.declare(metadata i8** %6079, metadata !3114, metadata !DIExpression()), !dbg !2215
  store i8* null, i8** %6079, align 8, !dbg !2215
  call void @llvm.dbg.declare(metadata i64* %6080, metadata !3115, metadata !DIExpression()), !dbg !2217
  store i64 0, i64* %6080, align 8, !dbg !2217
  call void @llvm.dbg.declare(metadata i8* %6081, metadata !3116, metadata !DIExpression()), !dbg !2219
  store i8 0, i8* %6081, align 1, !dbg !2219
  call void @llvm.dbg.declare(metadata i8* %6082, metadata !3117, metadata !DIExpression()), !dbg !2221
  %6099 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !2222
  %6100 = icmp eq i64 %6099, 1, !dbg !2223
  %6101 = zext i1 %6100 to i8, !dbg !2221
  store i8 %6101, i8* %6082, align 1, !dbg !2221
  call void @llvm.dbg.declare(metadata i8* %6083, metadata !3118, metadata !DIExpression()), !dbg !2225
  %6102 = load i32, i32* %6072, align 4, !dbg !2226
  %_ = shl i32 %6102, 2
  %_1 = sub i32 %6102, 2
  %gen = mul i32 %_1, 2
  %_2 = sub i32 %6102, 2
  %gen3 = mul i32 %_2, 2
  %_4 = sub i32 %6102, 2
  %gen5 = mul i32 %_4, 2
  %_6 = sub i32 0, %6102
  %gen7 = add i32 %_6, 2
  %_8 = sub i32 %6102, 2
  %gen9 = mul i32 %_8, 2
  %_10 = sub i32 0, %6102
  %gen11 = add i32 %_10, 2
  %6103 = and i32 %6102, 2, !dbg !2227
  %6104 = icmp ne i32 %6103, 0, !dbg !2228
  %6105 = zext i1 %6104 to i8, !dbg !2225
  store i8 %6105, i8* %6083, align 1, !dbg !2225
  call void @llvm.dbg.declare(metadata i8* %6084, metadata !3119, metadata !DIExpression()), !dbg !2230
  store i8 0, i8* %6084, align 1, !dbg !2230
  call void @llvm.dbg.declare(metadata i8* %6085, metadata !3120, metadata !DIExpression()), !dbg !2232
  store i8 0, i8* %6085, align 1, !dbg !2232
  call void @llvm.dbg.declare(metadata i8* %6086, metadata !3121, metadata !DIExpression()), !dbg !2234
  store i8 1, i8* %6086, align 1, !dbg !2234
  br label %originalBB

originalBB12alteredBB:                            ; preds = %originalBB12, %66
  %6106 = load i32, i32* %23, align 4, !dbg !2238
  br label %originalBB12

originalBB16alteredBB:                            ; preds = %originalBB16, %84
  store i32 5, i32* %23, align 4, !dbg !2240
  store i8 1, i8* %35, align 1, !dbg !2242
  br label %originalBB16

originalBB20alteredBB:                            ; preds = %originalBB20, %101
  %6107 = load i8, i8* %35, align 1, !dbg !2244
  %6108 = trunc i8 %6107 to i1, !dbg !2244
  br label %originalBB20

originalBB24alteredBB:                            ; preds = %originalBB24, %120
  br label %originalBB24

originalBB28alteredBB:                            ; preds = %originalBB28, %137
  %6109 = load i64, i64* %29, align 8, !dbg !2248
  %6110 = load i64, i64* %20, align 8, !dbg !2248
  %6111 = icmp ult i64 %6109, %6110, !dbg !2248
  br label %originalBB28

originalBB32alteredBB:                            ; preds = %originalBB32, %157
  %6112 = load i8*, i8** %19, align 8, !dbg !2248
  %6113 = load i64, i64* %29, align 8, !dbg !2248
  %6114 = getelementptr inbounds i8, i8* %6112, i64 %6113, !dbg !2248
  store i8 34, i8* %6114, align 1, !dbg !2248
  br label %originalBB32

originalBB36alteredBB:                            ; preds = %originalBB36, %177
  %6115 = load i64, i64* %29, align 8, !dbg !2251
  %_37 = shl i64 %6115, 1
  %_38 = shl i64 %6115, 1
  %_39 = shl i64 %6115, 1
  %_40 = sub i64 0, %6115
  %gen41 = add i64 %_40, 1
  %_42 = sub i64 0, %6115
  %gen43 = add i64 %_42, 1
  %_44 = sub i64 0, %6115
  %gen45 = add i64 %_44, 1
  %_46 = shl i64 %6115, 1
  %6116 = add i64 %6115, 1, !dbg !2251
  store i64 %6116, i64* %29, align 8, !dbg !2251
  br label %originalBB36

originalBB50alteredBB:                            ; preds = %originalBB50, %196
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %214
  store i8 1, i8* %33, align 1, !dbg !2256
  store i8 0, i8* %35, align 1, !dbg !2257
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %231
  %6117 = load i32, i32* %23, align 4, !dbg !2259
  %6118 = icmp ne i32 %6117, 10, !dbg !2262
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %250
  %6119 = load i32, i32* %23, align 4, !dbg !2264
  %6120 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.86, i64 0, i64 0), i32 %6119), !dbg !2266
  store i8* %6120, i8** %26, align 8, !dbg !2267
  %6121 = load i32, i32* %23, align 4, !dbg !2268
  %6122 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.87, i64 0, i64 0), i32 %6121), !dbg !2269
  store i8* %6122, i8** %27, align 8, !dbg !2270
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %274
  %6123 = load i8*, i8** %26, align 8, !dbg !2275
  store i8* %6123, i8** %31, align 8, !dbg !2277
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %292
  %6124 = load i8*, i8** %31, align 8, !dbg !2279
  %6125 = load i8, i8* %6124, align 1, !dbg !2281
  %6126 = icmp ne i8 %6125, 0, !dbg !2282
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %312
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %329
  %6127 = load i64, i64* %29, align 8, !dbg !2284
  %6128 = load i64, i64* %20, align 8, !dbg !2284
  %6129 = icmp ult i64 %6127, %6128, !dbg !2284
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %355
  %6130 = load i64, i64* %29, align 8, !dbg !2287
  %_83 = shl i64 %6130, 1
  %_84 = shl i64 %6130, 1
  %_85 = sub i64 0, %6130
  %gen86 = add i64 %_85, 1
  %_87 = sub i64 %6130, 1
  %gen88 = mul i64 %_87, 1
  %_89 = shl i64 %6130, 1
  %_90 = sub i64 %6130, 1
  %gen91 = mul i64 %_90, 1
  %_92 = shl i64 %6130, 1
  %_93 = sub i64 %6130, 1
  %gen94 = mul i64 %_93, 1
  %6131 = add i64 %6130, 1, !dbg !2287
  store i64 %6131, i64* %29, align 8, !dbg !2287
  br label %originalBB82

originalBB98alteredBB:                            ; preds = %originalBB98, %378
  br label %originalBB98

originalBB102alteredBB:                           ; preds = %originalBB102, %395
  store i8 1, i8* %33, align 1, !dbg !2292
  %6132 = load i8*, i8** %27, align 8, !dbg !2293
  store i8* %6132, i8** %31, align 8, !dbg !2294
  %6133 = load i8*, i8** %31, align 8, !dbg !2295
  %6134 = call i64 @strlen(i8* %6133) #13, !dbg !2296
  store i64 %6134, i64* %32, align 8, !dbg !2297
  br label %originalBB102

originalBB106alteredBB:                           ; preds = %originalBB106, %415
  store i8 1, i8* %33, align 1, !dbg !2299
  br label %originalBB106

originalBB110alteredBB:                           ; preds = %originalBB110, %432
  store i8 1, i8* %35, align 1, !dbg !2301
  br label %originalBB110

originalBB114alteredBB:                           ; preds = %originalBB114, %449
  %6135 = load i8, i8* %35, align 1, !dbg !2303
  %6136 = trunc i8 %6135 to i1, !dbg !2303
  br label %originalBB114

originalBB118alteredBB:                           ; preds = %originalBB118, %468
  store i8 1, i8* %33, align 1, !dbg !2306
  br label %originalBB118

originalBB122alteredBB:                           ; preds = %originalBB122, %485
  br label %originalBB122

originalBB126alteredBB:                           ; preds = %originalBB126, %502
  store i32 2, i32* %23, align 4, !dbg !2309
  %6137 = load i8, i8* %35, align 1, !dbg !2310
  %6138 = trunc i8 %6137 to i1, !dbg !2310
  br label %originalBB126

originalBB130alteredBB:                           ; preds = %originalBB130, %521
  br label %originalBB130

originalBB134alteredBB:                           ; preds = %originalBB134, %538
  %6139 = load i64, i64* %29, align 8, !dbg !2314
  %6140 = load i64, i64* %20, align 8, !dbg !2314
  %6141 = icmp ult i64 %6139, %6140, !dbg !2314
  br label %originalBB134

originalBB138alteredBB:                           ; preds = %originalBB138, %558
  %6142 = load i8*, i8** %19, align 8, !dbg !2314
  %6143 = load i64, i64* %29, align 8, !dbg !2314
  %6144 = getelementptr inbounds i8, i8* %6142, i64 %6143, !dbg !2314
  store i8 39, i8* %6144, align 1, !dbg !2314
  br label %originalBB138

originalBB142alteredBB:                           ; preds = %originalBB142, %578
  %6145 = load i64, i64* %29, align 8, !dbg !2317
  %_143 = sub i64 %6145, 1
  %gen144 = mul i64 %_143, 1
  %_145 = shl i64 %6145, 1
  %_146 = sub i64 0, %6145
  %gen147 = add i64 %_146, 1
  %_148 = shl i64 %6145, 1
  %_149 = shl i64 %6145, 1
  %6146 = add i64 %6145, 1, !dbg !2317
  store i64 %6146, i64* %29, align 8, !dbg !2317
  br label %originalBB142

originalBB153alteredBB:                           ; preds = %originalBB153, %598
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.87, i64 0, i64 0), i8** %31, align 8, !dbg !2318
  store i64 1, i64* %32, align 8, !dbg !2319
  br label %originalBB153

originalBB157alteredBB:                           ; preds = %originalBB157, %615
  store i8 0, i8* %35, align 1, !dbg !2321
  br label %originalBB157

originalBB161alteredBB:                           ; preds = %originalBB161, %632
  call void @abort() #12, !dbg !2323
  br label %originalBB161

originalBB165alteredBB:                           ; preds = %originalBB165, %649
  store i64 0, i64* %28, align 8, !dbg !2324
  br label %originalBB165

originalBB169alteredBB:                           ; preds = %originalBB169, %666
  %6147 = load i64, i64* %22, align 8, !dbg !2327
  %6148 = icmp eq i64 %6147, -1, !dbg !2329
  br label %originalBB169

originalBB173alteredBB:                           ; preds = %originalBB173, %698
  %6149 = icmp ne i32 %699, 0, !dbg !2336
  %_174 = sub i1 %6149, true
  %gen175 = mul i1 %_174, true
  %6150 = xor i1 %6149, true, !dbg !2336
  br label %originalBB173

originalBB179alteredBB:                           ; preds = %originalBB179, %718
  store i8 0, i8* %41, align 1, !dbg !2344
  call void @llvm.dbg.declare(metadata !4, metadata !3122, metadata !DIExpression()), !dbg !2346
  store i8 0, i8* %42, align 1, !dbg !2346
  call void @llvm.dbg.declare(metadata !4, metadata !3157, metadata !DIExpression()), !dbg !2348
  store i8 0, i8* %43, align 1, !dbg !2348
  %6151 = load i8, i8* %33, align 1, !dbg !2349
  %6152 = trunc i8 %6151 to i1, !dbg !2349
  br label %originalBB179

originalBB183alteredBB:                           ; preds = %originalBB183, %737
  %6153 = load i32, i32* %23, align 4, !dbg !2352
  %6154 = icmp ne i32 %6153, 2, !dbg !2353
  br label %originalBB183

originalBB187alteredBB:                           ; preds = %originalBB187, %756
  %6155 = load i64, i64* %32, align 8, !dbg !2355
  %6156 = icmp ne i64 %6155, 0, !dbg !2355
  br label %originalBB187

originalBB191alteredBB:                           ; preds = %originalBB191, %775
  %6157 = load i64, i64* %28, align 8, !dbg !2357
  %6158 = load i64, i64* %32, align 8, !dbg !2358
  %_192 = shl i64 %6157, %6158
  %6159 = add i64 %6157, %6158, !dbg !2359
  %6160 = load i64, i64* %22, align 8, !dbg !2360
  %6161 = icmp eq i64 %6160, -1, !dbg !2361
  br label %originalBB191

originalBB196alteredBB:                           ; preds = %originalBB196, %797
  %6162 = load i64, i64* %32, align 8, !dbg !2363
  %6163 = icmp ult i64 1, %6162, !dbg !2364
  br label %originalBB196

originalBB200alteredBB:                           ; preds = %originalBB200, %816
  %6164 = load i8*, i8** %21, align 8, !dbg !2365
  %6165 = call i64 @strlen(i8* %6164) #13, !dbg !2366
  store i64 %6165, i64* %22, align 8, !dbg !2367
  br label %originalBB200

originalBB204alteredBB:                           ; preds = %originalBB204, %848
  %6166 = load i8, i8* %35, align 1, !dbg !2379
  %6167 = trunc i8 %6166 to i1, !dbg !2379
  br label %originalBB204

originalBB208alteredBB:                           ; preds = %originalBB208, %867
  br label %originalBB208

originalBB212alteredBB:                           ; preds = %originalBB212, %884
  store i8 1, i8* %41, align 1, !dbg !2384
  br label %originalBB212

originalBB216alteredBB:                           ; preds = %originalBB216, %908
  %6168 = load i8, i8* %33, align 1, !dbg !2391
  %6169 = trunc i8 %6168 to i1, !dbg !2391
  br label %originalBB216

originalBB220alteredBB:                           ; preds = %originalBB220, %928
  %6170 = load i8, i8* %35, align 1, !dbg !2397
  %6171 = trunc i8 %6170 to i1, !dbg !2397
  br label %originalBB220

originalBB224alteredBB:                           ; preds = %originalBB224, %947
  br label %originalBB224

originalBB228alteredBB:                           ; preds = %originalBB228, %964
  store i8 1, i8* %42, align 1, !dbg !2400
  %6172 = load i32, i32* %23, align 4, !dbg !2401
  %6173 = icmp eq i32 %6172, 2, !dbg !2401
  br label %originalBB228

originalBB232alteredBB:                           ; preds = %originalBB232, %983
  %6174 = load i8, i8* %36, align 1, !dbg !2401
  %6175 = trunc i8 %6174 to i1, !dbg !2401
  br label %originalBB232

originalBB236alteredBB:                           ; preds = %originalBB236, %1002
  br label %originalBB236

originalBB240alteredBB:                           ; preds = %originalBB240, %1019
  %6176 = load i64, i64* %29, align 8, !dbg !2405
  %6177 = load i64, i64* %20, align 8, !dbg !2405
  %6178 = icmp ult i64 %6176, %6177, !dbg !2405
  br label %originalBB240

originalBB244alteredBB:                           ; preds = %originalBB244, %1043
  %6179 = load i64, i64* %29, align 8, !dbg !2408
  %_245 = sub i64 0, %6179
  %gen246 = add i64 %_245, 1
  %6180 = add i64 %6179, 1, !dbg !2408
  store i64 %6180, i64* %29, align 8, !dbg !2408
  br label %originalBB244

originalBB250alteredBB:                           ; preds = %originalBB250, %1062
  br label %originalBB250

originalBB254alteredBB:                           ; preds = %originalBB254, %1079
  %6181 = load i64, i64* %29, align 8, !dbg !2409
  %6182 = load i64, i64* %20, align 8, !dbg !2409
  %6183 = icmp ult i64 %6181, %6182, !dbg !2409
  br label %originalBB254

originalBB258alteredBB:                           ; preds = %originalBB258, %1099
  %6184 = load i8*, i8** %19, align 8, !dbg !2409
  %6185 = load i64, i64* %29, align 8, !dbg !2409
  %6186 = getelementptr inbounds i8, i8* %6184, i64 %6185, !dbg !2409
  store i8 36, i8* %6186, align 1, !dbg !2409
  br label %originalBB258

originalBB262alteredBB:                           ; preds = %originalBB262, %1119
  %6187 = load i64, i64* %29, align 8, !dbg !2412
  %_263 = sub i64 0, %6187
  %gen264 = add i64 %_263, 1
  %_265 = shl i64 %6187, 1
  %_266 = sub i64 0, %6187
  %gen267 = add i64 %_266, 1
  %_268 = sub i64 %6187, 1
  %gen269 = mul i64 %_268, 1
  %6188 = add i64 %6187, 1, !dbg !2412
  store i64 %6188, i64* %29, align 8, !dbg !2412
  br label %originalBB262

originalBB273alteredBB:                           ; preds = %originalBB273, %1138
  br label %originalBB273

originalBB277alteredBB:                           ; preds = %originalBB277, %1155
  %6189 = load i64, i64* %29, align 8, !dbg !2413
  %6190 = load i64, i64* %20, align 8, !dbg !2413
  %6191 = icmp ult i64 %6189, %6190, !dbg !2413
  br label %originalBB277

originalBB281alteredBB:                           ; preds = %originalBB281, %1175
  %6192 = load i8*, i8** %19, align 8, !dbg !2413
  %6193 = load i64, i64* %29, align 8, !dbg !2413
  %6194 = getelementptr inbounds i8, i8* %6192, i64 %6193, !dbg !2413
  store i8 39, i8* %6194, align 1, !dbg !2413
  br label %originalBB281

originalBB285alteredBB:                           ; preds = %originalBB285, %1195
  %6195 = load i64, i64* %29, align 8, !dbg !2416
  %_286 = shl i64 %6195, 1
  %6196 = add i64 %6195, 1, !dbg !2416
  store i64 %6196, i64* %29, align 8, !dbg !2416
  br label %originalBB285

originalBB290alteredBB:                           ; preds = %originalBB290, %1214
  store i8 1, i8* %36, align 1, !dbg !2403
  br label %originalBB290

originalBB294alteredBB:                           ; preds = %originalBB294, %1231
  br label %originalBB294

originalBB298alteredBB:                           ; preds = %originalBB298, %1248
  %6197 = load i64, i64* %29, align 8, !dbg !2417
  %6198 = load i64, i64* %20, align 8, !dbg !2417
  %6199 = icmp ult i64 %6197, %6198, !dbg !2417
  br label %originalBB298

originalBB302alteredBB:                           ; preds = %originalBB302, %1268
  %6200 = load i8*, i8** %19, align 8, !dbg !2417
  %6201 = load i64, i64* %29, align 8, !dbg !2417
  %6202 = getelementptr inbounds i8, i8* %6200, i64 %6201, !dbg !2417
  store i8 92, i8* %6202, align 1, !dbg !2417
  br label %originalBB302

originalBB306alteredBB:                           ; preds = %originalBB306, %1288
  %6203 = load i64, i64* %29, align 8, !dbg !2420
  %_307 = shl i64 %6203, 1
  %_308 = shl i64 %6203, 1
  %_309 = sub i64 0, %6203
  %gen310 = add i64 %_309, 1
  %_311 = shl i64 %6203, 1
  %_312 = sub i64 0, %6203
  %gen313 = add i64 %_312, 1
  %6204 = add i64 %6203, 1, !dbg !2420
  store i64 %6204, i64* %29, align 8, !dbg !2420
  br label %originalBB306

originalBB317alteredBB:                           ; preds = %originalBB317, %1307
  br label %originalBB317

originalBB321alteredBB:                           ; preds = %originalBB321, %1324
  %6205 = load i32, i32* %23, align 4, !dbg !2421
  %6206 = icmp ne i32 %6205, 2, !dbg !2423
  br label %originalBB321

originalBB325alteredBB:                           ; preds = %originalBB325, %1343
  %6207 = load i64, i64* %28, align 8, !dbg !2425
  %_326 = sub i64 %6207, 1
  %gen327 = mul i64 %_326, 1
  %_328 = shl i64 %6207, 1
  %_329 = sub i64 0, %6207
  %gen330 = add i64 %_329, 1
  %_331 = sub i64 %6207, 1
  %gen332 = mul i64 %_331, 1
  %6208 = add i64 %6207, 1, !dbg !2426
  %6209 = load i64, i64* %22, align 8, !dbg !2427
  %6210 = icmp ult i64 %6208, %6209, !dbg !2428
  br label %originalBB325

originalBB336alteredBB:                           ; preds = %originalBB336, %1372
  %6211 = load i8*, i8** %21, align 8, !dbg !2435
  %6212 = load i64, i64* %28, align 8, !dbg !2436
  %_337 = shl i64 %6212, 1
  %_338 = sub i64 0, %6212
  %gen339 = add i64 %_338, 1
  %_340 = sub i64 0, %6212
  %gen341 = add i64 %_340, 1
  %6213 = add i64 %6212, 1, !dbg !2437
  %6214 = getelementptr inbounds i8, i8* %6211, i64 %6213, !dbg !2435
  %6215 = load i8, i8* %6214, align 1, !dbg !2435
  %6216 = sext i8 %6215 to i32, !dbg !2435
  %6217 = icmp sle i32 %6216, 57, !dbg !2438
  br label %originalBB336

originalBB345alteredBB:                           ; preds = %originalBB345, %1396
  br label %originalBB345

originalBB349alteredBB:                           ; preds = %originalBB349, %1413
  %6218 = load i64, i64* %29, align 8, !dbg !2442
  %6219 = load i64, i64* %20, align 8, !dbg !2442
  %6220 = icmp ult i64 %6218, %6219, !dbg !2442
  br label %originalBB349

originalBB353alteredBB:                           ; preds = %originalBB353, %1433
  %6221 = load i8*, i8** %19, align 8, !dbg !2442
  %6222 = load i64, i64* %29, align 8, !dbg !2442
  %6223 = getelementptr inbounds i8, i8* %6221, i64 %6222, !dbg !2442
  store i8 48, i8* %6223, align 1, !dbg !2442
  br label %originalBB353

originalBB357alteredBB:                           ; preds = %originalBB357, %1456
  br label %originalBB357

originalBB361alteredBB:                           ; preds = %originalBB361, %1477
  %6224 = load i8*, i8** %19, align 8, !dbg !2447
  %6225 = load i64, i64* %29, align 8, !dbg !2447
  %6226 = getelementptr inbounds i8, i8* %6224, i64 %6225, !dbg !2447
  store i8 48, i8* %6226, align 1, !dbg !2447
  br label %originalBB361

originalBB365alteredBB:                           ; preds = %originalBB365, %1497
  %6227 = load i64, i64* %29, align 8, !dbg !2450
  %_366 = sub i64 0, %6227
  %gen367 = add i64 %_366, 1
  %_368 = sub i64 %6227, 1
  %gen369 = mul i64 %_368, 1
  %_370 = sub i64 0, %6227
  %gen371 = add i64 %_370, 1
  %_372 = sub i64 %6227, 1
  %gen373 = mul i64 %_372, 1
  %_374 = sub i64 0, %6227
  %gen375 = add i64 %_374, 1
  %_376 = shl i64 %6227, 1
  %6228 = add i64 %6227, 1, !dbg !2450
  store i64 %6228, i64* %29, align 8, !dbg !2450
  br label %originalBB365

originalBB380alteredBB:                           ; preds = %originalBB380, %1516
  br label %originalBB380

originalBB384alteredBB:                           ; preds = %originalBB384, %1533
  store i8 48, i8* %39, align 1, !dbg !2452
  br label %originalBB384

originalBB388alteredBB:                           ; preds = %originalBB388, %1550
  %6229 = load i32, i32* %24, align 4, !dbg !2454
  %_389 = shl i32 %6229, 1
  %_390 = sub i32 %6229, 1
  %gen391 = mul i32 %_390, 1
  %6230 = and i32 %6229, 1, !dbg !2456
  %6231 = icmp ne i32 %6230, 0, !dbg !2456
  br label %originalBB388

originalBB395alteredBB:                           ; preds = %originalBB395, %1571
  br label %originalBB395

originalBB399alteredBB:                           ; preds = %originalBB399, %1588
  br label %originalBB399

originalBB403alteredBB:                           ; preds = %originalBB403, %1605
  %6232 = load i32, i32* %23, align 4, !dbg !2460
  br label %originalBB403

originalBB407alteredBB:                           ; preds = %originalBB407, %1623
  %6233 = load i8, i8* %35, align 1, !dbg !2462
  %6234 = trunc i8 %6233 to i1, !dbg !2462
  br label %originalBB407

originalBB411alteredBB:                           ; preds = %originalBB411, %1642
  br label %originalBB411

originalBB415alteredBB:                           ; preds = %originalBB415, %1659
  br label %originalBB415

originalBB419alteredBB:                           ; preds = %originalBB419, %1676
  %6235 = load i32, i32* %24, align 4, !dbg !2468
  %_420 = sub i32 0, %6235
  %gen421 = add i32 %_420, 4
  %6236 = and i32 %6235, 4, !dbg !2470
  %6237 = icmp ne i32 %6236, 0, !dbg !2470
  br label %originalBB419

originalBB425alteredBB:                           ; preds = %originalBB425, %1696
  %6238 = load i64, i64* %28, align 8, !dbg !2472
  %_426 = sub i64 %6238, 2
  %gen427 = mul i64 %_426, 2
  %_428 = sub i64 0, %6238
  %gen429 = add i64 %_428, 2
  %_430 = sub i64 %6238, 2
  %gen431 = mul i64 %_430, 2
  %_432 = sub i64 0, %6238
  %gen433 = add i64 %_432, 2
  %_434 = sub i64 0, %6238
  %gen435 = add i64 %_434, 2
  %6239 = add i64 %6238, 2, !dbg !2473
  %6240 = load i64, i64* %22, align 8, !dbg !2474
  %6241 = icmp ult i64 %6239, %6240, !dbg !2475
  br label %originalBB425

originalBB439alteredBB:                           ; preds = %originalBB439, %1717
  %6242 = load i8*, i8** %21, align 8, !dbg !2477
  %6243 = load i64, i64* %28, align 8, !dbg !2478
  %_440 = shl i64 %6243, 1
  %_441 = sub i64 0, %6243
  %gen442 = add i64 %_441, 1
  %_443 = sub i64 0, %6243
  %gen444 = add i64 %_443, 1
  %_445 = sub i64 0, %6243
  %gen446 = add i64 %_445, 1
  %_447 = shl i64 %6243, 1
  %_448 = shl i64 %6243, 1
  %6244 = add i64 %6243, 1, !dbg !2479
  %6245 = getelementptr inbounds i8, i8* %6242, i64 %6244, !dbg !2477
  %6246 = load i8, i8* %6245, align 1, !dbg !2477
  %6247 = sext i8 %6246 to i32, !dbg !2477
  %6248 = icmp eq i32 %6247, 63, !dbg !2480
  br label %originalBB439

originalBB452alteredBB:                           ; preds = %originalBB452, %1741
  %6249 = load i8*, i8** %21, align 8, !dbg !2482
  %6250 = load i64, i64* %28, align 8, !dbg !2483
  %_453 = sub i64 0, %6250
  %gen454 = add i64 %_453, 2
  %_455 = sub i64 %6250, 2
  %gen456 = mul i64 %_455, 2
  %_457 = sub i64 %6250, 2
  %gen458 = mul i64 %_457, 2
  %_459 = sub i64 0, %6250
  %gen460 = add i64 %_459, 2
  %_461 = sub i64 0, %6250
  %gen462 = add i64 %_461, 2
  %6251 = add i64 %6250, 2, !dbg !2484
  %6252 = getelementptr inbounds i8, i8* %6249, i64 %6251, !dbg !2482
  %6253 = load i8, i8* %6252, align 1, !dbg !2482
  %6254 = sext i8 %6253 to i32, !dbg !2482
  br label %originalBB452

originalBB466alteredBB:                           ; preds = %originalBB466, %1776
  %6255 = load i64, i64* %29, align 8, !dbg !2497
  %6256 = load i64, i64* %20, align 8, !dbg !2497
  %6257 = icmp ult i64 %6255, %6256, !dbg !2497
  br label %originalBB466

originalBB470alteredBB:                           ; preds = %originalBB470, %1796
  %6258 = load i8*, i8** %19, align 8, !dbg !2497
  %6259 = load i64, i64* %29, align 8, !dbg !2497
  %6260 = getelementptr inbounds i8, i8* %6258, i64 %6259, !dbg !2497
  store i8 63, i8* %6260, align 1, !dbg !2497
  br label %originalBB470

originalBB474alteredBB:                           ; preds = %originalBB474, %1816
  %6261 = load i64, i64* %29, align 8, !dbg !2500
  %_475 = shl i64 %6261, 1
  %_476 = sub i64 %6261, 1
  %gen477 = mul i64 %_476, 1
  %_478 = shl i64 %6261, 1
  %_479 = sub i64 %6261, 1
  %gen480 = mul i64 %_479, 1
  %_481 = sub i64 0, %6261
  %gen482 = add i64 %_481, 1
  %_483 = sub i64 0, %6261
  %gen484 = add i64 %_483, 1
  %6262 = add i64 %6261, 1, !dbg !2500
  store i64 %6262, i64* %29, align 8, !dbg !2500
  br label %originalBB474

originalBB488alteredBB:                           ; preds = %originalBB488, %1836
  %6263 = load i64, i64* %29, align 8, !dbg !2502
  %6264 = load i64, i64* %20, align 8, !dbg !2502
  %6265 = icmp ult i64 %6263, %6264, !dbg !2502
  br label %originalBB488

originalBB492alteredBB:                           ; preds = %originalBB492, %1856
  %6266 = load i8*, i8** %19, align 8, !dbg !2502
  %6267 = load i64, i64* %29, align 8, !dbg !2502
  %6268 = getelementptr inbounds i8, i8* %6266, i64 %6267, !dbg !2502
  store i8 34, i8* %6268, align 1, !dbg !2502
  br label %originalBB492

originalBB496alteredBB:                           ; preds = %originalBB496, %1876
  %6269 = load i64, i64* %29, align 8, !dbg !2505
  %_497 = shl i64 %6269, 1
  %_498 = sub i64 %6269, 1
  %gen499 = mul i64 %_498, 1
  %_500 = sub i64 %6269, 1
  %gen501 = mul i64 %_500, 1
  %6270 = add i64 %6269, 1, !dbg !2505
  store i64 %6270, i64* %29, align 8, !dbg !2505
  br label %originalBB496

originalBB505alteredBB:                           ; preds = %originalBB505, %1895
  br label %originalBB505

originalBB509alteredBB:                           ; preds = %originalBB509, %1912
  %6271 = load i64, i64* %29, align 8, !dbg !2507
  %6272 = load i64, i64* %20, align 8, !dbg !2507
  %6273 = icmp ult i64 %6271, %6272, !dbg !2507
  br label %originalBB509

originalBB513alteredBB:                           ; preds = %originalBB513, %1932
  %6274 = load i8*, i8** %19, align 8, !dbg !2507
  %6275 = load i64, i64* %29, align 8, !dbg !2507
  %6276 = getelementptr inbounds i8, i8* %6274, i64 %6275, !dbg !2507
  store i8 34, i8* %6276, align 1, !dbg !2507
  br label %originalBB513

originalBB517alteredBB:                           ; preds = %originalBB517, %1952
  %6277 = load i64, i64* %29, align 8, !dbg !2510
  %_518 = shl i64 %6277, 1
  %_519 = sub i64 0, %6277
  %gen520 = add i64 %_519, 1
  %6278 = add i64 %6277, 1, !dbg !2510
  store i64 %6278, i64* %29, align 8, !dbg !2510
  br label %originalBB517

originalBB524alteredBB:                           ; preds = %originalBB524, %1971
  br label %originalBB524

originalBB528alteredBB:                           ; preds = %originalBB528, %1988
  %6279 = load i64, i64* %29, align 8, !dbg !2512
  %6280 = load i64, i64* %20, align 8, !dbg !2512
  %6281 = icmp ult i64 %6279, %6280, !dbg !2512
  br label %originalBB528

originalBB532alteredBB:                           ; preds = %originalBB532, %2008
  %6282 = load i8*, i8** %19, align 8, !dbg !2512
  %6283 = load i64, i64* %29, align 8, !dbg !2512
  %6284 = getelementptr inbounds i8, i8* %6282, i64 %6283, !dbg !2512
  store i8 63, i8* %6284, align 1, !dbg !2512
  br label %originalBB532

originalBB536alteredBB:                           ; preds = %originalBB536, %2031
  br label %originalBB536

originalBB540alteredBB:                           ; preds = %originalBB540, %2048
  br label %originalBB540

originalBB544alteredBB:                           ; preds = %originalBB544, %2065
  br label %originalBB544

originalBB548alteredBB:                           ; preds = %originalBB548, %2083
  br label %originalBB548

originalBB552alteredBB:                           ; preds = %originalBB552, %2100
  br label %originalBB552

originalBB556alteredBB:                           ; preds = %originalBB556, %2117
  store i8 97, i8* %40, align 1, !dbg !2522
  br label %originalBB556

originalBB560alteredBB:                           ; preds = %originalBB560, %2134
  store i8 98, i8* %40, align 1, !dbg !2524
  br label %originalBB560

originalBB564alteredBB:                           ; preds = %originalBB564, %2151
  store i8 102, i8* %40, align 1, !dbg !2526
  br label %originalBB564

originalBB568alteredBB:                           ; preds = %originalBB568, %2168
  store i8 110, i8* %40, align 1, !dbg !2528
  br label %originalBB568

originalBB572alteredBB:                           ; preds = %originalBB572, %2186
  store i8 116, i8* %40, align 1, !dbg !2532
  br label %originalBB572

originalBB576alteredBB:                           ; preds = %originalBB576, %2203
  store i8 118, i8* %40, align 1, !dbg !2534
  br label %originalBB576

originalBB580alteredBB:                           ; preds = %originalBB580, %2220
  %6285 = load i8, i8* %39, align 1, !dbg !2536
  store i8 %6285, i8* %40, align 1, !dbg !2537
  %6286 = load i32, i32* %23, align 4, !dbg !2538
  %6287 = icmp eq i32 %6286, 2, !dbg !2540
  br label %originalBB580

originalBB584alteredBB:                           ; preds = %originalBB584, %2240
  %6288 = load i8, i8* %35, align 1, !dbg !2542
  %6289 = trunc i8 %6288 to i1, !dbg !2542
  br label %originalBB584

originalBB588alteredBB:                           ; preds = %originalBB588, %2259
  br label %originalBB588

originalBB592alteredBB:                           ; preds = %originalBB592, %2277
  %6290 = load i8, i8* %33, align 1, !dbg !2548
  %6291 = trunc i8 %6290 to i1, !dbg !2548
  br label %originalBB592

originalBB596alteredBB:                           ; preds = %originalBB596, %2296
  %6292 = load i8, i8* %35, align 1, !dbg !2551
  %6293 = trunc i8 %6292 to i1, !dbg !2551
  br label %originalBB596

originalBB600alteredBB:                           ; preds = %originalBB600, %2315
  %6294 = load i64, i64* %32, align 8, !dbg !2553
  %6295 = icmp ne i64 %6294, 0, !dbg !2553
  br label %originalBB600

originalBB604alteredBB:                           ; preds = %originalBB604, %2335
  br label %originalBB604

originalBB608alteredBB:                           ; preds = %originalBB608, %2352
  %6296 = load i32, i32* %23, align 4, !dbg !2558
  %6297 = icmp eq i32 %6296, 2, !dbg !2560
  br label %originalBB608

originalBB612alteredBB:                           ; preds = %originalBB612, %2371
  %6298 = load i8, i8* %35, align 1, !dbg !2562
  %6299 = trunc i8 %6298 to i1, !dbg !2562
  br label %originalBB612

originalBB616alteredBB:                           ; preds = %originalBB616, %2390
  br label %originalBB616

originalBB620alteredBB:                           ; preds = %originalBB620, %2407
  br label %originalBB620

originalBB624alteredBB:                           ; preds = %originalBB624, %2424
  %6300 = load i8, i8* %33, align 1, !dbg !2567
  %6301 = trunc i8 %6300 to i1, !dbg !2567
  br label %originalBB624

originalBB628alteredBB:                           ; preds = %originalBB628, %2443
  %6302 = load i8, i8* %40, align 1, !dbg !2570
  store i8 %6302, i8* %39, align 1, !dbg !2572
  br label %originalBB628

originalBB632alteredBB:                           ; preds = %originalBB632, %2461
  br label %originalBB632

originalBB636alteredBB:                           ; preds = %originalBB636, %2478
  %6303 = load i64, i64* %22, align 8, !dbg !2575
  %6304 = icmp eq i64 %6303, -1, !dbg !2577
  br label %originalBB636

originalBB640alteredBB:                           ; preds = %originalBB640, %2497
  %6305 = load i8*, i8** %21, align 8, !dbg !2579
  %6306 = getelementptr inbounds i8, i8* %6305, i64 1, !dbg !2579
  %6307 = load i8, i8* %6306, align 1, !dbg !2579
  %6308 = sext i8 %6307 to i32, !dbg !2579
  %6309 = icmp eq i32 %6308, 0, !dbg !2580
  br label %originalBB640

originalBB644alteredBB:                           ; preds = %originalBB644, %2519
  %6310 = load i64, i64* %22, align 8, !dbg !2581
  %6311 = icmp eq i64 %6310, 1, !dbg !2582
  br label %originalBB644

originalBB648alteredBB:                           ; preds = %originalBB648, %2540
  %6312 = load i64, i64* %28, align 8, !dbg !2585
  %6313 = icmp ne i64 %6312, 0, !dbg !2587
  br label %originalBB648

originalBB652alteredBB:                           ; preds = %originalBB652, %2559
  br label %originalBB652

originalBB656alteredBB:                           ; preds = %originalBB656, %2576
  br label %originalBB656

originalBB660alteredBB:                           ; preds = %originalBB660, %2593
  store i8 1, i8* %43, align 1, !dbg !2591
  br label %originalBB660

originalBB664alteredBB:                           ; preds = %originalBB664, %2610
  %6314 = load i32, i32* %23, align 4, !dbg !2593
  %6315 = icmp eq i32 %6314, 2, !dbg !2595
  br label %originalBB664

originalBB668alteredBB:                           ; preds = %originalBB668, %2629
  %6316 = load i8, i8* %35, align 1, !dbg !2597
  %6317 = trunc i8 %6316 to i1, !dbg !2597
  br label %originalBB668

originalBB672alteredBB:                           ; preds = %originalBB672, %2648
  br label %originalBB672

originalBB676alteredBB:                           ; preds = %originalBB676, %2665
  br label %originalBB676

originalBB680alteredBB:                           ; preds = %originalBB680, %2688
  br label %originalBB680

originalBB684alteredBB:                           ; preds = %originalBB684, %2705
  %6318 = load i64, i64* %20, align 8, !dbg !2612
  %6319 = icmp ne i64 %6318, 0, !dbg !2612
  br label %originalBB684

originalBB688alteredBB:                           ; preds = %originalBB688, %2724
  %6320 = load i64, i64* %30, align 8, !dbg !2615
  %6321 = icmp ne i64 %6320, 0, !dbg !2615
  br label %originalBB688

originalBB692alteredBB:                           ; preds = %originalBB692, %2743
  %6322 = load i64, i64* %20, align 8, !dbg !2617
  store i64 %6322, i64* %30, align 8, !dbg !2619
  store i64 0, i64* %20, align 8, !dbg !2620
  br label %originalBB692

originalBB696alteredBB:                           ; preds = %originalBB696, %2761
  br label %originalBB696

originalBB700alteredBB:                           ; preds = %originalBB700, %2778
  %6323 = load i64, i64* %29, align 8, !dbg !2623
  %6324 = load i64, i64* %20, align 8, !dbg !2623
  %6325 = icmp ult i64 %6323, %6324, !dbg !2623
  br label %originalBB700

originalBB704alteredBB:                           ; preds = %originalBB704, %2798
  %6326 = load i8*, i8** %19, align 8, !dbg !2623
  %6327 = load i64, i64* %29, align 8, !dbg !2623
  %6328 = getelementptr inbounds i8, i8* %6326, i64 %6327, !dbg !2623
  store i8 39, i8* %6328, align 1, !dbg !2623
  br label %originalBB704

originalBB708alteredBB:                           ; preds = %originalBB708, %2821
  br label %originalBB708

originalBB712alteredBB:                           ; preds = %originalBB712, %2838
  %6329 = load i64, i64* %29, align 8, !dbg !2628
  %6330 = load i64, i64* %20, align 8, !dbg !2628
  %6331 = icmp ult i64 %6329, %6330, !dbg !2628
  br label %originalBB712

originalBB716alteredBB:                           ; preds = %originalBB716, %2865
  br label %originalBB716

originalBB720alteredBB:                           ; preds = %originalBB720, %2890
  %6332 = load i64, i64* %29, align 8, !dbg !2636
  %_721 = sub i64 0, %6332
  %gen722 = add i64 %_721, 1
  %6333 = add i64 %6332, 1, !dbg !2636
  store i64 %6333, i64* %29, align 8, !dbg !2636
  br label %originalBB720

originalBB726alteredBB:                           ; preds = %originalBB726, %2909
  store i8 0, i8* %36, align 1, !dbg !2637
  br label %originalBB726

originalBB730alteredBB:                           ; preds = %originalBB730, %2926
  br label %originalBB730

originalBB734alteredBB:                           ; preds = %originalBB734, %2943
  store i8 1, i8* %43, align 1, !dbg !2640
  br label %originalBB734

originalBB738alteredBB:                           ; preds = %originalBB738, %2963
  store i64 1, i64* %44, align 8, !dbg !2650
  %6334 = call i16** @__ctype_b_loc() #15, !dbg !2652
  %6335 = load i16*, i16** %6334, align 8, !dbg !2652
  %6336 = load i8, i8* %39, align 1, !dbg !2652
  %6337 = zext i8 %6336 to i32, !dbg !2652
  %6338 = sext i32 %6337 to i64, !dbg !2652
  %6339 = getelementptr inbounds i16, i16* %6335, i64 %6338, !dbg !2652
  %6340 = load i16, i16* %6339, align 2, !dbg !2652
  %6341 = zext i16 %6340 to i32, !dbg !2652
  %_739 = sub i32 0, %6341
  %gen740 = add i32 %_739, 16384
  %_741 = sub i32 %6341, 16384
  %gen742 = mul i32 %_741, 16384
  %6342 = and i32 %6341, 16384, !dbg !2652
  %6343 = icmp ne i32 %6342, 0, !dbg !2653
  %6344 = zext i1 %6343 to i8, !dbg !2654
  store i8 %6344, i8* %45, align 1, !dbg !2654
  br label %originalBB738

originalBB746alteredBB:                           ; preds = %originalBB746, %2991
  %6345 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !2674
  call void @llvm.memset.p0i8.i64(i8* align 4 %6345, i8 0, i64 8, i1 false), !dbg !2674
  store i64 0, i64* %44, align 8, !dbg !2675
  store i8 1, i8* %45, align 1, !dbg !2676
  %6346 = load i64, i64* %22, align 8, !dbg !2677
  %6347 = icmp eq i64 %6346, -1, !dbg !2679
  br label %originalBB746

originalBB750alteredBB:                           ; preds = %originalBB750, %3014
  br label %originalBB750

originalBB754alteredBB:                           ; preds = %originalBB754, %3031
  %6348 = load i8*, i8** %21, align 8, !dbg !2692
  %6349 = load i64, i64* %28, align 8, !dbg !2693
  %6350 = load i64, i64* %44, align 8, !dbg !2694
  %_755 = sub i64 0, %6349
  %gen756 = add i64 %_755, %6350
  %_757 = sub i64 0, %6349
  %gen758 = add i64 %_757, %6350
  %_759 = shl i64 %6349, %6350
  %_760 = sub i64 0, %6349
  %gen761 = add i64 %_760, %6350
  %6351 = add i64 %6349, %6350, !dbg !2695
  %6352 = getelementptr inbounds i8, i8* %6348, i64 %6351, !dbg !2692
  %6353 = load i64, i64* %22, align 8, !dbg !2696
  %6354 = load i64, i64* %28, align 8, !dbg !2697
  %6355 = load i64, i64* %44, align 8, !dbg !2698
  %_762 = shl i64 %6354, %6355
  %_763 = sub i64 0, %6354
  %gen764 = add i64 %_763, %6355
  %_765 = shl i64 %6354, %6355
  %_766 = sub i64 0, %6354
  %gen767 = add i64 %_766, %6355
  %6356 = add i64 %6354, %6355, !dbg !2699
  %_768 = sub i64 %6353, %6356
  %gen769 = mul i64 %_768, %6356
  %6357 = sub i64 %6353, %6356, !dbg !2700
  %6358 = call i64 @rpl_mbrtowc(i32* %47, i8* %6352, i64 %6357, %struct.__mbstate_t* %46), !dbg !2701
  store i64 %6358, i64* %48, align 8, !dbg !2691
  %6359 = load i64, i64* %48, align 8, !dbg !2702
  %6360 = icmp eq i64 %6359, 0, !dbg !2704
  br label %originalBB754

originalBB773alteredBB:                           ; preds = %originalBB773, %3061
  br label %originalBB773

originalBB777alteredBB:                           ; preds = %originalBB777, %3081
  store i8 0, i8* %45, align 1, !dbg !2711
  br label %originalBB777

originalBB781alteredBB:                           ; preds = %originalBB781, %3098
  %6361 = load i64, i64* %48, align 8, !dbg !2714
  %6362 = icmp eq i64 %6361, -2, !dbg !2716
  br label %originalBB781

originalBB785alteredBB:                           ; preds = %originalBB785, %3118
  %6363 = load i64, i64* %28, align 8, !dbg !2721
  %6364 = load i64, i64* %44, align 8, !dbg !2722
  %_786 = sub i64 %6363, %6364
  %gen787 = mul i64 %_786, %6364
  %_788 = shl i64 %6363, %6364
  %_789 = shl i64 %6363, %6364
  %6365 = add i64 %6363, %6364, !dbg !2723
  %6366 = load i64, i64* %22, align 8, !dbg !2724
  %6367 = icmp ult i64 %6365, %6366, !dbg !2725
  br label %originalBB785

originalBB793alteredBB:                           ; preds = %originalBB793, %3140
  %6368 = load i8*, i8** %21, align 8, !dbg !2727
  %6369 = load i64, i64* %28, align 8, !dbg !2728
  %6370 = load i64, i64* %44, align 8, !dbg !2729
  %_794 = shl i64 %6369, %6370
  %_795 = shl i64 %6369, %6370
  %6371 = add i64 %6369, %6370, !dbg !2730
  %6372 = getelementptr inbounds i8, i8* %6368, i64 %6371, !dbg !2727
  %6373 = load i8, i8* %6372, align 1, !dbg !2727
  %6374 = sext i8 %6373 to i32, !dbg !2727
  %6375 = icmp ne i32 %6374, 0, !dbg !2726
  br label %originalBB793

originalBB799alteredBB:                           ; preds = %originalBB799, %3165
  br label %originalBB799

originalBB803alteredBB:                           ; preds = %originalBB803, %3183
  %6376 = load i64, i64* %44, align 8, !dbg !2732
  %_804 = shl i64 %6376, 1
  %_805 = sub i64 %6376, 1
  %gen806 = mul i64 %_805, 1
  %_807 = sub i64 0, %6376
  %gen808 = add i64 %_807, 1
  %_809 = sub i64 %6376, 1
  %gen810 = mul i64 %_809, 1
  %_811 = sub i64 0, %6376
  %gen812 = add i64 %_811, 1
  %6377 = add i64 %6376, 1, !dbg !2732
  store i64 %6377, i64* %44, align 8, !dbg !2732
  br label %originalBB803

originalBB816alteredBB:                           ; preds = %originalBB816, %3202
  br label %originalBB816

originalBB820alteredBB:                           ; preds = %originalBB820, %3219
  %6378 = load i8, i8* %35, align 1, !dbg !2735
  %6379 = trunc i8 %6378 to i1, !dbg !2735
  br label %originalBB820

originalBB824alteredBB:                           ; preds = %originalBB824, %3241
  store i64 1, i64* %49, align 8, !dbg !2745
  br label %originalBB824

originalBB828alteredBB:                           ; preds = %originalBB828, %3272
  br label %originalBB828

originalBB832alteredBB:                           ; preds = %originalBB832, %3289
  br label %originalBB832

originalBB836alteredBB:                           ; preds = %originalBB836, %3306
  br label %originalBB836

originalBB840alteredBB:                           ; preds = %originalBB840, %3323
  %6380 = load i64, i64* %49, align 8, !dbg !2764
  %_841 = sub i64 0, %6380
  %gen842 = add i64 %_841, 1
  %_843 = sub i64 %6380, 1
  %gen844 = mul i64 %_843, 1
  %_845 = sub i64 %6380, 1
  %gen846 = mul i64 %_845, 1
  %6381 = add i64 %6380, 1, !dbg !2764
  store i64 %6381, i64* %49, align 8, !dbg !2764
  br label %originalBB840

originalBB850alteredBB:                           ; preds = %originalBB850, %3342
  br label %originalBB850

originalBB854alteredBB:                           ; preds = %originalBB854, %3359
  %6382 = load i32, i32* %47, align 4, !dbg !2769
  %6383 = call i32 @iswprint(i32 %6382) #10, !dbg !2771
  %6384 = icmp ne i32 %6383, 0, !dbg !2771
  br label %originalBB854

originalBB858alteredBB:                           ; preds = %originalBB858, %3379
  store i8 0, i8* %45, align 1, !dbg !2773
  br label %originalBB858

originalBB862alteredBB:                           ; preds = %originalBB862, %3396
  %6385 = load i64, i64* %48, align 8, !dbg !2775
  %6386 = load i64, i64* %44, align 8, !dbg !2776
  %_863 = sub i64 0, %6386
  %gen864 = add i64 %_863, %6385
  %_865 = sub i64 0, %6386
  %gen866 = add i64 %_865, %6385
  %_867 = sub i64 0, %6386
  %gen868 = add i64 %_867, %6385
  %_869 = shl i64 %6386, %6385
  %_870 = sub i64 %6386, %6385
  %gen871 = mul i64 %_870, %6385
  %_872 = shl i64 %6386, %6385
  %6387 = add i64 %6386, %6385, !dbg !2776
  store i64 %6387, i64* %44, align 8, !dbg !2776
  br label %originalBB862

originalBB876alteredBB:                           ; preds = %originalBB876, %3416
  br label %originalBB876

originalBB880alteredBB:                           ; preds = %originalBB880, %3433
  br label %originalBB880

originalBB884alteredBB:                           ; preds = %originalBB884, %3450
  br label %originalBB884

originalBB888alteredBB:                           ; preds = %originalBB888, %3467
  %6388 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !2778
  %6389 = icmp ne i32 %6388, 0, !dbg !2779
  %_889 = sub i1 false, %6389
  %gen890 = add i1 %_889, true
  %6390 = xor i1 %6389, true, !dbg !2779
  br label %originalBB888

originalBB894alteredBB:                           ; preds = %originalBB894, %3487
  br label %originalBB894

originalBB898alteredBB:                           ; preds = %originalBB898, %3504
  %6391 = load i8, i8* %45, align 1, !dbg !2782
  %6392 = trunc i8 %6391 to i1, !dbg !2782
  %6393 = zext i1 %6392 to i8, !dbg !2783
  store i8 %6393, i8* %43, align 1, !dbg !2783
  %6394 = load i64, i64* %44, align 8, !dbg !2784
  %6395 = icmp ult i64 1, %6394, !dbg !2786
  br label %originalBB898

originalBB902alteredBB:                           ; preds = %originalBB902, %3526
  %6396 = load i8, i8* %33, align 1, !dbg !2788
  %6397 = trunc i8 %6396 to i1, !dbg !2788
  br label %originalBB902

originalBB906alteredBB:                           ; preds = %originalBB906, %3545
  %6398 = load i8, i8* %45, align 1, !dbg !2790
  %6399 = trunc i8 %6398 to i1, !dbg !2790
  br label %originalBB906

originalBB910alteredBB:                           ; preds = %originalBB910, %3564
  %6400 = load i64, i64* %28, align 8, !dbg !2795
  %6401 = load i64, i64* %44, align 8, !dbg !2796
  %_911 = sub i64 0, %6400
  %gen912 = add i64 %_911, %6401
  %_913 = sub i64 %6400, %6401
  %gen914 = mul i64 %_913, %6401
  %_915 = shl i64 %6400, %6401
  %_916 = shl i64 %6400, %6401
  %6402 = add i64 %6400, %6401, !dbg !2797
  store i64 %6402, i64* %50, align 8, !dbg !2794
  br label %originalBB910

originalBB920alteredBB:                           ; preds = %originalBB920, %3584
  %6403 = load i8, i8* %33, align 1, !dbg !2799
  %6404 = trunc i8 %6403 to i1, !dbg !2799
  br label %originalBB920

originalBB924alteredBB:                           ; preds = %originalBB924, %3610
  br label %originalBB924

originalBB928alteredBB:                           ; preds = %originalBB928, %3627
  store i8 1, i8* %42, align 1, !dbg !2812
  %6405 = load i32, i32* %23, align 4, !dbg !2813
  %6406 = icmp eq i32 %6405, 2, !dbg !2813
  br label %originalBB928

originalBB932alteredBB:                           ; preds = %originalBB932, %3646
  %6407 = load i8, i8* %36, align 1, !dbg !2813
  %6408 = trunc i8 %6407 to i1, !dbg !2813
  br label %originalBB932

originalBB936alteredBB:                           ; preds = %originalBB936, %3665
  br label %originalBB936

originalBB940alteredBB:                           ; preds = %originalBB940, %3682
  %6409 = load i64, i64* %29, align 8, !dbg !2817
  %6410 = load i64, i64* %20, align 8, !dbg !2817
  %6411 = icmp ult i64 %6409, %6410, !dbg !2817
  br label %originalBB940

originalBB944alteredBB:                           ; preds = %originalBB944, %3702
  %6412 = load i8*, i8** %19, align 8, !dbg !2817
  %6413 = load i64, i64* %29, align 8, !dbg !2817
  %6414 = getelementptr inbounds i8, i8* %6412, i64 %6413, !dbg !2817
  store i8 39, i8* %6414, align 1, !dbg !2817
  br label %originalBB944

originalBB948alteredBB:                           ; preds = %originalBB948, %3722
  %6415 = load i64, i64* %29, align 8, !dbg !2820
  %_949 = sub i64 0, %6415
  %gen950 = add i64 %_949, 1
  %_951 = sub i64 0, %6415
  %gen952 = add i64 %_951, 1
  %_953 = sub i64 0, %6415
  %gen954 = add i64 %_953, 1
  %6416 = add i64 %6415, 1, !dbg !2820
  store i64 %6416, i64* %29, align 8, !dbg !2820
  br label %originalBB948

originalBB958alteredBB:                           ; preds = %originalBB958, %3742
  %6417 = load i64, i64* %29, align 8, !dbg !2821
  %6418 = load i64, i64* %20, align 8, !dbg !2821
  %6419 = icmp ult i64 %6417, %6418, !dbg !2821
  br label %originalBB958

originalBB962alteredBB:                           ; preds = %originalBB962, %3766
  %6420 = load i64, i64* %29, align 8, !dbg !2824
  %_963 = sub i64 0, %6420
  %gen964 = add i64 %_963, 1
  %_965 = shl i64 %6420, 1
  %6421 = add i64 %6420, 1, !dbg !2824
  store i64 %6421, i64* %29, align 8, !dbg !2824
  br label %originalBB962

originalBB969alteredBB:                           ; preds = %originalBB969, %3786
  %6422 = load i64, i64* %29, align 8, !dbg !2825
  %6423 = load i64, i64* %20, align 8, !dbg !2825
  %6424 = icmp ult i64 %6422, %6423, !dbg !2825
  br label %originalBB969

originalBB973alteredBB:                           ; preds = %originalBB973, %3806
  %6425 = load i8*, i8** %19, align 8, !dbg !2825
  %6426 = load i64, i64* %29, align 8, !dbg !2825
  %6427 = getelementptr inbounds i8, i8* %6425, i64 %6426, !dbg !2825
  store i8 39, i8* %6427, align 1, !dbg !2825
  br label %originalBB973

originalBB977alteredBB:                           ; preds = %originalBB977, %3826
  %6428 = load i64, i64* %29, align 8, !dbg !2828
  %_978 = shl i64 %6428, 1
  %_979 = sub i64 0, %6428
  %gen980 = add i64 %_979, 1
  %6429 = add i64 %6428, 1, !dbg !2828
  store i64 %6429, i64* %29, align 8, !dbg !2828
  br label %originalBB977

originalBB984alteredBB:                           ; preds = %originalBB984, %3845
  store i8 1, i8* %36, align 1, !dbg !2815
  br label %originalBB984

originalBB988alteredBB:                           ; preds = %originalBB988, %3863
  %6430 = load i64, i64* %29, align 8, !dbg !2829
  %6431 = load i64, i64* %20, align 8, !dbg !2829
  %6432 = icmp ult i64 %6430, %6431, !dbg !2829
  br label %originalBB988

originalBB992alteredBB:                           ; preds = %originalBB992, %3883
  %6433 = load i8*, i8** %19, align 8, !dbg !2829
  %6434 = load i64, i64* %29, align 8, !dbg !2829
  %6435 = getelementptr inbounds i8, i8* %6433, i64 %6434, !dbg !2829
  store i8 92, i8* %6435, align 1, !dbg !2829
  br label %originalBB992

originalBB996alteredBB:                           ; preds = %originalBB996, %3903
  %6436 = load i64, i64* %29, align 8, !dbg !2832
  %_997 = sub i64 %6436, 1
  %gen998 = mul i64 %_997, 1
  %_999 = sub i64 0, %6436
  %gen1000 = add i64 %_999, 1
  %_1001 = sub i64 %6436, 1
  %gen1002 = mul i64 %_1001, 1
  %_1003 = sub i64 0, %6436
  %gen1004 = add i64 %_1003, 1
  %_1005 = shl i64 %6436, 1
  %_1006 = sub i64 0, %6436
  %gen1007 = add i64 %_1006, 1
  %_1008 = sub i64 %6436, 1
  %gen1009 = mul i64 %_1008, 1
  %6437 = add i64 %6436, 1, !dbg !2832
  store i64 %6437, i64* %29, align 8, !dbg !2832
  br label %originalBB996

originalBB1013alteredBB:                          ; preds = %originalBB1013, %3922
  br label %originalBB1013

originalBB1017alteredBB:                          ; preds = %originalBB1017, %3940
  %6438 = load i64, i64* %29, align 8, !dbg !2834
  %6439 = load i64, i64* %20, align 8, !dbg !2834
  %6440 = icmp ult i64 %6438, %6439, !dbg !2834
  br label %originalBB1017

originalBB1021alteredBB:                          ; preds = %originalBB1021, %3960
  %6441 = load i8, i8* %39, align 1, !dbg !2834
  %6442 = zext i8 %6441 to i32, !dbg !2834
  %_1022 = sub i32 %6442, 6
  %gen1023 = mul i32 %_1022, 6
  %_1024 = sub i32 0, %6442
  %gen1025 = add i32 %_1024, 6
  %_1026 = sub i32 %6442, 6
  %gen1027 = mul i32 %_1026, 6
  %_1028 = sub i32 0, %6442
  %gen1029 = add i32 %_1028, 6
  %_1030 = sub i32 %6442, 6
  %gen1031 = mul i32 %_1030, 6
  %_1032 = sub i32 0, %6442
  %gen1033 = add i32 %_1032, 6
  %6443 = ashr i32 %6442, 6, !dbg !2834
  %_1034 = shl i32 48, %6443
  %_1035 = shl i32 48, %6443
  %_1036 = sub i32 48, %6443
  %gen1037 = mul i32 %_1036, %6443
  %_1038 = shl i32 48, %6443
  %_1039 = sub i32 0, 48
  %gen1040 = add i32 %_1039, %6443
  %6444 = add nsw i32 48, %6443, !dbg !2834
  %6445 = trunc i32 %6444 to i8, !dbg !2834
  %6446 = load i8*, i8** %19, align 8, !dbg !2834
  %6447 = load i64, i64* %29, align 8, !dbg !2834
  %6448 = getelementptr inbounds i8, i8* %6446, i64 %6447, !dbg !2834
  store i8 %6445, i8* %6448, align 1, !dbg !2834
  br label %originalBB1021

originalBB1044alteredBB:                          ; preds = %originalBB1044, %3985
  %6449 = load i64, i64* %29, align 8, !dbg !2837
  %_1045 = sub i64 %6449, 1
  %gen1046 = mul i64 %_1045, 1
  %_1047 = shl i64 %6449, 1
  %_1048 = sub i64 0, %6449
  %gen1049 = add i64 %_1048, 1
  %6450 = add i64 %6449, 1, !dbg !2837
  store i64 %6450, i64* %29, align 8, !dbg !2837
  br label %originalBB1044

originalBB1053alteredBB:                          ; preds = %originalBB1053, %4004
  br label %originalBB1053

originalBB1057alteredBB:                          ; preds = %originalBB1057, %4021
  %6451 = load i64, i64* %29, align 8, !dbg !2839
  %6452 = load i64, i64* %20, align 8, !dbg !2839
  %6453 = icmp ult i64 %6451, %6452, !dbg !2839
  br label %originalBB1057

originalBB1061alteredBB:                          ; preds = %originalBB1061, %4041
  %6454 = load i8, i8* %39, align 1, !dbg !2839
  %6455 = zext i8 %6454 to i32, !dbg !2839
  %_1062 = sub i32 0, %6455
  %gen1063 = add i32 %_1062, 3
  %_1064 = sub i32 %6455, 3
  %gen1065 = mul i32 %_1064, 3
  %_1066 = shl i32 %6455, 3
  %_1067 = shl i32 %6455, 3
  %_1068 = shl i32 %6455, 3
  %_1069 = sub i32 %6455, 3
  %gen1070 = mul i32 %_1069, 3
  %_1071 = sub i32 0, %6455
  %gen1072 = add i32 %_1071, 3
  %6456 = ashr i32 %6455, 3, !dbg !2839
  %_1073 = shl i32 %6456, 7
  %_1074 = sub i32 0, %6456
  %gen1075 = add i32 %_1074, 7
  %6457 = and i32 %6456, 7, !dbg !2839
  %_1076 = sub i32 0, 48
  %gen1077 = add i32 %_1076, %6457
  %_1078 = sub i32 48, %6457
  %gen1079 = mul i32 %_1078, %6457
  %_1080 = sub i32 0, 48
  %gen1081 = add i32 %_1080, %6457
  %_1082 = shl i32 48, %6457
  %6458 = add nsw i32 48, %6457, !dbg !2839
  %6459 = trunc i32 %6458 to i8, !dbg !2839
  %6460 = load i8*, i8** %19, align 8, !dbg !2839
  %6461 = load i64, i64* %29, align 8, !dbg !2839
  %6462 = getelementptr inbounds i8, i8* %6460, i64 %6461, !dbg !2839
  store i8 %6459, i8* %6462, align 1, !dbg !2839
  br label %originalBB1061

originalBB1086alteredBB:                          ; preds = %originalBB1086, %4067
  %6463 = load i64, i64* %29, align 8, !dbg !2842
  %_1087 = sub i64 %6463, 1
  %gen1088 = mul i64 %_1087, 1
  %_1089 = sub i64 %6463, 1
  %gen1090 = mul i64 %_1089, 1
  %_1091 = shl i64 %6463, 1
  %6464 = add i64 %6463, 1, !dbg !2842
  store i64 %6464, i64* %29, align 8, !dbg !2842
  br label %originalBB1086

originalBB1095alteredBB:                          ; preds = %originalBB1095, %4086
  %6465 = load i8, i8* %39, align 1, !dbg !2843
  %6466 = zext i8 %6465 to i32, !dbg !2843
  %_1096 = shl i32 %6466, 7
  %_1097 = shl i32 %6466, 7
  %_1098 = sub i32 0, %6466
  %gen1099 = add i32 %_1098, 7
  %_1100 = sub i32 0, %6466
  %gen1101 = add i32 %_1100, 7
  %_1102 = shl i32 %6466, 7
  %6467 = and i32 %6466, 7, !dbg !2844
  %_1103 = sub i32 0, 48
  %gen1104 = add i32 %_1103, %6467
  %_1105 = sub i32 0, 48
  %gen1106 = add i32 %_1105, %6467
  %_1107 = sub i32 0, 48
  %gen1108 = add i32 %_1107, %6467
  %_1109 = sub i32 0, 48
  %gen1110 = add i32 %_1109, %6467
  %_1111 = sub i32 0, 48
  %gen1112 = add i32 %_1111, %6467
  %_1113 = sub i32 0, 48
  %gen1114 = add i32 %_1113, %6467
  %_1115 = sub i32 0, 48
  %gen1116 = add i32 %_1115, %6467
  %_1117 = sub i32 0, 48
  %gen1118 = add i32 %_1117, %6467
  %_1119 = sub i32 48, %6467
  %gen1120 = mul i32 %_1119, %6467
  %6468 = add nsw i32 48, %6467, !dbg !2845
  %6469 = trunc i32 %6468 to i8, !dbg !2846
  store i8 %6469, i8* %39, align 1, !dbg !2847
  br label %originalBB1095

originalBB1124alteredBB:                          ; preds = %originalBB1124, %4108
  %6470 = load i8, i8* %41, align 1, !dbg !2849
  %6471 = trunc i8 %6470 to i1, !dbg !2849
  br label %originalBB1124

originalBB1128alteredBB:                          ; preds = %originalBB1128, %4128
  %6472 = load i64, i64* %29, align 8, !dbg !2854
  %6473 = load i64, i64* %20, align 8, !dbg !2854
  %6474 = icmp ult i64 %6472, %6473, !dbg !2854
  br label %originalBB1128

originalBB1132alteredBB:                          ; preds = %originalBB1132, %4148
  %6475 = load i8*, i8** %19, align 8, !dbg !2854
  %6476 = load i64, i64* %29, align 8, !dbg !2854
  %6477 = getelementptr inbounds i8, i8* %6475, i64 %6476, !dbg !2854
  store i8 92, i8* %6477, align 1, !dbg !2854
  br label %originalBB1132

originalBB1136alteredBB:                          ; preds = %originalBB1136, %4168
  %6478 = load i64, i64* %29, align 8, !dbg !2857
  %_1137 = sub i64 %6478, 1
  %gen1138 = mul i64 %_1137, 1
  %_1139 = shl i64 %6478, 1
  %_1140 = sub i64 %6478, 1
  %gen1141 = mul i64 %_1140, 1
  %_1142 = sub i64 %6478, 1
  %gen1143 = mul i64 %_1142, 1
  %_1144 = sub i64 %6478, 1
  %gen1145 = mul i64 %_1144, 1
  %6479 = add i64 %6478, 1, !dbg !2857
  store i64 %6479, i64* %29, align 8, !dbg !2857
  br label %originalBB1136

originalBB1149alteredBB:                          ; preds = %originalBB1149, %4187
  store i8 0, i8* %41, align 1, !dbg !2858
  br label %originalBB1149

originalBB1153alteredBB:                          ; preds = %originalBB1153, %4204
  br label %originalBB1153

originalBB1157alteredBB:                          ; preds = %originalBB1157, %4221
  %6480 = load i64, i64* %50, align 8, !dbg !2860
  %6481 = load i64, i64* %28, align 8, !dbg !2862
  %_1158 = sub i64 0, %6481
  %gen1159 = add i64 %_1158, 1
  %_1160 = sub i64 0, %6481
  %gen1161 = add i64 %_1160, 1
  %_1162 = shl i64 %6481, 1
  %_1163 = sub i64 0, %6481
  %gen1164 = add i64 %_1163, 1
  %_1165 = sub i64 %6481, 1
  %gen1166 = mul i64 %_1165, 1
  %6482 = add i64 %6481, 1, !dbg !2863
  %6483 = icmp ule i64 %6480, %6482, !dbg !2864
  br label %originalBB1157

originalBB1170alteredBB:                          ; preds = %originalBB1170, %4242
  br label %originalBB1170

originalBB1174alteredBB:                          ; preds = %originalBB1174, %4259
  br label %originalBB1174

originalBB1178alteredBB:                          ; preds = %originalBB1178, %4276
  %6484 = load i8, i8* %36, align 1, !dbg !2868
  %6485 = trunc i8 %6484 to i1, !dbg !2868
  br label %originalBB1178

originalBB1182alteredBB:                          ; preds = %originalBB1182, %4295
  %6486 = load i8, i8* %42, align 1, !dbg !2868
  %6487 = trunc i8 %6486 to i1, !dbg !2868
  br label %originalBB1182

originalBB1186alteredBB:                          ; preds = %originalBB1186, %4314
  br label %originalBB1186

originalBB1190alteredBB:                          ; preds = %originalBB1190, %4331
  %6488 = load i64, i64* %29, align 8, !dbg !2874
  %6489 = load i64, i64* %20, align 8, !dbg !2874
  %6490 = icmp ult i64 %6488, %6489, !dbg !2874
  br label %originalBB1190

originalBB1194alteredBB:                          ; preds = %originalBB1194, %4351
  %6491 = load i8*, i8** %19, align 8, !dbg !2874
  %6492 = load i64, i64* %29, align 8, !dbg !2874
  %6493 = getelementptr inbounds i8, i8* %6491, i64 %6492, !dbg !2874
  store i8 39, i8* %6493, align 1, !dbg !2874
  br label %originalBB1194

originalBB1198alteredBB:                          ; preds = %originalBB1198, %4371
  %6494 = load i64, i64* %29, align 8, !dbg !2877
  %_1199 = shl i64 %6494, 1
  %_1200 = sub i64 0, %6494
  %gen1201 = add i64 %_1200, 1
  %_1202 = shl i64 %6494, 1
  %_1203 = sub i64 0, %6494
  %gen1204 = add i64 %_1203, 1
  %_1205 = sub i64 %6494, 1
  %gen1206 = mul i64 %_1205, 1
  %_1207 = sub i64 0, %6494
  %gen1208 = add i64 %_1207, 1
  %_1209 = sub i64 %6494, 1
  %gen1210 = mul i64 %_1209, 1
  %_1211 = sub i64 0, %6494
  %gen1212 = add i64 %_1211, 1
  %_1213 = sub i64 0, %6494
  %gen1214 = add i64 %_1213, 1
  %6495 = add i64 %6494, 1, !dbg !2877
  store i64 %6495, i64* %29, align 8, !dbg !2877
  br label %originalBB1198

originalBB1218alteredBB:                          ; preds = %originalBB1218, %4391
  %6496 = load i64, i64* %29, align 8, !dbg !2878
  %6497 = load i64, i64* %20, align 8, !dbg !2878
  %6498 = icmp ult i64 %6496, %6497, !dbg !2878
  br label %originalBB1218

originalBB1222alteredBB:                          ; preds = %originalBB1222, %4411
  %6499 = load i8*, i8** %19, align 8, !dbg !2878
  %6500 = load i64, i64* %29, align 8, !dbg !2878
  %6501 = getelementptr inbounds i8, i8* %6499, i64 %6500, !dbg !2878
  store i8 39, i8* %6501, align 1, !dbg !2878
  br label %originalBB1222

originalBB1226alteredBB:                          ; preds = %originalBB1226, %4431
  %6502 = load i64, i64* %29, align 8, !dbg !2881
  %_1227 = sub i64 %6502, 1
  %gen1228 = mul i64 %_1227, 1
  %6503 = add i64 %6502, 1, !dbg !2881
  store i64 %6503, i64* %29, align 8, !dbg !2881
  br label %originalBB1226

originalBB1232alteredBB:                          ; preds = %originalBB1232, %4451
  br label %originalBB1232

originalBB1236alteredBB:                          ; preds = %originalBB1236, %4468
  br label %originalBB1236

originalBB1240alteredBB:                          ; preds = %originalBB1240, %4485
  %6504 = load i64, i64* %29, align 8, !dbg !2883
  %6505 = load i64, i64* %20, align 8, !dbg !2883
  %6506 = icmp ult i64 %6504, %6505, !dbg !2883
  br label %originalBB1240

originalBB1244alteredBB:                          ; preds = %originalBB1244, %4505
  %6507 = load i8, i8* %39, align 1, !dbg !2883
  %6508 = load i8*, i8** %19, align 8, !dbg !2883
  %6509 = load i64, i64* %29, align 8, !dbg !2883
  %6510 = getelementptr inbounds i8, i8* %6508, i64 %6509, !dbg !2883
  store i8 %6507, i8* %6510, align 1, !dbg !2883
  br label %originalBB1244

originalBB1248alteredBB:                          ; preds = %originalBB1248, %4526
  %6511 = load i64, i64* %29, align 8, !dbg !2886
  %_1249 = sub i64 0, %6511
  %gen1250 = add i64 %_1249, 1
  %_1251 = shl i64 %6511, 1
  %_1252 = shl i64 %6511, 1
  %_1253 = sub i64 0, %6511
  %gen1254 = add i64 %_1253, 1
  %_1255 = shl i64 %6511, 1
  %_1256 = sub i64 %6511, 1
  %gen1257 = mul i64 %_1256, 1
  %_1258 = sub i64 0, %6511
  %gen1259 = add i64 %_1258, 1
  %6512 = add i64 %6511, 1, !dbg !2886
  store i64 %6512, i64* %29, align 8, !dbg !2886
  br label %originalBB1248

originalBB1263alteredBB:                          ; preds = %originalBB1263, %4551
  br label %originalBB1263

originalBB1267alteredBB:                          ; preds = %originalBB1267, %4568
  br label %originalBB1267

originalBB1271alteredBB:                          ; preds = %originalBB1271, %4588
  %6513 = load i32, i32* %23, align 4, !dbg !2899
  %6514 = icmp ne i32 %6513, 2, !dbg !2900
  br label %originalBB1271

originalBB1275alteredBB:                          ; preds = %originalBB1275, %4607
  %6515 = load i8, i8* %35, align 1, !dbg !2902
  %6516 = trunc i8 %6515 to i1, !dbg !2902
  br label %originalBB1275

originalBB1279alteredBB:                          ; preds = %originalBB1279, %4626
  %6517 = load i32*, i32** %25, align 8, !dbg !2904
  %6518 = icmp ne i32* %6517, null, !dbg !2904
  br label %originalBB1279

originalBB1283alteredBB:                          ; preds = %originalBB1283, %4659
  %6519 = load i8, i8* %41, align 1, !dbg !2914
  %6520 = trunc i8 %6519 to i1, !dbg !2914
  br label %originalBB1283

originalBB1287alteredBB:                          ; preds = %originalBB1287, %4678
  br label %originalBB1287

originalBB1291alteredBB:                          ; preds = %originalBB1291, %4695
  br label %originalBB1291

originalBB1295alteredBB:                          ; preds = %originalBB1295, %4712
  br label %originalBB1295

originalBB1299alteredBB:                          ; preds = %originalBB1299, %4729
  %6521 = load i8, i8* %35, align 1, !dbg !2920
  %6522 = trunc i8 %6521 to i1, !dbg !2920
  br label %originalBB1299

originalBB1303alteredBB:                          ; preds = %originalBB1303, %4748
  br label %originalBB1303

originalBB1307alteredBB:                          ; preds = %originalBB1307, %4765
  store i8 1, i8* %42, align 1, !dbg !2923
  %6523 = load i32, i32* %23, align 4, !dbg !2924
  %6524 = icmp eq i32 %6523, 2, !dbg !2924
  br label %originalBB1307

originalBB1311alteredBB:                          ; preds = %originalBB1311, %4787
  br label %originalBB1311

originalBB1315alteredBB:                          ; preds = %originalBB1315, %4808
  %6525 = load i8*, i8** %19, align 8, !dbg !2928
  %6526 = load i64, i64* %29, align 8, !dbg !2928
  %6527 = getelementptr inbounds i8, i8* %6525, i64 %6526, !dbg !2928
  store i8 39, i8* %6527, align 1, !dbg !2928
  br label %originalBB1315

originalBB1319alteredBB:                          ; preds = %originalBB1319, %4828
  %6528 = load i64, i64* %29, align 8, !dbg !2931
  %_1320 = shl i64 %6528, 1
  %_1321 = sub i64 %6528, 1
  %gen1322 = mul i64 %_1321, 1
  %_1323 = sub i64 0, %6528
  %gen1324 = add i64 %_1323, 1
  %_1325 = sub i64 0, %6528
  %gen1326 = add i64 %_1325, 1
  %_1327 = sub i64 %6528, 1
  %gen1328 = mul i64 %_1327, 1
  %_1329 = sub i64 %6528, 1
  %gen1330 = mul i64 %_1329, 1
  %_1331 = sub i64 0, %6528
  %gen1332 = add i64 %_1331, 1
  %6529 = add i64 %6528, 1, !dbg !2931
  store i64 %6529, i64* %29, align 8, !dbg !2931
  br label %originalBB1319

originalBB1336alteredBB:                          ; preds = %originalBB1336, %4847
  br label %originalBB1336

originalBB1340alteredBB:                          ; preds = %originalBB1340, %4864
  %6530 = load i64, i64* %29, align 8, !dbg !2932
  %6531 = load i64, i64* %20, align 8, !dbg !2932
  %6532 = icmp ult i64 %6530, %6531, !dbg !2932
  br label %originalBB1340

originalBB1344alteredBB:                          ; preds = %originalBB1344, %4884
  %6533 = load i8*, i8** %19, align 8, !dbg !2932
  %6534 = load i64, i64* %29, align 8, !dbg !2932
  %6535 = getelementptr inbounds i8, i8* %6533, i64 %6534, !dbg !2932
  store i8 36, i8* %6535, align 1, !dbg !2932
  br label %originalBB1344

originalBB1348alteredBB:                          ; preds = %originalBB1348, %4904
  %6536 = load i64, i64* %29, align 8, !dbg !2935
  %_1349 = shl i64 %6536, 1
  %_1350 = shl i64 %6536, 1
  %_1351 = sub i64 0, %6536
  %gen1352 = add i64 %_1351, 1
  %6537 = add i64 %6536, 1, !dbg !2935
  store i64 %6537, i64* %29, align 8, !dbg !2935
  br label %originalBB1348

originalBB1356alteredBB:                          ; preds = %originalBB1356, %4923
  br label %originalBB1356

originalBB1360alteredBB:                          ; preds = %originalBB1360, %4940
  %6538 = load i64, i64* %29, align 8, !dbg !2936
  %6539 = load i64, i64* %20, align 8, !dbg !2936
  %6540 = icmp ult i64 %6538, %6539, !dbg !2936
  br label %originalBB1360

originalBB1364alteredBB:                          ; preds = %originalBB1364, %4960
  %6541 = load i8*, i8** %19, align 8, !dbg !2936
  %6542 = load i64, i64* %29, align 8, !dbg !2936
  %6543 = getelementptr inbounds i8, i8* %6541, i64 %6542, !dbg !2936
  store i8 39, i8* %6543, align 1, !dbg !2936
  br label %originalBB1364

originalBB1368alteredBB:                          ; preds = %originalBB1368, %4980
  %6544 = load i64, i64* %29, align 8, !dbg !2939
  %_1369 = sub i64 0, %6544
  %gen1370 = add i64 %_1369, 1
  %6545 = add i64 %6544, 1, !dbg !2939
  store i64 %6545, i64* %29, align 8, !dbg !2939
  br label %originalBB1368

originalBB1374alteredBB:                          ; preds = %originalBB1374, %4999
  store i8 1, i8* %36, align 1, !dbg !2926
  br label %originalBB1374

originalBB1378alteredBB:                          ; preds = %originalBB1378, %5016
  br label %originalBB1378

originalBB1382alteredBB:                          ; preds = %originalBB1382, %5033
  %6546 = load i64, i64* %29, align 8, !dbg !2940
  %6547 = load i64, i64* %20, align 8, !dbg !2940
  %6548 = icmp ult i64 %6546, %6547, !dbg !2940
  br label %originalBB1382

originalBB1386alteredBB:                          ; preds = %originalBB1386, %5053
  %6549 = load i8*, i8** %19, align 8, !dbg !2940
  %6550 = load i64, i64* %29, align 8, !dbg !2940
  %6551 = getelementptr inbounds i8, i8* %6549, i64 %6550, !dbg !2940
  store i8 92, i8* %6551, align 1, !dbg !2940
  br label %originalBB1386

originalBB1390alteredBB:                          ; preds = %originalBB1390, %5073
  %6552 = load i64, i64* %29, align 8, !dbg !2943
  %_1391 = sub i64 %6552, 1
  %gen1392 = mul i64 %_1391, 1
  %_1393 = sub i64 0, %6552
  %gen1394 = add i64 %_1393, 1
  %6553 = add i64 %6552, 1, !dbg !2943
  store i64 %6553, i64* %29, align 8, !dbg !2943
  br label %originalBB1390

originalBB1398alteredBB:                          ; preds = %originalBB1398, %5092
  br label %originalBB1398

originalBB1402alteredBB:                          ; preds = %originalBB1402, %5109
  br label %originalBB1402

originalBB1406alteredBB:                          ; preds = %originalBB1406, %5126
  br label %originalBB1406

originalBB1410alteredBB:                          ; preds = %originalBB1410, %5146
  %6554 = load i8, i8* %42, align 1, !dbg !2947
  %6555 = trunc i8 %6554 to i1, !dbg !2947
  br label %originalBB1410

originalBB1414alteredBB:                          ; preds = %originalBB1414, %5165
  br label %originalBB1414

originalBB1418alteredBB:                          ; preds = %originalBB1418, %5182
  %6556 = load i64, i64* %29, align 8, !dbg !2953
  %6557 = load i64, i64* %20, align 8, !dbg !2953
  %6558 = icmp ult i64 %6556, %6557, !dbg !2953
  br label %originalBB1418

originalBB1422alteredBB:                          ; preds = %originalBB1422, %5202
  %6559 = load i8*, i8** %19, align 8, !dbg !2953
  %6560 = load i64, i64* %29, align 8, !dbg !2953
  %6561 = getelementptr inbounds i8, i8* %6559, i64 %6560, !dbg !2953
  store i8 39, i8* %6561, align 1, !dbg !2953
  br label %originalBB1422

originalBB1426alteredBB:                          ; preds = %originalBB1426, %5222
  %6562 = load i64, i64* %29, align 8, !dbg !2956
  %_1427 = sub i64 %6562, 1
  %gen1428 = mul i64 %_1427, 1
  %_1429 = sub i64 %6562, 1
  %gen1430 = mul i64 %_1429, 1
  %_1431 = sub i64 0, %6562
  %gen1432 = add i64 %_1431, 1
  %_1433 = shl i64 %6562, 1
  %_1434 = sub i64 0, %6562
  %gen1435 = add i64 %_1434, 1
  %_1436 = shl i64 %6562, 1
  %6563 = add i64 %6562, 1, !dbg !2956
  store i64 %6563, i64* %29, align 8, !dbg !2956
  br label %originalBB1426

originalBB1440alteredBB:                          ; preds = %originalBB1440, %5241
  br label %originalBB1440

originalBB1444alteredBB:                          ; preds = %originalBB1444, %5258
  %6564 = load i64, i64* %29, align 8, !dbg !2957
  %6565 = load i64, i64* %20, align 8, !dbg !2957
  %6566 = icmp ult i64 %6564, %6565, !dbg !2957
  br label %originalBB1444

originalBB1448alteredBB:                          ; preds = %originalBB1448, %5278
  %6567 = load i8*, i8** %19, align 8, !dbg !2957
  %6568 = load i64, i64* %29, align 8, !dbg !2957
  %6569 = getelementptr inbounds i8, i8* %6567, i64 %6568, !dbg !2957
  store i8 39, i8* %6569, align 1, !dbg !2957
  br label %originalBB1448

originalBB1452alteredBB:                          ; preds = %originalBB1452, %5298
  %6570 = load i64, i64* %29, align 8, !dbg !2960
  %_1453 = shl i64 %6570, 1
  %_1454 = sub i64 0, %6570
  %gen1455 = add i64 %_1454, 1
  %6571 = add i64 %6570, 1, !dbg !2960
  store i64 %6571, i64* %29, align 8, !dbg !2960
  br label %originalBB1452

originalBB1459alteredBB:                          ; preds = %originalBB1459, %5317
  store i8 0, i8* %36, align 1, !dbg !2951
  br label %originalBB1459

originalBB1463alteredBB:                          ; preds = %originalBB1463, %5334
  br label %originalBB1463

originalBB1467alteredBB:                          ; preds = %originalBB1467, %5351
  br label %originalBB1467

originalBB1471alteredBB:                          ; preds = %originalBB1471, %5368
  %6572 = load i64, i64* %29, align 8, !dbg !2962
  %6573 = load i64, i64* %20, align 8, !dbg !2962
  %6574 = icmp ult i64 %6572, %6573, !dbg !2962
  br label %originalBB1471

originalBB1475alteredBB:                          ; preds = %originalBB1475, %5388
  %6575 = load i8, i8* %39, align 1, !dbg !2962
  %6576 = load i8*, i8** %19, align 8, !dbg !2962
  %6577 = load i64, i64* %29, align 8, !dbg !2962
  %6578 = getelementptr inbounds i8, i8* %6576, i64 %6577, !dbg !2962
  store i8 %6575, i8* %6578, align 1, !dbg !2962
  br label %originalBB1475

originalBB1479alteredBB:                          ; preds = %originalBB1479, %5409
  %6579 = load i64, i64* %29, align 8, !dbg !2965
  %_1480 = shl i64 %6579, 1
  %_1481 = sub i64 0, %6579
  %gen1482 = add i64 %_1481, 1
  %_1483 = shl i64 %6579, 1
  %_1484 = sub i64 0, %6579
  %gen1485 = add i64 %_1484, 1
  %_1486 = sub i64 0, %6579
  %gen1487 = add i64 %_1486, 1
  %6580 = add i64 %6579, 1, !dbg !2965
  store i64 %6580, i64* %29, align 8, !dbg !2965
  br label %originalBB1479

originalBB1491alteredBB:                          ; preds = %originalBB1491, %5428
  %6581 = load i8, i8* %43, align 1, !dbg !2966
  %6582 = trunc i8 %6581 to i1, !dbg !2966
  br label %originalBB1491

originalBB1495alteredBB:                          ; preds = %originalBB1495, %5447
  store i8 0, i8* %38, align 1, !dbg !2969
  br label %originalBB1495

originalBB1499alteredBB:                          ; preds = %originalBB1499, %5464
  br label %originalBB1499

originalBB1503alteredBB:                          ; preds = %originalBB1503, %5481
  %6583 = load i64, i64* %28, align 8, !dbg !2972
  %_1504 = sub i64 0, %6583
  %gen1505 = add i64 %_1504, 1
  %_1506 = shl i64 %6583, 1
  %6584 = add i64 %6583, 1, !dbg !2972
  store i64 %6584, i64* %28, align 8, !dbg !2972
  br label %originalBB1503

originalBB1510alteredBB:                          ; preds = %originalBB1510, %5503
  %6585 = load i32, i32* %23, align 4, !dbg !2980
  %6586 = icmp eq i32 %6585, 2, !dbg !2981
  br label %originalBB1510

originalBB1514alteredBB:                          ; preds = %originalBB1514, %5522
  %6587 = load i8, i8* %35, align 1, !dbg !2983
  %6588 = trunc i8 %6587 to i1, !dbg !2983
  br label %originalBB1514

originalBB1518alteredBB:                          ; preds = %originalBB1518, %5541
  br label %originalBB1518

originalBB1522alteredBB:                          ; preds = %originalBB1522, %5558
  %6589 = load i32, i32* %23, align 4, !dbg !2986
  %6590 = icmp eq i32 %6589, 2, !dbg !2988
  br label %originalBB1522

originalBB1526alteredBB:                          ; preds = %originalBB1526, %5577
  %6591 = load i8, i8* %35, align 1, !dbg !2990
  %6592 = trunc i8 %6591 to i1, !dbg !2990
  br label %originalBB1526

originalBB1530alteredBB:                          ; preds = %originalBB1530, %5596
  %6593 = load i8, i8* %37, align 1, !dbg !2992
  %6594 = trunc i8 %6593 to i1, !dbg !2992
  br label %originalBB1530

originalBB1534alteredBB:                          ; preds = %originalBB1534, %5615
  %6595 = load i8, i8* %38, align 1, !dbg !2994
  %6596 = trunc i8 %6595 to i1, !dbg !2994
  br label %originalBB1534

originalBB1538alteredBB:                          ; preds = %originalBB1538, %5634
  %6597 = load i8*, i8** %19, align 8, !dbg !2998
  %6598 = load i64, i64* %30, align 8, !dbg !2999
  %6599 = load i8*, i8** %21, align 8, !dbg !3000
  %6600 = load i64, i64* %22, align 8, !dbg !3001
  %6601 = load i32, i32* %24, align 4, !dbg !3002
  %6602 = load i32*, i32** %25, align 8, !dbg !3003
  %6603 = load i8*, i8** %26, align 8, !dbg !3004
  %6604 = load i8*, i8** %27, align 8, !dbg !3005
  %6605 = call i64 @quotearg_buffer_restyled(i8* %6597, i64 %6598, i8* %6599, i64 %6600, i32 5, i32 %6601, i32* %6602, i8* %6603, i8* %6604), !dbg !3006
  store i64 %6605, i64* %18, align 8, !dbg !3007
  br label %originalBB1538

originalBB1542alteredBB:                          ; preds = %originalBB1542, %5660
  %6606 = load i64, i64* %20, align 8, !dbg !3008
  %6607 = icmp ne i64 %6606, 0, !dbg !3008
  br label %originalBB1542

originalBB1546alteredBB:                          ; preds = %originalBB1546, %5682
  %6608 = load i64, i64* %30, align 8, !dbg !3013
  store i64 %6608, i64* %20, align 8, !dbg !3015
  store i64 0, i64* %29, align 8, !dbg !3016
  br label %originalBB1546

originalBB1550alteredBB:                          ; preds = %originalBB1550, %5700
  br label %originalBB1550

originalBB1554alteredBB:                          ; preds = %originalBB1554, %5717
  br label %originalBB1554

originalBB1558alteredBB:                          ; preds = %originalBB1558, %5734
  %6609 = load i8*, i8** %31, align 8, !dbg !3019
  %6610 = icmp ne i8* %6609, null, !dbg !3019
  br label %originalBB1558

originalBB1562alteredBB:                          ; preds = %originalBB1562, %5753
  %6611 = load i8, i8* %35, align 1, !dbg !3022
  %6612 = trunc i8 %6611 to i1, !dbg !3022
  br label %originalBB1562

originalBB1566alteredBB:                          ; preds = %originalBB1566, %5772
  br label %originalBB1566

originalBB1570alteredBB:                          ; preds = %originalBB1570, %5789
  %6613 = load i8*, i8** %31, align 8, !dbg !3025
  %6614 = load i8, i8* %6613, align 1, !dbg !3028
  %6615 = icmp ne i8 %6614, 0, !dbg !3029
  br label %originalBB1570

originalBB1574alteredBB:                          ; preds = %originalBB1574, %5809
  br label %originalBB1574

originalBB1578alteredBB:                          ; preds = %originalBB1578, %5826
  %6616 = load i64, i64* %29, align 8, !dbg !3031
  %6617 = load i64, i64* %20, align 8, !dbg !3031
  %6618 = icmp ult i64 %6616, %6617, !dbg !3031
  br label %originalBB1578

originalBB1582alteredBB:                          ; preds = %originalBB1582, %5846
  %6619 = load i8*, i8** %31, align 8, !dbg !3031
  %6620 = load i8, i8* %6619, align 1, !dbg !3031
  %6621 = load i8*, i8** %19, align 8, !dbg !3031
  %6622 = load i64, i64* %29, align 8, !dbg !3031
  %6623 = getelementptr inbounds i8, i8* %6621, i64 %6622, !dbg !3031
  store i8 %6620, i8* %6623, align 1, !dbg !3031
  br label %originalBB1582

originalBB1586alteredBB:                          ; preds = %originalBB1586, %5868
  %6624 = load i64, i64* %29, align 8, !dbg !3034
  %_1587 = sub i64 0, %6624
  %gen1588 = add i64 %_1587, 1
  %_1589 = sub i64 %6624, 1
  %gen1590 = mul i64 %_1589, 1
  %_1591 = sub i64 %6624, 1
  %gen1592 = mul i64 %_1591, 1
  %_1593 = sub i64 %6624, 1
  %gen1594 = mul i64 %_1593, 1
  %_1595 = shl i64 %6624, 1
  %_1596 = shl i64 %6624, 1
  %_1597 = sub i64 0, %6624
  %gen1598 = add i64 %_1597, 1
  %_1599 = sub i64 %6624, 1
  %gen1600 = mul i64 %_1599, 1
  %6625 = add i64 %6624, 1, !dbg !3034
  store i64 %6625, i64* %29, align 8, !dbg !3034
  br label %originalBB1586

originalBB1604alteredBB:                          ; preds = %originalBB1604, %5887
  br label %originalBB1604

originalBB1608alteredBB:                          ; preds = %originalBB1608, %5904
  %6626 = load i8*, i8** %31, align 8, !dbg !3035
  %6627 = getelementptr inbounds i8, i8* %6626, i32 1, !dbg !3035
  store i8* %6627, i8** %31, align 8, !dbg !3035
  br label %originalBB1608

originalBB1612alteredBB:                          ; preds = %originalBB1612, %5923
  br label %originalBB1612

originalBB1616alteredBB:                          ; preds = %originalBB1616, %5940
  %6628 = load i64, i64* %29, align 8, !dbg !3039
  %6629 = load i64, i64* %20, align 8, !dbg !3041
  %6630 = icmp ult i64 %6628, %6629, !dbg !3042
  br label %originalBB1616

originalBB1620alteredBB:                          ; preds = %originalBB1620, %5964
  %6631 = load i64, i64* %29, align 8, !dbg !3047
  store i64 %6631, i64* %18, align 8, !dbg !3048
  br label %originalBB1620

originalBB1624alteredBB:                          ; preds = %originalBB1624, %5982
  %6632 = load i32, i32* %23, align 4, !dbg !3051
  %6633 = icmp eq i32 %6632, 2, !dbg !3053
  br label %originalBB1624

originalBB1628alteredBB:                          ; preds = %originalBB1628, %6004
  store i32 4, i32* %23, align 4, !dbg !3057
  br label %originalBB1628

originalBB1632alteredBB:                          ; preds = %originalBB1632, %6021
  %6634 = load i8*, i8** %19, align 8, !dbg !3059
  %6635 = load i64, i64* %20, align 8, !dbg !3060
  %6636 = load i8*, i8** %21, align 8, !dbg !3061
  %6637 = load i64, i64* %22, align 8, !dbg !3062
  %6638 = load i32, i32* %23, align 4, !dbg !3063
  %6639 = load i32, i32* %24, align 4, !dbg !3064
  %_1633 = sub i32 0, %6639
  %gen1634 = add i32 %_1633, -3
  %_1635 = shl i32 %6639, -3
  %6640 = and i32 %6639, -3, !dbg !3065
  %6641 = load i8*, i8** %26, align 8, !dbg !3066
  %6642 = load i8*, i8** %27, align 8, !dbg !3067
  %6643 = call i64 @quotearg_buffer_restyled(i8* %6634, i64 %6635, i8* %6636, i64 %6637, i32 %6638, i32 %6640, i32* null, i8* %6641, i8* %6642), !dbg !3068
  store i64 %6643, i64* %18, align 8, !dbg !3069
  br label %originalBB1632

originalBB1639alteredBB:                          ; preds = %originalBB1639, %6048
  %6644 = load i64, i64* %18, align 8, !dbg !3070
  br label %originalBB1639
}

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gettext_quote(i8*, i32) #4 !dbg !3158 {
  %3 = load i32, i32* @x.39
  %4 = load i32, i32* @y.40
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3161, metadata !DIExpression()), !dbg !3162
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !3163, metadata !DIExpression()), !dbg !3164
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3165, metadata !DIExpression()), !dbg !3166
  %16 = load i8*, i8** %12, align 8, !dbg !3167
  %17 = call i8* @gettext(i8* %16) #10, !dbg !3167
  store i8* %17, i8** %14, align 8, !dbg !3166
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3168, metadata !DIExpression()), !dbg !3169
  %18 = load i8*, i8** %14, align 8, !dbg !3170
  %19 = load i8*, i8** %12, align 8, !dbg !3172
  %20 = icmp ne i8* %18, %19, !dbg !3173
  %21 = load i32, i32* @x.39
  %22 = load i32, i32* @y.40
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %20, label %29, label %47, !dbg !3174

29:                                               ; preds = %originalBBpart2
  %30 = load i32, i32* @x.39
  %31 = load i32, i32* @y.40
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i8*, i8** %14, align 8, !dbg !3175
  store i8* %38, i8** %11, align 8, !dbg !3176
  %39 = load i32, i32* @x.39
  %40 = load i32, i32* @y.40
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %474, !dbg !3176

47:                                               ; preds = %originalBBpart2
  %48 = load i32, i32* @x.39
  %49 = load i32, i32* @y.40
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = call i8* @locale_charset(), !dbg !3177
  store i8* %56, i8** %15, align 8, !dbg !3178
  %57 = load i8*, i8** %15, align 8, !dbg !3179
  %58 = call i32 @c_strcasecmp(i8* %57, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.88, i64 0, i64 0)) #13, !dbg !3179
  %59 = load i32, i32* @x.39
  %60 = load i32, i32* @y.40
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %67, !dbg !3179

67:                                               ; preds = %originalBBpart28
  %68 = load i32, i32* @x.39
  %69 = load i32, i32* @y.40
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %67, %originalBB10alteredBB
  %collatzVar1 = alloca i32
  %76 = load i32, i32* @x.39
  %77 = load i32, i32* @y.40
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %84

84:                                               ; preds = %originalBBpart212
  %85 = load i32, i32* @x.39
  %86 = load i32, i32* @y.40
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %84, %originalBB14alteredBB
  %93 = load i32, i32* @inVal0
  %94 = icmp sgt i32 %93, 1
  %95 = load i32, i32* @x.39
  %96 = load i32, i32* @y.40
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %94, label %120, label %103

103:                                              ; preds = %originalBBpart216
  %104 = load i32, i32* @x.39
  %105 = load i32, i32* @y.40
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %103, %originalBB18alteredBB
  store i32 48, i32* %collatzVar1
  %112 = load i32, i32* @x.39
  %113 = load i32, i32* @y.40
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %120

120:                                              ; preds = %originalBBpart220, %originalBBpart216
  %121 = load i8**, i8*** @inVal1
  %122 = getelementptr inbounds i8*, i8** %121, i64 1
  %123 = load i8*, i8** %122
  %controle2 = call i32 @controle(i8* %123, i32 0)
  store i32 %controle2, i32* %collatzVar1
  br label %124

124:                                              ; preds = %originalBBpart288, %originalBBpart277, %120
  %125 = load i32, i32* @x.39
  %126 = load i32, i32* @y.40
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %124, %originalBB22alteredBB
  %133 = load i32, i32* %collatzVar1
  %134 = icmp sgt i32 %133, 1
  %135 = load i32, i32* @x.39
  %136 = load i32, i32* @y.40
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %134, label %143, label %250

143:                                              ; preds = %originalBBpart224
  %144 = load i32, i32* @x.39
  %145 = load i32, i32* @y.40
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %143, %originalBB26alteredBB
  %152 = load i32, i32* %collatzVar1
  %153 = srem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = load i32, i32* @x.39
  %156 = load i32, i32* @y.40
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart240, label %originalBB26alteredBB

originalBBpart240:                                ; preds = %originalBB26
  br i1 %154, label %163, label %182

163:                                              ; preds = %originalBBpart240
  %164 = load i32, i32* @x.39
  %165 = load i32, i32* @y.40
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %163, %originalBB42alteredBB
  %172 = load i32, i32* %collatzVar1
  %173 = sdiv i32 %172, 2
  store i32 %173, i32* %collatzVar1
  %174 = load i32, i32* @x.39
  %175 = load i32, i32* @y.40
  %176 = sub i32 %174, 1
  %177 = mul i32 %174, %176
  %178 = urem i32 %177, 2
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %179, %180
  br i1 %181, label %originalBBpart248, label %originalBB42alteredBB

originalBBpart248:                                ; preds = %originalBB42
  br label %202

182:                                              ; preds = %originalBBpart240
  %183 = load i32, i32* @x.39
  %184 = load i32, i32* @y.40
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %182, %originalBB50alteredBB
  %191 = load i32, i32* %collatzVar1
  %192 = mul i32 %191, 3
  %193 = add i32 %192, 1
  store i32 %193, i32* %collatzVar1
  %194 = load i32, i32* @x.39
  %195 = load i32, i32* @y.40
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBBpart269, label %originalBB50alteredBB

originalBBpart269:                                ; preds = %originalBB50
  br label %202

202:                                              ; preds = %originalBBpart269, %originalBBpart248
  %203 = load i32, i32* @x.39
  %204 = load i32, i32* @y.40
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %202, %originalBB71alteredBB
  %211 = load i32, i32* %collatzVar1
  %212 = sub i32 %58, %211
  %213 = icmp sgt i32 %212, -2
  %214 = load i32, i32* @x.39
  %215 = load i32, i32* @y.40
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBBpart277, label %originalBB71alteredBB

originalBBpart277:                                ; preds = %originalBB71
  br i1 %213, label %222, label %124

222:                                              ; preds = %originalBBpart277
  %223 = load i32, i32* @x.39
  %224 = load i32, i32* @y.40
  %225 = sub i32 %223, 1
  %226 = mul i32 %223, %225
  %227 = urem i32 %226, 2
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %228, %229
  br i1 %230, label %originalBB79, label %originalBB79alteredBB

originalBB79:                                     ; preds = %222, %originalBB79alteredBB
  %231 = load i32, i32* %collatzVar1
  %232 = add i32 %58, %231
  %233 = icmp slt i32 %232, 2
  %234 = load i32, i32* @x.39
  %235 = load i32, i32* @y.40
  %236 = sub i32 %234, 1
  %237 = mul i32 %234, %236
  %238 = urem i32 %237, 2
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %239, %240
  br i1 %241, label %originalBBpart288, label %originalBB79alteredBB

originalBBpart288:                                ; preds = %originalBB79
  br i1 %233, label %242, label %124

242:                                              ; preds = %originalBBpart288
  %243 = load i8*, i8** %12, align 8, !dbg !3181
  %244 = getelementptr inbounds i8, i8* %243, i64 0, !dbg !3181
  %245 = load i8, i8* %244, align 1, !dbg !3181
  %246 = sext i8 %245 to i32, !dbg !3181
  %247 = icmp eq i32 %246, 96, !dbg !3182
  %248 = zext i1 %247 to i64, !dbg !3181
  %249 = select i1 %247, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.89, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.90, i64 0, i64 0), !dbg !3181
  store i8* %249, i8** %11, align 8, !dbg !3183
  br label %474, !dbg !3183

250:                                              ; preds = %originalBBpart224
  %251 = load i32, i32* @x.39
  %252 = load i32, i32* @y.40
  %253 = sub i32 %251, 1
  %254 = mul i32 %251, %253
  %255 = urem i32 %254, 2
  %256 = icmp eq i32 %255, 0
  %257 = icmp slt i32 %252, 10
  %258 = or i1 %256, %257
  br i1 %258, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %250, %originalBB90alteredBB
  %259 = load i8*, i8** %15, align 8, !dbg !3184
  %260 = call i32 @c_strcasecmp(i8* %259, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.91, i64 0, i64 0)) #13, !dbg !3184
  %261 = load i32, i32* @x.39
  %262 = load i32, i32* @y.40
  %263 = sub i32 %261, 1
  %264 = mul i32 %261, %263
  %265 = urem i32 %264, 2
  %266 = icmp eq i32 %265, 0
  %267 = icmp slt i32 %262, 10
  %268 = or i1 %266, %267
  br i1 %268, label %originalBBpart292, label %originalBB90alteredBB

originalBBpart292:                                ; preds = %originalBB90
  br label %269, !dbg !3184

269:                                              ; preds = %originalBBpart292
  %270 = load i32, i32* @x.39
  %271 = load i32, i32* @y.40
  %272 = sub i32 %270, 1
  %273 = mul i32 %270, %272
  %274 = urem i32 %273, 2
  %275 = icmp eq i32 %274, 0
  %276 = icmp slt i32 %271, 10
  %277 = or i1 %275, %276
  br i1 %277, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %269, %originalBB94alteredBB
  %collatzVar = alloca i32
  %278 = load i32, i32* @x.39
  %279 = load i32, i32* @y.40
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBBpart296, label %originalBB94alteredBB

originalBBpart296:                                ; preds = %originalBB94
  br label %286

286:                                              ; preds = %originalBBpart296
  %287 = load i32, i32* @inVal0
  %288 = icmp sgt i32 %287, 1
  br i1 %288, label %306, label %289

289:                                              ; preds = %286
  %290 = load i32, i32* @x.39
  %291 = load i32, i32* @y.40
  %292 = sub i32 %290, 1
  %293 = mul i32 %290, %292
  %294 = urem i32 %293, 2
  %295 = icmp eq i32 %294, 0
  %296 = icmp slt i32 %291, 10
  %297 = or i1 %295, %296
  br i1 %297, label %originalBB98, label %originalBB98alteredBB

originalBB98:                                     ; preds = %289, %originalBB98alteredBB
  store i32 46, i32* %collatzVar
  %298 = load i32, i32* @x.39
  %299 = load i32, i32* @y.40
  %300 = sub i32 %298, 1
  %301 = mul i32 %298, %300
  %302 = urem i32 %301, 2
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %303, %304
  br i1 %305, label %originalBBpart2100, label %originalBB98alteredBB

originalBBpart2100:                               ; preds = %originalBB98
  br label %306

306:                                              ; preds = %originalBBpart2100, %286
  %307 = load i8**, i8*** @inVal1
  %308 = getelementptr inbounds i8*, i8** %307, i64 1
  %309 = load i8*, i8** %308
  %310 = add i32 0, -1
  %controle = call i32 @controle(i8* %309, i32 %310)
  store i32 %controle, i32* %collatzVar
  br label %311

311:                                              ; preds = %originalBBpart2163, %originalBBpart2155, %306
  %312 = load i32, i32* @x.39
  %313 = load i32, i32* @y.40
  %314 = sub i32 %312, 1
  %315 = mul i32 %312, %314
  %316 = urem i32 %315, 2
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %317, %318
  br i1 %319, label %originalBB102, label %originalBB102alteredBB

originalBB102:                                    ; preds = %311, %originalBB102alteredBB
  %320 = load i32, i32* %collatzVar
  %321 = icmp sgt i32 %320, 1
  %322 = load i32, i32* @x.39
  %323 = load i32, i32* @y.40
  %324 = sub i32 %322, 1
  %325 = mul i32 %322, %324
  %326 = urem i32 %325, 2
  %327 = icmp eq i32 %326, 0
  %328 = icmp slt i32 %323, 10
  %329 = or i1 %327, %328
  br i1 %329, label %originalBBpart2104, label %originalBB102alteredBB

originalBBpart2104:                               ; preds = %originalBB102
  br i1 %321, label %330, label %453

330:                                              ; preds = %originalBBpart2104
  %331 = load i32, i32* @x.39
  %332 = load i32, i32* @y.40
  %333 = sub i32 %331, 1
  %334 = mul i32 %331, %333
  %335 = urem i32 %334, 2
  %336 = icmp eq i32 %335, 0
  %337 = icmp slt i32 %332, 10
  %338 = or i1 %336, %337
  br i1 %338, label %originalBB106, label %originalBB106alteredBB

originalBB106:                                    ; preds = %330, %originalBB106alteredBB
  %339 = load i32, i32* %collatzVar
  %340 = srem i32 %339, 2
  %341 = icmp eq i32 %340, 0
  %342 = load i32, i32* @x.39
  %343 = load i32, i32* @y.40
  %344 = sub i32 %342, 1
  %345 = mul i32 %342, %344
  %346 = urem i32 %345, 2
  %347 = icmp eq i32 %346, 0
  %348 = icmp slt i32 %343, 10
  %349 = or i1 %347, %348
  br i1 %349, label %originalBBpart2119, label %originalBB106alteredBB

originalBBpart2119:                               ; preds = %originalBB106
  br i1 %341, label %350, label %369

350:                                              ; preds = %originalBBpart2119
  %351 = load i32, i32* @x.39
  %352 = load i32, i32* @y.40
  %353 = sub i32 %351, 1
  %354 = mul i32 %351, %353
  %355 = urem i32 %354, 2
  %356 = icmp eq i32 %355, 0
  %357 = icmp slt i32 %352, 10
  %358 = or i1 %356, %357
  br i1 %358, label %originalBB121, label %originalBB121alteredBB

originalBB121:                                    ; preds = %350, %originalBB121alteredBB
  %359 = load i32, i32* %collatzVar
  %360 = sdiv i32 %359, 2
  store i32 %360, i32* %collatzVar
  %361 = load i32, i32* @x.39
  %362 = load i32, i32* @y.40
  %363 = sub i32 %361, 1
  %364 = mul i32 %361, %363
  %365 = urem i32 %364, 2
  %366 = icmp eq i32 %365, 0
  %367 = icmp slt i32 %362, 10
  %368 = or i1 %366, %367
  br i1 %368, label %originalBBpart2125, label %originalBB121alteredBB

originalBBpart2125:                               ; preds = %originalBB121
  br label %389

369:                                              ; preds = %originalBBpart2119
  %370 = load i32, i32* @x.39
  %371 = load i32, i32* @y.40
  %372 = sub i32 %370, 1
  %373 = mul i32 %370, %372
  %374 = urem i32 %373, 2
  %375 = icmp eq i32 %374, 0
  %376 = icmp slt i32 %371, 10
  %377 = or i1 %375, %376
  br i1 %377, label %originalBB127, label %originalBB127alteredBB

originalBB127:                                    ; preds = %369, %originalBB127alteredBB
  %378 = load i32, i32* %collatzVar
  %379 = mul i32 %378, 3
  %380 = add i32 %379, 1
  store i32 %380, i32* %collatzVar
  %381 = load i32, i32* @x.39
  %382 = load i32, i32* @y.40
  %383 = sub i32 %381, 1
  %384 = mul i32 %381, %383
  %385 = urem i32 %384, 2
  %386 = icmp eq i32 %385, 0
  %387 = icmp slt i32 %382, 10
  %388 = or i1 %386, %387
  br i1 %388, label %originalBBpart2141, label %originalBB127alteredBB

originalBBpart2141:                               ; preds = %originalBB127
  br label %389

389:                                              ; preds = %originalBBpart2141, %originalBBpart2125
  %390 = load i32, i32* @x.39
  %391 = load i32, i32* @y.40
  %392 = sub i32 %390, 1
  %393 = mul i32 %390, %392
  %394 = urem i32 %393, 2
  %395 = icmp eq i32 %394, 0
  %396 = icmp slt i32 %391, 10
  %397 = or i1 %395, %396
  br i1 %397, label %originalBB143, label %originalBB143alteredBB

originalBB143:                                    ; preds = %389, %originalBB143alteredBB
  %398 = load i32, i32* %collatzVar
  %399 = sub i32 %260, %398
  %400 = icmp sgt i32 %399, -2
  %401 = load i32, i32* @x.39
  %402 = load i32, i32* @y.40
  %403 = sub i32 %401, 1
  %404 = mul i32 %401, %403
  %405 = urem i32 %404, 2
  %406 = icmp eq i32 %405, 0
  %407 = icmp slt i32 %402, 10
  %408 = or i1 %406, %407
  br i1 %408, label %originalBBpart2155, label %originalBB143alteredBB

originalBBpart2155:                               ; preds = %originalBB143
  br i1 %400, label %409, label %311

409:                                              ; preds = %originalBBpart2155
  %410 = load i32, i32* @x.39
  %411 = load i32, i32* @y.40
  %412 = sub i32 %410, 1
  %413 = mul i32 %410, %412
  %414 = urem i32 %413, 2
  %415 = icmp eq i32 %414, 0
  %416 = icmp slt i32 %411, 10
  %417 = or i1 %415, %416
  br i1 %417, label %originalBB157, label %originalBB157alteredBB

originalBB157:                                    ; preds = %409, %originalBB157alteredBB
  %418 = load i32, i32* %collatzVar
  %419 = add i32 %260, %418
  %420 = icmp slt i32 %419, 2
  %421 = load i32, i32* @x.39
  %422 = load i32, i32* @y.40
  %423 = sub i32 %421, 1
  %424 = mul i32 %421, %423
  %425 = urem i32 %424, 2
  %426 = icmp eq i32 %425, 0
  %427 = icmp slt i32 %422, 10
  %428 = or i1 %426, %427
  br i1 %428, label %originalBBpart2163, label %originalBB157alteredBB

originalBBpart2163:                               ; preds = %originalBB157
  br i1 %420, label %429, label %311

429:                                              ; preds = %originalBBpart2163
  %430 = load i32, i32* @x.39
  %431 = load i32, i32* @y.40
  %432 = sub i32 %430, 1
  %433 = mul i32 %430, %432
  %434 = urem i32 %433, 2
  %435 = icmp eq i32 %434, 0
  %436 = icmp slt i32 %431, 10
  %437 = or i1 %435, %436
  br i1 %437, label %originalBB165, label %originalBB165alteredBB

originalBB165:                                    ; preds = %429, %originalBB165alteredBB
  %438 = load i8*, i8** %12, align 8, !dbg !3186
  %439 = getelementptr inbounds i8, i8* %438, i64 0, !dbg !3186
  %440 = load i8, i8* %439, align 1, !dbg !3186
  %441 = sext i8 %440 to i32, !dbg !3186
  %442 = icmp eq i32 %441, 96, !dbg !3187
  %443 = zext i1 %442 to i64, !dbg !3186
  %444 = select i1 %442, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.92, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.93, i64 0, i64 0), !dbg !3186
  store i8* %444, i8** %11, align 8, !dbg !3188
  %445 = load i32, i32* @x.39
  %446 = load i32, i32* @y.40
  %447 = sub i32 %445, 1
  %448 = mul i32 %445, %447
  %449 = urem i32 %448, 2
  %450 = icmp eq i32 %449, 0
  %451 = icmp slt i32 %446, 10
  %452 = or i1 %450, %451
  br i1 %452, label %originalBBpart2167, label %originalBB165alteredBB

originalBBpart2167:                               ; preds = %originalBB165
  br label %474, !dbg !3188

453:                                              ; preds = %originalBBpart2104
  %454 = load i32, i32* @x.39
  %455 = load i32, i32* @y.40
  %456 = sub i32 %454, 1
  %457 = mul i32 %454, %456
  %458 = urem i32 %457, 2
  %459 = icmp eq i32 %458, 0
  %460 = icmp slt i32 %455, 10
  %461 = or i1 %459, %460
  br i1 %461, label %originalBB169, label %originalBB169alteredBB

originalBB169:                                    ; preds = %453, %originalBB169alteredBB
  %462 = load i32, i32* %13, align 4, !dbg !3189
  %463 = icmp eq i32 %462, 9, !dbg !3190
  %464 = zext i1 %463 to i64, !dbg !3189
  %465 = select i1 %463, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.85, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.87, i64 0, i64 0), !dbg !3189
  store i8* %465, i8** %11, align 8, !dbg !3191
  %466 = load i32, i32* @x.39
  %467 = load i32, i32* @y.40
  %468 = sub i32 %466, 1
  %469 = mul i32 %466, %468
  %470 = urem i32 %469, 2
  %471 = icmp eq i32 %470, 0
  %472 = icmp slt i32 %467, 10
  %473 = or i1 %471, %472
  br i1 %473, label %originalBBpart2171, label %originalBB169alteredBB

originalBBpart2171:                               ; preds = %originalBB169
  br label %474, !dbg !3191

474:                                              ; preds = %originalBBpart2171, %originalBBpart2167, %242, %originalBBpart24
  %475 = load i8*, i8** %11, align 8, !dbg !3192
  ret i8* %475, !dbg !3192

originalBBalteredBB:                              ; preds = %originalBB, %2
  %476 = alloca i8*, align 8
  %477 = alloca i8*, align 8
  %478 = alloca i32, align 4
  %479 = alloca i8*, align 8
  %480 = alloca i8*, align 8
  store i8* %0, i8** %477, align 8
  call void @llvm.dbg.declare(metadata i8** %477, metadata !3193, metadata !DIExpression()), !dbg !3162
  store i32 %1, i32* %478, align 4
  call void @llvm.dbg.declare(metadata i32* %478, metadata !3225, metadata !DIExpression()), !dbg !3164
  call void @llvm.dbg.declare(metadata i8** %479, metadata !3226, metadata !DIExpression()), !dbg !3166
  %481 = load i8*, i8** %477, align 8, !dbg !3167
  %482 = call i8* @gettext(i8* %481) #10, !dbg !3167
  store i8* %482, i8** %479, align 8, !dbg !3166
  call void @llvm.dbg.declare(metadata i8** %480, metadata !3227, metadata !DIExpression()), !dbg !3169
  %483 = load i8*, i8** %479, align 8, !dbg !3170
  %484 = load i8*, i8** %477, align 8, !dbg !3172
  %485 = icmp ne i8* %483, %484, !dbg !3173
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %486 = load i8*, i8** %14, align 8, !dbg !3175
  store i8* %486, i8** %11, align 8, !dbg !3176
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %487 = call i8* @locale_charset(), !dbg !3177
  store i8* %487, i8** %15, align 8, !dbg !3178
  %488 = load i8*, i8** %15, align 8, !dbg !3179
  %489 = call i32 @c_strcasecmp(i8* %488, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.88, i64 0, i64 0)) #13, !dbg !3179
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %67
  %collatzVar1alteredBB = alloca i32
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %84
  %490 = load i32, i32* @inVal0
  %491 = icmp sgt i32 %490, 1
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %103
  store i32 48, i32* %collatzVar1
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %124
  %492 = load i32, i32* %collatzVar1
  %493 = icmp sgt i32 %492, 1
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %143
  %494 = load i32, i32* %collatzVar1
  %_ = sub i32 %494, 2
  %gen = mul i32 %_, 2
  %_27 = sub i32 0, %494
  %gen28 = add i32 %_27, 2
  %_29 = sub i32 0, %494
  %gen30 = add i32 %_29, 2
  %_31 = sub i32 %494, 2
  %gen32 = mul i32 %_31, 2
  %_33 = sub i32 %494, 2
  %gen34 = mul i32 %_33, 2
  %_35 = sub i32 %494, 2
  %gen36 = mul i32 %_35, 2
  %_37 = sub i32 %494, 2
  %gen38 = mul i32 %_37, 2
  %495 = srem i32 %494, 2
  %496 = icmp eq i32 %495, 0
  br label %originalBB26

originalBB42alteredBB:                            ; preds = %originalBB42, %163
  %497 = load i32, i32* %collatzVar1
  %_43 = sub i32 0, %497
  %gen44 = add i32 %_43, 2
  %_45 = sub i32 %497, 2
  %gen46 = mul i32 %_45, 2
  %498 = sdiv i32 %497, 2
  store i32 %498, i32* %collatzVar1
  br label %originalBB42

originalBB50alteredBB:                            ; preds = %originalBB50, %182
  %499 = load i32, i32* %collatzVar1
  %_51 = sub i32 %499, 3
  %gen52 = mul i32 %_51, 3
  %_53 = sub i32 %499, 3
  %gen54 = mul i32 %_53, 3
  %_55 = sub i32 %499, 3
  %gen56 = mul i32 %_55, 3
  %_57 = sub i32 %499, 3
  %gen58 = mul i32 %_57, 3
  %_59 = sub i32 0, %499
  %gen60 = add i32 %_59, 3
  %500 = mul i32 %499, 3
  %_61 = sub i32 %500, 1
  %gen62 = mul i32 %_61, 1
  %_63 = sub i32 %500, 1
  %gen64 = mul i32 %_63, 1
  %_65 = shl i32 %500, 1
  %_66 = sub i32 %500, 1
  %gen67 = mul i32 %_66, 1
  %501 = add i32 %500, 1
  store i32 %501, i32* %collatzVar1
  br label %originalBB50

originalBB71alteredBB:                            ; preds = %originalBB71, %202
  %502 = load i32, i32* %collatzVar1
  %_72 = sub i32 %58, %502
  %gen73 = mul i32 %_72, %502
  %_74 = sub i32 %58, %502
  %gen75 = mul i32 %_74, %502
  %503 = sub i32 %58, %502
  %504 = icmp sgt i32 %503, -2
  br label %originalBB71

originalBB79alteredBB:                            ; preds = %originalBB79, %222
  %505 = load i32, i32* %collatzVar1
  %_80 = shl i32 %58, %505
  %_81 = sub i32 0, %58
  %gen82 = add i32 %_81, %505
  %_83 = shl i32 %58, %505
  %_84 = shl i32 %58, %505
  %_85 = sub i32 %58, %505
  %gen86 = mul i32 %_85, %505
  %506 = add i32 %58, %505
  %507 = icmp slt i32 %506, 2
  br label %originalBB79

originalBB90alteredBB:                            ; preds = %originalBB90, %250
  %508 = load i8*, i8** %15, align 8, !dbg !3184
  %509 = call i32 @c_strcasecmp(i8* %508, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.91, i64 0, i64 0)) #13, !dbg !3184
  br label %originalBB90

originalBB94alteredBB:                            ; preds = %originalBB94, %269
  %collatzVaralteredBB = alloca i32
  br label %originalBB94

originalBB98alteredBB:                            ; preds = %originalBB98, %289
  store i32 46, i32* %collatzVar
  br label %originalBB98

originalBB102alteredBB:                           ; preds = %originalBB102, %311
  %510 = load i32, i32* %collatzVar
  %511 = icmp sgt i32 %510, 1
  br label %originalBB102

originalBB106alteredBB:                           ; preds = %originalBB106, %330
  %512 = load i32, i32* %collatzVar
  %_107 = sub i32 0, %512
  %gen108 = add i32 %_107, 2
  %_109 = sub i32 %512, 2
  %gen110 = mul i32 %_109, 2
  %_111 = sub i32 0, %512
  %gen112 = add i32 %_111, 2
  %_113 = shl i32 %512, 2
  %_114 = shl i32 %512, 2
  %_115 = sub i32 %512, 2
  %gen116 = mul i32 %_115, 2
  %_117 = shl i32 %512, 2
  %513 = srem i32 %512, 2
  %514 = icmp eq i32 %513, 0
  br label %originalBB106

originalBB121alteredBB:                           ; preds = %originalBB121, %350
  %515 = load i32, i32* %collatzVar
  %_122 = sub i32 %515, 2
  %gen123 = mul i32 %_122, 2
  %516 = sdiv i32 %515, 2
  store i32 %516, i32* %collatzVar
  br label %originalBB121

originalBB127alteredBB:                           ; preds = %originalBB127, %369
  %517 = load i32, i32* %collatzVar
  %_128 = sub i32 0, %517
  %gen129 = add i32 %_128, 3
  %518 = mul i32 %517, 3
  %_130 = sub i32 %518, 1
  %gen131 = mul i32 %_130, 1
  %_132 = shl i32 %518, 1
  %_133 = sub i32 0, %518
  %gen134 = add i32 %_133, 1
  %_135 = sub i32 0, %518
  %gen136 = add i32 %_135, 1
  %_137 = sub i32 %518, 1
  %gen138 = mul i32 %_137, 1
  %_139 = shl i32 %518, 1
  %519 = add i32 %518, 1
  store i32 %519, i32* %collatzVar
  br label %originalBB127

originalBB143alteredBB:                           ; preds = %originalBB143, %389
  %520 = load i32, i32* %collatzVar
  %_144 = sub i32 0, %260
  %gen145 = add i32 %_144, %520
  %_146 = sub i32 0, %260
  %gen147 = add i32 %_146, %520
  %_148 = shl i32 %260, %520
  %_149 = shl i32 %260, %520
  %_150 = sub i32 0, %260
  %gen151 = add i32 %_150, %520
  %_152 = sub i32 0, %260
  %gen153 = add i32 %_152, %520
  %521 = sub i32 %260, %520
  %522 = icmp sgt i32 %521, -2
  br label %originalBB143

originalBB157alteredBB:                           ; preds = %originalBB157, %409
  %523 = load i32, i32* %collatzVar
  %_158 = sub i32 0, %260
  %gen159 = add i32 %_158, %523
  %_160 = sub i32 %260, %523
  %gen161 = mul i32 %_160, %523
  %524 = add i32 %260, %523
  %525 = icmp slt i32 %524, 2
  br label %originalBB157

originalBB165alteredBB:                           ; preds = %originalBB165, %429
  %526 = load i8*, i8** %12, align 8, !dbg !3186
  %527 = getelementptr inbounds i8, i8* %526, i64 0, !dbg !3186
  %528 = load i8, i8* %527, align 1, !dbg !3186
  %529 = sext i8 %528 to i32, !dbg !3186
  %530 = icmp eq i32 %529, 96, !dbg !3187
  %531 = zext i1 %530 to i64, !dbg !3186
  %532 = select i1 %530, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.92, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.93, i64 0, i64 0), !dbg !3186
  store i8* %532, i8** %11, align 8, !dbg !3188
  br label %originalBB165

originalBB169alteredBB:                           ; preds = %originalBB169, %453
  %533 = load i32, i32* %13, align 4, !dbg !3189
  %534 = icmp eq i32 %533, 9, !dbg !3190
  %535 = zext i1 %534 to i64, !dbg !3189
  %536 = select i1 %534, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.85, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.87, i64 0, i64 0), !dbg !3189
  store i8* %536, i8** %11, align 8, !dbg !3191
  br label %originalBB169
}

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #7

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #7

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #8

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char(i8*, i8 signext) #4 !dbg !3228 {
  %3 = load i32, i32* @x.41
  %4 = load i32, i32* @y.42
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8, align 1
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3231, metadata !DIExpression()), !dbg !3232
  store i8 %1, i8* %12, align 1
  call void @llvm.dbg.declare(metadata i8* %12, metadata !3233, metadata !DIExpression()), !dbg !3234
  %13 = load i8*, i8** %11, align 8, !dbg !3235
  %14 = load i8, i8* %12, align 1, !dbg !3236
  %15 = call i8* @quotearg_char_mem(i8* %13, i64 -1, i8 signext %14), !dbg !3237
  %16 = load i32, i32* @x.41
  %17 = load i32, i32* @y.42
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !3238

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i8*, align 8
  %25 = alloca i8, align 1
  store i8* %0, i8** %24, align 8
  call void @llvm.dbg.declare(metadata i8** %24, metadata !3239, metadata !DIExpression()), !dbg !3232
  store i8 %1, i8* %25, align 1
  call void @llvm.dbg.declare(metadata i8* %25, metadata !3271, metadata !DIExpression()), !dbg !3234
  %26 = load i8*, i8** %24, align 8, !dbg !3235
  %27 = load i8, i8* %25, align 1, !dbg !3236
  %28 = call i8* @quotearg_char_mem(i8* %26, i64 -1, i8 signext %27), !dbg !3237
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_colon(i8*) #4 !dbg !3272 {
  %2 = load i32, i32* @x.43
  %3 = load i32, i32* @y.44
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !3275, metadata !DIExpression()), !dbg !3276
  %11 = load i8*, i8** %10, align 8, !dbg !3277
  %12 = call i8* @quotearg_char(i8* %11, i8 signext 58), !dbg !3278
  %13 = load i32, i32* @x.43
  %14 = load i32, i32* @y.44
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !3279

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !3280, metadata !DIExpression()), !dbg !3276
  %22 = load i8*, i8** %21, align 8, !dbg !3277
  %23 = call i8* @quotearg_char(i8* %22, i8 signext 58), !dbg !3278
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n_mem(i32, i8*, i64) #4 !dbg !3312 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !3315, metadata !DIExpression()), !dbg !3316
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !3317, metadata !DIExpression()), !dbg !3318
  store i64 %2, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !3319, metadata !DIExpression()), !dbg !3320
  %7 = load i32, i32* %4, align 4, !dbg !3321
  %8 = load i8*, i8** %5, align 8, !dbg !3322
  %9 = load i64, i64* %6, align 8, !dbg !3323
  %10 = call i8* @quotearg_n_options(i32 %7, i8* %8, i64 %9, %struct.quoting_options* @quote_quoting_options), !dbg !3324
  ret i8* %10, !dbg !3325
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n(i32, i8*) #4 !dbg !3326 {
  %3 = load i32, i32* @x.47
  %4 = load i32, i32* @y.48
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3329, metadata !DIExpression()), !dbg !3330
  store i8* %1, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3331, metadata !DIExpression()), !dbg !3332
  %13 = load i32, i32* %11, align 4, !dbg !3333
  %14 = load i8*, i8** %12, align 8, !dbg !3334
  %15 = call i8* @quote_n_mem(i32 %13, i8* %14, i64 -1), !dbg !3335
  %16 = load i32, i32* @x.47
  %17 = load i32, i32* @y.48
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !3336

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i32, align 4
  %25 = alloca i8*, align 8
  store i32 %0, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !3337, metadata !DIExpression()), !dbg !3330
  store i8* %1, i8** %25, align 8
  call void @llvm.dbg.declare(metadata i8** %25, metadata !3369, metadata !DIExpression()), !dbg !3332
  %26 = load i32, i32* %24, align 4, !dbg !3333
  %27 = load i8*, i8** %25, align 8, !dbg !3334
  %28 = call i8* @quote_n_mem(i32 %26, i8* %27, i64 -1), !dbg !3335
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote(i8*) #4 !dbg !3370 {
  %2 = load i32, i32* @x.49
  %3 = load i32, i32* @y.50
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !3373, metadata !DIExpression()), !dbg !3374
  %11 = load i8*, i8** %10, align 8, !dbg !3375
  %12 = call i8* @quote_n(i32 0, i8* %11), !dbg !3376
  %13 = load i32, i32* @x.49
  %14 = load i32, i32* @y.50
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !3377

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !3378, metadata !DIExpression()), !dbg !3374
  %22 = load i8*, i8** %21, align 8, !dbg !3375
  %23 = call i8* @quote_n(i32 0, i8* %22), !dbg !3376
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @getcon(i8**) #4 !dbg !3410 {
  %2 = load i32, i32* @x.51
  %3 = load i32, i32* @y.52
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8**, align 8
  store i8** %0, i8*** %10, align 8
  call void @llvm.dbg.declare(metadata i8*** %10, metadata !3416, metadata !DIExpression()), !dbg !3417
  %11 = call i32* @__errno_location() #15, !dbg !3418
  store i32 95, i32* %11, align 4, !dbg !3419
  %12 = load i32, i32* @x.51
  %13 = load i32, i32* @y.52
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i32 -1, !dbg !3420

originalBBalteredBB:                              ; preds = %originalBB, %1
  %20 = alloca i8**, align 8
  store i8** %0, i8*** %20, align 8
  call void @llvm.dbg.declare(metadata i8*** %20, metadata !3421, metadata !DIExpression()), !dbg !3417
  %21 = call i32* @__errno_location() #15, !dbg !3418
  store i32 95, i32* %21, align 4, !dbg !3419
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @parse_user_spec(i8*, i32*, i32*, i8**, i8**) #4 !dbg !3424 {
  %6 = alloca i8*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i8**, align 8
  %10 = alloca i8**, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  store i8* %0, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !3427, metadata !DIExpression()), !dbg !3428
  store i32* %1, i32** %7, align 8
  call void @llvm.dbg.declare(metadata i32** %7, metadata !3429, metadata !DIExpression()), !dbg !3430
  store i32* %2, i32** %8, align 8
  call void @llvm.dbg.declare(metadata i32** %8, metadata !3431, metadata !DIExpression()), !dbg !3432
  store i8** %3, i8*** %9, align 8
  call void @llvm.dbg.declare(metadata i8*** %9, metadata !3433, metadata !DIExpression()), !dbg !3434
  store i8** %4, i8*** %10, align 8
  call void @llvm.dbg.declare(metadata i8*** %10, metadata !3435, metadata !DIExpression()), !dbg !3436
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3437, metadata !DIExpression()), !dbg !3438
  %14 = load i32*, i32** %8, align 8, !dbg !3439
  %15 = icmp ne i32* %14, null, !dbg !3439
  br i1 %15, label %16, label %35, !dbg !3439

16:                                               ; preds = %5
  %17 = load i32, i32* @x.53
  %18 = load i32, i32* @y.54
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %16, %originalBBalteredBB
  %25 = load i8*, i8** %6, align 8, !dbg !3440
  %26 = call i8* @strchr(i8* %25, i32 58) #13, !dbg !3441
  %27 = load i32, i32* @x.53
  %28 = load i32, i32* @y.54
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %52, !dbg !3439

35:                                               ; preds = %5
  %36 = load i32, i32* @x.53
  %37 = load i32, i32* @y.54
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %35, %originalBB1alteredBB
  %44 = load i32, i32* @x.53
  %45 = load i32, i32* @y.54
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %52, !dbg !3439

52:                                               ; preds = %originalBBpart24, %originalBBpart2
  %53 = phi i8* [ %26, %originalBBpart2 ], [ null, %originalBBpart24 ], !dbg !3439
  %54 = load i32, i32* @x.53
  %55 = load i32, i32* @y.54
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %52, %originalBB6alteredBB
  store i8* %53, i8** %11, align 8, !dbg !3438
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3442, metadata !DIExpression()), !dbg !3443
  %62 = load i8*, i8** %6, align 8, !dbg !3444
  %63 = load i8*, i8** %11, align 8, !dbg !3445
  %64 = load i32*, i32** %7, align 8, !dbg !3446
  %65 = load i32*, i32** %8, align 8, !dbg !3447
  %66 = load i8**, i8*** %9, align 8, !dbg !3448
  %67 = load i8**, i8*** %10, align 8, !dbg !3449
  %68 = call i8* @parse_with_separator(i8* %62, i8* %63, i32* %64, i32* %65, i8** %66, i8** %67), !dbg !3450
  store i8* %68, i8** %12, align 8, !dbg !3443
  %69 = load i32*, i32** %8, align 8, !dbg !3451
  %70 = icmp ne i32* %69, null, !dbg !3451
  %71 = load i32, i32* @x.53
  %72 = load i32, i32* @y.54
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %70, label %79, label %165, !dbg !3453

79:                                               ; preds = %originalBBpart28
  %80 = load i32, i32* @x.53
  %81 = load i32, i32* @y.54
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %79, %originalBB10alteredBB
  %88 = load i8*, i8** %11, align 8, !dbg !3454
  %89 = icmp ne i8* %88, null, !dbg !3454
  %90 = load i32, i32* @x.53
  %91 = load i32, i32* @y.54
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %89, label %165, label %98, !dbg !3455

98:                                               ; preds = %originalBBpart212
  %99 = load i32, i32* @x.53
  %100 = load i32, i32* @y.54
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %98, %originalBB14alteredBB
  %107 = load i8*, i8** %12, align 8, !dbg !3456
  %108 = icmp ne i8* %107, null, !dbg !3456
  %109 = load i32, i32* @x.53
  %110 = load i32, i32* @y.54
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %108, label %117, label %165, !dbg !3457

117:                                              ; preds = %originalBBpart216
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3458, metadata !DIExpression()), !dbg !3460
  %118 = load i8*, i8** %6, align 8, !dbg !3461
  %119 = call i8* @strchr(i8* %118, i32 46) #13, !dbg !3462
  store i8* %119, i8** %13, align 8, !dbg !3460
  %120 = load i8*, i8** %13, align 8, !dbg !3463
  %121 = icmp ne i8* %120, null, !dbg !3463
  br i1 %121, label %122, label %148, !dbg !3465

122:                                              ; preds = %117
  %123 = load i8*, i8** %6, align 8, !dbg !3466
  %124 = load i8*, i8** %13, align 8, !dbg !3467
  %125 = load i32*, i32** %7, align 8, !dbg !3468
  %126 = load i32*, i32** %8, align 8, !dbg !3469
  %127 = load i8**, i8*** %9, align 8, !dbg !3470
  %128 = load i8**, i8*** %10, align 8, !dbg !3471
  %129 = call i8* @parse_with_separator(i8* %123, i8* %124, i32* %125, i32* %126, i8** %127, i8** %128), !dbg !3472
  %130 = icmp ne i8* %129, null, !dbg !3472
  br i1 %130, label %148, label %131, !dbg !3473

131:                                              ; preds = %122
  %132 = load i32, i32* @x.53
  %133 = load i32, i32* @y.54
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %131, %originalBB18alteredBB
  store i8* null, i8** %12, align 8, !dbg !3474
  %140 = load i32, i32* @x.53
  %141 = load i32, i32* @y.54
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %148, !dbg !3475

148:                                              ; preds = %originalBBpart220, %122, %117
  %149 = load i32, i32* @x.53
  %150 = load i32, i32* @y.54
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %148, %originalBB22alteredBB
  %157 = load i32, i32* @x.53
  %158 = load i32, i32* @y.54
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %165, !dbg !3476

165:                                              ; preds = %originalBBpart224, %originalBBpart216, %originalBBpart212, %originalBBpart28
  %166 = load i32, i32* @x.53
  %167 = load i32, i32* @y.54
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %165, %originalBB26alteredBB
  %174 = load i8*, i8** %12, align 8, !dbg !3477
  %175 = load i32, i32* @x.53
  %176 = load i32, i32* @y.54
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i8* %174, !dbg !3478

originalBBalteredBB:                              ; preds = %originalBB, %16
  %183 = load i8*, i8** %6, align 8, !dbg !3440
  %184 = call i8* @strchr(i8* %183, i32 58) #13, !dbg !3441
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %35
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %52
  store i8* %53, i8** %11, align 8, !dbg !3438
  call void @llvm.dbg.declare(metadata !4, metadata !3479, metadata !DIExpression()), !dbg !3443
  %185 = load i8*, i8** %6, align 8, !dbg !3444
  %186 = load i8*, i8** %11, align 8, !dbg !3445
  %187 = load i32*, i32** %7, align 8, !dbg !3446
  %188 = load i32*, i32** %8, align 8, !dbg !3447
  %189 = load i8**, i8*** %9, align 8, !dbg !3448
  %190 = load i8**, i8*** %10, align 8, !dbg !3449
  %191 = call i8* @parse_with_separator(i8* %185, i8* %186, i32* %187, i32* %188, i8** %189, i8** %190), !dbg !3450
  store i8* %191, i8** %12, align 8, !dbg !3443
  %192 = load i32*, i32** %8, align 8, !dbg !3451
  %193 = icmp ne i32* %192, null, !dbg !3451
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %79
  %194 = load i8*, i8** %11, align 8, !dbg !3454
  %195 = icmp ne i8* %194, null, !dbg !3454
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %98
  %196 = load i8*, i8** %12, align 8, !dbg !3456
  %197 = icmp ne i8* %196, null, !dbg !3456
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %131
  store i8* null, i8** %12, align 8, !dbg !3474
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %148
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %165
  %198 = load i8*, i8** %12, align 8, !dbg !3477
  br label %originalBB26
}

; Function Attrs: nounwind readonly
declare dso_local i8* @strchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @parse_with_separator(i8*, i8*, i32*, i32*, i8**, i8**) #4 !dbg !178 {
  %7 = load i32, i32* @x.55
  %8 = load i32, i32* @y.56
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %6, %originalBBalteredBB
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i32*, align 8
  %18 = alloca i32*, align 8
  %19 = alloca i8**, align 8
  %20 = alloca i8**, align 8
  %21 = alloca i8*, align 8
  %22 = alloca %struct.passwd*, align 8
  %23 = alloca %struct.group*, align 8
  %24 = alloca i8*, align 8
  %25 = alloca i8*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i64, align 8
  %30 = alloca i8, align 1
  %31 = alloca i64, align 8
  %32 = alloca [21 x i8], align 16
  %33 = alloca i64, align 8
  store i8* %0, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3490, metadata !DIExpression()), !dbg !3491
  store i8* %1, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3492, metadata !DIExpression()), !dbg !3493
  store i32* %2, i32** %17, align 8
  call void @llvm.dbg.declare(metadata i32** %17, metadata !3494, metadata !DIExpression()), !dbg !3495
  store i32* %3, i32** %18, align 8
  call void @llvm.dbg.declare(metadata i32** %18, metadata !3496, metadata !DIExpression()), !dbg !3497
  store i8** %4, i8*** %19, align 8
  call void @llvm.dbg.declare(metadata i8*** %19, metadata !3498, metadata !DIExpression()), !dbg !3499
  store i8** %5, i8*** %20, align 8
  call void @llvm.dbg.declare(metadata i8*** %20, metadata !3500, metadata !DIExpression()), !dbg !3501
  call void @llvm.dbg.declare(metadata i8** %21, metadata !3502, metadata !DIExpression()), !dbg !3503
  call void @llvm.dbg.declare(metadata %struct.passwd** %22, metadata !3504, metadata !DIExpression()), !dbg !3515
  call void @llvm.dbg.declare(metadata %struct.group** %23, metadata !3516, metadata !DIExpression()), !dbg !3524
  call void @llvm.dbg.declare(metadata i8** %24, metadata !3525, metadata !DIExpression()), !dbg !3526
  call void @llvm.dbg.declare(metadata i8** %25, metadata !3527, metadata !DIExpression()), !dbg !3528
  call void @llvm.dbg.declare(metadata i8** %26, metadata !3529, metadata !DIExpression()), !dbg !3530
  store i8* null, i8** %26, align 8, !dbg !3530
  call void @llvm.dbg.declare(metadata i32* %27, metadata !3531, metadata !DIExpression()), !dbg !3532
  %34 = load i32*, i32** %17, align 8, !dbg !3533
  %35 = load i32, i32* %34, align 4, !dbg !3534
  store i32 %35, i32* %27, align 4, !dbg !3532
  call void @llvm.dbg.declare(metadata i32* %28, metadata !3535, metadata !DIExpression()), !dbg !3536
  %36 = load i32*, i32** %18, align 8, !dbg !3537
  %37 = icmp ne i32* %36, null, !dbg !3537
  %38 = load i32, i32* @x.55
  %39 = load i32, i32* @y.56
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %37, label %46, label %65, !dbg !3537

46:                                               ; preds = %originalBBpart2
  %47 = load i32, i32* @x.55
  %48 = load i32, i32* @y.56
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %46, %originalBB1alteredBB
  %55 = load i32*, i32** %18, align 8, !dbg !3538
  %56 = load i32, i32* %55, align 4, !dbg !3539
  %57 = load i32, i32* @x.55
  %58 = load i32, i32* @y.56
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %82, !dbg !3537

65:                                               ; preds = %originalBBpart2
  %66 = load i32, i32* @x.55
  %67 = load i32, i32* @y.56
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %65, %originalBB6alteredBB
  %74 = load i32, i32* @x.55
  %75 = load i32, i32* @y.56
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %82, !dbg !3537

82:                                               ; preds = %originalBBpart28, %originalBBpart24
  %83 = phi i32 [ %56, %originalBBpart24 ], [ -1, %originalBBpart28 ], !dbg !3537
  %84 = load i32, i32* @x.55
  %85 = load i32, i32* @y.56
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %82, %originalBB10alteredBB
  store i32 %83, i32* %28, align 4, !dbg !3536
  store i8* null, i8** %21, align 8, !dbg !3540
  %92 = load i8**, i8*** %19, align 8, !dbg !3541
  %93 = icmp ne i8** %92, null, !dbg !3541
  %94 = load i32, i32* @x.55
  %95 = load i32, i32* @y.56
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %93, label %102, label %120, !dbg !3543

102:                                              ; preds = %originalBBpart212
  %103 = load i32, i32* @x.55
  %104 = load i32, i32* @y.56
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %102, %originalBB14alteredBB
  %111 = load i8**, i8*** %19, align 8, !dbg !3544
  store i8* null, i8** %111, align 8, !dbg !3545
  %112 = load i32, i32* @x.55
  %113 = load i32, i32* @y.56
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %120, !dbg !3546

120:                                              ; preds = %originalBBpart216, %originalBBpart212
  %121 = load i32, i32* @x.55
  %122 = load i32, i32* @y.56
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %120, %originalBB18alteredBB
  %129 = load i8**, i8*** %20, align 8, !dbg !3547
  %130 = icmp ne i8** %129, null, !dbg !3547
  %131 = load i32, i32* @x.55
  %132 = load i32, i32* @y.56
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %130, label %139, label %141, !dbg !3549

139:                                              ; preds = %originalBBpart220
  %140 = load i8**, i8*** %20, align 8, !dbg !3550
  store i8* null, i8** %140, align 8, !dbg !3551
  br label %141, !dbg !3552

141:                                              ; preds = %139, %originalBBpart220
  %142 = load i32, i32* @x.55
  %143 = load i32, i32* @y.56
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %141, %originalBB22alteredBB
  store i8* null, i8** %24, align 8, !dbg !3553
  %150 = load i8*, i8** %16, align 8, !dbg !3554
  %151 = icmp eq i8* %150, null, !dbg !3556
  %152 = load i32, i32* @x.55
  %153 = load i32, i32* @y.56
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %151, label %160, label %216, !dbg !3557

160:                                              ; preds = %originalBBpart224
  %161 = load i32, i32* @x.55
  %162 = load i32, i32* @y.56
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %160, %originalBB26alteredBB
  %169 = load i8*, i8** %15, align 8, !dbg !3558
  %170 = load i8, i8* %169, align 1, !dbg !3561
  %171 = icmp ne i8 %170, 0, !dbg !3561
  %172 = load i32, i32* @x.55
  %173 = load i32, i32* @y.56
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %171, label %180, label %199, !dbg !3562

180:                                              ; preds = %originalBBpart228
  %181 = load i32, i32* @x.55
  %182 = load i32, i32* @y.56
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %180, %originalBB30alteredBB
  %189 = load i8*, i8** %15, align 8, !dbg !3563
  %190 = call noalias i8* @xstrdup(i8* %189), !dbg !3564
  store i8* %190, i8** %24, align 8, !dbg !3565
  %191 = load i32, i32* @x.55
  %192 = load i32, i32* @y.56
  %193 = sub i32 %191, 1
  %194 = mul i32 %191, %193
  %195 = urem i32 %194, 2
  %196 = icmp eq i32 %195, 0
  %197 = icmp slt i32 %192, 10
  %198 = or i1 %196, %197
  br i1 %198, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %199, !dbg !3566

199:                                              ; preds = %originalBBpart232, %originalBBpart228
  %200 = load i32, i32* @x.55
  %201 = load i32, i32* @y.56
  %202 = sub i32 %200, 1
  %203 = mul i32 %200, %202
  %204 = urem i32 %203, 2
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %205, %206
  br i1 %207, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %199, %originalBB34alteredBB
  %208 = load i32, i32* @x.55
  %209 = load i32, i32* @y.56
  %210 = sub i32 %208, 1
  %211 = mul i32 %208, %210
  %212 = urem i32 %211, 2
  %213 = icmp eq i32 %212, 0
  %214 = icmp slt i32 %209, 10
  %215 = or i1 %213, %214
  br i1 %215, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %265, !dbg !3567

216:                                              ; preds = %originalBBpart224
  call void @llvm.dbg.declare(metadata i64* %29, metadata !3568, metadata !DIExpression()), !dbg !3570
  %217 = load i8*, i8** %16, align 8, !dbg !3571
  %218 = load i8*, i8** %15, align 8, !dbg !3572
  %219 = ptrtoint i8* %217 to i64, !dbg !3573
  %220 = ptrtoint i8* %218 to i64, !dbg !3573
  %221 = sub i64 %219, %220, !dbg !3573
  store i64 %221, i64* %29, align 8, !dbg !3570
  %222 = load i64, i64* %29, align 8, !dbg !3574
  %223 = icmp ne i64 %222, 0, !dbg !3576
  br i1 %223, label %224, label %248, !dbg !3577

224:                                              ; preds = %216
  %225 = load i32, i32* @x.55
  %226 = load i32, i32* @y.56
  %227 = sub i32 %225, 1
  %228 = mul i32 %225, %227
  %229 = urem i32 %228, 2
  %230 = icmp eq i32 %229, 0
  %231 = icmp slt i32 %226, 10
  %232 = or i1 %230, %231
  br i1 %232, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %224, %originalBB38alteredBB
  %233 = load i8*, i8** %15, align 8, !dbg !3578
  %234 = load i64, i64* %29, align 8, !dbg !3580
  %235 = add i64 %234, 1, !dbg !3581
  %236 = call i8* @xmemdup(i8* %233, i64 %235), !dbg !3582
  store i8* %236, i8** %24, align 8, !dbg !3583
  %237 = load i8*, i8** %24, align 8, !dbg !3584
  %238 = load i64, i64* %29, align 8, !dbg !3585
  %239 = getelementptr inbounds i8, i8* %237, i64 %238, !dbg !3584
  store i8 0, i8* %239, align 1, !dbg !3586
  %240 = load i32, i32* @x.55
  %241 = load i32, i32* @y.56
  %242 = sub i32 %240, 1
  %243 = mul i32 %240, %242
  %244 = urem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %245, %246
  br i1 %247, label %originalBBpart244, label %originalBB38alteredBB

originalBBpart244:                                ; preds = %originalBB38
  br label %248, !dbg !3587

248:                                              ; preds = %originalBBpart244, %216
  %249 = load i32, i32* @x.55
  %250 = load i32, i32* @y.56
  %251 = sub i32 %249, 1
  %252 = mul i32 %249, %251
  %253 = urem i32 %252, 2
  %254 = icmp eq i32 %253, 0
  %255 = icmp slt i32 %250, 10
  %256 = or i1 %254, %255
  br i1 %256, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %248, %originalBB46alteredBB
  %257 = load i32, i32* @x.55
  %258 = load i32, i32* @y.56
  %259 = sub i32 %257, 1
  %260 = mul i32 %257, %259
  %261 = urem i32 %260, 2
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %262, %263
  br i1 %264, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %265

265:                                              ; preds = %originalBBpart248, %originalBBpart236
  %266 = load i32, i32* @x.55
  %267 = load i32, i32* @y.56
  %268 = sub i32 %266, 1
  %269 = mul i32 %266, %268
  %270 = urem i32 %269, 2
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %271, %272
  br i1 %273, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %265, %originalBB50alteredBB
  %274 = load i8*, i8** %16, align 8, !dbg !3588
  %275 = icmp eq i8* %274, null, !dbg !3589
  %276 = load i32, i32* @x.55
  %277 = load i32, i32* @y.56
  %278 = sub i32 %276, 1
  %279 = mul i32 %276, %278
  %280 = urem i32 %279, 2
  %281 = icmp eq i32 %280, 0
  %282 = icmp slt i32 %277, 10
  %283 = or i1 %281, %282
  br i1 %283, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br i1 %275, label %306, label %284, !dbg !3590

284:                                              ; preds = %originalBBpart252
  %285 = load i32, i32* @x.55
  %286 = load i32, i32* @y.56
  %287 = sub i32 %285, 1
  %288 = mul i32 %285, %287
  %289 = urem i32 %288, 2
  %290 = icmp eq i32 %289, 0
  %291 = icmp slt i32 %286, 10
  %292 = or i1 %290, %291
  br i1 %292, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %284, %originalBB54alteredBB
  %293 = load i8*, i8** %16, align 8, !dbg !3591
  %294 = getelementptr inbounds i8, i8* %293, i64 1, !dbg !3592
  %295 = load i8, i8* %294, align 1, !dbg !3593
  %296 = sext i8 %295 to i32, !dbg !3593
  %297 = icmp eq i32 %296, 0, !dbg !3594
  %298 = load i32, i32* @x.55
  %299 = load i32, i32* @y.56
  %300 = sub i32 %298, 1
  %301 = mul i32 %298, %300
  %302 = urem i32 %301, 2
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %303, %304
  br i1 %305, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br i1 %297, label %306, label %323, !dbg !3588

306:                                              ; preds = %originalBBpart256, %originalBBpart252
  %307 = load i32, i32* @x.55
  %308 = load i32, i32* @y.56
  %309 = sub i32 %307, 1
  %310 = mul i32 %307, %309
  %311 = urem i32 %310, 2
  %312 = icmp eq i32 %311, 0
  %313 = icmp slt i32 %308, 10
  %314 = or i1 %312, %313
  br i1 %314, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %306, %originalBB58alteredBB
  %315 = load i32, i32* @x.55
  %316 = load i32, i32* @y.56
  %317 = sub i32 %315, 1
  %318 = mul i32 %315, %317
  %319 = urem i32 %318, 2
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %320, %321
  br i1 %322, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br label %342, !dbg !3588

323:                                              ; preds = %originalBBpart256
  %324 = load i32, i32* @x.55
  %325 = load i32, i32* @y.56
  %326 = sub i32 %324, 1
  %327 = mul i32 %324, %326
  %328 = urem i32 %327, 2
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %329, %330
  br i1 %331, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %323, %originalBB62alteredBB
  %332 = load i8*, i8** %16, align 8, !dbg !3595
  %333 = getelementptr inbounds i8, i8* %332, i64 1, !dbg !3596
  %334 = load i32, i32* @x.55
  %335 = load i32, i32* @y.56
  %336 = sub i32 %334, 1
  %337 = mul i32 %334, %336
  %338 = urem i32 %337, 2
  %339 = icmp eq i32 %338, 0
  %340 = icmp slt i32 %335, 10
  %341 = or i1 %339, %340
  br i1 %341, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br label %342, !dbg !3588

342:                                              ; preds = %originalBBpart264, %originalBBpart260
  %343 = phi i8* [ null, %originalBBpart260 ], [ %333, %originalBBpart264 ], !dbg !3588
  %344 = load i32, i32* @x.55
  %345 = load i32, i32* @y.56
  %346 = sub i32 %344, 1
  %347 = mul i32 %344, %346
  %348 = urem i32 %347, 2
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %349, %350
  br i1 %351, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %342, %originalBB66alteredBB
  store i8* %343, i8** %25, align 8, !dbg !3597
  %352 = load i8*, i8** %24, align 8, !dbg !3598
  %353 = icmp ne i8* %352, null, !dbg !3600
  %354 = load i32, i32* @x.55
  %355 = load i32, i32* @y.56
  %356 = sub i32 %354, 1
  %357 = mul i32 %354, %356
  %358 = urem i32 %357, 2
  %359 = icmp eq i32 %358, 0
  %360 = icmp slt i32 %355, 10
  %361 = or i1 %359, %360
  br i1 %361, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br i1 %353, label %362, label %899, !dbg !3601

362:                                              ; preds = %originalBBpart268
  %363 = load i32, i32* @x.55
  %364 = load i32, i32* @y.56
  %365 = sub i32 %363, 1
  %366 = mul i32 %363, %365
  %367 = urem i32 %366, 2
  %368 = icmp eq i32 %367, 0
  %369 = icmp slt i32 %364, 10
  %370 = or i1 %368, %369
  br i1 %370, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %362, %originalBB70alteredBB
  %371 = load i8*, i8** %24, align 8, !dbg !3602
  %372 = load i8, i8* %371, align 1, !dbg !3604
  %373 = sext i8 %372 to i32, !dbg !3604
  %374 = load i32, i32* @x.55
  %375 = load i32, i32* @y.56
  %376 = sub i32 %374, 1
  %377 = mul i32 %374, %376
  %378 = urem i32 %377, 2
  %379 = icmp eq i32 %378, 0
  %380 = icmp slt i32 %375, 10
  %381 = or i1 %379, %380
  br i1 %381, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br label %382, !dbg !3605

382:                                              ; preds = %originalBBpart272
  %383 = load i32, i32* @x.55
  %384 = load i32, i32* @y.56
  %385 = sub i32 %383, 1
  %386 = mul i32 %383, %385
  %387 = urem i32 %386, 2
  %388 = icmp eq i32 %387, 0
  %389 = icmp slt i32 %384, 10
  %390 = or i1 %388, %389
  br i1 %390, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %382, %originalBB74alteredBB
  %collatzVar = alloca i32
  %391 = load i32, i32* @x.55
  %392 = load i32, i32* @y.56
  %393 = sub i32 %391, 1
  %394 = mul i32 %391, %393
  %395 = urem i32 %394, 2
  %396 = icmp eq i32 %395, 0
  %397 = icmp slt i32 %392, 10
  %398 = or i1 %396, %397
  br i1 %398, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br label %399

399:                                              ; preds = %originalBBpart276
  %400 = load i32, i32* @x.55
  %401 = load i32, i32* @y.56
  %402 = sub i32 %400, 1
  %403 = mul i32 %400, %402
  %404 = urem i32 %403, 2
  %405 = icmp eq i32 %404, 0
  %406 = icmp slt i32 %401, 10
  %407 = or i1 %405, %406
  br i1 %407, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %399, %originalBB78alteredBB
  %408 = load i32, i32* @inVal0
  %409 = icmp sgt i32 %408, 1
  %410 = load i32, i32* @x.55
  %411 = load i32, i32* @y.56
  %412 = sub i32 %410, 1
  %413 = mul i32 %410, %412
  %414 = urem i32 %413, 2
  %415 = icmp eq i32 %414, 0
  %416 = icmp slt i32 %411, 10
  %417 = or i1 %415, %416
  br i1 %417, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br i1 %409, label %435, label %418

418:                                              ; preds = %originalBBpart280
  %419 = load i32, i32* @x.55
  %420 = load i32, i32* @y.56
  %421 = sub i32 %419, 1
  %422 = mul i32 %419, %421
  %423 = urem i32 %422, 2
  %424 = icmp eq i32 %423, 0
  %425 = icmp slt i32 %420, 10
  %426 = or i1 %424, %425
  br i1 %426, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %418, %originalBB82alteredBB
  store i32 82, i32* %collatzVar
  %427 = load i32, i32* @x.55
  %428 = load i32, i32* @y.56
  %429 = sub i32 %427, 1
  %430 = mul i32 %427, %429
  %431 = urem i32 %430, 2
  %432 = icmp eq i32 %431, 0
  %433 = icmp slt i32 %428, 10
  %434 = or i1 %432, %433
  br i1 %434, label %originalBBpart284, label %originalBB82alteredBB

originalBBpart284:                                ; preds = %originalBB82
  br label %435

435:                                              ; preds = %originalBBpart284, %originalBBpart280
  %436 = load i32, i32* @x.55
  %437 = load i32, i32* @y.56
  %438 = sub i32 %436, 1
  %439 = mul i32 %436, %438
  %440 = urem i32 %439, 2
  %441 = icmp eq i32 %440, 0
  %442 = icmp slt i32 %437, 10
  %443 = or i1 %441, %442
  br i1 %443, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %435, %originalBB86alteredBB
  %444 = load i8**, i8*** @inVal1
  %445 = getelementptr inbounds i8*, i8** %444, i64 1
  %446 = load i8*, i8** %445
  %controle = call i32 @controle(i8* %446, i32 43)
  store i32 %controle, i32* %collatzVar
  %447 = load i32, i32* @x.55
  %448 = load i32, i32* @y.56
  %449 = sub i32 %447, 1
  %450 = mul i32 %447, %449
  %451 = urem i32 %450, 2
  %452 = icmp eq i32 %451, 0
  %453 = icmp slt i32 %448, 10
  %454 = or i1 %452, %453
  br i1 %454, label %originalBBpart288, label %originalBB86alteredBB

originalBBpart288:                                ; preds = %originalBB86
  br label %455

455:                                              ; preds = %originalBBpart2137, %533, %originalBBpart288
  %456 = load i32, i32* @x.55
  %457 = load i32, i32* @y.56
  %458 = sub i32 %456, 1
  %459 = mul i32 %456, %458
  %460 = urem i32 %459, 2
  %461 = icmp eq i32 %460, 0
  %462 = icmp slt i32 %457, 10
  %463 = or i1 %461, %462
  br i1 %463, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %455, %originalBB90alteredBB
  %464 = load i32, i32* %collatzVar
  %465 = icmp sgt i32 %464, 1
  %466 = load i32, i32* @x.55
  %467 = load i32, i32* @y.56
  %468 = sub i32 %466, 1
  %469 = mul i32 %466, %468
  %470 = urem i32 %469, 2
  %471 = icmp eq i32 %470, 0
  %472 = icmp slt i32 %467, 10
  %473 = or i1 %471, %472
  br i1 %473, label %originalBBpart292, label %originalBB90alteredBB

originalBBpart292:                                ; preds = %originalBB90
  br i1 %465, label %474, label %574

474:                                              ; preds = %originalBBpart292
  %475 = load i32, i32* @x.55
  %476 = load i32, i32* @y.56
  %477 = sub i32 %475, 1
  %478 = mul i32 %475, %477
  %479 = urem i32 %478, 2
  %480 = icmp eq i32 %479, 0
  %481 = icmp slt i32 %476, 10
  %482 = or i1 %480, %481
  br i1 %482, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %474, %originalBB94alteredBB
  %483 = load i32, i32* %collatzVar
  %484 = srem i32 %483, 2
  %485 = icmp eq i32 %484, 0
  %486 = load i32, i32* @x.55
  %487 = load i32, i32* @y.56
  %488 = sub i32 %486, 1
  %489 = mul i32 %486, %488
  %490 = urem i32 %489, 2
  %491 = icmp eq i32 %490, 0
  %492 = icmp slt i32 %487, 10
  %493 = or i1 %491, %492
  br i1 %493, label %originalBBpart2103, label %originalBB94alteredBB

originalBBpart2103:                               ; preds = %originalBB94
  br i1 %485, label %494, label %513

494:                                              ; preds = %originalBBpart2103
  %495 = load i32, i32* @x.55
  %496 = load i32, i32* @y.56
  %497 = sub i32 %495, 1
  %498 = mul i32 %495, %497
  %499 = urem i32 %498, 2
  %500 = icmp eq i32 %499, 0
  %501 = icmp slt i32 %496, 10
  %502 = or i1 %500, %501
  br i1 %502, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %494, %originalBB105alteredBB
  %503 = load i32, i32* %collatzVar
  %504 = sdiv i32 %503, 2
  store i32 %504, i32* %collatzVar
  %505 = load i32, i32* @x.55
  %506 = load i32, i32* @y.56
  %507 = sub i32 %505, 1
  %508 = mul i32 %505, %507
  %509 = urem i32 %508, 2
  %510 = icmp eq i32 %509, 0
  %511 = icmp slt i32 %506, 10
  %512 = or i1 %510, %511
  br i1 %512, label %originalBBpart2111, label %originalBB105alteredBB

originalBBpart2111:                               ; preds = %originalBB105
  br label %533

513:                                              ; preds = %originalBBpart2103
  %514 = load i32, i32* @x.55
  %515 = load i32, i32* @y.56
  %516 = sub i32 %514, 1
  %517 = mul i32 %514, %516
  %518 = urem i32 %517, 2
  %519 = icmp eq i32 %518, 0
  %520 = icmp slt i32 %515, 10
  %521 = or i1 %519, %520
  br i1 %521, label %originalBB113, label %originalBB113alteredBB

originalBB113:                                    ; preds = %513, %originalBB113alteredBB
  %522 = load i32, i32* %collatzVar
  %523 = mul i32 %522, 3
  %524 = add i32 %523, 1
  store i32 %524, i32* %collatzVar
  %525 = load i32, i32* @x.55
  %526 = load i32, i32* @y.56
  %527 = sub i32 %525, 1
  %528 = mul i32 %525, %527
  %529 = urem i32 %528, 2
  %530 = icmp eq i32 %529, 0
  %531 = icmp slt i32 %526, 10
  %532 = or i1 %530, %531
  br i1 %532, label %originalBBpart2126, label %originalBB113alteredBB

originalBBpart2126:                               ; preds = %originalBB113
  br label %533

533:                                              ; preds = %originalBBpart2126, %originalBBpart2111
  %534 = load i32, i32* %collatzVar
  %535 = sub i32 %373, %534
  %536 = icmp sgt i32 %535, 41
  br i1 %536, label %537, label %455

537:                                              ; preds = %533
  %538 = load i32, i32* @x.55
  %539 = load i32, i32* @y.56
  %540 = sub i32 %538, 1
  %541 = mul i32 %538, %540
  %542 = urem i32 %541, 2
  %543 = icmp eq i32 %542, 0
  %544 = icmp slt i32 %539, 10
  %545 = or i1 %543, %544
  br i1 %545, label %originalBB128, label %originalBB128alteredBB

originalBB128:                                    ; preds = %537, %originalBB128alteredBB
  %546 = load i32, i32* %collatzVar
  %547 = add i32 %373, %546
  %548 = icmp slt i32 %547, 45
  %549 = load i32, i32* @x.55
  %550 = load i32, i32* @y.56
  %551 = sub i32 %549, 1
  %552 = mul i32 %549, %551
  %553 = urem i32 %552, 2
  %554 = icmp eq i32 %553, 0
  %555 = icmp slt i32 %550, 10
  %556 = or i1 %554, %555
  br i1 %556, label %originalBBpart2137, label %originalBB128alteredBB

originalBBpart2137:                               ; preds = %originalBB128
  br i1 %548, label %557, label %455

557:                                              ; preds = %originalBBpart2137
  %558 = load i32, i32* @x.55
  %559 = load i32, i32* @y.56
  %560 = sub i32 %558, 1
  %561 = mul i32 %558, %560
  %562 = urem i32 %561, 2
  %563 = icmp eq i32 %562, 0
  %564 = icmp slt i32 %559, 10
  %565 = or i1 %563, %564
  br i1 %565, label %originalBB139, label %originalBB139alteredBB

originalBB139:                                    ; preds = %557, %originalBB139alteredBB
  %566 = load i32, i32* @x.55
  %567 = load i32, i32* @y.56
  %568 = sub i32 %566, 1
  %569 = mul i32 %566, %568
  %570 = urem i32 %569, 2
  %571 = icmp eq i32 %570, 0
  %572 = icmp slt i32 %567, 10
  %573 = or i1 %571, %572
  br i1 %573, label %originalBBpart2141, label %originalBB139alteredBB

originalBBpart2141:                               ; preds = %originalBB139
  br label %593, !dbg !3604

574:                                              ; preds = %originalBBpart292
  %575 = load i32, i32* @x.55
  %576 = load i32, i32* @y.56
  %577 = sub i32 %575, 1
  %578 = mul i32 %575, %577
  %579 = urem i32 %578, 2
  %580 = icmp eq i32 %579, 0
  %581 = icmp slt i32 %576, 10
  %582 = or i1 %580, %581
  br i1 %582, label %originalBB143, label %originalBB143alteredBB

originalBB143:                                    ; preds = %574, %originalBB143alteredBB
  %583 = load i8*, i8** %24, align 8, !dbg !3606
  %584 = call %struct.passwd* @getpwnam(i8* %583), !dbg !3607
  %585 = load i32, i32* @x.55
  %586 = load i32, i32* @y.56
  %587 = sub i32 %585, 1
  %588 = mul i32 %585, %587
  %589 = urem i32 %588, 2
  %590 = icmp eq i32 %589, 0
  %591 = icmp slt i32 %586, 10
  %592 = or i1 %590, %591
  br i1 %592, label %originalBBpart2145, label %originalBB143alteredBB

originalBBpart2145:                               ; preds = %originalBB143
  br label %593, !dbg !3604

593:                                              ; preds = %originalBBpart2145, %originalBBpart2141
  %594 = phi %struct.passwd* [ null, %originalBBpart2141 ], [ %584, %originalBBpart2145 ], !dbg !3604
  %595 = load i32, i32* @x.55
  %596 = load i32, i32* @y.56
  %597 = sub i32 %595, 1
  %598 = mul i32 %595, %597
  %599 = urem i32 %598, 2
  %600 = icmp eq i32 %599, 0
  %601 = icmp slt i32 %596, 10
  %602 = or i1 %600, %601
  br i1 %602, label %originalBB147, label %originalBB147alteredBB

originalBB147:                                    ; preds = %593, %originalBB147alteredBB
  store %struct.passwd* %594, %struct.passwd** %22, align 8, !dbg !3608
  %603 = load %struct.passwd*, %struct.passwd** %22, align 8, !dbg !3609
  %604 = icmp eq %struct.passwd* %603, null, !dbg !3611
  %605 = load i32, i32* @x.55
  %606 = load i32, i32* @y.56
  %607 = sub i32 %605, 1
  %608 = mul i32 %605, %607
  %609 = urem i32 %608, 2
  %610 = icmp eq i32 %609, 0
  %611 = icmp slt i32 %606, 10
  %612 = or i1 %610, %611
  br i1 %612, label %originalBBpart2149, label %originalBB147alteredBB

originalBBpart2149:                               ; preds = %originalBB147
  br i1 %604, label %613, label %772, !dbg !3612

613:                                              ; preds = %originalBBpart2149
  call void @llvm.dbg.declare(metadata i8* %30, metadata !3613, metadata !DIExpression()), !dbg !3615
  %614 = load i32, i32* @x.55
  %615 = load i32, i32* @y.56
  %616 = sub i32 %614, 1
  %617 = mul i32 %614, %616
  %618 = urem i32 %617, 2
  %619 = icmp eq i32 %618, 0
  %620 = icmp slt i32 %615, 10
  %621 = or i1 %619, %620
  br i1 %621, label %originalBB151, label %originalBB151alteredBB

originalBB151:                                    ; preds = %613, %originalBB151alteredBB
  %622 = load i8*, i8** %16, align 8, !dbg !3616
  %623 = icmp ne i8* %622, null, !dbg !3617
  %624 = load i32, i32* @x.55
  %625 = load i32, i32* @y.56
  %626 = sub i32 %624, 1
  %627 = mul i32 %624, %626
  %628 = urem i32 %627, 2
  %629 = icmp eq i32 %628, 0
  %630 = icmp slt i32 %625, 10
  %631 = or i1 %629, %630
  br i1 %631, label %originalBBpart2153, label %originalBB151alteredBB

originalBBpart2153:                               ; preds = %originalBB151
  br i1 %623, label %632, label %651, !dbg !3618

632:                                              ; preds = %originalBBpart2153
  %633 = load i32, i32* @x.55
  %634 = load i32, i32* @y.56
  %635 = sub i32 %633, 1
  %636 = mul i32 %633, %635
  %637 = urem i32 %636, 2
  %638 = icmp eq i32 %637, 0
  %639 = icmp slt i32 %634, 10
  %640 = or i1 %638, %639
  br i1 %640, label %originalBB155, label %originalBB155alteredBB

originalBB155:                                    ; preds = %632, %originalBB155alteredBB
  %641 = load i8*, i8** %25, align 8, !dbg !3619
  %642 = icmp eq i8* %641, null, !dbg !3620
  %643 = load i32, i32* @x.55
  %644 = load i32, i32* @y.56
  %645 = sub i32 %643, 1
  %646 = mul i32 %643, %645
  %647 = urem i32 %646, 2
  %648 = icmp eq i32 %647, 0
  %649 = icmp slt i32 %644, 10
  %650 = or i1 %648, %649
  br i1 %650, label %originalBBpart2157, label %originalBB155alteredBB

originalBBpart2157:                               ; preds = %originalBB155
  br label %651

651:                                              ; preds = %originalBBpart2157, %originalBBpart2153
  %652 = phi i1 [ false, %originalBBpart2153 ], [ %642, %originalBBpart2157 ], !dbg !3621
  %653 = zext i1 %652 to i8, !dbg !3615
  store i8 %653, i8* %30, align 1, !dbg !3615
  %654 = load i8, i8* %30, align 1, !dbg !3622
  %655 = trunc i8 %654 to i1, !dbg !3622
  br i1 %655, label %656, label %658, !dbg !3624

656:                                              ; preds = %651
  %657 = load i8*, i8** @parse_with_separator.E_bad_spec, align 8, !dbg !3625
  store i8* %657, i8** %21, align 8, !dbg !3627
  br label %755, !dbg !3628

658:                                              ; preds = %651
  call void @llvm.dbg.declare(metadata i64* %31, metadata !3629, metadata !DIExpression()), !dbg !3631
  %659 = load i32, i32* @x.55
  %660 = load i32, i32* @y.56
  %661 = sub i32 %659, 1
  %662 = mul i32 %659, %661
  %663 = urem i32 %662, 2
  %664 = icmp eq i32 %663, 0
  %665 = icmp slt i32 %660, 10
  %666 = or i1 %664, %665
  br i1 %666, label %originalBB159, label %originalBB159alteredBB

originalBB159:                                    ; preds = %658, %originalBB159alteredBB
  %667 = load i8*, i8** %24, align 8, !dbg !3632
  %668 = call i32 @xstrtoul(i8* %667, i8** null, i32 10, i64* %31, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3.102, i64 0, i64 0)), !dbg !3634
  %669 = icmp eq i32 %668, 0, !dbg !3635
  %670 = load i32, i32* @x.55
  %671 = load i32, i32* @y.56
  %672 = sub i32 %670, 1
  %673 = mul i32 %670, %672
  %674 = urem i32 %673, 2
  %675 = icmp eq i32 %674, 0
  %676 = icmp slt i32 %671, 10
  %677 = or i1 %675, %676
  br i1 %677, label %originalBBpart2161, label %originalBB159alteredBB

originalBBpart2161:                               ; preds = %originalBB159
  br i1 %669, label %678, label %720, !dbg !3636

678:                                              ; preds = %originalBBpart2161
  %679 = load i64, i64* %31, align 8, !dbg !3637
  %680 = icmp ule i64 %679, 4294967295, !dbg !3638
  br i1 %680, label %681, label %720, !dbg !3639

681:                                              ; preds = %678
  %682 = load i32, i32* @x.55
  %683 = load i32, i32* @y.56
  %684 = sub i32 %682, 1
  %685 = mul i32 %682, %684
  %686 = urem i32 %685, 2
  %687 = icmp eq i32 %686, 0
  %688 = icmp slt i32 %683, 10
  %689 = or i1 %687, %688
  br i1 %689, label %originalBB163, label %originalBB163alteredBB

originalBB163:                                    ; preds = %681, %originalBB163alteredBB
  %690 = load i64, i64* %31, align 8, !dbg !3640
  %691 = trunc i64 %690 to i32, !dbg !3641
  %692 = icmp ne i32 %691, -1, !dbg !3642
  %693 = load i32, i32* @x.55
  %694 = load i32, i32* @y.56
  %695 = sub i32 %693, 1
  %696 = mul i32 %693, %695
  %697 = urem i32 %696, 2
  %698 = icmp eq i32 %697, 0
  %699 = icmp slt i32 %694, 10
  %700 = or i1 %698, %699
  br i1 %700, label %originalBBpart2165, label %originalBB163alteredBB

originalBBpart2165:                               ; preds = %originalBB163
  br i1 %692, label %701, label %720, !dbg !3643

701:                                              ; preds = %originalBBpart2165
  %702 = load i32, i32* @x.55
  %703 = load i32, i32* @y.56
  %704 = sub i32 %702, 1
  %705 = mul i32 %702, %704
  %706 = urem i32 %705, 2
  %707 = icmp eq i32 %706, 0
  %708 = icmp slt i32 %703, 10
  %709 = or i1 %707, %708
  br i1 %709, label %originalBB167, label %originalBB167alteredBB

originalBB167:                                    ; preds = %701, %originalBB167alteredBB
  %710 = load i64, i64* %31, align 8, !dbg !3644
  %711 = trunc i64 %710 to i32, !dbg !3644
  store i32 %711, i32* %27, align 4, !dbg !3645
  %712 = load i32, i32* @x.55
  %713 = load i32, i32* @y.56
  %714 = sub i32 %712, 1
  %715 = mul i32 %712, %714
  %716 = urem i32 %715, 2
  %717 = icmp eq i32 %716, 0
  %718 = icmp slt i32 %713, 10
  %719 = or i1 %717, %718
  br i1 %719, label %originalBBpart2169, label %originalBB167alteredBB

originalBBpart2169:                               ; preds = %originalBB167
  br label %738, !dbg !3646

720:                                              ; preds = %originalBBpart2165, %678, %originalBBpart2161
  %721 = load i32, i32* @x.55
  %722 = load i32, i32* @y.56
  %723 = sub i32 %721, 1
  %724 = mul i32 %721, %723
  %725 = urem i32 %724, 2
  %726 = icmp eq i32 %725, 0
  %727 = icmp slt i32 %722, 10
  %728 = or i1 %726, %727
  br i1 %728, label %originalBB171, label %originalBB171alteredBB

originalBB171:                                    ; preds = %720, %originalBB171alteredBB
  %729 = load i8*, i8** @parse_with_separator.E_invalid_user, align 8, !dbg !3647
  store i8* %729, i8** %21, align 8, !dbg !3648
  %730 = load i32, i32* @x.55
  %731 = load i32, i32* @y.56
  %732 = sub i32 %730, 1
  %733 = mul i32 %730, %732
  %734 = urem i32 %733, 2
  %735 = icmp eq i32 %734, 0
  %736 = icmp slt i32 %731, 10
  %737 = or i1 %735, %736
  br i1 %737, label %originalBBpart2173, label %originalBB171alteredBB

originalBBpart2173:                               ; preds = %originalBB171
  br label %738

738:                                              ; preds = %originalBBpart2173, %originalBBpart2169
  %739 = load i32, i32* @x.55
  %740 = load i32, i32* @y.56
  %741 = sub i32 %739, 1
  %742 = mul i32 %739, %741
  %743 = urem i32 %742, 2
  %744 = icmp eq i32 %743, 0
  %745 = icmp slt i32 %740, 10
  %746 = or i1 %744, %745
  br i1 %746, label %originalBB175, label %originalBB175alteredBB

originalBB175:                                    ; preds = %738, %originalBB175alteredBB
  %747 = load i32, i32* @x.55
  %748 = load i32, i32* @y.56
  %749 = sub i32 %747, 1
  %750 = mul i32 %747, %749
  %751 = urem i32 %750, 2
  %752 = icmp eq i32 %751, 0
  %753 = icmp slt i32 %748, 10
  %754 = or i1 %752, %753
  br i1 %754, label %originalBBpart2177, label %originalBB175alteredBB

originalBBpart2177:                               ; preds = %originalBB175
  br label %755

755:                                              ; preds = %originalBBpart2177, %656
  %756 = load i32, i32* @x.55
  %757 = load i32, i32* @y.56
  %758 = sub i32 %756, 1
  %759 = mul i32 %756, %758
  %760 = urem i32 %759, 2
  %761 = icmp eq i32 %760, 0
  %762 = icmp slt i32 %757, 10
  %763 = or i1 %761, %762
  br i1 %763, label %originalBB179, label %originalBB179alteredBB

originalBB179:                                    ; preds = %755, %originalBB179alteredBB
  %764 = load i32, i32* @x.55
  %765 = load i32, i32* @y.56
  %766 = sub i32 %764, 1
  %767 = mul i32 %764, %766
  %768 = urem i32 %767, 2
  %769 = icmp eq i32 %768, 0
  %770 = icmp slt i32 %765, 10
  %771 = or i1 %769, %770
  br i1 %771, label %originalBBpart2181, label %originalBB179alteredBB

originalBBpart2181:                               ; preds = %originalBB179
  br label %898, !dbg !3649

772:                                              ; preds = %originalBBpart2149
  %773 = load i32, i32* @x.55
  %774 = load i32, i32* @y.56
  %775 = sub i32 %773, 1
  %776 = mul i32 %773, %775
  %777 = urem i32 %776, 2
  %778 = icmp eq i32 %777, 0
  %779 = icmp slt i32 %774, 10
  %780 = or i1 %778, %779
  br i1 %780, label %originalBB183, label %originalBB183alteredBB

originalBB183:                                    ; preds = %772, %originalBB183alteredBB
  %781 = load %struct.passwd*, %struct.passwd** %22, align 8, !dbg !3650
  %782 = getelementptr inbounds %struct.passwd, %struct.passwd* %781, i32 0, i32 2, !dbg !3652
  %783 = load i32, i32* %782, align 8, !dbg !3652
  store i32 %783, i32* %27, align 4, !dbg !3653
  %784 = load i8*, i8** %25, align 8, !dbg !3654
  %785 = icmp eq i8* %784, null, !dbg !3656
  %786 = load i32, i32* @x.55
  %787 = load i32, i32* @y.56
  %788 = sub i32 %786, 1
  %789 = mul i32 %786, %788
  %790 = urem i32 %789, 2
  %791 = icmp eq i32 %790, 0
  %792 = icmp slt i32 %787, 10
  %793 = or i1 %791, %792
  br i1 %793, label %originalBBpart2185, label %originalBB183alteredBB

originalBBpart2185:                               ; preds = %originalBB183
  br i1 %785, label %794, label %897, !dbg !3657

794:                                              ; preds = %originalBBpart2185
  %795 = load i32, i32* @x.55
  %796 = load i32, i32* @y.56
  %797 = sub i32 %795, 1
  %798 = mul i32 %795, %797
  %799 = urem i32 %798, 2
  %800 = icmp eq i32 %799, 0
  %801 = icmp slt i32 %796, 10
  %802 = or i1 %800, %801
  br i1 %802, label %originalBB187, label %originalBB187alteredBB

originalBB187:                                    ; preds = %794, %originalBB187alteredBB
  %803 = load i8*, i8** %16, align 8, !dbg !3658
  %804 = icmp ne i8* %803, null, !dbg !3659
  %805 = load i32, i32* @x.55
  %806 = load i32, i32* @y.56
  %807 = sub i32 %805, 1
  %808 = mul i32 %805, %807
  %809 = urem i32 %808, 2
  %810 = icmp eq i32 %809, 0
  %811 = icmp slt i32 %806, 10
  %812 = or i1 %810, %811
  br i1 %812, label %originalBBpart2189, label %originalBB187alteredBB

originalBBpart2189:                               ; preds = %originalBB187
  br i1 %804, label %813, label %897, !dbg !3660

813:                                              ; preds = %originalBBpart2189
  call void @llvm.dbg.declare(metadata [21 x i8]* %32, metadata !3661, metadata !DIExpression()), !dbg !3663
  %814 = load i32, i32* @x.55
  %815 = load i32, i32* @y.56
  %816 = sub i32 %814, 1
  %817 = mul i32 %814, %816
  %818 = urem i32 %817, 2
  %819 = icmp eq i32 %818, 0
  %820 = icmp slt i32 %815, 10
  %821 = or i1 %819, %820
  br i1 %821, label %originalBB191, label %originalBB191alteredBB

originalBB191:                                    ; preds = %813, %originalBB191alteredBB
  %822 = load %struct.passwd*, %struct.passwd** %22, align 8, !dbg !3664
  %823 = getelementptr inbounds %struct.passwd, %struct.passwd* %822, i32 0, i32 3, !dbg !3665
  %824 = load i32, i32* %823, align 4, !dbg !3665
  store i32 %824, i32* %28, align 4, !dbg !3666
  %825 = load i32, i32* %28, align 4, !dbg !3667
  %826 = call %struct.group* @getgrgid(i32 %825), !dbg !3668
  store %struct.group* %826, %struct.group** %23, align 8, !dbg !3669
  %827 = load %struct.group*, %struct.group** %23, align 8, !dbg !3670
  %828 = icmp ne %struct.group* %827, null, !dbg !3670
  %829 = load i32, i32* @x.55
  %830 = load i32, i32* @y.56
  %831 = sub i32 %829, 1
  %832 = mul i32 %829, %831
  %833 = urem i32 %832, 2
  %834 = icmp eq i32 %833, 0
  %835 = icmp slt i32 %830, 10
  %836 = or i1 %834, %835
  br i1 %836, label %originalBBpart2193, label %originalBB191alteredBB

originalBBpart2193:                               ; preds = %originalBB191
  br i1 %828, label %837, label %857, !dbg !3670

837:                                              ; preds = %originalBBpart2193
  %838 = load i32, i32* @x.55
  %839 = load i32, i32* @y.56
  %840 = sub i32 %838, 1
  %841 = mul i32 %838, %840
  %842 = urem i32 %841, 2
  %843 = icmp eq i32 %842, 0
  %844 = icmp slt i32 %839, 10
  %845 = or i1 %843, %844
  br i1 %845, label %originalBB195, label %originalBB195alteredBB

originalBB195:                                    ; preds = %837, %originalBB195alteredBB
  %846 = load %struct.group*, %struct.group** %23, align 8, !dbg !3671
  %847 = getelementptr inbounds %struct.group, %struct.group* %846, i32 0, i32 0, !dbg !3672
  %848 = load i8*, i8** %847, align 8, !dbg !3672
  %849 = load i32, i32* @x.55
  %850 = load i32, i32* @y.56
  %851 = sub i32 %849, 1
  %852 = mul i32 %849, %851
  %853 = urem i32 %852, 2
  %854 = icmp eq i32 %853, 0
  %855 = icmp slt i32 %850, 10
  %856 = or i1 %854, %855
  br i1 %856, label %originalBBpart2197, label %originalBB195alteredBB

originalBBpart2197:                               ; preds = %originalBB195
  br label %878, !dbg !3670

857:                                              ; preds = %originalBBpart2193
  %858 = load i32, i32* @x.55
  %859 = load i32, i32* @y.56
  %860 = sub i32 %858, 1
  %861 = mul i32 %858, %860
  %862 = urem i32 %861, 2
  %863 = icmp eq i32 %862, 0
  %864 = icmp slt i32 %859, 10
  %865 = or i1 %863, %864
  br i1 %865, label %originalBB199, label %originalBB199alteredBB

originalBB199:                                    ; preds = %857, %originalBB199alteredBB
  %866 = load i32, i32* %28, align 4, !dbg !3673
  %867 = zext i32 %866 to i64, !dbg !3673
  %868 = getelementptr inbounds [21 x i8], [21 x i8]* %32, i64 0, i64 0, !dbg !3674
  %869 = call i8* @umaxtostr(i64 %867, i8* %868), !dbg !3675
  %870 = load i32, i32* @x.55
  %871 = load i32, i32* @y.56
  %872 = sub i32 %870, 1
  %873 = mul i32 %870, %872
  %874 = urem i32 %873, 2
  %875 = icmp eq i32 %874, 0
  %876 = icmp slt i32 %871, 10
  %877 = or i1 %875, %876
  br i1 %877, label %originalBBpart2201, label %originalBB199alteredBB

originalBBpart2201:                               ; preds = %originalBB199
  br label %878, !dbg !3670

878:                                              ; preds = %originalBBpart2201, %originalBBpart2197
  %879 = phi i8* [ %848, %originalBBpart2197 ], [ %869, %originalBBpart2201 ], !dbg !3670
  %880 = load i32, i32* @x.55
  %881 = load i32, i32* @y.56
  %882 = sub i32 %880, 1
  %883 = mul i32 %880, %882
  %884 = urem i32 %883, 2
  %885 = icmp eq i32 %884, 0
  %886 = icmp slt i32 %881, 10
  %887 = or i1 %885, %886
  br i1 %887, label %originalBB203, label %originalBB203alteredBB

originalBB203:                                    ; preds = %878, %originalBB203alteredBB
  %888 = call noalias i8* @xstrdup(i8* %879), !dbg !3676
  store i8* %888, i8** %26, align 8, !dbg !3677
  call void @endgrent(), !dbg !3678
  %889 = load i32, i32* @x.55
  %890 = load i32, i32* @y.56
  %891 = sub i32 %889, 1
  %892 = mul i32 %889, %891
  %893 = urem i32 %892, 2
  %894 = icmp eq i32 %893, 0
  %895 = icmp slt i32 %890, 10
  %896 = or i1 %894, %895
  br i1 %896, label %originalBBpart2205, label %originalBB203alteredBB

originalBBpart2205:                               ; preds = %originalBB203
  br label %897, !dbg !3679

897:                                              ; preds = %originalBBpart2205, %originalBBpart2189, %originalBBpart2185
  br label %898

898:                                              ; preds = %897, %originalBBpart2181
  call void @endpwent(), !dbg !3680
  br label %899, !dbg !3681

899:                                              ; preds = %898, %originalBBpart268
  %900 = load i32, i32* @x.55
  %901 = load i32, i32* @y.56
  %902 = sub i32 %900, 1
  %903 = mul i32 %900, %902
  %904 = urem i32 %903, 2
  %905 = icmp eq i32 %904, 0
  %906 = icmp slt i32 %901, 10
  %907 = or i1 %905, %906
  br i1 %907, label %originalBB207, label %originalBB207alteredBB

originalBB207:                                    ; preds = %899, %originalBB207alteredBB
  %908 = load i8*, i8** %25, align 8, !dbg !3682
  %909 = icmp ne i8* %908, null, !dbg !3684
  %910 = load i32, i32* @x.55
  %911 = load i32, i32* @y.56
  %912 = sub i32 %910, 1
  %913 = mul i32 %910, %912
  %914 = urem i32 %913, 2
  %915 = icmp eq i32 %914, 0
  %916 = icmp slt i32 %911, 10
  %917 = or i1 %915, %916
  br i1 %917, label %originalBBpart2209, label %originalBB207alteredBB

originalBBpart2209:                               ; preds = %originalBB207
  br i1 %909, label %918, label %1150, !dbg !3685

918:                                              ; preds = %originalBBpart2209
  %919 = load i32, i32* @x.55
  %920 = load i32, i32* @y.56
  %921 = sub i32 %919, 1
  %922 = mul i32 %919, %921
  %923 = urem i32 %922, 2
  %924 = icmp eq i32 %923, 0
  %925 = icmp slt i32 %920, 10
  %926 = or i1 %924, %925
  br i1 %926, label %originalBB211, label %originalBB211alteredBB

originalBB211:                                    ; preds = %918, %originalBB211alteredBB
  %927 = load i8*, i8** %21, align 8, !dbg !3686
  %928 = icmp eq i8* %927, null, !dbg !3687
  %929 = load i32, i32* @x.55
  %930 = load i32, i32* @y.56
  %931 = sub i32 %929, 1
  %932 = mul i32 %929, %931
  %933 = urem i32 %932, 2
  %934 = icmp eq i32 %933, 0
  %935 = icmp slt i32 %930, 10
  %936 = or i1 %934, %935
  br i1 %936, label %originalBBpart2213, label %originalBB211alteredBB

originalBBpart2213:                               ; preds = %originalBB211
  br i1 %928, label %937, label %1150, !dbg !3688

937:                                              ; preds = %originalBBpart2213
  %938 = load i32, i32* @x.55
  %939 = load i32, i32* @y.56
  %940 = sub i32 %938, 1
  %941 = mul i32 %938, %940
  %942 = urem i32 %941, 2
  %943 = icmp eq i32 %942, 0
  %944 = icmp slt i32 %939, 10
  %945 = or i1 %943, %944
  br i1 %945, label %originalBB215, label %originalBB215alteredBB

originalBB215:                                    ; preds = %937, %originalBB215alteredBB
  %946 = load i8*, i8** %25, align 8, !dbg !3689
  %947 = load i8, i8* %946, align 1, !dbg !3691
  %948 = sext i8 %947 to i32, !dbg !3691
  %949 = icmp eq i32 %948, 43, !dbg !3692
  %950 = load i32, i32* @x.55
  %951 = load i32, i32* @y.56
  %952 = sub i32 %950, 1
  %953 = mul i32 %950, %952
  %954 = urem i32 %953, 2
  %955 = icmp eq i32 %954, 0
  %956 = icmp slt i32 %951, 10
  %957 = or i1 %955, %956
  br i1 %957, label %originalBBpart2217, label %originalBB215alteredBB

originalBBpart2217:                               ; preds = %originalBB215
  br i1 %949, label %958, label %975, !dbg !3691

958:                                              ; preds = %originalBBpart2217
  %959 = load i32, i32* @x.55
  %960 = load i32, i32* @y.56
  %961 = sub i32 %959, 1
  %962 = mul i32 %959, %961
  %963 = urem i32 %962, 2
  %964 = icmp eq i32 %963, 0
  %965 = icmp slt i32 %960, 10
  %966 = or i1 %964, %965
  br i1 %966, label %originalBB219, label %originalBB219alteredBB

originalBB219:                                    ; preds = %958, %originalBB219alteredBB
  %967 = load i32, i32* @x.55
  %968 = load i32, i32* @y.56
  %969 = sub i32 %967, 1
  %970 = mul i32 %967, %969
  %971 = urem i32 %970, 2
  %972 = icmp eq i32 %971, 0
  %973 = icmp slt i32 %968, 10
  %974 = or i1 %972, %973
  br i1 %974, label %originalBBpart2221, label %originalBB219alteredBB

originalBBpart2221:                               ; preds = %originalBB219
  br label %994, !dbg !3691

975:                                              ; preds = %originalBBpart2217
  %976 = load i32, i32* @x.55
  %977 = load i32, i32* @y.56
  %978 = sub i32 %976, 1
  %979 = mul i32 %976, %978
  %980 = urem i32 %979, 2
  %981 = icmp eq i32 %980, 0
  %982 = icmp slt i32 %977, 10
  %983 = or i1 %981, %982
  br i1 %983, label %originalBB223, label %originalBB223alteredBB

originalBB223:                                    ; preds = %975, %originalBB223alteredBB
  %984 = load i8*, i8** %25, align 8, !dbg !3693
  %985 = call %struct.group* @getgrnam(i8* %984), !dbg !3694
  %986 = load i32, i32* @x.55
  %987 = load i32, i32* @y.56
  %988 = sub i32 %986, 1
  %989 = mul i32 %986, %988
  %990 = urem i32 %989, 2
  %991 = icmp eq i32 %990, 0
  %992 = icmp slt i32 %987, 10
  %993 = or i1 %991, %992
  br i1 %993, label %originalBBpart2225, label %originalBB223alteredBB

originalBBpart2225:                               ; preds = %originalBB223
  br label %994, !dbg !3691

994:                                              ; preds = %originalBBpart2225, %originalBBpart2221
  %995 = phi %struct.group* [ null, %originalBBpart2221 ], [ %985, %originalBBpart2225 ], !dbg !3691
  store %struct.group* %995, %struct.group** %23, align 8, !dbg !3695
  %996 = load %struct.group*, %struct.group** %23, align 8, !dbg !3696
  %997 = icmp eq %struct.group* %996, null, !dbg !3698
  br i1 %997, label %998, label %1111, !dbg !3699

998:                                              ; preds = %994
  call void @llvm.dbg.declare(metadata i64* %33, metadata !3700, metadata !DIExpression()), !dbg !3702
  %999 = load i32, i32* @x.55
  %1000 = load i32, i32* @y.56
  %1001 = sub i32 %999, 1
  %1002 = mul i32 %999, %1001
  %1003 = urem i32 %1002, 2
  %1004 = icmp eq i32 %1003, 0
  %1005 = icmp slt i32 %1000, 10
  %1006 = or i1 %1004, %1005
  br i1 %1006, label %originalBB227, label %originalBB227alteredBB

originalBB227:                                    ; preds = %998, %originalBB227alteredBB
  %1007 = load i8*, i8** %25, align 8, !dbg !3703
  %1008 = call i32 @xstrtoul(i8* %1007, i8** null, i32 10, i64* %33, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3.102, i64 0, i64 0)), !dbg !3705
  %1009 = icmp eq i32 %1008, 0, !dbg !3706
  %1010 = load i32, i32* @x.55
  %1011 = load i32, i32* @y.56
  %1012 = sub i32 %1010, 1
  %1013 = mul i32 %1010, %1012
  %1014 = urem i32 %1013, 2
  %1015 = icmp eq i32 %1014, 0
  %1016 = icmp slt i32 %1011, 10
  %1017 = or i1 %1015, %1016
  br i1 %1017, label %originalBBpart2229, label %originalBB227alteredBB

originalBBpart2229:                               ; preds = %originalBB227
  br i1 %1009, label %1018, label %1076, !dbg !3707

1018:                                             ; preds = %originalBBpart2229
  %1019 = load i32, i32* @x.55
  %1020 = load i32, i32* @y.56
  %1021 = sub i32 %1019, 1
  %1022 = mul i32 %1019, %1021
  %1023 = urem i32 %1022, 2
  %1024 = icmp eq i32 %1023, 0
  %1025 = icmp slt i32 %1020, 10
  %1026 = or i1 %1024, %1025
  br i1 %1026, label %originalBB231, label %originalBB231alteredBB

originalBB231:                                    ; preds = %1018, %originalBB231alteredBB
  %1027 = load i64, i64* %33, align 8, !dbg !3708
  %1028 = icmp ule i64 %1027, 4294967295, !dbg !3709
  %1029 = load i32, i32* @x.55
  %1030 = load i32, i32* @y.56
  %1031 = sub i32 %1029, 1
  %1032 = mul i32 %1029, %1031
  %1033 = urem i32 %1032, 2
  %1034 = icmp eq i32 %1033, 0
  %1035 = icmp slt i32 %1030, 10
  %1036 = or i1 %1034, %1035
  br i1 %1036, label %originalBBpart2233, label %originalBB231alteredBB

originalBBpart2233:                               ; preds = %originalBB231
  br i1 %1028, label %1037, label %1076, !dbg !3710

1037:                                             ; preds = %originalBBpart2233
  %1038 = load i32, i32* @x.55
  %1039 = load i32, i32* @y.56
  %1040 = sub i32 %1038, 1
  %1041 = mul i32 %1038, %1040
  %1042 = urem i32 %1041, 2
  %1043 = icmp eq i32 %1042, 0
  %1044 = icmp slt i32 %1039, 10
  %1045 = or i1 %1043, %1044
  br i1 %1045, label %originalBB235, label %originalBB235alteredBB

originalBB235:                                    ; preds = %1037, %originalBB235alteredBB
  %1046 = load i64, i64* %33, align 8, !dbg !3711
  %1047 = trunc i64 %1046 to i32, !dbg !3712
  %1048 = icmp ne i32 %1047, -1, !dbg !3713
  %1049 = load i32, i32* @x.55
  %1050 = load i32, i32* @y.56
  %1051 = sub i32 %1049, 1
  %1052 = mul i32 %1049, %1051
  %1053 = urem i32 %1052, 2
  %1054 = icmp eq i32 %1053, 0
  %1055 = icmp slt i32 %1050, 10
  %1056 = or i1 %1054, %1055
  br i1 %1056, label %originalBBpart2237, label %originalBB235alteredBB

originalBBpart2237:                               ; preds = %originalBB235
  br i1 %1048, label %1057, label %1076, !dbg !3714

1057:                                             ; preds = %originalBBpart2237
  %1058 = load i32, i32* @x.55
  %1059 = load i32, i32* @y.56
  %1060 = sub i32 %1058, 1
  %1061 = mul i32 %1058, %1060
  %1062 = urem i32 %1061, 2
  %1063 = icmp eq i32 %1062, 0
  %1064 = icmp slt i32 %1059, 10
  %1065 = or i1 %1063, %1064
  br i1 %1065, label %originalBB239, label %originalBB239alteredBB

originalBB239:                                    ; preds = %1057, %originalBB239alteredBB
  %1066 = load i64, i64* %33, align 8, !dbg !3715
  %1067 = trunc i64 %1066 to i32, !dbg !3715
  store i32 %1067, i32* %28, align 4, !dbg !3716
  %1068 = load i32, i32* @x.55
  %1069 = load i32, i32* @y.56
  %1070 = sub i32 %1068, 1
  %1071 = mul i32 %1068, %1070
  %1072 = urem i32 %1071, 2
  %1073 = icmp eq i32 %1072, 0
  %1074 = icmp slt i32 %1069, 10
  %1075 = or i1 %1073, %1074
  br i1 %1075, label %originalBBpart2241, label %originalBB239alteredBB

originalBBpart2241:                               ; preds = %originalBB239
  br label %1094, !dbg !3717

1076:                                             ; preds = %originalBBpart2237, %originalBBpart2233, %originalBBpart2229
  %1077 = load i32, i32* @x.55
  %1078 = load i32, i32* @y.56
  %1079 = sub i32 %1077, 1
  %1080 = mul i32 %1077, %1079
  %1081 = urem i32 %1080, 2
  %1082 = icmp eq i32 %1081, 0
  %1083 = icmp slt i32 %1078, 10
  %1084 = or i1 %1082, %1083
  br i1 %1084, label %originalBB243, label %originalBB243alteredBB

originalBB243:                                    ; preds = %1076, %originalBB243alteredBB
  %1085 = load i8*, i8** @parse_with_separator.E_invalid_group, align 8, !dbg !3718
  store i8* %1085, i8** %21, align 8, !dbg !3719
  %1086 = load i32, i32* @x.55
  %1087 = load i32, i32* @y.56
  %1088 = sub i32 %1086, 1
  %1089 = mul i32 %1086, %1088
  %1090 = urem i32 %1089, 2
  %1091 = icmp eq i32 %1090, 0
  %1092 = icmp slt i32 %1087, 10
  %1093 = or i1 %1091, %1092
  br i1 %1093, label %originalBBpart2245, label %originalBB243alteredBB

originalBBpart2245:                               ; preds = %originalBB243
  br label %1094

1094:                                             ; preds = %originalBBpart2245, %originalBBpart2241
  %1095 = load i32, i32* @x.55
  %1096 = load i32, i32* @y.56
  %1097 = sub i32 %1095, 1
  %1098 = mul i32 %1095, %1097
  %1099 = urem i32 %1098, 2
  %1100 = icmp eq i32 %1099, 0
  %1101 = icmp slt i32 %1096, 10
  %1102 = or i1 %1100, %1101
  br i1 %1102, label %originalBB247, label %originalBB247alteredBB

originalBB247:                                    ; preds = %1094, %originalBB247alteredBB
  %1103 = load i32, i32* @x.55
  %1104 = load i32, i32* @y.56
  %1105 = sub i32 %1103, 1
  %1106 = mul i32 %1103, %1105
  %1107 = urem i32 %1106, 2
  %1108 = icmp eq i32 %1107, 0
  %1109 = icmp slt i32 %1104, 10
  %1110 = or i1 %1108, %1109
  br i1 %1110, label %originalBBpart2249, label %originalBB247alteredBB

originalBBpart2249:                               ; preds = %originalBB247
  br label %1131, !dbg !3720

1111:                                             ; preds = %994
  %1112 = load i32, i32* @x.55
  %1113 = load i32, i32* @y.56
  %1114 = sub i32 %1112, 1
  %1115 = mul i32 %1112, %1114
  %1116 = urem i32 %1115, 2
  %1117 = icmp eq i32 %1116, 0
  %1118 = icmp slt i32 %1113, 10
  %1119 = or i1 %1117, %1118
  br i1 %1119, label %originalBB251, label %originalBB251alteredBB

originalBB251:                                    ; preds = %1111, %originalBB251alteredBB
  %1120 = load %struct.group*, %struct.group** %23, align 8, !dbg !3721
  %1121 = getelementptr inbounds %struct.group, %struct.group* %1120, i32 0, i32 2, !dbg !3722
  %1122 = load i32, i32* %1121, align 8, !dbg !3722
  store i32 %1122, i32* %28, align 4, !dbg !3723
  %1123 = load i32, i32* @x.55
  %1124 = load i32, i32* @y.56
  %1125 = sub i32 %1123, 1
  %1126 = mul i32 %1123, %1125
  %1127 = urem i32 %1126, 2
  %1128 = icmp eq i32 %1127, 0
  %1129 = icmp slt i32 %1124, 10
  %1130 = or i1 %1128, %1129
  br i1 %1130, label %originalBBpart2253, label %originalBB251alteredBB

originalBBpart2253:                               ; preds = %originalBB251
  br label %1131

1131:                                             ; preds = %originalBBpart2253, %originalBBpart2249
  %1132 = load i32, i32* @x.55
  %1133 = load i32, i32* @y.56
  %1134 = sub i32 %1132, 1
  %1135 = mul i32 %1132, %1134
  %1136 = urem i32 %1135, 2
  %1137 = icmp eq i32 %1136, 0
  %1138 = icmp slt i32 %1133, 10
  %1139 = or i1 %1137, %1138
  br i1 %1139, label %originalBB255, label %originalBB255alteredBB

originalBB255:                                    ; preds = %1131, %originalBB255alteredBB
  call void @endgrent(), !dbg !3724
  %1140 = load i8*, i8** %25, align 8, !dbg !3725
  %1141 = call noalias i8* @xstrdup(i8* %1140), !dbg !3726
  store i8* %1141, i8** %26, align 8, !dbg !3727
  %1142 = load i32, i32* @x.55
  %1143 = load i32, i32* @y.56
  %1144 = sub i32 %1142, 1
  %1145 = mul i32 %1142, %1144
  %1146 = urem i32 %1145, 2
  %1147 = icmp eq i32 %1146, 0
  %1148 = icmp slt i32 %1143, 10
  %1149 = or i1 %1147, %1148
  br i1 %1149, label %originalBBpart2257, label %originalBB255alteredBB

originalBBpart2257:                               ; preds = %originalBB255
  br label %1150, !dbg !3728

1150:                                             ; preds = %originalBBpart2257, %originalBBpart2213, %originalBBpart2209
  %1151 = load i8*, i8** %21, align 8, !dbg !3729
  %1152 = icmp eq i8* %1151, null, !dbg !3731
  br i1 %1152, label %1153, label %1270, !dbg !3732

1153:                                             ; preds = %1150
  %1154 = load i32, i32* @x.55
  %1155 = load i32, i32* @y.56
  %1156 = sub i32 %1154, 1
  %1157 = mul i32 %1154, %1156
  %1158 = urem i32 %1157, 2
  %1159 = icmp eq i32 %1158, 0
  %1160 = icmp slt i32 %1155, 10
  %1161 = or i1 %1159, %1160
  br i1 %1161, label %originalBB259, label %originalBB259alteredBB

originalBB259:                                    ; preds = %1153, %originalBB259alteredBB
  %1162 = load i32, i32* %27, align 4, !dbg !3733
  %1163 = load i32*, i32** %17, align 8, !dbg !3735
  store i32 %1162, i32* %1163, align 4, !dbg !3736
  %1164 = load i32*, i32** %18, align 8, !dbg !3737
  %1165 = icmp ne i32* %1164, null, !dbg !3737
  %1166 = load i32, i32* @x.55
  %1167 = load i32, i32* @y.56
  %1168 = sub i32 %1166, 1
  %1169 = mul i32 %1166, %1168
  %1170 = urem i32 %1169, 2
  %1171 = icmp eq i32 %1170, 0
  %1172 = icmp slt i32 %1167, 10
  %1173 = or i1 %1171, %1172
  br i1 %1173, label %originalBBpart2261, label %originalBB259alteredBB

originalBBpart2261:                               ; preds = %originalBB259
  br i1 %1165, label %1174, label %1193, !dbg !3739

1174:                                             ; preds = %originalBBpart2261
  %1175 = load i32, i32* @x.55
  %1176 = load i32, i32* @y.56
  %1177 = sub i32 %1175, 1
  %1178 = mul i32 %1175, %1177
  %1179 = urem i32 %1178, 2
  %1180 = icmp eq i32 %1179, 0
  %1181 = icmp slt i32 %1176, 10
  %1182 = or i1 %1180, %1181
  br i1 %1182, label %originalBB263, label %originalBB263alteredBB

originalBB263:                                    ; preds = %1174, %originalBB263alteredBB
  %1183 = load i32, i32* %28, align 4, !dbg !3740
  %1184 = load i32*, i32** %18, align 8, !dbg !3741
  store i32 %1183, i32* %1184, align 4, !dbg !3742
  %1185 = load i32, i32* @x.55
  %1186 = load i32, i32* @y.56
  %1187 = sub i32 %1185, 1
  %1188 = mul i32 %1185, %1187
  %1189 = urem i32 %1188, 2
  %1190 = icmp eq i32 %1189, 0
  %1191 = icmp slt i32 %1186, 10
  %1192 = or i1 %1190, %1191
  br i1 %1192, label %originalBBpart2265, label %originalBB263alteredBB

originalBBpart2265:                               ; preds = %originalBB263
  br label %1193, !dbg !3743

1193:                                             ; preds = %originalBBpart2265, %originalBBpart2261
  %1194 = load i32, i32* @x.55
  %1195 = load i32, i32* @y.56
  %1196 = sub i32 %1194, 1
  %1197 = mul i32 %1194, %1196
  %1198 = urem i32 %1197, 2
  %1199 = icmp eq i32 %1198, 0
  %1200 = icmp slt i32 %1195, 10
  %1201 = or i1 %1199, %1200
  br i1 %1201, label %originalBB267, label %originalBB267alteredBB

originalBB267:                                    ; preds = %1193, %originalBB267alteredBB
  %1202 = load i8**, i8*** %19, align 8, !dbg !3744
  %1203 = icmp ne i8** %1202, null, !dbg !3744
  %1204 = load i32, i32* @x.55
  %1205 = load i32, i32* @y.56
  %1206 = sub i32 %1204, 1
  %1207 = mul i32 %1204, %1206
  %1208 = urem i32 %1207, 2
  %1209 = icmp eq i32 %1208, 0
  %1210 = icmp slt i32 %1205, 10
  %1211 = or i1 %1209, %1210
  br i1 %1211, label %originalBBpart2269, label %originalBB267alteredBB

originalBBpart2269:                               ; preds = %originalBB267
  br i1 %1203, label %1212, label %1231, !dbg !3746

1212:                                             ; preds = %originalBBpart2269
  %1213 = load i32, i32* @x.55
  %1214 = load i32, i32* @y.56
  %1215 = sub i32 %1213, 1
  %1216 = mul i32 %1213, %1215
  %1217 = urem i32 %1216, 2
  %1218 = icmp eq i32 %1217, 0
  %1219 = icmp slt i32 %1214, 10
  %1220 = or i1 %1218, %1219
  br i1 %1220, label %originalBB271, label %originalBB271alteredBB

originalBB271:                                    ; preds = %1212, %originalBB271alteredBB
  %1221 = load i8*, i8** %24, align 8, !dbg !3747
  %1222 = load i8**, i8*** %19, align 8, !dbg !3749
  store i8* %1221, i8** %1222, align 8, !dbg !3750
  store i8* null, i8** %24, align 8, !dbg !3751
  %1223 = load i32, i32* @x.55
  %1224 = load i32, i32* @y.56
  %1225 = sub i32 %1223, 1
  %1226 = mul i32 %1223, %1225
  %1227 = urem i32 %1226, 2
  %1228 = icmp eq i32 %1227, 0
  %1229 = icmp slt i32 %1224, 10
  %1230 = or i1 %1228, %1229
  br i1 %1230, label %originalBBpart2273, label %originalBB271alteredBB

originalBBpart2273:                               ; preds = %originalBB271
  br label %1231, !dbg !3752

1231:                                             ; preds = %originalBBpart2273, %originalBBpart2269
  %1232 = load i8**, i8*** %20, align 8, !dbg !3753
  %1233 = icmp ne i8** %1232, null, !dbg !3753
  br i1 %1233, label %1234, label %1253, !dbg !3755

1234:                                             ; preds = %1231
  %1235 = load i32, i32* @x.55
  %1236 = load i32, i32* @y.56
  %1237 = sub i32 %1235, 1
  %1238 = mul i32 %1235, %1237
  %1239 = urem i32 %1238, 2
  %1240 = icmp eq i32 %1239, 0
  %1241 = icmp slt i32 %1236, 10
  %1242 = or i1 %1240, %1241
  br i1 %1242, label %originalBB275, label %originalBB275alteredBB

originalBB275:                                    ; preds = %1234, %originalBB275alteredBB
  %1243 = load i8*, i8** %26, align 8, !dbg !3756
  %1244 = load i8**, i8*** %20, align 8, !dbg !3758
  store i8* %1243, i8** %1244, align 8, !dbg !3759
  store i8* null, i8** %26, align 8, !dbg !3760
  %1245 = load i32, i32* @x.55
  %1246 = load i32, i32* @y.56
  %1247 = sub i32 %1245, 1
  %1248 = mul i32 %1245, %1247
  %1249 = urem i32 %1248, 2
  %1250 = icmp eq i32 %1249, 0
  %1251 = icmp slt i32 %1246, 10
  %1252 = or i1 %1250, %1251
  br i1 %1252, label %originalBBpart2277, label %originalBB275alteredBB

originalBBpart2277:                               ; preds = %originalBB275
  br label %1253, !dbg !3761

1253:                                             ; preds = %originalBBpart2277, %1231
  %1254 = load i32, i32* @x.55
  %1255 = load i32, i32* @y.56
  %1256 = sub i32 %1254, 1
  %1257 = mul i32 %1254, %1256
  %1258 = urem i32 %1257, 2
  %1259 = icmp eq i32 %1258, 0
  %1260 = icmp slt i32 %1255, 10
  %1261 = or i1 %1259, %1260
  br i1 %1261, label %originalBB279, label %originalBB279alteredBB

originalBB279:                                    ; preds = %1253, %originalBB279alteredBB
  %1262 = load i32, i32* @x.55
  %1263 = load i32, i32* @y.56
  %1264 = sub i32 %1262, 1
  %1265 = mul i32 %1262, %1264
  %1266 = urem i32 %1265, 2
  %1267 = icmp eq i32 %1266, 0
  %1268 = icmp slt i32 %1263, 10
  %1269 = or i1 %1267, %1268
  br i1 %1269, label %originalBBpart2281, label %originalBB279alteredBB

originalBBpart2281:                               ; preds = %originalBB279
  br label %1270, !dbg !3762

1270:                                             ; preds = %originalBBpart2281, %1150
  %1271 = load i32, i32* @x.55
  %1272 = load i32, i32* @y.56
  %1273 = sub i32 %1271, 1
  %1274 = mul i32 %1271, %1273
  %1275 = urem i32 %1274, 2
  %1276 = icmp eq i32 %1275, 0
  %1277 = icmp slt i32 %1272, 10
  %1278 = or i1 %1276, %1277
  br i1 %1278, label %originalBB283, label %originalBB283alteredBB

originalBB283:                                    ; preds = %1270, %originalBB283alteredBB
  %1279 = load i8*, i8** %24, align 8, !dbg !3763
  call void @free(i8* %1279) #10, !dbg !3764
  %1280 = load i8*, i8** %26, align 8, !dbg !3765
  call void @free(i8* %1280) #10, !dbg !3766
  %1281 = load i8*, i8** %21, align 8, !dbg !3767
  %1282 = icmp ne i8* %1281, null, !dbg !3767
  %1283 = load i32, i32* @x.55
  %1284 = load i32, i32* @y.56
  %1285 = sub i32 %1283, 1
  %1286 = mul i32 %1283, %1285
  %1287 = urem i32 %1286, 2
  %1288 = icmp eq i32 %1287, 0
  %1289 = icmp slt i32 %1284, 10
  %1290 = or i1 %1288, %1289
  br i1 %1290, label %originalBBpart2285, label %originalBB283alteredBB

originalBBpart2285:                               ; preds = %originalBB283
  br i1 %1282, label %1291, label %1310, !dbg !3767

1291:                                             ; preds = %originalBBpart2285
  %1292 = load i32, i32* @x.55
  %1293 = load i32, i32* @y.56
  %1294 = sub i32 %1292, 1
  %1295 = mul i32 %1292, %1294
  %1296 = urem i32 %1295, 2
  %1297 = icmp eq i32 %1296, 0
  %1298 = icmp slt i32 %1293, 10
  %1299 = or i1 %1297, %1298
  br i1 %1299, label %originalBB287, label %originalBB287alteredBB

originalBB287:                                    ; preds = %1291, %originalBB287alteredBB
  %1300 = load i8*, i8** %21, align 8, !dbg !3768
  %1301 = call i8* @gettext(i8* %1300) #10, !dbg !3768
  %1302 = load i32, i32* @x.55
  %1303 = load i32, i32* @y.56
  %1304 = sub i32 %1302, 1
  %1305 = mul i32 %1302, %1304
  %1306 = urem i32 %1305, 2
  %1307 = icmp eq i32 %1306, 0
  %1308 = icmp slt i32 %1303, 10
  %1309 = or i1 %1307, %1308
  br i1 %1309, label %originalBBpart2289, label %originalBB287alteredBB

originalBBpart2289:                               ; preds = %originalBB287
  br label %1327, !dbg !3767

1310:                                             ; preds = %originalBBpart2285
  %1311 = load i32, i32* @x.55
  %1312 = load i32, i32* @y.56
  %1313 = sub i32 %1311, 1
  %1314 = mul i32 %1311, %1313
  %1315 = urem i32 %1314, 2
  %1316 = icmp eq i32 %1315, 0
  %1317 = icmp slt i32 %1312, 10
  %1318 = or i1 %1316, %1317
  br i1 %1318, label %originalBB291, label %originalBB291alteredBB

originalBB291:                                    ; preds = %1310, %originalBB291alteredBB
  %1319 = load i32, i32* @x.55
  %1320 = load i32, i32* @y.56
  %1321 = sub i32 %1319, 1
  %1322 = mul i32 %1319, %1321
  %1323 = urem i32 %1322, 2
  %1324 = icmp eq i32 %1323, 0
  %1325 = icmp slt i32 %1320, 10
  %1326 = or i1 %1324, %1325
  br i1 %1326, label %originalBBpart2293, label %originalBB291alteredBB

originalBBpart2293:                               ; preds = %originalBB291
  br label %1327, !dbg !3767

1327:                                             ; preds = %originalBBpart2293, %originalBBpart2289
  %1328 = phi i8* [ %1301, %originalBBpart2289 ], [ null, %originalBBpart2293 ], !dbg !3767
  %1329 = load i32, i32* @x.55
  %1330 = load i32, i32* @y.56
  %1331 = sub i32 %1329, 1
  %1332 = mul i32 %1329, %1331
  %1333 = urem i32 %1332, 2
  %1334 = icmp eq i32 %1333, 0
  %1335 = icmp slt i32 %1330, 10
  %1336 = or i1 %1334, %1335
  br i1 %1336, label %originalBB295, label %originalBB295alteredBB

originalBB295:                                    ; preds = %1327, %originalBB295alteredBB
  %1337 = load i32, i32* @x.55
  %1338 = load i32, i32* @y.56
  %1339 = sub i32 %1337, 1
  %1340 = mul i32 %1337, %1339
  %1341 = urem i32 %1340, 2
  %1342 = icmp eq i32 %1341, 0
  %1343 = icmp slt i32 %1338, 10
  %1344 = or i1 %1342, %1343
  br i1 %1344, label %originalBBpart2297, label %originalBB295alteredBB

originalBBpart2297:                               ; preds = %originalBB295
  ret i8* %1328, !dbg !3769

originalBBalteredBB:                              ; preds = %originalBB, %6
  %1345 = alloca i8*, align 8
  %1346 = alloca i8*, align 8
  %1347 = alloca i32*, align 8
  %1348 = alloca i32*, align 8
  %1349 = alloca i8**, align 8
  %1350 = alloca i8**, align 8
  %1351 = alloca i8*, align 8
  %1352 = alloca %struct.passwd*, align 8
  %1353 = alloca %struct.group*, align 8
  %1354 = alloca i8*, align 8
  %1355 = alloca i8*, align 8
  %1356 = alloca i8*, align 8
  %1357 = alloca i32, align 4
  %1358 = alloca i32, align 4
  %1359 = alloca i64, align 8
  %1360 = alloca i8, align 1
  %1361 = alloca i64, align 8
  %1362 = alloca [21 x i8], align 16
  %1363 = alloca i64, align 8
  store i8* %0, i8** %1345, align 8
  call void @llvm.dbg.declare(metadata i8** %1345, metadata !3770, metadata !DIExpression()), !dbg !3491
  store i8* %1, i8** %1346, align 8
  call void @llvm.dbg.declare(metadata i8** %1346, metadata !3780, metadata !DIExpression()), !dbg !3493
  store i32* %2, i32** %1347, align 8
  call void @llvm.dbg.declare(metadata i32** %1347, metadata !3781, metadata !DIExpression()), !dbg !3495
  store i32* %3, i32** %1348, align 8
  call void @llvm.dbg.declare(metadata i32** %1348, metadata !3782, metadata !DIExpression()), !dbg !3497
  store i8** %4, i8*** %1349, align 8
  call void @llvm.dbg.declare(metadata i8*** %1349, metadata !3783, metadata !DIExpression()), !dbg !3499
  store i8** %5, i8*** %1350, align 8
  call void @llvm.dbg.declare(metadata i8*** %1350, metadata !3784, metadata !DIExpression()), !dbg !3501
  call void @llvm.dbg.declare(metadata i8** %1351, metadata !3785, metadata !DIExpression()), !dbg !3503
  call void @llvm.dbg.declare(metadata %struct.passwd** %1352, metadata !3786, metadata !DIExpression()), !dbg !3515
  call void @llvm.dbg.declare(metadata %struct.group** %1353, metadata !3797, metadata !DIExpression()), !dbg !3524
  call void @llvm.dbg.declare(metadata i8** %1354, metadata !3805, metadata !DIExpression()), !dbg !3526
  call void @llvm.dbg.declare(metadata i8** %1355, metadata !3806, metadata !DIExpression()), !dbg !3528
  call void @llvm.dbg.declare(metadata i8** %1356, metadata !3807, metadata !DIExpression()), !dbg !3530
  store i8* null, i8** %1356, align 8, !dbg !3530
  call void @llvm.dbg.declare(metadata i32* %1357, metadata !3808, metadata !DIExpression()), !dbg !3532
  %1364 = load i32*, i32** %1347, align 8, !dbg !3533
  %1365 = load i32, i32* %1364, align 4, !dbg !3534
  store i32 %1365, i32* %1357, align 4, !dbg !3532
  call void @llvm.dbg.declare(metadata i32* %1358, metadata !3809, metadata !DIExpression()), !dbg !3536
  %1366 = load i32*, i32** %1348, align 8, !dbg !3537
  %1367 = icmp ne i32* %1366, null, !dbg !3537
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %46
  %1368 = load i32*, i32** %18, align 8, !dbg !3538
  %1369 = load i32, i32* %1368, align 4, !dbg !3539
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %65
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %82
  store i32 %83, i32* %28, align 4, !dbg !3536
  store i8* null, i8** %21, align 8, !dbg !3540
  %1370 = load i8**, i8*** %19, align 8, !dbg !3541
  %1371 = icmp ne i8** %1370, null, !dbg !3541
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %102
  %1372 = load i8**, i8*** %19, align 8, !dbg !3544
  store i8* null, i8** %1372, align 8, !dbg !3545
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %120
  %1373 = load i8**, i8*** %20, align 8, !dbg !3547
  %1374 = icmp ne i8** %1373, null, !dbg !3547
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %141
  store i8* null, i8** %24, align 8, !dbg !3553
  %1375 = load i8*, i8** %16, align 8, !dbg !3554
  %1376 = icmp eq i8* %1375, null, !dbg !3556
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %160
  %1377 = load i8*, i8** %15, align 8, !dbg !3558
  %1378 = load i8, i8* %1377, align 1, !dbg !3561
  %1379 = icmp ne i8 %1378, 0, !dbg !3561
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %180
  %1380 = load i8*, i8** %15, align 8, !dbg !3563
  %1381 = call noalias i8* @xstrdup(i8* %1380), !dbg !3564
  store i8* %1381, i8** %24, align 8, !dbg !3565
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %199
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %224
  %1382 = load i8*, i8** %15, align 8, !dbg !3578
  %1383 = load i64, i64* %29, align 8, !dbg !3580
  %_ = shl i64 %1383, 1
  %_39 = sub i64 0, %1383
  %gen = add i64 %_39, 1
  %_40 = shl i64 %1383, 1
  %_41 = sub i64 %1383, 1
  %gen42 = mul i64 %_41, 1
  %1384 = add i64 %1383, 1, !dbg !3581
  %1385 = call i8* @xmemdup(i8* %1382, i64 %1384), !dbg !3582
  store i8* %1385, i8** %24, align 8, !dbg !3583
  %1386 = load i8*, i8** %24, align 8, !dbg !3584
  %1387 = load i64, i64* %29, align 8, !dbg !3585
  %1388 = getelementptr inbounds i8, i8* %1386, i64 %1387, !dbg !3584
  store i8 0, i8* %1388, align 1, !dbg !3586
  br label %originalBB38

originalBB46alteredBB:                            ; preds = %originalBB46, %248
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %265
  %1389 = load i8*, i8** %16, align 8, !dbg !3588
  %1390 = icmp eq i8* %1389, null, !dbg !3589
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %284
  %1391 = load i8*, i8** %16, align 8, !dbg !3591
  %1392 = getelementptr inbounds i8, i8* %1391, i64 1, !dbg !3592
  %1393 = load i8, i8* %1392, align 1, !dbg !3593
  %1394 = sext i8 %1393 to i32, !dbg !3593
  %1395 = icmp eq i32 %1394, 0, !dbg !3594
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %306
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %323
  %1396 = load i8*, i8** %16, align 8, !dbg !3595
  %1397 = getelementptr inbounds i8, i8* %1396, i64 1, !dbg !3596
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %342
  store i8* %343, i8** %25, align 8, !dbg !3597
  %1398 = load i8*, i8** %24, align 8, !dbg !3598
  %1399 = icmp ne i8* %1398, null, !dbg !3600
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %362
  %1400 = load i8*, i8** %24, align 8, !dbg !3602
  %1401 = load i8, i8* %1400, align 1, !dbg !3604
  %1402 = sext i8 %1401 to i32, !dbg !3604
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %382
  %collatzVaralteredBB = alloca i32
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %399
  %1403 = load i32, i32* @inVal0
  %1404 = icmp sgt i32 %1403, 1
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %418
  store i32 82, i32* %collatzVar
  br label %originalBB82

originalBB86alteredBB:                            ; preds = %originalBB86, %435
  %1405 = load i8**, i8*** @inVal1
  %1406 = getelementptr inbounds i8*, i8** %1405, i64 1
  %1407 = load i8*, i8** %1406
  %controlealteredBB = call i32 @controle(i8* %1407, i32 43)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB86

originalBB90alteredBB:                            ; preds = %originalBB90, %455
  %1408 = load i32, i32* %collatzVar
  %1409 = icmp sgt i32 %1408, 1
  br label %originalBB90

originalBB94alteredBB:                            ; preds = %originalBB94, %474
  %1410 = load i32, i32* %collatzVar
  %_95 = shl i32 %1410, 2
  %_96 = sub i32 0, %1410
  %gen97 = add i32 %_96, 2
  %_98 = sub i32 %1410, 2
  %gen99 = mul i32 %_98, 2
  %_100 = sub i32 0, %1410
  %gen101 = add i32 %_100, 2
  %1411 = srem i32 %1410, 2
  %1412 = icmp eq i32 %1411, 0
  br label %originalBB94

originalBB105alteredBB:                           ; preds = %originalBB105, %494
  %1413 = load i32, i32* %collatzVar
  %_106 = sub i32 0, %1413
  %gen107 = add i32 %_106, 2
  %_108 = sub i32 %1413, 2
  %gen109 = mul i32 %_108, 2
  %1414 = sdiv i32 %1413, 2
  store i32 %1414, i32* %collatzVar
  br label %originalBB105

originalBB113alteredBB:                           ; preds = %originalBB113, %513
  %1415 = load i32, i32* %collatzVar
  %_114 = shl i32 %1415, 3
  %_115 = sub i32 0, %1415
  %gen116 = add i32 %_115, 3
  %_117 = sub i32 0, %1415
  %gen118 = add i32 %_117, 3
  %1416 = mul i32 %1415, 3
  %_119 = sub i32 %1416, 1
  %gen120 = mul i32 %_119, 1
  %_121 = shl i32 %1416, 1
  %_122 = sub i32 %1416, 1
  %gen123 = mul i32 %_122, 1
  %_124 = shl i32 %1416, 1
  %1417 = add i32 %1416, 1
  store i32 %1417, i32* %collatzVar
  br label %originalBB113

originalBB128alteredBB:                           ; preds = %originalBB128, %537
  %1418 = load i32, i32* %collatzVar
  %_129 = sub i32 %373, %1418
  %gen130 = mul i32 %_129, %1418
  %_131 = sub i32 0, %373
  %gen132 = add i32 %_131, %1418
  %_133 = sub i32 0, %373
  %gen134 = add i32 %_133, %1418
  %_135 = shl i32 %373, %1418
  %1419 = add i32 %373, %1418
  %1420 = icmp slt i32 %1419, 45
  br label %originalBB128

originalBB139alteredBB:                           ; preds = %originalBB139, %557
  br label %originalBB139

originalBB143alteredBB:                           ; preds = %originalBB143, %574
  %1421 = load i8*, i8** %24, align 8, !dbg !3606
  %1422 = call %struct.passwd* @getpwnam(i8* %1421), !dbg !3607
  br label %originalBB143

originalBB147alteredBB:                           ; preds = %originalBB147, %593
  store %struct.passwd* %594, %struct.passwd** %22, align 8, !dbg !3608
  %1423 = load %struct.passwd*, %struct.passwd** %22, align 8, !dbg !3609
  %1424 = icmp eq %struct.passwd* %1423, null, !dbg !3611
  br label %originalBB147

originalBB151alteredBB:                           ; preds = %originalBB151, %613
  %1425 = load i8*, i8** %16, align 8, !dbg !3616
  %1426 = icmp ne i8* %1425, null, !dbg !3617
  br label %originalBB151

originalBB155alteredBB:                           ; preds = %originalBB155, %632
  %1427 = load i8*, i8** %25, align 8, !dbg !3619
  %1428 = icmp eq i8* %1427, null, !dbg !3620
  br label %originalBB155

originalBB159alteredBB:                           ; preds = %originalBB159, %658
  %1429 = load i8*, i8** %24, align 8, !dbg !3632
  %1430 = call i32 @xstrtoul(i8* %1429, i8** null, i32 10, i64* %31, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3.102, i64 0, i64 0)), !dbg !3634
  %1431 = icmp eq i32 %1430, 0, !dbg !3635
  br label %originalBB159

originalBB163alteredBB:                           ; preds = %originalBB163, %681
  %1432 = load i64, i64* %31, align 8, !dbg !3640
  %1433 = trunc i64 %1432 to i32, !dbg !3641
  %1434 = icmp ne i32 %1433, -1, !dbg !3642
  br label %originalBB163

originalBB167alteredBB:                           ; preds = %originalBB167, %701
  %1435 = load i64, i64* %31, align 8, !dbg !3644
  %1436 = trunc i64 %1435 to i32, !dbg !3644
  store i32 %1436, i32* %27, align 4, !dbg !3645
  br label %originalBB167

originalBB171alteredBB:                           ; preds = %originalBB171, %720
  %1437 = load i8*, i8** @parse_with_separator.E_invalid_user, align 8, !dbg !3647
  store i8* %1437, i8** %21, align 8, !dbg !3648
  br label %originalBB171

originalBB175alteredBB:                           ; preds = %originalBB175, %738
  br label %originalBB175

originalBB179alteredBB:                           ; preds = %originalBB179, %755
  br label %originalBB179

originalBB183alteredBB:                           ; preds = %originalBB183, %772
  %1438 = load %struct.passwd*, %struct.passwd** %22, align 8, !dbg !3650
  %1439 = getelementptr inbounds %struct.passwd, %struct.passwd* %1438, i32 0, i32 2, !dbg !3652
  %1440 = load i32, i32* %1439, align 8, !dbg !3652
  store i32 %1440, i32* %27, align 4, !dbg !3653
  %1441 = load i8*, i8** %25, align 8, !dbg !3654
  %1442 = icmp eq i8* %1441, null, !dbg !3656
  br label %originalBB183

originalBB187alteredBB:                           ; preds = %originalBB187, %794
  %1443 = load i8*, i8** %16, align 8, !dbg !3658
  %1444 = icmp ne i8* %1443, null, !dbg !3659
  br label %originalBB187

originalBB191alteredBB:                           ; preds = %originalBB191, %813
  %1445 = load %struct.passwd*, %struct.passwd** %22, align 8, !dbg !3664
  %1446 = getelementptr inbounds %struct.passwd, %struct.passwd* %1445, i32 0, i32 3, !dbg !3665
  %1447 = load i32, i32* %1446, align 4, !dbg !3665
  store i32 %1447, i32* %28, align 4, !dbg !3666
  %1448 = load i32, i32* %28, align 4, !dbg !3667
  %1449 = call %struct.group* @getgrgid(i32 %1448), !dbg !3668
  store %struct.group* %1449, %struct.group** %23, align 8, !dbg !3669
  %1450 = load %struct.group*, %struct.group** %23, align 8, !dbg !3670
  %1451 = icmp ne %struct.group* %1450, null, !dbg !3670
  br label %originalBB191

originalBB195alteredBB:                           ; preds = %originalBB195, %837
  %1452 = load %struct.group*, %struct.group** %23, align 8, !dbg !3671
  %1453 = getelementptr inbounds %struct.group, %struct.group* %1452, i32 0, i32 0, !dbg !3672
  %1454 = load i8*, i8** %1453, align 8, !dbg !3672
  br label %originalBB195

originalBB199alteredBB:                           ; preds = %originalBB199, %857
  %1455 = load i32, i32* %28, align 4, !dbg !3673
  %1456 = zext i32 %1455 to i64, !dbg !3673
  %1457 = getelementptr inbounds [21 x i8], [21 x i8]* %32, i64 0, i64 0, !dbg !3674
  %1458 = call i8* @umaxtostr(i64 %1456, i8* %1457), !dbg !3675
  br label %originalBB199

originalBB203alteredBB:                           ; preds = %originalBB203, %878
  %1459 = call noalias i8* @xstrdup(i8* %879), !dbg !3676
  store i8* %1459, i8** %26, align 8, !dbg !3677
  call void @endgrent(), !dbg !3678
  br label %originalBB203

originalBB207alteredBB:                           ; preds = %originalBB207, %899
  %1460 = load i8*, i8** %25, align 8, !dbg !3682
  %1461 = icmp ne i8* %1460, null, !dbg !3684
  br label %originalBB207

originalBB211alteredBB:                           ; preds = %originalBB211, %918
  %1462 = load i8*, i8** %21, align 8, !dbg !3686
  %1463 = icmp eq i8* %1462, null, !dbg !3687
  br label %originalBB211

originalBB215alteredBB:                           ; preds = %originalBB215, %937
  %1464 = load i8*, i8** %25, align 8, !dbg !3689
  %1465 = load i8, i8* %1464, align 1, !dbg !3691
  %1466 = sext i8 %1465 to i32, !dbg !3691
  %1467 = icmp eq i32 %1466, 43, !dbg !3692
  br label %originalBB215

originalBB219alteredBB:                           ; preds = %originalBB219, %958
  br label %originalBB219

originalBB223alteredBB:                           ; preds = %originalBB223, %975
  %1468 = load i8*, i8** %25, align 8, !dbg !3693
  %1469 = call %struct.group* @getgrnam(i8* %1468), !dbg !3694
  br label %originalBB223

originalBB227alteredBB:                           ; preds = %originalBB227, %998
  %1470 = load i8*, i8** %25, align 8, !dbg !3703
  %1471 = call i32 @xstrtoul(i8* %1470, i8** null, i32 10, i64* %33, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3.102, i64 0, i64 0)), !dbg !3705
  %1472 = icmp eq i32 %1471, 0, !dbg !3706
  br label %originalBB227

originalBB231alteredBB:                           ; preds = %originalBB231, %1018
  %1473 = load i64, i64* %33, align 8, !dbg !3708
  %1474 = icmp ule i64 %1473, 4294967295, !dbg !3709
  br label %originalBB231

originalBB235alteredBB:                           ; preds = %originalBB235, %1037
  %1475 = load i64, i64* %33, align 8, !dbg !3711
  %1476 = trunc i64 %1475 to i32, !dbg !3712
  %1477 = icmp ne i32 %1476, -1, !dbg !3713
  br label %originalBB235

originalBB239alteredBB:                           ; preds = %originalBB239, %1057
  %1478 = load i64, i64* %33, align 8, !dbg !3715
  %1479 = trunc i64 %1478 to i32, !dbg !3715
  store i32 %1479, i32* %28, align 4, !dbg !3716
  br label %originalBB239

originalBB243alteredBB:                           ; preds = %originalBB243, %1076
  %1480 = load i8*, i8** @parse_with_separator.E_invalid_group, align 8, !dbg !3718
  store i8* %1480, i8** %21, align 8, !dbg !3719
  br label %originalBB243

originalBB247alteredBB:                           ; preds = %originalBB247, %1094
  br label %originalBB247

originalBB251alteredBB:                           ; preds = %originalBB251, %1111
  %1481 = load %struct.group*, %struct.group** %23, align 8, !dbg !3721
  %1482 = getelementptr inbounds %struct.group, %struct.group* %1481, i32 0, i32 2, !dbg !3722
  %1483 = load i32, i32* %1482, align 8, !dbg !3722
  store i32 %1483, i32* %28, align 4, !dbg !3723
  br label %originalBB251

originalBB255alteredBB:                           ; preds = %originalBB255, %1131
  call void @endgrent(), !dbg !3724
  %1484 = load i8*, i8** %25, align 8, !dbg !3725
  %1485 = call noalias i8* @xstrdup(i8* %1484), !dbg !3726
  store i8* %1485, i8** %26, align 8, !dbg !3727
  br label %originalBB255

originalBB259alteredBB:                           ; preds = %originalBB259, %1153
  %1486 = load i32, i32* %27, align 4, !dbg !3733
  %1487 = load i32*, i32** %17, align 8, !dbg !3735
  store i32 %1486, i32* %1487, align 4, !dbg !3736
  %1488 = load i32*, i32** %18, align 8, !dbg !3737
  %1489 = icmp ne i32* %1488, null, !dbg !3737
  br label %originalBB259

originalBB263alteredBB:                           ; preds = %originalBB263, %1174
  %1490 = load i32, i32* %28, align 4, !dbg !3740
  %1491 = load i32*, i32** %18, align 8, !dbg !3741
  store i32 %1490, i32* %1491, align 4, !dbg !3742
  br label %originalBB263

originalBB267alteredBB:                           ; preds = %originalBB267, %1193
  %1492 = load i8**, i8*** %19, align 8, !dbg !3744
  %1493 = icmp ne i8** %1492, null, !dbg !3744
  br label %originalBB267

originalBB271alteredBB:                           ; preds = %originalBB271, %1212
  %1494 = load i8*, i8** %24, align 8, !dbg !3747
  %1495 = load i8**, i8*** %19, align 8, !dbg !3749
  store i8* %1494, i8** %1495, align 8, !dbg !3750
  store i8* null, i8** %24, align 8, !dbg !3751
  br label %originalBB271

originalBB275alteredBB:                           ; preds = %originalBB275, %1234
  %1496 = load i8*, i8** %26, align 8, !dbg !3756
  %1497 = load i8**, i8*** %20, align 8, !dbg !3758
  store i8* %1496, i8** %1497, align 8, !dbg !3759
  store i8* null, i8** %26, align 8, !dbg !3760
  br label %originalBB275

originalBB279alteredBB:                           ; preds = %originalBB279, %1253
  br label %originalBB279

originalBB283alteredBB:                           ; preds = %originalBB283, %1270
  %1498 = load i8*, i8** %24, align 8, !dbg !3763
  call void @free(i8* %1498) #10, !dbg !3764
  %1499 = load i8*, i8** %26, align 8, !dbg !3765
  call void @free(i8* %1499) #10, !dbg !3766
  %1500 = load i8*, i8** %21, align 8, !dbg !3767
  %1501 = icmp ne i8* %1500, null, !dbg !3767
  br label %originalBB283

originalBB287alteredBB:                           ; preds = %originalBB287, %1291
  %1502 = load i8*, i8** %21, align 8, !dbg !3768
  %1503 = call i8* @gettext(i8* %1502) #10, !dbg !3768
  br label %originalBB287

originalBB291alteredBB:                           ; preds = %originalBB291, %1310
  br label %originalBB291

originalBB295alteredBB:                           ; preds = %originalBB295, %1327
  br label %originalBB295
}

declare dso_local %struct.passwd* @getpwnam(i8*) #3

declare dso_local void @endgrent() #3

declare dso_local void @endpwent() #3

declare dso_local %struct.group* @getgrnam(i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_arn(%struct._IO_FILE*, i8*, i8*, i8*, i8**, i64) #4 !dbg !3810 {
  %7 = load i32, i32* @x.57
  %8 = load i32, i32* @y.58
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %6, %originalBBalteredBB
  %15 = alloca %struct._IO_FILE*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8**, align 8
  %20 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %15, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %15, metadata !3868, metadata !DIExpression()), !dbg !3869
  store i8* %1, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3870, metadata !DIExpression()), !dbg !3871
  store i8* %2, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !3872, metadata !DIExpression()), !dbg !3873
  store i8* %3, i8** %18, align 8
  call void @llvm.dbg.declare(metadata i8** %18, metadata !3874, metadata !DIExpression()), !dbg !3875
  store i8** %4, i8*** %19, align 8
  call void @llvm.dbg.declare(metadata i8*** %19, metadata !3876, metadata !DIExpression()), !dbg !3877
  store i64 %5, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !3878, metadata !DIExpression()), !dbg !3879
  %21 = load i8*, i8** %16, align 8, !dbg !3880
  %22 = icmp ne i8* %21, null, !dbg !3880
  %23 = load i32, i32* @x.57
  %24 = load i32, i32* @y.58
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %53, !dbg !3882

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.57
  %33 = load i32, i32* @y.58
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3883
  %41 = load i8*, i8** %16, align 8, !dbg !3884
  %42 = load i8*, i8** %17, align 8, !dbg !3885
  %43 = load i8*, i8** %18, align 8, !dbg !3886
  %44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.106, i64 0, i64 0), i8* %41, i8* %42, i8* %43), !dbg !3887
  %45 = load i32, i32* @x.57
  %46 = load i32, i32* @y.58
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %58, !dbg !3887

53:                                               ; preds = %originalBBpart2
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3888
  %55 = load i8*, i8** %17, align 8, !dbg !3889
  %56 = load i8*, i8** %18, align 8, !dbg !3890
  %57 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.107, i64 0, i64 0), i8* %55, i8* %56), !dbg !3891
  br label %58

58:                                               ; preds = %53, %originalBBpart24
  %59 = load i32, i32* @x.57
  %60 = load i32, i32* @y.58
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %58, %originalBB6alteredBB
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3892
  %68 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.108, i64 0, i64 0)) #10, !dbg !3893
  %69 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %67, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %68, i32 2020), !dbg !3894
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3895
  %71 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.109, i64 0, i64 0), %struct._IO_FILE* %70), !dbg !3895
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3896
  %73 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.110, i64 0, i64 0)) #10, !dbg !3897
  %74 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* %73, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.111, i64 0, i64 0)), !dbg !3898
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3899
  %76 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.109, i64 0, i64 0), %struct._IO_FILE* %75), !dbg !3899
  %77 = load i64, i64* %20, align 8, !dbg !3900
  %78 = load i32, i32* @x.57
  %79 = load i32, i32* @y.58
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  switch i64 %77, label %370 [
    i64 0, label %86
    i64 1, label %103
    i64 2, label %110
    i64 3, label %120
    i64 4, label %149
    i64 5, label %165
    i64 6, label %200
    i64 7, label %238
    i64 8, label %279
    i64 9, label %323
  ], !dbg !3901

86:                                               ; preds = %originalBBpart28
  %87 = load i32, i32* @x.57
  %88 = load i32, i32* @y.58
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %86, %originalBB10alteredBB
  %95 = load i32, i32* @x.57
  %96 = load i32, i32* @y.58
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %417, !dbg !3902

103:                                              ; preds = %originalBBpart28
  %104 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3904
  %105 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.112, i64 0, i64 0)) #10, !dbg !3905
  %106 = load i8**, i8*** %19, align 8, !dbg !3906
  %107 = getelementptr inbounds i8*, i8** %106, i64 0, !dbg !3906
  %108 = load i8*, i8** %107, align 8, !dbg !3906
  %109 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %104, i8* %105, i8* %108), !dbg !3907
  br label %417, !dbg !3908

110:                                              ; preds = %originalBBpart28
  %111 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3909
  %112 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.113, i64 0, i64 0)) #10, !dbg !3910
  %113 = load i8**, i8*** %19, align 8, !dbg !3911
  %114 = getelementptr inbounds i8*, i8** %113, i64 0, !dbg !3911
  %115 = load i8*, i8** %114, align 8, !dbg !3911
  %116 = load i8**, i8*** %19, align 8, !dbg !3912
  %117 = getelementptr inbounds i8*, i8** %116, i64 1, !dbg !3912
  %118 = load i8*, i8** %117, align 8, !dbg !3912
  %119 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %111, i8* %112, i8* %115, i8* %118), !dbg !3913
  br label %417, !dbg !3914

120:                                              ; preds = %originalBBpart28
  %121 = load i32, i32* @x.57
  %122 = load i32, i32* @y.58
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %120, %originalBB14alteredBB
  %129 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3915
  %130 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.114, i64 0, i64 0)) #10, !dbg !3916
  %131 = load i8**, i8*** %19, align 8, !dbg !3917
  %132 = getelementptr inbounds i8*, i8** %131, i64 0, !dbg !3917
  %133 = load i8*, i8** %132, align 8, !dbg !3917
  %134 = load i8**, i8*** %19, align 8, !dbg !3918
  %135 = getelementptr inbounds i8*, i8** %134, i64 1, !dbg !3918
  %136 = load i8*, i8** %135, align 8, !dbg !3918
  %137 = load i8**, i8*** %19, align 8, !dbg !3919
  %138 = getelementptr inbounds i8*, i8** %137, i64 2, !dbg !3919
  %139 = load i8*, i8** %138, align 8, !dbg !3919
  %140 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %129, i8* %130, i8* %133, i8* %136, i8* %139), !dbg !3920
  %141 = load i32, i32* @x.57
  %142 = load i32, i32* @y.58
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %417, !dbg !3921

149:                                              ; preds = %originalBBpart28
  %150 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3922
  %151 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.115, i64 0, i64 0)) #10, !dbg !3923
  %152 = load i8**, i8*** %19, align 8, !dbg !3924
  %153 = getelementptr inbounds i8*, i8** %152, i64 0, !dbg !3924
  %154 = load i8*, i8** %153, align 8, !dbg !3924
  %155 = load i8**, i8*** %19, align 8, !dbg !3925
  %156 = getelementptr inbounds i8*, i8** %155, i64 1, !dbg !3925
  %157 = load i8*, i8** %156, align 8, !dbg !3925
  %158 = load i8**, i8*** %19, align 8, !dbg !3926
  %159 = getelementptr inbounds i8*, i8** %158, i64 2, !dbg !3926
  %160 = load i8*, i8** %159, align 8, !dbg !3926
  %161 = load i8**, i8*** %19, align 8, !dbg !3927
  %162 = getelementptr inbounds i8*, i8** %161, i64 3, !dbg !3927
  %163 = load i8*, i8** %162, align 8, !dbg !3927
  %164 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %150, i8* %151, i8* %154, i8* %157, i8* %160, i8* %163), !dbg !3928
  br label %417, !dbg !3929

165:                                              ; preds = %originalBBpart28
  %166 = load i32, i32* @x.57
  %167 = load i32, i32* @y.58
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %165, %originalBB18alteredBB
  %174 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3930
  %175 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.116, i64 0, i64 0)) #10, !dbg !3931
  %176 = load i8**, i8*** %19, align 8, !dbg !3932
  %177 = getelementptr inbounds i8*, i8** %176, i64 0, !dbg !3932
  %178 = load i8*, i8** %177, align 8, !dbg !3932
  %179 = load i8**, i8*** %19, align 8, !dbg !3933
  %180 = getelementptr inbounds i8*, i8** %179, i64 1, !dbg !3933
  %181 = load i8*, i8** %180, align 8, !dbg !3933
  %182 = load i8**, i8*** %19, align 8, !dbg !3934
  %183 = getelementptr inbounds i8*, i8** %182, i64 2, !dbg !3934
  %184 = load i8*, i8** %183, align 8, !dbg !3934
  %185 = load i8**, i8*** %19, align 8, !dbg !3935
  %186 = getelementptr inbounds i8*, i8** %185, i64 3, !dbg !3935
  %187 = load i8*, i8** %186, align 8, !dbg !3935
  %188 = load i8**, i8*** %19, align 8, !dbg !3936
  %189 = getelementptr inbounds i8*, i8** %188, i64 4, !dbg !3936
  %190 = load i8*, i8** %189, align 8, !dbg !3936
  %191 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %174, i8* %175, i8* %178, i8* %181, i8* %184, i8* %187, i8* %190), !dbg !3937
  %192 = load i32, i32* @x.57
  %193 = load i32, i32* @y.58
  %194 = sub i32 %192, 1
  %195 = mul i32 %192, %194
  %196 = urem i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %197, %198
  br i1 %199, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %417, !dbg !3938

200:                                              ; preds = %originalBBpart28
  %201 = load i32, i32* @x.57
  %202 = load i32, i32* @y.58
  %203 = sub i32 %201, 1
  %204 = mul i32 %201, %203
  %205 = urem i32 %204, 2
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %202, 10
  %208 = or i1 %206, %207
  br i1 %208, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %200, %originalBB22alteredBB
  %209 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3939
  %210 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.117, i64 0, i64 0)) #10, !dbg !3940
  %211 = load i8**, i8*** %19, align 8, !dbg !3941
  %212 = getelementptr inbounds i8*, i8** %211, i64 0, !dbg !3941
  %213 = load i8*, i8** %212, align 8, !dbg !3941
  %214 = load i8**, i8*** %19, align 8, !dbg !3942
  %215 = getelementptr inbounds i8*, i8** %214, i64 1, !dbg !3942
  %216 = load i8*, i8** %215, align 8, !dbg !3942
  %217 = load i8**, i8*** %19, align 8, !dbg !3943
  %218 = getelementptr inbounds i8*, i8** %217, i64 2, !dbg !3943
  %219 = load i8*, i8** %218, align 8, !dbg !3943
  %220 = load i8**, i8*** %19, align 8, !dbg !3944
  %221 = getelementptr inbounds i8*, i8** %220, i64 3, !dbg !3944
  %222 = load i8*, i8** %221, align 8, !dbg !3944
  %223 = load i8**, i8*** %19, align 8, !dbg !3945
  %224 = getelementptr inbounds i8*, i8** %223, i64 4, !dbg !3945
  %225 = load i8*, i8** %224, align 8, !dbg !3945
  %226 = load i8**, i8*** %19, align 8, !dbg !3946
  %227 = getelementptr inbounds i8*, i8** %226, i64 5, !dbg !3946
  %228 = load i8*, i8** %227, align 8, !dbg !3946
  %229 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %209, i8* %210, i8* %213, i8* %216, i8* %219, i8* %222, i8* %225, i8* %228), !dbg !3947
  %230 = load i32, i32* @x.57
  %231 = load i32, i32* @y.58
  %232 = sub i32 %230, 1
  %233 = mul i32 %230, %232
  %234 = urem i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = icmp slt i32 %231, 10
  %237 = or i1 %235, %236
  br i1 %237, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %417, !dbg !3948

238:                                              ; preds = %originalBBpart28
  %239 = load i32, i32* @x.57
  %240 = load i32, i32* @y.58
  %241 = sub i32 %239, 1
  %242 = mul i32 %239, %241
  %243 = urem i32 %242, 2
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %244, %245
  br i1 %246, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %238, %originalBB26alteredBB
  %247 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3949
  %248 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.118, i64 0, i64 0)) #10, !dbg !3950
  %249 = load i8**, i8*** %19, align 8, !dbg !3951
  %250 = getelementptr inbounds i8*, i8** %249, i64 0, !dbg !3951
  %251 = load i8*, i8** %250, align 8, !dbg !3951
  %252 = load i8**, i8*** %19, align 8, !dbg !3952
  %253 = getelementptr inbounds i8*, i8** %252, i64 1, !dbg !3952
  %254 = load i8*, i8** %253, align 8, !dbg !3952
  %255 = load i8**, i8*** %19, align 8, !dbg !3953
  %256 = getelementptr inbounds i8*, i8** %255, i64 2, !dbg !3953
  %257 = load i8*, i8** %256, align 8, !dbg !3953
  %258 = load i8**, i8*** %19, align 8, !dbg !3954
  %259 = getelementptr inbounds i8*, i8** %258, i64 3, !dbg !3954
  %260 = load i8*, i8** %259, align 8, !dbg !3954
  %261 = load i8**, i8*** %19, align 8, !dbg !3955
  %262 = getelementptr inbounds i8*, i8** %261, i64 4, !dbg !3955
  %263 = load i8*, i8** %262, align 8, !dbg !3955
  %264 = load i8**, i8*** %19, align 8, !dbg !3956
  %265 = getelementptr inbounds i8*, i8** %264, i64 5, !dbg !3956
  %266 = load i8*, i8** %265, align 8, !dbg !3956
  %267 = load i8**, i8*** %19, align 8, !dbg !3957
  %268 = getelementptr inbounds i8*, i8** %267, i64 6, !dbg !3957
  %269 = load i8*, i8** %268, align 8, !dbg !3957
  %270 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %247, i8* %248, i8* %251, i8* %254, i8* %257, i8* %260, i8* %263, i8* %266, i8* %269), !dbg !3958
  %271 = load i32, i32* @x.57
  %272 = load i32, i32* @y.58
  %273 = sub i32 %271, 1
  %274 = mul i32 %271, %273
  %275 = urem i32 %274, 2
  %276 = icmp eq i32 %275, 0
  %277 = icmp slt i32 %272, 10
  %278 = or i1 %276, %277
  br i1 %278, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %417, !dbg !3959

279:                                              ; preds = %originalBBpart28
  %280 = load i32, i32* @x.57
  %281 = load i32, i32* @y.58
  %282 = sub i32 %280, 1
  %283 = mul i32 %280, %282
  %284 = urem i32 %283, 2
  %285 = icmp eq i32 %284, 0
  %286 = icmp slt i32 %281, 10
  %287 = or i1 %285, %286
  br i1 %287, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %279, %originalBB30alteredBB
  %288 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3960
  %289 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.119, i64 0, i64 0)) #10, !dbg !3961
  %290 = load i8**, i8*** %19, align 8, !dbg !3962
  %291 = getelementptr inbounds i8*, i8** %290, i64 0, !dbg !3962
  %292 = load i8*, i8** %291, align 8, !dbg !3962
  %293 = load i8**, i8*** %19, align 8, !dbg !3963
  %294 = getelementptr inbounds i8*, i8** %293, i64 1, !dbg !3963
  %295 = load i8*, i8** %294, align 8, !dbg !3963
  %296 = load i8**, i8*** %19, align 8, !dbg !3964
  %297 = getelementptr inbounds i8*, i8** %296, i64 2, !dbg !3964
  %298 = load i8*, i8** %297, align 8, !dbg !3964
  %299 = load i8**, i8*** %19, align 8, !dbg !3965
  %300 = getelementptr inbounds i8*, i8** %299, i64 3, !dbg !3965
  %301 = load i8*, i8** %300, align 8, !dbg !3965
  %302 = load i8**, i8*** %19, align 8, !dbg !3966
  %303 = getelementptr inbounds i8*, i8** %302, i64 4, !dbg !3966
  %304 = load i8*, i8** %303, align 8, !dbg !3966
  %305 = load i8**, i8*** %19, align 8, !dbg !3967
  %306 = getelementptr inbounds i8*, i8** %305, i64 5, !dbg !3967
  %307 = load i8*, i8** %306, align 8, !dbg !3967
  %308 = load i8**, i8*** %19, align 8, !dbg !3968
  %309 = getelementptr inbounds i8*, i8** %308, i64 6, !dbg !3968
  %310 = load i8*, i8** %309, align 8, !dbg !3968
  %311 = load i8**, i8*** %19, align 8, !dbg !3969
  %312 = getelementptr inbounds i8*, i8** %311, i64 7, !dbg !3969
  %313 = load i8*, i8** %312, align 8, !dbg !3969
  %314 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %288, i8* %289, i8* %292, i8* %295, i8* %298, i8* %301, i8* %304, i8* %307, i8* %310, i8* %313), !dbg !3970
  %315 = load i32, i32* @x.57
  %316 = load i32, i32* @y.58
  %317 = sub i32 %315, 1
  %318 = mul i32 %315, %317
  %319 = urem i32 %318, 2
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %320, %321
  br i1 %322, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %417, !dbg !3971

323:                                              ; preds = %originalBBpart28
  %324 = load i32, i32* @x.57
  %325 = load i32, i32* @y.58
  %326 = sub i32 %324, 1
  %327 = mul i32 %324, %326
  %328 = urem i32 %327, 2
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %329, %330
  br i1 %331, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %323, %originalBB34alteredBB
  %332 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3972
  %333 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.120, i64 0, i64 0)) #10, !dbg !3973
  %334 = load i8**, i8*** %19, align 8, !dbg !3974
  %335 = getelementptr inbounds i8*, i8** %334, i64 0, !dbg !3974
  %336 = load i8*, i8** %335, align 8, !dbg !3974
  %337 = load i8**, i8*** %19, align 8, !dbg !3975
  %338 = getelementptr inbounds i8*, i8** %337, i64 1, !dbg !3975
  %339 = load i8*, i8** %338, align 8, !dbg !3975
  %340 = load i8**, i8*** %19, align 8, !dbg !3976
  %341 = getelementptr inbounds i8*, i8** %340, i64 2, !dbg !3976
  %342 = load i8*, i8** %341, align 8, !dbg !3976
  %343 = load i8**, i8*** %19, align 8, !dbg !3977
  %344 = getelementptr inbounds i8*, i8** %343, i64 3, !dbg !3977
  %345 = load i8*, i8** %344, align 8, !dbg !3977
  %346 = load i8**, i8*** %19, align 8, !dbg !3978
  %347 = getelementptr inbounds i8*, i8** %346, i64 4, !dbg !3978
  %348 = load i8*, i8** %347, align 8, !dbg !3978
  %349 = load i8**, i8*** %19, align 8, !dbg !3979
  %350 = getelementptr inbounds i8*, i8** %349, i64 5, !dbg !3979
  %351 = load i8*, i8** %350, align 8, !dbg !3979
  %352 = load i8**, i8*** %19, align 8, !dbg !3980
  %353 = getelementptr inbounds i8*, i8** %352, i64 6, !dbg !3980
  %354 = load i8*, i8** %353, align 8, !dbg !3980
  %355 = load i8**, i8*** %19, align 8, !dbg !3981
  %356 = getelementptr inbounds i8*, i8** %355, i64 7, !dbg !3981
  %357 = load i8*, i8** %356, align 8, !dbg !3981
  %358 = load i8**, i8*** %19, align 8, !dbg !3982
  %359 = getelementptr inbounds i8*, i8** %358, i64 8, !dbg !3982
  %360 = load i8*, i8** %359, align 8, !dbg !3982
  %361 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %332, i8* %333, i8* %336, i8* %339, i8* %342, i8* %345, i8* %348, i8* %351, i8* %354, i8* %357, i8* %360), !dbg !3983
  %362 = load i32, i32* @x.57
  %363 = load i32, i32* @y.58
  %364 = sub i32 %362, 1
  %365 = mul i32 %362, %364
  %366 = urem i32 %365, 2
  %367 = icmp eq i32 %366, 0
  %368 = icmp slt i32 %363, 10
  %369 = or i1 %367, %368
  br i1 %369, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %417, !dbg !3984

370:                                              ; preds = %originalBBpart28
  %371 = load i32, i32* @x.57
  %372 = load i32, i32* @y.58
  %373 = sub i32 %371, 1
  %374 = mul i32 %371, %373
  %375 = urem i32 %374, 2
  %376 = icmp eq i32 %375, 0
  %377 = icmp slt i32 %372, 10
  %378 = or i1 %376, %377
  br i1 %378, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %370, %originalBB38alteredBB
  %379 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3985
  %380 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.121, i64 0, i64 0)) #10, !dbg !3986
  %381 = load i8**, i8*** %19, align 8, !dbg !3987
  %382 = getelementptr inbounds i8*, i8** %381, i64 0, !dbg !3987
  %383 = load i8*, i8** %382, align 8, !dbg !3987
  %384 = load i8**, i8*** %19, align 8, !dbg !3988
  %385 = getelementptr inbounds i8*, i8** %384, i64 1, !dbg !3988
  %386 = load i8*, i8** %385, align 8, !dbg !3988
  %387 = load i8**, i8*** %19, align 8, !dbg !3989
  %388 = getelementptr inbounds i8*, i8** %387, i64 2, !dbg !3989
  %389 = load i8*, i8** %388, align 8, !dbg !3989
  %390 = load i8**, i8*** %19, align 8, !dbg !3990
  %391 = getelementptr inbounds i8*, i8** %390, i64 3, !dbg !3990
  %392 = load i8*, i8** %391, align 8, !dbg !3990
  %393 = load i8**, i8*** %19, align 8, !dbg !3991
  %394 = getelementptr inbounds i8*, i8** %393, i64 4, !dbg !3991
  %395 = load i8*, i8** %394, align 8, !dbg !3991
  %396 = load i8**, i8*** %19, align 8, !dbg !3992
  %397 = getelementptr inbounds i8*, i8** %396, i64 5, !dbg !3992
  %398 = load i8*, i8** %397, align 8, !dbg !3992
  %399 = load i8**, i8*** %19, align 8, !dbg !3993
  %400 = getelementptr inbounds i8*, i8** %399, i64 6, !dbg !3993
  %401 = load i8*, i8** %400, align 8, !dbg !3993
  %402 = load i8**, i8*** %19, align 8, !dbg !3994
  %403 = getelementptr inbounds i8*, i8** %402, i64 7, !dbg !3994
  %404 = load i8*, i8** %403, align 8, !dbg !3994
  %405 = load i8**, i8*** %19, align 8, !dbg !3995
  %406 = getelementptr inbounds i8*, i8** %405, i64 8, !dbg !3995
  %407 = load i8*, i8** %406, align 8, !dbg !3995
  %408 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %379, i8* %380, i8* %383, i8* %386, i8* %389, i8* %392, i8* %395, i8* %398, i8* %401, i8* %404, i8* %407), !dbg !3996
  %409 = load i32, i32* @x.57
  %410 = load i32, i32* @y.58
  %411 = sub i32 %409, 1
  %412 = mul i32 %409, %411
  %413 = urem i32 %412, 2
  %414 = icmp eq i32 %413, 0
  %415 = icmp slt i32 %410, 10
  %416 = or i1 %414, %415
  br i1 %416, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %417, !dbg !3997

417:                                              ; preds = %originalBBpart240, %originalBBpart236, %originalBBpart232, %originalBBpart228, %originalBBpart224, %originalBBpart220, %149, %originalBBpart216, %110, %103, %originalBBpart212
  %418 = load i32, i32* @x.57
  %419 = load i32, i32* @y.58
  %420 = sub i32 %418, 1
  %421 = mul i32 %418, %420
  %422 = urem i32 %421, 2
  %423 = icmp eq i32 %422, 0
  %424 = icmp slt i32 %419, 10
  %425 = or i1 %423, %424
  br i1 %425, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %417, %originalBB42alteredBB
  %426 = load i32, i32* @x.57
  %427 = load i32, i32* @y.58
  %428 = sub i32 %426, 1
  %429 = mul i32 %426, %428
  %430 = urem i32 %429, 2
  %431 = icmp eq i32 %430, 0
  %432 = icmp slt i32 %427, 10
  %433 = or i1 %431, %432
  br i1 %433, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  ret void, !dbg !3998

originalBBalteredBB:                              ; preds = %originalBB, %6
  %434 = alloca %struct._IO_FILE*, align 8
  %435 = alloca i8*, align 8
  %436 = alloca i8*, align 8
  %437 = alloca i8*, align 8
  %438 = alloca i8**, align 8
  %439 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %434, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %434, metadata !3999, metadata !DIExpression()), !dbg !3869
  store i8* %1, i8** %435, align 8
  call void @llvm.dbg.declare(metadata i8** %435, metadata !4038, metadata !DIExpression()), !dbg !3871
  store i8* %2, i8** %436, align 8
  call void @llvm.dbg.declare(metadata i8** %436, metadata !4039, metadata !DIExpression()), !dbg !3873
  store i8* %3, i8** %437, align 8
  call void @llvm.dbg.declare(metadata i8** %437, metadata !4040, metadata !DIExpression()), !dbg !3875
  store i8** %4, i8*** %438, align 8
  call void @llvm.dbg.declare(metadata i8*** %438, metadata !4041, metadata !DIExpression()), !dbg !3877
  store i64 %5, i64* %439, align 8
  call void @llvm.dbg.declare(metadata i64* %439, metadata !4042, metadata !DIExpression()), !dbg !3879
  %440 = load i8*, i8** %435, align 8, !dbg !3880
  %441 = icmp ne i8* %440, null, !dbg !3880
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  %442 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3883
  %443 = load i8*, i8** %16, align 8, !dbg !3884
  %444 = load i8*, i8** %17, align 8, !dbg !3885
  %445 = load i8*, i8** %18, align 8, !dbg !3886
  %446 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %442, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.106, i64 0, i64 0), i8* %443, i8* %444, i8* %445), !dbg !3887
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %58
  %447 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3892
  %448 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.108, i64 0, i64 0)) #10, !dbg !3893
  %449 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %447, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %448, i32 2020), !dbg !3894
  %450 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3895
  %451 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.109, i64 0, i64 0), %struct._IO_FILE* %450), !dbg !3895
  %452 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3896
  %453 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.110, i64 0, i64 0)) #10, !dbg !3897
  %454 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %452, i8* %453, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.111, i64 0, i64 0)), !dbg !3898
  %455 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3899
  %456 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.109, i64 0, i64 0), %struct._IO_FILE* %455), !dbg !3899
  %457 = load i64, i64* %20, align 8, !dbg !3900
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %86
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %120
  %458 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3915
  %459 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.114, i64 0, i64 0)) #10, !dbg !3916
  %460 = load i8**, i8*** %19, align 8, !dbg !3917
  %461 = getelementptr inbounds i8*, i8** %460, i64 0, !dbg !3917
  %462 = load i8*, i8** %461, align 8, !dbg !3917
  %463 = load i8**, i8*** %19, align 8, !dbg !3918
  %464 = getelementptr inbounds i8*, i8** %463, i64 1, !dbg !3918
  %465 = load i8*, i8** %464, align 8, !dbg !3918
  %466 = load i8**, i8*** %19, align 8, !dbg !3919
  %467 = getelementptr inbounds i8*, i8** %466, i64 2, !dbg !3919
  %468 = load i8*, i8** %467, align 8, !dbg !3919
  %469 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %458, i8* %459, i8* %462, i8* %465, i8* %468), !dbg !3920
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %165
  %470 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3930
  %471 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.116, i64 0, i64 0)) #10, !dbg !3931
  %472 = load i8**, i8*** %19, align 8, !dbg !3932
  %473 = getelementptr inbounds i8*, i8** %472, i64 0, !dbg !3932
  %474 = load i8*, i8** %473, align 8, !dbg !3932
  %475 = load i8**, i8*** %19, align 8, !dbg !3933
  %476 = getelementptr inbounds i8*, i8** %475, i64 1, !dbg !3933
  %477 = load i8*, i8** %476, align 8, !dbg !3933
  %478 = load i8**, i8*** %19, align 8, !dbg !3934
  %479 = getelementptr inbounds i8*, i8** %478, i64 2, !dbg !3934
  %480 = load i8*, i8** %479, align 8, !dbg !3934
  %481 = load i8**, i8*** %19, align 8, !dbg !3935
  %482 = getelementptr inbounds i8*, i8** %481, i64 3, !dbg !3935
  %483 = load i8*, i8** %482, align 8, !dbg !3935
  %484 = load i8**, i8*** %19, align 8, !dbg !3936
  %485 = getelementptr inbounds i8*, i8** %484, i64 4, !dbg !3936
  %486 = load i8*, i8** %485, align 8, !dbg !3936
  %487 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %470, i8* %471, i8* %474, i8* %477, i8* %480, i8* %483, i8* %486), !dbg !3937
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %200
  %488 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3939
  %489 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.117, i64 0, i64 0)) #10, !dbg !3940
  %490 = load i8**, i8*** %19, align 8, !dbg !3941
  %491 = getelementptr inbounds i8*, i8** %490, i64 0, !dbg !3941
  %492 = load i8*, i8** %491, align 8, !dbg !3941
  %493 = load i8**, i8*** %19, align 8, !dbg !3942
  %494 = getelementptr inbounds i8*, i8** %493, i64 1, !dbg !3942
  %495 = load i8*, i8** %494, align 8, !dbg !3942
  %496 = load i8**, i8*** %19, align 8, !dbg !3943
  %497 = getelementptr inbounds i8*, i8** %496, i64 2, !dbg !3943
  %498 = load i8*, i8** %497, align 8, !dbg !3943
  %499 = load i8**, i8*** %19, align 8, !dbg !3944
  %500 = getelementptr inbounds i8*, i8** %499, i64 3, !dbg !3944
  %501 = load i8*, i8** %500, align 8, !dbg !3944
  %502 = load i8**, i8*** %19, align 8, !dbg !3945
  %503 = getelementptr inbounds i8*, i8** %502, i64 4, !dbg !3945
  %504 = load i8*, i8** %503, align 8, !dbg !3945
  %505 = load i8**, i8*** %19, align 8, !dbg !3946
  %506 = getelementptr inbounds i8*, i8** %505, i64 5, !dbg !3946
  %507 = load i8*, i8** %506, align 8, !dbg !3946
  %508 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %488, i8* %489, i8* %492, i8* %495, i8* %498, i8* %501, i8* %504, i8* %507), !dbg !3947
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %238
  %509 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3949
  %510 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.118, i64 0, i64 0)) #10, !dbg !3950
  %511 = load i8**, i8*** %19, align 8, !dbg !3951
  %512 = getelementptr inbounds i8*, i8** %511, i64 0, !dbg !3951
  %513 = load i8*, i8** %512, align 8, !dbg !3951
  %514 = load i8**, i8*** %19, align 8, !dbg !3952
  %515 = getelementptr inbounds i8*, i8** %514, i64 1, !dbg !3952
  %516 = load i8*, i8** %515, align 8, !dbg !3952
  %517 = load i8**, i8*** %19, align 8, !dbg !3953
  %518 = getelementptr inbounds i8*, i8** %517, i64 2, !dbg !3953
  %519 = load i8*, i8** %518, align 8, !dbg !3953
  %520 = load i8**, i8*** %19, align 8, !dbg !3954
  %521 = getelementptr inbounds i8*, i8** %520, i64 3, !dbg !3954
  %522 = load i8*, i8** %521, align 8, !dbg !3954
  %523 = load i8**, i8*** %19, align 8, !dbg !3955
  %524 = getelementptr inbounds i8*, i8** %523, i64 4, !dbg !3955
  %525 = load i8*, i8** %524, align 8, !dbg !3955
  %526 = load i8**, i8*** %19, align 8, !dbg !3956
  %527 = getelementptr inbounds i8*, i8** %526, i64 5, !dbg !3956
  %528 = load i8*, i8** %527, align 8, !dbg !3956
  %529 = load i8**, i8*** %19, align 8, !dbg !3957
  %530 = getelementptr inbounds i8*, i8** %529, i64 6, !dbg !3957
  %531 = load i8*, i8** %530, align 8, !dbg !3957
  %532 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %509, i8* %510, i8* %513, i8* %516, i8* %519, i8* %522, i8* %525, i8* %528, i8* %531), !dbg !3958
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %279
  %533 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3960
  %534 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.119, i64 0, i64 0)) #10, !dbg !3961
  %535 = load i8**, i8*** %19, align 8, !dbg !3962
  %536 = getelementptr inbounds i8*, i8** %535, i64 0, !dbg !3962
  %537 = load i8*, i8** %536, align 8, !dbg !3962
  %538 = load i8**, i8*** %19, align 8, !dbg !3963
  %539 = getelementptr inbounds i8*, i8** %538, i64 1, !dbg !3963
  %540 = load i8*, i8** %539, align 8, !dbg !3963
  %541 = load i8**, i8*** %19, align 8, !dbg !3964
  %542 = getelementptr inbounds i8*, i8** %541, i64 2, !dbg !3964
  %543 = load i8*, i8** %542, align 8, !dbg !3964
  %544 = load i8**, i8*** %19, align 8, !dbg !3965
  %545 = getelementptr inbounds i8*, i8** %544, i64 3, !dbg !3965
  %546 = load i8*, i8** %545, align 8, !dbg !3965
  %547 = load i8**, i8*** %19, align 8, !dbg !3966
  %548 = getelementptr inbounds i8*, i8** %547, i64 4, !dbg !3966
  %549 = load i8*, i8** %548, align 8, !dbg !3966
  %550 = load i8**, i8*** %19, align 8, !dbg !3967
  %551 = getelementptr inbounds i8*, i8** %550, i64 5, !dbg !3967
  %552 = load i8*, i8** %551, align 8, !dbg !3967
  %553 = load i8**, i8*** %19, align 8, !dbg !3968
  %554 = getelementptr inbounds i8*, i8** %553, i64 6, !dbg !3968
  %555 = load i8*, i8** %554, align 8, !dbg !3968
  %556 = load i8**, i8*** %19, align 8, !dbg !3969
  %557 = getelementptr inbounds i8*, i8** %556, i64 7, !dbg !3969
  %558 = load i8*, i8** %557, align 8, !dbg !3969
  %559 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %533, i8* %534, i8* %537, i8* %540, i8* %543, i8* %546, i8* %549, i8* %552, i8* %555, i8* %558), !dbg !3970
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %323
  %560 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3972
  %561 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.120, i64 0, i64 0)) #10, !dbg !3973
  %562 = load i8**, i8*** %19, align 8, !dbg !3974
  %563 = getelementptr inbounds i8*, i8** %562, i64 0, !dbg !3974
  %564 = load i8*, i8** %563, align 8, !dbg !3974
  %565 = load i8**, i8*** %19, align 8, !dbg !3975
  %566 = getelementptr inbounds i8*, i8** %565, i64 1, !dbg !3975
  %567 = load i8*, i8** %566, align 8, !dbg !3975
  %568 = load i8**, i8*** %19, align 8, !dbg !3976
  %569 = getelementptr inbounds i8*, i8** %568, i64 2, !dbg !3976
  %570 = load i8*, i8** %569, align 8, !dbg !3976
  %571 = load i8**, i8*** %19, align 8, !dbg !3977
  %572 = getelementptr inbounds i8*, i8** %571, i64 3, !dbg !3977
  %573 = load i8*, i8** %572, align 8, !dbg !3977
  %574 = load i8**, i8*** %19, align 8, !dbg !3978
  %575 = getelementptr inbounds i8*, i8** %574, i64 4, !dbg !3978
  %576 = load i8*, i8** %575, align 8, !dbg !3978
  %577 = load i8**, i8*** %19, align 8, !dbg !3979
  %578 = getelementptr inbounds i8*, i8** %577, i64 5, !dbg !3979
  %579 = load i8*, i8** %578, align 8, !dbg !3979
  %580 = load i8**, i8*** %19, align 8, !dbg !3980
  %581 = getelementptr inbounds i8*, i8** %580, i64 6, !dbg !3980
  %582 = load i8*, i8** %581, align 8, !dbg !3980
  %583 = load i8**, i8*** %19, align 8, !dbg !3981
  %584 = getelementptr inbounds i8*, i8** %583, i64 7, !dbg !3981
  %585 = load i8*, i8** %584, align 8, !dbg !3981
  %586 = load i8**, i8*** %19, align 8, !dbg !3982
  %587 = getelementptr inbounds i8*, i8** %586, i64 8, !dbg !3982
  %588 = load i8*, i8** %587, align 8, !dbg !3982
  %589 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %560, i8* %561, i8* %564, i8* %567, i8* %570, i8* %573, i8* %576, i8* %579, i8* %582, i8* %585, i8* %588), !dbg !3983
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %370
  %590 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3985
  %591 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.121, i64 0, i64 0)) #10, !dbg !3986
  %592 = load i8**, i8*** %19, align 8, !dbg !3987
  %593 = getelementptr inbounds i8*, i8** %592, i64 0, !dbg !3987
  %594 = load i8*, i8** %593, align 8, !dbg !3987
  %595 = load i8**, i8*** %19, align 8, !dbg !3988
  %596 = getelementptr inbounds i8*, i8** %595, i64 1, !dbg !3988
  %597 = load i8*, i8** %596, align 8, !dbg !3988
  %598 = load i8**, i8*** %19, align 8, !dbg !3989
  %599 = getelementptr inbounds i8*, i8** %598, i64 2, !dbg !3989
  %600 = load i8*, i8** %599, align 8, !dbg !3989
  %601 = load i8**, i8*** %19, align 8, !dbg !3990
  %602 = getelementptr inbounds i8*, i8** %601, i64 3, !dbg !3990
  %603 = load i8*, i8** %602, align 8, !dbg !3990
  %604 = load i8**, i8*** %19, align 8, !dbg !3991
  %605 = getelementptr inbounds i8*, i8** %604, i64 4, !dbg !3991
  %606 = load i8*, i8** %605, align 8, !dbg !3991
  %607 = load i8**, i8*** %19, align 8, !dbg !3992
  %608 = getelementptr inbounds i8*, i8** %607, i64 5, !dbg !3992
  %609 = load i8*, i8** %608, align 8, !dbg !3992
  %610 = load i8**, i8*** %19, align 8, !dbg !3993
  %611 = getelementptr inbounds i8*, i8** %610, i64 6, !dbg !3993
  %612 = load i8*, i8** %611, align 8, !dbg !3993
  %613 = load i8**, i8*** %19, align 8, !dbg !3994
  %614 = getelementptr inbounds i8*, i8** %613, i64 7, !dbg !3994
  %615 = load i8*, i8** %614, align 8, !dbg !3994
  %616 = load i8**, i8*** %19, align 8, !dbg !3995
  %617 = getelementptr inbounds i8*, i8** %616, i64 8, !dbg !3995
  %618 = load i8*, i8** %617, align 8, !dbg !3995
  %619 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %590, i8* %591, i8* %594, i8* %597, i8* %600, i8* %603, i8* %606, i8* %609, i8* %612, i8* %615, i8* %618), !dbg !3996
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %417
  br label %originalBB42
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_va(%struct._IO_FILE*, i8*, i8*, i8*, %struct.__va_list_tag*) #4 !dbg !4043 {
  %6 = load i32, i32* @x.59
  %7 = load i32, i32* @y.60
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = alloca %struct._IO_FILE*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca %struct.__va_list_tag*, align 8
  %19 = alloca i64, align 8
  %20 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %14, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %14, metadata !4053, metadata !DIExpression()), !dbg !4054
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !4055, metadata !DIExpression()), !dbg !4056
  store i8* %2, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !4057, metadata !DIExpression()), !dbg !4058
  store i8* %3, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !4059, metadata !DIExpression()), !dbg !4060
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %18, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %18, metadata !4061, metadata !DIExpression()), !dbg !4062
  call void @llvm.dbg.declare(metadata i64* %19, metadata !4063, metadata !DIExpression()), !dbg !4064
  call void @llvm.dbg.declare(metadata [10 x i8*]* %20, metadata !4065, metadata !DIExpression()), !dbg !4067
  store i64 0, i64* %19, align 8, !dbg !4068
  %21 = load i32, i32* @x.59
  %22 = load i32, i32* @y.60
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %29, !dbg !4070

29:                                               ; preds = %originalBBpart246, %originalBBpart2
  %30 = load i32, i32* @x.59
  %31 = load i32, i32* @y.60
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i64, i64* %19, align 8, !dbg !4071
  %39 = icmp ult i64 %38, 10, !dbg !4073
  %40 = load i32, i32* @x.59
  %41 = load i32, i32* @y.60
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %39, label %48, label %134, !dbg !4074

48:                                               ; preds = %originalBBpart24
  %49 = load i32, i32* @x.59
  %50 = load i32, i32* @y.60
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !4075
  %58 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 0, !dbg !4075
  %59 = load i32, i32* %58, align 8, !dbg !4075
  %60 = icmp ule i32 %59, 40, !dbg !4075
  %61 = load i32, i32* @x.59
  %62 = load i32, i32* @y.60
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %60, label %69, label %91, !dbg !4075

69:                                               ; preds = %originalBBpart28
  %70 = load i32, i32* @x.59
  %71 = load i32, i32* @y.60
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %69, %originalBB10alteredBB
  %78 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !4075
  %79 = load i8*, i8** %78, align 8, !dbg !4075
  %80 = getelementptr i8, i8* %79, i32 %59, !dbg !4075
  %81 = bitcast i8* %80 to i8**, !dbg !4075
  %82 = add i32 %59, 8, !dbg !4075
  store i32 %82, i32* %58, align 8, !dbg !4075
  %83 = load i32, i32* @x.59
  %84 = load i32, i32* @y.60
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart219, label %originalBB10alteredBB

originalBBpart219:                                ; preds = %originalBB10
  br label %112, !dbg !4075

91:                                               ; preds = %originalBBpart28
  %92 = load i32, i32* @x.59
  %93 = load i32, i32* @y.60
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB21, label %originalBB21alteredBB

originalBB21:                                     ; preds = %91, %originalBB21alteredBB
  %100 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !4075
  %101 = load i8*, i8** %100, align 8, !dbg !4075
  %102 = bitcast i8* %101 to i8**, !dbg !4075
  %103 = getelementptr i8, i8* %101, i32 8, !dbg !4075
  store i8* %103, i8** %100, align 8, !dbg !4075
  %104 = load i32, i32* @x.59
  %105 = load i32, i32* @y.60
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart223, label %originalBB21alteredBB

originalBBpart223:                                ; preds = %originalBB21
  br label %112, !dbg !4075

112:                                              ; preds = %originalBBpart223, %originalBBpart219
  %113 = phi i8** [ %81, %originalBBpart219 ], [ %102, %originalBBpart223 ], !dbg !4075
  %114 = load i32, i32* @x.59
  %115 = load i32, i32* @y.60
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %112, %originalBB25alteredBB
  %122 = load i8*, i8** %113, align 8, !dbg !4075
  %123 = load i64, i64* %19, align 8, !dbg !4076
  %124 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %123, !dbg !4077
  store i8* %122, i8** %124, align 8, !dbg !4078
  %125 = icmp ne i8* %122, null, !dbg !4079
  %126 = load i32, i32* @x.59
  %127 = load i32, i32* @y.60
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br label %134

134:                                              ; preds = %originalBBpart227, %originalBBpart24
  %135 = phi i1 [ false, %originalBBpart24 ], [ %125, %originalBBpart227 ], !dbg !4080
  %136 = load i32, i32* @x.59
  %137 = load i32, i32* @y.60
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %134, %originalBB29alteredBB
  %144 = load i32, i32* @x.59
  %145 = load i32, i32* @y.60
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br i1 %135, label %152, label %188, !dbg !4081

152:                                              ; preds = %originalBBpart231
  %153 = load i32, i32* @x.59
  %154 = load i32, i32* @y.60
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %152, %originalBB33alteredBB
  %161 = load i32, i32* @x.59
  %162 = load i32, i32* @y.60
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br label %169, !dbg !4081

169:                                              ; preds = %originalBBpart235
  %170 = load i32, i32* @x.59
  %171 = load i32, i32* @y.60
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %169, %originalBB37alteredBB
  %178 = load i64, i64* %19, align 8, !dbg !4082
  %179 = add i64 %178, 1, !dbg !4082
  store i64 %179, i64* %19, align 8, !dbg !4082
  %180 = load i32, i32* @x.59
  %181 = load i32, i32* @y.60
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBBpart246, label %originalBB37alteredBB

originalBBpart246:                                ; preds = %originalBB37
  br label %29, !dbg !4083, !llvm.loop !4084

188:                                              ; preds = %originalBBpart231
  %189 = load i32, i32* @x.59
  %190 = load i32, i32* @y.60
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBB48, label %originalBB48alteredBB

originalBB48:                                     ; preds = %188, %originalBB48alteredBB
  %197 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !4086
  %198 = load i8*, i8** %15, align 8, !dbg !4087
  %199 = load i8*, i8** %16, align 8, !dbg !4088
  %200 = load i8*, i8** %17, align 8, !dbg !4089
  %201 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !4090
  %202 = load i64, i64* %19, align 8, !dbg !4091
  call void @version_etc_arn(%struct._IO_FILE* %197, i8* %198, i8* %199, i8* %200, i8** %201, i64 %202), !dbg !4092
  %203 = load i32, i32* @x.59
  %204 = load i32, i32* @y.60
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBBpart250, label %originalBB48alteredBB

originalBBpart250:                                ; preds = %originalBB48
  ret void, !dbg !4093

originalBBalteredBB:                              ; preds = %originalBB, %5
  %211 = alloca %struct._IO_FILE*, align 8
  %212 = alloca i8*, align 8
  %213 = alloca i8*, align 8
  %214 = alloca i8*, align 8
  %215 = alloca %struct.__va_list_tag*, align 8
  %216 = alloca i64, align 8
  %217 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %211, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %211, metadata !4094, metadata !DIExpression()), !dbg !4054
  store i8* %1, i8** %212, align 8
  call void @llvm.dbg.declare(metadata i8** %212, metadata !4140, metadata !DIExpression()), !dbg !4056
  store i8* %2, i8** %213, align 8
  call void @llvm.dbg.declare(metadata i8** %213, metadata !4141, metadata !DIExpression()), !dbg !4058
  store i8* %3, i8** %214, align 8
  call void @llvm.dbg.declare(metadata i8** %214, metadata !4142, metadata !DIExpression()), !dbg !4060
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %215, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %215, metadata !4143, metadata !DIExpression()), !dbg !4062
  call void @llvm.dbg.declare(metadata i64* %216, metadata !4144, metadata !DIExpression()), !dbg !4064
  call void @llvm.dbg.declare(metadata [10 x i8*]* %217, metadata !4145, metadata !DIExpression()), !dbg !4067
  store i64 0, i64* %216, align 8, !dbg !4068
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %218 = load i64, i64* %19, align 8, !dbg !4071
  %219 = icmp ult i64 %218, 10, !dbg !4073
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %220 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !4075
  %221 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %220, i32 0, i32 0, !dbg !4075
  %222 = load i32, i32* %221, align 8, !dbg !4075
  %223 = icmp ule i32 %222, 40, !dbg !4075
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %69
  %224 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !4075
  %225 = load i8*, i8** %224, align 8, !dbg !4075
  %226 = getelementptr i8, i8* %225, i32 %59, !dbg !4075
  %227 = bitcast i8* %226 to i8**, !dbg !4075
  %_ = sub i32 %59, 8
  %gen = mul i32 %_, 8
  %_11 = shl i32 %59, 8
  %_12 = sub i32 %59, 8
  %gen13 = mul i32 %_12, 8
  %_14 = sub i32 0, %59
  %gen15 = add i32 %_14, 8
  %_16 = sub i32 %59, 8
  %gen17 = mul i32 %_16, 8
  %228 = add i32 %59, 8, !dbg !4075
  store i32 %228, i32* %58, align 8, !dbg !4075
  br label %originalBB10

originalBB21alteredBB:                            ; preds = %originalBB21, %91
  %229 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !4075
  %230 = load i8*, i8** %229, align 8, !dbg !4075
  %231 = bitcast i8* %230 to i8**, !dbg !4075
  %232 = getelementptr i8, i8* %230, i32 8, !dbg !4075
  store i8* %232, i8** %229, align 8, !dbg !4075
  br label %originalBB21

originalBB25alteredBB:                            ; preds = %originalBB25, %112
  %233 = load i8*, i8** %113, align 8, !dbg !4075
  %234 = load i64, i64* %19, align 8, !dbg !4076
  %235 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %234, !dbg !4077
  store i8* %233, i8** %235, align 8, !dbg !4078
  %236 = icmp ne i8* %233, null, !dbg !4079
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %134
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %152
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %169
  %237 = load i64, i64* %19, align 8, !dbg !4082
  %_38 = shl i64 %237, 1
  %_39 = shl i64 %237, 1
  %_40 = sub i64 0, %237
  %gen41 = add i64 %_40, 1
  %_42 = shl i64 %237, 1
  %_43 = shl i64 %237, 1
  %_44 = shl i64 %237, 1
  %238 = add i64 %237, 1, !dbg !4082
  store i64 %238, i64* %19, align 8, !dbg !4082
  br label %originalBB37

originalBB48alteredBB:                            ; preds = %originalBB48, %188
  %239 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !4086
  %240 = load i8*, i8** %15, align 8, !dbg !4087
  %241 = load i8*, i8** %16, align 8, !dbg !4088
  %242 = load i8*, i8** %17, align 8, !dbg !4089
  %243 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !4090
  %244 = load i64, i64* %19, align 8, !dbg !4091
  call void @version_etc_arn(%struct._IO_FILE* %239, i8* %240, i8* %241, i8* %242, i8** %243, i64 %244), !dbg !4092
  br label %originalBB48
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc(%struct._IO_FILE*, i8*, i8*, i8*, ...) #4 !dbg !4146 {
  %5 = load i32, i32* @x.61
  %6 = load i32, i32* @y.62
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !4149, metadata !DIExpression()), !dbg !4150
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !4151, metadata !DIExpression()), !dbg !4152
  store i8* %2, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !4153, metadata !DIExpression()), !dbg !4154
  store i8* %3, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !4155, metadata !DIExpression()), !dbg !4156
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %17, metadata !4157, metadata !DIExpression()), !dbg !4163
  %18 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !4164
  %19 = bitcast %struct.__va_list_tag* %18 to i8*, !dbg !4164
  call void @llvm.va_start(i8* %19), !dbg !4164
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4165
  %21 = load i8*, i8** %14, align 8, !dbg !4166
  %22 = load i8*, i8** %15, align 8, !dbg !4167
  %23 = load i8*, i8** %16, align 8, !dbg !4168
  %24 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !4169
  call void @version_etc_va(%struct._IO_FILE* %20, i8* %21, i8* %22, i8* %23, %struct.__va_list_tag* %24), !dbg !4170
  %25 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !4171
  %26 = bitcast %struct.__va_list_tag* %25 to i8*, !dbg !4171
  call void @llvm.va_end(i8* %26), !dbg !4171
  %27 = load i32, i32* @x.61
  %28 = load i32, i32* @y.62
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !4172

originalBBalteredBB:                              ; preds = %originalBB, %4
  %35 = alloca %struct._IO_FILE*, align 8
  %36 = alloca i8*, align 8
  %37 = alloca i8*, align 8
  %38 = alloca i8*, align 8
  %39 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %35, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %35, metadata !4173, metadata !DIExpression()), !dbg !4150
  store i8* %1, i8** %36, align 8
  call void @llvm.dbg.declare(metadata i8** %36, metadata !4212, metadata !DIExpression()), !dbg !4152
  store i8* %2, i8** %37, align 8
  call void @llvm.dbg.declare(metadata i8** %37, metadata !4213, metadata !DIExpression()), !dbg !4154
  store i8* %3, i8** %38, align 8
  call void @llvm.dbg.declare(metadata i8** %38, metadata !4214, metadata !DIExpression()), !dbg !4156
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %39, metadata !4215, metadata !DIExpression()), !dbg !4163
  %40 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !4164
  %41 = bitcast %struct.__va_list_tag* %40 to i8*, !dbg !4164
  call void @llvm.va_start(i8* %41), !dbg !4164
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %35, align 8, !dbg !4165
  %43 = load i8*, i8** %36, align 8, !dbg !4166
  %44 = load i8*, i8** %37, align 8, !dbg !4167
  %45 = load i8*, i8** %38, align 8, !dbg !4168
  %46 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !4169
  call void @version_etc_va(%struct._IO_FILE* %42, i8* %43, i8* %44, i8* %45, %struct.__va_list_tag* %46), !dbg !4170
  %47 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !4171
  %48 = bitcast %struct.__va_list_tag* %47 to i8*, !dbg !4171
  call void @llvm.va_end(i8* %48), !dbg !4171
  br label %originalBB
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xmalloc(i64) #4 !dbg !4226 {
  %2 = load i32, i32* @x.63
  %3 = load i32, i32* @y.64
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !4230, metadata !DIExpression()), !dbg !4231
  call void @llvm.dbg.declare(metadata i8** %11, metadata !4232, metadata !DIExpression()), !dbg !4233
  %12 = load i64, i64* %10, align 8, !dbg !4234
  %13 = call noalias i8* @malloc(i64 %12) #10, !dbg !4235
  store i8* %13, i8** %11, align 8, !dbg !4233
  %14 = load i8*, i8** %11, align 8, !dbg !4236
  %15 = icmp ne i8* %14, null, !dbg !4236
  %16 = load i32, i32* @x.63
  %17 = load i32, i32* @y.64
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %44, label %24, !dbg !4238

24:                                               ; preds = %originalBBpart2
  %25 = load i64, i64* %10, align 8, !dbg !4239
  %26 = icmp ne i64 %25, 0, !dbg !4240
  br i1 %26, label %27, label %44, !dbg !4241

27:                                               ; preds = %24
  %28 = load i32, i32* @x.63
  %29 = load i32, i32* @y.64
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  call void @xalloc_die() #14, !dbg !4242
  %36 = load i32, i32* @x.63
  %37 = load i32, i32* @y.64
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !4242

44:                                               ; preds = %24, %originalBBpart2
  %45 = load i32, i32* @x.63
  %46 = load i32, i32* @y.64
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  %53 = load i8*, i8** %11, align 8, !dbg !4243
  %54 = load i32, i32* @x.63
  %55 = load i32, i32* @y.64
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i8* %53, !dbg !4244

originalBBalteredBB:                              ; preds = %originalBB, %1
  %62 = alloca i64, align 8
  %63 = alloca i8*, align 8
  store i64 %0, i64* %62, align 8
  call void @llvm.dbg.declare(metadata i64* %62, metadata !4245, metadata !DIExpression()), !dbg !4231
  call void @llvm.dbg.declare(metadata i8** %63, metadata !4248, metadata !DIExpression()), !dbg !4233
  %64 = load i64, i64* %62, align 8, !dbg !4234
  %65 = call noalias i8* @malloc(i64 %64) #10, !dbg !4235
  store i8* %65, i8** %63, align 8, !dbg !4233
  %66 = load i8*, i8** %63, align 8, !dbg !4236
  %67 = icmp ne i8* %66, null, !dbg !4236
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  call void @xalloc_die() #14, !dbg !4242
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  %68 = load i8*, i8** %11, align 8, !dbg !4243
  br label %originalBB6
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xrealloc(i8*, i64) #4 !dbg !4249 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !4252, metadata !DIExpression()), !dbg !4253
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !4254, metadata !DIExpression()), !dbg !4255
  %6 = load i64, i64* %5, align 8, !dbg !4256
  %7 = icmp ne i64 %6, 0, !dbg !4256
  br i1 %7, label %45, label %8, !dbg !4258

8:                                                ; preds = %2
  %9 = load i32, i32* @x.65
  %10 = load i32, i32* @y.66
  %11 = sub i32 %9, 1
  %12 = mul i32 %9, %11
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %10, 10
  %16 = or i1 %14, %15
  br i1 %16, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %8, %originalBBalteredBB
  %17 = load i8*, i8** %4, align 8, !dbg !4259
  %18 = icmp ne i8* %17, null, !dbg !4259
  %19 = load i32, i32* @x.65
  %20 = load i32, i32* @y.66
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %45, !dbg !4260

27:                                               ; preds = %originalBBpart2
  %28 = load i32, i32* @x.65
  %29 = load i32, i32* @y.66
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load i8*, i8** %4, align 8, !dbg !4261
  call void @free(i8* %36) #10, !dbg !4263
  store i8* null, i8** %3, align 8, !dbg !4264
  %37 = load i32, i32* @x.65
  %38 = load i32, i32* @y.66
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %105, !dbg !4264

45:                                               ; preds = %originalBBpart2, %2
  %46 = load i8*, i8** %4, align 8, !dbg !4265
  %47 = load i64, i64* %5, align 8, !dbg !4266
  %48 = call i8* @realloc(i8* %46, i64 %47) #10, !dbg !4267
  store i8* %48, i8** %4, align 8, !dbg !4268
  %49 = load i8*, i8** %4, align 8, !dbg !4269
  %50 = icmp ne i8* %49, null, !dbg !4269
  br i1 %50, label %87, label %51, !dbg !4271

51:                                               ; preds = %45
  %52 = load i32, i32* @x.65
  %53 = load i32, i32* @y.66
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %51, %originalBB6alteredBB
  %60 = load i64, i64* %5, align 8, !dbg !4272
  %61 = icmp ne i64 %60, 0, !dbg !4272
  %62 = load i32, i32* @x.65
  %63 = load i32, i32* @y.66
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %61, label %70, label %87, !dbg !4273

70:                                               ; preds = %originalBBpart28
  %71 = load i32, i32* @x.65
  %72 = load i32, i32* @y.66
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %70, %originalBB10alteredBB
  call void @xalloc_die() #14, !dbg !4274
  %79 = load i32, i32* @x.65
  %80 = load i32, i32* @y.66
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  unreachable, !dbg !4274

87:                                               ; preds = %originalBBpart28, %45
  %88 = load i32, i32* @x.65
  %89 = load i32, i32* @y.66
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %87, %originalBB14alteredBB
  %96 = load i8*, i8** %4, align 8, !dbg !4275
  store i8* %96, i8** %3, align 8, !dbg !4276
  %97 = load i32, i32* @x.65
  %98 = load i32, i32* @y.66
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %105, !dbg !4276

105:                                              ; preds = %originalBBpart216, %originalBBpart24
  %106 = load i32, i32* @x.65
  %107 = load i32, i32* @y.66
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %105, %originalBB18alteredBB
  %114 = load i8*, i8** %3, align 8, !dbg !4277
  %115 = load i32, i32* @x.65
  %116 = load i32, i32* @y.66
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  ret i8* %114, !dbg !4277

originalBBalteredBB:                              ; preds = %originalBB, %8
  %123 = load i8*, i8** %4, align 8, !dbg !4259
  %124 = icmp ne i8* %123, null, !dbg !4259
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  %125 = load i8*, i8** %4, align 8, !dbg !4261
  call void @free(i8* %125) #10, !dbg !4263
  store i8* null, i8** %3, align 8, !dbg !4264
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %51
  %126 = load i64, i64* %5, align 8, !dbg !4272
  %127 = icmp ne i64 %126, 0, !dbg !4272
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %70
  call void @xalloc_die() #14, !dbg !4274
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %87
  %128 = load i8*, i8** %4, align 8, !dbg !4275
  store i8* %128, i8** %3, align 8, !dbg !4276
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %105
  %129 = load i8*, i8** %3, align 8, !dbg !4277
  br label %originalBB18
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xcharalloc(i64) #4 !dbg !4278 {
  %2 = load i32, i32* @x.67
  %3 = load i32, i32* @y.68
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !4282, metadata !DIExpression()), !dbg !4283
  %11 = load i64, i64* %10, align 8, !dbg !4284
  %12 = call noalias i8* @xmalloc(i64 %11), !dbg !4284
  %13 = load i32, i32* @x.67
  %14 = load i32, i32* @y.68
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !4285

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i64, align 8
  store i64 %0, i64* %21, align 8
  call void @llvm.dbg.declare(metadata i64* %21, metadata !4286, metadata !DIExpression()), !dbg !4283
  %22 = load i64, i64* %21, align 8, !dbg !4284
  %23 = call noalias i8* @xmalloc(i64 %22), !dbg !4284
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xmemdup(i8*, i64) #4 !dbg !4289 {
  %3 = load i32, i32* @x.69
  %4 = load i32, i32* @y.70
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !4294, metadata !DIExpression()), !dbg !4295
  store i64 %1, i64* %12, align 8
  call void @llvm.dbg.declare(metadata i64* %12, metadata !4296, metadata !DIExpression()), !dbg !4297
  %13 = load i64, i64* %12, align 8, !dbg !4298
  %14 = call noalias i8* @xmalloc(i64 %13), !dbg !4299
  %15 = load i8*, i8** %11, align 8, !dbg !4300
  %16 = load i64, i64* %12, align 8, !dbg !4301
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %15, i64 %16, i1 false), !dbg !4302
  %17 = load i32, i32* @x.69
  %18 = load i32, i32* @y.70
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !4303

originalBBalteredBB:                              ; preds = %originalBB, %2
  %25 = alloca i8*, align 8
  %26 = alloca i64, align 8
  store i8* %0, i8** %25, align 8
  call void @llvm.dbg.declare(metadata i8** %25, metadata !4304, metadata !DIExpression()), !dbg !4295
  store i64 %1, i64* %26, align 8
  call void @llvm.dbg.declare(metadata i64* %26, metadata !4307, metadata !DIExpression()), !dbg !4297
  %27 = load i64, i64* %26, align 8, !dbg !4298
  %28 = call noalias i8* @xmalloc(i64 %27), !dbg !4299
  %29 = load i8*, i8** %25, align 8, !dbg !4300
  %30 = load i64, i64* %26, align 8, !dbg !4301
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %28, i8* align 1 %29, i64 %30, i1 false), !dbg !4302
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xstrdup(i8*) #4 !dbg !4308 {
  %2 = load i32, i32* @x.71
  %3 = load i32, i32* @y.72
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !4309, metadata !DIExpression()), !dbg !4310
  %11 = load i8*, i8** %10, align 8, !dbg !4311
  %12 = load i8*, i8** %10, align 8, !dbg !4312
  %13 = call i64 @strlen(i8* %12) #13, !dbg !4313
  %14 = add i64 %13, 1, !dbg !4314
  %15 = call i8* @xmemdup(i8* %11, i64 %14), !dbg !4315
  %16 = load i32, i32* @x.71
  %17 = load i32, i32* @y.72
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !4316

originalBBalteredBB:                              ; preds = %originalBB, %1
  %24 = alloca i8*, align 8
  store i8* %0, i8** %24, align 8
  call void @llvm.dbg.declare(metadata i8** %24, metadata !4317, metadata !DIExpression()), !dbg !4310
  %25 = load i8*, i8** %24, align 8, !dbg !4311
  %26 = load i8*, i8** %24, align 8, !dbg !4312
  %27 = call i64 @strlen(i8* %26) #13, !dbg !4313
  %_ = sub i64 0, %27
  %gen = add i64 %_, 1
  %_1 = sub i64 %27, 1
  %gen2 = mul i64 %_1, 1
  %_3 = sub i64 0, %27
  %gen4 = add i64 %_3, 1
  %_5 = sub i64 0, %27
  %gen6 = add i64 %_5, 1
  %28 = add i64 %27, 1, !dbg !4314
  %29 = call i8* @xmemdup(i8* %25, i64 %28), !dbg !4315
  br label %originalBB
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @xalloc_die() #0 !dbg !4320 {
  %1 = load volatile i32, i32* @exit_failure, align 4, !dbg !4322
  %2 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.136, i64 0, i64 0)) #10, !dbg !4323
  call void (i32, i32, i8*, ...) @error(i32 %1, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.137, i64 0, i64 0), i8* %2), !dbg !4324
  call void @abort() #12, !dbg !4325
  unreachable, !dbg !4325
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xgetgroups(i8*, i32, i32**) #4 !dbg !4326 {
  %4 = load i32, i32* @x.75
  %5 = load i32, i32* @y.76
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32**, align 8
  %15 = alloca i32, align 4
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !4331, metadata !DIExpression()), !dbg !4332
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !4333, metadata !DIExpression()), !dbg !4334
  store i32** %2, i32*** %14, align 8
  call void @llvm.dbg.declare(metadata i32*** %14, metadata !4335, metadata !DIExpression()), !dbg !4336
  call void @llvm.dbg.declare(metadata i32* %15, metadata !4337, metadata !DIExpression()), !dbg !4338
  %16 = load i8*, i8** %12, align 8, !dbg !4339
  %17 = load i32, i32* %13, align 4, !dbg !4340
  %18 = load i32**, i32*** %14, align 8, !dbg !4341
  %19 = call i32 @mgetgroups(i8* %16, i32 %17, i32** %18), !dbg !4342
  store i32 %19, i32* %15, align 4, !dbg !4338
  %20 = load i32, i32* %15, align 4, !dbg !4343
  %21 = icmp eq i32 %20, -1, !dbg !4345
  %22 = load i32, i32* @x.75
  %23 = load i32, i32* @y.76
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %67, !dbg !4346

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.75
  %32 = load i32, i32* @y.76
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = call i32* @__errno_location() #15, !dbg !4347
  %40 = load i32, i32* %39, align 4, !dbg !4347
  %41 = icmp eq i32 %40, 12, !dbg !4348
  %42 = load i32, i32* @x.75
  %43 = load i32, i32* @y.76
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %41, label %50, label %67, !dbg !4349

50:                                               ; preds = %originalBBpart24
  %51 = load i32, i32* @x.75
  %52 = load i32, i32* @y.76
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %50, %originalBB6alteredBB
  call void @xalloc_die() #14, !dbg !4350
  %59 = load i32, i32* @x.75
  %60 = load i32, i32* @y.76
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !4350

67:                                               ; preds = %originalBBpart24, %originalBBpart2
  %68 = load i32, i32* @x.75
  %69 = load i32, i32* @y.76
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %67, %originalBB10alteredBB
  %76 = load i32, i32* %15, align 4, !dbg !4351
  %77 = load i32, i32* @x.75
  %78 = load i32, i32* @y.76
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i32 %76, !dbg !4352

originalBBalteredBB:                              ; preds = %originalBB, %3
  %85 = alloca i8*, align 8
  %86 = alloca i32, align 4
  %87 = alloca i32**, align 8
  %88 = alloca i32, align 4
  store i8* %0, i8** %85, align 8
  call void @llvm.dbg.declare(metadata i8** %85, metadata !4353, metadata !DIExpression()), !dbg !4332
  store i32 %1, i32* %86, align 4
  call void @llvm.dbg.declare(metadata i32* %86, metadata !4356, metadata !DIExpression()), !dbg !4334
  store i32** %2, i32*** %87, align 8
  call void @llvm.dbg.declare(metadata i32*** %87, metadata !4357, metadata !DIExpression()), !dbg !4336
  call void @llvm.dbg.declare(metadata i32* %88, metadata !4358, metadata !DIExpression()), !dbg !4338
  %89 = load i8*, i8** %85, align 8, !dbg !4339
  %90 = load i32, i32* %86, align 4, !dbg !4340
  %91 = load i32**, i32*** %87, align 8, !dbg !4341
  %92 = call i32 @mgetgroups(i8* %89, i32 %90, i32** %91), !dbg !4342
  store i32 %92, i32* %88, align 4, !dbg !4338
  %93 = load i32, i32* %88, align 4, !dbg !4343
  %94 = icmp eq i32 %93, -1, !dbg !4345
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %95 = call i32* @__errno_location() #15, !dbg !4347
  %96 = load i32, i32* %95, align 4, !dbg !4347
  %97 = icmp eq i32 %96, 12, !dbg !4348
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %50
  call void @xalloc_die() #14, !dbg !4350
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %67
  %98 = load i32, i32* %15, align 4, !dbg !4351
  br label %originalBB10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrtoul(i8*, i8**, i32, i64*, i8*) #4 !dbg !4359 {
  %6 = load i32, i32* @x.77
  %7 = load i32, i32* @y.78
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca i8**, align 8
  %17 = alloca i32, align 4
  %18 = alloca i64*, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i8*, align 8
  %21 = alloca i8**, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i8*, align 8
  %25 = alloca i8, align 1
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  store i8* %0, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !4365, metadata !DIExpression()), !dbg !4366
  store i8** %1, i8*** %16, align 8
  call void @llvm.dbg.declare(metadata i8*** %16, metadata !4367, metadata !DIExpression()), !dbg !4368
  store i32 %2, i32* %17, align 4
  call void @llvm.dbg.declare(metadata i32* %17, metadata !4369, metadata !DIExpression()), !dbg !4370
  store i64* %3, i64** %18, align 8
  call void @llvm.dbg.declare(metadata i64** %18, metadata !4371, metadata !DIExpression()), !dbg !4372
  store i8* %4, i8** %19, align 8
  call void @llvm.dbg.declare(metadata i8** %19, metadata !4373, metadata !DIExpression()), !dbg !4374
  call void @llvm.dbg.declare(metadata i8** %20, metadata !4375, metadata !DIExpression()), !dbg !4376
  call void @llvm.dbg.declare(metadata i8*** %21, metadata !4377, metadata !DIExpression()), !dbg !4378
  call void @llvm.dbg.declare(metadata i64* %22, metadata !4379, metadata !DIExpression()), !dbg !4380
  call void @llvm.dbg.declare(metadata i32* %23, metadata !4381, metadata !DIExpression()), !dbg !4382
  store i32 0, i32* %23, align 4, !dbg !4382
  %29 = load i32, i32* %17, align 4, !dbg !4383
  %30 = icmp sle i32 0, %29, !dbg !4383
  %31 = load i32, i32* @x.77
  %32 = load i32, i32* @y.78
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %30, label %39, label %75, !dbg !4383

39:                                               ; preds = %originalBBpart2
  %40 = load i32, i32* @x.77
  %41 = load i32, i32* @y.78
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %39, %originalBB1alteredBB
  %48 = load i32, i32* %17, align 4, !dbg !4383
  %49 = icmp sle i32 %48, 36, !dbg !4383
  %50 = load i32, i32* @x.77
  %51 = load i32, i32* @y.78
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %49, label %58, label %75, !dbg !4386

58:                                               ; preds = %originalBBpart24
  %59 = load i32, i32* @x.77
  %60 = load i32, i32* @y.78
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %58, %originalBB6alteredBB
  %67 = load i32, i32* @x.77
  %68 = load i32, i32* @y.78
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %76, !dbg !4386

75:                                               ; preds = %originalBBpart24, %originalBBpart2
  call void @__assert_fail(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.142, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.143, i64 0, i64 0), i32 84, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @__PRETTY_FUNCTION__.xstrtoul, i64 0, i64 0)) #12, !dbg !4383
  unreachable, !dbg !4383

76:                                               ; preds = %originalBBpart28
  %77 = load i8**, i8*** %16, align 8, !dbg !4387
  %78 = icmp ne i8** %77, null, !dbg !4387
  br i1 %78, label %79, label %97, !dbg !4387

79:                                               ; preds = %76
  %80 = load i32, i32* @x.77
  %81 = load i32, i32* @y.78
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %79, %originalBB10alteredBB
  %88 = load i8**, i8*** %16, align 8, !dbg !4388
  %89 = load i32, i32* @x.77
  %90 = load i32, i32* @y.78
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %114, !dbg !4387

97:                                               ; preds = %76
  %98 = load i32, i32* @x.77
  %99 = load i32, i32* @y.78
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %97, %originalBB14alteredBB
  %106 = load i32, i32* @x.77
  %107 = load i32, i32* @y.78
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %114, !dbg !4387

114:                                              ; preds = %originalBBpart216, %originalBBpart212
  %115 = phi i8** [ %88, %originalBBpart212 ], [ %20, %originalBBpart216 ], !dbg !4387
  %116 = load i32, i32* @x.77
  %117 = load i32, i32* @y.78
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %114, %originalBB18alteredBB
  store i8** %115, i8*** %21, align 8, !dbg !4389
  %124 = call i32* @__errno_location() #15, !dbg !4390
  store i32 0, i32* %124, align 4, !dbg !4391
  call void @llvm.dbg.declare(metadata i8** %24, metadata !4392, metadata !DIExpression()), !dbg !4395
  %125 = load i8*, i8** %15, align 8, !dbg !4396
  store i8* %125, i8** %24, align 8, !dbg !4395
  call void @llvm.dbg.declare(metadata i8* %25, metadata !4397, metadata !DIExpression()), !dbg !4398
  %126 = load i8*, i8** %24, align 8, !dbg !4399
  %127 = load i8, i8* %126, align 1, !dbg !4400
  store i8 %127, i8* %25, align 1, !dbg !4398
  %128 = load i32, i32* @x.77
  %129 = load i32, i32* @y.78
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %136, !dbg !4401

136:                                              ; preds = %originalBBpart239, %originalBBpart220
  %137 = load i32, i32* @x.77
  %138 = load i32, i32* @y.78
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %136, %originalBB22alteredBB
  %145 = call i16** @__ctype_b_loc() #15, !dbg !4402
  %146 = load i16*, i16** %145, align 8, !dbg !4402
  %147 = load i8, i8* %25, align 1, !dbg !4402
  %148 = zext i8 %147 to i32, !dbg !4402
  %149 = sext i32 %148 to i64, !dbg !4402
  %150 = getelementptr inbounds i16, i16* %146, i64 %149, !dbg !4402
  %151 = load i16, i16* %150, align 2, !dbg !4402
  %152 = zext i16 %151 to i32, !dbg !4402
  %153 = and i32 %152, 8192, !dbg !4402
  %154 = icmp ne i32 %153, 0, !dbg !4401
  %155 = load i32, i32* @x.77
  %156 = load i32, i32* @y.78
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart235, label %originalBB22alteredBB

originalBBpart235:                                ; preds = %originalBB22
  br i1 %154, label %163, label %183, !dbg !4401

163:                                              ; preds = %originalBBpart235
  %164 = load i32, i32* @x.77
  %165 = load i32, i32* @y.78
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %163, %originalBB37alteredBB
  %172 = load i8*, i8** %24, align 8, !dbg !4403
  %173 = getelementptr inbounds i8, i8* %172, i32 1, !dbg !4403
  store i8* %173, i8** %24, align 8, !dbg !4403
  %174 = load i8, i8* %173, align 1, !dbg !4404
  store i8 %174, i8* %25, align 1, !dbg !4405
  %175 = load i32, i32* @x.77
  %176 = load i32, i32* @y.78
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  br label %136, !dbg !4401, !llvm.loop !4406

183:                                              ; preds = %originalBBpart235
  %184 = load i32, i32* @x.77
  %185 = load i32, i32* @y.78
  %186 = sub i32 %184, 1
  %187 = mul i32 %184, %186
  %188 = urem i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %189, %190
  br i1 %191, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %183, %originalBB41alteredBB
  %192 = load i8, i8* %25, align 1, !dbg !4408
  %193 = zext i8 %192 to i32, !dbg !4408
  %194 = icmp eq i32 %193, 45, !dbg !4410
  %195 = load i32, i32* @x.77
  %196 = load i32, i32* @y.78
  %197 = sub i32 %195, 1
  %198 = mul i32 %195, %197
  %199 = urem i32 %198, 2
  %200 = icmp eq i32 %199, 0
  %201 = icmp slt i32 %196, 10
  %202 = or i1 %200, %201
  br i1 %202, label %originalBBpart243, label %originalBB41alteredBB

originalBBpart243:                                ; preds = %originalBB41
  br i1 %194, label %203, label %204, !dbg !4411

203:                                              ; preds = %originalBBpart243
  store i32 4, i32* %14, align 4, !dbg !4412
  br label %1037, !dbg !4412

204:                                              ; preds = %originalBBpart243
  %205 = load i32, i32* @x.77
  %206 = load i32, i32* @y.78
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %204, %originalBB45alteredBB
  %213 = load i8*, i8** %15, align 8, !dbg !4413
  %214 = load i8**, i8*** %21, align 8, !dbg !4414
  %215 = load i32, i32* %17, align 4, !dbg !4415
  %216 = call i64 @strtoul(i8* %213, i8** %214, i32 %215) #10, !dbg !4416
  store i64 %216, i64* %22, align 8, !dbg !4417
  %217 = load i8**, i8*** %21, align 8, !dbg !4418
  %218 = load i8*, i8** %217, align 8, !dbg !4420
  %219 = load i8*, i8** %15, align 8, !dbg !4421
  %220 = icmp eq i8* %218, %219, !dbg !4422
  %221 = load i32, i32* @x.77
  %222 = load i32, i32* @y.78
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBBpart247, label %originalBB45alteredBB

originalBBpart247:                                ; preds = %originalBB45
  br i1 %220, label %229, label %345, !dbg !4423

229:                                              ; preds = %originalBBpart247
  %230 = load i32, i32* @x.77
  %231 = load i32, i32* @y.78
  %232 = sub i32 %230, 1
  %233 = mul i32 %230, %232
  %234 = urem i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = icmp slt i32 %231, 10
  %237 = or i1 %235, %236
  br i1 %237, label %originalBB49, label %originalBB49alteredBB

originalBB49:                                     ; preds = %229, %originalBB49alteredBB
  %238 = load i8*, i8** %19, align 8, !dbg !4424
  %239 = icmp ne i8* %238, null, !dbg !4424
  %240 = load i32, i32* @x.77
  %241 = load i32, i32* @y.78
  %242 = sub i32 %240, 1
  %243 = mul i32 %240, %242
  %244 = urem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %245, %246
  br i1 %247, label %originalBBpart251, label %originalBB49alteredBB

originalBBpart251:                                ; preds = %originalBB49
  br i1 %239, label %248, label %311, !dbg !4427

248:                                              ; preds = %originalBBpart251
  %249 = load i32, i32* @x.77
  %250 = load i32, i32* @y.78
  %251 = sub i32 %249, 1
  %252 = mul i32 %249, %251
  %253 = urem i32 %252, 2
  %254 = icmp eq i32 %253, 0
  %255 = icmp slt i32 %250, 10
  %256 = or i1 %254, %255
  br i1 %256, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %248, %originalBB53alteredBB
  %257 = load i8**, i8*** %21, align 8, !dbg !4428
  %258 = load i8*, i8** %257, align 8, !dbg !4429
  %259 = load i8, i8* %258, align 1, !dbg !4430
  %260 = sext i8 %259 to i32, !dbg !4430
  %261 = icmp ne i32 %260, 0, !dbg !4430
  %262 = load i32, i32* @x.77
  %263 = load i32, i32* @y.78
  %264 = sub i32 %262, 1
  %265 = mul i32 %262, %264
  %266 = urem i32 %265, 2
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %263, 10
  %269 = or i1 %267, %268
  br i1 %269, label %originalBBpart255, label %originalBB53alteredBB

originalBBpart255:                                ; preds = %originalBB53
  br i1 %261, label %270, label %311, !dbg !4431

270:                                              ; preds = %originalBBpart255
  %271 = load i32, i32* @x.77
  %272 = load i32, i32* @y.78
  %273 = sub i32 %271, 1
  %274 = mul i32 %271, %273
  %275 = urem i32 %274, 2
  %276 = icmp eq i32 %275, 0
  %277 = icmp slt i32 %272, 10
  %278 = or i1 %276, %277
  br i1 %278, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %270, %originalBB57alteredBB
  %279 = load i8*, i8** %19, align 8, !dbg !4432
  %280 = load i8**, i8*** %21, align 8, !dbg !4433
  %281 = load i8*, i8** %280, align 8, !dbg !4434
  %282 = load i8, i8* %281, align 1, !dbg !4435
  %283 = sext i8 %282 to i32, !dbg !4435
  %284 = call i8* @strchr(i8* %279, i32 %283) #13, !dbg !4436
  %285 = icmp ne i8* %284, null, !dbg !4436
  %286 = load i32, i32* @x.77
  %287 = load i32, i32* @y.78
  %288 = sub i32 %286, 1
  %289 = mul i32 %286, %288
  %290 = urem i32 %289, 2
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %291, %292
  br i1 %293, label %originalBBpart259, label %originalBB57alteredBB

originalBBpart259:                                ; preds = %originalBB57
  br i1 %285, label %294, label %311, !dbg !4437

294:                                              ; preds = %originalBBpart259
  %295 = load i32, i32* @x.77
  %296 = load i32, i32* @y.78
  %297 = sub i32 %295, 1
  %298 = mul i32 %295, %297
  %299 = urem i32 %298, 2
  %300 = icmp eq i32 %299, 0
  %301 = icmp slt i32 %296, 10
  %302 = or i1 %300, %301
  br i1 %302, label %originalBB61, label %originalBB61alteredBB

originalBB61:                                     ; preds = %294, %originalBB61alteredBB
  store i64 1, i64* %22, align 8, !dbg !4438
  %303 = load i32, i32* @x.77
  %304 = load i32, i32* @y.78
  %305 = sub i32 %303, 1
  %306 = mul i32 %303, %305
  %307 = urem i32 %306, 2
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %308, %309
  br i1 %310, label %originalBBpart263, label %originalBB61alteredBB

originalBBpart263:                                ; preds = %originalBB61
  br label %328, !dbg !4439

311:                                              ; preds = %originalBBpart259, %originalBBpart255, %originalBBpart251
  %312 = load i32, i32* @x.77
  %313 = load i32, i32* @y.78
  %314 = sub i32 %312, 1
  %315 = mul i32 %312, %314
  %316 = urem i32 %315, 2
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %317, %318
  br i1 %319, label %originalBB65, label %originalBB65alteredBB

originalBB65:                                     ; preds = %311, %originalBB65alteredBB
  store i32 4, i32* %14, align 4, !dbg !4440
  %320 = load i32, i32* @x.77
  %321 = load i32, i32* @y.78
  %322 = sub i32 %320, 1
  %323 = mul i32 %320, %322
  %324 = urem i32 %323, 2
  %325 = icmp eq i32 %324, 0
  %326 = icmp slt i32 %321, 10
  %327 = or i1 %325, %326
  br i1 %327, label %originalBBpart267, label %originalBB65alteredBB

originalBBpart267:                                ; preds = %originalBB65
  br label %1037, !dbg !4440

328:                                              ; preds = %originalBBpart263
  %329 = load i32, i32* @x.77
  %330 = load i32, i32* @y.78
  %331 = sub i32 %329, 1
  %332 = mul i32 %329, %331
  %333 = urem i32 %332, 2
  %334 = icmp eq i32 %333, 0
  %335 = icmp slt i32 %330, 10
  %336 = or i1 %334, %335
  br i1 %336, label %originalBB69, label %originalBB69alteredBB

originalBB69:                                     ; preds = %328, %originalBB69alteredBB
  %337 = load i32, i32* @x.77
  %338 = load i32, i32* @y.78
  %339 = sub i32 %337, 1
  %340 = mul i32 %337, %339
  %341 = urem i32 %340, 2
  %342 = icmp eq i32 %341, 0
  %343 = icmp slt i32 %338, 10
  %344 = or i1 %342, %343
  br i1 %344, label %originalBBpart271, label %originalBB69alteredBB

originalBBpart271:                                ; preds = %originalBB69
  br label %436, !dbg !4441

345:                                              ; preds = %originalBBpart247
  %346 = load i32, i32* @x.77
  %347 = load i32, i32* @y.78
  %348 = sub i32 %346, 1
  %349 = mul i32 %346, %348
  %350 = urem i32 %349, 2
  %351 = icmp eq i32 %350, 0
  %352 = icmp slt i32 %347, 10
  %353 = or i1 %351, %352
  br i1 %353, label %originalBB73, label %originalBB73alteredBB

originalBB73:                                     ; preds = %345, %originalBB73alteredBB
  %354 = call i32* @__errno_location() #15, !dbg !4442
  %355 = load i32, i32* %354, align 4, !dbg !4442
  %356 = icmp ne i32 %355, 0, !dbg !4444
  %357 = load i32, i32* @x.77
  %358 = load i32, i32* @y.78
  %359 = sub i32 %357, 1
  %360 = mul i32 %357, %359
  %361 = urem i32 %360, 2
  %362 = icmp eq i32 %361, 0
  %363 = icmp slt i32 %358, 10
  %364 = or i1 %362, %363
  br i1 %364, label %originalBBpart275, label %originalBB73alteredBB

originalBBpart275:                                ; preds = %originalBB73
  br i1 %356, label %365, label %419, !dbg !4445

365:                                              ; preds = %originalBBpart275
  %366 = load i32, i32* @x.77
  %367 = load i32, i32* @y.78
  %368 = sub i32 %366, 1
  %369 = mul i32 %366, %368
  %370 = urem i32 %369, 2
  %371 = icmp eq i32 %370, 0
  %372 = icmp slt i32 %367, 10
  %373 = or i1 %371, %372
  br i1 %373, label %originalBB77, label %originalBB77alteredBB

originalBB77:                                     ; preds = %365, %originalBB77alteredBB
  %374 = call i32* @__errno_location() #15, !dbg !4446
  %375 = load i32, i32* %374, align 4, !dbg !4446
  %376 = icmp ne i32 %375, 34, !dbg !4449
  %377 = load i32, i32* @x.77
  %378 = load i32, i32* @y.78
  %379 = sub i32 %377, 1
  %380 = mul i32 %377, %379
  %381 = urem i32 %380, 2
  %382 = icmp eq i32 %381, 0
  %383 = icmp slt i32 %378, 10
  %384 = or i1 %382, %383
  br i1 %384, label %originalBBpart279, label %originalBB77alteredBB

originalBBpart279:                                ; preds = %originalBB77
  br i1 %376, label %385, label %402, !dbg !4450

385:                                              ; preds = %originalBBpart279
  %386 = load i32, i32* @x.77
  %387 = load i32, i32* @y.78
  %388 = sub i32 %386, 1
  %389 = mul i32 %386, %388
  %390 = urem i32 %389, 2
  %391 = icmp eq i32 %390, 0
  %392 = icmp slt i32 %387, 10
  %393 = or i1 %391, %392
  br i1 %393, label %originalBB81, label %originalBB81alteredBB

originalBB81:                                     ; preds = %385, %originalBB81alteredBB
  store i32 4, i32* %14, align 4, !dbg !4451
  %394 = load i32, i32* @x.77
  %395 = load i32, i32* @y.78
  %396 = sub i32 %394, 1
  %397 = mul i32 %394, %396
  %398 = urem i32 %397, 2
  %399 = icmp eq i32 %398, 0
  %400 = icmp slt i32 %395, 10
  %401 = or i1 %399, %400
  br i1 %401, label %originalBBpart283, label %originalBB81alteredBB

originalBBpart283:                                ; preds = %originalBB81
  br label %1037, !dbg !4451

402:                                              ; preds = %originalBBpart279
  %403 = load i32, i32* @x.77
  %404 = load i32, i32* @y.78
  %405 = sub i32 %403, 1
  %406 = mul i32 %403, %405
  %407 = urem i32 %406, 2
  %408 = icmp eq i32 %407, 0
  %409 = icmp slt i32 %404, 10
  %410 = or i1 %408, %409
  br i1 %410, label %originalBB85, label %originalBB85alteredBB

originalBB85:                                     ; preds = %402, %originalBB85alteredBB
  store i32 1, i32* %23, align 4, !dbg !4452
  %411 = load i32, i32* @x.77
  %412 = load i32, i32* @y.78
  %413 = sub i32 %411, 1
  %414 = mul i32 %411, %413
  %415 = urem i32 %414, 2
  %416 = icmp eq i32 %415, 0
  %417 = icmp slt i32 %412, 10
  %418 = or i1 %416, %417
  br i1 %418, label %originalBBpart287, label %originalBB85alteredBB

originalBBpart287:                                ; preds = %originalBB85
  br label %419, !dbg !4453

419:                                              ; preds = %originalBBpart287, %originalBBpart275
  %420 = load i32, i32* @x.77
  %421 = load i32, i32* @y.78
  %422 = sub i32 %420, 1
  %423 = mul i32 %420, %422
  %424 = urem i32 %423, 2
  %425 = icmp eq i32 %424, 0
  %426 = icmp slt i32 %421, 10
  %427 = or i1 %425, %426
  br i1 %427, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %419, %originalBB89alteredBB
  %428 = load i32, i32* @x.77
  %429 = load i32, i32* @y.78
  %430 = sub i32 %428, 1
  %431 = mul i32 %428, %430
  %432 = urem i32 %431, 2
  %433 = icmp eq i32 %432, 0
  %434 = icmp slt i32 %429, 10
  %435 = or i1 %433, %434
  br i1 %435, label %originalBBpart291, label %originalBB89alteredBB

originalBBpart291:                                ; preds = %originalBB89
  br label %436

436:                                              ; preds = %originalBBpart291, %originalBBpart271
  %437 = load i32, i32* @x.77
  %438 = load i32, i32* @y.78
  %439 = sub i32 %437, 1
  %440 = mul i32 %437, %439
  %441 = urem i32 %440, 2
  %442 = icmp eq i32 %441, 0
  %443 = icmp slt i32 %438, 10
  %444 = or i1 %442, %443
  br i1 %444, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %436, %originalBB93alteredBB
  %445 = load i8*, i8** %19, align 8, !dbg !4454
  %446 = icmp ne i8* %445, null, !dbg !4454
  %447 = load i32, i32* @x.77
  %448 = load i32, i32* @y.78
  %449 = sub i32 %447, 1
  %450 = mul i32 %447, %449
  %451 = urem i32 %450, 2
  %452 = icmp eq i32 %451, 0
  %453 = icmp slt i32 %448, 10
  %454 = or i1 %452, %453
  br i1 %454, label %originalBBpart295, label %originalBB93alteredBB

originalBBpart295:                                ; preds = %originalBB93
  br i1 %446, label %475, label %455, !dbg !4456

455:                                              ; preds = %originalBBpart295
  %456 = load i32, i32* @x.77
  %457 = load i32, i32* @y.78
  %458 = sub i32 %456, 1
  %459 = mul i32 %456, %458
  %460 = urem i32 %459, 2
  %461 = icmp eq i32 %460, 0
  %462 = icmp slt i32 %457, 10
  %463 = or i1 %461, %462
  br i1 %463, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %455, %originalBB97alteredBB
  %464 = load i64, i64* %22, align 8, !dbg !4457
  %465 = load i64*, i64** %18, align 8, !dbg !4459
  store i64 %464, i64* %465, align 8, !dbg !4460
  %466 = load i32, i32* %23, align 4, !dbg !4461
  store i32 %466, i32* %14, align 4, !dbg !4462
  %467 = load i32, i32* @x.77
  %468 = load i32, i32* @y.78
  %469 = sub i32 %467, 1
  %470 = mul i32 %467, %469
  %471 = urem i32 %470, 2
  %472 = icmp eq i32 %471, 0
  %473 = icmp slt i32 %468, 10
  %474 = or i1 %472, %473
  br i1 %474, label %originalBBpart299, label %originalBB97alteredBB

originalBBpart299:                                ; preds = %originalBB97
  br label %1037, !dbg !4462

475:                                              ; preds = %originalBBpart295
  %476 = load i32, i32* @x.77
  %477 = load i32, i32* @y.78
  %478 = sub i32 %476, 1
  %479 = mul i32 %476, %478
  %480 = urem i32 %479, 2
  %481 = icmp eq i32 %480, 0
  %482 = icmp slt i32 %477, 10
  %483 = or i1 %481, %482
  br i1 %483, label %originalBB101, label %originalBB101alteredBB

originalBB101:                                    ; preds = %475, %originalBB101alteredBB
  %484 = load i8**, i8*** %21, align 8, !dbg !4463
  %485 = load i8*, i8** %484, align 8, !dbg !4465
  %486 = load i8, i8* %485, align 1, !dbg !4466
  %487 = sext i8 %486 to i32, !dbg !4466
  %488 = icmp ne i32 %487, 0, !dbg !4467
  %489 = load i32, i32* @x.77
  %490 = load i32, i32* @y.78
  %491 = sub i32 %489, 1
  %492 = mul i32 %489, %491
  %493 = urem i32 %492, 2
  %494 = icmp eq i32 %493, 0
  %495 = icmp slt i32 %490, 10
  %496 = or i1 %494, %495
  br i1 %496, label %originalBBpart2103, label %originalBB101alteredBB

originalBBpart2103:                               ; preds = %originalBB101
  br i1 %488, label %497, label %1017, !dbg !4468

497:                                              ; preds = %originalBBpart2103
  call void @llvm.dbg.declare(metadata i32* %26, metadata !4469, metadata !DIExpression()), !dbg !4471
  %498 = load i32, i32* @x.77
  %499 = load i32, i32* @y.78
  %500 = sub i32 %498, 1
  %501 = mul i32 %498, %500
  %502 = urem i32 %501, 2
  %503 = icmp eq i32 %502, 0
  %504 = icmp slt i32 %499, 10
  %505 = or i1 %503, %504
  br i1 %505, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %497, %originalBB105alteredBB
  store i32 1024, i32* %26, align 4, !dbg !4471
  call void @llvm.dbg.declare(metadata i32* %27, metadata !4472, metadata !DIExpression()), !dbg !4473
  store i32 1, i32* %27, align 4, !dbg !4473
  call void @llvm.dbg.declare(metadata i32* %28, metadata !4474, metadata !DIExpression()), !dbg !4475
  %506 = load i8*, i8** %19, align 8, !dbg !4476
  %507 = load i8**, i8*** %21, align 8, !dbg !4478
  %508 = load i8*, i8** %507, align 8, !dbg !4479
  %509 = load i8, i8* %508, align 1, !dbg !4480
  %510 = sext i8 %509 to i32, !dbg !4480
  %511 = call i8* @strchr(i8* %506, i32 %510) #13, !dbg !4481
  %512 = icmp ne i8* %511, null, !dbg !4481
  %513 = load i32, i32* @x.77
  %514 = load i32, i32* @y.78
  %515 = sub i32 %513, 1
  %516 = mul i32 %513, %515
  %517 = urem i32 %516, 2
  %518 = icmp eq i32 %517, 0
  %519 = icmp slt i32 %514, 10
  %520 = or i1 %518, %519
  br i1 %520, label %originalBBpart2107, label %originalBB105alteredBB

originalBBpart2107:                               ; preds = %originalBB105
  br i1 %512, label %542, label %521, !dbg !4482

521:                                              ; preds = %originalBBpart2107
  %522 = load i32, i32* @x.77
  %523 = load i32, i32* @y.78
  %524 = sub i32 %522, 1
  %525 = mul i32 %522, %524
  %526 = urem i32 %525, 2
  %527 = icmp eq i32 %526, 0
  %528 = icmp slt i32 %523, 10
  %529 = or i1 %527, %528
  br i1 %529, label %originalBB109, label %originalBB109alteredBB

originalBB109:                                    ; preds = %521, %originalBB109alteredBB
  %530 = load i64, i64* %22, align 8, !dbg !4483
  %531 = load i64*, i64** %18, align 8, !dbg !4485
  store i64 %530, i64* %531, align 8, !dbg !4486
  %532 = load i32, i32* %23, align 4, !dbg !4487
  %533 = or i32 %532, 2, !dbg !4488
  store i32 %533, i32* %14, align 4, !dbg !4489
  %534 = load i32, i32* @x.77
  %535 = load i32, i32* @y.78
  %536 = sub i32 %534, 1
  %537 = mul i32 %534, %536
  %538 = urem i32 %537, 2
  %539 = icmp eq i32 %538, 0
  %540 = icmp slt i32 %535, 10
  %541 = or i1 %539, %540
  br i1 %541, label %originalBBpart2124, label %originalBB109alteredBB

originalBBpart2124:                               ; preds = %originalBB109
  br label %1037, !dbg !4489

542:                                              ; preds = %originalBBpart2107
  %543 = load i32, i32* @x.77
  %544 = load i32, i32* @y.78
  %545 = sub i32 %543, 1
  %546 = mul i32 %543, %545
  %547 = urem i32 %546, 2
  %548 = icmp eq i32 %547, 0
  %549 = icmp slt i32 %544, 10
  %550 = or i1 %548, %549
  br i1 %550, label %originalBB126, label %originalBB126alteredBB

originalBB126:                                    ; preds = %542, %originalBB126alteredBB
  %551 = load i8**, i8*** %21, align 8, !dbg !4490
  %552 = load i8*, i8** %551, align 8, !dbg !4491
  %553 = load i8, i8* %552, align 1, !dbg !4492
  %554 = sext i8 %553 to i32, !dbg !4492
  %555 = load i32, i32* @x.77
  %556 = load i32, i32* @y.78
  %557 = sub i32 %555, 1
  %558 = mul i32 %555, %557
  %559 = urem i32 %558, 2
  %560 = icmp eq i32 %559, 0
  %561 = icmp slt i32 %556, 10
  %562 = or i1 %560, %561
  br i1 %562, label %originalBBpart2128, label %originalBB126alteredBB

originalBBpart2128:                               ; preds = %originalBB126
  switch i32 %554, label %703 [
    i32 69, label %563
    i32 71, label %563
    i32 103, label %563
    i32 107, label %563
    i32 75, label %563
    i32 77, label %563
    i32 109, label %563
    i32 80, label %563
    i32 84, label %563
    i32 116, label %563
    i32 89, label %563
    i32 90, label %563
  ], !dbg !4493

563:                                              ; preds = %originalBBpart2128, %originalBBpart2128, %originalBBpart2128, %originalBBpart2128, %originalBBpart2128, %originalBBpart2128, %originalBBpart2128, %originalBBpart2128, %originalBBpart2128, %originalBBpart2128, %originalBBpart2128, %originalBBpart2128
  %564 = load i32, i32* @x.77
  %565 = load i32, i32* @y.78
  %566 = sub i32 %564, 1
  %567 = mul i32 %564, %566
  %568 = urem i32 %567, 2
  %569 = icmp eq i32 %568, 0
  %570 = icmp slt i32 %565, 10
  %571 = or i1 %569, %570
  br i1 %571, label %originalBB130, label %originalBB130alteredBB

originalBB130:                                    ; preds = %563, %originalBB130alteredBB
  %572 = load i8*, i8** %19, align 8, !dbg !4494
  %573 = call i8* @strchr(i8* %572, i32 48) #13, !dbg !4497
  %574 = icmp ne i8* %573, null, !dbg !4497
  %575 = load i32, i32* @x.77
  %576 = load i32, i32* @y.78
  %577 = sub i32 %575, 1
  %578 = mul i32 %575, %577
  %579 = urem i32 %578, 2
  %580 = icmp eq i32 %579, 0
  %581 = icmp slt i32 %576, 10
  %582 = or i1 %580, %581
  br i1 %582, label %originalBBpart2132, label %originalBB130alteredBB

originalBBpart2132:                               ; preds = %originalBB130
  br i1 %574, label %583, label %686, !dbg !4498

583:                                              ; preds = %originalBBpart2132
  %584 = load i32, i32* @x.77
  %585 = load i32, i32* @y.78
  %586 = sub i32 %584, 1
  %587 = mul i32 %584, %586
  %588 = urem i32 %587, 2
  %589 = icmp eq i32 %588, 0
  %590 = icmp slt i32 %585, 10
  %591 = or i1 %589, %590
  br i1 %591, label %originalBB134, label %originalBB134alteredBB

originalBB134:                                    ; preds = %583, %originalBB134alteredBB
  %592 = load i8**, i8*** %21, align 8, !dbg !4499
  %593 = getelementptr inbounds i8*, i8** %592, i64 0, !dbg !4499
  %594 = load i8*, i8** %593, align 8, !dbg !4499
  %595 = getelementptr inbounds i8, i8* %594, i64 1, !dbg !4499
  %596 = load i8, i8* %595, align 1, !dbg !4499
  %597 = sext i8 %596 to i32, !dbg !4499
  %598 = load i32, i32* @x.77
  %599 = load i32, i32* @y.78
  %600 = sub i32 %598, 1
  %601 = mul i32 %598, %600
  %602 = urem i32 %601, 2
  %603 = icmp eq i32 %602, 0
  %604 = icmp slt i32 %599, 10
  %605 = or i1 %603, %604
  br i1 %605, label %originalBBpart2136, label %originalBB134alteredBB

originalBBpart2136:                               ; preds = %originalBB134
  switch i32 %597, label %669 [
    i32 105, label %606
    i32 66, label %650
    i32 68, label %650
  ], !dbg !4500

606:                                              ; preds = %originalBBpart2136
  %607 = load i32, i32* @x.77
  %608 = load i32, i32* @y.78
  %609 = sub i32 %607, 1
  %610 = mul i32 %607, %609
  %611 = urem i32 %610, 2
  %612 = icmp eq i32 %611, 0
  %613 = icmp slt i32 %608, 10
  %614 = or i1 %612, %613
  br i1 %614, label %originalBB138, label %originalBB138alteredBB

originalBB138:                                    ; preds = %606, %originalBB138alteredBB
  %615 = load i8**, i8*** %21, align 8, !dbg !4501
  %616 = getelementptr inbounds i8*, i8** %615, i64 0, !dbg !4501
  %617 = load i8*, i8** %616, align 8, !dbg !4501
  %618 = getelementptr inbounds i8, i8* %617, i64 2, !dbg !4501
  %619 = load i8, i8* %618, align 1, !dbg !4501
  %620 = sext i8 %619 to i32, !dbg !4501
  %621 = icmp eq i32 %620, 66, !dbg !4504
  %622 = load i32, i32* @x.77
  %623 = load i32, i32* @y.78
  %624 = sub i32 %622, 1
  %625 = mul i32 %622, %624
  %626 = urem i32 %625, 2
  %627 = icmp eq i32 %626, 0
  %628 = icmp slt i32 %623, 10
  %629 = or i1 %627, %628
  br i1 %629, label %originalBBpart2140, label %originalBB138alteredBB

originalBBpart2140:                               ; preds = %originalBB138
  br i1 %621, label %630, label %633, !dbg !4505

630:                                              ; preds = %originalBBpart2140
  %631 = load i32, i32* %27, align 4, !dbg !4506
  %632 = add nsw i32 %631, 2, !dbg !4506
  store i32 %632, i32* %27, align 4, !dbg !4506
  br label %633, !dbg !4507

633:                                              ; preds = %630, %originalBBpart2140
  %634 = load i32, i32* @x.77
  %635 = load i32, i32* @y.78
  %636 = sub i32 %634, 1
  %637 = mul i32 %634, %636
  %638 = urem i32 %637, 2
  %639 = icmp eq i32 %638, 0
  %640 = icmp slt i32 %635, 10
  %641 = or i1 %639, %640
  br i1 %641, label %originalBB142, label %originalBB142alteredBB

originalBB142:                                    ; preds = %633, %originalBB142alteredBB
  %642 = load i32, i32* @x.77
  %643 = load i32, i32* @y.78
  %644 = sub i32 %642, 1
  %645 = mul i32 %642, %644
  %646 = urem i32 %645, 2
  %647 = icmp eq i32 %646, 0
  %648 = icmp slt i32 %643, 10
  %649 = or i1 %647, %648
  br i1 %649, label %originalBBpart2144, label %originalBB142alteredBB

originalBBpart2144:                               ; preds = %originalBB142
  br label %669, !dbg !4508

650:                                              ; preds = %originalBBpart2136, %originalBBpart2136
  %651 = load i32, i32* @x.77
  %652 = load i32, i32* @y.78
  %653 = sub i32 %651, 1
  %654 = mul i32 %651, %653
  %655 = urem i32 %654, 2
  %656 = icmp eq i32 %655, 0
  %657 = icmp slt i32 %652, 10
  %658 = or i1 %656, %657
  br i1 %658, label %originalBB146, label %originalBB146alteredBB

originalBB146:                                    ; preds = %650, %originalBB146alteredBB
  store i32 1000, i32* %26, align 4, !dbg !4509
  %659 = load i32, i32* %27, align 4, !dbg !4510
  %660 = add nsw i32 %659, 1, !dbg !4510
  store i32 %660, i32* %27, align 4, !dbg !4510
  %661 = load i32, i32* @x.77
  %662 = load i32, i32* @y.78
  %663 = sub i32 %661, 1
  %664 = mul i32 %661, %663
  %665 = urem i32 %664, 2
  %666 = icmp eq i32 %665, 0
  %667 = icmp slt i32 %662, 10
  %668 = or i1 %666, %667
  br i1 %668, label %originalBBpart2154, label %originalBB146alteredBB

originalBBpart2154:                               ; preds = %originalBB146
  br label %669, !dbg !4511

669:                                              ; preds = %originalBBpart2154, %originalBBpart2144, %originalBBpart2136
  %670 = load i32, i32* @x.77
  %671 = load i32, i32* @y.78
  %672 = sub i32 %670, 1
  %673 = mul i32 %670, %672
  %674 = urem i32 %673, 2
  %675 = icmp eq i32 %674, 0
  %676 = icmp slt i32 %671, 10
  %677 = or i1 %675, %676
  br i1 %677, label %originalBB156, label %originalBB156alteredBB

originalBB156:                                    ; preds = %669, %originalBB156alteredBB
  %678 = load i32, i32* @x.77
  %679 = load i32, i32* @y.78
  %680 = sub i32 %678, 1
  %681 = mul i32 %678, %680
  %682 = urem i32 %681, 2
  %683 = icmp eq i32 %682, 0
  %684 = icmp slt i32 %679, 10
  %685 = or i1 %683, %684
  br i1 %685, label %originalBBpart2158, label %originalBB156alteredBB

originalBBpart2158:                               ; preds = %originalBB156
  br label %686, !dbg !4512

686:                                              ; preds = %originalBBpart2158, %originalBBpart2132
  %687 = load i32, i32* @x.77
  %688 = load i32, i32* @y.78
  %689 = sub i32 %687, 1
  %690 = mul i32 %687, %689
  %691 = urem i32 %690, 2
  %692 = icmp eq i32 %691, 0
  %693 = icmp slt i32 %688, 10
  %694 = or i1 %692, %693
  br i1 %694, label %originalBB160, label %originalBB160alteredBB

originalBB160:                                    ; preds = %686, %originalBB160alteredBB
  %695 = load i32, i32* @x.77
  %696 = load i32, i32* @y.78
  %697 = sub i32 %695, 1
  %698 = mul i32 %695, %697
  %699 = urem i32 %698, 2
  %700 = icmp eq i32 %699, 0
  %701 = icmp slt i32 %696, 10
  %702 = or i1 %700, %701
  br i1 %702, label %originalBBpart2162, label %originalBB160alteredBB

originalBBpart2162:                               ; preds = %originalBB160
  br label %703, !dbg !4513

703:                                              ; preds = %originalBBpart2162, %originalBBpart2128
  %704 = load i32, i32* @x.77
  %705 = load i32, i32* @y.78
  %706 = sub i32 %704, 1
  %707 = mul i32 %704, %706
  %708 = urem i32 %707, 2
  %709 = icmp eq i32 %708, 0
  %710 = icmp slt i32 %705, 10
  %711 = or i1 %709, %710
  br i1 %711, label %originalBB164, label %originalBB164alteredBB

originalBB164:                                    ; preds = %703, %originalBB164alteredBB
  %712 = load i8**, i8*** %21, align 8, !dbg !4514
  %713 = load i8*, i8** %712, align 8, !dbg !4515
  %714 = load i8, i8* %713, align 1, !dbg !4516
  %715 = sext i8 %714 to i32, !dbg !4516
  %716 = load i32, i32* @x.77
  %717 = load i32, i32* @y.78
  %718 = sub i32 %716, 1
  %719 = mul i32 %716, %718
  %720 = urem i32 %719, 2
  %721 = icmp eq i32 %720, 0
  %722 = icmp slt i32 %717, 10
  %723 = or i1 %721, %722
  br i1 %723, label %originalBBpart2166, label %originalBB164alteredBB

originalBBpart2166:                               ; preds = %originalBB164
  switch i32 %715, label %931 [
    i32 98, label %724
    i32 66, label %742
    i32 99, label %760
    i32 69, label %777
    i32 71, label %796
    i32 103, label %796
    i32 107, label %799
    i32 75, label %799
    i32 77, label %818
    i32 109, label %818
    i32 80, label %837
    i32 84, label %856
    i32 116, label %856
    i32 119, label %875
    i32 89, label %893
    i32 90, label %912
  ], !dbg !4517

724:                                              ; preds = %originalBBpart2166
  %725 = load i32, i32* @x.77
  %726 = load i32, i32* @y.78
  %727 = sub i32 %725, 1
  %728 = mul i32 %725, %727
  %729 = urem i32 %728, 2
  %730 = icmp eq i32 %729, 0
  %731 = icmp slt i32 %726, 10
  %732 = or i1 %730, %731
  br i1 %732, label %originalBB168, label %originalBB168alteredBB

originalBB168:                                    ; preds = %724, %originalBB168alteredBB
  %733 = call i32 @bkm_scale(i64* %22, i32 512), !dbg !4518
  store i32 %733, i32* %28, align 4, !dbg !4520
  %734 = load i32, i32* @x.77
  %735 = load i32, i32* @y.78
  %736 = sub i32 %734, 1
  %737 = mul i32 %734, %736
  %738 = urem i32 %737, 2
  %739 = icmp eq i32 %738, 0
  %740 = icmp slt i32 %735, 10
  %741 = or i1 %739, %740
  br i1 %741, label %originalBBpart2170, label %originalBB168alteredBB

originalBBpart2170:                               ; preds = %originalBB168
  br label %952, !dbg !4521

742:                                              ; preds = %originalBBpart2166
  %743 = load i32, i32* @x.77
  %744 = load i32, i32* @y.78
  %745 = sub i32 %743, 1
  %746 = mul i32 %743, %745
  %747 = urem i32 %746, 2
  %748 = icmp eq i32 %747, 0
  %749 = icmp slt i32 %744, 10
  %750 = or i1 %748, %749
  br i1 %750, label %originalBB172, label %originalBB172alteredBB

originalBB172:                                    ; preds = %742, %originalBB172alteredBB
  %751 = call i32 @bkm_scale(i64* %22, i32 1024), !dbg !4522
  store i32 %751, i32* %28, align 4, !dbg !4523
  %752 = load i32, i32* @x.77
  %753 = load i32, i32* @y.78
  %754 = sub i32 %752, 1
  %755 = mul i32 %752, %754
  %756 = urem i32 %755, 2
  %757 = icmp eq i32 %756, 0
  %758 = icmp slt i32 %753, 10
  %759 = or i1 %757, %758
  br i1 %759, label %originalBBpart2174, label %originalBB172alteredBB

originalBBpart2174:                               ; preds = %originalBB172
  br label %952, !dbg !4524

760:                                              ; preds = %originalBBpart2166
  %761 = load i32, i32* @x.77
  %762 = load i32, i32* @y.78
  %763 = sub i32 %761, 1
  %764 = mul i32 %761, %763
  %765 = urem i32 %764, 2
  %766 = icmp eq i32 %765, 0
  %767 = icmp slt i32 %762, 10
  %768 = or i1 %766, %767
  br i1 %768, label %originalBB176, label %originalBB176alteredBB

originalBB176:                                    ; preds = %760, %originalBB176alteredBB
  store i32 0, i32* %28, align 4, !dbg !4525
  %769 = load i32, i32* @x.77
  %770 = load i32, i32* @y.78
  %771 = sub i32 %769, 1
  %772 = mul i32 %769, %771
  %773 = urem i32 %772, 2
  %774 = icmp eq i32 %773, 0
  %775 = icmp slt i32 %770, 10
  %776 = or i1 %774, %775
  br i1 %776, label %originalBBpart2178, label %originalBB176alteredBB

originalBBpart2178:                               ; preds = %originalBB176
  br label %952, !dbg !4526

777:                                              ; preds = %originalBBpart2166
  %778 = load i32, i32* @x.77
  %779 = load i32, i32* @y.78
  %780 = sub i32 %778, 1
  %781 = mul i32 %778, %780
  %782 = urem i32 %781, 2
  %783 = icmp eq i32 %782, 0
  %784 = icmp slt i32 %779, 10
  %785 = or i1 %783, %784
  br i1 %785, label %originalBB180, label %originalBB180alteredBB

originalBB180:                                    ; preds = %777, %originalBB180alteredBB
  %786 = load i32, i32* %26, align 4, !dbg !4527
  %787 = call i32 @bkm_scale_by_power(i64* %22, i32 %786, i32 6), !dbg !4528
  store i32 %787, i32* %28, align 4, !dbg !4529
  %788 = load i32, i32* @x.77
  %789 = load i32, i32* @y.78
  %790 = sub i32 %788, 1
  %791 = mul i32 %788, %790
  %792 = urem i32 %791, 2
  %793 = icmp eq i32 %792, 0
  %794 = icmp slt i32 %789, 10
  %795 = or i1 %793, %794
  br i1 %795, label %originalBBpart2182, label %originalBB180alteredBB

originalBBpart2182:                               ; preds = %originalBB180
  br label %952, !dbg !4530

796:                                              ; preds = %originalBBpart2166, %originalBBpart2166
  %797 = load i32, i32* %26, align 4, !dbg !4531
  %798 = call i32 @bkm_scale_by_power(i64* %22, i32 %797, i32 3), !dbg !4532
  store i32 %798, i32* %28, align 4, !dbg !4533
  br label %952, !dbg !4534

799:                                              ; preds = %originalBBpart2166, %originalBBpart2166
  %800 = load i32, i32* @x.77
  %801 = load i32, i32* @y.78
  %802 = sub i32 %800, 1
  %803 = mul i32 %800, %802
  %804 = urem i32 %803, 2
  %805 = icmp eq i32 %804, 0
  %806 = icmp slt i32 %801, 10
  %807 = or i1 %805, %806
  br i1 %807, label %originalBB184, label %originalBB184alteredBB

originalBB184:                                    ; preds = %799, %originalBB184alteredBB
  %808 = load i32, i32* %26, align 4, !dbg !4535
  %809 = call i32 @bkm_scale_by_power(i64* %22, i32 %808, i32 1), !dbg !4536
  store i32 %809, i32* %28, align 4, !dbg !4537
  %810 = load i32, i32* @x.77
  %811 = load i32, i32* @y.78
  %812 = sub i32 %810, 1
  %813 = mul i32 %810, %812
  %814 = urem i32 %813, 2
  %815 = icmp eq i32 %814, 0
  %816 = icmp slt i32 %811, 10
  %817 = or i1 %815, %816
  br i1 %817, label %originalBBpart2186, label %originalBB184alteredBB

originalBBpart2186:                               ; preds = %originalBB184
  br label %952, !dbg !4538

818:                                              ; preds = %originalBBpart2166, %originalBBpart2166
  %819 = load i32, i32* @x.77
  %820 = load i32, i32* @y.78
  %821 = sub i32 %819, 1
  %822 = mul i32 %819, %821
  %823 = urem i32 %822, 2
  %824 = icmp eq i32 %823, 0
  %825 = icmp slt i32 %820, 10
  %826 = or i1 %824, %825
  br i1 %826, label %originalBB188, label %originalBB188alteredBB

originalBB188:                                    ; preds = %818, %originalBB188alteredBB
  %827 = load i32, i32* %26, align 4, !dbg !4539
  %828 = call i32 @bkm_scale_by_power(i64* %22, i32 %827, i32 2), !dbg !4540
  store i32 %828, i32* %28, align 4, !dbg !4541
  %829 = load i32, i32* @x.77
  %830 = load i32, i32* @y.78
  %831 = sub i32 %829, 1
  %832 = mul i32 %829, %831
  %833 = urem i32 %832, 2
  %834 = icmp eq i32 %833, 0
  %835 = icmp slt i32 %830, 10
  %836 = or i1 %834, %835
  br i1 %836, label %originalBBpart2190, label %originalBB188alteredBB

originalBBpart2190:                               ; preds = %originalBB188
  br label %952, !dbg !4542

837:                                              ; preds = %originalBBpart2166
  %838 = load i32, i32* @x.77
  %839 = load i32, i32* @y.78
  %840 = sub i32 %838, 1
  %841 = mul i32 %838, %840
  %842 = urem i32 %841, 2
  %843 = icmp eq i32 %842, 0
  %844 = icmp slt i32 %839, 10
  %845 = or i1 %843, %844
  br i1 %845, label %originalBB192, label %originalBB192alteredBB

originalBB192:                                    ; preds = %837, %originalBB192alteredBB
  %846 = load i32, i32* %26, align 4, !dbg !4543
  %847 = call i32 @bkm_scale_by_power(i64* %22, i32 %846, i32 5), !dbg !4544
  store i32 %847, i32* %28, align 4, !dbg !4545
  %848 = load i32, i32* @x.77
  %849 = load i32, i32* @y.78
  %850 = sub i32 %848, 1
  %851 = mul i32 %848, %850
  %852 = urem i32 %851, 2
  %853 = icmp eq i32 %852, 0
  %854 = icmp slt i32 %849, 10
  %855 = or i1 %853, %854
  br i1 %855, label %originalBBpart2194, label %originalBB192alteredBB

originalBBpart2194:                               ; preds = %originalBB192
  br label %952, !dbg !4546

856:                                              ; preds = %originalBBpart2166, %originalBBpart2166
  %857 = load i32, i32* @x.77
  %858 = load i32, i32* @y.78
  %859 = sub i32 %857, 1
  %860 = mul i32 %857, %859
  %861 = urem i32 %860, 2
  %862 = icmp eq i32 %861, 0
  %863 = icmp slt i32 %858, 10
  %864 = or i1 %862, %863
  br i1 %864, label %originalBB196, label %originalBB196alteredBB

originalBB196:                                    ; preds = %856, %originalBB196alteredBB
  %865 = load i32, i32* %26, align 4, !dbg !4547
  %866 = call i32 @bkm_scale_by_power(i64* %22, i32 %865, i32 4), !dbg !4548
  store i32 %866, i32* %28, align 4, !dbg !4549
  %867 = load i32, i32* @x.77
  %868 = load i32, i32* @y.78
  %869 = sub i32 %867, 1
  %870 = mul i32 %867, %869
  %871 = urem i32 %870, 2
  %872 = icmp eq i32 %871, 0
  %873 = icmp slt i32 %868, 10
  %874 = or i1 %872, %873
  br i1 %874, label %originalBBpart2198, label %originalBB196alteredBB

originalBBpart2198:                               ; preds = %originalBB196
  br label %952, !dbg !4550

875:                                              ; preds = %originalBBpart2166
  %876 = load i32, i32* @x.77
  %877 = load i32, i32* @y.78
  %878 = sub i32 %876, 1
  %879 = mul i32 %876, %878
  %880 = urem i32 %879, 2
  %881 = icmp eq i32 %880, 0
  %882 = icmp slt i32 %877, 10
  %883 = or i1 %881, %882
  br i1 %883, label %originalBB200, label %originalBB200alteredBB

originalBB200:                                    ; preds = %875, %originalBB200alteredBB
  %884 = call i32 @bkm_scale(i64* %22, i32 2), !dbg !4551
  store i32 %884, i32* %28, align 4, !dbg !4552
  %885 = load i32, i32* @x.77
  %886 = load i32, i32* @y.78
  %887 = sub i32 %885, 1
  %888 = mul i32 %885, %887
  %889 = urem i32 %888, 2
  %890 = icmp eq i32 %889, 0
  %891 = icmp slt i32 %886, 10
  %892 = or i1 %890, %891
  br i1 %892, label %originalBBpart2202, label %originalBB200alteredBB

originalBBpart2202:                               ; preds = %originalBB200
  br label %952, !dbg !4553

893:                                              ; preds = %originalBBpart2166
  %894 = load i32, i32* @x.77
  %895 = load i32, i32* @y.78
  %896 = sub i32 %894, 1
  %897 = mul i32 %894, %896
  %898 = urem i32 %897, 2
  %899 = icmp eq i32 %898, 0
  %900 = icmp slt i32 %895, 10
  %901 = or i1 %899, %900
  br i1 %901, label %originalBB204, label %originalBB204alteredBB

originalBB204:                                    ; preds = %893, %originalBB204alteredBB
  %902 = load i32, i32* %26, align 4, !dbg !4554
  %903 = call i32 @bkm_scale_by_power(i64* %22, i32 %902, i32 8), !dbg !4555
  store i32 %903, i32* %28, align 4, !dbg !4556
  %904 = load i32, i32* @x.77
  %905 = load i32, i32* @y.78
  %906 = sub i32 %904, 1
  %907 = mul i32 %904, %906
  %908 = urem i32 %907, 2
  %909 = icmp eq i32 %908, 0
  %910 = icmp slt i32 %905, 10
  %911 = or i1 %909, %910
  br i1 %911, label %originalBBpart2206, label %originalBB204alteredBB

originalBBpart2206:                               ; preds = %originalBB204
  br label %952, !dbg !4557

912:                                              ; preds = %originalBBpart2166
  %913 = load i32, i32* @x.77
  %914 = load i32, i32* @y.78
  %915 = sub i32 %913, 1
  %916 = mul i32 %913, %915
  %917 = urem i32 %916, 2
  %918 = icmp eq i32 %917, 0
  %919 = icmp slt i32 %914, 10
  %920 = or i1 %918, %919
  br i1 %920, label %originalBB208, label %originalBB208alteredBB

originalBB208:                                    ; preds = %912, %originalBB208alteredBB
  %921 = load i32, i32* %26, align 4, !dbg !4558
  %922 = call i32 @bkm_scale_by_power(i64* %22, i32 %921, i32 7), !dbg !4559
  store i32 %922, i32* %28, align 4, !dbg !4560
  %923 = load i32, i32* @x.77
  %924 = load i32, i32* @y.78
  %925 = sub i32 %923, 1
  %926 = mul i32 %923, %925
  %927 = urem i32 %926, 2
  %928 = icmp eq i32 %927, 0
  %929 = icmp slt i32 %924, 10
  %930 = or i1 %928, %929
  br i1 %930, label %originalBBpart2210, label %originalBB208alteredBB

originalBBpart2210:                               ; preds = %originalBB208
  br label %952, !dbg !4561

931:                                              ; preds = %originalBBpart2166
  %932 = load i32, i32* @x.77
  %933 = load i32, i32* @y.78
  %934 = sub i32 %932, 1
  %935 = mul i32 %932, %934
  %936 = urem i32 %935, 2
  %937 = icmp eq i32 %936, 0
  %938 = icmp slt i32 %933, 10
  %939 = or i1 %937, %938
  br i1 %939, label %originalBB212, label %originalBB212alteredBB

originalBB212:                                    ; preds = %931, %originalBB212alteredBB
  %940 = load i64, i64* %22, align 8, !dbg !4562
  %941 = load i64*, i64** %18, align 8, !dbg !4563
  store i64 %940, i64* %941, align 8, !dbg !4564
  %942 = load i32, i32* %23, align 4, !dbg !4565
  %943 = or i32 %942, 2, !dbg !4566
  store i32 %943, i32* %14, align 4, !dbg !4567
  %944 = load i32, i32* @x.77
  %945 = load i32, i32* @y.78
  %946 = sub i32 %944, 1
  %947 = mul i32 %944, %946
  %948 = urem i32 %947, 2
  %949 = icmp eq i32 %948, 0
  %950 = icmp slt i32 %945, 10
  %951 = or i1 %949, %950
  br i1 %951, label %originalBBpart2223, label %originalBB212alteredBB

originalBBpart2223:                               ; preds = %originalBB212
  br label %1037, !dbg !4567

952:                                              ; preds = %originalBBpart2210, %originalBBpart2206, %originalBBpart2202, %originalBBpart2198, %originalBBpart2194, %originalBBpart2190, %originalBBpart2186, %796, %originalBBpart2182, %originalBBpart2178, %originalBBpart2174, %originalBBpart2170
  %953 = load i32, i32* @x.77
  %954 = load i32, i32* @y.78
  %955 = sub i32 %953, 1
  %956 = mul i32 %953, %955
  %957 = urem i32 %956, 2
  %958 = icmp eq i32 %957, 0
  %959 = icmp slt i32 %954, 10
  %960 = or i1 %958, %959
  br i1 %960, label %originalBB225, label %originalBB225alteredBB

originalBB225:                                    ; preds = %952, %originalBB225alteredBB
  %961 = load i32, i32* %28, align 4, !dbg !4568
  %962 = load i32, i32* %23, align 4, !dbg !4569
  %963 = or i32 %962, %961, !dbg !4569
  store i32 %963, i32* %23, align 4, !dbg !4569
  %964 = load i32, i32* %27, align 4, !dbg !4570
  %965 = load i8**, i8*** %21, align 8, !dbg !4571
  %966 = load i8*, i8** %965, align 8, !dbg !4572
  %967 = sext i32 %964 to i64, !dbg !4572
  %968 = getelementptr inbounds i8, i8* %966, i64 %967, !dbg !4572
  store i8* %968, i8** %965, align 8, !dbg !4572
  %969 = load i8**, i8*** %21, align 8, !dbg !4573
  %970 = load i8*, i8** %969, align 8, !dbg !4575
  %971 = load i8, i8* %970, align 1, !dbg !4576
  %972 = icmp ne i8 %971, 0, !dbg !4576
  %973 = load i32, i32* @x.77
  %974 = load i32, i32* @y.78
  %975 = sub i32 %973, 1
  %976 = mul i32 %973, %975
  %977 = urem i32 %976, 2
  %978 = icmp eq i32 %977, 0
  %979 = icmp slt i32 %974, 10
  %980 = or i1 %978, %979
  br i1 %980, label %originalBBpart2228, label %originalBB225alteredBB

originalBBpart2228:                               ; preds = %originalBB225
  br i1 %972, label %981, label %1000, !dbg !4577

981:                                              ; preds = %originalBBpart2228
  %982 = load i32, i32* @x.77
  %983 = load i32, i32* @y.78
  %984 = sub i32 %982, 1
  %985 = mul i32 %982, %984
  %986 = urem i32 %985, 2
  %987 = icmp eq i32 %986, 0
  %988 = icmp slt i32 %983, 10
  %989 = or i1 %987, %988
  br i1 %989, label %originalBB230, label %originalBB230alteredBB

originalBB230:                                    ; preds = %981, %originalBB230alteredBB
  %990 = load i32, i32* %23, align 4, !dbg !4578
  %991 = or i32 %990, 2, !dbg !4578
  store i32 %991, i32* %23, align 4, !dbg !4578
  %992 = load i32, i32* @x.77
  %993 = load i32, i32* @y.78
  %994 = sub i32 %992, 1
  %995 = mul i32 %992, %994
  %996 = urem i32 %995, 2
  %997 = icmp eq i32 %996, 0
  %998 = icmp slt i32 %993, 10
  %999 = or i1 %997, %998
  br i1 %999, label %originalBBpart2242, label %originalBB230alteredBB

originalBBpart2242:                               ; preds = %originalBB230
  br label %1000, !dbg !4579

1000:                                             ; preds = %originalBBpart2242, %originalBBpart2228
  %1001 = load i32, i32* @x.77
  %1002 = load i32, i32* @y.78
  %1003 = sub i32 %1001, 1
  %1004 = mul i32 %1001, %1003
  %1005 = urem i32 %1004, 2
  %1006 = icmp eq i32 %1005, 0
  %1007 = icmp slt i32 %1002, 10
  %1008 = or i1 %1006, %1007
  br i1 %1008, label %originalBB244, label %originalBB244alteredBB

originalBB244:                                    ; preds = %1000, %originalBB244alteredBB
  %1009 = load i32, i32* @x.77
  %1010 = load i32, i32* @y.78
  %1011 = sub i32 %1009, 1
  %1012 = mul i32 %1009, %1011
  %1013 = urem i32 %1012, 2
  %1014 = icmp eq i32 %1013, 0
  %1015 = icmp slt i32 %1010, 10
  %1016 = or i1 %1014, %1015
  br i1 %1016, label %originalBBpart2246, label %originalBB244alteredBB

originalBBpart2246:                               ; preds = %originalBB244
  br label %1017, !dbg !4580

1017:                                             ; preds = %originalBBpart2246, %originalBBpart2103
  %1018 = load i32, i32* @x.77
  %1019 = load i32, i32* @y.78
  %1020 = sub i32 %1018, 1
  %1021 = mul i32 %1018, %1020
  %1022 = urem i32 %1021, 2
  %1023 = icmp eq i32 %1022, 0
  %1024 = icmp slt i32 %1019, 10
  %1025 = or i1 %1023, %1024
  br i1 %1025, label %originalBB248, label %originalBB248alteredBB

originalBB248:                                    ; preds = %1017, %originalBB248alteredBB
  %1026 = load i64, i64* %22, align 8, !dbg !4581
  %1027 = load i64*, i64** %18, align 8, !dbg !4582
  store i64 %1026, i64* %1027, align 8, !dbg !4583
  %1028 = load i32, i32* %23, align 4, !dbg !4584
  store i32 %1028, i32* %14, align 4, !dbg !4585
  %1029 = load i32, i32* @x.77
  %1030 = load i32, i32* @y.78
  %1031 = sub i32 %1029, 1
  %1032 = mul i32 %1029, %1031
  %1033 = urem i32 %1032, 2
  %1034 = icmp eq i32 %1033, 0
  %1035 = icmp slt i32 %1030, 10
  %1036 = or i1 %1034, %1035
  br i1 %1036, label %originalBBpart2250, label %originalBB248alteredBB

originalBBpart2250:                               ; preds = %originalBB248
  br label %1037, !dbg !4585

1037:                                             ; preds = %originalBBpart2250, %originalBBpart2223, %originalBBpart2124, %originalBBpart299, %originalBBpart283, %originalBBpart267, %203
  %1038 = load i32, i32* %14, align 4, !dbg !4586
  ret i32 %1038, !dbg !4586

originalBBalteredBB:                              ; preds = %originalBB, %5
  %1039 = alloca i32, align 4
  %1040 = alloca i8*, align 8
  %1041 = alloca i8**, align 8
  %1042 = alloca i32, align 4
  %1043 = alloca i64*, align 8
  %1044 = alloca i8*, align 8
  %1045 = alloca i8*, align 8
  %1046 = alloca i8**, align 8
  %1047 = alloca i64, align 8
  %1048 = alloca i32, align 4
  %1049 = alloca i8*, align 8
  %1050 = alloca i8, align 1
  %1051 = alloca i32, align 4
  %1052 = alloca i32, align 4
  %1053 = alloca i32, align 4
  store i8* %0, i8** %1040, align 8
  call void @llvm.dbg.declare(metadata i8** %1040, metadata !4587, metadata !DIExpression()), !dbg !4366
  store i8** %1, i8*** %1041, align 8
  call void @llvm.dbg.declare(metadata i8*** %1041, metadata !4590, metadata !DIExpression()), !dbg !4368
  store i32 %2, i32* %1042, align 4
  call void @llvm.dbg.declare(metadata i32* %1042, metadata !4591, metadata !DIExpression()), !dbg !4370
  store i64* %3, i64** %1043, align 8
  call void @llvm.dbg.declare(metadata i64** %1043, metadata !4592, metadata !DIExpression()), !dbg !4372
  store i8* %4, i8** %1044, align 8
  call void @llvm.dbg.declare(metadata i8** %1044, metadata !4593, metadata !DIExpression()), !dbg !4374
  call void @llvm.dbg.declare(metadata i8** %1045, metadata !4594, metadata !DIExpression()), !dbg !4376
  call void @llvm.dbg.declare(metadata i8*** %1046, metadata !4595, metadata !DIExpression()), !dbg !4378
  call void @llvm.dbg.declare(metadata i64* %1047, metadata !4596, metadata !DIExpression()), !dbg !4380
  call void @llvm.dbg.declare(metadata i32* %1048, metadata !4597, metadata !DIExpression()), !dbg !4382
  store i32 0, i32* %1048, align 4, !dbg !4382
  %1054 = load i32, i32* %1042, align 4, !dbg !4383
  %1055 = icmp sle i32 0, %1054, !dbg !4383
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %39
  %1056 = load i32, i32* %17, align 4, !dbg !4383
  %1057 = icmp sle i32 %1056, 36, !dbg !4383
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %58
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %79
  %1058 = load i8**, i8*** %16, align 8, !dbg !4388
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %97
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %114
  store i8** %115, i8*** %21, align 8, !dbg !4389
  %1059 = call i32* @__errno_location() #15, !dbg !4390
  store i32 0, i32* %1059, align 4, !dbg !4391
  call void @llvm.dbg.declare(metadata !4, metadata !4598, metadata !DIExpression()), !dbg !4395
  %1060 = load i8*, i8** %15, align 8, !dbg !4396
  store i8* %1060, i8** %24, align 8, !dbg !4395
  call void @llvm.dbg.declare(metadata !4, metadata !4603, metadata !DIExpression()), !dbg !4398
  %1061 = load i8*, i8** %24, align 8, !dbg !4399
  %1062 = load i8, i8* %1061, align 1, !dbg !4400
  store i8 %1062, i8* %25, align 1, !dbg !4398
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %136
  %1063 = call i16** @__ctype_b_loc() #15, !dbg !4402
  %1064 = load i16*, i16** %1063, align 8, !dbg !4402
  %1065 = load i8, i8* %25, align 1, !dbg !4402
  %1066 = zext i8 %1065 to i32, !dbg !4402
  %1067 = sext i32 %1066 to i64, !dbg !4402
  %1068 = getelementptr inbounds i16, i16* %1064, i64 %1067, !dbg !4402
  %1069 = load i16, i16* %1068, align 2, !dbg !4402
  %1070 = zext i16 %1069 to i32, !dbg !4402
  %_ = sub i32 %1070, 8192
  %gen = mul i32 %_, 8192
  %_23 = sub i32 %1070, 8192
  %gen24 = mul i32 %_23, 8192
  %_25 = sub i32 %1070, 8192
  %gen26 = mul i32 %_25, 8192
  %_27 = sub i32 %1070, 8192
  %gen28 = mul i32 %_27, 8192
  %_29 = sub i32 %1070, 8192
  %gen30 = mul i32 %_29, 8192
  %_31 = sub i32 0, %1070
  %gen32 = add i32 %_31, 8192
  %_33 = shl i32 %1070, 8192
  %1071 = and i32 %1070, 8192, !dbg !4402
  %1072 = icmp ne i32 %1071, 0, !dbg !4401
  br label %originalBB22

originalBB37alteredBB:                            ; preds = %originalBB37, %163
  %1073 = load i8*, i8** %24, align 8, !dbg !4403
  %1074 = getelementptr inbounds i8, i8* %1073, i32 1, !dbg !4403
  store i8* %1074, i8** %24, align 8, !dbg !4403
  %1075 = load i8, i8* %1074, align 1, !dbg !4404
  store i8 %1075, i8* %25, align 1, !dbg !4405
  br label %originalBB37

originalBB41alteredBB:                            ; preds = %originalBB41, %183
  %1076 = load i8, i8* %25, align 1, !dbg !4408
  %1077 = zext i8 %1076 to i32, !dbg !4408
  %1078 = icmp eq i32 %1077, 45, !dbg !4410
  br label %originalBB41

originalBB45alteredBB:                            ; preds = %originalBB45, %204
  %1079 = load i8*, i8** %15, align 8, !dbg !4413
  %1080 = load i8**, i8*** %21, align 8, !dbg !4414
  %1081 = load i32, i32* %17, align 4, !dbg !4415
  %1082 = call i64 @strtoul(i8* %1079, i8** %1080, i32 %1081) #10, !dbg !4416
  store i64 %1082, i64* %22, align 8, !dbg !4417
  %1083 = load i8**, i8*** %21, align 8, !dbg !4418
  %1084 = load i8*, i8** %1083, align 8, !dbg !4420
  %1085 = load i8*, i8** %15, align 8, !dbg !4421
  %1086 = icmp eq i8* %1084, %1085, !dbg !4422
  br label %originalBB45

originalBB49alteredBB:                            ; preds = %originalBB49, %229
  %1087 = load i8*, i8** %19, align 8, !dbg !4424
  %1088 = icmp ne i8* %1087, null, !dbg !4424
  br label %originalBB49

originalBB53alteredBB:                            ; preds = %originalBB53, %248
  %1089 = load i8**, i8*** %21, align 8, !dbg !4428
  %1090 = load i8*, i8** %1089, align 8, !dbg !4429
  %1091 = load i8, i8* %1090, align 1, !dbg !4430
  %1092 = sext i8 %1091 to i32, !dbg !4430
  %1093 = icmp ne i32 %1092, 0, !dbg !4430
  br label %originalBB53

originalBB57alteredBB:                            ; preds = %originalBB57, %270
  %1094 = load i8*, i8** %19, align 8, !dbg !4432
  %1095 = load i8**, i8*** %21, align 8, !dbg !4433
  %1096 = load i8*, i8** %1095, align 8, !dbg !4434
  %1097 = load i8, i8* %1096, align 1, !dbg !4435
  %1098 = sext i8 %1097 to i32, !dbg !4435
  %1099 = call i8* @strchr(i8* %1094, i32 %1098) #13, !dbg !4436
  %1100 = icmp ne i8* %1099, null, !dbg !4436
  br label %originalBB57

originalBB61alteredBB:                            ; preds = %originalBB61, %294
  store i64 1, i64* %22, align 8, !dbg !4438
  br label %originalBB61

originalBB65alteredBB:                            ; preds = %originalBB65, %311
  store i32 4, i32* %14, align 4, !dbg !4440
  br label %originalBB65

originalBB69alteredBB:                            ; preds = %originalBB69, %328
  br label %originalBB69

originalBB73alteredBB:                            ; preds = %originalBB73, %345
  %1101 = call i32* @__errno_location() #15, !dbg !4442
  %1102 = load i32, i32* %1101, align 4, !dbg !4442
  %1103 = icmp ne i32 %1102, 0, !dbg !4444
  br label %originalBB73

originalBB77alteredBB:                            ; preds = %originalBB77, %365
  %1104 = call i32* @__errno_location() #15, !dbg !4446
  %1105 = load i32, i32* %1104, align 4, !dbg !4446
  %1106 = icmp ne i32 %1105, 34, !dbg !4449
  br label %originalBB77

originalBB81alteredBB:                            ; preds = %originalBB81, %385
  store i32 4, i32* %14, align 4, !dbg !4451
  br label %originalBB81

originalBB85alteredBB:                            ; preds = %originalBB85, %402
  store i32 1, i32* %23, align 4, !dbg !4452
  br label %originalBB85

originalBB89alteredBB:                            ; preds = %originalBB89, %419
  br label %originalBB89

originalBB93alteredBB:                            ; preds = %originalBB93, %436
  %1107 = load i8*, i8** %19, align 8, !dbg !4454
  %1108 = icmp ne i8* %1107, null, !dbg !4454
  br label %originalBB93

originalBB97alteredBB:                            ; preds = %originalBB97, %455
  %1109 = load i64, i64* %22, align 8, !dbg !4457
  %1110 = load i64*, i64** %18, align 8, !dbg !4459
  store i64 %1109, i64* %1110, align 8, !dbg !4460
  %1111 = load i32, i32* %23, align 4, !dbg !4461
  store i32 %1111, i32* %14, align 4, !dbg !4462
  br label %originalBB97

originalBB101alteredBB:                           ; preds = %originalBB101, %475
  %1112 = load i8**, i8*** %21, align 8, !dbg !4463
  %1113 = load i8*, i8** %1112, align 8, !dbg !4465
  %1114 = load i8, i8* %1113, align 1, !dbg !4466
  %1115 = sext i8 %1114 to i32, !dbg !4466
  %1116 = icmp ne i32 %1115, 0, !dbg !4467
  br label %originalBB101

originalBB105alteredBB:                           ; preds = %originalBB105, %497
  store i32 1024, i32* %26, align 4, !dbg !4471
  call void @llvm.dbg.declare(metadata !4, metadata !4604, metadata !DIExpression()), !dbg !4473
  store i32 1, i32* %27, align 4, !dbg !4473
  call void @llvm.dbg.declare(metadata !4, metadata !4609, metadata !DIExpression()), !dbg !4475
  %1117 = load i8*, i8** %19, align 8, !dbg !4476
  %1118 = load i8**, i8*** %21, align 8, !dbg !4478
  %1119 = load i8*, i8** %1118, align 8, !dbg !4479
  %1120 = load i8, i8* %1119, align 1, !dbg !4480
  %1121 = sext i8 %1120 to i32, !dbg !4480
  %1122 = call i8* @strchr(i8* %1117, i32 %1121) #13, !dbg !4481
  %1123 = icmp ne i8* %1122, null, !dbg !4481
  br label %originalBB105

originalBB109alteredBB:                           ; preds = %originalBB109, %521
  %1124 = load i64, i64* %22, align 8, !dbg !4483
  %1125 = load i64*, i64** %18, align 8, !dbg !4485
  store i64 %1124, i64* %1125, align 8, !dbg !4486
  %1126 = load i32, i32* %23, align 4, !dbg !4487
  %_110 = sub i32 0, %1126
  %gen111 = add i32 %_110, 2
  %_112 = sub i32 %1126, 2
  %gen113 = mul i32 %_112, 2
  %_114 = shl i32 %1126, 2
  %_115 = sub i32 0, %1126
  %gen116 = add i32 %_115, 2
  %_117 = sub i32 0, %1126
  %gen118 = add i32 %_117, 2
  %_119 = shl i32 %1126, 2
  %_120 = sub i32 %1126, 2
  %gen121 = mul i32 %_120, 2
  %_122 = shl i32 %1126, 2
  %1127 = or i32 %1126, 2, !dbg !4488
  store i32 %1127, i32* %14, align 4, !dbg !4489
  br label %originalBB109

originalBB126alteredBB:                           ; preds = %originalBB126, %542
  %1128 = load i8**, i8*** %21, align 8, !dbg !4490
  %1129 = load i8*, i8** %1128, align 8, !dbg !4491
  %1130 = load i8, i8* %1129, align 1, !dbg !4492
  %1131 = sext i8 %1130 to i32, !dbg !4492
  br label %originalBB126

originalBB130alteredBB:                           ; preds = %originalBB130, %563
  %1132 = load i8*, i8** %19, align 8, !dbg !4494
  %1133 = call i8* @strchr(i8* %1132, i32 48) #13, !dbg !4497
  %1134 = icmp ne i8* %1133, null, !dbg !4497
  br label %originalBB130

originalBB134alteredBB:                           ; preds = %originalBB134, %583
  %1135 = load i8**, i8*** %21, align 8, !dbg !4499
  %1136 = getelementptr inbounds i8*, i8** %1135, i64 0, !dbg !4499
  %1137 = load i8*, i8** %1136, align 8, !dbg !4499
  %1138 = getelementptr inbounds i8, i8* %1137, i64 1, !dbg !4499
  %1139 = load i8, i8* %1138, align 1, !dbg !4499
  %1140 = sext i8 %1139 to i32, !dbg !4499
  br label %originalBB134

originalBB138alteredBB:                           ; preds = %originalBB138, %606
  %1141 = load i8**, i8*** %21, align 8, !dbg !4501
  %1142 = getelementptr inbounds i8*, i8** %1141, i64 0, !dbg !4501
  %1143 = load i8*, i8** %1142, align 8, !dbg !4501
  %1144 = getelementptr inbounds i8, i8* %1143, i64 2, !dbg !4501
  %1145 = load i8, i8* %1144, align 1, !dbg !4501
  %1146 = sext i8 %1145 to i32, !dbg !4501
  %1147 = icmp eq i32 %1146, 66, !dbg !4504
  br label %originalBB138

originalBB142alteredBB:                           ; preds = %originalBB142, %633
  br label %originalBB142

originalBB146alteredBB:                           ; preds = %originalBB146, %650
  store i32 1000, i32* %26, align 4, !dbg !4509
  %1148 = load i32, i32* %27, align 4, !dbg !4510
  %_147 = sub i32 0, %1148
  %gen148 = add i32 %_147, 1
  %_149 = sub i32 0, %1148
  %gen150 = add i32 %_149, 1
  %_151 = sub i32 %1148, 1
  %gen152 = mul i32 %_151, 1
  %1149 = add nsw i32 %1148, 1, !dbg !4510
  store i32 %1149, i32* %27, align 4, !dbg !4510
  br label %originalBB146

originalBB156alteredBB:                           ; preds = %originalBB156, %669
  br label %originalBB156

originalBB160alteredBB:                           ; preds = %originalBB160, %686
  br label %originalBB160

originalBB164alteredBB:                           ; preds = %originalBB164, %703
  %1150 = load i8**, i8*** %21, align 8, !dbg !4514
  %1151 = load i8*, i8** %1150, align 8, !dbg !4515
  %1152 = load i8, i8* %1151, align 1, !dbg !4516
  %1153 = sext i8 %1152 to i32, !dbg !4516
  br label %originalBB164

originalBB168alteredBB:                           ; preds = %originalBB168, %724
  %1154 = call i32 @bkm_scale(i64* %22, i32 512), !dbg !4518
  store i32 %1154, i32* %28, align 4, !dbg !4520
  br label %originalBB168

originalBB172alteredBB:                           ; preds = %originalBB172, %742
  %1155 = call i32 @bkm_scale(i64* %22, i32 1024), !dbg !4522
  store i32 %1155, i32* %28, align 4, !dbg !4523
  br label %originalBB172

originalBB176alteredBB:                           ; preds = %originalBB176, %760
  store i32 0, i32* %28, align 4, !dbg !4525
  br label %originalBB176

originalBB180alteredBB:                           ; preds = %originalBB180, %777
  %1156 = load i32, i32* %26, align 4, !dbg !4527
  %1157 = call i32 @bkm_scale_by_power(i64* %22, i32 %1156, i32 6), !dbg !4528
  store i32 %1157, i32* %28, align 4, !dbg !4529
  br label %originalBB180

originalBB184alteredBB:                           ; preds = %originalBB184, %799
  %1158 = load i32, i32* %26, align 4, !dbg !4535
  %1159 = call i32 @bkm_scale_by_power(i64* %22, i32 %1158, i32 1), !dbg !4536
  store i32 %1159, i32* %28, align 4, !dbg !4537
  br label %originalBB184

originalBB188alteredBB:                           ; preds = %originalBB188, %818
  %1160 = load i32, i32* %26, align 4, !dbg !4539
  %1161 = call i32 @bkm_scale_by_power(i64* %22, i32 %1160, i32 2), !dbg !4540
  store i32 %1161, i32* %28, align 4, !dbg !4541
  br label %originalBB188

originalBB192alteredBB:                           ; preds = %originalBB192, %837
  %1162 = load i32, i32* %26, align 4, !dbg !4543
  %1163 = call i32 @bkm_scale_by_power(i64* %22, i32 %1162, i32 5), !dbg !4544
  store i32 %1163, i32* %28, align 4, !dbg !4545
  br label %originalBB192

originalBB196alteredBB:                           ; preds = %originalBB196, %856
  %1164 = load i32, i32* %26, align 4, !dbg !4547
  %1165 = call i32 @bkm_scale_by_power(i64* %22, i32 %1164, i32 4), !dbg !4548
  store i32 %1165, i32* %28, align 4, !dbg !4549
  br label %originalBB196

originalBB200alteredBB:                           ; preds = %originalBB200, %875
  %1166 = call i32 @bkm_scale(i64* %22, i32 2), !dbg !4551
  store i32 %1166, i32* %28, align 4, !dbg !4552
  br label %originalBB200

originalBB204alteredBB:                           ; preds = %originalBB204, %893
  %1167 = load i32, i32* %26, align 4, !dbg !4554
  %1168 = call i32 @bkm_scale_by_power(i64* %22, i32 %1167, i32 8), !dbg !4555
  store i32 %1168, i32* %28, align 4, !dbg !4556
  br label %originalBB204

originalBB208alteredBB:                           ; preds = %originalBB208, %912
  %1169 = load i32, i32* %26, align 4, !dbg !4558
  %1170 = call i32 @bkm_scale_by_power(i64* %22, i32 %1169, i32 7), !dbg !4559
  store i32 %1170, i32* %28, align 4, !dbg !4560
  br label %originalBB208

originalBB212alteredBB:                           ; preds = %originalBB212, %931
  %1171 = load i64, i64* %22, align 8, !dbg !4562
  %1172 = load i64*, i64** %18, align 8, !dbg !4563
  store i64 %1171, i64* %1172, align 8, !dbg !4564
  %1173 = load i32, i32* %23, align 4, !dbg !4565
  %_213 = sub i32 0, %1173
  %gen214 = add i32 %_213, 2
  %_215 = sub i32 0, %1173
  %gen216 = add i32 %_215, 2
  %_217 = sub i32 %1173, 2
  %gen218 = mul i32 %_217, 2
  %_219 = shl i32 %1173, 2
  %_220 = sub i32 %1173, 2
  %gen221 = mul i32 %_220, 2
  %1174 = or i32 %1173, 2, !dbg !4566
  store i32 %1174, i32* %14, align 4, !dbg !4567
  br label %originalBB212

originalBB225alteredBB:                           ; preds = %originalBB225, %952
  %1175 = load i32, i32* %28, align 4, !dbg !4568
  %1176 = load i32, i32* %23, align 4, !dbg !4569
  %_226 = shl i32 %1176, %1175
  %1177 = or i32 %1176, %1175, !dbg !4569
  store i32 %1177, i32* %23, align 4, !dbg !4569
  %1178 = load i32, i32* %27, align 4, !dbg !4570
  %1179 = load i8**, i8*** %21, align 8, !dbg !4571
  %1180 = load i8*, i8** %1179, align 8, !dbg !4572
  %1181 = sext i32 %1178 to i64, !dbg !4572
  %1182 = getelementptr inbounds i8, i8* %1180, i64 %1181, !dbg !4572
  store i8* %1182, i8** %1179, align 8, !dbg !4572
  %1183 = load i8**, i8*** %21, align 8, !dbg !4573
  %1184 = load i8*, i8** %1183, align 8, !dbg !4575
  %1185 = load i8, i8* %1184, align 1, !dbg !4576
  %1186 = icmp ne i8 %1185, 0, !dbg !4576
  br label %originalBB225

originalBB230alteredBB:                           ; preds = %originalBB230, %981
  %1187 = load i32, i32* %23, align 4, !dbg !4578
  %_231 = shl i32 %1187, 2
  %_232 = sub i32 %1187, 2
  %gen233 = mul i32 %_232, 2
  %_234 = shl i32 %1187, 2
  %_235 = sub i32 0, %1187
  %gen236 = add i32 %_235, 2
  %_237 = sub i32 0, %1187
  %gen238 = add i32 %_237, 2
  %_239 = sub i32 0, %1187
  %gen240 = add i32 %_239, 2
  %1188 = or i32 %1187, 2, !dbg !4578
  store i32 %1188, i32* %23, align 4, !dbg !4578
  br label %originalBB230

originalBB244alteredBB:                           ; preds = %originalBB244, %1000
  br label %originalBB244

originalBB248alteredBB:                           ; preds = %originalBB248, %1017
  %1189 = load i64, i64* %22, align 8, !dbg !4581
  %1190 = load i64*, i64** %18, align 8, !dbg !4582
  store i64 %1189, i64* %1190, align 8, !dbg !4583
  %1191 = load i32, i32* %23, align 4, !dbg !4584
  store i32 %1191, i32* %14, align 4, !dbg !4585
  br label %originalBB248
}

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #5

; Function Attrs: nounwind
declare dso_local i64 @strtoul(i8*, i8**, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale(i64*, i32) #4 !dbg !4610 {
  %3 = alloca i32, align 4
  %4 = alloca i64*, align 8
  %5 = alloca i32, align 4
  store i64* %0, i64** %4, align 8
  call void @llvm.dbg.declare(metadata i64** %4, metadata !4613, metadata !DIExpression()), !dbg !4614
  store i32 %1, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !4615, metadata !DIExpression()), !dbg !4616
  %6 = load i32, i32* %5, align 4, !dbg !4617
  %7 = sext i32 %6 to i64, !dbg !4617
  %8 = udiv i64 -1, %7, !dbg !4619
  %9 = load i64*, i64** %4, align 8, !dbg !4620
  %10 = load i64, i64* %9, align 8, !dbg !4621
  %11 = icmp ult i64 %8, %10, !dbg !4622
  br i1 %11, label %12, label %30, !dbg !4623

12:                                               ; preds = %2
  %13 = load i32, i32* @x.79
  %14 = load i32, i32* @y.80
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %12, %originalBBalteredBB
  %21 = load i64*, i64** %4, align 8, !dbg !4624
  store i64 -1, i64* %21, align 8, !dbg !4626
  store i32 1, i32* %3, align 4, !dbg !4627
  %22 = load i32, i32* @x.79
  %23 = load i32, i32* @y.80
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %52, !dbg !4627

30:                                               ; preds = %2
  %31 = load i32, i32* @x.79
  %32 = load i32, i32* @y.80
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load i32, i32* %5, align 4, !dbg !4628
  %40 = sext i32 %39 to i64, !dbg !4628
  %41 = load i64*, i64** %4, align 8, !dbg !4629
  %42 = load i64, i64* %41, align 8, !dbg !4630
  %43 = mul i64 %42, %40, !dbg !4630
  store i64 %43, i64* %41, align 8, !dbg !4630
  store i32 0, i32* %3, align 4, !dbg !4631
  %44 = load i32, i32* @x.79
  %45 = load i32, i32* @y.80
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBBpart215, label %originalBB1alteredBB

originalBBpart215:                                ; preds = %originalBB1
  br label %52, !dbg !4631

52:                                               ; preds = %originalBBpart215, %originalBBpart2
  %53 = load i32, i32* %3, align 4, !dbg !4632
  ret i32 %53, !dbg !4632

originalBBalteredBB:                              ; preds = %originalBB, %12
  %54 = load i64*, i64** %4, align 8, !dbg !4624
  store i64 -1, i64* %54, align 8, !dbg !4626
  store i32 1, i32* %3, align 4, !dbg !4627
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %55 = load i32, i32* %5, align 4, !dbg !4628
  %56 = sext i32 %55 to i64, !dbg !4628
  %57 = load i64*, i64** %4, align 8, !dbg !4629
  %58 = load i64, i64* %57, align 8, !dbg !4630
  %_ = shl i64 %58, %56
  %_2 = sub i64 0, %58
  %gen = add i64 %_2, %56
  %_3 = sub i64 %58, %56
  %gen4 = mul i64 %_3, %56
  %_5 = sub i64 %58, %56
  %gen6 = mul i64 %_5, %56
  %_7 = sub i64 0, %58
  %gen8 = add i64 %_7, %56
  %_9 = shl i64 %58, %56
  %_10 = sub i64 0, %58
  %gen11 = add i64 %_10, %56
  %_12 = sub i64 %58, %56
  %gen13 = mul i64 %_12, %56
  %59 = mul i64 %58, %56, !dbg !4630
  store i64 %59, i64* %57, align 8, !dbg !4630
  store i32 0, i32* %3, align 4, !dbg !4631
  br label %originalBB1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale_by_power(i64*, i32, i32) #4 !dbg !4633 {
  %4 = load i32, i32* @x.81
  %5 = load i32, i32* @y.82
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i64*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i64* %0, i64** %12, align 8
  call void @llvm.dbg.declare(metadata i64** %12, metadata !4636, metadata !DIExpression()), !dbg !4637
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !4638, metadata !DIExpression()), !dbg !4639
  store i32 %2, i32* %14, align 4
  call void @llvm.dbg.declare(metadata i32* %14, metadata !4640, metadata !DIExpression()), !dbg !4641
  call void @llvm.dbg.declare(metadata i32* %15, metadata !4642, metadata !DIExpression()), !dbg !4643
  store i32 0, i32* %15, align 4, !dbg !4643
  %16 = load i32, i32* @x.81
  %17 = load i32, i32* @y.82
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %24, !dbg !4644

24:                                               ; preds = %originalBBpart210, %originalBBpart2
  %25 = load i32, i32* @x.81
  %26 = load i32, i32* @y.82
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i32, i32* %14, align 4, !dbg !4645
  %34 = add nsw i32 %33, -1, !dbg !4645
  store i32 %34, i32* %14, align 4, !dbg !4645
  %35 = icmp ne i32 %33, 0, !dbg !4644
  %36 = load i32, i32* @x.81
  %37 = load i32, i32* @y.82
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %35, label %44, label %66, !dbg !4644

44:                                               ; preds = %originalBBpart24
  %45 = load i32, i32* @x.81
  %46 = load i32, i32* @y.82
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  %53 = load i64*, i64** %12, align 8, !dbg !4646
  %54 = load i32, i32* %13, align 4, !dbg !4647
  %55 = call i32 @bkm_scale(i64* %53, i32 %54), !dbg !4648
  %56 = load i32, i32* %15, align 4, !dbg !4649
  %57 = or i32 %56, %55, !dbg !4649
  store i32 %57, i32* %15, align 4, !dbg !4649
  %58 = load i32, i32* @x.81
  %59 = load i32, i32* @y.82
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart210, label %originalBB6alteredBB

originalBBpart210:                                ; preds = %originalBB6
  br label %24, !dbg !4644, !llvm.loop !4650

66:                                               ; preds = %originalBBpart24
  %67 = load i32, i32* @x.81
  %68 = load i32, i32* @y.82
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %66, %originalBB12alteredBB
  %75 = load i32, i32* %15, align 4, !dbg !4652
  %76 = load i32, i32* @x.81
  %77 = load i32, i32* @y.82
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart214, label %originalBB12alteredBB

originalBBpart214:                                ; preds = %originalBB12
  ret i32 %75, !dbg !4653

originalBBalteredBB:                              ; preds = %originalBB, %3
  %84 = alloca i64*, align 8
  %85 = alloca i32, align 4
  %86 = alloca i32, align 4
  %87 = alloca i32, align 4
  store i64* %0, i64** %84, align 8
  call void @llvm.dbg.declare(metadata i64** %84, metadata !4654, metadata !DIExpression()), !dbg !4637
  store i32 %1, i32* %85, align 4
  call void @llvm.dbg.declare(metadata i32* %85, metadata !4657, metadata !DIExpression()), !dbg !4639
  store i32 %2, i32* %86, align 4
  call void @llvm.dbg.declare(metadata i32* %86, metadata !4658, metadata !DIExpression()), !dbg !4641
  call void @llvm.dbg.declare(metadata i32* %87, metadata !4659, metadata !DIExpression()), !dbg !4643
  store i32 0, i32* %87, align 4, !dbg !4643
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %88 = load i32, i32* %14, align 4, !dbg !4645
  %_ = sub i32 0, %88
  %gen = add i32 %_, -1
  %89 = add nsw i32 %88, -1, !dbg !4645
  store i32 %89, i32* %14, align 4, !dbg !4645
  %90 = icmp ne i32 %88, 0, !dbg !4644
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  %91 = load i64*, i64** %12, align 8, !dbg !4646
  %92 = load i32, i32* %13, align 4, !dbg !4647
  %93 = call i32 @bkm_scale(i64* %91, i32 %92), !dbg !4648
  %94 = load i32, i32* %15, align 4, !dbg !4649
  %_7 = sub i32 %94, %93
  %gen8 = mul i32 %_7, %93
  %95 = or i32 %94, %93, !dbg !4649
  store i32 %95, i32* %15, align 4, !dbg !4649
  br label %originalBB6

originalBB12alteredBB:                            ; preds = %originalBB12, %66
  %96 = load i32, i32* %15, align 4, !dbg !4652
  br label %originalBB12
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @rpl_mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #4 !dbg !4660 {
  %5 = load i32, i32* @x.83
  %6 = load i32, i32* @y.84
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i64, align 8
  %14 = alloca i32*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i64, align 8
  %17 = alloca %struct.__mbstate_t*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i32, align 4
  %20 = alloca i8, align 1
  store i32* %0, i32** %14, align 8
  call void @llvm.dbg.declare(metadata i32** %14, metadata !4676, metadata !DIExpression()), !dbg !4677
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !4678, metadata !DIExpression()), !dbg !4679
  store i64 %2, i64* %16, align 8
  call void @llvm.dbg.declare(metadata i64* %16, metadata !4680, metadata !DIExpression()), !dbg !4681
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %17, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %17, metadata !4682, metadata !DIExpression()), !dbg !4683
  call void @llvm.dbg.declare(metadata i64* %18, metadata !4684, metadata !DIExpression()), !dbg !4685
  call void @llvm.dbg.declare(metadata i32* %19, metadata !4686, metadata !DIExpression()), !dbg !4687
  %21 = load i32*, i32** %14, align 8, !dbg !4688
  %22 = icmp ne i32* %21, null, !dbg !4688
  %23 = load i32, i32* @x.83
  %24 = load i32, i32* @y.84
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %48, label %31, !dbg !4690

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.83
  %33 = load i32, i32* @y.84
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32* %19, i32** %14, align 8, !dbg !4691
  %40 = load i32, i32* @x.83
  %41 = load i32, i32* @y.84
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %48, !dbg !4692

48:                                               ; preds = %originalBBpart24, %originalBBpart2
  %49 = load i32, i32* @x.83
  %50 = load i32, i32* @y.84
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32*, i32** %14, align 8, !dbg !4693
  %58 = load i8*, i8** %15, align 8, !dbg !4694
  %59 = load i64, i64* %16, align 8, !dbg !4695
  %60 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !4696
  %61 = call i64 @mbrtowc(i32* %57, i8* %58, i64 %59, %struct.__mbstate_t* %60) #10, !dbg !4697
  store i64 %61, i64* %18, align 8, !dbg !4698
  %62 = load i64, i64* %18, align 8, !dbg !4699
  %63 = icmp ule i64 -2, %62, !dbg !4701
  %64 = load i32, i32* @x.83
  %65 = load i32, i32* @y.84
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %63, label %72, label %115, !dbg !4702

72:                                               ; preds = %originalBBpart28
  %73 = load i64, i64* %16, align 8, !dbg !4703
  %74 = icmp ne i64 %73, 0, !dbg !4704
  br i1 %74, label %75, label %115, !dbg !4705

75:                                               ; preds = %72
  %76 = load i32, i32* @x.83
  %77 = load i32, i32* @y.84
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = call zeroext i1 @hard_locale(i32 0), !dbg !4706
  %85 = load i32, i32* @x.83
  %86 = load i32, i32* @y.84
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %84, label %115, label %93, !dbg !4707

93:                                               ; preds = %originalBBpart212
  call void @llvm.dbg.declare(metadata i8* %20, metadata !4708, metadata !DIExpression()), !dbg !4710
  %94 = load i32, i32* @x.83
  %95 = load i32, i32* @y.84
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %93, %originalBB14alteredBB
  %102 = load i8*, i8** %15, align 8, !dbg !4711
  %103 = load i8, i8* %102, align 1, !dbg !4712
  store i8 %103, i8* %20, align 1, !dbg !4710
  %104 = load i8, i8* %20, align 1, !dbg !4713
  %105 = zext i8 %104 to i32, !dbg !4713
  %106 = load i32*, i32** %14, align 8, !dbg !4714
  store i32 %105, i32* %106, align 4, !dbg !4715
  store i64 1, i64* %13, align 8, !dbg !4716
  %107 = load i32, i32* @x.83
  %108 = load i32, i32* @y.84
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %133, !dbg !4716

115:                                              ; preds = %originalBBpart212, %72, %originalBBpart28
  %116 = load i32, i32* @x.83
  %117 = load i32, i32* @y.84
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %115, %originalBB18alteredBB
  %124 = load i64, i64* %18, align 8, !dbg !4717
  store i64 %124, i64* %13, align 8, !dbg !4718
  %125 = load i32, i32* @x.83
  %126 = load i32, i32* @y.84
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %133, !dbg !4718

133:                                              ; preds = %originalBBpart220, %originalBBpart216
  %134 = load i32, i32* @x.83
  %135 = load i32, i32* @y.84
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %133, %originalBB22alteredBB
  %142 = load i64, i64* %13, align 8, !dbg !4719
  %143 = load i32, i32* @x.83
  %144 = load i32, i32* @y.84
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret i64 %142, !dbg !4719

originalBBalteredBB:                              ; preds = %originalBB, %4
  %151 = alloca i64, align 8
  %152 = alloca i32*, align 8
  %153 = alloca i8*, align 8
  %154 = alloca i64, align 8
  %155 = alloca %struct.__mbstate_t*, align 8
  %156 = alloca i64, align 8
  %157 = alloca i32, align 4
  %158 = alloca i8, align 1
  store i32* %0, i32** %152, align 8
  call void @llvm.dbg.declare(metadata i32** %152, metadata !4720, metadata !DIExpression()), !dbg !4677
  store i8* %1, i8** %153, align 8
  call void @llvm.dbg.declare(metadata i8** %153, metadata !4736, metadata !DIExpression()), !dbg !4679
  store i64 %2, i64* %154, align 8
  call void @llvm.dbg.declare(metadata i64* %154, metadata !4737, metadata !DIExpression()), !dbg !4681
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %155, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %155, metadata !4738, metadata !DIExpression()), !dbg !4683
  call void @llvm.dbg.declare(metadata i64* %156, metadata !4739, metadata !DIExpression()), !dbg !4685
  call void @llvm.dbg.declare(metadata i32* %157, metadata !4740, metadata !DIExpression()), !dbg !4687
  %159 = load i32*, i32** %152, align 8, !dbg !4688
  %160 = icmp ne i32* %159, null, !dbg !4688
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32* %19, i32** %14, align 8, !dbg !4691
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %161 = load i32*, i32** %14, align 8, !dbg !4693
  %162 = load i8*, i8** %15, align 8, !dbg !4694
  %163 = load i64, i64* %16, align 8, !dbg !4695
  %164 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !4696
  %165 = call i64 @mbrtowc(i32* %161, i8* %162, i64 %163, %struct.__mbstate_t* %164) #10, !dbg !4697
  store i64 %165, i64* %18, align 8, !dbg !4698
  %166 = load i64, i64* %18, align 8, !dbg !4699
  %167 = icmp ule i64 -2, %166, !dbg !4701
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %168 = call zeroext i1 @hard_locale(i32 0), !dbg !4706
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %93
  %169 = load i8*, i8** %15, align 8, !dbg !4711
  %170 = load i8, i8* %169, align 1, !dbg !4712
  store i8 %170, i8* %20, align 1, !dbg !4710
  %171 = load i8, i8* %20, align 1, !dbg !4713
  %172 = zext i8 %171 to i32, !dbg !4713
  %173 = load i32*, i32** %14, align 8, !dbg !4714
  store i32 %172, i32* %173, align 4, !dbg !4715
  store i64 1, i64* %13, align 8, !dbg !4716
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %115
  %174 = load i64, i64* %18, align 8, !dbg !4717
  store i64 %174, i64* %13, align 8, !dbg !4718
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %133
  %175 = load i64, i64* %13, align 8, !dbg !4719
  br label %originalBB22
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #2

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @c_strcasecmp(i8*, i8*) #11 !dbg !4741 {
  %3 = load i32, i32* @x.85
  %4 = load i32, i32* @y.86
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !4745, metadata !DIExpression()), !dbg !4746
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !4747, metadata !DIExpression()), !dbg !4748
  call void @llvm.dbg.declare(metadata i8** %14, metadata !4749, metadata !DIExpression()), !dbg !4750
  %18 = load i8*, i8** %12, align 8, !dbg !4751
  store i8* %18, i8** %14, align 8, !dbg !4750
  call void @llvm.dbg.declare(metadata i8** %15, metadata !4752, metadata !DIExpression()), !dbg !4753
  %19 = load i8*, i8** %13, align 8, !dbg !4754
  store i8* %19, i8** %15, align 8, !dbg !4753
  call void @llvm.dbg.declare(metadata i8* %16, metadata !4755, metadata !DIExpression()), !dbg !4756
  call void @llvm.dbg.declare(metadata i8* %17, metadata !4757, metadata !DIExpression()), !dbg !4758
  %20 = load i8*, i8** %14, align 8, !dbg !4759
  %21 = load i8*, i8** %15, align 8, !dbg !4761
  %22 = icmp eq i8* %20, %21, !dbg !4762
  %23 = load i32, i32* @x.85
  %24 = load i32, i32* @y.86
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %48, !dbg !4763

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.85
  %33 = load i32, i32* @y.86
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32 0, i32* %11, align 4, !dbg !4764
  %40 = load i32, i32* @x.85
  %41 = load i32, i32* @y.86
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %177, !dbg !4764

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.85
  %50 = load i32, i32* @y.86
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.85
  %58 = load i32, i32* @y.86
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !4765

65:                                               ; preds = %originalBBpart224, %originalBBpart28
  %66 = load i32, i32* @x.85
  %67 = load i32, i32* @y.86
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %74 = load i8*, i8** %14, align 8, !dbg !4766
  %75 = load i8, i8* %74, align 1, !dbg !4768
  %76 = zext i8 %75 to i32, !dbg !4768
  %77 = call i32 @c_tolower(i32 %76), !dbg !4769
  %78 = trunc i32 %77 to i8, !dbg !4769
  store i8 %78, i8* %16, align 1, !dbg !4770
  %79 = load i8*, i8** %15, align 8, !dbg !4771
  %80 = load i8, i8* %79, align 1, !dbg !4772
  %81 = zext i8 %80 to i32, !dbg !4772
  %82 = call i32 @c_tolower(i32 %81), !dbg !4773
  %83 = trunc i32 %82 to i8, !dbg !4773
  store i8 %83, i8* %17, align 1, !dbg !4774
  %84 = load i8, i8* %16, align 1, !dbg !4775
  %85 = zext i8 %84 to i32, !dbg !4775
  %86 = icmp eq i32 %85, 0, !dbg !4777
  %87 = load i32, i32* @x.85
  %88 = load i32, i32* @y.86
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %86, label %95, label %112, !dbg !4778

95:                                               ; preds = %originalBBpart212
  %96 = load i32, i32* @x.85
  %97 = load i32, i32* @y.86
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %95, %originalBB14alteredBB
  %104 = load i32, i32* @x.85
  %105 = load i32, i32* @y.86
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %155, !dbg !4779

112:                                              ; preds = %originalBBpart212
  %113 = load i32, i32* @x.85
  %114 = load i32, i32* @y.86
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %112, %originalBB18alteredBB
  %121 = load i8*, i8** %14, align 8, !dbg !4780
  %122 = getelementptr inbounds i8, i8* %121, i32 1, !dbg !4780
  store i8* %122, i8** %14, align 8, !dbg !4780
  %123 = load i8*, i8** %15, align 8, !dbg !4781
  %124 = getelementptr inbounds i8, i8* %123, i32 1, !dbg !4781
  store i8* %124, i8** %15, align 8, !dbg !4781
  %125 = load i32, i32* @x.85
  %126 = load i32, i32* @y.86
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %133, !dbg !4782

133:                                              ; preds = %originalBBpart220
  %134 = load i32, i32* @x.85
  %135 = load i32, i32* @y.86
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %133, %originalBB22alteredBB
  %142 = load i8, i8* %16, align 1, !dbg !4783
  %143 = zext i8 %142 to i32, !dbg !4783
  %144 = load i8, i8* %17, align 1, !dbg !4784
  %145 = zext i8 %144 to i32, !dbg !4784
  %146 = icmp eq i32 %143, %145, !dbg !4785
  %147 = load i32, i32* @x.85
  %148 = load i32, i32* @y.86
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %146, label %65, label %155, !dbg !4782, !llvm.loop !4786

155:                                              ; preds = %originalBBpart224, %originalBBpart216
  %156 = load i32, i32* @x.85
  %157 = load i32, i32* @y.86
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %155, %originalBB26alteredBB
  %164 = load i8, i8* %16, align 1, !dbg !4788
  %165 = zext i8 %164 to i32, !dbg !4788
  %166 = load i8, i8* %17, align 1, !dbg !4790
  %167 = zext i8 %166 to i32, !dbg !4790
  %168 = sub nsw i32 %165, %167, !dbg !4791
  store i32 %168, i32* %11, align 4, !dbg !4792
  %169 = load i32, i32* @x.85
  %170 = load i32, i32* @y.86
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart232, label %originalBB26alteredBB

originalBBpart232:                                ; preds = %originalBB26
  br label %177, !dbg !4792

177:                                              ; preds = %originalBBpart232, %originalBBpart24
  %178 = load i32, i32* @x.85
  %179 = load i32, i32* @y.86
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %177, %originalBB34alteredBB
  %186 = load i32, i32* %11, align 4, !dbg !4793
  %187 = load i32, i32* @x.85
  %188 = load i32, i32* @y.86
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  ret i32 %186, !dbg !4793

originalBBalteredBB:                              ; preds = %originalBB, %2
  %195 = alloca i32, align 4
  %196 = alloca i8*, align 8
  %197 = alloca i8*, align 8
  %198 = alloca i8*, align 8
  %199 = alloca i8*, align 8
  %200 = alloca i8, align 1
  %201 = alloca i8, align 1
  store i8* %0, i8** %196, align 8
  call void @llvm.dbg.declare(metadata i8** %196, metadata !4794, metadata !DIExpression()), !dbg !4746
  store i8* %1, i8** %197, align 8
  call void @llvm.dbg.declare(metadata i8** %197, metadata !4797, metadata !DIExpression()), !dbg !4748
  call void @llvm.dbg.declare(metadata i8** %198, metadata !4798, metadata !DIExpression()), !dbg !4750
  %202 = load i8*, i8** %196, align 8, !dbg !4751
  store i8* %202, i8** %198, align 8, !dbg !4750
  call void @llvm.dbg.declare(metadata i8** %199, metadata !4799, metadata !DIExpression()), !dbg !4753
  %203 = load i8*, i8** %197, align 8, !dbg !4754
  store i8* %203, i8** %199, align 8, !dbg !4753
  call void @llvm.dbg.declare(metadata i8* %200, metadata !4800, metadata !DIExpression()), !dbg !4756
  call void @llvm.dbg.declare(metadata i8* %201, metadata !4801, metadata !DIExpression()), !dbg !4758
  %204 = load i8*, i8** %198, align 8, !dbg !4759
  %205 = load i8*, i8** %199, align 8, !dbg !4761
  %206 = icmp eq i8* %204, %205, !dbg !4762
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32 0, i32* %11, align 4, !dbg !4764
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %207 = load i8*, i8** %14, align 8, !dbg !4766
  %208 = load i8, i8* %207, align 1, !dbg !4768
  %209 = zext i8 %208 to i32, !dbg !4768
  %210 = call i32 @c_tolower(i32 %209), !dbg !4769
  %211 = trunc i32 %210 to i8, !dbg !4769
  store i8 %211, i8* %16, align 1, !dbg !4770
  %212 = load i8*, i8** %15, align 8, !dbg !4771
  %213 = load i8, i8* %212, align 1, !dbg !4772
  %214 = zext i8 %213 to i32, !dbg !4772
  %215 = call i32 @c_tolower(i32 %214), !dbg !4773
  %216 = trunc i32 %215 to i8, !dbg !4773
  store i8 %216, i8* %17, align 1, !dbg !4774
  %217 = load i8, i8* %16, align 1, !dbg !4775
  %218 = zext i8 %217 to i32, !dbg !4775
  %219 = icmp eq i32 %218, 0, !dbg !4777
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %95
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %112
  %220 = load i8*, i8** %14, align 8, !dbg !4780
  %221 = getelementptr inbounds i8, i8* %220, i32 1, !dbg !4780
  store i8* %221, i8** %14, align 8, !dbg !4780
  %222 = load i8*, i8** %15, align 8, !dbg !4781
  %223 = getelementptr inbounds i8, i8* %222, i32 1, !dbg !4781
  store i8* %223, i8** %15, align 8, !dbg !4781
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %133
  %224 = load i8, i8* %16, align 1, !dbg !4783
  %225 = zext i8 %224 to i32, !dbg !4783
  %226 = load i8, i8* %17, align 1, !dbg !4784
  %227 = zext i8 %226 to i32, !dbg !4784
  %228 = icmp eq i32 %225, %227, !dbg !4785
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %155
  %229 = load i8, i8* %16, align 1, !dbg !4788
  %230 = zext i8 %229 to i32, !dbg !4788
  %231 = load i8, i8* %17, align 1, !dbg !4790
  %232 = zext i8 %231 to i32, !dbg !4790
  %_ = sub i32 0, %230
  %gen = add i32 %_, %232
  %_27 = shl i32 %230, %232
  %_28 = shl i32 %230, %232
  %_29 = sub i32 0, %230
  %gen30 = add i32 %_29, %232
  %233 = sub nsw i32 %230, %232, !dbg !4791
  store i32 %233, i32* %11, align 4, !dbg !4792
  br label %originalBB26

originalBB34alteredBB:                            ; preds = %originalBB34, %177
  %234 = load i32, i32* %11, align 4, !dbg !4793
  br label %originalBB34
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @close_stream(%struct._IO_FILE*) #4 !dbg !4802 {
  %2 = alloca i32, align 4
  %3 = alloca %struct._IO_FILE*, align 8
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %3, metadata !4840, metadata !DIExpression()), !dbg !4841
  call void @llvm.dbg.declare(metadata i8* %4, metadata !4842, metadata !DIExpression()), !dbg !4844
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !4845
  %8 = call i64 @__fpending(%struct._IO_FILE* %7) #10, !dbg !4846
  %9 = icmp ne i64 %8, 0, !dbg !4847
  %10 = zext i1 %9 to i8, !dbg !4844
  store i8 %10, i8* %4, align 1, !dbg !4844
  call void @llvm.dbg.declare(metadata i8* %5, metadata !4848, metadata !DIExpression()), !dbg !4849
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !4850
  %12 = call i32 @ferror_unlocked(%struct._IO_FILE* %11) #10, !dbg !4850
  %13 = icmp ne i32 %12, 0, !dbg !4851
  %14 = zext i1 %13 to i8, !dbg !4849
  store i8 %14, i8* %5, align 1, !dbg !4849
  call void @llvm.dbg.declare(metadata i8* %6, metadata !4852, metadata !DIExpression()), !dbg !4853
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !4854
  %16 = call i32 @rpl_fclose(%struct._IO_FILE* %15), !dbg !4855
  %17 = icmp ne i32 %16, 0, !dbg !4856
  %18 = zext i1 %17 to i8, !dbg !4853
  store i8 %18, i8* %6, align 1, !dbg !4853
  %19 = load i8, i8* %5, align 1, !dbg !4857
  %20 = trunc i8 %19 to i1, !dbg !4857
  br i1 %20, label %79, label %21, !dbg !4859

21:                                               ; preds = %1
  %22 = load i32, i32* @x.87
  %23 = load i32, i32* @y.88
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %21, %originalBBalteredBB
  %30 = load i8, i8* %6, align 1, !dbg !4860
  %31 = trunc i8 %30 to i1, !dbg !4860
  %32 = load i32, i32* @x.87
  %33 = load i32, i32* @y.88
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %31, label %40, label %133, !dbg !4861

40:                                               ; preds = %originalBBpart2
  %41 = load i32, i32* @x.87
  %42 = load i32, i32* @y.88
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %40, %originalBB1alteredBB
  %49 = load i8, i8* %4, align 1, !dbg !4862
  %50 = trunc i8 %49 to i1, !dbg !4862
  %51 = load i32, i32* @x.87
  %52 = load i32, i32* @y.88
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %50, label %79, label %59, !dbg !4863

59:                                               ; preds = %originalBBpart24
  %60 = load i32, i32* @x.87
  %61 = load i32, i32* @y.88
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %59, %originalBB6alteredBB
  %68 = call i32* @__errno_location() #15, !dbg !4864
  %69 = load i32, i32* %68, align 4, !dbg !4864
  %70 = icmp ne i32 %69, 9, !dbg !4865
  %71 = load i32, i32* @x.87
  %72 = load i32, i32* @y.88
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %70, label %79, label %133, !dbg !4866

79:                                               ; preds = %originalBBpart28, %originalBBpart24, %1
  %80 = load i32, i32* @x.87
  %81 = load i32, i32* @y.88
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %79, %originalBB10alteredBB
  %88 = load i8, i8* %6, align 1, !dbg !4867
  %89 = trunc i8 %88 to i1, !dbg !4867
  %90 = load i32, i32* @x.87
  %91 = load i32, i32* @y.88
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %89, label %116, label %98, !dbg !4870

98:                                               ; preds = %originalBBpart212
  %99 = load i32, i32* @x.87
  %100 = load i32, i32* @y.88
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %98, %originalBB14alteredBB
  %107 = call i32* @__errno_location() #15, !dbg !4871
  store i32 0, i32* %107, align 4, !dbg !4872
  %108 = load i32, i32* @x.87
  %109 = load i32, i32* @y.88
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %116, !dbg !4871

116:                                              ; preds = %originalBBpart216, %originalBBpart212
  %117 = load i32, i32* @x.87
  %118 = load i32, i32* @y.88
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %116, %originalBB18alteredBB
  store i32 -1, i32* %2, align 4, !dbg !4873
  %125 = load i32, i32* @x.87
  %126 = load i32, i32* @y.88
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %150, !dbg !4873

133:                                              ; preds = %originalBBpart28, %originalBBpart2
  %134 = load i32, i32* @x.87
  %135 = load i32, i32* @y.88
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %133, %originalBB22alteredBB
  store i32 0, i32* %2, align 4, !dbg !4874
  %142 = load i32, i32* @x.87
  %143 = load i32, i32* @y.88
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %150, !dbg !4874

150:                                              ; preds = %originalBBpart224, %originalBBpart220
  %151 = load i32, i32* @x.87
  %152 = load i32, i32* @y.88
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %150, %originalBB26alteredBB
  %159 = load i32, i32* %2, align 4, !dbg !4875
  %160 = load i32, i32* @x.87
  %161 = load i32, i32* @y.88
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i32 %159, !dbg !4875

originalBBalteredBB:                              ; preds = %originalBB, %21
  %168 = load i8, i8* %6, align 1, !dbg !4860
  %169 = trunc i8 %168 to i1, !dbg !4860
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %40
  %170 = load i8, i8* %4, align 1, !dbg !4862
  %171 = trunc i8 %170 to i1, !dbg !4862
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %59
  %172 = call i32* @__errno_location() #15, !dbg !4864
  %173 = load i32, i32* %172, align 4, !dbg !4864
  %174 = icmp ne i32 %173, 9, !dbg !4865
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %79
  %175 = load i8, i8* %6, align 1, !dbg !4867
  %176 = trunc i8 %175 to i1, !dbg !4867
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %98
  %177 = call i32* @__errno_location() #15, !dbg !4871
  store i32 0, i32* %177, align 4, !dbg !4872
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %116
  store i32 -1, i32* %2, align 4, !dbg !4873
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %133
  store i32 0, i32* %2, align 4, !dbg !4874
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %150
  %178 = load i32, i32* %2, align 4, !dbg !4875
  br label %originalBB26
}

; Function Attrs: nounwind
declare dso_local i64 @__fpending(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @hard_locale(i32) #4 !dbg !4876 {
  %2 = alloca i1, align 1
  %3 = alloca i32, align 4
  %4 = alloca [257 x i8], align 16
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !4880, metadata !DIExpression()), !dbg !4881
  call void @llvm.dbg.declare(metadata [257 x i8]* %4, metadata !4882, metadata !DIExpression()), !dbg !4886
  %5 = load i32, i32* %3, align 4, !dbg !4887
  %6 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !4889
  %7 = call i32 @setlocale_null_r(i32 %5, i8* %6, i64 257), !dbg !4890
  %8 = icmp ne i32 %7, 0, !dbg !4890
  br i1 %8, label %9, label %26, !dbg !4891

9:                                                ; preds = %1
  %10 = load i32, i32* @x.89
  %11 = load i32, i32* @y.90
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  store i1 false, i1* %2, align 1, !dbg !4892
  %18 = load i32, i32* @x.89
  %19 = load i32, i32* @y.90
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %85, !dbg !4892

26:                                               ; preds = %1
  %27 = load i32, i32* @x.89
  %28 = load i32, i32* @y.90
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !4893
  %36 = call i32 @strcmp(i8* %35, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.152, i64 0, i64 0)) #13, !dbg !4894
  %37 = icmp eq i32 %36, 0, !dbg !4895
  %38 = load i32, i32* @x.89
  %39 = load i32, i32* @y.90
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %37, label %66, label %46, !dbg !4896

46:                                               ; preds = %originalBBpart24
  %47 = load i32, i32* @x.89
  %48 = load i32, i32* @y.90
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %46, %originalBB6alteredBB
  %55 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !4897
  %56 = call i32 @strcmp(i8* %55, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.153, i64 0, i64 0)) #13, !dbg !4898
  %57 = icmp eq i32 %56, 0, !dbg !4899
  %58 = load i32, i32* @x.89
  %59 = load i32, i32* @y.90
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %66, !dbg !4896

66:                                               ; preds = %originalBBpart28, %originalBBpart24
  %67 = phi i1 [ true, %originalBBpart24 ], [ %57, %originalBBpart28 ]
  %68 = load i32, i32* @x.89
  %69 = load i32, i32* @y.90
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %76 = xor i1 %67, true, !dbg !4900
  store i1 %76, i1* %2, align 1, !dbg !4901
  %77 = load i32, i32* @x.89
  %78 = load i32, i32* @y.90
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %85, !dbg !4901

85:                                               ; preds = %originalBBpart212, %originalBBpart2
  %86 = load i32, i32* @x.89
  %87 = load i32, i32* @y.90
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %85, %originalBB14alteredBB
  %94 = load i1, i1* %2, align 1, !dbg !4902
  %95 = load i32, i32* @x.89
  %96 = load i32, i32* @y.90
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i1 %94, !dbg !4902

originalBBalteredBB:                              ; preds = %originalBB, %9
  store i1 false, i1* %2, align 1, !dbg !4892
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %103 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !4893
  %104 = call i32 @strcmp(i8* %103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.152, i64 0, i64 0)) #13, !dbg !4894
  %105 = icmp eq i32 %104, 0, !dbg !4895
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %46
  %106 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !4897
  %107 = call i32 @strcmp(i8* %106, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.153, i64 0, i64 0)) #13, !dbg !4898
  %108 = icmp eq i32 %107, 0, !dbg !4899
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %109 = xor i1 %67, true, !dbg !4900
  store i1 %109, i1* %2, align 1, !dbg !4901
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %85
  %110 = load i1, i1* %2, align 1, !dbg !4902
  br label %originalBB14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @locale_charset() #4 !dbg !4903 {
  %1 = load i32, i32* @x.91
  %2 = load i32, i32* @y.92
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !4907, metadata !DIExpression()), !dbg !4908
  %10 = call i8* @nl_langinfo(i32 14) #10, !dbg !4909
  store i8* %10, i8** %9, align 8, !dbg !4910
  %11 = load i8*, i8** %9, align 8, !dbg !4911
  %12 = icmp eq i8* %11, null, !dbg !4913
  %13 = load i32, i32* @x.91
  %14 = load i32, i32* @y.92
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %22, !dbg !4914

21:                                               ; preds = %originalBBpart2
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.156, i64 0, i64 0), i8** %9, align 8, !dbg !4915
  br label %22, !dbg !4916

22:                                               ; preds = %21, %originalBBpart2
  %23 = load i32, i32* @x.91
  %24 = load i32, i32* @y.92
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load i8*, i8** %9, align 8, !dbg !4917
  %32 = getelementptr inbounds i8, i8* %31, i64 0, !dbg !4917
  %33 = load i8, i8* %32, align 1, !dbg !4917
  %34 = sext i8 %33 to i32, !dbg !4917
  %35 = icmp eq i32 %34, 0, !dbg !4921
  %36 = load i32, i32* @x.91
  %37 = load i32, i32* @y.92
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %35, label %44, label %45, !dbg !4922

44:                                               ; preds = %originalBBpart24
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.157, i64 0, i64 0), i8** %9, align 8, !dbg !4923
  br label %45, !dbg !4924

45:                                               ; preds = %44, %originalBBpart24
  %46 = load i32, i32* @x.91
  %47 = load i32, i32* @y.92
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %45, %originalBB6alteredBB
  %54 = load i8*, i8** %9, align 8, !dbg !4925
  %55 = load i32, i32* @x.91
  %56 = load i32, i32* @y.92
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i8* %54, !dbg !4926

originalBBalteredBB:                              ; preds = %originalBB, %0
  %63 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %63, metadata !4927, metadata !DIExpression()), !dbg !4908
  %64 = call i8* @nl_langinfo(i32 14) #10, !dbg !4909
  store i8* %64, i8** %63, align 8, !dbg !4910
  %65 = load i8*, i8** %63, align 8, !dbg !4911
  %66 = icmp eq i8* %65, null, !dbg !4913
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %67 = load i8*, i8** %9, align 8, !dbg !4917
  %68 = getelementptr inbounds i8, i8* %67, i64 0, !dbg !4917
  %69 = load i8, i8* %68, align 1, !dbg !4917
  %70 = sext i8 %69 to i32, !dbg !4917
  %71 = icmp eq i32 %70, 0, !dbg !4921
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %45
  %72 = load i8*, i8** %9, align 8, !dbg !4925
  br label %originalBB6
}

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @mgetgroups(i8*, i32, i32**) #4 !dbg !4930 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32**, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32*, align 8
  %11 = alloca i32*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32*, align 8
  %17 = alloca i32*, align 8
  store i8* %0, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !4932, metadata !DIExpression()), !dbg !4933
  store i32 %1, i32* %6, align 4
  call void @llvm.dbg.declare(metadata i32* %6, metadata !4934, metadata !DIExpression()), !dbg !4935
  store i32** %2, i32*** %7, align 8
  call void @llvm.dbg.declare(metadata i32*** %7, metadata !4936, metadata !DIExpression()), !dbg !4937
  call void @llvm.dbg.declare(metadata i32* %8, metadata !4938, metadata !DIExpression()), !dbg !4939
  call void @llvm.dbg.declare(metadata i32* %9, metadata !4940, metadata !DIExpression()), !dbg !4941
  call void @llvm.dbg.declare(metadata i32** %10, metadata !4942, metadata !DIExpression()), !dbg !4943
  %18 = load i8*, i8** %5, align 8, !dbg !4944
  %19 = icmp ne i8* %18, null, !dbg !4944
  br i1 %19, label %20, label %209, !dbg !4946

20:                                               ; preds = %3
  %21 = load i32, i32* @x.93
  %22 = load i32, i32* @y.94
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %20, %originalBBalteredBB
  store i32 10, i32* %8, align 4, !dbg !4947
  %29 = load i32, i32* %8, align 4, !dbg !4949
  %30 = sext i32 %29 to i64, !dbg !4949
  %31 = call i32* @realloc_groupbuf(i32* null, i64 %30), !dbg !4950
  store i32* %31, i32** %10, align 8, !dbg !4951
  %32 = load i32*, i32** %10, align 8, !dbg !4952
  %33 = icmp eq i32* %32, null, !dbg !4954
  %34 = load i32, i32* @x.93
  %35 = load i32, i32* @y.94
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %33, label %42, label %59, !dbg !4955

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.93
  %44 = load i32, i32* @y.94
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %42, %originalBB1alteredBB
  store i32 -1, i32* %4, align 4, !dbg !4956
  %51 = load i32, i32* @x.93
  %52 = load i32, i32* @y.94
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %745, !dbg !4956

59:                                               ; preds = %originalBBpart2
  %60 = load i32, i32* @x.93
  %61 = load i32, i32* @y.94
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %59, %originalBB6alteredBB
  %68 = load i32, i32* @x.93
  %69 = load i32, i32* @y.94
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %76, !dbg !4957

76:                                               ; preds = %originalBBpart241, %originalBBpart28
  call void @llvm.dbg.declare(metadata i32** %11, metadata !4958, metadata !DIExpression()), !dbg !4960
  call void @llvm.dbg.declare(metadata i32* %12, metadata !4961, metadata !DIExpression()), !dbg !4962
  %77 = load i32, i32* %8, align 4, !dbg !4963
  store i32 %77, i32* %12, align 4, !dbg !4962
  %78 = load i8*, i8** %5, align 8, !dbg !4964
  %79 = load i32, i32* %6, align 4, !dbg !4965
  %80 = load i32*, i32** %10, align 8, !dbg !4966
  %81 = call i32 @getgrouplist(i8* %78, i32 %79, i32* %80, i32* %8), !dbg !4967
  store i32 %81, i32* %9, align 4, !dbg !4968
  %82 = load i32, i32* %9, align 4, !dbg !4969
  %83 = icmp slt i32 %82, 0, !dbg !4971
  br i1 %83, label %84, label %123, !dbg !4972

84:                                               ; preds = %76
  %85 = load i32, i32* @x.93
  %86 = load i32, i32* @y.94
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %84, %originalBB10alteredBB
  %93 = load i32, i32* %12, align 4, !dbg !4973
  %94 = load i32, i32* %8, align 4, !dbg !4974
  %95 = icmp eq i32 %93, %94, !dbg !4975
  %96 = load i32, i32* @x.93
  %97 = load i32, i32* @y.94
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %95, label %104, label %123, !dbg !4976

104:                                              ; preds = %originalBBpart212
  %105 = load i32, i32* @x.93
  %106 = load i32, i32* @y.94
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %104, %originalBB14alteredBB
  %113 = load i32, i32* %8, align 4, !dbg !4977
  %114 = mul nsw i32 %113, 2, !dbg !4977
  store i32 %114, i32* %8, align 4, !dbg !4977
  %115 = load i32, i32* @x.93
  %116 = load i32, i32* @y.94
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBBpart225, label %originalBB14alteredBB

originalBBpart225:                                ; preds = %originalBB14
  br label %123, !dbg !4978

123:                                              ; preds = %originalBBpart225, %originalBBpart212, %76
  %124 = load i32, i32* @x.93
  %125 = load i32, i32* @y.94
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %123, %originalBB27alteredBB
  %132 = load i32*, i32** %10, align 8, !dbg !4979
  %133 = load i32, i32* %8, align 4, !dbg !4981
  %134 = sext i32 %133 to i64, !dbg !4981
  %135 = call i32* @realloc_groupbuf(i32* %132, i64 %134), !dbg !4982
  store i32* %135, i32** %11, align 8, !dbg !4983
  %136 = icmp eq i32* %135, null, !dbg !4984
  %137 = load i32, i32* @x.93
  %138 = load i32, i32* @y.94
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br i1 %136, label %145, label %168, !dbg !4985

145:                                              ; preds = %originalBBpart229
  call void @llvm.dbg.declare(metadata i32* %13, metadata !4986, metadata !DIExpression()), !dbg !4988
  %146 = load i32, i32* @x.93
  %147 = load i32, i32* @y.94
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %145, %originalBB31alteredBB
  %154 = call i32* @__errno_location() #15, !dbg !4989
  %155 = load i32, i32* %154, align 4, !dbg !4989
  store i32 %155, i32* %13, align 4, !dbg !4988
  %156 = load i32*, i32** %10, align 8, !dbg !4990
  %157 = bitcast i32* %156 to i8*, !dbg !4990
  call void @free(i8* %157) #10, !dbg !4991
  %158 = load i32, i32* %13, align 4, !dbg !4992
  %159 = call i32* @__errno_location() #15, !dbg !4993
  store i32 %158, i32* %159, align 4, !dbg !4994
  store i32 -1, i32* %4, align 4, !dbg !4995
  %160 = load i32, i32* @x.93
  %161 = load i32, i32* @y.94
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  br label %745, !dbg !4995

168:                                              ; preds = %originalBBpart229
  %169 = load i32, i32* @x.93
  %170 = load i32, i32* @y.94
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %168, %originalBB35alteredBB
  %177 = load i32*, i32** %11, align 8, !dbg !4996
  store i32* %177, i32** %10, align 8, !dbg !4997
  %178 = load i32, i32* %9, align 4, !dbg !4998
  %179 = icmp sle i32 0, %178, !dbg !5000
  %180 = load i32, i32* @x.93
  %181 = load i32, i32* @y.94
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBBpart237, label %originalBB35alteredBB

originalBBpart237:                                ; preds = %originalBB35
  br i1 %179, label %188, label %192, !dbg !5001

188:                                              ; preds = %originalBBpart237
  %189 = load i32*, i32** %10, align 8, !dbg !5002
  %190 = load i32**, i32*** %7, align 8, !dbg !5004
  store i32* %189, i32** %190, align 8, !dbg !5005
  %191 = load i32, i32* %8, align 4, !dbg !5006
  store i32 %191, i32* %4, align 4, !dbg !5007
  br label %745, !dbg !5007

192:                                              ; preds = %originalBBpart237
  %193 = load i32, i32* @x.93
  %194 = load i32, i32* @y.94
  %195 = sub i32 %193, 1
  %196 = mul i32 %193, %195
  %197 = urem i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %198, %199
  br i1 %200, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %192, %originalBB39alteredBB
  %201 = load i32, i32* @x.93
  %202 = load i32, i32* @y.94
  %203 = sub i32 %201, 1
  %204 = mul i32 %201, %203
  %205 = urem i32 %204, 2
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %202, 10
  %208 = or i1 %206, %207
  br i1 %208, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  br label %76, !dbg !4957, !llvm.loop !5008

209:                                              ; preds = %3
  %210 = load i8*, i8** %5, align 8, !dbg !5010
  %211 = icmp ne i8* %210, null, !dbg !5010
  br i1 %211, label %212, label %232, !dbg !5010

212:                                              ; preds = %209
  %213 = load i32, i32* @x.93
  %214 = load i32, i32* @y.94
  %215 = sub i32 %213, 1
  %216 = mul i32 %213, %215
  %217 = urem i32 %216, 2
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %218, %219
  br i1 %220, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %212, %originalBB43alteredBB
  %221 = load i8*, i8** %5, align 8, !dbg !5011
  %222 = load i32, i32* %6, align 4, !dbg !5012
  %223 = call i32 @getugroups(i32 0, i32* null, i8* %221, i32 %222), !dbg !5013
  %224 = load i32, i32* @x.93
  %225 = load i32, i32* @y.94
  %226 = sub i32 %224, 1
  %227 = mul i32 %224, %226
  %228 = urem i32 %227, 2
  %229 = icmp eq i32 %228, 0
  %230 = icmp slt i32 %225, 10
  %231 = or i1 %229, %230
  br i1 %231, label %originalBBpart245, label %originalBB43alteredBB

originalBBpart245:                                ; preds = %originalBB43
  br label %250, !dbg !5010

232:                                              ; preds = %209
  %233 = load i32, i32* @x.93
  %234 = load i32, i32* @y.94
  %235 = sub i32 %233, 1
  %236 = mul i32 %233, %235
  %237 = urem i32 %236, 2
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %234, 10
  %240 = or i1 %238, %239
  br i1 %240, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %232, %originalBB47alteredBB
  %241 = call i32 @getgroups(i32 0, i32* null) #10, !dbg !5014
  %242 = load i32, i32* @x.93
  %243 = load i32, i32* @y.94
  %244 = sub i32 %242, 1
  %245 = mul i32 %242, %244
  %246 = urem i32 %245, 2
  %247 = icmp eq i32 %246, 0
  %248 = icmp slt i32 %243, 10
  %249 = or i1 %247, %248
  br i1 %249, label %originalBBpart249, label %originalBB47alteredBB

originalBBpart249:                                ; preds = %originalBB47
  br label %250, !dbg !5010

250:                                              ; preds = %originalBBpart249, %originalBBpart245
  %251 = phi i32 [ %223, %originalBBpart245 ], [ %241, %originalBBpart249 ], !dbg !5010
  %252 = load i32, i32* @x.93
  %253 = load i32, i32* @y.94
  %254 = sub i32 %252, 1
  %255 = mul i32 %252, %254
  %256 = urem i32 %255, 2
  %257 = icmp eq i32 %256, 0
  %258 = icmp slt i32 %253, 10
  %259 = or i1 %257, %258
  br i1 %259, label %originalBB51, label %originalBB51alteredBB

originalBB51:                                     ; preds = %250, %originalBB51alteredBB
  store i32 %251, i32* %8, align 4, !dbg !5015
  %260 = load i32, i32* %8, align 4, !dbg !5016
  %261 = icmp slt i32 %260, 0, !dbg !5018
  %262 = load i32, i32* @x.93
  %263 = load i32, i32* @y.94
  %264 = sub i32 %262, 1
  %265 = mul i32 %262, %264
  %266 = urem i32 %265, 2
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %263, 10
  %269 = or i1 %267, %268
  br i1 %269, label %originalBBpart253, label %originalBB51alteredBB

originalBBpart253:                                ; preds = %originalBB51
  br i1 %261, label %270, label %334, !dbg !5019

270:                                              ; preds = %originalBBpart253
  %271 = load i32, i32* @x.93
  %272 = load i32, i32* @y.94
  %273 = sub i32 %271, 1
  %274 = mul i32 %271, %273
  %275 = urem i32 %274, 2
  %276 = icmp eq i32 %275, 0
  %277 = icmp slt i32 %272, 10
  %278 = or i1 %276, %277
  br i1 %278, label %originalBB55, label %originalBB55alteredBB

originalBB55:                                     ; preds = %270, %originalBB55alteredBB
  %279 = call i32* @__errno_location() #15, !dbg !5020
  %280 = load i32, i32* %279, align 4, !dbg !5020
  %281 = icmp eq i32 %280, 38, !dbg !5023
  %282 = load i32, i32* @x.93
  %283 = load i32, i32* @y.94
  %284 = sub i32 %282, 1
  %285 = mul i32 %282, %284
  %286 = urem i32 %285, 2
  %287 = icmp eq i32 %286, 0
  %288 = icmp slt i32 %283, 10
  %289 = or i1 %287, %288
  br i1 %289, label %originalBBpart257, label %originalBB55alteredBB

originalBBpart257:                                ; preds = %originalBB55
  br i1 %281, label %290, label %317, !dbg !5024

290:                                              ; preds = %originalBBpart257
  %291 = call i32* @realloc_groupbuf(i32* null, i64 1), !dbg !5025
  store i32* %291, i32** %10, align 8, !dbg !5026
  %292 = icmp ne i32* %291, null, !dbg !5026
  br i1 %292, label %293, label %317, !dbg !5027

293:                                              ; preds = %290
  %294 = load i32, i32* @x.93
  %295 = load i32, i32* @y.94
  %296 = sub i32 %294, 1
  %297 = mul i32 %294, %296
  %298 = urem i32 %297, 2
  %299 = icmp eq i32 %298, 0
  %300 = icmp slt i32 %295, 10
  %301 = or i1 %299, %300
  br i1 %301, label %originalBB59, label %originalBB59alteredBB

originalBB59:                                     ; preds = %293, %originalBB59alteredBB
  %302 = load i32*, i32** %10, align 8, !dbg !5028
  %303 = load i32**, i32*** %7, align 8, !dbg !5030
  store i32* %302, i32** %303, align 8, !dbg !5031
  %304 = load i32, i32* %6, align 4, !dbg !5032
  %305 = load i32*, i32** %10, align 8, !dbg !5033
  store i32 %304, i32* %305, align 4, !dbg !5034
  %306 = load i32, i32* %6, align 4, !dbg !5035
  %307 = icmp ne i32 %306, -1, !dbg !5036
  %308 = zext i1 %307 to i32, !dbg !5036
  store i32 %308, i32* %4, align 4, !dbg !5037
  %309 = load i32, i32* @x.93
  %310 = load i32, i32* @y.94
  %311 = sub i32 %309, 1
  %312 = mul i32 %309, %311
  %313 = urem i32 %312, 2
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %314, %315
  br i1 %316, label %originalBBpart261, label %originalBB59alteredBB

originalBBpart261:                                ; preds = %originalBB59
  br label %745, !dbg !5037

317:                                              ; preds = %290, %originalBBpart257
  %318 = load i32, i32* @x.93
  %319 = load i32, i32* @y.94
  %320 = sub i32 %318, 1
  %321 = mul i32 %318, %320
  %322 = urem i32 %321, 2
  %323 = icmp eq i32 %322, 0
  %324 = icmp slt i32 %319, 10
  %325 = or i1 %323, %324
  br i1 %325, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %317, %originalBB63alteredBB
  store i32 -1, i32* %4, align 4, !dbg !5038
  %326 = load i32, i32* @x.93
  %327 = load i32, i32* @y.94
  %328 = sub i32 %326, 1
  %329 = mul i32 %326, %328
  %330 = urem i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %331, %332
  br i1 %333, label %originalBBpart265, label %originalBB63alteredBB

originalBBpart265:                                ; preds = %originalBB63
  br label %745, !dbg !5038

334:                                              ; preds = %originalBBpart253
  %335 = load i32, i32* @x.93
  %336 = load i32, i32* @y.94
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBB67, label %originalBB67alteredBB

originalBB67:                                     ; preds = %334, %originalBB67alteredBB
  %343 = load i32, i32* %8, align 4, !dbg !5039
  %344 = icmp eq i32 %343, 0, !dbg !5041
  %345 = load i32, i32* @x.93
  %346 = load i32, i32* @y.94
  %347 = sub i32 %345, 1
  %348 = mul i32 %345, %347
  %349 = urem i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = icmp slt i32 %346, 10
  %352 = or i1 %350, %351
  br i1 %352, label %originalBBpart269, label %originalBB67alteredBB

originalBBpart269:                                ; preds = %originalBB67
  br i1 %344, label %375, label %353, !dbg !5042

353:                                              ; preds = %originalBBpart269
  %354 = load i8*, i8** %5, align 8, !dbg !5043
  %355 = icmp ne i8* %354, null, !dbg !5043
  br i1 %355, label %394, label %356, !dbg !5044

356:                                              ; preds = %353
  %357 = load i32, i32* @x.93
  %358 = load i32, i32* @y.94
  %359 = sub i32 %357, 1
  %360 = mul i32 %357, %359
  %361 = urem i32 %360, 2
  %362 = icmp eq i32 %361, 0
  %363 = icmp slt i32 %358, 10
  %364 = or i1 %362, %363
  br i1 %364, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %356, %originalBB71alteredBB
  %365 = load i32, i32* %6, align 4, !dbg !5045
  %366 = icmp ne i32 %365, -1, !dbg !5046
  %367 = load i32, i32* @x.93
  %368 = load i32, i32* @y.94
  %369 = sub i32 %367, 1
  %370 = mul i32 %367, %369
  %371 = urem i32 %370, 2
  %372 = icmp eq i32 %371, 0
  %373 = icmp slt i32 %368, 10
  %374 = or i1 %372, %373
  br i1 %374, label %originalBBpart273, label %originalBB71alteredBB

originalBBpart273:                                ; preds = %originalBB71
  br i1 %366, label %375, label %394, !dbg !5047

375:                                              ; preds = %originalBBpart273, %originalBBpart269
  %376 = load i32, i32* @x.93
  %377 = load i32, i32* @y.94
  %378 = sub i32 %376, 1
  %379 = mul i32 %376, %378
  %380 = urem i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %381, %382
  br i1 %383, label %originalBB75, label %originalBB75alteredBB

originalBB75:                                     ; preds = %375, %originalBB75alteredBB
  %384 = load i32, i32* %8, align 4, !dbg !5048
  %385 = add nsw i32 %384, 1, !dbg !5048
  store i32 %385, i32* %8, align 4, !dbg !5048
  %386 = load i32, i32* @x.93
  %387 = load i32, i32* @y.94
  %388 = sub i32 %386, 1
  %389 = mul i32 %386, %388
  %390 = urem i32 %389, 2
  %391 = icmp eq i32 %390, 0
  %392 = icmp slt i32 %387, 10
  %393 = or i1 %391, %392
  br i1 %393, label %originalBBpart289, label %originalBB75alteredBB

originalBBpart289:                                ; preds = %originalBB75
  br label %394, !dbg !5049

394:                                              ; preds = %originalBBpart289, %originalBBpart273, %353
  %395 = load i32, i32* @x.93
  %396 = load i32, i32* @y.94
  %397 = sub i32 %395, 1
  %398 = mul i32 %395, %397
  %399 = urem i32 %398, 2
  %400 = icmp eq i32 %399, 0
  %401 = icmp slt i32 %396, 10
  %402 = or i1 %400, %401
  br i1 %402, label %originalBB91, label %originalBB91alteredBB

originalBB91:                                     ; preds = %394, %originalBB91alteredBB
  %403 = load i32, i32* %8, align 4, !dbg !5050
  %404 = sext i32 %403 to i64, !dbg !5050
  %405 = call i32* @realloc_groupbuf(i32* null, i64 %404), !dbg !5051
  store i32* %405, i32** %10, align 8, !dbg !5052
  %406 = load i32*, i32** %10, align 8, !dbg !5053
  %407 = icmp eq i32* %406, null, !dbg !5055
  %408 = load i32, i32* @x.93
  %409 = load i32, i32* @y.94
  %410 = sub i32 %408, 1
  %411 = mul i32 %408, %410
  %412 = urem i32 %411, 2
  %413 = icmp eq i32 %412, 0
  %414 = icmp slt i32 %409, 10
  %415 = or i1 %413, %414
  br i1 %415, label %originalBBpart293, label %originalBB91alteredBB

originalBBpart293:                                ; preds = %originalBB91
  br i1 %407, label %416, label %417, !dbg !5056

416:                                              ; preds = %originalBBpart293
  store i32 -1, i32* %4, align 4, !dbg !5057
  br label %745, !dbg !5057

417:                                              ; preds = %originalBBpart293
  %418 = load i32, i32* @x.93
  %419 = load i32, i32* @y.94
  %420 = sub i32 %418, 1
  %421 = mul i32 %418, %420
  %422 = urem i32 %421, 2
  %423 = icmp eq i32 %422, 0
  %424 = icmp slt i32 %419, 10
  %425 = or i1 %423, %424
  br i1 %425, label %originalBB95, label %originalBB95alteredBB

originalBB95:                                     ; preds = %417, %originalBB95alteredBB
  %426 = load i8*, i8** %5, align 8, !dbg !5058
  %427 = icmp ne i8* %426, null, !dbg !5058
  %428 = load i32, i32* @x.93
  %429 = load i32, i32* @y.94
  %430 = sub i32 %428, 1
  %431 = mul i32 %428, %430
  %432 = urem i32 %431, 2
  %433 = icmp eq i32 %432, 0
  %434 = icmp slt i32 %429, 10
  %435 = or i1 %433, %434
  br i1 %435, label %originalBBpart297, label %originalBB95alteredBB

originalBBpart297:                                ; preds = %originalBB95
  br i1 %427, label %436, label %442, !dbg !5058

436:                                              ; preds = %originalBBpart297
  %437 = load i32, i32* %8, align 4, !dbg !5059
  %438 = load i32*, i32** %10, align 8, !dbg !5060
  %439 = load i8*, i8** %5, align 8, !dbg !5061
  %440 = load i32, i32* %6, align 4, !dbg !5062
  %441 = call i32 @getugroups(i32 %437, i32* %438, i8* %439, i32 %440), !dbg !5063
  br label %455, !dbg !5058

442:                                              ; preds = %originalBBpart297
  %443 = load i32, i32* %8, align 4, !dbg !5064
  %444 = load i32, i32* %6, align 4, !dbg !5065
  %445 = icmp ne i32 %444, -1, !dbg !5066
  %446 = zext i1 %445 to i32, !dbg !5066
  %447 = sub nsw i32 %443, %446, !dbg !5067
  %448 = load i32*, i32** %10, align 8, !dbg !5068
  %449 = load i32, i32* %6, align 4, !dbg !5069
  %450 = icmp ne i32 %449, -1, !dbg !5070
  %451 = zext i1 %450 to i32, !dbg !5070
  %452 = sext i32 %451 to i64, !dbg !5071
  %453 = getelementptr inbounds i32, i32* %448, i64 %452, !dbg !5071
  %454 = call i32 @getgroups(i32 %447, i32* %453) #10, !dbg !5072
  br label %455, !dbg !5058

455:                                              ; preds = %442, %436
  %456 = phi i32 [ %441, %436 ], [ %454, %442 ], !dbg !5058
  %457 = load i32, i32* @x.93
  %458 = load i32, i32* @y.94
  %459 = sub i32 %457, 1
  %460 = mul i32 %457, %459
  %461 = urem i32 %460, 2
  %462 = icmp eq i32 %461, 0
  %463 = icmp slt i32 %458, 10
  %464 = or i1 %462, %463
  br i1 %464, label %originalBB99, label %originalBB99alteredBB

originalBB99:                                     ; preds = %455, %originalBB99alteredBB
  store i32 %456, i32* %9, align 4, !dbg !5073
  %465 = load i32, i32* %9, align 4, !dbg !5074
  %466 = icmp slt i32 %465, 0, !dbg !5076
  %467 = load i32, i32* @x.93
  %468 = load i32, i32* @y.94
  %469 = sub i32 %467, 1
  %470 = mul i32 %467, %469
  %471 = urem i32 %470, 2
  %472 = icmp eq i32 %471, 0
  %473 = icmp slt i32 %468, 10
  %474 = or i1 %472, %473
  br i1 %474, label %originalBBpart2101, label %originalBB99alteredBB

originalBBpart2101:                               ; preds = %originalBB99
  br i1 %466, label %475, label %498, !dbg !5077

475:                                              ; preds = %originalBBpart2101
  call void @llvm.dbg.declare(metadata i32* %14, metadata !5078, metadata !DIExpression()), !dbg !5080
  %476 = load i32, i32* @x.93
  %477 = load i32, i32* @y.94
  %478 = sub i32 %476, 1
  %479 = mul i32 %476, %478
  %480 = urem i32 %479, 2
  %481 = icmp eq i32 %480, 0
  %482 = icmp slt i32 %477, 10
  %483 = or i1 %481, %482
  br i1 %483, label %originalBB103, label %originalBB103alteredBB

originalBB103:                                    ; preds = %475, %originalBB103alteredBB
  %484 = call i32* @__errno_location() #15, !dbg !5081
  %485 = load i32, i32* %484, align 4, !dbg !5081
  store i32 %485, i32* %14, align 4, !dbg !5080
  %486 = load i32*, i32** %10, align 8, !dbg !5082
  %487 = bitcast i32* %486 to i8*, !dbg !5082
  call void @free(i8* %487) #10, !dbg !5083
  %488 = load i32, i32* %14, align 4, !dbg !5084
  %489 = call i32* @__errno_location() #15, !dbg !5085
  store i32 %488, i32* %489, align 4, !dbg !5086
  store i32 -1, i32* %4, align 4, !dbg !5087
  %490 = load i32, i32* @x.93
  %491 = load i32, i32* @y.94
  %492 = sub i32 %490, 1
  %493 = mul i32 %490, %492
  %494 = urem i32 %493, 2
  %495 = icmp eq i32 %494, 0
  %496 = icmp slt i32 %491, 10
  %497 = or i1 %495, %496
  br i1 %497, label %originalBBpart2105, label %originalBB103alteredBB

originalBBpart2105:                               ; preds = %originalBB103
  br label %745, !dbg !5087

498:                                              ; preds = %originalBBpart2101
  %499 = load i8*, i8** %5, align 8, !dbg !5088
  %500 = icmp ne i8* %499, null, !dbg !5088
  br i1 %500, label %525, label %501, !dbg !5090

501:                                              ; preds = %498
  %502 = load i32, i32* %6, align 4, !dbg !5091
  %503 = icmp ne i32 %502, -1, !dbg !5092
  br i1 %503, label %504, label %525, !dbg !5093

504:                                              ; preds = %501
  %505 = load i32, i32* @x.93
  %506 = load i32, i32* @y.94
  %507 = sub i32 %505, 1
  %508 = mul i32 %505, %507
  %509 = urem i32 %508, 2
  %510 = icmp eq i32 %509, 0
  %511 = icmp slt i32 %506, 10
  %512 = or i1 %510, %511
  br i1 %512, label %originalBB107, label %originalBB107alteredBB

originalBB107:                                    ; preds = %504, %originalBB107alteredBB
  %513 = load i32, i32* %6, align 4, !dbg !5094
  %514 = load i32*, i32** %10, align 8, !dbg !5096
  store i32 %513, i32* %514, align 4, !dbg !5097
  %515 = load i32, i32* %9, align 4, !dbg !5098
  %516 = add nsw i32 %515, 1, !dbg !5098
  store i32 %516, i32* %9, align 4, !dbg !5098
  %517 = load i32, i32* @x.93
  %518 = load i32, i32* @y.94
  %519 = sub i32 %517, 1
  %520 = mul i32 %517, %519
  %521 = urem i32 %520, 2
  %522 = icmp eq i32 %521, 0
  %523 = icmp slt i32 %518, 10
  %524 = or i1 %522, %523
  br i1 %524, label %originalBBpart2110, label %originalBB107alteredBB

originalBBpart2110:                               ; preds = %originalBB107
  br label %525, !dbg !5099

525:                                              ; preds = %originalBBpart2110, %501, %498
  %526 = load i32, i32* @x.93
  %527 = load i32, i32* @y.94
  %528 = sub i32 %526, 1
  %529 = mul i32 %526, %528
  %530 = urem i32 %529, 2
  %531 = icmp eq i32 %530, 0
  %532 = icmp slt i32 %527, 10
  %533 = or i1 %531, %532
  br i1 %533, label %originalBB112, label %originalBB112alteredBB

originalBB112:                                    ; preds = %525, %originalBB112alteredBB
  %534 = load i32*, i32** %10, align 8, !dbg !5100
  %535 = load i32**, i32*** %7, align 8, !dbg !5101
  store i32* %534, i32** %535, align 8, !dbg !5102
  %536 = load i32, i32* %9, align 4, !dbg !5103
  %537 = icmp slt i32 1, %536, !dbg !5105
  %538 = load i32, i32* @x.93
  %539 = load i32, i32* @y.94
  %540 = sub i32 %538, 1
  %541 = mul i32 %538, %540
  %542 = urem i32 %541, 2
  %543 = icmp eq i32 %542, 0
  %544 = icmp slt i32 %539, 10
  %545 = or i1 %543, %544
  br i1 %545, label %originalBBpart2114, label %originalBB112alteredBB

originalBBpart2114:                               ; preds = %originalBB112
  br i1 %537, label %546, label %727, !dbg !5106

546:                                              ; preds = %originalBBpart2114
  call void @llvm.dbg.declare(metadata i32* %15, metadata !5107, metadata !DIExpression()), !dbg !5109
  %547 = load i32, i32* @x.93
  %548 = load i32, i32* @y.94
  %549 = sub i32 %547, 1
  %550 = mul i32 %547, %549
  %551 = urem i32 %550, 2
  %552 = icmp eq i32 %551, 0
  %553 = icmp slt i32 %548, 10
  %554 = or i1 %552, %553
  br i1 %554, label %originalBB116, label %originalBB116alteredBB

originalBB116:                                    ; preds = %546, %originalBB116alteredBB
  %555 = load i32*, i32** %10, align 8, !dbg !5110
  %556 = load i32, i32* %555, align 4, !dbg !5111
  store i32 %556, i32* %15, align 4, !dbg !5109
  call void @llvm.dbg.declare(metadata i32** %16, metadata !5112, metadata !DIExpression()), !dbg !5113
  call void @llvm.dbg.declare(metadata i32** %17, metadata !5114, metadata !DIExpression()), !dbg !5115
  %557 = load i32*, i32** %10, align 8, !dbg !5116
  %558 = load i32, i32* %9, align 4, !dbg !5117
  %559 = sext i32 %558 to i64, !dbg !5118
  %560 = getelementptr inbounds i32, i32* %557, i64 %559, !dbg !5118
  store i32* %560, i32** %17, align 8, !dbg !5115
  %561 = load i32*, i32** %10, align 8, !dbg !5119
  %562 = getelementptr inbounds i32, i32* %561, i64 1, !dbg !5121
  store i32* %562, i32** %16, align 8, !dbg !5122
  %563 = load i32, i32* @x.93
  %564 = load i32, i32* @y.94
  %565 = sub i32 %563, 1
  %566 = mul i32 %563, %565
  %567 = urem i32 %566, 2
  %568 = icmp eq i32 %567, 0
  %569 = icmp slt i32 %564, 10
  %570 = or i1 %568, %569
  br i1 %570, label %originalBBpart2118, label %originalBB116alteredBB

originalBBpart2118:                               ; preds = %originalBB116
  br label %571, !dbg !5123

571:                                              ; preds = %originalBBpart2152, %originalBBpart2118
  %572 = load i32, i32* @x.93
  %573 = load i32, i32* @y.94
  %574 = sub i32 %572, 1
  %575 = mul i32 %572, %574
  %576 = urem i32 %575, 2
  %577 = icmp eq i32 %576, 0
  %578 = icmp slt i32 %573, 10
  %579 = or i1 %577, %578
  br i1 %579, label %originalBB120, label %originalBB120alteredBB

originalBB120:                                    ; preds = %571, %originalBB120alteredBB
  %580 = load i32*, i32** %16, align 8, !dbg !5124
  %581 = load i32*, i32** %17, align 8, !dbg !5126
  %582 = icmp ult i32* %580, %581, !dbg !5127
  %583 = load i32, i32* @x.93
  %584 = load i32, i32* @y.94
  %585 = sub i32 %583, 1
  %586 = mul i32 %583, %585
  %587 = urem i32 %586, 2
  %588 = icmp eq i32 %587, 0
  %589 = icmp slt i32 %584, 10
  %590 = or i1 %588, %589
  br i1 %590, label %originalBBpart2122, label %originalBB120alteredBB

originalBBpart2122:                               ; preds = %originalBB120
  br i1 %582, label %591, label %710, !dbg !5128

591:                                              ; preds = %originalBBpart2122
  %592 = load i32, i32* @x.93
  %593 = load i32, i32* @y.94
  %594 = sub i32 %592, 1
  %595 = mul i32 %592, %594
  %596 = urem i32 %595, 2
  %597 = icmp eq i32 %596, 0
  %598 = icmp slt i32 %593, 10
  %599 = or i1 %597, %598
  br i1 %599, label %originalBB124, label %originalBB124alteredBB

originalBB124:                                    ; preds = %591, %originalBB124alteredBB
  %600 = load i32*, i32** %16, align 8, !dbg !5129
  %601 = load i32, i32* %600, align 4, !dbg !5132
  %602 = load i32, i32* %15, align 4, !dbg !5133
  %603 = icmp eq i32 %601, %602, !dbg !5134
  %604 = load i32, i32* @x.93
  %605 = load i32, i32* @y.94
  %606 = sub i32 %604, 1
  %607 = mul i32 %604, %606
  %608 = urem i32 %607, 2
  %609 = icmp eq i32 %608, 0
  %610 = icmp slt i32 %605, 10
  %611 = or i1 %609, %610
  br i1 %611, label %originalBBpart2126, label %originalBB124alteredBB

originalBBpart2126:                               ; preds = %originalBB124
  br i1 %603, label %634, label %612, !dbg !5135

612:                                              ; preds = %originalBBpart2126
  %613 = load i32, i32* @x.93
  %614 = load i32, i32* @y.94
  %615 = sub i32 %613, 1
  %616 = mul i32 %613, %615
  %617 = urem i32 %616, 2
  %618 = icmp eq i32 %617, 0
  %619 = icmp slt i32 %614, 10
  %620 = or i1 %618, %619
  br i1 %620, label %originalBB128, label %originalBB128alteredBB

originalBB128:                                    ; preds = %612, %originalBB128alteredBB
  %621 = load i32*, i32** %16, align 8, !dbg !5136
  %622 = load i32, i32* %621, align 4, !dbg !5137
  %623 = load i32*, i32** %10, align 8, !dbg !5138
  %624 = load i32, i32* %623, align 4, !dbg !5139
  %625 = icmp eq i32 %622, %624, !dbg !5140
  %626 = load i32, i32* @x.93
  %627 = load i32, i32* @y.94
  %628 = sub i32 %626, 1
  %629 = mul i32 %626, %628
  %630 = urem i32 %629, 2
  %631 = icmp eq i32 %630, 0
  %632 = icmp slt i32 %627, 10
  %633 = or i1 %631, %632
  br i1 %633, label %originalBBpart2130, label %originalBB128alteredBB

originalBBpart2130:                               ; preds = %originalBB128
  br i1 %625, label %634, label %653, !dbg !5141

634:                                              ; preds = %originalBBpart2130, %originalBBpart2126
  %635 = load i32, i32* @x.93
  %636 = load i32, i32* @y.94
  %637 = sub i32 %635, 1
  %638 = mul i32 %635, %637
  %639 = urem i32 %638, 2
  %640 = icmp eq i32 %639, 0
  %641 = icmp slt i32 %636, 10
  %642 = or i1 %640, %641
  br i1 %642, label %originalBB132, label %originalBB132alteredBB

originalBB132:                                    ; preds = %634, %originalBB132alteredBB
  %643 = load i32, i32* %9, align 4, !dbg !5142
  %644 = add nsw i32 %643, -1, !dbg !5142
  store i32 %644, i32* %9, align 4, !dbg !5142
  %645 = load i32, i32* @x.93
  %646 = load i32, i32* @y.94
  %647 = sub i32 %645, 1
  %648 = mul i32 %645, %647
  %649 = urem i32 %648, 2
  %650 = icmp eq i32 %649, 0
  %651 = icmp slt i32 %646, 10
  %652 = or i1 %650, %651
  br i1 %652, label %originalBBpart2140, label %originalBB132alteredBB

originalBBpart2140:                               ; preds = %originalBB132
  br label %674, !dbg !5143

653:                                              ; preds = %originalBBpart2130
  %654 = load i32, i32* @x.93
  %655 = load i32, i32* @y.94
  %656 = sub i32 %654, 1
  %657 = mul i32 %654, %656
  %658 = urem i32 %657, 2
  %659 = icmp eq i32 %658, 0
  %660 = icmp slt i32 %655, 10
  %661 = or i1 %659, %660
  br i1 %661, label %originalBB142, label %originalBB142alteredBB

originalBB142:                                    ; preds = %653, %originalBB142alteredBB
  %662 = load i32*, i32** %16, align 8, !dbg !5144
  %663 = load i32, i32* %662, align 4, !dbg !5145
  %664 = load i32*, i32** %10, align 8, !dbg !5146
  %665 = getelementptr inbounds i32, i32* %664, i32 1, !dbg !5146
  store i32* %665, i32** %10, align 8, !dbg !5146
  store i32 %663, i32* %665, align 4, !dbg !5147
  %666 = load i32, i32* @x.93
  %667 = load i32, i32* @y.94
  %668 = sub i32 %666, 1
  %669 = mul i32 %666, %668
  %670 = urem i32 %669, 2
  %671 = icmp eq i32 %670, 0
  %672 = icmp slt i32 %667, 10
  %673 = or i1 %671, %672
  br i1 %673, label %originalBBpart2144, label %originalBB142alteredBB

originalBBpart2144:                               ; preds = %originalBB142
  br label %674

674:                                              ; preds = %originalBBpart2144, %originalBBpart2140
  %675 = load i32, i32* @x.93
  %676 = load i32, i32* @y.94
  %677 = sub i32 %675, 1
  %678 = mul i32 %675, %677
  %679 = urem i32 %678, 2
  %680 = icmp eq i32 %679, 0
  %681 = icmp slt i32 %676, 10
  %682 = or i1 %680, %681
  br i1 %682, label %originalBB146, label %originalBB146alteredBB

originalBB146:                                    ; preds = %674, %originalBB146alteredBB
  %683 = load i32, i32* @x.93
  %684 = load i32, i32* @y.94
  %685 = sub i32 %683, 1
  %686 = mul i32 %683, %685
  %687 = urem i32 %686, 2
  %688 = icmp eq i32 %687, 0
  %689 = icmp slt i32 %684, 10
  %690 = or i1 %688, %689
  br i1 %690, label %originalBBpart2148, label %originalBB146alteredBB

originalBBpart2148:                               ; preds = %originalBB146
  br label %691, !dbg !5148

691:                                              ; preds = %originalBBpart2148
  %692 = load i32, i32* @x.93
  %693 = load i32, i32* @y.94
  %694 = sub i32 %692, 1
  %695 = mul i32 %692, %694
  %696 = urem i32 %695, 2
  %697 = icmp eq i32 %696, 0
  %698 = icmp slt i32 %693, 10
  %699 = or i1 %697, %698
  br i1 %699, label %originalBB150, label %originalBB150alteredBB

originalBB150:                                    ; preds = %691, %originalBB150alteredBB
  %700 = load i32*, i32** %16, align 8, !dbg !5149
  %701 = getelementptr inbounds i32, i32* %700, i32 1, !dbg !5149
  store i32* %701, i32** %16, align 8, !dbg !5149
  %702 = load i32, i32* @x.93
  %703 = load i32, i32* @y.94
  %704 = sub i32 %702, 1
  %705 = mul i32 %702, %704
  %706 = urem i32 %705, 2
  %707 = icmp eq i32 %706, 0
  %708 = icmp slt i32 %703, 10
  %709 = or i1 %707, %708
  br i1 %709, label %originalBBpart2152, label %originalBB150alteredBB

originalBBpart2152:                               ; preds = %originalBB150
  br label %571, !dbg !5150, !llvm.loop !5151

710:                                              ; preds = %originalBBpart2122
  %711 = load i32, i32* @x.93
  %712 = load i32, i32* @y.94
  %713 = sub i32 %711, 1
  %714 = mul i32 %711, %713
  %715 = urem i32 %714, 2
  %716 = icmp eq i32 %715, 0
  %717 = icmp slt i32 %712, 10
  %718 = or i1 %716, %717
  br i1 %718, label %originalBB154, label %originalBB154alteredBB

originalBB154:                                    ; preds = %710, %originalBB154alteredBB
  %719 = load i32, i32* @x.93
  %720 = load i32, i32* @y.94
  %721 = sub i32 %719, 1
  %722 = mul i32 %719, %721
  %723 = urem i32 %722, 2
  %724 = icmp eq i32 %723, 0
  %725 = icmp slt i32 %720, 10
  %726 = or i1 %724, %725
  br i1 %726, label %originalBBpart2156, label %originalBB154alteredBB

originalBBpart2156:                               ; preds = %originalBB154
  br label %727, !dbg !5153

727:                                              ; preds = %originalBBpart2156, %originalBBpart2114
  %728 = load i32, i32* @x.93
  %729 = load i32, i32* @y.94
  %730 = sub i32 %728, 1
  %731 = mul i32 %728, %730
  %732 = urem i32 %731, 2
  %733 = icmp eq i32 %732, 0
  %734 = icmp slt i32 %729, 10
  %735 = or i1 %733, %734
  br i1 %735, label %originalBB158, label %originalBB158alteredBB

originalBB158:                                    ; preds = %727, %originalBB158alteredBB
  %736 = load i32, i32* %9, align 4, !dbg !5154
  store i32 %736, i32* %4, align 4, !dbg !5155
  %737 = load i32, i32* @x.93
  %738 = load i32, i32* @y.94
  %739 = sub i32 %737, 1
  %740 = mul i32 %737, %739
  %741 = urem i32 %740, 2
  %742 = icmp eq i32 %741, 0
  %743 = icmp slt i32 %738, 10
  %744 = or i1 %742, %743
  br i1 %744, label %originalBBpart2160, label %originalBB158alteredBB

originalBBpart2160:                               ; preds = %originalBB158
  br label %745, !dbg !5155

745:                                              ; preds = %originalBBpart2160, %originalBBpart2105, %416, %originalBBpart265, %originalBBpart261, %188, %originalBBpart233, %originalBBpart24
  %746 = load i32, i32* %4, align 4, !dbg !5156
  ret i32 %746, !dbg !5156

originalBBalteredBB:                              ; preds = %originalBB, %20
  store i32 10, i32* %8, align 4, !dbg !4947
  %747 = load i32, i32* %8, align 4, !dbg !4949
  %748 = sext i32 %747 to i64, !dbg !4949
  %749 = call i32* @realloc_groupbuf(i32* null, i64 %748), !dbg !4950
  store i32* %749, i32** %10, align 8, !dbg !4951
  %750 = load i32*, i32** %10, align 8, !dbg !4952
  %751 = icmp eq i32* %750, null, !dbg !4954
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %42
  store i32 -1, i32* %4, align 4, !dbg !4956
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %59
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %84
  %752 = load i32, i32* %12, align 4, !dbg !4973
  %753 = load i32, i32* %8, align 4, !dbg !4974
  %754 = icmp eq i32 %752, %753, !dbg !4975
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %104
  %755 = load i32, i32* %8, align 4, !dbg !4977
  %_ = sub i32 %755, 2
  %gen = mul i32 %_, 2
  %_15 = shl i32 %755, 2
  %_16 = shl i32 %755, 2
  %_17 = sub i32 %755, 2
  %gen18 = mul i32 %_17, 2
  %_19 = sub i32 0, %755
  %gen20 = add i32 %_19, 2
  %_21 = shl i32 %755, 2
  %_22 = sub i32 %755, 2
  %gen23 = mul i32 %_22, 2
  %756 = mul nsw i32 %755, 2, !dbg !4977
  store i32 %756, i32* %8, align 4, !dbg !4977
  br label %originalBB14

originalBB27alteredBB:                            ; preds = %originalBB27, %123
  %757 = load i32*, i32** %10, align 8, !dbg !4979
  %758 = load i32, i32* %8, align 4, !dbg !4981
  %759 = sext i32 %758 to i64, !dbg !4981
  %760 = call i32* @realloc_groupbuf(i32* %757, i64 %759), !dbg !4982
  store i32* %760, i32** %11, align 8, !dbg !4983
  %761 = icmp eq i32* %760, null, !dbg !4984
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %145
  %762 = call i32* @__errno_location() #15, !dbg !4989
  %763 = load i32, i32* %762, align 4, !dbg !4989
  store i32 %763, i32* %13, align 4, !dbg !4988
  %764 = load i32*, i32** %10, align 8, !dbg !4990
  %765 = bitcast i32* %764 to i8*, !dbg !4990
  call void @free(i8* %765) #10, !dbg !4991
  %766 = load i32, i32* %13, align 4, !dbg !4992
  %767 = call i32* @__errno_location() #15, !dbg !4993
  store i32 %766, i32* %767, align 4, !dbg !4994
  store i32 -1, i32* %4, align 4, !dbg !4995
  br label %originalBB31

originalBB35alteredBB:                            ; preds = %originalBB35, %168
  %768 = load i32*, i32** %11, align 8, !dbg !4996
  store i32* %768, i32** %10, align 8, !dbg !4997
  %769 = load i32, i32* %9, align 4, !dbg !4998
  %770 = icmp sle i32 0, %769, !dbg !5000
  br label %originalBB35

originalBB39alteredBB:                            ; preds = %originalBB39, %192
  br label %originalBB39

originalBB43alteredBB:                            ; preds = %originalBB43, %212
  %771 = load i8*, i8** %5, align 8, !dbg !5011
  %772 = load i32, i32* %6, align 4, !dbg !5012
  %773 = call i32 @getugroups(i32 0, i32* null, i8* %771, i32 %772), !dbg !5013
  br label %originalBB43

originalBB47alteredBB:                            ; preds = %originalBB47, %232
  %774 = call i32 @getgroups(i32 0, i32* null) #10, !dbg !5014
  br label %originalBB47

originalBB51alteredBB:                            ; preds = %originalBB51, %250
  store i32 %251, i32* %8, align 4, !dbg !5015
  %775 = load i32, i32* %8, align 4, !dbg !5016
  %776 = icmp slt i32 %775, 0, !dbg !5018
  br label %originalBB51

originalBB55alteredBB:                            ; preds = %originalBB55, %270
  %777 = call i32* @__errno_location() #15, !dbg !5020
  %778 = load i32, i32* %777, align 4, !dbg !5020
  %779 = icmp eq i32 %778, 38, !dbg !5023
  br label %originalBB55

originalBB59alteredBB:                            ; preds = %originalBB59, %293
  %780 = load i32*, i32** %10, align 8, !dbg !5028
  %781 = load i32**, i32*** %7, align 8, !dbg !5030
  store i32* %780, i32** %781, align 8, !dbg !5031
  %782 = load i32, i32* %6, align 4, !dbg !5032
  %783 = load i32*, i32** %10, align 8, !dbg !5033
  store i32 %782, i32* %783, align 4, !dbg !5034
  %784 = load i32, i32* %6, align 4, !dbg !5035
  %785 = icmp ne i32 %784, -1, !dbg !5036
  %786 = zext i1 %785 to i32, !dbg !5036
  store i32 %786, i32* %4, align 4, !dbg !5037
  br label %originalBB59

originalBB63alteredBB:                            ; preds = %originalBB63, %317
  store i32 -1, i32* %4, align 4, !dbg !5038
  br label %originalBB63

originalBB67alteredBB:                            ; preds = %originalBB67, %334
  %787 = load i32, i32* %8, align 4, !dbg !5039
  %788 = icmp eq i32 %787, 0, !dbg !5041
  br label %originalBB67

originalBB71alteredBB:                            ; preds = %originalBB71, %356
  %789 = load i32, i32* %6, align 4, !dbg !5045
  %790 = icmp ne i32 %789, -1, !dbg !5046
  br label %originalBB71

originalBB75alteredBB:                            ; preds = %originalBB75, %375
  %791 = load i32, i32* %8, align 4, !dbg !5048
  %_76 = sub i32 0, %791
  %gen77 = add i32 %_76, 1
  %_78 = sub i32 0, %791
  %gen79 = add i32 %_78, 1
  %_80 = shl i32 %791, 1
  %_81 = shl i32 %791, 1
  %_82 = shl i32 %791, 1
  %_83 = shl i32 %791, 1
  %_84 = sub i32 %791, 1
  %gen85 = mul i32 %_84, 1
  %_86 = sub i32 %791, 1
  %gen87 = mul i32 %_86, 1
  %792 = add nsw i32 %791, 1, !dbg !5048
  store i32 %792, i32* %8, align 4, !dbg !5048
  br label %originalBB75

originalBB91alteredBB:                            ; preds = %originalBB91, %394
  %793 = load i32, i32* %8, align 4, !dbg !5050
  %794 = sext i32 %793 to i64, !dbg !5050
  %795 = call i32* @realloc_groupbuf(i32* null, i64 %794), !dbg !5051
  store i32* %795, i32** %10, align 8, !dbg !5052
  %796 = load i32*, i32** %10, align 8, !dbg !5053
  %797 = icmp eq i32* %796, null, !dbg !5055
  br label %originalBB91

originalBB95alteredBB:                            ; preds = %originalBB95, %417
  %798 = load i8*, i8** %5, align 8, !dbg !5058
  %799 = icmp ne i8* %798, null, !dbg !5058
  br label %originalBB95

originalBB99alteredBB:                            ; preds = %originalBB99, %455
  store i32 %456, i32* %9, align 4, !dbg !5073
  %800 = load i32, i32* %9, align 4, !dbg !5074
  %801 = icmp slt i32 %800, 0, !dbg !5076
  br label %originalBB99

originalBB103alteredBB:                           ; preds = %originalBB103, %475
  %802 = call i32* @__errno_location() #15, !dbg !5081
  %803 = load i32, i32* %802, align 4, !dbg !5081
  store i32 %803, i32* %14, align 4, !dbg !5080
  %804 = load i32*, i32** %10, align 8, !dbg !5082
  %805 = bitcast i32* %804 to i8*, !dbg !5082
  call void @free(i8* %805) #10, !dbg !5083
  %806 = load i32, i32* %14, align 4, !dbg !5084
  %807 = call i32* @__errno_location() #15, !dbg !5085
  store i32 %806, i32* %807, align 4, !dbg !5086
  store i32 -1, i32* %4, align 4, !dbg !5087
  br label %originalBB103

originalBB107alteredBB:                           ; preds = %originalBB107, %504
  %808 = load i32, i32* %6, align 4, !dbg !5094
  %809 = load i32*, i32** %10, align 8, !dbg !5096
  store i32 %808, i32* %809, align 4, !dbg !5097
  %810 = load i32, i32* %9, align 4, !dbg !5098
  %_108 = shl i32 %810, 1
  %811 = add nsw i32 %810, 1, !dbg !5098
  store i32 %811, i32* %9, align 4, !dbg !5098
  br label %originalBB107

originalBB112alteredBB:                           ; preds = %originalBB112, %525
  %812 = load i32*, i32** %10, align 8, !dbg !5100
  %813 = load i32**, i32*** %7, align 8, !dbg !5101
  store i32* %812, i32** %813, align 8, !dbg !5102
  %814 = load i32, i32* %9, align 4, !dbg !5103
  %815 = icmp slt i32 1, %814, !dbg !5105
  br label %originalBB112

originalBB116alteredBB:                           ; preds = %originalBB116, %546
  %816 = load i32*, i32** %10, align 8, !dbg !5110
  %817 = load i32, i32* %816, align 4, !dbg !5111
  store i32 %817, i32* %15, align 4, !dbg !5109
  call void @llvm.dbg.declare(metadata !4, metadata !5157, metadata !DIExpression()), !dbg !5113
  call void @llvm.dbg.declare(metadata !4, metadata !5162, metadata !DIExpression()), !dbg !5115
  %818 = load i32*, i32** %10, align 8, !dbg !5116
  %819 = load i32, i32* %9, align 4, !dbg !5117
  %820 = sext i32 %819 to i64, !dbg !5118
  %821 = getelementptr inbounds i32, i32* %818, i64 %820, !dbg !5118
  store i32* %821, i32** %17, align 8, !dbg !5115
  %822 = load i32*, i32** %10, align 8, !dbg !5119
  %823 = getelementptr inbounds i32, i32* %822, i64 1, !dbg !5121
  store i32* %823, i32** %16, align 8, !dbg !5122
  br label %originalBB116

originalBB120alteredBB:                           ; preds = %originalBB120, %571
  %824 = load i32*, i32** %16, align 8, !dbg !5124
  %825 = load i32*, i32** %17, align 8, !dbg !5126
  %826 = icmp ult i32* %824, %825, !dbg !5127
  br label %originalBB120

originalBB124alteredBB:                           ; preds = %originalBB124, %591
  %827 = load i32*, i32** %16, align 8, !dbg !5129
  %828 = load i32, i32* %827, align 4, !dbg !5132
  %829 = load i32, i32* %15, align 4, !dbg !5133
  %830 = icmp eq i32 %828, %829, !dbg !5134
  br label %originalBB124

originalBB128alteredBB:                           ; preds = %originalBB128, %612
  %831 = load i32*, i32** %16, align 8, !dbg !5136
  %832 = load i32, i32* %831, align 4, !dbg !5137
  %833 = load i32*, i32** %10, align 8, !dbg !5138
  %834 = load i32, i32* %833, align 4, !dbg !5139
  %835 = icmp eq i32 %832, %834, !dbg !5140
  br label %originalBB128

originalBB132alteredBB:                           ; preds = %originalBB132, %634
  %836 = load i32, i32* %9, align 4, !dbg !5142
  %_133 = sub i32 %836, -1
  %gen134 = mul i32 %_133, -1
  %_135 = sub i32 0, %836
  %gen136 = add i32 %_135, -1
  %_137 = sub i32 0, %836
  %gen138 = add i32 %_137, -1
  %837 = add nsw i32 %836, -1, !dbg !5142
  store i32 %837, i32* %9, align 4, !dbg !5142
  br label %originalBB132

originalBB142alteredBB:                           ; preds = %originalBB142, %653
  %838 = load i32*, i32** %16, align 8, !dbg !5144
  %839 = load i32, i32* %838, align 4, !dbg !5145
  %840 = load i32*, i32** %10, align 8, !dbg !5146
  %841 = getelementptr inbounds i32, i32* %840, i32 1, !dbg !5146
  store i32* %841, i32** %10, align 8, !dbg !5146
  store i32 %839, i32* %841, align 4, !dbg !5147
  br label %originalBB142

originalBB146alteredBB:                           ; preds = %originalBB146, %674
  br label %originalBB146

originalBB150alteredBB:                           ; preds = %originalBB150, %691
  %842 = load i32*, i32** %16, align 8, !dbg !5149
  %843 = getelementptr inbounds i32, i32* %842, i32 1, !dbg !5149
  store i32* %843, i32** %16, align 8, !dbg !5149
  br label %originalBB150

originalBB154alteredBB:                           ; preds = %originalBB154, %710
  br label %originalBB154

originalBB158alteredBB:                           ; preds = %originalBB158, %727
  %844 = load i32, i32* %9, align 4, !dbg !5154
  store i32 %844, i32* %4, align 4, !dbg !5155
  br label %originalBB158
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32* @realloc_groupbuf(i32*, i64) #4 !dbg !5163 {
  %3 = load i32, i32* @x.95
  %4 = load i32, i32* @y.96
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i64, align 8
  store i32* %0, i32** %12, align 8
  call void @llvm.dbg.declare(metadata i32** %12, metadata !5166, metadata !DIExpression()), !dbg !5167
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !5168, metadata !DIExpression()), !dbg !5169
  %14 = load i64, i64* %13, align 8, !dbg !5170
  %15 = icmp ult i64 2305843009213693951, %14, !dbg !5170
  %16 = load i32, i32* @x.95
  %17 = load i32, i32* @y.96
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %42, !dbg !5172

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.95
  %26 = load i32, i32* @y.96
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = call i32* @__errno_location() #15, !dbg !5173
  store i32 12, i32* %33, align 4, !dbg !5175
  store i32* null, i32** %11, align 8, !dbg !5176
  %34 = load i32, i32* @x.95
  %35 = load i32, i32* @y.96
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %65, !dbg !5176

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.95
  %44 = load i32, i32* @y.96
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load i32*, i32** %12, align 8, !dbg !5177
  %52 = bitcast i32* %51 to i8*, !dbg !5177
  %53 = load i64, i64* %13, align 8, !dbg !5178
  %54 = mul i64 %53, 4, !dbg !5179
  %55 = call i8* @realloc(i8* %52, i64 %54) #10, !dbg !5180
  %56 = bitcast i8* %55 to i32*, !dbg !5180
  store i32* %56, i32** %11, align 8, !dbg !5181
  %57 = load i32, i32* @x.95
  %58 = load i32, i32* @y.96
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart218, label %originalBB6alteredBB

originalBBpart218:                                ; preds = %originalBB6
  br label %65, !dbg !5181

65:                                               ; preds = %originalBBpart218, %originalBBpart24
  %66 = load i32*, i32** %11, align 8, !dbg !5182
  ret i32* %66, !dbg !5182

originalBBalteredBB:                              ; preds = %originalBB, %2
  %67 = alloca i32*, align 8
  %68 = alloca i32*, align 8
  %69 = alloca i64, align 8
  store i32* %0, i32** %68, align 8
  call void @llvm.dbg.declare(metadata i32** %68, metadata !5183, metadata !DIExpression()), !dbg !5167
  store i64 %1, i64* %69, align 8
  call void @llvm.dbg.declare(metadata i64* %69, metadata !5186, metadata !DIExpression()), !dbg !5169
  %70 = load i64, i64* %69, align 8, !dbg !5170
  %71 = icmp ult i64 2305843009213693951, %70, !dbg !5170
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %72 = call i32* @__errno_location() #15, !dbg !5173
  store i32 12, i32* %72, align 4, !dbg !5175
  store i32* null, i32** %11, align 8, !dbg !5176
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %73 = load i32*, i32** %12, align 8, !dbg !5177
  %74 = bitcast i32* %73 to i8*, !dbg !5177
  %75 = load i64, i64* %13, align 8, !dbg !5178
  %_ = sub i64 0, %75
  %gen = add i64 %_, 4
  %_7 = shl i64 %75, 4
  %_8 = sub i64 %75, 4
  %gen9 = mul i64 %_8, 4
  %_10 = sub i64 %75, 4
  %gen11 = mul i64 %_10, 4
  %_12 = shl i64 %75, 4
  %_13 = sub i64 0, %75
  %gen14 = add i64 %_13, 4
  %_15 = sub i64 %75, 4
  %gen16 = mul i64 %_15, 4
  %76 = mul i64 %75, 4, !dbg !5179
  %77 = call i8* @realloc(i8* %74, i64 %76) #10, !dbg !5180
  %78 = bitcast i8* %77 to i32*, !dbg !5180
  store i32* %78, i32** %11, align 8, !dbg !5181
  br label %originalBB6
}

declare dso_local i32 @getgrouplist(i8*, i32, i32*, i32*) #3

; Function Attrs: nounwind
declare dso_local i32 @getgroups(i32, i32*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_r(i32, i8* nonnull, i64) #4 !dbg !5187 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !5191, metadata !DIExpression()), !dbg !5192
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !5193, metadata !DIExpression()), !dbg !5194
  store i64 %2, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !5195, metadata !DIExpression()), !dbg !5196
  %7 = load i32, i32* %4, align 4, !dbg !5197
  %8 = load i8*, i8** %5, align 8, !dbg !5198
  %9 = load i64, i64* %6, align 8, !dbg !5199
  %10 = call i32 @setlocale_null_unlocked(i32 %7, i8* %8, i64 %9), !dbg !5200
  ret i32 %10, !dbg !5201
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_unlocked(i32, i8*, i64) #4 !dbg !5202 {
  %4 = load i32, i32* @x.99
  %5 = load i32, i32* @y.100
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !5203, metadata !DIExpression()), !dbg !5204
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !5205, metadata !DIExpression()), !dbg !5206
  store i64 %2, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !5207, metadata !DIExpression()), !dbg !5208
  call void @llvm.dbg.declare(metadata i8** %16, metadata !5209, metadata !DIExpression()), !dbg !5210
  %18 = load i32, i32* %13, align 4, !dbg !5211
  %19 = call i8* @setlocale_null_androidfix(i32 %18), !dbg !5212
  store i8* %19, i8** %16, align 8, !dbg !5210
  %20 = load i8*, i8** %16, align 8, !dbg !5213
  %21 = icmp eq i8* %20, null, !dbg !5215
  %22 = load i32, i32* @x.99
  %23 = load i32, i32* @y.100
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %37, !dbg !5216

30:                                               ; preds = %originalBBpart2
  %31 = load i64, i64* %15, align 8, !dbg !5217
  %32 = icmp ugt i64 %31, 0, !dbg !5220
  br i1 %32, label %33, label %36, !dbg !5221

33:                                               ; preds = %30
  %34 = load i8*, i8** %14, align 8, !dbg !5222
  %35 = getelementptr inbounds i8, i8* %34, i64 0, !dbg !5222
  store i8 0, i8* %35, align 1, !dbg !5223
  br label %36, !dbg !5222

36:                                               ; preds = %33, %30
  store i32 22, i32* %12, align 4, !dbg !5224
  br label %109, !dbg !5224

37:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i64* %17, metadata !5225, metadata !DIExpression()), !dbg !5227
  %38 = load i32, i32* @x.99
  %39 = load i32, i32* @y.100
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %46 = load i8*, i8** %16, align 8, !dbg !5228
  %47 = call i64 @strlen(i8* %46) #13, !dbg !5229
  store i64 %47, i64* %17, align 8, !dbg !5227
  %48 = load i64, i64* %17, align 8, !dbg !5230
  %49 = load i64, i64* %15, align 8, !dbg !5232
  %50 = icmp ult i64 %48, %49, !dbg !5233
  %51 = load i32, i32* @x.99
  %52 = load i32, i32* @y.100
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %50, label %59, label %64, !dbg !5234

59:                                               ; preds = %originalBBpart24
  %60 = load i8*, i8** %14, align 8, !dbg !5235
  %61 = load i8*, i8** %16, align 8, !dbg !5237
  %62 = load i64, i64* %17, align 8, !dbg !5238
  %63 = add i64 %62, 1, !dbg !5239
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %60, i8* align 1 %61, i64 %63, i1 false), !dbg !5240
  store i32 0, i32* %12, align 4, !dbg !5241
  br label %109, !dbg !5241

64:                                               ; preds = %originalBBpart24
  %65 = load i64, i64* %15, align 8, !dbg !5242
  %66 = icmp ugt i64 %65, 0, !dbg !5245
  br i1 %66, label %67, label %92, !dbg !5246

67:                                               ; preds = %64
  %68 = load i32, i32* @x.99
  %69 = load i32, i32* @y.100
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %67, %originalBB6alteredBB
  %76 = load i8*, i8** %14, align 8, !dbg !5247
  %77 = load i8*, i8** %16, align 8, !dbg !5249
  %78 = load i64, i64* %15, align 8, !dbg !5250
  %79 = sub i64 %78, 1, !dbg !5251
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %76, i8* align 1 %77, i64 %79, i1 false), !dbg !5252
  %80 = load i8*, i8** %14, align 8, !dbg !5253
  %81 = load i64, i64* %15, align 8, !dbg !5254
  %82 = sub i64 %81, 1, !dbg !5255
  %83 = getelementptr inbounds i8, i8* %80, i64 %82, !dbg !5253
  store i8 0, i8* %83, align 1, !dbg !5256
  %84 = load i32, i32* @x.99
  %85 = load i32, i32* @y.100
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart224, label %originalBB6alteredBB

originalBBpart224:                                ; preds = %originalBB6
  br label %92, !dbg !5257

92:                                               ; preds = %originalBBpart224, %64
  %93 = load i32, i32* @x.99
  %94 = load i32, i32* @y.100
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %92, %originalBB26alteredBB
  store i32 34, i32* %12, align 4, !dbg !5258
  %101 = load i32, i32* @x.99
  %102 = load i32, i32* @y.100
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %109, !dbg !5258

109:                                              ; preds = %originalBBpart228, %59, %36
  %110 = load i32, i32* %12, align 4, !dbg !5259
  ret i32 %110, !dbg !5259

originalBBalteredBB:                              ; preds = %originalBB, %3
  %111 = alloca i32, align 4
  %112 = alloca i32, align 4
  %113 = alloca i8*, align 8
  %114 = alloca i64, align 8
  %115 = alloca i8*, align 8
  %116 = alloca i64, align 8
  store i32 %0, i32* %112, align 4
  call void @llvm.dbg.declare(metadata i32* %112, metadata !5260, metadata !DIExpression()), !dbg !5204
  store i8* %1, i8** %113, align 8
  call void @llvm.dbg.declare(metadata i8** %113, metadata !5263, metadata !DIExpression()), !dbg !5206
  store i64 %2, i64* %114, align 8
  call void @llvm.dbg.declare(metadata i64* %114, metadata !5264, metadata !DIExpression()), !dbg !5208
  call void @llvm.dbg.declare(metadata i8** %115, metadata !5265, metadata !DIExpression()), !dbg !5210
  %117 = load i32, i32* %112, align 4, !dbg !5211
  %118 = call i8* @setlocale_null_androidfix(i32 %117), !dbg !5212
  store i8* %118, i8** %115, align 8, !dbg !5210
  %119 = load i8*, i8** %115, align 8, !dbg !5213
  %120 = icmp eq i8* %119, null, !dbg !5215
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %121 = load i8*, i8** %16, align 8, !dbg !5228
  %122 = call i64 @strlen(i8* %121) #13, !dbg !5229
  store i64 %122, i64* %17, align 8, !dbg !5227
  %123 = load i64, i64* %17, align 8, !dbg !5230
  %124 = load i64, i64* %15, align 8, !dbg !5232
  %125 = icmp ult i64 %123, %124, !dbg !5233
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %67
  %126 = load i8*, i8** %14, align 8, !dbg !5247
  %127 = load i8*, i8** %16, align 8, !dbg !5249
  %128 = load i64, i64* %15, align 8, !dbg !5250
  %_ = sub i64 %128, 1
  %gen = mul i64 %_, 1
  %_7 = sub i64 0, %128
  %gen8 = add i64 %_7, 1
  %_9 = shl i64 %128, 1
  %_10 = sub i64 0, %128
  %gen11 = add i64 %_10, 1
  %129 = sub i64 %128, 1, !dbg !5251
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %126, i8* align 1 %127, i64 %129, i1 false), !dbg !5252
  %130 = load i8*, i8** %14, align 8, !dbg !5253
  %131 = load i64, i64* %15, align 8, !dbg !5254
  %_12 = sub i64 %131, 1
  %gen13 = mul i64 %_12, 1
  %_14 = shl i64 %131, 1
  %_15 = sub i64 0, %131
  %gen16 = add i64 %_15, 1
  %_17 = shl i64 %131, 1
  %_18 = shl i64 %131, 1
  %_19 = sub i64 0, %131
  %gen20 = add i64 %_19, 1
  %_21 = sub i64 %131, 1
  %gen22 = mul i64 %_21, 1
  %132 = sub i64 %131, 1, !dbg !5255
  %133 = getelementptr inbounds i8, i8* %130, i64 %132, !dbg !5253
  store i8 0, i8* %133, align 1, !dbg !5256
  br label %originalBB6

originalBB26alteredBB:                            ; preds = %originalBB26, %92
  store i32 34, i32* %12, align 4, !dbg !5258
  br label %originalBB26
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @setlocale_null_androidfix(i32) #4 !dbg !5266 {
  %2 = load i32, i32* @x.101
  %3 = load i32, i32* @y.102
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !5269, metadata !DIExpression()), !dbg !5270
  call void @llvm.dbg.declare(metadata i8** %11, metadata !5271, metadata !DIExpression()), !dbg !5272
  %12 = load i32, i32* %10, align 4, !dbg !5273
  %13 = call i8* @setlocale(i32 %12, i8* null) #10, !dbg !5274
  store i8* %13, i8** %11, align 8, !dbg !5272
  %14 = load i8*, i8** %11, align 8, !dbg !5275
  %15 = load i32, i32* @x.101
  %16 = load i32, i32* @y.102
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !5276

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32, align 4
  %24 = alloca i8*, align 8
  store i32 %0, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !5277, metadata !DIExpression()), !dbg !5270
  call void @llvm.dbg.declare(metadata i8** %24, metadata !5280, metadata !DIExpression()), !dbg !5272
  %25 = load i32, i32* %23, align 4, !dbg !5273
  %26 = call i8* @setlocale(i32 %25, i8* null) #10, !dbg !5274
  store i8* %26, i8** %24, align 8, !dbg !5272
  %27 = load i8*, i8** %24, align 8, !dbg !5275
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fclose(%struct._IO_FILE* nonnull) #4 !dbg !5281 {
  %2 = load i32, i32* @x.103
  %3 = load i32, i32* @y.104
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !5319, metadata !DIExpression()), !dbg !5320
  call void @llvm.dbg.declare(metadata i32* %12, metadata !5321, metadata !DIExpression()), !dbg !5322
  store i32 0, i32* %12, align 4, !dbg !5322
  call void @llvm.dbg.declare(metadata i32* %13, metadata !5323, metadata !DIExpression()), !dbg !5324
  call void @llvm.dbg.declare(metadata i32* %14, metadata !5325, metadata !DIExpression()), !dbg !5326
  store i32 0, i32* %14, align 4, !dbg !5326
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5327
  %16 = call i32 @fileno(%struct._IO_FILE* %15) #10, !dbg !5328
  store i32 %16, i32* %13, align 4, !dbg !5329
  %17 = load i32, i32* %13, align 4, !dbg !5330
  %18 = icmp slt i32 %17, 0, !dbg !5332
  %19 = load i32, i32* @x.103
  %20 = load i32, i32* @y.104
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %46, !dbg !5333

27:                                               ; preds = %originalBBpart2
  %28 = load i32, i32* @x.103
  %29 = load i32, i32* @y.104
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5334
  %37 = call i32 @fclose(%struct._IO_FILE* %36), !dbg !5335
  store i32 %37, i32* %10, align 4, !dbg !5336
  %38 = load i32, i32* @x.103
  %39 = load i32, i32* @y.104
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %184, !dbg !5336

46:                                               ; preds = %originalBBpart2
  %47 = load i32, i32* @x.103
  %48 = load i32, i32* @y.104
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %46, %originalBB6alteredBB
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5337
  %56 = call i32 @__freading(%struct._IO_FILE* %55) #10, !dbg !5337
  %57 = icmp ne i32 %56, 0, !dbg !5337
  %58 = load i32, i32* @x.103
  %59 = load i32, i32* @y.104
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %57, label %66, label %87, !dbg !5339

66:                                               ; preds = %originalBBpart28
  %67 = load i32, i32* @x.103
  %68 = load i32, i32* @y.104
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5340
  %76 = call i32 @fileno(%struct._IO_FILE* %75) #10, !dbg !5341
  %77 = call i64 @lseek(i32 %76, i64 0, i32 1) #10, !dbg !5342
  %78 = icmp ne i64 %77, -1, !dbg !5343
  %79 = load i32, i32* @x.103
  %80 = load i32, i32* @y.104
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %78, label %87, label %126, !dbg !5344

87:                                               ; preds = %originalBBpart212, %originalBBpart28
  %88 = load i32, i32* @x.103
  %89 = load i32, i32* @y.104
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %87, %originalBB14alteredBB
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5345
  %97 = call i32 @rpl_fflush(%struct._IO_FILE* %96), !dbg !5346
  %98 = icmp ne i32 %97, 0, !dbg !5346
  %99 = load i32, i32* @x.103
  %100 = load i32, i32* @y.104
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %98, label %107, label %126, !dbg !5347

107:                                              ; preds = %originalBBpart216
  %108 = load i32, i32* @x.103
  %109 = load i32, i32* @y.104
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %107, %originalBB18alteredBB
  %116 = call i32* @__errno_location() #15, !dbg !5348
  %117 = load i32, i32* %116, align 4, !dbg !5348
  store i32 %117, i32* %12, align 4, !dbg !5349
  %118 = load i32, i32* @x.103
  %119 = load i32, i32* @y.104
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %126, !dbg !5350

126:                                              ; preds = %originalBBpart220, %originalBBpart216, %originalBBpart212
  %127 = load i32, i32* @x.103
  %128 = load i32, i32* @y.104
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %126, %originalBB22alteredBB
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5351
  %136 = call i32 @fclose(%struct._IO_FILE* %135), !dbg !5352
  store i32 %136, i32* %14, align 4, !dbg !5353
  %137 = load i32, i32* %12, align 4, !dbg !5354
  %138 = icmp ne i32 %137, 0, !dbg !5356
  %139 = load i32, i32* @x.103
  %140 = load i32, i32* @y.104
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %138, label %147, label %166, !dbg !5357

147:                                              ; preds = %originalBBpart224
  %148 = load i32, i32* @x.103
  %149 = load i32, i32* @y.104
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %147, %originalBB26alteredBB
  %156 = load i32, i32* %12, align 4, !dbg !5358
  %157 = call i32* @__errno_location() #15, !dbg !5360
  store i32 %156, i32* %157, align 4, !dbg !5361
  store i32 -1, i32* %14, align 4, !dbg !5362
  %158 = load i32, i32* @x.103
  %159 = load i32, i32* @y.104
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %166, !dbg !5363

166:                                              ; preds = %originalBBpart228, %originalBBpart224
  %167 = load i32, i32* @x.103
  %168 = load i32, i32* @y.104
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %166, %originalBB30alteredBB
  %175 = load i32, i32* %14, align 4, !dbg !5364
  store i32 %175, i32* %10, align 4, !dbg !5365
  %176 = load i32, i32* @x.103
  %177 = load i32, i32* @y.104
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %184, !dbg !5365

184:                                              ; preds = %originalBBpart232, %originalBBpart24
  %185 = load i32, i32* %10, align 4, !dbg !5366
  ret i32 %185, !dbg !5366

originalBBalteredBB:                              ; preds = %originalBB, %1
  %186 = alloca i32, align 4
  %187 = alloca %struct._IO_FILE*, align 8
  %188 = alloca i32, align 4
  %189 = alloca i32, align 4
  %190 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %187, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %187, metadata !5367, metadata !DIExpression()), !dbg !5320
  call void @llvm.dbg.declare(metadata i32* %188, metadata !5406, metadata !DIExpression()), !dbg !5322
  store i32 0, i32* %188, align 4, !dbg !5322
  call void @llvm.dbg.declare(metadata i32* %189, metadata !5407, metadata !DIExpression()), !dbg !5324
  call void @llvm.dbg.declare(metadata i32* %190, metadata !5408, metadata !DIExpression()), !dbg !5326
  store i32 0, i32* %190, align 4, !dbg !5326
  %191 = load %struct._IO_FILE*, %struct._IO_FILE** %187, align 8, !dbg !5327
  %192 = call i32 @fileno(%struct._IO_FILE* %191) #10, !dbg !5328
  store i32 %192, i32* %189, align 4, !dbg !5329
  %193 = load i32, i32* %189, align 4, !dbg !5330
  %194 = icmp slt i32 %193, 0, !dbg !5332
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  %195 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5334
  %196 = call i32 @fclose(%struct._IO_FILE* %195), !dbg !5335
  store i32 %196, i32* %10, align 4, !dbg !5336
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %46
  %197 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5337
  %198 = call i32 @__freading(%struct._IO_FILE* %197) #10, !dbg !5337
  %199 = icmp ne i32 %198, 0, !dbg !5337
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %200 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5340
  %201 = call i32 @fileno(%struct._IO_FILE* %200) #10, !dbg !5341
  %202 = call i64 @lseek(i32 %201, i64 0, i32 1) #10, !dbg !5342
  %203 = icmp ne i64 %202, -1, !dbg !5343
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %87
  %204 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5345
  %205 = call i32 @rpl_fflush(%struct._IO_FILE* %204), !dbg !5346
  %206 = icmp ne i32 %205, 0, !dbg !5346
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %107
  %207 = call i32* @__errno_location() #15, !dbg !5348
  %208 = load i32, i32* %207, align 4, !dbg !5348
  store i32 %208, i32* %12, align 4, !dbg !5349
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %126
  %209 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5351
  %210 = call i32 @fclose(%struct._IO_FILE* %209), !dbg !5352
  store i32 %210, i32* %14, align 4, !dbg !5353
  %211 = load i32, i32* %12, align 4, !dbg !5354
  %212 = icmp ne i32 %211, 0, !dbg !5356
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %147
  %213 = load i32, i32* %12, align 4, !dbg !5358
  %214 = call i32* @__errno_location() #15, !dbg !5360
  store i32 %213, i32* %214, align 4, !dbg !5361
  store i32 -1, i32* %14, align 4, !dbg !5362
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %166
  %215 = load i32, i32* %14, align 4, !dbg !5364
  store i32 %215, i32* %10, align 4, !dbg !5365
  br label %originalBB30
}

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #2

declare dso_local i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @__freading(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fflush(%struct._IO_FILE*) #4 !dbg !5409 {
  %2 = load i32, i32* @x.105
  %3 = load i32, i32* @y.106
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !5447, metadata !DIExpression()), !dbg !5448
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5449
  %13 = icmp eq %struct._IO_FILE* %12, null, !dbg !5451
  %14 = load i32, i32* @x.105
  %15 = load i32, i32* @y.106
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %13, label %42, label %22, !dbg !5452

22:                                               ; preds = %originalBBpart2
  %23 = load i32, i32* @x.105
  %24 = load i32, i32* @y.106
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5453
  %32 = call i32 @__freading(%struct._IO_FILE* %31) #10, !dbg !5453
  %33 = icmp ne i32 %32, 0, !dbg !5453
  %34 = load i32, i32* @x.105
  %35 = load i32, i32* @y.106
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %33, label %61, label %42, !dbg !5454

42:                                               ; preds = %originalBBpart24, %originalBBpart2
  %43 = load i32, i32* @x.105
  %44 = load i32, i32* @y.106
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5455
  %52 = call i32 @fflush(%struct._IO_FILE* %51), !dbg !5456
  store i32 %52, i32* %10, align 4, !dbg !5457
  %53 = load i32, i32* @x.105
  %54 = load i32, i32* @y.106
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %81, !dbg !5457

61:                                               ; preds = %originalBBpart24
  %62 = load i32, i32* @x.105
  %63 = load i32, i32* @y.106
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5458
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %70), !dbg !5459
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5460
  %72 = call i32 @fflush(%struct._IO_FILE* %71), !dbg !5461
  store i32 %72, i32* %10, align 4, !dbg !5462
  %73 = load i32, i32* @x.105
  %74 = load i32, i32* @y.106
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %81, !dbg !5462

81:                                               ; preds = %originalBBpart212, %originalBBpart28
  %82 = load i32, i32* @x.105
  %83 = load i32, i32* @y.106
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %81, %originalBB14alteredBB
  %90 = load i32, i32* %10, align 4, !dbg !5463
  %91 = load i32, i32* @x.105
  %92 = load i32, i32* @y.106
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i32 %90, !dbg !5463

originalBBalteredBB:                              ; preds = %originalBB, %1
  %99 = alloca i32, align 4
  %100 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %100, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %100, metadata !5464, metadata !DIExpression()), !dbg !5448
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** %100, align 8, !dbg !5449
  %102 = icmp eq %struct._IO_FILE* %101, null, !dbg !5451
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5453
  %104 = call i32 @__freading(%struct._IO_FILE* %103) #10, !dbg !5453
  %105 = icmp ne i32 %104, 0, !dbg !5453
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5455
  %107 = call i32 @fflush(%struct._IO_FILE* %106), !dbg !5456
  store i32 %107, i32* %10, align 4, !dbg !5457
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5458
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %108), !dbg !5459
  %109 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5460
  %110 = call i32 @fflush(%struct._IO_FILE* %109), !dbg !5461
  store i32 %110, i32* %10, align 4, !dbg !5462
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %81
  %111 = load i32, i32* %10, align 4, !dbg !5463
  br label %originalBB14
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE*) #4 !dbg !5503 {
  %2 = load i32, i32* @x.107
  %3 = load i32, i32* @y.108
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %10, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %10, metadata !5506, metadata !DIExpression()), !dbg !5507
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !5508
  %12 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %11, i32 0, i32 0, !dbg !5510
  %13 = load i32, i32* %12, align 8, !dbg !5510
  %14 = and i32 %13, 256, !dbg !5511
  %15 = icmp ne i32 %14, 0, !dbg !5511
  %16 = load i32, i32* @x.107
  %17 = load i32, i32* @y.108
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %43, !dbg !5512

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.107
  %26 = load i32, i32* @y.108
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !5513
  %34 = call i32 @rpl_fseeko(%struct._IO_FILE* %33, i64 0, i32 1), !dbg !5514
  %35 = load i32, i32* @x.107
  %36 = load i32, i32* @y.108
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %43, !dbg !5514

43:                                               ; preds = %originalBBpart24, %originalBBpart2
  %44 = load i32, i32* @x.107
  %45 = load i32, i32* @y.108
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  %52 = load i32, i32* @x.107
  %53 = load i32, i32* @y.108
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret void, !dbg !5515

originalBBalteredBB:                              ; preds = %originalBB, %1
  %60 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %60, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %60, metadata !5516, metadata !DIExpression()), !dbg !5507
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** %60, align 8, !dbg !5508
  %62 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %61, i32 0, i32 0, !dbg !5510
  %63 = load i32, i32* %62, align 8, !dbg !5510
  %_ = sub i32 %63, 256
  %gen = mul i32 %_, 256
  %64 = and i32 %63, 256, !dbg !5511
  %65 = icmp ne i32 %64, 0, !dbg !5511
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !5513
  %67 = call i32 @rpl_fseeko(%struct._IO_FILE* %66, i64 0, i32 1), !dbg !5514
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fseeko(%struct._IO_FILE* nonnull, i64, i32) #4 !dbg !5555 {
  %4 = load i32, i32* @x.109
  %5 = load i32, i32* @y.110
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !5594, metadata !DIExpression()), !dbg !5595
  store i64 %1, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !5596, metadata !DIExpression()), !dbg !5597
  store i32 %2, i32* %15, align 4
  call void @llvm.dbg.declare(metadata i32* %15, metadata !5598, metadata !DIExpression()), !dbg !5599
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !5600
  %18 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %17, i32 0, i32 2, !dbg !5602
  %19 = load i8*, i8** %18, align 8, !dbg !5602
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !5603
  %21 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %20, i32 0, i32 1, !dbg !5604
  %22 = load i8*, i8** %21, align 8, !dbg !5604
  %23 = icmp eq i8* %19, %22, !dbg !5605
  %24 = load i32, i32* @x.109
  %25 = load i32, i32* @y.110
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %23, label %32, label %126, !dbg !5606

32:                                               ; preds = %originalBBpart2
  %33 = load i32, i32* @x.109
  %34 = load i32, i32* @y.110
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !5607
  %42 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %41, i32 0, i32 5, !dbg !5608
  %43 = load i8*, i8** %42, align 8, !dbg !5608
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !5609
  %45 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %44, i32 0, i32 4, !dbg !5610
  %46 = load i8*, i8** %45, align 8, !dbg !5610
  %47 = icmp eq i8* %43, %46, !dbg !5611
  %48 = load i32, i32* @x.109
  %49 = load i32, i32* @y.110
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %126, !dbg !5612

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.109
  %58 = load i32, i32* @y.110
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !5613
  %66 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %65, i32 0, i32 9, !dbg !5614
  %67 = load i8*, i8** %66, align 8, !dbg !5614
  %68 = icmp eq i8* %67, null, !dbg !5615
  %69 = load i32, i32* @x.109
  %70 = load i32, i32* @y.110
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %68, label %77, label %126, !dbg !5616

77:                                               ; preds = %originalBBpart28
  call void @llvm.dbg.declare(metadata i64* %16, metadata !5617, metadata !DIExpression()), !dbg !5619
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !5620
  %79 = call i32 @fileno(%struct._IO_FILE* %78) #10, !dbg !5621
  %80 = load i64, i64* %14, align 8, !dbg !5622
  %81 = load i32, i32* %15, align 4, !dbg !5623
  %82 = call i64 @lseek(i32 %79, i64 %80, i32 %81) #10, !dbg !5624
  store i64 %82, i64* %16, align 8, !dbg !5619
  %83 = load i64, i64* %16, align 8, !dbg !5625
  %84 = icmp eq i64 %83, -1, !dbg !5627
  br i1 %84, label %85, label %102, !dbg !5628

85:                                               ; preds = %77
  %86 = load i32, i32* @x.109
  %87 = load i32, i32* @y.110
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %85, %originalBB10alteredBB
  store i32 -1, i32* %12, align 4, !dbg !5629
  %94 = load i32, i32* @x.109
  %95 = load i32, i32* @y.110
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %147, !dbg !5629

102:                                              ; preds = %77
  %103 = load i32, i32* @x.109
  %104 = load i32, i32* @y.110
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %102, %originalBB14alteredBB
  %111 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !5631
  %112 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %111, i32 0, i32 0, !dbg !5632
  %113 = load i32, i32* %112, align 8, !dbg !5633
  %114 = and i32 %113, -17, !dbg !5633
  store i32 %114, i32* %112, align 8, !dbg !5633
  %115 = load i64, i64* %16, align 8, !dbg !5634
  %116 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !5635
  %117 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %116, i32 0, i32 21, !dbg !5636
  store i64 %115, i64* %117, align 8, !dbg !5637
  store i32 0, i32* %12, align 4, !dbg !5638
  %118 = load i32, i32* @x.109
  %119 = load i32, i32* @y.110
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %147, !dbg !5638

126:                                              ; preds = %originalBBpart28, %originalBBpart24, %originalBBpart2
  %127 = load i32, i32* @x.109
  %128 = load i32, i32* @y.110
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %126, %originalBB18alteredBB
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !5639
  %136 = load i64, i64* %14, align 8, !dbg !5640
  %137 = load i32, i32* %15, align 4, !dbg !5641
  %138 = call i32 @fseeko(%struct._IO_FILE* %135, i64 %136, i32 %137), !dbg !5642
  store i32 %138, i32* %12, align 4, !dbg !5643
  %139 = load i32, i32* @x.109
  %140 = load i32, i32* @y.110
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %147, !dbg !5643

147:                                              ; preds = %originalBBpart220, %originalBBpart216, %originalBBpart212
  %148 = load i32, i32* @x.109
  %149 = load i32, i32* @y.110
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %147, %originalBB22alteredBB
  %156 = load i32, i32* %12, align 4, !dbg !5644
  %157 = load i32, i32* @x.109
  %158 = load i32, i32* @y.110
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret i32 %156, !dbg !5644

originalBBalteredBB:                              ; preds = %originalBB, %3
  %165 = alloca i32, align 4
  %166 = alloca %struct._IO_FILE*, align 8
  %167 = alloca i64, align 8
  %168 = alloca i32, align 4
  %169 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %166, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %166, metadata !5645, metadata !DIExpression()), !dbg !5595
  store i64 %1, i64* %167, align 8
  call void @llvm.dbg.declare(metadata i64* %167, metadata !5684, metadata !DIExpression()), !dbg !5597
  store i32 %2, i32* %168, align 4
  call void @llvm.dbg.declare(metadata i32* %168, metadata !5685, metadata !DIExpression()), !dbg !5599
  %170 = load %struct._IO_FILE*, %struct._IO_FILE** %166, align 8, !dbg !5600
  %171 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %170, i32 0, i32 2, !dbg !5602
  %172 = load i8*, i8** %171, align 8, !dbg !5602
  %173 = load %struct._IO_FILE*, %struct._IO_FILE** %166, align 8, !dbg !5603
  %174 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %173, i32 0, i32 1, !dbg !5604
  %175 = load i8*, i8** %174, align 8, !dbg !5604
  %176 = icmp eq i8* %172, %175, !dbg !5605
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  %177 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !5607
  %178 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %177, i32 0, i32 5, !dbg !5608
  %179 = load i8*, i8** %178, align 8, !dbg !5608
  %180 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !5609
  %181 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %180, i32 0, i32 4, !dbg !5610
  %182 = load i8*, i8** %181, align 8, !dbg !5610
  %183 = icmp eq i8* %179, %182, !dbg !5611
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %184 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !5613
  %185 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %184, i32 0, i32 9, !dbg !5614
  %186 = load i8*, i8** %185, align 8, !dbg !5614
  %187 = icmp eq i8* %186, null, !dbg !5615
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %85
  store i32 -1, i32* %12, align 4, !dbg !5629
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %102
  %188 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !5631
  %189 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %188, i32 0, i32 0, !dbg !5632
  %190 = load i32, i32* %189, align 8, !dbg !5633
  %_ = shl i32 %190, -17
  %191 = and i32 %190, -17, !dbg !5633
  store i32 %191, i32* %189, align 8, !dbg !5633
  %192 = load i64, i64* %16, align 8, !dbg !5634
  %193 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !5635
  %194 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %193, i32 0, i32 21, !dbg !5636
  store i64 %192, i64* %194, align 8, !dbg !5637
  store i32 0, i32* %12, align 4, !dbg !5638
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %126
  %195 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !5639
  %196 = load i64, i64* %14, align 8, !dbg !5640
  %197 = load i32, i32* %15, align 4, !dbg !5641
  %198 = call i32 @fseeko(%struct._IO_FILE* %195, i64 %196, i32 %197), !dbg !5642
  store i32 %198, i32* %12, align 4, !dbg !5643
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %147
  %199 = load i32, i32* %12, align 4, !dbg !5644
  br label %originalBB22
}

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @c_tolower(i32) #4 !dbg !5686 {
  %2 = load i32, i32* @x.111
  %3 = load i32, i32* @y.112
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !5690, metadata !DIExpression()), !dbg !5691
  %12 = load i32, i32* %11, align 4, !dbg !5692
  %13 = load i32, i32* @x.111
  %14 = load i32, i32* @y.112
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %12, label %41 [
    i32 65, label %21
    i32 66, label %21
    i32 67, label %21
    i32 68, label %21
    i32 69, label %21
    i32 70, label %21
    i32 71, label %21
    i32 72, label %21
    i32 73, label %21
    i32 74, label %21
    i32 75, label %21
    i32 76, label %21
    i32 77, label %21
    i32 78, label %21
    i32 79, label %21
    i32 80, label %21
    i32 81, label %21
    i32 82, label %21
    i32 83, label %21
    i32 84, label %21
    i32 85, label %21
    i32 86, label %21
    i32 87, label %21
    i32 88, label %21
    i32 89, label %21
    i32 90, label %21
  ], !dbg !5693

21:                                               ; preds = %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2
  %22 = load i32, i32* @x.111
  %23 = load i32, i32* @y.112
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i32, i32* %11, align 4, !dbg !5694
  %31 = sub nsw i32 %30, 65, !dbg !5696
  %32 = add nsw i32 %31, 97, !dbg !5697
  store i32 %32, i32* %10, align 4, !dbg !5698
  %33 = load i32, i32* @x.111
  %34 = load i32, i32* @y.112
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart210, label %originalBB1alteredBB

originalBBpart210:                                ; preds = %originalBB1
  br label %59, !dbg !5698

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* @x.111
  %43 = load i32, i32* @y.112
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %41, %originalBB12alteredBB
  %50 = load i32, i32* %11, align 4, !dbg !5699
  store i32 %50, i32* %10, align 4, !dbg !5700
  %51 = load i32, i32* @x.111
  %52 = load i32, i32* @y.112
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart214, label %originalBB12alteredBB

originalBBpart214:                                ; preds = %originalBB12
  br label %59, !dbg !5700

59:                                               ; preds = %originalBBpart214, %originalBBpart210
  %60 = load i32, i32* @x.111
  %61 = load i32, i32* @y.112
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB16, label %originalBB16alteredBB

originalBB16:                                     ; preds = %59, %originalBB16alteredBB
  %68 = load i32, i32* %10, align 4, !dbg !5701
  %69 = load i32, i32* @x.111
  %70 = load i32, i32* @y.112
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart218, label %originalBB16alteredBB

originalBBpart218:                                ; preds = %originalBB16
  ret i32 %68, !dbg !5701

originalBBalteredBB:                              ; preds = %originalBB, %1
  %77 = alloca i32, align 4
  %78 = alloca i32, align 4
  store i32 %0, i32* %78, align 4
  call void @llvm.dbg.declare(metadata i32* %78, metadata !5702, metadata !DIExpression()), !dbg !5691
  %79 = load i32, i32* %78, align 4, !dbg !5692
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %80 = load i32, i32* %11, align 4, !dbg !5694
  %_ = sub i32 0, %80
  %gen = add i32 %_, 65
  %_2 = sub i32 0, %80
  %gen3 = add i32 %_2, 65
  %81 = sub nsw i32 %80, 65, !dbg !5696
  %_4 = sub i32 %81, 97
  %gen5 = mul i32 %_4, 97
  %_6 = shl i32 %81, 97
  %_7 = shl i32 %81, 97
  %_8 = shl i32 %81, 97
  %82 = add nsw i32 %81, 97, !dbg !5697
  store i32 %82, i32* %10, align 4, !dbg !5698
  br label %originalBB1

originalBB12alteredBB:                            ; preds = %originalBB12, %41
  %83 = load i32, i32* %11, align 4, !dbg !5699
  store i32 %83, i32* %10, align 4, !dbg !5700
  br label %originalBB12

originalBB16alteredBB:                            ; preds = %originalBB16, %59
  %84 = load i32, i32* %10, align 4, !dbg !5701
  br label %originalBB16
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @getugroups(i32, i32*, i8*, i32) #4 !dbg !5705 {
  %5 = load i32, i32* @x.113
  %6 = load i32, i32* @y.114
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i32, align 4
  %14 = alloca i32*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i8**, align 8
  %19 = alloca %struct.group*, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !5709, metadata !DIExpression()), !dbg !5710
  store i32* %1, i32** %14, align 8
  call void @llvm.dbg.declare(metadata i32** %14, metadata !5711, metadata !DIExpression()), !dbg !5712
  store i8* %2, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !5713, metadata !DIExpression()), !dbg !5714
  store i32 %3, i32* %16, align 4
  call void @llvm.dbg.declare(metadata i32* %16, metadata !5715, metadata !DIExpression()), !dbg !5716
  call void @llvm.dbg.declare(metadata i32* %17, metadata !5717, metadata !DIExpression()), !dbg !5718
  store i32 0, i32* %17, align 4, !dbg !5718
  %22 = load i32, i32* %16, align 4, !dbg !5719
  %23 = icmp ne i32 %22, -1, !dbg !5721
  %24 = load i32, i32* @x.113
  %25 = load i32, i32* @y.114
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %23, label %32, label %92, !dbg !5722

32:                                               ; preds = %originalBBpart2
  %33 = load i32, i32* @x.113
  %34 = load i32, i32* @y.114
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load i32, i32* %13, align 4, !dbg !5723
  %42 = icmp ne i32 %41, 0, !dbg !5726
  %43 = load i32, i32* @x.113
  %44 = load i32, i32* @y.114
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %42, label %51, label %73, !dbg !5727

51:                                               ; preds = %originalBBpart24
  %52 = load i32, i32* @x.113
  %53 = load i32, i32* @y.114
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %51, %originalBB6alteredBB
  %60 = load i32, i32* %16, align 4, !dbg !5728
  %61 = load i32*, i32** %14, align 8, !dbg !5729
  %62 = load i32, i32* %17, align 4, !dbg !5730
  %63 = sext i32 %62 to i64, !dbg !5729
  %64 = getelementptr inbounds i32, i32* %61, i64 %63, !dbg !5729
  store i32 %60, i32* %64, align 4, !dbg !5731
  %65 = load i32, i32* @x.113
  %66 = load i32, i32* @y.114
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %73, !dbg !5729

73:                                               ; preds = %originalBBpart28, %originalBBpart24
  %74 = load i32, i32* @x.113
  %75 = load i32, i32* @y.114
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %73, %originalBB10alteredBB
  %82 = load i32, i32* %17, align 4, !dbg !5732
  %83 = add nsw i32 %82, 1, !dbg !5732
  store i32 %83, i32* %17, align 4, !dbg !5732
  %84 = load i32, i32* @x.113
  %85 = load i32, i32* @y.114
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart221, label %originalBB10alteredBB

originalBBpart221:                                ; preds = %originalBB10
  br label %92, !dbg !5733

92:                                               ; preds = %originalBBpart221, %originalBBpart2
  %93 = load i32, i32* @x.113
  %94 = load i32, i32* @y.114
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %92, %originalBB23alteredBB
  call void @setgrent(), !dbg !5734
  %101 = load i32, i32* @x.113
  %102 = load i32, i32* @y.114
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br label %109, !dbg !5735

109:                                              ; preds = %originalBBpart2115, %originalBBpart225
  call void @llvm.dbg.declare(metadata i8*** %18, metadata !5736, metadata !DIExpression()), !dbg !5738
  call void @llvm.dbg.declare(metadata %struct.group** %19, metadata !5739, metadata !DIExpression()), !dbg !5747
  %110 = load i32, i32* @x.113
  %111 = load i32, i32* @y.114
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %109, %originalBB27alteredBB
  %118 = call i32* @__errno_location() #15, !dbg !5748
  store i32 0, i32* %118, align 4, !dbg !5749
  %119 = call %struct.group* @getgrent(), !dbg !5750
  store %struct.group* %119, %struct.group** %19, align 8, !dbg !5751
  %120 = load %struct.group*, %struct.group** %19, align 8, !dbg !5752
  %121 = icmp eq %struct.group* %120, null, !dbg !5754
  %122 = load i32, i32* @x.113
  %123 = load i32, i32* @y.114
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br i1 %121, label %130, label %147, !dbg !5755

130:                                              ; preds = %originalBBpart229
  %131 = load i32, i32* @x.113
  %132 = load i32, i32* @y.114
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %130, %originalBB31alteredBB
  %139 = load i32, i32* @x.113
  %140 = load i32, i32* @y.114
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  br label %506, !dbg !5756

147:                                              ; preds = %originalBBpart229
  %148 = load %struct.group*, %struct.group** %19, align 8, !dbg !5757
  %149 = getelementptr inbounds %struct.group, %struct.group* %148, i32 0, i32 3, !dbg !5759
  %150 = load i8**, i8*** %149, align 8, !dbg !5759
  store i8** %150, i8*** %18, align 8, !dbg !5760
  br label %151, !dbg !5761

151:                                              ; preds = %originalBBpart2111, %147
  %152 = load i32, i32* @x.113
  %153 = load i32, i32* @y.114
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %151, %originalBB35alteredBB
  %160 = load i8**, i8*** %18, align 8, !dbg !5762
  %161 = load i8*, i8** %160, align 8, !dbg !5764
  %162 = icmp ne i8* %161, null, !dbg !5765
  %163 = load i32, i32* @x.113
  %164 = load i32, i32* @y.114
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBBpart237, label %originalBB35alteredBB

originalBBpart237:                                ; preds = %originalBB35
  br i1 %162, label %171, label %489, !dbg !5765

171:                                              ; preds = %originalBBpart237
  call void @llvm.dbg.declare(metadata i32* %20, metadata !5766, metadata !DIExpression()), !dbg !5768
  %172 = load i32, i32* @x.113
  %173 = load i32, i32* @y.114
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %171, %originalBB39alteredBB
  %180 = load i8*, i8** %15, align 8, !dbg !5769
  %181 = load i8**, i8*** %18, align 8, !dbg !5769
  %182 = load i8*, i8** %181, align 8, !dbg !5769
  %183 = call i32 @strcmp(i8* %180, i8* %182) #13, !dbg !5769
  %184 = icmp eq i32 %183, 0, !dbg !5769
  %185 = load i32, i32* @x.113
  %186 = load i32, i32* @y.114
  %187 = sub i32 %185, 1
  %188 = mul i32 %185, %187
  %189 = urem i32 %188, 2
  %190 = icmp eq i32 %189, 0
  %191 = icmp slt i32 %186, 10
  %192 = or i1 %190, %191
  br i1 %192, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  br i1 %184, label %210, label %193, !dbg !5771

193:                                              ; preds = %originalBBpart241
  %194 = load i32, i32* @x.113
  %195 = load i32, i32* @y.114
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %193, %originalBB43alteredBB
  %202 = load i32, i32* @x.113
  %203 = load i32, i32* @y.114
  %204 = sub i32 %202, 1
  %205 = mul i32 %202, %204
  %206 = urem i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = icmp slt i32 %203, 10
  %209 = or i1 %207, %208
  br i1 %209, label %originalBBpart245, label %originalBB43alteredBB

originalBBpart245:                                ; preds = %originalBB43
  br label %470, !dbg !5772

210:                                              ; preds = %originalBBpart241
  %211 = load i32, i32* @x.113
  %212 = load i32, i32* @y.114
  %213 = sub i32 %211, 1
  %214 = mul i32 %211, %213
  %215 = urem i32 %214, 2
  %216 = icmp eq i32 %215, 0
  %217 = icmp slt i32 %212, 10
  %218 = or i1 %216, %217
  br i1 %218, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %210, %originalBB47alteredBB
  store i32 0, i32* %20, align 4, !dbg !5773
  %219 = load i32, i32* @x.113
  %220 = load i32, i32* @y.114
  %221 = sub i32 %219, 1
  %222 = mul i32 %219, %221
  %223 = urem i32 %222, 2
  %224 = icmp eq i32 %223, 0
  %225 = icmp slt i32 %220, 10
  %226 = or i1 %224, %225
  br i1 %226, label %originalBBpart249, label %originalBB47alteredBB

originalBBpart249:                                ; preds = %originalBB47
  br label %227, !dbg !5775

227:                                              ; preds = %originalBBpart277, %originalBBpart249
  %228 = load i32, i32* @x.113
  %229 = load i32, i32* @y.114
  %230 = sub i32 %228, 1
  %231 = mul i32 %228, %230
  %232 = urem i32 %231, 2
  %233 = icmp eq i32 %232, 0
  %234 = icmp slt i32 %229, 10
  %235 = or i1 %233, %234
  br i1 %235, label %originalBB51, label %originalBB51alteredBB

originalBB51:                                     ; preds = %227, %originalBB51alteredBB
  %236 = load i32, i32* %20, align 4, !dbg !5776
  %237 = load i32, i32* %17, align 4, !dbg !5778
  %238 = icmp slt i32 %236, %237, !dbg !5779
  %239 = load i32, i32* @x.113
  %240 = load i32, i32* @y.114
  %241 = sub i32 %239, 1
  %242 = mul i32 %239, %241
  %243 = urem i32 %242, 2
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %244, %245
  br i1 %246, label %originalBBpart253, label %originalBB51alteredBB

originalBBpart253:                                ; preds = %originalBB51
  br i1 %238, label %247, label %345, !dbg !5780

247:                                              ; preds = %originalBBpart253
  %248 = load i32, i32* @x.113
  %249 = load i32, i32* @y.114
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBB55, label %originalBB55alteredBB

originalBB55:                                     ; preds = %247, %originalBB55alteredBB
  %256 = load i32*, i32** %14, align 8, !dbg !5781
  %257 = icmp ne i32* %256, null, !dbg !5781
  %258 = load i32, i32* @x.113
  %259 = load i32, i32* @y.114
  %260 = sub i32 %258, 1
  %261 = mul i32 %258, %260
  %262 = urem i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %263, %264
  br i1 %265, label %originalBBpart257, label %originalBB55alteredBB

originalBBpart257:                                ; preds = %originalBB55
  br i1 %257, label %266, label %309, !dbg !5783

266:                                              ; preds = %originalBBpart257
  %267 = load i32, i32* @x.113
  %268 = load i32, i32* @y.114
  %269 = sub i32 %267, 1
  %270 = mul i32 %267, %269
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %272, %273
  br i1 %274, label %originalBB59, label %originalBB59alteredBB

originalBB59:                                     ; preds = %266, %originalBB59alteredBB
  %275 = load i32*, i32** %14, align 8, !dbg !5784
  %276 = load i32, i32* %20, align 4, !dbg !5785
  %277 = sext i32 %276 to i64, !dbg !5784
  %278 = getelementptr inbounds i32, i32* %275, i64 %277, !dbg !5784
  %279 = load i32, i32* %278, align 4, !dbg !5784
  %280 = load %struct.group*, %struct.group** %19, align 8, !dbg !5786
  %281 = getelementptr inbounds %struct.group, %struct.group* %280, i32 0, i32 2, !dbg !5787
  %282 = load i32, i32* %281, align 8, !dbg !5787
  %283 = icmp eq i32 %279, %282, !dbg !5788
  %284 = load i32, i32* @x.113
  %285 = load i32, i32* @y.114
  %286 = sub i32 %284, 1
  %287 = mul i32 %284, %286
  %288 = urem i32 %287, 2
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %289, %290
  br i1 %291, label %originalBBpart261, label %originalBB59alteredBB

originalBBpart261:                                ; preds = %originalBB59
  br i1 %283, label %292, label %309, !dbg !5789

292:                                              ; preds = %originalBBpart261
  %293 = load i32, i32* @x.113
  %294 = load i32, i32* @y.114
  %295 = sub i32 %293, 1
  %296 = mul i32 %293, %295
  %297 = urem i32 %296, 2
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %298, %299
  br i1 %300, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %292, %originalBB63alteredBB
  %301 = load i32, i32* @x.113
  %302 = load i32, i32* @y.114
  %303 = sub i32 %301, 1
  %304 = mul i32 %301, %303
  %305 = urem i32 %304, 2
  %306 = icmp eq i32 %305, 0
  %307 = icmp slt i32 %302, 10
  %308 = or i1 %306, %307
  br i1 %308, label %originalBBpart265, label %originalBB63alteredBB

originalBBpart265:                                ; preds = %originalBB63
  br label %345, !dbg !5790

309:                                              ; preds = %originalBBpart261, %originalBBpart257
  %310 = load i32, i32* @x.113
  %311 = load i32, i32* @y.114
  %312 = sub i32 %310, 1
  %313 = mul i32 %310, %312
  %314 = urem i32 %313, 2
  %315 = icmp eq i32 %314, 0
  %316 = icmp slt i32 %311, 10
  %317 = or i1 %315, %316
  br i1 %317, label %originalBB67, label %originalBB67alteredBB

originalBB67:                                     ; preds = %309, %originalBB67alteredBB
  %318 = load i32, i32* @x.113
  %319 = load i32, i32* @y.114
  %320 = sub i32 %318, 1
  %321 = mul i32 %318, %320
  %322 = urem i32 %321, 2
  %323 = icmp eq i32 %322, 0
  %324 = icmp slt i32 %319, 10
  %325 = or i1 %323, %324
  br i1 %325, label %originalBBpart269, label %originalBB67alteredBB

originalBBpart269:                                ; preds = %originalBB67
  br label %326, !dbg !5787

326:                                              ; preds = %originalBBpart269
  %327 = load i32, i32* @x.113
  %328 = load i32, i32* @y.114
  %329 = sub i32 %327, 1
  %330 = mul i32 %327, %329
  %331 = urem i32 %330, 2
  %332 = icmp eq i32 %331, 0
  %333 = icmp slt i32 %328, 10
  %334 = or i1 %332, %333
  br i1 %334, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %326, %originalBB71alteredBB
  %335 = load i32, i32* %20, align 4, !dbg !5791
  %336 = add nsw i32 %335, 1, !dbg !5791
  store i32 %336, i32* %20, align 4, !dbg !5791
  %337 = load i32, i32* @x.113
  %338 = load i32, i32* @y.114
  %339 = sub i32 %337, 1
  %340 = mul i32 %337, %339
  %341 = urem i32 %340, 2
  %342 = icmp eq i32 %341, 0
  %343 = icmp slt i32 %338, 10
  %344 = or i1 %342, %343
  br i1 %344, label %originalBBpart277, label %originalBB71alteredBB

originalBBpart277:                                ; preds = %originalBB71
  br label %227, !dbg !5792, !llvm.loop !5793

345:                                              ; preds = %originalBBpart265, %originalBBpart253
  %346 = load i32, i32* @x.113
  %347 = load i32, i32* @y.114
  %348 = sub i32 %346, 1
  %349 = mul i32 %346, %348
  %350 = urem i32 %349, 2
  %351 = icmp eq i32 %350, 0
  %352 = icmp slt i32 %347, 10
  %353 = or i1 %351, %352
  br i1 %353, label %originalBB79, label %originalBB79alteredBB

originalBB79:                                     ; preds = %345, %originalBB79alteredBB
  %354 = load i32, i32* %20, align 4, !dbg !5795
  %355 = load i32, i32* %17, align 4, !dbg !5797
  %356 = icmp eq i32 %354, %355, !dbg !5798
  %357 = load i32, i32* @x.113
  %358 = load i32, i32* @y.114
  %359 = sub i32 %357, 1
  %360 = mul i32 %357, %359
  %361 = urem i32 %360, 2
  %362 = icmp eq i32 %361, 0
  %363 = icmp slt i32 %358, 10
  %364 = or i1 %362, %363
  br i1 %364, label %originalBBpart281, label %originalBB79alteredBB

originalBBpart281:                                ; preds = %originalBB79
  br i1 %356, label %365, label %453, !dbg !5799

365:                                              ; preds = %originalBBpart281
  %366 = load i32, i32* %13, align 4, !dbg !5800
  %367 = icmp ne i32 %366, 0, !dbg !5803
  br i1 %367, label %368, label %413, !dbg !5804

368:                                              ; preds = %365
  %369 = load i32, i32* @x.113
  %370 = load i32, i32* @y.114
  %371 = sub i32 %369, 1
  %372 = mul i32 %369, %371
  %373 = urem i32 %372, 2
  %374 = icmp eq i32 %373, 0
  %375 = icmp slt i32 %370, 10
  %376 = or i1 %374, %375
  br i1 %376, label %originalBB83, label %originalBB83alteredBB

originalBB83:                                     ; preds = %368, %originalBB83alteredBB
  %377 = load i32, i32* %17, align 4, !dbg !5805
  %378 = load i32, i32* %13, align 4, !dbg !5808
  %379 = icmp sge i32 %377, %378, !dbg !5809
  %380 = load i32, i32* @x.113
  %381 = load i32, i32* @y.114
  %382 = sub i32 %380, 1
  %383 = mul i32 %380, %382
  %384 = urem i32 %383, 2
  %385 = icmp eq i32 %384, 0
  %386 = icmp slt i32 %381, 10
  %387 = or i1 %385, %386
  br i1 %387, label %originalBBpart285, label %originalBB83alteredBB

originalBBpart285:                                ; preds = %originalBB83
  br i1 %379, label %388, label %405, !dbg !5810

388:                                              ; preds = %originalBBpart285
  %389 = load i32, i32* @x.113
  %390 = load i32, i32* @y.114
  %391 = sub i32 %389, 1
  %392 = mul i32 %389, %391
  %393 = urem i32 %392, 2
  %394 = icmp eq i32 %393, 0
  %395 = icmp slt i32 %390, 10
  %396 = or i1 %394, %395
  br i1 %396, label %originalBB87, label %originalBB87alteredBB

originalBB87:                                     ; preds = %388, %originalBB87alteredBB
  %397 = load i32, i32* @x.113
  %398 = load i32, i32* @y.114
  %399 = sub i32 %397, 1
  %400 = mul i32 %397, %399
  %401 = urem i32 %400, 2
  %402 = icmp eq i32 %401, 0
  %403 = icmp slt i32 %398, 10
  %404 = or i1 %402, %403
  br i1 %404, label %originalBBpart289, label %originalBB87alteredBB

originalBBpart289:                                ; preds = %originalBB87
  br label %560, !dbg !5811

405:                                              ; preds = %originalBBpart285
  %406 = load %struct.group*, %struct.group** %19, align 8, !dbg !5812
  %407 = getelementptr inbounds %struct.group, %struct.group* %406, i32 0, i32 2, !dbg !5813
  %408 = load i32, i32* %407, align 8, !dbg !5813
  %409 = load i32*, i32** %14, align 8, !dbg !5814
  %410 = load i32, i32* %17, align 4, !dbg !5815
  %411 = sext i32 %410 to i64, !dbg !5814
  %412 = getelementptr inbounds i32, i32* %409, i64 %411, !dbg !5814
  store i32 %408, i32* %412, align 4, !dbg !5816
  br label %413, !dbg !5817

413:                                              ; preds = %405, %365
  %414 = load i32, i32* @x.113
  %415 = load i32, i32* @y.114
  %416 = sub i32 %414, 1
  %417 = mul i32 %414, %416
  %418 = urem i32 %417, 2
  %419 = icmp eq i32 %418, 0
  %420 = icmp slt i32 %415, 10
  %421 = or i1 %419, %420
  br i1 %421, label %originalBB91, label %originalBB91alteredBB

originalBB91:                                     ; preds = %413, %originalBB91alteredBB
  %422 = load i32, i32* %17, align 4, !dbg !5818
  %423 = icmp eq i32 %422, 2147483647, !dbg !5820
  %424 = load i32, i32* @x.113
  %425 = load i32, i32* @y.114
  %426 = sub i32 %424, 1
  %427 = mul i32 %424, %426
  %428 = urem i32 %427, 2
  %429 = icmp eq i32 %428, 0
  %430 = icmp slt i32 %425, 10
  %431 = or i1 %429, %430
  br i1 %431, label %originalBBpart293, label %originalBB91alteredBB

originalBBpart293:                                ; preds = %originalBB91
  br i1 %423, label %432, label %434, !dbg !5821

432:                                              ; preds = %originalBBpart293
  %433 = call i32* @__errno_location() #15, !dbg !5822
  store i32 75, i32* %433, align 4, !dbg !5824
  br label %560, !dbg !5825

434:                                              ; preds = %originalBBpart293
  %435 = load i32, i32* @x.113
  %436 = load i32, i32* @y.114
  %437 = sub i32 %435, 1
  %438 = mul i32 %435, %437
  %439 = urem i32 %438, 2
  %440 = icmp eq i32 %439, 0
  %441 = icmp slt i32 %436, 10
  %442 = or i1 %440, %441
  br i1 %442, label %originalBB95, label %originalBB95alteredBB

originalBB95:                                     ; preds = %434, %originalBB95alteredBB
  %443 = load i32, i32* %17, align 4, !dbg !5826
  %444 = add nsw i32 %443, 1, !dbg !5826
  store i32 %444, i32* %17, align 4, !dbg !5826
  %445 = load i32, i32* @x.113
  %446 = load i32, i32* @y.114
  %447 = sub i32 %445, 1
  %448 = mul i32 %445, %447
  %449 = urem i32 %448, 2
  %450 = icmp eq i32 %449, 0
  %451 = icmp slt i32 %446, 10
  %452 = or i1 %450, %451
  br i1 %452, label %originalBBpart2103, label %originalBB95alteredBB

originalBBpart2103:                               ; preds = %originalBB95
  br label %453, !dbg !5827

453:                                              ; preds = %originalBBpart2103, %originalBBpart281
  %454 = load i32, i32* @x.113
  %455 = load i32, i32* @y.114
  %456 = sub i32 %454, 1
  %457 = mul i32 %454, %456
  %458 = urem i32 %457, 2
  %459 = icmp eq i32 %458, 0
  %460 = icmp slt i32 %455, 10
  %461 = or i1 %459, %460
  br i1 %461, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %453, %originalBB105alteredBB
  %462 = load i32, i32* @x.113
  %463 = load i32, i32* @y.114
  %464 = sub i32 %462, 1
  %465 = mul i32 %462, %464
  %466 = urem i32 %465, 2
  %467 = icmp eq i32 %466, 0
  %468 = icmp slt i32 %463, 10
  %469 = or i1 %467, %468
  br i1 %469, label %originalBBpart2107, label %originalBB105alteredBB

originalBBpart2107:                               ; preds = %originalBB105
  br label %470, !dbg !5828

470:                                              ; preds = %originalBBpart2107, %originalBBpart245
  %471 = load i32, i32* @x.113
  %472 = load i32, i32* @y.114
  %473 = sub i32 %471, 1
  %474 = mul i32 %471, %473
  %475 = urem i32 %474, 2
  %476 = icmp eq i32 %475, 0
  %477 = icmp slt i32 %472, 10
  %478 = or i1 %476, %477
  br i1 %478, label %originalBB109, label %originalBB109alteredBB

originalBB109:                                    ; preds = %470, %originalBB109alteredBB
  %479 = load i8**, i8*** %18, align 8, !dbg !5829
  %480 = getelementptr inbounds i8*, i8** %479, i32 1, !dbg !5829
  store i8** %480, i8*** %18, align 8, !dbg !5829
  %481 = load i32, i32* @x.113
  %482 = load i32, i32* @y.114
  %483 = sub i32 %481, 1
  %484 = mul i32 %481, %483
  %485 = urem i32 %484, 2
  %486 = icmp eq i32 %485, 0
  %487 = icmp slt i32 %482, 10
  %488 = or i1 %486, %487
  br i1 %488, label %originalBBpart2111, label %originalBB109alteredBB

originalBBpart2111:                               ; preds = %originalBB109
  br label %151, !dbg !5830, !llvm.loop !5831

489:                                              ; preds = %originalBBpart237
  %490 = load i32, i32* @x.113
  %491 = load i32, i32* @y.114
  %492 = sub i32 %490, 1
  %493 = mul i32 %490, %492
  %494 = urem i32 %493, 2
  %495 = icmp eq i32 %494, 0
  %496 = icmp slt i32 %491, 10
  %497 = or i1 %495, %496
  br i1 %497, label %originalBB113, label %originalBB113alteredBB

originalBB113:                                    ; preds = %489, %originalBB113alteredBB
  %498 = load i32, i32* @x.113
  %499 = load i32, i32* @y.114
  %500 = sub i32 %498, 1
  %501 = mul i32 %498, %500
  %502 = urem i32 %501, 2
  %503 = icmp eq i32 %502, 0
  %504 = icmp slt i32 %499, 10
  %505 = or i1 %503, %504
  br i1 %505, label %originalBBpart2115, label %originalBB113alteredBB

originalBBpart2115:                               ; preds = %originalBB113
  br label %109, !dbg !5735, !llvm.loop !5833

506:                                              ; preds = %originalBBpart233
  %507 = load i32, i32* @x.113
  %508 = load i32, i32* @y.114
  %509 = sub i32 %507, 1
  %510 = mul i32 %507, %509
  %511 = urem i32 %510, 2
  %512 = icmp eq i32 %511, 0
  %513 = icmp slt i32 %508, 10
  %514 = or i1 %512, %513
  br i1 %514, label %originalBB117, label %originalBB117alteredBB

originalBB117:                                    ; preds = %506, %originalBB117alteredBB
  %515 = call i32* @__errno_location() #15, !dbg !5835
  %516 = load i32, i32* %515, align 4, !dbg !5835
  %517 = icmp ne i32 %516, 0, !dbg !5837
  %518 = load i32, i32* @x.113
  %519 = load i32, i32* @y.114
  %520 = sub i32 %518, 1
  %521 = mul i32 %518, %520
  %522 = urem i32 %521, 2
  %523 = icmp eq i32 %522, 0
  %524 = icmp slt i32 %519, 10
  %525 = or i1 %523, %524
  br i1 %525, label %originalBBpart2119, label %originalBB117alteredBB

originalBBpart2119:                               ; preds = %originalBB117
  br i1 %517, label %526, label %543, !dbg !5838

526:                                              ; preds = %originalBBpart2119
  %527 = load i32, i32* @x.113
  %528 = load i32, i32* @y.114
  %529 = sub i32 %527, 1
  %530 = mul i32 %527, %529
  %531 = urem i32 %530, 2
  %532 = icmp eq i32 %531, 0
  %533 = icmp slt i32 %528, 10
  %534 = or i1 %532, %533
  br i1 %534, label %originalBB121, label %originalBB121alteredBB

originalBB121:                                    ; preds = %526, %originalBB121alteredBB
  store i32 -1, i32* %17, align 4, !dbg !5839
  %535 = load i32, i32* @x.113
  %536 = load i32, i32* @y.114
  %537 = sub i32 %535, 1
  %538 = mul i32 %535, %537
  %539 = urem i32 %538, 2
  %540 = icmp eq i32 %539, 0
  %541 = icmp slt i32 %536, 10
  %542 = or i1 %540, %541
  br i1 %542, label %originalBBpart2123, label %originalBB121alteredBB

originalBBpart2123:                               ; preds = %originalBB121
  br label %543, !dbg !5840

543:                                              ; preds = %originalBBpart2123, %originalBBpart2119
  %544 = load i32, i32* @x.113
  %545 = load i32, i32* @y.114
  %546 = sub i32 %544, 1
  %547 = mul i32 %544, %546
  %548 = urem i32 %547, 2
  %549 = icmp eq i32 %548, 0
  %550 = icmp slt i32 %545, 10
  %551 = or i1 %549, %550
  br i1 %551, label %originalBB125, label %originalBB125alteredBB

originalBB125:                                    ; preds = %543, %originalBB125alteredBB
  %552 = load i32, i32* @x.113
  %553 = load i32, i32* @y.114
  %554 = sub i32 %552, 1
  %555 = mul i32 %552, %554
  %556 = urem i32 %555, 2
  %557 = icmp eq i32 %556, 0
  %558 = icmp slt i32 %553, 10
  %559 = or i1 %557, %558
  br i1 %559, label %originalBBpart2127, label %originalBB125alteredBB

originalBBpart2127:                               ; preds = %originalBB125
  br label %560, !dbg !5841

560:                                              ; preds = %originalBBpart2127, %432, %originalBBpart289
  call void @llvm.dbg.label(metadata !5842), !dbg !5843
  call void @llvm.dbg.declare(metadata i32* %21, metadata !5844, metadata !DIExpression()), !dbg !5846
  %561 = load i32, i32* @x.113
  %562 = load i32, i32* @y.114
  %563 = sub i32 %561, 1
  %564 = mul i32 %561, %563
  %565 = urem i32 %564, 2
  %566 = icmp eq i32 %565, 0
  %567 = icmp slt i32 %562, 10
  %568 = or i1 %566, %567
  br i1 %568, label %originalBB129, label %originalBB129alteredBB

originalBB129:                                    ; preds = %560, %originalBB129alteredBB
  %569 = call i32* @__errno_location() #15, !dbg !5847
  %570 = load i32, i32* %569, align 4, !dbg !5847
  store i32 %570, i32* %21, align 4, !dbg !5846
  call void @endgrent(), !dbg !5848
  %571 = load i32, i32* %21, align 4, !dbg !5849
  %572 = call i32* @__errno_location() #15, !dbg !5850
  store i32 %571, i32* %572, align 4, !dbg !5851
  %573 = load i32, i32* %17, align 4, !dbg !5852
  %574 = load i32, i32* @x.113
  %575 = load i32, i32* @y.114
  %576 = sub i32 %574, 1
  %577 = mul i32 %574, %576
  %578 = urem i32 %577, 2
  %579 = icmp eq i32 %578, 0
  %580 = icmp slt i32 %575, 10
  %581 = or i1 %579, %580
  br i1 %581, label %originalBBpart2131, label %originalBB129alteredBB

originalBBpart2131:                               ; preds = %originalBB129
  ret i32 %573, !dbg !5853

originalBBalteredBB:                              ; preds = %originalBB, %4
  %582 = alloca i32, align 4
  %583 = alloca i32*, align 8
  %584 = alloca i8*, align 8
  %585 = alloca i32, align 4
  %586 = alloca i32, align 4
  %587 = alloca i8**, align 8
  %588 = alloca %struct.group*, align 8
  %589 = alloca i32, align 4
  %590 = alloca i32, align 4
  store i32 %0, i32* %582, align 4
  call void @llvm.dbg.declare(metadata i32* %582, metadata !5854, metadata !DIExpression()), !dbg !5710
  store i32* %1, i32** %583, align 8
  call void @llvm.dbg.declare(metadata i32** %583, metadata !5857, metadata !DIExpression()), !dbg !5712
  store i8* %2, i8** %584, align 8
  call void @llvm.dbg.declare(metadata i8** %584, metadata !5858, metadata !DIExpression()), !dbg !5714
  store i32 %3, i32* %585, align 4
  call void @llvm.dbg.declare(metadata i32* %585, metadata !5859, metadata !DIExpression()), !dbg !5716
  call void @llvm.dbg.declare(metadata i32* %586, metadata !5860, metadata !DIExpression()), !dbg !5718
  store i32 0, i32* %586, align 4, !dbg !5718
  %591 = load i32, i32* %585, align 4, !dbg !5719
  %592 = icmp ne i32 %591, -1, !dbg !5721
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  %593 = load i32, i32* %13, align 4, !dbg !5723
  %594 = icmp ne i32 %593, 0, !dbg !5726
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %51
  %595 = load i32, i32* %16, align 4, !dbg !5728
  %596 = load i32*, i32** %14, align 8, !dbg !5729
  %597 = load i32, i32* %17, align 4, !dbg !5730
  %598 = sext i32 %597 to i64, !dbg !5729
  %599 = getelementptr inbounds i32, i32* %596, i64 %598, !dbg !5729
  store i32 %595, i32* %599, align 4, !dbg !5731
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %73
  %600 = load i32, i32* %17, align 4, !dbg !5732
  %_ = sub i32 %600, 1
  %gen = mul i32 %_, 1
  %_11 = shl i32 %600, 1
  %_12 = shl i32 %600, 1
  %_13 = sub i32 0, %600
  %gen14 = add i32 %_13, 1
  %_15 = sub i32 0, %600
  %gen16 = add i32 %_15, 1
  %_17 = shl i32 %600, 1
  %_18 = sub i32 0, %600
  %gen19 = add i32 %_18, 1
  %601 = add nsw i32 %600, 1, !dbg !5732
  store i32 %601, i32* %17, align 4, !dbg !5732
  br label %originalBB10

originalBB23alteredBB:                            ; preds = %originalBB23, %92
  call void @setgrent(), !dbg !5734
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %109
  %602 = call i32* @__errno_location() #15, !dbg !5748
  store i32 0, i32* %602, align 4, !dbg !5749
  %603 = call %struct.group* @getgrent(), !dbg !5750
  store %struct.group* %603, %struct.group** %19, align 8, !dbg !5751
  %604 = load %struct.group*, %struct.group** %19, align 8, !dbg !5752
  %605 = icmp eq %struct.group* %604, null, !dbg !5754
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %130
  br label %originalBB31

originalBB35alteredBB:                            ; preds = %originalBB35, %151
  %606 = load i8**, i8*** %18, align 8, !dbg !5762
  %607 = load i8*, i8** %606, align 8, !dbg !5764
  %608 = icmp ne i8* %607, null, !dbg !5765
  br label %originalBB35

originalBB39alteredBB:                            ; preds = %originalBB39, %171
  %609 = load i8*, i8** %15, align 8, !dbg !5769
  %610 = load i8**, i8*** %18, align 8, !dbg !5769
  %611 = load i8*, i8** %610, align 8, !dbg !5769
  %612 = call i32 @strcmp(i8* %609, i8* %611) #13, !dbg !5769
  %613 = icmp eq i32 %612, 0, !dbg !5769
  br label %originalBB39

originalBB43alteredBB:                            ; preds = %originalBB43, %193
  br label %originalBB43

originalBB47alteredBB:                            ; preds = %originalBB47, %210
  store i32 0, i32* %20, align 4, !dbg !5773
  br label %originalBB47

originalBB51alteredBB:                            ; preds = %originalBB51, %227
  %614 = load i32, i32* %20, align 4, !dbg !5776
  %615 = load i32, i32* %17, align 4, !dbg !5778
  %616 = icmp slt i32 %614, %615, !dbg !5779
  br label %originalBB51

originalBB55alteredBB:                            ; preds = %originalBB55, %247
  %617 = load i32*, i32** %14, align 8, !dbg !5781
  %618 = icmp ne i32* %617, null, !dbg !5781
  br label %originalBB55

originalBB59alteredBB:                            ; preds = %originalBB59, %266
  %619 = load i32*, i32** %14, align 8, !dbg !5784
  %620 = load i32, i32* %20, align 4, !dbg !5785
  %621 = sext i32 %620 to i64, !dbg !5784
  %622 = getelementptr inbounds i32, i32* %619, i64 %621, !dbg !5784
  %623 = load i32, i32* %622, align 4, !dbg !5784
  %624 = load %struct.group*, %struct.group** %19, align 8, !dbg !5786
  %625 = getelementptr inbounds %struct.group, %struct.group* %624, i32 0, i32 2, !dbg !5787
  %626 = load i32, i32* %625, align 8, !dbg !5787
  %627 = icmp eq i32 %623, %626, !dbg !5788
  br label %originalBB59

originalBB63alteredBB:                            ; preds = %originalBB63, %292
  br label %originalBB63

originalBB67alteredBB:                            ; preds = %originalBB67, %309
  br label %originalBB67

originalBB71alteredBB:                            ; preds = %originalBB71, %326
  %628 = load i32, i32* %20, align 4, !dbg !5791
  %_72 = sub i32 0, %628
  %gen73 = add i32 %_72, 1
  %_74 = sub i32 0, %628
  %gen75 = add i32 %_74, 1
  %629 = add nsw i32 %628, 1, !dbg !5791
  store i32 %629, i32* %20, align 4, !dbg !5791
  br label %originalBB71

originalBB79alteredBB:                            ; preds = %originalBB79, %345
  %630 = load i32, i32* %20, align 4, !dbg !5795
  %631 = load i32, i32* %17, align 4, !dbg !5797
  %632 = icmp eq i32 %630, %631, !dbg !5798
  br label %originalBB79

originalBB83alteredBB:                            ; preds = %originalBB83, %368
  %633 = load i32, i32* %17, align 4, !dbg !5805
  %634 = load i32, i32* %13, align 4, !dbg !5808
  %635 = icmp sge i32 %633, %634, !dbg !5809
  br label %originalBB83

originalBB87alteredBB:                            ; preds = %originalBB87, %388
  br label %originalBB87

originalBB91alteredBB:                            ; preds = %originalBB91, %413
  %636 = load i32, i32* %17, align 4, !dbg !5818
  %637 = icmp eq i32 %636, 2147483647, !dbg !5820
  br label %originalBB91

originalBB95alteredBB:                            ; preds = %originalBB95, %434
  %638 = load i32, i32* %17, align 4, !dbg !5826
  %_96 = sub i32 0, %638
  %gen97 = add i32 %_96, 1
  %_98 = shl i32 %638, 1
  %_99 = sub i32 0, %638
  %gen100 = add i32 %_99, 1
  %_101 = shl i32 %638, 1
  %639 = add nsw i32 %638, 1, !dbg !5826
  store i32 %639, i32* %17, align 4, !dbg !5826
  br label %originalBB95

originalBB105alteredBB:                           ; preds = %originalBB105, %453
  br label %originalBB105

originalBB109alteredBB:                           ; preds = %originalBB109, %470
  %640 = load i8**, i8*** %18, align 8, !dbg !5829
  %641 = getelementptr inbounds i8*, i8** %640, i32 1, !dbg !5829
  store i8** %641, i8*** %18, align 8, !dbg !5829
  br label %originalBB109

originalBB113alteredBB:                           ; preds = %originalBB113, %489
  br label %originalBB113

originalBB117alteredBB:                           ; preds = %originalBB117, %506
  %642 = call i32* @__errno_location() #15, !dbg !5835
  %643 = load i32, i32* %642, align 4, !dbg !5835
  %644 = icmp ne i32 %643, 0, !dbg !5837
  br label %originalBB117

originalBB121alteredBB:                           ; preds = %originalBB121, %526
  store i32 -1, i32* %17, align 4, !dbg !5839
  br label %originalBB121

originalBB125alteredBB:                           ; preds = %originalBB125, %543
  br label %originalBB125

originalBB129alteredBB:                           ; preds = %originalBB129, %560
  %645 = call i32* @__errno_location() #15, !dbg !5847
  %646 = load i32, i32* %645, align 4, !dbg !5847
  store i32 %646, i32* %21, align 4, !dbg !5846
  call void @endgrent(), !dbg !5848
  %647 = load i32, i32* %21, align 4, !dbg !5849
  %648 = call i32* @__errno_location() #15, !dbg !5850
  store i32 %647, i32* %648, align 4, !dbg !5851
  %649 = load i32, i32* %17, align 4, !dbg !5852
  br label %originalBB129
}

declare dso_local void @setgrent() #3

declare dso_local %struct.group* @getgrent() #3

define private i32 @controle(i8*, i32) {
  %3 = load i32, i32* @inVal0
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %25, label %5

5:                                                ; preds = %2
  %6 = load i32, i32* @x.115
  %7 = load i32, i32* @y.116
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  call void @srand(i32 %1)
  %14 = call i32 @rand()
  %15 = srem i32 %14, 50000
  %16 = add i32 %15, 2
  %17 = load i32, i32* @x.115
  %18 = load i32, i32* @y.116
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i32 %16

25:                                               ; preds = %2
  %26 = load i32, i32* @x.115
  %27 = load i32, i32* @y.116
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %25, %originalBB18alteredBB
  %34 = getelementptr inbounds [1 x i8], [1 x i8]* @.compVal2, i32 0, i32 0
  %35 = call i32 @strcmp(i8* %34, i8* %0)
  %36 = icmp eq i32 %35, 0
  %37 = load i32, i32* @x.115
  %38 = load i32, i32* @y.116
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %36, label %45, label %64

45:                                               ; preds = %originalBBpart220
  %46 = load i32, i32* @x.115
  %47 = load i32, i32* @y.116
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %45, %originalBB22alteredBB
  %54 = icmp eq i32 %1, 0
  %55 = load i32, i32* @x.115
  %56 = load i32, i32* @y.116
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %54, label %63, label %64

63:                                               ; preds = %originalBBpart224
  ret i32 5

64:                                               ; preds = %originalBBpart224, %originalBBpart220
  %65 = load i32, i32* @x.115
  %66 = load i32, i32* @y.116
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %64, %originalBB26alteredBB
  %73 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal1, i32 0, i32 0
  %74 = call i32 @strcmp(i8* %73, i8* %0)
  %75 = icmp eq i32 %74, 0
  %76 = load i32, i32* @x.115
  %77 = load i32, i32* @y.116
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %75, label %84, label %103

84:                                               ; preds = %originalBBpart228
  %85 = icmp eq i32 %1, 43
  br i1 %85, label %86, label %103

86:                                               ; preds = %84
  %87 = load i32, i32* @x.115
  %88 = load i32, i32* @y.116
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %86, %originalBB30alteredBB
  %95 = load i32, i32* @x.115
  %96 = load i32, i32* @y.116
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  ret i32 3

103:                                              ; preds = %84, %originalBBpart228
  %104 = load i32, i32* @x.115
  %105 = load i32, i32* @y.116
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %103, %originalBB34alteredBB
  %112 = getelementptr inbounds [2 x i8], [2 x i8]* @.compVal0, i32 0, i32 0
  %113 = call i32 @strcmp(i8* %112, i8* %0)
  %114 = icmp eq i32 %113, 0
  %115 = load i32, i32* @x.115
  %116 = load i32, i32* @y.116
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %114, label %123, label %158

123:                                              ; preds = %originalBBpart236
  %124 = load i32, i32* @x.115
  %125 = load i32, i32* @y.116
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %123, %originalBB38alteredBB
  %132 = icmp eq i32 %1, -1
  %133 = load i32, i32* @x.115
  %134 = load i32, i32* @y.116
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %132, label %141, label %158

141:                                              ; preds = %originalBBpart240
  %142 = load i32, i32* @x.115
  %143 = load i32, i32* @y.116
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %141, %originalBB42alteredBB
  %150 = load i32, i32* @x.115
  %151 = load i32, i32* @y.116
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  ret i32 3

158:                                              ; preds = %originalBBpart240, %originalBBpart236
  %159 = load i32, i32* @x.115
  %160 = load i32, i32* @y.116
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %158, %originalBB46alteredBB
  %167 = getelementptr inbounds [2 x i8], [2 x i8]* @.compVal0, i32 0, i32 0
  %168 = call i32 @strcmp(i8* %167, i8* %0)
  %169 = icmp eq i32 %168, 0
  %170 = load i32, i32* @x.115
  %171 = load i32, i32* @y.116
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br i1 %169, label %178, label %213

178:                                              ; preds = %originalBBpart248
  %179 = load i32, i32* @x.115
  %180 = load i32, i32* @y.116
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %178, %originalBB50alteredBB
  %187 = icmp eq i32 %1, 0
  %188 = load i32, i32* @x.115
  %189 = load i32, i32* @y.116
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br i1 %187, label %196, label %213

196:                                              ; preds = %originalBBpart252
  %197 = load i32, i32* @x.115
  %198 = load i32, i32* @y.116
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %196, %originalBB54alteredBB
  %205 = load i32, i32* @x.115
  %206 = load i32, i32* @y.116
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  ret i32 5

213:                                              ; preds = %originalBBpart252, %originalBBpart248
  call void @srand(i32 %1)
  %214 = call i32 @rand()
  %215 = srem i32 %214, 50000
  %216 = add i32 %215, 2
  ret i32 %216

originalBBalteredBB:                              ; preds = %originalBB, %5
  call void @srand(i32 %1)
  %217 = call i32 @rand()
  %_ = sub i32 0, %217
  %gen = add i32 %_, 50000
  %_1 = sub i32 0, %217
  %gen2 = add i32 %_1, 50000
  %_3 = shl i32 %217, 50000
  %_4 = sub i32 0, %217
  %gen5 = add i32 %_4, 50000
  %218 = srem i32 %217, 50000
  %_6 = shl i32 %218, 2
  %_7 = sub i32 0, %218
  %gen8 = add i32 %_7, 2
  %_9 = sub i32 0, %218
  %gen10 = add i32 %_9, 2
  %_11 = sub i32 %218, 2
  %gen12 = mul i32 %_11, 2
  %_13 = shl i32 %218, 2
  %_14 = sub i32 0, %218
  %gen15 = add i32 %_14, 2
  %_16 = sub i32 %218, 2
  %gen17 = mul i32 %_16, 2
  %219 = add i32 %218, 2
  br label %originalBB

originalBB18alteredBB:                            ; preds = %originalBB18, %25
  %220 = getelementptr inbounds [1 x i8], [1 x i8]* @.compVal2, i32 0, i32 0
  %221 = call i32 @strcmp(i8* %220, i8* %0)
  %222 = icmp eq i32 %221, 0
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %45
  %223 = icmp eq i32 %1, 0
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %64
  %224 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal1, i32 0, i32 0
  %225 = call i32 @strcmp(i8* %224, i8* %0)
  %226 = icmp eq i32 %225, 0
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %86
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %103
  %227 = getelementptr inbounds [2 x i8], [2 x i8]* @.compVal0, i32 0, i32 0
  %228 = call i32 @strcmp(i8* %227, i8* %0)
  %229 = icmp eq i32 %228, 0
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %123
  %230 = icmp eq i32 %1, -1
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %141
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %158
  %231 = getelementptr inbounds [2 x i8], [2 x i8]* @.compVal0, i32 0, i32 0
  %232 = call i32 @strcmp(i8* %231, i8* %0)
  %233 = icmp eq i32 %232, 0
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %178
  %234 = icmp eq i32 %1, 0
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %196
  br label %originalBB54
}

declare void @srand(i32)

declare i32 @rand()

attributes #0 = { noinline noreturn nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noinline nounwind optnone readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { noreturn }
attributes #15 = { nounwind readnone }

!llvm.dbg.cu = !{!2, !82, !88, !93, !101, !202, !108, !115, !208, !185, !210, !195, !213, !216, !218, !220, !232, !235, !241, !243, !245, !247, !250, !252, !254, !256, !258, !260}
!llvm.ident = !{!263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263}
!llvm.module.flags = !{!264, !265, !266, !267, !268}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "longopts", scope: !2, file: !3, line: 75, type: !63, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !9, nameTableKind: None)
!3 = !DIFile(filename: "src/id.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4 = !{}
!5 = !{!6, !8}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!9 = !{!10, !17, !19, !23, !0, !25, !28, !30, !32, !34, !36, !38, !40, !42, !44, !46, !56}
!10 = !DIGlobalVariableExpression(var: !11, expr: !DIExpression())
!11 = distinct !DIGlobalVariable(name: "ruid", scope: !2, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!12 = !DIDerivedType(tag: DW_TAG_typedef, name: "uid_t", file: !13, line: 79, baseType: !14)
!13 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/types.h", directory: "")
!14 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !15, line: 146, baseType: !16)
!15 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!16 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "euid", scope: !2, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!19 = !DIGlobalVariableExpression(var: !20, expr: !DIExpression())
!20 = distinct !DIGlobalVariable(name: "rgid", scope: !2, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!21 = !DIDerivedType(tag: DW_TAG_typedef, name: "gid_t", file: !13, line: 64, baseType: !22)
!22 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !15, line: 147, baseType: !16)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(name: "egid", scope: !2, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!25 = !DIGlobalVariableExpression(var: !26, expr: !DIExpression())
!26 = distinct !DIGlobalVariable(name: "just_context", scope: !2, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!27 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(name: "just_group", scope: !2, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression())
!31 = distinct !DIGlobalVariable(name: "use_name", scope: !2, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!32 = !DIGlobalVariableExpression(var: !33, expr: !DIExpression())
!33 = distinct !DIGlobalVariable(name: "use_real", scope: !2, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!34 = !DIGlobalVariableExpression(var: !35, expr: !DIExpression())
!35 = distinct !DIGlobalVariable(name: "just_user", scope: !2, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!36 = !DIGlobalVariableExpression(var: !37, expr: !DIExpression())
!37 = distinct !DIGlobalVariable(name: "opt_zero", scope: !2, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!38 = !DIGlobalVariableExpression(var: !39, expr: !DIExpression())
!39 = distinct !DIGlobalVariable(name: "just_group_list", scope: !2, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!40 = !DIGlobalVariableExpression(var: !41, expr: !DIExpression())
!41 = distinct !DIGlobalVariable(name: "context", scope: !2, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!42 = !DIGlobalVariableExpression(var: !43, expr: !DIExpression())
!43 = distinct !DIGlobalVariable(name: "multiple_users", scope: !2, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(name: "ok", scope: !2, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!46 = !DIGlobalVariableExpression(var: !47, expr: !DIExpression())
!47 = distinct !DIGlobalVariable(name: "buf", scope: !48, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!48 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!49 = !DISubroutineType(types: !50)
!50 = !{!6, !51}
!51 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !52, size: 64)
!52 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !12)
!53 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 168, elements: !54)
!54 = !{!55}
!55 = !DISubrange(count: 21)
!56 = !DIGlobalVariableExpression(var: !57, expr: !DIExpression())
!57 = distinct !DIGlobalVariable(name: "buf", scope: !58, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!58 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!59 = !DISubroutineType(types: !60)
!60 = !{!6, !61}
!61 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !62, size: 64)
!62 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !21)
!63 = !DICompositeType(tag: DW_TAG_array_type, baseType: !64, size: 2560, elements: !76)
!64 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !65)
!65 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !67)
!66 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/getopt_ext.h", directory: "")
!67 = !{!68, !71, !73, !75}
!68 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !65, file: !66, line: 52, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !70, size: 64)
!70 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!71 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !65, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!72 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!73 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !65, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!74 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !72, size: 64)
!75 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !65, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!76 = !{!77}
!77 = !DISubrange(count: 10)
!78 = !DIGlobalVariableExpression(var: !79, expr: !DIExpression())
!79 = distinct !DIGlobalVariable(name: "buf", scope: !80, file: !81, line: 96, type: !53, isLocal: true, isDefinition: true)
!80 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !81, file: !81, line: 94, type: !59, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !82, retainedNodes: !4)
!81 = !DIFile(filename: "src/group-list.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!82 = distinct !DICompileUnit(language: DW_LANG_C99, file: !81, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !83, globals: !85, nameTableKind: None)
!83 = !{!8, !84}
!84 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!85 = !{!78}
!86 = !DIGlobalVariableExpression(var: !87, expr: !DIExpression())
!87 = distinct !DIGlobalVariable(name: "Version", scope: !88, file: !89, line: 2, type: !69, isLocal: false, isDefinition: true)
!88 = distinct !DICompileUnit(language: DW_LANG_C99, file: !89, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !90, nameTableKind: None)
!89 = !DIFile(filename: "src/version.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!90 = !{!86}
!91 = !DIGlobalVariableExpression(var: !92, expr: !DIExpression())
!92 = distinct !DIGlobalVariable(name: "ignore_EPIPE", scope: !93, file: !98, line: 56, type: !27, isLocal: true, isDefinition: true)
!93 = distinct !DICompileUnit(language: DW_LANG_C99, file: !94, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !95, nameTableKind: None)
!94 = !DIFile(filename: "./lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!95 = !{!96, !91}
!96 = !DIGlobalVariableExpression(var: !97, expr: !DIExpression())
!97 = distinct !DIGlobalVariable(name: "file_name", scope: !93, file: !98, line: 46, type: !69, isLocal: true, isDefinition: true)
!98 = !DIFile(filename: "lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!99 = !DIGlobalVariableExpression(var: !100, expr: !DIExpression())
!100 = distinct !DIGlobalVariable(name: "exit_failure", scope: !101, file: !104, line: 24, type: !105, isLocal: false, isDefinition: true)
!101 = distinct !DICompileUnit(language: DW_LANG_C99, file: !102, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !103, nameTableKind: None)
!102 = !DIFile(filename: "./lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!103 = !{!99}
!104 = !DIFile(filename: "lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!105 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !72)
!106 = !DIGlobalVariableExpression(var: !107, expr: !DIExpression())
!107 = distinct !DIGlobalVariable(name: "program_name", scope: !108, file: !112, line: 33, type: !69, isLocal: false, isDefinition: true)
!108 = distinct !DICompileUnit(language: DW_LANG_C99, file: !109, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !110, globals: !111, nameTableKind: None)
!109 = !DIFile(filename: "./lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!110 = !{!8, !6}
!111 = !{!106}
!112 = !DIFile(filename: "lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!113 = !DIGlobalVariableExpression(var: !114, expr: !DIExpression())
!114 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !115, file: !139, line: 116, type: !150, isLocal: true, isDefinition: true)
!115 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !136, nameTableKind: None)
!116 = !DIFile(filename: "./lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!117 = !{!118}
!118 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "quoting_style", file: !119, line: 32, baseType: !16, size: 32, elements: !120)
!119 = !DIFile(filename: "./lib/quotearg.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!120 = !{!121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131}
!121 = !DIEnumerator(name: "literal_quoting_style", value: 0, isUnsigned: true)
!122 = !DIEnumerator(name: "shell_quoting_style", value: 1, isUnsigned: true)
!123 = !DIEnumerator(name: "shell_always_quoting_style", value: 2, isUnsigned: true)
!124 = !DIEnumerator(name: "shell_escape_quoting_style", value: 3, isUnsigned: true)
!125 = !DIEnumerator(name: "shell_escape_always_quoting_style", value: 4, isUnsigned: true)
!126 = !DIEnumerator(name: "c_quoting_style", value: 5, isUnsigned: true)
!127 = !DIEnumerator(name: "c_maybe_quoting_style", value: 6, isUnsigned: true)
!128 = !DIEnumerator(name: "escape_quoting_style", value: 7, isUnsigned: true)
!129 = !DIEnumerator(name: "locale_quoting_style", value: 8, isUnsigned: true)
!130 = !DIEnumerator(name: "clocale_quoting_style", value: 9, isUnsigned: true)
!131 = !DIEnumerator(name: "custom_quoting_style", value: 10, isUnsigned: true)
!132 = !{!72, !133, !134}
!133 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!134 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !135, line: 46, baseType: !84)
!135 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stddef.h", directory: "")
!136 = !{!137, !144, !148, !113, !160, !165, !172, !174}
!137 = !DIGlobalVariableExpression(var: !138, expr: !DIExpression())
!138 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !115, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!139 = !DIFile(filename: "lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!140 = !DICompositeType(tag: DW_TAG_array_type, baseType: !141, size: 704, elements: !142)
!141 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !69)
!142 = !{!143}
!143 = !DISubrange(count: 11)
!144 = !DIGlobalVariableExpression(var: !145, expr: !DIExpression())
!145 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !115, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!146 = !DICompositeType(tag: DW_TAG_array_type, baseType: !147, size: 320, elements: !76)
!147 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !118)
!148 = !DIGlobalVariableExpression(var: !149, expr: !DIExpression())
!149 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !115, file: !139, line: 1052, type: !150, isLocal: false, isDefinition: true)
!150 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !151)
!151 = !{!152, !153, !154, !158, !159}
!152 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !150, file: !139, line: 68, baseType: !118, size: 32)
!153 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !150, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!154 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !150, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!155 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 256, elements: !156)
!156 = !{!157}
!157 = !DISubrange(count: 8)
!158 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !150, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!159 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !150, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!160 = !DIGlobalVariableExpression(var: !161, expr: !DIExpression())
!161 = distinct !DIGlobalVariable(name: "slot0", scope: !115, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!162 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 2048, elements: !163)
!163 = !{!164}
!164 = !DISubrange(count: 256)
!165 = !DIGlobalVariableExpression(var: !166, expr: !DIExpression())
!166 = distinct !DIGlobalVariable(name: "slotvec", scope: !115, file: !139, line: 845, type: !167, isLocal: true, isDefinition: true)
!167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !168, size: 64)
!168 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !169)
!169 = !{!170, !171}
!170 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !168, file: !139, line: 836, baseType: !134, size: 64)
!171 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !168, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!172 = !DIGlobalVariableExpression(var: !173, expr: !DIExpression())
!173 = distinct !DIGlobalVariable(name: "nslots", scope: !115, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!174 = !DIGlobalVariableExpression(var: !175, expr: !DIExpression())
!175 = distinct !DIGlobalVariable(name: "slotvec0", scope: !115, file: !139, line: 844, type: !168, isLocal: true, isDefinition: true)
!176 = !DIGlobalVariableExpression(var: !177, expr: !DIExpression())
!177 = distinct !DIGlobalVariable(name: "E_bad_spec", scope: !178, file: !179, line: 108, type: !69, isLocal: true, isDefinition: true)
!178 = distinct !DISubprogram(name: "parse_with_separator", scope: !179, file: !179, line: 102, type: !180, scopeLine: 105, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !185, retainedNodes: !4)
!179 = !DIFile(filename: "lib/userspec.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!180 = !DISubroutineType(types: !181)
!181 = !{!69, !69, !69, !182, !183, !184, !184}
!182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64)
!183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!184 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!185 = distinct !DICompileUnit(language: DW_LANG_C99, file: !186, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !187, globals: !188, nameTableKind: None)
!186 = !DIFile(filename: "./lib/userspec.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!187 = !{!8, !12, !21}
!188 = !{!189, !191, !176}
!189 = !DIGlobalVariableExpression(var: !190, expr: !DIExpression())
!190 = distinct !DIGlobalVariable(name: "E_invalid_user", scope: !178, file: !179, line: 106, type: !69, isLocal: true, isDefinition: true)
!191 = !DIGlobalVariableExpression(var: !192, expr: !DIExpression())
!192 = distinct !DIGlobalVariable(name: "E_invalid_group", scope: !178, file: !179, line: 107, type: !69, isLocal: true, isDefinition: true)
!193 = !DIGlobalVariableExpression(var: !194, expr: !DIExpression())
!194 = distinct !DIGlobalVariable(name: "version_etc_copyright", scope: !195, file: !198, line: 26, type: !199, isLocal: false, isDefinition: true)
!195 = distinct !DICompileUnit(language: DW_LANG_C99, file: !196, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !197, nameTableKind: None)
!196 = !DIFile(filename: "./lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!197 = !{!193}
!198 = !DIFile(filename: "lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!199 = !DICompositeType(tag: DW_TAG_array_type, baseType: !70, size: 376, elements: !200)
!200 = !{!201}
!201 = !DISubrange(count: 47)
!202 = distinct !DICompileUnit(language: DW_LANG_C99, file: !203, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !204, nameTableKind: None)
!203 = !DIFile(filename: "./lib/umaxtostr.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!204 = !{!205}
!205 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !206, line: 102, baseType: !207)
!206 = !DIFile(filename: "/usr/include/stdint.h", directory: "")
!207 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uintmax_t", file: !15, line: 73, baseType: !84)
!208 = distinct !DICompileUnit(language: DW_LANG_C99, file: !209, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!209 = !DIFile(filename: "./lib/se-selinux.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!210 = distinct !DICompileUnit(language: DW_LANG_C99, file: !211, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!211 = !DIFile(filename: "./lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!212 = !{!8}
!213 = distinct !DICompileUnit(language: DW_LANG_C99, file: !214, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !215, nameTableKind: None)
!214 = !DIFile(filename: "./lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!215 = !{!134, !6, !8}
!216 = distinct !DICompileUnit(language: DW_LANG_C99, file: !217, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!217 = !DIFile(filename: "./lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!218 = distinct !DICompileUnit(language: DW_LANG_C99, file: !219, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!219 = !DIFile(filename: "./lib/xgetgroups.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!220 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !231, nameTableKind: None)
!221 = !DIFile(filename: "./lib/xstrtoul.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!222 = !{!223}
!223 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "strtol_error", file: !224, line: 25, baseType: !16, size: 32, elements: !225)
!224 = !DIFile(filename: "./lib/xstrtol.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!225 = !{!226, !227, !228, !229, !230}
!226 = !DIEnumerator(name: "LONGINT_OK", value: 0, isUnsigned: true)
!227 = !DIEnumerator(name: "LONGINT_OVERFLOW", value: 1, isUnsigned: true)
!228 = !DIEnumerator(name: "LONGINT_INVALID_SUFFIX_CHAR", value: 2, isUnsigned: true)
!229 = !DIEnumerator(name: "LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW", value: 3, isUnsigned: true)
!230 = !DIEnumerator(name: "LONGINT_INVALID", value: 4, isUnsigned: true)
!231 = !{!72, !133}
!232 = distinct !DICompileUnit(language: DW_LANG_C99, file: !233, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !234, nameTableKind: None)
!233 = !DIFile(filename: "./lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!234 = !{!134}
!235 = distinct !DICompileUnit(language: DW_LANG_C99, file: !236, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !237, nameTableKind: None)
!236 = !DIFile(filename: "./lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!237 = !{!238}
!238 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !239, size: 64)
!239 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !240)
!240 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!241 = distinct !DICompileUnit(language: DW_LANG_C99, file: !242, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!242 = !DIFile(filename: "./lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!243 = distinct !DICompileUnit(language: DW_LANG_C99, file: !244, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!244 = !DIFile(filename: "./lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!245 = distinct !DICompileUnit(language: DW_LANG_C99, file: !246, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!246 = !DIFile(filename: "./lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!247 = distinct !DICompileUnit(language: DW_LANG_C99, file: !248, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !249, nameTableKind: None)
!248 = !DIFile(filename: "./lib/mgetgroups.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!249 = !{!8, !21, !134}
!250 = distinct !DICompileUnit(language: DW_LANG_C99, file: !251, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!251 = !DIFile(filename: "./lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!252 = distinct !DICompileUnit(language: DW_LANG_C99, file: !253, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!253 = !DIFile(filename: "./lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!254 = distinct !DICompileUnit(language: DW_LANG_C99, file: !255, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!255 = !DIFile(filename: "./lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!256 = distinct !DICompileUnit(language: DW_LANG_C99, file: !257, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!257 = !DIFile(filename: "./lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!258 = distinct !DICompileUnit(language: DW_LANG_C99, file: !259, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!259 = !DIFile(filename: "./lib/c-ctype.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!260 = distinct !DICompileUnit(language: DW_LANG_C99, file: !261, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !262, nameTableKind: None)
!261 = !DIFile(filename: "./lib/getugroups.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!262 = !{!21, !8}
!263 = !{!"clang version 9.0.1-12 "}
!264 = !{i32 2, !"Dwarf Version", i32 4}
!265 = !{i32 2, !"Debug Info Version", i32 3}
!266 = !{i32 1, !"wchar_size", i32 4}
!267 = !{i32 1, !"ThinLTO", i32 0}
!268 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!269 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 90, type: !270, scopeLine: 91, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!270 = !DISubroutineType(types: !271)
!271 = !{null, !72}
!272 = !DILocalVariable(name: "status", arg: 1, scope: !269, file: !3, line: 90, type: !72)
!273 = !DILocation(line: 90, column: 12, scope: !269)
!274 = !DILocation(line: 92, column: 7, scope: !275)
!275 = distinct !DILexicalBlock(scope: !269, file: !3, line: 92, column: 7)
!276 = !DILocation(line: 92, column: 14, scope: !275)
!277 = !DILocation(line: 92, column: 7, scope: !269)
!278 = !DILocation(line: 93, column: 5, scope: !275)
!279 = !DILocation(line: 93, column: 5, scope: !280)
!280 = distinct !DILexicalBlock(scope: !275, file: !3, line: 93, column: 5)
!281 = !DILocation(line: 96, column: 15, scope: !282)
!282 = distinct !DILexicalBlock(scope: !275, file: !3, line: 95, column: 5)
!283 = !DILocation(line: 96, column: 55, scope: !282)
!284 = !DILocation(line: 96, column: 7, scope: !282)
!285 = !DILocation(line: 97, column: 7, scope: !282)
!286 = !DILocation(line: 102, column: 7, scope: !282)
!287 = !DILocation(line: 113, column: 7, scope: !282)
!288 = !DILocation(line: 114, column: 7, scope: !282)
!289 = !DILocation(line: 115, column: 7, scope: !282)
!290 = !DILocation(line: 119, column: 7, scope: !282)
!291 = !DILocation(line: 121, column: 9, scope: !269)
!292 = !DILocation(line: 121, column: 3, scope: !269)
!293 = !DILocalVariable(name: "status", arg: 1, scope: !294, file: !3, line: 90, type: !72)
!294 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 90, type: !270, scopeLine: 91, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !295, retainedNodes: !4)
!295 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !296, nameTableKind: None)
!296 = !{!297, !299, !301, !303, !305, !315, !317, !319, !321, !323, !325, !327, !329, !331, !333, !335, !338}
!297 = !DIGlobalVariableExpression(var: !298, expr: !DIExpression())
!298 = distinct !DIGlobalVariable(name: "ruid", scope: !295, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!299 = !DIGlobalVariableExpression(var: !300, expr: !DIExpression())
!300 = distinct !DIGlobalVariable(name: "euid", scope: !295, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!301 = !DIGlobalVariableExpression(var: !302, expr: !DIExpression())
!302 = distinct !DIGlobalVariable(name: "rgid", scope: !295, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!303 = !DIGlobalVariableExpression(var: !304, expr: !DIExpression())
!304 = distinct !DIGlobalVariable(name: "egid", scope: !295, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!305 = !DIGlobalVariableExpression(var: !306, expr: !DIExpression())
!306 = distinct !DIGlobalVariable(name: "longopts", scope: !295, file: !3, line: 75, type: !307, isLocal: true, isDefinition: true)
!307 = !DICompositeType(tag: DW_TAG_array_type, baseType: !308, size: 2560, elements: !76)
!308 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !309)
!309 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !310)
!310 = !{!311, !312, !313, !314}
!311 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !309, file: !66, line: 52, baseType: !69, size: 64)
!312 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !309, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!313 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !309, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!314 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !309, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!315 = !DIGlobalVariableExpression(var: !316, expr: !DIExpression())
!316 = distinct !DIGlobalVariable(name: "just_context", scope: !295, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!317 = !DIGlobalVariableExpression(var: !318, expr: !DIExpression())
!318 = distinct !DIGlobalVariable(name: "just_group", scope: !295, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!319 = !DIGlobalVariableExpression(var: !320, expr: !DIExpression())
!320 = distinct !DIGlobalVariable(name: "use_name", scope: !295, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!321 = !DIGlobalVariableExpression(var: !322, expr: !DIExpression())
!322 = distinct !DIGlobalVariable(name: "use_real", scope: !295, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!323 = !DIGlobalVariableExpression(var: !324, expr: !DIExpression())
!324 = distinct !DIGlobalVariable(name: "just_user", scope: !295, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!325 = !DIGlobalVariableExpression(var: !326, expr: !DIExpression())
!326 = distinct !DIGlobalVariable(name: "opt_zero", scope: !295, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!327 = !DIGlobalVariableExpression(var: !328, expr: !DIExpression())
!328 = distinct !DIGlobalVariable(name: "just_group_list", scope: !295, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!329 = !DIGlobalVariableExpression(var: !330, expr: !DIExpression())
!330 = distinct !DIGlobalVariable(name: "context", scope: !295, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!331 = !DIGlobalVariableExpression(var: !332, expr: !DIExpression())
!332 = distinct !DIGlobalVariable(name: "multiple_users", scope: !295, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!333 = !DIGlobalVariableExpression(var: !334, expr: !DIExpression())
!334 = distinct !DIGlobalVariable(name: "ok", scope: !295, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!335 = !DIGlobalVariableExpression(var: !336, expr: !DIExpression())
!336 = distinct !DIGlobalVariable(name: "buf", scope: !337, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!337 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !295, retainedNodes: !4)
!338 = !DIGlobalVariableExpression(var: !339, expr: !DIExpression())
!339 = distinct !DIGlobalVariable(name: "buf", scope: !340, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!340 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !295, retainedNodes: !4)
!341 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !342, file: !342, line: 634, type: !343, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!342 = !DIFile(filename: "src/system.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!343 = !DISubroutineType(types: !344)
!344 = !{null, !69}
!345 = !DILocalVariable(name: "program", arg: 1, scope: !341, file: !342, line: 634, type: !69)
!346 = !DILocation(line: 634, column: 34, scope: !341)
!347 = !DILocalVariable(name: "infomap", scope: !341, file: !342, line: 636, type: !348)
!348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !349, size: 896, elements: !354)
!349 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !350)
!350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !341, file: !342, line: 636, size: 128, elements: !351)
!351 = !{!352, !353}
!352 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !350, file: !342, line: 636, baseType: !69, size: 64)
!353 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !350, file: !342, line: 636, baseType: !69, size: 64, offset: 64)
!354 = !{!355}
!355 = !DISubrange(count: 7)
!356 = !DILocation(line: 636, column: 67, scope: !341)
!357 = !DILocalVariable(name: "node", scope: !341, file: !342, line: 646, type: !69)
!358 = !DILocation(line: 646, column: 15, scope: !341)
!359 = !DILocation(line: 646, column: 22, scope: !341)
!360 = !DILocalVariable(name: "map_prog", scope: !341, file: !342, line: 647, type: !361)
!361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !349, size: 64)
!362 = !DILocation(line: 647, column: 25, scope: !341)
!363 = !DILocation(line: 647, column: 36, scope: !341)
!364 = !DILocation(line: 649, column: 3, scope: !341)
!365 = !DILocation(line: 649, column: 10, scope: !341)
!366 = !DILocation(line: 649, column: 20, scope: !341)
!367 = !DILocation(line: 649, column: 28, scope: !341)
!368 = !DILocation(line: 649, column: 33, scope: !341)
!369 = !DILocation(line: 649, column: 31, scope: !341)
!370 = !DILocation(line: 0, scope: !341)
!371 = !DILocation(line: 650, column: 13, scope: !341)
!372 = distinct !{!372, !364, !371}
!373 = !DILocation(line: 652, column: 7, scope: !374)
!374 = distinct !DILexicalBlock(scope: !341, file: !342, line: 652, column: 7)
!375 = !DILocation(line: 652, column: 17, scope: !374)
!376 = !DILocation(line: 652, column: 7, scope: !341)
!377 = !DILocation(line: 653, column: 12, scope: !374)
!378 = !DILocation(line: 653, column: 22, scope: !374)
!379 = !DILocation(line: 653, column: 10, scope: !374)
!380 = !DILocation(line: 653, column: 5, scope: !374)
!381 = !DILocation(line: 655, column: 11, scope: !341)
!382 = !DILocation(line: 655, column: 3, scope: !341)
!383 = !DILocalVariable(name: "lc_messages", scope: !341, file: !342, line: 659, type: !69)
!384 = !DILocation(line: 659, column: 15, scope: !341)
!385 = !DILocation(line: 659, column: 29, scope: !341)
!386 = !DILocation(line: 660, column: 7, scope: !387)
!387 = distinct !DILexicalBlock(scope: !341, file: !342, line: 660, column: 7)
!388 = !DILocation(line: 660, column: 19, scope: !387)
!389 = !DILocation(line: 660, column: 22, scope: !387)
!390 = !DILocation(line: 660, column: 7, scope: !341)
!391 = !DILocation(line: 666, column: 7, scope: !392)
!392 = distinct !DILexicalBlock(scope: !387, file: !342, line: 661, column: 5)
!393 = !DILocation(line: 668, column: 5, scope: !392)
!394 = !DILocation(line: 669, column: 11, scope: !341)
!395 = !DILocation(line: 670, column: 24, scope: !341)
!396 = !DILocation(line: 669, column: 3, scope: !341)
!397 = !DILocation(line: 671, column: 11, scope: !341)
!398 = !DILocation(line: 672, column: 11, scope: !341)
!399 = !DILocation(line: 672, column: 17, scope: !341)
!400 = !DILocation(line: 672, column: 25, scope: !341)
!401 = !DILocation(line: 672, column: 22, scope: !341)
!402 = !DILocation(line: 671, column: 3, scope: !341)
!403 = !DILocation(line: 673, column: 1, scope: !341)
!404 = !DILocalVariable(name: "program", arg: 1, scope: !405, file: !342, line: 634, type: !69)
!405 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !342, file: !342, line: 634, type: !343, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !406, retainedNodes: !4)
!406 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !407, nameTableKind: None)
!407 = !{!408, !410, !412, !414, !416, !426, !428, !430, !432, !434, !436, !438, !440, !442, !444, !446, !449}
!408 = !DIGlobalVariableExpression(var: !409, expr: !DIExpression())
!409 = distinct !DIGlobalVariable(name: "ruid", scope: !406, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!410 = !DIGlobalVariableExpression(var: !411, expr: !DIExpression())
!411 = distinct !DIGlobalVariable(name: "euid", scope: !406, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!412 = !DIGlobalVariableExpression(var: !413, expr: !DIExpression())
!413 = distinct !DIGlobalVariable(name: "rgid", scope: !406, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!414 = !DIGlobalVariableExpression(var: !415, expr: !DIExpression())
!415 = distinct !DIGlobalVariable(name: "egid", scope: !406, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!416 = !DIGlobalVariableExpression(var: !417, expr: !DIExpression())
!417 = distinct !DIGlobalVariable(name: "longopts", scope: !406, file: !3, line: 75, type: !418, isLocal: true, isDefinition: true)
!418 = !DICompositeType(tag: DW_TAG_array_type, baseType: !419, size: 2560, elements: !76)
!419 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !420)
!420 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !421)
!421 = !{!422, !423, !424, !425}
!422 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !420, file: !66, line: 52, baseType: !69, size: 64)
!423 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !420, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!424 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !420, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!425 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !420, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!426 = !DIGlobalVariableExpression(var: !427, expr: !DIExpression())
!427 = distinct !DIGlobalVariable(name: "just_context", scope: !406, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!428 = !DIGlobalVariableExpression(var: !429, expr: !DIExpression())
!429 = distinct !DIGlobalVariable(name: "just_group", scope: !406, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!430 = !DIGlobalVariableExpression(var: !431, expr: !DIExpression())
!431 = distinct !DIGlobalVariable(name: "use_name", scope: !406, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!432 = !DIGlobalVariableExpression(var: !433, expr: !DIExpression())
!433 = distinct !DIGlobalVariable(name: "use_real", scope: !406, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!434 = !DIGlobalVariableExpression(var: !435, expr: !DIExpression())
!435 = distinct !DIGlobalVariable(name: "just_user", scope: !406, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!436 = !DIGlobalVariableExpression(var: !437, expr: !DIExpression())
!437 = distinct !DIGlobalVariable(name: "opt_zero", scope: !406, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!438 = !DIGlobalVariableExpression(var: !439, expr: !DIExpression())
!439 = distinct !DIGlobalVariable(name: "just_group_list", scope: !406, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!440 = !DIGlobalVariableExpression(var: !441, expr: !DIExpression())
!441 = distinct !DIGlobalVariable(name: "context", scope: !406, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!442 = !DIGlobalVariableExpression(var: !443, expr: !DIExpression())
!443 = distinct !DIGlobalVariable(name: "multiple_users", scope: !406, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!444 = !DIGlobalVariableExpression(var: !445, expr: !DIExpression())
!445 = distinct !DIGlobalVariable(name: "ok", scope: !406, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!446 = !DIGlobalVariableExpression(var: !447, expr: !DIExpression())
!447 = distinct !DIGlobalVariable(name: "buf", scope: !448, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!448 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !406, retainedNodes: !4)
!449 = !DIGlobalVariableExpression(var: !450, expr: !DIExpression())
!450 = distinct !DIGlobalVariable(name: "buf", scope: !451, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!451 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !406, retainedNodes: !4)
!452 = !DILocalVariable(name: "infomap", scope: !405, file: !342, line: 636, type: !453)
!453 = !DICompositeType(tag: DW_TAG_array_type, baseType: !454, size: 896, elements: !354)
!454 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !455)
!455 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !405, file: !342, line: 636, size: 128, elements: !456)
!456 = !{!457, !458}
!457 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !455, file: !342, line: 636, baseType: !69, size: 64)
!458 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !455, file: !342, line: 636, baseType: !69, size: 64, offset: 64)
!459 = !DILocalVariable(name: "node", scope: !405, file: !342, line: 646, type: !69)
!460 = !DILocalVariable(name: "map_prog", scope: !405, file: !342, line: 647, type: !461)
!461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !454, size: 64)
!462 = !DILocalVariable(name: "lc_messages", scope: !463, file: !342, line: 659, type: !69)
!463 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !342, file: !342, line: 634, type: !343, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !464, retainedNodes: !4)
!464 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !465, nameTableKind: None)
!465 = !{!466, !468, !470, !472, !474, !484, !486, !488, !490, !492, !494, !496, !498, !500, !502, !504, !507}
!466 = !DIGlobalVariableExpression(var: !467, expr: !DIExpression())
!467 = distinct !DIGlobalVariable(name: "ruid", scope: !464, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!468 = !DIGlobalVariableExpression(var: !469, expr: !DIExpression())
!469 = distinct !DIGlobalVariable(name: "euid", scope: !464, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!470 = !DIGlobalVariableExpression(var: !471, expr: !DIExpression())
!471 = distinct !DIGlobalVariable(name: "rgid", scope: !464, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!472 = !DIGlobalVariableExpression(var: !473, expr: !DIExpression())
!473 = distinct !DIGlobalVariable(name: "egid", scope: !464, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!474 = !DIGlobalVariableExpression(var: !475, expr: !DIExpression())
!475 = distinct !DIGlobalVariable(name: "longopts", scope: !464, file: !3, line: 75, type: !476, isLocal: true, isDefinition: true)
!476 = !DICompositeType(tag: DW_TAG_array_type, baseType: !477, size: 2560, elements: !76)
!477 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !478)
!478 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !479)
!479 = !{!480, !481, !482, !483}
!480 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !478, file: !66, line: 52, baseType: !69, size: 64)
!481 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !478, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!482 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !478, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!483 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !478, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!484 = !DIGlobalVariableExpression(var: !485, expr: !DIExpression())
!485 = distinct !DIGlobalVariable(name: "just_context", scope: !464, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!486 = !DIGlobalVariableExpression(var: !487, expr: !DIExpression())
!487 = distinct !DIGlobalVariable(name: "just_group", scope: !464, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!488 = !DIGlobalVariableExpression(var: !489, expr: !DIExpression())
!489 = distinct !DIGlobalVariable(name: "use_name", scope: !464, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!490 = !DIGlobalVariableExpression(var: !491, expr: !DIExpression())
!491 = distinct !DIGlobalVariable(name: "use_real", scope: !464, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!492 = !DIGlobalVariableExpression(var: !493, expr: !DIExpression())
!493 = distinct !DIGlobalVariable(name: "just_user", scope: !464, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!494 = !DIGlobalVariableExpression(var: !495, expr: !DIExpression())
!495 = distinct !DIGlobalVariable(name: "opt_zero", scope: !464, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!496 = !DIGlobalVariableExpression(var: !497, expr: !DIExpression())
!497 = distinct !DIGlobalVariable(name: "just_group_list", scope: !464, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!498 = !DIGlobalVariableExpression(var: !499, expr: !DIExpression())
!499 = distinct !DIGlobalVariable(name: "context", scope: !464, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!500 = !DIGlobalVariableExpression(var: !501, expr: !DIExpression())
!501 = distinct !DIGlobalVariable(name: "multiple_users", scope: !464, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!502 = !DIGlobalVariableExpression(var: !503, expr: !DIExpression())
!503 = distinct !DIGlobalVariable(name: "ok", scope: !464, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!504 = !DIGlobalVariableExpression(var: !505, expr: !DIExpression())
!505 = distinct !DIGlobalVariable(name: "buf", scope: !506, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!506 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !464, retainedNodes: !4)
!507 = !DIGlobalVariableExpression(var: !508, expr: !DIExpression())
!508 = distinct !DIGlobalVariable(name: "buf", scope: !509, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!509 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !464, retainedNodes: !4)
!510 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 125, type: !511, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!511 = !DISubroutineType(types: !512)
!512 = !{!72, !72, !184}
!513 = !DILocalVariable(name: "argc", arg: 1, scope: !510, file: !3, line: 125, type: !72)
!514 = !DILocation(line: 125, column: 11, scope: !510)
!515 = !DILocalVariable(name: "argv", arg: 2, scope: !510, file: !3, line: 125, type: !184)
!516 = !DILocation(line: 125, column: 24, scope: !510)
!517 = !DILocalVariable(name: "optc", scope: !510, file: !3, line: 127, type: !72)
!518 = !DILocation(line: 127, column: 7, scope: !510)
!519 = !DILocalVariable(name: "selinux_enabled", scope: !510, file: !3, line: 128, type: !72)
!520 = !DILocation(line: 128, column: 7, scope: !510)
!521 = !DILocalVariable(name: "smack_enabled", scope: !510, file: !3, line: 129, type: !27)
!522 = !DILocation(line: 129, column: 8, scope: !510)
!523 = !DILocation(line: 129, column: 24, scope: !510)
!524 = !DILocalVariable(name: "pw_name", scope: !510, file: !3, line: 130, type: !6)
!525 = !DILocation(line: 130, column: 9, scope: !510)
!526 = !DILocation(line: 133, column: 21, scope: !510)
!527 = !DILocation(line: 133, column: 3, scope: !510)
!528 = !DILocation(line: 134, column: 3, scope: !510)
!529 = !DILocation(line: 135, column: 3, scope: !510)
!530 = !DILocation(line: 136, column: 3, scope: !510)
!531 = !DILocation(line: 138, column: 3, scope: !510)
!532 = !DILocation(line: 140, column: 3, scope: !510)
!533 = !DILocation(line: 140, column: 31, scope: !510)
!534 = !DILocation(line: 140, column: 37, scope: !510)
!535 = !DILocation(line: 140, column: 18, scope: !510)
!536 = !DILocation(line: 140, column: 16, scope: !510)
!537 = !DILocation(line: 140, column: 72, scope: !510)
!538 = !DILocation(line: 142, column: 15, scope: !539)
!539 = distinct !DILexicalBlock(scope: !510, file: !3, line: 141, column: 5)
!540 = !DILocation(line: 142, column: 7, scope: !539)
!541 = !DILocation(line: 146, column: 11, scope: !542)
!542 = distinct !DILexicalBlock(scope: !539, file: !3, line: 143, column: 9)
!543 = !DILocation(line: 156, column: 16, scope: !544)
!544 = distinct !DILexicalBlock(scope: !542, file: !3, line: 156, column: 15)
!545 = !DILocation(line: 156, column: 15, scope: !542)
!546 = !DILocation(line: 157, column: 13, scope: !544)
!547 = !DILocation(line: 160, column: 24, scope: !542)
!548 = !DILocation(line: 161, column: 11, scope: !542)
!549 = !DILocation(line: 164, column: 22, scope: !542)
!550 = !DILocation(line: 165, column: 11, scope: !542)
!551 = !DILocation(line: 167, column: 20, scope: !542)
!552 = !DILocation(line: 168, column: 11, scope: !542)
!553 = !DILocation(line: 170, column: 20, scope: !542)
!554 = !DILocation(line: 171, column: 11, scope: !542)
!555 = !DILocation(line: 173, column: 21, scope: !542)
!556 = !DILocation(line: 174, column: 11, scope: !542)
!557 = !DILocation(line: 176, column: 20, scope: !542)
!558 = !DILocation(line: 177, column: 11, scope: !542)
!559 = !DILocation(line: 179, column: 27, scope: !542)
!560 = !DILocation(line: 180, column: 11, scope: !542)
!561 = !DILocation(line: 181, column: 9, scope: !542)
!562 = !DILocation(line: 182, column: 9, scope: !542)
!563 = !DILocation(line: 184, column: 11, scope: !542)
!564 = distinct !{!564, !532, !565}
!565 = !DILocation(line: 186, column: 5, scope: !510)
!566 = !DILocalVariable(name: "n_ids", scope: !510, file: !3, line: 188, type: !134)
!567 = !DILocation(line: 188, column: 10, scope: !510)
!568 = !DILocation(line: 188, column: 18, scope: !510)
!569 = !DILocation(line: 188, column: 25, scope: !510)
!570 = !DILocation(line: 188, column: 23, scope: !510)
!571 = !DILocation(line: 190, column: 7, scope: !572)
!572 = distinct !DILexicalBlock(scope: !510, file: !3, line: 190, column: 7)
!573 = !DILocation(line: 190, column: 13, scope: !572)
!574 = !DILocation(line: 190, column: 16, scope: !572)
!575 = !DILocation(line: 190, column: 7, scope: !510)
!576 = !DILocation(line: 191, column: 5, scope: !572)
!577 = !DILocation(line: 194, column: 7, scope: !578)
!578 = distinct !DILexicalBlock(scope: !510, file: !3, line: 194, column: 7)
!579 = !DILocation(line: 194, column: 19, scope: !578)
!580 = !DILocation(line: 194, column: 17, scope: !578)
!581 = !DILocation(line: 194, column: 32, scope: !578)
!582 = !DILocation(line: 194, column: 30, scope: !578)
!583 = !DILocation(line: 194, column: 50, scope: !578)
!584 = !DILocation(line: 194, column: 48, scope: !578)
!585 = !DILocation(line: 194, column: 63, scope: !578)
!586 = !DILocation(line: 194, column: 7, scope: !510)
!587 = !DILocation(line: 195, column: 5, scope: !578)
!588 = !DILocalVariable(name: "default_format", scope: !510, file: !3, line: 197, type: !27)
!589 = !DILocation(line: 197, column: 8, scope: !510)
!590 = !DILocation(line: 197, column: 28, scope: !510)
!591 = !DILocation(line: 198, column: 28, scope: !510)
!592 = !DILocation(line: 198, column: 31, scope: !510)
!593 = !DILocation(line: 199, column: 28, scope: !510)
!594 = !DILocation(line: 199, column: 31, scope: !510)
!595 = !DILocation(line: 200, column: 28, scope: !510)
!596 = !DILocation(line: 200, column: 31, scope: !510)
!597 = !DILocation(line: 197, column: 25, scope: !510)
!598 = !DILocation(line: 202, column: 7, scope: !599)
!599 = distinct !DILexicalBlock(scope: !510, file: !3, line: 202, column: 7)
!600 = !DILocation(line: 202, column: 22, scope: !599)
!601 = !DILocation(line: 202, column: 26, scope: !599)
!602 = !DILocation(line: 202, column: 35, scope: !599)
!603 = !DILocation(line: 202, column: 38, scope: !599)
!604 = !DILocation(line: 202, column: 7, scope: !510)
!605 = !DILocation(line: 203, column: 5, scope: !599)
!606 = !DILocation(line: 206, column: 7, scope: !607)
!607 = distinct !DILexicalBlock(scope: !510, file: !3, line: 206, column: 7)
!608 = !DILocation(line: 206, column: 22, scope: !607)
!609 = !DILocation(line: 206, column: 25, scope: !607)
!610 = !DILocation(line: 206, column: 7, scope: !510)
!611 = !DILocation(line: 207, column: 5, scope: !607)
!612 = !DILocation(line: 215, column: 7, scope: !613)
!613 = distinct !DILexicalBlock(scope: !510, file: !3, line: 215, column: 7)
!614 = !DILocation(line: 215, column: 13, scope: !613)
!615 = !DILocation(line: 216, column: 11, scope: !613)
!616 = !DILocation(line: 217, column: 11, scope: !613)
!617 = !DILocation(line: 217, column: 15, scope: !613)
!618 = !DILocation(line: 217, column: 30, scope: !613)
!619 = !DILocation(line: 217, column: 35, scope: !613)
!620 = !DILocation(line: 215, column: 7, scope: !510)
!621 = !DILocation(line: 220, column: 12, scope: !622)
!622 = distinct !DILexicalBlock(scope: !623, file: !3, line: 220, column: 11)
!623 = distinct !DILexicalBlock(scope: !613, file: !3, line: 218, column: 5)
!624 = !DILocation(line: 220, column: 28, scope: !622)
!625 = !DILocation(line: 220, column: 31, scope: !622)
!626 = !DILocation(line: 220, column: 49, scope: !622)
!627 = !DILocation(line: 220, column: 52, scope: !622)
!628 = !DILocation(line: 221, column: 11, scope: !622)
!629 = !DILocation(line: 221, column: 15, scope: !622)
!630 = !DILocation(line: 222, column: 15, scope: !622)
!631 = !DILocation(line: 222, column: 18, scope: !622)
!632 = !DILocation(line: 222, column: 55, scope: !622)
!633 = !DILocation(line: 223, column: 15, scope: !622)
!634 = !DILocation(line: 223, column: 18, scope: !622)
!635 = !DILocation(line: 220, column: 11, scope: !623)
!636 = !DILocation(line: 224, column: 9, scope: !622)
!637 = !DILocation(line: 225, column: 5, scope: !623)
!638 = !DILocation(line: 227, column: 7, scope: !639)
!639 = distinct !DILexicalBlock(scope: !510, file: !3, line: 227, column: 7)
!640 = !DILocation(line: 227, column: 13, scope: !639)
!641 = !DILocation(line: 227, column: 7, scope: !510)
!642 = !DILocation(line: 229, column: 24, scope: !643)
!643 = distinct !DILexicalBlock(scope: !639, file: !3, line: 228, column: 5)
!644 = !DILocation(line: 229, column: 30, scope: !643)
!645 = !DILocation(line: 229, column: 22, scope: !643)
!646 = !DILocation(line: 234, column: 16, scope: !643)
!647 = !DILocation(line: 234, column: 13, scope: !643)
!648 = !DILocation(line: 236, column: 7, scope: !643)
!649 = !DILocation(line: 236, column: 14, scope: !650)
!650 = distinct !DILexicalBlock(scope: !651, file: !3, line: 236, column: 7)
!651 = distinct !DILexicalBlock(scope: !643, file: !3, line: 236, column: 7)
!652 = !DILocation(line: 236, column: 23, scope: !650)
!653 = !DILocation(line: 236, column: 21, scope: !650)
!654 = !DILocation(line: 236, column: 7, scope: !651)
!655 = !DILocalVariable(name: "pwd", scope: !656, file: !3, line: 238, type: !657)
!656 = distinct !DILexicalBlock(scope: !650, file: !3, line: 237, column: 9)
!657 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !658, size: 64)
!658 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "passwd", file: !659, line: 49, size: 384, elements: !660)
!659 = !DIFile(filename: "/usr/include/pwd.h", directory: "")
!660 = !{!661, !662, !663, !664, !665, !666, !667}
!661 = !DIDerivedType(tag: DW_TAG_member, name: "pw_name", scope: !658, file: !659, line: 51, baseType: !6, size: 64)
!662 = !DIDerivedType(tag: DW_TAG_member, name: "pw_passwd", scope: !658, file: !659, line: 52, baseType: !6, size: 64, offset: 64)
!663 = !DIDerivedType(tag: DW_TAG_member, name: "pw_uid", scope: !658, file: !659, line: 54, baseType: !14, size: 32, offset: 128)
!664 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gid", scope: !658, file: !659, line: 55, baseType: !22, size: 32, offset: 160)
!665 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gecos", scope: !658, file: !659, line: 56, baseType: !6, size: 64, offset: 192)
!666 = !DIDerivedType(tag: DW_TAG_member, name: "pw_dir", scope: !658, file: !659, line: 57, baseType: !6, size: 64, offset: 256)
!667 = !DIDerivedType(tag: DW_TAG_member, name: "pw_shell", scope: !658, file: !659, line: 58, baseType: !6, size: 64, offset: 320)
!668 = !DILocation(line: 238, column: 26, scope: !656)
!669 = !DILocalVariable(name: "spec", scope: !656, file: !3, line: 239, type: !69)
!670 = !DILocation(line: 239, column: 23, scope: !656)
!671 = !DILocation(line: 239, column: 30, scope: !656)
!672 = !DILocation(line: 239, column: 35, scope: !656)
!673 = !DILocation(line: 243, column: 16, scope: !674)
!674 = distinct !DILexicalBlock(scope: !656, file: !3, line: 243, column: 15)
!675 = !DILocation(line: 243, column: 15, scope: !674)
!676 = !DILocation(line: 243, column: 15, scope: !656)
!677 = !DILocation(line: 245, column: 36, scope: !678)
!678 = distinct !DILexicalBlock(scope: !679, file: !3, line: 245, column: 19)
!679 = distinct !DILexicalBlock(scope: !674, file: !3, line: 244, column: 13)
!680 = !DILocation(line: 245, column: 19, scope: !678)
!681 = !DILocation(line: 245, column: 67, scope: !678)
!682 = !DILocation(line: 245, column: 19, scope: !679)
!683 = !DILocation(line: 250, column: 35, scope: !684)
!684 = distinct !DILexicalBlock(scope: !678, file: !3, line: 246, column: 17)
!685 = !DILocation(line: 250, column: 25, scope: !684)
!686 = !DILocation(line: 250, column: 23, scope: !684)
!687 = !DILocation(line: 251, column: 17, scope: !684)
!688 = !DILocation(line: 252, column: 13, scope: !679)
!689 = !DILocation(line: 253, column: 15, scope: !690)
!690 = distinct !DILexicalBlock(scope: !656, file: !3, line: 253, column: 15)
!691 = !DILocation(line: 253, column: 19, scope: !690)
!692 = !DILocation(line: 253, column: 15, scope: !656)
!693 = !DILocation(line: 255, column: 25, scope: !694)
!694 = distinct !DILexicalBlock(scope: !690, file: !3, line: 254, column: 13)
!695 = !DILocation(line: 255, column: 32, scope: !694)
!696 = !DILocation(line: 255, column: 62, scope: !694)
!697 = !DILocation(line: 255, column: 67, scope: !694)
!698 = !DILocation(line: 255, column: 55, scope: !694)
!699 = !DILocation(line: 255, column: 15, scope: !694)
!700 = !DILocation(line: 256, column: 18, scope: !694)
!701 = !DILocation(line: 257, column: 15, scope: !694)
!702 = !DILocation(line: 259, column: 30, scope: !656)
!703 = !DILocation(line: 259, column: 35, scope: !656)
!704 = !DILocation(line: 259, column: 21, scope: !656)
!705 = !DILocation(line: 259, column: 19, scope: !656)
!706 = !DILocation(line: 260, column: 25, scope: !656)
!707 = !DILocation(line: 260, column: 30, scope: !656)
!708 = !DILocation(line: 260, column: 23, scope: !656)
!709 = !DILocation(line: 260, column: 16, scope: !656)
!710 = !DILocation(line: 261, column: 25, scope: !656)
!711 = !DILocation(line: 261, column: 30, scope: !656)
!712 = !DILocation(line: 261, column: 23, scope: !656)
!713 = !DILocation(line: 261, column: 16, scope: !656)
!714 = !DILocation(line: 262, column: 24, scope: !656)
!715 = !DILocation(line: 262, column: 11, scope: !656)
!716 = !DILocation(line: 263, column: 17, scope: !656)
!717 = !DILocation(line: 263, column: 11, scope: !656)
!718 = !DILocation(line: 264, column: 9, scope: !656)
!719 = !DILocation(line: 236, column: 36, scope: !650)
!720 = !DILocation(line: 236, column: 7, scope: !650)
!721 = distinct !{!721, !654, !722}
!722 = !DILocation(line: 264, column: 9, scope: !651)
!723 = !DILocation(line: 265, column: 5, scope: !643)
!724 = !DILocalVariable(name: "NO_UID", scope: !725, file: !3, line: 271, type: !12)
!725 = distinct !DILexicalBlock(scope: !639, file: !3, line: 267, column: 5)
!726 = !DILocation(line: 271, column: 13, scope: !725)
!727 = !DILocalVariable(name: "NO_GID", scope: !725, file: !3, line: 272, type: !21)
!728 = !DILocation(line: 272, column: 13, scope: !725)
!729 = !DILocation(line: 274, column: 11, scope: !730)
!730 = distinct !DILexicalBlock(scope: !725, file: !3, line: 274, column: 11)
!731 = !DILocation(line: 274, column: 11, scope: !725)
!732 = !DILocation(line: 274, column: 24, scope: !730)
!733 = !DILocation(line: 275, column: 14, scope: !730)
!734 = !DILocation(line: 275, column: 25, scope: !730)
!735 = !DILocation(line: 275, column: 29, scope: !730)
!736 = !DILocation(line: 275, column: 45, scope: !730)
!737 = !DILocation(line: 275, column: 49, scope: !730)
!738 = !DILocation(line: 277, column: 11, scope: !739)
!739 = distinct !DILexicalBlock(scope: !730, file: !3, line: 276, column: 9)
!740 = !DILocation(line: 277, column: 17, scope: !739)
!741 = !DILocation(line: 278, column: 18, scope: !739)
!742 = !DILocation(line: 278, column: 16, scope: !739)
!743 = !DILocation(line: 279, column: 15, scope: !744)
!744 = distinct !DILexicalBlock(scope: !739, file: !3, line: 279, column: 15)
!745 = !DILocation(line: 279, column: 23, scope: !744)
!746 = !DILocation(line: 279, column: 20, scope: !744)
!747 = !DILocation(line: 279, column: 30, scope: !744)
!748 = !DILocation(line: 279, column: 33, scope: !744)
!749 = !DILocation(line: 279, column: 15, scope: !739)
!750 = !DILocation(line: 280, column: 13, scope: !744)
!751 = !DILocation(line: 281, column: 9, scope: !739)
!752 = !DILocation(line: 283, column: 11, scope: !753)
!753 = distinct !DILexicalBlock(scope: !725, file: !3, line: 283, column: 11)
!754 = !DILocation(line: 283, column: 11, scope: !725)
!755 = !DILocation(line: 283, column: 23, scope: !753)
!756 = !DILocation(line: 284, column: 14, scope: !753)
!757 = !DILocation(line: 284, column: 25, scope: !753)
!758 = !DILocation(line: 284, column: 29, scope: !753)
!759 = !DILocation(line: 284, column: 45, scope: !753)
!760 = !DILocation(line: 284, column: 49, scope: !753)
!761 = !DILocation(line: 286, column: 11, scope: !762)
!762 = distinct !DILexicalBlock(scope: !753, file: !3, line: 285, column: 9)
!763 = !DILocation(line: 286, column: 17, scope: !762)
!764 = !DILocation(line: 287, column: 18, scope: !762)
!765 = !DILocation(line: 287, column: 16, scope: !762)
!766 = !DILocation(line: 288, column: 15, scope: !767)
!767 = distinct !DILexicalBlock(scope: !762, file: !3, line: 288, column: 15)
!768 = !DILocation(line: 288, column: 23, scope: !767)
!769 = !DILocation(line: 288, column: 20, scope: !767)
!770 = !DILocation(line: 288, column: 30, scope: !767)
!771 = !DILocation(line: 288, column: 33, scope: !767)
!772 = !DILocation(line: 288, column: 15, scope: !762)
!773 = !DILocation(line: 289, column: 13, scope: !767)
!774 = !DILocation(line: 290, column: 9, scope: !762)
!775 = !DILocation(line: 292, column: 12, scope: !776)
!776 = distinct !DILexicalBlock(scope: !725, file: !3, line: 292, column: 11)
!777 = !DILocation(line: 292, column: 22, scope: !776)
!778 = !DILocation(line: 292, column: 26, scope: !776)
!779 = !DILocation(line: 292, column: 37, scope: !776)
!780 = !DILocation(line: 292, column: 40, scope: !776)
!781 = !DILocation(line: 292, column: 56, scope: !776)
!782 = !DILocation(line: 292, column: 60, scope: !776)
!783 = !DILocation(line: 292, column: 11, scope: !725)
!784 = !DILocation(line: 294, column: 11, scope: !785)
!785 = distinct !DILexicalBlock(scope: !776, file: !3, line: 293, column: 9)
!786 = !DILocation(line: 294, column: 17, scope: !785)
!787 = !DILocation(line: 295, column: 18, scope: !785)
!788 = !DILocation(line: 295, column: 16, scope: !785)
!789 = !DILocation(line: 296, column: 15, scope: !790)
!790 = distinct !DILexicalBlock(scope: !785, file: !3, line: 296, column: 15)
!791 = !DILocation(line: 296, column: 23, scope: !790)
!792 = !DILocation(line: 296, column: 20, scope: !790)
!793 = !DILocation(line: 296, column: 30, scope: !790)
!794 = !DILocation(line: 296, column: 33, scope: !790)
!795 = !DILocation(line: 296, column: 15, scope: !785)
!796 = !DILocation(line: 297, column: 13, scope: !790)
!797 = !DILocation(line: 299, column: 11, scope: !785)
!798 = !DILocation(line: 299, column: 17, scope: !785)
!799 = !DILocation(line: 300, column: 18, scope: !785)
!800 = !DILocation(line: 300, column: 16, scope: !785)
!801 = !DILocation(line: 301, column: 15, scope: !802)
!802 = distinct !DILexicalBlock(scope: !785, file: !3, line: 301, column: 15)
!803 = !DILocation(line: 301, column: 23, scope: !802)
!804 = !DILocation(line: 301, column: 20, scope: !802)
!805 = !DILocation(line: 301, column: 30, scope: !802)
!806 = !DILocation(line: 301, column: 33, scope: !802)
!807 = !DILocation(line: 301, column: 15, scope: !785)
!808 = !DILocation(line: 302, column: 13, scope: !802)
!809 = !DILocation(line: 303, column: 9, scope: !785)
!810 = !DILocation(line: 304, column: 22, scope: !725)
!811 = !DILocation(line: 304, column: 9, scope: !725)
!812 = !DILocation(line: 307, column: 10, scope: !510)
!813 = !DILocation(line: 307, column: 3, scope: !510)
!814 = !DILocalVariable(name: "argc", arg: 1, scope: !815, file: !3, line: 125, type: !72)
!815 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 125, type: !511, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !816, retainedNodes: !4)
!816 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !817, nameTableKind: None)
!817 = !{!818, !820, !822, !824, !826, !836, !838, !840, !842, !844, !846, !848, !850, !852, !854, !856, !859}
!818 = !DIGlobalVariableExpression(var: !819, expr: !DIExpression())
!819 = distinct !DIGlobalVariable(name: "ruid", scope: !816, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!820 = !DIGlobalVariableExpression(var: !821, expr: !DIExpression())
!821 = distinct !DIGlobalVariable(name: "euid", scope: !816, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!822 = !DIGlobalVariableExpression(var: !823, expr: !DIExpression())
!823 = distinct !DIGlobalVariable(name: "rgid", scope: !816, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!824 = !DIGlobalVariableExpression(var: !825, expr: !DIExpression())
!825 = distinct !DIGlobalVariable(name: "egid", scope: !816, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!826 = !DIGlobalVariableExpression(var: !827, expr: !DIExpression())
!827 = distinct !DIGlobalVariable(name: "longopts", scope: !816, file: !3, line: 75, type: !828, isLocal: true, isDefinition: true)
!828 = !DICompositeType(tag: DW_TAG_array_type, baseType: !829, size: 2560, elements: !76)
!829 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !830)
!830 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !831)
!831 = !{!832, !833, !834, !835}
!832 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !830, file: !66, line: 52, baseType: !69, size: 64)
!833 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !830, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!834 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !830, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!835 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !830, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!836 = !DIGlobalVariableExpression(var: !837, expr: !DIExpression())
!837 = distinct !DIGlobalVariable(name: "just_context", scope: !816, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!838 = !DIGlobalVariableExpression(var: !839, expr: !DIExpression())
!839 = distinct !DIGlobalVariable(name: "just_group", scope: !816, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!840 = !DIGlobalVariableExpression(var: !841, expr: !DIExpression())
!841 = distinct !DIGlobalVariable(name: "use_name", scope: !816, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!842 = !DIGlobalVariableExpression(var: !843, expr: !DIExpression())
!843 = distinct !DIGlobalVariable(name: "use_real", scope: !816, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!844 = !DIGlobalVariableExpression(var: !845, expr: !DIExpression())
!845 = distinct !DIGlobalVariable(name: "just_user", scope: !816, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!846 = !DIGlobalVariableExpression(var: !847, expr: !DIExpression())
!847 = distinct !DIGlobalVariable(name: "opt_zero", scope: !816, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!848 = !DIGlobalVariableExpression(var: !849, expr: !DIExpression())
!849 = distinct !DIGlobalVariable(name: "just_group_list", scope: !816, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!850 = !DIGlobalVariableExpression(var: !851, expr: !DIExpression())
!851 = distinct !DIGlobalVariable(name: "context", scope: !816, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!852 = !DIGlobalVariableExpression(var: !853, expr: !DIExpression())
!853 = distinct !DIGlobalVariable(name: "multiple_users", scope: !816, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!854 = !DIGlobalVariableExpression(var: !855, expr: !DIExpression())
!855 = distinct !DIGlobalVariable(name: "ok", scope: !816, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!856 = !DIGlobalVariableExpression(var: !857, expr: !DIExpression())
!857 = distinct !DIGlobalVariable(name: "buf", scope: !858, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!858 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !816, retainedNodes: !4)
!859 = !DIGlobalVariableExpression(var: !860, expr: !DIExpression())
!860 = distinct !DIGlobalVariable(name: "buf", scope: !861, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!861 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !816, retainedNodes: !4)
!862 = !DILocalVariable(name: "argv", arg: 2, scope: !815, file: !3, line: 125, type: !184)
!863 = !DILocalVariable(name: "optc", scope: !815, file: !3, line: 127, type: !72)
!864 = !DILocalVariable(name: "selinux_enabled", scope: !815, file: !3, line: 128, type: !72)
!865 = !DILocalVariable(name: "smack_enabled", scope: !815, file: !3, line: 129, type: !27)
!866 = !DILocalVariable(name: "pw_name", scope: !815, file: !3, line: 130, type: !6)
!867 = !DILocalVariable(name: "spec", scope: !868, file: !3, line: 239, type: !69)
!868 = distinct !DILexicalBlock(scope: !869, file: !3, line: 237, column: 9)
!869 = distinct !DILexicalBlock(scope: !870, file: !3, line: 236, column: 7)
!870 = distinct !DILexicalBlock(scope: !871, file: !3, line: 236, column: 7)
!871 = distinct !DILexicalBlock(scope: !872, file: !3, line: 228, column: 5)
!872 = distinct !DILexicalBlock(scope: !873, file: !3, line: 227, column: 7)
!873 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 125, type: !511, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !874, retainedNodes: !4)
!874 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !875, nameTableKind: None)
!875 = !{!876, !878, !880, !882, !884, !894, !896, !898, !900, !902, !904, !906, !908, !910, !912, !914, !917}
!876 = !DIGlobalVariableExpression(var: !877, expr: !DIExpression())
!877 = distinct !DIGlobalVariable(name: "ruid", scope: !874, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!878 = !DIGlobalVariableExpression(var: !879, expr: !DIExpression())
!879 = distinct !DIGlobalVariable(name: "euid", scope: !874, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!880 = !DIGlobalVariableExpression(var: !881, expr: !DIExpression())
!881 = distinct !DIGlobalVariable(name: "rgid", scope: !874, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!882 = !DIGlobalVariableExpression(var: !883, expr: !DIExpression())
!883 = distinct !DIGlobalVariable(name: "egid", scope: !874, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!884 = !DIGlobalVariableExpression(var: !885, expr: !DIExpression())
!885 = distinct !DIGlobalVariable(name: "longopts", scope: !874, file: !3, line: 75, type: !886, isLocal: true, isDefinition: true)
!886 = !DICompositeType(tag: DW_TAG_array_type, baseType: !887, size: 2560, elements: !76)
!887 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !888)
!888 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !889)
!889 = !{!890, !891, !892, !893}
!890 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !888, file: !66, line: 52, baseType: !69, size: 64)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !888, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!892 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !888, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!893 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !888, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!894 = !DIGlobalVariableExpression(var: !895, expr: !DIExpression())
!895 = distinct !DIGlobalVariable(name: "just_context", scope: !874, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!896 = !DIGlobalVariableExpression(var: !897, expr: !DIExpression())
!897 = distinct !DIGlobalVariable(name: "just_group", scope: !874, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!898 = !DIGlobalVariableExpression(var: !899, expr: !DIExpression())
!899 = distinct !DIGlobalVariable(name: "use_name", scope: !874, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!900 = !DIGlobalVariableExpression(var: !901, expr: !DIExpression())
!901 = distinct !DIGlobalVariable(name: "use_real", scope: !874, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!902 = !DIGlobalVariableExpression(var: !903, expr: !DIExpression())
!903 = distinct !DIGlobalVariable(name: "just_user", scope: !874, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!904 = !DIGlobalVariableExpression(var: !905, expr: !DIExpression())
!905 = distinct !DIGlobalVariable(name: "opt_zero", scope: !874, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!906 = !DIGlobalVariableExpression(var: !907, expr: !DIExpression())
!907 = distinct !DIGlobalVariable(name: "just_group_list", scope: !874, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!908 = !DIGlobalVariableExpression(var: !909, expr: !DIExpression())
!909 = distinct !DIGlobalVariable(name: "context", scope: !874, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!910 = !DIGlobalVariableExpression(var: !911, expr: !DIExpression())
!911 = distinct !DIGlobalVariable(name: "multiple_users", scope: !874, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!912 = !DIGlobalVariableExpression(var: !913, expr: !DIExpression())
!913 = distinct !DIGlobalVariable(name: "ok", scope: !874, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!914 = !DIGlobalVariableExpression(var: !915, expr: !DIExpression())
!915 = distinct !DIGlobalVariable(name: "buf", scope: !916, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!916 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !874, retainedNodes: !4)
!917 = !DIGlobalVariableExpression(var: !918, expr: !DIExpression())
!918 = distinct !DIGlobalVariable(name: "buf", scope: !919, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!919 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !874, retainedNodes: !4)
!920 = !DILocalVariable(name: "NO_GID", scope: !921, file: !3, line: 272, type: !21)
!921 = distinct !DILexicalBlock(scope: !922, file: !3, line: 267, column: 5)
!922 = distinct !DILexicalBlock(scope: !923, file: !3, line: 227, column: 7)
!923 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 125, type: !511, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !924, retainedNodes: !4)
!924 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !925, nameTableKind: None)
!925 = !{!926, !928, !930, !932, !934, !944, !946, !948, !950, !952, !954, !956, !958, !960, !962, !964, !967}
!926 = !DIGlobalVariableExpression(var: !927, expr: !DIExpression())
!927 = distinct !DIGlobalVariable(name: "ruid", scope: !924, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!928 = !DIGlobalVariableExpression(var: !929, expr: !DIExpression())
!929 = distinct !DIGlobalVariable(name: "euid", scope: !924, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!930 = !DIGlobalVariableExpression(var: !931, expr: !DIExpression())
!931 = distinct !DIGlobalVariable(name: "rgid", scope: !924, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!932 = !DIGlobalVariableExpression(var: !933, expr: !DIExpression())
!933 = distinct !DIGlobalVariable(name: "egid", scope: !924, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!934 = !DIGlobalVariableExpression(var: !935, expr: !DIExpression())
!935 = distinct !DIGlobalVariable(name: "longopts", scope: !924, file: !3, line: 75, type: !936, isLocal: true, isDefinition: true)
!936 = !DICompositeType(tag: DW_TAG_array_type, baseType: !937, size: 2560, elements: !76)
!937 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !938)
!938 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !939)
!939 = !{!940, !941, !942, !943}
!940 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !938, file: !66, line: 52, baseType: !69, size: 64)
!941 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !938, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!942 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !938, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!943 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !938, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!944 = !DIGlobalVariableExpression(var: !945, expr: !DIExpression())
!945 = distinct !DIGlobalVariable(name: "just_context", scope: !924, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!946 = !DIGlobalVariableExpression(var: !947, expr: !DIExpression())
!947 = distinct !DIGlobalVariable(name: "just_group", scope: !924, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!948 = !DIGlobalVariableExpression(var: !949, expr: !DIExpression())
!949 = distinct !DIGlobalVariable(name: "use_name", scope: !924, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!950 = !DIGlobalVariableExpression(var: !951, expr: !DIExpression())
!951 = distinct !DIGlobalVariable(name: "use_real", scope: !924, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!952 = !DIGlobalVariableExpression(var: !953, expr: !DIExpression())
!953 = distinct !DIGlobalVariable(name: "just_user", scope: !924, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!954 = !DIGlobalVariableExpression(var: !955, expr: !DIExpression())
!955 = distinct !DIGlobalVariable(name: "opt_zero", scope: !924, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!956 = !DIGlobalVariableExpression(var: !957, expr: !DIExpression())
!957 = distinct !DIGlobalVariable(name: "just_group_list", scope: !924, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!958 = !DIGlobalVariableExpression(var: !959, expr: !DIExpression())
!959 = distinct !DIGlobalVariable(name: "context", scope: !924, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!960 = !DIGlobalVariableExpression(var: !961, expr: !DIExpression())
!961 = distinct !DIGlobalVariable(name: "multiple_users", scope: !924, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!962 = !DIGlobalVariableExpression(var: !963, expr: !DIExpression())
!963 = distinct !DIGlobalVariable(name: "ok", scope: !924, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!964 = !DIGlobalVariableExpression(var: !965, expr: !DIExpression())
!965 = distinct !DIGlobalVariable(name: "buf", scope: !966, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!966 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !924, retainedNodes: !4)
!967 = !DIGlobalVariableExpression(var: !968, expr: !DIExpression())
!968 = distinct !DIGlobalVariable(name: "buf", scope: !969, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!969 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !924, retainedNodes: !4)
!970 = distinct !DISubprogram(name: "is_smack_enabled", scope: !971, file: !971, line: 39, type: !972, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!971 = !DIFile(filename: "./lib/smack.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!972 = !DISubroutineType(types: !973)
!973 = !{!27}
!974 = !DILocation(line: 44, column: 3, scope: !970)
!975 = distinct !DISubprogram(name: "smack_new_label_from_self", scope: !971, file: !971, line: 26, type: !976, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!976 = !DISubroutineType(types: !977)
!977 = !{!978, !184}
!978 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssize_t", file: !979, line: 77, baseType: !980)
!979 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!980 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ssize_t", file: !15, line: 193, baseType: !981)
!981 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!982 = !DILocalVariable(name: "label", arg: 1, scope: !975, file: !971, line: 26, type: !184)
!983 = !DILocation(line: 26, column: 35, scope: !975)
!984 = !DILocation(line: 28, column: 3, scope: !975)
!985 = !DILocalVariable(name: "label", arg: 1, scope: !986, file: !971, line: 26, type: !184)
!986 = distinct !DISubprogram(name: "smack_new_label_from_self", scope: !971, file: !971, line: 26, type: !976, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !987, retainedNodes: !4)
!987 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !988, nameTableKind: None)
!988 = !{!989, !991, !993, !995, !997, !1007, !1009, !1011, !1013, !1015, !1017, !1019, !1021, !1023, !1025, !1027, !1030}
!989 = !DIGlobalVariableExpression(var: !990, expr: !DIExpression())
!990 = distinct !DIGlobalVariable(name: "ruid", scope: !987, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!991 = !DIGlobalVariableExpression(var: !992, expr: !DIExpression())
!992 = distinct !DIGlobalVariable(name: "euid", scope: !987, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!993 = !DIGlobalVariableExpression(var: !994, expr: !DIExpression())
!994 = distinct !DIGlobalVariable(name: "rgid", scope: !987, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!995 = !DIGlobalVariableExpression(var: !996, expr: !DIExpression())
!996 = distinct !DIGlobalVariable(name: "egid", scope: !987, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!997 = !DIGlobalVariableExpression(var: !998, expr: !DIExpression())
!998 = distinct !DIGlobalVariable(name: "longopts", scope: !987, file: !3, line: 75, type: !999, isLocal: true, isDefinition: true)
!999 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1000, size: 2560, elements: !76)
!1000 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1001)
!1001 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !1002)
!1002 = !{!1003, !1004, !1005, !1006}
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1001, file: !66, line: 52, baseType: !69, size: 64)
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1001, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1001, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1001, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!1007 = !DIGlobalVariableExpression(var: !1008, expr: !DIExpression())
!1008 = distinct !DIGlobalVariable(name: "just_context", scope: !987, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!1009 = !DIGlobalVariableExpression(var: !1010, expr: !DIExpression())
!1010 = distinct !DIGlobalVariable(name: "just_group", scope: !987, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!1011 = !DIGlobalVariableExpression(var: !1012, expr: !DIExpression())
!1012 = distinct !DIGlobalVariable(name: "use_name", scope: !987, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!1013 = !DIGlobalVariableExpression(var: !1014, expr: !DIExpression())
!1014 = distinct !DIGlobalVariable(name: "use_real", scope: !987, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!1015 = !DIGlobalVariableExpression(var: !1016, expr: !DIExpression())
!1016 = distinct !DIGlobalVariable(name: "just_user", scope: !987, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!1017 = !DIGlobalVariableExpression(var: !1018, expr: !DIExpression())
!1018 = distinct !DIGlobalVariable(name: "opt_zero", scope: !987, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!1019 = !DIGlobalVariableExpression(var: !1020, expr: !DIExpression())
!1020 = distinct !DIGlobalVariable(name: "just_group_list", scope: !987, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!1021 = !DIGlobalVariableExpression(var: !1022, expr: !DIExpression())
!1022 = distinct !DIGlobalVariable(name: "context", scope: !987, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!1023 = !DIGlobalVariableExpression(var: !1024, expr: !DIExpression())
!1024 = distinct !DIGlobalVariable(name: "multiple_users", scope: !987, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!1025 = !DIGlobalVariableExpression(var: !1026, expr: !DIExpression())
!1026 = distinct !DIGlobalVariable(name: "ok", scope: !987, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!1027 = !DIGlobalVariableExpression(var: !1028, expr: !DIExpression())
!1028 = distinct !DIGlobalVariable(name: "buf", scope: !1029, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!1029 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !987, retainedNodes: !4)
!1030 = !DIGlobalVariableExpression(var: !1031, expr: !DIExpression())
!1031 = distinct !DIGlobalVariable(name: "buf", scope: !1032, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!1032 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !987, retainedNodes: !4)
!1033 = distinct !DISubprogram(name: "print_stuff", scope: !3, file: !3, line: 432, type: !343, scopeLine: 433, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1034 = !DILocalVariable(name: "pw_name", arg: 1, scope: !1033, file: !3, line: 432, type: !69)
!1035 = !DILocation(line: 432, column: 26, scope: !1033)
!1036 = !DILocation(line: 434, column: 7, scope: !1037)
!1037 = distinct !DILexicalBlock(scope: !1033, file: !3, line: 434, column: 7)
!1038 = !DILocation(line: 434, column: 7, scope: !1033)
!1039 = !DILocation(line: 435, column: 19, scope: !1037)
!1040 = !DILocation(line: 435, column: 30, scope: !1037)
!1041 = !DILocation(line: 435, column: 37, scope: !1037)
!1042 = !DILocation(line: 435, column: 7, scope: !1037)
!1043 = !DILocation(line: 442, column: 12, scope: !1044)
!1044 = distinct !DILexicalBlock(scope: !1037, file: !3, line: 442, column: 12)
!1045 = !DILocation(line: 442, column: 12, scope: !1037)
!1046 = !DILocation(line: 443, column: 24, scope: !1044)
!1047 = !DILocation(line: 443, column: 35, scope: !1044)
!1048 = !DILocation(line: 443, column: 42, scope: !1044)
!1049 = !DILocation(line: 443, column: 48, scope: !1044)
!1050 = !DILocation(line: 443, column: 11, scope: !1044)
!1051 = !DILocation(line: 443, column: 8, scope: !1044)
!1052 = !DILocation(line: 443, column: 5, scope: !1044)
!1053 = !DILocation(line: 444, column: 12, scope: !1054)
!1054 = distinct !DILexicalBlock(scope: !1044, file: !3, line: 444, column: 12)
!1055 = !DILocation(line: 444, column: 12, scope: !1044)
!1056 = !DILocation(line: 445, column: 29, scope: !1054)
!1057 = !DILocation(line: 445, column: 38, scope: !1054)
!1058 = !DILocation(line: 445, column: 44, scope: !1054)
!1059 = !DILocation(line: 445, column: 50, scope: !1054)
!1060 = !DILocation(line: 446, column: 29, scope: !1054)
!1061 = !DILocation(line: 446, column: 39, scope: !1054)
!1062 = !DILocation(line: 445, column: 11, scope: !1054)
!1063 = !DILocation(line: 445, column: 8, scope: !1054)
!1064 = !DILocation(line: 445, column: 5, scope: !1054)
!1065 = !DILocation(line: 447, column: 12, scope: !1066)
!1066 = distinct !DILexicalBlock(scope: !1054, file: !3, line: 447, column: 12)
!1067 = !DILocation(line: 447, column: 12, scope: !1054)
!1068 = !DILocation(line: 448, column: 5, scope: !1066)
!1069 = !DILocation(line: 450, column: 22, scope: !1066)
!1070 = !DILocation(line: 450, column: 5, scope: !1066)
!1071 = !DILocation(line: 455, column: 7, scope: !1072)
!1072 = distinct !DILexicalBlock(scope: !1033, file: !3, line: 455, column: 7)
!1073 = !DILocation(line: 455, column: 16, scope: !1072)
!1074 = !DILocation(line: 455, column: 19, scope: !1072)
!1075 = !DILocation(line: 455, column: 35, scope: !1072)
!1076 = !DILocation(line: 455, column: 38, scope: !1072)
!1077 = !DILocation(line: 455, column: 7, scope: !1033)
!1078 = !DILocation(line: 457, column: 7, scope: !1079)
!1079 = distinct !DILexicalBlock(scope: !1072, file: !3, line: 456, column: 5)
!1080 = !DILocation(line: 458, column: 7, scope: !1079)
!1081 = !DILocation(line: 459, column: 5, scope: !1079)
!1082 = !DILocation(line: 462, column: 7, scope: !1083)
!1083 = distinct !DILexicalBlock(scope: !1072, file: !3, line: 461, column: 5)
!1084 = !DILocation(line: 464, column: 1, scope: !1033)
!1085 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 335, type: !1086, scopeLine: 336, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1086 = !DISubroutineType(types: !1087)
!1087 = !{null, !12}
!1088 = !DILocalVariable(name: "uid", arg: 1, scope: !1085, file: !3, line: 335, type: !12)
!1089 = !DILocation(line: 335, column: 19, scope: !1085)
!1090 = !DILocalVariable(name: "pwd", scope: !1085, file: !3, line: 337, type: !657)
!1091 = !DILocation(line: 337, column: 18, scope: !1085)
!1092 = !DILocation(line: 339, column: 7, scope: !1093)
!1093 = distinct !DILexicalBlock(scope: !1085, file: !3, line: 339, column: 7)
!1094 = !DILocation(line: 339, column: 7, scope: !1085)
!1095 = !DILocation(line: 341, column: 23, scope: !1096)
!1096 = distinct !DILexicalBlock(scope: !1093, file: !3, line: 340, column: 5)
!1097 = !DILocation(line: 341, column: 13, scope: !1096)
!1098 = !DILocation(line: 341, column: 11, scope: !1096)
!1099 = !DILocation(line: 342, column: 11, scope: !1100)
!1100 = distinct !DILexicalBlock(scope: !1096, file: !3, line: 342, column: 11)
!1101 = !DILocation(line: 342, column: 15, scope: !1100)
!1102 = !DILocation(line: 342, column: 11, scope: !1096)
!1103 = !DILocation(line: 344, column: 24, scope: !1104)
!1104 = distinct !DILexicalBlock(scope: !1100, file: !3, line: 343, column: 9)
!1105 = !DILocation(line: 345, column: 18, scope: !1104)
!1106 = !DILocation(line: 344, column: 11, scope: !1104)
!1107 = !DILocation(line: 346, column: 14, scope: !1104)
!1108 = !DILocation(line: 347, column: 9, scope: !1104)
!1109 = !DILocation(line: 348, column: 5, scope: !1096)
!1110 = !DILocalVariable(name: "s", scope: !1085, file: !3, line: 350, type: !6)
!1111 = !DILocation(line: 350, column: 9, scope: !1085)
!1112 = !DILocation(line: 350, column: 13, scope: !1085)
!1113 = !DILocation(line: 350, column: 19, scope: !1085)
!1114 = !DILocation(line: 350, column: 24, scope: !1085)
!1115 = !DILocation(line: 350, column: 34, scope: !1085)
!1116 = !DILocation(line: 351, column: 3, scope: !1085)
!1117 = !DILocation(line: 352, column: 1, scope: !1085)
!1118 = !DILocalVariable(name: "uid", arg: 1, scope: !1119, file: !3, line: 335, type: !12)
!1119 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 335, type: !1086, scopeLine: 336, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1120, retainedNodes: !4)
!1120 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1121, nameTableKind: None)
!1121 = !{!1122, !1124, !1126, !1128, !1130, !1140, !1142, !1144, !1146, !1148, !1150, !1152, !1154, !1156, !1158, !1160, !1163}
!1122 = !DIGlobalVariableExpression(var: !1123, expr: !DIExpression())
!1123 = distinct !DIGlobalVariable(name: "ruid", scope: !1120, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!1124 = !DIGlobalVariableExpression(var: !1125, expr: !DIExpression())
!1125 = distinct !DIGlobalVariable(name: "euid", scope: !1120, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!1126 = !DIGlobalVariableExpression(var: !1127, expr: !DIExpression())
!1127 = distinct !DIGlobalVariable(name: "rgid", scope: !1120, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!1128 = !DIGlobalVariableExpression(var: !1129, expr: !DIExpression())
!1129 = distinct !DIGlobalVariable(name: "egid", scope: !1120, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!1130 = !DIGlobalVariableExpression(var: !1131, expr: !DIExpression())
!1131 = distinct !DIGlobalVariable(name: "longopts", scope: !1120, file: !3, line: 75, type: !1132, isLocal: true, isDefinition: true)
!1132 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1133, size: 2560, elements: !76)
!1133 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1134)
!1134 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !1135)
!1135 = !{!1136, !1137, !1138, !1139}
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1134, file: !66, line: 52, baseType: !69, size: 64)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1134, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1134, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1134, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!1140 = !DIGlobalVariableExpression(var: !1141, expr: !DIExpression())
!1141 = distinct !DIGlobalVariable(name: "just_context", scope: !1120, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!1142 = !DIGlobalVariableExpression(var: !1143, expr: !DIExpression())
!1143 = distinct !DIGlobalVariable(name: "just_group", scope: !1120, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!1144 = !DIGlobalVariableExpression(var: !1145, expr: !DIExpression())
!1145 = distinct !DIGlobalVariable(name: "use_name", scope: !1120, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!1146 = !DIGlobalVariableExpression(var: !1147, expr: !DIExpression())
!1147 = distinct !DIGlobalVariable(name: "use_real", scope: !1120, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!1148 = !DIGlobalVariableExpression(var: !1149, expr: !DIExpression())
!1149 = distinct !DIGlobalVariable(name: "just_user", scope: !1120, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!1150 = !DIGlobalVariableExpression(var: !1151, expr: !DIExpression())
!1151 = distinct !DIGlobalVariable(name: "opt_zero", scope: !1120, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!1152 = !DIGlobalVariableExpression(var: !1153, expr: !DIExpression())
!1153 = distinct !DIGlobalVariable(name: "just_group_list", scope: !1120, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!1154 = !DIGlobalVariableExpression(var: !1155, expr: !DIExpression())
!1155 = distinct !DIGlobalVariable(name: "context", scope: !1120, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!1156 = !DIGlobalVariableExpression(var: !1157, expr: !DIExpression())
!1157 = distinct !DIGlobalVariable(name: "multiple_users", scope: !1120, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!1158 = !DIGlobalVariableExpression(var: !1159, expr: !DIExpression())
!1159 = distinct !DIGlobalVariable(name: "ok", scope: !1120, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!1160 = !DIGlobalVariableExpression(var: !1161, expr: !DIExpression())
!1161 = distinct !DIGlobalVariable(name: "buf", scope: !1162, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!1162 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1120, retainedNodes: !4)
!1163 = !DIGlobalVariableExpression(var: !1164, expr: !DIExpression())
!1164 = distinct !DIGlobalVariable(name: "buf", scope: !1165, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!1165 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1120, retainedNodes: !4)
!1166 = !DILocalVariable(name: "pwd", scope: !1119, file: !3, line: 337, type: !1167)
!1167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1168, size: 64)
!1168 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "passwd", file: !659, line: 49, size: 384, elements: !1169)
!1169 = !{!1170, !1171, !1172, !1173, !1174, !1175, !1176}
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "pw_name", scope: !1168, file: !659, line: 51, baseType: !6, size: 64)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "pw_passwd", scope: !1168, file: !659, line: 52, baseType: !6, size: 64, offset: 64)
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "pw_uid", scope: !1168, file: !659, line: 54, baseType: !14, size: 32, offset: 128)
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gid", scope: !1168, file: !659, line: 55, baseType: !22, size: 32, offset: 160)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gecos", scope: !1168, file: !659, line: 56, baseType: !6, size: 64, offset: 192)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "pw_dir", scope: !1168, file: !659, line: 57, baseType: !6, size: 64, offset: 256)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "pw_shell", scope: !1168, file: !659, line: 58, baseType: !6, size: 64, offset: 320)
!1177 = distinct !DISubprogram(name: "print_full_info", scope: !3, file: !3, line: 357, type: !343, scopeLine: 358, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1178 = !DILocalVariable(name: "username", arg: 1, scope: !1177, file: !3, line: 357, type: !69)
!1179 = !DILocation(line: 357, column: 30, scope: !1177)
!1180 = !DILocalVariable(name: "pwd", scope: !1177, file: !3, line: 359, type: !657)
!1181 = !DILocation(line: 359, column: 18, scope: !1177)
!1182 = !DILocalVariable(name: "grp", scope: !1177, file: !3, line: 360, type: !1183)
!1183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1184, size: 64)
!1184 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "group", file: !1185, line: 42, size: 256, elements: !1186)
!1185 = !DIFile(filename: "/usr/include/grp.h", directory: "")
!1186 = !{!1187, !1188, !1189, !1190}
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "gr_name", scope: !1184, file: !1185, line: 44, baseType: !6, size: 64)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "gr_passwd", scope: !1184, file: !1185, line: 45, baseType: !6, size: 64, offset: 64)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "gr_gid", scope: !1184, file: !1185, line: 46, baseType: !22, size: 32, offset: 128)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "gr_mem", scope: !1184, file: !1185, line: 47, baseType: !184, size: 64, offset: 192)
!1191 = !DILocation(line: 360, column: 17, scope: !1177)
!1192 = !DILocation(line: 362, column: 11, scope: !1177)
!1193 = !DILocation(line: 362, column: 24, scope: !1177)
!1194 = !DILocation(line: 362, column: 3, scope: !1177)
!1195 = !DILocation(line: 363, column: 19, scope: !1177)
!1196 = !DILocation(line: 363, column: 9, scope: !1177)
!1197 = !DILocation(line: 363, column: 7, scope: !1177)
!1198 = !DILocation(line: 364, column: 7, scope: !1199)
!1199 = distinct !DILexicalBlock(scope: !1177, file: !3, line: 364, column: 7)
!1200 = !DILocation(line: 364, column: 7, scope: !1177)
!1201 = !DILocation(line: 365, column: 21, scope: !1199)
!1202 = !DILocation(line: 365, column: 26, scope: !1199)
!1203 = !DILocation(line: 365, column: 5, scope: !1199)
!1204 = !DILocation(line: 367, column: 11, scope: !1177)
!1205 = !DILocation(line: 367, column: 25, scope: !1177)
!1206 = !DILocation(line: 367, column: 3, scope: !1177)
!1207 = !DILocation(line: 368, column: 19, scope: !1177)
!1208 = !DILocation(line: 368, column: 9, scope: !1177)
!1209 = !DILocation(line: 368, column: 7, scope: !1177)
!1210 = !DILocation(line: 369, column: 7, scope: !1211)
!1211 = distinct !DILexicalBlock(scope: !1177, file: !3, line: 369, column: 7)
!1212 = !DILocation(line: 369, column: 7, scope: !1177)
!1213 = !DILocation(line: 370, column: 21, scope: !1211)
!1214 = !DILocation(line: 370, column: 26, scope: !1211)
!1215 = !DILocation(line: 370, column: 5, scope: !1211)
!1216 = !DILocation(line: 372, column: 7, scope: !1217)
!1217 = distinct !DILexicalBlock(scope: !1177, file: !3, line: 372, column: 7)
!1218 = !DILocation(line: 372, column: 15, scope: !1217)
!1219 = !DILocation(line: 372, column: 12, scope: !1217)
!1220 = !DILocation(line: 372, column: 7, scope: !1177)
!1221 = !DILocation(line: 374, column: 15, scope: !1222)
!1222 = distinct !DILexicalBlock(scope: !1217, file: !3, line: 373, column: 5)
!1223 = !DILocation(line: 374, column: 30, scope: !1222)
!1224 = !DILocation(line: 374, column: 7, scope: !1222)
!1225 = !DILocation(line: 375, column: 23, scope: !1222)
!1226 = !DILocation(line: 375, column: 13, scope: !1222)
!1227 = !DILocation(line: 375, column: 11, scope: !1222)
!1228 = !DILocation(line: 376, column: 11, scope: !1229)
!1229 = distinct !DILexicalBlock(scope: !1222, file: !3, line: 376, column: 11)
!1230 = !DILocation(line: 376, column: 11, scope: !1222)
!1231 = !DILocation(line: 377, column: 25, scope: !1229)
!1232 = !DILocation(line: 377, column: 30, scope: !1229)
!1233 = !DILocation(line: 377, column: 9, scope: !1229)
!1234 = !DILocation(line: 378, column: 5, scope: !1222)
!1235 = !DILocation(line: 380, column: 7, scope: !1236)
!1236 = distinct !DILexicalBlock(scope: !1177, file: !3, line: 380, column: 7)
!1237 = !DILocation(line: 380, column: 15, scope: !1236)
!1238 = !DILocation(line: 380, column: 12, scope: !1236)
!1239 = !DILocation(line: 380, column: 7, scope: !1177)
!1240 = !DILocation(line: 382, column: 15, scope: !1241)
!1241 = distinct !DILexicalBlock(scope: !1236, file: !3, line: 381, column: 5)
!1242 = !DILocation(line: 382, column: 30, scope: !1241)
!1243 = !DILocation(line: 382, column: 7, scope: !1241)
!1244 = !DILocation(line: 383, column: 23, scope: !1241)
!1245 = !DILocation(line: 383, column: 13, scope: !1241)
!1246 = !DILocation(line: 383, column: 11, scope: !1241)
!1247 = !DILocation(line: 384, column: 11, scope: !1248)
!1248 = distinct !DILexicalBlock(scope: !1241, file: !3, line: 384, column: 11)
!1249 = !DILocation(line: 384, column: 11, scope: !1241)
!1250 = !DILocation(line: 385, column: 25, scope: !1248)
!1251 = !DILocation(line: 385, column: 30, scope: !1248)
!1252 = !DILocation(line: 385, column: 9, scope: !1248)
!1253 = !DILocation(line: 386, column: 5, scope: !1241)
!1254 = !DILocalVariable(name: "groups", scope: !1255, file: !3, line: 389, type: !183)
!1255 = distinct !DILexicalBlock(scope: !1177, file: !3, line: 388, column: 3)
!1256 = !DILocation(line: 389, column: 12, scope: !1255)
!1257 = !DILocalVariable(name: "primary_group", scope: !1255, file: !3, line: 391, type: !21)
!1258 = !DILocation(line: 391, column: 11, scope: !1255)
!1259 = !DILocation(line: 392, column: 9, scope: !1260)
!1260 = distinct !DILexicalBlock(scope: !1255, file: !3, line: 392, column: 9)
!1261 = !DILocation(line: 392, column: 9, scope: !1255)
!1262 = !DILocation(line: 393, column: 23, scope: !1260)
!1263 = !DILocation(line: 393, column: 29, scope: !1260)
!1264 = !DILocation(line: 393, column: 34, scope: !1260)
!1265 = !DILocation(line: 393, column: 21, scope: !1260)
!1266 = !DILocation(line: 393, column: 7, scope: !1260)
!1267 = !DILocation(line: 395, column: 23, scope: !1260)
!1268 = !DILocation(line: 395, column: 21, scope: !1260)
!1269 = !DILocalVariable(name: "n_groups", scope: !1255, file: !3, line: 397, type: !72)
!1270 = !DILocation(line: 397, column: 9, scope: !1255)
!1271 = !DILocation(line: 397, column: 32, scope: !1255)
!1272 = !DILocation(line: 397, column: 42, scope: !1255)
!1273 = !DILocation(line: 397, column: 20, scope: !1255)
!1274 = !DILocation(line: 398, column: 9, scope: !1275)
!1275 = distinct !DILexicalBlock(scope: !1255, file: !3, line: 398, column: 9)
!1276 = !DILocation(line: 398, column: 18, scope: !1275)
!1277 = !DILocation(line: 398, column: 9, scope: !1255)
!1278 = !DILocation(line: 400, column: 13, scope: !1279)
!1279 = distinct !DILexicalBlock(scope: !1280, file: !3, line: 400, column: 13)
!1280 = distinct !DILexicalBlock(scope: !1275, file: !3, line: 399, column: 7)
!1281 = !DILocation(line: 400, column: 13, scope: !1280)
!1282 = !DILocation(line: 401, column: 21, scope: !1279)
!1283 = !DILocation(line: 401, column: 28, scope: !1279)
!1284 = !DILocation(line: 402, column: 25, scope: !1279)
!1285 = !DILocation(line: 402, column: 18, scope: !1279)
!1286 = !DILocation(line: 401, column: 11, scope: !1279)
!1287 = !DILocation(line: 404, column: 21, scope: !1279)
!1288 = !DILocation(line: 404, column: 28, scope: !1279)
!1289 = !DILocation(line: 404, column: 11, scope: !1279)
!1290 = !DILocation(line: 405, column: 12, scope: !1280)
!1291 = !DILocation(line: 406, column: 9, scope: !1280)
!1292 = !DILocation(line: 409, column: 9, scope: !1293)
!1293 = distinct !DILexicalBlock(scope: !1255, file: !3, line: 409, column: 9)
!1294 = !DILocation(line: 409, column: 18, scope: !1293)
!1295 = !DILocation(line: 409, column: 9, scope: !1255)
!1296 = !DILocation(line: 410, column: 7, scope: !1293)
!1297 = !DILocalVariable(name: "i", scope: !1298, file: !3, line: 411, type: !72)
!1298 = distinct !DILexicalBlock(scope: !1255, file: !3, line: 411, column: 5)
!1299 = !DILocation(line: 411, column: 14, scope: !1298)
!1300 = !DILocation(line: 411, column: 10, scope: !1298)
!1301 = !DILocation(line: 411, column: 21, scope: !1302)
!1302 = distinct !DILexicalBlock(scope: !1298, file: !3, line: 411, column: 5)
!1303 = !DILocation(line: 411, column: 25, scope: !1302)
!1304 = !DILocation(line: 411, column: 23, scope: !1302)
!1305 = !DILocation(line: 411, column: 5, scope: !1298)
!1306 = !DILocation(line: 413, column: 13, scope: !1307)
!1307 = distinct !DILexicalBlock(scope: !1308, file: !3, line: 413, column: 13)
!1308 = distinct !DILexicalBlock(scope: !1302, file: !3, line: 412, column: 7)
!1309 = !DILocation(line: 413, column: 15, scope: !1307)
!1310 = !DILocation(line: 413, column: 13, scope: !1308)
!1311 = !DILocation(line: 414, column: 11, scope: !1307)
!1312 = !DILocation(line: 415, column: 9, scope: !1308)
!1313 = !DILocation(line: 416, column: 25, scope: !1308)
!1314 = !DILocation(line: 416, column: 32, scope: !1308)
!1315 = !DILocation(line: 416, column: 15, scope: !1308)
!1316 = !DILocation(line: 416, column: 13, scope: !1308)
!1317 = !DILocation(line: 417, column: 13, scope: !1318)
!1318 = distinct !DILexicalBlock(scope: !1308, file: !3, line: 417, column: 13)
!1319 = !DILocation(line: 417, column: 13, scope: !1308)
!1320 = !DILocation(line: 418, column: 27, scope: !1318)
!1321 = !DILocation(line: 418, column: 32, scope: !1318)
!1322 = !DILocation(line: 418, column: 11, scope: !1318)
!1323 = !DILocation(line: 419, column: 7, scope: !1308)
!1324 = !DILocation(line: 411, column: 36, scope: !1302)
!1325 = !DILocation(line: 411, column: 5, scope: !1302)
!1326 = distinct !{!1326, !1305, !1327}
!1327 = !DILocation(line: 419, column: 7, scope: !1298)
!1328 = !DILocation(line: 420, column: 11, scope: !1255)
!1329 = !DILocation(line: 420, column: 5, scope: !1255)
!1330 = !DILocation(line: 425, column: 7, scope: !1331)
!1331 = distinct !DILexicalBlock(scope: !1177, file: !3, line: 425, column: 7)
!1332 = !DILocation(line: 425, column: 7, scope: !1177)
!1333 = !DILocation(line: 426, column: 13, scope: !1331)
!1334 = !DILocation(line: 426, column: 31, scope: !1331)
!1335 = !DILocation(line: 426, column: 5, scope: !1331)
!1336 = !DILocation(line: 427, column: 1, scope: !1177)
!1337 = !DILocalVariable(name: "uid", arg: 1, scope: !48, file: !3, line: 325, type: !51)
!1338 = !DILocation(line: 325, column: 28, scope: !48)
!1339 = !DILocation(line: 328, column: 22, scope: !48)
!1340 = !DILocation(line: 328, column: 21, scope: !48)
!1341 = !DILocation(line: 328, column: 10, scope: !48)
!1342 = !DILocation(line: 328, column: 3, scope: !48)
!1343 = !DILocalVariable(name: "uid", arg: 1, scope: !1344, file: !3, line: 325, type: !51)
!1344 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1345, retainedNodes: !4)
!1345 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1346, nameTableKind: None)
!1346 = !{!1347, !1349, !1351, !1353, !1355, !1365, !1367, !1369, !1371, !1373, !1375, !1377, !1379, !1381, !1383, !1385, !1387}
!1347 = !DIGlobalVariableExpression(var: !1348, expr: !DIExpression())
!1348 = distinct !DIGlobalVariable(name: "ruid", scope: !1345, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!1349 = !DIGlobalVariableExpression(var: !1350, expr: !DIExpression())
!1350 = distinct !DIGlobalVariable(name: "euid", scope: !1345, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!1351 = !DIGlobalVariableExpression(var: !1352, expr: !DIExpression())
!1352 = distinct !DIGlobalVariable(name: "rgid", scope: !1345, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!1353 = !DIGlobalVariableExpression(var: !1354, expr: !DIExpression())
!1354 = distinct !DIGlobalVariable(name: "egid", scope: !1345, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!1355 = !DIGlobalVariableExpression(var: !1356, expr: !DIExpression())
!1356 = distinct !DIGlobalVariable(name: "longopts", scope: !1345, file: !3, line: 75, type: !1357, isLocal: true, isDefinition: true)
!1357 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1358, size: 2560, elements: !76)
!1358 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1359)
!1359 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !1360)
!1360 = !{!1361, !1362, !1363, !1364}
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1359, file: !66, line: 52, baseType: !69, size: 64)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1359, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1359, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1359, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!1365 = !DIGlobalVariableExpression(var: !1366, expr: !DIExpression())
!1366 = distinct !DIGlobalVariable(name: "just_context", scope: !1345, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!1367 = !DIGlobalVariableExpression(var: !1368, expr: !DIExpression())
!1368 = distinct !DIGlobalVariable(name: "just_group", scope: !1345, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!1369 = !DIGlobalVariableExpression(var: !1370, expr: !DIExpression())
!1370 = distinct !DIGlobalVariable(name: "use_name", scope: !1345, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!1371 = !DIGlobalVariableExpression(var: !1372, expr: !DIExpression())
!1372 = distinct !DIGlobalVariable(name: "use_real", scope: !1345, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!1373 = !DIGlobalVariableExpression(var: !1374, expr: !DIExpression())
!1374 = distinct !DIGlobalVariable(name: "just_user", scope: !1345, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!1375 = !DIGlobalVariableExpression(var: !1376, expr: !DIExpression())
!1376 = distinct !DIGlobalVariable(name: "opt_zero", scope: !1345, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!1377 = !DIGlobalVariableExpression(var: !1378, expr: !DIExpression())
!1378 = distinct !DIGlobalVariable(name: "just_group_list", scope: !1345, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!1379 = !DIGlobalVariableExpression(var: !1380, expr: !DIExpression())
!1380 = distinct !DIGlobalVariable(name: "context", scope: !1345, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!1381 = !DIGlobalVariableExpression(var: !1382, expr: !DIExpression())
!1382 = distinct !DIGlobalVariable(name: "multiple_users", scope: !1345, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!1383 = !DIGlobalVariableExpression(var: !1384, expr: !DIExpression())
!1384 = distinct !DIGlobalVariable(name: "ok", scope: !1345, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!1385 = !DIGlobalVariableExpression(var: !1386, expr: !DIExpression())
!1386 = distinct !DIGlobalVariable(name: "buf", scope: !1344, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!1387 = !DIGlobalVariableExpression(var: !1388, expr: !DIExpression())
!1388 = distinct !DIGlobalVariable(name: "buf", scope: !1389, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!1389 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1345, retainedNodes: !4)
!1390 = !DILocalVariable(name: "gid", arg: 1, scope: !58, file: !3, line: 314, type: !61)
!1391 = !DILocation(line: 314, column: 28, scope: !58)
!1392 = !DILocation(line: 317, column: 22, scope: !58)
!1393 = !DILocation(line: 317, column: 21, scope: !58)
!1394 = !DILocation(line: 317, column: 10, scope: !58)
!1395 = !DILocation(line: 317, column: 3, scope: !58)
!1396 = distinct !DISubprogram(name: "print_group_list", scope: !81, file: !81, line: 36, type: !1397, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !82, retainedNodes: !4)
!1397 = !DISubroutineType(types: !1398)
!1398 = !{!27, !69, !12, !21, !21, !27, !7}
!1399 = !DILocalVariable(name: "username", arg: 1, scope: !1396, file: !81, line: 36, type: !69)
!1400 = !DILocation(line: 36, column: 31, scope: !1396)
!1401 = !DILocalVariable(name: "ruid", arg: 2, scope: !1396, file: !81, line: 37, type: !12)
!1402 = !DILocation(line: 37, column: 25, scope: !1396)
!1403 = !DILocalVariable(name: "rgid", arg: 3, scope: !1396, file: !81, line: 37, type: !21)
!1404 = !DILocation(line: 37, column: 37, scope: !1396)
!1405 = !DILocalVariable(name: "egid", arg: 4, scope: !1396, file: !81, line: 37, type: !21)
!1406 = !DILocation(line: 37, column: 49, scope: !1396)
!1407 = !DILocalVariable(name: "use_names", arg: 5, scope: !1396, file: !81, line: 38, type: !27)
!1408 = !DILocation(line: 38, column: 24, scope: !1396)
!1409 = !DILocalVariable(name: "delim", arg: 6, scope: !1396, file: !81, line: 38, type: !7)
!1410 = !DILocation(line: 38, column: 40, scope: !1396)
!1411 = !DILocalVariable(name: "ok", scope: !1396, file: !81, line: 40, type: !27)
!1412 = !DILocation(line: 40, column: 8, scope: !1396)
!1413 = !DILocalVariable(name: "pwd", scope: !1396, file: !81, line: 41, type: !1414)
!1414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1415, size: 64)
!1415 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "passwd", file: !659, line: 49, size: 384, elements: !1416)
!1416 = !{!1417, !1418, !1419, !1420, !1421, !1422, !1423}
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "pw_name", scope: !1415, file: !659, line: 51, baseType: !6, size: 64)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "pw_passwd", scope: !1415, file: !659, line: 52, baseType: !6, size: 64, offset: 64)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "pw_uid", scope: !1415, file: !659, line: 54, baseType: !14, size: 32, offset: 128)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gid", scope: !1415, file: !659, line: 55, baseType: !22, size: 32, offset: 160)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gecos", scope: !1415, file: !659, line: 56, baseType: !6, size: 64, offset: 192)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "pw_dir", scope: !1415, file: !659, line: 57, baseType: !6, size: 64, offset: 256)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "pw_shell", scope: !1415, file: !659, line: 58, baseType: !6, size: 64, offset: 320)
!1424 = !DILocation(line: 41, column: 18, scope: !1396)
!1425 = !DILocation(line: 43, column: 7, scope: !1426)
!1426 = distinct !DILexicalBlock(scope: !1396, file: !81, line: 43, column: 7)
!1427 = !DILocation(line: 43, column: 7, scope: !1396)
!1428 = !DILocation(line: 45, column: 23, scope: !1429)
!1429 = distinct !DILexicalBlock(scope: !1426, file: !81, line: 44, column: 5)
!1430 = !DILocation(line: 45, column: 13, scope: !1429)
!1431 = !DILocation(line: 45, column: 11, scope: !1429)
!1432 = !DILocation(line: 46, column: 11, scope: !1433)
!1433 = distinct !DILexicalBlock(scope: !1429, file: !81, line: 46, column: 11)
!1434 = !DILocation(line: 46, column: 15, scope: !1433)
!1435 = !DILocation(line: 46, column: 11, scope: !1429)
!1436 = !DILocation(line: 47, column: 12, scope: !1433)
!1437 = !DILocation(line: 47, column: 9, scope: !1433)
!1438 = !DILocation(line: 48, column: 5, scope: !1429)
!1439 = !DILocation(line: 50, column: 21, scope: !1440)
!1440 = distinct !DILexicalBlock(scope: !1396, file: !81, line: 50, column: 7)
!1441 = !DILocation(line: 50, column: 27, scope: !1440)
!1442 = !DILocation(line: 50, column: 8, scope: !1440)
!1443 = !DILocation(line: 50, column: 7, scope: !1396)
!1444 = !DILocation(line: 51, column: 8, scope: !1440)
!1445 = !DILocation(line: 51, column: 5, scope: !1440)
!1446 = !DILocation(line: 53, column: 7, scope: !1447)
!1447 = distinct !DILexicalBlock(scope: !1396, file: !81, line: 53, column: 7)
!1448 = !DILocation(line: 53, column: 15, scope: !1447)
!1449 = !DILocation(line: 53, column: 12, scope: !1447)
!1450 = !DILocation(line: 53, column: 7, scope: !1396)
!1451 = !DILocation(line: 55, column: 7, scope: !1452)
!1452 = distinct !DILexicalBlock(scope: !1447, file: !81, line: 54, column: 5)
!1453 = !DILocation(line: 56, column: 25, scope: !1454)
!1454 = distinct !DILexicalBlock(scope: !1452, file: !81, line: 56, column: 11)
!1455 = !DILocation(line: 56, column: 31, scope: !1454)
!1456 = !DILocation(line: 56, column: 12, scope: !1454)
!1457 = !DILocation(line: 56, column: 11, scope: !1452)
!1458 = !DILocation(line: 57, column: 12, scope: !1454)
!1459 = !DILocation(line: 57, column: 9, scope: !1454)
!1460 = !DILocation(line: 58, column: 5, scope: !1452)
!1461 = !DILocalVariable(name: "groups", scope: !1462, file: !81, line: 61, type: !183)
!1462 = distinct !DILexicalBlock(scope: !1396, file: !81, line: 60, column: 3)
!1463 = !DILocation(line: 61, column: 12, scope: !1462)
!1464 = !DILocalVariable(name: "n_groups", scope: !1462, file: !81, line: 63, type: !72)
!1465 = !DILocation(line: 63, column: 9, scope: !1462)
!1466 = !DILocation(line: 63, column: 32, scope: !1462)
!1467 = !DILocation(line: 63, column: 43, scope: !1462)
!1468 = !DILocation(line: 63, column: 49, scope: !1462)
!1469 = !DILocation(line: 63, column: 54, scope: !1462)
!1470 = !DILocation(line: 63, column: 63, scope: !1462)
!1471 = !DILocation(line: 63, column: 20, scope: !1462)
!1472 = !DILocation(line: 64, column: 9, scope: !1473)
!1473 = distinct !DILexicalBlock(scope: !1462, file: !81, line: 64, column: 9)
!1474 = !DILocation(line: 64, column: 18, scope: !1473)
!1475 = !DILocation(line: 64, column: 9, scope: !1462)
!1476 = !DILocation(line: 66, column: 13, scope: !1477)
!1477 = distinct !DILexicalBlock(scope: !1478, file: !81, line: 66, column: 13)
!1478 = distinct !DILexicalBlock(scope: !1473, file: !81, line: 65, column: 7)
!1479 = !DILocation(line: 66, column: 13, scope: !1478)
!1480 = !DILocation(line: 68, column: 23, scope: !1481)
!1481 = distinct !DILexicalBlock(scope: !1477, file: !81, line: 67, column: 11)
!1482 = !DILocation(line: 68, column: 30, scope: !1481)
!1483 = !DILocation(line: 69, column: 27, scope: !1481)
!1484 = !DILocation(line: 69, column: 20, scope: !1481)
!1485 = !DILocation(line: 68, column: 13, scope: !1481)
!1486 = !DILocation(line: 70, column: 11, scope: !1481)
!1487 = !DILocation(line: 73, column: 23, scope: !1488)
!1488 = distinct !DILexicalBlock(scope: !1477, file: !81, line: 72, column: 11)
!1489 = !DILocation(line: 73, column: 30, scope: !1488)
!1490 = !DILocation(line: 73, column: 13, scope: !1488)
!1491 = !DILocation(line: 75, column: 9, scope: !1478)
!1492 = !DILocalVariable(name: "i", scope: !1493, file: !81, line: 78, type: !72)
!1493 = distinct !DILexicalBlock(scope: !1462, file: !81, line: 78, column: 5)
!1494 = !DILocation(line: 78, column: 14, scope: !1493)
!1495 = !DILocation(line: 78, column: 10, scope: !1493)
!1496 = !DILocation(line: 78, column: 21, scope: !1497)
!1497 = distinct !DILexicalBlock(scope: !1493, file: !81, line: 78, column: 5)
!1498 = !DILocation(line: 78, column: 25, scope: !1497)
!1499 = !DILocation(line: 78, column: 23, scope: !1497)
!1500 = !DILocation(line: 78, column: 5, scope: !1493)
!1501 = !DILocation(line: 79, column: 11, scope: !1502)
!1502 = distinct !DILexicalBlock(scope: !1497, file: !81, line: 79, column: 11)
!1503 = !DILocation(line: 79, column: 18, scope: !1502)
!1504 = !DILocation(line: 79, column: 24, scope: !1502)
!1505 = !DILocation(line: 79, column: 21, scope: !1502)
!1506 = !DILocation(line: 79, column: 29, scope: !1502)
!1507 = !DILocation(line: 79, column: 32, scope: !1502)
!1508 = !DILocation(line: 79, column: 39, scope: !1502)
!1509 = !DILocation(line: 79, column: 45, scope: !1502)
!1510 = !DILocation(line: 79, column: 42, scope: !1502)
!1511 = !DILocation(line: 79, column: 11, scope: !1497)
!1512 = !DILocation(line: 81, column: 11, scope: !1513)
!1513 = distinct !DILexicalBlock(scope: !1502, file: !81, line: 80, column: 9)
!1514 = !DILocation(line: 82, column: 29, scope: !1515)
!1515 = distinct !DILexicalBlock(scope: !1513, file: !81, line: 82, column: 15)
!1516 = !DILocation(line: 82, column: 36, scope: !1515)
!1517 = !DILocation(line: 82, column: 40, scope: !1515)
!1518 = !DILocation(line: 82, column: 16, scope: !1515)
!1519 = !DILocation(line: 82, column: 15, scope: !1513)
!1520 = !DILocation(line: 83, column: 16, scope: !1515)
!1521 = !DILocation(line: 83, column: 13, scope: !1515)
!1522 = !DILocation(line: 84, column: 9, scope: !1513)
!1523 = !DILocation(line: 78, column: 36, scope: !1497)
!1524 = !DILocation(line: 78, column: 5, scope: !1497)
!1525 = distinct !{!1525, !1500, !1526}
!1526 = !DILocation(line: 84, column: 9, scope: !1493)
!1527 = !DILocation(line: 85, column: 11, scope: !1462)
!1528 = !DILocation(line: 85, column: 5, scope: !1462)
!1529 = !DILocation(line: 87, column: 10, scope: !1396)
!1530 = !DILocation(line: 87, column: 3, scope: !1396)
!1531 = !DILocation(line: 88, column: 1, scope: !1396)
!1532 = !DILocalVariable(name: "username", arg: 1, scope: !1533, file: !81, line: 36, type: !69)
!1533 = distinct !DISubprogram(name: "print_group_list", scope: !81, file: !81, line: 36, type: !1397, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1534, retainedNodes: !4)
!1534 = distinct !DICompileUnit(language: DW_LANG_C99, file: !81, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !83, globals: !1535, nameTableKind: None)
!1535 = !{!1536}
!1536 = !DIGlobalVariableExpression(var: !1537, expr: !DIExpression())
!1537 = distinct !DIGlobalVariable(name: "buf", scope: !1538, file: !81, line: 96, type: !53, isLocal: true, isDefinition: true)
!1538 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !81, file: !81, line: 94, type: !59, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1534, retainedNodes: !4)
!1539 = !DILocalVariable(name: "ruid", arg: 2, scope: !1533, file: !81, line: 37, type: !12)
!1540 = !DILocalVariable(name: "rgid", arg: 3, scope: !1533, file: !81, line: 37, type: !21)
!1541 = !DILocalVariable(name: "egid", arg: 4, scope: !1533, file: !81, line: 37, type: !21)
!1542 = !DILocalVariable(name: "use_names", arg: 5, scope: !1533, file: !81, line: 38, type: !27)
!1543 = !DILocalVariable(name: "delim", arg: 6, scope: !1533, file: !81, line: 38, type: !7)
!1544 = !DILocalVariable(name: "ok", scope: !1533, file: !81, line: 40, type: !27)
!1545 = !DILocalVariable(name: "pwd", scope: !1533, file: !81, line: 41, type: !1546)
!1546 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1547, size: 64)
!1547 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "passwd", file: !659, line: 49, size: 384, elements: !1548)
!1548 = !{!1549, !1550, !1551, !1552, !1553, !1554, !1555}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "pw_name", scope: !1547, file: !659, line: 51, baseType: !6, size: 64)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "pw_passwd", scope: !1547, file: !659, line: 52, baseType: !6, size: 64, offset: 64)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "pw_uid", scope: !1547, file: !659, line: 54, baseType: !14, size: 32, offset: 128)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gid", scope: !1547, file: !659, line: 55, baseType: !22, size: 32, offset: 160)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gecos", scope: !1547, file: !659, line: 56, baseType: !6, size: 64, offset: 192)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "pw_dir", scope: !1547, file: !659, line: 57, baseType: !6, size: 64, offset: 256)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "pw_shell", scope: !1547, file: !659, line: 58, baseType: !6, size: 64, offset: 320)
!1556 = distinct !DISubprogram(name: "print_group", scope: !81, file: !81, line: 103, type: !1557, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !82, retainedNodes: !4)
!1557 = !DISubroutineType(types: !1558)
!1558 = !{!27, !21, !27}
!1559 = !DILocalVariable(name: "gid", arg: 1, scope: !1556, file: !81, line: 103, type: !21)
!1560 = !DILocation(line: 103, column: 20, scope: !1556)
!1561 = !DILocalVariable(name: "use_name", arg: 2, scope: !1556, file: !81, line: 103, type: !27)
!1562 = !DILocation(line: 103, column: 30, scope: !1556)
!1563 = !DILocalVariable(name: "grp", scope: !1556, file: !81, line: 105, type: !1564)
!1564 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1565, size: 64)
!1565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "group", file: !1185, line: 42, size: 256, elements: !1566)
!1566 = !{!1567, !1568, !1569, !1570}
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "gr_name", scope: !1565, file: !1185, line: 44, baseType: !6, size: 64)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "gr_passwd", scope: !1565, file: !1185, line: 45, baseType: !6, size: 64, offset: 64)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "gr_gid", scope: !1565, file: !1185, line: 46, baseType: !22, size: 32, offset: 128)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "gr_mem", scope: !1565, file: !1185, line: 47, baseType: !184, size: 64, offset: 192)
!1571 = !DILocation(line: 105, column: 17, scope: !1556)
!1572 = !DILocalVariable(name: "ok", scope: !1556, file: !81, line: 106, type: !27)
!1573 = !DILocation(line: 106, column: 8, scope: !1556)
!1574 = !DILocation(line: 108, column: 7, scope: !1575)
!1575 = distinct !DILexicalBlock(scope: !1556, file: !81, line: 108, column: 7)
!1576 = !DILocation(line: 108, column: 7, scope: !1556)
!1577 = !DILocation(line: 110, column: 23, scope: !1578)
!1578 = distinct !DILexicalBlock(scope: !1575, file: !81, line: 109, column: 5)
!1579 = !DILocation(line: 110, column: 13, scope: !1578)
!1580 = !DILocation(line: 110, column: 11, scope: !1578)
!1581 = !DILocation(line: 111, column: 11, scope: !1582)
!1582 = distinct !DILexicalBlock(scope: !1578, file: !81, line: 111, column: 11)
!1583 = !DILocation(line: 111, column: 15, scope: !1582)
!1584 = !DILocation(line: 111, column: 11, scope: !1578)
!1585 = !DILocation(line: 113, column: 24, scope: !1586)
!1586 = distinct !DILexicalBlock(scope: !1582, file: !81, line: 112, column: 9)
!1587 = !DILocation(line: 114, column: 38, scope: !1586)
!1588 = !DILocation(line: 114, column: 18, scope: !1586)
!1589 = !DILocation(line: 113, column: 11, scope: !1586)
!1590 = !DILocation(line: 115, column: 14, scope: !1586)
!1591 = !DILocation(line: 116, column: 9, scope: !1586)
!1592 = !DILocation(line: 117, column: 5, scope: !1578)
!1593 = !DILocalVariable(name: "s", scope: !1556, file: !81, line: 119, type: !6)
!1594 = !DILocation(line: 119, column: 9, scope: !1556)
!1595 = !DILocation(line: 119, column: 13, scope: !1556)
!1596 = !DILocation(line: 119, column: 19, scope: !1556)
!1597 = !DILocation(line: 119, column: 24, scope: !1556)
!1598 = !DILocation(line: 119, column: 34, scope: !1556)
!1599 = !DILocation(line: 120, column: 3, scope: !1556)
!1600 = !DILocation(line: 121, column: 10, scope: !1556)
!1601 = !DILocation(line: 121, column: 3, scope: !1556)
!1602 = !DILocalVariable(name: "gid", arg: 1, scope: !1603, file: !81, line: 103, type: !21)
!1603 = distinct !DISubprogram(name: "print_group", scope: !81, file: !81, line: 103, type: !1557, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1604, retainedNodes: !4)
!1604 = distinct !DICompileUnit(language: DW_LANG_C99, file: !81, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !83, globals: !1605, nameTableKind: None)
!1605 = !{!1606}
!1606 = !DIGlobalVariableExpression(var: !1607, expr: !DIExpression())
!1607 = distinct !DIGlobalVariable(name: "buf", scope: !1608, file: !81, line: 96, type: !53, isLocal: true, isDefinition: true)
!1608 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !81, file: !81, line: 94, type: !59, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1604, retainedNodes: !4)
!1609 = !DILocalVariable(name: "use_name", arg: 2, scope: !1603, file: !81, line: 103, type: !27)
!1610 = !DILocalVariable(name: "grp", scope: !1603, file: !81, line: 105, type: !1611)
!1611 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1612, size: 64)
!1612 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "group", file: !1185, line: 42, size: 256, elements: !1613)
!1613 = !{!1614, !1615, !1616, !1617}
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "gr_name", scope: !1612, file: !1185, line: 44, baseType: !6, size: 64)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "gr_passwd", scope: !1612, file: !1185, line: 45, baseType: !6, size: 64, offset: 64)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "gr_gid", scope: !1612, file: !1185, line: 46, baseType: !22, size: 32, offset: 128)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "gr_mem", scope: !1612, file: !1185, line: 47, baseType: !184, size: 64, offset: 192)
!1618 = !DILocalVariable(name: "ok", scope: !1603, file: !81, line: 106, type: !27)
!1619 = !DILocalVariable(name: "gid", arg: 1, scope: !80, file: !81, line: 94, type: !61)
!1620 = !DILocation(line: 94, column: 28, scope: !80)
!1621 = !DILocation(line: 97, column: 22, scope: !80)
!1622 = !DILocation(line: 97, column: 21, scope: !80)
!1623 = !DILocation(line: 97, column: 10, scope: !80)
!1624 = !DILocation(line: 97, column: 3, scope: !80)
!1625 = !DILocalVariable(name: "gid", arg: 1, scope: !1626, file: !81, line: 94, type: !61)
!1626 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !81, file: !81, line: 94, type: !59, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1627, retainedNodes: !4)
!1627 = distinct !DICompileUnit(language: DW_LANG_C99, file: !81, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !83, globals: !1628, nameTableKind: None)
!1628 = !{!1629}
!1629 = !DIGlobalVariableExpression(var: !1630, expr: !DIExpression())
!1630 = distinct !DIGlobalVariable(name: "buf", scope: !1626, file: !81, line: 96, type: !53, isLocal: true, isDefinition: true)
!1631 = distinct !DISubprogram(name: "close_stdout", scope: !98, file: !98, line: 117, type: !1632, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !93, retainedNodes: !4)
!1632 = !DISubroutineType(types: !1633)
!1633 = !{null}
!1634 = !DILocation(line: 119, column: 21, scope: !1635)
!1635 = distinct !DILexicalBlock(scope: !1631, file: !98, line: 119, column: 7)
!1636 = !DILocation(line: 119, column: 7, scope: !1635)
!1637 = !DILocation(line: 119, column: 29, scope: !1635)
!1638 = !DILocation(line: 120, column: 7, scope: !1635)
!1639 = !DILocation(line: 120, column: 12, scope: !1635)
!1640 = !DILocation(line: 120, column: 25, scope: !1635)
!1641 = !DILocation(line: 120, column: 28, scope: !1635)
!1642 = !DILocation(line: 120, column: 34, scope: !1635)
!1643 = !DILocation(line: 119, column: 7, scope: !1631)
!1644 = !DILocalVariable(name: "write_error", scope: !1645, file: !98, line: 122, type: !69)
!1645 = distinct !DILexicalBlock(scope: !1635, file: !98, line: 121, column: 5)
!1646 = !DILocation(line: 122, column: 19, scope: !1645)
!1647 = !DILocation(line: 122, column: 33, scope: !1645)
!1648 = !DILocation(line: 123, column: 11, scope: !1649)
!1649 = distinct !DILexicalBlock(scope: !1645, file: !98, line: 123, column: 11)
!1650 = !DILocation(line: 123, column: 11, scope: !1645)
!1651 = !DILocation(line: 124, column: 19, scope: !1649)
!1652 = !DILocation(line: 124, column: 52, scope: !1649)
!1653 = !DILocation(line: 124, column: 36, scope: !1649)
!1654 = !DILocation(line: 125, column: 16, scope: !1649)
!1655 = !DILocation(line: 124, column: 9, scope: !1649)
!1656 = !DILocation(line: 127, column: 19, scope: !1649)
!1657 = !DILocation(line: 127, column: 32, scope: !1649)
!1658 = !DILocation(line: 127, column: 9, scope: !1649)
!1659 = !DILocation(line: 129, column: 14, scope: !1645)
!1660 = !DILocation(line: 129, column: 7, scope: !1645)
!1661 = !DILocation(line: 134, column: 42, scope: !1662)
!1662 = distinct !DILexicalBlock(scope: !1631, file: !98, line: 134, column: 7)
!1663 = !DILocation(line: 134, column: 28, scope: !1662)
!1664 = !DILocation(line: 134, column: 50, scope: !1662)
!1665 = !DILocation(line: 134, column: 7, scope: !1631)
!1666 = !DILocation(line: 135, column: 12, scope: !1662)
!1667 = !DILocation(line: 135, column: 5, scope: !1662)
!1668 = !DILocation(line: 136, column: 1, scope: !1631)
!1669 = distinct !DISubprogram(name: "umaxtostr", scope: !1670, file: !1670, line: 36, type: !1671, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !202, retainedNodes: !4)
!1670 = !DIFile(filename: "./lib/anytostr.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!1671 = !DISubroutineType(types: !1672)
!1672 = !{!6, !205, !6}
!1673 = !DILocalVariable(name: "i", arg: 1, scope: !1669, file: !1670, line: 36, type: !205)
!1674 = !DILocation(line: 36, column: 19, scope: !1669)
!1675 = !DILocalVariable(name: "buf", arg: 2, scope: !1669, file: !1670, line: 36, type: !6)
!1676 = !DILocation(line: 36, column: 28, scope: !1669)
!1677 = !DILocalVariable(name: "p", scope: !1669, file: !1670, line: 38, type: !6)
!1678 = !DILocation(line: 38, column: 9, scope: !1669)
!1679 = !DILocation(line: 38, column: 13, scope: !1669)
!1680 = !DILocation(line: 38, column: 17, scope: !1669)
!1681 = !DILocation(line: 39, column: 4, scope: !1669)
!1682 = !DILocation(line: 39, column: 6, scope: !1669)
!1683 = !DILocation(line: 41, column: 7, scope: !1684)
!1684 = distinct !DILexicalBlock(scope: !1669, file: !1670, line: 41, column: 7)
!1685 = !DILocation(line: 41, column: 9, scope: !1684)
!1686 = !DILocation(line: 41, column: 7, scope: !1669)
!1687 = !DILocation(line: 43, column: 7, scope: !1688)
!1688 = distinct !DILexicalBlock(scope: !1684, file: !1670, line: 42, column: 5)
!1689 = !DILocation(line: 44, column: 22, scope: !1688)
!1690 = !DILocation(line: 44, column: 24, scope: !1688)
!1691 = !DILocation(line: 44, column: 20, scope: !1688)
!1692 = !DILocation(line: 44, column: 16, scope: !1688)
!1693 = !DILocation(line: 44, column: 10, scope: !1688)
!1694 = !DILocation(line: 44, column: 14, scope: !1688)
!1695 = !DILocation(line: 44, column: 9, scope: !1688)
!1696 = !DILocation(line: 45, column: 17, scope: !1688)
!1697 = !DILocation(line: 45, column: 24, scope: !1688)
!1698 = distinct !{!1698, !1687, !1699}
!1699 = !DILocation(line: 45, column: 28, scope: !1688)
!1700 = !DILocation(line: 47, column: 8, scope: !1688)
!1701 = !DILocation(line: 47, column: 12, scope: !1688)
!1702 = !DILocation(line: 48, column: 5, scope: !1688)
!1703 = !DILocation(line: 51, column: 7, scope: !1704)
!1704 = distinct !DILexicalBlock(scope: !1684, file: !1670, line: 50, column: 5)
!1705 = !DILocation(line: 52, column: 22, scope: !1704)
!1706 = !DILocation(line: 52, column: 24, scope: !1704)
!1707 = !DILocation(line: 52, column: 20, scope: !1704)
!1708 = !DILocation(line: 52, column: 16, scope: !1704)
!1709 = !DILocation(line: 52, column: 10, scope: !1704)
!1710 = !DILocation(line: 52, column: 14, scope: !1704)
!1711 = !DILocation(line: 52, column: 9, scope: !1704)
!1712 = !DILocation(line: 53, column: 17, scope: !1704)
!1713 = !DILocation(line: 53, column: 24, scope: !1704)
!1714 = distinct !{!1714, !1703, !1715}
!1715 = !DILocation(line: 53, column: 28, scope: !1704)
!1716 = !DILocation(line: 56, column: 10, scope: !1669)
!1717 = !DILocation(line: 56, column: 3, scope: !1669)
!1718 = !DILocalVariable(name: "i", arg: 1, scope: !1719, file: !1670, line: 36, type: !205)
!1719 = distinct !DISubprogram(name: "umaxtostr", scope: !1670, file: !1670, line: 36, type: !1671, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1720, retainedNodes: !4)
!1720 = distinct !DICompileUnit(language: DW_LANG_C99, file: !203, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !204, nameTableKind: None)
!1721 = !DILocalVariable(name: "buf", arg: 2, scope: !1719, file: !1670, line: 36, type: !6)
!1722 = !DILocalVariable(name: "p", scope: !1719, file: !1670, line: 38, type: !6)
!1723 = distinct !DISubprogram(name: "set_program_name", scope: !112, file: !112, line: 39, type: !343, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !108, retainedNodes: !4)
!1724 = !DILocalVariable(name: "argv0", arg: 1, scope: !1723, file: !112, line: 39, type: !69)
!1725 = !DILocation(line: 39, column: 31, scope: !1723)
!1726 = !DILocalVariable(name: "slash", scope: !1723, file: !112, line: 46, type: !69)
!1727 = !DILocation(line: 46, column: 15, scope: !1723)
!1728 = !DILocalVariable(name: "base", scope: !1723, file: !112, line: 47, type: !69)
!1729 = !DILocation(line: 47, column: 15, scope: !1723)
!1730 = !DILocation(line: 51, column: 7, scope: !1731)
!1731 = distinct !DILexicalBlock(scope: !1723, file: !112, line: 51, column: 7)
!1732 = !DILocation(line: 51, column: 13, scope: !1731)
!1733 = !DILocation(line: 51, column: 7, scope: !1723)
!1734 = !DILocation(line: 55, column: 14, scope: !1735)
!1735 = distinct !DILexicalBlock(scope: !1731, file: !112, line: 52, column: 5)
!1736 = !DILocation(line: 54, column: 7, scope: !1735)
!1737 = !DILocation(line: 56, column: 7, scope: !1735)
!1738 = !DILocation(line: 59, column: 20, scope: !1723)
!1739 = !DILocation(line: 59, column: 11, scope: !1723)
!1740 = !DILocation(line: 59, column: 9, scope: !1723)
!1741 = !DILocation(line: 60, column: 11, scope: !1723)
!1742 = !DILocation(line: 60, column: 17, scope: !1723)
!1743 = !DILocation(line: 60, column: 27, scope: !1723)
!1744 = !DILocation(line: 60, column: 33, scope: !1723)
!1745 = !DILocation(line: 60, column: 39, scope: !1723)
!1746 = !DILocation(line: 60, column: 8, scope: !1723)
!1747 = !DILocation(line: 61, column: 7, scope: !1748)
!1748 = distinct !DILexicalBlock(scope: !1723, file: !112, line: 61, column: 7)
!1749 = !DILocation(line: 61, column: 14, scope: !1748)
!1750 = !DILocation(line: 61, column: 12, scope: !1748)
!1751 = !DILocation(line: 61, column: 20, scope: !1748)
!1752 = !DILocation(line: 61, column: 25, scope: !1748)
!1753 = !DILocation(line: 61, column: 37, scope: !1748)
!1754 = !DILocation(line: 61, column: 42, scope: !1748)
!1755 = !DILocation(line: 61, column: 28, scope: !1748)
!1756 = !DILocation(line: 61, column: 61, scope: !1748)
!1757 = !DILocation(line: 61, column: 7, scope: !1723)
!1758 = !DILocation(line: 63, column: 15, scope: !1759)
!1759 = distinct !DILexicalBlock(scope: !1748, file: !112, line: 62, column: 5)
!1760 = !DILocation(line: 63, column: 13, scope: !1759)
!1761 = !DILocation(line: 64, column: 20, scope: !1762)
!1762 = distinct !DILexicalBlock(scope: !1759, file: !112, line: 64, column: 11)
!1763 = !DILocation(line: 64, column: 11, scope: !1762)
!1764 = !DILocation(line: 64, column: 36, scope: !1762)
!1765 = !DILocation(line: 64, column: 11, scope: !1759)
!1766 = !DILocation(line: 66, column: 19, scope: !1767)
!1767 = distinct !DILexicalBlock(scope: !1762, file: !112, line: 65, column: 9)
!1768 = !DILocation(line: 66, column: 24, scope: !1767)
!1769 = !DILocation(line: 66, column: 17, scope: !1767)
!1770 = !DILocation(line: 70, column: 52, scope: !1767)
!1771 = !DILocation(line: 70, column: 41, scope: !1767)
!1772 = !DILocation(line: 72, column: 9, scope: !1767)
!1773 = !DILocation(line: 73, column: 5, scope: !1759)
!1774 = !DILocation(line: 84, column: 18, scope: !1723)
!1775 = !DILocation(line: 84, column: 16, scope: !1723)
!1776 = !DILocation(line: 90, column: 38, scope: !1723)
!1777 = !DILocation(line: 90, column: 27, scope: !1723)
!1778 = !DILocation(line: 92, column: 1, scope: !1723)
!1779 = !DILocalVariable(name: "argv0", arg: 1, scope: !1780, file: !112, line: 39, type: !69)
!1780 = distinct !DISubprogram(name: "set_program_name", scope: !112, file: !112, line: 39, type: !343, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1781, retainedNodes: !4)
!1781 = distinct !DICompileUnit(language: DW_LANG_C99, file: !109, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !110, globals: !1782, nameTableKind: None)
!1782 = !{!1783}
!1783 = !DIGlobalVariableExpression(var: !1784, expr: !DIExpression())
!1784 = distinct !DIGlobalVariable(name: "program_name", scope: !1781, file: !112, line: 33, type: !69, isLocal: false, isDefinition: true)
!1785 = !DILocalVariable(name: "slash", scope: !1780, file: !112, line: 46, type: !69)
!1786 = !DILocalVariable(name: "base", scope: !1780, file: !112, line: 47, type: !69)
!1787 = distinct !DISubprogram(name: "set_char_quoting", scope: !139, file: !139, line: 152, type: !1788, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !115, retainedNodes: !4)
!1788 = !DISubroutineType(types: !1789)
!1789 = !{!72, !1790, !7, !72}
!1790 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !150, size: 64)
!1791 = !DILocalVariable(name: "o", arg: 1, scope: !1787, file: !139, line: 152, type: !1790)
!1792 = !DILocation(line: 152, column: 43, scope: !1787)
!1793 = !DILocalVariable(name: "c", arg: 2, scope: !1787, file: !139, line: 152, type: !7)
!1794 = !DILocation(line: 152, column: 51, scope: !1787)
!1795 = !DILocalVariable(name: "i", arg: 3, scope: !1787, file: !139, line: 152, type: !72)
!1796 = !DILocation(line: 152, column: 58, scope: !1787)
!1797 = !DILocalVariable(name: "uc", scope: !1787, file: !139, line: 154, type: !240)
!1798 = !DILocation(line: 154, column: 17, scope: !1787)
!1799 = !DILocation(line: 154, column: 22, scope: !1787)
!1800 = !DILocalVariable(name: "p", scope: !1787, file: !139, line: 155, type: !1801)
!1801 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64)
!1802 = !DILocation(line: 155, column: 17, scope: !1787)
!1803 = !DILocation(line: 156, column: 6, scope: !1787)
!1804 = !DILocation(line: 156, column: 10, scope: !1787)
!1805 = !DILocation(line: 156, column: 41, scope: !1787)
!1806 = !DILocation(line: 156, column: 5, scope: !1787)
!1807 = !DILocation(line: 156, column: 59, scope: !1787)
!1808 = !DILocation(line: 156, column: 62, scope: !1787)
!1809 = !DILocation(line: 156, column: 57, scope: !1787)
!1810 = !DILocalVariable(name: "shift", scope: !1787, file: !139, line: 157, type: !72)
!1811 = !DILocation(line: 157, column: 7, scope: !1787)
!1812 = !DILocation(line: 157, column: 15, scope: !1787)
!1813 = !DILocation(line: 157, column: 18, scope: !1787)
!1814 = !DILocalVariable(name: "r", scope: !1787, file: !139, line: 158, type: !72)
!1815 = !DILocation(line: 158, column: 7, scope: !1787)
!1816 = !DILocation(line: 158, column: 13, scope: !1787)
!1817 = !DILocation(line: 158, column: 12, scope: !1787)
!1818 = !DILocation(line: 158, column: 18, scope: !1787)
!1819 = !DILocation(line: 158, column: 15, scope: !1787)
!1820 = !DILocation(line: 158, column: 25, scope: !1787)
!1821 = !DILocation(line: 159, column: 11, scope: !1787)
!1822 = !DILocation(line: 159, column: 13, scope: !1787)
!1823 = !DILocation(line: 159, column: 20, scope: !1787)
!1824 = !DILocation(line: 159, column: 18, scope: !1787)
!1825 = !DILocation(line: 159, column: 26, scope: !1787)
!1826 = !DILocation(line: 159, column: 23, scope: !1787)
!1827 = !DILocation(line: 159, column: 4, scope: !1787)
!1828 = !DILocation(line: 159, column: 6, scope: !1787)
!1829 = !DILocation(line: 160, column: 10, scope: !1787)
!1830 = !DILocation(line: 160, column: 3, scope: !1787)
!1831 = !DILocalVariable(name: "o", arg: 1, scope: !1832, file: !139, line: 152, type: !1835)
!1832 = distinct !DISubprogram(name: "set_char_quoting", scope: !139, file: !139, line: 152, type: !1833, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1843, retainedNodes: !4)
!1833 = !DISubroutineType(types: !1834)
!1834 = !{!72, !1835, !7, !72}
!1835 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1836, size: 64)
!1836 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !1837)
!1837 = !{!1838, !1839, !1840, !1841, !1842}
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1836, file: !139, line: 68, baseType: !118, size: 32)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1836, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1836, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1836, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1836, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!1843 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !1844, nameTableKind: None)
!1844 = !{!1845, !1847, !1849, !1851, !1853, !1855, !1862, !1864}
!1845 = !DIGlobalVariableExpression(var: !1846, expr: !DIExpression())
!1846 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1843, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!1847 = !DIGlobalVariableExpression(var: !1848, expr: !DIExpression())
!1848 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1843, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!1849 = !DIGlobalVariableExpression(var: !1850, expr: !DIExpression())
!1850 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1843, file: !139, line: 1052, type: !1836, isLocal: false, isDefinition: true)
!1851 = !DIGlobalVariableExpression(var: !1852, expr: !DIExpression())
!1852 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1843, file: !139, line: 116, type: !1836, isLocal: true, isDefinition: true)
!1853 = !DIGlobalVariableExpression(var: !1854, expr: !DIExpression())
!1854 = distinct !DIGlobalVariable(name: "slot0", scope: !1843, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!1855 = !DIGlobalVariableExpression(var: !1856, expr: !DIExpression())
!1856 = distinct !DIGlobalVariable(name: "slotvec", scope: !1843, file: !139, line: 845, type: !1857, isLocal: true, isDefinition: true)
!1857 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1858, size: 64)
!1858 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !1859)
!1859 = !{!1860, !1861}
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1858, file: !139, line: 836, baseType: !134, size: 64)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1858, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!1862 = !DIGlobalVariableExpression(var: !1863, expr: !DIExpression())
!1863 = distinct !DIGlobalVariable(name: "nslots", scope: !1843, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!1864 = !DIGlobalVariableExpression(var: !1865, expr: !DIExpression())
!1865 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1843, file: !139, line: 844, type: !1858, isLocal: true, isDefinition: true)
!1866 = !DILocalVariable(name: "c", arg: 2, scope: !1832, file: !139, line: 152, type: !7)
!1867 = !DILocalVariable(name: "i", arg: 3, scope: !1832, file: !139, line: 152, type: !72)
!1868 = !DILocalVariable(name: "uc", scope: !1832, file: !139, line: 154, type: !240)
!1869 = !DILocalVariable(name: "p", scope: !1832, file: !139, line: 155, type: !1801)
!1870 = !DILocalVariable(name: "shift", scope: !1871, file: !139, line: 157, type: !72)
!1871 = distinct !DISubprogram(name: "set_char_quoting", scope: !139, file: !139, line: 152, type: !1872, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1882, retainedNodes: !4)
!1872 = !DISubroutineType(types: !1873)
!1873 = !{!72, !1874, !7, !72}
!1874 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1875, size: 64)
!1875 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !1876)
!1876 = !{!1877, !1878, !1879, !1880, !1881}
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1875, file: !139, line: 68, baseType: !118, size: 32)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1875, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1875, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1875, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1875, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!1882 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !1883, nameTableKind: None)
!1883 = !{!1884, !1886, !1888, !1890, !1892, !1894, !1901, !1903}
!1884 = !DIGlobalVariableExpression(var: !1885, expr: !DIExpression())
!1885 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1882, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!1886 = !DIGlobalVariableExpression(var: !1887, expr: !DIExpression())
!1887 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1882, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!1888 = !DIGlobalVariableExpression(var: !1889, expr: !DIExpression())
!1889 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1882, file: !139, line: 1052, type: !1875, isLocal: false, isDefinition: true)
!1890 = !DIGlobalVariableExpression(var: !1891, expr: !DIExpression())
!1891 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1882, file: !139, line: 116, type: !1875, isLocal: true, isDefinition: true)
!1892 = !DIGlobalVariableExpression(var: !1893, expr: !DIExpression())
!1893 = distinct !DIGlobalVariable(name: "slot0", scope: !1882, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!1894 = !DIGlobalVariableExpression(var: !1895, expr: !DIExpression())
!1895 = distinct !DIGlobalVariable(name: "slotvec", scope: !1882, file: !139, line: 845, type: !1896, isLocal: true, isDefinition: true)
!1896 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1897, size: 64)
!1897 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !1898)
!1898 = !{!1899, !1900}
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1897, file: !139, line: 836, baseType: !134, size: 64)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1897, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!1901 = !DIGlobalVariableExpression(var: !1902, expr: !DIExpression())
!1902 = distinct !DIGlobalVariable(name: "nslots", scope: !1882, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!1903 = !DIGlobalVariableExpression(var: !1904, expr: !DIExpression())
!1904 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1882, file: !139, line: 844, type: !1897, isLocal: true, isDefinition: true)
!1905 = !DILocalVariable(name: "r", scope: !1871, file: !139, line: 158, type: !72)
!1906 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !139, file: !139, line: 982, type: !1907, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !115, retainedNodes: !4)
!1907 = !DISubroutineType(types: !1908)
!1908 = !{!6, !69, !134, !7}
!1909 = !DILocalVariable(name: "arg", arg: 1, scope: !1906, file: !139, line: 982, type: !69)
!1910 = !DILocation(line: 982, column: 32, scope: !1906)
!1911 = !DILocalVariable(name: "argsize", arg: 2, scope: !1906, file: !139, line: 982, type: !134)
!1912 = !DILocation(line: 982, column: 44, scope: !1906)
!1913 = !DILocalVariable(name: "ch", arg: 3, scope: !1906, file: !139, line: 982, type: !7)
!1914 = !DILocation(line: 982, column: 58, scope: !1906)
!1915 = !DILocalVariable(name: "options", scope: !1906, file: !139, line: 984, type: !150)
!1916 = !DILocation(line: 984, column: 26, scope: !1906)
!1917 = !DILocation(line: 985, column: 13, scope: !1906)
!1918 = !DILocation(line: 986, column: 31, scope: !1906)
!1919 = !DILocation(line: 986, column: 3, scope: !1906)
!1920 = !DILocation(line: 987, column: 33, scope: !1906)
!1921 = !DILocation(line: 987, column: 38, scope: !1906)
!1922 = !DILocation(line: 987, column: 10, scope: !1906)
!1923 = !DILocation(line: 987, column: 3, scope: !1906)
!1924 = !DILocalVariable(name: "arg", arg: 1, scope: !1925, file: !139, line: 982, type: !69)
!1925 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !139, file: !139, line: 982, type: !1907, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1926, retainedNodes: !4)
!1926 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !1927, nameTableKind: None)
!1927 = !{!1928, !1930, !1932, !1941, !1943, !1945, !1952, !1954}
!1928 = !DIGlobalVariableExpression(var: !1929, expr: !DIExpression())
!1929 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1926, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!1930 = !DIGlobalVariableExpression(var: !1931, expr: !DIExpression())
!1931 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1926, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!1932 = !DIGlobalVariableExpression(var: !1933, expr: !DIExpression())
!1933 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1926, file: !139, line: 1052, type: !1934, isLocal: false, isDefinition: true)
!1934 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !1935)
!1935 = !{!1936, !1937, !1938, !1939, !1940}
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1934, file: !139, line: 68, baseType: !118, size: 32)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1934, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1934, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1934, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1934, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!1941 = !DIGlobalVariableExpression(var: !1942, expr: !DIExpression())
!1942 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1926, file: !139, line: 116, type: !1934, isLocal: true, isDefinition: true)
!1943 = !DIGlobalVariableExpression(var: !1944, expr: !DIExpression())
!1944 = distinct !DIGlobalVariable(name: "slot0", scope: !1926, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!1945 = !DIGlobalVariableExpression(var: !1946, expr: !DIExpression())
!1946 = distinct !DIGlobalVariable(name: "slotvec", scope: !1926, file: !139, line: 845, type: !1947, isLocal: true, isDefinition: true)
!1947 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1948, size: 64)
!1948 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !1949)
!1949 = !{!1950, !1951}
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1948, file: !139, line: 836, baseType: !134, size: 64)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1948, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!1952 = !DIGlobalVariableExpression(var: !1953, expr: !DIExpression())
!1953 = distinct !DIGlobalVariable(name: "nslots", scope: !1926, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!1954 = !DIGlobalVariableExpression(var: !1955, expr: !DIExpression())
!1955 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1926, file: !139, line: 844, type: !1948, isLocal: true, isDefinition: true)
!1956 = !DILocalVariable(name: "argsize", arg: 2, scope: !1925, file: !139, line: 982, type: !134)
!1957 = !DILocalVariable(name: "ch", arg: 3, scope: !1925, file: !139, line: 982, type: !7)
!1958 = !DILocalVariable(name: "options", scope: !1925, file: !139, line: 984, type: !1934)
!1959 = distinct !DISubprogram(name: "quotearg_n_options", scope: !139, file: !139, line: 877, type: !1960, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !115, retainedNodes: !4)
!1960 = !DISubroutineType(types: !1961)
!1961 = !{!6, !72, !69, !134, !1962}
!1962 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1963, size: 64)
!1963 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !150)
!1964 = !DILocalVariable(name: "n", arg: 1, scope: !1959, file: !139, line: 877, type: !72)
!1965 = !DILocation(line: 877, column: 25, scope: !1959)
!1966 = !DILocalVariable(name: "arg", arg: 2, scope: !1959, file: !139, line: 877, type: !69)
!1967 = !DILocation(line: 877, column: 40, scope: !1959)
!1968 = !DILocalVariable(name: "argsize", arg: 3, scope: !1959, file: !139, line: 877, type: !134)
!1969 = !DILocation(line: 877, column: 52, scope: !1959)
!1970 = !DILocalVariable(name: "options", arg: 4, scope: !1959, file: !139, line: 878, type: !1962)
!1971 = !DILocation(line: 878, column: 51, scope: !1959)
!1972 = !DILocalVariable(name: "e", scope: !1959, file: !139, line: 880, type: !72)
!1973 = !DILocation(line: 880, column: 7, scope: !1959)
!1974 = !DILocation(line: 880, column: 11, scope: !1959)
!1975 = !DILocalVariable(name: "sv", scope: !1959, file: !139, line: 882, type: !167)
!1976 = !DILocation(line: 882, column: 19, scope: !1959)
!1977 = !DILocation(line: 882, column: 24, scope: !1959)
!1978 = !DILocation(line: 884, column: 7, scope: !1979)
!1979 = distinct !DILexicalBlock(scope: !1959, file: !139, line: 884, column: 7)
!1980 = !DILocation(line: 884, column: 9, scope: !1979)
!1981 = !DILocation(line: 884, column: 7, scope: !1959)
!1982 = !DILocation(line: 885, column: 5, scope: !1979)
!1983 = !DILocation(line: 887, column: 7, scope: !1984)
!1984 = distinct !DILexicalBlock(scope: !1959, file: !139, line: 887, column: 7)
!1985 = !DILocation(line: 887, column: 17, scope: !1984)
!1986 = !DILocation(line: 887, column: 14, scope: !1984)
!1987 = !DILocation(line: 887, column: 7, scope: !1959)
!1988 = !DILocalVariable(name: "preallocated", scope: !1989, file: !139, line: 889, type: !27)
!1989 = distinct !DILexicalBlock(scope: !1984, file: !139, line: 888, column: 5)
!1990 = !DILocation(line: 889, column: 12, scope: !1989)
!1991 = !DILocation(line: 889, column: 28, scope: !1989)
!1992 = !DILocation(line: 889, column: 31, scope: !1989)
!1993 = !DILocalVariable(name: "nmax", scope: !1989, file: !139, line: 890, type: !72)
!1994 = !DILocation(line: 890, column: 11, scope: !1989)
!1995 = !DILocation(line: 892, column: 11, scope: !1996)
!1996 = distinct !DILexicalBlock(scope: !1989, file: !139, line: 892, column: 11)
!1997 = !DILocation(line: 892, column: 18, scope: !1996)
!1998 = !DILocation(line: 892, column: 16, scope: !1996)
!1999 = !DILocation(line: 892, column: 11, scope: !1989)
!2000 = !DILocation(line: 893, column: 9, scope: !1996)
!2001 = !DILocation(line: 895, column: 32, scope: !1989)
!2002 = !DILocation(line: 895, column: 54, scope: !1989)
!2003 = !DILocation(line: 895, column: 59, scope: !1989)
!2004 = !DILocation(line: 895, column: 61, scope: !1989)
!2005 = !DILocation(line: 895, column: 58, scope: !1989)
!2006 = !DILocation(line: 895, column: 66, scope: !1989)
!2007 = !DILocation(line: 895, column: 22, scope: !1989)
!2008 = !DILocation(line: 895, column: 20, scope: !1989)
!2009 = !DILocation(line: 895, column: 15, scope: !1989)
!2010 = !DILocation(line: 896, column: 11, scope: !2011)
!2011 = distinct !DILexicalBlock(scope: !1989, file: !139, line: 896, column: 11)
!2012 = !DILocation(line: 896, column: 11, scope: !1989)
!2013 = !DILocation(line: 897, column: 10, scope: !2011)
!2014 = !DILocation(line: 897, column: 15, scope: !2011)
!2015 = !DILocation(line: 897, column: 9, scope: !2011)
!2016 = !DILocation(line: 898, column: 15, scope: !1989)
!2017 = !DILocation(line: 898, column: 20, scope: !1989)
!2018 = !DILocation(line: 898, column: 18, scope: !1989)
!2019 = !DILocation(line: 898, column: 7, scope: !1989)
!2020 = !DILocation(line: 898, column: 32, scope: !1989)
!2021 = !DILocation(line: 898, column: 34, scope: !1989)
!2022 = !DILocation(line: 898, column: 40, scope: !1989)
!2023 = !DILocation(line: 898, column: 38, scope: !1989)
!2024 = !DILocation(line: 898, column: 31, scope: !1989)
!2025 = !DILocation(line: 898, column: 48, scope: !1989)
!2026 = !DILocation(line: 899, column: 16, scope: !1989)
!2027 = !DILocation(line: 899, column: 18, scope: !1989)
!2028 = !DILocation(line: 899, column: 14, scope: !1989)
!2029 = !DILocation(line: 900, column: 5, scope: !1989)
!2030 = !DILocalVariable(name: "size", scope: !2031, file: !139, line: 903, type: !134)
!2031 = distinct !DILexicalBlock(scope: !1959, file: !139, line: 902, column: 3)
!2032 = !DILocation(line: 903, column: 12, scope: !2031)
!2033 = !DILocation(line: 903, column: 19, scope: !2031)
!2034 = !DILocation(line: 903, column: 22, scope: !2031)
!2035 = !DILocation(line: 903, column: 25, scope: !2031)
!2036 = !DILocalVariable(name: "val", scope: !2031, file: !139, line: 904, type: !6)
!2037 = !DILocation(line: 904, column: 11, scope: !2031)
!2038 = !DILocation(line: 904, column: 17, scope: !2031)
!2039 = !DILocation(line: 904, column: 20, scope: !2031)
!2040 = !DILocation(line: 904, column: 23, scope: !2031)
!2041 = !DILocalVariable(name: "flags", scope: !2031, file: !139, line: 906, type: !72)
!2042 = !DILocation(line: 906, column: 9, scope: !2031)
!2043 = !DILocation(line: 906, column: 17, scope: !2031)
!2044 = !DILocation(line: 906, column: 26, scope: !2031)
!2045 = !DILocation(line: 906, column: 32, scope: !2031)
!2046 = !DILocalVariable(name: "qsize", scope: !2031, file: !139, line: 907, type: !134)
!2047 = !DILocation(line: 907, column: 12, scope: !2031)
!2048 = !DILocation(line: 907, column: 46, scope: !2031)
!2049 = !DILocation(line: 907, column: 51, scope: !2031)
!2050 = !DILocation(line: 907, column: 57, scope: !2031)
!2051 = !DILocation(line: 907, column: 62, scope: !2031)
!2052 = !DILocation(line: 908, column: 46, scope: !2031)
!2053 = !DILocation(line: 908, column: 55, scope: !2031)
!2054 = !DILocation(line: 908, column: 62, scope: !2031)
!2055 = !DILocation(line: 909, column: 46, scope: !2031)
!2056 = !DILocation(line: 909, column: 55, scope: !2031)
!2057 = !DILocation(line: 910, column: 46, scope: !2031)
!2058 = !DILocation(line: 910, column: 55, scope: !2031)
!2059 = !DILocation(line: 911, column: 46, scope: !2031)
!2060 = !DILocation(line: 911, column: 55, scope: !2031)
!2061 = !DILocation(line: 907, column: 20, scope: !2031)
!2062 = !DILocation(line: 913, column: 9, scope: !2063)
!2063 = distinct !DILexicalBlock(scope: !2031, file: !139, line: 913, column: 9)
!2064 = !DILocation(line: 913, column: 17, scope: !2063)
!2065 = !DILocation(line: 913, column: 14, scope: !2063)
!2066 = !DILocation(line: 913, column: 9, scope: !2031)
!2067 = !DILocation(line: 915, column: 29, scope: !2068)
!2068 = distinct !DILexicalBlock(scope: !2063, file: !139, line: 914, column: 7)
!2069 = !DILocation(line: 915, column: 35, scope: !2068)
!2070 = !DILocation(line: 915, column: 27, scope: !2068)
!2071 = !DILocation(line: 915, column: 9, scope: !2068)
!2072 = !DILocation(line: 915, column: 12, scope: !2068)
!2073 = !DILocation(line: 915, column: 15, scope: !2068)
!2074 = !DILocation(line: 915, column: 20, scope: !2068)
!2075 = !DILocation(line: 916, column: 13, scope: !2076)
!2076 = distinct !DILexicalBlock(scope: !2068, file: !139, line: 916, column: 13)
!2077 = !DILocation(line: 916, column: 17, scope: !2076)
!2078 = !DILocation(line: 916, column: 13, scope: !2068)
!2079 = !DILocation(line: 917, column: 17, scope: !2076)
!2080 = !DILocation(line: 917, column: 11, scope: !2076)
!2081 = !DILocation(line: 918, column: 39, scope: !2068)
!2082 = !DILocation(line: 918, column: 27, scope: !2068)
!2083 = !DILocation(line: 918, column: 25, scope: !2068)
!2084 = !DILocation(line: 918, column: 9, scope: !2068)
!2085 = !DILocation(line: 918, column: 12, scope: !2068)
!2086 = !DILocation(line: 918, column: 15, scope: !2068)
!2087 = !DILocation(line: 918, column: 19, scope: !2068)
!2088 = !DILocation(line: 919, column: 35, scope: !2068)
!2089 = !DILocation(line: 919, column: 40, scope: !2068)
!2090 = !DILocation(line: 919, column: 46, scope: !2068)
!2091 = !DILocation(line: 919, column: 51, scope: !2068)
!2092 = !DILocation(line: 919, column: 60, scope: !2068)
!2093 = !DILocation(line: 919, column: 69, scope: !2068)
!2094 = !DILocation(line: 920, column: 35, scope: !2068)
!2095 = !DILocation(line: 920, column: 42, scope: !2068)
!2096 = !DILocation(line: 920, column: 51, scope: !2068)
!2097 = !DILocation(line: 921, column: 35, scope: !2068)
!2098 = !DILocation(line: 921, column: 44, scope: !2068)
!2099 = !DILocation(line: 922, column: 35, scope: !2068)
!2100 = !DILocation(line: 922, column: 44, scope: !2068)
!2101 = !DILocation(line: 919, column: 9, scope: !2068)
!2102 = !DILocation(line: 923, column: 7, scope: !2068)
!2103 = !DILocation(line: 925, column: 13, scope: !2031)
!2104 = !DILocation(line: 925, column: 5, scope: !2031)
!2105 = !DILocation(line: 925, column: 11, scope: !2031)
!2106 = !DILocation(line: 926, column: 12, scope: !2031)
!2107 = !DILocation(line: 926, column: 5, scope: !2031)
!2108 = !DILocalVariable(name: "nmax", scope: !2109, file: !139, line: 890, type: !72)
!2109 = distinct !DILexicalBlock(scope: !2110, file: !139, line: 888, column: 5)
!2110 = distinct !DILexicalBlock(scope: !2111, file: !139, line: 887, column: 7)
!2111 = distinct !DISubprogram(name: "quotearg_n_options", scope: !139, file: !139, line: 877, type: !2112, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2123, retainedNodes: !4)
!2112 = !DISubroutineType(types: !2113)
!2113 = !{!6, !72, !69, !134, !2114}
!2114 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2115, size: 64)
!2115 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2116)
!2116 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !2117)
!2117 = !{!2118, !2119, !2120, !2121, !2122}
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2116, file: !139, line: 68, baseType: !118, size: 32)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2116, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2116, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2116, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2116, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!2123 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !2124, nameTableKind: None)
!2124 = !{!2125, !2127, !2129, !2131, !2133, !2135, !2142, !2144}
!2125 = !DIGlobalVariableExpression(var: !2126, expr: !DIExpression())
!2126 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2123, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!2127 = !DIGlobalVariableExpression(var: !2128, expr: !DIExpression())
!2128 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2123, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!2129 = !DIGlobalVariableExpression(var: !2130, expr: !DIExpression())
!2130 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2123, file: !139, line: 1052, type: !2116, isLocal: false, isDefinition: true)
!2131 = !DIGlobalVariableExpression(var: !2132, expr: !DIExpression())
!2132 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2123, file: !139, line: 116, type: !2116, isLocal: true, isDefinition: true)
!2133 = !DIGlobalVariableExpression(var: !2134, expr: !DIExpression())
!2134 = distinct !DIGlobalVariable(name: "slot0", scope: !2123, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!2135 = !DIGlobalVariableExpression(var: !2136, expr: !DIExpression())
!2136 = distinct !DIGlobalVariable(name: "slotvec", scope: !2123, file: !139, line: 845, type: !2137, isLocal: true, isDefinition: true)
!2137 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2138, size: 64)
!2138 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !2139)
!2139 = !{!2140, !2141}
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2138, file: !139, line: 836, baseType: !134, size: 64)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2138, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!2142 = !DIGlobalVariableExpression(var: !2143, expr: !DIExpression())
!2143 = distinct !DIGlobalVariable(name: "nslots", scope: !2123, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!2144 = !DIGlobalVariableExpression(var: !2145, expr: !DIExpression())
!2145 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2123, file: !139, line: 844, type: !2138, isLocal: true, isDefinition: true)
!2146 = !DILocalVariable(name: "val", scope: !2147, file: !139, line: 904, type: !6)
!2147 = distinct !DILexicalBlock(scope: !2148, file: !139, line: 902, column: 3)
!2148 = distinct !DISubprogram(name: "quotearg_n_options", scope: !139, file: !139, line: 877, type: !2149, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2160, retainedNodes: !4)
!2149 = !DISubroutineType(types: !2150)
!2150 = !{!6, !72, !69, !134, !2151}
!2151 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2152, size: 64)
!2152 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2153)
!2153 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !2154)
!2154 = !{!2155, !2156, !2157, !2158, !2159}
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2153, file: !139, line: 68, baseType: !118, size: 32)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2153, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2153, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2153, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2153, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!2160 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !2161, nameTableKind: None)
!2161 = !{!2162, !2164, !2166, !2168, !2170, !2172, !2179, !2181}
!2162 = !DIGlobalVariableExpression(var: !2163, expr: !DIExpression())
!2163 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2160, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!2164 = !DIGlobalVariableExpression(var: !2165, expr: !DIExpression())
!2165 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2160, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!2166 = !DIGlobalVariableExpression(var: !2167, expr: !DIExpression())
!2167 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2160, file: !139, line: 1052, type: !2153, isLocal: false, isDefinition: true)
!2168 = !DIGlobalVariableExpression(var: !2169, expr: !DIExpression())
!2169 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2160, file: !139, line: 116, type: !2153, isLocal: true, isDefinition: true)
!2170 = !DIGlobalVariableExpression(var: !2171, expr: !DIExpression())
!2171 = distinct !DIGlobalVariable(name: "slot0", scope: !2160, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!2172 = !DIGlobalVariableExpression(var: !2173, expr: !DIExpression())
!2173 = distinct !DIGlobalVariable(name: "slotvec", scope: !2160, file: !139, line: 845, type: !2174, isLocal: true, isDefinition: true)
!2174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2175, size: 64)
!2175 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !2176)
!2176 = !{!2177, !2178}
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2175, file: !139, line: 836, baseType: !134, size: 64)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2175, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!2179 = !DIGlobalVariableExpression(var: !2180, expr: !DIExpression())
!2180 = distinct !DIGlobalVariable(name: "nslots", scope: !2160, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!2181 = !DIGlobalVariableExpression(var: !2182, expr: !DIExpression())
!2182 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2160, file: !139, line: 844, type: !2175, isLocal: true, isDefinition: true)
!2183 = !DILocalVariable(name: "flags", scope: !2147, file: !139, line: 906, type: !72)
!2184 = !DILocalVariable(name: "qsize", scope: !2147, file: !139, line: 907, type: !134)
!2185 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !139, file: !139, line: 256, type: !2186, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !115, retainedNodes: !4)
!2186 = !DISubroutineType(types: !2187)
!2187 = !{!134, !6, !134, !69, !134, !118, !72, !2188, !69, !69}
!2188 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2189, size: 64)
!2189 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !16)
!2190 = !DILocalVariable(name: "buffer", arg: 1, scope: !2185, file: !139, line: 256, type: !6)
!2191 = !DILocation(line: 256, column: 33, scope: !2185)
!2192 = !DILocalVariable(name: "buffersize", arg: 2, scope: !2185, file: !139, line: 256, type: !134)
!2193 = !DILocation(line: 256, column: 48, scope: !2185)
!2194 = !DILocalVariable(name: "arg", arg: 3, scope: !2185, file: !139, line: 257, type: !69)
!2195 = !DILocation(line: 257, column: 39, scope: !2185)
!2196 = !DILocalVariable(name: "argsize", arg: 4, scope: !2185, file: !139, line: 257, type: !134)
!2197 = !DILocation(line: 257, column: 51, scope: !2185)
!2198 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !2185, file: !139, line: 258, type: !118)
!2199 = !DILocation(line: 258, column: 46, scope: !2185)
!2200 = !DILocalVariable(name: "flags", arg: 6, scope: !2185, file: !139, line: 258, type: !72)
!2201 = !DILocation(line: 258, column: 65, scope: !2185)
!2202 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !2185, file: !139, line: 259, type: !2188)
!2203 = !DILocation(line: 259, column: 47, scope: !2185)
!2204 = !DILocalVariable(name: "left_quote", arg: 8, scope: !2185, file: !139, line: 260, type: !69)
!2205 = !DILocation(line: 260, column: 39, scope: !2185)
!2206 = !DILocalVariable(name: "right_quote", arg: 9, scope: !2185, file: !139, line: 261, type: !69)
!2207 = !DILocation(line: 261, column: 39, scope: !2185)
!2208 = !DILocalVariable(name: "i", scope: !2185, file: !139, line: 263, type: !134)
!2209 = !DILocation(line: 263, column: 10, scope: !2185)
!2210 = !DILocalVariable(name: "len", scope: !2185, file: !139, line: 264, type: !134)
!2211 = !DILocation(line: 264, column: 10, scope: !2185)
!2212 = !DILocalVariable(name: "orig_buffersize", scope: !2185, file: !139, line: 265, type: !134)
!2213 = !DILocation(line: 265, column: 10, scope: !2185)
!2214 = !DILocalVariable(name: "quote_string", scope: !2185, file: !139, line: 266, type: !69)
!2215 = !DILocation(line: 266, column: 15, scope: !2185)
!2216 = !DILocalVariable(name: "quote_string_len", scope: !2185, file: !139, line: 267, type: !134)
!2217 = !DILocation(line: 267, column: 10, scope: !2185)
!2218 = !DILocalVariable(name: "backslash_escapes", scope: !2185, file: !139, line: 268, type: !27)
!2219 = !DILocation(line: 268, column: 8, scope: !2185)
!2220 = !DILocalVariable(name: "unibyte_locale", scope: !2185, file: !139, line: 269, type: !27)
!2221 = !DILocation(line: 269, column: 8, scope: !2185)
!2222 = !DILocation(line: 269, column: 25, scope: !2185)
!2223 = !DILocation(line: 269, column: 36, scope: !2185)
!2224 = !DILocalVariable(name: "elide_outer_quotes", scope: !2185, file: !139, line: 270, type: !27)
!2225 = !DILocation(line: 270, column: 8, scope: !2185)
!2226 = !DILocation(line: 270, column: 30, scope: !2185)
!2227 = !DILocation(line: 270, column: 36, scope: !2185)
!2228 = !DILocation(line: 270, column: 61, scope: !2185)
!2229 = !DILocalVariable(name: "pending_shell_escape_end", scope: !2185, file: !139, line: 271, type: !27)
!2230 = !DILocation(line: 271, column: 8, scope: !2185)
!2231 = !DILocalVariable(name: "encountered_single_quote", scope: !2185, file: !139, line: 272, type: !27)
!2232 = !DILocation(line: 272, column: 8, scope: !2185)
!2233 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !2185, file: !139, line: 273, type: !27)
!2234 = !DILocation(line: 273, column: 8, scope: !2185)
!2235 = !DILocation(line: 273, column: 3, scope: !2185)
!2236 = !DILabel(scope: !2185, name: "process_input", file: !139, line: 314)
!2237 = !DILocation(line: 314, column: 2, scope: !2185)
!2238 = !DILocation(line: 316, column: 11, scope: !2185)
!2239 = !DILocation(line: 316, column: 3, scope: !2185)
!2240 = !DILocation(line: 319, column: 21, scope: !2241)
!2241 = distinct !DILexicalBlock(scope: !2185, file: !139, line: 317, column: 5)
!2242 = !DILocation(line: 320, column: 26, scope: !2241)
!2243 = !DILocation(line: 321, column: 7, scope: !2241)
!2244 = !DILocation(line: 323, column: 12, scope: !2245)
!2245 = distinct !DILexicalBlock(scope: !2241, file: !139, line: 323, column: 11)
!2246 = !DILocation(line: 323, column: 11, scope: !2241)
!2247 = !DILocation(line: 324, column: 9, scope: !2245)
!2248 = !DILocation(line: 324, column: 9, scope: !2249)
!2249 = distinct !DILexicalBlock(scope: !2250, file: !139, line: 324, column: 9)
!2250 = distinct !DILexicalBlock(scope: !2245, file: !139, line: 324, column: 9)
!2251 = !DILocation(line: 324, column: 9, scope: !2250)
!2252 = !DILocation(line: 325, column: 25, scope: !2241)
!2253 = !DILocation(line: 326, column: 20, scope: !2241)
!2254 = !DILocation(line: 327, column: 24, scope: !2241)
!2255 = !DILocation(line: 328, column: 7, scope: !2241)
!2256 = !DILocation(line: 331, column: 25, scope: !2241)
!2257 = !DILocation(line: 332, column: 26, scope: !2241)
!2258 = !DILocation(line: 333, column: 7, scope: !2241)
!2259 = !DILocation(line: 339, column: 13, scope: !2260)
!2260 = distinct !DILexicalBlock(scope: !2261, file: !139, line: 339, column: 13)
!2261 = distinct !DILexicalBlock(scope: !2241, file: !139, line: 338, column: 7)
!2262 = !DILocation(line: 339, column: 27, scope: !2260)
!2263 = !DILocation(line: 339, column: 13, scope: !2261)
!2264 = !DILocation(line: 362, column: 50, scope: !2265)
!2265 = distinct !DILexicalBlock(scope: !2260, file: !139, line: 340, column: 11)
!2266 = !DILocation(line: 362, column: 26, scope: !2265)
!2267 = !DILocation(line: 362, column: 24, scope: !2265)
!2268 = !DILocation(line: 363, column: 51, scope: !2265)
!2269 = !DILocation(line: 363, column: 27, scope: !2265)
!2270 = !DILocation(line: 363, column: 25, scope: !2265)
!2271 = !DILocation(line: 364, column: 11, scope: !2265)
!2272 = !DILocation(line: 365, column: 14, scope: !2273)
!2273 = distinct !DILexicalBlock(scope: !2261, file: !139, line: 365, column: 13)
!2274 = !DILocation(line: 365, column: 13, scope: !2261)
!2275 = !DILocation(line: 366, column: 31, scope: !2276)
!2276 = distinct !DILexicalBlock(scope: !2273, file: !139, line: 366, column: 11)
!2277 = !DILocation(line: 366, column: 29, scope: !2276)
!2278 = !DILocation(line: 366, column: 16, scope: !2276)
!2279 = !DILocation(line: 366, column: 44, scope: !2280)
!2280 = distinct !DILexicalBlock(scope: !2276, file: !139, line: 366, column: 11)
!2281 = !DILocation(line: 366, column: 43, scope: !2280)
!2282 = !DILocation(line: 366, column: 11, scope: !2276)
!2283 = !DILocation(line: 367, column: 13, scope: !2280)
!2284 = !DILocation(line: 367, column: 13, scope: !2285)
!2285 = distinct !DILexicalBlock(scope: !2286, file: !139, line: 367, column: 13)
!2286 = distinct !DILexicalBlock(scope: !2280, file: !139, line: 367, column: 13)
!2287 = !DILocation(line: 367, column: 13, scope: !2286)
!2288 = !DILocation(line: 366, column: 70, scope: !2280)
!2289 = !DILocation(line: 366, column: 11, scope: !2280)
!2290 = distinct !{!2290, !2282, !2291}
!2291 = !DILocation(line: 367, column: 13, scope: !2276)
!2292 = !DILocation(line: 368, column: 27, scope: !2261)
!2293 = !DILocation(line: 369, column: 24, scope: !2261)
!2294 = !DILocation(line: 369, column: 22, scope: !2261)
!2295 = !DILocation(line: 370, column: 36, scope: !2261)
!2296 = !DILocation(line: 370, column: 28, scope: !2261)
!2297 = !DILocation(line: 370, column: 26, scope: !2261)
!2298 = !DILocation(line: 372, column: 7, scope: !2241)
!2299 = !DILocation(line: 375, column: 25, scope: !2241)
!2300 = !DILocation(line: 376, column: 7, scope: !2241)
!2301 = !DILocation(line: 378, column: 26, scope: !2241)
!2302 = !DILocation(line: 379, column: 7, scope: !2241)
!2303 = !DILocation(line: 381, column: 12, scope: !2304)
!2304 = distinct !DILexicalBlock(scope: !2241, file: !139, line: 381, column: 11)
!2305 = !DILocation(line: 381, column: 11, scope: !2241)
!2306 = !DILocation(line: 382, column: 27, scope: !2304)
!2307 = !DILocation(line: 382, column: 9, scope: !2304)
!2308 = !DILocation(line: 383, column: 7, scope: !2241)
!2309 = !DILocation(line: 385, column: 21, scope: !2241)
!2310 = !DILocation(line: 386, column: 12, scope: !2311)
!2311 = distinct !DILexicalBlock(scope: !2241, file: !139, line: 386, column: 11)
!2312 = !DILocation(line: 386, column: 11, scope: !2241)
!2313 = !DILocation(line: 387, column: 9, scope: !2311)
!2314 = !DILocation(line: 387, column: 9, scope: !2315)
!2315 = distinct !DILexicalBlock(scope: !2316, file: !139, line: 387, column: 9)
!2316 = distinct !DILexicalBlock(scope: !2311, file: !139, line: 387, column: 9)
!2317 = !DILocation(line: 387, column: 9, scope: !2316)
!2318 = !DILocation(line: 388, column: 20, scope: !2241)
!2319 = !DILocation(line: 389, column: 24, scope: !2241)
!2320 = !DILocation(line: 390, column: 7, scope: !2241)
!2321 = !DILocation(line: 393, column: 26, scope: !2241)
!2322 = !DILocation(line: 394, column: 7, scope: !2241)
!2323 = !DILocation(line: 397, column: 7, scope: !2241)
!2324 = !DILocation(line: 400, column: 10, scope: !2325)
!2325 = distinct !DILexicalBlock(scope: !2185, file: !139, line: 400, column: 3)
!2326 = !DILocation(line: 400, column: 8, scope: !2325)
!2327 = !DILocation(line: 400, column: 19, scope: !2328)
!2328 = distinct !DILexicalBlock(scope: !2325, file: !139, line: 400, column: 3)
!2329 = !DILocation(line: 400, column: 27, scope: !2328)
!2330 = !DILocation(line: 400, column: 41, scope: !2328)
!2331 = !DILocation(line: 400, column: 45, scope: !2328)
!2332 = !DILocation(line: 400, column: 48, scope: !2328)
!2333 = !DILocation(line: 400, column: 58, scope: !2328)
!2334 = !DILocation(line: 400, column: 63, scope: !2328)
!2335 = !DILocation(line: 400, column: 60, scope: !2328)
!2336 = !DILocation(line: 400, column: 16, scope: !2328)
!2337 = !DILocation(line: 400, column: 3, scope: !2325)
!2338 = !DILocalVariable(name: "c", scope: !2339, file: !139, line: 402, type: !240)
!2339 = distinct !DILexicalBlock(scope: !2328, file: !139, line: 401, column: 5)
!2340 = !DILocation(line: 402, column: 21, scope: !2339)
!2341 = !DILocalVariable(name: "esc", scope: !2339, file: !139, line: 403, type: !240)
!2342 = !DILocation(line: 403, column: 21, scope: !2339)
!2343 = !DILocalVariable(name: "is_right_quote", scope: !2339, file: !139, line: 404, type: !27)
!2344 = !DILocation(line: 404, column: 12, scope: !2339)
!2345 = !DILocalVariable(name: "escaping", scope: !2339, file: !139, line: 405, type: !27)
!2346 = !DILocation(line: 405, column: 12, scope: !2339)
!2347 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !2339, file: !139, line: 406, type: !27)
!2348 = !DILocation(line: 406, column: 12, scope: !2339)
!2349 = !DILocation(line: 408, column: 11, scope: !2350)
!2350 = distinct !DILexicalBlock(scope: !2339, file: !139, line: 408, column: 11)
!2351 = !DILocation(line: 409, column: 11, scope: !2350)
!2352 = !DILocation(line: 409, column: 14, scope: !2350)
!2353 = !DILocation(line: 409, column: 28, scope: !2350)
!2354 = !DILocation(line: 410, column: 11, scope: !2350)
!2355 = !DILocation(line: 410, column: 14, scope: !2350)
!2356 = !DILocation(line: 411, column: 11, scope: !2350)
!2357 = !DILocation(line: 411, column: 15, scope: !2350)
!2358 = !DILocation(line: 411, column: 19, scope: !2350)
!2359 = !DILocation(line: 411, column: 17, scope: !2350)
!2360 = !DILocation(line: 412, column: 19, scope: !2350)
!2361 = !DILocation(line: 412, column: 27, scope: !2350)
!2362 = !DILocation(line: 412, column: 39, scope: !2350)
!2363 = !DILocation(line: 412, column: 46, scope: !2350)
!2364 = !DILocation(line: 412, column: 44, scope: !2350)
!2365 = !DILocation(line: 416, column: 40, scope: !2350)
!2366 = !DILocation(line: 416, column: 32, scope: !2350)
!2367 = !DILocation(line: 416, column: 30, scope: !2350)
!2368 = !DILocation(line: 416, column: 48, scope: !2350)
!2369 = !DILocation(line: 412, column: 15, scope: !2350)
!2370 = !DILocation(line: 417, column: 11, scope: !2350)
!2371 = !DILocation(line: 417, column: 22, scope: !2350)
!2372 = !DILocation(line: 417, column: 28, scope: !2350)
!2373 = !DILocation(line: 417, column: 26, scope: !2350)
!2374 = !DILocation(line: 417, column: 31, scope: !2350)
!2375 = !DILocation(line: 417, column: 45, scope: !2350)
!2376 = !DILocation(line: 417, column: 14, scope: !2350)
!2377 = !DILocation(line: 417, column: 63, scope: !2350)
!2378 = !DILocation(line: 408, column: 11, scope: !2339)
!2379 = !DILocation(line: 419, column: 15, scope: !2380)
!2380 = distinct !DILexicalBlock(scope: !2381, file: !139, line: 419, column: 15)
!2381 = distinct !DILexicalBlock(scope: !2350, file: !139, line: 418, column: 9)
!2382 = !DILocation(line: 419, column: 15, scope: !2381)
!2383 = !DILocation(line: 420, column: 13, scope: !2380)
!2384 = !DILocation(line: 421, column: 26, scope: !2381)
!2385 = !DILocation(line: 422, column: 9, scope: !2381)
!2386 = !DILocation(line: 424, column: 11, scope: !2339)
!2387 = !DILocation(line: 424, column: 15, scope: !2339)
!2388 = !DILocation(line: 424, column: 9, scope: !2339)
!2389 = !DILocation(line: 425, column: 15, scope: !2339)
!2390 = !DILocation(line: 425, column: 7, scope: !2339)
!2391 = !DILocation(line: 428, column: 15, scope: !2392)
!2392 = distinct !DILexicalBlock(scope: !2393, file: !139, line: 428, column: 15)
!2393 = distinct !DILexicalBlock(scope: !2339, file: !139, line: 426, column: 9)
!2394 = !DILocation(line: 428, column: 15, scope: !2393)
!2395 = !DILocation(line: 430, column: 15, scope: !2396)
!2396 = distinct !DILexicalBlock(scope: !2392, file: !139, line: 429, column: 13)
!2397 = !DILocation(line: 430, column: 15, scope: !2398)
!2398 = distinct !DILexicalBlock(scope: !2399, file: !139, line: 430, column: 15)
!2399 = distinct !DILexicalBlock(scope: !2396, file: !139, line: 430, column: 15)
!2400 = !DILocation(line: 430, column: 15, scope: !2399)
!2401 = !DILocation(line: 430, column: 15, scope: !2402)
!2402 = distinct !DILexicalBlock(scope: !2399, file: !139, line: 430, column: 15)
!2403 = !DILocation(line: 430, column: 15, scope: !2404)
!2404 = distinct !DILexicalBlock(scope: !2402, file: !139, line: 430, column: 15)
!2405 = !DILocation(line: 430, column: 15, scope: !2406)
!2406 = distinct !DILexicalBlock(scope: !2407, file: !139, line: 430, column: 15)
!2407 = distinct !DILexicalBlock(scope: !2404, file: !139, line: 430, column: 15)
!2408 = !DILocation(line: 430, column: 15, scope: !2407)
!2409 = !DILocation(line: 430, column: 15, scope: !2410)
!2410 = distinct !DILexicalBlock(scope: !2411, file: !139, line: 430, column: 15)
!2411 = distinct !DILexicalBlock(scope: !2404, file: !139, line: 430, column: 15)
!2412 = !DILocation(line: 430, column: 15, scope: !2411)
!2413 = !DILocation(line: 430, column: 15, scope: !2414)
!2414 = distinct !DILexicalBlock(scope: !2415, file: !139, line: 430, column: 15)
!2415 = distinct !DILexicalBlock(scope: !2404, file: !139, line: 430, column: 15)
!2416 = !DILocation(line: 430, column: 15, scope: !2415)
!2417 = !DILocation(line: 430, column: 15, scope: !2418)
!2418 = distinct !DILexicalBlock(scope: !2419, file: !139, line: 430, column: 15)
!2419 = distinct !DILexicalBlock(scope: !2399, file: !139, line: 430, column: 15)
!2420 = !DILocation(line: 430, column: 15, scope: !2419)
!2421 = !DILocation(line: 437, column: 19, scope: !2422)
!2422 = distinct !DILexicalBlock(scope: !2396, file: !139, line: 437, column: 19)
!2423 = !DILocation(line: 437, column: 33, scope: !2422)
!2424 = !DILocation(line: 438, column: 19, scope: !2422)
!2425 = !DILocation(line: 438, column: 22, scope: !2422)
!2426 = !DILocation(line: 438, column: 24, scope: !2422)
!2427 = !DILocation(line: 438, column: 30, scope: !2422)
!2428 = !DILocation(line: 438, column: 28, scope: !2422)
!2429 = !DILocation(line: 438, column: 38, scope: !2422)
!2430 = !DILocation(line: 438, column: 48, scope: !2422)
!2431 = !DILocation(line: 438, column: 52, scope: !2422)
!2432 = !DILocation(line: 438, column: 54, scope: !2422)
!2433 = !DILocation(line: 438, column: 45, scope: !2422)
!2434 = !DILocation(line: 438, column: 59, scope: !2422)
!2435 = !DILocation(line: 438, column: 62, scope: !2422)
!2436 = !DILocation(line: 438, column: 66, scope: !2422)
!2437 = !DILocation(line: 438, column: 68, scope: !2422)
!2438 = !DILocation(line: 438, column: 73, scope: !2422)
!2439 = !DILocation(line: 437, column: 19, scope: !2396)
!2440 = !DILocation(line: 440, column: 19, scope: !2441)
!2441 = distinct !DILexicalBlock(scope: !2422, file: !139, line: 439, column: 17)
!2442 = !DILocation(line: 440, column: 19, scope: !2443)
!2443 = distinct !DILexicalBlock(scope: !2444, file: !139, line: 440, column: 19)
!2444 = distinct !DILexicalBlock(scope: !2441, file: !139, line: 440, column: 19)
!2445 = !DILocation(line: 440, column: 19, scope: !2444)
!2446 = !DILocation(line: 441, column: 19, scope: !2441)
!2447 = !DILocation(line: 441, column: 19, scope: !2448)
!2448 = distinct !DILexicalBlock(scope: !2449, file: !139, line: 441, column: 19)
!2449 = distinct !DILexicalBlock(scope: !2441, file: !139, line: 441, column: 19)
!2450 = !DILocation(line: 441, column: 19, scope: !2449)
!2451 = !DILocation(line: 442, column: 17, scope: !2441)
!2452 = !DILocation(line: 443, column: 17, scope: !2396)
!2453 = !DILocation(line: 448, column: 13, scope: !2396)
!2454 = !DILocation(line: 449, column: 20, scope: !2455)
!2455 = distinct !DILexicalBlock(scope: !2392, file: !139, line: 449, column: 20)
!2456 = !DILocation(line: 449, column: 26, scope: !2455)
!2457 = !DILocation(line: 449, column: 20, scope: !2392)
!2458 = !DILocation(line: 450, column: 13, scope: !2455)
!2459 = !DILocation(line: 451, column: 11, scope: !2393)
!2460 = !DILocation(line: 454, column: 19, scope: !2393)
!2461 = !DILocation(line: 454, column: 11, scope: !2393)
!2462 = !DILocation(line: 457, column: 19, scope: !2463)
!2463 = distinct !DILexicalBlock(scope: !2464, file: !139, line: 457, column: 19)
!2464 = distinct !DILexicalBlock(scope: !2393, file: !139, line: 455, column: 13)
!2465 = !DILocation(line: 457, column: 19, scope: !2464)
!2466 = !DILocation(line: 458, column: 17, scope: !2463)
!2467 = !DILocation(line: 459, column: 15, scope: !2464)
!2468 = !DILocation(line: 462, column: 20, scope: !2469)
!2469 = distinct !DILexicalBlock(scope: !2464, file: !139, line: 462, column: 19)
!2470 = !DILocation(line: 462, column: 26, scope: !2469)
!2471 = !DILocation(line: 463, column: 19, scope: !2469)
!2472 = !DILocation(line: 463, column: 22, scope: !2469)
!2473 = !DILocation(line: 463, column: 24, scope: !2469)
!2474 = !DILocation(line: 463, column: 30, scope: !2469)
!2475 = !DILocation(line: 463, column: 28, scope: !2469)
!2476 = !DILocation(line: 463, column: 38, scope: !2469)
!2477 = !DILocation(line: 463, column: 41, scope: !2469)
!2478 = !DILocation(line: 463, column: 45, scope: !2469)
!2479 = !DILocation(line: 463, column: 47, scope: !2469)
!2480 = !DILocation(line: 463, column: 52, scope: !2469)
!2481 = !DILocation(line: 462, column: 19, scope: !2464)
!2482 = !DILocation(line: 464, column: 25, scope: !2469)
!2483 = !DILocation(line: 464, column: 29, scope: !2469)
!2484 = !DILocation(line: 464, column: 31, scope: !2469)
!2485 = !DILocation(line: 464, column: 17, scope: !2469)
!2486 = !DILocation(line: 471, column: 25, scope: !2487)
!2487 = distinct !DILexicalBlock(scope: !2488, file: !139, line: 471, column: 25)
!2488 = distinct !DILexicalBlock(scope: !2469, file: !139, line: 465, column: 19)
!2489 = !DILocation(line: 471, column: 25, scope: !2488)
!2490 = !DILocation(line: 472, column: 23, scope: !2487)
!2491 = !DILocation(line: 473, column: 25, scope: !2488)
!2492 = !DILocation(line: 473, column: 29, scope: !2488)
!2493 = !DILocation(line: 473, column: 31, scope: !2488)
!2494 = !DILocation(line: 473, column: 23, scope: !2488)
!2495 = !DILocation(line: 474, column: 23, scope: !2488)
!2496 = !DILocation(line: 475, column: 21, scope: !2488)
!2497 = !DILocation(line: 475, column: 21, scope: !2498)
!2498 = distinct !DILexicalBlock(scope: !2499, file: !139, line: 475, column: 21)
!2499 = distinct !DILexicalBlock(scope: !2488, file: !139, line: 475, column: 21)
!2500 = !DILocation(line: 475, column: 21, scope: !2499)
!2501 = !DILocation(line: 476, column: 21, scope: !2488)
!2502 = !DILocation(line: 476, column: 21, scope: !2503)
!2503 = distinct !DILexicalBlock(scope: !2504, file: !139, line: 476, column: 21)
!2504 = distinct !DILexicalBlock(scope: !2488, file: !139, line: 476, column: 21)
!2505 = !DILocation(line: 476, column: 21, scope: !2504)
!2506 = !DILocation(line: 477, column: 21, scope: !2488)
!2507 = !DILocation(line: 477, column: 21, scope: !2508)
!2508 = distinct !DILexicalBlock(scope: !2509, file: !139, line: 477, column: 21)
!2509 = distinct !DILexicalBlock(scope: !2488, file: !139, line: 477, column: 21)
!2510 = !DILocation(line: 477, column: 21, scope: !2509)
!2511 = !DILocation(line: 478, column: 21, scope: !2488)
!2512 = !DILocation(line: 478, column: 21, scope: !2513)
!2513 = distinct !DILexicalBlock(scope: !2514, file: !139, line: 478, column: 21)
!2514 = distinct !DILexicalBlock(scope: !2488, file: !139, line: 478, column: 21)
!2515 = !DILocation(line: 478, column: 21, scope: !2514)
!2516 = !DILocation(line: 479, column: 21, scope: !2488)
!2517 = !DILocation(line: 482, column: 21, scope: !2488)
!2518 = !DILocation(line: 483, column: 19, scope: !2488)
!2519 = !DILocation(line: 484, column: 15, scope: !2464)
!2520 = !DILocation(line: 487, column: 15, scope: !2464)
!2521 = !DILocation(line: 489, column: 11, scope: !2393)
!2522 = !DILocation(line: 491, column: 24, scope: !2393)
!2523 = !DILocation(line: 491, column: 31, scope: !2393)
!2524 = !DILocation(line: 492, column: 24, scope: !2393)
!2525 = !DILocation(line: 492, column: 31, scope: !2393)
!2526 = !DILocation(line: 493, column: 24, scope: !2393)
!2527 = !DILocation(line: 493, column: 31, scope: !2393)
!2528 = !DILocation(line: 494, column: 24, scope: !2393)
!2529 = !DILocation(line: 494, column: 31, scope: !2393)
!2530 = !DILocation(line: 495, column: 24, scope: !2393)
!2531 = !DILocation(line: 495, column: 31, scope: !2393)
!2532 = !DILocation(line: 496, column: 24, scope: !2393)
!2533 = !DILocation(line: 496, column: 31, scope: !2393)
!2534 = !DILocation(line: 497, column: 24, scope: !2393)
!2535 = !DILocation(line: 497, column: 31, scope: !2393)
!2536 = !DILocation(line: 498, column: 26, scope: !2393)
!2537 = !DILocation(line: 498, column: 24, scope: !2393)
!2538 = !DILocation(line: 500, column: 15, scope: !2539)
!2539 = distinct !DILexicalBlock(scope: !2393, file: !139, line: 500, column: 15)
!2540 = !DILocation(line: 500, column: 29, scope: !2539)
!2541 = !DILocation(line: 500, column: 15, scope: !2393)
!2542 = !DILocation(line: 502, column: 19, scope: !2543)
!2543 = distinct !DILexicalBlock(scope: !2544, file: !139, line: 502, column: 19)
!2544 = distinct !DILexicalBlock(scope: !2539, file: !139, line: 501, column: 13)
!2545 = !DILocation(line: 502, column: 19, scope: !2544)
!2546 = !DILocation(line: 503, column: 17, scope: !2543)
!2547 = !DILocation(line: 504, column: 15, scope: !2544)
!2548 = !DILocation(line: 509, column: 15, scope: !2549)
!2549 = distinct !DILexicalBlock(scope: !2393, file: !139, line: 509, column: 15)
!2550 = !DILocation(line: 509, column: 33, scope: !2549)
!2551 = !DILocation(line: 509, column: 36, scope: !2549)
!2552 = !DILocation(line: 509, column: 55, scope: !2549)
!2553 = !DILocation(line: 509, column: 58, scope: !2549)
!2554 = !DILocation(line: 509, column: 15, scope: !2393)
!2555 = !DILocation(line: 510, column: 13, scope: !2549)
!2556 = !DILabel(scope: !2393, name: "c_and_shell_escape", file: !139, line: 512)
!2557 = !DILocation(line: 512, column: 9, scope: !2393)
!2558 = !DILocation(line: 513, column: 15, scope: !2559)
!2559 = distinct !DILexicalBlock(scope: !2393, file: !139, line: 513, column: 15)
!2560 = !DILocation(line: 513, column: 29, scope: !2559)
!2561 = !DILocation(line: 514, column: 15, scope: !2559)
!2562 = !DILocation(line: 514, column: 18, scope: !2559)
!2563 = !DILocation(line: 513, column: 15, scope: !2393)
!2564 = !DILocation(line: 515, column: 13, scope: !2559)
!2565 = !DILabel(scope: !2393, name: "c_escape", file: !139, line: 517)
!2566 = !DILocation(line: 517, column: 9, scope: !2393)
!2567 = !DILocation(line: 518, column: 15, scope: !2568)
!2568 = distinct !DILexicalBlock(scope: !2393, file: !139, line: 518, column: 15)
!2569 = !DILocation(line: 518, column: 15, scope: !2393)
!2570 = !DILocation(line: 520, column: 19, scope: !2571)
!2571 = distinct !DILexicalBlock(scope: !2568, file: !139, line: 519, column: 13)
!2572 = !DILocation(line: 520, column: 17, scope: !2571)
!2573 = !DILocation(line: 521, column: 15, scope: !2571)
!2574 = !DILocation(line: 523, column: 11, scope: !2393)
!2575 = !DILocation(line: 526, column: 18, scope: !2576)
!2576 = distinct !DILexicalBlock(scope: !2393, file: !139, line: 526, column: 15)
!2577 = !DILocation(line: 526, column: 26, scope: !2576)
!2578 = !DILocation(line: 526, column: 15, scope: !2393)
!2579 = !DILocation(line: 526, column: 40, scope: !2576)
!2580 = !DILocation(line: 526, column: 47, scope: !2576)
!2581 = !DILocation(line: 526, column: 57, scope: !2576)
!2582 = !DILocation(line: 526, column: 65, scope: !2576)
!2583 = !DILocation(line: 527, column: 13, scope: !2576)
!2584 = !DILocation(line: 528, column: 11, scope: !2393)
!2585 = !DILocation(line: 530, column: 15, scope: !2586)
!2586 = distinct !DILexicalBlock(scope: !2393, file: !139, line: 530, column: 15)
!2587 = !DILocation(line: 530, column: 17, scope: !2586)
!2588 = !DILocation(line: 530, column: 15, scope: !2393)
!2589 = !DILocation(line: 531, column: 13, scope: !2586)
!2590 = !DILocation(line: 532, column: 11, scope: !2393)
!2591 = !DILocation(line: 534, column: 36, scope: !2393)
!2592 = !DILocation(line: 535, column: 11, scope: !2393)
!2593 = !DILocation(line: 548, column: 15, scope: !2594)
!2594 = distinct !DILexicalBlock(scope: !2393, file: !139, line: 548, column: 15)
!2595 = !DILocation(line: 548, column: 29, scope: !2594)
!2596 = !DILocation(line: 549, column: 15, scope: !2594)
!2597 = !DILocation(line: 549, column: 18, scope: !2594)
!2598 = !DILocation(line: 548, column: 15, scope: !2393)
!2599 = !DILocation(line: 550, column: 13, scope: !2594)
!2600 = !DILocation(line: 551, column: 11, scope: !2393)
!2601 = !DILocation(line: 554, column: 36, scope: !2393)
!2602 = !DILocation(line: 555, column: 36, scope: !2393)
!2603 = !DILocation(line: 556, column: 15, scope: !2604)
!2604 = distinct !DILexicalBlock(scope: !2393, file: !139, line: 556, column: 15)
!2605 = !DILocation(line: 556, column: 29, scope: !2604)
!2606 = !DILocation(line: 556, column: 15, scope: !2393)
!2607 = !DILocation(line: 558, column: 19, scope: !2608)
!2608 = distinct !DILexicalBlock(scope: !2609, file: !139, line: 558, column: 19)
!2609 = distinct !DILexicalBlock(scope: !2604, file: !139, line: 557, column: 13)
!2610 = !DILocation(line: 558, column: 19, scope: !2609)
!2611 = !DILocation(line: 559, column: 17, scope: !2608)
!2612 = !DILocation(line: 561, column: 19, scope: !2613)
!2613 = distinct !DILexicalBlock(scope: !2609, file: !139, line: 561, column: 19)
!2614 = !DILocation(line: 561, column: 30, scope: !2613)
!2615 = !DILocation(line: 561, column: 35, scope: !2613)
!2616 = !DILocation(line: 561, column: 19, scope: !2609)
!2617 = !DILocation(line: 566, column: 37, scope: !2618)
!2618 = distinct !DILexicalBlock(scope: !2613, file: !139, line: 562, column: 17)
!2619 = !DILocation(line: 566, column: 35, scope: !2618)
!2620 = !DILocation(line: 567, column: 30, scope: !2618)
!2621 = !DILocation(line: 568, column: 17, scope: !2618)
!2622 = !DILocation(line: 570, column: 15, scope: !2609)
!2623 = !DILocation(line: 570, column: 15, scope: !2624)
!2624 = distinct !DILexicalBlock(scope: !2625, file: !139, line: 570, column: 15)
!2625 = distinct !DILexicalBlock(scope: !2609, file: !139, line: 570, column: 15)
!2626 = !DILocation(line: 570, column: 15, scope: !2625)
!2627 = !DILocation(line: 571, column: 15, scope: !2609)
!2628 = !DILocation(line: 571, column: 15, scope: !2629)
!2629 = distinct !DILexicalBlock(scope: !2630, file: !139, line: 571, column: 15)
!2630 = distinct !DILexicalBlock(scope: !2609, file: !139, line: 571, column: 15)
!2631 = !DILocation(line: 571, column: 15, scope: !2630)
!2632 = !DILocation(line: 572, column: 15, scope: !2609)
!2633 = !DILocation(line: 572, column: 15, scope: !2634)
!2634 = distinct !DILexicalBlock(scope: !2635, file: !139, line: 572, column: 15)
!2635 = distinct !DILexicalBlock(scope: !2609, file: !139, line: 572, column: 15)
!2636 = !DILocation(line: 572, column: 15, scope: !2635)
!2637 = !DILocation(line: 573, column: 40, scope: !2609)
!2638 = !DILocation(line: 574, column: 13, scope: !2609)
!2639 = !DILocation(line: 575, column: 11, scope: !2393)
!2640 = !DILocation(line: 599, column: 36, scope: !2393)
!2641 = !DILocation(line: 600, column: 11, scope: !2393)
!2642 = !DILocalVariable(name: "m", scope: !2643, file: !139, line: 610, type: !134)
!2643 = distinct !DILexicalBlock(scope: !2393, file: !139, line: 608, column: 11)
!2644 = !DILocation(line: 610, column: 20, scope: !2643)
!2645 = !DILocalVariable(name: "printable", scope: !2643, file: !139, line: 612, type: !27)
!2646 = !DILocation(line: 612, column: 18, scope: !2643)
!2647 = !DILocation(line: 614, column: 17, scope: !2648)
!2648 = distinct !DILexicalBlock(scope: !2643, file: !139, line: 614, column: 17)
!2649 = !DILocation(line: 614, column: 17, scope: !2643)
!2650 = !DILocation(line: 616, column: 19, scope: !2651)
!2651 = distinct !DILexicalBlock(scope: !2648, file: !139, line: 615, column: 15)
!2652 = !DILocation(line: 617, column: 29, scope: !2651)
!2653 = !DILocation(line: 617, column: 41, scope: !2651)
!2654 = !DILocation(line: 617, column: 27, scope: !2651)
!2655 = !DILocation(line: 618, column: 15, scope: !2651)
!2656 = !DILocalVariable(name: "mbstate", scope: !2657, file: !139, line: 621, type: !2658)
!2657 = distinct !DILexicalBlock(scope: !2648, file: !139, line: 620, column: 15)
!2658 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !2659, line: 6, baseType: !2660)
!2659 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "")
!2660 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !2661, line: 21, baseType: !2662)
!2661 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "")
!2662 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2661, line: 13, size: 64, elements: !2663)
!2663 = !{!2664, !2665}
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !2662, file: !2661, line: 15, baseType: !72, size: 32)
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !2662, file: !2661, line: 20, baseType: !2666, size: 32, offset: 32)
!2666 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2662, file: !2661, line: 16, size: 32, elements: !2667)
!2667 = !{!2668, !2669}
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !2666, file: !2661, line: 18, baseType: !16, size: 32)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !2666, file: !2661, line: 19, baseType: !2670, size: 32)
!2670 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 32, elements: !2671)
!2671 = !{!2672}
!2672 = !DISubrange(count: 4)
!2673 = !DILocation(line: 621, column: 27, scope: !2657)
!2674 = !DILocation(line: 622, column: 17, scope: !2657)
!2675 = !DILocation(line: 624, column: 19, scope: !2657)
!2676 = !DILocation(line: 625, column: 27, scope: !2657)
!2677 = !DILocation(line: 626, column: 21, scope: !2678)
!2678 = distinct !DILexicalBlock(scope: !2657, file: !139, line: 626, column: 21)
!2679 = !DILocation(line: 626, column: 29, scope: !2678)
!2680 = !DILocation(line: 626, column: 21, scope: !2657)
!2681 = !DILocation(line: 627, column: 37, scope: !2678)
!2682 = !DILocation(line: 627, column: 29, scope: !2678)
!2683 = !DILocation(line: 627, column: 27, scope: !2678)
!2684 = !DILocation(line: 627, column: 19, scope: !2678)
!2685 = !DILocation(line: 629, column: 17, scope: !2657)
!2686 = !DILocalVariable(name: "w", scope: !2687, file: !139, line: 631, type: !2688)
!2687 = distinct !DILexicalBlock(scope: !2657, file: !139, line: 630, column: 19)
!2688 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !135, line: 74, baseType: !72)
!2689 = !DILocation(line: 631, column: 29, scope: !2687)
!2690 = !DILocalVariable(name: "bytes", scope: !2687, file: !139, line: 632, type: !134)
!2691 = !DILocation(line: 632, column: 28, scope: !2687)
!2692 = !DILocation(line: 632, column: 50, scope: !2687)
!2693 = !DILocation(line: 632, column: 54, scope: !2687)
!2694 = !DILocation(line: 632, column: 58, scope: !2687)
!2695 = !DILocation(line: 632, column: 56, scope: !2687)
!2696 = !DILocation(line: 633, column: 45, scope: !2687)
!2697 = !DILocation(line: 633, column: 56, scope: !2687)
!2698 = !DILocation(line: 633, column: 60, scope: !2687)
!2699 = !DILocation(line: 633, column: 58, scope: !2687)
!2700 = !DILocation(line: 633, column: 53, scope: !2687)
!2701 = !DILocation(line: 632, column: 36, scope: !2687)
!2702 = !DILocation(line: 634, column: 25, scope: !2703)
!2703 = distinct !DILexicalBlock(scope: !2687, file: !139, line: 634, column: 25)
!2704 = !DILocation(line: 634, column: 31, scope: !2703)
!2705 = !DILocation(line: 634, column: 25, scope: !2687)
!2706 = !DILocation(line: 635, column: 23, scope: !2703)
!2707 = !DILocation(line: 636, column: 30, scope: !2708)
!2708 = distinct !DILexicalBlock(scope: !2703, file: !139, line: 636, column: 30)
!2709 = !DILocation(line: 636, column: 36, scope: !2708)
!2710 = !DILocation(line: 636, column: 30, scope: !2703)
!2711 = !DILocation(line: 638, column: 35, scope: !2712)
!2712 = distinct !DILexicalBlock(scope: !2708, file: !139, line: 637, column: 23)
!2713 = !DILocation(line: 639, column: 25, scope: !2712)
!2714 = !DILocation(line: 641, column: 30, scope: !2715)
!2715 = distinct !DILexicalBlock(scope: !2708, file: !139, line: 641, column: 30)
!2716 = !DILocation(line: 641, column: 36, scope: !2715)
!2717 = !DILocation(line: 641, column: 30, scope: !2708)
!2718 = !DILocation(line: 643, column: 35, scope: !2719)
!2719 = distinct !DILexicalBlock(scope: !2715, file: !139, line: 642, column: 23)
!2720 = !DILocation(line: 644, column: 25, scope: !2719)
!2721 = !DILocation(line: 644, column: 32, scope: !2719)
!2722 = !DILocation(line: 644, column: 36, scope: !2719)
!2723 = !DILocation(line: 644, column: 34, scope: !2719)
!2724 = !DILocation(line: 644, column: 40, scope: !2719)
!2725 = !DILocation(line: 644, column: 38, scope: !2719)
!2726 = !DILocation(line: 644, column: 48, scope: !2719)
!2727 = !DILocation(line: 644, column: 51, scope: !2719)
!2728 = !DILocation(line: 644, column: 55, scope: !2719)
!2729 = !DILocation(line: 644, column: 59, scope: !2719)
!2730 = !DILocation(line: 644, column: 57, scope: !2719)
!2731 = !DILocation(line: 0, scope: !2719)
!2732 = !DILocation(line: 645, column: 28, scope: !2719)
!2733 = distinct !{!2733, !2720, !2732}
!2734 = !DILocation(line: 646, column: 25, scope: !2719)
!2735 = !DILocation(line: 654, column: 44, scope: !2736)
!2736 = distinct !DILexicalBlock(scope: !2737, file: !139, line: 654, column: 29)
!2737 = distinct !DILexicalBlock(scope: !2715, file: !139, line: 649, column: 23)
!2738 = !DILocation(line: 655, column: 29, scope: !2736)
!2739 = !DILocation(line: 655, column: 32, scope: !2736)
!2740 = !DILocation(line: 655, column: 46, scope: !2736)
!2741 = !DILocation(line: 654, column: 29, scope: !2737)
!2742 = !DILocalVariable(name: "j", scope: !2743, file: !139, line: 657, type: !134)
!2743 = distinct !DILexicalBlock(scope: !2736, file: !139, line: 656, column: 27)
!2744 = !DILocation(line: 657, column: 36, scope: !2743)
!2745 = !DILocation(line: 658, column: 36, scope: !2746)
!2746 = distinct !DILexicalBlock(scope: !2743, file: !139, line: 658, column: 29)
!2747 = !DILocation(line: 658, column: 34, scope: !2746)
!2748 = !DILocation(line: 658, column: 41, scope: !2749)
!2749 = distinct !DILexicalBlock(scope: !2746, file: !139, line: 658, column: 29)
!2750 = !DILocation(line: 658, column: 45, scope: !2749)
!2751 = !DILocation(line: 658, column: 43, scope: !2749)
!2752 = !DILocation(line: 658, column: 29, scope: !2746)
!2753 = !DILocation(line: 659, column: 39, scope: !2749)
!2754 = !DILocation(line: 659, column: 43, scope: !2749)
!2755 = !DILocation(line: 659, column: 47, scope: !2749)
!2756 = !DILocation(line: 659, column: 45, scope: !2749)
!2757 = !DILocation(line: 659, column: 51, scope: !2749)
!2758 = !DILocation(line: 659, column: 49, scope: !2749)
!2759 = !DILocation(line: 659, column: 31, scope: !2749)
!2760 = !DILocation(line: 663, column: 35, scope: !2761)
!2761 = distinct !DILexicalBlock(scope: !2749, file: !139, line: 660, column: 33)
!2762 = !DILocation(line: 666, column: 35, scope: !2761)
!2763 = !DILocation(line: 667, column: 33, scope: !2761)
!2764 = !DILocation(line: 658, column: 53, scope: !2749)
!2765 = !DILocation(line: 658, column: 29, scope: !2749)
!2766 = distinct !{!2766, !2752, !2767}
!2767 = !DILocation(line: 667, column: 33, scope: !2746)
!2768 = !DILocation(line: 668, column: 27, scope: !2743)
!2769 = !DILocation(line: 670, column: 41, scope: !2770)
!2770 = distinct !DILexicalBlock(scope: !2737, file: !139, line: 670, column: 29)
!2771 = !DILocation(line: 670, column: 31, scope: !2770)
!2772 = !DILocation(line: 670, column: 29, scope: !2737)
!2773 = !DILocation(line: 671, column: 37, scope: !2770)
!2774 = !DILocation(line: 671, column: 27, scope: !2770)
!2775 = !DILocation(line: 672, column: 30, scope: !2737)
!2776 = !DILocation(line: 672, column: 27, scope: !2737)
!2777 = !DILocation(line: 674, column: 19, scope: !2687)
!2778 = !DILocation(line: 675, column: 26, scope: !2657)
!2779 = !DILocation(line: 675, column: 24, scope: !2657)
!2780 = distinct !{!2780, !2685, !2781}
!2781 = !DILocation(line: 675, column: 44, scope: !2657)
!2782 = !DILocation(line: 678, column: 40, scope: !2643)
!2783 = !DILocation(line: 678, column: 38, scope: !2643)
!2784 = !DILocation(line: 680, column: 21, scope: !2785)
!2785 = distinct !DILexicalBlock(scope: !2643, file: !139, line: 680, column: 17)
!2786 = !DILocation(line: 680, column: 19, scope: !2785)
!2787 = !DILocation(line: 680, column: 23, scope: !2785)
!2788 = !DILocation(line: 680, column: 27, scope: !2785)
!2789 = !DILocation(line: 680, column: 45, scope: !2785)
!2790 = !DILocation(line: 680, column: 50, scope: !2785)
!2791 = !DILocation(line: 680, column: 17, scope: !2643)
!2792 = !DILocalVariable(name: "ilim", scope: !2793, file: !139, line: 684, type: !134)
!2793 = distinct !DILexicalBlock(scope: !2785, file: !139, line: 681, column: 15)
!2794 = !DILocation(line: 684, column: 24, scope: !2793)
!2795 = !DILocation(line: 684, column: 31, scope: !2793)
!2796 = !DILocation(line: 684, column: 35, scope: !2793)
!2797 = !DILocation(line: 684, column: 33, scope: !2793)
!2798 = !DILocation(line: 686, column: 17, scope: !2793)
!2799 = !DILocation(line: 688, column: 25, scope: !2800)
!2800 = distinct !DILexicalBlock(scope: !2801, file: !139, line: 688, column: 25)
!2801 = distinct !DILexicalBlock(scope: !2802, file: !139, line: 687, column: 19)
!2802 = distinct !DILexicalBlock(scope: !2803, file: !139, line: 686, column: 17)
!2803 = distinct !DILexicalBlock(scope: !2793, file: !139, line: 686, column: 17)
!2804 = !DILocation(line: 688, column: 43, scope: !2800)
!2805 = !DILocation(line: 688, column: 48, scope: !2800)
!2806 = !DILocation(line: 688, column: 25, scope: !2801)
!2807 = !DILocation(line: 690, column: 25, scope: !2808)
!2808 = distinct !DILexicalBlock(scope: !2800, file: !139, line: 689, column: 23)
!2809 = !DILocation(line: 690, column: 25, scope: !2810)
!2810 = distinct !DILexicalBlock(scope: !2811, file: !139, line: 690, column: 25)
!2811 = distinct !DILexicalBlock(scope: !2808, file: !139, line: 690, column: 25)
!2812 = !DILocation(line: 690, column: 25, scope: !2811)
!2813 = !DILocation(line: 690, column: 25, scope: !2814)
!2814 = distinct !DILexicalBlock(scope: !2811, file: !139, line: 690, column: 25)
!2815 = !DILocation(line: 690, column: 25, scope: !2816)
!2816 = distinct !DILexicalBlock(scope: !2814, file: !139, line: 690, column: 25)
!2817 = !DILocation(line: 690, column: 25, scope: !2818)
!2818 = distinct !DILexicalBlock(scope: !2819, file: !139, line: 690, column: 25)
!2819 = distinct !DILexicalBlock(scope: !2816, file: !139, line: 690, column: 25)
!2820 = !DILocation(line: 690, column: 25, scope: !2819)
!2821 = !DILocation(line: 690, column: 25, scope: !2822)
!2822 = distinct !DILexicalBlock(scope: !2823, file: !139, line: 690, column: 25)
!2823 = distinct !DILexicalBlock(scope: !2816, file: !139, line: 690, column: 25)
!2824 = !DILocation(line: 690, column: 25, scope: !2823)
!2825 = !DILocation(line: 690, column: 25, scope: !2826)
!2826 = distinct !DILexicalBlock(scope: !2827, file: !139, line: 690, column: 25)
!2827 = distinct !DILexicalBlock(scope: !2816, file: !139, line: 690, column: 25)
!2828 = !DILocation(line: 690, column: 25, scope: !2827)
!2829 = !DILocation(line: 690, column: 25, scope: !2830)
!2830 = distinct !DILexicalBlock(scope: !2831, file: !139, line: 690, column: 25)
!2831 = distinct !DILexicalBlock(scope: !2811, file: !139, line: 690, column: 25)
!2832 = !DILocation(line: 690, column: 25, scope: !2831)
!2833 = !DILocation(line: 691, column: 25, scope: !2808)
!2834 = !DILocation(line: 691, column: 25, scope: !2835)
!2835 = distinct !DILexicalBlock(scope: !2836, file: !139, line: 691, column: 25)
!2836 = distinct !DILexicalBlock(scope: !2808, file: !139, line: 691, column: 25)
!2837 = !DILocation(line: 691, column: 25, scope: !2836)
!2838 = !DILocation(line: 692, column: 25, scope: !2808)
!2839 = !DILocation(line: 692, column: 25, scope: !2840)
!2840 = distinct !DILexicalBlock(scope: !2841, file: !139, line: 692, column: 25)
!2841 = distinct !DILexicalBlock(scope: !2808, file: !139, line: 692, column: 25)
!2842 = !DILocation(line: 692, column: 25, scope: !2841)
!2843 = !DILocation(line: 693, column: 36, scope: !2808)
!2844 = !DILocation(line: 693, column: 38, scope: !2808)
!2845 = !DILocation(line: 693, column: 33, scope: !2808)
!2846 = !DILocation(line: 693, column: 29, scope: !2808)
!2847 = !DILocation(line: 693, column: 27, scope: !2808)
!2848 = !DILocation(line: 694, column: 23, scope: !2808)
!2849 = !DILocation(line: 695, column: 30, scope: !2850)
!2850 = distinct !DILexicalBlock(scope: !2800, file: !139, line: 695, column: 30)
!2851 = !DILocation(line: 695, column: 30, scope: !2800)
!2852 = !DILocation(line: 697, column: 25, scope: !2853)
!2853 = distinct !DILexicalBlock(scope: !2850, file: !139, line: 696, column: 23)
!2854 = !DILocation(line: 697, column: 25, scope: !2855)
!2855 = distinct !DILexicalBlock(scope: !2856, file: !139, line: 697, column: 25)
!2856 = distinct !DILexicalBlock(scope: !2853, file: !139, line: 697, column: 25)
!2857 = !DILocation(line: 697, column: 25, scope: !2856)
!2858 = !DILocation(line: 698, column: 40, scope: !2853)
!2859 = !DILocation(line: 699, column: 23, scope: !2853)
!2860 = !DILocation(line: 700, column: 25, scope: !2861)
!2861 = distinct !DILexicalBlock(scope: !2801, file: !139, line: 700, column: 25)
!2862 = !DILocation(line: 700, column: 33, scope: !2861)
!2863 = !DILocation(line: 700, column: 35, scope: !2861)
!2864 = !DILocation(line: 700, column: 30, scope: !2861)
!2865 = !DILocation(line: 700, column: 25, scope: !2801)
!2866 = !DILocation(line: 701, column: 23, scope: !2861)
!2867 = !DILocation(line: 702, column: 21, scope: !2801)
!2868 = !DILocation(line: 702, column: 21, scope: !2869)
!2869 = distinct !DILexicalBlock(scope: !2870, file: !139, line: 702, column: 21)
!2870 = distinct !DILexicalBlock(scope: !2801, file: !139, line: 702, column: 21)
!2871 = !DILocation(line: 702, column: 21, scope: !2870)
!2872 = !DILocation(line: 702, column: 21, scope: !2873)
!2873 = distinct !DILexicalBlock(scope: !2869, file: !139, line: 702, column: 21)
!2874 = !DILocation(line: 702, column: 21, scope: !2875)
!2875 = distinct !DILexicalBlock(scope: !2876, file: !139, line: 702, column: 21)
!2876 = distinct !DILexicalBlock(scope: !2873, file: !139, line: 702, column: 21)
!2877 = !DILocation(line: 702, column: 21, scope: !2876)
!2878 = !DILocation(line: 702, column: 21, scope: !2879)
!2879 = distinct !DILexicalBlock(scope: !2880, file: !139, line: 702, column: 21)
!2880 = distinct !DILexicalBlock(scope: !2873, file: !139, line: 702, column: 21)
!2881 = !DILocation(line: 702, column: 21, scope: !2880)
!2882 = !DILocation(line: 703, column: 21, scope: !2801)
!2883 = !DILocation(line: 703, column: 21, scope: !2884)
!2884 = distinct !DILexicalBlock(scope: !2885, file: !139, line: 703, column: 21)
!2885 = distinct !DILexicalBlock(scope: !2801, file: !139, line: 703, column: 21)
!2886 = !DILocation(line: 703, column: 21, scope: !2885)
!2887 = !DILocation(line: 704, column: 25, scope: !2801)
!2888 = !DILocation(line: 704, column: 29, scope: !2801)
!2889 = !DILocation(line: 704, column: 23, scope: !2801)
!2890 = !DILocation(line: 686, column: 17, scope: !2802)
!2891 = distinct !{!2891, !2892, !2893}
!2892 = !DILocation(line: 686, column: 17, scope: !2803)
!2893 = !DILocation(line: 705, column: 19, scope: !2803)
!2894 = !DILocation(line: 707, column: 17, scope: !2793)
!2895 = !DILocation(line: 710, column: 9, scope: !2393)
!2896 = !DILocation(line: 712, column: 16, scope: !2897)
!2897 = distinct !DILexicalBlock(scope: !2339, file: !139, line: 712, column: 11)
!2898 = !DILocation(line: 712, column: 34, scope: !2897)
!2899 = !DILocation(line: 712, column: 37, scope: !2897)
!2900 = !DILocation(line: 712, column: 51, scope: !2897)
!2901 = !DILocation(line: 713, column: 15, scope: !2897)
!2902 = !DILocation(line: 713, column: 18, scope: !2897)
!2903 = !DILocation(line: 714, column: 14, scope: !2897)
!2904 = !DILocation(line: 714, column: 17, scope: !2897)
!2905 = !DILocation(line: 715, column: 14, scope: !2897)
!2906 = !DILocation(line: 715, column: 17, scope: !2897)
!2907 = !DILocation(line: 715, column: 33, scope: !2897)
!2908 = !DILocation(line: 715, column: 35, scope: !2897)
!2909 = !DILocation(line: 715, column: 51, scope: !2897)
!2910 = !DILocation(line: 715, column: 53, scope: !2897)
!2911 = !DILocation(line: 715, column: 47, scope: !2897)
!2912 = !DILocation(line: 715, column: 65, scope: !2897)
!2913 = !DILocation(line: 716, column: 11, scope: !2897)
!2914 = !DILocation(line: 716, column: 15, scope: !2897)
!2915 = !DILocation(line: 712, column: 11, scope: !2339)
!2916 = !DILocation(line: 717, column: 9, scope: !2897)
!2917 = !DILabel(scope: !2339, name: "store_escape", file: !139, line: 719)
!2918 = !DILocation(line: 719, column: 5, scope: !2339)
!2919 = !DILocation(line: 720, column: 7, scope: !2339)
!2920 = !DILocation(line: 720, column: 7, scope: !2921)
!2921 = distinct !DILexicalBlock(scope: !2922, file: !139, line: 720, column: 7)
!2922 = distinct !DILexicalBlock(scope: !2339, file: !139, line: 720, column: 7)
!2923 = !DILocation(line: 720, column: 7, scope: !2922)
!2924 = !DILocation(line: 720, column: 7, scope: !2925)
!2925 = distinct !DILexicalBlock(scope: !2922, file: !139, line: 720, column: 7)
!2926 = !DILocation(line: 720, column: 7, scope: !2927)
!2927 = distinct !DILexicalBlock(scope: !2925, file: !139, line: 720, column: 7)
!2928 = !DILocation(line: 720, column: 7, scope: !2929)
!2929 = distinct !DILexicalBlock(scope: !2930, file: !139, line: 720, column: 7)
!2930 = distinct !DILexicalBlock(scope: !2927, file: !139, line: 720, column: 7)
!2931 = !DILocation(line: 720, column: 7, scope: !2930)
!2932 = !DILocation(line: 720, column: 7, scope: !2933)
!2933 = distinct !DILexicalBlock(scope: !2934, file: !139, line: 720, column: 7)
!2934 = distinct !DILexicalBlock(scope: !2927, file: !139, line: 720, column: 7)
!2935 = !DILocation(line: 720, column: 7, scope: !2934)
!2936 = !DILocation(line: 720, column: 7, scope: !2937)
!2937 = distinct !DILexicalBlock(scope: !2938, file: !139, line: 720, column: 7)
!2938 = distinct !DILexicalBlock(scope: !2927, file: !139, line: 720, column: 7)
!2939 = !DILocation(line: 720, column: 7, scope: !2938)
!2940 = !DILocation(line: 720, column: 7, scope: !2941)
!2941 = distinct !DILexicalBlock(scope: !2942, file: !139, line: 720, column: 7)
!2942 = distinct !DILexicalBlock(scope: !2922, file: !139, line: 720, column: 7)
!2943 = !DILocation(line: 720, column: 7, scope: !2942)
!2944 = !DILabel(scope: !2339, name: "store_c", file: !139, line: 722)
!2945 = !DILocation(line: 722, column: 5, scope: !2339)
!2946 = !DILocation(line: 723, column: 7, scope: !2339)
!2947 = !DILocation(line: 723, column: 7, scope: !2948)
!2948 = distinct !DILexicalBlock(scope: !2949, file: !139, line: 723, column: 7)
!2949 = distinct !DILexicalBlock(scope: !2339, file: !139, line: 723, column: 7)
!2950 = !DILocation(line: 723, column: 7, scope: !2949)
!2951 = !DILocation(line: 723, column: 7, scope: !2952)
!2952 = distinct !DILexicalBlock(scope: !2948, file: !139, line: 723, column: 7)
!2953 = !DILocation(line: 723, column: 7, scope: !2954)
!2954 = distinct !DILexicalBlock(scope: !2955, file: !139, line: 723, column: 7)
!2955 = distinct !DILexicalBlock(scope: !2952, file: !139, line: 723, column: 7)
!2956 = !DILocation(line: 723, column: 7, scope: !2955)
!2957 = !DILocation(line: 723, column: 7, scope: !2958)
!2958 = distinct !DILexicalBlock(scope: !2959, file: !139, line: 723, column: 7)
!2959 = distinct !DILexicalBlock(scope: !2952, file: !139, line: 723, column: 7)
!2960 = !DILocation(line: 723, column: 7, scope: !2959)
!2961 = !DILocation(line: 724, column: 7, scope: !2339)
!2962 = !DILocation(line: 724, column: 7, scope: !2963)
!2963 = distinct !DILexicalBlock(scope: !2964, file: !139, line: 724, column: 7)
!2964 = distinct !DILexicalBlock(scope: !2339, file: !139, line: 724, column: 7)
!2965 = !DILocation(line: 724, column: 7, scope: !2964)
!2966 = !DILocation(line: 726, column: 13, scope: !2967)
!2967 = distinct !DILexicalBlock(scope: !2339, file: !139, line: 726, column: 11)
!2968 = !DILocation(line: 726, column: 11, scope: !2339)
!2969 = !DILocation(line: 727, column: 38, scope: !2967)
!2970 = !DILocation(line: 727, column: 9, scope: !2967)
!2971 = !DILocation(line: 728, column: 5, scope: !2339)
!2972 = !DILocation(line: 400, column: 75, scope: !2328)
!2973 = !DILocation(line: 400, column: 3, scope: !2328)
!2974 = distinct !{!2974, !2337, !2975}
!2975 = !DILocation(line: 728, column: 5, scope: !2325)
!2976 = !DILocation(line: 730, column: 7, scope: !2977)
!2977 = distinct !DILexicalBlock(scope: !2185, file: !139, line: 730, column: 7)
!2978 = !DILocation(line: 730, column: 11, scope: !2977)
!2979 = !DILocation(line: 730, column: 16, scope: !2977)
!2980 = !DILocation(line: 730, column: 19, scope: !2977)
!2981 = !DILocation(line: 730, column: 33, scope: !2977)
!2982 = !DILocation(line: 731, column: 7, scope: !2977)
!2983 = !DILocation(line: 731, column: 10, scope: !2977)
!2984 = !DILocation(line: 730, column: 7, scope: !2185)
!2985 = !DILocation(line: 732, column: 5, scope: !2977)
!2986 = !DILocation(line: 738, column: 7, scope: !2987)
!2987 = distinct !DILexicalBlock(scope: !2185, file: !139, line: 738, column: 7)
!2988 = !DILocation(line: 738, column: 21, scope: !2987)
!2989 = !DILocation(line: 738, column: 51, scope: !2987)
!2990 = !DILocation(line: 738, column: 56, scope: !2987)
!2991 = !DILocation(line: 739, column: 7, scope: !2987)
!2992 = !DILocation(line: 739, column: 10, scope: !2987)
!2993 = !DILocation(line: 738, column: 7, scope: !2185)
!2994 = !DILocation(line: 741, column: 11, scope: !2995)
!2995 = distinct !DILexicalBlock(scope: !2996, file: !139, line: 741, column: 11)
!2996 = distinct !DILexicalBlock(scope: !2987, file: !139, line: 740, column: 5)
!2997 = !DILocation(line: 741, column: 11, scope: !2996)
!2998 = !DILocation(line: 742, column: 42, scope: !2995)
!2999 = !DILocation(line: 742, column: 50, scope: !2995)
!3000 = !DILocation(line: 742, column: 67, scope: !2995)
!3001 = !DILocation(line: 742, column: 72, scope: !2995)
!3002 = !DILocation(line: 744, column: 42, scope: !2995)
!3003 = !DILocation(line: 744, column: 49, scope: !2995)
!3004 = !DILocation(line: 745, column: 42, scope: !2995)
!3005 = !DILocation(line: 745, column: 54, scope: !2995)
!3006 = !DILocation(line: 742, column: 16, scope: !2995)
!3007 = !DILocation(line: 742, column: 9, scope: !2995)
!3008 = !DILocation(line: 746, column: 18, scope: !3009)
!3009 = distinct !DILexicalBlock(scope: !2995, file: !139, line: 746, column: 16)
!3010 = !DILocation(line: 746, column: 29, scope: !3009)
!3011 = !DILocation(line: 746, column: 32, scope: !3009)
!3012 = !DILocation(line: 746, column: 16, scope: !2995)
!3013 = !DILocation(line: 749, column: 24, scope: !3014)
!3014 = distinct !DILexicalBlock(scope: !3009, file: !139, line: 747, column: 9)
!3015 = !DILocation(line: 749, column: 22, scope: !3014)
!3016 = !DILocation(line: 750, column: 15, scope: !3014)
!3017 = !DILocation(line: 751, column: 11, scope: !3014)
!3018 = !DILocation(line: 753, column: 5, scope: !2996)
!3019 = !DILocation(line: 755, column: 7, scope: !3020)
!3020 = distinct !DILexicalBlock(scope: !2185, file: !139, line: 755, column: 7)
!3021 = !DILocation(line: 755, column: 20, scope: !3020)
!3022 = !DILocation(line: 755, column: 24, scope: !3020)
!3023 = !DILocation(line: 755, column: 7, scope: !2185)
!3024 = !DILocation(line: 756, column: 5, scope: !3020)
!3025 = !DILocation(line: 756, column: 13, scope: !3026)
!3026 = distinct !DILexicalBlock(scope: !3027, file: !139, line: 756, column: 5)
!3027 = distinct !DILexicalBlock(scope: !3020, file: !139, line: 756, column: 5)
!3028 = !DILocation(line: 756, column: 12, scope: !3026)
!3029 = !DILocation(line: 756, column: 5, scope: !3027)
!3030 = !DILocation(line: 757, column: 7, scope: !3026)
!3031 = !DILocation(line: 757, column: 7, scope: !3032)
!3032 = distinct !DILexicalBlock(scope: !3033, file: !139, line: 757, column: 7)
!3033 = distinct !DILexicalBlock(scope: !3026, file: !139, line: 757, column: 7)
!3034 = !DILocation(line: 757, column: 7, scope: !3033)
!3035 = !DILocation(line: 756, column: 39, scope: !3026)
!3036 = !DILocation(line: 756, column: 5, scope: !3026)
!3037 = distinct !{!3037, !3029, !3038}
!3038 = !DILocation(line: 757, column: 7, scope: !3027)
!3039 = !DILocation(line: 759, column: 7, scope: !3040)
!3040 = distinct !DILexicalBlock(scope: !2185, file: !139, line: 759, column: 7)
!3041 = !DILocation(line: 759, column: 13, scope: !3040)
!3042 = !DILocation(line: 759, column: 11, scope: !3040)
!3043 = !DILocation(line: 759, column: 7, scope: !2185)
!3044 = !DILocation(line: 760, column: 5, scope: !3040)
!3045 = !DILocation(line: 760, column: 12, scope: !3040)
!3046 = !DILocation(line: 760, column: 17, scope: !3040)
!3047 = !DILocation(line: 761, column: 10, scope: !2185)
!3048 = !DILocation(line: 761, column: 3, scope: !2185)
!3049 = !DILabel(scope: !2185, name: "force_outer_quoting_style", file: !139, line: 763)
!3050 = !DILocation(line: 763, column: 2, scope: !2185)
!3051 = !DILocation(line: 766, column: 7, scope: !3052)
!3052 = distinct !DILexicalBlock(scope: !2185, file: !139, line: 766, column: 7)
!3053 = !DILocation(line: 766, column: 21, scope: !3052)
!3054 = !DILocation(line: 766, column: 51, scope: !3052)
!3055 = !DILocation(line: 766, column: 54, scope: !3052)
!3056 = !DILocation(line: 766, column: 7, scope: !2185)
!3057 = !DILocation(line: 767, column: 19, scope: !3052)
!3058 = !DILocation(line: 767, column: 5, scope: !3052)
!3059 = !DILocation(line: 768, column: 36, scope: !2185)
!3060 = !DILocation(line: 768, column: 44, scope: !2185)
!3061 = !DILocation(line: 768, column: 56, scope: !2185)
!3062 = !DILocation(line: 768, column: 61, scope: !2185)
!3063 = !DILocation(line: 769, column: 36, scope: !2185)
!3064 = !DILocation(line: 770, column: 36, scope: !2185)
!3065 = !DILocation(line: 770, column: 42, scope: !2185)
!3066 = !DILocation(line: 771, column: 36, scope: !2185)
!3067 = !DILocation(line: 771, column: 48, scope: !2185)
!3068 = !DILocation(line: 768, column: 10, scope: !2185)
!3069 = !DILocation(line: 768, column: 3, scope: !2185)
!3070 = !DILocation(line: 772, column: 1, scope: !2185)
!3071 = !DILocalVariable(name: "buffer", arg: 1, scope: !3072, file: !139, line: 256, type: !6)
!3072 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !139, file: !139, line: 256, type: !2186, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3073, retainedNodes: !4)
!3073 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !3074, nameTableKind: None)
!3074 = !{!3075, !3077, !3079, !3088, !3090, !3092, !3099, !3101}
!3075 = !DIGlobalVariableExpression(var: !3076, expr: !DIExpression())
!3076 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3073, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!3077 = !DIGlobalVariableExpression(var: !3078, expr: !DIExpression())
!3078 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3073, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!3079 = !DIGlobalVariableExpression(var: !3080, expr: !DIExpression())
!3080 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3073, file: !139, line: 1052, type: !3081, isLocal: false, isDefinition: true)
!3081 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !3082)
!3082 = !{!3083, !3084, !3085, !3086, !3087}
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3081, file: !139, line: 68, baseType: !118, size: 32)
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3081, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3081, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!3086 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3081, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3081, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!3088 = !DIGlobalVariableExpression(var: !3089, expr: !DIExpression())
!3089 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3073, file: !139, line: 116, type: !3081, isLocal: true, isDefinition: true)
!3090 = !DIGlobalVariableExpression(var: !3091, expr: !DIExpression())
!3091 = distinct !DIGlobalVariable(name: "slot0", scope: !3073, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!3092 = !DIGlobalVariableExpression(var: !3093, expr: !DIExpression())
!3093 = distinct !DIGlobalVariable(name: "slotvec", scope: !3073, file: !139, line: 845, type: !3094, isLocal: true, isDefinition: true)
!3094 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3095, size: 64)
!3095 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !3096)
!3096 = !{!3097, !3098}
!3097 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3095, file: !139, line: 836, baseType: !134, size: 64)
!3098 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3095, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!3099 = !DIGlobalVariableExpression(var: !3100, expr: !DIExpression())
!3100 = distinct !DIGlobalVariable(name: "nslots", scope: !3073, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!3101 = !DIGlobalVariableExpression(var: !3102, expr: !DIExpression())
!3102 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3073, file: !139, line: 844, type: !3095, isLocal: true, isDefinition: true)
!3103 = !DILocalVariable(name: "buffersize", arg: 2, scope: !3072, file: !139, line: 256, type: !134)
!3104 = !DILocalVariable(name: "arg", arg: 3, scope: !3072, file: !139, line: 257, type: !69)
!3105 = !DILocalVariable(name: "argsize", arg: 4, scope: !3072, file: !139, line: 257, type: !134)
!3106 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !3072, file: !139, line: 258, type: !118)
!3107 = !DILocalVariable(name: "flags", arg: 6, scope: !3072, file: !139, line: 258, type: !72)
!3108 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !3072, file: !139, line: 259, type: !2188)
!3109 = !DILocalVariable(name: "left_quote", arg: 8, scope: !3072, file: !139, line: 260, type: !69)
!3110 = !DILocalVariable(name: "right_quote", arg: 9, scope: !3072, file: !139, line: 261, type: !69)
!3111 = !DILocalVariable(name: "i", scope: !3072, file: !139, line: 263, type: !134)
!3112 = !DILocalVariable(name: "len", scope: !3072, file: !139, line: 264, type: !134)
!3113 = !DILocalVariable(name: "orig_buffersize", scope: !3072, file: !139, line: 265, type: !134)
!3114 = !DILocalVariable(name: "quote_string", scope: !3072, file: !139, line: 266, type: !69)
!3115 = !DILocalVariable(name: "quote_string_len", scope: !3072, file: !139, line: 267, type: !134)
!3116 = !DILocalVariable(name: "backslash_escapes", scope: !3072, file: !139, line: 268, type: !27)
!3117 = !DILocalVariable(name: "unibyte_locale", scope: !3072, file: !139, line: 269, type: !27)
!3118 = !DILocalVariable(name: "elide_outer_quotes", scope: !3072, file: !139, line: 270, type: !27)
!3119 = !DILocalVariable(name: "pending_shell_escape_end", scope: !3072, file: !139, line: 271, type: !27)
!3120 = !DILocalVariable(name: "encountered_single_quote", scope: !3072, file: !139, line: 272, type: !27)
!3121 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !3072, file: !139, line: 273, type: !27)
!3122 = !DILocalVariable(name: "escaping", scope: !3123, file: !139, line: 405, type: !27)
!3123 = distinct !DILexicalBlock(scope: !3124, file: !139, line: 401, column: 5)
!3124 = distinct !DILexicalBlock(scope: !3125, file: !139, line: 400, column: 3)
!3125 = distinct !DILexicalBlock(scope: !3126, file: !139, line: 400, column: 3)
!3126 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !139, file: !139, line: 256, type: !2186, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3127, retainedNodes: !4)
!3127 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !3128, nameTableKind: None)
!3128 = !{!3129, !3131, !3133, !3142, !3144, !3146, !3153, !3155}
!3129 = !DIGlobalVariableExpression(var: !3130, expr: !DIExpression())
!3130 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3127, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!3131 = !DIGlobalVariableExpression(var: !3132, expr: !DIExpression())
!3132 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3127, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!3133 = !DIGlobalVariableExpression(var: !3134, expr: !DIExpression())
!3134 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3127, file: !139, line: 1052, type: !3135, isLocal: false, isDefinition: true)
!3135 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !3136)
!3136 = !{!3137, !3138, !3139, !3140, !3141}
!3137 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3135, file: !139, line: 68, baseType: !118, size: 32)
!3138 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3135, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3135, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!3140 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3135, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!3141 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3135, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!3142 = !DIGlobalVariableExpression(var: !3143, expr: !DIExpression())
!3143 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3127, file: !139, line: 116, type: !3135, isLocal: true, isDefinition: true)
!3144 = !DIGlobalVariableExpression(var: !3145, expr: !DIExpression())
!3145 = distinct !DIGlobalVariable(name: "slot0", scope: !3127, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!3146 = !DIGlobalVariableExpression(var: !3147, expr: !DIExpression())
!3147 = distinct !DIGlobalVariable(name: "slotvec", scope: !3127, file: !139, line: 845, type: !3148, isLocal: true, isDefinition: true)
!3148 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3149, size: 64)
!3149 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !3150)
!3150 = !{!3151, !3152}
!3151 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3149, file: !139, line: 836, baseType: !134, size: 64)
!3152 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3149, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!3153 = !DIGlobalVariableExpression(var: !3154, expr: !DIExpression())
!3154 = distinct !DIGlobalVariable(name: "nslots", scope: !3127, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!3155 = !DIGlobalVariableExpression(var: !3156, expr: !DIExpression())
!3156 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3127, file: !139, line: 844, type: !3149, isLocal: true, isDefinition: true)
!3157 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !3123, file: !139, line: 406, type: !27)
!3158 = distinct !DISubprogram(name: "gettext_quote", scope: !139, file: !139, line: 207, type: !3159, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !115, retainedNodes: !4)
!3159 = !DISubroutineType(types: !3160)
!3160 = !{!69, !69, !118}
!3161 = !DILocalVariable(name: "msgid", arg: 1, scope: !3158, file: !139, line: 207, type: !69)
!3162 = !DILocation(line: 207, column: 28, scope: !3158)
!3163 = !DILocalVariable(name: "s", arg: 2, scope: !3158, file: !139, line: 207, type: !118)
!3164 = !DILocation(line: 207, column: 54, scope: !3158)
!3165 = !DILocalVariable(name: "translation", scope: !3158, file: !139, line: 209, type: !69)
!3166 = !DILocation(line: 209, column: 15, scope: !3158)
!3167 = !DILocation(line: 209, column: 29, scope: !3158)
!3168 = !DILocalVariable(name: "locale_code", scope: !3158, file: !139, line: 210, type: !69)
!3169 = !DILocation(line: 210, column: 15, scope: !3158)
!3170 = !DILocation(line: 212, column: 7, scope: !3171)
!3171 = distinct !DILexicalBlock(scope: !3158, file: !139, line: 212, column: 7)
!3172 = !DILocation(line: 212, column: 22, scope: !3171)
!3173 = !DILocation(line: 212, column: 19, scope: !3171)
!3174 = !DILocation(line: 212, column: 7, scope: !3158)
!3175 = !DILocation(line: 213, column: 12, scope: !3171)
!3176 = !DILocation(line: 213, column: 5, scope: !3171)
!3177 = !DILocation(line: 233, column: 17, scope: !3158)
!3178 = !DILocation(line: 233, column: 15, scope: !3158)
!3179 = !DILocation(line: 234, column: 7, scope: !3180)
!3180 = distinct !DILexicalBlock(scope: !3158, file: !139, line: 234, column: 7)
!3181 = !DILocation(line: 235, column: 12, scope: !3180)
!3182 = !DILocation(line: 235, column: 21, scope: !3180)
!3183 = !DILocation(line: 235, column: 5, scope: !3180)
!3184 = !DILocation(line: 236, column: 7, scope: !3185)
!3185 = distinct !DILexicalBlock(scope: !3158, file: !139, line: 236, column: 7)
!3186 = !DILocation(line: 237, column: 12, scope: !3185)
!3187 = !DILocation(line: 237, column: 21, scope: !3185)
!3188 = !DILocation(line: 237, column: 5, scope: !3185)
!3189 = !DILocation(line: 239, column: 11, scope: !3158)
!3190 = !DILocation(line: 239, column: 13, scope: !3158)
!3191 = !DILocation(line: 239, column: 3, scope: !3158)
!3192 = !DILocation(line: 240, column: 1, scope: !3158)
!3193 = !DILocalVariable(name: "msgid", arg: 1, scope: !3194, file: !139, line: 207, type: !69)
!3194 = distinct !DISubprogram(name: "gettext_quote", scope: !139, file: !139, line: 207, type: !3159, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3195, retainedNodes: !4)
!3195 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !3196, nameTableKind: None)
!3196 = !{!3197, !3199, !3201, !3210, !3212, !3214, !3221, !3223}
!3197 = !DIGlobalVariableExpression(var: !3198, expr: !DIExpression())
!3198 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3195, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!3199 = !DIGlobalVariableExpression(var: !3200, expr: !DIExpression())
!3200 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3195, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!3201 = !DIGlobalVariableExpression(var: !3202, expr: !DIExpression())
!3202 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3195, file: !139, line: 1052, type: !3203, isLocal: false, isDefinition: true)
!3203 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !3204)
!3204 = !{!3205, !3206, !3207, !3208, !3209}
!3205 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3203, file: !139, line: 68, baseType: !118, size: 32)
!3206 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3203, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!3207 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3203, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!3208 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3203, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!3209 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3203, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!3210 = !DIGlobalVariableExpression(var: !3211, expr: !DIExpression())
!3211 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3195, file: !139, line: 116, type: !3203, isLocal: true, isDefinition: true)
!3212 = !DIGlobalVariableExpression(var: !3213, expr: !DIExpression())
!3213 = distinct !DIGlobalVariable(name: "slot0", scope: !3195, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!3214 = !DIGlobalVariableExpression(var: !3215, expr: !DIExpression())
!3215 = distinct !DIGlobalVariable(name: "slotvec", scope: !3195, file: !139, line: 845, type: !3216, isLocal: true, isDefinition: true)
!3216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3217, size: 64)
!3217 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !3218)
!3218 = !{!3219, !3220}
!3219 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3217, file: !139, line: 836, baseType: !134, size: 64)
!3220 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3217, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!3221 = !DIGlobalVariableExpression(var: !3222, expr: !DIExpression())
!3222 = distinct !DIGlobalVariable(name: "nslots", scope: !3195, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!3223 = !DIGlobalVariableExpression(var: !3224, expr: !DIExpression())
!3224 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3195, file: !139, line: 844, type: !3217, isLocal: true, isDefinition: true)
!3225 = !DILocalVariable(name: "s", arg: 2, scope: !3194, file: !139, line: 207, type: !118)
!3226 = !DILocalVariable(name: "translation", scope: !3194, file: !139, line: 209, type: !69)
!3227 = !DILocalVariable(name: "locale_code", scope: !3194, file: !139, line: 210, type: !69)
!3228 = distinct !DISubprogram(name: "quotearg_char", scope: !139, file: !139, line: 991, type: !3229, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !115, retainedNodes: !4)
!3229 = !DISubroutineType(types: !3230)
!3230 = !{!6, !69, !7}
!3231 = !DILocalVariable(name: "arg", arg: 1, scope: !3228, file: !139, line: 991, type: !69)
!3232 = !DILocation(line: 991, column: 28, scope: !3228)
!3233 = !DILocalVariable(name: "ch", arg: 2, scope: !3228, file: !139, line: 991, type: !7)
!3234 = !DILocation(line: 991, column: 38, scope: !3228)
!3235 = !DILocation(line: 993, column: 29, scope: !3228)
!3236 = !DILocation(line: 993, column: 44, scope: !3228)
!3237 = !DILocation(line: 993, column: 10, scope: !3228)
!3238 = !DILocation(line: 993, column: 3, scope: !3228)
!3239 = !DILocalVariable(name: "arg", arg: 1, scope: !3240, file: !139, line: 991, type: !69)
!3240 = distinct !DISubprogram(name: "quotearg_char", scope: !139, file: !139, line: 991, type: !3229, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3241, retainedNodes: !4)
!3241 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !3242, nameTableKind: None)
!3242 = !{!3243, !3245, !3247, !3256, !3258, !3260, !3267, !3269}
!3243 = !DIGlobalVariableExpression(var: !3244, expr: !DIExpression())
!3244 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3241, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!3245 = !DIGlobalVariableExpression(var: !3246, expr: !DIExpression())
!3246 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3241, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!3247 = !DIGlobalVariableExpression(var: !3248, expr: !DIExpression())
!3248 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3241, file: !139, line: 1052, type: !3249, isLocal: false, isDefinition: true)
!3249 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !3250)
!3250 = !{!3251, !3252, !3253, !3254, !3255}
!3251 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3249, file: !139, line: 68, baseType: !118, size: 32)
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3249, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!3253 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3249, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!3254 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3249, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!3255 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3249, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!3256 = !DIGlobalVariableExpression(var: !3257, expr: !DIExpression())
!3257 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3241, file: !139, line: 116, type: !3249, isLocal: true, isDefinition: true)
!3258 = !DIGlobalVariableExpression(var: !3259, expr: !DIExpression())
!3259 = distinct !DIGlobalVariable(name: "slot0", scope: !3241, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!3260 = !DIGlobalVariableExpression(var: !3261, expr: !DIExpression())
!3261 = distinct !DIGlobalVariable(name: "slotvec", scope: !3241, file: !139, line: 845, type: !3262, isLocal: true, isDefinition: true)
!3262 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3263, size: 64)
!3263 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !3264)
!3264 = !{!3265, !3266}
!3265 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3263, file: !139, line: 836, baseType: !134, size: 64)
!3266 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3263, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!3267 = !DIGlobalVariableExpression(var: !3268, expr: !DIExpression())
!3268 = distinct !DIGlobalVariable(name: "nslots", scope: !3241, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!3269 = !DIGlobalVariableExpression(var: !3270, expr: !DIExpression())
!3270 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3241, file: !139, line: 844, type: !3263, isLocal: true, isDefinition: true)
!3271 = !DILocalVariable(name: "ch", arg: 2, scope: !3240, file: !139, line: 991, type: !7)
!3272 = distinct !DISubprogram(name: "quotearg_colon", scope: !139, file: !139, line: 997, type: !3273, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !115, retainedNodes: !4)
!3273 = !DISubroutineType(types: !3274)
!3274 = !{!6, !69}
!3275 = !DILocalVariable(name: "arg", arg: 1, scope: !3272, file: !139, line: 997, type: !69)
!3276 = !DILocation(line: 997, column: 29, scope: !3272)
!3277 = !DILocation(line: 999, column: 25, scope: !3272)
!3278 = !DILocation(line: 999, column: 10, scope: !3272)
!3279 = !DILocation(line: 999, column: 3, scope: !3272)
!3280 = !DILocalVariable(name: "arg", arg: 1, scope: !3281, file: !139, line: 997, type: !69)
!3281 = distinct !DISubprogram(name: "quotearg_colon", scope: !139, file: !139, line: 997, type: !3273, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3282, retainedNodes: !4)
!3282 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !3283, nameTableKind: None)
!3283 = !{!3284, !3286, !3288, !3297, !3299, !3301, !3308, !3310}
!3284 = !DIGlobalVariableExpression(var: !3285, expr: !DIExpression())
!3285 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3282, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!3286 = !DIGlobalVariableExpression(var: !3287, expr: !DIExpression())
!3287 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3282, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!3288 = !DIGlobalVariableExpression(var: !3289, expr: !DIExpression())
!3289 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3282, file: !139, line: 1052, type: !3290, isLocal: false, isDefinition: true)
!3290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !3291)
!3291 = !{!3292, !3293, !3294, !3295, !3296}
!3292 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3290, file: !139, line: 68, baseType: !118, size: 32)
!3293 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3290, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!3294 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3290, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!3295 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3290, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!3296 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3290, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!3297 = !DIGlobalVariableExpression(var: !3298, expr: !DIExpression())
!3298 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3282, file: !139, line: 116, type: !3290, isLocal: true, isDefinition: true)
!3299 = !DIGlobalVariableExpression(var: !3300, expr: !DIExpression())
!3300 = distinct !DIGlobalVariable(name: "slot0", scope: !3282, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!3301 = !DIGlobalVariableExpression(var: !3302, expr: !DIExpression())
!3302 = distinct !DIGlobalVariable(name: "slotvec", scope: !3282, file: !139, line: 845, type: !3303, isLocal: true, isDefinition: true)
!3303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3304, size: 64)
!3304 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !3305)
!3305 = !{!3306, !3307}
!3306 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3304, file: !139, line: 836, baseType: !134, size: 64)
!3307 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3304, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!3308 = !DIGlobalVariableExpression(var: !3309, expr: !DIExpression())
!3309 = distinct !DIGlobalVariable(name: "nslots", scope: !3282, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!3310 = !DIGlobalVariableExpression(var: !3311, expr: !DIExpression())
!3311 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3282, file: !139, line: 844, type: !3304, isLocal: true, isDefinition: true)
!3312 = distinct !DISubprogram(name: "quote_n_mem", scope: !139, file: !139, line: 1061, type: !3313, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !115, retainedNodes: !4)
!3313 = !DISubroutineType(types: !3314)
!3314 = !{!69, !72, !69, !134}
!3315 = !DILocalVariable(name: "n", arg: 1, scope: !3312, file: !139, line: 1061, type: !72)
!3316 = !DILocation(line: 1061, column: 18, scope: !3312)
!3317 = !DILocalVariable(name: "arg", arg: 2, scope: !3312, file: !139, line: 1061, type: !69)
!3318 = !DILocation(line: 1061, column: 33, scope: !3312)
!3319 = !DILocalVariable(name: "argsize", arg: 3, scope: !3312, file: !139, line: 1061, type: !134)
!3320 = !DILocation(line: 1061, column: 45, scope: !3312)
!3321 = !DILocation(line: 1063, column: 30, scope: !3312)
!3322 = !DILocation(line: 1063, column: 33, scope: !3312)
!3323 = !DILocation(line: 1063, column: 38, scope: !3312)
!3324 = !DILocation(line: 1063, column: 10, scope: !3312)
!3325 = !DILocation(line: 1063, column: 3, scope: !3312)
!3326 = distinct !DISubprogram(name: "quote_n", scope: !139, file: !139, line: 1073, type: !3327, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !115, retainedNodes: !4)
!3327 = !DISubroutineType(types: !3328)
!3328 = !{!69, !72, !69}
!3329 = !DILocalVariable(name: "n", arg: 1, scope: !3326, file: !139, line: 1073, type: !72)
!3330 = !DILocation(line: 1073, column: 14, scope: !3326)
!3331 = !DILocalVariable(name: "arg", arg: 2, scope: !3326, file: !139, line: 1073, type: !69)
!3332 = !DILocation(line: 1073, column: 29, scope: !3326)
!3333 = !DILocation(line: 1075, column: 23, scope: !3326)
!3334 = !DILocation(line: 1075, column: 26, scope: !3326)
!3335 = !DILocation(line: 1075, column: 10, scope: !3326)
!3336 = !DILocation(line: 1075, column: 3, scope: !3326)
!3337 = !DILocalVariable(name: "n", arg: 1, scope: !3338, file: !139, line: 1073, type: !72)
!3338 = distinct !DISubprogram(name: "quote_n", scope: !139, file: !139, line: 1073, type: !3327, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3339, retainedNodes: !4)
!3339 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !3340, nameTableKind: None)
!3340 = !{!3341, !3343, !3345, !3354, !3356, !3358, !3365, !3367}
!3341 = !DIGlobalVariableExpression(var: !3342, expr: !DIExpression())
!3342 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3339, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!3343 = !DIGlobalVariableExpression(var: !3344, expr: !DIExpression())
!3344 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3339, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!3345 = !DIGlobalVariableExpression(var: !3346, expr: !DIExpression())
!3346 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3339, file: !139, line: 1052, type: !3347, isLocal: false, isDefinition: true)
!3347 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !3348)
!3348 = !{!3349, !3350, !3351, !3352, !3353}
!3349 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3347, file: !139, line: 68, baseType: !118, size: 32)
!3350 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3347, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!3351 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3347, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!3352 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3347, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!3353 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3347, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!3354 = !DIGlobalVariableExpression(var: !3355, expr: !DIExpression())
!3355 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3339, file: !139, line: 116, type: !3347, isLocal: true, isDefinition: true)
!3356 = !DIGlobalVariableExpression(var: !3357, expr: !DIExpression())
!3357 = distinct !DIGlobalVariable(name: "slot0", scope: !3339, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!3358 = !DIGlobalVariableExpression(var: !3359, expr: !DIExpression())
!3359 = distinct !DIGlobalVariable(name: "slotvec", scope: !3339, file: !139, line: 845, type: !3360, isLocal: true, isDefinition: true)
!3360 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3361, size: 64)
!3361 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !3362)
!3362 = !{!3363, !3364}
!3363 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3361, file: !139, line: 836, baseType: !134, size: 64)
!3364 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3361, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!3365 = !DIGlobalVariableExpression(var: !3366, expr: !DIExpression())
!3366 = distinct !DIGlobalVariable(name: "nslots", scope: !3339, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!3367 = !DIGlobalVariableExpression(var: !3368, expr: !DIExpression())
!3368 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3339, file: !139, line: 844, type: !3361, isLocal: true, isDefinition: true)
!3369 = !DILocalVariable(name: "arg", arg: 2, scope: !3338, file: !139, line: 1073, type: !69)
!3370 = distinct !DISubprogram(name: "quote", scope: !139, file: !139, line: 1079, type: !3371, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !115, retainedNodes: !4)
!3371 = !DISubroutineType(types: !3372)
!3372 = !{!69, !69}
!3373 = !DILocalVariable(name: "arg", arg: 1, scope: !3370, file: !139, line: 1079, type: !69)
!3374 = !DILocation(line: 1079, column: 20, scope: !3370)
!3375 = !DILocation(line: 1081, column: 22, scope: !3370)
!3376 = !DILocation(line: 1081, column: 10, scope: !3370)
!3377 = !DILocation(line: 1081, column: 3, scope: !3370)
!3378 = !DILocalVariable(name: "arg", arg: 1, scope: !3379, file: !139, line: 1079, type: !69)
!3379 = distinct !DISubprogram(name: "quote", scope: !139, file: !139, line: 1079, type: !3371, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3380, retainedNodes: !4)
!3380 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !3381, nameTableKind: None)
!3381 = !{!3382, !3384, !3386, !3395, !3397, !3399, !3406, !3408}
!3382 = !DIGlobalVariableExpression(var: !3383, expr: !DIExpression())
!3383 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3380, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!3384 = !DIGlobalVariableExpression(var: !3385, expr: !DIExpression())
!3385 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3380, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!3386 = !DIGlobalVariableExpression(var: !3387, expr: !DIExpression())
!3387 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3380, file: !139, line: 1052, type: !3388, isLocal: false, isDefinition: true)
!3388 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !3389)
!3389 = !{!3390, !3391, !3392, !3393, !3394}
!3390 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3388, file: !139, line: 68, baseType: !118, size: 32)
!3391 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3388, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!3392 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3388, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!3393 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3388, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!3394 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3388, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!3395 = !DIGlobalVariableExpression(var: !3396, expr: !DIExpression())
!3396 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3380, file: !139, line: 116, type: !3388, isLocal: true, isDefinition: true)
!3397 = !DIGlobalVariableExpression(var: !3398, expr: !DIExpression())
!3398 = distinct !DIGlobalVariable(name: "slot0", scope: !3380, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!3399 = !DIGlobalVariableExpression(var: !3400, expr: !DIExpression())
!3400 = distinct !DIGlobalVariable(name: "slotvec", scope: !3380, file: !139, line: 845, type: !3401, isLocal: true, isDefinition: true)
!3401 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3402, size: 64)
!3402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !3403)
!3403 = !{!3404, !3405}
!3404 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3402, file: !139, line: 836, baseType: !134, size: 64)
!3405 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3402, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!3406 = !DIGlobalVariableExpression(var: !3407, expr: !DIExpression())
!3407 = distinct !DIGlobalVariable(name: "nslots", scope: !3380, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!3408 = !DIGlobalVariableExpression(var: !3409, expr: !DIExpression())
!3409 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3380, file: !139, line: 844, type: !3402, isLocal: true, isDefinition: true)
!3410 = distinct !DISubprogram(name: "getcon", scope: !3411, file: !3411, line: 87, type: !3412, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !208, retainedNodes: !4)
!3411 = !DIFile(filename: "./lib/selinux/selinux.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3412 = !DISubroutineType(types: !3413)
!3413 = !{!72, !3414}
!3414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3415, size: 64)
!3415 = !DIDerivedType(tag: DW_TAG_typedef, name: "security_context_t", file: !3411, line: 83, baseType: !6)
!3416 = !DILocalVariable(name: "con", arg: 1, scope: !3410, file: !3411, line: 87, type: !3414)
!3417 = !DILocation(line: 87, column: 29, scope: !3410)
!3418 = !DILocation(line: 88, column: 5, scope: !3410)
!3419 = !DILocation(line: 88, column: 11, scope: !3410)
!3420 = !DILocation(line: 88, column: 22, scope: !3410)
!3421 = !DILocalVariable(name: "con", arg: 1, scope: !3422, file: !3411, line: 87, type: !3414)
!3422 = distinct !DISubprogram(name: "getcon", scope: !3411, file: !3411, line: 87, type: !3412, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3423, retainedNodes: !4)
!3423 = distinct !DICompileUnit(language: DW_LANG_C99, file: !209, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3424 = distinct !DISubprogram(name: "parse_user_spec", scope: !179, file: !179, line: 259, type: !3425, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !185, retainedNodes: !4)
!3425 = !DISubroutineType(types: !3426)
!3426 = !{!69, !69, !182, !183, !184, !184}
!3427 = !DILocalVariable(name: "spec", arg: 1, scope: !3424, file: !179, line: 259, type: !69)
!3428 = !DILocation(line: 259, column: 30, scope: !3424)
!3429 = !DILocalVariable(name: "uid", arg: 2, scope: !3424, file: !179, line: 259, type: !182)
!3430 = !DILocation(line: 259, column: 43, scope: !3424)
!3431 = !DILocalVariable(name: "gid", arg: 3, scope: !3424, file: !179, line: 259, type: !183)
!3432 = !DILocation(line: 259, column: 55, scope: !3424)
!3433 = !DILocalVariable(name: "username", arg: 4, scope: !3424, file: !179, line: 260, type: !184)
!3434 = !DILocation(line: 260, column: 25, scope: !3424)
!3435 = !DILocalVariable(name: "groupname", arg: 5, scope: !3424, file: !179, line: 260, type: !184)
!3436 = !DILocation(line: 260, column: 42, scope: !3424)
!3437 = !DILocalVariable(name: "colon", scope: !3424, file: !179, line: 262, type: !69)
!3438 = !DILocation(line: 262, column: 15, scope: !3424)
!3439 = !DILocation(line: 262, column: 23, scope: !3424)
!3440 = !DILocation(line: 262, column: 37, scope: !3424)
!3441 = !DILocation(line: 262, column: 29, scope: !3424)
!3442 = !DILocalVariable(name: "error_msg", scope: !3424, file: !179, line: 263, type: !69)
!3443 = !DILocation(line: 263, column: 15, scope: !3424)
!3444 = !DILocation(line: 264, column: 27, scope: !3424)
!3445 = !DILocation(line: 264, column: 33, scope: !3424)
!3446 = !DILocation(line: 264, column: 40, scope: !3424)
!3447 = !DILocation(line: 264, column: 45, scope: !3424)
!3448 = !DILocation(line: 264, column: 50, scope: !3424)
!3449 = !DILocation(line: 264, column: 60, scope: !3424)
!3450 = !DILocation(line: 264, column: 5, scope: !3424)
!3451 = !DILocation(line: 266, column: 7, scope: !3452)
!3452 = distinct !DILexicalBlock(scope: !3424, file: !179, line: 266, column: 7)
!3453 = !DILocation(line: 266, column: 11, scope: !3452)
!3454 = !DILocation(line: 266, column: 15, scope: !3452)
!3455 = !DILocation(line: 266, column: 21, scope: !3452)
!3456 = !DILocation(line: 266, column: 24, scope: !3452)
!3457 = !DILocation(line: 266, column: 7, scope: !3424)
!3458 = !DILocalVariable(name: "dot", scope: !3459, file: !179, line: 274, type: !69)
!3459 = distinct !DILexicalBlock(scope: !3452, file: !179, line: 267, column: 5)
!3460 = !DILocation(line: 274, column: 19, scope: !3459)
!3461 = !DILocation(line: 274, column: 33, scope: !3459)
!3462 = !DILocation(line: 274, column: 25, scope: !3459)
!3463 = !DILocation(line: 275, column: 11, scope: !3464)
!3464 = distinct !DILexicalBlock(scope: !3459, file: !179, line: 275, column: 11)
!3465 = !DILocation(line: 276, column: 11, scope: !3464)
!3466 = !DILocation(line: 276, column: 38, scope: !3464)
!3467 = !DILocation(line: 276, column: 44, scope: !3464)
!3468 = !DILocation(line: 276, column: 49, scope: !3464)
!3469 = !DILocation(line: 276, column: 54, scope: !3464)
!3470 = !DILocation(line: 276, column: 59, scope: !3464)
!3471 = !DILocation(line: 276, column: 69, scope: !3464)
!3472 = !DILocation(line: 276, column: 16, scope: !3464)
!3473 = !DILocation(line: 275, column: 11, scope: !3459)
!3474 = !DILocation(line: 277, column: 19, scope: !3464)
!3475 = !DILocation(line: 277, column: 9, scope: !3464)
!3476 = !DILocation(line: 278, column: 5, scope: !3459)
!3477 = !DILocation(line: 280, column: 10, scope: !3424)
!3478 = !DILocation(line: 280, column: 3, scope: !3424)
!3479 = !DILocalVariable(name: "error_msg", scope: !3480, file: !179, line: 263, type: !69)
!3480 = distinct !DISubprogram(name: "parse_user_spec", scope: !179, file: !179, line: 259, type: !3425, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3481, retainedNodes: !4)
!3481 = distinct !DICompileUnit(language: DW_LANG_C99, file: !186, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !187, globals: !3482, nameTableKind: None)
!3482 = !{!3483, !3486, !3488}
!3483 = !DIGlobalVariableExpression(var: !3484, expr: !DIExpression())
!3484 = distinct !DIGlobalVariable(name: "E_invalid_user", scope: !3485, file: !179, line: 106, type: !69, isLocal: true, isDefinition: true)
!3485 = distinct !DISubprogram(name: "parse_with_separator", scope: !179, file: !179, line: 102, type: !180, scopeLine: 105, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3481, retainedNodes: !4)
!3486 = !DIGlobalVariableExpression(var: !3487, expr: !DIExpression())
!3487 = distinct !DIGlobalVariable(name: "E_invalid_group", scope: !3485, file: !179, line: 107, type: !69, isLocal: true, isDefinition: true)
!3488 = !DIGlobalVariableExpression(var: !3489, expr: !DIExpression())
!3489 = distinct !DIGlobalVariable(name: "E_bad_spec", scope: !3485, file: !179, line: 108, type: !69, isLocal: true, isDefinition: true)
!3490 = !DILocalVariable(name: "spec", arg: 1, scope: !178, file: !179, line: 102, type: !69)
!3491 = !DILocation(line: 102, column: 35, scope: !178)
!3492 = !DILocalVariable(name: "separator", arg: 2, scope: !178, file: !179, line: 102, type: !69)
!3493 = !DILocation(line: 102, column: 53, scope: !178)
!3494 = !DILocalVariable(name: "uid", arg: 3, scope: !178, file: !179, line: 103, type: !182)
!3495 = !DILocation(line: 103, column: 30, scope: !178)
!3496 = !DILocalVariable(name: "gid", arg: 4, scope: !178, file: !179, line: 103, type: !183)
!3497 = !DILocation(line: 103, column: 42, scope: !178)
!3498 = !DILocalVariable(name: "username", arg: 5, scope: !178, file: !179, line: 104, type: !184)
!3499 = !DILocation(line: 104, column: 30, scope: !178)
!3500 = !DILocalVariable(name: "groupname", arg: 6, scope: !178, file: !179, line: 104, type: !184)
!3501 = !DILocation(line: 104, column: 47, scope: !178)
!3502 = !DILocalVariable(name: "error_msg", scope: !178, file: !179, line: 110, type: !69)
!3503 = !DILocation(line: 110, column: 15, scope: !178)
!3504 = !DILocalVariable(name: "pwd", scope: !178, file: !179, line: 111, type: !3505)
!3505 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3506, size: 64)
!3506 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "passwd", file: !659, line: 49, size: 384, elements: !3507)
!3507 = !{!3508, !3509, !3510, !3511, !3512, !3513, !3514}
!3508 = !DIDerivedType(tag: DW_TAG_member, name: "pw_name", scope: !3506, file: !659, line: 51, baseType: !6, size: 64)
!3509 = !DIDerivedType(tag: DW_TAG_member, name: "pw_passwd", scope: !3506, file: !659, line: 52, baseType: !6, size: 64, offset: 64)
!3510 = !DIDerivedType(tag: DW_TAG_member, name: "pw_uid", scope: !3506, file: !659, line: 54, baseType: !14, size: 32, offset: 128)
!3511 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gid", scope: !3506, file: !659, line: 55, baseType: !22, size: 32, offset: 160)
!3512 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gecos", scope: !3506, file: !659, line: 56, baseType: !6, size: 64, offset: 192)
!3513 = !DIDerivedType(tag: DW_TAG_member, name: "pw_dir", scope: !3506, file: !659, line: 57, baseType: !6, size: 64, offset: 256)
!3514 = !DIDerivedType(tag: DW_TAG_member, name: "pw_shell", scope: !3506, file: !659, line: 58, baseType: !6, size: 64, offset: 320)
!3515 = !DILocation(line: 111, column: 18, scope: !178)
!3516 = !DILocalVariable(name: "grp", scope: !178, file: !179, line: 112, type: !3517)
!3517 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3518, size: 64)
!3518 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "group", file: !1185, line: 42, size: 256, elements: !3519)
!3519 = !{!3520, !3521, !3522, !3523}
!3520 = !DIDerivedType(tag: DW_TAG_member, name: "gr_name", scope: !3518, file: !1185, line: 44, baseType: !6, size: 64)
!3521 = !DIDerivedType(tag: DW_TAG_member, name: "gr_passwd", scope: !3518, file: !1185, line: 45, baseType: !6, size: 64, offset: 64)
!3522 = !DIDerivedType(tag: DW_TAG_member, name: "gr_gid", scope: !3518, file: !1185, line: 46, baseType: !22, size: 32, offset: 128)
!3523 = !DIDerivedType(tag: DW_TAG_member, name: "gr_mem", scope: !3518, file: !1185, line: 47, baseType: !184, size: 64, offset: 192)
!3524 = !DILocation(line: 112, column: 17, scope: !178)
!3525 = !DILocalVariable(name: "u", scope: !178, file: !179, line: 113, type: !6)
!3526 = !DILocation(line: 113, column: 9, scope: !178)
!3527 = !DILocalVariable(name: "g", scope: !178, file: !179, line: 114, type: !69)
!3528 = !DILocation(line: 114, column: 15, scope: !178)
!3529 = !DILocalVariable(name: "gname", scope: !178, file: !179, line: 115, type: !6)
!3530 = !DILocation(line: 115, column: 9, scope: !178)
!3531 = !DILocalVariable(name: "unum", scope: !178, file: !179, line: 116, type: !12)
!3532 = !DILocation(line: 116, column: 9, scope: !178)
!3533 = !DILocation(line: 116, column: 17, scope: !178)
!3534 = !DILocation(line: 116, column: 16, scope: !178)
!3535 = !DILocalVariable(name: "gnum", scope: !178, file: !179, line: 117, type: !21)
!3536 = !DILocation(line: 117, column: 9, scope: !178)
!3537 = !DILocation(line: 117, column: 16, scope: !178)
!3538 = !DILocation(line: 117, column: 23, scope: !178)
!3539 = !DILocation(line: 117, column: 22, scope: !178)
!3540 = !DILocation(line: 119, column: 13, scope: !178)
!3541 = !DILocation(line: 120, column: 7, scope: !3542)
!3542 = distinct !DILexicalBlock(scope: !178, file: !179, line: 120, column: 7)
!3543 = !DILocation(line: 120, column: 7, scope: !178)
!3544 = !DILocation(line: 121, column: 6, scope: !3542)
!3545 = !DILocation(line: 121, column: 15, scope: !3542)
!3546 = !DILocation(line: 121, column: 5, scope: !3542)
!3547 = !DILocation(line: 122, column: 7, scope: !3548)
!3548 = distinct !DILexicalBlock(scope: !178, file: !179, line: 122, column: 7)
!3549 = !DILocation(line: 122, column: 7, scope: !178)
!3550 = !DILocation(line: 123, column: 6, scope: !3548)
!3551 = !DILocation(line: 123, column: 16, scope: !3548)
!3552 = !DILocation(line: 123, column: 5, scope: !3548)
!3553 = !DILocation(line: 129, column: 5, scope: !178)
!3554 = !DILocation(line: 130, column: 7, scope: !3555)
!3555 = distinct !DILexicalBlock(scope: !178, file: !179, line: 130, column: 7)
!3556 = !DILocation(line: 130, column: 17, scope: !3555)
!3557 = !DILocation(line: 130, column: 7, scope: !178)
!3558 = !DILocation(line: 132, column: 12, scope: !3559)
!3559 = distinct !DILexicalBlock(scope: !3560, file: !179, line: 132, column: 11)
!3560 = distinct !DILexicalBlock(scope: !3555, file: !179, line: 131, column: 5)
!3561 = !DILocation(line: 132, column: 11, scope: !3559)
!3562 = !DILocation(line: 132, column: 11, scope: !3560)
!3563 = !DILocation(line: 133, column: 22, scope: !3559)
!3564 = !DILocation(line: 133, column: 13, scope: !3559)
!3565 = !DILocation(line: 133, column: 11, scope: !3559)
!3566 = !DILocation(line: 133, column: 9, scope: !3559)
!3567 = !DILocation(line: 134, column: 5, scope: !3560)
!3568 = !DILocalVariable(name: "ulen", scope: !3569, file: !179, line: 137, type: !134)
!3569 = distinct !DILexicalBlock(scope: !3555, file: !179, line: 136, column: 5)
!3570 = !DILocation(line: 137, column: 14, scope: !3569)
!3571 = !DILocation(line: 137, column: 21, scope: !3569)
!3572 = !DILocation(line: 137, column: 33, scope: !3569)
!3573 = !DILocation(line: 137, column: 31, scope: !3569)
!3574 = !DILocation(line: 138, column: 11, scope: !3575)
!3575 = distinct !DILexicalBlock(scope: !3569, file: !179, line: 138, column: 11)
!3576 = !DILocation(line: 138, column: 16, scope: !3575)
!3577 = !DILocation(line: 138, column: 11, scope: !3569)
!3578 = !DILocation(line: 140, column: 24, scope: !3579)
!3579 = distinct !DILexicalBlock(scope: !3575, file: !179, line: 139, column: 9)
!3580 = !DILocation(line: 140, column: 30, scope: !3579)
!3581 = !DILocation(line: 140, column: 35, scope: !3579)
!3582 = !DILocation(line: 140, column: 15, scope: !3579)
!3583 = !DILocation(line: 140, column: 13, scope: !3579)
!3584 = !DILocation(line: 141, column: 11, scope: !3579)
!3585 = !DILocation(line: 141, column: 13, scope: !3579)
!3586 = !DILocation(line: 141, column: 19, scope: !3579)
!3587 = !DILocation(line: 142, column: 9, scope: !3579)
!3588 = !DILocation(line: 145, column: 8, scope: !178)
!3589 = !DILocation(line: 145, column: 18, scope: !178)
!3590 = !DILocation(line: 145, column: 26, scope: !178)
!3591 = !DILocation(line: 145, column: 31, scope: !178)
!3592 = !DILocation(line: 145, column: 41, scope: !178)
!3593 = !DILocation(line: 145, column: 29, scope: !178)
!3594 = !DILocation(line: 145, column: 46, scope: !178)
!3595 = !DILocation(line: 147, column: 10, scope: !178)
!3596 = !DILocation(line: 147, column: 20, scope: !178)
!3597 = !DILocation(line: 145, column: 5, scope: !178)
!3598 = !DILocation(line: 158, column: 7, scope: !3599)
!3599 = distinct !DILexicalBlock(scope: !178, file: !179, line: 158, column: 7)
!3600 = !DILocation(line: 158, column: 9, scope: !3599)
!3601 = !DILocation(line: 158, column: 7, scope: !178)
!3602 = !DILocation(line: 161, column: 15, scope: !3603)
!3603 = distinct !DILexicalBlock(scope: !3599, file: !179, line: 159, column: 5)
!3604 = !DILocation(line: 161, column: 14, scope: !3603)
!3605 = !DILocation(line: 161, column: 17, scope: !3603)
!3606 = !DILocation(line: 161, column: 43, scope: !3603)
!3607 = !DILocation(line: 161, column: 33, scope: !3603)
!3608 = !DILocation(line: 161, column: 11, scope: !3603)
!3609 = !DILocation(line: 162, column: 11, scope: !3610)
!3610 = distinct !DILexicalBlock(scope: !3603, file: !179, line: 162, column: 11)
!3611 = !DILocation(line: 162, column: 15, scope: !3610)
!3612 = !DILocation(line: 162, column: 11, scope: !3603)
!3613 = !DILocalVariable(name: "use_login_group", scope: !3614, file: !179, line: 164, type: !27)
!3614 = distinct !DILexicalBlock(scope: !3610, file: !179, line: 163, column: 9)
!3615 = !DILocation(line: 164, column: 16, scope: !3614)
!3616 = !DILocation(line: 164, column: 35, scope: !3614)
!3617 = !DILocation(line: 164, column: 45, scope: !3614)
!3618 = !DILocation(line: 164, column: 53, scope: !3614)
!3619 = !DILocation(line: 164, column: 56, scope: !3614)
!3620 = !DILocation(line: 164, column: 58, scope: !3614)
!3621 = !DILocation(line: 0, scope: !3614)
!3622 = !DILocation(line: 165, column: 15, scope: !3623)
!3623 = distinct !DILexicalBlock(scope: !3614, file: !179, line: 165, column: 15)
!3624 = !DILocation(line: 165, column: 15, scope: !3614)
!3625 = !DILocation(line: 169, column: 27, scope: !3626)
!3626 = distinct !DILexicalBlock(scope: !3623, file: !179, line: 166, column: 13)
!3627 = !DILocation(line: 169, column: 25, scope: !3626)
!3628 = !DILocation(line: 170, column: 13, scope: !3626)
!3629 = !DILocalVariable(name: "tmp", scope: !3630, file: !179, line: 173, type: !84)
!3630 = distinct !DILexicalBlock(scope: !3623, file: !179, line: 172, column: 13)
!3631 = !DILocation(line: 173, column: 33, scope: !3630)
!3632 = !DILocation(line: 174, column: 29, scope: !3633)
!3633 = distinct !DILexicalBlock(scope: !3630, file: !179, line: 174, column: 19)
!3634 = !DILocation(line: 174, column: 19, scope: !3633)
!3635 = !DILocation(line: 174, column: 52, scope: !3633)
!3636 = !DILocation(line: 175, column: 19, scope: !3633)
!3637 = !DILocation(line: 175, column: 22, scope: !3633)
!3638 = !DILocation(line: 175, column: 26, scope: !3633)
!3639 = !DILocation(line: 175, column: 36, scope: !3633)
!3640 = !DILocation(line: 175, column: 47, scope: !3633)
!3641 = !DILocation(line: 175, column: 39, scope: !3633)
!3642 = !DILocation(line: 175, column: 51, scope: !3633)
!3643 = !DILocation(line: 174, column: 19, scope: !3630)
!3644 = !DILocation(line: 176, column: 24, scope: !3633)
!3645 = !DILocation(line: 176, column: 22, scope: !3633)
!3646 = !DILocation(line: 176, column: 17, scope: !3633)
!3647 = !DILocation(line: 178, column: 29, scope: !3633)
!3648 = !DILocation(line: 178, column: 27, scope: !3633)
!3649 = !DILocation(line: 180, column: 9, scope: !3614)
!3650 = !DILocation(line: 183, column: 18, scope: !3651)
!3651 = distinct !DILexicalBlock(scope: !3610, file: !179, line: 182, column: 9)
!3652 = !DILocation(line: 183, column: 23, scope: !3651)
!3653 = !DILocation(line: 183, column: 16, scope: !3651)
!3654 = !DILocation(line: 184, column: 15, scope: !3655)
!3655 = distinct !DILexicalBlock(scope: !3651, file: !179, line: 184, column: 15)
!3656 = !DILocation(line: 184, column: 17, scope: !3655)
!3657 = !DILocation(line: 184, column: 25, scope: !3655)
!3658 = !DILocation(line: 184, column: 28, scope: !3655)
!3659 = !DILocation(line: 184, column: 38, scope: !3655)
!3660 = !DILocation(line: 184, column: 15, scope: !3651)
!3661 = !DILocalVariable(name: "buf", scope: !3662, file: !179, line: 188, type: !53)
!3662 = distinct !DILexicalBlock(scope: !3655, file: !179, line: 185, column: 13)
!3663 = !DILocation(line: 188, column: 20, scope: !3662)
!3664 = !DILocation(line: 189, column: 22, scope: !3662)
!3665 = !DILocation(line: 189, column: 27, scope: !3662)
!3666 = !DILocation(line: 189, column: 20, scope: !3662)
!3667 = !DILocation(line: 190, column: 31, scope: !3662)
!3668 = !DILocation(line: 190, column: 21, scope: !3662)
!3669 = !DILocation(line: 190, column: 19, scope: !3662)
!3670 = !DILocation(line: 191, column: 32, scope: !3662)
!3671 = !DILocation(line: 191, column: 38, scope: !3662)
!3672 = !DILocation(line: 191, column: 43, scope: !3662)
!3673 = !DILocation(line: 191, column: 64, scope: !3662)
!3674 = !DILocation(line: 191, column: 70, scope: !3662)
!3675 = !DILocation(line: 191, column: 53, scope: !3662)
!3676 = !DILocation(line: 191, column: 23, scope: !3662)
!3677 = !DILocation(line: 191, column: 21, scope: !3662)
!3678 = !DILocation(line: 192, column: 15, scope: !3662)
!3679 = !DILocation(line: 193, column: 13, scope: !3662)
!3680 = !DILocation(line: 195, column: 7, scope: !3603)
!3681 = !DILocation(line: 196, column: 5, scope: !3603)
!3682 = !DILocation(line: 198, column: 7, scope: !3683)
!3683 = distinct !DILexicalBlock(scope: !178, file: !179, line: 198, column: 7)
!3684 = !DILocation(line: 198, column: 9, scope: !3683)
!3685 = !DILocation(line: 198, column: 17, scope: !3683)
!3686 = !DILocation(line: 198, column: 20, scope: !3683)
!3687 = !DILocation(line: 198, column: 30, scope: !3683)
!3688 = !DILocation(line: 198, column: 7, scope: !178)
!3689 = !DILocation(line: 202, column: 15, scope: !3690)
!3690 = distinct !DILexicalBlock(scope: !3683, file: !179, line: 199, column: 5)
!3691 = !DILocation(line: 202, column: 14, scope: !3690)
!3692 = !DILocation(line: 202, column: 17, scope: !3690)
!3693 = !DILocation(line: 202, column: 43, scope: !3690)
!3694 = !DILocation(line: 202, column: 33, scope: !3690)
!3695 = !DILocation(line: 202, column: 11, scope: !3690)
!3696 = !DILocation(line: 203, column: 11, scope: !3697)
!3697 = distinct !DILexicalBlock(scope: !3690, file: !179, line: 203, column: 11)
!3698 = !DILocation(line: 203, column: 15, scope: !3697)
!3699 = !DILocation(line: 203, column: 11, scope: !3690)
!3700 = !DILocalVariable(name: "tmp", scope: !3701, file: !179, line: 205, type: !84)
!3701 = distinct !DILexicalBlock(scope: !3697, file: !179, line: 204, column: 9)
!3702 = !DILocation(line: 205, column: 29, scope: !3701)
!3703 = !DILocation(line: 206, column: 25, scope: !3704)
!3704 = distinct !DILexicalBlock(scope: !3701, file: !179, line: 206, column: 15)
!3705 = !DILocation(line: 206, column: 15, scope: !3704)
!3706 = !DILocation(line: 206, column: 48, scope: !3704)
!3707 = !DILocation(line: 207, column: 15, scope: !3704)
!3708 = !DILocation(line: 207, column: 18, scope: !3704)
!3709 = !DILocation(line: 207, column: 22, scope: !3704)
!3710 = !DILocation(line: 207, column: 32, scope: !3704)
!3711 = !DILocation(line: 207, column: 43, scope: !3704)
!3712 = !DILocation(line: 207, column: 35, scope: !3704)
!3713 = !DILocation(line: 207, column: 47, scope: !3704)
!3714 = !DILocation(line: 206, column: 15, scope: !3701)
!3715 = !DILocation(line: 208, column: 20, scope: !3704)
!3716 = !DILocation(line: 208, column: 18, scope: !3704)
!3717 = !DILocation(line: 208, column: 13, scope: !3704)
!3718 = !DILocation(line: 210, column: 25, scope: !3704)
!3719 = !DILocation(line: 210, column: 23, scope: !3704)
!3720 = !DILocation(line: 211, column: 9, scope: !3701)
!3721 = !DILocation(line: 213, column: 16, scope: !3697)
!3722 = !DILocation(line: 213, column: 21, scope: !3697)
!3723 = !DILocation(line: 213, column: 14, scope: !3697)
!3724 = !DILocation(line: 214, column: 7, scope: !3690)
!3725 = !DILocation(line: 215, column: 24, scope: !3690)
!3726 = !DILocation(line: 215, column: 15, scope: !3690)
!3727 = !DILocation(line: 215, column: 13, scope: !3690)
!3728 = !DILocation(line: 216, column: 5, scope: !3690)
!3729 = !DILocation(line: 218, column: 7, scope: !3730)
!3730 = distinct !DILexicalBlock(scope: !178, file: !179, line: 218, column: 7)
!3731 = !DILocation(line: 218, column: 17, scope: !3730)
!3732 = !DILocation(line: 218, column: 7, scope: !178)
!3733 = !DILocation(line: 220, column: 14, scope: !3734)
!3734 = distinct !DILexicalBlock(scope: !3730, file: !179, line: 219, column: 5)
!3735 = !DILocation(line: 220, column: 8, scope: !3734)
!3736 = !DILocation(line: 220, column: 12, scope: !3734)
!3737 = !DILocation(line: 221, column: 11, scope: !3738)
!3738 = distinct !DILexicalBlock(scope: !3734, file: !179, line: 221, column: 11)
!3739 = !DILocation(line: 221, column: 11, scope: !3734)
!3740 = !DILocation(line: 222, column: 16, scope: !3738)
!3741 = !DILocation(line: 222, column: 10, scope: !3738)
!3742 = !DILocation(line: 222, column: 14, scope: !3738)
!3743 = !DILocation(line: 222, column: 9, scope: !3738)
!3744 = !DILocation(line: 223, column: 11, scope: !3745)
!3745 = distinct !DILexicalBlock(scope: !3734, file: !179, line: 223, column: 11)
!3746 = !DILocation(line: 223, column: 11, scope: !3734)
!3747 = !DILocation(line: 225, column: 23, scope: !3748)
!3748 = distinct !DILexicalBlock(scope: !3745, file: !179, line: 224, column: 9)
!3749 = !DILocation(line: 225, column: 12, scope: !3748)
!3750 = !DILocation(line: 225, column: 21, scope: !3748)
!3751 = !DILocation(line: 226, column: 13, scope: !3748)
!3752 = !DILocation(line: 227, column: 9, scope: !3748)
!3753 = !DILocation(line: 228, column: 11, scope: !3754)
!3754 = distinct !DILexicalBlock(scope: !3734, file: !179, line: 228, column: 11)
!3755 = !DILocation(line: 228, column: 11, scope: !3734)
!3756 = !DILocation(line: 230, column: 24, scope: !3757)
!3757 = distinct !DILexicalBlock(scope: !3754, file: !179, line: 229, column: 9)
!3758 = !DILocation(line: 230, column: 12, scope: !3757)
!3759 = !DILocation(line: 230, column: 22, scope: !3757)
!3760 = !DILocation(line: 231, column: 17, scope: !3757)
!3761 = !DILocation(line: 232, column: 9, scope: !3757)
!3762 = !DILocation(line: 233, column: 5, scope: !3734)
!3763 = !DILocation(line: 235, column: 9, scope: !178)
!3764 = !DILocation(line: 235, column: 3, scope: !178)
!3765 = !DILocation(line: 236, column: 9, scope: !178)
!3766 = !DILocation(line: 236, column: 3, scope: !178)
!3767 = !DILocation(line: 237, column: 10, scope: !178)
!3768 = !DILocation(line: 237, column: 22, scope: !178)
!3769 = !DILocation(line: 237, column: 3, scope: !178)
!3770 = !DILocalVariable(name: "spec", arg: 1, scope: !3771, file: !179, line: 102, type: !69)
!3771 = distinct !DISubprogram(name: "parse_with_separator", scope: !179, file: !179, line: 102, type: !180, scopeLine: 105, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3772, retainedNodes: !4)
!3772 = distinct !DICompileUnit(language: DW_LANG_C99, file: !186, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !187, globals: !3773, nameTableKind: None)
!3773 = !{!3774, !3776, !3778}
!3774 = !DIGlobalVariableExpression(var: !3775, expr: !DIExpression())
!3775 = distinct !DIGlobalVariable(name: "E_invalid_user", scope: !3771, file: !179, line: 106, type: !69, isLocal: true, isDefinition: true)
!3776 = !DIGlobalVariableExpression(var: !3777, expr: !DIExpression())
!3777 = distinct !DIGlobalVariable(name: "E_invalid_group", scope: !3771, file: !179, line: 107, type: !69, isLocal: true, isDefinition: true)
!3778 = !DIGlobalVariableExpression(var: !3779, expr: !DIExpression())
!3779 = distinct !DIGlobalVariable(name: "E_bad_spec", scope: !3771, file: !179, line: 108, type: !69, isLocal: true, isDefinition: true)
!3780 = !DILocalVariable(name: "separator", arg: 2, scope: !3771, file: !179, line: 102, type: !69)
!3781 = !DILocalVariable(name: "uid", arg: 3, scope: !3771, file: !179, line: 103, type: !182)
!3782 = !DILocalVariable(name: "gid", arg: 4, scope: !3771, file: !179, line: 103, type: !183)
!3783 = !DILocalVariable(name: "username", arg: 5, scope: !3771, file: !179, line: 104, type: !184)
!3784 = !DILocalVariable(name: "groupname", arg: 6, scope: !3771, file: !179, line: 104, type: !184)
!3785 = !DILocalVariable(name: "error_msg", scope: !3771, file: !179, line: 110, type: !69)
!3786 = !DILocalVariable(name: "pwd", scope: !3771, file: !179, line: 111, type: !3787)
!3787 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3788, size: 64)
!3788 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "passwd", file: !659, line: 49, size: 384, elements: !3789)
!3789 = !{!3790, !3791, !3792, !3793, !3794, !3795, !3796}
!3790 = !DIDerivedType(tag: DW_TAG_member, name: "pw_name", scope: !3788, file: !659, line: 51, baseType: !6, size: 64)
!3791 = !DIDerivedType(tag: DW_TAG_member, name: "pw_passwd", scope: !3788, file: !659, line: 52, baseType: !6, size: 64, offset: 64)
!3792 = !DIDerivedType(tag: DW_TAG_member, name: "pw_uid", scope: !3788, file: !659, line: 54, baseType: !14, size: 32, offset: 128)
!3793 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gid", scope: !3788, file: !659, line: 55, baseType: !22, size: 32, offset: 160)
!3794 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gecos", scope: !3788, file: !659, line: 56, baseType: !6, size: 64, offset: 192)
!3795 = !DIDerivedType(tag: DW_TAG_member, name: "pw_dir", scope: !3788, file: !659, line: 57, baseType: !6, size: 64, offset: 256)
!3796 = !DIDerivedType(tag: DW_TAG_member, name: "pw_shell", scope: !3788, file: !659, line: 58, baseType: !6, size: 64, offset: 320)
!3797 = !DILocalVariable(name: "grp", scope: !3771, file: !179, line: 112, type: !3798)
!3798 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3799, size: 64)
!3799 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "group", file: !1185, line: 42, size: 256, elements: !3800)
!3800 = !{!3801, !3802, !3803, !3804}
!3801 = !DIDerivedType(tag: DW_TAG_member, name: "gr_name", scope: !3799, file: !1185, line: 44, baseType: !6, size: 64)
!3802 = !DIDerivedType(tag: DW_TAG_member, name: "gr_passwd", scope: !3799, file: !1185, line: 45, baseType: !6, size: 64, offset: 64)
!3803 = !DIDerivedType(tag: DW_TAG_member, name: "gr_gid", scope: !3799, file: !1185, line: 46, baseType: !22, size: 32, offset: 128)
!3804 = !DIDerivedType(tag: DW_TAG_member, name: "gr_mem", scope: !3799, file: !1185, line: 47, baseType: !184, size: 64, offset: 192)
!3805 = !DILocalVariable(name: "u", scope: !3771, file: !179, line: 113, type: !6)
!3806 = !DILocalVariable(name: "g", scope: !3771, file: !179, line: 114, type: !69)
!3807 = !DILocalVariable(name: "gname", scope: !3771, file: !179, line: 115, type: !6)
!3808 = !DILocalVariable(name: "unum", scope: !3771, file: !179, line: 116, type: !12)
!3809 = !DILocalVariable(name: "gnum", scope: !3771, file: !179, line: 117, type: !21)
!3810 = distinct !DISubprogram(name: "version_etc_arn", scope: !3811, file: !3811, line: 61, type: !3812, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !210, retainedNodes: !4)
!3811 = !DIFile(filename: "lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3812 = !DISubroutineType(types: !3813)
!3813 = !{null, !3814, !69, !69, !69, !3867, !134}
!3814 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3815, size: 64)
!3815 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3816, line: 7, baseType: !3817)
!3816 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!3817 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3818, line: 49, size: 1728, elements: !3819)
!3818 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!3819 = !{!3820, !3821, !3822, !3823, !3824, !3825, !3826, !3827, !3828, !3829, !3830, !3831, !3832, !3835, !3837, !3838, !3839, !3841, !3842, !3844, !3848, !3851, !3853, !3856, !3859, !3860, !3861, !3862, !3863}
!3820 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3817, file: !3818, line: 51, baseType: !72, size: 32)
!3821 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3817, file: !3818, line: 54, baseType: !6, size: 64, offset: 64)
!3822 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3817, file: !3818, line: 55, baseType: !6, size: 64, offset: 128)
!3823 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3817, file: !3818, line: 56, baseType: !6, size: 64, offset: 192)
!3824 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3817, file: !3818, line: 57, baseType: !6, size: 64, offset: 256)
!3825 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3817, file: !3818, line: 58, baseType: !6, size: 64, offset: 320)
!3826 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3817, file: !3818, line: 59, baseType: !6, size: 64, offset: 384)
!3827 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3817, file: !3818, line: 60, baseType: !6, size: 64, offset: 448)
!3828 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3817, file: !3818, line: 61, baseType: !6, size: 64, offset: 512)
!3829 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3817, file: !3818, line: 64, baseType: !6, size: 64, offset: 576)
!3830 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3817, file: !3818, line: 65, baseType: !6, size: 64, offset: 640)
!3831 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3817, file: !3818, line: 66, baseType: !6, size: 64, offset: 704)
!3832 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3817, file: !3818, line: 68, baseType: !3833, size: 64, offset: 768)
!3833 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3834, size: 64)
!3834 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !3818, line: 36, flags: DIFlagFwdDecl)
!3835 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3817, file: !3818, line: 70, baseType: !3836, size: 64, offset: 832)
!3836 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3817, size: 64)
!3837 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3817, file: !3818, line: 72, baseType: !72, size: 32, offset: 896)
!3838 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3817, file: !3818, line: 73, baseType: !72, size: 32, offset: 928)
!3839 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3817, file: !3818, line: 74, baseType: !3840, size: 64, offset: 960)
!3840 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !15, line: 152, baseType: !981)
!3841 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3817, file: !3818, line: 77, baseType: !133, size: 16, offset: 1024)
!3842 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3817, file: !3818, line: 78, baseType: !3843, size: 8, offset: 1040)
!3843 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!3844 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3817, file: !3818, line: 79, baseType: !3845, size: 8, offset: 1048)
!3845 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 8, elements: !3846)
!3846 = !{!3847}
!3847 = !DISubrange(count: 1)
!3848 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3817, file: !3818, line: 81, baseType: !3849, size: 64, offset: 1088)
!3849 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3850, size: 64)
!3850 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !3818, line: 43, baseType: null)
!3851 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3817, file: !3818, line: 89, baseType: !3852, size: 64, offset: 1152)
!3852 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !15, line: 153, baseType: !981)
!3853 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3817, file: !3818, line: 91, baseType: !3854, size: 64, offset: 1216)
!3854 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3855, size: 64)
!3855 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !3818, line: 37, flags: DIFlagFwdDecl)
!3856 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3817, file: !3818, line: 92, baseType: !3857, size: 64, offset: 1280)
!3857 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3858, size: 64)
!3858 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !3818, line: 38, flags: DIFlagFwdDecl)
!3859 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3817, file: !3818, line: 93, baseType: !3836, size: 64, offset: 1344)
!3860 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3817, file: !3818, line: 94, baseType: !8, size: 64, offset: 1408)
!3861 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3817, file: !3818, line: 95, baseType: !134, size: 64, offset: 1472)
!3862 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3817, file: !3818, line: 96, baseType: !72, size: 32, offset: 1536)
!3863 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3817, file: !3818, line: 98, baseType: !3864, size: 160, offset: 1568)
!3864 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 160, elements: !3865)
!3865 = !{!3866}
!3866 = !DISubrange(count: 20)
!3867 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !141, size: 64)
!3868 = !DILocalVariable(name: "stream", arg: 1, scope: !3810, file: !3811, line: 61, type: !3814)
!3869 = !DILocation(line: 61, column: 24, scope: !3810)
!3870 = !DILocalVariable(name: "command_name", arg: 2, scope: !3810, file: !3811, line: 62, type: !69)
!3871 = !DILocation(line: 62, column: 30, scope: !3810)
!3872 = !DILocalVariable(name: "package", arg: 3, scope: !3810, file: !3811, line: 62, type: !69)
!3873 = !DILocation(line: 62, column: 56, scope: !3810)
!3874 = !DILocalVariable(name: "version", arg: 4, scope: !3810, file: !3811, line: 63, type: !69)
!3875 = !DILocation(line: 63, column: 30, scope: !3810)
!3876 = !DILocalVariable(name: "authors", arg: 5, scope: !3810, file: !3811, line: 64, type: !3867)
!3877 = !DILocation(line: 64, column: 39, scope: !3810)
!3878 = !DILocalVariable(name: "n_authors", arg: 6, scope: !3810, file: !3811, line: 64, type: !134)
!3879 = !DILocation(line: 64, column: 55, scope: !3810)
!3880 = !DILocation(line: 66, column: 7, scope: !3881)
!3881 = distinct !DILexicalBlock(scope: !3810, file: !3811, line: 66, column: 7)
!3882 = !DILocation(line: 66, column: 7, scope: !3810)
!3883 = !DILocation(line: 67, column: 14, scope: !3881)
!3884 = !DILocation(line: 67, column: 38, scope: !3881)
!3885 = !DILocation(line: 67, column: 52, scope: !3881)
!3886 = !DILocation(line: 67, column: 61, scope: !3881)
!3887 = !DILocation(line: 67, column: 5, scope: !3881)
!3888 = !DILocation(line: 69, column: 14, scope: !3881)
!3889 = !DILocation(line: 69, column: 33, scope: !3881)
!3890 = !DILocation(line: 69, column: 42, scope: !3881)
!3891 = !DILocation(line: 69, column: 5, scope: !3881)
!3892 = !DILocation(line: 83, column: 12, scope: !3810)
!3893 = !DILocation(line: 83, column: 43, scope: !3810)
!3894 = !DILocation(line: 83, column: 3, scope: !3810)
!3895 = !DILocation(line: 85, column: 3, scope: !3810)
!3896 = !DILocation(line: 88, column: 12, scope: !3810)
!3897 = !DILocation(line: 88, column: 20, scope: !3810)
!3898 = !DILocation(line: 88, column: 3, scope: !3810)
!3899 = !DILocation(line: 95, column: 3, scope: !3810)
!3900 = !DILocation(line: 97, column: 11, scope: !3810)
!3901 = !DILocation(line: 97, column: 3, scope: !3810)
!3902 = !DILocation(line: 102, column: 7, scope: !3903)
!3903 = distinct !DILexicalBlock(scope: !3810, file: !3811, line: 98, column: 5)
!3904 = !DILocation(line: 105, column: 16, scope: !3903)
!3905 = !DILocation(line: 105, column: 24, scope: !3903)
!3906 = !DILocation(line: 105, column: 47, scope: !3903)
!3907 = !DILocation(line: 105, column: 7, scope: !3903)
!3908 = !DILocation(line: 106, column: 7, scope: !3903)
!3909 = !DILocation(line: 109, column: 16, scope: !3903)
!3910 = !DILocation(line: 109, column: 24, scope: !3903)
!3911 = !DILocation(line: 109, column: 54, scope: !3903)
!3912 = !DILocation(line: 109, column: 66, scope: !3903)
!3913 = !DILocation(line: 109, column: 7, scope: !3903)
!3914 = !DILocation(line: 110, column: 7, scope: !3903)
!3915 = !DILocation(line: 113, column: 16, scope: !3903)
!3916 = !DILocation(line: 113, column: 24, scope: !3903)
!3917 = !DILocation(line: 114, column: 16, scope: !3903)
!3918 = !DILocation(line: 114, column: 28, scope: !3903)
!3919 = !DILocation(line: 114, column: 40, scope: !3903)
!3920 = !DILocation(line: 113, column: 7, scope: !3903)
!3921 = !DILocation(line: 115, column: 7, scope: !3903)
!3922 = !DILocation(line: 120, column: 16, scope: !3903)
!3923 = !DILocation(line: 120, column: 24, scope: !3903)
!3924 = !DILocation(line: 121, column: 16, scope: !3903)
!3925 = !DILocation(line: 121, column: 28, scope: !3903)
!3926 = !DILocation(line: 121, column: 40, scope: !3903)
!3927 = !DILocation(line: 121, column: 52, scope: !3903)
!3928 = !DILocation(line: 120, column: 7, scope: !3903)
!3929 = !DILocation(line: 122, column: 7, scope: !3903)
!3930 = !DILocation(line: 127, column: 16, scope: !3903)
!3931 = !DILocation(line: 127, column: 24, scope: !3903)
!3932 = !DILocation(line: 128, column: 16, scope: !3903)
!3933 = !DILocation(line: 128, column: 28, scope: !3903)
!3934 = !DILocation(line: 128, column: 40, scope: !3903)
!3935 = !DILocation(line: 128, column: 52, scope: !3903)
!3936 = !DILocation(line: 128, column: 64, scope: !3903)
!3937 = !DILocation(line: 127, column: 7, scope: !3903)
!3938 = !DILocation(line: 129, column: 7, scope: !3903)
!3939 = !DILocation(line: 134, column: 16, scope: !3903)
!3940 = !DILocation(line: 134, column: 24, scope: !3903)
!3941 = !DILocation(line: 135, column: 16, scope: !3903)
!3942 = !DILocation(line: 135, column: 28, scope: !3903)
!3943 = !DILocation(line: 135, column: 40, scope: !3903)
!3944 = !DILocation(line: 135, column: 52, scope: !3903)
!3945 = !DILocation(line: 135, column: 64, scope: !3903)
!3946 = !DILocation(line: 136, column: 16, scope: !3903)
!3947 = !DILocation(line: 134, column: 7, scope: !3903)
!3948 = !DILocation(line: 137, column: 7, scope: !3903)
!3949 = !DILocation(line: 142, column: 16, scope: !3903)
!3950 = !DILocation(line: 142, column: 24, scope: !3903)
!3951 = !DILocation(line: 143, column: 16, scope: !3903)
!3952 = !DILocation(line: 143, column: 28, scope: !3903)
!3953 = !DILocation(line: 143, column: 40, scope: !3903)
!3954 = !DILocation(line: 143, column: 52, scope: !3903)
!3955 = !DILocation(line: 143, column: 64, scope: !3903)
!3956 = !DILocation(line: 144, column: 16, scope: !3903)
!3957 = !DILocation(line: 144, column: 28, scope: !3903)
!3958 = !DILocation(line: 142, column: 7, scope: !3903)
!3959 = !DILocation(line: 145, column: 7, scope: !3903)
!3960 = !DILocation(line: 150, column: 16, scope: !3903)
!3961 = !DILocation(line: 150, column: 24, scope: !3903)
!3962 = !DILocation(line: 152, column: 17, scope: !3903)
!3963 = !DILocation(line: 152, column: 29, scope: !3903)
!3964 = !DILocation(line: 152, column: 41, scope: !3903)
!3965 = !DILocation(line: 152, column: 53, scope: !3903)
!3966 = !DILocation(line: 152, column: 65, scope: !3903)
!3967 = !DILocation(line: 153, column: 17, scope: !3903)
!3968 = !DILocation(line: 153, column: 29, scope: !3903)
!3969 = !DILocation(line: 153, column: 41, scope: !3903)
!3970 = !DILocation(line: 150, column: 7, scope: !3903)
!3971 = !DILocation(line: 154, column: 7, scope: !3903)
!3972 = !DILocation(line: 159, column: 16, scope: !3903)
!3973 = !DILocation(line: 159, column: 24, scope: !3903)
!3974 = !DILocation(line: 161, column: 16, scope: !3903)
!3975 = !DILocation(line: 161, column: 28, scope: !3903)
!3976 = !DILocation(line: 161, column: 40, scope: !3903)
!3977 = !DILocation(line: 161, column: 52, scope: !3903)
!3978 = !DILocation(line: 161, column: 64, scope: !3903)
!3979 = !DILocation(line: 162, column: 16, scope: !3903)
!3980 = !DILocation(line: 162, column: 28, scope: !3903)
!3981 = !DILocation(line: 162, column: 40, scope: !3903)
!3982 = !DILocation(line: 162, column: 52, scope: !3903)
!3983 = !DILocation(line: 159, column: 7, scope: !3903)
!3984 = !DILocation(line: 163, column: 7, scope: !3903)
!3985 = !DILocation(line: 170, column: 16, scope: !3903)
!3986 = !DILocation(line: 170, column: 24, scope: !3903)
!3987 = !DILocation(line: 172, column: 17, scope: !3903)
!3988 = !DILocation(line: 172, column: 29, scope: !3903)
!3989 = !DILocation(line: 172, column: 41, scope: !3903)
!3990 = !DILocation(line: 172, column: 53, scope: !3903)
!3991 = !DILocation(line: 172, column: 65, scope: !3903)
!3992 = !DILocation(line: 173, column: 17, scope: !3903)
!3993 = !DILocation(line: 173, column: 29, scope: !3903)
!3994 = !DILocation(line: 173, column: 41, scope: !3903)
!3995 = !DILocation(line: 173, column: 53, scope: !3903)
!3996 = !DILocation(line: 170, column: 7, scope: !3903)
!3997 = !DILocation(line: 174, column: 7, scope: !3903)
!3998 = !DILocation(line: 176, column: 1, scope: !3810)
!3999 = !DILocalVariable(name: "stream", arg: 1, scope: !4000, file: !3811, line: 61, type: !4003)
!4000 = distinct !DISubprogram(name: "version_etc_arn", scope: !3811, file: !3811, line: 61, type: !4001, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4037, retainedNodes: !4)
!4001 = !DISubroutineType(types: !4002)
!4002 = !{null, !4003, !69, !69, !69, !3867, !134}
!4003 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4004, size: 64)
!4004 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3816, line: 7, baseType: !4005)
!4005 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3818, line: 49, size: 1728, elements: !4006)
!4006 = !{!4007, !4008, !4009, !4010, !4011, !4012, !4013, !4014, !4015, !4016, !4017, !4018, !4019, !4020, !4022, !4023, !4024, !4025, !4026, !4027, !4028, !4029, !4030, !4031, !4032, !4033, !4034, !4035, !4036}
!4007 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4005, file: !3818, line: 51, baseType: !72, size: 32)
!4008 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4005, file: !3818, line: 54, baseType: !6, size: 64, offset: 64)
!4009 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4005, file: !3818, line: 55, baseType: !6, size: 64, offset: 128)
!4010 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4005, file: !3818, line: 56, baseType: !6, size: 64, offset: 192)
!4011 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4005, file: !3818, line: 57, baseType: !6, size: 64, offset: 256)
!4012 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4005, file: !3818, line: 58, baseType: !6, size: 64, offset: 320)
!4013 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4005, file: !3818, line: 59, baseType: !6, size: 64, offset: 384)
!4014 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4005, file: !3818, line: 60, baseType: !6, size: 64, offset: 448)
!4015 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4005, file: !3818, line: 61, baseType: !6, size: 64, offset: 512)
!4016 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4005, file: !3818, line: 64, baseType: !6, size: 64, offset: 576)
!4017 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4005, file: !3818, line: 65, baseType: !6, size: 64, offset: 640)
!4018 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4005, file: !3818, line: 66, baseType: !6, size: 64, offset: 704)
!4019 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4005, file: !3818, line: 68, baseType: !3833, size: 64, offset: 768)
!4020 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4005, file: !3818, line: 70, baseType: !4021, size: 64, offset: 832)
!4021 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4005, size: 64)
!4022 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4005, file: !3818, line: 72, baseType: !72, size: 32, offset: 896)
!4023 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4005, file: !3818, line: 73, baseType: !72, size: 32, offset: 928)
!4024 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4005, file: !3818, line: 74, baseType: !3840, size: 64, offset: 960)
!4025 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4005, file: !3818, line: 77, baseType: !133, size: 16, offset: 1024)
!4026 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4005, file: !3818, line: 78, baseType: !3843, size: 8, offset: 1040)
!4027 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4005, file: !3818, line: 79, baseType: !3845, size: 8, offset: 1048)
!4028 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4005, file: !3818, line: 81, baseType: !3849, size: 64, offset: 1088)
!4029 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4005, file: !3818, line: 89, baseType: !3852, size: 64, offset: 1152)
!4030 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4005, file: !3818, line: 91, baseType: !3854, size: 64, offset: 1216)
!4031 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4005, file: !3818, line: 92, baseType: !3857, size: 64, offset: 1280)
!4032 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4005, file: !3818, line: 93, baseType: !4021, size: 64, offset: 1344)
!4033 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4005, file: !3818, line: 94, baseType: !8, size: 64, offset: 1408)
!4034 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4005, file: !3818, line: 95, baseType: !134, size: 64, offset: 1472)
!4035 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4005, file: !3818, line: 96, baseType: !72, size: 32, offset: 1536)
!4036 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4005, file: !3818, line: 98, baseType: !3864, size: 160, offset: 1568)
!4037 = distinct !DICompileUnit(language: DW_LANG_C99, file: !211, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!4038 = !DILocalVariable(name: "command_name", arg: 2, scope: !4000, file: !3811, line: 62, type: !69)
!4039 = !DILocalVariable(name: "package", arg: 3, scope: !4000, file: !3811, line: 62, type: !69)
!4040 = !DILocalVariable(name: "version", arg: 4, scope: !4000, file: !3811, line: 63, type: !69)
!4041 = !DILocalVariable(name: "authors", arg: 5, scope: !4000, file: !3811, line: 64, type: !3867)
!4042 = !DILocalVariable(name: "n_authors", arg: 6, scope: !4000, file: !3811, line: 64, type: !134)
!4043 = distinct !DISubprogram(name: "version_etc_va", scope: !3811, file: !3811, line: 199, type: !4044, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !210, retainedNodes: !4)
!4044 = !DISubroutineType(types: !4045)
!4045 = !{null, !3814, !69, !69, !69, !4046}
!4046 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4047, size: 64)
!4047 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !211, line: 192, size: 192, elements: !4048)
!4048 = !{!4049, !4050, !4051, !4052}
!4049 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !4047, file: !211, line: 192, baseType: !16, size: 32)
!4050 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !4047, file: !211, line: 192, baseType: !16, size: 32, offset: 32)
!4051 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !4047, file: !211, line: 192, baseType: !8, size: 64, offset: 64)
!4052 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !4047, file: !211, line: 192, baseType: !8, size: 64, offset: 128)
!4053 = !DILocalVariable(name: "stream", arg: 1, scope: !4043, file: !3811, line: 199, type: !3814)
!4054 = !DILocation(line: 199, column: 23, scope: !4043)
!4055 = !DILocalVariable(name: "command_name", arg: 2, scope: !4043, file: !3811, line: 200, type: !69)
!4056 = !DILocation(line: 200, column: 29, scope: !4043)
!4057 = !DILocalVariable(name: "package", arg: 3, scope: !4043, file: !3811, line: 200, type: !69)
!4058 = !DILocation(line: 200, column: 55, scope: !4043)
!4059 = !DILocalVariable(name: "version", arg: 4, scope: !4043, file: !3811, line: 201, type: !69)
!4060 = !DILocation(line: 201, column: 29, scope: !4043)
!4061 = !DILocalVariable(name: "authors", arg: 5, scope: !4043, file: !3811, line: 201, type: !4046)
!4062 = !DILocation(line: 201, column: 46, scope: !4043)
!4063 = !DILocalVariable(name: "n_authors", scope: !4043, file: !3811, line: 203, type: !134)
!4064 = !DILocation(line: 203, column: 10, scope: !4043)
!4065 = !DILocalVariable(name: "authtab", scope: !4043, file: !3811, line: 204, type: !4066)
!4066 = !DICompositeType(tag: DW_TAG_array_type, baseType: !69, size: 640, elements: !76)
!4067 = !DILocation(line: 204, column: 15, scope: !4043)
!4068 = !DILocation(line: 206, column: 18, scope: !4069)
!4069 = distinct !DILexicalBlock(scope: !4043, file: !3811, line: 206, column: 3)
!4070 = !DILocation(line: 206, column: 8, scope: !4069)
!4071 = !DILocation(line: 207, column: 8, scope: !4072)
!4072 = distinct !DILexicalBlock(scope: !4069, file: !3811, line: 206, column: 3)
!4073 = !DILocation(line: 207, column: 18, scope: !4072)
!4074 = !DILocation(line: 208, column: 10, scope: !4072)
!4075 = !DILocation(line: 208, column: 35, scope: !4072)
!4076 = !DILocation(line: 208, column: 22, scope: !4072)
!4077 = !DILocation(line: 208, column: 14, scope: !4072)
!4078 = !DILocation(line: 208, column: 33, scope: !4072)
!4079 = !DILocation(line: 208, column: 67, scope: !4072)
!4080 = !DILocation(line: 0, scope: !4072)
!4081 = !DILocation(line: 206, column: 3, scope: !4069)
!4082 = !DILocation(line: 209, column: 17, scope: !4072)
!4083 = !DILocation(line: 206, column: 3, scope: !4072)
!4084 = distinct !{!4084, !4081, !4085}
!4085 = !DILocation(line: 210, column: 5, scope: !4069)
!4086 = !DILocation(line: 211, column: 20, scope: !4043)
!4087 = !DILocation(line: 211, column: 28, scope: !4043)
!4088 = !DILocation(line: 211, column: 42, scope: !4043)
!4089 = !DILocation(line: 211, column: 51, scope: !4043)
!4090 = !DILocation(line: 212, column: 20, scope: !4043)
!4091 = !DILocation(line: 212, column: 29, scope: !4043)
!4092 = !DILocation(line: 211, column: 3, scope: !4043)
!4093 = !DILocation(line: 213, column: 1, scope: !4043)
!4094 = !DILocalVariable(name: "stream", arg: 1, scope: !4095, file: !3811, line: 199, type: !4098)
!4095 = distinct !DISubprogram(name: "version_etc_va", scope: !3811, file: !3811, line: 199, type: !4096, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4139, retainedNodes: !4)
!4096 = !DISubroutineType(types: !4097)
!4097 = !{null, !4098, !69, !69, !69, !4132}
!4098 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4099, size: 64)
!4099 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3816, line: 7, baseType: !4100)
!4100 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3818, line: 49, size: 1728, elements: !4101)
!4101 = !{!4102, !4103, !4104, !4105, !4106, !4107, !4108, !4109, !4110, !4111, !4112, !4113, !4114, !4115, !4117, !4118, !4119, !4120, !4121, !4122, !4123, !4124, !4125, !4126, !4127, !4128, !4129, !4130, !4131}
!4102 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4100, file: !3818, line: 51, baseType: !72, size: 32)
!4103 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4100, file: !3818, line: 54, baseType: !6, size: 64, offset: 64)
!4104 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4100, file: !3818, line: 55, baseType: !6, size: 64, offset: 128)
!4105 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4100, file: !3818, line: 56, baseType: !6, size: 64, offset: 192)
!4106 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4100, file: !3818, line: 57, baseType: !6, size: 64, offset: 256)
!4107 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4100, file: !3818, line: 58, baseType: !6, size: 64, offset: 320)
!4108 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4100, file: !3818, line: 59, baseType: !6, size: 64, offset: 384)
!4109 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4100, file: !3818, line: 60, baseType: !6, size: 64, offset: 448)
!4110 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4100, file: !3818, line: 61, baseType: !6, size: 64, offset: 512)
!4111 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4100, file: !3818, line: 64, baseType: !6, size: 64, offset: 576)
!4112 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4100, file: !3818, line: 65, baseType: !6, size: 64, offset: 640)
!4113 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4100, file: !3818, line: 66, baseType: !6, size: 64, offset: 704)
!4114 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4100, file: !3818, line: 68, baseType: !3833, size: 64, offset: 768)
!4115 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4100, file: !3818, line: 70, baseType: !4116, size: 64, offset: 832)
!4116 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4100, size: 64)
!4117 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4100, file: !3818, line: 72, baseType: !72, size: 32, offset: 896)
!4118 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4100, file: !3818, line: 73, baseType: !72, size: 32, offset: 928)
!4119 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4100, file: !3818, line: 74, baseType: !3840, size: 64, offset: 960)
!4120 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4100, file: !3818, line: 77, baseType: !133, size: 16, offset: 1024)
!4121 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4100, file: !3818, line: 78, baseType: !3843, size: 8, offset: 1040)
!4122 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4100, file: !3818, line: 79, baseType: !3845, size: 8, offset: 1048)
!4123 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4100, file: !3818, line: 81, baseType: !3849, size: 64, offset: 1088)
!4124 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4100, file: !3818, line: 89, baseType: !3852, size: 64, offset: 1152)
!4125 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4100, file: !3818, line: 91, baseType: !3854, size: 64, offset: 1216)
!4126 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4100, file: !3818, line: 92, baseType: !3857, size: 64, offset: 1280)
!4127 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4100, file: !3818, line: 93, baseType: !4116, size: 64, offset: 1344)
!4128 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4100, file: !3818, line: 94, baseType: !8, size: 64, offset: 1408)
!4129 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4100, file: !3818, line: 95, baseType: !134, size: 64, offset: 1472)
!4130 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4100, file: !3818, line: 96, baseType: !72, size: 32, offset: 1536)
!4131 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4100, file: !3818, line: 98, baseType: !3864, size: 160, offset: 1568)
!4132 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4133, size: 64)
!4133 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !211, line: 192, size: 192, elements: !4134)
!4134 = !{!4135, !4136, !4137, !4138}
!4135 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !4133, file: !211, line: 192, baseType: !16, size: 32)
!4136 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !4133, file: !211, line: 192, baseType: !16, size: 32, offset: 32)
!4137 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !4133, file: !211, line: 192, baseType: !8, size: 64, offset: 64)
!4138 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !4133, file: !211, line: 192, baseType: !8, size: 64, offset: 128)
!4139 = distinct !DICompileUnit(language: DW_LANG_C99, file: !211, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!4140 = !DILocalVariable(name: "command_name", arg: 2, scope: !4095, file: !3811, line: 200, type: !69)
!4141 = !DILocalVariable(name: "package", arg: 3, scope: !4095, file: !3811, line: 200, type: !69)
!4142 = !DILocalVariable(name: "version", arg: 4, scope: !4095, file: !3811, line: 201, type: !69)
!4143 = !DILocalVariable(name: "authors", arg: 5, scope: !4095, file: !3811, line: 201, type: !4132)
!4144 = !DILocalVariable(name: "n_authors", scope: !4095, file: !3811, line: 203, type: !134)
!4145 = !DILocalVariable(name: "authtab", scope: !4095, file: !3811, line: 204, type: !4066)
!4146 = distinct !DISubprogram(name: "version_etc", scope: !3811, file: !3811, line: 230, type: !4147, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !210, retainedNodes: !4)
!4147 = !DISubroutineType(types: !4148)
!4148 = !{null, !3814, !69, !69, !69, null}
!4149 = !DILocalVariable(name: "stream", arg: 1, scope: !4146, file: !3811, line: 230, type: !3814)
!4150 = !DILocation(line: 230, column: 20, scope: !4146)
!4151 = !DILocalVariable(name: "command_name", arg: 2, scope: !4146, file: !3811, line: 231, type: !69)
!4152 = !DILocation(line: 231, column: 26, scope: !4146)
!4153 = !DILocalVariable(name: "package", arg: 3, scope: !4146, file: !3811, line: 231, type: !69)
!4154 = !DILocation(line: 231, column: 52, scope: !4146)
!4155 = !DILocalVariable(name: "version", arg: 4, scope: !4146, file: !3811, line: 232, type: !69)
!4156 = !DILocation(line: 232, column: 26, scope: !4146)
!4157 = !DILocalVariable(name: "authors", scope: !4146, file: !3811, line: 234, type: !4158)
!4158 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !979, line: 52, baseType: !4159)
!4159 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !4160, line: 32, baseType: !4161)
!4160 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stdarg.h", directory: "")
!4161 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !211, line: 234, baseType: !4162)
!4162 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4047, size: 192, elements: !3846)
!4163 = !DILocation(line: 234, column: 11, scope: !4146)
!4164 = !DILocation(line: 236, column: 3, scope: !4146)
!4165 = !DILocation(line: 237, column: 19, scope: !4146)
!4166 = !DILocation(line: 237, column: 27, scope: !4146)
!4167 = !DILocation(line: 237, column: 41, scope: !4146)
!4168 = !DILocation(line: 237, column: 50, scope: !4146)
!4169 = !DILocation(line: 237, column: 59, scope: !4146)
!4170 = !DILocation(line: 237, column: 3, scope: !4146)
!4171 = !DILocation(line: 238, column: 3, scope: !4146)
!4172 = !DILocation(line: 239, column: 1, scope: !4146)
!4173 = !DILocalVariable(name: "stream", arg: 1, scope: !4174, file: !3811, line: 230, type: !4177)
!4174 = distinct !DISubprogram(name: "version_etc", scope: !3811, file: !3811, line: 230, type: !4175, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4211, retainedNodes: !4)
!4175 = !DISubroutineType(types: !4176)
!4176 = !{null, !4177, !69, !69, !69, null}
!4177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4178, size: 64)
!4178 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3816, line: 7, baseType: !4179)
!4179 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3818, line: 49, size: 1728, elements: !4180)
!4180 = !{!4181, !4182, !4183, !4184, !4185, !4186, !4187, !4188, !4189, !4190, !4191, !4192, !4193, !4194, !4196, !4197, !4198, !4199, !4200, !4201, !4202, !4203, !4204, !4205, !4206, !4207, !4208, !4209, !4210}
!4181 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4179, file: !3818, line: 51, baseType: !72, size: 32)
!4182 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4179, file: !3818, line: 54, baseType: !6, size: 64, offset: 64)
!4183 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4179, file: !3818, line: 55, baseType: !6, size: 64, offset: 128)
!4184 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4179, file: !3818, line: 56, baseType: !6, size: 64, offset: 192)
!4185 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4179, file: !3818, line: 57, baseType: !6, size: 64, offset: 256)
!4186 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4179, file: !3818, line: 58, baseType: !6, size: 64, offset: 320)
!4187 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4179, file: !3818, line: 59, baseType: !6, size: 64, offset: 384)
!4188 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4179, file: !3818, line: 60, baseType: !6, size: 64, offset: 448)
!4189 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4179, file: !3818, line: 61, baseType: !6, size: 64, offset: 512)
!4190 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4179, file: !3818, line: 64, baseType: !6, size: 64, offset: 576)
!4191 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4179, file: !3818, line: 65, baseType: !6, size: 64, offset: 640)
!4192 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4179, file: !3818, line: 66, baseType: !6, size: 64, offset: 704)
!4193 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4179, file: !3818, line: 68, baseType: !3833, size: 64, offset: 768)
!4194 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4179, file: !3818, line: 70, baseType: !4195, size: 64, offset: 832)
!4195 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4179, size: 64)
!4196 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4179, file: !3818, line: 72, baseType: !72, size: 32, offset: 896)
!4197 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4179, file: !3818, line: 73, baseType: !72, size: 32, offset: 928)
!4198 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4179, file: !3818, line: 74, baseType: !3840, size: 64, offset: 960)
!4199 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4179, file: !3818, line: 77, baseType: !133, size: 16, offset: 1024)
!4200 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4179, file: !3818, line: 78, baseType: !3843, size: 8, offset: 1040)
!4201 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4179, file: !3818, line: 79, baseType: !3845, size: 8, offset: 1048)
!4202 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4179, file: !3818, line: 81, baseType: !3849, size: 64, offset: 1088)
!4203 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4179, file: !3818, line: 89, baseType: !3852, size: 64, offset: 1152)
!4204 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4179, file: !3818, line: 91, baseType: !3854, size: 64, offset: 1216)
!4205 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4179, file: !3818, line: 92, baseType: !3857, size: 64, offset: 1280)
!4206 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4179, file: !3818, line: 93, baseType: !4195, size: 64, offset: 1344)
!4207 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4179, file: !3818, line: 94, baseType: !8, size: 64, offset: 1408)
!4208 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4179, file: !3818, line: 95, baseType: !134, size: 64, offset: 1472)
!4209 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4179, file: !3818, line: 96, baseType: !72, size: 32, offset: 1536)
!4210 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4179, file: !3818, line: 98, baseType: !3864, size: 160, offset: 1568)
!4211 = distinct !DICompileUnit(language: DW_LANG_C99, file: !211, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!4212 = !DILocalVariable(name: "command_name", arg: 2, scope: !4174, file: !3811, line: 231, type: !69)
!4213 = !DILocalVariable(name: "package", arg: 3, scope: !4174, file: !3811, line: 231, type: !69)
!4214 = !DILocalVariable(name: "version", arg: 4, scope: !4174, file: !3811, line: 232, type: !69)
!4215 = !DILocalVariable(name: "authors", scope: !4174, file: !3811, line: 234, type: !4216)
!4216 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !979, line: 52, baseType: !4217)
!4217 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !4160, line: 32, baseType: !4218)
!4218 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !211, line: 234, baseType: !4219)
!4219 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4220, size: 192, elements: !3846)
!4220 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !211, line: 192, size: 192, elements: !4221)
!4221 = !{!4222, !4223, !4224, !4225}
!4222 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !4220, file: !211, line: 192, baseType: !16, size: 32)
!4223 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !4220, file: !211, line: 192, baseType: !16, size: 32, offset: 32)
!4224 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !4220, file: !211, line: 192, baseType: !8, size: 64, offset: 64)
!4225 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !4220, file: !211, line: 192, baseType: !8, size: 64, offset: 128)
!4226 = distinct !DISubprogram(name: "xmalloc", scope: !4227, file: !4227, line: 39, type: !4228, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !213, retainedNodes: !4)
!4227 = !DIFile(filename: "lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4228 = !DISubroutineType(types: !4229)
!4229 = !{!8, !134}
!4230 = !DILocalVariable(name: "n", arg: 1, scope: !4226, file: !4227, line: 39, type: !134)
!4231 = !DILocation(line: 39, column: 17, scope: !4226)
!4232 = !DILocalVariable(name: "p", scope: !4226, file: !4227, line: 41, type: !8)
!4233 = !DILocation(line: 41, column: 9, scope: !4226)
!4234 = !DILocation(line: 41, column: 21, scope: !4226)
!4235 = !DILocation(line: 41, column: 13, scope: !4226)
!4236 = !DILocation(line: 42, column: 8, scope: !4237)
!4237 = distinct !DILexicalBlock(scope: !4226, file: !4227, line: 42, column: 7)
!4238 = !DILocation(line: 42, column: 10, scope: !4237)
!4239 = !DILocation(line: 42, column: 13, scope: !4237)
!4240 = !DILocation(line: 42, column: 15, scope: !4237)
!4241 = !DILocation(line: 42, column: 7, scope: !4226)
!4242 = !DILocation(line: 43, column: 5, scope: !4237)
!4243 = !DILocation(line: 44, column: 10, scope: !4226)
!4244 = !DILocation(line: 44, column: 3, scope: !4226)
!4245 = !DILocalVariable(name: "n", arg: 1, scope: !4246, file: !4227, line: 39, type: !134)
!4246 = distinct !DISubprogram(name: "xmalloc", scope: !4227, file: !4227, line: 39, type: !4228, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4247, retainedNodes: !4)
!4247 = distinct !DICompileUnit(language: DW_LANG_C99, file: !214, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !215, nameTableKind: None)
!4248 = !DILocalVariable(name: "p", scope: !4246, file: !4227, line: 41, type: !8)
!4249 = distinct !DISubprogram(name: "xrealloc", scope: !4227, file: !4227, line: 51, type: !4250, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !213, retainedNodes: !4)
!4250 = !DISubroutineType(types: !4251)
!4251 = !{!8, !8, !134}
!4252 = !DILocalVariable(name: "p", arg: 1, scope: !4249, file: !4227, line: 51, type: !8)
!4253 = !DILocation(line: 51, column: 17, scope: !4249)
!4254 = !DILocalVariable(name: "n", arg: 2, scope: !4249, file: !4227, line: 51, type: !134)
!4255 = !DILocation(line: 51, column: 27, scope: !4249)
!4256 = !DILocation(line: 53, column: 8, scope: !4257)
!4257 = distinct !DILexicalBlock(scope: !4249, file: !4227, line: 53, column: 7)
!4258 = !DILocation(line: 53, column: 10, scope: !4257)
!4259 = !DILocation(line: 53, column: 13, scope: !4257)
!4260 = !DILocation(line: 53, column: 7, scope: !4249)
!4261 = !DILocation(line: 57, column: 13, scope: !4262)
!4262 = distinct !DILexicalBlock(scope: !4257, file: !4227, line: 54, column: 5)
!4263 = !DILocation(line: 57, column: 7, scope: !4262)
!4264 = !DILocation(line: 58, column: 7, scope: !4262)
!4265 = !DILocation(line: 61, column: 16, scope: !4249)
!4266 = !DILocation(line: 61, column: 19, scope: !4249)
!4267 = !DILocation(line: 61, column: 7, scope: !4249)
!4268 = !DILocation(line: 61, column: 5, scope: !4249)
!4269 = !DILocation(line: 62, column: 8, scope: !4270)
!4270 = distinct !DILexicalBlock(scope: !4249, file: !4227, line: 62, column: 7)
!4271 = !DILocation(line: 62, column: 10, scope: !4270)
!4272 = !DILocation(line: 62, column: 13, scope: !4270)
!4273 = !DILocation(line: 62, column: 7, scope: !4249)
!4274 = !DILocation(line: 63, column: 5, scope: !4270)
!4275 = !DILocation(line: 64, column: 10, scope: !4249)
!4276 = !DILocation(line: 64, column: 3, scope: !4249)
!4277 = !DILocation(line: 65, column: 1, scope: !4249)
!4278 = distinct !DISubprogram(name: "xcharalloc", scope: !4279, file: !4279, line: 216, type: !4280, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !213, retainedNodes: !4)
!4279 = !DIFile(filename: "./lib/xalloc.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4280 = !DISubroutineType(types: !4281)
!4281 = !{!6, !134}
!4282 = !DILocalVariable(name: "n", arg: 1, scope: !4278, file: !4279, line: 216, type: !134)
!4283 = !DILocation(line: 216, column: 20, scope: !4278)
!4284 = !DILocation(line: 218, column: 10, scope: !4278)
!4285 = !DILocation(line: 218, column: 3, scope: !4278)
!4286 = !DILocalVariable(name: "n", arg: 1, scope: !4287, file: !4279, line: 216, type: !134)
!4287 = distinct !DISubprogram(name: "xcharalloc", scope: !4279, file: !4279, line: 216, type: !4280, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4288, retainedNodes: !4)
!4288 = distinct !DICompileUnit(language: DW_LANG_C99, file: !214, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !215, nameTableKind: None)
!4289 = distinct !DISubprogram(name: "xmemdup", scope: !4227, file: !4227, line: 111, type: !4290, scopeLine: 112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !213, retainedNodes: !4)
!4290 = !DISubroutineType(types: !4291)
!4291 = !{!8, !4292, !134}
!4292 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4293, size: 64)
!4293 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!4294 = !DILocalVariable(name: "p", arg: 1, scope: !4289, file: !4227, line: 111, type: !4292)
!4295 = !DILocation(line: 111, column: 22, scope: !4289)
!4296 = !DILocalVariable(name: "s", arg: 2, scope: !4289, file: !4227, line: 111, type: !134)
!4297 = !DILocation(line: 111, column: 32, scope: !4289)
!4298 = !DILocation(line: 113, column: 27, scope: !4289)
!4299 = !DILocation(line: 113, column: 18, scope: !4289)
!4300 = !DILocation(line: 113, column: 31, scope: !4289)
!4301 = !DILocation(line: 113, column: 34, scope: !4289)
!4302 = !DILocation(line: 113, column: 10, scope: !4289)
!4303 = !DILocation(line: 113, column: 3, scope: !4289)
!4304 = !DILocalVariable(name: "p", arg: 1, scope: !4305, file: !4227, line: 111, type: !4292)
!4305 = distinct !DISubprogram(name: "xmemdup", scope: !4227, file: !4227, line: 111, type: !4290, scopeLine: 112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4306, retainedNodes: !4)
!4306 = distinct !DICompileUnit(language: DW_LANG_C99, file: !214, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !215, nameTableKind: None)
!4307 = !DILocalVariable(name: "s", arg: 2, scope: !4305, file: !4227, line: 111, type: !134)
!4308 = distinct !DISubprogram(name: "xstrdup", scope: !4227, file: !4227, line: 119, type: !3273, scopeLine: 120, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !213, retainedNodes: !4)
!4309 = !DILocalVariable(name: "string", arg: 1, scope: !4308, file: !4227, line: 119, type: !69)
!4310 = !DILocation(line: 119, column: 22, scope: !4308)
!4311 = !DILocation(line: 121, column: 19, scope: !4308)
!4312 = !DILocation(line: 121, column: 35, scope: !4308)
!4313 = !DILocation(line: 121, column: 27, scope: !4308)
!4314 = !DILocation(line: 121, column: 43, scope: !4308)
!4315 = !DILocation(line: 121, column: 10, scope: !4308)
!4316 = !DILocation(line: 121, column: 3, scope: !4308)
!4317 = !DILocalVariable(name: "string", arg: 1, scope: !4318, file: !4227, line: 119, type: !69)
!4318 = distinct !DISubprogram(name: "xstrdup", scope: !4227, file: !4227, line: 119, type: !3273, scopeLine: 120, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4319, retainedNodes: !4)
!4319 = distinct !DICompileUnit(language: DW_LANG_C99, file: !214, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !215, nameTableKind: None)
!4320 = distinct !DISubprogram(name: "xalloc_die", scope: !4321, file: !4321, line: 32, type: !1632, scopeLine: 33, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !216, retainedNodes: !4)
!4321 = !DIFile(filename: "lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4322 = !DILocation(line: 34, column: 10, scope: !4320)
!4323 = !DILocation(line: 34, column: 33, scope: !4320)
!4324 = !DILocation(line: 34, column: 3, scope: !4320)
!4325 = !DILocation(line: 40, column: 3, scope: !4320)
!4326 = distinct !DISubprogram(name: "xgetgroups", scope: !4327, file: !4327, line: 31, type: !4328, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !218, retainedNodes: !4)
!4327 = !DIFile(filename: "lib/xgetgroups.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4328 = !DISubroutineType(types: !4329)
!4329 = !{!72, !69, !21, !4330}
!4330 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !183, size: 64)
!4331 = !DILocalVariable(name: "username", arg: 1, scope: !4326, file: !4327, line: 31, type: !69)
!4332 = !DILocation(line: 31, column: 25, scope: !4326)
!4333 = !DILocalVariable(name: "gid", arg: 2, scope: !4326, file: !4327, line: 31, type: !21)
!4334 = !DILocation(line: 31, column: 41, scope: !4326)
!4335 = !DILocalVariable(name: "groups", arg: 3, scope: !4326, file: !4327, line: 31, type: !4330)
!4336 = !DILocation(line: 31, column: 54, scope: !4326)
!4337 = !DILocalVariable(name: "result", scope: !4326, file: !4327, line: 33, type: !72)
!4338 = !DILocation(line: 33, column: 7, scope: !4326)
!4339 = !DILocation(line: 33, column: 28, scope: !4326)
!4340 = !DILocation(line: 33, column: 38, scope: !4326)
!4341 = !DILocation(line: 33, column: 43, scope: !4326)
!4342 = !DILocation(line: 33, column: 16, scope: !4326)
!4343 = !DILocation(line: 34, column: 7, scope: !4344)
!4344 = distinct !DILexicalBlock(scope: !4326, file: !4327, line: 34, column: 7)
!4345 = !DILocation(line: 34, column: 14, scope: !4344)
!4346 = !DILocation(line: 34, column: 20, scope: !4344)
!4347 = !DILocation(line: 34, column: 23, scope: !4344)
!4348 = !DILocation(line: 34, column: 29, scope: !4344)
!4349 = !DILocation(line: 34, column: 7, scope: !4326)
!4350 = !DILocation(line: 35, column: 5, scope: !4344)
!4351 = !DILocation(line: 36, column: 10, scope: !4326)
!4352 = !DILocation(line: 36, column: 3, scope: !4326)
!4353 = !DILocalVariable(name: "username", arg: 1, scope: !4354, file: !4327, line: 31, type: !69)
!4354 = distinct !DISubprogram(name: "xgetgroups", scope: !4327, file: !4327, line: 31, type: !4328, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4355, retainedNodes: !4)
!4355 = distinct !DICompileUnit(language: DW_LANG_C99, file: !219, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!4356 = !DILocalVariable(name: "gid", arg: 2, scope: !4354, file: !4327, line: 31, type: !21)
!4357 = !DILocalVariable(name: "groups", arg: 3, scope: !4354, file: !4327, line: 31, type: !4330)
!4358 = !DILocalVariable(name: "result", scope: !4354, file: !4327, line: 33, type: !72)
!4359 = distinct !DISubprogram(name: "xstrtoul", scope: !4360, file: !4360, line: 76, type: !4361, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!4360 = !DIFile(filename: "./lib/xstrtol.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4361 = !DISubroutineType(types: !4362)
!4362 = !{!4363, !69, !184, !72, !4364, !69}
!4363 = !DIDerivedType(tag: DW_TAG_typedef, name: "strtol_error", file: !224, line: 38, baseType: !223)
!4364 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !84, size: 64)
!4365 = !DILocalVariable(name: "s", arg: 1, scope: !4359, file: !4360, line: 76, type: !69)
!4366 = !DILocation(line: 76, column: 24, scope: !4359)
!4367 = !DILocalVariable(name: "ptr", arg: 2, scope: !4359, file: !4360, line: 76, type: !184)
!4368 = !DILocation(line: 76, column: 34, scope: !4359)
!4369 = !DILocalVariable(name: "strtol_base", arg: 3, scope: !4359, file: !4360, line: 76, type: !72)
!4370 = !DILocation(line: 76, column: 43, scope: !4359)
!4371 = !DILocalVariable(name: "val", arg: 4, scope: !4359, file: !4360, line: 77, type: !4364)
!4372 = !DILocation(line: 77, column: 24, scope: !4359)
!4373 = !DILocalVariable(name: "valid_suffixes", arg: 5, scope: !4359, file: !4360, line: 77, type: !69)
!4374 = !DILocation(line: 77, column: 41, scope: !4359)
!4375 = !DILocalVariable(name: "t_ptr", scope: !4359, file: !4360, line: 79, type: !6)
!4376 = !DILocation(line: 79, column: 9, scope: !4359)
!4377 = !DILocalVariable(name: "p", scope: !4359, file: !4360, line: 80, type: !184)
!4378 = !DILocation(line: 80, column: 10, scope: !4359)
!4379 = !DILocalVariable(name: "tmp", scope: !4359, file: !4360, line: 81, type: !84)
!4380 = !DILocation(line: 81, column: 14, scope: !4359)
!4381 = !DILocalVariable(name: "err", scope: !4359, file: !4360, line: 82, type: !4363)
!4382 = !DILocation(line: 82, column: 16, scope: !4359)
!4383 = !DILocation(line: 84, column: 3, scope: !4384)
!4384 = distinct !DILexicalBlock(scope: !4385, file: !4360, line: 84, column: 3)
!4385 = distinct !DILexicalBlock(scope: !4359, file: !4360, line: 84, column: 3)
!4386 = !DILocation(line: 84, column: 3, scope: !4385)
!4387 = !DILocation(line: 86, column: 8, scope: !4359)
!4388 = !DILocation(line: 86, column: 14, scope: !4359)
!4389 = !DILocation(line: 86, column: 5, scope: !4359)
!4390 = !DILocation(line: 88, column: 3, scope: !4359)
!4391 = !DILocation(line: 88, column: 9, scope: !4359)
!4392 = !DILocalVariable(name: "q", scope: !4393, file: !4360, line: 92, type: !69)
!4393 = distinct !DILexicalBlock(scope: !4394, file: !4360, line: 91, column: 5)
!4394 = distinct !DILexicalBlock(scope: !4359, file: !4360, line: 90, column: 7)
!4395 = !DILocation(line: 92, column: 19, scope: !4393)
!4396 = !DILocation(line: 92, column: 23, scope: !4393)
!4397 = !DILocalVariable(name: "ch", scope: !4393, file: !4360, line: 93, type: !240)
!4398 = !DILocation(line: 93, column: 21, scope: !4393)
!4399 = !DILocation(line: 93, column: 27, scope: !4393)
!4400 = !DILocation(line: 93, column: 26, scope: !4393)
!4401 = !DILocation(line: 94, column: 7, scope: !4393)
!4402 = !DILocation(line: 94, column: 14, scope: !4393)
!4403 = !DILocation(line: 95, column: 15, scope: !4393)
!4404 = !DILocation(line: 95, column: 14, scope: !4393)
!4405 = !DILocation(line: 95, column: 12, scope: !4393)
!4406 = distinct !{!4406, !4401, !4407}
!4407 = !DILocation(line: 95, column: 17, scope: !4393)
!4408 = !DILocation(line: 96, column: 11, scope: !4409)
!4409 = distinct !DILexicalBlock(scope: !4393, file: !4360, line: 96, column: 11)
!4410 = !DILocation(line: 96, column: 14, scope: !4409)
!4411 = !DILocation(line: 96, column: 11, scope: !4393)
!4412 = !DILocation(line: 97, column: 9, scope: !4409)
!4413 = !DILocation(line: 100, column: 19, scope: !4359)
!4414 = !DILocation(line: 100, column: 22, scope: !4359)
!4415 = !DILocation(line: 100, column: 25, scope: !4359)
!4416 = !DILocation(line: 100, column: 9, scope: !4359)
!4417 = !DILocation(line: 100, column: 7, scope: !4359)
!4418 = !DILocation(line: 102, column: 8, scope: !4419)
!4419 = distinct !DILexicalBlock(scope: !4359, file: !4360, line: 102, column: 7)
!4420 = !DILocation(line: 102, column: 7, scope: !4419)
!4421 = !DILocation(line: 102, column: 13, scope: !4419)
!4422 = !DILocation(line: 102, column: 10, scope: !4419)
!4423 = !DILocation(line: 102, column: 7, scope: !4359)
!4424 = !DILocation(line: 106, column: 11, scope: !4425)
!4425 = distinct !DILexicalBlock(scope: !4426, file: !4360, line: 106, column: 11)
!4426 = distinct !DILexicalBlock(scope: !4419, file: !4360, line: 103, column: 5)
!4427 = !DILocation(line: 106, column: 26, scope: !4425)
!4428 = !DILocation(line: 106, column: 31, scope: !4425)
!4429 = !DILocation(line: 106, column: 30, scope: !4425)
!4430 = !DILocation(line: 106, column: 29, scope: !4425)
!4431 = !DILocation(line: 106, column: 33, scope: !4425)
!4432 = !DILocation(line: 106, column: 44, scope: !4425)
!4433 = !DILocation(line: 106, column: 62, scope: !4425)
!4434 = !DILocation(line: 106, column: 61, scope: !4425)
!4435 = !DILocation(line: 106, column: 60, scope: !4425)
!4436 = !DILocation(line: 106, column: 36, scope: !4425)
!4437 = !DILocation(line: 106, column: 11, scope: !4426)
!4438 = !DILocation(line: 107, column: 13, scope: !4425)
!4439 = !DILocation(line: 107, column: 9, scope: !4425)
!4440 = !DILocation(line: 109, column: 9, scope: !4425)
!4441 = !DILocation(line: 110, column: 5, scope: !4426)
!4442 = !DILocation(line: 111, column: 12, scope: !4443)
!4443 = distinct !DILexicalBlock(scope: !4419, file: !4360, line: 111, column: 12)
!4444 = !DILocation(line: 111, column: 18, scope: !4443)
!4445 = !DILocation(line: 111, column: 12, scope: !4419)
!4446 = !DILocation(line: 113, column: 11, scope: !4447)
!4447 = distinct !DILexicalBlock(scope: !4448, file: !4360, line: 113, column: 11)
!4448 = distinct !DILexicalBlock(scope: !4443, file: !4360, line: 112, column: 5)
!4449 = !DILocation(line: 113, column: 17, scope: !4447)
!4450 = !DILocation(line: 113, column: 11, scope: !4448)
!4451 = !DILocation(line: 114, column: 9, scope: !4447)
!4452 = !DILocation(line: 115, column: 11, scope: !4448)
!4453 = !DILocation(line: 116, column: 5, scope: !4448)
!4454 = !DILocation(line: 121, column: 8, scope: !4455)
!4455 = distinct !DILexicalBlock(scope: !4359, file: !4360, line: 121, column: 7)
!4456 = !DILocation(line: 121, column: 7, scope: !4359)
!4457 = !DILocation(line: 123, column: 14, scope: !4458)
!4458 = distinct !DILexicalBlock(scope: !4455, file: !4360, line: 122, column: 5)
!4459 = !DILocation(line: 123, column: 8, scope: !4458)
!4460 = !DILocation(line: 123, column: 12, scope: !4458)
!4461 = !DILocation(line: 124, column: 14, scope: !4458)
!4462 = !DILocation(line: 124, column: 7, scope: !4458)
!4463 = !DILocation(line: 127, column: 9, scope: !4464)
!4464 = distinct !DILexicalBlock(scope: !4359, file: !4360, line: 127, column: 7)
!4465 = !DILocation(line: 127, column: 8, scope: !4464)
!4466 = !DILocation(line: 127, column: 7, scope: !4464)
!4467 = !DILocation(line: 127, column: 11, scope: !4464)
!4468 = !DILocation(line: 127, column: 7, scope: !4359)
!4469 = !DILocalVariable(name: "base", scope: !4470, file: !4360, line: 129, type: !72)
!4470 = distinct !DILexicalBlock(scope: !4464, file: !4360, line: 128, column: 5)
!4471 = !DILocation(line: 129, column: 11, scope: !4470)
!4472 = !DILocalVariable(name: "suffixes", scope: !4470, file: !4360, line: 130, type: !72)
!4473 = !DILocation(line: 130, column: 11, scope: !4470)
!4474 = !DILocalVariable(name: "overflow", scope: !4470, file: !4360, line: 131, type: !4363)
!4475 = !DILocation(line: 131, column: 20, scope: !4470)
!4476 = !DILocation(line: 133, column: 20, scope: !4477)
!4477 = distinct !DILexicalBlock(scope: !4470, file: !4360, line: 133, column: 11)
!4478 = !DILocation(line: 133, column: 38, scope: !4477)
!4479 = !DILocation(line: 133, column: 37, scope: !4477)
!4480 = !DILocation(line: 133, column: 36, scope: !4477)
!4481 = !DILocation(line: 133, column: 12, scope: !4477)
!4482 = !DILocation(line: 133, column: 11, scope: !4470)
!4483 = !DILocation(line: 135, column: 18, scope: !4484)
!4484 = distinct !DILexicalBlock(scope: !4477, file: !4360, line: 134, column: 9)
!4485 = !DILocation(line: 135, column: 12, scope: !4484)
!4486 = !DILocation(line: 135, column: 16, scope: !4484)
!4487 = !DILocation(line: 136, column: 18, scope: !4484)
!4488 = !DILocation(line: 136, column: 22, scope: !4484)
!4489 = !DILocation(line: 136, column: 11, scope: !4484)
!4490 = !DILocation(line: 139, column: 17, scope: !4470)
!4491 = !DILocation(line: 139, column: 16, scope: !4470)
!4492 = !DILocation(line: 139, column: 15, scope: !4470)
!4493 = !DILocation(line: 139, column: 7, scope: !4470)
!4494 = !DILocation(line: 151, column: 23, scope: !4495)
!4495 = distinct !DILexicalBlock(scope: !4496, file: !4360, line: 151, column: 15)
!4496 = distinct !DILexicalBlock(scope: !4470, file: !4360, line: 140, column: 9)
!4497 = !DILocation(line: 151, column: 15, scope: !4495)
!4498 = !DILocation(line: 151, column: 15, scope: !4496)
!4499 = !DILocation(line: 152, column: 21, scope: !4495)
!4500 = !DILocation(line: 152, column: 13, scope: !4495)
!4501 = !DILocation(line: 155, column: 21, scope: !4502)
!4502 = distinct !DILexicalBlock(scope: !4503, file: !4360, line: 155, column: 21)
!4503 = distinct !DILexicalBlock(scope: !4495, file: !4360, line: 153, column: 15)
!4504 = !DILocation(line: 155, column: 29, scope: !4502)
!4505 = !DILocation(line: 155, column: 21, scope: !4503)
!4506 = !DILocation(line: 156, column: 28, scope: !4502)
!4507 = !DILocation(line: 156, column: 19, scope: !4502)
!4508 = !DILocation(line: 157, column: 17, scope: !4503)
!4509 = !DILocation(line: 161, column: 22, scope: !4503)
!4510 = !DILocation(line: 162, column: 25, scope: !4503)
!4511 = !DILocation(line: 163, column: 17, scope: !4503)
!4512 = !DILocation(line: 164, column: 15, scope: !4503)
!4513 = !DILocation(line: 165, column: 9, scope: !4496)
!4514 = !DILocation(line: 167, column: 17, scope: !4470)
!4515 = !DILocation(line: 167, column: 16, scope: !4470)
!4516 = !DILocation(line: 167, column: 15, scope: !4470)
!4517 = !DILocation(line: 167, column: 7, scope: !4470)
!4518 = !DILocation(line: 170, column: 22, scope: !4519)
!4519 = distinct !DILexicalBlock(scope: !4470, file: !4360, line: 168, column: 9)
!4520 = !DILocation(line: 170, column: 20, scope: !4519)
!4521 = !DILocation(line: 171, column: 11, scope: !4519)
!4522 = !DILocation(line: 177, column: 22, scope: !4519)
!4523 = !DILocation(line: 177, column: 20, scope: !4519)
!4524 = !DILocation(line: 178, column: 11, scope: !4519)
!4525 = !DILocation(line: 181, column: 20, scope: !4519)
!4526 = !DILocation(line: 182, column: 11, scope: !4519)
!4527 = !DILocation(line: 185, column: 48, scope: !4519)
!4528 = !DILocation(line: 185, column: 22, scope: !4519)
!4529 = !DILocation(line: 185, column: 20, scope: !4519)
!4530 = !DILocation(line: 186, column: 11, scope: !4519)
!4531 = !DILocation(line: 190, column: 48, scope: !4519)
!4532 = !DILocation(line: 190, column: 22, scope: !4519)
!4533 = !DILocation(line: 190, column: 20, scope: !4519)
!4534 = !DILocation(line: 191, column: 11, scope: !4519)
!4535 = !DILocation(line: 195, column: 48, scope: !4519)
!4536 = !DILocation(line: 195, column: 22, scope: !4519)
!4537 = !DILocation(line: 195, column: 20, scope: !4519)
!4538 = !DILocation(line: 196, column: 11, scope: !4519)
!4539 = !DILocation(line: 200, column: 48, scope: !4519)
!4540 = !DILocation(line: 200, column: 22, scope: !4519)
!4541 = !DILocation(line: 200, column: 20, scope: !4519)
!4542 = !DILocation(line: 201, column: 11, scope: !4519)
!4543 = !DILocation(line: 204, column: 48, scope: !4519)
!4544 = !DILocation(line: 204, column: 22, scope: !4519)
!4545 = !DILocation(line: 204, column: 20, scope: !4519)
!4546 = !DILocation(line: 205, column: 11, scope: !4519)
!4547 = !DILocation(line: 209, column: 48, scope: !4519)
!4548 = !DILocation(line: 209, column: 22, scope: !4519)
!4549 = !DILocation(line: 209, column: 20, scope: !4519)
!4550 = !DILocation(line: 210, column: 11, scope: !4519)
!4551 = !DILocation(line: 213, column: 22, scope: !4519)
!4552 = !DILocation(line: 213, column: 20, scope: !4519)
!4553 = !DILocation(line: 214, column: 11, scope: !4519)
!4554 = !DILocation(line: 217, column: 48, scope: !4519)
!4555 = !DILocation(line: 217, column: 22, scope: !4519)
!4556 = !DILocation(line: 217, column: 20, scope: !4519)
!4557 = !DILocation(line: 218, column: 11, scope: !4519)
!4558 = !DILocation(line: 221, column: 48, scope: !4519)
!4559 = !DILocation(line: 221, column: 22, scope: !4519)
!4560 = !DILocation(line: 221, column: 20, scope: !4519)
!4561 = !DILocation(line: 222, column: 11, scope: !4519)
!4562 = !DILocation(line: 225, column: 18, scope: !4519)
!4563 = !DILocation(line: 225, column: 12, scope: !4519)
!4564 = !DILocation(line: 225, column: 16, scope: !4519)
!4565 = !DILocation(line: 226, column: 18, scope: !4519)
!4566 = !DILocation(line: 226, column: 22, scope: !4519)
!4567 = !DILocation(line: 226, column: 11, scope: !4519)
!4568 = !DILocation(line: 229, column: 14, scope: !4470)
!4569 = !DILocation(line: 229, column: 11, scope: !4470)
!4570 = !DILocation(line: 230, column: 13, scope: !4470)
!4571 = !DILocation(line: 230, column: 8, scope: !4470)
!4572 = !DILocation(line: 230, column: 10, scope: !4470)
!4573 = !DILocation(line: 231, column: 13, scope: !4574)
!4574 = distinct !DILexicalBlock(scope: !4470, file: !4360, line: 231, column: 11)
!4575 = !DILocation(line: 231, column: 12, scope: !4574)
!4576 = !DILocation(line: 231, column: 11, scope: !4574)
!4577 = !DILocation(line: 231, column: 11, scope: !4470)
!4578 = !DILocation(line: 232, column: 13, scope: !4574)
!4579 = !DILocation(line: 232, column: 9, scope: !4574)
!4580 = !DILocation(line: 233, column: 5, scope: !4470)
!4581 = !DILocation(line: 235, column: 10, scope: !4359)
!4582 = !DILocation(line: 235, column: 4, scope: !4359)
!4583 = !DILocation(line: 235, column: 8, scope: !4359)
!4584 = !DILocation(line: 236, column: 10, scope: !4359)
!4585 = !DILocation(line: 236, column: 3, scope: !4359)
!4586 = !DILocation(line: 237, column: 1, scope: !4359)
!4587 = !DILocalVariable(name: "s", arg: 1, scope: !4588, file: !4360, line: 76, type: !69)
!4588 = distinct !DISubprogram(name: "xstrtoul", scope: !4360, file: !4360, line: 76, type: !4361, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4589, retainedNodes: !4)
!4589 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !231, nameTableKind: None)
!4590 = !DILocalVariable(name: "ptr", arg: 2, scope: !4588, file: !4360, line: 76, type: !184)
!4591 = !DILocalVariable(name: "strtol_base", arg: 3, scope: !4588, file: !4360, line: 76, type: !72)
!4592 = !DILocalVariable(name: "val", arg: 4, scope: !4588, file: !4360, line: 77, type: !4364)
!4593 = !DILocalVariable(name: "valid_suffixes", arg: 5, scope: !4588, file: !4360, line: 77, type: !69)
!4594 = !DILocalVariable(name: "t_ptr", scope: !4588, file: !4360, line: 79, type: !6)
!4595 = !DILocalVariable(name: "p", scope: !4588, file: !4360, line: 80, type: !184)
!4596 = !DILocalVariable(name: "tmp", scope: !4588, file: !4360, line: 81, type: !84)
!4597 = !DILocalVariable(name: "err", scope: !4588, file: !4360, line: 82, type: !4363)
!4598 = !DILocalVariable(name: "q", scope: !4599, file: !4360, line: 92, type: !69)
!4599 = distinct !DILexicalBlock(scope: !4600, file: !4360, line: 91, column: 5)
!4600 = distinct !DILexicalBlock(scope: !4601, file: !4360, line: 90, column: 7)
!4601 = distinct !DISubprogram(name: "xstrtoul", scope: !4360, file: !4360, line: 76, type: !4361, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4602, retainedNodes: !4)
!4602 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !231, nameTableKind: None)
!4603 = !DILocalVariable(name: "ch", scope: !4599, file: !4360, line: 93, type: !240)
!4604 = !DILocalVariable(name: "suffixes", scope: !4605, file: !4360, line: 130, type: !72)
!4605 = distinct !DILexicalBlock(scope: !4606, file: !4360, line: 128, column: 5)
!4606 = distinct !DILexicalBlock(scope: !4607, file: !4360, line: 127, column: 7)
!4607 = distinct !DISubprogram(name: "xstrtoul", scope: !4360, file: !4360, line: 76, type: !4361, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4608, retainedNodes: !4)
!4608 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !231, nameTableKind: None)
!4609 = !DILocalVariable(name: "overflow", scope: !4605, file: !4360, line: 131, type: !4363)
!4610 = distinct !DISubprogram(name: "bkm_scale", scope: !4360, file: !4360, line: 48, type: !4611, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !220, retainedNodes: !4)
!4611 = !DISubroutineType(types: !4612)
!4612 = !{!4363, !4364, !72}
!4613 = !DILocalVariable(name: "x", arg: 1, scope: !4610, file: !4360, line: 48, type: !4364)
!4614 = !DILocation(line: 48, column: 24, scope: !4610)
!4615 = !DILocalVariable(name: "scale_factor", arg: 2, scope: !4610, file: !4360, line: 48, type: !72)
!4616 = !DILocation(line: 48, column: 31, scope: !4610)
!4617 = !DILocation(line: 55, column: 26, scope: !4618)
!4618 = distinct !DILexicalBlock(scope: !4610, file: !4360, line: 55, column: 7)
!4619 = !DILocation(line: 55, column: 24, scope: !4618)
!4620 = !DILocation(line: 55, column: 42, scope: !4618)
!4621 = !DILocation(line: 55, column: 41, scope: !4618)
!4622 = !DILocation(line: 55, column: 39, scope: !4618)
!4623 = !DILocation(line: 55, column: 7, scope: !4610)
!4624 = !DILocation(line: 57, column: 8, scope: !4625)
!4625 = distinct !DILexicalBlock(scope: !4618, file: !4360, line: 56, column: 5)
!4626 = !DILocation(line: 57, column: 10, scope: !4625)
!4627 = !DILocation(line: 58, column: 7, scope: !4625)
!4628 = !DILocation(line: 60, column: 9, scope: !4610)
!4629 = !DILocation(line: 60, column: 4, scope: !4610)
!4630 = !DILocation(line: 60, column: 6, scope: !4610)
!4631 = !DILocation(line: 61, column: 3, scope: !4610)
!4632 = !DILocation(line: 62, column: 1, scope: !4610)
!4633 = distinct !DISubprogram(name: "bkm_scale_by_power", scope: !4360, file: !4360, line: 65, type: !4634, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !220, retainedNodes: !4)
!4634 = !DISubroutineType(types: !4635)
!4635 = !{!4363, !4364, !72, !72}
!4636 = !DILocalVariable(name: "x", arg: 1, scope: !4633, file: !4360, line: 65, type: !4364)
!4637 = !DILocation(line: 65, column: 33, scope: !4633)
!4638 = !DILocalVariable(name: "base", arg: 2, scope: !4633, file: !4360, line: 65, type: !72)
!4639 = !DILocation(line: 65, column: 40, scope: !4633)
!4640 = !DILocalVariable(name: "power", arg: 3, scope: !4633, file: !4360, line: 65, type: !72)
!4641 = !DILocation(line: 65, column: 50, scope: !4633)
!4642 = !DILocalVariable(name: "err", scope: !4633, file: !4360, line: 67, type: !4363)
!4643 = !DILocation(line: 67, column: 16, scope: !4633)
!4644 = !DILocation(line: 68, column: 3, scope: !4633)
!4645 = !DILocation(line: 68, column: 15, scope: !4633)
!4646 = !DILocation(line: 69, column: 23, scope: !4633)
!4647 = !DILocation(line: 69, column: 26, scope: !4633)
!4648 = !DILocation(line: 69, column: 12, scope: !4633)
!4649 = !DILocation(line: 69, column: 9, scope: !4633)
!4650 = distinct !{!4650, !4644, !4651}
!4651 = !DILocation(line: 69, column: 30, scope: !4633)
!4652 = !DILocation(line: 70, column: 10, scope: !4633)
!4653 = !DILocation(line: 70, column: 3, scope: !4633)
!4654 = !DILocalVariable(name: "x", arg: 1, scope: !4655, file: !4360, line: 65, type: !4364)
!4655 = distinct !DISubprogram(name: "bkm_scale_by_power", scope: !4360, file: !4360, line: 65, type: !4634, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !4656, retainedNodes: !4)
!4656 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !231, nameTableKind: None)
!4657 = !DILocalVariable(name: "base", arg: 2, scope: !4655, file: !4360, line: 65, type: !72)
!4658 = !DILocalVariable(name: "power", arg: 3, scope: !4655, file: !4360, line: 65, type: !72)
!4659 = !DILocalVariable(name: "err", scope: !4655, file: !4360, line: 67, type: !4363)
!4660 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !4661, file: !4661, line: 86, type: !4662, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !232, retainedNodes: !4)
!4661 = !DIFile(filename: "lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4662 = !DISubroutineType(types: !4663)
!4663 = !{!134, !4664, !69, !134, !4665}
!4664 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2688, size: 64)
!4665 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4666, size: 64)
!4666 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !2659, line: 6, baseType: !4667)
!4667 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !2661, line: 21, baseType: !4668)
!4668 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2661, line: 13, size: 64, elements: !4669)
!4669 = !{!4670, !4671}
!4670 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !4668, file: !2661, line: 15, baseType: !72, size: 32)
!4671 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !4668, file: !2661, line: 20, baseType: !4672, size: 32, offset: 32)
!4672 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !4668, file: !2661, line: 16, size: 32, elements: !4673)
!4673 = !{!4674, !4675}
!4674 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !4672, file: !2661, line: 18, baseType: !16, size: 32)
!4675 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !4672, file: !2661, line: 19, baseType: !2670, size: 32)
!4676 = !DILocalVariable(name: "pwc", arg: 1, scope: !4660, file: !4661, line: 86, type: !4664)
!4677 = !DILocation(line: 86, column: 23, scope: !4660)
!4678 = !DILocalVariable(name: "s", arg: 2, scope: !4660, file: !4661, line: 86, type: !69)
!4679 = !DILocation(line: 86, column: 40, scope: !4660)
!4680 = !DILocalVariable(name: "n", arg: 3, scope: !4660, file: !4661, line: 86, type: !134)
!4681 = !DILocation(line: 86, column: 50, scope: !4660)
!4682 = !DILocalVariable(name: "ps", arg: 4, scope: !4660, file: !4661, line: 86, type: !4665)
!4683 = !DILocation(line: 86, column: 64, scope: !4660)
!4684 = !DILocalVariable(name: "ret", scope: !4660, file: !4661, line: 88, type: !134)
!4685 = !DILocation(line: 88, column: 10, scope: !4660)
!4686 = !DILocalVariable(name: "wc", scope: !4660, file: !4661, line: 89, type: !2688)
!4687 = !DILocation(line: 89, column: 11, scope: !4660)
!4688 = !DILocation(line: 105, column: 9, scope: !4689)
!4689 = distinct !DILexicalBlock(scope: !4660, file: !4661, line: 105, column: 7)
!4690 = !DILocation(line: 105, column: 7, scope: !4660)
!4691 = !DILocation(line: 106, column: 9, scope: !4689)
!4692 = !DILocation(line: 106, column: 5, scope: !4689)
!4693 = !DILocation(line: 145, column: 18, scope: !4660)
!4694 = !DILocation(line: 145, column: 23, scope: !4660)
!4695 = !DILocation(line: 145, column: 26, scope: !4660)
!4696 = !DILocation(line: 145, column: 29, scope: !4660)
!4697 = !DILocation(line: 145, column: 9, scope: !4660)
!4698 = !DILocation(line: 145, column: 7, scope: !4660)
!4699 = !DILocation(line: 154, column: 22, scope: !4700)
!4700 = distinct !DILexicalBlock(scope: !4660, file: !4661, line: 154, column: 7)
!4701 = !DILocation(line: 154, column: 19, scope: !4700)
!4702 = !DILocation(line: 154, column: 26, scope: !4700)
!4703 = !DILocation(line: 154, column: 29, scope: !4700)
!4704 = !DILocation(line: 154, column: 31, scope: !4700)
!4705 = !DILocation(line: 154, column: 36, scope: !4700)
!4706 = !DILocation(line: 154, column: 41, scope: !4700)
!4707 = !DILocation(line: 154, column: 7, scope: !4660)
!4708 = !DILocalVariable(name: "uc", scope: !4709, file: !4661, line: 156, type: !240)
!4709 = distinct !DILexicalBlock(scope: !4700, file: !4661, line: 155, column: 5)
!4710 = !DILocation(line: 156, column: 21, scope: !4709)
!4711 = !DILocation(line: 156, column: 27, scope: !4709)
!4712 = !DILocation(line: 156, column: 26, scope: !4709)
!4713 = !DILocation(line: 157, column: 14, scope: !4709)
!4714 = !DILocation(line: 157, column: 8, scope: !4709)
!4715 = !DILocation(line: 157, column: 12, scope: !4709)
!4716 = !DILocation(line: 158, column: 7, scope: !4709)
!4717 = !DILocation(line: 162, column: 10, scope: !4660)
!4718 = !DILocation(line: 162, column: 3, scope: !4660)
!4719 = !DILocation(line: 163, column: 1, scope: !4660)
!4720 = !DILocalVariable(name: "pwc", arg: 1, scope: !4721, file: !4661, line: 86, type: !4664)
!4721 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !4661, file: !4661, line: 86, type: !4722, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4735, retainedNodes: !4)
!4722 = !DISubroutineType(types: !4723)
!4723 = !{!134, !4664, !69, !134, !4724}
!4724 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4725, size: 64)
!4725 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !2659, line: 6, baseType: !4726)
!4726 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !2661, line: 21, baseType: !4727)
!4727 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2661, line: 13, size: 64, elements: !4728)
!4728 = !{!4729, !4730}
!4729 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !4727, file: !2661, line: 15, baseType: !72, size: 32)
!4730 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !4727, file: !2661, line: 20, baseType: !4731, size: 32, offset: 32)
!4731 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !4727, file: !2661, line: 16, size: 32, elements: !4732)
!4732 = !{!4733, !4734}
!4733 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !4731, file: !2661, line: 18, baseType: !16, size: 32)
!4734 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !4731, file: !2661, line: 19, baseType: !2670, size: 32)
!4735 = distinct !DICompileUnit(language: DW_LANG_C99, file: !233, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !234, nameTableKind: None)
!4736 = !DILocalVariable(name: "s", arg: 2, scope: !4721, file: !4661, line: 86, type: !69)
!4737 = !DILocalVariable(name: "n", arg: 3, scope: !4721, file: !4661, line: 86, type: !134)
!4738 = !DILocalVariable(name: "ps", arg: 4, scope: !4721, file: !4661, line: 86, type: !4724)
!4739 = !DILocalVariable(name: "ret", scope: !4721, file: !4661, line: 88, type: !134)
!4740 = !DILocalVariable(name: "wc", scope: !4721, file: !4661, line: 89, type: !2688)
!4741 = distinct !DISubprogram(name: "c_strcasecmp", scope: !4742, file: !4742, line: 27, type: !4743, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !235, retainedNodes: !4)
!4742 = !DIFile(filename: "lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4743 = !DISubroutineType(types: !4744)
!4744 = !{!72, !69, !69}
!4745 = !DILocalVariable(name: "s1", arg: 1, scope: !4741, file: !4742, line: 27, type: !69)
!4746 = !DILocation(line: 27, column: 27, scope: !4741)
!4747 = !DILocalVariable(name: "s2", arg: 2, scope: !4741, file: !4742, line: 27, type: !69)
!4748 = !DILocation(line: 27, column: 43, scope: !4741)
!4749 = !DILocalVariable(name: "p1", scope: !4741, file: !4742, line: 29, type: !238)
!4750 = !DILocation(line: 29, column: 33, scope: !4741)
!4751 = !DILocation(line: 29, column: 62, scope: !4741)
!4752 = !DILocalVariable(name: "p2", scope: !4741, file: !4742, line: 30, type: !238)
!4753 = !DILocation(line: 30, column: 33, scope: !4741)
!4754 = !DILocation(line: 30, column: 62, scope: !4741)
!4755 = !DILocalVariable(name: "c1", scope: !4741, file: !4742, line: 31, type: !240)
!4756 = !DILocation(line: 31, column: 17, scope: !4741)
!4757 = !DILocalVariable(name: "c2", scope: !4741, file: !4742, line: 31, type: !240)
!4758 = !DILocation(line: 31, column: 21, scope: !4741)
!4759 = !DILocation(line: 33, column: 7, scope: !4760)
!4760 = distinct !DILexicalBlock(scope: !4741, file: !4742, line: 33, column: 7)
!4761 = !DILocation(line: 33, column: 13, scope: !4760)
!4762 = !DILocation(line: 33, column: 10, scope: !4760)
!4763 = !DILocation(line: 33, column: 7, scope: !4741)
!4764 = !DILocation(line: 34, column: 5, scope: !4760)
!4765 = !DILocation(line: 36, column: 3, scope: !4741)
!4766 = !DILocation(line: 38, column: 24, scope: !4767)
!4767 = distinct !DILexicalBlock(scope: !4741, file: !4742, line: 37, column: 5)
!4768 = !DILocation(line: 38, column: 23, scope: !4767)
!4769 = !DILocation(line: 38, column: 12, scope: !4767)
!4770 = !DILocation(line: 38, column: 10, scope: !4767)
!4771 = !DILocation(line: 39, column: 24, scope: !4767)
!4772 = !DILocation(line: 39, column: 23, scope: !4767)
!4773 = !DILocation(line: 39, column: 12, scope: !4767)
!4774 = !DILocation(line: 39, column: 10, scope: !4767)
!4775 = !DILocation(line: 41, column: 11, scope: !4776)
!4776 = distinct !DILexicalBlock(scope: !4767, file: !4742, line: 41, column: 11)
!4777 = !DILocation(line: 41, column: 14, scope: !4776)
!4778 = !DILocation(line: 41, column: 11, scope: !4767)
!4779 = !DILocation(line: 42, column: 9, scope: !4776)
!4780 = !DILocation(line: 44, column: 7, scope: !4767)
!4781 = !DILocation(line: 45, column: 7, scope: !4767)
!4782 = !DILocation(line: 46, column: 5, scope: !4767)
!4783 = !DILocation(line: 47, column: 10, scope: !4741)
!4784 = !DILocation(line: 47, column: 16, scope: !4741)
!4785 = !DILocation(line: 47, column: 13, scope: !4741)
!4786 = distinct !{!4786, !4765, !4787}
!4787 = !DILocation(line: 47, column: 18, scope: !4741)
!4788 = !DILocation(line: 50, column: 12, scope: !4789)
!4789 = distinct !DILexicalBlock(scope: !4741, file: !4742, line: 49, column: 7)
!4790 = !DILocation(line: 50, column: 17, scope: !4789)
!4791 = !DILocation(line: 50, column: 15, scope: !4789)
!4792 = !DILocation(line: 50, column: 5, scope: !4789)
!4793 = !DILocation(line: 56, column: 1, scope: !4741)
!4794 = !DILocalVariable(name: "s1", arg: 1, scope: !4795, file: !4742, line: 27, type: !69)
!4795 = distinct !DISubprogram(name: "c_strcasecmp", scope: !4742, file: !4742, line: 27, type: !4743, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4796, retainedNodes: !4)
!4796 = distinct !DICompileUnit(language: DW_LANG_C99, file: !236, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !237, nameTableKind: None)
!4797 = !DILocalVariable(name: "s2", arg: 2, scope: !4795, file: !4742, line: 27, type: !69)
!4798 = !DILocalVariable(name: "p1", scope: !4795, file: !4742, line: 29, type: !238)
!4799 = !DILocalVariable(name: "p2", scope: !4795, file: !4742, line: 30, type: !238)
!4800 = !DILocalVariable(name: "c1", scope: !4795, file: !4742, line: 31, type: !240)
!4801 = !DILocalVariable(name: "c2", scope: !4795, file: !4742, line: 31, type: !240)
!4802 = distinct !DISubprogram(name: "close_stream", scope: !4803, file: !4803, line: 56, type: !4804, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !241, retainedNodes: !4)
!4803 = !DIFile(filename: "lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4804 = !DISubroutineType(types: !4805)
!4805 = !{!72, !4806}
!4806 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4807, size: 64)
!4807 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3816, line: 7, baseType: !4808)
!4808 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3818, line: 49, size: 1728, elements: !4809)
!4809 = !{!4810, !4811, !4812, !4813, !4814, !4815, !4816, !4817, !4818, !4819, !4820, !4821, !4822, !4823, !4825, !4826, !4827, !4828, !4829, !4830, !4831, !4832, !4833, !4834, !4835, !4836, !4837, !4838, !4839}
!4810 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4808, file: !3818, line: 51, baseType: !72, size: 32)
!4811 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4808, file: !3818, line: 54, baseType: !6, size: 64, offset: 64)
!4812 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4808, file: !3818, line: 55, baseType: !6, size: 64, offset: 128)
!4813 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4808, file: !3818, line: 56, baseType: !6, size: 64, offset: 192)
!4814 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4808, file: !3818, line: 57, baseType: !6, size: 64, offset: 256)
!4815 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4808, file: !3818, line: 58, baseType: !6, size: 64, offset: 320)
!4816 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4808, file: !3818, line: 59, baseType: !6, size: 64, offset: 384)
!4817 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4808, file: !3818, line: 60, baseType: !6, size: 64, offset: 448)
!4818 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4808, file: !3818, line: 61, baseType: !6, size: 64, offset: 512)
!4819 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4808, file: !3818, line: 64, baseType: !6, size: 64, offset: 576)
!4820 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4808, file: !3818, line: 65, baseType: !6, size: 64, offset: 640)
!4821 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4808, file: !3818, line: 66, baseType: !6, size: 64, offset: 704)
!4822 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4808, file: !3818, line: 68, baseType: !3833, size: 64, offset: 768)
!4823 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4808, file: !3818, line: 70, baseType: !4824, size: 64, offset: 832)
!4824 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4808, size: 64)
!4825 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4808, file: !3818, line: 72, baseType: !72, size: 32, offset: 896)
!4826 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4808, file: !3818, line: 73, baseType: !72, size: 32, offset: 928)
!4827 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4808, file: !3818, line: 74, baseType: !3840, size: 64, offset: 960)
!4828 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4808, file: !3818, line: 77, baseType: !133, size: 16, offset: 1024)
!4829 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4808, file: !3818, line: 78, baseType: !3843, size: 8, offset: 1040)
!4830 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4808, file: !3818, line: 79, baseType: !3845, size: 8, offset: 1048)
!4831 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4808, file: !3818, line: 81, baseType: !3849, size: 64, offset: 1088)
!4832 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4808, file: !3818, line: 89, baseType: !3852, size: 64, offset: 1152)
!4833 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4808, file: !3818, line: 91, baseType: !3854, size: 64, offset: 1216)
!4834 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4808, file: !3818, line: 92, baseType: !3857, size: 64, offset: 1280)
!4835 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4808, file: !3818, line: 93, baseType: !4824, size: 64, offset: 1344)
!4836 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4808, file: !3818, line: 94, baseType: !8, size: 64, offset: 1408)
!4837 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4808, file: !3818, line: 95, baseType: !134, size: 64, offset: 1472)
!4838 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4808, file: !3818, line: 96, baseType: !72, size: 32, offset: 1536)
!4839 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4808, file: !3818, line: 98, baseType: !3864, size: 160, offset: 1568)
!4840 = !DILocalVariable(name: "stream", arg: 1, scope: !4802, file: !4803, line: 56, type: !4806)
!4841 = !DILocation(line: 56, column: 21, scope: !4802)
!4842 = !DILocalVariable(name: "some_pending", scope: !4802, file: !4803, line: 58, type: !4843)
!4843 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !27)
!4844 = !DILocation(line: 58, column: 14, scope: !4802)
!4845 = !DILocation(line: 58, column: 42, scope: !4802)
!4846 = !DILocation(line: 58, column: 30, scope: !4802)
!4847 = !DILocation(line: 58, column: 50, scope: !4802)
!4848 = !DILocalVariable(name: "prev_fail", scope: !4802, file: !4803, line: 59, type: !4843)
!4849 = !DILocation(line: 59, column: 14, scope: !4802)
!4850 = !DILocation(line: 59, column: 27, scope: !4802)
!4851 = !DILocation(line: 59, column: 43, scope: !4802)
!4852 = !DILocalVariable(name: "fclose_fail", scope: !4802, file: !4803, line: 60, type: !4843)
!4853 = !DILocation(line: 60, column: 14, scope: !4802)
!4854 = !DILocation(line: 60, column: 37, scope: !4802)
!4855 = !DILocation(line: 60, column: 29, scope: !4802)
!4856 = !DILocation(line: 60, column: 45, scope: !4802)
!4857 = !DILocation(line: 70, column: 7, scope: !4858)
!4858 = distinct !DILexicalBlock(scope: !4802, file: !4803, line: 70, column: 7)
!4859 = !DILocation(line: 70, column: 17, scope: !4858)
!4860 = !DILocation(line: 70, column: 21, scope: !4858)
!4861 = !DILocation(line: 70, column: 33, scope: !4858)
!4862 = !DILocation(line: 70, column: 37, scope: !4858)
!4863 = !DILocation(line: 70, column: 50, scope: !4858)
!4864 = !DILocation(line: 70, column: 53, scope: !4858)
!4865 = !DILocation(line: 70, column: 59, scope: !4858)
!4866 = !DILocation(line: 70, column: 7, scope: !4802)
!4867 = !DILocation(line: 72, column: 13, scope: !4868)
!4868 = distinct !DILexicalBlock(scope: !4869, file: !4803, line: 72, column: 11)
!4869 = distinct !DILexicalBlock(scope: !4858, file: !4803, line: 71, column: 5)
!4870 = !DILocation(line: 72, column: 11, scope: !4869)
!4871 = !DILocation(line: 73, column: 9, scope: !4868)
!4872 = !DILocation(line: 73, column: 15, scope: !4868)
!4873 = !DILocation(line: 74, column: 7, scope: !4869)
!4874 = !DILocation(line: 77, column: 3, scope: !4802)
!4875 = !DILocation(line: 78, column: 1, scope: !4802)
!4876 = distinct !DISubprogram(name: "hard_locale", scope: !4877, file: !4877, line: 27, type: !4878, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !243, retainedNodes: !4)
!4877 = !DIFile(filename: "lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4878 = !DISubroutineType(types: !4879)
!4879 = !{!27, !72}
!4880 = !DILocalVariable(name: "category", arg: 1, scope: !4876, file: !4877, line: 27, type: !72)
!4881 = !DILocation(line: 27, column: 18, scope: !4876)
!4882 = !DILocalVariable(name: "locale", scope: !4876, file: !4877, line: 29, type: !4883)
!4883 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 2056, elements: !4884)
!4884 = !{!4885}
!4885 = !DISubrange(count: 257)
!4886 = !DILocation(line: 29, column: 8, scope: !4876)
!4887 = !DILocation(line: 31, column: 25, scope: !4888)
!4888 = distinct !DILexicalBlock(scope: !4876, file: !4877, line: 31, column: 7)
!4889 = !DILocation(line: 31, column: 35, scope: !4888)
!4890 = !DILocation(line: 31, column: 7, scope: !4888)
!4891 = !DILocation(line: 31, column: 7, scope: !4876)
!4892 = !DILocation(line: 32, column: 5, scope: !4888)
!4893 = !DILocation(line: 34, column: 20, scope: !4876)
!4894 = !DILocation(line: 34, column: 12, scope: !4876)
!4895 = !DILocation(line: 34, column: 33, scope: !4876)
!4896 = !DILocation(line: 34, column: 38, scope: !4876)
!4897 = !DILocation(line: 34, column: 49, scope: !4876)
!4898 = !DILocation(line: 34, column: 41, scope: !4876)
!4899 = !DILocation(line: 34, column: 66, scope: !4876)
!4900 = !DILocation(line: 34, column: 10, scope: !4876)
!4901 = !DILocation(line: 34, column: 3, scope: !4876)
!4902 = !DILocation(line: 35, column: 1, scope: !4876)
!4903 = distinct !DISubprogram(name: "locale_charset", scope: !4904, file: !4904, line: 831, type: !4905, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !245, retainedNodes: !4)
!4904 = !DIFile(filename: "lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4905 = !DISubroutineType(types: !4906)
!4906 = !{!69}
!4907 = !DILocalVariable(name: "codeset", scope: !4903, file: !4904, line: 833, type: !69)
!4908 = !DILocation(line: 833, column: 15, scope: !4903)
!4909 = !DILocation(line: 847, column: 13, scope: !4903)
!4910 = !DILocation(line: 847, column: 11, scope: !4903)
!4911 = !DILocation(line: 911, column: 7, scope: !4912)
!4912 = distinct !DILexicalBlock(scope: !4903, file: !4904, line: 911, column: 7)
!4913 = !DILocation(line: 911, column: 15, scope: !4912)
!4914 = !DILocation(line: 911, column: 7, scope: !4903)
!4915 = !DILocation(line: 913, column: 13, scope: !4912)
!4916 = !DILocation(line: 913, column: 5, scope: !4912)
!4917 = !DILocation(line: 1070, column: 13, scope: !4918)
!4918 = distinct !DILexicalBlock(scope: !4919, file: !4904, line: 1070, column: 13)
!4919 = distinct !DILexicalBlock(scope: !4920, file: !4904, line: 1060, column: 7)
!4920 = distinct !DILexicalBlock(scope: !4903, file: !4904, line: 1019, column: 3)
!4921 = !DILocation(line: 1070, column: 24, scope: !4918)
!4922 = !DILocation(line: 1070, column: 13, scope: !4919)
!4923 = !DILocation(line: 1071, column: 19, scope: !4918)
!4924 = !DILocation(line: 1071, column: 11, scope: !4918)
!4925 = !DILocation(line: 1158, column: 10, scope: !4903)
!4926 = !DILocation(line: 1158, column: 3, scope: !4903)
!4927 = !DILocalVariable(name: "codeset", scope: !4928, file: !4904, line: 833, type: !69)
!4928 = distinct !DISubprogram(name: "locale_charset", scope: !4904, file: !4904, line: 831, type: !4905, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4929, retainedNodes: !4)
!4929 = distinct !DICompileUnit(language: DW_LANG_C99, file: !246, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!4930 = distinct !DISubprogram(name: "mgetgroups", scope: !4931, file: !4931, line: 66, type: !4328, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !247, retainedNodes: !4)
!4931 = !DIFile(filename: "lib/mgetgroups.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4932 = !DILocalVariable(name: "username", arg: 1, scope: !4930, file: !4931, line: 66, type: !69)
!4933 = !DILocation(line: 66, column: 25, scope: !4930)
!4934 = !DILocalVariable(name: "gid", arg: 2, scope: !4930, file: !4931, line: 66, type: !21)
!4935 = !DILocation(line: 66, column: 41, scope: !4930)
!4936 = !DILocalVariable(name: "groups", arg: 3, scope: !4930, file: !4931, line: 66, type: !4330)
!4937 = !DILocation(line: 66, column: 54, scope: !4930)
!4938 = !DILocalVariable(name: "max_n_groups", scope: !4930, file: !4931, line: 68, type: !72)
!4939 = !DILocation(line: 68, column: 7, scope: !4930)
!4940 = !DILocalVariable(name: "ng", scope: !4930, file: !4931, line: 69, type: !72)
!4941 = !DILocation(line: 69, column: 7, scope: !4930)
!4942 = !DILocalVariable(name: "g", scope: !4930, file: !4931, line: 70, type: !183)
!4943 = !DILocation(line: 70, column: 10, scope: !4930)
!4944 = !DILocation(line: 81, column: 7, scope: !4945)
!4945 = distinct !DILexicalBlock(scope: !4930, file: !4931, line: 81, column: 7)
!4946 = !DILocation(line: 81, column: 7, scope: !4930)
!4947 = !DILocation(line: 84, column: 20, scope: !4948)
!4948 = distinct !DILexicalBlock(scope: !4945, file: !4931, line: 82, column: 5)
!4949 = !DILocation(line: 86, column: 35, scope: !4948)
!4950 = !DILocation(line: 86, column: 11, scope: !4948)
!4951 = !DILocation(line: 86, column: 9, scope: !4948)
!4952 = !DILocation(line: 87, column: 11, scope: !4953)
!4953 = distinct !DILexicalBlock(scope: !4948, file: !4931, line: 87, column: 11)
!4954 = !DILocation(line: 87, column: 13, scope: !4953)
!4955 = !DILocation(line: 87, column: 11, scope: !4948)
!4956 = !DILocation(line: 88, column: 9, scope: !4953)
!4957 = !DILocation(line: 90, column: 7, scope: !4948)
!4958 = !DILocalVariable(name: "h", scope: !4959, file: !4931, line: 92, type: !183)
!4959 = distinct !DILexicalBlock(scope: !4948, file: !4931, line: 91, column: 9)
!4960 = !DILocation(line: 92, column: 18, scope: !4959)
!4961 = !DILocalVariable(name: "last_n_groups", scope: !4959, file: !4931, line: 93, type: !72)
!4962 = !DILocation(line: 93, column: 15, scope: !4959)
!4963 = !DILocation(line: 93, column: 31, scope: !4959)
!4964 = !DILocation(line: 96, column: 30, scope: !4959)
!4965 = !DILocation(line: 96, column: 40, scope: !4959)
!4966 = !DILocation(line: 96, column: 45, scope: !4959)
!4967 = !DILocation(line: 96, column: 16, scope: !4959)
!4968 = !DILocation(line: 96, column: 14, scope: !4959)
!4969 = !DILocation(line: 100, column: 15, scope: !4970)
!4970 = distinct !DILexicalBlock(scope: !4959, file: !4931, line: 100, column: 15)
!4971 = !DILocation(line: 100, column: 18, scope: !4970)
!4972 = !DILocation(line: 100, column: 22, scope: !4970)
!4973 = !DILocation(line: 100, column: 25, scope: !4970)
!4974 = !DILocation(line: 100, column: 42, scope: !4970)
!4975 = !DILocation(line: 100, column: 39, scope: !4970)
!4976 = !DILocation(line: 100, column: 15, scope: !4959)
!4977 = !DILocation(line: 101, column: 26, scope: !4970)
!4978 = !DILocation(line: 101, column: 13, scope: !4970)
!4979 = !DILocation(line: 103, column: 38, scope: !4980)
!4980 = distinct !DILexicalBlock(scope: !4959, file: !4931, line: 103, column: 15)
!4981 = !DILocation(line: 103, column: 41, scope: !4980)
!4982 = !DILocation(line: 103, column: 20, scope: !4980)
!4983 = !DILocation(line: 103, column: 18, scope: !4980)
!4984 = !DILocation(line: 103, column: 56, scope: !4980)
!4985 = !DILocation(line: 103, column: 15, scope: !4959)
!4986 = !DILocalVariable(name: "saved_errno", scope: !4987, file: !4931, line: 105, type: !72)
!4987 = distinct !DILexicalBlock(scope: !4980, file: !4931, line: 104, column: 13)
!4988 = !DILocation(line: 105, column: 19, scope: !4987)
!4989 = !DILocation(line: 105, column: 33, scope: !4987)
!4990 = !DILocation(line: 106, column: 21, scope: !4987)
!4991 = !DILocation(line: 106, column: 15, scope: !4987)
!4992 = !DILocation(line: 107, column: 23, scope: !4987)
!4993 = !DILocation(line: 107, column: 15, scope: !4987)
!4994 = !DILocation(line: 107, column: 21, scope: !4987)
!4995 = !DILocation(line: 108, column: 15, scope: !4987)
!4996 = !DILocation(line: 110, column: 15, scope: !4959)
!4997 = !DILocation(line: 110, column: 13, scope: !4959)
!4998 = !DILocation(line: 112, column: 20, scope: !4999)
!4999 = distinct !DILexicalBlock(scope: !4959, file: !4931, line: 112, column: 15)
!5000 = !DILocation(line: 112, column: 17, scope: !4999)
!5001 = !DILocation(line: 112, column: 15, scope: !4959)
!5002 = !DILocation(line: 114, column: 25, scope: !5003)
!5003 = distinct !DILexicalBlock(scope: !4999, file: !4931, line: 113, column: 13)
!5004 = !DILocation(line: 114, column: 16, scope: !5003)
!5005 = !DILocation(line: 114, column: 23, scope: !5003)
!5006 = !DILocation(line: 117, column: 22, scope: !5003)
!5007 = !DILocation(line: 117, column: 15, scope: !5003)
!5008 = distinct !{!5008, !4957, !5009}
!5009 = !DILocation(line: 119, column: 9, scope: !4948)
!5010 = !DILocation(line: 124, column: 19, scope: !4930)
!5011 = !DILocation(line: 125, column: 42, scope: !4930)
!5012 = !DILocation(line: 125, column: 52, scope: !4930)
!5013 = !DILocation(line: 125, column: 21, scope: !4930)
!5014 = !DILocation(line: 126, column: 21, scope: !4930)
!5015 = !DILocation(line: 124, column: 16, scope: !4930)
!5016 = !DILocation(line: 131, column: 7, scope: !5017)
!5017 = distinct !DILexicalBlock(scope: !4930, file: !4931, line: 131, column: 7)
!5018 = !DILocation(line: 131, column: 20, scope: !5017)
!5019 = !DILocation(line: 131, column: 7, scope: !4930)
!5020 = !DILocation(line: 133, column: 11, scope: !5021)
!5021 = distinct !DILexicalBlock(scope: !5022, file: !4931, line: 133, column: 11)
!5022 = distinct !DILexicalBlock(scope: !5017, file: !4931, line: 132, column: 5)
!5023 = !DILocation(line: 133, column: 17, scope: !5021)
!5024 = !DILocation(line: 133, column: 27, scope: !5021)
!5025 = !DILocation(line: 133, column: 35, scope: !5021)
!5026 = !DILocation(line: 133, column: 33, scope: !5021)
!5027 = !DILocation(line: 133, column: 11, scope: !5022)
!5028 = !DILocation(line: 135, column: 21, scope: !5029)
!5029 = distinct !DILexicalBlock(scope: !5021, file: !4931, line: 134, column: 9)
!5030 = !DILocation(line: 135, column: 12, scope: !5029)
!5031 = !DILocation(line: 135, column: 19, scope: !5029)
!5032 = !DILocation(line: 136, column: 16, scope: !5029)
!5033 = !DILocation(line: 136, column: 12, scope: !5029)
!5034 = !DILocation(line: 136, column: 14, scope: !5029)
!5035 = !DILocation(line: 137, column: 18, scope: !5029)
!5036 = !DILocation(line: 137, column: 22, scope: !5029)
!5037 = !DILocation(line: 137, column: 11, scope: !5029)
!5038 = !DILocation(line: 139, column: 7, scope: !5022)
!5039 = !DILocation(line: 142, column: 7, scope: !5040)
!5040 = distinct !DILexicalBlock(scope: !4930, file: !4931, line: 142, column: 7)
!5041 = !DILocation(line: 142, column: 20, scope: !5040)
!5042 = !DILocation(line: 142, column: 25, scope: !5040)
!5043 = !DILocation(line: 142, column: 30, scope: !5040)
!5044 = !DILocation(line: 142, column: 39, scope: !5040)
!5045 = !DILocation(line: 142, column: 42, scope: !5040)
!5046 = !DILocation(line: 142, column: 46, scope: !5040)
!5047 = !DILocation(line: 142, column: 7, scope: !4930)
!5048 = !DILocation(line: 143, column: 17, scope: !5040)
!5049 = !DILocation(line: 143, column: 5, scope: !5040)
!5050 = !DILocation(line: 144, column: 31, scope: !4930)
!5051 = !DILocation(line: 144, column: 7, scope: !4930)
!5052 = !DILocation(line: 144, column: 5, scope: !4930)
!5053 = !DILocation(line: 145, column: 7, scope: !5054)
!5054 = distinct !DILexicalBlock(scope: !4930, file: !4931, line: 145, column: 7)
!5055 = !DILocation(line: 145, column: 9, scope: !5054)
!5056 = !DILocation(line: 145, column: 7, scope: !4930)
!5057 = !DILocation(line: 146, column: 5, scope: !5054)
!5058 = !DILocation(line: 148, column: 9, scope: !4930)
!5059 = !DILocation(line: 149, column: 23, scope: !4930)
!5060 = !DILocation(line: 149, column: 37, scope: !4930)
!5061 = !DILocation(line: 149, column: 40, scope: !4930)
!5062 = !DILocation(line: 149, column: 50, scope: !4930)
!5063 = !DILocation(line: 149, column: 11, scope: !4930)
!5064 = !DILocation(line: 150, column: 22, scope: !4930)
!5065 = !DILocation(line: 150, column: 38, scope: !4930)
!5066 = !DILocation(line: 150, column: 42, scope: !4930)
!5067 = !DILocation(line: 150, column: 35, scope: !4930)
!5068 = !DILocation(line: 151, column: 33, scope: !4930)
!5069 = !DILocation(line: 151, column: 38, scope: !4930)
!5070 = !DILocation(line: 151, column: 42, scope: !4930)
!5071 = !DILocation(line: 151, column: 35, scope: !4930)
!5072 = !DILocation(line: 150, column: 11, scope: !4930)
!5073 = !DILocation(line: 148, column: 6, scope: !4930)
!5074 = !DILocation(line: 153, column: 7, scope: !5075)
!5075 = distinct !DILexicalBlock(scope: !4930, file: !4931, line: 153, column: 7)
!5076 = !DILocation(line: 153, column: 10, scope: !5075)
!5077 = !DILocation(line: 153, column: 7, scope: !4930)
!5078 = !DILocalVariable(name: "saved_errno", scope: !5079, file: !4931, line: 156, type: !72)
!5079 = distinct !DILexicalBlock(scope: !5075, file: !4931, line: 154, column: 5)
!5080 = !DILocation(line: 156, column: 11, scope: !5079)
!5081 = !DILocation(line: 156, column: 25, scope: !5079)
!5082 = !DILocation(line: 157, column: 13, scope: !5079)
!5083 = !DILocation(line: 157, column: 7, scope: !5079)
!5084 = !DILocation(line: 158, column: 15, scope: !5079)
!5085 = !DILocation(line: 158, column: 7, scope: !5079)
!5086 = !DILocation(line: 158, column: 13, scope: !5079)
!5087 = !DILocation(line: 159, column: 7, scope: !5079)
!5088 = !DILocation(line: 162, column: 8, scope: !5089)
!5089 = distinct !DILexicalBlock(scope: !4930, file: !4931, line: 162, column: 7)
!5090 = !DILocation(line: 162, column: 17, scope: !5089)
!5091 = !DILocation(line: 162, column: 20, scope: !5089)
!5092 = !DILocation(line: 162, column: 24, scope: !5089)
!5093 = !DILocation(line: 162, column: 7, scope: !4930)
!5094 = !DILocation(line: 164, column: 12, scope: !5095)
!5095 = distinct !DILexicalBlock(scope: !5089, file: !4931, line: 163, column: 5)
!5096 = !DILocation(line: 164, column: 8, scope: !5095)
!5097 = !DILocation(line: 164, column: 10, scope: !5095)
!5098 = !DILocation(line: 165, column: 9, scope: !5095)
!5099 = !DILocation(line: 166, column: 5, scope: !5095)
!5100 = !DILocation(line: 167, column: 13, scope: !4930)
!5101 = !DILocation(line: 167, column: 4, scope: !4930)
!5102 = !DILocation(line: 167, column: 11, scope: !4930)
!5103 = !DILocation(line: 185, column: 11, scope: !5104)
!5104 = distinct !DILexicalBlock(scope: !4930, file: !4931, line: 185, column: 7)
!5105 = !DILocation(line: 185, column: 9, scope: !5104)
!5106 = !DILocation(line: 185, column: 7, scope: !4930)
!5107 = !DILocalVariable(name: "first", scope: !5108, file: !4931, line: 187, type: !21)
!5108 = distinct !DILexicalBlock(scope: !5104, file: !4931, line: 186, column: 5)
!5109 = !DILocation(line: 187, column: 13, scope: !5108)
!5110 = !DILocation(line: 187, column: 22, scope: !5108)
!5111 = !DILocation(line: 187, column: 21, scope: !5108)
!5112 = !DILocalVariable(name: "next", scope: !5108, file: !4931, line: 188, type: !183)
!5113 = !DILocation(line: 188, column: 14, scope: !5108)
!5114 = !DILocalVariable(name: "groups_end", scope: !5108, file: !4931, line: 189, type: !183)
!5115 = !DILocation(line: 189, column: 14, scope: !5108)
!5116 = !DILocation(line: 189, column: 27, scope: !5108)
!5117 = !DILocation(line: 189, column: 31, scope: !5108)
!5118 = !DILocation(line: 189, column: 29, scope: !5108)
!5119 = !DILocation(line: 191, column: 19, scope: !5120)
!5120 = distinct !DILexicalBlock(scope: !5108, file: !4931, line: 191, column: 7)
!5121 = !DILocation(line: 191, column: 21, scope: !5120)
!5122 = !DILocation(line: 191, column: 17, scope: !5120)
!5123 = !DILocation(line: 191, column: 12, scope: !5120)
!5124 = !DILocation(line: 191, column: 26, scope: !5125)
!5125 = distinct !DILexicalBlock(scope: !5120, file: !4931, line: 191, column: 7)
!5126 = !DILocation(line: 191, column: 33, scope: !5125)
!5127 = !DILocation(line: 191, column: 31, scope: !5125)
!5128 = !DILocation(line: 191, column: 7, scope: !5120)
!5129 = !DILocation(line: 193, column: 16, scope: !5130)
!5130 = distinct !DILexicalBlock(scope: !5131, file: !4931, line: 193, column: 15)
!5131 = distinct !DILexicalBlock(scope: !5125, file: !4931, line: 192, column: 9)
!5132 = !DILocation(line: 193, column: 15, scope: !5130)
!5133 = !DILocation(line: 193, column: 24, scope: !5130)
!5134 = !DILocation(line: 193, column: 21, scope: !5130)
!5135 = !DILocation(line: 193, column: 30, scope: !5130)
!5136 = !DILocation(line: 193, column: 34, scope: !5130)
!5137 = !DILocation(line: 193, column: 33, scope: !5130)
!5138 = !DILocation(line: 193, column: 43, scope: !5130)
!5139 = !DILocation(line: 193, column: 42, scope: !5130)
!5140 = !DILocation(line: 193, column: 39, scope: !5130)
!5141 = !DILocation(line: 193, column: 15, scope: !5131)
!5142 = !DILocation(line: 194, column: 15, scope: !5130)
!5143 = !DILocation(line: 194, column: 13, scope: !5130)
!5144 = !DILocation(line: 196, column: 21, scope: !5130)
!5145 = !DILocation(line: 196, column: 20, scope: !5130)
!5146 = !DILocation(line: 196, column: 14, scope: !5130)
!5147 = !DILocation(line: 196, column: 18, scope: !5130)
!5148 = !DILocation(line: 197, column: 9, scope: !5131)
!5149 = !DILocation(line: 191, column: 49, scope: !5125)
!5150 = !DILocation(line: 191, column: 7, scope: !5125)
!5151 = distinct !{!5151, !5128, !5152}
!5152 = !DILocation(line: 197, column: 9, scope: !5120)
!5153 = !DILocation(line: 198, column: 5, scope: !5108)
!5154 = !DILocation(line: 200, column: 10, scope: !4930)
!5155 = !DILocation(line: 200, column: 3, scope: !4930)
!5156 = !DILocation(line: 201, column: 1, scope: !4930)
!5157 = !DILocalVariable(name: "next", scope: !5158, file: !4931, line: 188, type: !183)
!5158 = distinct !DILexicalBlock(scope: !5159, file: !4931, line: 186, column: 5)
!5159 = distinct !DILexicalBlock(scope: !5160, file: !4931, line: 185, column: 7)
!5160 = distinct !DISubprogram(name: "mgetgroups", scope: !4931, file: !4931, line: 66, type: !4328, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5161, retainedNodes: !4)
!5161 = distinct !DICompileUnit(language: DW_LANG_C99, file: !248, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !249, nameTableKind: None)
!5162 = !DILocalVariable(name: "groups_end", scope: !5158, file: !4931, line: 189, type: !183)
!5163 = distinct !DISubprogram(name: "realloc_groupbuf", scope: !4931, file: !4931, line: 43, type: !5164, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !247, retainedNodes: !4)
!5164 = !DISubroutineType(types: !5165)
!5165 = !{!183, !183, !134}
!5166 = !DILocalVariable(name: "g", arg: 1, scope: !5163, file: !4931, line: 43, type: !183)
!5167 = !DILocation(line: 43, column: 26, scope: !5163)
!5168 = !DILocalVariable(name: "num", arg: 2, scope: !5163, file: !4931, line: 43, type: !134)
!5169 = !DILocation(line: 43, column: 36, scope: !5163)
!5170 = !DILocation(line: 45, column: 7, scope: !5171)
!5171 = distinct !DILexicalBlock(scope: !5163, file: !4931, line: 45, column: 7)
!5172 = !DILocation(line: 45, column: 7, scope: !5163)
!5173 = !DILocation(line: 47, column: 7, scope: !5174)
!5174 = distinct !DILexicalBlock(scope: !5171, file: !4931, line: 46, column: 5)
!5175 = !DILocation(line: 47, column: 13, scope: !5174)
!5176 = !DILocation(line: 48, column: 7, scope: !5174)
!5177 = !DILocation(line: 51, column: 19, scope: !5163)
!5178 = !DILocation(line: 51, column: 22, scope: !5163)
!5179 = !DILocation(line: 51, column: 26, scope: !5163)
!5180 = !DILocation(line: 51, column: 10, scope: !5163)
!5181 = !DILocation(line: 51, column: 3, scope: !5163)
!5182 = !DILocation(line: 52, column: 1, scope: !5163)
!5183 = !DILocalVariable(name: "g", arg: 1, scope: !5184, file: !4931, line: 43, type: !183)
!5184 = distinct !DISubprogram(name: "realloc_groupbuf", scope: !4931, file: !4931, line: 43, type: !5164, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !5185, retainedNodes: !4)
!5185 = distinct !DICompileUnit(language: DW_LANG_C99, file: !248, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !249, nameTableKind: None)
!5186 = !DILocalVariable(name: "num", arg: 2, scope: !5184, file: !4931, line: 43, type: !134)
!5187 = distinct !DISubprogram(name: "setlocale_null_r", scope: !5188, file: !5188, line: 269, type: !5189, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !250, retainedNodes: !4)
!5188 = !DIFile(filename: "lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5189 = !DISubroutineType(types: !5190)
!5190 = !{!72, !72, !6, !134}
!5191 = !DILocalVariable(name: "category", arg: 1, scope: !5187, file: !5188, line: 269, type: !72)
!5192 = !DILocation(line: 269, column: 23, scope: !5187)
!5193 = !DILocalVariable(name: "buf", arg: 2, scope: !5187, file: !5188, line: 269, type: !6)
!5194 = !DILocation(line: 269, column: 39, scope: !5187)
!5195 = !DILocalVariable(name: "bufsize", arg: 3, scope: !5187, file: !5188, line: 269, type: !134)
!5196 = !DILocation(line: 269, column: 51, scope: !5187)
!5197 = !DILocation(line: 274, column: 35, scope: !5187)
!5198 = !DILocation(line: 274, column: 45, scope: !5187)
!5199 = !DILocation(line: 274, column: 50, scope: !5187)
!5200 = !DILocation(line: 274, column: 10, scope: !5187)
!5201 = !DILocation(line: 274, column: 3, scope: !5187)
!5202 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !5188, file: !5188, line: 91, type: !5189, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !250, retainedNodes: !4)
!5203 = !DILocalVariable(name: "category", arg: 1, scope: !5202, file: !5188, line: 91, type: !72)
!5204 = !DILocation(line: 91, column: 30, scope: !5202)
!5205 = !DILocalVariable(name: "buf", arg: 2, scope: !5202, file: !5188, line: 91, type: !6)
!5206 = !DILocation(line: 91, column: 46, scope: !5202)
!5207 = !DILocalVariable(name: "bufsize", arg: 3, scope: !5202, file: !5188, line: 91, type: !134)
!5208 = !DILocation(line: 91, column: 58, scope: !5202)
!5209 = !DILocalVariable(name: "result", scope: !5202, file: !5188, line: 140, type: !69)
!5210 = !DILocation(line: 140, column: 15, scope: !5202)
!5211 = !DILocation(line: 140, column: 51, scope: !5202)
!5212 = !DILocation(line: 140, column: 24, scope: !5202)
!5213 = !DILocation(line: 142, column: 7, scope: !5214)
!5214 = distinct !DILexicalBlock(scope: !5202, file: !5188, line: 142, column: 7)
!5215 = !DILocation(line: 142, column: 14, scope: !5214)
!5216 = !DILocation(line: 142, column: 7, scope: !5202)
!5217 = !DILocation(line: 145, column: 11, scope: !5218)
!5218 = distinct !DILexicalBlock(scope: !5219, file: !5188, line: 145, column: 11)
!5219 = distinct !DILexicalBlock(scope: !5214, file: !5188, line: 143, column: 5)
!5220 = !DILocation(line: 145, column: 19, scope: !5218)
!5221 = !DILocation(line: 145, column: 11, scope: !5219)
!5222 = !DILocation(line: 149, column: 9, scope: !5218)
!5223 = !DILocation(line: 149, column: 16, scope: !5218)
!5224 = !DILocation(line: 150, column: 7, scope: !5219)
!5225 = !DILocalVariable(name: "length", scope: !5226, file: !5188, line: 154, type: !134)
!5226 = distinct !DILexicalBlock(scope: !5214, file: !5188, line: 153, column: 5)
!5227 = !DILocation(line: 154, column: 14, scope: !5226)
!5228 = !DILocation(line: 154, column: 31, scope: !5226)
!5229 = !DILocation(line: 154, column: 23, scope: !5226)
!5230 = !DILocation(line: 155, column: 11, scope: !5231)
!5231 = distinct !DILexicalBlock(scope: !5226, file: !5188, line: 155, column: 11)
!5232 = !DILocation(line: 155, column: 20, scope: !5231)
!5233 = !DILocation(line: 155, column: 18, scope: !5231)
!5234 = !DILocation(line: 155, column: 11, scope: !5226)
!5235 = !DILocation(line: 157, column: 19, scope: !5236)
!5236 = distinct !DILexicalBlock(scope: !5231, file: !5188, line: 156, column: 9)
!5237 = !DILocation(line: 157, column: 24, scope: !5236)
!5238 = !DILocation(line: 157, column: 32, scope: !5236)
!5239 = !DILocation(line: 157, column: 39, scope: !5236)
!5240 = !DILocation(line: 157, column: 11, scope: !5236)
!5241 = !DILocation(line: 158, column: 11, scope: !5236)
!5242 = !DILocation(line: 162, column: 15, scope: !5243)
!5243 = distinct !DILexicalBlock(scope: !5244, file: !5188, line: 162, column: 15)
!5244 = distinct !DILexicalBlock(scope: !5231, file: !5188, line: 161, column: 9)
!5245 = !DILocation(line: 162, column: 23, scope: !5243)
!5246 = !DILocation(line: 162, column: 15, scope: !5244)
!5247 = !DILocation(line: 167, column: 23, scope: !5248)
!5248 = distinct !DILexicalBlock(scope: !5243, file: !5188, line: 163, column: 13)
!5249 = !DILocation(line: 167, column: 28, scope: !5248)
!5250 = !DILocation(line: 167, column: 36, scope: !5248)
!5251 = !DILocation(line: 167, column: 44, scope: !5248)
!5252 = !DILocation(line: 167, column: 15, scope: !5248)
!5253 = !DILocation(line: 168, column: 15, scope: !5248)
!5254 = !DILocation(line: 168, column: 19, scope: !5248)
!5255 = !DILocation(line: 168, column: 27, scope: !5248)
!5256 = !DILocation(line: 168, column: 32, scope: !5248)
!5257 = !DILocation(line: 169, column: 13, scope: !5248)
!5258 = !DILocation(line: 170, column: 11, scope: !5244)
!5259 = !DILocation(line: 174, column: 1, scope: !5202)
!5260 = !DILocalVariable(name: "category", arg: 1, scope: !5261, file: !5188, line: 91, type: !72)
!5261 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !5188, file: !5188, line: 91, type: !5189, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !5262, retainedNodes: !4)
!5262 = distinct !DICompileUnit(language: DW_LANG_C99, file: !251, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!5263 = !DILocalVariable(name: "buf", arg: 2, scope: !5261, file: !5188, line: 91, type: !6)
!5264 = !DILocalVariable(name: "bufsize", arg: 3, scope: !5261, file: !5188, line: 91, type: !134)
!5265 = !DILocalVariable(name: "result", scope: !5261, file: !5188, line: 140, type: !69)
!5266 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !5188, file: !5188, line: 60, type: !5267, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !250, retainedNodes: !4)
!5267 = !DISubroutineType(types: !5268)
!5268 = !{!69, !72}
!5269 = !DILocalVariable(name: "category", arg: 1, scope: !5266, file: !5188, line: 60, type: !72)
!5270 = !DILocation(line: 60, column: 32, scope: !5266)
!5271 = !DILocalVariable(name: "result", scope: !5266, file: !5188, line: 62, type: !69)
!5272 = !DILocation(line: 62, column: 15, scope: !5266)
!5273 = !DILocation(line: 62, column: 35, scope: !5266)
!5274 = !DILocation(line: 62, column: 24, scope: !5266)
!5275 = !DILocation(line: 87, column: 10, scope: !5266)
!5276 = !DILocation(line: 87, column: 3, scope: !5266)
!5277 = !DILocalVariable(name: "category", arg: 1, scope: !5278, file: !5188, line: 60, type: !72)
!5278 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !5188, file: !5188, line: 60, type: !5267, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !5279, retainedNodes: !4)
!5279 = distinct !DICompileUnit(language: DW_LANG_C99, file: !251, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!5280 = !DILocalVariable(name: "result", scope: !5278, file: !5188, line: 62, type: !69)
!5281 = distinct !DISubprogram(name: "rpl_fclose", scope: !5282, file: !5282, line: 58, type: !5283, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !252, retainedNodes: !4)
!5282 = !DIFile(filename: "lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5283 = !DISubroutineType(types: !5284)
!5284 = !{!72, !5285}
!5285 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5286, size: 64)
!5286 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3816, line: 7, baseType: !5287)
!5287 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3818, line: 49, size: 1728, elements: !5288)
!5288 = !{!5289, !5290, !5291, !5292, !5293, !5294, !5295, !5296, !5297, !5298, !5299, !5300, !5301, !5302, !5304, !5305, !5306, !5307, !5308, !5309, !5310, !5311, !5312, !5313, !5314, !5315, !5316, !5317, !5318}
!5289 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5287, file: !3818, line: 51, baseType: !72, size: 32)
!5290 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5287, file: !3818, line: 54, baseType: !6, size: 64, offset: 64)
!5291 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5287, file: !3818, line: 55, baseType: !6, size: 64, offset: 128)
!5292 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5287, file: !3818, line: 56, baseType: !6, size: 64, offset: 192)
!5293 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5287, file: !3818, line: 57, baseType: !6, size: 64, offset: 256)
!5294 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5287, file: !3818, line: 58, baseType: !6, size: 64, offset: 320)
!5295 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5287, file: !3818, line: 59, baseType: !6, size: 64, offset: 384)
!5296 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5287, file: !3818, line: 60, baseType: !6, size: 64, offset: 448)
!5297 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5287, file: !3818, line: 61, baseType: !6, size: 64, offset: 512)
!5298 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5287, file: !3818, line: 64, baseType: !6, size: 64, offset: 576)
!5299 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5287, file: !3818, line: 65, baseType: !6, size: 64, offset: 640)
!5300 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5287, file: !3818, line: 66, baseType: !6, size: 64, offset: 704)
!5301 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5287, file: !3818, line: 68, baseType: !3833, size: 64, offset: 768)
!5302 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5287, file: !3818, line: 70, baseType: !5303, size: 64, offset: 832)
!5303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5287, size: 64)
!5304 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5287, file: !3818, line: 72, baseType: !72, size: 32, offset: 896)
!5305 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5287, file: !3818, line: 73, baseType: !72, size: 32, offset: 928)
!5306 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5287, file: !3818, line: 74, baseType: !3840, size: 64, offset: 960)
!5307 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5287, file: !3818, line: 77, baseType: !133, size: 16, offset: 1024)
!5308 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5287, file: !3818, line: 78, baseType: !3843, size: 8, offset: 1040)
!5309 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5287, file: !3818, line: 79, baseType: !3845, size: 8, offset: 1048)
!5310 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5287, file: !3818, line: 81, baseType: !3849, size: 64, offset: 1088)
!5311 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5287, file: !3818, line: 89, baseType: !3852, size: 64, offset: 1152)
!5312 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5287, file: !3818, line: 91, baseType: !3854, size: 64, offset: 1216)
!5313 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5287, file: !3818, line: 92, baseType: !3857, size: 64, offset: 1280)
!5314 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5287, file: !3818, line: 93, baseType: !5303, size: 64, offset: 1344)
!5315 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5287, file: !3818, line: 94, baseType: !8, size: 64, offset: 1408)
!5316 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5287, file: !3818, line: 95, baseType: !134, size: 64, offset: 1472)
!5317 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5287, file: !3818, line: 96, baseType: !72, size: 32, offset: 1536)
!5318 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5287, file: !3818, line: 98, baseType: !3864, size: 160, offset: 1568)
!5319 = !DILocalVariable(name: "fp", arg: 1, scope: !5281, file: !5282, line: 58, type: !5285)
!5320 = !DILocation(line: 58, column: 19, scope: !5281)
!5321 = !DILocalVariable(name: "saved_errno", scope: !5281, file: !5282, line: 60, type: !72)
!5322 = !DILocation(line: 60, column: 7, scope: !5281)
!5323 = !DILocalVariable(name: "fd", scope: !5281, file: !5282, line: 61, type: !72)
!5324 = !DILocation(line: 61, column: 7, scope: !5281)
!5325 = !DILocalVariable(name: "result", scope: !5281, file: !5282, line: 62, type: !72)
!5326 = !DILocation(line: 62, column: 7, scope: !5281)
!5327 = !DILocation(line: 65, column: 16, scope: !5281)
!5328 = !DILocation(line: 65, column: 8, scope: !5281)
!5329 = !DILocation(line: 65, column: 6, scope: !5281)
!5330 = !DILocation(line: 66, column: 7, scope: !5331)
!5331 = distinct !DILexicalBlock(scope: !5281, file: !5282, line: 66, column: 7)
!5332 = !DILocation(line: 66, column: 10, scope: !5331)
!5333 = !DILocation(line: 66, column: 7, scope: !5281)
!5334 = !DILocation(line: 67, column: 28, scope: !5331)
!5335 = !DILocation(line: 67, column: 12, scope: !5331)
!5336 = !DILocation(line: 67, column: 5, scope: !5331)
!5337 = !DILocation(line: 72, column: 9, scope: !5338)
!5338 = distinct !DILexicalBlock(scope: !5281, file: !5282, line: 72, column: 7)
!5339 = !DILocation(line: 72, column: 23, scope: !5338)
!5340 = !DILocation(line: 72, column: 41, scope: !5338)
!5341 = !DILocation(line: 72, column: 33, scope: !5338)
!5342 = !DILocation(line: 72, column: 26, scope: !5338)
!5343 = !DILocation(line: 72, column: 59, scope: !5338)
!5344 = !DILocation(line: 73, column: 7, scope: !5338)
!5345 = !DILocation(line: 73, column: 18, scope: !5338)
!5346 = !DILocation(line: 73, column: 10, scope: !5338)
!5347 = !DILocation(line: 72, column: 7, scope: !5281)
!5348 = !DILocation(line: 74, column: 19, scope: !5338)
!5349 = !DILocation(line: 74, column: 17, scope: !5338)
!5350 = !DILocation(line: 74, column: 5, scope: !5338)
!5351 = !DILocation(line: 100, column: 28, scope: !5281)
!5352 = !DILocation(line: 100, column: 12, scope: !5281)
!5353 = !DILocation(line: 100, column: 10, scope: !5281)
!5354 = !DILocation(line: 105, column: 7, scope: !5355)
!5355 = distinct !DILexicalBlock(scope: !5281, file: !5282, line: 105, column: 7)
!5356 = !DILocation(line: 105, column: 19, scope: !5355)
!5357 = !DILocation(line: 105, column: 7, scope: !5281)
!5358 = !DILocation(line: 107, column: 15, scope: !5359)
!5359 = distinct !DILexicalBlock(scope: !5355, file: !5282, line: 106, column: 5)
!5360 = !DILocation(line: 107, column: 7, scope: !5359)
!5361 = !DILocation(line: 107, column: 13, scope: !5359)
!5362 = !DILocation(line: 108, column: 14, scope: !5359)
!5363 = !DILocation(line: 109, column: 5, scope: !5359)
!5364 = !DILocation(line: 111, column: 10, scope: !5281)
!5365 = !DILocation(line: 111, column: 3, scope: !5281)
!5366 = !DILocation(line: 112, column: 1, scope: !5281)
!5367 = !DILocalVariable(name: "fp", arg: 1, scope: !5368, file: !5282, line: 58, type: !5371)
!5368 = distinct !DISubprogram(name: "rpl_fclose", scope: !5282, file: !5282, line: 58, type: !5369, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5405, retainedNodes: !4)
!5369 = !DISubroutineType(types: !5370)
!5370 = !{!72, !5371}
!5371 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5372, size: 64)
!5372 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3816, line: 7, baseType: !5373)
!5373 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3818, line: 49, size: 1728, elements: !5374)
!5374 = !{!5375, !5376, !5377, !5378, !5379, !5380, !5381, !5382, !5383, !5384, !5385, !5386, !5387, !5388, !5390, !5391, !5392, !5393, !5394, !5395, !5396, !5397, !5398, !5399, !5400, !5401, !5402, !5403, !5404}
!5375 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5373, file: !3818, line: 51, baseType: !72, size: 32)
!5376 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5373, file: !3818, line: 54, baseType: !6, size: 64, offset: 64)
!5377 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5373, file: !3818, line: 55, baseType: !6, size: 64, offset: 128)
!5378 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5373, file: !3818, line: 56, baseType: !6, size: 64, offset: 192)
!5379 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5373, file: !3818, line: 57, baseType: !6, size: 64, offset: 256)
!5380 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5373, file: !3818, line: 58, baseType: !6, size: 64, offset: 320)
!5381 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5373, file: !3818, line: 59, baseType: !6, size: 64, offset: 384)
!5382 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5373, file: !3818, line: 60, baseType: !6, size: 64, offset: 448)
!5383 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5373, file: !3818, line: 61, baseType: !6, size: 64, offset: 512)
!5384 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5373, file: !3818, line: 64, baseType: !6, size: 64, offset: 576)
!5385 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5373, file: !3818, line: 65, baseType: !6, size: 64, offset: 640)
!5386 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5373, file: !3818, line: 66, baseType: !6, size: 64, offset: 704)
!5387 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5373, file: !3818, line: 68, baseType: !3833, size: 64, offset: 768)
!5388 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5373, file: !3818, line: 70, baseType: !5389, size: 64, offset: 832)
!5389 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5373, size: 64)
!5390 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5373, file: !3818, line: 72, baseType: !72, size: 32, offset: 896)
!5391 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5373, file: !3818, line: 73, baseType: !72, size: 32, offset: 928)
!5392 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5373, file: !3818, line: 74, baseType: !3840, size: 64, offset: 960)
!5393 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5373, file: !3818, line: 77, baseType: !133, size: 16, offset: 1024)
!5394 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5373, file: !3818, line: 78, baseType: !3843, size: 8, offset: 1040)
!5395 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5373, file: !3818, line: 79, baseType: !3845, size: 8, offset: 1048)
!5396 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5373, file: !3818, line: 81, baseType: !3849, size: 64, offset: 1088)
!5397 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5373, file: !3818, line: 89, baseType: !3852, size: 64, offset: 1152)
!5398 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5373, file: !3818, line: 91, baseType: !3854, size: 64, offset: 1216)
!5399 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5373, file: !3818, line: 92, baseType: !3857, size: 64, offset: 1280)
!5400 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5373, file: !3818, line: 93, baseType: !5389, size: 64, offset: 1344)
!5401 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5373, file: !3818, line: 94, baseType: !8, size: 64, offset: 1408)
!5402 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5373, file: !3818, line: 95, baseType: !134, size: 64, offset: 1472)
!5403 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5373, file: !3818, line: 96, baseType: !72, size: 32, offset: 1536)
!5404 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5373, file: !3818, line: 98, baseType: !3864, size: 160, offset: 1568)
!5405 = distinct !DICompileUnit(language: DW_LANG_C99, file: !253, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!5406 = !DILocalVariable(name: "saved_errno", scope: !5368, file: !5282, line: 60, type: !72)
!5407 = !DILocalVariable(name: "fd", scope: !5368, file: !5282, line: 61, type: !72)
!5408 = !DILocalVariable(name: "result", scope: !5368, file: !5282, line: 62, type: !72)
!5409 = distinct !DISubprogram(name: "rpl_fflush", scope: !5410, file: !5410, line: 129, type: !5411, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !254, retainedNodes: !4)
!5410 = !DIFile(filename: "lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5411 = !DISubroutineType(types: !5412)
!5412 = !{!72, !5413}
!5413 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5414, size: 64)
!5414 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3816, line: 7, baseType: !5415)
!5415 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3818, line: 49, size: 1728, elements: !5416)
!5416 = !{!5417, !5418, !5419, !5420, !5421, !5422, !5423, !5424, !5425, !5426, !5427, !5428, !5429, !5430, !5432, !5433, !5434, !5435, !5436, !5437, !5438, !5439, !5440, !5441, !5442, !5443, !5444, !5445, !5446}
!5417 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5415, file: !3818, line: 51, baseType: !72, size: 32)
!5418 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5415, file: !3818, line: 54, baseType: !6, size: 64, offset: 64)
!5419 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5415, file: !3818, line: 55, baseType: !6, size: 64, offset: 128)
!5420 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5415, file: !3818, line: 56, baseType: !6, size: 64, offset: 192)
!5421 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5415, file: !3818, line: 57, baseType: !6, size: 64, offset: 256)
!5422 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5415, file: !3818, line: 58, baseType: !6, size: 64, offset: 320)
!5423 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5415, file: !3818, line: 59, baseType: !6, size: 64, offset: 384)
!5424 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5415, file: !3818, line: 60, baseType: !6, size: 64, offset: 448)
!5425 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5415, file: !3818, line: 61, baseType: !6, size: 64, offset: 512)
!5426 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5415, file: !3818, line: 64, baseType: !6, size: 64, offset: 576)
!5427 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5415, file: !3818, line: 65, baseType: !6, size: 64, offset: 640)
!5428 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5415, file: !3818, line: 66, baseType: !6, size: 64, offset: 704)
!5429 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5415, file: !3818, line: 68, baseType: !3833, size: 64, offset: 768)
!5430 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5415, file: !3818, line: 70, baseType: !5431, size: 64, offset: 832)
!5431 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5415, size: 64)
!5432 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5415, file: !3818, line: 72, baseType: !72, size: 32, offset: 896)
!5433 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5415, file: !3818, line: 73, baseType: !72, size: 32, offset: 928)
!5434 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5415, file: !3818, line: 74, baseType: !3840, size: 64, offset: 960)
!5435 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5415, file: !3818, line: 77, baseType: !133, size: 16, offset: 1024)
!5436 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5415, file: !3818, line: 78, baseType: !3843, size: 8, offset: 1040)
!5437 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5415, file: !3818, line: 79, baseType: !3845, size: 8, offset: 1048)
!5438 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5415, file: !3818, line: 81, baseType: !3849, size: 64, offset: 1088)
!5439 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5415, file: !3818, line: 89, baseType: !3852, size: 64, offset: 1152)
!5440 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5415, file: !3818, line: 91, baseType: !3854, size: 64, offset: 1216)
!5441 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5415, file: !3818, line: 92, baseType: !3857, size: 64, offset: 1280)
!5442 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5415, file: !3818, line: 93, baseType: !5431, size: 64, offset: 1344)
!5443 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5415, file: !3818, line: 94, baseType: !8, size: 64, offset: 1408)
!5444 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5415, file: !3818, line: 95, baseType: !134, size: 64, offset: 1472)
!5445 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5415, file: !3818, line: 96, baseType: !72, size: 32, offset: 1536)
!5446 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5415, file: !3818, line: 98, baseType: !3864, size: 160, offset: 1568)
!5447 = !DILocalVariable(name: "stream", arg: 1, scope: !5409, file: !5410, line: 129, type: !5413)
!5448 = !DILocation(line: 129, column: 19, scope: !5409)
!5449 = !DILocation(line: 150, column: 7, scope: !5450)
!5450 = distinct !DILexicalBlock(scope: !5409, file: !5410, line: 150, column: 7)
!5451 = !DILocation(line: 150, column: 14, scope: !5450)
!5452 = !DILocation(line: 150, column: 22, scope: !5450)
!5453 = !DILocation(line: 150, column: 27, scope: !5450)
!5454 = !DILocation(line: 150, column: 7, scope: !5409)
!5455 = !DILocation(line: 151, column: 20, scope: !5450)
!5456 = !DILocation(line: 151, column: 12, scope: !5450)
!5457 = !DILocation(line: 151, column: 5, scope: !5450)
!5458 = !DILocation(line: 156, column: 44, scope: !5409)
!5459 = !DILocation(line: 156, column: 3, scope: !5409)
!5460 = !DILocation(line: 158, column: 18, scope: !5409)
!5461 = !DILocation(line: 158, column: 10, scope: !5409)
!5462 = !DILocation(line: 158, column: 3, scope: !5409)
!5463 = !DILocation(line: 235, column: 1, scope: !5409)
!5464 = !DILocalVariable(name: "stream", arg: 1, scope: !5465, file: !5410, line: 129, type: !5468)
!5465 = distinct !DISubprogram(name: "rpl_fflush", scope: !5410, file: !5410, line: 129, type: !5466, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5502, retainedNodes: !4)
!5466 = !DISubroutineType(types: !5467)
!5467 = !{!72, !5468}
!5468 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5469, size: 64)
!5469 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3816, line: 7, baseType: !5470)
!5470 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3818, line: 49, size: 1728, elements: !5471)
!5471 = !{!5472, !5473, !5474, !5475, !5476, !5477, !5478, !5479, !5480, !5481, !5482, !5483, !5484, !5485, !5487, !5488, !5489, !5490, !5491, !5492, !5493, !5494, !5495, !5496, !5497, !5498, !5499, !5500, !5501}
!5472 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5470, file: !3818, line: 51, baseType: !72, size: 32)
!5473 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5470, file: !3818, line: 54, baseType: !6, size: 64, offset: 64)
!5474 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5470, file: !3818, line: 55, baseType: !6, size: 64, offset: 128)
!5475 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5470, file: !3818, line: 56, baseType: !6, size: 64, offset: 192)
!5476 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5470, file: !3818, line: 57, baseType: !6, size: 64, offset: 256)
!5477 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5470, file: !3818, line: 58, baseType: !6, size: 64, offset: 320)
!5478 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5470, file: !3818, line: 59, baseType: !6, size: 64, offset: 384)
!5479 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5470, file: !3818, line: 60, baseType: !6, size: 64, offset: 448)
!5480 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5470, file: !3818, line: 61, baseType: !6, size: 64, offset: 512)
!5481 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5470, file: !3818, line: 64, baseType: !6, size: 64, offset: 576)
!5482 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5470, file: !3818, line: 65, baseType: !6, size: 64, offset: 640)
!5483 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5470, file: !3818, line: 66, baseType: !6, size: 64, offset: 704)
!5484 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5470, file: !3818, line: 68, baseType: !3833, size: 64, offset: 768)
!5485 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5470, file: !3818, line: 70, baseType: !5486, size: 64, offset: 832)
!5486 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5470, size: 64)
!5487 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5470, file: !3818, line: 72, baseType: !72, size: 32, offset: 896)
!5488 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5470, file: !3818, line: 73, baseType: !72, size: 32, offset: 928)
!5489 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5470, file: !3818, line: 74, baseType: !3840, size: 64, offset: 960)
!5490 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5470, file: !3818, line: 77, baseType: !133, size: 16, offset: 1024)
!5491 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5470, file: !3818, line: 78, baseType: !3843, size: 8, offset: 1040)
!5492 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5470, file: !3818, line: 79, baseType: !3845, size: 8, offset: 1048)
!5493 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5470, file: !3818, line: 81, baseType: !3849, size: 64, offset: 1088)
!5494 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5470, file: !3818, line: 89, baseType: !3852, size: 64, offset: 1152)
!5495 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5470, file: !3818, line: 91, baseType: !3854, size: 64, offset: 1216)
!5496 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5470, file: !3818, line: 92, baseType: !3857, size: 64, offset: 1280)
!5497 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5470, file: !3818, line: 93, baseType: !5486, size: 64, offset: 1344)
!5498 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5470, file: !3818, line: 94, baseType: !8, size: 64, offset: 1408)
!5499 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5470, file: !3818, line: 95, baseType: !134, size: 64, offset: 1472)
!5500 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5470, file: !3818, line: 96, baseType: !72, size: 32, offset: 1536)
!5501 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5470, file: !3818, line: 98, baseType: !3864, size: 160, offset: 1568)
!5502 = distinct !DICompileUnit(language: DW_LANG_C99, file: !255, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!5503 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !5410, file: !5410, line: 41, type: !5504, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !254, retainedNodes: !4)
!5504 = !DISubroutineType(types: !5505)
!5505 = !{null, !5413}
!5506 = !DILocalVariable(name: "fp", arg: 1, scope: !5503, file: !5410, line: 41, type: !5413)
!5507 = !DILocation(line: 41, column: 48, scope: !5503)
!5508 = !DILocation(line: 43, column: 7, scope: !5509)
!5509 = distinct !DILexicalBlock(scope: !5503, file: !5410, line: 43, column: 7)
!5510 = !DILocation(line: 43, column: 11, scope: !5509)
!5511 = !DILocation(line: 43, column: 18, scope: !5509)
!5512 = !DILocation(line: 43, column: 7, scope: !5503)
!5513 = !DILocation(line: 45, column: 13, scope: !5509)
!5514 = !DILocation(line: 45, column: 5, scope: !5509)
!5515 = !DILocation(line: 46, column: 1, scope: !5503)
!5516 = !DILocalVariable(name: "fp", arg: 1, scope: !5517, file: !5410, line: 41, type: !5520)
!5517 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !5410, file: !5410, line: 41, type: !5518, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !5554, retainedNodes: !4)
!5518 = !DISubroutineType(types: !5519)
!5519 = !{null, !5520}
!5520 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5521, size: 64)
!5521 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3816, line: 7, baseType: !5522)
!5522 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3818, line: 49, size: 1728, elements: !5523)
!5523 = !{!5524, !5525, !5526, !5527, !5528, !5529, !5530, !5531, !5532, !5533, !5534, !5535, !5536, !5537, !5539, !5540, !5541, !5542, !5543, !5544, !5545, !5546, !5547, !5548, !5549, !5550, !5551, !5552, !5553}
!5524 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5522, file: !3818, line: 51, baseType: !72, size: 32)
!5525 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5522, file: !3818, line: 54, baseType: !6, size: 64, offset: 64)
!5526 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5522, file: !3818, line: 55, baseType: !6, size: 64, offset: 128)
!5527 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5522, file: !3818, line: 56, baseType: !6, size: 64, offset: 192)
!5528 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5522, file: !3818, line: 57, baseType: !6, size: 64, offset: 256)
!5529 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5522, file: !3818, line: 58, baseType: !6, size: 64, offset: 320)
!5530 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5522, file: !3818, line: 59, baseType: !6, size: 64, offset: 384)
!5531 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5522, file: !3818, line: 60, baseType: !6, size: 64, offset: 448)
!5532 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5522, file: !3818, line: 61, baseType: !6, size: 64, offset: 512)
!5533 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5522, file: !3818, line: 64, baseType: !6, size: 64, offset: 576)
!5534 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5522, file: !3818, line: 65, baseType: !6, size: 64, offset: 640)
!5535 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5522, file: !3818, line: 66, baseType: !6, size: 64, offset: 704)
!5536 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5522, file: !3818, line: 68, baseType: !3833, size: 64, offset: 768)
!5537 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5522, file: !3818, line: 70, baseType: !5538, size: 64, offset: 832)
!5538 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5522, size: 64)
!5539 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5522, file: !3818, line: 72, baseType: !72, size: 32, offset: 896)
!5540 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5522, file: !3818, line: 73, baseType: !72, size: 32, offset: 928)
!5541 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5522, file: !3818, line: 74, baseType: !3840, size: 64, offset: 960)
!5542 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5522, file: !3818, line: 77, baseType: !133, size: 16, offset: 1024)
!5543 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5522, file: !3818, line: 78, baseType: !3843, size: 8, offset: 1040)
!5544 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5522, file: !3818, line: 79, baseType: !3845, size: 8, offset: 1048)
!5545 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5522, file: !3818, line: 81, baseType: !3849, size: 64, offset: 1088)
!5546 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5522, file: !3818, line: 89, baseType: !3852, size: 64, offset: 1152)
!5547 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5522, file: !3818, line: 91, baseType: !3854, size: 64, offset: 1216)
!5548 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5522, file: !3818, line: 92, baseType: !3857, size: 64, offset: 1280)
!5549 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5522, file: !3818, line: 93, baseType: !5538, size: 64, offset: 1344)
!5550 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5522, file: !3818, line: 94, baseType: !8, size: 64, offset: 1408)
!5551 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5522, file: !3818, line: 95, baseType: !134, size: 64, offset: 1472)
!5552 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5522, file: !3818, line: 96, baseType: !72, size: 32, offset: 1536)
!5553 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5522, file: !3818, line: 98, baseType: !3864, size: 160, offset: 1568)
!5554 = distinct !DICompileUnit(language: DW_LANG_C99, file: !255, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!5555 = distinct !DISubprogram(name: "rpl_fseeko", scope: !5556, file: !5556, line: 28, type: !5557, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !256, retainedNodes: !4)
!5556 = !DIFile(filename: "lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5557 = !DISubroutineType(types: !5558)
!5558 = !{!72, !5559, !5593, !72}
!5559 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5560, size: 64)
!5560 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3816, line: 7, baseType: !5561)
!5561 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3818, line: 49, size: 1728, elements: !5562)
!5562 = !{!5563, !5564, !5565, !5566, !5567, !5568, !5569, !5570, !5571, !5572, !5573, !5574, !5575, !5576, !5578, !5579, !5580, !5581, !5582, !5583, !5584, !5585, !5586, !5587, !5588, !5589, !5590, !5591, !5592}
!5563 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5561, file: !3818, line: 51, baseType: !72, size: 32)
!5564 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5561, file: !3818, line: 54, baseType: !6, size: 64, offset: 64)
!5565 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5561, file: !3818, line: 55, baseType: !6, size: 64, offset: 128)
!5566 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5561, file: !3818, line: 56, baseType: !6, size: 64, offset: 192)
!5567 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5561, file: !3818, line: 57, baseType: !6, size: 64, offset: 256)
!5568 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5561, file: !3818, line: 58, baseType: !6, size: 64, offset: 320)
!5569 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5561, file: !3818, line: 59, baseType: !6, size: 64, offset: 384)
!5570 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5561, file: !3818, line: 60, baseType: !6, size: 64, offset: 448)
!5571 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5561, file: !3818, line: 61, baseType: !6, size: 64, offset: 512)
!5572 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5561, file: !3818, line: 64, baseType: !6, size: 64, offset: 576)
!5573 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5561, file: !3818, line: 65, baseType: !6, size: 64, offset: 640)
!5574 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5561, file: !3818, line: 66, baseType: !6, size: 64, offset: 704)
!5575 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5561, file: !3818, line: 68, baseType: !3833, size: 64, offset: 768)
!5576 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5561, file: !3818, line: 70, baseType: !5577, size: 64, offset: 832)
!5577 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5561, size: 64)
!5578 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5561, file: !3818, line: 72, baseType: !72, size: 32, offset: 896)
!5579 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5561, file: !3818, line: 73, baseType: !72, size: 32, offset: 928)
!5580 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5561, file: !3818, line: 74, baseType: !3840, size: 64, offset: 960)
!5581 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5561, file: !3818, line: 77, baseType: !133, size: 16, offset: 1024)
!5582 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5561, file: !3818, line: 78, baseType: !3843, size: 8, offset: 1040)
!5583 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5561, file: !3818, line: 79, baseType: !3845, size: 8, offset: 1048)
!5584 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5561, file: !3818, line: 81, baseType: !3849, size: 64, offset: 1088)
!5585 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5561, file: !3818, line: 89, baseType: !3852, size: 64, offset: 1152)
!5586 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5561, file: !3818, line: 91, baseType: !3854, size: 64, offset: 1216)
!5587 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5561, file: !3818, line: 92, baseType: !3857, size: 64, offset: 1280)
!5588 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5561, file: !3818, line: 93, baseType: !5577, size: 64, offset: 1344)
!5589 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5561, file: !3818, line: 94, baseType: !8, size: 64, offset: 1408)
!5590 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5561, file: !3818, line: 95, baseType: !134, size: 64, offset: 1472)
!5591 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5561, file: !3818, line: 96, baseType: !72, size: 32, offset: 1536)
!5592 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5561, file: !3818, line: 98, baseType: !3864, size: 160, offset: 1568)
!5593 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !979, line: 63, baseType: !3840)
!5594 = !DILocalVariable(name: "fp", arg: 1, scope: !5555, file: !5556, line: 28, type: !5559)
!5595 = !DILocation(line: 28, column: 15, scope: !5555)
!5596 = !DILocalVariable(name: "offset", arg: 2, scope: !5555, file: !5556, line: 28, type: !5593)
!5597 = !DILocation(line: 28, column: 25, scope: !5555)
!5598 = !DILocalVariable(name: "whence", arg: 3, scope: !5555, file: !5556, line: 28, type: !72)
!5599 = !DILocation(line: 28, column: 37, scope: !5555)
!5600 = !DILocation(line: 52, column: 7, scope: !5601)
!5601 = distinct !DILexicalBlock(scope: !5555, file: !5556, line: 52, column: 7)
!5602 = !DILocation(line: 52, column: 11, scope: !5601)
!5603 = !DILocation(line: 52, column: 27, scope: !5601)
!5604 = !DILocation(line: 52, column: 31, scope: !5601)
!5605 = !DILocation(line: 52, column: 24, scope: !5601)
!5606 = !DILocation(line: 53, column: 7, scope: !5601)
!5607 = !DILocation(line: 53, column: 10, scope: !5601)
!5608 = !DILocation(line: 53, column: 14, scope: !5601)
!5609 = !DILocation(line: 53, column: 31, scope: !5601)
!5610 = !DILocation(line: 53, column: 35, scope: !5601)
!5611 = !DILocation(line: 53, column: 28, scope: !5601)
!5612 = !DILocation(line: 54, column: 7, scope: !5601)
!5613 = !DILocation(line: 54, column: 10, scope: !5601)
!5614 = !DILocation(line: 54, column: 14, scope: !5601)
!5615 = !DILocation(line: 54, column: 28, scope: !5601)
!5616 = !DILocation(line: 52, column: 7, scope: !5555)
!5617 = !DILocalVariable(name: "pos", scope: !5618, file: !5556, line: 117, type: !5593)
!5618 = distinct !DILexicalBlock(scope: !5601, file: !5556, line: 113, column: 5)
!5619 = !DILocation(line: 117, column: 13, scope: !5618)
!5620 = !DILocation(line: 117, column: 34, scope: !5618)
!5621 = !DILocation(line: 117, column: 26, scope: !5618)
!5622 = !DILocation(line: 117, column: 39, scope: !5618)
!5623 = !DILocation(line: 117, column: 47, scope: !5618)
!5624 = !DILocation(line: 117, column: 19, scope: !5618)
!5625 = !DILocation(line: 118, column: 11, scope: !5626)
!5626 = distinct !DILexicalBlock(scope: !5618, file: !5556, line: 118, column: 11)
!5627 = !DILocation(line: 118, column: 15, scope: !5626)
!5628 = !DILocation(line: 118, column: 11, scope: !5618)
!5629 = !DILocation(line: 124, column: 11, scope: !5630)
!5630 = distinct !DILexicalBlock(scope: !5626, file: !5556, line: 119, column: 9)
!5631 = !DILocation(line: 129, column: 7, scope: !5618)
!5632 = !DILocation(line: 129, column: 11, scope: !5618)
!5633 = !DILocation(line: 129, column: 18, scope: !5618)
!5634 = !DILocation(line: 130, column: 21, scope: !5618)
!5635 = !DILocation(line: 130, column: 7, scope: !5618)
!5636 = !DILocation(line: 130, column: 11, scope: !5618)
!5637 = !DILocation(line: 130, column: 19, scope: !5618)
!5638 = !DILocation(line: 161, column: 7, scope: !5618)
!5639 = !DILocation(line: 163, column: 18, scope: !5555)
!5640 = !DILocation(line: 163, column: 22, scope: !5555)
!5641 = !DILocation(line: 163, column: 30, scope: !5555)
!5642 = !DILocation(line: 163, column: 10, scope: !5555)
!5643 = !DILocation(line: 163, column: 3, scope: !5555)
!5644 = !DILocation(line: 164, column: 1, scope: !5555)
!5645 = !DILocalVariable(name: "fp", arg: 1, scope: !5646, file: !5556, line: 28, type: !5649)
!5646 = distinct !DISubprogram(name: "rpl_fseeko", scope: !5556, file: !5556, line: 28, type: !5647, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5683, retainedNodes: !4)
!5647 = !DISubroutineType(types: !5648)
!5648 = !{!72, !5649, !5593, !72}
!5649 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5650, size: 64)
!5650 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3816, line: 7, baseType: !5651)
!5651 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3818, line: 49, size: 1728, elements: !5652)
!5652 = !{!5653, !5654, !5655, !5656, !5657, !5658, !5659, !5660, !5661, !5662, !5663, !5664, !5665, !5666, !5668, !5669, !5670, !5671, !5672, !5673, !5674, !5675, !5676, !5677, !5678, !5679, !5680, !5681, !5682}
!5653 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5651, file: !3818, line: 51, baseType: !72, size: 32)
!5654 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5651, file: !3818, line: 54, baseType: !6, size: 64, offset: 64)
!5655 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5651, file: !3818, line: 55, baseType: !6, size: 64, offset: 128)
!5656 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5651, file: !3818, line: 56, baseType: !6, size: 64, offset: 192)
!5657 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5651, file: !3818, line: 57, baseType: !6, size: 64, offset: 256)
!5658 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5651, file: !3818, line: 58, baseType: !6, size: 64, offset: 320)
!5659 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5651, file: !3818, line: 59, baseType: !6, size: 64, offset: 384)
!5660 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5651, file: !3818, line: 60, baseType: !6, size: 64, offset: 448)
!5661 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5651, file: !3818, line: 61, baseType: !6, size: 64, offset: 512)
!5662 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5651, file: !3818, line: 64, baseType: !6, size: 64, offset: 576)
!5663 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5651, file: !3818, line: 65, baseType: !6, size: 64, offset: 640)
!5664 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5651, file: !3818, line: 66, baseType: !6, size: 64, offset: 704)
!5665 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5651, file: !3818, line: 68, baseType: !3833, size: 64, offset: 768)
!5666 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5651, file: !3818, line: 70, baseType: !5667, size: 64, offset: 832)
!5667 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5651, size: 64)
!5668 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5651, file: !3818, line: 72, baseType: !72, size: 32, offset: 896)
!5669 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5651, file: !3818, line: 73, baseType: !72, size: 32, offset: 928)
!5670 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5651, file: !3818, line: 74, baseType: !3840, size: 64, offset: 960)
!5671 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5651, file: !3818, line: 77, baseType: !133, size: 16, offset: 1024)
!5672 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5651, file: !3818, line: 78, baseType: !3843, size: 8, offset: 1040)
!5673 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5651, file: !3818, line: 79, baseType: !3845, size: 8, offset: 1048)
!5674 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5651, file: !3818, line: 81, baseType: !3849, size: 64, offset: 1088)
!5675 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5651, file: !3818, line: 89, baseType: !3852, size: 64, offset: 1152)
!5676 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5651, file: !3818, line: 91, baseType: !3854, size: 64, offset: 1216)
!5677 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5651, file: !3818, line: 92, baseType: !3857, size: 64, offset: 1280)
!5678 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5651, file: !3818, line: 93, baseType: !5667, size: 64, offset: 1344)
!5679 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5651, file: !3818, line: 94, baseType: !8, size: 64, offset: 1408)
!5680 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5651, file: !3818, line: 95, baseType: !134, size: 64, offset: 1472)
!5681 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5651, file: !3818, line: 96, baseType: !72, size: 32, offset: 1536)
!5682 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5651, file: !3818, line: 98, baseType: !3864, size: 160, offset: 1568)
!5683 = distinct !DICompileUnit(language: DW_LANG_C99, file: !257, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!5684 = !DILocalVariable(name: "offset", arg: 2, scope: !5646, file: !5556, line: 28, type: !5593)
!5685 = !DILocalVariable(name: "whence", arg: 3, scope: !5646, file: !5556, line: 28, type: !72)
!5686 = distinct !DISubprogram(name: "c_tolower", scope: !5687, file: !5687, line: 337, type: !5688, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !258, retainedNodes: !4)
!5687 = !DIFile(filename: "./lib/c-ctype.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5688 = !DISubroutineType(types: !5689)
!5689 = !{!72, !72}
!5690 = !DILocalVariable(name: "c", arg: 1, scope: !5686, file: !5687, line: 337, type: !72)
!5691 = !DILocation(line: 337, column: 16, scope: !5686)
!5692 = !DILocation(line: 339, column: 11, scope: !5686)
!5693 = !DILocation(line: 339, column: 3, scope: !5686)
!5694 = !DILocation(line: 342, column: 14, scope: !5695)
!5695 = distinct !DILexicalBlock(scope: !5686, file: !5687, line: 340, column: 5)
!5696 = !DILocation(line: 342, column: 16, scope: !5695)
!5697 = !DILocation(line: 342, column: 22, scope: !5695)
!5698 = !DILocation(line: 342, column: 7, scope: !5695)
!5699 = !DILocation(line: 344, column: 14, scope: !5695)
!5700 = !DILocation(line: 344, column: 7, scope: !5695)
!5701 = !DILocation(line: 346, column: 1, scope: !5686)
!5702 = !DILocalVariable(name: "c", arg: 1, scope: !5703, file: !5687, line: 337, type: !72)
!5703 = distinct !DISubprogram(name: "c_tolower", scope: !5687, file: !5687, line: 337, type: !5688, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5704, retainedNodes: !4)
!5704 = distinct !DICompileUnit(language: DW_LANG_C99, file: !259, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!5705 = distinct !DISubprogram(name: "getugroups", scope: !5706, file: !5706, line: 61, type: !5707, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !260, retainedNodes: !4)
!5706 = !DIFile(filename: "lib/getugroups.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5707 = !DISubroutineType(types: !5708)
!5708 = !{!72, !72, !183, !69, !21}
!5709 = !DILocalVariable(name: "maxcount", arg: 1, scope: !5705, file: !5706, line: 61, type: !72)
!5710 = !DILocation(line: 61, column: 17, scope: !5705)
!5711 = !DILocalVariable(name: "grouplist", arg: 2, scope: !5705, file: !5706, line: 61, type: !183)
!5712 = !DILocation(line: 61, column: 34, scope: !5705)
!5713 = !DILocalVariable(name: "username", arg: 3, scope: !5705, file: !5706, line: 61, type: !69)
!5714 = !DILocation(line: 61, column: 57, scope: !5705)
!5715 = !DILocalVariable(name: "gid", arg: 4, scope: !5705, file: !5706, line: 62, type: !21)
!5716 = !DILocation(line: 62, column: 19, scope: !5705)
!5717 = !DILocalVariable(name: "count", scope: !5705, file: !5706, line: 64, type: !72)
!5718 = !DILocation(line: 64, column: 7, scope: !5705)
!5719 = !DILocation(line: 66, column: 7, scope: !5720)
!5720 = distinct !DILexicalBlock(scope: !5705, file: !5706, line: 66, column: 7)
!5721 = !DILocation(line: 66, column: 11, scope: !5720)
!5722 = !DILocation(line: 66, column: 7, scope: !5705)
!5723 = !DILocation(line: 68, column: 11, scope: !5724)
!5724 = distinct !DILexicalBlock(scope: !5725, file: !5706, line: 68, column: 11)
!5725 = distinct !DILexicalBlock(scope: !5720, file: !5706, line: 67, column: 5)
!5726 = !DILocation(line: 68, column: 20, scope: !5724)
!5727 = !DILocation(line: 68, column: 11, scope: !5725)
!5728 = !DILocation(line: 69, column: 28, scope: !5724)
!5729 = !DILocation(line: 69, column: 9, scope: !5724)
!5730 = !DILocation(line: 69, column: 19, scope: !5724)
!5731 = !DILocation(line: 69, column: 26, scope: !5724)
!5732 = !DILocation(line: 70, column: 7, scope: !5725)
!5733 = !DILocation(line: 71, column: 5, scope: !5725)
!5734 = !DILocation(line: 73, column: 3, scope: !5705)
!5735 = !DILocation(line: 74, column: 3, scope: !5705)
!5736 = !DILocalVariable(name: "cp", scope: !5737, file: !5706, line: 76, type: !184)
!5737 = distinct !DILexicalBlock(scope: !5705, file: !5706, line: 75, column: 5)
!5738 = !DILocation(line: 76, column: 14, scope: !5737)
!5739 = !DILocalVariable(name: "grp", scope: !5737, file: !5706, line: 77, type: !5740)
!5740 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5741, size: 64)
!5741 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "group", file: !1185, line: 42, size: 256, elements: !5742)
!5742 = !{!5743, !5744, !5745, !5746}
!5743 = !DIDerivedType(tag: DW_TAG_member, name: "gr_name", scope: !5741, file: !1185, line: 44, baseType: !6, size: 64)
!5744 = !DIDerivedType(tag: DW_TAG_member, name: "gr_passwd", scope: !5741, file: !1185, line: 45, baseType: !6, size: 64, offset: 64)
!5745 = !DIDerivedType(tag: DW_TAG_member, name: "gr_gid", scope: !5741, file: !1185, line: 46, baseType: !22, size: 32, offset: 128)
!5746 = !DIDerivedType(tag: DW_TAG_member, name: "gr_mem", scope: !5741, file: !1185, line: 47, baseType: !184, size: 64, offset: 192)
!5747 = !DILocation(line: 77, column: 21, scope: !5737)
!5748 = !DILocation(line: 79, column: 7, scope: !5737)
!5749 = !DILocation(line: 79, column: 13, scope: !5737)
!5750 = !DILocation(line: 80, column: 13, scope: !5737)
!5751 = !DILocation(line: 80, column: 11, scope: !5737)
!5752 = !DILocation(line: 81, column: 11, scope: !5753)
!5753 = distinct !DILexicalBlock(scope: !5737, file: !5706, line: 81, column: 11)
!5754 = !DILocation(line: 81, column: 15, scope: !5753)
!5755 = !DILocation(line: 81, column: 11, scope: !5737)
!5756 = !DILocation(line: 82, column: 9, scope: !5753)
!5757 = !DILocation(line: 84, column: 17, scope: !5758)
!5758 = distinct !DILexicalBlock(scope: !5737, file: !5706, line: 84, column: 7)
!5759 = !DILocation(line: 84, column: 22, scope: !5758)
!5760 = !DILocation(line: 84, column: 15, scope: !5758)
!5761 = !DILocation(line: 84, column: 12, scope: !5758)
!5762 = !DILocation(line: 84, column: 31, scope: !5763)
!5763 = distinct !DILexicalBlock(scope: !5758, file: !5706, line: 84, column: 7)
!5764 = !DILocation(line: 84, column: 30, scope: !5763)
!5765 = !DILocation(line: 84, column: 7, scope: !5758)
!5766 = !DILocalVariable(name: "n", scope: !5767, file: !5706, line: 86, type: !72)
!5767 = distinct !DILexicalBlock(scope: !5763, file: !5706, line: 85, column: 9)
!5768 = !DILocation(line: 86, column: 15, scope: !5767)
!5769 = !DILocation(line: 88, column: 18, scope: !5770)
!5770 = distinct !DILexicalBlock(scope: !5767, file: !5706, line: 88, column: 16)
!5771 = !DILocation(line: 88, column: 16, scope: !5767)
!5772 = !DILocation(line: 89, column: 13, scope: !5770)
!5773 = !DILocation(line: 92, column: 18, scope: !5774)
!5774 = distinct !DILexicalBlock(scope: !5767, file: !5706, line: 92, column: 11)
!5775 = !DILocation(line: 92, column: 16, scope: !5774)
!5776 = !DILocation(line: 92, column: 23, scope: !5777)
!5777 = distinct !DILexicalBlock(scope: !5774, file: !5706, line: 92, column: 11)
!5778 = !DILocation(line: 92, column: 27, scope: !5777)
!5779 = !DILocation(line: 92, column: 25, scope: !5777)
!5780 = !DILocation(line: 92, column: 11, scope: !5774)
!5781 = !DILocation(line: 93, column: 17, scope: !5782)
!5782 = distinct !DILexicalBlock(scope: !5777, file: !5706, line: 93, column: 17)
!5783 = !DILocation(line: 93, column: 27, scope: !5782)
!5784 = !DILocation(line: 93, column: 30, scope: !5782)
!5785 = !DILocation(line: 93, column: 40, scope: !5782)
!5786 = !DILocation(line: 93, column: 46, scope: !5782)
!5787 = !DILocation(line: 93, column: 51, scope: !5782)
!5788 = !DILocation(line: 93, column: 43, scope: !5782)
!5789 = !DILocation(line: 93, column: 17, scope: !5777)
!5790 = !DILocation(line: 94, column: 15, scope: !5782)
!5791 = !DILocation(line: 92, column: 34, scope: !5777)
!5792 = !DILocation(line: 92, column: 11, scope: !5777)
!5793 = distinct !{!5793, !5780, !5794}
!5794 = !DILocation(line: 94, column: 15, scope: !5774)
!5795 = !DILocation(line: 97, column: 15, scope: !5796)
!5796 = distinct !DILexicalBlock(scope: !5767, file: !5706, line: 97, column: 15)
!5797 = !DILocation(line: 97, column: 20, scope: !5796)
!5798 = !DILocation(line: 97, column: 17, scope: !5796)
!5799 = !DILocation(line: 97, column: 15, scope: !5767)
!5800 = !DILocation(line: 99, column: 19, scope: !5801)
!5801 = distinct !DILexicalBlock(scope: !5802, file: !5706, line: 99, column: 19)
!5802 = distinct !DILexicalBlock(scope: !5796, file: !5706, line: 98, column: 13)
!5803 = !DILocation(line: 99, column: 28, scope: !5801)
!5804 = !DILocation(line: 99, column: 19, scope: !5802)
!5805 = !DILocation(line: 101, column: 23, scope: !5806)
!5806 = distinct !DILexicalBlock(scope: !5807, file: !5706, line: 101, column: 23)
!5807 = distinct !DILexicalBlock(scope: !5801, file: !5706, line: 100, column: 17)
!5808 = !DILocation(line: 101, column: 32, scope: !5806)
!5809 = !DILocation(line: 101, column: 29, scope: !5806)
!5810 = !DILocation(line: 101, column: 23, scope: !5807)
!5811 = !DILocation(line: 102, column: 21, scope: !5806)
!5812 = !DILocation(line: 103, column: 38, scope: !5807)
!5813 = !DILocation(line: 103, column: 43, scope: !5807)
!5814 = !DILocation(line: 103, column: 19, scope: !5807)
!5815 = !DILocation(line: 103, column: 29, scope: !5807)
!5816 = !DILocation(line: 103, column: 36, scope: !5807)
!5817 = !DILocation(line: 104, column: 17, scope: !5807)
!5818 = !DILocation(line: 105, column: 19, scope: !5819)
!5819 = distinct !DILexicalBlock(scope: !5802, file: !5706, line: 105, column: 19)
!5820 = !DILocation(line: 105, column: 25, scope: !5819)
!5821 = !DILocation(line: 105, column: 19, scope: !5802)
!5822 = !DILocation(line: 107, column: 19, scope: !5823)
!5823 = distinct !DILexicalBlock(scope: !5819, file: !5706, line: 106, column: 17)
!5824 = !DILocation(line: 107, column: 25, scope: !5823)
!5825 = !DILocation(line: 108, column: 19, scope: !5823)
!5826 = !DILocation(line: 110, column: 20, scope: !5802)
!5827 = !DILocation(line: 111, column: 13, scope: !5802)
!5828 = !DILocation(line: 112, column: 9, scope: !5767)
!5829 = !DILocation(line: 84, column: 35, scope: !5763)
!5830 = !DILocation(line: 84, column: 7, scope: !5763)
!5831 = distinct !{!5831, !5765, !5832}
!5832 = !DILocation(line: 112, column: 9, scope: !5758)
!5833 = distinct !{!5833, !5735, !5834}
!5834 = !DILocation(line: 113, column: 5, scope: !5705)
!5835 = !DILocation(line: 115, column: 7, scope: !5836)
!5836 = distinct !DILexicalBlock(scope: !5705, file: !5706, line: 115, column: 7)
!5837 = !DILocation(line: 115, column: 13, scope: !5836)
!5838 = !DILocation(line: 115, column: 7, scope: !5705)
!5839 = !DILocation(line: 116, column: 11, scope: !5836)
!5840 = !DILocation(line: 116, column: 5, scope: !5836)
!5841 = !DILocation(line: 115, column: 16, scope: !5836)
!5842 = !DILabel(scope: !5705, name: "done", file: !5706, line: 118)
!5843 = !DILocation(line: 118, column: 2, scope: !5705)
!5844 = !DILocalVariable(name: "saved_errno", scope: !5845, file: !5706, line: 120, type: !72)
!5845 = distinct !DILexicalBlock(scope: !5705, file: !5706, line: 119, column: 3)
!5846 = !DILocation(line: 120, column: 9, scope: !5845)
!5847 = !DILocation(line: 120, column: 23, scope: !5845)
!5848 = !DILocation(line: 121, column: 5, scope: !5845)
!5849 = !DILocation(line: 122, column: 13, scope: !5845)
!5850 = !DILocation(line: 122, column: 5, scope: !5845)
!5851 = !DILocation(line: 122, column: 11, scope: !5845)
!5852 = !DILocation(line: 125, column: 10, scope: !5705)
!5853 = !DILocation(line: 125, column: 3, scope: !5705)
!5854 = !DILocalVariable(name: "maxcount", arg: 1, scope: !5855, file: !5706, line: 61, type: !72)
!5855 = distinct !DISubprogram(name: "getugroups", scope: !5706, file: !5706, line: 61, type: !5707, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5856, retainedNodes: !4)
!5856 = distinct !DICompileUnit(language: DW_LANG_C99, file: !261, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !262, nameTableKind: None)
!5857 = !DILocalVariable(name: "grouplist", arg: 2, scope: !5855, file: !5706, line: 61, type: !183)
!5858 = !DILocalVariable(name: "username", arg: 3, scope: !5855, file: !5706, line: 61, type: !69)
!5859 = !DILocalVariable(name: "gid", arg: 4, scope: !5855, file: !5706, line: 62, type: !21)
!5860 = !DILocalVariable(name: "count", scope: !5855, file: !5706, line: 64, type: !72)
