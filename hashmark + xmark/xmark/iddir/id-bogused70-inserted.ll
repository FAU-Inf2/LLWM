; ModuleID = '<stdin>'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.infomap = type { i8*, i8* }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.slotvec = type { i64, i8* }
%struct.passwd = type { i8*, i8*, i32, i32, i8*, i8*, i8* }
%struct.group = type { i8*, i8*, i32, i8** }
%struct.__mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.1 = private unnamed_addr constant [33 x i8] c"Usage: %s [OPTION]... [USER]...\0A\00", align 1
@.str.2 = private unnamed_addr constant [105 x i8] c"Print user and group information for each specified USER,\0Aor (when USER omitted) for the current user.\0A\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [521 x i8] c"  -a             ignore, for compatibility with other versions\0A  -Z, --context  print only the security context of the process\0A  -g, --group    print only the effective group ID\0A  -G, --groups   print all group IDs\0A  -n, --name     print a name instead of a number, for -ugG\0A  -r, --real     print the real ID instead of the effective ID, with -ugG\0A  -u, --user     print only the effective user ID\0A  -z, --zero     delimit entries with NUL characters, not whitespace;\0A                   not permitted in default format\0A\00", align 1
@.str.4 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.5 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.6 = private unnamed_addr constant [71 x i8] c"\0AWithout any OPTION, print some useful set of identified information.\0A\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"id\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.29, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.31, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.31, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.31, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.31, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.35 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.13 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.36 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.37 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.38 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.39 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.40 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.41 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.8 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.28 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.29 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.30 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.31 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.32 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.33 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.34 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.10 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"agnruzGZ\00", align 1
@longopts = internal constant [10 x %struct.option] [%struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.42, i32 0, i32 0), i32 0, i32* null, i32 90 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.43, i32 0, i32 0), i32 0, i32* null, i32 103 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.44, i32 0, i32 0), i32 0, i32* null, i32 71 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.45, i32 0, i32 0), i32 0, i32* null, i32 110 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.46, i32 0, i32 0), i32 0, i32* null, i32 114 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.47, i32 0, i32 0), i32 0, i32* null, i32 117 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.48, i32 0, i32 0), i32 0, i32* null, i32 122 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.49, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.50, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16, !dbg !0
@.str.12 = private unnamed_addr constant [55 x i8] c"--context (-Z) works only on an SELinux-enabled kernel\00", align 1
@just_context = internal global i8 0, align 1, !dbg !25
@just_group = internal global i8 0, align 1, !dbg !28
@use_name = internal global i8 0, align 1, !dbg !30
@use_real = internal global i8 0, align 1, !dbg !32
@just_user = internal global i8 0, align 1, !dbg !34
@opt_zero = internal global i8 0, align 1, !dbg !36
@just_group_list = internal global i8 0, align 1, !dbg !38
@.str.14 = private unnamed_addr constant [15 x i8] c"Arnold Robbins\00", align 1
@.str.15 = private unnamed_addr constant [16 x i8] c"David MacKenzie\00", align 1
@optind = external dso_local global i32, align 4
@.str.16 = private unnamed_addr constant [50 x i8] c"cannot print security context when user specified\00", align 1
@.str.17 = private unnamed_addr constant [44 x i8] c"cannot print \22only\22 of more than one choice\00", align 1
@.str.18 = private unnamed_addr constant [54 x i8] c"cannot print only names or real IDs in default format\00", align 1
@.str.19 = private unnamed_addr constant [46 x i8] c"option --zero not permitted in default format\00", align 1
@.str.20 = private unnamed_addr constant [16 x i8] c"POSIXLY_CORRECT\00", align 1
@context = internal global i8* null, align 8, !dbg !40
@.str.21 = private unnamed_addr constant [26 x i8] c"can't get process context\00", align 1
@multiple_users = internal global i8 0, align 1, !dbg !42
@euid = internal global i32 0, align 4, !dbg !17
@.str.22 = private unnamed_addr constant [17 x i8] c"%s: no such user\00", align 1
@ok = internal global i8 1, align 1, !dbg !44
@ruid = internal global i32 0, align 4, !dbg !10
@egid = internal global i32 0, align 4, !dbg !23
@rgid = internal global i32 0, align 4, !dbg !19
@.str.23 = private unnamed_addr constant [25 x i8] c"cannot get effective UID\00", align 1
@.str.24 = private unnamed_addr constant [20 x i8] c"cannot get real UID\00", align 1
@.str.25 = private unnamed_addr constant [25 x i8] c"cannot get effective GID\00", align 1
@.str.26 = private unnamed_addr constant [20 x i8] c"cannot get real GID\00", align 1
@.str.52 = private unnamed_addr constant [7 x i8] c"uid=%s\00", align 1
@.str.53 = private unnamed_addr constant [5 x i8] c"(%s)\00", align 1
@.str.54 = private unnamed_addr constant [8 x i8] c" gid=%s\00", align 1
@.str.55 = private unnamed_addr constant [9 x i8] c" euid=%s\00", align 1
@.str.56 = private unnamed_addr constant [9 x i8] c" egid=%s\00", align 1
@.str.57 = private unnamed_addr constant [33 x i8] c"failed to get groups for user %s\00", align 1
@.str.58 = private unnamed_addr constant [45 x i8] c"failed to get groups for the current process\00", align 1
@.str.59 = private unnamed_addr constant [9 x i8] c" groups=\00", align 1
@.str.60 = private unnamed_addr constant [12 x i8] c" context=%s\00", align 1
@gidtostr_ptr.buf = internal global [21 x i8] zeroinitializer, align 16, !dbg !56
@uidtostr_ptr.buf = internal global [21 x i8] zeroinitializer, align 16, !dbg !46
@.str.51 = private unnamed_addr constant [32 x i8] c"cannot find name for user ID %s\00", align 1
@.str.42 = private unnamed_addr constant [8 x i8] c"context\00", align 1
@.str.43 = private unnamed_addr constant [6 x i8] c"group\00", align 1
@.str.44 = private unnamed_addr constant [7 x i8] c"groups\00", align 1
@.str.45 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.46 = private unnamed_addr constant [5 x i8] c"real\00", align 1
@.str.47 = private unnamed_addr constant [5 x i8] c"user\00", align 1
@.str.48 = private unnamed_addr constant [5 x i8] c"zero\00", align 1
@.str.49 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.50 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.61 = private unnamed_addr constant [33 x i8] c"failed to get groups for user %s\00", align 1
@.str.1.62 = private unnamed_addr constant [45 x i8] c"failed to get groups for the current process\00", align 1
@.str.2.63 = private unnamed_addr constant [34 x i8] c"cannot find name for group ID %lu\00", align 1
@gidtostr_ptr.buf.65 = internal global [21 x i8] zeroinitializer, align 16, !dbg !78
@Version = internal global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.68, i32 0, i32 0), align 8, !dbg !86
@.str.68 = private unnamed_addr constant [5 x i8] c"8.32\00", align 1
@ignore_EPIPE = internal global i8 0, align 1, !dbg !91
@.str.71 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@file_name = internal global i8* null, align 8, !dbg !96
@.str.1.72 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.73 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@exit_failure = internal global i32 1, align 4, !dbg !99
@.str.80 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.81 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.82 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external dso_local global i8*, align 8
@program_name = internal global i8* null, align 8, !dbg !106
@program_invocation_name = external dso_local global i8*, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8, !dbg !113
@slotvec = internal global %struct.slotvec* @slotvec0, align 8, !dbg !165
@nslots = internal global i32 1, align 4, !dbg !172
@slotvec0 = internal global %struct.slotvec { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8, !dbg !174
@slot0 = internal global [256 x i8] zeroinitializer, align 16, !dbg !160
@.str.10.85 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.86 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.87 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.88 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.89 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.90 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.91 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.92 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.93 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@quote_quoting_options = internal global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, i8* null, i8* null }, align 8, !dbg !148
@parse_with_separator.E_bad_spec = internal global i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2.105, i32 0, i32 0), align 8, !dbg !176
@.str.3.102 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@parse_with_separator.E_invalid_user = internal global i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.104, i32 0, i32 0), align 8, !dbg !189
@parse_with_separator.E_invalid_group = internal global i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.103, i32 0, i32 0), align 8, !dbg !191
@.str.1.103 = private unnamed_addr constant [14 x i8] c"invalid group\00", align 1
@.str.104 = private unnamed_addr constant [13 x i8] c"invalid user\00", align 1
@.str.2.105 = private unnamed_addr constant [13 x i8] c"invalid spec\00", align 1
@.str.106 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.107 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.108 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.109 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4.110 = private unnamed_addr constant [171 x i8] c"License GPLv3+: GNU GPL version 3 or later <%s>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.5.111 = private unnamed_addr constant [34 x i8] c"https://gnu.org/licenses/gpl.html\00", align 1
@.str.6.112 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.7.113 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.8.114 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.9.115 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.10.116 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.11.117 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.12.118 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.13.119 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.14.120 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.15.121 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@version_etc_copyright = internal constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16, !dbg !193
@.str.1.136 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.137 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.142 = private unnamed_addr constant [38 x i8] c"0 <= strtol_base && strtol_base <= 36\00", align 1
@.str.1.143 = private unnamed_addr constant [16 x i8] c"./lib/xstrtol.c\00", align 1
@__PRETTY_FUNCTION__.xstrtoul = private unnamed_addr constant [81 x i8] c"strtol_error xstrtoul(const char *, char **, int, unsigned long *, const char *)\00", align 1
@.str.152 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.153 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.156 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.157 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@inVal0 = global i32 0
@inVal1 = global i8** null
@.compVal0 = private global [2 x i8] c"+\00"
@.compVal1 = private global [4 x i8] c"\01  \00"
@.compVal2 = private global [1 x i8] zeroinitializer
@x = common global i32 0
@y = common global i32 0
@x.1 = common global i32 0
@y.2 = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0
@x.67 = common global i32 0
@y.68 = common global i32 0
@x.69 = common global i32 0
@y.70 = common global i32 0
@x.71 = common global i32 0
@y.72 = common global i32 0
@x.73 = common global i32 0
@y.74 = common global i32 0
@x.75 = common global i32 0
@y.76 = common global i32 0
@x.77 = common global i32 0
@y.78 = common global i32 0
@x.79 = common global i32 0
@y.80 = common global i32 0
@x.81 = common global i32 0
@y.82 = common global i32 0
@x.83 = common global i32 0
@y.84 = common global i32 0
@x.85 = common global i32 0
@y.86 = common global i32 0
@x.87 = common global i32 0
@y.88 = common global i32 0
@x.89 = common global i32 0
@y.90 = common global i32 0
@x.91 = common global i32 0
@y.92 = common global i32 0
@x.93 = common global i32 0
@y.94 = common global i32 0
@x.95 = common global i32 0
@y.96 = common global i32 0
@x.97 = common global i32 0
@y.98 = common global i32 0
@x.99 = common global i32 0
@y.100 = common global i32 0
@x.101 = common global i32 0
@y.102 = common global i32 0
@x.103 = common global i32 0
@y.104 = common global i32 0
@x.105 = common global i32 0
@y.106 = common global i32 0
@x.107 = common global i32 0
@y.108 = common global i32 0
@x.109 = common global i32 0
@y.110 = common global i32 0
@x.111 = common global i32 0
@y.112 = common global i32 0
@x.113 = common global i32 0
@y.114 = common global i32 0
@x.115 = common global i32 0
@y.116 = common global i32 0

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @usage(i32) #0 !dbg !269 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !272, metadata !DIExpression()), !dbg !273
  %3 = load i32, i32* %2, align 4, !dbg !274
  %4 = icmp ne i32 %3, 0, !dbg !276
  br i1 %4, label %5, label %44, !dbg !277

5:                                                ; preds = %1
  %6 = load i32, i32* @x
  %7 = load i32, i32* @y
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = load i32, i32* @x
  %15 = load i32, i32* @y
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %22, !dbg !278

22:                                               ; preds = %originalBBpart2
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !279
  %24 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !279
  %25 = load i8*, i8** @program_name, align 8, !dbg !279
  %26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* %24, i8* %25), !dbg !279
  br label %27, !dbg !279

27:                                               ; preds = %22
  %28 = load i32, i32* @x
  %29 = load i32, i32* @y
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load i32, i32* @x
  %37 = load i32, i32* @y
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %63, !dbg !279

44:                                               ; preds = %1
  %45 = call i8* @gettext(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !281
  %46 = load i8*, i8** @program_name, align 8, !dbg !283
  %47 = call i32 (i8*, ...) @printf(i8* %45, i8* %46), !dbg !284
  %48 = call i8* @gettext(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !285
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !285
  %50 = call i32 @fputs_unlocked(i8* %48, %struct._IO_FILE* %49), !dbg !285
  %51 = call i8* @gettext(i8* getelementptr inbounds ([521 x i8], [521 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !286
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !286
  %53 = call i32 @fputs_unlocked(i8* %51, %struct._IO_FILE* %52), !dbg !286
  %54 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !287
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !287
  %56 = call i32 @fputs_unlocked(i8* %54, %struct._IO_FILE* %55), !dbg !287
  %57 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !288
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !288
  %59 = call i32 @fputs_unlocked(i8* %57, %struct._IO_FILE* %58), !dbg !288
  %60 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !289
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !289
  %62 = call i32 @fputs_unlocked(i8* %60, %struct._IO_FILE* %61), !dbg !289
  call void @emit_ancillary_info(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0)), !dbg !290
  br label %63

63:                                               ; preds = %44, %originalBBpart24
  %64 = load i32, i32* @x
  %65 = load i32, i32* @y
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %63, %originalBB6alteredBB
  %72 = load i32, i32* %2, align 4, !dbg !291
  call void @exit(i32 %72) #12, !dbg !292
  %73 = load i32, i32* @x
  %74 = load i32, i32* @y
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !292

originalBBalteredBB:                              ; preds = %originalBB, %5
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %63
  %81 = load i32, i32* %2, align 4, !dbg !291
  call void @exit(i32 %81) #12, !dbg !292
  br label %originalBB6
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local i8* @gettext(i8*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(i8*) #4 !dbg !293 {
  %2 = load i32, i32* @x.1
  %3 = load i32, i32* @y.2
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca [7 x %struct.infomap], align 16
  %12 = alloca i8*, align 8
  %13 = alloca %struct.infomap*, align 8
  %14 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !297, metadata !DIExpression()), !dbg !298
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %11, metadata !299, metadata !DIExpression()), !dbg !308
  %15 = bitcast [7 x %struct.infomap]* %11 to i8*, !dbg !308
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !308
  call void @llvm.dbg.declare(metadata i8** %12, metadata !309, metadata !DIExpression()), !dbg !310
  %16 = load i8*, i8** %10, align 8, !dbg !311
  store i8* %16, i8** %12, align 8, !dbg !310
  call void @llvm.dbg.declare(metadata %struct.infomap** %13, metadata !312, metadata !DIExpression()), !dbg !314
  %17 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %11, i64 0, i64 0, !dbg !315
  store %struct.infomap* %17, %struct.infomap** %13, align 8, !dbg !314
  %18 = load i32, i32* @x.1
  %19 = load i32, i32* @y.2
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %26, !dbg !316

26:                                               ; preds = %73, %originalBBpart2
  %27 = load i32, i32* @x.1
  %28 = load i32, i32* @y.2
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !317
  %36 = getelementptr inbounds %struct.infomap, %struct.infomap* %35, i32 0, i32 0, !dbg !318
  %37 = load i8*, i8** %36, align 8, !dbg !318
  %38 = icmp ne i8* %37, null, !dbg !317
  %39 = load i32, i32* @x.1
  %40 = load i32, i32* @y.2
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %71, !dbg !319

47:                                               ; preds = %originalBBpart24
  %48 = load i32, i32* @x.1
  %49 = load i32, i32* @y.2
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = load i8*, i8** %10, align 8, !dbg !320
  %57 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !320
  %58 = getelementptr inbounds %struct.infomap, %struct.infomap* %57, i32 0, i32 0, !dbg !320
  %59 = load i8*, i8** %58, align 8, !dbg !320
  %60 = call i32 @strcmp(i8* %56, i8* %59) #13, !dbg !320
  %61 = icmp eq i32 %60, 0, !dbg !320
  %62 = xor i1 %61, true, !dbg !321
  %63 = load i32, i32* @x.1
  %64 = load i32, i32* @y.2
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart29, label %originalBB6alteredBB

originalBBpart29:                                 ; preds = %originalBB6
  br label %71

71:                                               ; preds = %originalBBpart29, %originalBBpart24
  %72 = phi i1 [ false, %originalBBpart24 ], [ %62, %originalBBpart29 ], !dbg !322
  br i1 %72, label %73, label %76, !dbg !316

73:                                               ; preds = %71
  %74 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !323
  %75 = getelementptr inbounds %struct.infomap, %struct.infomap* %74, i32 1, !dbg !323
  store %struct.infomap* %75, %struct.infomap** %13, align 8, !dbg !323
  br label %26, !dbg !316, !llvm.loop !324

76:                                               ; preds = %71
  %77 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !325
  %78 = getelementptr inbounds %struct.infomap, %struct.infomap* %77, i32 0, i32 1, !dbg !327
  %79 = load i8*, i8** %78, align 8, !dbg !327
  %80 = icmp ne i8* %79, null, !dbg !325
  br i1 %80, label %81, label %101, !dbg !328

81:                                               ; preds = %76
  %82 = load i32, i32* @x.1
  %83 = load i32, i32* @y.2
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %81, %originalBB11alteredBB
  %90 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !329
  %91 = getelementptr inbounds %struct.infomap, %struct.infomap* %90, i32 0, i32 1, !dbg !330
  %92 = load i8*, i8** %91, align 8, !dbg !330
  store i8* %92, i8** %12, align 8, !dbg !331
  %93 = load i32, i32* @x.1
  %94 = load i32, i32* @y.2
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  br label %101, !dbg !332

101:                                              ; preds = %originalBBpart213, %76
  %102 = load i32, i32* @x.1
  %103 = load i32, i32* @y.2
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %101, %originalBB15alteredBB
  %110 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35, i64 0, i64 0)) #10, !dbg !333
  %111 = call i32 (i8*, ...) @printf(i8* %110, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.36, i64 0, i64 0)), !dbg !334
  call void @llvm.dbg.declare(metadata i8** %14, metadata !335, metadata !DIExpression()), !dbg !336
  %112 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !337
  store i8* %112, i8** %14, align 8, !dbg !336
  %113 = load i8*, i8** %14, align 8, !dbg !338
  %114 = icmp ne i8* %113, null, !dbg !338
  %115 = load i32, i32* @x.1
  %116 = load i32, i32* @y.2
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  br i1 %114, label %123, label %147, !dbg !340

123:                                              ; preds = %originalBBpart217
  %124 = load i32, i32* @x.1
  %125 = load i32, i32* @y.2
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %123, %originalBB19alteredBB
  %132 = load i8*, i8** %14, align 8, !dbg !341
  %133 = call i32 @strncmp(i8* %132, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.37, i64 0, i64 0), i64 3) #13, !dbg !341
  %134 = icmp ne i32 %133, 0, !dbg !341
  %135 = load i32, i32* @x.1
  %136 = load i32, i32* @y.2
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br i1 %134, label %143, label %147, !dbg !342

143:                                              ; preds = %originalBBpart221
  %144 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.38, i64 0, i64 0)) #10, !dbg !343
  %145 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !343
  %146 = call i32 @fputs_unlocked(i8* %144, %struct._IO_FILE* %145), !dbg !343
  br label %147, !dbg !345

147:                                              ; preds = %143, %originalBBpart221, %originalBBpart217
  %148 = load i32, i32* @x.1
  %149 = load i32, i32* @y.2
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %147, %originalBB23alteredBB
  %156 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.39, i64 0, i64 0)) #10, !dbg !346
  %157 = load i8*, i8** %10, align 8, !dbg !347
  %158 = call i32 (i8*, ...) @printf(i8* %156, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.36, i64 0, i64 0), i8* %157), !dbg !348
  %159 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.40, i64 0, i64 0)) #10, !dbg !349
  %160 = load i8*, i8** %12, align 8, !dbg !350
  %161 = load i8*, i8** %12, align 8, !dbg !351
  %162 = load i8*, i8** %10, align 8, !dbg !352
  %163 = icmp eq i8* %161, %162, !dbg !353
  %164 = zext i1 %163 to i64, !dbg !351
  %165 = select i1 %163, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.41, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0), !dbg !351
  %166 = call i32 (i8*, ...) @printf(i8* %159, i8* %160, i8* %165), !dbg !354
  %167 = load i32, i32* @x.1
  %168 = load i32, i32* @y.2
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  ret void, !dbg !355

originalBBalteredBB:                              ; preds = %originalBB, %1
  %175 = alloca i8*, align 8
  %176 = alloca [7 x %struct.infomap], align 16
  %177 = alloca i8*, align 8
  %178 = alloca %struct.infomap*, align 8
  %179 = alloca i8*, align 8
  store i8* %0, i8** %175, align 8
  call void @llvm.dbg.declare(metadata i8** %175, metadata !356, metadata !DIExpression()), !dbg !298
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %176, metadata !404, metadata !DIExpression()), !dbg !308
  %180 = bitcast [7 x %struct.infomap]* %176 to i8*, !dbg !308
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %180, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !308
  call void @llvm.dbg.declare(metadata i8** %177, metadata !411, metadata !DIExpression()), !dbg !310
  %181 = load i8*, i8** %175, align 8, !dbg !311
  store i8* %181, i8** %177, align 8, !dbg !310
  call void @llvm.dbg.declare(metadata %struct.infomap** %178, metadata !412, metadata !DIExpression()), !dbg !314
  %182 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %176, i64 0, i64 0, !dbg !315
  store %struct.infomap* %182, %struct.infomap** %178, align 8, !dbg !314
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %183 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !317
  %184 = getelementptr inbounds %struct.infomap, %struct.infomap* %183, i32 0, i32 0, !dbg !318
  %185 = load i8*, i8** %184, align 8, !dbg !318
  %186 = icmp ne i8* %185, null, !dbg !317
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %187 = load i8*, i8** %10, align 8, !dbg !320
  %188 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !320
  %189 = getelementptr inbounds %struct.infomap, %struct.infomap* %188, i32 0, i32 0, !dbg !320
  %190 = load i8*, i8** %189, align 8, !dbg !320
  %191 = call i32 @strcmp(i8* %187, i8* %190) #13, !dbg !320
  %192 = icmp eq i32 %191, 0, !dbg !320
  %_ = sub i1 false, %192
  %gen = add i1 %_, true
  %_7 = shl i1 %192, true
  %193 = xor i1 %192, true, !dbg !321
  br label %originalBB6

originalBB11alteredBB:                            ; preds = %originalBB11, %81
  %194 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !329
  %195 = getelementptr inbounds %struct.infomap, %struct.infomap* %194, i32 0, i32 1, !dbg !330
  %196 = load i8*, i8** %195, align 8, !dbg !330
  store i8* %196, i8** %12, align 8, !dbg !331
  br label %originalBB11

originalBB15alteredBB:                            ; preds = %originalBB15, %101
  %197 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35, i64 0, i64 0)) #10, !dbg !333
  %198 = call i32 (i8*, ...) @printf(i8* %197, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.36, i64 0, i64 0)), !dbg !334
  call void @llvm.dbg.declare(metadata !4, metadata !414, metadata !DIExpression()), !dbg !336
  %199 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !337
  store i8* %199, i8** %14, align 8, !dbg !336
  %200 = load i8*, i8** %14, align 8, !dbg !338
  %201 = icmp ne i8* %200, null, !dbg !338
  br label %originalBB15

originalBB19alteredBB:                            ; preds = %originalBB19, %123
  %202 = load i8*, i8** %14, align 8, !dbg !341
  %203 = call i32 @strncmp(i8* %202, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.37, i64 0, i64 0), i64 3) #13, !dbg !341
  %204 = icmp ne i32 %203, 0, !dbg !341
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %147
  %205 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.39, i64 0, i64 0)) #10, !dbg !346
  %206 = load i8*, i8** %10, align 8, !dbg !347
  %207 = call i32 (i8*, ...) @printf(i8* %205, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.36, i64 0, i64 0), i8* %206), !dbg !348
  %208 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.40, i64 0, i64 0)) #10, !dbg !349
  %209 = load i8*, i8** %12, align 8, !dbg !350
  %210 = load i8*, i8** %12, align 8, !dbg !351
  %211 = load i8*, i8** %10, align 8, !dbg !352
  %212 = icmp eq i8* %210, %211, !dbg !353
  %213 = zext i1 %212 to i64, !dbg !351
  %214 = select i1 %212, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.41, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0), !dbg !351
  %215 = call i32 (i8*, ...) @printf(i8* %208, i8* %209, i8* %214), !dbg !354
  br label %originalBB23
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #7

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) #4 !dbg !462 {
  %3 = load i32, i32* @x.3
  %4 = load i32, i32* @y.4
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8**, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i8, align 1
  %17 = alloca i8*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i8, align 1
  %20 = alloca %struct.passwd*, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  store i32 0, i32* %11, align 4
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !465, metadata !DIExpression()), !dbg !466
  store i8** %1, i8*** %13, align 8
  call void @llvm.dbg.declare(metadata i8*** %13, metadata !467, metadata !DIExpression()), !dbg !468
  call void @llvm.dbg.declare(metadata i32* %14, metadata !469, metadata !DIExpression()), !dbg !470
  call void @llvm.dbg.declare(metadata i32* %15, metadata !471, metadata !DIExpression()), !dbg !472
  store i32 0, i32* %15, align 4, !dbg !472
  call void @llvm.dbg.declare(metadata i8* %16, metadata !473, metadata !DIExpression()), !dbg !474
  %24 = call zeroext i1 @is_smack_enabled(), !dbg !475
  %25 = zext i1 %24 to i8, !dbg !474
  store i8 %25, i8* %16, align 1, !dbg !474
  call void @llvm.dbg.declare(metadata i8** %17, metadata !476, metadata !DIExpression()), !dbg !477
  store i8* null, i8** %17, align 8, !dbg !477
  %26 = load i8**, i8*** %13, align 8, !dbg !478
  %27 = getelementptr inbounds i8*, i8** %26, i64 0, !dbg !478
  %28 = load i8*, i8** %27, align 8, !dbg !478
  call void @set_program_name(i8* %28), !dbg !479
  %29 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0)) #10, !dbg !480
  %30 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !481
  %31 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !482
  %32 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !483
  %33 = load i32, i32* @x.3
  %34 = load i32, i32* @y.4
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %41, !dbg !484

41:                                               ; preds = %originalBBpart248, %originalBBpart2
  %42 = load i32, i32* %12, align 4, !dbg !485
  %43 = load i8**, i8*** %13, align 8, !dbg !486
  %44 = call i32 @getopt_long(i32 %42, i8** %43, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i64 0, i64 0), %struct.option* getelementptr inbounds ([10 x %struct.option], [10 x %struct.option]* @longopts, i64 0, i64 0), i32* null) #10, !dbg !487
  store i32 %44, i32* %14, align 4, !dbg !488
  %45 = icmp ne i32 %44, -1, !dbg !489
  br i1 %45, label %46, label %259, !dbg !484

46:                                               ; preds = %41
  %47 = load i32, i32* @x.3
  %48 = load i32, i32* @y.4
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %46, %originalBB1alteredBB
  %55 = load i32, i32* %14, align 4, !dbg !490
  %56 = load i32, i32* @x.3
  %57 = load i32, i32* @y.4
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  switch i32 %55, label %225 [
    i32 97, label %64
    i32 90, label %81
    i32 103, label %135
    i32 110, label %136
    i32 114, label %153
    i32 117, label %170
    i32 122, label %187
    i32 71, label %204
    i32 -130, label %205
    i32 -131, label %222
  ], !dbg !492

64:                                               ; preds = %originalBBpart24
  %65 = load i32, i32* @x.3
  %66 = load i32, i32* @y.4
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %64, %originalBB6alteredBB
  %73 = load i32, i32* @x.3
  %74 = load i32, i32* @y.4
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %242, !dbg !493

81:                                               ; preds = %originalBBpart24
  %82 = load i32, i32* @x.3
  %83 = load i32, i32* @y.4
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %81, %originalBB10alteredBB
  %90 = load i32, i32* %15, align 4, !dbg !495
  %91 = icmp ne i32 %90, 0, !dbg !495
  %92 = load i32, i32* @x.3
  %93 = load i32, i32* @y.4
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %91, label %118, label %100, !dbg !497

100:                                              ; preds = %originalBBpart212
  %101 = load i32, i32* @x.3
  %102 = load i32, i32* @y.4
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %100, %originalBB14alteredBB
  %109 = call i8* @gettext(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !498
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %109), !dbg !498
  %110 = load i32, i32* @x.3
  %111 = load i32, i32* @y.4
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  unreachable, !dbg !498

118:                                              ; preds = %originalBBpart212
  %119 = load i32, i32* @x.3
  %120 = load i32, i32* @y.4
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %118, %originalBB18alteredBB
  store i8 1, i8* @just_context, align 1, !dbg !499
  %127 = load i32, i32* @x.3
  %128 = load i32, i32* @y.4
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %242, !dbg !500

135:                                              ; preds = %originalBBpart24
  store i8 1, i8* @just_group, align 1, !dbg !501
  br label %242, !dbg !502

136:                                              ; preds = %originalBBpart24
  %137 = load i32, i32* @x.3
  %138 = load i32, i32* @y.4
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %136, %originalBB22alteredBB
  store i8 1, i8* @use_name, align 1, !dbg !503
  %145 = load i32, i32* @x.3
  %146 = load i32, i32* @y.4
  %147 = sub i32 %145, 1
  %148 = mul i32 %145, %147
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %150, %151
  br i1 %152, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %242, !dbg !504

153:                                              ; preds = %originalBBpart24
  %154 = load i32, i32* @x.3
  %155 = load i32, i32* @y.4
  %156 = sub i32 %154, 1
  %157 = mul i32 %154, %156
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %159, %160
  br i1 %161, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %153, %originalBB26alteredBB
  store i8 1, i8* @use_real, align 1, !dbg !505
  %162 = load i32, i32* @x.3
  %163 = load i32, i32* @y.4
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %242, !dbg !506

170:                                              ; preds = %originalBBpart24
  %171 = load i32, i32* @x.3
  %172 = load i32, i32* @y.4
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %170, %originalBB30alteredBB
  store i8 1, i8* @just_user, align 1, !dbg !507
  %179 = load i32, i32* @x.3
  %180 = load i32, i32* @y.4
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %242, !dbg !508

187:                                              ; preds = %originalBBpart24
  %188 = load i32, i32* @x.3
  %189 = load i32, i32* @y.4
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %187, %originalBB34alteredBB
  store i8 1, i8* @opt_zero, align 1, !dbg !509
  %196 = load i32, i32* @x.3
  %197 = load i32, i32* @y.4
  %198 = sub i32 %196, 1
  %199 = mul i32 %196, %198
  %200 = urem i32 %199, 2
  %201 = icmp eq i32 %200, 0
  %202 = icmp slt i32 %197, 10
  %203 = or i1 %201, %202
  br i1 %203, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %242, !dbg !510

204:                                              ; preds = %originalBBpart24
  store i8 1, i8* @just_group_list, align 1, !dbg !511
  br label %242, !dbg !512

205:                                              ; preds = %originalBBpart24
  %206 = load i32, i32* @x.3
  %207 = load i32, i32* @y.4
  %208 = sub i32 %206, 1
  %209 = mul i32 %206, %208
  %210 = urem i32 %209, 2
  %211 = icmp eq i32 %210, 0
  %212 = icmp slt i32 %207, 10
  %213 = or i1 %211, %212
  br i1 %213, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %205, %originalBB38alteredBB
  call void @usage(i32 0) #14, !dbg !513
  %214 = load i32, i32* @x.3
  %215 = load i32, i32* @y.4
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  unreachable, !dbg !513

222:                                              ; preds = %originalBBpart24
  %223 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !514
  %224 = load i8*, i8** @Version, align 8, !dbg !514
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %223, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i64 0, i64 0), i8* %224, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i64 0, i64 0), i8* null), !dbg !514
  call void @exit(i32 0) #12, !dbg !514
  unreachable, !dbg !514

225:                                              ; preds = %originalBBpart24
  %226 = load i32, i32* @x.3
  %227 = load i32, i32* @y.4
  %228 = sub i32 %226, 1
  %229 = mul i32 %226, %228
  %230 = urem i32 %229, 2
  %231 = icmp eq i32 %230, 0
  %232 = icmp slt i32 %227, 10
  %233 = or i1 %231, %232
  br i1 %233, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %225, %originalBB42alteredBB
  call void @usage(i32 1) #14, !dbg !515
  %234 = load i32, i32* @x.3
  %235 = load i32, i32* @y.4
  %236 = sub i32 %234, 1
  %237 = mul i32 %234, %236
  %238 = urem i32 %237, 2
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %239, %240
  br i1 %241, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  unreachable, !dbg !515

242:                                              ; preds = %204, %originalBBpart236, %originalBBpart232, %originalBBpart228, %originalBBpart224, %135, %originalBBpart220, %originalBBpart28
  %243 = load i32, i32* @x.3
  %244 = load i32, i32* @y.4
  %245 = sub i32 %243, 1
  %246 = mul i32 %243, %245
  %247 = urem i32 %246, 2
  %248 = icmp eq i32 %247, 0
  %249 = icmp slt i32 %244, 10
  %250 = or i1 %248, %249
  br i1 %250, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %242, %originalBB46alteredBB
  %251 = load i32, i32* @x.3
  %252 = load i32, i32* @y.4
  %253 = sub i32 %251, 1
  %254 = mul i32 %251, %253
  %255 = urem i32 %254, 2
  %256 = icmp eq i32 %255, 0
  %257 = icmp slt i32 %252, 10
  %258 = or i1 %256, %257
  br i1 %258, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %41, !dbg !484, !llvm.loop !516

259:                                              ; preds = %41
  call void @llvm.dbg.declare(metadata i64* %18, metadata !518, metadata !DIExpression()), !dbg !519
  %260 = load i32, i32* %12, align 4, !dbg !520
  %261 = load i32, i32* @optind, align 4, !dbg !521
  %262 = sub nsw i32 %260, %261, !dbg !522
  %263 = sext i32 %262 to i64, !dbg !520
  store i64 %263, i64* %18, align 8, !dbg !519
  %264 = load i64, i64* %18, align 8, !dbg !523
  %265 = icmp ne i64 %264, 0, !dbg !523
  br i1 %265, label %266, label %303, !dbg !525

266:                                              ; preds = %259
  %267 = load i32, i32* @x.3
  %268 = load i32, i32* @y.4
  %269 = sub i32 %267, 1
  %270 = mul i32 %267, %269
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %272, %273
  br i1 %274, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %266, %originalBB50alteredBB
  %275 = load i8, i8* @just_context, align 1, !dbg !526
  %276 = trunc i8 %275 to i1, !dbg !526
  %277 = load i32, i32* @x.3
  %278 = load i32, i32* @y.4
  %279 = sub i32 %277, 1
  %280 = mul i32 %277, %279
  %281 = urem i32 %280, 2
  %282 = icmp eq i32 %281, 0
  %283 = icmp slt i32 %278, 10
  %284 = or i1 %282, %283
  br i1 %284, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br i1 %276, label %285, label %303, !dbg !527

285:                                              ; preds = %originalBBpart252
  %286 = load i32, i32* @x.3
  %287 = load i32, i32* @y.4
  %288 = sub i32 %286, 1
  %289 = mul i32 %286, %288
  %290 = urem i32 %289, 2
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %291, %292
  br i1 %293, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %285, %originalBB54alteredBB
  %294 = call i8* @gettext(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !528
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %294), !dbg !528
  %295 = load i32, i32* @x.3
  %296 = load i32, i32* @y.4
  %297 = sub i32 %295, 1
  %298 = mul i32 %295, %297
  %299 = urem i32 %298, 2
  %300 = icmp eq i32 %299, 0
  %301 = icmp slt i32 %296, 10
  %302 = or i1 %300, %301
  br i1 %302, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  unreachable, !dbg !528

303:                                              ; preds = %originalBBpart252, %259
  %304 = load i32, i32* @x.3
  %305 = load i32, i32* @y.4
  %306 = sub i32 %304, 1
  %307 = mul i32 %304, %306
  %308 = urem i32 %307, 2
  %309 = icmp eq i32 %308, 0
  %310 = icmp slt i32 %305, 10
  %311 = or i1 %309, %310
  br i1 %311, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %303, %originalBB58alteredBB
  %312 = load i8, i8* @just_user, align 1, !dbg !529
  %313 = trunc i8 %312 to i1, !dbg !529
  %314 = zext i1 %313 to i32, !dbg !529
  %315 = load i8, i8* @just_group, align 1, !dbg !531
  %316 = trunc i8 %315 to i1, !dbg !531
  %317 = zext i1 %316 to i32, !dbg !531
  %318 = add nsw i32 %314, %317, !dbg !532
  %319 = load i8, i8* @just_group_list, align 1, !dbg !533
  %320 = trunc i8 %319 to i1, !dbg !533
  %321 = zext i1 %320 to i32, !dbg !533
  %322 = add nsw i32 %318, %321, !dbg !534
  %323 = load i8, i8* @just_context, align 1, !dbg !535
  %324 = trunc i8 %323 to i1, !dbg !535
  %325 = zext i1 %324 to i32, !dbg !535
  %326 = add nsw i32 %322, %325, !dbg !536
  %327 = icmp sgt i32 %326, 1, !dbg !537
  %328 = load i32, i32* @x.3
  %329 = load i32, i32* @y.4
  %330 = sub i32 %328, 1
  %331 = mul i32 %328, %330
  %332 = urem i32 %331, 2
  %333 = icmp eq i32 %332, 0
  %334 = icmp slt i32 %329, 10
  %335 = or i1 %333, %334
  br i1 %335, label %originalBBpart285, label %originalBB58alteredBB

originalBBpart285:                                ; preds = %originalBB58
  br i1 %327, label %336, label %338, !dbg !538

336:                                              ; preds = %originalBBpart285
  %337 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.17, i64 0, i64 0)) #10, !dbg !539
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %337), !dbg !539
  unreachable, !dbg !539

338:                                              ; preds = %originalBBpart285
  call void @llvm.dbg.declare(metadata i8* %19, metadata !540, metadata !DIExpression()), !dbg !541
  %339 = load i32, i32* @x.3
  %340 = load i32, i32* @y.4
  %341 = sub i32 %339, 1
  %342 = mul i32 %339, %341
  %343 = urem i32 %342, 2
  %344 = icmp eq i32 %343, 0
  %345 = icmp slt i32 %340, 10
  %346 = or i1 %344, %345
  br i1 %346, label %originalBB87, label %originalBB87alteredBB

originalBB87:                                     ; preds = %338, %originalBB87alteredBB
  %347 = load i8, i8* @just_user, align 1, !dbg !542
  %348 = trunc i8 %347 to i1, !dbg !542
  %349 = load i32, i32* @x.3
  %350 = load i32, i32* @y.4
  %351 = sub i32 %349, 1
  %352 = mul i32 %349, %351
  %353 = urem i32 %352, 2
  %354 = icmp eq i32 %353, 0
  %355 = icmp slt i32 %350, 10
  %356 = or i1 %354, %355
  br i1 %356, label %originalBBpart289, label %originalBB87alteredBB

originalBBpart289:                                ; preds = %originalBB87
  br i1 %348, label %398, label %357, !dbg !543

357:                                              ; preds = %originalBBpart289
  %358 = load i32, i32* @x.3
  %359 = load i32, i32* @y.4
  %360 = sub i32 %358, 1
  %361 = mul i32 %358, %360
  %362 = urem i32 %361, 2
  %363 = icmp eq i32 %362, 0
  %364 = icmp slt i32 %359, 10
  %365 = or i1 %363, %364
  br i1 %365, label %originalBB91, label %originalBB91alteredBB

originalBB91:                                     ; preds = %357, %originalBB91alteredBB
  %366 = load i8, i8* @just_group, align 1, !dbg !544
  %367 = trunc i8 %366 to i1, !dbg !544
  %368 = load i32, i32* @x.3
  %369 = load i32, i32* @y.4
  %370 = sub i32 %368, 1
  %371 = mul i32 %368, %370
  %372 = urem i32 %371, 2
  %373 = icmp eq i32 %372, 0
  %374 = icmp slt i32 %369, 10
  %375 = or i1 %373, %374
  br i1 %375, label %originalBBpart293, label %originalBB91alteredBB

originalBBpart293:                                ; preds = %originalBB91
  br i1 %367, label %398, label %376, !dbg !545

376:                                              ; preds = %originalBBpart293
  %377 = load i32, i32* @x.3
  %378 = load i32, i32* @y.4
  %379 = sub i32 %377, 1
  %380 = mul i32 %377, %379
  %381 = urem i32 %380, 2
  %382 = icmp eq i32 %381, 0
  %383 = icmp slt i32 %378, 10
  %384 = or i1 %382, %383
  br i1 %384, label %originalBB95, label %originalBB95alteredBB

originalBB95:                                     ; preds = %376, %originalBB95alteredBB
  %385 = load i8, i8* @just_group_list, align 1, !dbg !546
  %386 = trunc i8 %385 to i1, !dbg !546
  %387 = load i32, i32* @x.3
  %388 = load i32, i32* @y.4
  %389 = sub i32 %387, 1
  %390 = mul i32 %387, %389
  %391 = urem i32 %390, 2
  %392 = icmp eq i32 %391, 0
  %393 = icmp slt i32 %388, 10
  %394 = or i1 %392, %393
  br i1 %394, label %originalBBpart297, label %originalBB95alteredBB

originalBBpart297:                                ; preds = %originalBB95
  br i1 %386, label %398, label %395, !dbg !547

395:                                              ; preds = %originalBBpart297
  %396 = load i8, i8* @just_context, align 1, !dbg !548
  %397 = trunc i8 %396 to i1, !dbg !548
  br label %398, !dbg !547

398:                                              ; preds = %395, %originalBBpart297, %originalBBpart293, %originalBBpart289
  %399 = phi i1 [ true, %originalBBpart297 ], [ true, %originalBBpart293 ], [ true, %originalBBpart289 ], [ %397, %395 ]
  %400 = load i32, i32* @x.3
  %401 = load i32, i32* @y.4
  %402 = sub i32 %400, 1
  %403 = mul i32 %400, %402
  %404 = urem i32 %403, 2
  %405 = icmp eq i32 %404, 0
  %406 = icmp slt i32 %401, 10
  %407 = or i1 %405, %406
  br i1 %407, label %originalBB99, label %originalBB99alteredBB

originalBB99:                                     ; preds = %398, %originalBB99alteredBB
  %408 = xor i1 %399, true, !dbg !549
  %409 = zext i1 %408 to i8, !dbg !541
  store i8 %409, i8* %19, align 1, !dbg !541
  %410 = load i8, i8* %19, align 1, !dbg !550
  %411 = trunc i8 %410 to i1, !dbg !550
  %412 = load i32, i32* @x.3
  %413 = load i32, i32* @y.4
  %414 = sub i32 %412, 1
  %415 = mul i32 %412, %414
  %416 = urem i32 %415, 2
  %417 = icmp eq i32 %416, 0
  %418 = icmp slt i32 %413, 10
  %419 = or i1 %417, %418
  br i1 %419, label %originalBBpart2118, label %originalBB99alteredBB

originalBBpart2118:                               ; preds = %originalBB99
  br i1 %411, label %420, label %476, !dbg !552

420:                                              ; preds = %originalBBpart2118
  %421 = load i32, i32* @x.3
  %422 = load i32, i32* @y.4
  %423 = sub i32 %421, 1
  %424 = mul i32 %421, %423
  %425 = urem i32 %424, 2
  %426 = icmp eq i32 %425, 0
  %427 = icmp slt i32 %422, 10
  %428 = or i1 %426, %427
  br i1 %428, label %originalBB120, label %originalBB120alteredBB

originalBB120:                                    ; preds = %420, %originalBB120alteredBB
  %429 = load i8, i8* @use_real, align 1, !dbg !553
  %430 = trunc i8 %429 to i1, !dbg !553
  %431 = load i32, i32* @x.3
  %432 = load i32, i32* @y.4
  %433 = sub i32 %431, 1
  %434 = mul i32 %431, %433
  %435 = urem i32 %434, 2
  %436 = icmp eq i32 %435, 0
  %437 = icmp slt i32 %432, 10
  %438 = or i1 %436, %437
  br i1 %438, label %originalBBpart2122, label %originalBB120alteredBB

originalBBpart2122:                               ; preds = %originalBB120
  br i1 %430, label %458, label %439, !dbg !554

439:                                              ; preds = %originalBBpart2122
  %440 = load i32, i32* @x.3
  %441 = load i32, i32* @y.4
  %442 = sub i32 %440, 1
  %443 = mul i32 %440, %442
  %444 = urem i32 %443, 2
  %445 = icmp eq i32 %444, 0
  %446 = icmp slt i32 %441, 10
  %447 = or i1 %445, %446
  br i1 %447, label %originalBB124, label %originalBB124alteredBB

originalBB124:                                    ; preds = %439, %originalBB124alteredBB
  %448 = load i8, i8* @use_name, align 1, !dbg !555
  %449 = trunc i8 %448 to i1, !dbg !555
  %450 = load i32, i32* @x.3
  %451 = load i32, i32* @y.4
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBBpart2126, label %originalBB124alteredBB

originalBBpart2126:                               ; preds = %originalBB124
  br i1 %449, label %458, label %476, !dbg !556

458:                                              ; preds = %originalBBpart2126, %originalBBpart2122
  %459 = load i32, i32* @x.3
  %460 = load i32, i32* @y.4
  %461 = sub i32 %459, 1
  %462 = mul i32 %459, %461
  %463 = urem i32 %462, 2
  %464 = icmp eq i32 %463, 0
  %465 = icmp slt i32 %460, 10
  %466 = or i1 %464, %465
  br i1 %466, label %originalBB128, label %originalBB128alteredBB

originalBB128:                                    ; preds = %458, %originalBB128alteredBB
  %467 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.18, i64 0, i64 0)) #10, !dbg !557
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %467), !dbg !557
  %468 = load i32, i32* @x.3
  %469 = load i32, i32* @y.4
  %470 = sub i32 %468, 1
  %471 = mul i32 %468, %470
  %472 = urem i32 %471, 2
  %473 = icmp eq i32 %472, 0
  %474 = icmp slt i32 %469, 10
  %475 = or i1 %473, %474
  br i1 %475, label %originalBBpart2130, label %originalBB128alteredBB

originalBBpart2130:                               ; preds = %originalBB128
  unreachable, !dbg !557

476:                                              ; preds = %originalBBpart2126, %originalBBpart2118
  %477 = load i32, i32* @x.3
  %478 = load i32, i32* @y.4
  %479 = sub i32 %477, 1
  %480 = mul i32 %477, %479
  %481 = urem i32 %480, 2
  %482 = icmp eq i32 %481, 0
  %483 = icmp slt i32 %478, 10
  %484 = or i1 %482, %483
  br i1 %484, label %originalBB132, label %originalBB132alteredBB

originalBB132:                                    ; preds = %476, %originalBB132alteredBB
  %485 = load i8, i8* %19, align 1, !dbg !558
  %486 = trunc i8 %485 to i1, !dbg !558
  %487 = load i32, i32* @x.3
  %488 = load i32, i32* @y.4
  %489 = sub i32 %487, 1
  %490 = mul i32 %487, %489
  %491 = urem i32 %490, 2
  %492 = icmp eq i32 %491, 0
  %493 = icmp slt i32 %488, 10
  %494 = or i1 %492, %493
  br i1 %494, label %originalBBpart2134, label %originalBB132alteredBB

originalBBpart2134:                               ; preds = %originalBB132
  br i1 %486, label %495, label %516, !dbg !560

495:                                              ; preds = %originalBBpart2134
  %496 = load i32, i32* @x.3
  %497 = load i32, i32* @y.4
  %498 = sub i32 %496, 1
  %499 = mul i32 %496, %498
  %500 = urem i32 %499, 2
  %501 = icmp eq i32 %500, 0
  %502 = icmp slt i32 %497, 10
  %503 = or i1 %501, %502
  br i1 %503, label %originalBB136, label %originalBB136alteredBB

originalBB136:                                    ; preds = %495, %originalBB136alteredBB
  %504 = load i8, i8* @opt_zero, align 1, !dbg !561
  %505 = trunc i8 %504 to i1, !dbg !561
  %506 = load i32, i32* @x.3
  %507 = load i32, i32* @y.4
  %508 = sub i32 %506, 1
  %509 = mul i32 %506, %508
  %510 = urem i32 %509, 2
  %511 = icmp eq i32 %510, 0
  %512 = icmp slt i32 %507, 10
  %513 = or i1 %511, %512
  br i1 %513, label %originalBBpart2138, label %originalBB136alteredBB

originalBBpart2138:                               ; preds = %originalBB136
  br i1 %505, label %514, label %516, !dbg !562

514:                                              ; preds = %originalBBpart2138
  %515 = call i8* @gettext(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.19, i64 0, i64 0)) #10, !dbg !563
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %515), !dbg !563
  unreachable, !dbg !563

516:                                              ; preds = %originalBBpart2138, %originalBBpart2134
  %517 = load i64, i64* %18, align 8, !dbg !564
  br label %518, !dbg !566

518:                                              ; preds = %516
  %collatzVar = alloca i32
  br label %519

519:                                              ; preds = %518
  %520 = load i32, i32* @inVal0
  %521 = icmp sgt i32 %520, 1
  br i1 %521, label %523, label %522

522:                                              ; preds = %519
  store i32 88, i32* %collatzVar
  br label %523

523:                                              ; preds = %522, %519
  %524 = load i32, i32* @x.3
  %525 = load i32, i32* @y.4
  %526 = sub i32 %524, 1
  %527 = mul i32 %524, %526
  %528 = urem i32 %527, 2
  %529 = icmp eq i32 %528, 0
  %530 = icmp slt i32 %525, 10
  %531 = or i1 %529, %530
  br i1 %531, label %originalBB140, label %originalBB140alteredBB

originalBB140:                                    ; preds = %523, %originalBB140alteredBB
  %532 = load i8**, i8*** @inVal1
  %533 = getelementptr inbounds i8*, i8** %532, i64 1
  %534 = load i8*, i8** %533
  %535 = trunc i64 0 to i32
  %controle = call i32 @controle(i8* %534, i32 %535)
  store i32 %controle, i32* %collatzVar
  %536 = load i32, i32* @x.3
  %537 = load i32, i32* @y.4
  %538 = sub i32 %536, 1
  %539 = mul i32 %536, %538
  %540 = urem i32 %539, 2
  %541 = icmp eq i32 %540, 0
  %542 = icmp slt i32 %537, 10
  %543 = or i1 %541, %542
  br i1 %543, label %originalBBpart2142, label %originalBB140alteredBB

originalBBpart2142:                               ; preds = %originalBB140
  br label %544

544:                                              ; preds = %originalBBpart2203, %originalBBpart2193, %originalBBpart2142
  %545 = load i32, i32* @x.3
  %546 = load i32, i32* @y.4
  %547 = sub i32 %545, 1
  %548 = mul i32 %545, %547
  %549 = urem i32 %548, 2
  %550 = icmp eq i32 %549, 0
  %551 = icmp slt i32 %546, 10
  %552 = or i1 %550, %551
  br i1 %552, label %originalBB144, label %originalBB144alteredBB

originalBB144:                                    ; preds = %544, %originalBB144alteredBB
  %553 = load i32, i32* %collatzVar
  %554 = icmp sgt i32 %553, 1
  %555 = load i32, i32* @x.3
  %556 = load i32, i32* @y.4
  %557 = sub i32 %555, 1
  %558 = mul i32 %555, %557
  %559 = urem i32 %558, 2
  %560 = icmp eq i32 %559, 0
  %561 = icmp slt i32 %556, 10
  %562 = or i1 %560, %561
  br i1 %562, label %originalBBpart2146, label %originalBB144alteredBB

originalBBpart2146:                               ; preds = %originalBB144
  br i1 %554, label %563, label %808

563:                                              ; preds = %originalBBpart2146
  %564 = load i32, i32* @x.3
  %565 = load i32, i32* @y.4
  %566 = sub i32 %564, 1
  %567 = mul i32 %564, %566
  %568 = urem i32 %567, 2
  %569 = icmp eq i32 %568, 0
  %570 = icmp slt i32 %565, 10
  %571 = or i1 %569, %570
  br i1 %571, label %originalBB148, label %originalBB148alteredBB

originalBB148:                                    ; preds = %563, %originalBB148alteredBB
  %572 = load i32, i32* %collatzVar
  %573 = srem i32 %572, 2
  %574 = icmp eq i32 %573, 0
  %575 = load i32, i32* @x.3
  %576 = load i32, i32* @y.4
  %577 = sub i32 %575, 1
  %578 = mul i32 %575, %577
  %579 = urem i32 %578, 2
  %580 = icmp eq i32 %579, 0
  %581 = icmp slt i32 %576, 10
  %582 = or i1 %580, %581
  br i1 %582, label %originalBBpart2160, label %originalBB148alteredBB

originalBBpart2160:                               ; preds = %originalBB148
  br i1 %574, label %583, label %602

583:                                              ; preds = %originalBBpart2160
  %584 = load i32, i32* @x.3
  %585 = load i32, i32* @y.4
  %586 = sub i32 %584, 1
  %587 = mul i32 %584, %586
  %588 = urem i32 %587, 2
  %589 = icmp eq i32 %588, 0
  %590 = icmp slt i32 %585, 10
  %591 = or i1 %589, %590
  br i1 %591, label %originalBB162, label %originalBB162alteredBB

originalBB162:                                    ; preds = %583, %originalBB162alteredBB
  %592 = load i32, i32* %collatzVar
  %593 = sdiv i32 %592, 2
  store i32 %593, i32* %collatzVar
  %594 = load i32, i32* @x.3
  %595 = load i32, i32* @y.4
  %596 = sub i32 %594, 1
  %597 = mul i32 %594, %596
  %598 = urem i32 %597, 2
  %599 = icmp eq i32 %598, 0
  %600 = icmp slt i32 %595, 10
  %601 = or i1 %599, %600
  br i1 %601, label %originalBBpart2172, label %originalBB162alteredBB

originalBBpart2172:                               ; preds = %originalBB162
  br label %622

602:                                              ; preds = %originalBBpart2160
  %603 = load i32, i32* @x.3
  %604 = load i32, i32* @y.4
  %605 = sub i32 %603, 1
  %606 = mul i32 %603, %605
  %607 = urem i32 %606, 2
  %608 = icmp eq i32 %607, 0
  %609 = icmp slt i32 %604, 10
  %610 = or i1 %608, %609
  br i1 %610, label %originalBB174, label %originalBB174alteredBB

originalBB174:                                    ; preds = %602, %originalBB174alteredBB
  %611 = load i32, i32* %collatzVar
  %612 = mul i32 %611, 3
  %613 = add i32 %612, 1
  store i32 %613, i32* %collatzVar
  %614 = load i32, i32* @x.3
  %615 = load i32, i32* @y.4
  %616 = sub i32 %614, 1
  %617 = mul i32 %614, %616
  %618 = urem i32 %617, 2
  %619 = icmp eq i32 %618, 0
  %620 = icmp slt i32 %615, 10
  %621 = or i1 %619, %620
  br i1 %621, label %originalBBpart2180, label %originalBB174alteredBB

originalBBpart2180:                               ; preds = %originalBB174
  br label %622

622:                                              ; preds = %originalBBpart2180, %originalBBpart2172
  %623 = load i32, i32* @x.3
  %624 = load i32, i32* @y.4
  %625 = sub i32 %623, 1
  %626 = mul i32 %623, %625
  %627 = urem i32 %626, 2
  %628 = icmp eq i32 %627, 0
  %629 = icmp slt i32 %624, 10
  %630 = or i1 %628, %629
  br i1 %630, label %originalBB182, label %originalBB182alteredBB

originalBB182:                                    ; preds = %622, %originalBB182alteredBB
  %631 = load i32, i32* %collatzVar
  %632 = sext i32 %631 to i64
  %633 = sext i32 -2 to i64
  %634 = sub i64 %517, %632
  %635 = icmp sgt i64 %634, %633
  %636 = load i32, i32* @x.3
  %637 = load i32, i32* @y.4
  %638 = sub i32 %636, 1
  %639 = mul i32 %636, %638
  %640 = urem i32 %639, 2
  %641 = icmp eq i32 %640, 0
  %642 = icmp slt i32 %637, 10
  %643 = or i1 %641, %642
  br i1 %643, label %originalBBpart2193, label %originalBB182alteredBB

originalBBpart2193:                               ; preds = %originalBB182
  br i1 %635, label %644, label %544

644:                                              ; preds = %originalBBpart2193
  %645 = load i32, i32* @x.3
  %646 = load i32, i32* @y.4
  %647 = sub i32 %645, 1
  %648 = mul i32 %645, %647
  %649 = urem i32 %648, 2
  %650 = icmp eq i32 %649, 0
  %651 = icmp slt i32 %646, 10
  %652 = or i1 %650, %651
  br i1 %652, label %originalBB195, label %originalBB195alteredBB

originalBB195:                                    ; preds = %644, %originalBB195alteredBB
  %653 = load i32, i32* %collatzVar
  %654 = sext i32 %653 to i64
  %655 = sext i32 2 to i64
  %656 = add i64 %517, %654
  %657 = icmp slt i64 %656, %655
  %658 = load i32, i32* @x.3
  %659 = load i32, i32* @y.4
  %660 = sub i32 %658, 1
  %661 = mul i32 %658, %660
  %662 = urem i32 %661, 2
  %663 = icmp eq i32 %662, 0
  %664 = icmp slt i32 %659, 10
  %665 = or i1 %663, %664
  br i1 %665, label %originalBBpart2203, label %originalBB195alteredBB

originalBBpart2203:                               ; preds = %originalBB195
  br i1 %657, label %666, label %544

666:                                              ; preds = %originalBBpart2203
  %667 = load i32, i32* @x.3
  %668 = load i32, i32* @y.4
  %669 = sub i32 %667, 1
  %670 = mul i32 %667, %669
  %671 = urem i32 %670, 2
  %672 = icmp eq i32 %671, 0
  %673 = icmp slt i32 %668, 10
  %674 = or i1 %672, %673
  br i1 %674, label %originalBB205, label %originalBB205alteredBB

originalBB205:                                    ; preds = %666, %originalBB205alteredBB
  %675 = load i8, i8* @just_context, align 1, !dbg !567
  %676 = trunc i8 %675 to i1, !dbg !567
  %677 = load i32, i32* @x.3
  %678 = load i32, i32* @y.4
  %679 = sub i32 %677, 1
  %680 = mul i32 %677, %679
  %681 = urem i32 %680, 2
  %682 = icmp eq i32 %681, 0
  %683 = icmp slt i32 %678, 10
  %684 = or i1 %682, %683
  br i1 %684, label %originalBBpart2207, label %originalBB205alteredBB

originalBBpart2207:                               ; preds = %originalBB205
  br i1 %676, label %723, label %685, !dbg !568

685:                                              ; preds = %originalBBpart2207
  %686 = load i32, i32* @x.3
  %687 = load i32, i32* @y.4
  %688 = sub i32 %686, 1
  %689 = mul i32 %686, %688
  %690 = urem i32 %689, 2
  %691 = icmp eq i32 %690, 0
  %692 = icmp slt i32 %687, 10
  %693 = or i1 %691, %692
  br i1 %693, label %originalBB209, label %originalBB209alteredBB

originalBB209:                                    ; preds = %685, %originalBB209alteredBB
  %694 = load i8, i8* %19, align 1, !dbg !569
  %695 = trunc i8 %694 to i1, !dbg !569
  %696 = load i32, i32* @x.3
  %697 = load i32, i32* @y.4
  %698 = sub i32 %696, 1
  %699 = mul i32 %696, %698
  %700 = urem i32 %699, 2
  %701 = icmp eq i32 %700, 0
  %702 = icmp slt i32 %697, 10
  %703 = or i1 %701, %702
  br i1 %703, label %originalBBpart2211, label %originalBB209alteredBB

originalBBpart2211:                               ; preds = %originalBB209
  br i1 %695, label %704, label %808, !dbg !570

704:                                              ; preds = %originalBBpart2211
  %705 = load i32, i32* @x.3
  %706 = load i32, i32* @y.4
  %707 = sub i32 %705, 1
  %708 = mul i32 %705, %707
  %709 = urem i32 %708, 2
  %710 = icmp eq i32 %709, 0
  %711 = icmp slt i32 %706, 10
  %712 = or i1 %710, %711
  br i1 %712, label %originalBB213, label %originalBB213alteredBB

originalBB213:                                    ; preds = %704, %originalBB213alteredBB
  %713 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0)) #10, !dbg !571
  %714 = icmp ne i8* %713, null, !dbg !571
  %715 = load i32, i32* @x.3
  %716 = load i32, i32* @y.4
  %717 = sub i32 %715, 1
  %718 = mul i32 %715, %717
  %719 = urem i32 %718, 2
  %720 = icmp eq i32 %719, 0
  %721 = icmp slt i32 %716, 10
  %722 = or i1 %720, %721
  br i1 %722, label %originalBBpart2215, label %originalBB213alteredBB

originalBBpart2215:                               ; preds = %originalBB213
  br i1 %714, label %808, label %723, !dbg !572

723:                                              ; preds = %originalBBpart2215, %originalBBpart2207
  %724 = load i32, i32* %15, align 4, !dbg !573
  %725 = icmp ne i32 %724, 0, !dbg !573
  br i1 %725, label %726, label %748, !dbg !576

726:                                              ; preds = %723
  %727 = call i32 @getcon(i8** @context), !dbg !577
  %728 = icmp ne i32 %727, 0, !dbg !577
  br i1 %728, label %729, label %748, !dbg !578

729:                                              ; preds = %726
  %730 = load i32, i32* @x.3
  %731 = load i32, i32* @y.4
  %732 = sub i32 %730, 1
  %733 = mul i32 %730, %732
  %734 = urem i32 %733, 2
  %735 = icmp eq i32 %734, 0
  %736 = icmp slt i32 %731, 10
  %737 = or i1 %735, %736
  br i1 %737, label %originalBB217, label %originalBB217alteredBB

originalBB217:                                    ; preds = %729, %originalBB217alteredBB
  %738 = load i8, i8* @just_context, align 1, !dbg !579
  %739 = trunc i8 %738 to i1, !dbg !579
  %740 = load i32, i32* @x.3
  %741 = load i32, i32* @y.4
  %742 = sub i32 %740, 1
  %743 = mul i32 %740, %742
  %744 = urem i32 %743, 2
  %745 = icmp eq i32 %744, 0
  %746 = icmp slt i32 %741, 10
  %747 = or i1 %745, %746
  br i1 %747, label %originalBBpart2219, label %originalBB217alteredBB

originalBBpart2219:                               ; preds = %originalBB217
  br i1 %739, label %773, label %748, !dbg !580

748:                                              ; preds = %originalBBpart2219, %726, %723
  %749 = load i32, i32* @x.3
  %750 = load i32, i32* @y.4
  %751 = sub i32 %749, 1
  %752 = mul i32 %749, %751
  %753 = urem i32 %752, 2
  %754 = icmp eq i32 %753, 0
  %755 = icmp slt i32 %750, 10
  %756 = or i1 %754, %755
  br i1 %756, label %originalBB221, label %originalBB221alteredBB

originalBB221:                                    ; preds = %748, %originalBB221alteredBB
  %757 = load i8, i8* %16, align 1, !dbg !581
  %758 = trunc i8 %757 to i1, !dbg !581
  %759 = load i32, i32* @x.3
  %760 = load i32, i32* @y.4
  %761 = sub i32 %759, 1
  %762 = mul i32 %759, %761
  %763 = urem i32 %762, 2
  %764 = icmp eq i32 %763, 0
  %765 = icmp slt i32 %760, 10
  %766 = or i1 %764, %765
  br i1 %766, label %originalBBpart2223, label %originalBB221alteredBB

originalBBpart2223:                               ; preds = %originalBB221
  br i1 %758, label %767, label %791, !dbg !582

767:                                              ; preds = %originalBBpart2223
  %768 = call i64 @smack_new_label_from_self(i8** @context), !dbg !583
  %769 = icmp slt i64 %768, 0, !dbg !584
  br i1 %769, label %770, label %791, !dbg !585

770:                                              ; preds = %767
  %771 = load i8, i8* @just_context, align 1, !dbg !586
  %772 = trunc i8 %771 to i1, !dbg !586
  br i1 %772, label %773, label %791, !dbg !587

773:                                              ; preds = %770, %originalBBpart2219
  %774 = load i32, i32* @x.3
  %775 = load i32, i32* @y.4
  %776 = sub i32 %774, 1
  %777 = mul i32 %774, %776
  %778 = urem i32 %777, 2
  %779 = icmp eq i32 %778, 0
  %780 = icmp slt i32 %775, 10
  %781 = or i1 %779, %780
  br i1 %781, label %originalBB225, label %originalBB225alteredBB

originalBB225:                                    ; preds = %773, %originalBB225alteredBB
  %782 = call i8* @gettext(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.21, i64 0, i64 0)) #10, !dbg !588
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %782), !dbg !588
  %783 = load i32, i32* @x.3
  %784 = load i32, i32* @y.4
  %785 = sub i32 %783, 1
  %786 = mul i32 %783, %785
  %787 = urem i32 %786, 2
  %788 = icmp eq i32 %787, 0
  %789 = icmp slt i32 %784, 10
  %790 = or i1 %788, %789
  br i1 %790, label %originalBBpart2227, label %originalBB225alteredBB

originalBBpart2227:                               ; preds = %originalBB225
  unreachable, !dbg !588

791:                                              ; preds = %770, %767, %originalBBpart2223
  %792 = load i32, i32* @x.3
  %793 = load i32, i32* @y.4
  %794 = sub i32 %792, 1
  %795 = mul i32 %792, %794
  %796 = urem i32 %795, 2
  %797 = icmp eq i32 %796, 0
  %798 = icmp slt i32 %793, 10
  %799 = or i1 %797, %798
  br i1 %799, label %originalBB229, label %originalBB229alteredBB

originalBB229:                                    ; preds = %791, %originalBB229alteredBB
  %800 = load i32, i32* @x.3
  %801 = load i32, i32* @y.4
  %802 = sub i32 %800, 1
  %803 = mul i32 %800, %802
  %804 = urem i32 %803, 2
  %805 = icmp eq i32 %804, 0
  %806 = icmp slt i32 %801, 10
  %807 = or i1 %805, %806
  br i1 %807, label %originalBBpart2231, label %originalBB229alteredBB

originalBBpart2231:                               ; preds = %originalBB229
  br label %808, !dbg !589

808:                                              ; preds = %originalBBpart2231, %originalBBpart2215, %originalBBpart2211, %originalBBpart2146
  %809 = load i64, i64* %18, align 8, !dbg !590
  %810 = icmp uge i64 %809, 1, !dbg !592
  br i1 %810, label %811, label %1008, !dbg !593

811:                                              ; preds = %808
  %812 = load i32, i32* @x.3
  %813 = load i32, i32* @y.4
  %814 = sub i32 %812, 1
  %815 = mul i32 %812, %814
  %816 = urem i32 %815, 2
  %817 = icmp eq i32 %816, 0
  %818 = icmp slt i32 %813, 10
  %819 = or i1 %817, %818
  br i1 %819, label %originalBB233, label %originalBB233alteredBB

originalBB233:                                    ; preds = %811, %originalBB233alteredBB
  %820 = load i64, i64* %18, align 8, !dbg !594
  %821 = icmp ugt i64 %820, 1, !dbg !596
  %822 = zext i1 %821 to i64, !dbg !594
  %823 = select i1 %821, i32 1, i32 0, !dbg !594
  %824 = icmp ne i32 %823, 0, !dbg !594
  %825 = zext i1 %824 to i8, !dbg !597
  store i8 %825, i8* @multiple_users, align 1, !dbg !597
  %826 = load i32, i32* @optind, align 4, !dbg !598
  %827 = sext i32 %826 to i64, !dbg !598
  %828 = load i64, i64* %18, align 8, !dbg !599
  %829 = add i64 %828, %827, !dbg !599
  store i64 %829, i64* %18, align 8, !dbg !599
  %830 = load i32, i32* @x.3
  %831 = load i32, i32* @y.4
  %832 = sub i32 %830, 1
  %833 = mul i32 %830, %832
  %834 = urem i32 %833, 2
  %835 = icmp eq i32 %834, 0
  %836 = icmp slt i32 %831, 10
  %837 = or i1 %835, %836
  br i1 %837, label %originalBBpart2243, label %originalBB233alteredBB

originalBBpart2243:                               ; preds = %originalBB233
  br label %838, !dbg !600

838:                                              ; preds = %988, %originalBBpart2243
  %839 = load i32, i32* @x.3
  %840 = load i32, i32* @y.4
  %841 = sub i32 %839, 1
  %842 = mul i32 %839, %841
  %843 = urem i32 %842, 2
  %844 = icmp eq i32 %843, 0
  %845 = icmp slt i32 %840, 10
  %846 = or i1 %844, %845
  br i1 %846, label %originalBB245, label %originalBB245alteredBB

originalBB245:                                    ; preds = %838, %originalBB245alteredBB
  %847 = load i32, i32* @optind, align 4, !dbg !601
  %848 = sext i32 %847 to i64, !dbg !601
  %849 = load i64, i64* %18, align 8, !dbg !604
  %850 = icmp ult i64 %848, %849, !dbg !605
  %851 = load i32, i32* @x.3
  %852 = load i32, i32* @y.4
  %853 = sub i32 %851, 1
  %854 = mul i32 %851, %853
  %855 = urem i32 %854, 2
  %856 = icmp eq i32 %855, 0
  %857 = icmp slt i32 %852, 10
  %858 = or i1 %856, %857
  br i1 %858, label %originalBBpart2247, label %originalBB245alteredBB

originalBBpart2247:                               ; preds = %originalBB245
  br i1 %850, label %859, label %991, !dbg !606

859:                                              ; preds = %originalBBpart2247
  call void @llvm.dbg.declare(metadata %struct.passwd** %20, metadata !607, metadata !DIExpression()), !dbg !620
  store %struct.passwd* null, %struct.passwd** %20, align 8, !dbg !620
  call void @llvm.dbg.declare(metadata i8** %21, metadata !621, metadata !DIExpression()), !dbg !622
  %860 = load i8**, i8*** %13, align 8, !dbg !623
  %861 = load i32, i32* @optind, align 4, !dbg !624
  %862 = sext i32 %861 to i64, !dbg !623
  %863 = getelementptr inbounds i8*, i8** %860, i64 %862, !dbg !623
  %864 = load i8*, i8** %863, align 8, !dbg !623
  store i8* %864, i8** %21, align 8, !dbg !622
  %865 = load i8*, i8** %21, align 8, !dbg !625
  %866 = load i8, i8* %865, align 1, !dbg !627
  %867 = icmp ne i8 %866, 0, !dbg !627
  br i1 %867, label %868, label %924, !dbg !628

868:                                              ; preds = %859
  %869 = load i32, i32* @x.3
  %870 = load i32, i32* @y.4
  %871 = sub i32 %869, 1
  %872 = mul i32 %869, %871
  %873 = urem i32 %872, 2
  %874 = icmp eq i32 %873, 0
  %875 = icmp slt i32 %870, 10
  %876 = or i1 %874, %875
  br i1 %876, label %originalBB249, label %originalBB249alteredBB

originalBB249:                                    ; preds = %868, %originalBB249alteredBB
  %877 = load i8*, i8** %21, align 8, !dbg !629
  %878 = call i8* @parse_user_spec(i8* %877, i32* @euid, i32* null, i8** null, i8** null), !dbg !632
  %879 = icmp eq i8* %878, null, !dbg !633
  %880 = load i32, i32* @x.3
  %881 = load i32, i32* @y.4
  %882 = sub i32 %880, 1
  %883 = mul i32 %880, %882
  %884 = urem i32 %883, 2
  %885 = icmp eq i32 %884, 0
  %886 = icmp slt i32 %881, 10
  %887 = or i1 %885, %886
  br i1 %887, label %originalBBpart2251, label %originalBB249alteredBB

originalBBpart2251:                               ; preds = %originalBB249
  br i1 %879, label %888, label %907, !dbg !634

888:                                              ; preds = %originalBBpart2251
  %889 = load i32, i32* @x.3
  %890 = load i32, i32* @y.4
  %891 = sub i32 %889, 1
  %892 = mul i32 %889, %891
  %893 = urem i32 %892, 2
  %894 = icmp eq i32 %893, 0
  %895 = icmp slt i32 %890, 10
  %896 = or i1 %894, %895
  br i1 %896, label %originalBB253, label %originalBB253alteredBB

originalBB253:                                    ; preds = %888, %originalBB253alteredBB
  %897 = load i32, i32* @euid, align 4, !dbg !635
  %898 = call %struct.passwd* @getpwuid(i32 %897), !dbg !637
  store %struct.passwd* %898, %struct.passwd** %20, align 8, !dbg !638
  %899 = load i32, i32* @x.3
  %900 = load i32, i32* @y.4
  %901 = sub i32 %899, 1
  %902 = mul i32 %899, %901
  %903 = urem i32 %902, 2
  %904 = icmp eq i32 %903, 0
  %905 = icmp slt i32 %900, 10
  %906 = or i1 %904, %905
  br i1 %906, label %originalBBpart2255, label %originalBB253alteredBB

originalBBpart2255:                               ; preds = %originalBB253
  br label %907, !dbg !639

907:                                              ; preds = %originalBBpart2255, %originalBBpart2251
  %908 = load i32, i32* @x.3
  %909 = load i32, i32* @y.4
  %910 = sub i32 %908, 1
  %911 = mul i32 %908, %910
  %912 = urem i32 %911, 2
  %913 = icmp eq i32 %912, 0
  %914 = icmp slt i32 %909, 10
  %915 = or i1 %913, %914
  br i1 %915, label %originalBB257, label %originalBB257alteredBB

originalBB257:                                    ; preds = %907, %originalBB257alteredBB
  %916 = load i32, i32* @x.3
  %917 = load i32, i32* @y.4
  %918 = sub i32 %916, 1
  %919 = mul i32 %916, %918
  %920 = urem i32 %919, 2
  %921 = icmp eq i32 %920, 0
  %922 = icmp slt i32 %917, 10
  %923 = or i1 %921, %922
  br i1 %923, label %originalBBpart2259, label %originalBB257alteredBB

originalBBpart2259:                               ; preds = %originalBB257
  br label %924, !dbg !640

924:                                              ; preds = %originalBBpart2259, %859
  %925 = load %struct.passwd*, %struct.passwd** %20, align 8, !dbg !641
  %926 = icmp eq %struct.passwd* %925, null, !dbg !643
  br i1 %926, label %927, label %959, !dbg !644

927:                                              ; preds = %924
  %928 = load i32, i32* @x.3
  %929 = load i32, i32* @y.4
  %930 = sub i32 %928, 1
  %931 = mul i32 %928, %930
  %932 = urem i32 %931, 2
  %933 = icmp eq i32 %932, 0
  %934 = icmp slt i32 %929, 10
  %935 = or i1 %933, %934
  br i1 %935, label %originalBB261, label %originalBB261alteredBB

originalBB261:                                    ; preds = %927, %originalBB261alteredBB
  %936 = call i32* @__errno_location() #15, !dbg !645
  %937 = load i32, i32* %936, align 4, !dbg !645
  %938 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.22, i64 0, i64 0)) #10, !dbg !647
  %939 = load i8**, i8*** %13, align 8, !dbg !648
  %940 = load i32, i32* @optind, align 4, !dbg !649
  %941 = sext i32 %940 to i64, !dbg !648
  %942 = getelementptr inbounds i8*, i8** %939, i64 %941, !dbg !648
  %943 = load i8*, i8** %942, align 8, !dbg !648
  %944 = call i8* @quote(i8* %943), !dbg !650
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %937, i8* %938, i8* %944), !dbg !651
  %945 = load i8, i8* @ok, align 1, !dbg !652
  %946 = trunc i8 %945 to i1, !dbg !652
  %947 = zext i1 %946 to i32, !dbg !652
  %948 = and i32 %947, 0, !dbg !652
  %949 = icmp ne i32 %948, 0, !dbg !652
  %950 = zext i1 %949 to i8, !dbg !652
  store i8 %950, i8* @ok, align 1, !dbg !652
  %951 = load i32, i32* @x.3
  %952 = load i32, i32* @y.4
  %953 = sub i32 %951, 1
  %954 = mul i32 %951, %953
  %955 = urem i32 %954, 2
  %956 = icmp eq i32 %955, 0
  %957 = icmp slt i32 %952, 10
  %958 = or i1 %956, %957
  br i1 %958, label %originalBBpart2274, label %originalBB261alteredBB

originalBBpart2274:                               ; preds = %originalBB261
  br label %988, !dbg !653

959:                                              ; preds = %924
  %960 = load i32, i32* @x.3
  %961 = load i32, i32* @y.4
  %962 = sub i32 %960, 1
  %963 = mul i32 %960, %962
  %964 = urem i32 %963, 2
  %965 = icmp eq i32 %964, 0
  %966 = icmp slt i32 %961, 10
  %967 = or i1 %965, %966
  br i1 %967, label %originalBB276, label %originalBB276alteredBB

originalBB276:                                    ; preds = %959, %originalBB276alteredBB
  %968 = load %struct.passwd*, %struct.passwd** %20, align 8, !dbg !654
  %969 = getelementptr inbounds %struct.passwd, %struct.passwd* %968, i32 0, i32 0, !dbg !655
  %970 = load i8*, i8** %969, align 8, !dbg !655
  %971 = call noalias i8* @xstrdup(i8* %970), !dbg !656
  store i8* %971, i8** %17, align 8, !dbg !657
  %972 = load %struct.passwd*, %struct.passwd** %20, align 8, !dbg !658
  %973 = getelementptr inbounds %struct.passwd, %struct.passwd* %972, i32 0, i32 2, !dbg !659
  %974 = load i32, i32* %973, align 8, !dbg !659
  store i32 %974, i32* @euid, align 4, !dbg !660
  store i32 %974, i32* @ruid, align 4, !dbg !661
  %975 = load %struct.passwd*, %struct.passwd** %20, align 8, !dbg !662
  %976 = getelementptr inbounds %struct.passwd, %struct.passwd* %975, i32 0, i32 3, !dbg !663
  %977 = load i32, i32* %976, align 4, !dbg !663
  store i32 %977, i32* @egid, align 4, !dbg !664
  store i32 %977, i32* @rgid, align 4, !dbg !665
  %978 = load i8*, i8** %17, align 8, !dbg !666
  call void @print_stuff(i8* %978), !dbg !667
  %979 = load i8*, i8** %17, align 8, !dbg !668
  call void @free(i8* %979) #10, !dbg !669
  %980 = load i32, i32* @x.3
  %981 = load i32, i32* @y.4
  %982 = sub i32 %980, 1
  %983 = mul i32 %980, %982
  %984 = urem i32 %983, 2
  %985 = icmp eq i32 %984, 0
  %986 = icmp slt i32 %981, 10
  %987 = or i1 %985, %986
  br i1 %987, label %originalBBpart2278, label %originalBB276alteredBB

originalBBpart2278:                               ; preds = %originalBB276
  br label %988, !dbg !670

988:                                              ; preds = %originalBBpart2278, %originalBBpart2274
  %989 = load i32, i32* @optind, align 4, !dbg !671
  %990 = add nsw i32 %989, 1, !dbg !671
  store i32 %990, i32* @optind, align 4, !dbg !671
  br label %838, !dbg !672, !llvm.loop !673

991:                                              ; preds = %originalBBpart2247
  %992 = load i32, i32* @x.3
  %993 = load i32, i32* @y.4
  %994 = sub i32 %992, 1
  %995 = mul i32 %992, %994
  %996 = urem i32 %995, 2
  %997 = icmp eq i32 %996, 0
  %998 = icmp slt i32 %993, 10
  %999 = or i1 %997, %998
  br i1 %999, label %originalBB280, label %originalBB280alteredBB

originalBB280:                                    ; preds = %991, %originalBB280alteredBB
  %1000 = load i32, i32* @x.3
  %1001 = load i32, i32* @y.4
  %1002 = sub i32 %1000, 1
  %1003 = mul i32 %1000, %1002
  %1004 = urem i32 %1003, 2
  %1005 = icmp eq i32 %1004, 0
  %1006 = icmp slt i32 %1001, 10
  %1007 = or i1 %1005, %1006
  br i1 %1007, label %originalBBpart2282, label %originalBB280alteredBB

originalBBpart2282:                               ; preds = %originalBB280
  br label %1527, !dbg !675

1008:                                             ; preds = %808
  call void @llvm.dbg.declare(metadata i32* %22, metadata !676, metadata !DIExpression()), !dbg !678
  %1009 = load i32, i32* @x.3
  %1010 = load i32, i32* @y.4
  %1011 = sub i32 %1009, 1
  %1012 = mul i32 %1009, %1011
  %1013 = urem i32 %1012, 2
  %1014 = icmp eq i32 %1013, 0
  %1015 = icmp slt i32 %1010, 10
  %1016 = or i1 %1014, %1015
  br i1 %1016, label %originalBB284, label %originalBB284alteredBB

originalBB284:                                    ; preds = %1008, %originalBB284alteredBB
  store i32 -1, i32* %22, align 4, !dbg !678
  call void @llvm.dbg.declare(metadata i32* %23, metadata !679, metadata !DIExpression()), !dbg !680
  store i32 -1, i32* %23, align 4, !dbg !680
  %1017 = load i8, i8* @just_user, align 1, !dbg !681
  %1018 = trunc i8 %1017 to i1, !dbg !681
  %1019 = load i32, i32* @x.3
  %1020 = load i32, i32* @y.4
  %1021 = sub i32 %1019, 1
  %1022 = mul i32 %1019, %1021
  %1023 = urem i32 %1022, 2
  %1024 = icmp eq i32 %1023, 0
  %1025 = icmp slt i32 %1020, 10
  %1026 = or i1 %1024, %1025
  br i1 %1026, label %originalBBpart2286, label %originalBB284alteredBB

originalBBpart2286:                               ; preds = %originalBB284
  br i1 %1018, label %1027, label %1046, !dbg !683

1027:                                             ; preds = %originalBBpart2286
  %1028 = load i32, i32* @x.3
  %1029 = load i32, i32* @y.4
  %1030 = sub i32 %1028, 1
  %1031 = mul i32 %1028, %1030
  %1032 = urem i32 %1031, 2
  %1033 = icmp eq i32 %1032, 0
  %1034 = icmp slt i32 %1029, 10
  %1035 = or i1 %1033, %1034
  br i1 %1035, label %originalBB288, label %originalBB288alteredBB

originalBB288:                                    ; preds = %1027, %originalBB288alteredBB
  %1036 = load i8, i8* @use_real, align 1, !dbg !684
  %1037 = trunc i8 %1036 to i1, !dbg !684
  %1038 = load i32, i32* @x.3
  %1039 = load i32, i32* @y.4
  %1040 = sub i32 %1038, 1
  %1041 = mul i32 %1038, %1040
  %1042 = urem i32 %1041, 2
  %1043 = icmp eq i32 %1042, 0
  %1044 = icmp slt i32 %1039, 10
  %1045 = or i1 %1043, %1044
  br i1 %1045, label %originalBBpart2290, label %originalBB288alteredBB

originalBBpart2290:                               ; preds = %originalBB288
  br i1 %1037, label %1166, label %1103, !dbg !681

1046:                                             ; preds = %originalBBpart2286
  %1047 = load i32, i32* @x.3
  %1048 = load i32, i32* @y.4
  %1049 = sub i32 %1047, 1
  %1050 = mul i32 %1047, %1049
  %1051 = urem i32 %1050, 2
  %1052 = icmp eq i32 %1051, 0
  %1053 = icmp slt i32 %1048, 10
  %1054 = or i1 %1052, %1053
  br i1 %1054, label %originalBB292, label %originalBB292alteredBB

originalBB292:                                    ; preds = %1046, %originalBB292alteredBB
  %1055 = load i8, i8* @just_group, align 1, !dbg !685
  %1056 = trunc i8 %1055 to i1, !dbg !685
  %1057 = load i32, i32* @x.3
  %1058 = load i32, i32* @y.4
  %1059 = sub i32 %1057, 1
  %1060 = mul i32 %1057, %1059
  %1061 = urem i32 %1060, 2
  %1062 = icmp eq i32 %1061, 0
  %1063 = icmp slt i32 %1058, 10
  %1064 = or i1 %1062, %1063
  br i1 %1064, label %originalBBpart2294, label %originalBB292alteredBB

originalBBpart2294:                               ; preds = %originalBB292
  br i1 %1056, label %1166, label %1065, !dbg !686

1065:                                             ; preds = %originalBBpart2294
  %1066 = load i32, i32* @x.3
  %1067 = load i32, i32* @y.4
  %1068 = sub i32 %1066, 1
  %1069 = mul i32 %1066, %1068
  %1070 = urem i32 %1069, 2
  %1071 = icmp eq i32 %1070, 0
  %1072 = icmp slt i32 %1067, 10
  %1073 = or i1 %1071, %1072
  br i1 %1073, label %originalBB296, label %originalBB296alteredBB

originalBB296:                                    ; preds = %1065, %originalBB296alteredBB
  %1074 = load i8, i8* @just_group_list, align 1, !dbg !687
  %1075 = trunc i8 %1074 to i1, !dbg !687
  %1076 = load i32, i32* @x.3
  %1077 = load i32, i32* @y.4
  %1078 = sub i32 %1076, 1
  %1079 = mul i32 %1076, %1078
  %1080 = urem i32 %1079, 2
  %1081 = icmp eq i32 %1080, 0
  %1082 = icmp slt i32 %1077, 10
  %1083 = or i1 %1081, %1082
  br i1 %1083, label %originalBBpart2298, label %originalBB296alteredBB

originalBBpart2298:                               ; preds = %originalBB296
  br i1 %1075, label %1166, label %1084, !dbg !688

1084:                                             ; preds = %originalBBpart2298
  %1085 = load i32, i32* @x.3
  %1086 = load i32, i32* @y.4
  %1087 = sub i32 %1085, 1
  %1088 = mul i32 %1085, %1087
  %1089 = urem i32 %1088, 2
  %1090 = icmp eq i32 %1089, 0
  %1091 = icmp slt i32 %1086, 10
  %1092 = or i1 %1090, %1091
  br i1 %1092, label %originalBB300, label %originalBB300alteredBB

originalBB300:                                    ; preds = %1084, %originalBB300alteredBB
  %1093 = load i8, i8* @just_context, align 1, !dbg !689
  %1094 = trunc i8 %1093 to i1, !dbg !689
  %1095 = load i32, i32* @x.3
  %1096 = load i32, i32* @y.4
  %1097 = sub i32 %1095, 1
  %1098 = mul i32 %1095, %1097
  %1099 = urem i32 %1098, 2
  %1100 = icmp eq i32 %1099, 0
  %1101 = icmp slt i32 %1096, 10
  %1102 = or i1 %1100, %1101
  br i1 %1102, label %originalBBpart2302, label %originalBB300alteredBB

originalBBpart2302:                               ; preds = %originalBB300
  br i1 %1094, label %1166, label %1103, !dbg !683

1103:                                             ; preds = %originalBBpart2302, %originalBBpart2290
  %1104 = load i32, i32* @x.3
  %1105 = load i32, i32* @y.4
  %1106 = sub i32 %1104, 1
  %1107 = mul i32 %1104, %1106
  %1108 = urem i32 %1107, 2
  %1109 = icmp eq i32 %1108, 0
  %1110 = icmp slt i32 %1105, 10
  %1111 = or i1 %1109, %1110
  br i1 %1111, label %originalBB304, label %originalBB304alteredBB

originalBB304:                                    ; preds = %1103, %originalBB304alteredBB
  %1112 = call i32* @__errno_location() #15, !dbg !690
  store i32 0, i32* %1112, align 4, !dbg !692
  %1113 = call i32 @geteuid() #10, !dbg !693
  store i32 %1113, i32* @euid, align 4, !dbg !694
  %1114 = load i32, i32* @euid, align 4, !dbg !695
  %1115 = load i32, i32* %22, align 4, !dbg !697
  %1116 = icmp eq i32 %1114, %1115, !dbg !698
  %1117 = load i32, i32* @x.3
  %1118 = load i32, i32* @y.4
  %1119 = sub i32 %1117, 1
  %1120 = mul i32 %1117, %1119
  %1121 = urem i32 %1120, 2
  %1122 = icmp eq i32 %1121, 0
  %1123 = icmp slt i32 %1118, 10
  %1124 = or i1 %1122, %1123
  br i1 %1124, label %originalBBpart2306, label %originalBB304alteredBB

originalBBpart2306:                               ; preds = %originalBB304
  br i1 %1116, label %1125, label %1149, !dbg !699

1125:                                             ; preds = %originalBBpart2306
  %1126 = load i32, i32* @x.3
  %1127 = load i32, i32* @y.4
  %1128 = sub i32 %1126, 1
  %1129 = mul i32 %1126, %1128
  %1130 = urem i32 %1129, 2
  %1131 = icmp eq i32 %1130, 0
  %1132 = icmp slt i32 %1127, 10
  %1133 = or i1 %1131, %1132
  br i1 %1133, label %originalBB308, label %originalBB308alteredBB

originalBB308:                                    ; preds = %1125, %originalBB308alteredBB
  %1134 = call i32* @__errno_location() #15, !dbg !700
  %1135 = load i32, i32* %1134, align 4, !dbg !700
  %1136 = icmp ne i32 %1135, 0, !dbg !700
  %1137 = load i32, i32* @x.3
  %1138 = load i32, i32* @y.4
  %1139 = sub i32 %1137, 1
  %1140 = mul i32 %1137, %1139
  %1141 = urem i32 %1140, 2
  %1142 = icmp eq i32 %1141, 0
  %1143 = icmp slt i32 %1138, 10
  %1144 = or i1 %1142, %1143
  br i1 %1144, label %originalBBpart2310, label %originalBB308alteredBB

originalBBpart2310:                               ; preds = %originalBB308
  br i1 %1136, label %1145, label %1149, !dbg !701

1145:                                             ; preds = %originalBBpart2310
  %1146 = call i32* @__errno_location() #15, !dbg !702
  %1147 = load i32, i32* %1146, align 4, !dbg !702
  %1148 = call i8* @gettext(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.23, i64 0, i64 0)) #10, !dbg !702
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1147, i8* %1148), !dbg !702
  unreachable, !dbg !702

1149:                                             ; preds = %originalBBpart2310, %originalBBpart2306
  %1150 = load i32, i32* @x.3
  %1151 = load i32, i32* @y.4
  %1152 = sub i32 %1150, 1
  %1153 = mul i32 %1150, %1152
  %1154 = urem i32 %1153, 2
  %1155 = icmp eq i32 %1154, 0
  %1156 = icmp slt i32 %1151, 10
  %1157 = or i1 %1155, %1156
  br i1 %1157, label %originalBB312, label %originalBB312alteredBB

originalBB312:                                    ; preds = %1149, %originalBB312alteredBB
  %1158 = load i32, i32* @x.3
  %1159 = load i32, i32* @y.4
  %1160 = sub i32 %1158, 1
  %1161 = mul i32 %1158, %1160
  %1162 = urem i32 %1161, 2
  %1163 = icmp eq i32 %1162, 0
  %1164 = icmp slt i32 %1159, 10
  %1165 = or i1 %1163, %1164
  br i1 %1165, label %originalBBpart2314, label %originalBB312alteredBB

originalBBpart2314:                               ; preds = %originalBB312
  br label %1166, !dbg !703

1166:                                             ; preds = %originalBBpart2314, %originalBBpart2302, %originalBBpart2298, %originalBBpart2294, %originalBBpart2290
  %1167 = load i32, i32* @x.3
  %1168 = load i32, i32* @y.4
  %1169 = sub i32 %1167, 1
  %1170 = mul i32 %1167, %1169
  %1171 = urem i32 %1170, 2
  %1172 = icmp eq i32 %1171, 0
  %1173 = icmp slt i32 %1168, 10
  %1174 = or i1 %1172, %1173
  br i1 %1174, label %originalBB316, label %originalBB316alteredBB

originalBB316:                                    ; preds = %1166, %originalBB316alteredBB
  %1175 = load i8, i8* @just_user, align 1, !dbg !704
  %1176 = trunc i8 %1175 to i1, !dbg !704
  %1177 = load i32, i32* @x.3
  %1178 = load i32, i32* @y.4
  %1179 = sub i32 %1177, 1
  %1180 = mul i32 %1177, %1179
  %1181 = urem i32 %1180, 2
  %1182 = icmp eq i32 %1181, 0
  %1183 = icmp slt i32 %1178, 10
  %1184 = or i1 %1182, %1183
  br i1 %1184, label %originalBBpart2318, label %originalBB316alteredBB

originalBBpart2318:                               ; preds = %originalBB316
  br i1 %1176, label %1185, label %1204, !dbg !706

1185:                                             ; preds = %originalBBpart2318
  %1186 = load i32, i32* @x.3
  %1187 = load i32, i32* @y.4
  %1188 = sub i32 %1186, 1
  %1189 = mul i32 %1186, %1188
  %1190 = urem i32 %1189, 2
  %1191 = icmp eq i32 %1190, 0
  %1192 = icmp slt i32 %1187, 10
  %1193 = or i1 %1191, %1192
  br i1 %1193, label %originalBB320, label %originalBB320alteredBB

originalBB320:                                    ; preds = %1185, %originalBB320alteredBB
  %1194 = load i8, i8* @use_real, align 1, !dbg !707
  %1195 = trunc i8 %1194 to i1, !dbg !707
  %1196 = load i32, i32* @x.3
  %1197 = load i32, i32* @y.4
  %1198 = sub i32 %1196, 1
  %1199 = mul i32 %1196, %1198
  %1200 = urem i32 %1199, 2
  %1201 = icmp eq i32 %1200, 0
  %1202 = icmp slt i32 %1197, 10
  %1203 = or i1 %1201, %1202
  br i1 %1203, label %originalBBpart2322, label %originalBB320alteredBB

originalBBpart2322:                               ; preds = %originalBB320
  br i1 %1195, label %1261, label %1340, !dbg !704

1204:                                             ; preds = %originalBBpart2318
  %1205 = load i32, i32* @x.3
  %1206 = load i32, i32* @y.4
  %1207 = sub i32 %1205, 1
  %1208 = mul i32 %1205, %1207
  %1209 = urem i32 %1208, 2
  %1210 = icmp eq i32 %1209, 0
  %1211 = icmp slt i32 %1206, 10
  %1212 = or i1 %1210, %1211
  br i1 %1212, label %originalBB324, label %originalBB324alteredBB

originalBB324:                                    ; preds = %1204, %originalBB324alteredBB
  %1213 = load i8, i8* @just_group, align 1, !dbg !708
  %1214 = trunc i8 %1213 to i1, !dbg !708
  %1215 = load i32, i32* @x.3
  %1216 = load i32, i32* @y.4
  %1217 = sub i32 %1215, 1
  %1218 = mul i32 %1215, %1217
  %1219 = urem i32 %1218, 2
  %1220 = icmp eq i32 %1219, 0
  %1221 = icmp slt i32 %1216, 10
  %1222 = or i1 %1220, %1221
  br i1 %1222, label %originalBBpart2326, label %originalBB324alteredBB

originalBBpart2326:                               ; preds = %originalBB324
  br i1 %1214, label %1340, label %1223, !dbg !709

1223:                                             ; preds = %originalBBpart2326
  %1224 = load i32, i32* @x.3
  %1225 = load i32, i32* @y.4
  %1226 = sub i32 %1224, 1
  %1227 = mul i32 %1224, %1226
  %1228 = urem i32 %1227, 2
  %1229 = icmp eq i32 %1228, 0
  %1230 = icmp slt i32 %1225, 10
  %1231 = or i1 %1229, %1230
  br i1 %1231, label %originalBB328, label %originalBB328alteredBB

originalBB328:                                    ; preds = %1223, %originalBB328alteredBB
  %1232 = load i8, i8* @just_group_list, align 1, !dbg !710
  %1233 = trunc i8 %1232 to i1, !dbg !710
  %1234 = load i32, i32* @x.3
  %1235 = load i32, i32* @y.4
  %1236 = sub i32 %1234, 1
  %1237 = mul i32 %1234, %1236
  %1238 = urem i32 %1237, 2
  %1239 = icmp eq i32 %1238, 0
  %1240 = icmp slt i32 %1235, 10
  %1241 = or i1 %1239, %1240
  br i1 %1241, label %originalBBpart2330, label %originalBB328alteredBB

originalBBpart2330:                               ; preds = %originalBB328
  br i1 %1233, label %1261, label %1242, !dbg !711

1242:                                             ; preds = %originalBBpart2330
  %1243 = load i32, i32* @x.3
  %1244 = load i32, i32* @y.4
  %1245 = sub i32 %1243, 1
  %1246 = mul i32 %1243, %1245
  %1247 = urem i32 %1246, 2
  %1248 = icmp eq i32 %1247, 0
  %1249 = icmp slt i32 %1244, 10
  %1250 = or i1 %1248, %1249
  br i1 %1250, label %originalBB332, label %originalBB332alteredBB

originalBB332:                                    ; preds = %1242, %originalBB332alteredBB
  %1251 = load i8, i8* @just_context, align 1, !dbg !712
  %1252 = trunc i8 %1251 to i1, !dbg !712
  %1253 = load i32, i32* @x.3
  %1254 = load i32, i32* @y.4
  %1255 = sub i32 %1253, 1
  %1256 = mul i32 %1253, %1255
  %1257 = urem i32 %1256, 2
  %1258 = icmp eq i32 %1257, 0
  %1259 = icmp slt i32 %1254, 10
  %1260 = or i1 %1258, %1259
  br i1 %1260, label %originalBBpart2334, label %originalBB332alteredBB

originalBBpart2334:                               ; preds = %originalBB332
  br i1 %1252, label %1340, label %1261, !dbg !706

1261:                                             ; preds = %originalBBpart2334, %originalBBpart2330, %originalBBpart2322
  %1262 = load i32, i32* @x.3
  %1263 = load i32, i32* @y.4
  %1264 = sub i32 %1262, 1
  %1265 = mul i32 %1262, %1264
  %1266 = urem i32 %1265, 2
  %1267 = icmp eq i32 %1266, 0
  %1268 = icmp slt i32 %1263, 10
  %1269 = or i1 %1267, %1268
  br i1 %1269, label %originalBB336, label %originalBB336alteredBB

originalBB336:                                    ; preds = %1261, %originalBB336alteredBB
  %1270 = call i32* @__errno_location() #15, !dbg !713
  store i32 0, i32* %1270, align 4, !dbg !715
  %1271 = call i32 @getuid() #10, !dbg !716
  store i32 %1271, i32* @ruid, align 4, !dbg !717
  %1272 = load i32, i32* @ruid, align 4, !dbg !718
  %1273 = load i32, i32* %22, align 4, !dbg !720
  %1274 = icmp eq i32 %1272, %1273, !dbg !721
  %1275 = load i32, i32* @x.3
  %1276 = load i32, i32* @y.4
  %1277 = sub i32 %1275, 1
  %1278 = mul i32 %1275, %1277
  %1279 = urem i32 %1278, 2
  %1280 = icmp eq i32 %1279, 0
  %1281 = icmp slt i32 %1276, 10
  %1282 = or i1 %1280, %1281
  br i1 %1282, label %originalBBpart2338, label %originalBB336alteredBB

originalBBpart2338:                               ; preds = %originalBB336
  br i1 %1274, label %1283, label %1323, !dbg !722

1283:                                             ; preds = %originalBBpart2338
  %1284 = load i32, i32* @x.3
  %1285 = load i32, i32* @y.4
  %1286 = sub i32 %1284, 1
  %1287 = mul i32 %1284, %1286
  %1288 = urem i32 %1287, 2
  %1289 = icmp eq i32 %1288, 0
  %1290 = icmp slt i32 %1285, 10
  %1291 = or i1 %1289, %1290
  br i1 %1291, label %originalBB340, label %originalBB340alteredBB

originalBB340:                                    ; preds = %1283, %originalBB340alteredBB
  %1292 = call i32* @__errno_location() #15, !dbg !723
  %1293 = load i32, i32* %1292, align 4, !dbg !723
  %1294 = icmp ne i32 %1293, 0, !dbg !723
  %1295 = load i32, i32* @x.3
  %1296 = load i32, i32* @y.4
  %1297 = sub i32 %1295, 1
  %1298 = mul i32 %1295, %1297
  %1299 = urem i32 %1298, 2
  %1300 = icmp eq i32 %1299, 0
  %1301 = icmp slt i32 %1296, 10
  %1302 = or i1 %1300, %1301
  br i1 %1302, label %originalBBpart2342, label %originalBB340alteredBB

originalBBpart2342:                               ; preds = %originalBB340
  br i1 %1294, label %1303, label %1323, !dbg !724

1303:                                             ; preds = %originalBBpart2342
  %1304 = load i32, i32* @x.3
  %1305 = load i32, i32* @y.4
  %1306 = sub i32 %1304, 1
  %1307 = mul i32 %1304, %1306
  %1308 = urem i32 %1307, 2
  %1309 = icmp eq i32 %1308, 0
  %1310 = icmp slt i32 %1305, 10
  %1311 = or i1 %1309, %1310
  br i1 %1311, label %originalBB344, label %originalBB344alteredBB

originalBB344:                                    ; preds = %1303, %originalBB344alteredBB
  %1312 = call i32* @__errno_location() #15, !dbg !725
  %1313 = load i32, i32* %1312, align 4, !dbg !725
  %1314 = call i8* @gettext(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.24, i64 0, i64 0)) #10, !dbg !725
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1313, i8* %1314), !dbg !725
  %1315 = load i32, i32* @x.3
  %1316 = load i32, i32* @y.4
  %1317 = sub i32 %1315, 1
  %1318 = mul i32 %1315, %1317
  %1319 = urem i32 %1318, 2
  %1320 = icmp eq i32 %1319, 0
  %1321 = icmp slt i32 %1316, 10
  %1322 = or i1 %1320, %1321
  br i1 %1322, label %originalBBpart2346, label %originalBB344alteredBB

originalBBpart2346:                               ; preds = %originalBB344
  unreachable, !dbg !725

1323:                                             ; preds = %originalBBpart2342, %originalBBpart2338
  %1324 = load i32, i32* @x.3
  %1325 = load i32, i32* @y.4
  %1326 = sub i32 %1324, 1
  %1327 = mul i32 %1324, %1326
  %1328 = urem i32 %1327, 2
  %1329 = icmp eq i32 %1328, 0
  %1330 = icmp slt i32 %1325, 10
  %1331 = or i1 %1329, %1330
  br i1 %1331, label %originalBB348, label %originalBB348alteredBB

originalBB348:                                    ; preds = %1323, %originalBB348alteredBB
  %1332 = load i32, i32* @x.3
  %1333 = load i32, i32* @y.4
  %1334 = sub i32 %1332, 1
  %1335 = mul i32 %1332, %1334
  %1336 = urem i32 %1335, 2
  %1337 = icmp eq i32 %1336, 0
  %1338 = icmp slt i32 %1333, 10
  %1339 = or i1 %1337, %1338
  br i1 %1339, label %originalBBpart2350, label %originalBB348alteredBB

originalBBpart2350:                               ; preds = %originalBB348
  br label %1340, !dbg !726

1340:                                             ; preds = %originalBBpart2350, %originalBBpart2334, %originalBBpart2326, %originalBBpart2322
  %1341 = load i32, i32* @x.3
  %1342 = load i32, i32* @y.4
  %1343 = sub i32 %1341, 1
  %1344 = mul i32 %1341, %1343
  %1345 = urem i32 %1344, 2
  %1346 = icmp eq i32 %1345, 0
  %1347 = icmp slt i32 %1342, 10
  %1348 = or i1 %1346, %1347
  br i1 %1348, label %originalBB352, label %originalBB352alteredBB

originalBB352:                                    ; preds = %1340, %originalBB352alteredBB
  %1349 = load i8, i8* @just_user, align 1, !dbg !727
  %1350 = trunc i8 %1349 to i1, !dbg !727
  %1351 = load i32, i32* @x.3
  %1352 = load i32, i32* @y.4
  %1353 = sub i32 %1351, 1
  %1354 = mul i32 %1351, %1353
  %1355 = urem i32 %1354, 2
  %1356 = icmp eq i32 %1355, 0
  %1357 = icmp slt i32 %1352, 10
  %1358 = or i1 %1356, %1357
  br i1 %1358, label %originalBBpart2354, label %originalBB352alteredBB

originalBBpart2354:                               ; preds = %originalBB352
  br i1 %1350, label %1509, label %1359, !dbg !729

1359:                                             ; preds = %originalBBpart2354
  %1360 = load i32, i32* @x.3
  %1361 = load i32, i32* @y.4
  %1362 = sub i32 %1360, 1
  %1363 = mul i32 %1360, %1362
  %1364 = urem i32 %1363, 2
  %1365 = icmp eq i32 %1364, 0
  %1366 = icmp slt i32 %1361, 10
  %1367 = or i1 %1365, %1366
  br i1 %1367, label %originalBB356, label %originalBB356alteredBB

originalBB356:                                    ; preds = %1359, %originalBB356alteredBB
  %1368 = load i8, i8* @just_group, align 1, !dbg !730
  %1369 = trunc i8 %1368 to i1, !dbg !730
  %1370 = load i32, i32* @x.3
  %1371 = load i32, i32* @y.4
  %1372 = sub i32 %1370, 1
  %1373 = mul i32 %1370, %1372
  %1374 = urem i32 %1373, 2
  %1375 = icmp eq i32 %1374, 0
  %1376 = icmp slt i32 %1371, 10
  %1377 = or i1 %1375, %1376
  br i1 %1377, label %originalBBpart2358, label %originalBB356alteredBB

originalBBpart2358:                               ; preds = %originalBB356
  br i1 %1369, label %1400, label %1378, !dbg !731

1378:                                             ; preds = %originalBBpart2358
  %1379 = load i8, i8* @just_group_list, align 1, !dbg !732
  %1380 = trunc i8 %1379 to i1, !dbg !732
  br i1 %1380, label %1400, label %1381, !dbg !733

1381:                                             ; preds = %1378
  %1382 = load i32, i32* @x.3
  %1383 = load i32, i32* @y.4
  %1384 = sub i32 %1382, 1
  %1385 = mul i32 %1382, %1384
  %1386 = urem i32 %1385, 2
  %1387 = icmp eq i32 %1386, 0
  %1388 = icmp slt i32 %1383, 10
  %1389 = or i1 %1387, %1388
  br i1 %1389, label %originalBB360, label %originalBB360alteredBB

originalBB360:                                    ; preds = %1381, %originalBB360alteredBB
  %1390 = load i8, i8* @just_context, align 1, !dbg !734
  %1391 = trunc i8 %1390 to i1, !dbg !734
  %1392 = load i32, i32* @x.3
  %1393 = load i32, i32* @y.4
  %1394 = sub i32 %1392, 1
  %1395 = mul i32 %1392, %1394
  %1396 = urem i32 %1395, 2
  %1397 = icmp eq i32 %1396, 0
  %1398 = icmp slt i32 %1393, 10
  %1399 = or i1 %1397, %1398
  br i1 %1399, label %originalBBpart2362, label %originalBB360alteredBB

originalBBpart2362:                               ; preds = %originalBB360
  br i1 %1391, label %1509, label %1400, !dbg !735

1400:                                             ; preds = %originalBBpart2362, %1378, %originalBBpart2358
  %1401 = load i32, i32* @x.3
  %1402 = load i32, i32* @y.4
  %1403 = sub i32 %1401, 1
  %1404 = mul i32 %1401, %1403
  %1405 = urem i32 %1404, 2
  %1406 = icmp eq i32 %1405, 0
  %1407 = icmp slt i32 %1402, 10
  %1408 = or i1 %1406, %1407
  br i1 %1408, label %originalBB364, label %originalBB364alteredBB

originalBB364:                                    ; preds = %1400, %originalBB364alteredBB
  %1409 = call i32* @__errno_location() #15, !dbg !736
  store i32 0, i32* %1409, align 4, !dbg !738
  %1410 = call i32 @getegid() #10, !dbg !739
  store i32 %1410, i32* @egid, align 4, !dbg !740
  %1411 = load i32, i32* @egid, align 4, !dbg !741
  %1412 = load i32, i32* %23, align 4, !dbg !743
  %1413 = icmp eq i32 %1411, %1412, !dbg !744
  %1414 = load i32, i32* @x.3
  %1415 = load i32, i32* @y.4
  %1416 = sub i32 %1414, 1
  %1417 = mul i32 %1414, %1416
  %1418 = urem i32 %1417, 2
  %1419 = icmp eq i32 %1418, 0
  %1420 = icmp slt i32 %1415, 10
  %1421 = or i1 %1419, %1420
  br i1 %1421, label %originalBBpart2366, label %originalBB364alteredBB

originalBBpart2366:                               ; preds = %originalBB364
  br i1 %1413, label %1422, label %1462, !dbg !745

1422:                                             ; preds = %originalBBpart2366
  %1423 = load i32, i32* @x.3
  %1424 = load i32, i32* @y.4
  %1425 = sub i32 %1423, 1
  %1426 = mul i32 %1423, %1425
  %1427 = urem i32 %1426, 2
  %1428 = icmp eq i32 %1427, 0
  %1429 = icmp slt i32 %1424, 10
  %1430 = or i1 %1428, %1429
  br i1 %1430, label %originalBB368, label %originalBB368alteredBB

originalBB368:                                    ; preds = %1422, %originalBB368alteredBB
  %1431 = call i32* @__errno_location() #15, !dbg !746
  %1432 = load i32, i32* %1431, align 4, !dbg !746
  %1433 = icmp ne i32 %1432, 0, !dbg !746
  %1434 = load i32, i32* @x.3
  %1435 = load i32, i32* @y.4
  %1436 = sub i32 %1434, 1
  %1437 = mul i32 %1434, %1436
  %1438 = urem i32 %1437, 2
  %1439 = icmp eq i32 %1438, 0
  %1440 = icmp slt i32 %1435, 10
  %1441 = or i1 %1439, %1440
  br i1 %1441, label %originalBBpart2370, label %originalBB368alteredBB

originalBBpart2370:                               ; preds = %originalBB368
  br i1 %1433, label %1442, label %1462, !dbg !747

1442:                                             ; preds = %originalBBpart2370
  %1443 = load i32, i32* @x.3
  %1444 = load i32, i32* @y.4
  %1445 = sub i32 %1443, 1
  %1446 = mul i32 %1443, %1445
  %1447 = urem i32 %1446, 2
  %1448 = icmp eq i32 %1447, 0
  %1449 = icmp slt i32 %1444, 10
  %1450 = or i1 %1448, %1449
  br i1 %1450, label %originalBB372, label %originalBB372alteredBB

originalBB372:                                    ; preds = %1442, %originalBB372alteredBB
  %1451 = call i32* @__errno_location() #15, !dbg !748
  %1452 = load i32, i32* %1451, align 4, !dbg !748
  %1453 = call i8* @gettext(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.25, i64 0, i64 0)) #10, !dbg !748
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1452, i8* %1453), !dbg !748
  %1454 = load i32, i32* @x.3
  %1455 = load i32, i32* @y.4
  %1456 = sub i32 %1454, 1
  %1457 = mul i32 %1454, %1456
  %1458 = urem i32 %1457, 2
  %1459 = icmp eq i32 %1458, 0
  %1460 = icmp slt i32 %1455, 10
  %1461 = or i1 %1459, %1460
  br i1 %1461, label %originalBBpart2374, label %originalBB372alteredBB

originalBBpart2374:                               ; preds = %originalBB372
  unreachable, !dbg !748

1462:                                             ; preds = %originalBBpart2370, %originalBBpart2366
  %1463 = call i32* @__errno_location() #15, !dbg !749
  store i32 0, i32* %1463, align 4, !dbg !750
  %1464 = call i32 @getgid() #10, !dbg !751
  store i32 %1464, i32* @rgid, align 4, !dbg !752
  %1465 = load i32, i32* @rgid, align 4, !dbg !753
  %1466 = load i32, i32* %23, align 4, !dbg !755
  %1467 = icmp eq i32 %1465, %1466, !dbg !756
  br i1 %1467, label %1468, label %1492, !dbg !757

1468:                                             ; preds = %1462
  %1469 = call i32* @__errno_location() #15, !dbg !758
  %1470 = load i32, i32* %1469, align 4, !dbg !758
  %1471 = icmp ne i32 %1470, 0, !dbg !758
  br i1 %1471, label %1472, label %1492, !dbg !759

1472:                                             ; preds = %1468
  %1473 = load i32, i32* @x.3
  %1474 = load i32, i32* @y.4
  %1475 = sub i32 %1473, 1
  %1476 = mul i32 %1473, %1475
  %1477 = urem i32 %1476, 2
  %1478 = icmp eq i32 %1477, 0
  %1479 = icmp slt i32 %1474, 10
  %1480 = or i1 %1478, %1479
  br i1 %1480, label %originalBB376, label %originalBB376alteredBB

originalBB376:                                    ; preds = %1472, %originalBB376alteredBB
  %1481 = call i32* @__errno_location() #15, !dbg !760
  %1482 = load i32, i32* %1481, align 4, !dbg !760
  %1483 = call i8* @gettext(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.26, i64 0, i64 0)) #10, !dbg !760
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1482, i8* %1483), !dbg !760
  %1484 = load i32, i32* @x.3
  %1485 = load i32, i32* @y.4
  %1486 = sub i32 %1484, 1
  %1487 = mul i32 %1484, %1486
  %1488 = urem i32 %1487, 2
  %1489 = icmp eq i32 %1488, 0
  %1490 = icmp slt i32 %1485, 10
  %1491 = or i1 %1489, %1490
  br i1 %1491, label %originalBBpart2378, label %originalBB376alteredBB

originalBBpart2378:                               ; preds = %originalBB376
  unreachable, !dbg !760

1492:                                             ; preds = %1468, %1462
  %1493 = load i32, i32* @x.3
  %1494 = load i32, i32* @y.4
  %1495 = sub i32 %1493, 1
  %1496 = mul i32 %1493, %1495
  %1497 = urem i32 %1496, 2
  %1498 = icmp eq i32 %1497, 0
  %1499 = icmp slt i32 %1494, 10
  %1500 = or i1 %1498, %1499
  br i1 %1500, label %originalBB380, label %originalBB380alteredBB

originalBB380:                                    ; preds = %1492, %originalBB380alteredBB
  %1501 = load i32, i32* @x.3
  %1502 = load i32, i32* @y.4
  %1503 = sub i32 %1501, 1
  %1504 = mul i32 %1501, %1503
  %1505 = urem i32 %1504, 2
  %1506 = icmp eq i32 %1505, 0
  %1507 = icmp slt i32 %1502, 10
  %1508 = or i1 %1506, %1507
  br i1 %1508, label %originalBBpart2382, label %originalBB380alteredBB

originalBBpart2382:                               ; preds = %originalBB380
  br label %1509, !dbg !761

1509:                                             ; preds = %originalBBpart2382, %originalBBpart2362, %originalBBpart2354
  %1510 = load i32, i32* @x.3
  %1511 = load i32, i32* @y.4
  %1512 = sub i32 %1510, 1
  %1513 = mul i32 %1510, %1512
  %1514 = urem i32 %1513, 2
  %1515 = icmp eq i32 %1514, 0
  %1516 = icmp slt i32 %1511, 10
  %1517 = or i1 %1515, %1516
  br i1 %1517, label %originalBB384, label %originalBB384alteredBB

originalBB384:                                    ; preds = %1509, %originalBB384alteredBB
  %1518 = load i8*, i8** %17, align 8, !dbg !762
  call void @print_stuff(i8* %1518), !dbg !763
  %1519 = load i32, i32* @x.3
  %1520 = load i32, i32* @y.4
  %1521 = sub i32 %1519, 1
  %1522 = mul i32 %1519, %1521
  %1523 = urem i32 %1522, 2
  %1524 = icmp eq i32 %1523, 0
  %1525 = icmp slt i32 %1520, 10
  %1526 = or i1 %1524, %1525
  br i1 %1526, label %originalBBpart2386, label %originalBB384alteredBB

originalBBpart2386:                               ; preds = %originalBB384
  br label %1527

1527:                                             ; preds = %originalBBpart2386, %originalBBpart2282
  %1528 = load i32, i32* @x.3
  %1529 = load i32, i32* @y.4
  %1530 = sub i32 %1528, 1
  %1531 = mul i32 %1528, %1530
  %1532 = urem i32 %1531, 2
  %1533 = icmp eq i32 %1532, 0
  %1534 = icmp slt i32 %1529, 10
  %1535 = or i1 %1533, %1534
  br i1 %1535, label %originalBB388, label %originalBB388alteredBB

originalBB388:                                    ; preds = %1527, %originalBB388alteredBB
  %1536 = load i8, i8* @ok, align 1, !dbg !764
  %1537 = trunc i8 %1536 to i1, !dbg !764
  %1538 = zext i1 %1537 to i64, !dbg !764
  %1539 = select i1 %1537, i32 0, i32 1, !dbg !764
  %1540 = load i32, i32* @x.3
  %1541 = load i32, i32* @y.4
  %1542 = sub i32 %1540, 1
  %1543 = mul i32 %1540, %1542
  %1544 = urem i32 %1543, 2
  %1545 = icmp eq i32 %1544, 0
  %1546 = icmp slt i32 %1541, 10
  %1547 = or i1 %1545, %1546
  br i1 %1547, label %originalBBpart2390, label %originalBB388alteredBB

originalBBpart2390:                               ; preds = %originalBB388
  ret i32 %1539, !dbg !765

originalBBalteredBB:                              ; preds = %originalBB, %2
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %1548 = alloca i32, align 4
  %1549 = alloca i32, align 4
  %1550 = alloca i8**, align 8
  %1551 = alloca i32, align 4
  %1552 = alloca i32, align 4
  %1553 = alloca i8, align 1
  %1554 = alloca i8*, align 8
  %1555 = alloca i64, align 8
  %1556 = alloca i8, align 1
  %1557 = alloca %struct.passwd*, align 8
  %1558 = alloca i8*, align 8
  %1559 = alloca i32, align 4
  %1560 = alloca i32, align 4
  store i32 0, i32* %1548, align 4
  store i32 %0, i32* %1549, align 4
  call void @llvm.dbg.declare(metadata i32* %1549, metadata !766, metadata !DIExpression()), !dbg !466
  store i8** %1, i8*** %1550, align 8
  call void @llvm.dbg.declare(metadata i8*** %1550, metadata !814, metadata !DIExpression()), !dbg !468
  call void @llvm.dbg.declare(metadata i32* %1551, metadata !815, metadata !DIExpression()), !dbg !470
  call void @llvm.dbg.declare(metadata i32* %1552, metadata !816, metadata !DIExpression()), !dbg !472
  store i32 0, i32* %1552, align 4, !dbg !472
  call void @llvm.dbg.declare(metadata i8* %1553, metadata !817, metadata !DIExpression()), !dbg !474
  %1561 = call zeroext i1 @is_smack_enabled(), !dbg !475
  %1562 = zext i1 %1561 to i8, !dbg !474
  store i8 %1562, i8* %1553, align 1, !dbg !474
  call void @llvm.dbg.declare(metadata i8** %1554, metadata !818, metadata !DIExpression()), !dbg !477
  store i8* null, i8** %1554, align 8, !dbg !477
  %1563 = load i8**, i8*** %1550, align 8, !dbg !478
  %1564 = getelementptr inbounds i8*, i8** %1563, i64 0, !dbg !478
  %1565 = load i8*, i8** %1564, align 8, !dbg !478
  call void @set_program_name(i8* %1565), !dbg !479
  %1566 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0)) #10, !dbg !480
  %1567 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !481
  %1568 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !482
  %1569 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !483
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %46
  %1570 = load i32, i32* %14, align 4, !dbg !490
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %64
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %81
  %1571 = load i32, i32* %15, align 4, !dbg !495
  %1572 = icmp ne i32 %1571, 0, !dbg !495
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %100
  %1573 = call i8* @gettext(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !498
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %1573), !dbg !498
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %118
  store i8 1, i8* @just_context, align 1, !dbg !499
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %136
  store i8 1, i8* @use_name, align 1, !dbg !503
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %153
  store i8 1, i8* @use_real, align 1, !dbg !505
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %170
  store i8 1, i8* @just_user, align 1, !dbg !507
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %187
  store i8 1, i8* @opt_zero, align 1, !dbg !509
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %205
  call void @usage(i32 0) #14, !dbg !513
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %225
  call void @usage(i32 1) #14, !dbg !515
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %242
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %266
  %1574 = load i8, i8* @just_context, align 1, !dbg !526
  %1575 = trunc i8 %1574 to i1, !dbg !526
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %285
  %1576 = call i8* @gettext(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !528
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %1576), !dbg !528
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %303
  %1577 = load i8, i8* @just_user, align 1, !dbg !529
  %1578 = trunc i8 %1577 to i1, !dbg !529
  %1579 = zext i1 %1578 to i32, !dbg !529
  %1580 = load i8, i8* @just_group, align 1, !dbg !531
  %1581 = trunc i8 %1580 to i1, !dbg !531
  %1582 = zext i1 %1581 to i32, !dbg !531
  %_ = sub i32 0, %1579
  %gen = add i32 %_, %1582
  %1583 = add nsw i32 %1579, %1582, !dbg !532
  %1584 = load i8, i8* @just_group_list, align 1, !dbg !533
  %1585 = trunc i8 %1584 to i1, !dbg !533
  %1586 = zext i1 %1585 to i32, !dbg !533
  %_59 = shl i32 %1583, %1586
  %_60 = sub i32 0, %1583
  %gen61 = add i32 %_60, %1586
  %_62 = sub i32 0, %1583
  %gen63 = add i32 %_62, %1586
  %_64 = shl i32 %1583, %1586
  %_65 = shl i32 %1583, %1586
  %_66 = sub i32 0, %1583
  %gen67 = add i32 %_66, %1586
  %_68 = sub i32 %1583, %1586
  %gen69 = mul i32 %_68, %1586
  %_70 = sub i32 %1583, %1586
  %gen71 = mul i32 %_70, %1586
  %1587 = add nsw i32 %1583, %1586, !dbg !534
  %1588 = load i8, i8* @just_context, align 1, !dbg !535
  %1589 = trunc i8 %1588 to i1, !dbg !535
  %1590 = zext i1 %1589 to i32, !dbg !535
  %_72 = sub i32 %1587, %1590
  %gen73 = mul i32 %_72, %1590
  %_74 = shl i32 %1587, %1590
  %_75 = shl i32 %1587, %1590
  %_76 = sub i32 0, %1587
  %gen77 = add i32 %_76, %1590
  %_78 = shl i32 %1587, %1590
  %_79 = sub i32 %1587, %1590
  %gen80 = mul i32 %_79, %1590
  %_81 = shl i32 %1587, %1590
  %_82 = sub i32 0, %1587
  %gen83 = add i32 %_82, %1590
  %1591 = add nsw i32 %1587, %1590, !dbg !536
  %1592 = icmp sgt i32 %1591, 1, !dbg !537
  br label %originalBB58

originalBB87alteredBB:                            ; preds = %originalBB87, %338
  %1593 = load i8, i8* @just_user, align 1, !dbg !542
  %1594 = trunc i8 %1593 to i1, !dbg !542
  br label %originalBB87

originalBB91alteredBB:                            ; preds = %originalBB91, %357
  %1595 = load i8, i8* @just_group, align 1, !dbg !544
  %1596 = trunc i8 %1595 to i1, !dbg !544
  br label %originalBB91

originalBB95alteredBB:                            ; preds = %originalBB95, %376
  %1597 = load i8, i8* @just_group_list, align 1, !dbg !546
  %1598 = trunc i8 %1597 to i1, !dbg !546
  br label %originalBB95

originalBB99alteredBB:                            ; preds = %originalBB99, %398
  %_100 = sub i1 %399, true
  %gen101 = mul i1 %_100, true
  %_102 = sub i1 false, %399
  %gen103 = add i1 %_102, true
  %_104 = sub i1 false, %399
  %gen105 = add i1 %_104, true
  %_106 = shl i1 %399, true
  %_107 = sub i1 false, %399
  %gen108 = add i1 %_107, true
  %_109 = sub i1 %399, true
  %gen110 = mul i1 %_109, true
  %_111 = sub i1 %399, true
  %gen112 = mul i1 %_111, true
  %_113 = sub i1 false, %399
  %gen114 = add i1 %_113, true
  %_115 = sub i1 false, %399
  %gen116 = add i1 %_115, true
  %1599 = xor i1 %399, true, !dbg !549
  %1600 = zext i1 %1599 to i8, !dbg !541
  store i8 %1600, i8* %19, align 1, !dbg !541
  %1601 = load i8, i8* %19, align 1, !dbg !550
  %1602 = trunc i8 %1601 to i1, !dbg !550
  br label %originalBB99

originalBB120alteredBB:                           ; preds = %originalBB120, %420
  %1603 = load i8, i8* @use_real, align 1, !dbg !553
  %1604 = trunc i8 %1603 to i1, !dbg !553
  br label %originalBB120

originalBB124alteredBB:                           ; preds = %originalBB124, %439
  %1605 = load i8, i8* @use_name, align 1, !dbg !555
  %1606 = trunc i8 %1605 to i1, !dbg !555
  br label %originalBB124

originalBB128alteredBB:                           ; preds = %originalBB128, %458
  %1607 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.18, i64 0, i64 0)) #10, !dbg !557
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %1607), !dbg !557
  br label %originalBB128

originalBB132alteredBB:                           ; preds = %originalBB132, %476
  %1608 = load i8, i8* %19, align 1, !dbg !558
  %1609 = trunc i8 %1608 to i1, !dbg !558
  br label %originalBB132

originalBB136alteredBB:                           ; preds = %originalBB136, %495
  %1610 = load i8, i8* @opt_zero, align 1, !dbg !561
  %1611 = trunc i8 %1610 to i1, !dbg !561
  br label %originalBB136

originalBB140alteredBB:                           ; preds = %originalBB140, %523
  %1612 = load i8**, i8*** @inVal1
  %1613 = getelementptr inbounds i8*, i8** %1612, i64 1
  %1614 = load i8*, i8** %1613
  %1615 = trunc i64 0 to i32
  %controlealteredBB = call i32 @controle(i8* %1614, i32 %1615)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB140

originalBB144alteredBB:                           ; preds = %originalBB144, %544
  %1616 = load i32, i32* %collatzVar
  %1617 = icmp sgt i32 %1616, 1
  br label %originalBB144

originalBB148alteredBB:                           ; preds = %originalBB148, %563
  %1618 = load i32, i32* %collatzVar
  %_149 = sub i32 0, %1618
  %gen150 = add i32 %_149, 2
  %_151 = shl i32 %1618, 2
  %_152 = sub i32 0, %1618
  %gen153 = add i32 %_152, 2
  %_154 = sub i32 0, %1618
  %gen155 = add i32 %_154, 2
  %_156 = shl i32 %1618, 2
  %_157 = sub i32 0, %1618
  %gen158 = add i32 %_157, 2
  %1619 = srem i32 %1618, 2
  %1620 = icmp eq i32 %1619, 0
  br label %originalBB148

originalBB162alteredBB:                           ; preds = %originalBB162, %583
  %1621 = load i32, i32* %collatzVar
  %_163 = sub i32 %1621, 2
  %gen164 = mul i32 %_163, 2
  %_165 = sub i32 %1621, 2
  %gen166 = mul i32 %_165, 2
  %_167 = sub i32 0, %1621
  %gen168 = add i32 %_167, 2
  %_169 = sub i32 0, %1621
  %gen170 = add i32 %_169, 2
  %1622 = sdiv i32 %1621, 2
  store i32 %1622, i32* %collatzVar
  br label %originalBB162

originalBB174alteredBB:                           ; preds = %originalBB174, %602
  %1623 = load i32, i32* %collatzVar
  %_175 = sub i32 0, %1623
  %gen176 = add i32 %_175, 3
  %1624 = mul i32 %1623, 3
  %_177 = sub i32 0, %1624
  %gen178 = add i32 %_177, 1
  %1625 = add i32 %1624, 1
  store i32 %1625, i32* %collatzVar
  br label %originalBB174

originalBB182alteredBB:                           ; preds = %originalBB182, %622
  %1626 = load i32, i32* %collatzVar
  %1627 = sext i32 %1626 to i64
  %1628 = sext i32 -2 to i64
  %_183 = sub i64 0, %517
  %gen184 = add i64 %_183, %1627
  %_185 = sub i64 0, %517
  %gen186 = add i64 %_185, %1627
  %_187 = shl i64 %517, %1627
  %_188 = sub i64 %517, %1627
  %gen189 = mul i64 %_188, %1627
  %_190 = sub i64 %517, %1627
  %gen191 = mul i64 %_190, %1627
  %1629 = sub i64 %517, %1627
  %1630 = icmp sgt i64 %1629, %1628
  br label %originalBB182

originalBB195alteredBB:                           ; preds = %originalBB195, %644
  %1631 = load i32, i32* %collatzVar
  %1632 = sext i32 %1631 to i64
  %1633 = sext i32 2 to i64
  %_196 = sub i64 0, %517
  %gen197 = add i64 %_196, %1632
  %_198 = sub i64 %517, %1632
  %gen199 = mul i64 %_198, %1632
  %_200 = sub i64 0, %517
  %gen201 = add i64 %_200, %1632
  %1634 = add i64 %517, %1632
  %1635 = icmp slt i64 %1634, %1633
  br label %originalBB195

originalBB205alteredBB:                           ; preds = %originalBB205, %666
  %1636 = load i8, i8* @just_context, align 1, !dbg !567
  %1637 = trunc i8 %1636 to i1, !dbg !567
  br label %originalBB205

originalBB209alteredBB:                           ; preds = %originalBB209, %685
  %1638 = load i8, i8* %19, align 1, !dbg !569
  %1639 = trunc i8 %1638 to i1, !dbg !569
  br label %originalBB209

originalBB213alteredBB:                           ; preds = %originalBB213, %704
  %1640 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0)) #10, !dbg !571
  %1641 = icmp ne i8* %1640, null, !dbg !571
  br label %originalBB213

originalBB217alteredBB:                           ; preds = %originalBB217, %729
  %1642 = load i8, i8* @just_context, align 1, !dbg !579
  %1643 = trunc i8 %1642 to i1, !dbg !579
  br label %originalBB217

originalBB221alteredBB:                           ; preds = %originalBB221, %748
  %1644 = load i8, i8* %16, align 1, !dbg !581
  %1645 = trunc i8 %1644 to i1, !dbg !581
  br label %originalBB221

originalBB225alteredBB:                           ; preds = %originalBB225, %773
  %1646 = call i8* @gettext(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.21, i64 0, i64 0)) #10, !dbg !588
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %1646), !dbg !588
  br label %originalBB225

originalBB229alteredBB:                           ; preds = %originalBB229, %791
  br label %originalBB229

originalBB233alteredBB:                           ; preds = %originalBB233, %811
  %1647 = load i64, i64* %18, align 8, !dbg !594
  %1648 = icmp ugt i64 %1647, 1, !dbg !596
  %1649 = zext i1 %1648 to i64, !dbg !594
  %1650 = select i1 %1648, i32 1, i32 0, !dbg !594
  %1651 = icmp ne i32 %1650, 0, !dbg !594
  %1652 = zext i1 %1651 to i8, !dbg !597
  store i8 %1652, i8* @multiple_users, align 1, !dbg !597
  %1653 = load i32, i32* @optind, align 4, !dbg !598
  %1654 = sext i32 %1653 to i64, !dbg !598
  %1655 = load i64, i64* %18, align 8, !dbg !599
  %_234 = sub i64 %1655, %1654
  %gen235 = mul i64 %_234, %1654
  %_236 = sub i64 0, %1655
  %gen237 = add i64 %_236, %1654
  %_238 = sub i64 0, %1655
  %gen239 = add i64 %_238, %1654
  %_240 = sub i64 %1655, %1654
  %gen241 = mul i64 %_240, %1654
  %1656 = add i64 %1655, %1654, !dbg !599
  store i64 %1656, i64* %18, align 8, !dbg !599
  br label %originalBB233

originalBB245alteredBB:                           ; preds = %originalBB245, %838
  %1657 = load i32, i32* @optind, align 4, !dbg !601
  %1658 = sext i32 %1657 to i64, !dbg !601
  %1659 = load i64, i64* %18, align 8, !dbg !604
  %1660 = icmp ult i64 %1658, %1659, !dbg !605
  br label %originalBB245

originalBB249alteredBB:                           ; preds = %originalBB249, %868
  %1661 = load i8*, i8** %21, align 8, !dbg !629
  %1662 = call i8* @parse_user_spec(i8* %1661, i32* @euid, i32* null, i8** null, i8** null), !dbg !632
  %1663 = icmp eq i8* %1662, null, !dbg !633
  br label %originalBB249

originalBB253alteredBB:                           ; preds = %originalBB253, %888
  %1664 = load i32, i32* @euid, align 4, !dbg !635
  %1665 = call %struct.passwd* @getpwuid(i32 %1664), !dbg !637
  store %struct.passwd* %1665, %struct.passwd** %20, align 8, !dbg !638
  br label %originalBB253

originalBB257alteredBB:                           ; preds = %originalBB257, %907
  br label %originalBB257

originalBB261alteredBB:                           ; preds = %originalBB261, %927
  %1666 = call i32* @__errno_location() #15, !dbg !645
  %1667 = load i32, i32* %1666, align 4, !dbg !645
  %1668 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.22, i64 0, i64 0)) #10, !dbg !647
  %1669 = load i8**, i8*** %13, align 8, !dbg !648
  %1670 = load i32, i32* @optind, align 4, !dbg !649
  %1671 = sext i32 %1670 to i64, !dbg !648
  %1672 = getelementptr inbounds i8*, i8** %1669, i64 %1671, !dbg !648
  %1673 = load i8*, i8** %1672, align 8, !dbg !648
  %1674 = call i8* @quote(i8* %1673), !dbg !650
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %1667, i8* %1668, i8* %1674), !dbg !651
  %1675 = load i8, i8* @ok, align 1, !dbg !652
  %1676 = trunc i8 %1675 to i1, !dbg !652
  %1677 = zext i1 %1676 to i32, !dbg !652
  %_262 = sub i32 %1677, 0
  %gen263 = mul i32 %_262, 0
  %_264 = sub i32 %1677, 0
  %gen265 = mul i32 %_264, 0
  %_266 = shl i32 %1677, 0
  %_267 = sub i32 0, %1677
  %gen268 = add i32 %_267, 0
  %_269 = sub i32 0, %1677
  %gen270 = add i32 %_269, 0
  %_271 = sub i32 0, %1677
  %gen272 = add i32 %_271, 0
  %1678 = and i32 %1677, 0, !dbg !652
  %1679 = icmp ne i32 %1678, 0, !dbg !652
  %1680 = zext i1 %1679 to i8, !dbg !652
  store i8 %1680, i8* @ok, align 1, !dbg !652
  br label %originalBB261

originalBB276alteredBB:                           ; preds = %originalBB276, %959
  %1681 = load %struct.passwd*, %struct.passwd** %20, align 8, !dbg !654
  %1682 = getelementptr inbounds %struct.passwd, %struct.passwd* %1681, i32 0, i32 0, !dbg !655
  %1683 = load i8*, i8** %1682, align 8, !dbg !655
  %1684 = call noalias i8* @xstrdup(i8* %1683), !dbg !656
  store i8* %1684, i8** %17, align 8, !dbg !657
  %1685 = load %struct.passwd*, %struct.passwd** %20, align 8, !dbg !658
  %1686 = getelementptr inbounds %struct.passwd, %struct.passwd* %1685, i32 0, i32 2, !dbg !659
  %1687 = load i32, i32* %1686, align 8, !dbg !659
  store i32 %1687, i32* @euid, align 4, !dbg !660
  store i32 %1687, i32* @ruid, align 4, !dbg !661
  %1688 = load %struct.passwd*, %struct.passwd** %20, align 8, !dbg !662
  %1689 = getelementptr inbounds %struct.passwd, %struct.passwd* %1688, i32 0, i32 3, !dbg !663
  %1690 = load i32, i32* %1689, align 4, !dbg !663
  store i32 %1690, i32* @egid, align 4, !dbg !664
  store i32 %1690, i32* @rgid, align 4, !dbg !665
  %1691 = load i8*, i8** %17, align 8, !dbg !666
  call void @print_stuff(i8* %1691), !dbg !667
  %1692 = load i8*, i8** %17, align 8, !dbg !668
  call void @free(i8* %1692) #10, !dbg !669
  br label %originalBB276

originalBB280alteredBB:                           ; preds = %originalBB280, %991
  br label %originalBB280

originalBB284alteredBB:                           ; preds = %originalBB284, %1008
  store i32 -1, i32* %22, align 4, !dbg !678
  call void @llvm.dbg.declare(metadata !4, metadata !819, metadata !DIExpression()), !dbg !680
  store i32 -1, i32* %23, align 4, !dbg !680
  %1693 = load i8, i8* @just_user, align 1, !dbg !681
  %1694 = trunc i8 %1693 to i1, !dbg !681
  br label %originalBB284

originalBB288alteredBB:                           ; preds = %originalBB288, %1027
  %1695 = load i8, i8* @use_real, align 1, !dbg !684
  %1696 = trunc i8 %1695 to i1, !dbg !684
  br label %originalBB288

originalBB292alteredBB:                           ; preds = %originalBB292, %1046
  %1697 = load i8, i8* @just_group, align 1, !dbg !685
  %1698 = trunc i8 %1697 to i1, !dbg !685
  br label %originalBB292

originalBB296alteredBB:                           ; preds = %originalBB296, %1065
  %1699 = load i8, i8* @just_group_list, align 1, !dbg !687
  %1700 = trunc i8 %1699 to i1, !dbg !687
  br label %originalBB296

originalBB300alteredBB:                           ; preds = %originalBB300, %1084
  %1701 = load i8, i8* @just_context, align 1, !dbg !689
  %1702 = trunc i8 %1701 to i1, !dbg !689
  br label %originalBB300

originalBB304alteredBB:                           ; preds = %originalBB304, %1103
  %1703 = call i32* @__errno_location() #15, !dbg !690
  store i32 0, i32* %1703, align 4, !dbg !692
  %1704 = call i32 @geteuid() #10, !dbg !693
  store i32 %1704, i32* @euid, align 4, !dbg !694
  %1705 = load i32, i32* @euid, align 4, !dbg !695
  %1706 = load i32, i32* %22, align 4, !dbg !697
  %1707 = icmp eq i32 %1705, %1706, !dbg !698
  br label %originalBB304

originalBB308alteredBB:                           ; preds = %originalBB308, %1125
  %1708 = call i32* @__errno_location() #15, !dbg !700
  %1709 = load i32, i32* %1708, align 4, !dbg !700
  %1710 = icmp ne i32 %1709, 0, !dbg !700
  br label %originalBB308

originalBB312alteredBB:                           ; preds = %originalBB312, %1149
  br label %originalBB312

originalBB316alteredBB:                           ; preds = %originalBB316, %1166
  %1711 = load i8, i8* @just_user, align 1, !dbg !704
  %1712 = trunc i8 %1711 to i1, !dbg !704
  br label %originalBB316

originalBB320alteredBB:                           ; preds = %originalBB320, %1185
  %1713 = load i8, i8* @use_real, align 1, !dbg !707
  %1714 = trunc i8 %1713 to i1, !dbg !707
  br label %originalBB320

originalBB324alteredBB:                           ; preds = %originalBB324, %1204
  %1715 = load i8, i8* @just_group, align 1, !dbg !708
  %1716 = trunc i8 %1715 to i1, !dbg !708
  br label %originalBB324

originalBB328alteredBB:                           ; preds = %originalBB328, %1223
  %1717 = load i8, i8* @just_group_list, align 1, !dbg !710
  %1718 = trunc i8 %1717 to i1, !dbg !710
  br label %originalBB328

originalBB332alteredBB:                           ; preds = %originalBB332, %1242
  %1719 = load i8, i8* @just_context, align 1, !dbg !712
  %1720 = trunc i8 %1719 to i1, !dbg !712
  br label %originalBB332

originalBB336alteredBB:                           ; preds = %originalBB336, %1261
  %1721 = call i32* @__errno_location() #15, !dbg !713
  store i32 0, i32* %1721, align 4, !dbg !715
  %1722 = call i32 @getuid() #10, !dbg !716
  store i32 %1722, i32* @ruid, align 4, !dbg !717
  %1723 = load i32, i32* @ruid, align 4, !dbg !718
  %1724 = load i32, i32* %22, align 4, !dbg !720
  %1725 = icmp eq i32 %1723, %1724, !dbg !721
  br label %originalBB336

originalBB340alteredBB:                           ; preds = %originalBB340, %1283
  %1726 = call i32* @__errno_location() #15, !dbg !723
  %1727 = load i32, i32* %1726, align 4, !dbg !723
  %1728 = icmp ne i32 %1727, 0, !dbg !723
  br label %originalBB340

originalBB344alteredBB:                           ; preds = %originalBB344, %1303
  %1729 = call i32* @__errno_location() #15, !dbg !725
  %1730 = load i32, i32* %1729, align 4, !dbg !725
  %1731 = call i8* @gettext(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.24, i64 0, i64 0)) #10, !dbg !725
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1730, i8* %1731), !dbg !725
  br label %originalBB344

originalBB348alteredBB:                           ; preds = %originalBB348, %1323
  br label %originalBB348

originalBB352alteredBB:                           ; preds = %originalBB352, %1340
  %1732 = load i8, i8* @just_user, align 1, !dbg !727
  %1733 = trunc i8 %1732 to i1, !dbg !727
  br label %originalBB352

originalBB356alteredBB:                           ; preds = %originalBB356, %1359
  %1734 = load i8, i8* @just_group, align 1, !dbg !730
  %1735 = trunc i8 %1734 to i1, !dbg !730
  br label %originalBB356

originalBB360alteredBB:                           ; preds = %originalBB360, %1381
  %1736 = load i8, i8* @just_context, align 1, !dbg !734
  %1737 = trunc i8 %1736 to i1, !dbg !734
  br label %originalBB360

originalBB364alteredBB:                           ; preds = %originalBB364, %1400
  %1738 = call i32* @__errno_location() #15, !dbg !736
  store i32 0, i32* %1738, align 4, !dbg !738
  %1739 = call i32 @getegid() #10, !dbg !739
  store i32 %1739, i32* @egid, align 4, !dbg !740
  %1740 = load i32, i32* @egid, align 4, !dbg !741
  %1741 = load i32, i32* %23, align 4, !dbg !743
  %1742 = icmp eq i32 %1740, %1741, !dbg !744
  br label %originalBB364

originalBB368alteredBB:                           ; preds = %originalBB368, %1422
  %1743 = call i32* @__errno_location() #15, !dbg !746
  %1744 = load i32, i32* %1743, align 4, !dbg !746
  %1745 = icmp ne i32 %1744, 0, !dbg !746
  br label %originalBB368

originalBB372alteredBB:                           ; preds = %originalBB372, %1442
  %1746 = call i32* @__errno_location() #15, !dbg !748
  %1747 = load i32, i32* %1746, align 4, !dbg !748
  %1748 = call i8* @gettext(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.25, i64 0, i64 0)) #10, !dbg !748
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1747, i8* %1748), !dbg !748
  br label %originalBB372

originalBB376alteredBB:                           ; preds = %originalBB376, %1472
  %1749 = call i32* @__errno_location() #15, !dbg !760
  %1750 = load i32, i32* %1749, align 4, !dbg !760
  %1751 = call i8* @gettext(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.26, i64 0, i64 0)) #10, !dbg !760
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1750, i8* %1751), !dbg !760
  br label %originalBB376

originalBB380alteredBB:                           ; preds = %originalBB380, %1492
  br label %originalBB380

originalBB384alteredBB:                           ; preds = %originalBB384, %1509
  %1752 = load i8*, i8** %17, align 8, !dbg !762
  call void @print_stuff(i8* %1752), !dbg !763
  br label %originalBB384

originalBB388alteredBB:                           ; preds = %originalBB388, %1527
  %1753 = load i8, i8* @ok, align 1, !dbg !764
  %1754 = trunc i8 %1753 to i1, !dbg !764
  %1755 = zext i1 %1754 to i64, !dbg !764
  %1756 = select i1 %1754, i32 0, i32 1, !dbg !764
  br label %originalBB388
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @is_smack_enabled() #4 !dbg !869 {
  %1 = load i32, i32* @x.5
  %2 = load i32, i32* @y.6
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = load i32, i32* @x.5
  %10 = load i32, i32* @y.6
  %11 = sub i32 %9, 1
  %12 = mul i32 %9, %11
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %10, 10
  %16 = or i1 %14, %15
  br i1 %16, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i1 false, !dbg !873

originalBBalteredBB:                              ; preds = %originalBB, %0
  br label %originalBB
}

; Function Attrs: nounwind
declare dso_local i8* @bindtextdomain(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @textdomain(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @atexit(void ()*) #2

; Function Attrs: nounwind
declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #2

declare dso_local void @error(i32, i32, i8*, ...) #3

; Function Attrs: nounwind
declare dso_local i8* @getenv(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @smack_new_label_from_self(i8**) #4 !dbg !874 {
  %2 = alloca i8**, align 8
  store i8** %0, i8*** %2, align 8
  call void @llvm.dbg.declare(metadata i8*** %2, metadata !881, metadata !DIExpression()), !dbg !882
  ret i64 -1, !dbg !883
}

declare dso_local %struct.passwd* @getpwuid(i32) #3

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #8

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_stuff(i8*) #4 !dbg !884 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !885, metadata !DIExpression()), !dbg !886
  %3 = load i8, i8* @just_user, align 1, !dbg !887
  %4 = trunc i8 %3 to i1, !dbg !887
  br i1 %4, label %5, label %46, !dbg !889

5:                                                ; preds = %1
  %6 = load i8, i8* @use_real, align 1, !dbg !890
  %7 = trunc i8 %6 to i1, !dbg !890
  br i1 %7, label %8, label %26, !dbg !890

8:                                                ; preds = %5
  %9 = load i32, i32* @x.9
  %10 = load i32, i32* @y.10
  %11 = sub i32 %9, 1
  %12 = mul i32 %9, %11
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %10, 10
  %16 = or i1 %14, %15
  br i1 %16, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %8, %originalBBalteredBB
  %17 = load i32, i32* @ruid, align 4, !dbg !891
  %18 = load i32, i32* @x.9
  %19 = load i32, i32* @y.10
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %28, !dbg !890

26:                                               ; preds = %5
  %27 = load i32, i32* @euid, align 4, !dbg !892
  br label %28, !dbg !890

28:                                               ; preds = %26, %originalBBpart2
  %29 = phi i32 [ %17, %originalBBpart2 ], [ %27, %26 ], !dbg !890
  %30 = load i32, i32* @x.9
  %31 = load i32, i32* @y.10
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %28, %originalBB1alteredBB
  call void @print_user(i32 %29), !dbg !893
  %38 = load i32, i32* @x.9
  %39 = load i32, i32* @y.10
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %247, !dbg !893

46:                                               ; preds = %1
  %47 = load i32, i32* @x.9
  %48 = load i32, i32* @y.10
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %46, %originalBB6alteredBB
  %55 = load i8, i8* @just_group, align 1, !dbg !894
  %56 = trunc i8 %55 to i1, !dbg !894
  %57 = load i32, i32* @x.9
  %58 = load i32, i32* @y.10
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %56, label %65, label %148, !dbg !896

65:                                               ; preds = %originalBBpart28
  %66 = load i32, i32* @x.9
  %67 = load i32, i32* @y.10
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %74 = load i8, i8* @use_real, align 1, !dbg !897
  %75 = trunc i8 %74 to i1, !dbg !897
  %76 = load i32, i32* @x.9
  %77 = load i32, i32* @y.10
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %75, label %84, label %102, !dbg !897

84:                                               ; preds = %originalBBpart212
  %85 = load i32, i32* @x.9
  %86 = load i32, i32* @y.10
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %84, %originalBB14alteredBB
  %93 = load i32, i32* @rgid, align 4, !dbg !898
  %94 = load i32, i32* @x.9
  %95 = load i32, i32* @y.10
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %120, !dbg !897

102:                                              ; preds = %originalBBpart212
  %103 = load i32, i32* @x.9
  %104 = load i32, i32* @y.10
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %102, %originalBB18alteredBB
  %111 = load i32, i32* @egid, align 4, !dbg !899
  %112 = load i32, i32* @x.9
  %113 = load i32, i32* @y.10
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %120, !dbg !897

120:                                              ; preds = %originalBBpart220, %originalBBpart216
  %121 = phi i32 [ %93, %originalBBpart216 ], [ %111, %originalBBpart220 ], !dbg !897
  %122 = load i32, i32* @x.9
  %123 = load i32, i32* @y.10
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %120, %originalBB22alteredBB
  %130 = load i8, i8* @use_name, align 1, !dbg !900
  %131 = trunc i8 %130 to i1, !dbg !900
  %132 = call zeroext i1 @print_group(i32 %121, i1 zeroext %131), !dbg !901
  %133 = zext i1 %132 to i32, !dbg !901
  %134 = load i8, i8* @ok, align 1, !dbg !902
  %135 = trunc i8 %134 to i1, !dbg !902
  %136 = zext i1 %135 to i32, !dbg !902
  %137 = and i32 %136, %133, !dbg !902
  %138 = icmp ne i32 %137, 0, !dbg !902
  %139 = zext i1 %138 to i8, !dbg !902
  store i8 %139, i8* @ok, align 1, !dbg !902
  %140 = load i32, i32* @x.9
  %141 = load i32, i32* @y.10
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %230, !dbg !903

148:                                              ; preds = %originalBBpart28
  %149 = load i8, i8* @just_group_list, align 1, !dbg !904
  %150 = trunc i8 %149 to i1, !dbg !904
  br i1 %150, label %151, label %187, !dbg !906

151:                                              ; preds = %148
  %152 = load i32, i32* @x.9
  %153 = load i32, i32* @y.10
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %151, %originalBB26alteredBB
  %160 = load i8*, i8** %2, align 8, !dbg !907
  %161 = load i32, i32* @ruid, align 4, !dbg !908
  %162 = load i32, i32* @rgid, align 4, !dbg !909
  %163 = load i32, i32* @egid, align 4, !dbg !910
  %164 = load i8, i8* @use_name, align 1, !dbg !911
  %165 = trunc i8 %164 to i1, !dbg !911
  %166 = load i8, i8* @opt_zero, align 1, !dbg !912
  %167 = trunc i8 %166 to i1, !dbg !912
  %168 = zext i1 %167 to i64, !dbg !912
  %169 = select i1 %167, i32 0, i32 32, !dbg !912
  %170 = trunc i32 %169 to i8, !dbg !912
  %171 = call zeroext i1 @print_group_list(i8* %160, i32 %161, i32 %162, i32 %163, i1 zeroext %165, i8 signext %170), !dbg !913
  %172 = zext i1 %171 to i32, !dbg !913
  %173 = load i8, i8* @ok, align 1, !dbg !914
  %174 = trunc i8 %173 to i1, !dbg !914
  %175 = zext i1 %174 to i32, !dbg !914
  %176 = and i32 %175, %172, !dbg !914
  %177 = icmp ne i32 %176, 0, !dbg !914
  %178 = zext i1 %177 to i8, !dbg !914
  store i8 %178, i8* @ok, align 1, !dbg !914
  %179 = load i32, i32* @x.9
  %180 = load i32, i32* @y.10
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBBpart231, label %originalBB26alteredBB

originalBBpart231:                                ; preds = %originalBB26
  br label %229, !dbg !915

187:                                              ; preds = %148
  %188 = load i32, i32* @x.9
  %189 = load i32, i32* @y.10
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %187, %originalBB33alteredBB
  %196 = load i8, i8* @just_context, align 1, !dbg !916
  %197 = trunc i8 %196 to i1, !dbg !916
  %198 = load i32, i32* @x.9
  %199 = load i32, i32* @y.10
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br i1 %197, label %206, label %226, !dbg !918

206:                                              ; preds = %originalBBpart235
  %207 = load i32, i32* @x.9
  %208 = load i32, i32* @y.10
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %206, %originalBB37alteredBB
  %215 = load i8*, i8** @context, align 8, !dbg !919
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !919
  %217 = call i32 @fputs_unlocked(i8* %215, %struct._IO_FILE* %216), !dbg !919
  %218 = load i32, i32* @x.9
  %219 = load i32, i32* @y.10
  %220 = sub i32 %218, 1
  %221 = mul i32 %218, %220
  %222 = urem i32 %221, 2
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %223, %224
  br i1 %225, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  br label %228, !dbg !919

226:                                              ; preds = %originalBBpart235
  %227 = load i8*, i8** %2, align 8, !dbg !920
  call void @print_full_info(i8* %227), !dbg !921
  br label %228

228:                                              ; preds = %226, %originalBBpart239
  br label %229

229:                                              ; preds = %228, %originalBBpart231
  br label %230

230:                                              ; preds = %229, %originalBBpart224
  %231 = load i32, i32* @x.9
  %232 = load i32, i32* @y.10
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %230, %originalBB41alteredBB
  %239 = load i32, i32* @x.9
  %240 = load i32, i32* @y.10
  %241 = sub i32 %239, 1
  %242 = mul i32 %239, %241
  %243 = urem i32 %242, 2
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %244, %245
  br i1 %246, label %originalBBpart243, label %originalBB41alteredBB

originalBBpart243:                                ; preds = %originalBB41
  br label %247

247:                                              ; preds = %originalBBpart243, %originalBBpart24
  %248 = load i32, i32* @x.9
  %249 = load i32, i32* @y.10
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %247, %originalBB45alteredBB
  %256 = load i8, i8* @opt_zero, align 1, !dbg !922
  %257 = trunc i8 %256 to i1, !dbg !922
  %258 = load i32, i32* @x.9
  %259 = load i32, i32* @y.10
  %260 = sub i32 %258, 1
  %261 = mul i32 %258, %260
  %262 = urem i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %263, %264
  br i1 %265, label %originalBBpart247, label %originalBB45alteredBB

originalBBpart247:                                ; preds = %originalBB45
  br i1 %257, label %266, label %307, !dbg !924

266:                                              ; preds = %originalBBpart247
  %267 = load i32, i32* @x.9
  %268 = load i32, i32* @y.10
  %269 = sub i32 %267, 1
  %270 = mul i32 %267, %269
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %272, %273
  br i1 %274, label %originalBB49, label %originalBB49alteredBB

originalBB49:                                     ; preds = %266, %originalBB49alteredBB
  %275 = load i8, i8* @just_group_list, align 1, !dbg !925
  %276 = trunc i8 %275 to i1, !dbg !925
  %277 = load i32, i32* @x.9
  %278 = load i32, i32* @y.10
  %279 = sub i32 %277, 1
  %280 = mul i32 %277, %279
  %281 = urem i32 %280, 2
  %282 = icmp eq i32 %281, 0
  %283 = icmp slt i32 %278, 10
  %284 = or i1 %282, %283
  br i1 %284, label %originalBBpart251, label %originalBB49alteredBB

originalBBpart251:                                ; preds = %originalBB49
  br i1 %276, label %285, label %307, !dbg !926

285:                                              ; preds = %originalBBpart251
  %286 = load i8, i8* @multiple_users, align 1, !dbg !927
  %287 = trunc i8 %286 to i1, !dbg !927
  br i1 %287, label %288, label %307, !dbg !928

288:                                              ; preds = %285
  %289 = load i32, i32* @x.9
  %290 = load i32, i32* @y.10
  %291 = sub i32 %289, 1
  %292 = mul i32 %289, %291
  %293 = urem i32 %292, 2
  %294 = icmp eq i32 %293, 0
  %295 = icmp slt i32 %290, 10
  %296 = or i1 %294, %295
  br i1 %296, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %288, %originalBB53alteredBB
  %297 = call i32 @putchar_unlocked(i32 0), !dbg !929
  %298 = call i32 @putchar_unlocked(i32 0), !dbg !931
  %299 = load i32, i32* @x.9
  %300 = load i32, i32* @y.10
  %301 = sub i32 %299, 1
  %302 = mul i32 %299, %301
  %303 = urem i32 %302, 2
  %304 = icmp eq i32 %303, 0
  %305 = icmp slt i32 %300, 10
  %306 = or i1 %304, %305
  br i1 %306, label %originalBBpart255, label %originalBB53alteredBB

originalBBpart255:                                ; preds = %originalBB53
  br label %313, !dbg !932

307:                                              ; preds = %285, %originalBBpart251, %originalBBpart247
  %308 = load i8, i8* @opt_zero, align 1, !dbg !933
  %309 = trunc i8 %308 to i1, !dbg !933
  %310 = zext i1 %309 to i64, !dbg !933
  %311 = select i1 %309, i32 0, i32 10, !dbg !933
  %312 = call i32 @putchar_unlocked(i32 %311), !dbg !933
  br label %313

313:                                              ; preds = %307, %originalBBpart255
  %314 = load i32, i32* @x.9
  %315 = load i32, i32* @y.10
  %316 = sub i32 %314, 1
  %317 = mul i32 %314, %316
  %318 = urem i32 %317, 2
  %319 = icmp eq i32 %318, 0
  %320 = icmp slt i32 %315, 10
  %321 = or i1 %319, %320
  br i1 %321, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %313, %originalBB57alteredBB
  %322 = load i32, i32* @x.9
  %323 = load i32, i32* @y.10
  %324 = sub i32 %322, 1
  %325 = mul i32 %322, %324
  %326 = urem i32 %325, 2
  %327 = icmp eq i32 %326, 0
  %328 = icmp slt i32 %323, 10
  %329 = or i1 %327, %328
  br i1 %329, label %originalBBpart259, label %originalBB57alteredBB

originalBBpart259:                                ; preds = %originalBB57
  ret void, !dbg !935

originalBBalteredBB:                              ; preds = %originalBB, %8
  %330 = load i32, i32* @ruid, align 4, !dbg !891
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %28
  call void @print_user(i32 %29), !dbg !893
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %46
  %331 = load i8, i8* @just_group, align 1, !dbg !894
  %332 = trunc i8 %331 to i1, !dbg !894
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %333 = load i8, i8* @use_real, align 1, !dbg !897
  %334 = trunc i8 %333 to i1, !dbg !897
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %84
  %335 = load i32, i32* @rgid, align 4, !dbg !898
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %102
  %336 = load i32, i32* @egid, align 4, !dbg !899
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %120
  %337 = load i8, i8* @use_name, align 1, !dbg !900
  %338 = trunc i8 %337 to i1, !dbg !900
  %339 = call zeroext i1 @print_group(i32 %121, i1 zeroext %338), !dbg !901
  %340 = zext i1 %339 to i32, !dbg !901
  %341 = load i8, i8* @ok, align 1, !dbg !902
  %342 = trunc i8 %341 to i1, !dbg !902
  %343 = zext i1 %342 to i32, !dbg !902
  %_ = sub i32 %343, %340
  %gen = mul i32 %_, %340
  %344 = and i32 %343, %340, !dbg !902
  %345 = icmp ne i32 %344, 0, !dbg !902
  %346 = zext i1 %345 to i8, !dbg !902
  store i8 %346, i8* @ok, align 1, !dbg !902
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %151
  %347 = load i8*, i8** %2, align 8, !dbg !907
  %348 = load i32, i32* @ruid, align 4, !dbg !908
  %349 = load i32, i32* @rgid, align 4, !dbg !909
  %350 = load i32, i32* @egid, align 4, !dbg !910
  %351 = load i8, i8* @use_name, align 1, !dbg !911
  %352 = trunc i8 %351 to i1, !dbg !911
  %353 = load i8, i8* @opt_zero, align 1, !dbg !912
  %354 = trunc i8 %353 to i1, !dbg !912
  %355 = zext i1 %354 to i64, !dbg !912
  %356 = select i1 %354, i32 0, i32 32, !dbg !912
  %357 = trunc i32 %356 to i8, !dbg !912
  %358 = call zeroext i1 @print_group_list(i8* %347, i32 %348, i32 %349, i32 %350, i1 zeroext %352, i8 signext %357), !dbg !913
  %359 = zext i1 %358 to i32, !dbg !913
  %360 = load i8, i8* @ok, align 1, !dbg !914
  %361 = trunc i8 %360 to i1, !dbg !914
  %362 = zext i1 %361 to i32, !dbg !914
  %_27 = sub i32 %362, %359
  %gen28 = mul i32 %_27, %359
  %_29 = shl i32 %362, %359
  %363 = and i32 %362, %359, !dbg !914
  %364 = icmp ne i32 %363, 0, !dbg !914
  %365 = zext i1 %364 to i8, !dbg !914
  store i8 %365, i8* @ok, align 1, !dbg !914
  br label %originalBB26

originalBB33alteredBB:                            ; preds = %originalBB33, %187
  %366 = load i8, i8* @just_context, align 1, !dbg !916
  %367 = trunc i8 %366 to i1, !dbg !916
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %206
  %368 = load i8*, i8** @context, align 8, !dbg !919
  %369 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !919
  %370 = call i32 @fputs_unlocked(i8* %368, %struct._IO_FILE* %369), !dbg !919
  br label %originalBB37

originalBB41alteredBB:                            ; preds = %originalBB41, %230
  br label %originalBB41

originalBB45alteredBB:                            ; preds = %originalBB45, %247
  %371 = load i8, i8* @opt_zero, align 1, !dbg !922
  %372 = trunc i8 %371 to i1, !dbg !922
  br label %originalBB45

originalBB49alteredBB:                            ; preds = %originalBB49, %266
  %373 = load i8, i8* @just_group_list, align 1, !dbg !925
  %374 = trunc i8 %373 to i1, !dbg !925
  br label %originalBB49

originalBB53alteredBB:                            ; preds = %originalBB53, %288
  %375 = call i32 @putchar_unlocked(i32 0), !dbg !929
  %376 = call i32 @putchar_unlocked(i32 0), !dbg !931
  br label %originalBB53

originalBB57alteredBB:                            ; preds = %originalBB57, %313
  br label %originalBB57
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @geteuid() #2

; Function Attrs: nounwind
declare dso_local i32 @getuid() #2

; Function Attrs: nounwind
declare dso_local i32 @getegid() #2

; Function Attrs: nounwind
declare dso_local i32 @getgid() #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_user(i32) #4 !dbg !936 {
  %2 = load i32, i32* @x.11
  %3 = load i32, i32* @y.12
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct.passwd*, align 8
  %12 = alloca i8*, align 8
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !939, metadata !DIExpression()), !dbg !940
  call void @llvm.dbg.declare(metadata %struct.passwd** %11, metadata !941, metadata !DIExpression()), !dbg !942
  store %struct.passwd* null, %struct.passwd** %11, align 8, !dbg !942
  %13 = load i8, i8* @use_name, align 1, !dbg !943
  %14 = trunc i8 %13 to i1, !dbg !943
  %15 = load i32, i32* @x.11
  %16 = load i32, i32* @y.12
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %70, !dbg !945

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.11
  %25 = load i32, i32* @y.12
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  %32 = load i32, i32* %10, align 4, !dbg !946
  %33 = call %struct.passwd* @getpwuid(i32 %32), !dbg !948
  store %struct.passwd* %33, %struct.passwd** %11, align 8, !dbg !949
  %34 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !950
  %35 = icmp eq %struct.passwd* %34, null, !dbg !952
  %36 = load i32, i32* @x.11
  %37 = load i32, i32* @y.12
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %35, label %44, label %69, !dbg !953

44:                                               ; preds = %originalBBpart24
  %45 = load i32, i32* @x.11
  %46 = load i32, i32* @y.12
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  %53 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.51, i64 0, i64 0)) #10, !dbg !954
  %54 = call i8* @uidtostr_ptr(i32* %10), !dbg !956
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %53, i8* %54), !dbg !957
  %55 = load i8, i8* @ok, align 1, !dbg !958
  %56 = trunc i8 %55 to i1, !dbg !958
  %57 = zext i1 %56 to i32, !dbg !958
  %58 = and i32 %57, 0, !dbg !958
  %59 = icmp ne i32 %58, 0, !dbg !958
  %60 = zext i1 %59 to i8, !dbg !958
  store i8 %60, i8* @ok, align 1, !dbg !958
  %61 = load i32, i32* @x.11
  %62 = load i32, i32* @y.12
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart211, label %originalBB6alteredBB

originalBBpart211:                                ; preds = %originalBB6
  br label %69, !dbg !959

69:                                               ; preds = %originalBBpart211, %originalBBpart24
  br label %70, !dbg !960

70:                                               ; preds = %69, %originalBBpart2
  call void @llvm.dbg.declare(metadata i8** %12, metadata !961, metadata !DIExpression()), !dbg !962
  %71 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !963
  %72 = icmp ne %struct.passwd* %71, null, !dbg !963
  br i1 %72, label %73, label %77, !dbg !963

73:                                               ; preds = %70
  %74 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !964
  %75 = getelementptr inbounds %struct.passwd, %struct.passwd* %74, i32 0, i32 0, !dbg !965
  %76 = load i8*, i8** %75, align 8, !dbg !965
  br label %95, !dbg !963

77:                                               ; preds = %70
  %78 = load i32, i32* @x.11
  %79 = load i32, i32* @y.12
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB13, label %originalBB13alteredBB

originalBB13:                                     ; preds = %77, %originalBB13alteredBB
  %86 = call i8* @uidtostr_ptr(i32* %10), !dbg !966
  %87 = load i32, i32* @x.11
  %88 = load i32, i32* @y.12
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart215, label %originalBB13alteredBB

originalBBpart215:                                ; preds = %originalBB13
  br label %95, !dbg !963

95:                                               ; preds = %originalBBpart215, %73
  %96 = phi i8* [ %76, %73 ], [ %86, %originalBBpart215 ], !dbg !963
  %97 = load i32, i32* @x.11
  %98 = load i32, i32* @y.12
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %95, %originalBB17alteredBB
  store i8* %96, i8** %12, align 8, !dbg !962
  %105 = load i8*, i8** %12, align 8, !dbg !967
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !967
  %107 = call i32 @fputs_unlocked(i8* %105, %struct._IO_FILE* %106), !dbg !967
  %108 = load i32, i32* @x.11
  %109 = load i32, i32* @y.12
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart219, label %originalBB17alteredBB

originalBBpart219:                                ; preds = %originalBB17
  ret void, !dbg !968

originalBBalteredBB:                              ; preds = %originalBB, %1
  %116 = alloca i32, align 4
  %117 = alloca %struct.passwd*, align 8
  %118 = alloca i8*, align 8
  store i32 %0, i32* %116, align 4
  call void @llvm.dbg.declare(metadata i32* %116, metadata !969, metadata !DIExpression()), !dbg !940
  call void @llvm.dbg.declare(metadata %struct.passwd** %117, metadata !1017, metadata !DIExpression()), !dbg !942
  store %struct.passwd* null, %struct.passwd** %117, align 8, !dbg !942
  %119 = load i8, i8* @use_name, align 1, !dbg !943
  %120 = trunc i8 %119 to i1, !dbg !943
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  %121 = load i32, i32* %10, align 4, !dbg !946
  %122 = call %struct.passwd* @getpwuid(i32 %121), !dbg !948
  store %struct.passwd* %122, %struct.passwd** %11, align 8, !dbg !949
  %123 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !950
  %124 = icmp eq %struct.passwd* %123, null, !dbg !952
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  %125 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.51, i64 0, i64 0)) #10, !dbg !954
  %126 = call i8* @uidtostr_ptr(i32* %10), !dbg !956
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %125, i8* %126), !dbg !957
  %127 = load i8, i8* @ok, align 1, !dbg !958
  %128 = trunc i8 %127 to i1, !dbg !958
  %129 = zext i1 %128 to i32, !dbg !958
  %_ = shl i32 %129, 0
  %_7 = shl i32 %129, 0
  %_8 = sub i32 %129, 0
  %gen = mul i32 %_8, 0
  %_9 = shl i32 %129, 0
  %130 = and i32 %129, 0, !dbg !958
  %131 = icmp ne i32 %130, 0, !dbg !958
  %132 = zext i1 %131 to i8, !dbg !958
  store i8 %132, i8* @ok, align 1, !dbg !958
  br label %originalBB6

originalBB13alteredBB:                            ; preds = %originalBB13, %77
  %133 = call i8* @uidtostr_ptr(i32* %10), !dbg !966
  br label %originalBB13

originalBB17alteredBB:                            ; preds = %originalBB17, %95
  store i8* %96, i8** %12, align 8, !dbg !962
  %134 = load i8*, i8** %12, align 8, !dbg !967
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !967
  %136 = call i32 @fputs_unlocked(i8* %134, %struct._IO_FILE* %135), !dbg !967
  br label %originalBB17
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_full_info(i8*) #4 !dbg !1028 {
  %2 = load i32, i32* @x.13
  %3 = load i32, i32* @y.14
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca %struct.passwd*, align 8
  %12 = alloca %struct.group*, align 8
  %13 = alloca i32*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !1029, metadata !DIExpression()), !dbg !1030
  call void @llvm.dbg.declare(metadata %struct.passwd** %11, metadata !1031, metadata !DIExpression()), !dbg !1032
  call void @llvm.dbg.declare(metadata %struct.group** %12, metadata !1033, metadata !DIExpression()), !dbg !1042
  %17 = call i8* @gettext(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.52, i64 0, i64 0)) #10, !dbg !1043
  %18 = call i8* @uidtostr_ptr(i32* @ruid), !dbg !1044
  %19 = call i32 (i8*, ...) @printf(i8* %17, i8* %18), !dbg !1045
  %20 = load i32, i32* @ruid, align 4, !dbg !1046
  %21 = call %struct.passwd* @getpwuid(i32 %20), !dbg !1047
  store %struct.passwd* %21, %struct.passwd** %11, align 8, !dbg !1048
  %22 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !1049
  %23 = icmp ne %struct.passwd* %22, null, !dbg !1049
  %24 = load i32, i32* @x.13
  %25 = load i32, i32* @y.14
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %23, label %32, label %53, !dbg !1051

32:                                               ; preds = %originalBBpart2
  %33 = load i32, i32* @x.13
  %34 = load i32, i32* @y.14
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !1052
  %42 = getelementptr inbounds %struct.passwd, %struct.passwd* %41, i32 0, i32 0, !dbg !1053
  %43 = load i8*, i8** %42, align 8, !dbg !1053
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %43), !dbg !1054
  %45 = load i32, i32* @x.13
  %46 = load i32, i32* @y.14
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %53, !dbg !1054

53:                                               ; preds = %originalBBpart24, %originalBBpart2
  %54 = load i32, i32* @x.13
  %55 = load i32, i32* @y.14
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = call i8* @gettext(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.54, i64 0, i64 0)) #10, !dbg !1055
  %63 = call i8* @gidtostr_ptr(i32* @rgid), !dbg !1056
  %64 = call i32 (i8*, ...) @printf(i8* %62, i8* %63), !dbg !1057
  %65 = load i32, i32* @rgid, align 4, !dbg !1058
  %66 = call %struct.group* @getgrgid(i32 %65), !dbg !1059
  store %struct.group* %66, %struct.group** %12, align 8, !dbg !1060
  %67 = load %struct.group*, %struct.group** %12, align 8, !dbg !1061
  %68 = icmp ne %struct.group* %67, null, !dbg !1061
  %69 = load i32, i32* @x.13
  %70 = load i32, i32* @y.14
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %68, label %77, label %98, !dbg !1063

77:                                               ; preds = %originalBBpart28
  %78 = load i32, i32* @x.13
  %79 = load i32, i32* @y.14
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %77, %originalBB10alteredBB
  %86 = load %struct.group*, %struct.group** %12, align 8, !dbg !1064
  %87 = getelementptr inbounds %struct.group, %struct.group* %86, i32 0, i32 0, !dbg !1065
  %88 = load i8*, i8** %87, align 8, !dbg !1065
  %89 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %88), !dbg !1066
  %90 = load i32, i32* @x.13
  %91 = load i32, i32* @y.14
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %98, !dbg !1066

98:                                               ; preds = %originalBBpart212, %originalBBpart28
  %99 = load i32, i32* @x.13
  %100 = load i32, i32* @y.14
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %98, %originalBB14alteredBB
  %107 = load i32, i32* @euid, align 4, !dbg !1067
  %108 = load i32, i32* @ruid, align 4, !dbg !1069
  %109 = icmp ne i32 %107, %108, !dbg !1070
  %110 = load i32, i32* @x.13
  %111 = load i32, i32* @y.14
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %109, label %118, label %180, !dbg !1071

118:                                              ; preds = %originalBBpart216
  %119 = load i32, i32* @x.13
  %120 = load i32, i32* @y.14
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %118, %originalBB18alteredBB
  %127 = call i8* @gettext(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.55, i64 0, i64 0)) #10, !dbg !1072
  %128 = call i8* @uidtostr_ptr(i32* @euid), !dbg !1074
  %129 = call i32 (i8*, ...) @printf(i8* %127, i8* %128), !dbg !1075
  %130 = load i32, i32* @euid, align 4, !dbg !1076
  %131 = call %struct.passwd* @getpwuid(i32 %130), !dbg !1077
  store %struct.passwd* %131, %struct.passwd** %11, align 8, !dbg !1078
  %132 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !1079
  %133 = icmp ne %struct.passwd* %132, null, !dbg !1079
  %134 = load i32, i32* @x.13
  %135 = load i32, i32* @y.14
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %133, label %142, label %163, !dbg !1081

142:                                              ; preds = %originalBBpart220
  %143 = load i32, i32* @x.13
  %144 = load i32, i32* @y.14
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %142, %originalBB22alteredBB
  %151 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !1082
  %152 = getelementptr inbounds %struct.passwd, %struct.passwd* %151, i32 0, i32 0, !dbg !1083
  %153 = load i8*, i8** %152, align 8, !dbg !1083
  %154 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %153), !dbg !1084
  %155 = load i32, i32* @x.13
  %156 = load i32, i32* @y.14
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %163, !dbg !1084

163:                                              ; preds = %originalBBpart224, %originalBBpart220
  %164 = load i32, i32* @x.13
  %165 = load i32, i32* @y.14
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %163, %originalBB26alteredBB
  %172 = load i32, i32* @x.13
  %173 = load i32, i32* @y.14
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %180, !dbg !1085

180:                                              ; preds = %originalBBpart228, %originalBBpart216
  %181 = load i32, i32* @x.13
  %182 = load i32, i32* @y.14
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %180, %originalBB30alteredBB
  %189 = load i32, i32* @egid, align 4, !dbg !1086
  %190 = load i32, i32* @rgid, align 4, !dbg !1088
  %191 = icmp ne i32 %189, %190, !dbg !1089
  %192 = load i32, i32* @x.13
  %193 = load i32, i32* @y.14
  %194 = sub i32 %192, 1
  %195 = mul i32 %192, %194
  %196 = urem i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %197, %198
  br i1 %199, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %191, label %200, label %230, !dbg !1090

200:                                              ; preds = %originalBBpart232
  %201 = call i8* @gettext(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.56, i64 0, i64 0)) #10, !dbg !1091
  %202 = call i8* @gidtostr_ptr(i32* @egid), !dbg !1093
  %203 = call i32 (i8*, ...) @printf(i8* %201, i8* %202), !dbg !1094
  %204 = load i32, i32* @egid, align 4, !dbg !1095
  %205 = call %struct.group* @getgrgid(i32 %204), !dbg !1096
  store %struct.group* %205, %struct.group** %12, align 8, !dbg !1097
  %206 = load %struct.group*, %struct.group** %12, align 8, !dbg !1098
  %207 = icmp ne %struct.group* %206, null, !dbg !1098
  br i1 %207, label %208, label %229, !dbg !1100

208:                                              ; preds = %200
  %209 = load i32, i32* @x.13
  %210 = load i32, i32* @y.14
  %211 = sub i32 %209, 1
  %212 = mul i32 %209, %211
  %213 = urem i32 %212, 2
  %214 = icmp eq i32 %213, 0
  %215 = icmp slt i32 %210, 10
  %216 = or i1 %214, %215
  br i1 %216, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %208, %originalBB34alteredBB
  %217 = load %struct.group*, %struct.group** %12, align 8, !dbg !1101
  %218 = getelementptr inbounds %struct.group, %struct.group* %217, i32 0, i32 0, !dbg !1102
  %219 = load i8*, i8** %218, align 8, !dbg !1102
  %220 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %219), !dbg !1103
  %221 = load i32, i32* @x.13
  %222 = load i32, i32* @y.14
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %229, !dbg !1103

229:                                              ; preds = %originalBBpart236, %200
  br label %230, !dbg !1104

230:                                              ; preds = %229, %originalBBpart232
  call void @llvm.dbg.declare(metadata i32** %13, metadata !1105, metadata !DIExpression()), !dbg !1107
  call void @llvm.dbg.declare(metadata i32* %14, metadata !1108, metadata !DIExpression()), !dbg !1109
  %231 = load i32, i32* @x.13
  %232 = load i32, i32* @y.14
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %230, %originalBB38alteredBB
  %239 = load i8*, i8** %10, align 8, !dbg !1110
  %240 = icmp ne i8* %239, null, !dbg !1110
  %241 = load i32, i32* @x.13
  %242 = load i32, i32* @y.14
  %243 = sub i32 %241, 1
  %244 = mul i32 %241, %243
  %245 = urem i32 %244, 2
  %246 = icmp eq i32 %245, 0
  %247 = icmp slt i32 %242, 10
  %248 = or i1 %246, %247
  br i1 %248, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %240, label %249, label %291, !dbg !1112

249:                                              ; preds = %originalBBpart240
  %250 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !1113
  %251 = icmp ne %struct.passwd* %250, null, !dbg !1113
  br i1 %251, label %252, label %256, !dbg !1113

252:                                              ; preds = %249
  %253 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !1114
  %254 = getelementptr inbounds %struct.passwd, %struct.passwd* %253, i32 0, i32 3, !dbg !1115
  %255 = load i32, i32* %254, align 4, !dbg !1115
  br label %273, !dbg !1113

256:                                              ; preds = %249
  %257 = load i32, i32* @x.13
  %258 = load i32, i32* @y.14
  %259 = sub i32 %257, 1
  %260 = mul i32 %257, %259
  %261 = urem i32 %260, 2
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %262, %263
  br i1 %264, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %256, %originalBB42alteredBB
  %265 = load i32, i32* @x.13
  %266 = load i32, i32* @y.14
  %267 = sub i32 %265, 1
  %268 = mul i32 %265, %267
  %269 = urem i32 %268, 2
  %270 = icmp eq i32 %269, 0
  %271 = icmp slt i32 %266, 10
  %272 = or i1 %270, %271
  br i1 %272, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %273, !dbg !1113

273:                                              ; preds = %originalBBpart244, %252
  %274 = phi i32 [ %255, %252 ], [ -1, %originalBBpart244 ], !dbg !1113
  %275 = load i32, i32* @x.13
  %276 = load i32, i32* @y.14
  %277 = sub i32 %275, 1
  %278 = mul i32 %275, %277
  %279 = urem i32 %278, 2
  %280 = icmp eq i32 %279, 0
  %281 = icmp slt i32 %276, 10
  %282 = or i1 %280, %281
  br i1 %282, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %273, %originalBB46alteredBB
  store i32 %274, i32* %14, align 4, !dbg !1116
  %283 = load i32, i32* @x.13
  %284 = load i32, i32* @y.14
  %285 = sub i32 %283, 1
  %286 = mul i32 %283, %285
  %287 = urem i32 %286, 2
  %288 = icmp eq i32 %287, 0
  %289 = icmp slt i32 %284, 10
  %290 = or i1 %288, %289
  br i1 %290, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %309, !dbg !1117

291:                                              ; preds = %originalBBpart240
  %292 = load i32, i32* @x.13
  %293 = load i32, i32* @y.14
  %294 = sub i32 %292, 1
  %295 = mul i32 %292, %294
  %296 = urem i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = icmp slt i32 %293, 10
  %299 = or i1 %297, %298
  br i1 %299, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %291, %originalBB50alteredBB
  %300 = load i32, i32* @egid, align 4, !dbg !1118
  store i32 %300, i32* %14, align 4, !dbg !1119
  %301 = load i32, i32* @x.13
  %302 = load i32, i32* @y.14
  %303 = sub i32 %301, 1
  %304 = mul i32 %301, %303
  %305 = urem i32 %304, 2
  %306 = icmp eq i32 %305, 0
  %307 = icmp slt i32 %302, 10
  %308 = or i1 %306, %307
  br i1 %308, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br label %309

309:                                              ; preds = %originalBBpart252, %originalBBpart248
  call void @llvm.dbg.declare(metadata i32* %15, metadata !1120, metadata !DIExpression()), !dbg !1121
  %310 = load i32, i32* @x.13
  %311 = load i32, i32* @y.14
  %312 = sub i32 %310, 1
  %313 = mul i32 %310, %312
  %314 = urem i32 %313, 2
  %315 = icmp eq i32 %314, 0
  %316 = icmp slt i32 %311, 10
  %317 = or i1 %315, %316
  br i1 %317, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %309, %originalBB54alteredBB
  %318 = load i8*, i8** %10, align 8, !dbg !1122
  %319 = load i32, i32* %14, align 4, !dbg !1123
  %320 = call i32 @xgetgroups(i8* %318, i32 %319, i32** %13), !dbg !1124
  store i32 %320, i32* %15, align 4, !dbg !1121
  %321 = load i32, i32* %15, align 4, !dbg !1125
  %322 = icmp slt i32 %321, 0, !dbg !1127
  %323 = load i32, i32* @x.13
  %324 = load i32, i32* @y.14
  %325 = sub i32 %323, 1
  %326 = mul i32 %323, %325
  %327 = urem i32 %326, 2
  %328 = icmp eq i32 %327, 0
  %329 = icmp slt i32 %324, 10
  %330 = or i1 %328, %329
  br i1 %330, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br i1 %322, label %331, label %399, !dbg !1128

331:                                              ; preds = %originalBBpart256
  %332 = load i8*, i8** %10, align 8, !dbg !1129
  %333 = icmp ne i8* %332, null, !dbg !1129
  br i1 %333, label %334, label %356, !dbg !1132

334:                                              ; preds = %331
  %335 = load i32, i32* @x.13
  %336 = load i32, i32* @y.14
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %334, %originalBB58alteredBB
  %343 = call i32* @__errno_location() #15, !dbg !1133
  %344 = load i32, i32* %343, align 4, !dbg !1133
  %345 = call i8* @gettext(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.57, i64 0, i64 0)) #10, !dbg !1134
  %346 = load i8*, i8** %10, align 8, !dbg !1135
  %347 = call i8* @quote(i8* %346), !dbg !1136
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %344, i8* %345, i8* %347), !dbg !1137
  %348 = load i32, i32* @x.13
  %349 = load i32, i32* @y.14
  %350 = sub i32 %348, 1
  %351 = mul i32 %348, %350
  %352 = urem i32 %351, 2
  %353 = icmp eq i32 %352, 0
  %354 = icmp slt i32 %349, 10
  %355 = or i1 %353, %354
  br i1 %355, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br label %376, !dbg !1137

356:                                              ; preds = %331
  %357 = load i32, i32* @x.13
  %358 = load i32, i32* @y.14
  %359 = sub i32 %357, 1
  %360 = mul i32 %357, %359
  %361 = urem i32 %360, 2
  %362 = icmp eq i32 %361, 0
  %363 = icmp slt i32 %358, 10
  %364 = or i1 %362, %363
  br i1 %364, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %356, %originalBB62alteredBB
  %365 = call i32* @__errno_location() #15, !dbg !1138
  %366 = load i32, i32* %365, align 4, !dbg !1138
  %367 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.58, i64 0, i64 0)) #10, !dbg !1139
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %366, i8* %367), !dbg !1140
  %368 = load i32, i32* @x.13
  %369 = load i32, i32* @y.14
  %370 = sub i32 %368, 1
  %371 = mul i32 %368, %370
  %372 = urem i32 %371, 2
  %373 = icmp eq i32 %372, 0
  %374 = icmp slt i32 %369, 10
  %375 = or i1 %373, %374
  br i1 %375, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br label %376

376:                                              ; preds = %originalBBpart264, %originalBBpart260
  %377 = load i32, i32* @x.13
  %378 = load i32, i32* @y.14
  %379 = sub i32 %377, 1
  %380 = mul i32 %377, %379
  %381 = urem i32 %380, 2
  %382 = icmp eq i32 %381, 0
  %383 = icmp slt i32 %378, 10
  %384 = or i1 %382, %383
  br i1 %384, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %376, %originalBB66alteredBB
  %385 = load i8, i8* @ok, align 1, !dbg !1141
  %386 = trunc i8 %385 to i1, !dbg !1141
  %387 = zext i1 %386 to i32, !dbg !1141
  %388 = and i32 %387, 0, !dbg !1141
  %389 = icmp ne i32 %388, 0, !dbg !1141
  %390 = zext i1 %389 to i8, !dbg !1141
  store i8 %390, i8* @ok, align 1, !dbg !1141
  %391 = load i32, i32* @x.13
  %392 = load i32, i32* @y.14
  %393 = sub i32 %391, 1
  %394 = mul i32 %391, %393
  %395 = urem i32 %394, 2
  %396 = icmp eq i32 %395, 0
  %397 = icmp slt i32 %392, 10
  %398 = or i1 %396, %397
  br i1 %398, label %originalBBpart275, label %originalBB66alteredBB

originalBBpart275:                                ; preds = %originalBB66
  br label %578, !dbg !1142

399:                                              ; preds = %originalBBpart256
  %400 = load i32, i32* %15, align 4, !dbg !1143
  %401 = icmp sgt i32 %400, 0, !dbg !1145
  br i1 %401, label %402, label %422, !dbg !1146

402:                                              ; preds = %399
  %403 = load i32, i32* @x.13
  %404 = load i32, i32* @y.14
  %405 = sub i32 %403, 1
  %406 = mul i32 %403, %405
  %407 = urem i32 %406, 2
  %408 = icmp eq i32 %407, 0
  %409 = icmp slt i32 %404, 10
  %410 = or i1 %408, %409
  br i1 %410, label %originalBB77, label %originalBB77alteredBB

originalBB77:                                     ; preds = %402, %originalBB77alteredBB
  %411 = call i8* @gettext(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.59, i64 0, i64 0)) #10, !dbg !1147
  %412 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1147
  %413 = call i32 @fputs_unlocked(i8* %411, %struct._IO_FILE* %412), !dbg !1147
  %414 = load i32, i32* @x.13
  %415 = load i32, i32* @y.14
  %416 = sub i32 %414, 1
  %417 = mul i32 %414, %416
  %418 = urem i32 %417, 2
  %419 = icmp eq i32 %418, 0
  %420 = icmp slt i32 %415, 10
  %421 = or i1 %419, %420
  br i1 %421, label %originalBBpart279, label %originalBB77alteredBB

originalBBpart279:                                ; preds = %originalBB77
  br label %422, !dbg !1147

422:                                              ; preds = %originalBBpart279, %399
  call void @llvm.dbg.declare(metadata i32* %16, metadata !1148, metadata !DIExpression()), !dbg !1150
  %423 = load i32, i32* @x.13
  %424 = load i32, i32* @y.14
  %425 = sub i32 %423, 1
  %426 = mul i32 %423, %425
  %427 = urem i32 %426, 2
  %428 = icmp eq i32 %427, 0
  %429 = icmp slt i32 %424, 10
  %430 = or i1 %428, %429
  br i1 %430, label %originalBB81, label %originalBB81alteredBB

originalBB81:                                     ; preds = %422, %originalBB81alteredBB
  store i32 0, i32* %16, align 4, !dbg !1150
  %431 = load i32, i32* @x.13
  %432 = load i32, i32* @y.14
  %433 = sub i32 %431, 1
  %434 = mul i32 %431, %433
  %435 = urem i32 %434, 2
  %436 = icmp eq i32 %435, 0
  %437 = icmp slt i32 %432, 10
  %438 = or i1 %436, %437
  br i1 %438, label %originalBBpart283, label %originalBB81alteredBB

originalBBpart283:                                ; preds = %originalBB81
  br label %439, !dbg !1151

439:                                              ; preds = %534, %originalBBpart283
  %440 = load i32, i32* %16, align 4, !dbg !1152
  %441 = load i32, i32* %15, align 4, !dbg !1154
  %442 = icmp slt i32 %440, %441, !dbg !1155
  br i1 %442, label %443, label %537, !dbg !1156

443:                                              ; preds = %439
  %444 = load i32, i32* %16, align 4, !dbg !1157
  %445 = icmp sgt i32 %444, 0, !dbg !1160
  br i1 %445, label %446, label %464, !dbg !1161

446:                                              ; preds = %443
  %447 = load i32, i32* @x.13
  %448 = load i32, i32* @y.14
  %449 = sub i32 %447, 1
  %450 = mul i32 %447, %449
  %451 = urem i32 %450, 2
  %452 = icmp eq i32 %451, 0
  %453 = icmp slt i32 %448, 10
  %454 = or i1 %452, %453
  br i1 %454, label %originalBB85, label %originalBB85alteredBB

originalBB85:                                     ; preds = %446, %originalBB85alteredBB
  %455 = call i32 @putchar_unlocked(i32 44), !dbg !1162
  %456 = load i32, i32* @x.13
  %457 = load i32, i32* @y.14
  %458 = sub i32 %456, 1
  %459 = mul i32 %456, %458
  %460 = urem i32 %459, 2
  %461 = icmp eq i32 %460, 0
  %462 = icmp slt i32 %457, 10
  %463 = or i1 %461, %462
  br i1 %463, label %originalBBpart287, label %originalBB85alteredBB

originalBBpart287:                                ; preds = %originalBB85
  br label %464, !dbg !1162

464:                                              ; preds = %originalBBpart287, %443
  %465 = load i32, i32* @x.13
  %466 = load i32, i32* @y.14
  %467 = sub i32 %465, 1
  %468 = mul i32 %465, %467
  %469 = urem i32 %468, 2
  %470 = icmp eq i32 %469, 0
  %471 = icmp slt i32 %466, 10
  %472 = or i1 %470, %471
  br i1 %472, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %464, %originalBB89alteredBB
  %473 = load i32*, i32** %13, align 8, !dbg !1163
  %474 = load i32, i32* %16, align 4, !dbg !1163
  %475 = sext i32 %474 to i64, !dbg !1163
  %476 = getelementptr inbounds i32, i32* %473, i64 %475, !dbg !1163
  %477 = call i8* @gidtostr_ptr(i32* %476), !dbg !1163
  %478 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1163
  %479 = call i32 @fputs_unlocked(i8* %477, %struct._IO_FILE* %478), !dbg !1163
  %480 = load i32*, i32** %13, align 8, !dbg !1164
  %481 = load i32, i32* %16, align 4, !dbg !1165
  %482 = sext i32 %481 to i64, !dbg !1164
  %483 = getelementptr inbounds i32, i32* %480, i64 %482, !dbg !1164
  %484 = load i32, i32* %483, align 4, !dbg !1164
  %485 = call %struct.group* @getgrgid(i32 %484), !dbg !1166
  store %struct.group* %485, %struct.group** %12, align 8, !dbg !1167
  %486 = load %struct.group*, %struct.group** %12, align 8, !dbg !1168
  %487 = icmp ne %struct.group* %486, null, !dbg !1168
  %488 = load i32, i32* @x.13
  %489 = load i32, i32* @y.14
  %490 = sub i32 %488, 1
  %491 = mul i32 %488, %490
  %492 = urem i32 %491, 2
  %493 = icmp eq i32 %492, 0
  %494 = icmp slt i32 %489, 10
  %495 = or i1 %493, %494
  br i1 %495, label %originalBBpart291, label %originalBB89alteredBB

originalBBpart291:                                ; preds = %originalBB89
  br i1 %487, label %496, label %517, !dbg !1170

496:                                              ; preds = %originalBBpart291
  %497 = load i32, i32* @x.13
  %498 = load i32, i32* @y.14
  %499 = sub i32 %497, 1
  %500 = mul i32 %497, %499
  %501 = urem i32 %500, 2
  %502 = icmp eq i32 %501, 0
  %503 = icmp slt i32 %498, 10
  %504 = or i1 %502, %503
  br i1 %504, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %496, %originalBB93alteredBB
  %505 = load %struct.group*, %struct.group** %12, align 8, !dbg !1171
  %506 = getelementptr inbounds %struct.group, %struct.group* %505, i32 0, i32 0, !dbg !1172
  %507 = load i8*, i8** %506, align 8, !dbg !1172
  %508 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %507), !dbg !1173
  %509 = load i32, i32* @x.13
  %510 = load i32, i32* @y.14
  %511 = sub i32 %509, 1
  %512 = mul i32 %509, %511
  %513 = urem i32 %512, 2
  %514 = icmp eq i32 %513, 0
  %515 = icmp slt i32 %510, 10
  %516 = or i1 %514, %515
  br i1 %516, label %originalBBpart295, label %originalBB93alteredBB

originalBBpart295:                                ; preds = %originalBB93
  br label %517, !dbg !1173

517:                                              ; preds = %originalBBpart295, %originalBBpart291
  %518 = load i32, i32* @x.13
  %519 = load i32, i32* @y.14
  %520 = sub i32 %518, 1
  %521 = mul i32 %518, %520
  %522 = urem i32 %521, 2
  %523 = icmp eq i32 %522, 0
  %524 = icmp slt i32 %519, 10
  %525 = or i1 %523, %524
  br i1 %525, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %517, %originalBB97alteredBB
  %526 = load i32, i32* @x.13
  %527 = load i32, i32* @y.14
  %528 = sub i32 %526, 1
  %529 = mul i32 %526, %528
  %530 = urem i32 %529, 2
  %531 = icmp eq i32 %530, 0
  %532 = icmp slt i32 %527, 10
  %533 = or i1 %531, %532
  br i1 %533, label %originalBBpart299, label %originalBB97alteredBB

originalBBpart299:                                ; preds = %originalBB97
  br label %534, !dbg !1174

534:                                              ; preds = %originalBBpart299
  %535 = load i32, i32* %16, align 4, !dbg !1175
  %536 = add nsw i32 %535, 1, !dbg !1175
  store i32 %536, i32* %16, align 4, !dbg !1175
  br label %439, !dbg !1176, !llvm.loop !1177

537:                                              ; preds = %439
  %538 = load i32, i32* @x.13
  %539 = load i32, i32* @y.14
  %540 = sub i32 %538, 1
  %541 = mul i32 %538, %540
  %542 = urem i32 %541, 2
  %543 = icmp eq i32 %542, 0
  %544 = icmp slt i32 %539, 10
  %545 = or i1 %543, %544
  br i1 %545, label %originalBB101, label %originalBB101alteredBB

originalBB101:                                    ; preds = %537, %originalBB101alteredBB
  %546 = load i32*, i32** %13, align 8, !dbg !1179
  %547 = bitcast i32* %546 to i8*, !dbg !1179
  call void @free(i8* %547) #10, !dbg !1180
  %548 = load i8*, i8** @context, align 8, !dbg !1181
  %549 = icmp ne i8* %548, null, !dbg !1181
  %550 = load i32, i32* @x.13
  %551 = load i32, i32* @y.14
  %552 = sub i32 %550, 1
  %553 = mul i32 %550, %552
  %554 = urem i32 %553, 2
  %555 = icmp eq i32 %554, 0
  %556 = icmp slt i32 %551, 10
  %557 = or i1 %555, %556
  br i1 %557, label %originalBBpart2103, label %originalBB101alteredBB

originalBBpart2103:                               ; preds = %originalBB101
  br i1 %549, label %558, label %578, !dbg !1183

558:                                              ; preds = %originalBBpart2103
  %559 = load i32, i32* @x.13
  %560 = load i32, i32* @y.14
  %561 = sub i32 %559, 1
  %562 = mul i32 %559, %561
  %563 = urem i32 %562, 2
  %564 = icmp eq i32 %563, 0
  %565 = icmp slt i32 %560, 10
  %566 = or i1 %564, %565
  br i1 %566, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %558, %originalBB105alteredBB
  %567 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.60, i64 0, i64 0)) #10, !dbg !1184
  %568 = load i8*, i8** @context, align 8, !dbg !1185
  %569 = call i32 (i8*, ...) @printf(i8* %567, i8* %568), !dbg !1186
  %570 = load i32, i32* @x.13
  %571 = load i32, i32* @y.14
  %572 = sub i32 %570, 1
  %573 = mul i32 %570, %572
  %574 = urem i32 %573, 2
  %575 = icmp eq i32 %574, 0
  %576 = icmp slt i32 %571, 10
  %577 = or i1 %575, %576
  br i1 %577, label %originalBBpart2107, label %originalBB105alteredBB

originalBBpart2107:                               ; preds = %originalBB105
  br label %578, !dbg !1186

578:                                              ; preds = %originalBBpart2107, %originalBBpart2103, %originalBBpart275
  ret void, !dbg !1187

originalBBalteredBB:                              ; preds = %originalBB, %1
  %579 = alloca i8*, align 8
  %580 = alloca %struct.passwd*, align 8
  %581 = alloca %struct.group*, align 8
  %582 = alloca i32*, align 8
  %583 = alloca i32, align 4
  %584 = alloca i32, align 4
  %585 = alloca i32, align 4
  store i8* %0, i8** %579, align 8
  call void @llvm.dbg.declare(metadata i8** %579, metadata !1188, metadata !DIExpression()), !dbg !1030
  call void @llvm.dbg.declare(metadata %struct.passwd** %580, metadata !1236, metadata !DIExpression()), !dbg !1032
  call void @llvm.dbg.declare(metadata %struct.group** %581, metadata !1247, metadata !DIExpression()), !dbg !1042
  %586 = call i8* @gettext(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.52, i64 0, i64 0)) #10, !dbg !1043
  %587 = call i8* @uidtostr_ptr(i32* @ruid), !dbg !1044
  %588 = call i32 (i8*, ...) @printf(i8* %586, i8* %587), !dbg !1045
  %589 = load i32, i32* @ruid, align 4, !dbg !1046
  %590 = call %struct.passwd* @getpwuid(i32 %589), !dbg !1047
  store %struct.passwd* %590, %struct.passwd** %580, align 8, !dbg !1048
  %591 = load %struct.passwd*, %struct.passwd** %580, align 8, !dbg !1049
  %592 = icmp ne %struct.passwd* %591, null, !dbg !1049
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  %593 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !1052
  %594 = getelementptr inbounds %struct.passwd, %struct.passwd* %593, i32 0, i32 0, !dbg !1053
  %595 = load i8*, i8** %594, align 8, !dbg !1053
  %596 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %595), !dbg !1054
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  %597 = call i8* @gettext(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.54, i64 0, i64 0)) #10, !dbg !1055
  %598 = call i8* @gidtostr_ptr(i32* @rgid), !dbg !1056
  %599 = call i32 (i8*, ...) @printf(i8* %597, i8* %598), !dbg !1057
  %600 = load i32, i32* @rgid, align 4, !dbg !1058
  %601 = call %struct.group* @getgrgid(i32 %600), !dbg !1059
  store %struct.group* %601, %struct.group** %12, align 8, !dbg !1060
  %602 = load %struct.group*, %struct.group** %12, align 8, !dbg !1061
  %603 = icmp ne %struct.group* %602, null, !dbg !1061
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %77
  %604 = load %struct.group*, %struct.group** %12, align 8, !dbg !1064
  %605 = getelementptr inbounds %struct.group, %struct.group* %604, i32 0, i32 0, !dbg !1065
  %606 = load i8*, i8** %605, align 8, !dbg !1065
  %607 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %606), !dbg !1066
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %98
  %608 = load i32, i32* @euid, align 4, !dbg !1067
  %609 = load i32, i32* @ruid, align 4, !dbg !1069
  %610 = icmp ne i32 %608, %609, !dbg !1070
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %118
  %611 = call i8* @gettext(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.55, i64 0, i64 0)) #10, !dbg !1072
  %612 = call i8* @uidtostr_ptr(i32* @euid), !dbg !1074
  %613 = call i32 (i8*, ...) @printf(i8* %611, i8* %612), !dbg !1075
  %614 = load i32, i32* @euid, align 4, !dbg !1076
  %615 = call %struct.passwd* @getpwuid(i32 %614), !dbg !1077
  store %struct.passwd* %615, %struct.passwd** %11, align 8, !dbg !1078
  %616 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !1079
  %617 = icmp ne %struct.passwd* %616, null, !dbg !1079
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %142
  %618 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !1082
  %619 = getelementptr inbounds %struct.passwd, %struct.passwd* %618, i32 0, i32 0, !dbg !1083
  %620 = load i8*, i8** %619, align 8, !dbg !1083
  %621 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %620), !dbg !1084
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %163
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %180
  %622 = load i32, i32* @egid, align 4, !dbg !1086
  %623 = load i32, i32* @rgid, align 4, !dbg !1088
  %624 = icmp ne i32 %622, %623, !dbg !1089
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %208
  %625 = load %struct.group*, %struct.group** %12, align 8, !dbg !1101
  %626 = getelementptr inbounds %struct.group, %struct.group* %625, i32 0, i32 0, !dbg !1102
  %627 = load i8*, i8** %626, align 8, !dbg !1102
  %628 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %627), !dbg !1103
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %230
  %629 = load i8*, i8** %10, align 8, !dbg !1110
  %630 = icmp ne i8* %629, null, !dbg !1110
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %256
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %273
  store i32 %274, i32* %14, align 4, !dbg !1116
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %291
  %631 = load i32, i32* @egid, align 4, !dbg !1118
  store i32 %631, i32* %14, align 4, !dbg !1119
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %309
  %632 = load i8*, i8** %10, align 8, !dbg !1122
  %633 = load i32, i32* %14, align 4, !dbg !1123
  %634 = call i32 @xgetgroups(i8* %632, i32 %633, i32** %13), !dbg !1124
  store i32 %634, i32* %15, align 4, !dbg !1121
  %635 = load i32, i32* %15, align 4, !dbg !1125
  %636 = icmp slt i32 %635, 0, !dbg !1127
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %334
  %637 = call i32* @__errno_location() #15, !dbg !1133
  %638 = load i32, i32* %637, align 4, !dbg !1133
  %639 = call i8* @gettext(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.57, i64 0, i64 0)) #10, !dbg !1134
  %640 = load i8*, i8** %10, align 8, !dbg !1135
  %641 = call i8* @quote(i8* %640), !dbg !1136
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %638, i8* %639, i8* %641), !dbg !1137
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %356
  %642 = call i32* @__errno_location() #15, !dbg !1138
  %643 = load i32, i32* %642, align 4, !dbg !1138
  %644 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.58, i64 0, i64 0)) #10, !dbg !1139
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %643, i8* %644), !dbg !1140
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %376
  %645 = load i8, i8* @ok, align 1, !dbg !1141
  %646 = trunc i8 %645 to i1, !dbg !1141
  %647 = zext i1 %646 to i32, !dbg !1141
  %_ = sub i32 %647, 0
  %gen = mul i32 %_, 0
  %_67 = sub i32 %647, 0
  %gen68 = mul i32 %_67, 0
  %_69 = shl i32 %647, 0
  %_70 = shl i32 %647, 0
  %_71 = shl i32 %647, 0
  %_72 = sub i32 %647, 0
  %gen73 = mul i32 %_72, 0
  %648 = and i32 %647, 0, !dbg !1141
  %649 = icmp ne i32 %648, 0, !dbg !1141
  %650 = zext i1 %649 to i8, !dbg !1141
  store i8 %650, i8* @ok, align 1, !dbg !1141
  br label %originalBB66

originalBB77alteredBB:                            ; preds = %originalBB77, %402
  %651 = call i8* @gettext(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.59, i64 0, i64 0)) #10, !dbg !1147
  %652 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1147
  %653 = call i32 @fputs_unlocked(i8* %651, %struct._IO_FILE* %652), !dbg !1147
  br label %originalBB77

originalBB81alteredBB:                            ; preds = %originalBB81, %422
  store i32 0, i32* %16, align 4, !dbg !1150
  br label %originalBB81

originalBB85alteredBB:                            ; preds = %originalBB85, %446
  %654 = call i32 @putchar_unlocked(i32 44), !dbg !1162
  br label %originalBB85

originalBB89alteredBB:                            ; preds = %originalBB89, %464
  %655 = load i32*, i32** %13, align 8, !dbg !1163
  %656 = load i32, i32* %16, align 4, !dbg !1163
  %657 = sext i32 %656 to i64, !dbg !1163
  %658 = getelementptr inbounds i32, i32* %655, i64 %657, !dbg !1163
  %659 = call i8* @gidtostr_ptr(i32* %658), !dbg !1163
  %660 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1163
  %661 = call i32 @fputs_unlocked(i8* %659, %struct._IO_FILE* %660), !dbg !1163
  %662 = load i32*, i32** %13, align 8, !dbg !1164
  %663 = load i32, i32* %16, align 4, !dbg !1165
  %664 = sext i32 %663 to i64, !dbg !1164
  %665 = getelementptr inbounds i32, i32* %662, i64 %664, !dbg !1164
  %666 = load i32, i32* %665, align 4, !dbg !1164
  %667 = call %struct.group* @getgrgid(i32 %666), !dbg !1166
  store %struct.group* %667, %struct.group** %12, align 8, !dbg !1167
  %668 = load %struct.group*, %struct.group** %12, align 8, !dbg !1168
  %669 = icmp ne %struct.group* %668, null, !dbg !1168
  br label %originalBB89

originalBB93alteredBB:                            ; preds = %originalBB93, %496
  %670 = load %struct.group*, %struct.group** %12, align 8, !dbg !1171
  %671 = getelementptr inbounds %struct.group, %struct.group* %670, i32 0, i32 0, !dbg !1172
  %672 = load i8*, i8** %671, align 8, !dbg !1172
  %673 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %672), !dbg !1173
  br label %originalBB93

originalBB97alteredBB:                            ; preds = %originalBB97, %517
  br label %originalBB97

originalBB101alteredBB:                           ; preds = %originalBB101, %537
  %674 = load i32*, i32** %13, align 8, !dbg !1179
  %675 = bitcast i32* %674 to i8*, !dbg !1179
  call void @free(i8* %675) #10, !dbg !1180
  %676 = load i8*, i8** @context, align 8, !dbg !1181
  %677 = icmp ne i8* %676, null, !dbg !1181
  br label %originalBB101

originalBB105alteredBB:                           ; preds = %originalBB105, %558
  %678 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.60, i64 0, i64 0)) #10, !dbg !1184
  %679 = load i8*, i8** @context, align 8, !dbg !1185
  %680 = call i32 (i8*, ...) @printf(i8* %678, i8* %679), !dbg !1186
  br label %originalBB105
}

declare dso_local i32 @putchar_unlocked(i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @uidtostr_ptr(i32*) #4 !dbg !48 {
  %2 = load i32, i32* @x.15
  %3 = load i32, i32* @y.16
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32*, align 8
  store i32* %0, i32** %10, align 8
  call void @llvm.dbg.declare(metadata i32** %10, metadata !1255, metadata !DIExpression()), !dbg !1256
  %11 = load i32*, i32** %10, align 8, !dbg !1257
  %12 = load i32, i32* %11, align 4, !dbg !1258
  %13 = zext i32 %12 to i64, !dbg !1258
  %14 = call i8* @umaxtostr(i64 %13, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @uidtostr_ptr.buf, i64 0, i64 0)), !dbg !1259
  %15 = load i32, i32* @x.15
  %16 = load i32, i32* @y.16
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !1260

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32*, align 8
  store i32* %0, i32** %23, align 8
  call void @llvm.dbg.declare(metadata i32** %23, metadata !1261, metadata !DIExpression()), !dbg !1256
  %24 = load i32*, i32** %23, align 8, !dbg !1257
  %25 = load i32, i32* %24, align 4, !dbg !1258
  %26 = zext i32 %25 to i64, !dbg !1258
  %27 = call i8* @umaxtostr(i64 %26, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @uidtostr_ptr.buf, i64 0, i64 0)), !dbg !1259
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gidtostr_ptr(i32*) #4 !dbg !58 {
  %2 = load i32, i32* @x.17
  %3 = load i32, i32* @y.18
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32*, align 8
  store i32* %0, i32** %10, align 8
  call void @llvm.dbg.declare(metadata i32** %10, metadata !1308, metadata !DIExpression()), !dbg !1309
  %11 = load i32*, i32** %10, align 8, !dbg !1310
  %12 = load i32, i32* %11, align 4, !dbg !1311
  %13 = zext i32 %12 to i64, !dbg !1311
  %14 = call i8* @umaxtostr(i64 %13, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @gidtostr_ptr.buf, i64 0, i64 0)), !dbg !1312
  %15 = load i32, i32* @x.17
  %16 = load i32, i32* @y.18
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !1313

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32*, align 8
  store i32* %0, i32** %23, align 8
  call void @llvm.dbg.declare(metadata i32** %23, metadata !1314, metadata !DIExpression()), !dbg !1309
  %24 = load i32*, i32** %23, align 8, !dbg !1310
  %25 = load i32, i32* %24, align 4, !dbg !1311
  %26 = zext i32 %25 to i64, !dbg !1311
  %27 = call i8* @umaxtostr(i64 %26, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @gidtostr_ptr.buf, i64 0, i64 0)), !dbg !1312
  br label %originalBB
}

declare dso_local %struct.group* @getgrgid(i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @print_group_list(i8*, i32, i32, i32, i1 zeroext, i8 signext) #4 !dbg !1361 {
  %7 = load i32, i32* @x.19
  %8 = load i32, i32* @y.20
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %6, %originalBBalteredBB
  %15 = alloca i1, align 1
  %16 = alloca i8*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i8, align 1
  %21 = alloca i8, align 1
  %22 = alloca i8, align 1
  %23 = alloca %struct.passwd*, align 8
  %24 = alloca i32*, align 8
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  store i8* %0, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !1364, metadata !DIExpression()), !dbg !1365
  store i32 %1, i32* %17, align 4
  call void @llvm.dbg.declare(metadata i32* %17, metadata !1366, metadata !DIExpression()), !dbg !1367
  store i32 %2, i32* %18, align 4
  call void @llvm.dbg.declare(metadata i32* %18, metadata !1368, metadata !DIExpression()), !dbg !1369
  store i32 %3, i32* %19, align 4
  call void @llvm.dbg.declare(metadata i32* %19, metadata !1370, metadata !DIExpression()), !dbg !1371
  %27 = zext i1 %4 to i8
  store i8 %27, i8* %20, align 1
  call void @llvm.dbg.declare(metadata i8* %20, metadata !1372, metadata !DIExpression()), !dbg !1373
  store i8 %5, i8* %21, align 1
  call void @llvm.dbg.declare(metadata i8* %21, metadata !1374, metadata !DIExpression()), !dbg !1375
  call void @llvm.dbg.declare(metadata i8* %22, metadata !1376, metadata !DIExpression()), !dbg !1377
  store i8 1, i8* %22, align 1, !dbg !1377
  call void @llvm.dbg.declare(metadata %struct.passwd** %23, metadata !1378, metadata !DIExpression()), !dbg !1389
  store %struct.passwd* null, %struct.passwd** %23, align 8, !dbg !1389
  %28 = load i8*, i8** %16, align 8, !dbg !1390
  %29 = icmp ne i8* %28, null, !dbg !1390
  %30 = load i32, i32* @x.19
  %31 = load i32, i32* @y.20
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %29, label %38, label %93, !dbg !1392

38:                                               ; preds = %originalBBpart2
  %39 = load i32, i32* @x.19
  %40 = load i32, i32* @y.20
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %38, %originalBB1alteredBB
  %47 = load i32, i32* %17, align 4, !dbg !1393
  %48 = call %struct.passwd* @getpwuid(i32 %47), !dbg !1395
  store %struct.passwd* %48, %struct.passwd** %23, align 8, !dbg !1396
  %49 = load %struct.passwd*, %struct.passwd** %23, align 8, !dbg !1397
  %50 = icmp eq %struct.passwd* %49, null, !dbg !1399
  %51 = load i32, i32* @x.19
  %52 = load i32, i32* @y.20
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %50, label %59, label %76, !dbg !1400

59:                                               ; preds = %originalBBpart24
  %60 = load i32, i32* @x.19
  %61 = load i32, i32* @y.20
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %59, %originalBB6alteredBB
  store i8 0, i8* %22, align 1, !dbg !1401
  %68 = load i32, i32* @x.19
  %69 = load i32, i32* @y.20
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %76, !dbg !1402

76:                                               ; preds = %originalBBpart28, %originalBBpart24
  %77 = load i32, i32* @x.19
  %78 = load i32, i32* @y.20
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %76, %originalBB10alteredBB
  %85 = load i32, i32* @x.19
  %86 = load i32, i32* @y.20
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %93, !dbg !1403

93:                                               ; preds = %originalBBpart212, %originalBBpart2
  %94 = load i32, i32* @x.19
  %95 = load i32, i32* @y.20
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %93, %originalBB14alteredBB
  %102 = load i32, i32* %18, align 4, !dbg !1404
  %103 = load i8, i8* %20, align 1, !dbg !1406
  %104 = trunc i8 %103 to i1, !dbg !1406
  %105 = call zeroext i1 @print_group(i32 %102, i1 zeroext %104), !dbg !1407
  %106 = load i32, i32* @x.19
  %107 = load i32, i32* @y.20
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %105, label %115, label %114, !dbg !1408

114:                                              ; preds = %originalBBpart216
  store i8 0, i8* %22, align 1, !dbg !1409
  br label %115, !dbg !1410

115:                                              ; preds = %114, %originalBBpart216
  %116 = load i32, i32* @x.19
  %117 = load i32, i32* @y.20
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %115, %originalBB18alteredBB
  %124 = load i32, i32* %19, align 4, !dbg !1411
  %125 = load i32, i32* %18, align 4, !dbg !1413
  %126 = icmp ne i32 %124, %125, !dbg !1414
  %127 = load i32, i32* @x.19
  %128 = load i32, i32* @y.20
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %126, label %135, label %177, !dbg !1415

135:                                              ; preds = %originalBBpart220
  %136 = load i32, i32* @x.19
  %137 = load i32, i32* @y.20
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %135, %originalBB22alteredBB
  %144 = load i8, i8* %21, align 1, !dbg !1416
  %145 = sext i8 %144 to i32, !dbg !1416
  %146 = call i32 @putchar_unlocked(i32 %145), !dbg !1416
  %147 = load i32, i32* %19, align 4, !dbg !1418
  %148 = load i8, i8* %20, align 1, !dbg !1420
  %149 = trunc i8 %148 to i1, !dbg !1420
  %150 = call zeroext i1 @print_group(i32 %147, i1 zeroext %149), !dbg !1421
  %151 = load i32, i32* @x.19
  %152 = load i32, i32* @y.20
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %150, label %160, label %159, !dbg !1422

159:                                              ; preds = %originalBBpart224
  store i8 0, i8* %22, align 1, !dbg !1423
  br label %160, !dbg !1424

160:                                              ; preds = %159, %originalBBpart224
  %161 = load i32, i32* @x.19
  %162 = load i32, i32* @y.20
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %160, %originalBB26alteredBB
  %169 = load i32, i32* @x.19
  %170 = load i32, i32* @y.20
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %177, !dbg !1425

177:                                              ; preds = %originalBBpart228, %originalBBpart220
  call void @llvm.dbg.declare(metadata i32** %24, metadata !1426, metadata !DIExpression()), !dbg !1428
  call void @llvm.dbg.declare(metadata i32* %25, metadata !1429, metadata !DIExpression()), !dbg !1430
  %178 = load i8*, i8** %16, align 8, !dbg !1431
  %179 = load %struct.passwd*, %struct.passwd** %23, align 8, !dbg !1432
  %180 = icmp ne %struct.passwd* %179, null, !dbg !1432
  br i1 %180, label %181, label %201, !dbg !1432

181:                                              ; preds = %177
  %182 = load i32, i32* @x.19
  %183 = load i32, i32* @y.20
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %181, %originalBB30alteredBB
  %190 = load %struct.passwd*, %struct.passwd** %23, align 8, !dbg !1433
  %191 = getelementptr inbounds %struct.passwd, %struct.passwd* %190, i32 0, i32 3, !dbg !1434
  %192 = load i32, i32* %191, align 4, !dbg !1434
  %193 = load i32, i32* @x.19
  %194 = load i32, i32* @y.20
  %195 = sub i32 %193, 1
  %196 = mul i32 %193, %195
  %197 = urem i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %198, %199
  br i1 %200, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %219, !dbg !1432

201:                                              ; preds = %177
  %202 = load i32, i32* @x.19
  %203 = load i32, i32* @y.20
  %204 = sub i32 %202, 1
  %205 = mul i32 %202, %204
  %206 = urem i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = icmp slt i32 %203, 10
  %209 = or i1 %207, %208
  br i1 %209, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %201, %originalBB34alteredBB
  %210 = load i32, i32* %19, align 4, !dbg !1435
  %211 = load i32, i32* @x.19
  %212 = load i32, i32* @y.20
  %213 = sub i32 %211, 1
  %214 = mul i32 %211, %213
  %215 = urem i32 %214, 2
  %216 = icmp eq i32 %215, 0
  %217 = icmp slt i32 %212, 10
  %218 = or i1 %216, %217
  br i1 %218, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %219, !dbg !1432

219:                                              ; preds = %originalBBpart236, %originalBBpart232
  %220 = phi i32 [ %192, %originalBBpart232 ], [ %210, %originalBBpart236 ], !dbg !1432
  %221 = load i32, i32* @x.19
  %222 = load i32, i32* @y.20
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %219, %originalBB38alteredBB
  %229 = call i32 @xgetgroups(i8* %178, i32 %220, i32** %24), !dbg !1436
  store i32 %229, i32* %25, align 4, !dbg !1430
  %230 = load i32, i32* %25, align 4, !dbg !1437
  %231 = icmp slt i32 %230, 0, !dbg !1439
  %232 = load i32, i32* @x.19
  %233 = load i32, i32* @y.20
  %234 = sub i32 %232, 1
  %235 = mul i32 %232, %234
  %236 = urem i32 %235, 2
  %237 = icmp eq i32 %236, 0
  %238 = icmp slt i32 %233, 10
  %239 = or i1 %237, %238
  br i1 %239, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %231, label %240, label %318, !dbg !1440

240:                                              ; preds = %originalBBpart240
  %241 = load i32, i32* @x.19
  %242 = load i32, i32* @y.20
  %243 = sub i32 %241, 1
  %244 = mul i32 %241, %243
  %245 = urem i32 %244, 2
  %246 = icmp eq i32 %245, 0
  %247 = icmp slt i32 %242, 10
  %248 = or i1 %246, %247
  br i1 %248, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %240, %originalBB42alteredBB
  %249 = load i8*, i8** %16, align 8, !dbg !1441
  %250 = icmp ne i8* %249, null, !dbg !1441
  %251 = load i32, i32* @x.19
  %252 = load i32, i32* @y.20
  %253 = sub i32 %251, 1
  %254 = mul i32 %251, %253
  %255 = urem i32 %254, 2
  %256 = icmp eq i32 %255, 0
  %257 = icmp slt i32 %252, 10
  %258 = or i1 %256, %257
  br i1 %258, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br i1 %250, label %259, label %281, !dbg !1444

259:                                              ; preds = %originalBBpart244
  %260 = load i32, i32* @x.19
  %261 = load i32, i32* @y.20
  %262 = sub i32 %260, 1
  %263 = mul i32 %260, %262
  %264 = urem i32 %263, 2
  %265 = icmp eq i32 %264, 0
  %266 = icmp slt i32 %261, 10
  %267 = or i1 %265, %266
  br i1 %267, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %259, %originalBB46alteredBB
  %268 = call i32* @__errno_location() #15, !dbg !1445
  %269 = load i32, i32* %268, align 4, !dbg !1445
  %270 = call i8* @gettext(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.61, i64 0, i64 0)) #10, !dbg !1447
  %271 = load i8*, i8** %16, align 8, !dbg !1448
  %272 = call i8* @quote(i8* %271), !dbg !1449
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %269, i8* %270, i8* %272), !dbg !1450
  %273 = load i32, i32* @x.19
  %274 = load i32, i32* @y.20
  %275 = sub i32 %273, 1
  %276 = mul i32 %273, %275
  %277 = urem i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %278, %279
  br i1 %280, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %301, !dbg !1451

281:                                              ; preds = %originalBBpart244
  %282 = load i32, i32* @x.19
  %283 = load i32, i32* @y.20
  %284 = sub i32 %282, 1
  %285 = mul i32 %282, %284
  %286 = urem i32 %285, 2
  %287 = icmp eq i32 %286, 0
  %288 = icmp slt i32 %283, 10
  %289 = or i1 %287, %288
  br i1 %289, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %281, %originalBB50alteredBB
  %290 = call i32* @__errno_location() #15, !dbg !1452
  %291 = load i32, i32* %290, align 4, !dbg !1452
  %292 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1.62, i64 0, i64 0)) #10, !dbg !1454
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %291, i8* %292), !dbg !1455
  %293 = load i32, i32* @x.19
  %294 = load i32, i32* @y.20
  %295 = sub i32 %293, 1
  %296 = mul i32 %293, %295
  %297 = urem i32 %296, 2
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %298, %299
  br i1 %300, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br label %301

301:                                              ; preds = %originalBBpart252, %originalBBpart248
  %302 = load i32, i32* @x.19
  %303 = load i32, i32* @y.20
  %304 = sub i32 %302, 1
  %305 = mul i32 %302, %304
  %306 = urem i32 %305, 2
  %307 = icmp eq i32 %306, 0
  %308 = icmp slt i32 %303, 10
  %309 = or i1 %307, %308
  br i1 %309, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %301, %originalBB54alteredBB
  store i1 false, i1* %15, align 1, !dbg !1456
  %310 = load i32, i32* @x.19
  %311 = load i32, i32* @y.20
  %312 = sub i32 %310, 1
  %313 = mul i32 %310, %312
  %314 = urem i32 %313, 2
  %315 = icmp eq i32 %314, 0
  %316 = icmp slt i32 %311, 10
  %317 = or i1 %315, %316
  br i1 %317, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br label %490, !dbg !1456

318:                                              ; preds = %originalBBpart240
  call void @llvm.dbg.declare(metadata i32* %26, metadata !1457, metadata !DIExpression()), !dbg !1459
  %319 = load i32, i32* @x.19
  %320 = load i32, i32* @y.20
  %321 = sub i32 %319, 1
  %322 = mul i32 %319, %321
  %323 = urem i32 %322, 2
  %324 = icmp eq i32 %323, 0
  %325 = icmp slt i32 %320, 10
  %326 = or i1 %324, %325
  br i1 %326, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %318, %originalBB58alteredBB
  store i32 0, i32* %26, align 4, !dbg !1459
  %327 = load i32, i32* @x.19
  %328 = load i32, i32* @y.20
  %329 = sub i32 %327, 1
  %330 = mul i32 %327, %329
  %331 = urem i32 %330, 2
  %332 = icmp eq i32 %331, 0
  %333 = icmp slt i32 %328, 10
  %334 = or i1 %332, %333
  br i1 %334, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br label %335, !dbg !1460

335:                                              ; preds = %originalBBpart295, %originalBBpart260
  %336 = load i32, i32* @x.19
  %337 = load i32, i32* @y.20
  %338 = sub i32 %336, 1
  %339 = mul i32 %336, %338
  %340 = urem i32 %339, 2
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %341, %342
  br i1 %343, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %335, %originalBB62alteredBB
  %344 = load i32, i32* %26, align 4, !dbg !1461
  %345 = load i32, i32* %25, align 4, !dbg !1463
  %346 = icmp slt i32 %344, %345, !dbg !1464
  %347 = load i32, i32* @x.19
  %348 = load i32, i32* @y.20
  %349 = sub i32 %347, 1
  %350 = mul i32 %347, %349
  %351 = urem i32 %350, 2
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %352, %353
  br i1 %354, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br i1 %346, label %355, label %469, !dbg !1465

355:                                              ; preds = %originalBBpart264
  %356 = load i32, i32* @x.19
  %357 = load i32, i32* @y.20
  %358 = sub i32 %356, 1
  %359 = mul i32 %356, %358
  %360 = urem i32 %359, 2
  %361 = icmp eq i32 %360, 0
  %362 = icmp slt i32 %357, 10
  %363 = or i1 %361, %362
  br i1 %363, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %355, %originalBB66alteredBB
  %364 = load i32*, i32** %24, align 8, !dbg !1466
  %365 = load i32, i32* %26, align 4, !dbg !1468
  %366 = sext i32 %365 to i64, !dbg !1466
  %367 = getelementptr inbounds i32, i32* %364, i64 %366, !dbg !1466
  %368 = load i32, i32* %367, align 4, !dbg !1466
  %369 = load i32, i32* %18, align 4, !dbg !1469
  %370 = icmp ne i32 %368, %369, !dbg !1470
  %371 = load i32, i32* @x.19
  %372 = load i32, i32* @y.20
  %373 = sub i32 %371, 1
  %374 = mul i32 %371, %373
  %375 = urem i32 %374, 2
  %376 = icmp eq i32 %375, 0
  %377 = icmp slt i32 %372, 10
  %378 = or i1 %376, %377
  br i1 %378, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br i1 %370, label %379, label %449, !dbg !1471

379:                                              ; preds = %originalBBpart268
  %380 = load i32, i32* @x.19
  %381 = load i32, i32* @y.20
  %382 = sub i32 %380, 1
  %383 = mul i32 %380, %382
  %384 = urem i32 %383, 2
  %385 = icmp eq i32 %384, 0
  %386 = icmp slt i32 %381, 10
  %387 = or i1 %385, %386
  br i1 %387, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %379, %originalBB70alteredBB
  %388 = load i32*, i32** %24, align 8, !dbg !1472
  %389 = load i32, i32* %26, align 4, !dbg !1473
  %390 = sext i32 %389 to i64, !dbg !1472
  %391 = getelementptr inbounds i32, i32* %388, i64 %390, !dbg !1472
  %392 = load i32, i32* %391, align 4, !dbg !1472
  %393 = load i32, i32* %19, align 4, !dbg !1474
  %394 = icmp ne i32 %392, %393, !dbg !1475
  %395 = load i32, i32* @x.19
  %396 = load i32, i32* @y.20
  %397 = sub i32 %395, 1
  %398 = mul i32 %395, %397
  %399 = urem i32 %398, 2
  %400 = icmp eq i32 %399, 0
  %401 = icmp slt i32 %396, 10
  %402 = or i1 %400, %401
  br i1 %402, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br i1 %394, label %403, label %449, !dbg !1476

403:                                              ; preds = %originalBBpart272
  %404 = load i32, i32* @x.19
  %405 = load i32, i32* @y.20
  %406 = sub i32 %404, 1
  %407 = mul i32 %404, %406
  %408 = urem i32 %407, 2
  %409 = icmp eq i32 %408, 0
  %410 = icmp slt i32 %405, 10
  %411 = or i1 %409, %410
  br i1 %411, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %403, %originalBB74alteredBB
  %412 = load i8, i8* %21, align 1, !dbg !1477
  %413 = sext i8 %412 to i32, !dbg !1477
  %414 = call i32 @putchar_unlocked(i32 %413), !dbg !1477
  %415 = load i32*, i32** %24, align 8, !dbg !1479
  %416 = load i32, i32* %26, align 4, !dbg !1481
  %417 = sext i32 %416 to i64, !dbg !1479
  %418 = getelementptr inbounds i32, i32* %415, i64 %417, !dbg !1479
  %419 = load i32, i32* %418, align 4, !dbg !1479
  %420 = load i8, i8* %20, align 1, !dbg !1482
  %421 = trunc i8 %420 to i1, !dbg !1482
  %422 = call zeroext i1 @print_group(i32 %419, i1 zeroext %421), !dbg !1483
  %423 = load i32, i32* @x.19
  %424 = load i32, i32* @y.20
  %425 = sub i32 %423, 1
  %426 = mul i32 %423, %425
  %427 = urem i32 %426, 2
  %428 = icmp eq i32 %427, 0
  %429 = icmp slt i32 %424, 10
  %430 = or i1 %428, %429
  br i1 %430, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br i1 %422, label %432, label %431, !dbg !1484

431:                                              ; preds = %originalBBpart276
  store i8 0, i8* %22, align 1, !dbg !1485
  br label %432, !dbg !1486

432:                                              ; preds = %431, %originalBBpart276
  %433 = load i32, i32* @x.19
  %434 = load i32, i32* @y.20
  %435 = sub i32 %433, 1
  %436 = mul i32 %433, %435
  %437 = urem i32 %436, 2
  %438 = icmp eq i32 %437, 0
  %439 = icmp slt i32 %434, 10
  %440 = or i1 %438, %439
  br i1 %440, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %432, %originalBB78alteredBB
  %441 = load i32, i32* @x.19
  %442 = load i32, i32* @y.20
  %443 = sub i32 %441, 1
  %444 = mul i32 %441, %443
  %445 = urem i32 %444, 2
  %446 = icmp eq i32 %445, 0
  %447 = icmp slt i32 %442, 10
  %448 = or i1 %446, %447
  br i1 %448, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br label %449, !dbg !1487

449:                                              ; preds = %originalBBpart280, %originalBBpart272, %originalBBpart268
  br label %450, !dbg !1474

450:                                              ; preds = %449
  %451 = load i32, i32* @x.19
  %452 = load i32, i32* @y.20
  %453 = sub i32 %451, 1
  %454 = mul i32 %451, %453
  %455 = urem i32 %454, 2
  %456 = icmp eq i32 %455, 0
  %457 = icmp slt i32 %452, 10
  %458 = or i1 %456, %457
  br i1 %458, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %450, %originalBB82alteredBB
  %459 = load i32, i32* %26, align 4, !dbg !1488
  %460 = add nsw i32 %459, 1, !dbg !1488
  store i32 %460, i32* %26, align 4, !dbg !1488
  %461 = load i32, i32* @x.19
  %462 = load i32, i32* @y.20
  %463 = sub i32 %461, 1
  %464 = mul i32 %461, %463
  %465 = urem i32 %464, 2
  %466 = icmp eq i32 %465, 0
  %467 = icmp slt i32 %462, 10
  %468 = or i1 %466, %467
  br i1 %468, label %originalBBpart295, label %originalBB82alteredBB

originalBBpart295:                                ; preds = %originalBB82
  br label %335, !dbg !1489, !llvm.loop !1490

469:                                              ; preds = %originalBBpart264
  %470 = load i32, i32* @x.19
  %471 = load i32, i32* @y.20
  %472 = sub i32 %470, 1
  %473 = mul i32 %470, %472
  %474 = urem i32 %473, 2
  %475 = icmp eq i32 %474, 0
  %476 = icmp slt i32 %471, 10
  %477 = or i1 %475, %476
  br i1 %477, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %469, %originalBB97alteredBB
  %478 = load i32*, i32** %24, align 8, !dbg !1492
  %479 = bitcast i32* %478 to i8*, !dbg !1492
  call void @free(i8* %479) #10, !dbg !1493
  %480 = load i8, i8* %22, align 1, !dbg !1494
  %481 = trunc i8 %480 to i1, !dbg !1494
  store i1 %481, i1* %15, align 1, !dbg !1495
  %482 = load i32, i32* @x.19
  %483 = load i32, i32* @y.20
  %484 = sub i32 %482, 1
  %485 = mul i32 %482, %484
  %486 = urem i32 %485, 2
  %487 = icmp eq i32 %486, 0
  %488 = icmp slt i32 %483, 10
  %489 = or i1 %487, %488
  br i1 %489, label %originalBBpart299, label %originalBB97alteredBB

originalBBpart299:                                ; preds = %originalBB97
  br label %490, !dbg !1495

490:                                              ; preds = %originalBBpart299, %originalBBpart256
  %491 = load i32, i32* @x.19
  %492 = load i32, i32* @y.20
  %493 = sub i32 %491, 1
  %494 = mul i32 %491, %493
  %495 = urem i32 %494, 2
  %496 = icmp eq i32 %495, 0
  %497 = icmp slt i32 %492, 10
  %498 = or i1 %496, %497
  br i1 %498, label %originalBB101, label %originalBB101alteredBB

originalBB101:                                    ; preds = %490, %originalBB101alteredBB
  %499 = load i1, i1* %15, align 1, !dbg !1496
  %500 = load i32, i32* @x.19
  %501 = load i32, i32* @y.20
  %502 = sub i32 %500, 1
  %503 = mul i32 %500, %502
  %504 = urem i32 %503, 2
  %505 = icmp eq i32 %504, 0
  %506 = icmp slt i32 %501, 10
  %507 = or i1 %505, %506
  br i1 %507, label %originalBBpart2103, label %originalBB101alteredBB

originalBBpart2103:                               ; preds = %originalBB101
  ret i1 %499, !dbg !1496

originalBBalteredBB:                              ; preds = %originalBB, %6
  %508 = alloca i1, align 1
  %509 = alloca i8*, align 8
  %510 = alloca i32, align 4
  %511 = alloca i32, align 4
  %512 = alloca i32, align 4
  %513 = alloca i8, align 1
  %514 = alloca i8, align 1
  %515 = alloca i8, align 1
  %516 = alloca %struct.passwd*, align 8
  %517 = alloca i32*, align 8
  %518 = alloca i32, align 4
  %519 = alloca i32, align 4
  store i8* %0, i8** %509, align 8
  call void @llvm.dbg.declare(metadata i8** %509, metadata !1497, metadata !DIExpression()), !dbg !1365
  store i32 %1, i32* %510, align 4
  call void @llvm.dbg.declare(metadata i32* %510, metadata !1504, metadata !DIExpression()), !dbg !1367
  store i32 %2, i32* %511, align 4
  call void @llvm.dbg.declare(metadata i32* %511, metadata !1505, metadata !DIExpression()), !dbg !1369
  store i32 %3, i32* %512, align 4
  call void @llvm.dbg.declare(metadata i32* %512, metadata !1506, metadata !DIExpression()), !dbg !1371
  %520 = zext i1 %4 to i8
  store i8 %520, i8* %513, align 1
  call void @llvm.dbg.declare(metadata i8* %513, metadata !1507, metadata !DIExpression()), !dbg !1373
  store i8 %5, i8* %514, align 1
  call void @llvm.dbg.declare(metadata i8* %514, metadata !1508, metadata !DIExpression()), !dbg !1375
  call void @llvm.dbg.declare(metadata i8* %515, metadata !1509, metadata !DIExpression()), !dbg !1377
  store i8 1, i8* %515, align 1, !dbg !1377
  call void @llvm.dbg.declare(metadata %struct.passwd** %516, metadata !1510, metadata !DIExpression()), !dbg !1389
  store %struct.passwd* null, %struct.passwd** %516, align 8, !dbg !1389
  %521 = load i8*, i8** %509, align 8, !dbg !1390
  %522 = icmp ne i8* %521, null, !dbg !1390
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %38
  %523 = load i32, i32* %17, align 4, !dbg !1393
  %524 = call %struct.passwd* @getpwuid(i32 %523), !dbg !1395
  store %struct.passwd* %524, %struct.passwd** %23, align 8, !dbg !1396
  %525 = load %struct.passwd*, %struct.passwd** %23, align 8, !dbg !1397
  %526 = icmp eq %struct.passwd* %525, null, !dbg !1399
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %59
  store i8 0, i8* %22, align 1, !dbg !1401
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %76
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %93
  %527 = load i32, i32* %18, align 4, !dbg !1404
  %528 = load i8, i8* %20, align 1, !dbg !1406
  %529 = trunc i8 %528 to i1, !dbg !1406
  %530 = call zeroext i1 @print_group(i32 %527, i1 zeroext %529), !dbg !1407
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %115
  %531 = load i32, i32* %19, align 4, !dbg !1411
  %532 = load i32, i32* %18, align 4, !dbg !1413
  %533 = icmp ne i32 %531, %532, !dbg !1414
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %135
  %534 = load i8, i8* %21, align 1, !dbg !1416
  %535 = sext i8 %534 to i32, !dbg !1416
  %536 = call i32 @putchar_unlocked(i32 %535), !dbg !1416
  %537 = load i32, i32* %19, align 4, !dbg !1418
  %538 = load i8, i8* %20, align 1, !dbg !1420
  %539 = trunc i8 %538 to i1, !dbg !1420
  %540 = call zeroext i1 @print_group(i32 %537, i1 zeroext %539), !dbg !1421
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %160
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %181
  %541 = load %struct.passwd*, %struct.passwd** %23, align 8, !dbg !1433
  %542 = getelementptr inbounds %struct.passwd, %struct.passwd* %541, i32 0, i32 3, !dbg !1434
  %543 = load i32, i32* %542, align 4, !dbg !1434
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %201
  %544 = load i32, i32* %19, align 4, !dbg !1435
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %219
  %545 = call i32 @xgetgroups(i8* %178, i32 %220, i32** %24), !dbg !1436
  store i32 %545, i32* %25, align 4, !dbg !1430
  %546 = load i32, i32* %25, align 4, !dbg !1437
  %547 = icmp slt i32 %546, 0, !dbg !1439
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %240
  %548 = load i8*, i8** %16, align 8, !dbg !1441
  %549 = icmp ne i8* %548, null, !dbg !1441
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %259
  %550 = call i32* @__errno_location() #15, !dbg !1445
  %551 = load i32, i32* %550, align 4, !dbg !1445
  %552 = call i8* @gettext(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.61, i64 0, i64 0)) #10, !dbg !1447
  %553 = load i8*, i8** %16, align 8, !dbg !1448
  %554 = call i8* @quote(i8* %553), !dbg !1449
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %551, i8* %552, i8* %554), !dbg !1450
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %281
  %555 = call i32* @__errno_location() #15, !dbg !1452
  %556 = load i32, i32* %555, align 4, !dbg !1452
  %557 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1.62, i64 0, i64 0)) #10, !dbg !1454
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %556, i8* %557), !dbg !1455
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %301
  store i1 false, i1* %15, align 1, !dbg !1456
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %318
  store i32 0, i32* %26, align 4, !dbg !1459
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %335
  %558 = load i32, i32* %26, align 4, !dbg !1461
  %559 = load i32, i32* %25, align 4, !dbg !1463
  %560 = icmp slt i32 %558, %559, !dbg !1464
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %355
  %561 = load i32*, i32** %24, align 8, !dbg !1466
  %562 = load i32, i32* %26, align 4, !dbg !1468
  %563 = sext i32 %562 to i64, !dbg !1466
  %564 = getelementptr inbounds i32, i32* %561, i64 %563, !dbg !1466
  %565 = load i32, i32* %564, align 4, !dbg !1466
  %566 = load i32, i32* %18, align 4, !dbg !1469
  %567 = icmp ne i32 %565, %566, !dbg !1470
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %379
  %568 = load i32*, i32** %24, align 8, !dbg !1472
  %569 = load i32, i32* %26, align 4, !dbg !1473
  %570 = sext i32 %569 to i64, !dbg !1472
  %571 = getelementptr inbounds i32, i32* %568, i64 %570, !dbg !1472
  %572 = load i32, i32* %571, align 4, !dbg !1472
  %573 = load i32, i32* %19, align 4, !dbg !1474
  %574 = icmp ne i32 %572, %573, !dbg !1475
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %403
  %575 = load i8, i8* %21, align 1, !dbg !1477
  %576 = sext i8 %575 to i32, !dbg !1477
  %577 = call i32 @putchar_unlocked(i32 %576), !dbg !1477
  %578 = load i32*, i32** %24, align 8, !dbg !1479
  %579 = load i32, i32* %26, align 4, !dbg !1481
  %580 = sext i32 %579 to i64, !dbg !1479
  %581 = getelementptr inbounds i32, i32* %578, i64 %580, !dbg !1479
  %582 = load i32, i32* %581, align 4, !dbg !1479
  %583 = load i8, i8* %20, align 1, !dbg !1482
  %584 = trunc i8 %583 to i1, !dbg !1482
  %585 = call zeroext i1 @print_group(i32 %582, i1 zeroext %584), !dbg !1483
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %432
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %450
  %586 = load i32, i32* %26, align 4, !dbg !1488
  %_ = sub i32 %586, 1
  %gen = mul i32 %_, 1
  %_83 = sub i32 %586, 1
  %gen84 = mul i32 %_83, 1
  %_85 = shl i32 %586, 1
  %_86 = sub i32 0, %586
  %gen87 = add i32 %_86, 1
  %_88 = sub i32 %586, 1
  %gen89 = mul i32 %_88, 1
  %_90 = sub i32 %586, 1
  %gen91 = mul i32 %_90, 1
  %_92 = shl i32 %586, 1
  %_93 = shl i32 %586, 1
  %587 = add nsw i32 %586, 1, !dbg !1488
  store i32 %587, i32* %26, align 4, !dbg !1488
  br label %originalBB82

originalBB97alteredBB:                            ; preds = %originalBB97, %469
  %588 = load i32*, i32** %24, align 8, !dbg !1492
  %589 = bitcast i32* %588 to i8*, !dbg !1492
  call void @free(i8* %589) #10, !dbg !1493
  %590 = load i8, i8* %22, align 1, !dbg !1494
  %591 = trunc i8 %590 to i1, !dbg !1494
  store i1 %591, i1* %15, align 1, !dbg !1495
  br label %originalBB97

originalBB101alteredBB:                           ; preds = %originalBB101, %490
  %592 = load i1, i1* %15, align 1, !dbg !1496
  br label %originalBB101
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @print_group(i32, i1 zeroext) #4 !dbg !1521 {
  %3 = load i32, i32* @x.21
  %4 = load i32, i32* @y.22
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8, align 1
  %13 = alloca %struct.group*, align 8
  %14 = alloca i8, align 1
  %15 = alloca i8*, align 8
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !1524, metadata !DIExpression()), !dbg !1525
  %16 = zext i1 %1 to i8
  store i8 %16, i8* %12, align 1
  call void @llvm.dbg.declare(metadata i8* %12, metadata !1526, metadata !DIExpression()), !dbg !1527
  call void @llvm.dbg.declare(metadata %struct.group** %13, metadata !1528, metadata !DIExpression()), !dbg !1536
  store %struct.group* null, %struct.group** %13, align 8, !dbg !1536
  call void @llvm.dbg.declare(metadata i8* %14, metadata !1537, metadata !DIExpression()), !dbg !1538
  store i8 1, i8* %14, align 1, !dbg !1538
  %17 = load i8, i8* %12, align 1, !dbg !1539
  %18 = trunc i8 %17 to i1, !dbg !1539
  %19 = load i32, i32* @x.21
  %20 = load i32, i32* @y.22
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %85, !dbg !1541

27:                                               ; preds = %originalBBpart2
  %28 = load i32, i32* @x.21
  %29 = load i32, i32* @y.22
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load i32, i32* %11, align 4, !dbg !1542
  %37 = call %struct.group* @getgrgid(i32 %36), !dbg !1544
  store %struct.group* %37, %struct.group** %13, align 8, !dbg !1545
  %38 = load %struct.group*, %struct.group** %13, align 8, !dbg !1546
  %39 = icmp eq %struct.group* %38, null, !dbg !1548
  %40 = load i32, i32* @x.21
  %41 = load i32, i32* @y.22
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %39, label %48, label %68, !dbg !1549

48:                                               ; preds = %originalBBpart24
  %49 = load i32, i32* @x.21
  %50 = load i32, i32* @y.22
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = call i8* @gettext(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2.63, i64 0, i64 0)) #10, !dbg !1550
  %58 = load i32, i32* %11, align 4, !dbg !1552
  %59 = zext i32 %58 to i64, !dbg !1553
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %57, i64 %59), !dbg !1554
  store i8 0, i8* %14, align 1, !dbg !1555
  %60 = load i32, i32* @x.21
  %61 = load i32, i32* @y.22
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %68, !dbg !1556

68:                                               ; preds = %originalBBpart28, %originalBBpart24
  %69 = load i32, i32* @x.21
  %70 = load i32, i32* @y.22
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %68, %originalBB10alteredBB
  %77 = load i32, i32* @x.21
  %78 = load i32, i32* @y.22
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %85, !dbg !1557

85:                                               ; preds = %originalBBpart212, %originalBBpart2
  call void @llvm.dbg.declare(metadata i8** %15, metadata !1558, metadata !DIExpression()), !dbg !1559
  %86 = load i32, i32* @x.21
  %87 = load i32, i32* @y.22
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %85, %originalBB14alteredBB
  %94 = load %struct.group*, %struct.group** %13, align 8, !dbg !1560
  %95 = icmp ne %struct.group* %94, null, !dbg !1560
  %96 = load i32, i32* @x.21
  %97 = load i32, i32* @y.22
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %95, label %104, label %108, !dbg !1560

104:                                              ; preds = %originalBBpart216
  %105 = load %struct.group*, %struct.group** %13, align 8, !dbg !1561
  %106 = getelementptr inbounds %struct.group, %struct.group* %105, i32 0, i32 0, !dbg !1562
  %107 = load i8*, i8** %106, align 8, !dbg !1562
  br label %126, !dbg !1560

108:                                              ; preds = %originalBBpart216
  %109 = load i32, i32* @x.21
  %110 = load i32, i32* @y.22
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %108, %originalBB18alteredBB
  %117 = call i8* @gidtostr_ptr.64(i32* %11), !dbg !1563
  %118 = load i32, i32* @x.21
  %119 = load i32, i32* @y.22
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %126, !dbg !1560

126:                                              ; preds = %originalBBpart220, %104
  %127 = phi i8* [ %107, %104 ], [ %117, %originalBBpart220 ], !dbg !1560
  store i8* %127, i8** %15, align 8, !dbg !1559
  %128 = load i8*, i8** %15, align 8, !dbg !1564
  %129 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1564
  %130 = call i32 @fputs_unlocked(i8* %128, %struct._IO_FILE* %129), !dbg !1564
  %131 = load i8, i8* %14, align 1, !dbg !1565
  %132 = trunc i8 %131 to i1, !dbg !1565
  ret i1 %132, !dbg !1566

originalBBalteredBB:                              ; preds = %originalBB, %2
  %133 = alloca i32, align 4
  %134 = alloca i8, align 1
  %135 = alloca %struct.group*, align 8
  %136 = alloca i8, align 1
  %137 = alloca i8*, align 8
  store i32 %0, i32* %133, align 4
  call void @llvm.dbg.declare(metadata i32* %133, metadata !1567, metadata !DIExpression()), !dbg !1525
  %138 = zext i1 %1 to i8
  store i8 %138, i8* %134, align 1
  call void @llvm.dbg.declare(metadata i8* %134, metadata !1574, metadata !DIExpression()), !dbg !1527
  call void @llvm.dbg.declare(metadata %struct.group** %135, metadata !1575, metadata !DIExpression()), !dbg !1536
  store %struct.group* null, %struct.group** %135, align 8, !dbg !1536
  call void @llvm.dbg.declare(metadata i8* %136, metadata !1583, metadata !DIExpression()), !dbg !1538
  store i8 1, i8* %136, align 1, !dbg !1538
  %139 = load i8, i8* %134, align 1, !dbg !1539
  %140 = trunc i8 %139 to i1, !dbg !1539
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  %141 = load i32, i32* %11, align 4, !dbg !1542
  %142 = call %struct.group* @getgrgid(i32 %141), !dbg !1544
  store %struct.group* %142, %struct.group** %13, align 8, !dbg !1545
  %143 = load %struct.group*, %struct.group** %13, align 8, !dbg !1546
  %144 = icmp eq %struct.group* %143, null, !dbg !1548
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %145 = call i8* @gettext(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2.63, i64 0, i64 0)) #10, !dbg !1550
  %146 = load i32, i32* %11, align 4, !dbg !1552
  %147 = zext i32 %146 to i64, !dbg !1553
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %145, i64 %147), !dbg !1554
  store i8 0, i8* %14, align 1, !dbg !1555
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %68
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %85
  %148 = load %struct.group*, %struct.group** %13, align 8, !dbg !1560
  %149 = icmp ne %struct.group* %148, null, !dbg !1560
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %108
  %150 = call i8* @gidtostr_ptr.64(i32* %11), !dbg !1563
  br label %originalBB18
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gidtostr_ptr.64(i32*) #4 !dbg !80 {
  %2 = load i32, i32* @x.23
  %3 = load i32, i32* @y.24
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32*, align 8
  store i32* %0, i32** %10, align 8
  call void @llvm.dbg.declare(metadata i32** %10, metadata !1584, metadata !DIExpression()), !dbg !1585
  %11 = load i32*, i32** %10, align 8, !dbg !1586
  %12 = load i32, i32* %11, align 4, !dbg !1587
  %13 = zext i32 %12 to i64, !dbg !1587
  %14 = call i8* @umaxtostr(i64 %13, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @gidtostr_ptr.buf.65, i64 0, i64 0)), !dbg !1588
  %15 = load i32, i32* @x.23
  %16 = load i32, i32* @y.24
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !1589

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32*, align 8
  store i32* %0, i32** %23, align 8
  call void @llvm.dbg.declare(metadata i32** %23, metadata !1590, metadata !DIExpression()), !dbg !1585
  %24 = load i32*, i32** %23, align 8, !dbg !1586
  %25 = load i32, i32* %24, align 4, !dbg !1587
  %26 = zext i32 %25 to i64, !dbg !1587
  %27 = call i8* @umaxtostr(i64 %26, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @gidtostr_ptr.buf.65, i64 0, i64 0)), !dbg !1588
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @close_stdout() #4 !dbg !1596 {
  %1 = alloca i8*, align 8
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1599
  %3 = call i32 @close_stream(%struct._IO_FILE* %2), !dbg !1601
  %4 = icmp ne i32 %3, 0, !dbg !1602
  br i1 %4, label %5, label %108, !dbg !1603

5:                                                ; preds = %0
  %6 = load i32, i32* @x.25
  %7 = load i32, i32* @y.26
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = load i8, i8* @ignore_EPIPE, align 1, !dbg !1604
  %15 = trunc i8 %14 to i1, !dbg !1604
  %16 = load i32, i32* @x.25
  %17 = load i32, i32* @y.26
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %44, !dbg !1605

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.25
  %26 = load i32, i32* @y.26
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = call i32* @__errno_location() #15, !dbg !1606
  %34 = load i32, i32* %33, align 4, !dbg !1606
  %35 = icmp eq i32 %34, 32, !dbg !1607
  %36 = load i32, i32* @x.25
  %37 = load i32, i32* @y.26
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %35, label %108, label %44, !dbg !1608

44:                                               ; preds = %originalBBpart24, %originalBBpart2
  call void @llvm.dbg.declare(metadata i8** %1, metadata !1609, metadata !DIExpression()), !dbg !1611
  %45 = load i32, i32* @x.25
  %46 = load i32, i32* @y.26
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  %53 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.71, i64 0, i64 0)) #10, !dbg !1612
  store i8* %53, i8** %1, align 8, !dbg !1611
  %54 = load i8*, i8** @file_name, align 8, !dbg !1613
  %55 = icmp ne i8* %54, null, !dbg !1613
  %56 = load i32, i32* @x.25
  %57 = load i32, i32* @y.26
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %55, label %64, label %70, !dbg !1615

64:                                               ; preds = %originalBBpart28
  %65 = call i32* @__errno_location() #15, !dbg !1616
  %66 = load i32, i32* %65, align 4, !dbg !1616
  %67 = load i8*, i8** @file_name, align 8, !dbg !1617
  %68 = call i8* @quotearg_colon(i8* %67), !dbg !1618
  %69 = load i8*, i8** %1, align 8, !dbg !1619
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %66, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.72, i64 0, i64 0), i8* %68, i8* %69), !dbg !1620
  br label %90, !dbg !1620

70:                                               ; preds = %originalBBpart28
  %71 = load i32, i32* @x.25
  %72 = load i32, i32* @y.26
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %70, %originalBB10alteredBB
  %79 = call i32* @__errno_location() #15, !dbg !1621
  %80 = load i32, i32* %79, align 4, !dbg !1621
  %81 = load i8*, i8** %1, align 8, !dbg !1622
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %80, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.73, i64 0, i64 0), i8* %81), !dbg !1623
  %82 = load i32, i32* @x.25
  %83 = load i32, i32* @y.26
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %90

90:                                               ; preds = %originalBBpart212, %64
  %91 = load i32, i32* @x.25
  %92 = load i32, i32* @y.26
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %90, %originalBB14alteredBB
  %99 = load volatile i32, i32* @exit_failure, align 4, !dbg !1624
  call void @_exit(i32 %99) #14, !dbg !1625
  %100 = load i32, i32* @x.25
  %101 = load i32, i32* @y.26
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  unreachable, !dbg !1625

108:                                              ; preds = %originalBBpart24, %0
  %109 = load i32, i32* @x.25
  %110 = load i32, i32* @y.26
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %108, %originalBB18alteredBB
  %117 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1626
  %118 = call i32 @close_stream(%struct._IO_FILE* %117), !dbg !1628
  %119 = icmp ne i32 %118, 0, !dbg !1629
  %120 = load i32, i32* @x.25
  %121 = load i32, i32* @y.26
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %119, label %128, label %146, !dbg !1630

128:                                              ; preds = %originalBBpart220
  %129 = load i32, i32* @x.25
  %130 = load i32, i32* @y.26
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %128, %originalBB22alteredBB
  %137 = load volatile i32, i32* @exit_failure, align 4, !dbg !1631
  call void @_exit(i32 %137) #14, !dbg !1632
  %138 = load i32, i32* @x.25
  %139 = load i32, i32* @y.26
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  unreachable, !dbg !1632

146:                                              ; preds = %originalBBpart220
  ret void, !dbg !1633

originalBBalteredBB:                              ; preds = %originalBB, %5
  %147 = load i8, i8* @ignore_EPIPE, align 1, !dbg !1604
  %148 = trunc i8 %147 to i1, !dbg !1604
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %149 = call i32* @__errno_location() #15, !dbg !1606
  %150 = load i32, i32* %149, align 4, !dbg !1606
  %151 = icmp eq i32 %150, 32, !dbg !1607
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  %152 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.71, i64 0, i64 0)) #10, !dbg !1612
  store i8* %152, i8** %1, align 8, !dbg !1611
  %153 = load i8*, i8** @file_name, align 8, !dbg !1613
  %154 = icmp ne i8* %153, null, !dbg !1613
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %70
  %155 = call i32* @__errno_location() #15, !dbg !1621
  %156 = load i32, i32* %155, align 4, !dbg !1621
  %157 = load i8*, i8** %1, align 8, !dbg !1622
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %156, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.73, i64 0, i64 0), i8* %157), !dbg !1623
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %90
  %158 = load volatile i32, i32* @exit_failure, align 4, !dbg !1624
  call void @_exit(i32 %158) #14, !dbg !1625
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %108
  %159 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1626
  %160 = call i32 @close_stream(%struct._IO_FILE* %159), !dbg !1628
  %161 = icmp ne i32 %160, 0, !dbg !1629
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %128
  %162 = load volatile i32, i32* @exit_failure, align 4, !dbg !1631
  call void @_exit(i32 %162) #14, !dbg !1632
  br label %originalBB22
}

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #9

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @umaxtostr(i64, i8*) #4 !dbg !1634 {
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  store i64 %0, i64* %3, align 8
  call void @llvm.dbg.declare(metadata i64* %3, metadata !1638, metadata !DIExpression()), !dbg !1639
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !1640, metadata !DIExpression()), !dbg !1641
  call void @llvm.dbg.declare(metadata i8** %5, metadata !1642, metadata !DIExpression()), !dbg !1643
  %6 = load i8*, i8** %4, align 8, !dbg !1644
  %7 = getelementptr inbounds i8, i8* %6, i64 20, !dbg !1645
  store i8* %7, i8** %5, align 8, !dbg !1643
  %8 = load i8*, i8** %5, align 8, !dbg !1646
  store i8 0, i8* %8, align 1, !dbg !1647
  %9 = load i64, i64* %3, align 8, !dbg !1648
  %10 = icmp ult i64 %9, 0, !dbg !1650
  br i1 %10, label %11, label %74, !dbg !1651

11:                                               ; preds = %2
  %12 = load i32, i32* @x.27
  %13 = load i32, i32* @y.28
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %11, %originalBBalteredBB
  %20 = load i32, i32* @x.27
  %21 = load i32, i32* @y.28
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %28, !dbg !1652

28:                                               ; preds = %51, %originalBBpart2
  %29 = load i32, i32* @x.27
  %30 = load i32, i32* @y.28
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %28, %originalBB1alteredBB
  %37 = load i64, i64* %3, align 8, !dbg !1654
  %38 = urem i64 %37, 10, !dbg !1655
  %39 = sub i64 48, %38, !dbg !1656
  %40 = trunc i64 %39 to i8, !dbg !1657
  %41 = load i8*, i8** %5, align 8, !dbg !1658
  %42 = getelementptr inbounds i8, i8* %41, i32 -1, !dbg !1658
  store i8* %42, i8** %5, align 8, !dbg !1658
  store i8 %40, i8* %42, align 1, !dbg !1659
  %43 = load i32, i32* @x.27
  %44 = load i32, i32* @y.28
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBBpart210, label %originalBB1alteredBB

originalBBpart210:                                ; preds = %originalBB1
  br label %51, !dbg !1660

51:                                               ; preds = %originalBBpart210
  %52 = load i64, i64* %3, align 8, !dbg !1661
  %53 = udiv i64 %52, 10, !dbg !1661
  store i64 %53, i64* %3, align 8, !dbg !1661
  %54 = icmp ne i64 %53, 0, !dbg !1662
  br i1 %54, label %28, label %55, !dbg !1660, !llvm.loop !1663

55:                                               ; preds = %51
  %56 = load i32, i32* @x.27
  %57 = load i32, i32* @y.28
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %55, %originalBB12alteredBB
  %64 = load i8*, i8** %5, align 8, !dbg !1665
  %65 = getelementptr inbounds i8, i8* %64, i32 -1, !dbg !1665
  store i8* %65, i8** %5, align 8, !dbg !1665
  store i8 45, i8* %65, align 1, !dbg !1666
  %66 = load i32, i32* @x.27
  %67 = load i32, i32* @y.28
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart214, label %originalBB12alteredBB

originalBBpart214:                                ; preds = %originalBB12
  br label %151, !dbg !1667

74:                                               ; preds = %2
  %75 = load i32, i32* @x.27
  %76 = load i32, i32* @y.28
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBB16, label %originalBB16alteredBB

originalBB16:                                     ; preds = %74, %originalBB16alteredBB
  %83 = load i32, i32* @x.27
  %84 = load i32, i32* @y.28
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart218, label %originalBB16alteredBB

originalBBpart218:                                ; preds = %originalBB16
  br label %91, !dbg !1668

91:                                               ; preds = %originalBBpart243, %originalBBpart218
  %92 = load i32, i32* @x.27
  %93 = load i32, i32* @y.28
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %91, %originalBB20alteredBB
  %100 = load i64, i64* %3, align 8, !dbg !1670
  %101 = urem i64 %100, 10, !dbg !1671
  %102 = add i64 48, %101, !dbg !1672
  %103 = trunc i64 %102 to i8, !dbg !1673
  %104 = load i8*, i8** %5, align 8, !dbg !1674
  %105 = getelementptr inbounds i8, i8* %104, i32 -1, !dbg !1674
  store i8* %105, i8** %5, align 8, !dbg !1674
  store i8 %103, i8* %105, align 1, !dbg !1675
  %106 = load i32, i32* @x.27
  %107 = load i32, i32* @y.28
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart237, label %originalBB20alteredBB

originalBBpart237:                                ; preds = %originalBB20
  br label %114, !dbg !1676

114:                                              ; preds = %originalBBpart237
  %115 = load i32, i32* @x.27
  %116 = load i32, i32* @y.28
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %114, %originalBB39alteredBB
  %123 = load i64, i64* %3, align 8, !dbg !1677
  %124 = udiv i64 %123, 10, !dbg !1677
  store i64 %124, i64* %3, align 8, !dbg !1677
  %125 = icmp ne i64 %124, 0, !dbg !1678
  %126 = load i32, i32* @x.27
  %127 = load i32, i32* @y.28
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart243, label %originalBB39alteredBB

originalBBpart243:                                ; preds = %originalBB39
  br i1 %125, label %91, label %134, !dbg !1676, !llvm.loop !1679

134:                                              ; preds = %originalBBpart243
  %135 = load i32, i32* @x.27
  %136 = load i32, i32* @y.28
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %134, %originalBB45alteredBB
  %143 = load i32, i32* @x.27
  %144 = load i32, i32* @y.28
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBBpart247, label %originalBB45alteredBB

originalBBpart247:                                ; preds = %originalBB45
  br label %151

151:                                              ; preds = %originalBBpart247, %originalBBpart214
  %152 = load i8*, i8** %5, align 8, !dbg !1681
  ret i8* %152, !dbg !1682

originalBBalteredBB:                              ; preds = %originalBB, %11
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %28
  %153 = load i64, i64* %3, align 8, !dbg !1654
  %_ = shl i64 %153, 10
  %_2 = sub i64 0, %153
  %gen = add i64 %_2, 10
  %_3 = shl i64 %153, 10
  %_4 = shl i64 %153, 10
  %_5 = sub i64 0, %153
  %gen6 = add i64 %_5, 10
  %154 = urem i64 %153, 10, !dbg !1655
  %_7 = shl i64 48, %154
  %_8 = shl i64 48, %154
  %155 = sub i64 48, %154, !dbg !1656
  %156 = trunc i64 %155 to i8, !dbg !1657
  %157 = load i8*, i8** %5, align 8, !dbg !1658
  %158 = getelementptr inbounds i8, i8* %157, i32 -1, !dbg !1658
  store i8* %158, i8** %5, align 8, !dbg !1658
  store i8 %156, i8* %158, align 1, !dbg !1659
  br label %originalBB1

originalBB12alteredBB:                            ; preds = %originalBB12, %55
  %159 = load i8*, i8** %5, align 8, !dbg !1665
  %160 = getelementptr inbounds i8, i8* %159, i32 -1, !dbg !1665
  store i8* %160, i8** %5, align 8, !dbg !1665
  store i8 45, i8* %160, align 1, !dbg !1666
  br label %originalBB12

originalBB16alteredBB:                            ; preds = %originalBB16, %74
  br label %originalBB16

originalBB20alteredBB:                            ; preds = %originalBB20, %91
  %161 = load i64, i64* %3, align 8, !dbg !1670
  %_21 = sub i64 0, %161
  %gen22 = add i64 %_21, 10
  %_23 = sub i64 %161, 10
  %gen24 = mul i64 %_23, 10
  %_25 = sub i64 %161, 10
  %gen26 = mul i64 %_25, 10
  %_27 = sub i64 0, %161
  %gen28 = add i64 %_27, 10
  %_29 = sub i64 0, %161
  %gen30 = add i64 %_29, 10
  %_31 = shl i64 %161, 10
  %_32 = shl i64 %161, 10
  %_33 = sub i64 %161, 10
  %gen34 = mul i64 %_33, 10
  %162 = urem i64 %161, 10, !dbg !1671
  %_35 = shl i64 48, %162
  %163 = add i64 48, %162, !dbg !1672
  %164 = trunc i64 %163 to i8, !dbg !1673
  %165 = load i8*, i8** %5, align 8, !dbg !1674
  %166 = getelementptr inbounds i8, i8* %165, i32 -1, !dbg !1674
  store i8* %166, i8** %5, align 8, !dbg !1674
  store i8 %164, i8* %166, align 1, !dbg !1675
  br label %originalBB20

originalBB39alteredBB:                            ; preds = %originalBB39, %114
  %167 = load i64, i64* %3, align 8, !dbg !1677
  %_40 = sub i64 0, %167
  %gen41 = add i64 %_40, 10
  %168 = udiv i64 %167, 10, !dbg !1677
  store i64 %168, i64* %3, align 8, !dbg !1677
  %169 = icmp ne i64 %168, 0, !dbg !1678
  br label %originalBB39

originalBB45alteredBB:                            ; preds = %originalBB45, %134
  br label %originalBB45
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_program_name(i8*) #4 !dbg !1683 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !1684, metadata !DIExpression()), !dbg !1685
  call void @llvm.dbg.declare(metadata i8** %3, metadata !1686, metadata !DIExpression()), !dbg !1687
  call void @llvm.dbg.declare(metadata i8** %4, metadata !1688, metadata !DIExpression()), !dbg !1689
  %5 = load i8*, i8** %2, align 8, !dbg !1690
  %6 = icmp eq i8* %5, null, !dbg !1692
  br i1 %6, label %7, label %26, !dbg !1693

7:                                                ; preds = %1
  %8 = load i32, i32* @x.29
  %9 = load i32, i32* @y.30
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %7, %originalBBalteredBB
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1694
  %17 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.80, i64 0, i64 0), %struct._IO_FILE* %16), !dbg !1696
  call void @abort() #12, !dbg !1697
  %18 = load i32, i32* @x.29
  %19 = load i32, i32* @y.30
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !1697

26:                                               ; preds = %1
  %27 = load i32, i32* @x.29
  %28 = load i32, i32* @y.30
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load i8*, i8** %2, align 8, !dbg !1698
  %36 = call i8* @strrchr(i8* %35, i32 47) #13, !dbg !1699
  store i8* %36, i8** %3, align 8, !dbg !1700
  %37 = load i8*, i8** %3, align 8, !dbg !1701
  %38 = icmp ne i8* %37, null, !dbg !1702
  %39 = load i32, i32* @x.29
  %40 = load i32, i32* @y.30
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %66, !dbg !1701

47:                                               ; preds = %originalBBpart24
  %48 = load i32, i32* @x.29
  %49 = load i32, i32* @y.30
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = load i8*, i8** %3, align 8, !dbg !1703
  %57 = getelementptr inbounds i8, i8* %56, i64 1, !dbg !1704
  %58 = load i32, i32* @x.29
  %59 = load i32, i32* @y.30
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %68, !dbg !1701

66:                                               ; preds = %originalBBpart24
  %67 = load i8*, i8** %2, align 8, !dbg !1705
  br label %68, !dbg !1701

68:                                               ; preds = %66, %originalBBpart28
  %69 = phi i8* [ %57, %originalBBpart28 ], [ %67, %66 ], !dbg !1701
  %70 = load i32, i32* @x.29
  %71 = load i32, i32* @y.30
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %68, %originalBB10alteredBB
  store i8* %69, i8** %4, align 8, !dbg !1706
  %78 = load i8*, i8** %4, align 8, !dbg !1707
  %79 = load i8*, i8** %2, align 8, !dbg !1709
  %80 = ptrtoint i8* %78 to i64, !dbg !1710
  %81 = ptrtoint i8* %79 to i64, !dbg !1710
  %82 = sub i64 %80, %81, !dbg !1710
  %83 = icmp sge i64 %82, 7, !dbg !1711
  %84 = load i32, i32* @x.29
  %85 = load i32, i32* @y.30
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart217, label %originalBB10alteredBB

originalBBpart217:                                ; preds = %originalBB10
  br i1 %83, label %92, label %155, !dbg !1712

92:                                               ; preds = %originalBBpart217
  %93 = load i32, i32* @x.29
  %94 = load i32, i32* @y.30
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %92, %originalBB19alteredBB
  %101 = load i8*, i8** %4, align 8, !dbg !1713
  %102 = getelementptr inbounds i8, i8* %101, i64 -7, !dbg !1714
  %103 = call i32 @strncmp(i8* %102, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.81, i64 0, i64 0), i64 7) #13, !dbg !1715
  %104 = icmp eq i32 %103, 0, !dbg !1716
  %105 = load i32, i32* @x.29
  %106 = load i32, i32* @y.30
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br i1 %104, label %113, label %155, !dbg !1717

113:                                              ; preds = %originalBBpart221
  %114 = load i32, i32* @x.29
  %115 = load i32, i32* @y.30
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %113, %originalBB23alteredBB
  %122 = load i8*, i8** %4, align 8, !dbg !1718
  store i8* %122, i8** %2, align 8, !dbg !1720
  %123 = load i8*, i8** %4, align 8, !dbg !1721
  %124 = call i32 @strncmp(i8* %123, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.82, i64 0, i64 0), i64 3) #13, !dbg !1723
  %125 = icmp eq i32 %124, 0, !dbg !1724
  %126 = load i32, i32* @x.29
  %127 = load i32, i32* @y.30
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br i1 %125, label %134, label %154, !dbg !1725

134:                                              ; preds = %originalBBpart225
  %135 = load i32, i32* @x.29
  %136 = load i32, i32* @y.30
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %134, %originalBB27alteredBB
  %143 = load i8*, i8** %4, align 8, !dbg !1726
  %144 = getelementptr inbounds i8, i8* %143, i64 3, !dbg !1728
  store i8* %144, i8** %2, align 8, !dbg !1729
  %145 = load i8*, i8** %2, align 8, !dbg !1730
  store i8* %145, i8** @program_invocation_short_name, align 8, !dbg !1731
  %146 = load i32, i32* @x.29
  %147 = load i32, i32* @y.30
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br label %154, !dbg !1732

154:                                              ; preds = %originalBBpart229, %originalBBpart225
  br label %155, !dbg !1733

155:                                              ; preds = %154, %originalBBpart221, %originalBBpart217
  %156 = load i32, i32* @x.29
  %157 = load i32, i32* @y.30
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %155, %originalBB31alteredBB
  %164 = load i8*, i8** %2, align 8, !dbg !1734
  store i8* %164, i8** @program_name, align 8, !dbg !1735
  %165 = load i8*, i8** %2, align 8, !dbg !1736
  store i8* %165, i8** @program_invocation_name, align 8, !dbg !1737
  %166 = load i32, i32* @x.29
  %167 = load i32, i32* @y.30
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  ret void, !dbg !1738

originalBBalteredBB:                              ; preds = %originalBB, %7
  %174 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1694
  %175 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.80, i64 0, i64 0), %struct._IO_FILE* %174), !dbg !1696
  call void @abort() #12, !dbg !1697
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %176 = load i8*, i8** %2, align 8, !dbg !1698
  %177 = call i8* @strrchr(i8* %176, i32 47) #13, !dbg !1699
  store i8* %177, i8** %3, align 8, !dbg !1700
  %178 = load i8*, i8** %3, align 8, !dbg !1701
  %179 = icmp ne i8* %178, null, !dbg !1702
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %180 = load i8*, i8** %3, align 8, !dbg !1703
  %181 = getelementptr inbounds i8, i8* %180, i64 1, !dbg !1704
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %68
  store i8* %69, i8** %4, align 8, !dbg !1706
  %182 = load i8*, i8** %4, align 8, !dbg !1707
  %183 = load i8*, i8** %2, align 8, !dbg !1709
  %184 = ptrtoint i8* %182 to i64, !dbg !1710
  %185 = ptrtoint i8* %183 to i64, !dbg !1710
  %_ = sub i64 %184, %185
  %gen = mul i64 %_, %185
  %_11 = sub i64 0, %184
  %gen12 = add i64 %_11, %185
  %_13 = shl i64 %184, %185
  %_14 = sub i64 %184, %185
  %gen15 = mul i64 %_14, %185
  %186 = sub i64 %184, %185, !dbg !1710
  %187 = icmp sge i64 %186, 7, !dbg !1711
  br label %originalBB10

originalBB19alteredBB:                            ; preds = %originalBB19, %92
  %188 = load i8*, i8** %4, align 8, !dbg !1713
  %189 = getelementptr inbounds i8, i8* %188, i64 -7, !dbg !1714
  %190 = call i32 @strncmp(i8* %189, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.81, i64 0, i64 0), i64 7) #13, !dbg !1715
  %191 = icmp eq i32 %190, 0, !dbg !1716
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %113
  %192 = load i8*, i8** %4, align 8, !dbg !1718
  store i8* %192, i8** %2, align 8, !dbg !1720
  %193 = load i8*, i8** %4, align 8, !dbg !1721
  %194 = call i32 @strncmp(i8* %193, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.82, i64 0, i64 0), i64 3) #13, !dbg !1723
  %195 = icmp eq i32 %194, 0, !dbg !1724
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %134
  %196 = load i8*, i8** %4, align 8, !dbg !1726
  %197 = getelementptr inbounds i8, i8* %196, i64 3, !dbg !1728
  store i8* %197, i8** %2, align 8, !dbg !1729
  %198 = load i8*, i8** %2, align 8, !dbg !1730
  store i8* %198, i8** @program_invocation_short_name, align 8, !dbg !1731
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %155
  %199 = load i8*, i8** %2, align 8, !dbg !1734
  store i8* %199, i8** @program_name, align 8, !dbg !1735
  %200 = load i8*, i8** %2, align 8, !dbg !1736
  store i8* %200, i8** @program_invocation_name, align 8, !dbg !1737
  br label %originalBB31
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #3

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #5

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @set_char_quoting(%struct.quoting_options*, i8 signext, i32) #4 !dbg !1739 {
  %4 = load i32, i32* @x.31
  %5 = load i32, i32* @y.32
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca %struct.quoting_options*, align 8
  %13 = alloca i8, align 1
  %14 = alloca i32, align 4
  %15 = alloca i8, align 1
  %16 = alloca i32*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %12, metadata !1743, metadata !DIExpression()), !dbg !1744
  store i8 %1, i8* %13, align 1
  call void @llvm.dbg.declare(metadata i8* %13, metadata !1745, metadata !DIExpression()), !dbg !1746
  store i32 %2, i32* %14, align 4
  call void @llvm.dbg.declare(metadata i32* %14, metadata !1747, metadata !DIExpression()), !dbg !1748
  call void @llvm.dbg.declare(metadata i8* %15, metadata !1749, metadata !DIExpression()), !dbg !1750
  %19 = load i8, i8* %13, align 1, !dbg !1751
  store i8 %19, i8* %15, align 1, !dbg !1750
  call void @llvm.dbg.declare(metadata i32** %16, metadata !1752, metadata !DIExpression()), !dbg !1754
  %20 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !1755
  %21 = icmp ne %struct.quoting_options* %20, null, !dbg !1755
  %22 = load i32, i32* @x.31
  %23 = load i32, i32* @y.32
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %48, !dbg !1755

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.31
  %32 = load i32, i32* @y.32
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !1756
  %40 = load i32, i32* @x.31
  %41 = load i32, i32* @y.32
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %65, !dbg !1755

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.31
  %50 = load i32, i32* @y.32
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.31
  %58 = load i32, i32* @y.32
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !1755

65:                                               ; preds = %originalBBpart28, %originalBBpart24
  %66 = phi %struct.quoting_options* [ %39, %originalBBpart24 ], [ @default_quoting_options, %originalBBpart28 ], !dbg !1755
  %67 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %66, i32 0, i32 2, !dbg !1757
  %68 = getelementptr inbounds [8 x i32], [8 x i32]* %67, i64 0, i64 0, !dbg !1758
  %69 = load i8, i8* %15, align 1, !dbg !1759
  %70 = zext i8 %69 to i64, !dbg !1759
  %71 = udiv i64 %70, 32, !dbg !1760
  %72 = getelementptr inbounds i32, i32* %68, i64 %71, !dbg !1761
  store i32* %72, i32** %16, align 8, !dbg !1754
  call void @llvm.dbg.declare(metadata i32* %17, metadata !1762, metadata !DIExpression()), !dbg !1763
  %73 = load i8, i8* %15, align 1, !dbg !1764
  %74 = zext i8 %73 to i64, !dbg !1764
  %75 = urem i64 %74, 32, !dbg !1765
  %76 = trunc i64 %75 to i32, !dbg !1764
  store i32 %76, i32* %17, align 4, !dbg !1763
  call void @llvm.dbg.declare(metadata i32* %18, metadata !1766, metadata !DIExpression()), !dbg !1767
  %77 = load i32*, i32** %16, align 8, !dbg !1768
  %78 = load i32, i32* %77, align 4, !dbg !1769
  %79 = load i32, i32* %17, align 4, !dbg !1770
  %80 = lshr i32 %78, %79, !dbg !1771
  %81 = and i32 %80, 1, !dbg !1772
  store i32 %81, i32* %18, align 4, !dbg !1767
  %82 = load i32, i32* %14, align 4, !dbg !1773
  %83 = and i32 %82, 1, !dbg !1774
  %84 = load i32, i32* %18, align 4, !dbg !1775
  %85 = xor i32 %83, %84, !dbg !1776
  %86 = load i32, i32* %17, align 4, !dbg !1777
  %87 = shl i32 %85, %86, !dbg !1778
  %88 = load i32*, i32** %16, align 8, !dbg !1779
  %89 = load i32, i32* %88, align 4, !dbg !1780
  %90 = xor i32 %89, %87, !dbg !1780
  store i32 %90, i32* %88, align 4, !dbg !1780
  %91 = load i32, i32* %18, align 4, !dbg !1781
  ret i32 %91, !dbg !1782

originalBBalteredBB:                              ; preds = %originalBB, %3
  %92 = alloca %struct.quoting_options*, align 8
  %93 = alloca i8, align 1
  %94 = alloca i32, align 4
  %95 = alloca i8, align 1
  %96 = alloca i32*, align 8
  %97 = alloca i32, align 4
  %98 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %92, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %92, metadata !1783, metadata !DIExpression()), !dbg !1744
  store i8 %1, i8* %93, align 1
  call void @llvm.dbg.declare(metadata i8* %93, metadata !1818, metadata !DIExpression()), !dbg !1746
  store i32 %2, i32* %94, align 4
  call void @llvm.dbg.declare(metadata i32* %94, metadata !1819, metadata !DIExpression()), !dbg !1748
  call void @llvm.dbg.declare(metadata i8* %95, metadata !1820, metadata !DIExpression()), !dbg !1750
  %99 = load i8, i8* %93, align 1, !dbg !1751
  store i8 %99, i8* %95, align 1, !dbg !1750
  call void @llvm.dbg.declare(metadata i32** %96, metadata !1821, metadata !DIExpression()), !dbg !1754
  %100 = load %struct.quoting_options*, %struct.quoting_options** %92, align 8, !dbg !1755
  %101 = icmp ne %struct.quoting_options* %100, null, !dbg !1755
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %102 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !1756
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char_mem(i8*, i64, i8 signext) #4 !dbg !1822 {
  %4 = load i32, i32* @x.33
  %5 = load i32, i32* @y.34
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8, align 1
  %15 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !1825, metadata !DIExpression()), !dbg !1826
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !1827, metadata !DIExpression()), !dbg !1828
  store i8 %2, i8* %14, align 1
  call void @llvm.dbg.declare(metadata i8* %14, metadata !1829, metadata !DIExpression()), !dbg !1830
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %15, metadata !1831, metadata !DIExpression()), !dbg !1832
  %16 = bitcast %struct.quoting_options* %15 to i8*, !dbg !1833
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !1833
  %17 = load i8, i8* %14, align 1, !dbg !1834
  %18 = call i32 @set_char_quoting(%struct.quoting_options* %15, i8 signext %17, i32 1), !dbg !1835
  %19 = load i8*, i8** %12, align 8, !dbg !1836
  %20 = load i64, i64* %13, align 8, !dbg !1837
  %21 = call i8* @quotearg_n_options(i32 0, i8* %19, i64 %20, %struct.quoting_options* %15), !dbg !1838
  %22 = load i32, i32* @x.33
  %23 = load i32, i32* @y.34
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %21, !dbg !1839

originalBBalteredBB:                              ; preds = %originalBB, %3
  %30 = alloca i8*, align 8
  %31 = alloca i64, align 8
  %32 = alloca i8, align 1
  %33 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %30, align 8
  call void @llvm.dbg.declare(metadata i8** %30, metadata !1840, metadata !DIExpression()), !dbg !1826
  store i64 %1, i64* %31, align 8
  call void @llvm.dbg.declare(metadata i64* %31, metadata !1872, metadata !DIExpression()), !dbg !1828
  store i8 %2, i8* %32, align 1
  call void @llvm.dbg.declare(metadata i8* %32, metadata !1873, metadata !DIExpression()), !dbg !1830
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %33, metadata !1874, metadata !DIExpression()), !dbg !1832
  %34 = bitcast %struct.quoting_options* %33 to i8*, !dbg !1833
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !1833
  %35 = load i8, i8* %32, align 1, !dbg !1834
  %36 = call i32 @set_char_quoting(%struct.quoting_options* %33, i8 signext %35, i32 1), !dbg !1835
  %37 = load i8*, i8** %30, align 8, !dbg !1836
  %38 = load i64, i64* %31, align 8, !dbg !1837
  %39 = call i8* @quotearg_n_options(i32 0, i8* %37, i64 %38, %struct.quoting_options* %33), !dbg !1838
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_options(i32, i8*, i64, %struct.quoting_options*) #4 !dbg !1875 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.quoting_options*, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.slotvec*, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store i32 %0, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !1880, metadata !DIExpression()), !dbg !1881
  store i8* %1, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !1882, metadata !DIExpression()), !dbg !1883
  store i64 %2, i64* %7, align 8
  call void @llvm.dbg.declare(metadata i64* %7, metadata !1884, metadata !DIExpression()), !dbg !1885
  store %struct.quoting_options* %3, %struct.quoting_options** %8, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %8, metadata !1886, metadata !DIExpression()), !dbg !1887
  call void @llvm.dbg.declare(metadata i32* %9, metadata !1888, metadata !DIExpression()), !dbg !1889
  %17 = call i32* @__errno_location() #15, !dbg !1890
  %18 = load i32, i32* %17, align 4, !dbg !1890
  store i32 %18, i32* %9, align 4, !dbg !1889
  call void @llvm.dbg.declare(metadata %struct.slotvec** %10, metadata !1891, metadata !DIExpression()), !dbg !1892
  %19 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !1893
  store %struct.slotvec* %19, %struct.slotvec** %10, align 8, !dbg !1892
  %20 = load i32, i32* %5, align 4, !dbg !1894
  %21 = icmp slt i32 %20, 0, !dbg !1896
  br i1 %21, label %22, label %39, !dbg !1897

22:                                               ; preds = %4
  %23 = load i32, i32* @x.35
  %24 = load i32, i32* @y.36
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %22, %originalBBalteredBB
  call void @abort() #12, !dbg !1898
  %31 = load i32, i32* @x.35
  %32 = load i32, i32* @y.36
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !1898

39:                                               ; preds = %4
  %40 = load i32, i32* @x.35
  %41 = load i32, i32* @y.36
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %39, %originalBB1alteredBB
  %48 = load i32, i32* @nslots, align 4, !dbg !1899
  %49 = load i32, i32* %5, align 4, !dbg !1901
  %50 = icmp sle i32 %48, %49, !dbg !1902
  %51 = load i32, i32* @x.35
  %52 = load i32, i32* @y.36
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %50, label %59, label %213, !dbg !1903

59:                                               ; preds = %originalBBpart24
  call void @llvm.dbg.declare(metadata i8* %11, metadata !1904, metadata !DIExpression()), !dbg !1906
  %60 = load i32, i32* @x.35
  %61 = load i32, i32* @y.36
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %59, %originalBB6alteredBB
  %68 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1907
  %69 = icmp eq %struct.slotvec* %68, @slotvec0, !dbg !1908
  %70 = zext i1 %69 to i8, !dbg !1906
  store i8 %70, i8* %11, align 1, !dbg !1906
  call void @llvm.dbg.declare(metadata i32* %12, metadata !1909, metadata !DIExpression()), !dbg !1910
  store i32 2147483646, i32* %12, align 4, !dbg !1910
  %71 = load i32, i32* %12, align 4, !dbg !1911
  %72 = load i32, i32* %5, align 4, !dbg !1913
  %73 = icmp slt i32 %71, %72, !dbg !1914
  %74 = load i32, i32* @x.35
  %75 = load i32, i32* @y.36
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %73, label %82, label %99, !dbg !1915

82:                                               ; preds = %originalBBpart28
  %83 = load i32, i32* @x.35
  %84 = load i32, i32* @y.36
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %82, %originalBB10alteredBB
  call void @xalloc_die() #14, !dbg !1916
  %91 = load i32, i32* @x.35
  %92 = load i32, i32* @y.36
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  unreachable, !dbg !1916

99:                                               ; preds = %originalBBpart28
  %100 = load i32, i32* @x.35
  %101 = load i32, i32* @y.36
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %99, %originalBB14alteredBB
  %108 = load i8, i8* %11, align 1, !dbg !1917
  %109 = trunc i8 %108 to i1, !dbg !1917
  %110 = load i32, i32* @x.35
  %111 = load i32, i32* @y.36
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %109, label %118, label %135, !dbg !1917

118:                                              ; preds = %originalBBpart216
  %119 = load i32, i32* @x.35
  %120 = load i32, i32* @y.36
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %118, %originalBB18alteredBB
  %127 = load i32, i32* @x.35
  %128 = load i32, i32* @y.36
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %153, !dbg !1917

135:                                              ; preds = %originalBBpart216
  %136 = load i32, i32* @x.35
  %137 = load i32, i32* @y.36
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %135, %originalBB22alteredBB
  %144 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1918
  %145 = load i32, i32* @x.35
  %146 = load i32, i32* @y.36
  %147 = sub i32 %145, 1
  %148 = mul i32 %145, %147
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %150, %151
  br i1 %152, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %153, !dbg !1917

153:                                              ; preds = %originalBBpart224, %originalBBpart220
  %154 = phi %struct.slotvec* [ null, %originalBBpart220 ], [ %144, %originalBBpart224 ], !dbg !1917
  %155 = bitcast %struct.slotvec* %154 to i8*, !dbg !1917
  %156 = load i32, i32* %5, align 4, !dbg !1919
  %157 = add nsw i32 %156, 1, !dbg !1920
  %158 = sext i32 %157 to i64, !dbg !1921
  %159 = mul i64 %158, 16, !dbg !1922
  %160 = call i8* @xrealloc(i8* %155, i64 %159), !dbg !1923
  %161 = bitcast i8* %160 to %struct.slotvec*, !dbg !1923
  store %struct.slotvec* %161, %struct.slotvec** %10, align 8, !dbg !1924
  store %struct.slotvec* %161, %struct.slotvec** @slotvec, align 8, !dbg !1925
  %162 = load i8, i8* %11, align 1, !dbg !1926
  %163 = trunc i8 %162 to i1, !dbg !1926
  br i1 %163, label %164, label %183, !dbg !1928

164:                                              ; preds = %153
  %165 = load i32, i32* @x.35
  %166 = load i32, i32* @y.36
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %164, %originalBB26alteredBB
  %173 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1929
  %174 = bitcast %struct.slotvec* %173 to i8*, !dbg !1930
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %174, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !1930
  %175 = load i32, i32* @x.35
  %176 = load i32, i32* @y.36
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %183, !dbg !1931

183:                                              ; preds = %originalBBpart228, %153
  %184 = load i32, i32* @x.35
  %185 = load i32, i32* @y.36
  %186 = sub i32 %184, 1
  %187 = mul i32 %184, %186
  %188 = urem i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %189, %190
  br i1 %191, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %183, %originalBB30alteredBB
  %192 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1932
  %193 = load i32, i32* @nslots, align 4, !dbg !1933
  %194 = sext i32 %193 to i64, !dbg !1934
  %195 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %192, i64 %194, !dbg !1934
  %196 = bitcast %struct.slotvec* %195 to i8*, !dbg !1935
  %197 = load i32, i32* %5, align 4, !dbg !1936
  %198 = add nsw i32 %197, 1, !dbg !1937
  %199 = load i32, i32* @nslots, align 4, !dbg !1938
  %200 = sub nsw i32 %198, %199, !dbg !1939
  %201 = sext i32 %200 to i64, !dbg !1940
  %202 = mul i64 %201, 16, !dbg !1941
  call void @llvm.memset.p0i8.i64(i8* align 8 %196, i8 0, i64 %202, i1 false), !dbg !1935
  %203 = load i32, i32* %5, align 4, !dbg !1942
  %204 = add nsw i32 %203, 1, !dbg !1943
  store i32 %204, i32* @nslots, align 4, !dbg !1944
  %205 = load i32, i32* @x.35
  %206 = load i32, i32* @y.36
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBBpart252, label %originalBB30alteredBB

originalBBpart252:                                ; preds = %originalBB30
  br label %213, !dbg !1945

213:                                              ; preds = %originalBBpart252, %originalBBpart24
  call void @llvm.dbg.declare(metadata i64* %13, metadata !1946, metadata !DIExpression()), !dbg !1948
  %214 = load i32, i32* @x.35
  %215 = load i32, i32* @y.36
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %213, %originalBB54alteredBB
  %222 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1949
  %223 = load i32, i32* %5, align 4, !dbg !1950
  %224 = sext i32 %223 to i64, !dbg !1949
  %225 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %222, i64 %224, !dbg !1949
  %226 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %225, i32 0, i32 0, !dbg !1951
  %227 = load i64, i64* %226, align 8, !dbg !1951
  store i64 %227, i64* %13, align 8, !dbg !1948
  call void @llvm.dbg.declare(metadata i8** %14, metadata !1952, metadata !DIExpression()), !dbg !1953
  %228 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1954
  %229 = load i32, i32* %5, align 4, !dbg !1955
  %230 = sext i32 %229 to i64, !dbg !1954
  %231 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %228, i64 %230, !dbg !1954
  %232 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %231, i32 0, i32 1, !dbg !1956
  %233 = load i8*, i8** %232, align 8, !dbg !1956
  store i8* %233, i8** %14, align 8, !dbg !1953
  call void @llvm.dbg.declare(metadata i32* %15, metadata !1957, metadata !DIExpression()), !dbg !1958
  %234 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1959
  %235 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %234, i32 0, i32 1, !dbg !1960
  %236 = load i32, i32* %235, align 4, !dbg !1960
  %237 = or i32 %236, 1, !dbg !1961
  store i32 %237, i32* %15, align 4, !dbg !1958
  call void @llvm.dbg.declare(metadata i64* %16, metadata !1962, metadata !DIExpression()), !dbg !1963
  %238 = load i8*, i8** %14, align 8, !dbg !1964
  %239 = load i64, i64* %13, align 8, !dbg !1965
  %240 = load i8*, i8** %6, align 8, !dbg !1966
  %241 = load i64, i64* %7, align 8, !dbg !1967
  %242 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1968
  %243 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %242, i32 0, i32 0, !dbg !1969
  %244 = load i32, i32* %243, align 8, !dbg !1969
  %245 = load i32, i32* %15, align 4, !dbg !1970
  %246 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1971
  %247 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %246, i32 0, i32 2, !dbg !1972
  %248 = getelementptr inbounds [8 x i32], [8 x i32]* %247, i64 0, i64 0, !dbg !1971
  %249 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1973
  %250 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %249, i32 0, i32 3, !dbg !1974
  %251 = load i8*, i8** %250, align 8, !dbg !1974
  %252 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1975
  %253 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %252, i32 0, i32 4, !dbg !1976
  %254 = load i8*, i8** %253, align 8, !dbg !1976
  %255 = call i64 @quotearg_buffer_restyled(i8* %238, i64 %239, i8* %240, i64 %241, i32 %244, i32 %245, i32* %248, i8* %251, i8* %254), !dbg !1977
  store i64 %255, i64* %16, align 8, !dbg !1963
  %256 = load i64, i64* %13, align 8, !dbg !1978
  %257 = load i64, i64* %16, align 8, !dbg !1980
  %258 = icmp ule i64 %256, %257, !dbg !1981
  %259 = load i32, i32* @x.35
  %260 = load i32, i32* @y.36
  %261 = sub i32 %259, 1
  %262 = mul i32 %259, %261
  %263 = urem i32 %262, 2
  %264 = icmp eq i32 %263, 0
  %265 = icmp slt i32 %260, 10
  %266 = or i1 %264, %265
  br i1 %266, label %originalBBpart265, label %originalBB54alteredBB

originalBBpart265:                                ; preds = %originalBB54
  br i1 %258, label %267, label %353, !dbg !1982

267:                                              ; preds = %originalBBpart265
  %268 = load i32, i32* @x.35
  %269 = load i32, i32* @y.36
  %270 = sub i32 %268, 1
  %271 = mul i32 %268, %270
  %272 = urem i32 %271, 2
  %273 = icmp eq i32 %272, 0
  %274 = icmp slt i32 %269, 10
  %275 = or i1 %273, %274
  br i1 %275, label %originalBB67, label %originalBB67alteredBB

originalBB67:                                     ; preds = %267, %originalBB67alteredBB
  %276 = load i64, i64* %16, align 8, !dbg !1983
  %277 = add i64 %276, 1, !dbg !1985
  store i64 %277, i64* %13, align 8, !dbg !1986
  %278 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1987
  %279 = load i32, i32* %5, align 4, !dbg !1988
  %280 = sext i32 %279 to i64, !dbg !1987
  %281 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %278, i64 %280, !dbg !1987
  %282 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %281, i32 0, i32 0, !dbg !1989
  store i64 %277, i64* %282, align 8, !dbg !1990
  %283 = load i8*, i8** %14, align 8, !dbg !1991
  %284 = icmp ne i8* %283, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !1993
  %285 = load i32, i32* @x.35
  %286 = load i32, i32* @y.36
  %287 = sub i32 %285, 1
  %288 = mul i32 %285, %287
  %289 = urem i32 %288, 2
  %290 = icmp eq i32 %289, 0
  %291 = icmp slt i32 %286, 10
  %292 = or i1 %290, %291
  br i1 %292, label %originalBBpart279, label %originalBB67alteredBB

originalBBpart279:                                ; preds = %originalBB67
  br i1 %284, label %293, label %311, !dbg !1994

293:                                              ; preds = %originalBBpart279
  %294 = load i32, i32* @x.35
  %295 = load i32, i32* @y.36
  %296 = sub i32 %294, 1
  %297 = mul i32 %294, %296
  %298 = urem i32 %297, 2
  %299 = icmp eq i32 %298, 0
  %300 = icmp slt i32 %295, 10
  %301 = or i1 %299, %300
  br i1 %301, label %originalBB81, label %originalBB81alteredBB

originalBB81:                                     ; preds = %293, %originalBB81alteredBB
  %302 = load i8*, i8** %14, align 8, !dbg !1995
  call void @free(i8* %302) #10, !dbg !1996
  %303 = load i32, i32* @x.35
  %304 = load i32, i32* @y.36
  %305 = sub i32 %303, 1
  %306 = mul i32 %303, %305
  %307 = urem i32 %306, 2
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %308, %309
  br i1 %310, label %originalBBpart283, label %originalBB81alteredBB

originalBBpart283:                                ; preds = %originalBB81
  br label %311, !dbg !1996

311:                                              ; preds = %originalBBpart283, %originalBBpart279
  %312 = load i32, i32* @x.35
  %313 = load i32, i32* @y.36
  %314 = sub i32 %312, 1
  %315 = mul i32 %312, %314
  %316 = urem i32 %315, 2
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %317, %318
  br i1 %319, label %originalBB85, label %originalBB85alteredBB

originalBB85:                                     ; preds = %311, %originalBB85alteredBB
  %320 = load i64, i64* %13, align 8, !dbg !1997
  %321 = call noalias i8* @xcharalloc(i64 %320), !dbg !1998
  store i8* %321, i8** %14, align 8, !dbg !1999
  %322 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2000
  %323 = load i32, i32* %5, align 4, !dbg !2001
  %324 = sext i32 %323 to i64, !dbg !2000
  %325 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %322, i64 %324, !dbg !2000
  %326 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %325, i32 0, i32 1, !dbg !2002
  store i8* %321, i8** %326, align 8, !dbg !2003
  %327 = load i8*, i8** %14, align 8, !dbg !2004
  %328 = load i64, i64* %13, align 8, !dbg !2005
  %329 = load i8*, i8** %6, align 8, !dbg !2006
  %330 = load i64, i64* %7, align 8, !dbg !2007
  %331 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2008
  %332 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %331, i32 0, i32 0, !dbg !2009
  %333 = load i32, i32* %332, align 8, !dbg !2009
  %334 = load i32, i32* %15, align 4, !dbg !2010
  %335 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2011
  %336 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %335, i32 0, i32 2, !dbg !2012
  %337 = getelementptr inbounds [8 x i32], [8 x i32]* %336, i64 0, i64 0, !dbg !2011
  %338 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2013
  %339 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %338, i32 0, i32 3, !dbg !2014
  %340 = load i8*, i8** %339, align 8, !dbg !2014
  %341 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2015
  %342 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %341, i32 0, i32 4, !dbg !2016
  %343 = load i8*, i8** %342, align 8, !dbg !2016
  %344 = call i64 @quotearg_buffer_restyled(i8* %327, i64 %328, i8* %329, i64 %330, i32 %333, i32 %334, i32* %337, i8* %340, i8* %343), !dbg !2017
  %345 = load i32, i32* @x.35
  %346 = load i32, i32* @y.36
  %347 = sub i32 %345, 1
  %348 = mul i32 %345, %347
  %349 = urem i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = icmp slt i32 %346, 10
  %352 = or i1 %350, %351
  br i1 %352, label %originalBBpart287, label %originalBB85alteredBB

originalBBpart287:                                ; preds = %originalBB85
  br label %353, !dbg !2018

353:                                              ; preds = %originalBBpart287, %originalBBpart265
  %354 = load i32, i32* %9, align 4, !dbg !2019
  %355 = call i32* @__errno_location() #15, !dbg !2020
  store i32 %354, i32* %355, align 4, !dbg !2021
  %356 = load i8*, i8** %14, align 8, !dbg !2022
  ret i8* %356, !dbg !2023

originalBBalteredBB:                              ; preds = %originalBB, %22
  call void @abort() #12, !dbg !1898
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %39
  %357 = load i32, i32* @nslots, align 4, !dbg !1899
  %358 = load i32, i32* %5, align 4, !dbg !1901
  %359 = icmp sle i32 %357, %358, !dbg !1902
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %59
  %360 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1907
  %361 = icmp eq %struct.slotvec* %360, @slotvec0, !dbg !1908
  %362 = zext i1 %361 to i8, !dbg !1906
  store i8 %362, i8* %11, align 1, !dbg !1906
  call void @llvm.dbg.declare(metadata !4, metadata !2024, metadata !DIExpression()), !dbg !1910
  store i32 2147483646, i32* %12, align 4, !dbg !1910
  %363 = load i32, i32* %12, align 4, !dbg !1911
  %364 = load i32, i32* %5, align 4, !dbg !1913
  %365 = icmp slt i32 %363, %364, !dbg !1914
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %82
  call void @xalloc_die() #14, !dbg !1916
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %99
  %366 = load i8, i8* %11, align 1, !dbg !1917
  %367 = trunc i8 %366 to i1, !dbg !1917
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %118
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %135
  %368 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1918
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %164
  %369 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1929
  %370 = bitcast %struct.slotvec* %369 to i8*, !dbg !1930
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %370, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !1930
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %183
  %371 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1932
  %372 = load i32, i32* @nslots, align 4, !dbg !1933
  %373 = sext i32 %372 to i64, !dbg !1934
  %374 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %371, i64 %373, !dbg !1934
  %375 = bitcast %struct.slotvec* %374 to i8*, !dbg !1935
  %376 = load i32, i32* %5, align 4, !dbg !1936
  %377 = add nsw i32 %376, 1, !dbg !1937
  %378 = load i32, i32* @nslots, align 4, !dbg !1938
  %_ = sub i32 %377, %378
  %gen = mul i32 %_, %378
  %_31 = sub i32 %377, %378
  %gen32 = mul i32 %_31, %378
  %_33 = sub i32 %377, %378
  %gen34 = mul i32 %_33, %378
  %_35 = sub i32 %377, %378
  %gen36 = mul i32 %_35, %378
  %_37 = sub i32 %377, %378
  %gen38 = mul i32 %_37, %378
  %379 = sub nsw i32 %377, %378, !dbg !1939
  %380 = sext i32 %379 to i64, !dbg !1940
  %_39 = sub i64 %380, 16
  %gen40 = mul i64 %_39, 16
  %_41 = sub i64 0, %380
  %gen42 = add i64 %_41, 16
  %_43 = sub i64 0, %380
  %gen44 = add i64 %_43, 16
  %_45 = shl i64 %380, 16
  %_46 = shl i64 %380, 16
  %381 = mul i64 %380, 16, !dbg !1941
  call void @llvm.memset.p0i8.i64(i8* align 8 %375, i8 0, i64 %381, i1 false), !dbg !1935
  %382 = load i32, i32* %5, align 4, !dbg !1942
  %_47 = sub i32 %382, 1
  %gen48 = mul i32 %_47, 1
  %_49 = sub i32 %382, 1
  %gen50 = mul i32 %_49, 1
  %383 = add nsw i32 %382, 1, !dbg !1943
  store i32 %383, i32* @nslots, align 4, !dbg !1944
  br label %originalBB30

originalBB54alteredBB:                            ; preds = %originalBB54, %213
  %384 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1949
  %385 = load i32, i32* %5, align 4, !dbg !1950
  %386 = sext i32 %385 to i64, !dbg !1949
  %387 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %384, i64 %386, !dbg !1949
  %388 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %387, i32 0, i32 0, !dbg !1951
  %389 = load i64, i64* %388, align 8, !dbg !1951
  store i64 %389, i64* %13, align 8, !dbg !1948
  call void @llvm.dbg.declare(metadata !4, metadata !2062, metadata !DIExpression()), !dbg !1953
  %390 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1954
  %391 = load i32, i32* %5, align 4, !dbg !1955
  %392 = sext i32 %391 to i64, !dbg !1954
  %393 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %390, i64 %392, !dbg !1954
  %394 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %393, i32 0, i32 1, !dbg !1956
  %395 = load i8*, i8** %394, align 8, !dbg !1956
  store i8* %395, i8** %14, align 8, !dbg !1953
  call void @llvm.dbg.declare(metadata !4, metadata !2099, metadata !DIExpression()), !dbg !1958
  %396 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1959
  %397 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %396, i32 0, i32 1, !dbg !1960
  %398 = load i32, i32* %397, align 4, !dbg !1960
  %_55 = sub i32 %398, 1
  %gen56 = mul i32 %_55, 1
  %_57 = shl i32 %398, 1
  %_58 = sub i32 %398, 1
  %gen59 = mul i32 %_58, 1
  %_60 = shl i32 %398, 1
  %_61 = shl i32 %398, 1
  %_62 = sub i32 %398, 1
  %gen63 = mul i32 %_62, 1
  %399 = or i32 %398, 1, !dbg !1961
  store i32 %399, i32* %15, align 4, !dbg !1958
  call void @llvm.dbg.declare(metadata !4, metadata !2100, metadata !DIExpression()), !dbg !1963
  %400 = load i8*, i8** %14, align 8, !dbg !1964
  %401 = load i64, i64* %13, align 8, !dbg !1965
  %402 = load i8*, i8** %6, align 8, !dbg !1966
  %403 = load i64, i64* %7, align 8, !dbg !1967
  %404 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1968
  %405 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %404, i32 0, i32 0, !dbg !1969
  %406 = load i32, i32* %405, align 8, !dbg !1969
  %407 = load i32, i32* %15, align 4, !dbg !1970
  %408 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1971
  %409 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %408, i32 0, i32 2, !dbg !1972
  %410 = getelementptr inbounds [8 x i32], [8 x i32]* %409, i64 0, i64 0, !dbg !1971
  %411 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1973
  %412 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %411, i32 0, i32 3, !dbg !1974
  %413 = load i8*, i8** %412, align 8, !dbg !1974
  %414 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1975
  %415 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %414, i32 0, i32 4, !dbg !1976
  %416 = load i8*, i8** %415, align 8, !dbg !1976
  %417 = call i64 @quotearg_buffer_restyled(i8* %400, i64 %401, i8* %402, i64 %403, i32 %406, i32 %407, i32* %410, i8* %413, i8* %416), !dbg !1977
  store i64 %417, i64* %16, align 8, !dbg !1963
  %418 = load i64, i64* %13, align 8, !dbg !1978
  %419 = load i64, i64* %16, align 8, !dbg !1980
  %420 = icmp ule i64 %418, %419, !dbg !1981
  br label %originalBB54

originalBB67alteredBB:                            ; preds = %originalBB67, %267
  %421 = load i64, i64* %16, align 8, !dbg !1983
  %_68 = shl i64 %421, 1
  %_69 = sub i64 %421, 1
  %gen70 = mul i64 %_69, 1
  %_71 = sub i64 0, %421
  %gen72 = add i64 %_71, 1
  %_73 = shl i64 %421, 1
  %_74 = sub i64 0, %421
  %gen75 = add i64 %_74, 1
  %_76 = sub i64 %421, 1
  %gen77 = mul i64 %_76, 1
  %422 = add i64 %421, 1, !dbg !1985
  store i64 %422, i64* %13, align 8, !dbg !1986
  %423 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1987
  %424 = load i32, i32* %5, align 4, !dbg !1988
  %425 = sext i32 %424 to i64, !dbg !1987
  %426 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %423, i64 %425, !dbg !1987
  %427 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %426, i32 0, i32 0, !dbg !1989
  store i64 %422, i64* %427, align 8, !dbg !1990
  %428 = load i8*, i8** %14, align 8, !dbg !1991
  %429 = icmp ne i8* %428, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !1993
  br label %originalBB67

originalBB81alteredBB:                            ; preds = %originalBB81, %293
  %430 = load i8*, i8** %14, align 8, !dbg !1995
  call void @free(i8* %430) #10, !dbg !1996
  br label %originalBB81

originalBB85alteredBB:                            ; preds = %originalBB85, %311
  %431 = load i64, i64* %13, align 8, !dbg !1997
  %432 = call noalias i8* @xcharalloc(i64 %431), !dbg !1998
  store i8* %432, i8** %14, align 8, !dbg !1999
  %433 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2000
  %434 = load i32, i32* %5, align 4, !dbg !2001
  %435 = sext i32 %434 to i64, !dbg !2000
  %436 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %433, i64 %435, !dbg !2000
  %437 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %436, i32 0, i32 1, !dbg !2002
  store i8* %432, i8** %437, align 8, !dbg !2003
  %438 = load i8*, i8** %14, align 8, !dbg !2004
  %439 = load i64, i64* %13, align 8, !dbg !2005
  %440 = load i8*, i8** %6, align 8, !dbg !2006
  %441 = load i64, i64* %7, align 8, !dbg !2007
  %442 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2008
  %443 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %442, i32 0, i32 0, !dbg !2009
  %444 = load i32, i32* %443, align 8, !dbg !2009
  %445 = load i32, i32* %15, align 4, !dbg !2010
  %446 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2011
  %447 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %446, i32 0, i32 2, !dbg !2012
  %448 = getelementptr inbounds [8 x i32], [8 x i32]* %447, i64 0, i64 0, !dbg !2011
  %449 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2013
  %450 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %449, i32 0, i32 3, !dbg !2014
  %451 = load i8*, i8** %450, align 8, !dbg !2014
  %452 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2015
  %453 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %452, i32 0, i32 4, !dbg !2016
  %454 = load i8*, i8** %453, align 8, !dbg !2016
  %455 = call i64 @quotearg_buffer_restyled(i8* %438, i64 %439, i8* %440, i64 %441, i32 %444, i32 %445, i32* %448, i8* %451, i8* %454), !dbg !2017
  br label %originalBB85
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(i8*, i64, i8*, i64, i32, i32, i32*, i8*, i8*) #4 !dbg !2101 {
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i8*, align 8
  %24 = alloca i64, align 8
  %25 = alloca i8, align 1
  %26 = alloca i8, align 1
  %27 = alloca i8, align 1
  %28 = alloca i8, align 1
  %29 = alloca i8, align 1
  %30 = alloca i8, align 1
  %31 = alloca i8, align 1
  %32 = alloca i8, align 1
  %33 = alloca i8, align 1
  %34 = alloca i8, align 1
  %35 = alloca i8, align 1
  %36 = alloca i64, align 8
  %37 = alloca i8, align 1
  %38 = alloca %struct.__mbstate_t, align 4
  %39 = alloca i32, align 4
  %40 = alloca i64, align 8
  %41 = alloca i64, align 8
  %42 = alloca i64, align 8
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2106, metadata !DIExpression()), !dbg !2107
  store i64 %1, i64* %12, align 8
  call void @llvm.dbg.declare(metadata i64* %12, metadata !2108, metadata !DIExpression()), !dbg !2109
  store i8* %2, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !2110, metadata !DIExpression()), !dbg !2111
  store i64 %3, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !2112, metadata !DIExpression()), !dbg !2113
  store i32 %4, i32* %15, align 4
  call void @llvm.dbg.declare(metadata i32* %15, metadata !2114, metadata !DIExpression()), !dbg !2115
  store i32 %5, i32* %16, align 4
  call void @llvm.dbg.declare(metadata i32* %16, metadata !2116, metadata !DIExpression()), !dbg !2117
  store i32* %6, i32** %17, align 8
  call void @llvm.dbg.declare(metadata i32** %17, metadata !2118, metadata !DIExpression()), !dbg !2119
  store i8* %7, i8** %18, align 8
  call void @llvm.dbg.declare(metadata i8** %18, metadata !2120, metadata !DIExpression()), !dbg !2121
  store i8* %8, i8** %19, align 8
  call void @llvm.dbg.declare(metadata i8** %19, metadata !2122, metadata !DIExpression()), !dbg !2123
  call void @llvm.dbg.declare(metadata i64* %20, metadata !2124, metadata !DIExpression()), !dbg !2125
  call void @llvm.dbg.declare(metadata i64* %21, metadata !2126, metadata !DIExpression()), !dbg !2127
  store i64 0, i64* %21, align 8, !dbg !2127
  call void @llvm.dbg.declare(metadata i64* %22, metadata !2128, metadata !DIExpression()), !dbg !2129
  store i64 0, i64* %22, align 8, !dbg !2129
  call void @llvm.dbg.declare(metadata i8** %23, metadata !2130, metadata !DIExpression()), !dbg !2131
  store i8* null, i8** %23, align 8, !dbg !2131
  call void @llvm.dbg.declare(metadata i64* %24, metadata !2132, metadata !DIExpression()), !dbg !2133
  store i64 0, i64* %24, align 8, !dbg !2133
  call void @llvm.dbg.declare(metadata i8* %25, metadata !2134, metadata !DIExpression()), !dbg !2135
  store i8 0, i8* %25, align 1, !dbg !2135
  call void @llvm.dbg.declare(metadata i8* %26, metadata !2136, metadata !DIExpression()), !dbg !2137
  %43 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !2138
  %44 = icmp eq i64 %43, 1, !dbg !2139
  %45 = zext i1 %44 to i8, !dbg !2137
  store i8 %45, i8* %26, align 1, !dbg !2137
  call void @llvm.dbg.declare(metadata i8* %27, metadata !2140, metadata !DIExpression()), !dbg !2141
  %46 = load i32, i32* %16, align 4, !dbg !2142
  %47 = and i32 %46, 2, !dbg !2143
  %48 = icmp ne i32 %47, 0, !dbg !2144
  %49 = zext i1 %48 to i8, !dbg !2141
  store i8 %49, i8* %27, align 1, !dbg !2141
  call void @llvm.dbg.declare(metadata i8* %28, metadata !2145, metadata !DIExpression()), !dbg !2146
  store i8 0, i8* %28, align 1, !dbg !2146
  call void @llvm.dbg.declare(metadata i8* %29, metadata !2147, metadata !DIExpression()), !dbg !2148
  store i8 0, i8* %29, align 1, !dbg !2148
  call void @llvm.dbg.declare(metadata i8* %30, metadata !2149, metadata !DIExpression()), !dbg !2150
  store i8 1, i8* %30, align 1, !dbg !2150
  br label %50, !dbg !2151

50:                                               ; preds = %5266, %9
  call void @llvm.dbg.label(metadata !2152), !dbg !2153
  %51 = load i32, i32* @x.37
  %52 = load i32, i32* @y.38
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %50, %originalBBalteredBB
  %59 = load i32, i32* %15, align 4, !dbg !2154
  %60 = load i32, i32* @x.37
  %61 = load i32, i32* @y.38
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %59, label %568 [
    i32 6, label %68
    i32 5, label %85
    i32 7, label %166
    i32 8, label %183
    i32 9, label %183
    i32 10, label %183
    i32 3, label %399
    i32 1, label %416
    i32 4, label %433
    i32 2, label %454
    i32 0, label %567
  ], !dbg !2155

68:                                               ; preds = %originalBBpart2
  %69 = load i32, i32* @x.37
  %70 = load i32, i32* @y.38
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %68, %originalBB1alteredBB
  store i32 5, i32* %15, align 4, !dbg !2156
  store i8 1, i8* %27, align 1, !dbg !2158
  %77 = load i32, i32* @x.37
  %78 = load i32, i32* @y.38
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %85, !dbg !2159

85:                                               ; preds = %originalBBpart24, %originalBBpart2
  %86 = load i32, i32* @x.37
  %87 = load i32, i32* @y.38
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %85, %originalBB6alteredBB
  %94 = load i8, i8* %27, align 1, !dbg !2160
  %95 = trunc i8 %94 to i1, !dbg !2160
  %96 = load i32, i32* @x.37
  %97 = load i32, i32* @y.38
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %95, label %165, label %104, !dbg !2162

104:                                              ; preds = %originalBBpart28
  br label %105, !dbg !2163

105:                                              ; preds = %104
  %106 = load i32, i32* @x.37
  %107 = load i32, i32* @y.38
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %105, %originalBB10alteredBB
  %114 = load i64, i64* %21, align 8, !dbg !2164
  %115 = load i64, i64* %12, align 8, !dbg !2164
  %116 = icmp ult i64 %114, %115, !dbg !2164
  %117 = load i32, i32* @x.37
  %118 = load i32, i32* @y.38
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %116, label %125, label %129, !dbg !2167

125:                                              ; preds = %originalBBpart212
  %126 = load i8*, i8** %11, align 8, !dbg !2164
  %127 = load i64, i64* %21, align 8, !dbg !2164
  %128 = getelementptr inbounds i8, i8* %126, i64 %127, !dbg !2164
  store i8 34, i8* %128, align 1, !dbg !2164
  br label %129, !dbg !2164

129:                                              ; preds = %125, %originalBBpart212
  %130 = load i32, i32* @x.37
  %131 = load i32, i32* @y.38
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %129, %originalBB14alteredBB
  %138 = load i64, i64* %21, align 8, !dbg !2167
  %139 = add i64 %138, 1, !dbg !2167
  store i64 %139, i64* %21, align 8, !dbg !2167
  %140 = load i32, i32* @x.37
  %141 = load i32, i32* @y.38
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBBpart223, label %originalBB14alteredBB

originalBBpart223:                                ; preds = %originalBB14
  br label %148, !dbg !2167

148:                                              ; preds = %originalBBpart223
  %149 = load i32, i32* @x.37
  %150 = load i32, i32* @y.38
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %148, %originalBB25alteredBB
  %157 = load i32, i32* @x.37
  %158 = load i32, i32* @y.38
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br label %165, !dbg !2167

165:                                              ; preds = %originalBBpart227, %originalBBpart28
  store i8 1, i8* %25, align 1, !dbg !2168
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.85, i64 0, i64 0), i8** %23, align 8, !dbg !2169
  store i64 1, i64* %24, align 8, !dbg !2170
  br label %585, !dbg !2171

166:                                              ; preds = %originalBBpart2
  %167 = load i32, i32* @x.37
  %168 = load i32, i32* @y.38
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %166, %originalBB29alteredBB
  store i8 1, i8* %25, align 1, !dbg !2172
  store i8 0, i8* %27, align 1, !dbg !2173
  %175 = load i32, i32* @x.37
  %176 = load i32, i32* @y.38
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br label %585, !dbg !2174

183:                                              ; preds = %originalBBpart2, %originalBBpart2, %originalBBpart2
  %184 = load i32, i32* @x.37
  %185 = load i32, i32* @y.38
  %186 = sub i32 %184, 1
  %187 = mul i32 %184, %186
  %188 = urem i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %189, %190
  br i1 %191, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %183, %originalBB33alteredBB
  %192 = load i32, i32* %15, align 4, !dbg !2175
  %193 = icmp ne i32 %192, 10, !dbg !2178
  %194 = load i32, i32* @x.37
  %195 = load i32, i32* @y.38
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br i1 %193, label %202, label %223, !dbg !2179

202:                                              ; preds = %originalBBpart235
  %203 = load i32, i32* @x.37
  %204 = load i32, i32* @y.38
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %202, %originalBB37alteredBB
  %211 = load i32, i32* %15, align 4, !dbg !2180
  %212 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.86, i64 0, i64 0), i32 %211), !dbg !2182
  store i8* %212, i8** %18, align 8, !dbg !2183
  %213 = load i32, i32* %15, align 4, !dbg !2184
  %214 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.87, i64 0, i64 0), i32 %213), !dbg !2185
  store i8* %214, i8** %19, align 8, !dbg !2186
  %215 = load i32, i32* @x.37
  %216 = load i32, i32* @y.38
  %217 = sub i32 %215, 1
  %218 = mul i32 %215, %217
  %219 = urem i32 %218, 2
  %220 = icmp eq i32 %219, 0
  %221 = icmp slt i32 %216, 10
  %222 = or i1 %220, %221
  br i1 %222, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  br label %223, !dbg !2187

223:                                              ; preds = %originalBBpart239, %originalBBpart235
  %224 = load i32, i32* @x.37
  %225 = load i32, i32* @y.38
  %226 = sub i32 %224, 1
  %227 = mul i32 %224, %226
  %228 = urem i32 %227, 2
  %229 = icmp eq i32 %228, 0
  %230 = icmp slt i32 %225, 10
  %231 = or i1 %229, %230
  br i1 %231, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %223, %originalBB41alteredBB
  %232 = load i8, i8* %27, align 1, !dbg !2188
  %233 = trunc i8 %232 to i1, !dbg !2188
  %234 = load i32, i32* @x.37
  %235 = load i32, i32* @y.38
  %236 = sub i32 %234, 1
  %237 = mul i32 %234, %236
  %238 = urem i32 %237, 2
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %239, %240
  br i1 %241, label %originalBBpart243, label %originalBB41alteredBB

originalBBpart243:                                ; preds = %originalBB41
  br i1 %233, label %379, label %242, !dbg !2190

242:                                              ; preds = %originalBBpart243
  %243 = load i32, i32* @x.37
  %244 = load i32, i32* @y.38
  %245 = sub i32 %243, 1
  %246 = mul i32 %243, %245
  %247 = urem i32 %246, 2
  %248 = icmp eq i32 %247, 0
  %249 = icmp slt i32 %244, 10
  %250 = or i1 %248, %249
  br i1 %250, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %242, %originalBB45alteredBB
  %251 = load i8*, i8** %18, align 8, !dbg !2191
  store i8* %251, i8** %23, align 8, !dbg !2193
  %252 = load i32, i32* @x.37
  %253 = load i32, i32* @y.38
  %254 = sub i32 %252, 1
  %255 = mul i32 %252, %254
  %256 = urem i32 %255, 2
  %257 = icmp eq i32 %256, 0
  %258 = icmp slt i32 %253, 10
  %259 = or i1 %257, %258
  br i1 %259, label %originalBBpart247, label %originalBB45alteredBB

originalBBpart247:                                ; preds = %originalBB45
  br label %260, !dbg !2194

260:                                              ; preds = %originalBBpart273, %originalBBpart247
  %261 = load i32, i32* @x.37
  %262 = load i32, i32* @y.38
  %263 = sub i32 %261, 1
  %264 = mul i32 %261, %263
  %265 = urem i32 %264, 2
  %266 = icmp eq i32 %265, 0
  %267 = icmp slt i32 %262, 10
  %268 = or i1 %266, %267
  br i1 %268, label %originalBB49, label %originalBB49alteredBB

originalBB49:                                     ; preds = %260, %originalBB49alteredBB
  %269 = load i8*, i8** %23, align 8, !dbg !2195
  %270 = load i8, i8* %269, align 1, !dbg !2197
  %271 = icmp ne i8 %270, 0, !dbg !2198
  %272 = load i32, i32* @x.37
  %273 = load i32, i32* @y.38
  %274 = sub i32 %272, 1
  %275 = mul i32 %272, %274
  %276 = urem i32 %275, 2
  %277 = icmp eq i32 %276, 0
  %278 = icmp slt i32 %273, 10
  %279 = or i1 %277, %278
  br i1 %279, label %originalBBpart251, label %originalBB49alteredBB

originalBBpart251:                                ; preds = %originalBB49
  br i1 %271, label %280, label %362, !dbg !2198

280:                                              ; preds = %originalBBpart251
  %281 = load i32, i32* @x.37
  %282 = load i32, i32* @y.38
  %283 = sub i32 %281, 1
  %284 = mul i32 %281, %283
  %285 = urem i32 %284, 2
  %286 = icmp eq i32 %285, 0
  %287 = icmp slt i32 %282, 10
  %288 = or i1 %286, %287
  br i1 %288, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %280, %originalBB53alteredBB
  %289 = load i32, i32* @x.37
  %290 = load i32, i32* @y.38
  %291 = sub i32 %289, 1
  %292 = mul i32 %289, %291
  %293 = urem i32 %292, 2
  %294 = icmp eq i32 %293, 0
  %295 = icmp slt i32 %290, 10
  %296 = or i1 %294, %295
  br i1 %296, label %originalBBpart255, label %originalBB53alteredBB

originalBBpart255:                                ; preds = %originalBB53
  br label %297, !dbg !2199

297:                                              ; preds = %originalBBpart255
  %298 = load i64, i64* %21, align 8, !dbg !2200
  %299 = load i64, i64* %12, align 8, !dbg !2200
  %300 = icmp ult i64 %298, %299, !dbg !2200
  br i1 %300, label %301, label %323, !dbg !2203

301:                                              ; preds = %297
  %302 = load i32, i32* @x.37
  %303 = load i32, i32* @y.38
  %304 = sub i32 %302, 1
  %305 = mul i32 %302, %304
  %306 = urem i32 %305, 2
  %307 = icmp eq i32 %306, 0
  %308 = icmp slt i32 %303, 10
  %309 = or i1 %307, %308
  br i1 %309, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %301, %originalBB57alteredBB
  %310 = load i8*, i8** %23, align 8, !dbg !2200
  %311 = load i8, i8* %310, align 1, !dbg !2200
  %312 = load i8*, i8** %11, align 8, !dbg !2200
  %313 = load i64, i64* %21, align 8, !dbg !2200
  %314 = getelementptr inbounds i8, i8* %312, i64 %313, !dbg !2200
  store i8 %311, i8* %314, align 1, !dbg !2200
  %315 = load i32, i32* @x.37
  %316 = load i32, i32* @y.38
  %317 = sub i32 %315, 1
  %318 = mul i32 %315, %317
  %319 = urem i32 %318, 2
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %320, %321
  br i1 %322, label %originalBBpart259, label %originalBB57alteredBB

originalBBpart259:                                ; preds = %originalBB57
  br label %323, !dbg !2200

323:                                              ; preds = %originalBBpart259, %297
  %324 = load i32, i32* @x.37
  %325 = load i32, i32* @y.38
  %326 = sub i32 %324, 1
  %327 = mul i32 %324, %326
  %328 = urem i32 %327, 2
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %329, %330
  br i1 %331, label %originalBB61, label %originalBB61alteredBB

originalBB61:                                     ; preds = %323, %originalBB61alteredBB
  %332 = load i64, i64* %21, align 8, !dbg !2203
  %333 = add i64 %332, 1, !dbg !2203
  store i64 %333, i64* %21, align 8, !dbg !2203
  %334 = load i32, i32* @x.37
  %335 = load i32, i32* @y.38
  %336 = sub i32 %334, 1
  %337 = mul i32 %334, %336
  %338 = urem i32 %337, 2
  %339 = icmp eq i32 %338, 0
  %340 = icmp slt i32 %335, 10
  %341 = or i1 %339, %340
  br i1 %341, label %originalBBpart269, label %originalBB61alteredBB

originalBBpart269:                                ; preds = %originalBB61
  br label %342, !dbg !2203

342:                                              ; preds = %originalBBpart269
  br label %343, !dbg !2203

343:                                              ; preds = %342
  %344 = load i32, i32* @x.37
  %345 = load i32, i32* @y.38
  %346 = sub i32 %344, 1
  %347 = mul i32 %344, %346
  %348 = urem i32 %347, 2
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %349, %350
  br i1 %351, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %343, %originalBB71alteredBB
  %352 = load i8*, i8** %23, align 8, !dbg !2204
  %353 = getelementptr inbounds i8, i8* %352, i32 1, !dbg !2204
  store i8* %353, i8** %23, align 8, !dbg !2204
  %354 = load i32, i32* @x.37
  %355 = load i32, i32* @y.38
  %356 = sub i32 %354, 1
  %357 = mul i32 %354, %356
  %358 = urem i32 %357, 2
  %359 = icmp eq i32 %358, 0
  %360 = icmp slt i32 %355, 10
  %361 = or i1 %359, %360
  br i1 %361, label %originalBBpart273, label %originalBB71alteredBB

originalBBpart273:                                ; preds = %originalBB71
  br label %260, !dbg !2205, !llvm.loop !2206

362:                                              ; preds = %originalBBpart251
  %363 = load i32, i32* @x.37
  %364 = load i32, i32* @y.38
  %365 = sub i32 %363, 1
  %366 = mul i32 %363, %365
  %367 = urem i32 %366, 2
  %368 = icmp eq i32 %367, 0
  %369 = icmp slt i32 %364, 10
  %370 = or i1 %368, %369
  br i1 %370, label %originalBB75, label %originalBB75alteredBB

originalBB75:                                     ; preds = %362, %originalBB75alteredBB
  %371 = load i32, i32* @x.37
  %372 = load i32, i32* @y.38
  %373 = sub i32 %371, 1
  %374 = mul i32 %371, %373
  %375 = urem i32 %374, 2
  %376 = icmp eq i32 %375, 0
  %377 = icmp slt i32 %372, 10
  %378 = or i1 %376, %377
  br i1 %378, label %originalBBpart277, label %originalBB75alteredBB

originalBBpart277:                                ; preds = %originalBB75
  br label %379, !dbg !2207

379:                                              ; preds = %originalBBpart277, %originalBBpart243
  %380 = load i32, i32* @x.37
  %381 = load i32, i32* @y.38
  %382 = sub i32 %380, 1
  %383 = mul i32 %380, %382
  %384 = urem i32 %383, 2
  %385 = icmp eq i32 %384, 0
  %386 = icmp slt i32 %381, 10
  %387 = or i1 %385, %386
  br i1 %387, label %originalBB79, label %originalBB79alteredBB

originalBB79:                                     ; preds = %379, %originalBB79alteredBB
  store i8 1, i8* %25, align 1, !dbg !2208
  %388 = load i8*, i8** %19, align 8, !dbg !2209
  store i8* %388, i8** %23, align 8, !dbg !2210
  %389 = load i8*, i8** %23, align 8, !dbg !2211
  %390 = call i64 @strlen(i8* %389) #13, !dbg !2212
  store i64 %390, i64* %24, align 8, !dbg !2213
  %391 = load i32, i32* @x.37
  %392 = load i32, i32* @y.38
  %393 = sub i32 %391, 1
  %394 = mul i32 %391, %393
  %395 = urem i32 %394, 2
  %396 = icmp eq i32 %395, 0
  %397 = icmp slt i32 %392, 10
  %398 = or i1 %396, %397
  br i1 %398, label %originalBBpart281, label %originalBB79alteredBB

originalBBpart281:                                ; preds = %originalBB79
  br label %585, !dbg !2214

399:                                              ; preds = %originalBBpart2
  %400 = load i32, i32* @x.37
  %401 = load i32, i32* @y.38
  %402 = sub i32 %400, 1
  %403 = mul i32 %400, %402
  %404 = urem i32 %403, 2
  %405 = icmp eq i32 %404, 0
  %406 = icmp slt i32 %401, 10
  %407 = or i1 %405, %406
  br i1 %407, label %originalBB83, label %originalBB83alteredBB

originalBB83:                                     ; preds = %399, %originalBB83alteredBB
  store i8 1, i8* %25, align 1, !dbg !2215
  %408 = load i32, i32* @x.37
  %409 = load i32, i32* @y.38
  %410 = sub i32 %408, 1
  %411 = mul i32 %408, %410
  %412 = urem i32 %411, 2
  %413 = icmp eq i32 %412, 0
  %414 = icmp slt i32 %409, 10
  %415 = or i1 %413, %414
  br i1 %415, label %originalBBpart285, label %originalBB83alteredBB

originalBBpart285:                                ; preds = %originalBB83
  br label %416, !dbg !2216

416:                                              ; preds = %originalBBpart285, %originalBBpart2
  %417 = load i32, i32* @x.37
  %418 = load i32, i32* @y.38
  %419 = sub i32 %417, 1
  %420 = mul i32 %417, %419
  %421 = urem i32 %420, 2
  %422 = icmp eq i32 %421, 0
  %423 = icmp slt i32 %418, 10
  %424 = or i1 %422, %423
  br i1 %424, label %originalBB87, label %originalBB87alteredBB

originalBB87:                                     ; preds = %416, %originalBB87alteredBB
  store i8 1, i8* %27, align 1, !dbg !2217
  %425 = load i32, i32* @x.37
  %426 = load i32, i32* @y.38
  %427 = sub i32 %425, 1
  %428 = mul i32 %425, %427
  %429 = urem i32 %428, 2
  %430 = icmp eq i32 %429, 0
  %431 = icmp slt i32 %426, 10
  %432 = or i1 %430, %431
  br i1 %432, label %originalBBpart289, label %originalBB87alteredBB

originalBBpart289:                                ; preds = %originalBB87
  br label %433, !dbg !2218

433:                                              ; preds = %originalBBpart289, %originalBBpart2
  %434 = load i8, i8* %27, align 1, !dbg !2219
  %435 = trunc i8 %434 to i1, !dbg !2219
  br i1 %435, label %453, label %436, !dbg !2221

436:                                              ; preds = %433
  %437 = load i32, i32* @x.37
  %438 = load i32, i32* @y.38
  %439 = sub i32 %437, 1
  %440 = mul i32 %437, %439
  %441 = urem i32 %440, 2
  %442 = icmp eq i32 %441, 0
  %443 = icmp slt i32 %438, 10
  %444 = or i1 %442, %443
  br i1 %444, label %originalBB91, label %originalBB91alteredBB

originalBB91:                                     ; preds = %436, %originalBB91alteredBB
  store i8 1, i8* %25, align 1, !dbg !2222
  %445 = load i32, i32* @x.37
  %446 = load i32, i32* @y.38
  %447 = sub i32 %445, 1
  %448 = mul i32 %445, %447
  %449 = urem i32 %448, 2
  %450 = icmp eq i32 %449, 0
  %451 = icmp slt i32 %446, 10
  %452 = or i1 %450, %451
  br i1 %452, label %originalBBpart293, label %originalBB91alteredBB

originalBBpart293:                                ; preds = %originalBB91
  br label %453, !dbg !2223

453:                                              ; preds = %originalBBpart293, %433
  br label %454, !dbg !2224

454:                                              ; preds = %453, %originalBBpart2
  %455 = load i32, i32* @x.37
  %456 = load i32, i32* @y.38
  %457 = sub i32 %455, 1
  %458 = mul i32 %455, %457
  %459 = urem i32 %458, 2
  %460 = icmp eq i32 %459, 0
  %461 = icmp slt i32 %456, 10
  %462 = or i1 %460, %461
  br i1 %462, label %originalBB95, label %originalBB95alteredBB

originalBB95:                                     ; preds = %454, %originalBB95alteredBB
  store i32 2, i32* %15, align 4, !dbg !2225
  %463 = load i8, i8* %27, align 1, !dbg !2226
  %464 = trunc i8 %463 to i1, !dbg !2226
  %465 = load i32, i32* @x.37
  %466 = load i32, i32* @y.38
  %467 = sub i32 %465, 1
  %468 = mul i32 %465, %467
  %469 = urem i32 %468, 2
  %470 = icmp eq i32 %469, 0
  %471 = icmp slt i32 %466, 10
  %472 = or i1 %470, %471
  br i1 %472, label %originalBBpart297, label %originalBB95alteredBB

originalBBpart297:                                ; preds = %originalBB95
  br i1 %464, label %550, label %473, !dbg !2228

473:                                              ; preds = %originalBBpart297
  %474 = load i32, i32* @x.37
  %475 = load i32, i32* @y.38
  %476 = sub i32 %474, 1
  %477 = mul i32 %474, %476
  %478 = urem i32 %477, 2
  %479 = icmp eq i32 %478, 0
  %480 = icmp slt i32 %475, 10
  %481 = or i1 %479, %480
  br i1 %481, label %originalBB99, label %originalBB99alteredBB

originalBB99:                                     ; preds = %473, %originalBB99alteredBB
  %482 = load i32, i32* @x.37
  %483 = load i32, i32* @y.38
  %484 = sub i32 %482, 1
  %485 = mul i32 %482, %484
  %486 = urem i32 %485, 2
  %487 = icmp eq i32 %486, 0
  %488 = icmp slt i32 %483, 10
  %489 = or i1 %487, %488
  br i1 %489, label %originalBBpart2101, label %originalBB99alteredBB

originalBBpart2101:                               ; preds = %originalBB99
  br label %490, !dbg !2229

490:                                              ; preds = %originalBBpart2101
  %491 = load i32, i32* @x.37
  %492 = load i32, i32* @y.38
  %493 = sub i32 %491, 1
  %494 = mul i32 %491, %493
  %495 = urem i32 %494, 2
  %496 = icmp eq i32 %495, 0
  %497 = icmp slt i32 %492, 10
  %498 = or i1 %496, %497
  br i1 %498, label %originalBB103, label %originalBB103alteredBB

originalBB103:                                    ; preds = %490, %originalBB103alteredBB
  %499 = load i64, i64* %21, align 8, !dbg !2230
  %500 = load i64, i64* %12, align 8, !dbg !2230
  %501 = icmp ult i64 %499, %500, !dbg !2230
  %502 = load i32, i32* @x.37
  %503 = load i32, i32* @y.38
  %504 = sub i32 %502, 1
  %505 = mul i32 %502, %504
  %506 = urem i32 %505, 2
  %507 = icmp eq i32 %506, 0
  %508 = icmp slt i32 %503, 10
  %509 = or i1 %507, %508
  br i1 %509, label %originalBBpart2105, label %originalBB103alteredBB

originalBBpart2105:                               ; preds = %originalBB103
  br i1 %501, label %510, label %514, !dbg !2233

510:                                              ; preds = %originalBBpart2105
  %511 = load i8*, i8** %11, align 8, !dbg !2230
  %512 = load i64, i64* %21, align 8, !dbg !2230
  %513 = getelementptr inbounds i8, i8* %511, i64 %512, !dbg !2230
  store i8 39, i8* %513, align 1, !dbg !2230
  br label %514, !dbg !2230

514:                                              ; preds = %510, %originalBBpart2105
  %515 = load i32, i32* @x.37
  %516 = load i32, i32* @y.38
  %517 = sub i32 %515, 1
  %518 = mul i32 %515, %517
  %519 = urem i32 %518, 2
  %520 = icmp eq i32 %519, 0
  %521 = icmp slt i32 %516, 10
  %522 = or i1 %520, %521
  br i1 %522, label %originalBB107, label %originalBB107alteredBB

originalBB107:                                    ; preds = %514, %originalBB107alteredBB
  %523 = load i64, i64* %21, align 8, !dbg !2233
  %524 = add i64 %523, 1, !dbg !2233
  store i64 %524, i64* %21, align 8, !dbg !2233
  %525 = load i32, i32* @x.37
  %526 = load i32, i32* @y.38
  %527 = sub i32 %525, 1
  %528 = mul i32 %525, %527
  %529 = urem i32 %528, 2
  %530 = icmp eq i32 %529, 0
  %531 = icmp slt i32 %526, 10
  %532 = or i1 %530, %531
  br i1 %532, label %originalBBpart2114, label %originalBB107alteredBB

originalBBpart2114:                               ; preds = %originalBB107
  br label %533, !dbg !2233

533:                                              ; preds = %originalBBpart2114
  %534 = load i32, i32* @x.37
  %535 = load i32, i32* @y.38
  %536 = sub i32 %534, 1
  %537 = mul i32 %534, %536
  %538 = urem i32 %537, 2
  %539 = icmp eq i32 %538, 0
  %540 = icmp slt i32 %535, 10
  %541 = or i1 %539, %540
  br i1 %541, label %originalBB116, label %originalBB116alteredBB

originalBB116:                                    ; preds = %533, %originalBB116alteredBB
  %542 = load i32, i32* @x.37
  %543 = load i32, i32* @y.38
  %544 = sub i32 %542, 1
  %545 = mul i32 %542, %544
  %546 = urem i32 %545, 2
  %547 = icmp eq i32 %546, 0
  %548 = icmp slt i32 %543, 10
  %549 = or i1 %547, %548
  br i1 %549, label %originalBBpart2118, label %originalBB116alteredBB

originalBBpart2118:                               ; preds = %originalBB116
  br label %550, !dbg !2233

550:                                              ; preds = %originalBBpart2118, %originalBBpart297
  %551 = load i32, i32* @x.37
  %552 = load i32, i32* @y.38
  %553 = sub i32 %551, 1
  %554 = mul i32 %551, %553
  %555 = urem i32 %554, 2
  %556 = icmp eq i32 %555, 0
  %557 = icmp slt i32 %552, 10
  %558 = or i1 %556, %557
  br i1 %558, label %originalBB120, label %originalBB120alteredBB

originalBB120:                                    ; preds = %550, %originalBB120alteredBB
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.87, i64 0, i64 0), i8** %23, align 8, !dbg !2234
  store i64 1, i64* %24, align 8, !dbg !2235
  %559 = load i32, i32* @x.37
  %560 = load i32, i32* @y.38
  %561 = sub i32 %559, 1
  %562 = mul i32 %559, %561
  %563 = urem i32 %562, 2
  %564 = icmp eq i32 %563, 0
  %565 = icmp slt i32 %560, 10
  %566 = or i1 %564, %565
  br i1 %566, label %originalBBpart2122, label %originalBB120alteredBB

originalBBpart2122:                               ; preds = %originalBB120
  br label %585, !dbg !2236

567:                                              ; preds = %originalBBpart2
  store i8 0, i8* %27, align 1, !dbg !2237
  br label %585, !dbg !2238

568:                                              ; preds = %originalBBpart2
  %569 = load i32, i32* @x.37
  %570 = load i32, i32* @y.38
  %571 = sub i32 %569, 1
  %572 = mul i32 %569, %571
  %573 = urem i32 %572, 2
  %574 = icmp eq i32 %573, 0
  %575 = icmp slt i32 %570, 10
  %576 = or i1 %574, %575
  br i1 %576, label %originalBB124, label %originalBB124alteredBB

originalBB124:                                    ; preds = %568, %originalBB124alteredBB
  call void @abort() #12, !dbg !2239
  %577 = load i32, i32* @x.37
  %578 = load i32, i32* @y.38
  %579 = sub i32 %577, 1
  %580 = mul i32 %577, %579
  %581 = urem i32 %580, 2
  %582 = icmp eq i32 %581, 0
  %583 = icmp slt i32 %578, 10
  %584 = or i1 %582, %583
  br i1 %584, label %originalBBpart2126, label %originalBB124alteredBB

originalBBpart2126:                               ; preds = %originalBB124
  unreachable, !dbg !2239

585:                                              ; preds = %567, %originalBBpart2122, %originalBBpart281, %originalBBpart231, %165
  store i64 0, i64* %20, align 8, !dbg !2240
  br label %586, !dbg !2242

586:                                              ; preds = %5081, %585
  %587 = load i64, i64* %14, align 8, !dbg !2243
  %588 = icmp eq i64 %587, -1, !dbg !2245
  br i1 %588, label %589, label %597, !dbg !2243

589:                                              ; preds = %586
  %590 = load i8*, i8** %13, align 8, !dbg !2246
  %591 = load i64, i64* %20, align 8, !dbg !2247
  %592 = getelementptr inbounds i8, i8* %590, i64 %591, !dbg !2246
  %593 = load i8, i8* %592, align 1, !dbg !2246
  %594 = sext i8 %593 to i32, !dbg !2246
  %595 = icmp eq i32 %594, 0, !dbg !2248
  %596 = zext i1 %595 to i32, !dbg !2248
  br label %618, !dbg !2243

597:                                              ; preds = %586
  %598 = load i32, i32* @x.37
  %599 = load i32, i32* @y.38
  %600 = sub i32 %598, 1
  %601 = mul i32 %598, %600
  %602 = urem i32 %601, 2
  %603 = icmp eq i32 %602, 0
  %604 = icmp slt i32 %599, 10
  %605 = or i1 %603, %604
  br i1 %605, label %originalBB128, label %originalBB128alteredBB

originalBB128:                                    ; preds = %597, %originalBB128alteredBB
  %606 = load i64, i64* %20, align 8, !dbg !2249
  %607 = load i64, i64* %14, align 8, !dbg !2250
  %608 = icmp eq i64 %606, %607, !dbg !2251
  %609 = zext i1 %608 to i32, !dbg !2251
  %610 = load i32, i32* @x.37
  %611 = load i32, i32* @y.38
  %612 = sub i32 %610, 1
  %613 = mul i32 %610, %612
  %614 = urem i32 %613, 2
  %615 = icmp eq i32 %614, 0
  %616 = icmp slt i32 %611, 10
  %617 = or i1 %615, %616
  br i1 %617, label %originalBBpart2130, label %originalBB128alteredBB

originalBBpart2130:                               ; preds = %originalBB128
  br label %618, !dbg !2243

618:                                              ; preds = %originalBBpart2130, %589
  %619 = phi i32 [ %596, %589 ], [ %609, %originalBBpart2130 ], !dbg !2243
  %620 = load i32, i32* @x.37
  %621 = load i32, i32* @y.38
  %622 = sub i32 %620, 1
  %623 = mul i32 %620, %622
  %624 = urem i32 %623, 2
  %625 = icmp eq i32 %624, 0
  %626 = icmp slt i32 %621, 10
  %627 = or i1 %625, %626
  br i1 %627, label %originalBB132, label %originalBB132alteredBB

originalBB132:                                    ; preds = %618, %originalBB132alteredBB
  %628 = icmp ne i32 %619, 0, !dbg !2252
  %629 = xor i1 %628, true, !dbg !2252
  %630 = load i32, i32* @x.37
  %631 = load i32, i32* @y.38
  %632 = sub i32 %630, 1
  %633 = mul i32 %630, %632
  %634 = urem i32 %633, 2
  %635 = icmp eq i32 %634, 0
  %636 = icmp slt i32 %631, 10
  %637 = or i1 %635, %636
  br i1 %637, label %originalBBpart2140, label %originalBB132alteredBB

originalBBpart2140:                               ; preds = %originalBB132
  br i1 %629, label %638, label %5084, !dbg !2253

638:                                              ; preds = %originalBBpart2140
  call void @llvm.dbg.declare(metadata i8* %31, metadata !2254, metadata !DIExpression()), !dbg !2256
  call void @llvm.dbg.declare(metadata i8* %32, metadata !2257, metadata !DIExpression()), !dbg !2258
  call void @llvm.dbg.declare(metadata i8* %33, metadata !2259, metadata !DIExpression()), !dbg !2260
  %639 = load i32, i32* @x.37
  %640 = load i32, i32* @y.38
  %641 = sub i32 %639, 1
  %642 = mul i32 %639, %641
  %643 = urem i32 %642, 2
  %644 = icmp eq i32 %643, 0
  %645 = icmp slt i32 %640, 10
  %646 = or i1 %644, %645
  br i1 %646, label %originalBB142, label %originalBB142alteredBB

originalBB142:                                    ; preds = %638, %originalBB142alteredBB
  store i8 0, i8* %33, align 1, !dbg !2260
  call void @llvm.dbg.declare(metadata i8* %34, metadata !2261, metadata !DIExpression()), !dbg !2262
  store i8 0, i8* %34, align 1, !dbg !2262
  call void @llvm.dbg.declare(metadata i8* %35, metadata !2263, metadata !DIExpression()), !dbg !2264
  store i8 0, i8* %35, align 1, !dbg !2264
  %647 = load i8, i8* %25, align 1, !dbg !2265
  %648 = trunc i8 %647 to i1, !dbg !2265
  %649 = load i32, i32* @x.37
  %650 = load i32, i32* @y.38
  %651 = sub i32 %649, 1
  %652 = mul i32 %649, %651
  %653 = urem i32 %652, 2
  %654 = icmp eq i32 %653, 0
  %655 = icmp slt i32 %650, 10
  %656 = or i1 %654, %655
  br i1 %656, label %originalBBpart2144, label %originalBB142alteredBB

originalBBpart2144:                               ; preds = %originalBB142
  br i1 %648, label %657, label %837, !dbg !2267

657:                                              ; preds = %originalBBpart2144
  %658 = load i32, i32* @x.37
  %659 = load i32, i32* @y.38
  %660 = sub i32 %658, 1
  %661 = mul i32 %658, %660
  %662 = urem i32 %661, 2
  %663 = icmp eq i32 %662, 0
  %664 = icmp slt i32 %659, 10
  %665 = or i1 %663, %664
  br i1 %665, label %originalBB146, label %originalBB146alteredBB

originalBB146:                                    ; preds = %657, %originalBB146alteredBB
  %666 = load i32, i32* %15, align 4, !dbg !2268
  %667 = icmp ne i32 %666, 2, !dbg !2269
  %668 = load i32, i32* @x.37
  %669 = load i32, i32* @y.38
  %670 = sub i32 %668, 1
  %671 = mul i32 %668, %670
  %672 = urem i32 %671, 2
  %673 = icmp eq i32 %672, 0
  %674 = icmp slt i32 %669, 10
  %675 = or i1 %673, %674
  br i1 %675, label %originalBBpart2148, label %originalBB146alteredBB

originalBBpart2148:                               ; preds = %originalBB146
  br i1 %667, label %676, label %837, !dbg !2270

676:                                              ; preds = %originalBBpart2148
  %677 = load i32, i32* @x.37
  %678 = load i32, i32* @y.38
  %679 = sub i32 %677, 1
  %680 = mul i32 %677, %679
  %681 = urem i32 %680, 2
  %682 = icmp eq i32 %681, 0
  %683 = icmp slt i32 %678, 10
  %684 = or i1 %682, %683
  br i1 %684, label %originalBB150, label %originalBB150alteredBB

originalBB150:                                    ; preds = %676, %originalBB150alteredBB
  %685 = load i64, i64* %24, align 8, !dbg !2271
  %686 = icmp ne i64 %685, 0, !dbg !2271
  %687 = load i32, i32* @x.37
  %688 = load i32, i32* @y.38
  %689 = sub i32 %687, 1
  %690 = mul i32 %687, %689
  %691 = urem i32 %690, 2
  %692 = icmp eq i32 %691, 0
  %693 = icmp slt i32 %688, 10
  %694 = or i1 %692, %693
  br i1 %694, label %originalBBpart2152, label %originalBB150alteredBB

originalBBpart2152:                               ; preds = %originalBB150
  br i1 %686, label %695, label %837, !dbg !2272

695:                                              ; preds = %originalBBpart2152
  %696 = load i32, i32* @x.37
  %697 = load i32, i32* @y.38
  %698 = sub i32 %696, 1
  %699 = mul i32 %696, %698
  %700 = urem i32 %699, 2
  %701 = icmp eq i32 %700, 0
  %702 = icmp slt i32 %697, 10
  %703 = or i1 %701, %702
  br i1 %703, label %originalBB154, label %originalBB154alteredBB

originalBB154:                                    ; preds = %695, %originalBB154alteredBB
  %704 = load i64, i64* %20, align 8, !dbg !2273
  %705 = load i64, i64* %24, align 8, !dbg !2274
  %706 = add i64 %704, %705, !dbg !2275
  %707 = load i64, i64* %14, align 8, !dbg !2276
  %708 = icmp eq i64 %707, -1, !dbg !2277
  %709 = load i32, i32* @x.37
  %710 = load i32, i32* @y.38
  %711 = sub i32 %709, 1
  %712 = mul i32 %709, %711
  %713 = urem i32 %712, 2
  %714 = icmp eq i32 %713, 0
  %715 = icmp slt i32 %710, 10
  %716 = or i1 %714, %715
  br i1 %716, label %originalBBpart2167, label %originalBB154alteredBB

originalBBpart2167:                               ; preds = %originalBB154
  br i1 %708, label %717, label %739, !dbg !2278

717:                                              ; preds = %originalBBpart2167
  %718 = load i64, i64* %24, align 8, !dbg !2279
  %719 = icmp ult i64 1, %718, !dbg !2280
  br i1 %719, label %720, label %739, !dbg !2276

720:                                              ; preds = %717
  %721 = load i32, i32* @x.37
  %722 = load i32, i32* @y.38
  %723 = sub i32 %721, 1
  %724 = mul i32 %721, %723
  %725 = urem i32 %724, 2
  %726 = icmp eq i32 %725, 0
  %727 = icmp slt i32 %722, 10
  %728 = or i1 %726, %727
  br i1 %728, label %originalBB169, label %originalBB169alteredBB

originalBB169:                                    ; preds = %720, %originalBB169alteredBB
  %729 = load i8*, i8** %13, align 8, !dbg !2281
  %730 = call i64 @strlen(i8* %729) #13, !dbg !2282
  store i64 %730, i64* %14, align 8, !dbg !2283
  %731 = load i32, i32* @x.37
  %732 = load i32, i32* @y.38
  %733 = sub i32 %731, 1
  %734 = mul i32 %731, %733
  %735 = urem i32 %734, 2
  %736 = icmp eq i32 %735, 0
  %737 = icmp slt i32 %732, 10
  %738 = or i1 %736, %737
  br i1 %738, label %originalBBpart2171, label %originalBB169alteredBB

originalBBpart2171:                               ; preds = %originalBB169
  br label %757, !dbg !2276

739:                                              ; preds = %717, %originalBBpart2167
  %740 = load i32, i32* @x.37
  %741 = load i32, i32* @y.38
  %742 = sub i32 %740, 1
  %743 = mul i32 %740, %742
  %744 = urem i32 %743, 2
  %745 = icmp eq i32 %744, 0
  %746 = icmp slt i32 %741, 10
  %747 = or i1 %745, %746
  br i1 %747, label %originalBB173, label %originalBB173alteredBB

originalBB173:                                    ; preds = %739, %originalBB173alteredBB
  %748 = load i64, i64* %14, align 8, !dbg !2284
  %749 = load i32, i32* @x.37
  %750 = load i32, i32* @y.38
  %751 = sub i32 %749, 1
  %752 = mul i32 %749, %751
  %753 = urem i32 %752, 2
  %754 = icmp eq i32 %753, 0
  %755 = icmp slt i32 %750, 10
  %756 = or i1 %754, %755
  br i1 %756, label %originalBBpart2175, label %originalBB173alteredBB

originalBBpart2175:                               ; preds = %originalBB173
  br label %757, !dbg !2276

757:                                              ; preds = %originalBBpart2175, %originalBBpart2171
  %758 = phi i64 [ %730, %originalBBpart2171 ], [ %748, %originalBBpart2175 ], !dbg !2276
  %759 = load i32, i32* @x.37
  %760 = load i32, i32* @y.38
  %761 = sub i32 %759, 1
  %762 = mul i32 %759, %761
  %763 = urem i32 %762, 2
  %764 = icmp eq i32 %763, 0
  %765 = icmp slt i32 %760, 10
  %766 = or i1 %764, %765
  br i1 %766, label %originalBB177, label %originalBB177alteredBB

originalBB177:                                    ; preds = %757, %originalBB177alteredBB
  %767 = icmp ule i64 %706, %758, !dbg !2285
  %768 = load i32, i32* @x.37
  %769 = load i32, i32* @y.38
  %770 = sub i32 %768, 1
  %771 = mul i32 %768, %770
  %772 = urem i32 %771, 2
  %773 = icmp eq i32 %772, 0
  %774 = icmp slt i32 %769, 10
  %775 = or i1 %773, %774
  br i1 %775, label %originalBBpart2179, label %originalBB177alteredBB

originalBBpart2179:                               ; preds = %originalBB177
  br i1 %767, label %776, label %837, !dbg !2286

776:                                              ; preds = %originalBBpart2179
  %777 = load i32, i32* @x.37
  %778 = load i32, i32* @y.38
  %779 = sub i32 %777, 1
  %780 = mul i32 %777, %779
  %781 = urem i32 %780, 2
  %782 = icmp eq i32 %781, 0
  %783 = icmp slt i32 %778, 10
  %784 = or i1 %782, %783
  br i1 %784, label %originalBB181, label %originalBB181alteredBB

originalBB181:                                    ; preds = %776, %originalBB181alteredBB
  %785 = load i8*, i8** %13, align 8, !dbg !2287
  %786 = load i64, i64* %20, align 8, !dbg !2288
  %787 = getelementptr inbounds i8, i8* %785, i64 %786, !dbg !2289
  %788 = load i8*, i8** %23, align 8, !dbg !2290
  %789 = load i64, i64* %24, align 8, !dbg !2291
  %790 = call i32 @memcmp(i8* %787, i8* %788, i64 %789) #13, !dbg !2292
  %791 = icmp eq i32 %790, 0, !dbg !2293
  %792 = load i32, i32* @x.37
  %793 = load i32, i32* @y.38
  %794 = sub i32 %792, 1
  %795 = mul i32 %792, %794
  %796 = urem i32 %795, 2
  %797 = icmp eq i32 %796, 0
  %798 = icmp slt i32 %793, 10
  %799 = or i1 %797, %798
  br i1 %799, label %originalBBpart2183, label %originalBB181alteredBB

originalBBpart2183:                               ; preds = %originalBB181
  br i1 %791, label %800, label %837, !dbg !2294

800:                                              ; preds = %originalBBpart2183
  %801 = load i32, i32* @x.37
  %802 = load i32, i32* @y.38
  %803 = sub i32 %801, 1
  %804 = mul i32 %801, %803
  %805 = urem i32 %804, 2
  %806 = icmp eq i32 %805, 0
  %807 = icmp slt i32 %802, 10
  %808 = or i1 %806, %807
  br i1 %808, label %originalBB185, label %originalBB185alteredBB

originalBB185:                                    ; preds = %800, %originalBB185alteredBB
  %809 = load i8, i8* %27, align 1, !dbg !2295
  %810 = trunc i8 %809 to i1, !dbg !2295
  %811 = load i32, i32* @x.37
  %812 = load i32, i32* @y.38
  %813 = sub i32 %811, 1
  %814 = mul i32 %811, %813
  %815 = urem i32 %814, 2
  %816 = icmp eq i32 %815, 0
  %817 = icmp slt i32 %812, 10
  %818 = or i1 %816, %817
  br i1 %818, label %originalBBpart2187, label %originalBB185alteredBB

originalBBpart2187:                               ; preds = %originalBB185
  br i1 %810, label %819, label %820, !dbg !2298

819:                                              ; preds = %originalBBpart2187
  br label %5470, !dbg !2299

820:                                              ; preds = %originalBBpart2187
  %821 = load i32, i32* @x.37
  %822 = load i32, i32* @y.38
  %823 = sub i32 %821, 1
  %824 = mul i32 %821, %823
  %825 = urem i32 %824, 2
  %826 = icmp eq i32 %825, 0
  %827 = icmp slt i32 %822, 10
  %828 = or i1 %826, %827
  br i1 %828, label %originalBB189, label %originalBB189alteredBB

originalBB189:                                    ; preds = %820, %originalBB189alteredBB
  store i8 1, i8* %33, align 1, !dbg !2300
  %829 = load i32, i32* @x.37
  %830 = load i32, i32* @y.38
  %831 = sub i32 %829, 1
  %832 = mul i32 %829, %831
  %833 = urem i32 %832, 2
  %834 = icmp eq i32 %833, 0
  %835 = icmp slt i32 %830, 10
  %836 = or i1 %834, %835
  br i1 %836, label %originalBBpart2191, label %originalBB189alteredBB

originalBBpart2191:                               ; preds = %originalBB189
  br label %837, !dbg !2301

837:                                              ; preds = %originalBBpart2191, %originalBBpart2183, %originalBBpart2179, %originalBBpart2152, %originalBBpart2148, %originalBBpart2144
  %838 = load i32, i32* @x.37
  %839 = load i32, i32* @y.38
  %840 = sub i32 %838, 1
  %841 = mul i32 %838, %840
  %842 = urem i32 %841, 2
  %843 = icmp eq i32 %842, 0
  %844 = icmp slt i32 %839, 10
  %845 = or i1 %843, %844
  br i1 %845, label %originalBB193, label %originalBB193alteredBB

originalBB193:                                    ; preds = %837, %originalBB193alteredBB
  %846 = load i8*, i8** %13, align 8, !dbg !2302
  %847 = load i64, i64* %20, align 8, !dbg !2303
  %848 = getelementptr inbounds i8, i8* %846, i64 %847, !dbg !2302
  %849 = load i8, i8* %848, align 1, !dbg !2302
  store i8 %849, i8* %31, align 1, !dbg !2304
  %850 = load i8, i8* %31, align 1, !dbg !2305
  %851 = zext i8 %850 to i32, !dbg !2305
  %852 = load i32, i32* @x.37
  %853 = load i32, i32* @y.38
  %854 = sub i32 %852, 1
  %855 = mul i32 %852, %854
  %856 = urem i32 %855, 2
  %857 = icmp eq i32 %856, 0
  %858 = icmp slt i32 %853, 10
  %859 = or i1 %857, %858
  br i1 %859, label %originalBBpart2195, label %originalBB193alteredBB

originalBBpart2195:                               ; preds = %originalBB193
  switch i32 %851, label %2768 [
    i32 0, label %860
    i32 63, label %1493
    i32 7, label %1893
    i32 8, label %1910
    i32 12, label %1927
    i32 10, label %1944
    i32 13, label %1961
    i32 9, label %1978
    i32 11, label %1995
    i32 92, label %2012
    i32 123, label %2270
    i32 125, label %2270
    i32 35, label %2348
    i32 126, label %2348
    i32 32, label %2401
    i32 33, label %2418
    i32 34, label %2418
    i32 36, label %2418
    i32 38, label %2418
    i32 40, label %2418
    i32 41, label %2418
    i32 42, label %2418
    i32 59, label %2418
    i32 60, label %2418
    i32 61, label %2418
    i32 62, label %2418
    i32 91, label %2418
    i32 94, label %2418
    i32 96, label %2418
    i32 124, label %2418
    i32 39, label %2442
    i32 37, label %2751
    i32 43, label %2751
    i32 44, label %2751
    i32 45, label %2751
    i32 46, label %2751
    i32 47, label %2751
    i32 48, label %2751
    i32 49, label %2751
    i32 50, label %2751
    i32 51, label %2751
    i32 52, label %2751
    i32 53, label %2751
    i32 54, label %2751
    i32 55, label %2751
    i32 56, label %2751
    i32 57, label %2751
    i32 58, label %2751
    i32 65, label %2751
    i32 66, label %2751
    i32 67, label %2751
    i32 68, label %2751
    i32 69, label %2751
    i32 70, label %2751
    i32 71, label %2751
    i32 72, label %2751
    i32 73, label %2751
    i32 74, label %2751
    i32 75, label %2751
    i32 76, label %2751
    i32 77, label %2751
    i32 78, label %2751
    i32 79, label %2751
    i32 80, label %2751
    i32 81, label %2751
    i32 82, label %2751
    i32 83, label %2751
    i32 84, label %2751
    i32 85, label %2751
    i32 86, label %2751
    i32 87, label %2751
    i32 88, label %2751
    i32 89, label %2751
    i32 90, label %2751
    i32 93, label %2751
    i32 95, label %2751
    i32 97, label %2751
    i32 98, label %2751
    i32 99, label %2751
    i32 100, label %2751
    i32 101, label %2751
    i32 102, label %2751
    i32 103, label %2751
    i32 104, label %2751
    i32 105, label %2751
    i32 106, label %2751
    i32 107, label %2751
    i32 108, label %2751
    i32 109, label %2751
    i32 110, label %2751
    i32 111, label %2751
    i32 112, label %2751
    i32 113, label %2751
    i32 114, label %2751
    i32 115, label %2751
    i32 116, label %2751
    i32 117, label %2751
    i32 118, label %2751
    i32 119, label %2751
    i32 120, label %2751
    i32 121, label %2751
    i32 122, label %2751
  ], !dbg !2306

860:                                              ; preds = %originalBBpart2195
  %861 = load i32, i32* @x.37
  %862 = load i32, i32* @y.38
  %863 = sub i32 %861, 1
  %864 = mul i32 %861, %863
  %865 = urem i32 %864, 2
  %866 = icmp eq i32 %865, 0
  %867 = icmp slt i32 %862, 10
  %868 = or i1 %866, %867
  br i1 %868, label %originalBB197, label %originalBB197alteredBB

originalBB197:                                    ; preds = %860, %originalBB197alteredBB
  %869 = load i8, i8* %25, align 1, !dbg !2307
  %870 = trunc i8 %869 to i1, !dbg !2307
  %871 = load i32, i32* @x.37
  %872 = load i32, i32* @y.38
  %873 = sub i32 %871, 1
  %874 = mul i32 %871, %873
  %875 = urem i32 %874, 2
  %876 = icmp eq i32 %875, 0
  %877 = icmp slt i32 %872, 10
  %878 = or i1 %876, %877
  br i1 %878, label %originalBBpart2199, label %originalBB197alteredBB

originalBBpart2199:                               ; preds = %originalBB197
  br i1 %870, label %879, label %1438, !dbg !2310

879:                                              ; preds = %originalBBpart2199
  %880 = load i32, i32* @x.37
  %881 = load i32, i32* @y.38
  %882 = sub i32 %880, 1
  %883 = mul i32 %880, %882
  %884 = urem i32 %883, 2
  %885 = icmp eq i32 %884, 0
  %886 = icmp slt i32 %881, 10
  %887 = or i1 %885, %886
  br i1 %887, label %originalBB201, label %originalBB201alteredBB

originalBB201:                                    ; preds = %879, %originalBB201alteredBB
  %888 = load i32, i32* @x.37
  %889 = load i32, i32* @y.38
  %890 = sub i32 %888, 1
  %891 = mul i32 %888, %890
  %892 = urem i32 %891, 2
  %893 = icmp eq i32 %892, 0
  %894 = icmp slt i32 %889, 10
  %895 = or i1 %893, %894
  br i1 %895, label %originalBBpart2203, label %originalBB201alteredBB

originalBBpart2203:                               ; preds = %originalBB201
  br label %896, !dbg !2311

896:                                              ; preds = %originalBBpart2203
  %897 = load i32, i32* @x.37
  %898 = load i32, i32* @y.38
  %899 = sub i32 %897, 1
  %900 = mul i32 %897, %899
  %901 = urem i32 %900, 2
  %902 = icmp eq i32 %901, 0
  %903 = icmp slt i32 %898, 10
  %904 = or i1 %902, %903
  br i1 %904, label %originalBB205, label %originalBB205alteredBB

originalBB205:                                    ; preds = %896, %originalBB205alteredBB
  %905 = load i8, i8* %27, align 1, !dbg !2313
  %906 = trunc i8 %905 to i1, !dbg !2313
  %907 = load i32, i32* @x.37
  %908 = load i32, i32* @y.38
  %909 = sub i32 %907, 1
  %910 = mul i32 %907, %909
  %911 = urem i32 %910, 2
  %912 = icmp eq i32 %911, 0
  %913 = icmp slt i32 %908, 10
  %914 = or i1 %912, %913
  br i1 %914, label %originalBBpart2207, label %originalBB205alteredBB

originalBBpart2207:                               ; preds = %originalBB205
  br i1 %906, label %915, label %916, !dbg !2316

915:                                              ; preds = %originalBBpart2207
  br label %5470, !dbg !2313

916:                                              ; preds = %originalBBpart2207
  %917 = load i32, i32* @x.37
  %918 = load i32, i32* @y.38
  %919 = sub i32 %917, 1
  %920 = mul i32 %917, %919
  %921 = urem i32 %920, 2
  %922 = icmp eq i32 %921, 0
  %923 = icmp slt i32 %918, 10
  %924 = or i1 %922, %923
  br i1 %924, label %originalBB209, label %originalBB209alteredBB

originalBB209:                                    ; preds = %916, %originalBB209alteredBB
  store i8 1, i8* %34, align 1, !dbg !2316
  %925 = load i32, i32* %15, align 4, !dbg !2317
  %926 = icmp eq i32 %925, 2, !dbg !2317
  %927 = load i32, i32* @x.37
  %928 = load i32, i32* @y.38
  %929 = sub i32 %927, 1
  %930 = mul i32 %927, %929
  %931 = urem i32 %930, 2
  %932 = icmp eq i32 %931, 0
  %933 = icmp slt i32 %928, 10
  %934 = or i1 %932, %933
  br i1 %934, label %originalBBpart2211, label %originalBB209alteredBB

originalBBpart2211:                               ; preds = %originalBB209
  br i1 %926, label %935, label %1087, !dbg !2317

935:                                              ; preds = %originalBBpart2211
  %936 = load i32, i32* @x.37
  %937 = load i32, i32* @y.38
  %938 = sub i32 %936, 1
  %939 = mul i32 %936, %938
  %940 = urem i32 %939, 2
  %941 = icmp eq i32 %940, 0
  %942 = icmp slt i32 %937, 10
  %943 = or i1 %941, %942
  br i1 %943, label %originalBB213, label %originalBB213alteredBB

originalBB213:                                    ; preds = %935, %originalBB213alteredBB
  %944 = load i8, i8* %28, align 1, !dbg !2317
  %945 = trunc i8 %944 to i1, !dbg !2317
  %946 = load i32, i32* @x.37
  %947 = load i32, i32* @y.38
  %948 = sub i32 %946, 1
  %949 = mul i32 %946, %948
  %950 = urem i32 %949, 2
  %951 = icmp eq i32 %950, 0
  %952 = icmp slt i32 %947, 10
  %953 = or i1 %951, %952
  br i1 %953, label %originalBBpart2215, label %originalBB213alteredBB

originalBBpart2215:                               ; preds = %originalBB213
  br i1 %945, label %1087, label %954, !dbg !2316

954:                                              ; preds = %originalBBpart2215
  %955 = load i32, i32* @x.37
  %956 = load i32, i32* @y.38
  %957 = sub i32 %955, 1
  %958 = mul i32 %955, %957
  %959 = urem i32 %958, 2
  %960 = icmp eq i32 %959, 0
  %961 = icmp slt i32 %956, 10
  %962 = or i1 %960, %961
  br i1 %962, label %originalBB217, label %originalBB217alteredBB

originalBB217:                                    ; preds = %954, %originalBB217alteredBB
  %963 = load i32, i32* @x.37
  %964 = load i32, i32* @y.38
  %965 = sub i32 %963, 1
  %966 = mul i32 %963, %965
  %967 = urem i32 %966, 2
  %968 = icmp eq i32 %967, 0
  %969 = icmp slt i32 %964, 10
  %970 = or i1 %968, %969
  br i1 %970, label %originalBBpart2219, label %originalBB217alteredBB

originalBBpart2219:                               ; preds = %originalBB217
  br label %971, !dbg !2319

971:                                              ; preds = %originalBBpart2219
  %972 = load i32, i32* @x.37
  %973 = load i32, i32* @y.38
  %974 = sub i32 %972, 1
  %975 = mul i32 %972, %974
  %976 = urem i32 %975, 2
  %977 = icmp eq i32 %976, 0
  %978 = icmp slt i32 %973, 10
  %979 = or i1 %977, %978
  br i1 %979, label %originalBB221, label %originalBB221alteredBB

originalBB221:                                    ; preds = %971, %originalBB221alteredBB
  %980 = load i64, i64* %21, align 8, !dbg !2321
  %981 = load i64, i64* %12, align 8, !dbg !2321
  %982 = icmp ult i64 %980, %981, !dbg !2321
  %983 = load i32, i32* @x.37
  %984 = load i32, i32* @y.38
  %985 = sub i32 %983, 1
  %986 = mul i32 %983, %985
  %987 = urem i32 %986, 2
  %988 = icmp eq i32 %987, 0
  %989 = icmp slt i32 %984, 10
  %990 = or i1 %988, %989
  br i1 %990, label %originalBBpart2223, label %originalBB221alteredBB

originalBBpart2223:                               ; preds = %originalBB221
  br i1 %982, label %991, label %1011, !dbg !2324

991:                                              ; preds = %originalBBpart2223
  %992 = load i32, i32* @x.37
  %993 = load i32, i32* @y.38
  %994 = sub i32 %992, 1
  %995 = mul i32 %992, %994
  %996 = urem i32 %995, 2
  %997 = icmp eq i32 %996, 0
  %998 = icmp slt i32 %993, 10
  %999 = or i1 %997, %998
  br i1 %999, label %originalBB225, label %originalBB225alteredBB

originalBB225:                                    ; preds = %991, %originalBB225alteredBB
  %1000 = load i8*, i8** %11, align 8, !dbg !2321
  %1001 = load i64, i64* %21, align 8, !dbg !2321
  %1002 = getelementptr inbounds i8, i8* %1000, i64 %1001, !dbg !2321
  store i8 39, i8* %1002, align 1, !dbg !2321
  %1003 = load i32, i32* @x.37
  %1004 = load i32, i32* @y.38
  %1005 = sub i32 %1003, 1
  %1006 = mul i32 %1003, %1005
  %1007 = urem i32 %1006, 2
  %1008 = icmp eq i32 %1007, 0
  %1009 = icmp slt i32 %1004, 10
  %1010 = or i1 %1008, %1009
  br i1 %1010, label %originalBBpart2227, label %originalBB225alteredBB

originalBBpart2227:                               ; preds = %originalBB225
  br label %1011, !dbg !2321

1011:                                             ; preds = %originalBBpart2227, %originalBBpart2223
  %1012 = load i64, i64* %21, align 8, !dbg !2324
  %1013 = add i64 %1012, 1, !dbg !2324
  store i64 %1013, i64* %21, align 8, !dbg !2324
  br label %1014, !dbg !2324

1014:                                             ; preds = %1011
  %1015 = load i32, i32* @x.37
  %1016 = load i32, i32* @y.38
  %1017 = sub i32 %1015, 1
  %1018 = mul i32 %1015, %1017
  %1019 = urem i32 %1018, 2
  %1020 = icmp eq i32 %1019, 0
  %1021 = icmp slt i32 %1016, 10
  %1022 = or i1 %1020, %1021
  br i1 %1022, label %originalBB229, label %originalBB229alteredBB

originalBB229:                                    ; preds = %1014, %originalBB229alteredBB
  %1023 = load i32, i32* @x.37
  %1024 = load i32, i32* @y.38
  %1025 = sub i32 %1023, 1
  %1026 = mul i32 %1023, %1025
  %1027 = urem i32 %1026, 2
  %1028 = icmp eq i32 %1027, 0
  %1029 = icmp slt i32 %1024, 10
  %1030 = or i1 %1028, %1029
  br i1 %1030, label %originalBBpart2231, label %originalBB229alteredBB

originalBBpart2231:                               ; preds = %originalBB229
  br label %1031, !dbg !2319

1031:                                             ; preds = %originalBBpart2231
  %1032 = load i64, i64* %21, align 8, !dbg !2325
  %1033 = load i64, i64* %12, align 8, !dbg !2325
  %1034 = icmp ult i64 %1032, %1033, !dbg !2325
  br i1 %1034, label %1035, label %1055, !dbg !2328

1035:                                             ; preds = %1031
  %1036 = load i32, i32* @x.37
  %1037 = load i32, i32* @y.38
  %1038 = sub i32 %1036, 1
  %1039 = mul i32 %1036, %1038
  %1040 = urem i32 %1039, 2
  %1041 = icmp eq i32 %1040, 0
  %1042 = icmp slt i32 %1037, 10
  %1043 = or i1 %1041, %1042
  br i1 %1043, label %originalBB233, label %originalBB233alteredBB

originalBB233:                                    ; preds = %1035, %originalBB233alteredBB
  %1044 = load i8*, i8** %11, align 8, !dbg !2325
  %1045 = load i64, i64* %21, align 8, !dbg !2325
  %1046 = getelementptr inbounds i8, i8* %1044, i64 %1045, !dbg !2325
  store i8 36, i8* %1046, align 1, !dbg !2325
  %1047 = load i32, i32* @x.37
  %1048 = load i32, i32* @y.38
  %1049 = sub i32 %1047, 1
  %1050 = mul i32 %1047, %1049
  %1051 = urem i32 %1050, 2
  %1052 = icmp eq i32 %1051, 0
  %1053 = icmp slt i32 %1048, 10
  %1054 = or i1 %1052, %1053
  br i1 %1054, label %originalBBpart2235, label %originalBB233alteredBB

originalBBpart2235:                               ; preds = %originalBB233
  br label %1055, !dbg !2325

1055:                                             ; preds = %originalBBpart2235, %1031
  %1056 = load i64, i64* %21, align 8, !dbg !2328
  %1057 = add i64 %1056, 1, !dbg !2328
  store i64 %1057, i64* %21, align 8, !dbg !2328
  br label %1058, !dbg !2328

1058:                                             ; preds = %1055
  %1059 = load i32, i32* @x.37
  %1060 = load i32, i32* @y.38
  %1061 = sub i32 %1059, 1
  %1062 = mul i32 %1059, %1061
  %1063 = urem i32 %1062, 2
  %1064 = icmp eq i32 %1063, 0
  %1065 = icmp slt i32 %1060, 10
  %1066 = or i1 %1064, %1065
  br i1 %1066, label %originalBB237, label %originalBB237alteredBB

originalBB237:                                    ; preds = %1058, %originalBB237alteredBB
  %1067 = load i32, i32* @x.37
  %1068 = load i32, i32* @y.38
  %1069 = sub i32 %1067, 1
  %1070 = mul i32 %1067, %1069
  %1071 = urem i32 %1070, 2
  %1072 = icmp eq i32 %1071, 0
  %1073 = icmp slt i32 %1068, 10
  %1074 = or i1 %1072, %1073
  br i1 %1074, label %originalBBpart2239, label %originalBB237alteredBB

originalBBpart2239:                               ; preds = %originalBB237
  br label %1075, !dbg !2319

1075:                                             ; preds = %originalBBpart2239
  %1076 = load i64, i64* %21, align 8, !dbg !2329
  %1077 = load i64, i64* %12, align 8, !dbg !2329
  %1078 = icmp ult i64 %1076, %1077, !dbg !2329
  br i1 %1078, label %1079, label %1083, !dbg !2332

1079:                                             ; preds = %1075
  %1080 = load i8*, i8** %11, align 8, !dbg !2329
  %1081 = load i64, i64* %21, align 8, !dbg !2329
  %1082 = getelementptr inbounds i8, i8* %1080, i64 %1081, !dbg !2329
  store i8 39, i8* %1082, align 1, !dbg !2329
  br label %1083, !dbg !2329

1083:                                             ; preds = %1079, %1075
  %1084 = load i64, i64* %21, align 8, !dbg !2332
  %1085 = add i64 %1084, 1, !dbg !2332
  store i64 %1085, i64* %21, align 8, !dbg !2332
  br label %1086, !dbg !2332

1086:                                             ; preds = %1083
  store i8 1, i8* %28, align 1, !dbg !2319
  br label %1087, !dbg !2319

1087:                                             ; preds = %1086, %originalBBpart2215, %originalBBpart2211
  %1088 = load i32, i32* @x.37
  %1089 = load i32, i32* @y.38
  %1090 = sub i32 %1088, 1
  %1091 = mul i32 %1088, %1090
  %1092 = urem i32 %1091, 2
  %1093 = icmp eq i32 %1092, 0
  %1094 = icmp slt i32 %1089, 10
  %1095 = or i1 %1093, %1094
  br i1 %1095, label %originalBB241, label %originalBB241alteredBB

originalBB241:                                    ; preds = %1087, %originalBB241alteredBB
  %1096 = load i32, i32* @x.37
  %1097 = load i32, i32* @y.38
  %1098 = sub i32 %1096, 1
  %1099 = mul i32 %1096, %1098
  %1100 = urem i32 %1099, 2
  %1101 = icmp eq i32 %1100, 0
  %1102 = icmp slt i32 %1097, 10
  %1103 = or i1 %1101, %1102
  br i1 %1103, label %originalBBpart2243, label %originalBB241alteredBB

originalBBpart2243:                               ; preds = %originalBB241
  br label %1104, !dbg !2316

1104:                                             ; preds = %originalBBpart2243
  %1105 = load i32, i32* @x.37
  %1106 = load i32, i32* @y.38
  %1107 = sub i32 %1105, 1
  %1108 = mul i32 %1105, %1107
  %1109 = urem i32 %1108, 2
  %1110 = icmp eq i32 %1109, 0
  %1111 = icmp slt i32 %1106, 10
  %1112 = or i1 %1110, %1111
  br i1 %1112, label %originalBB245, label %originalBB245alteredBB

originalBB245:                                    ; preds = %1104, %originalBB245alteredBB
  %1113 = load i64, i64* %21, align 8, !dbg !2333
  %1114 = load i64, i64* %12, align 8, !dbg !2333
  %1115 = icmp ult i64 %1113, %1114, !dbg !2333
  %1116 = load i32, i32* @x.37
  %1117 = load i32, i32* @y.38
  %1118 = sub i32 %1116, 1
  %1119 = mul i32 %1116, %1118
  %1120 = urem i32 %1119, 2
  %1121 = icmp eq i32 %1120, 0
  %1122 = icmp slt i32 %1117, 10
  %1123 = or i1 %1121, %1122
  br i1 %1123, label %originalBBpart2247, label %originalBB245alteredBB

originalBBpart2247:                               ; preds = %originalBB245
  br i1 %1115, label %1124, label %1144, !dbg !2336

1124:                                             ; preds = %originalBBpart2247
  %1125 = load i32, i32* @x.37
  %1126 = load i32, i32* @y.38
  %1127 = sub i32 %1125, 1
  %1128 = mul i32 %1125, %1127
  %1129 = urem i32 %1128, 2
  %1130 = icmp eq i32 %1129, 0
  %1131 = icmp slt i32 %1126, 10
  %1132 = or i1 %1130, %1131
  br i1 %1132, label %originalBB249, label %originalBB249alteredBB

originalBB249:                                    ; preds = %1124, %originalBB249alteredBB
  %1133 = load i8*, i8** %11, align 8, !dbg !2333
  %1134 = load i64, i64* %21, align 8, !dbg !2333
  %1135 = getelementptr inbounds i8, i8* %1133, i64 %1134, !dbg !2333
  store i8 92, i8* %1135, align 1, !dbg !2333
  %1136 = load i32, i32* @x.37
  %1137 = load i32, i32* @y.38
  %1138 = sub i32 %1136, 1
  %1139 = mul i32 %1136, %1138
  %1140 = urem i32 %1139, 2
  %1141 = icmp eq i32 %1140, 0
  %1142 = icmp slt i32 %1137, 10
  %1143 = or i1 %1141, %1142
  br i1 %1143, label %originalBBpart2251, label %originalBB249alteredBB

originalBBpart2251:                               ; preds = %originalBB249
  br label %1144, !dbg !2333

1144:                                             ; preds = %originalBBpart2251, %originalBBpart2247
  %1145 = load i32, i32* @x.37
  %1146 = load i32, i32* @y.38
  %1147 = sub i32 %1145, 1
  %1148 = mul i32 %1145, %1147
  %1149 = urem i32 %1148, 2
  %1150 = icmp eq i32 %1149, 0
  %1151 = icmp slt i32 %1146, 10
  %1152 = or i1 %1150, %1151
  br i1 %1152, label %originalBB253, label %originalBB253alteredBB

originalBB253:                                    ; preds = %1144, %originalBB253alteredBB
  %1153 = load i64, i64* %21, align 8, !dbg !2336
  %1154 = add i64 %1153, 1, !dbg !2336
  store i64 %1154, i64* %21, align 8, !dbg !2336
  %1155 = load i32, i32* @x.37
  %1156 = load i32, i32* @y.38
  %1157 = sub i32 %1155, 1
  %1158 = mul i32 %1155, %1157
  %1159 = urem i32 %1158, 2
  %1160 = icmp eq i32 %1159, 0
  %1161 = icmp slt i32 %1156, 10
  %1162 = or i1 %1160, %1161
  br i1 %1162, label %originalBBpart2262, label %originalBB253alteredBB

originalBBpart2262:                               ; preds = %originalBB253
  br label %1163, !dbg !2336

1163:                                             ; preds = %originalBBpart2262
  %1164 = load i32, i32* @x.37
  %1165 = load i32, i32* @y.38
  %1166 = sub i32 %1164, 1
  %1167 = mul i32 %1164, %1166
  %1168 = urem i32 %1167, 2
  %1169 = icmp eq i32 %1168, 0
  %1170 = icmp slt i32 %1165, 10
  %1171 = or i1 %1169, %1170
  br i1 %1171, label %originalBB264, label %originalBB264alteredBB

originalBB264:                                    ; preds = %1163, %originalBB264alteredBB
  %1172 = load i32, i32* @x.37
  %1173 = load i32, i32* @y.38
  %1174 = sub i32 %1172, 1
  %1175 = mul i32 %1172, %1174
  %1176 = urem i32 %1175, 2
  %1177 = icmp eq i32 %1176, 0
  %1178 = icmp slt i32 %1173, 10
  %1179 = or i1 %1177, %1178
  br i1 %1179, label %originalBBpart2266, label %originalBB264alteredBB

originalBBpart2266:                               ; preds = %originalBB264
  br label %1180, !dbg !2316

1180:                                             ; preds = %originalBBpart2266
  %1181 = load i32, i32* @x.37
  %1182 = load i32, i32* @y.38
  %1183 = sub i32 %1181, 1
  %1184 = mul i32 %1181, %1183
  %1185 = urem i32 %1184, 2
  %1186 = icmp eq i32 %1185, 0
  %1187 = icmp slt i32 %1182, 10
  %1188 = or i1 %1186, %1187
  br i1 %1188, label %originalBB268, label %originalBB268alteredBB

originalBB268:                                    ; preds = %1180, %originalBB268alteredBB
  %1189 = load i32, i32* %15, align 4, !dbg !2337
  %1190 = icmp ne i32 %1189, 2, !dbg !2339
  %1191 = load i32, i32* @x.37
  %1192 = load i32, i32* @y.38
  %1193 = sub i32 %1191, 1
  %1194 = mul i32 %1191, %1193
  %1195 = urem i32 %1194, 2
  %1196 = icmp eq i32 %1195, 0
  %1197 = icmp slt i32 %1192, 10
  %1198 = or i1 %1196, %1197
  br i1 %1198, label %originalBBpart2270, label %originalBB268alteredBB

originalBBpart2270:                               ; preds = %originalBB268
  br i1 %1190, label %1199, label %1421, !dbg !2340

1199:                                             ; preds = %originalBBpart2270
  %1200 = load i32, i32* @x.37
  %1201 = load i32, i32* @y.38
  %1202 = sub i32 %1200, 1
  %1203 = mul i32 %1200, %1202
  %1204 = urem i32 %1203, 2
  %1205 = icmp eq i32 %1204, 0
  %1206 = icmp slt i32 %1201, 10
  %1207 = or i1 %1205, %1206
  br i1 %1207, label %originalBB272, label %originalBB272alteredBB

originalBB272:                                    ; preds = %1199, %originalBB272alteredBB
  %1208 = load i64, i64* %20, align 8, !dbg !2341
  %1209 = add i64 %1208, 1, !dbg !2342
  %1210 = load i64, i64* %14, align 8, !dbg !2343
  %1211 = icmp ult i64 %1209, %1210, !dbg !2344
  %1212 = load i32, i32* @x.37
  %1213 = load i32, i32* @y.38
  %1214 = sub i32 %1212, 1
  %1215 = mul i32 %1212, %1214
  %1216 = urem i32 %1215, 2
  %1217 = icmp eq i32 %1216, 0
  %1218 = icmp slt i32 %1213, 10
  %1219 = or i1 %1217, %1218
  br i1 %1219, label %originalBBpart2278, label %originalBB272alteredBB

originalBBpart2278:                               ; preds = %originalBB272
  br i1 %1211, label %1220, label %1421, !dbg !2345

1220:                                             ; preds = %originalBBpart2278
  %1221 = load i32, i32* @x.37
  %1222 = load i32, i32* @y.38
  %1223 = sub i32 %1221, 1
  %1224 = mul i32 %1221, %1223
  %1225 = urem i32 %1224, 2
  %1226 = icmp eq i32 %1225, 0
  %1227 = icmp slt i32 %1222, 10
  %1228 = or i1 %1226, %1227
  br i1 %1228, label %originalBB280, label %originalBB280alteredBB

originalBB280:                                    ; preds = %1220, %originalBB280alteredBB
  %1229 = load i8*, i8** %13, align 8, !dbg !2346
  %1230 = load i64, i64* %20, align 8, !dbg !2347
  %1231 = add i64 %1230, 1, !dbg !2348
  %1232 = getelementptr inbounds i8, i8* %1229, i64 %1231, !dbg !2346
  %1233 = load i8, i8* %1232, align 1, !dbg !2346
  %1234 = sext i8 %1233 to i32, !dbg !2346
  %1235 = icmp sle i32 48, %1234, !dbg !2349
  %1236 = load i32, i32* @x.37
  %1237 = load i32, i32* @y.38
  %1238 = sub i32 %1236, 1
  %1239 = mul i32 %1236, %1238
  %1240 = urem i32 %1239, 2
  %1241 = icmp eq i32 %1240, 0
  %1242 = icmp slt i32 %1237, 10
  %1243 = or i1 %1241, %1242
  br i1 %1243, label %originalBBpart2285, label %originalBB280alteredBB

originalBBpart2285:                               ; preds = %originalBB280
  br i1 %1235, label %1244, label %1421, !dbg !2350

1244:                                             ; preds = %originalBBpart2285
  %1245 = load i32, i32* @x.37
  %1246 = load i32, i32* @y.38
  %1247 = sub i32 %1245, 1
  %1248 = mul i32 %1245, %1247
  %1249 = urem i32 %1248, 2
  %1250 = icmp eq i32 %1249, 0
  %1251 = icmp slt i32 %1246, 10
  %1252 = or i1 %1250, %1251
  br i1 %1252, label %originalBB287, label %originalBB287alteredBB

originalBB287:                                    ; preds = %1244, %originalBB287alteredBB
  %1253 = load i8*, i8** %13, align 8, !dbg !2351
  %1254 = load i64, i64* %20, align 8, !dbg !2352
  %1255 = add i64 %1254, 1, !dbg !2353
  %1256 = getelementptr inbounds i8, i8* %1253, i64 %1255, !dbg !2351
  %1257 = load i8, i8* %1256, align 1, !dbg !2351
  %1258 = sext i8 %1257 to i32, !dbg !2351
  %1259 = icmp sle i32 %1258, 57, !dbg !2354
  %1260 = load i32, i32* @x.37
  %1261 = load i32, i32* @y.38
  %1262 = sub i32 %1260, 1
  %1263 = mul i32 %1260, %1262
  %1264 = urem i32 %1263, 2
  %1265 = icmp eq i32 %1264, 0
  %1266 = icmp slt i32 %1261, 10
  %1267 = or i1 %1265, %1266
  br i1 %1267, label %originalBBpart2292, label %originalBB287alteredBB

originalBBpart2292:                               ; preds = %originalBB287
  br i1 %1259, label %1268, label %1421, !dbg !2355

1268:                                             ; preds = %originalBBpart2292
  %1269 = load i32, i32* @x.37
  %1270 = load i32, i32* @y.38
  %1271 = sub i32 %1269, 1
  %1272 = mul i32 %1269, %1271
  %1273 = urem i32 %1272, 2
  %1274 = icmp eq i32 %1273, 0
  %1275 = icmp slt i32 %1270, 10
  %1276 = or i1 %1274, %1275
  br i1 %1276, label %originalBB294, label %originalBB294alteredBB

originalBB294:                                    ; preds = %1268, %originalBB294alteredBB
  %1277 = load i32, i32* @x.37
  %1278 = load i32, i32* @y.38
  %1279 = sub i32 %1277, 1
  %1280 = mul i32 %1277, %1279
  %1281 = urem i32 %1280, 2
  %1282 = icmp eq i32 %1281, 0
  %1283 = icmp slt i32 %1278, 10
  %1284 = or i1 %1282, %1283
  br i1 %1284, label %originalBBpart2296, label %originalBB294alteredBB

originalBBpart2296:                               ; preds = %originalBB294
  br label %1285, !dbg !2356

1285:                                             ; preds = %originalBBpart2296
  %1286 = load i64, i64* %21, align 8, !dbg !2358
  %1287 = load i64, i64* %12, align 8, !dbg !2358
  %1288 = icmp ult i64 %1286, %1287, !dbg !2358
  br i1 %1288, label %1289, label %1309, !dbg !2361

1289:                                             ; preds = %1285
  %1290 = load i32, i32* @x.37
  %1291 = load i32, i32* @y.38
  %1292 = sub i32 %1290, 1
  %1293 = mul i32 %1290, %1292
  %1294 = urem i32 %1293, 2
  %1295 = icmp eq i32 %1294, 0
  %1296 = icmp slt i32 %1291, 10
  %1297 = or i1 %1295, %1296
  br i1 %1297, label %originalBB298, label %originalBB298alteredBB

originalBB298:                                    ; preds = %1289, %originalBB298alteredBB
  %1298 = load i8*, i8** %11, align 8, !dbg !2358
  %1299 = load i64, i64* %21, align 8, !dbg !2358
  %1300 = getelementptr inbounds i8, i8* %1298, i64 %1299, !dbg !2358
  store i8 48, i8* %1300, align 1, !dbg !2358
  %1301 = load i32, i32* @x.37
  %1302 = load i32, i32* @y.38
  %1303 = sub i32 %1301, 1
  %1304 = mul i32 %1301, %1303
  %1305 = urem i32 %1304, 2
  %1306 = icmp eq i32 %1305, 0
  %1307 = icmp slt i32 %1302, 10
  %1308 = or i1 %1306, %1307
  br i1 %1308, label %originalBBpart2300, label %originalBB298alteredBB

originalBBpart2300:                               ; preds = %originalBB298
  br label %1309, !dbg !2358

1309:                                             ; preds = %originalBBpart2300, %1285
  %1310 = load i32, i32* @x.37
  %1311 = load i32, i32* @y.38
  %1312 = sub i32 %1310, 1
  %1313 = mul i32 %1310, %1312
  %1314 = urem i32 %1313, 2
  %1315 = icmp eq i32 %1314, 0
  %1316 = icmp slt i32 %1311, 10
  %1317 = or i1 %1315, %1316
  br i1 %1317, label %originalBB302, label %originalBB302alteredBB

originalBB302:                                    ; preds = %1309, %originalBB302alteredBB
  %1318 = load i64, i64* %21, align 8, !dbg !2361
  %1319 = add i64 %1318, 1, !dbg !2361
  store i64 %1319, i64* %21, align 8, !dbg !2361
  %1320 = load i32, i32* @x.37
  %1321 = load i32, i32* @y.38
  %1322 = sub i32 %1320, 1
  %1323 = mul i32 %1320, %1322
  %1324 = urem i32 %1323, 2
  %1325 = icmp eq i32 %1324, 0
  %1326 = icmp slt i32 %1321, 10
  %1327 = or i1 %1325, %1326
  br i1 %1327, label %originalBBpart2310, label %originalBB302alteredBB

originalBBpart2310:                               ; preds = %originalBB302
  br label %1328, !dbg !2361

1328:                                             ; preds = %originalBBpart2310
  %1329 = load i32, i32* @x.37
  %1330 = load i32, i32* @y.38
  %1331 = sub i32 %1329, 1
  %1332 = mul i32 %1329, %1331
  %1333 = urem i32 %1332, 2
  %1334 = icmp eq i32 %1333, 0
  %1335 = icmp slt i32 %1330, 10
  %1336 = or i1 %1334, %1335
  br i1 %1336, label %originalBB312, label %originalBB312alteredBB

originalBB312:                                    ; preds = %1328, %originalBB312alteredBB
  %1337 = load i32, i32* @x.37
  %1338 = load i32, i32* @y.38
  %1339 = sub i32 %1337, 1
  %1340 = mul i32 %1337, %1339
  %1341 = urem i32 %1340, 2
  %1342 = icmp eq i32 %1341, 0
  %1343 = icmp slt i32 %1338, 10
  %1344 = or i1 %1342, %1343
  br i1 %1344, label %originalBBpart2314, label %originalBB312alteredBB

originalBBpart2314:                               ; preds = %originalBB312
  br label %1345, !dbg !2362

1345:                                             ; preds = %originalBBpart2314
  %1346 = load i32, i32* @x.37
  %1347 = load i32, i32* @y.38
  %1348 = sub i32 %1346, 1
  %1349 = mul i32 %1346, %1348
  %1350 = urem i32 %1349, 2
  %1351 = icmp eq i32 %1350, 0
  %1352 = icmp slt i32 %1347, 10
  %1353 = or i1 %1351, %1352
  br i1 %1353, label %originalBB316, label %originalBB316alteredBB

originalBB316:                                    ; preds = %1345, %originalBB316alteredBB
  %1354 = load i64, i64* %21, align 8, !dbg !2363
  %1355 = load i64, i64* %12, align 8, !dbg !2363
  %1356 = icmp ult i64 %1354, %1355, !dbg !2363
  %1357 = load i32, i32* @x.37
  %1358 = load i32, i32* @y.38
  %1359 = sub i32 %1357, 1
  %1360 = mul i32 %1357, %1359
  %1361 = urem i32 %1360, 2
  %1362 = icmp eq i32 %1361, 0
  %1363 = icmp slt i32 %1358, 10
  %1364 = or i1 %1362, %1363
  br i1 %1364, label %originalBBpart2318, label %originalBB316alteredBB

originalBBpart2318:                               ; preds = %originalBB316
  br i1 %1356, label %1365, label %1385, !dbg !2366

1365:                                             ; preds = %originalBBpart2318
  %1366 = load i32, i32* @x.37
  %1367 = load i32, i32* @y.38
  %1368 = sub i32 %1366, 1
  %1369 = mul i32 %1366, %1368
  %1370 = urem i32 %1369, 2
  %1371 = icmp eq i32 %1370, 0
  %1372 = icmp slt i32 %1367, 10
  %1373 = or i1 %1371, %1372
  br i1 %1373, label %originalBB320, label %originalBB320alteredBB

originalBB320:                                    ; preds = %1365, %originalBB320alteredBB
  %1374 = load i8*, i8** %11, align 8, !dbg !2363
  %1375 = load i64, i64* %21, align 8, !dbg !2363
  %1376 = getelementptr inbounds i8, i8* %1374, i64 %1375, !dbg !2363
  store i8 48, i8* %1376, align 1, !dbg !2363
  %1377 = load i32, i32* @x.37
  %1378 = load i32, i32* @y.38
  %1379 = sub i32 %1377, 1
  %1380 = mul i32 %1377, %1379
  %1381 = urem i32 %1380, 2
  %1382 = icmp eq i32 %1381, 0
  %1383 = icmp slt i32 %1378, 10
  %1384 = or i1 %1382, %1383
  br i1 %1384, label %originalBBpart2322, label %originalBB320alteredBB

originalBBpart2322:                               ; preds = %originalBB320
  br label %1385, !dbg !2363

1385:                                             ; preds = %originalBBpart2322, %originalBBpart2318
  %1386 = load i32, i32* @x.37
  %1387 = load i32, i32* @y.38
  %1388 = sub i32 %1386, 1
  %1389 = mul i32 %1386, %1388
  %1390 = urem i32 %1389, 2
  %1391 = icmp eq i32 %1390, 0
  %1392 = icmp slt i32 %1387, 10
  %1393 = or i1 %1391, %1392
  br i1 %1393, label %originalBB324, label %originalBB324alteredBB

originalBB324:                                    ; preds = %1385, %originalBB324alteredBB
  %1394 = load i64, i64* %21, align 8, !dbg !2366
  %1395 = add i64 %1394, 1, !dbg !2366
  store i64 %1395, i64* %21, align 8, !dbg !2366
  %1396 = load i32, i32* @x.37
  %1397 = load i32, i32* @y.38
  %1398 = sub i32 %1396, 1
  %1399 = mul i32 %1396, %1398
  %1400 = urem i32 %1399, 2
  %1401 = icmp eq i32 %1400, 0
  %1402 = icmp slt i32 %1397, 10
  %1403 = or i1 %1401, %1402
  br i1 %1403, label %originalBBpart2335, label %originalBB324alteredBB

originalBBpart2335:                               ; preds = %originalBB324
  br label %1404, !dbg !2366

1404:                                             ; preds = %originalBBpart2335
  %1405 = load i32, i32* @x.37
  %1406 = load i32, i32* @y.38
  %1407 = sub i32 %1405, 1
  %1408 = mul i32 %1405, %1407
  %1409 = urem i32 %1408, 2
  %1410 = icmp eq i32 %1409, 0
  %1411 = icmp slt i32 %1406, 10
  %1412 = or i1 %1410, %1411
  br i1 %1412, label %originalBB337, label %originalBB337alteredBB

originalBB337:                                    ; preds = %1404, %originalBB337alteredBB
  %1413 = load i32, i32* @x.37
  %1414 = load i32, i32* @y.38
  %1415 = sub i32 %1413, 1
  %1416 = mul i32 %1413, %1415
  %1417 = urem i32 %1416, 2
  %1418 = icmp eq i32 %1417, 0
  %1419 = icmp slt i32 %1414, 10
  %1420 = or i1 %1418, %1419
  br i1 %1420, label %originalBBpart2339, label %originalBB337alteredBB

originalBBpart2339:                               ; preds = %originalBB337
  br label %1421, !dbg !2367

1421:                                             ; preds = %originalBBpart2339, %originalBBpart2292, %originalBBpart2285, %originalBBpart2278, %originalBBpart2270
  %1422 = load i32, i32* @x.37
  %1423 = load i32, i32* @y.38
  %1424 = sub i32 %1422, 1
  %1425 = mul i32 %1422, %1424
  %1426 = urem i32 %1425, 2
  %1427 = icmp eq i32 %1426, 0
  %1428 = icmp slt i32 %1423, 10
  %1429 = or i1 %1427, %1428
  br i1 %1429, label %originalBB341, label %originalBB341alteredBB

originalBB341:                                    ; preds = %1421, %originalBB341alteredBB
  store i8 48, i8* %31, align 1, !dbg !2368
  %1430 = load i32, i32* @x.37
  %1431 = load i32, i32* @y.38
  %1432 = sub i32 %1430, 1
  %1433 = mul i32 %1430, %1432
  %1434 = urem i32 %1433, 2
  %1435 = icmp eq i32 %1434, 0
  %1436 = icmp slt i32 %1431, 10
  %1437 = or i1 %1435, %1436
  br i1 %1437, label %originalBBpart2343, label %originalBB341alteredBB

originalBBpart2343:                               ; preds = %originalBB341
  br label %1492, !dbg !2369

1438:                                             ; preds = %originalBBpart2199
  %1439 = load i32, i32* @x.37
  %1440 = load i32, i32* @y.38
  %1441 = sub i32 %1439, 1
  %1442 = mul i32 %1439, %1441
  %1443 = urem i32 %1442, 2
  %1444 = icmp eq i32 %1443, 0
  %1445 = icmp slt i32 %1440, 10
  %1446 = or i1 %1444, %1445
  br i1 %1446, label %originalBB345, label %originalBB345alteredBB

originalBB345:                                    ; preds = %1438, %originalBB345alteredBB
  %1447 = load i32, i32* %16, align 4, !dbg !2370
  %1448 = and i32 %1447, 1, !dbg !2372
  %1449 = icmp ne i32 %1448, 0, !dbg !2372
  %1450 = load i32, i32* @x.37
  %1451 = load i32, i32* @y.38
  %1452 = sub i32 %1450, 1
  %1453 = mul i32 %1450, %1452
  %1454 = urem i32 %1453, 2
  %1455 = icmp eq i32 %1454, 0
  %1456 = icmp slt i32 %1451, 10
  %1457 = or i1 %1455, %1456
  br i1 %1457, label %originalBBpart2349, label %originalBB345alteredBB

originalBBpart2349:                               ; preds = %originalBB345
  br i1 %1449, label %1458, label %1475, !dbg !2373

1458:                                             ; preds = %originalBBpart2349
  %1459 = load i32, i32* @x.37
  %1460 = load i32, i32* @y.38
  %1461 = sub i32 %1459, 1
  %1462 = mul i32 %1459, %1461
  %1463 = urem i32 %1462, 2
  %1464 = icmp eq i32 %1463, 0
  %1465 = icmp slt i32 %1460, 10
  %1466 = or i1 %1464, %1465
  br i1 %1466, label %originalBB351, label %originalBB351alteredBB

originalBB351:                                    ; preds = %1458, %originalBB351alteredBB
  %1467 = load i32, i32* @x.37
  %1468 = load i32, i32* @y.38
  %1469 = sub i32 %1467, 1
  %1470 = mul i32 %1467, %1469
  %1471 = urem i32 %1470, 2
  %1472 = icmp eq i32 %1471, 0
  %1473 = icmp slt i32 %1468, 10
  %1474 = or i1 %1472, %1473
  br i1 %1474, label %originalBBpart2353, label %originalBB351alteredBB

originalBBpart2353:                               ; preds = %originalBB351
  br label %5081, !dbg !2374

1475:                                             ; preds = %originalBBpart2349
  %1476 = load i32, i32* @x.37
  %1477 = load i32, i32* @y.38
  %1478 = sub i32 %1476, 1
  %1479 = mul i32 %1476, %1478
  %1480 = urem i32 %1479, 2
  %1481 = icmp eq i32 %1480, 0
  %1482 = icmp slt i32 %1477, 10
  %1483 = or i1 %1481, %1482
  br i1 %1483, label %originalBB355, label %originalBB355alteredBB

originalBB355:                                    ; preds = %1475, %originalBB355alteredBB
  %1484 = load i32, i32* @x.37
  %1485 = load i32, i32* @y.38
  %1486 = sub i32 %1484, 1
  %1487 = mul i32 %1484, %1486
  %1488 = urem i32 %1487, 2
  %1489 = icmp eq i32 %1488, 0
  %1490 = icmp slt i32 %1485, 10
  %1491 = or i1 %1489, %1490
  br i1 %1491, label %originalBBpart2357, label %originalBB355alteredBB

originalBBpart2357:                               ; preds = %originalBB355
  br label %1492

1492:                                             ; preds = %originalBBpart2357, %originalBBpart2343
  br label %4345, !dbg !2375

1493:                                             ; preds = %originalBBpart2195
  %1494 = load i32, i32* @x.37
  %1495 = load i32, i32* @y.38
  %1496 = sub i32 %1494, 1
  %1497 = mul i32 %1494, %1496
  %1498 = urem i32 %1497, 2
  %1499 = icmp eq i32 %1498, 0
  %1500 = icmp slt i32 %1495, 10
  %1501 = or i1 %1499, %1500
  br i1 %1501, label %originalBB359, label %originalBB359alteredBB

originalBB359:                                    ; preds = %1493, %originalBB359alteredBB
  %1502 = load i32, i32* %15, align 4, !dbg !2376
  %1503 = load i32, i32* @x.37
  %1504 = load i32, i32* @y.38
  %1505 = sub i32 %1503, 1
  %1506 = mul i32 %1503, %1505
  %1507 = urem i32 %1506, 2
  %1508 = icmp eq i32 %1507, 0
  %1509 = icmp slt i32 %1504, 10
  %1510 = or i1 %1508, %1509
  br i1 %1510, label %originalBBpart2361, label %originalBB359alteredBB

originalBBpart2361:                               ; preds = %originalBB359
  switch i32 %1502, label %1875 [
    i32 2, label %1511
    i32 5, label %1548
  ], !dbg !2377

1511:                                             ; preds = %originalBBpart2361
  %1512 = load i8, i8* %27, align 1, !dbg !2378
  %1513 = trunc i8 %1512 to i1, !dbg !2378
  br i1 %1513, label %1514, label %1531, !dbg !2381

1514:                                             ; preds = %1511
  %1515 = load i32, i32* @x.37
  %1516 = load i32, i32* @y.38
  %1517 = sub i32 %1515, 1
  %1518 = mul i32 %1515, %1517
  %1519 = urem i32 %1518, 2
  %1520 = icmp eq i32 %1519, 0
  %1521 = icmp slt i32 %1516, 10
  %1522 = or i1 %1520, %1521
  br i1 %1522, label %originalBB363, label %originalBB363alteredBB

originalBB363:                                    ; preds = %1514, %originalBB363alteredBB
  %1523 = load i32, i32* @x.37
  %1524 = load i32, i32* @y.38
  %1525 = sub i32 %1523, 1
  %1526 = mul i32 %1523, %1525
  %1527 = urem i32 %1526, 2
  %1528 = icmp eq i32 %1527, 0
  %1529 = icmp slt i32 %1524, 10
  %1530 = or i1 %1528, %1529
  br i1 %1530, label %originalBBpart2365, label %originalBB363alteredBB

originalBBpart2365:                               ; preds = %originalBB363
  br label %5470, !dbg !2382

1531:                                             ; preds = %1511
  %1532 = load i32, i32* @x.37
  %1533 = load i32, i32* @y.38
  %1534 = sub i32 %1532, 1
  %1535 = mul i32 %1532, %1534
  %1536 = urem i32 %1535, 2
  %1537 = icmp eq i32 %1536, 0
  %1538 = icmp slt i32 %1533, 10
  %1539 = or i1 %1537, %1538
  br i1 %1539, label %originalBB367, label %originalBB367alteredBB

originalBB367:                                    ; preds = %1531, %originalBB367alteredBB
  %1540 = load i32, i32* @x.37
  %1541 = load i32, i32* @y.38
  %1542 = sub i32 %1540, 1
  %1543 = mul i32 %1540, %1542
  %1544 = urem i32 %1543, 2
  %1545 = icmp eq i32 %1544, 0
  %1546 = icmp slt i32 %1541, 10
  %1547 = or i1 %1545, %1546
  br i1 %1547, label %originalBBpart2369, label %originalBB367alteredBB

originalBBpart2369:                               ; preds = %originalBB367
  br label %1876, !dbg !2383

1548:                                             ; preds = %originalBBpart2361
  %1549 = load i32, i32* @x.37
  %1550 = load i32, i32* @y.38
  %1551 = sub i32 %1549, 1
  %1552 = mul i32 %1549, %1551
  %1553 = urem i32 %1552, 2
  %1554 = icmp eq i32 %1553, 0
  %1555 = icmp slt i32 %1550, 10
  %1556 = or i1 %1554, %1555
  br i1 %1556, label %originalBB371, label %originalBB371alteredBB

originalBB371:                                    ; preds = %1548, %originalBB371alteredBB
  %1557 = load i32, i32* %16, align 4, !dbg !2384
  %1558 = and i32 %1557, 4, !dbg !2386
  %1559 = icmp ne i32 %1558, 0, !dbg !2386
  %1560 = load i32, i32* @x.37
  %1561 = load i32, i32* @y.38
  %1562 = sub i32 %1560, 1
  %1563 = mul i32 %1560, %1562
  %1564 = urem i32 %1563, 2
  %1565 = icmp eq i32 %1564, 0
  %1566 = icmp slt i32 %1561, 10
  %1567 = or i1 %1565, %1566
  br i1 %1567, label %originalBBpart2382, label %originalBB371alteredBB

originalBBpart2382:                               ; preds = %originalBB371
  br i1 %1559, label %1568, label %1858, !dbg !2387

1568:                                             ; preds = %originalBBpart2382
  %1569 = load i64, i64* %20, align 8, !dbg !2388
  %1570 = add i64 %1569, 2, !dbg !2389
  %1571 = load i64, i64* %14, align 8, !dbg !2390
  %1572 = icmp ult i64 %1570, %1571, !dbg !2391
  br i1 %1572, label %1573, label %1858, !dbg !2392

1573:                                             ; preds = %1568
  %1574 = load i32, i32* @x.37
  %1575 = load i32, i32* @y.38
  %1576 = sub i32 %1574, 1
  %1577 = mul i32 %1574, %1576
  %1578 = urem i32 %1577, 2
  %1579 = icmp eq i32 %1578, 0
  %1580 = icmp slt i32 %1575, 10
  %1581 = or i1 %1579, %1580
  br i1 %1581, label %originalBB384, label %originalBB384alteredBB

originalBB384:                                    ; preds = %1573, %originalBB384alteredBB
  %1582 = load i8*, i8** %13, align 8, !dbg !2393
  %1583 = load i64, i64* %20, align 8, !dbg !2394
  %1584 = add i64 %1583, 1, !dbg !2395
  %1585 = getelementptr inbounds i8, i8* %1582, i64 %1584, !dbg !2393
  %1586 = load i8, i8* %1585, align 1, !dbg !2393
  %1587 = sext i8 %1586 to i32, !dbg !2393
  %1588 = icmp eq i32 %1587, 63, !dbg !2396
  %1589 = load i32, i32* @x.37
  %1590 = load i32, i32* @y.38
  %1591 = sub i32 %1589, 1
  %1592 = mul i32 %1589, %1591
  %1593 = urem i32 %1592, 2
  %1594 = icmp eq i32 %1593, 0
  %1595 = icmp slt i32 %1590, 10
  %1596 = or i1 %1594, %1595
  br i1 %1596, label %originalBBpart2392, label %originalBB384alteredBB

originalBBpart2392:                               ; preds = %originalBB384
  br i1 %1588, label %1597, label %1858, !dbg !2397

1597:                                             ; preds = %originalBBpart2392
  %1598 = load i32, i32* @x.37
  %1599 = load i32, i32* @y.38
  %1600 = sub i32 %1598, 1
  %1601 = mul i32 %1598, %1600
  %1602 = urem i32 %1601, 2
  %1603 = icmp eq i32 %1602, 0
  %1604 = icmp slt i32 %1599, 10
  %1605 = or i1 %1603, %1604
  br i1 %1605, label %originalBB394, label %originalBB394alteredBB

originalBB394:                                    ; preds = %1597, %originalBB394alteredBB
  %1606 = load i8*, i8** %13, align 8, !dbg !2398
  %1607 = load i64, i64* %20, align 8, !dbg !2399
  %1608 = add i64 %1607, 2, !dbg !2400
  %1609 = getelementptr inbounds i8, i8* %1606, i64 %1608, !dbg !2398
  %1610 = load i8, i8* %1609, align 1, !dbg !2398
  %1611 = sext i8 %1610 to i32, !dbg !2398
  %1612 = load i32, i32* @x.37
  %1613 = load i32, i32* @y.38
  %1614 = sub i32 %1612, 1
  %1615 = mul i32 %1612, %1614
  %1616 = urem i32 %1615, 2
  %1617 = icmp eq i32 %1616, 0
  %1618 = icmp slt i32 %1613, 10
  %1619 = or i1 %1617, %1618
  br i1 %1619, label %originalBBpart2406, label %originalBB394alteredBB

originalBBpart2406:                               ; preds = %originalBB394
  switch i32 %1611, label %1840 [
    i32 33, label %1620
    i32 39, label %1620
    i32 40, label %1620
    i32 41, label %1620
    i32 45, label %1620
    i32 47, label %1620
    i32 60, label %1620
    i32 61, label %1620
    i32 62, label %1620
  ], !dbg !2401

1620:                                             ; preds = %originalBBpart2406, %originalBBpart2406, %originalBBpart2406, %originalBBpart2406, %originalBBpart2406, %originalBBpart2406, %originalBBpart2406, %originalBBpart2406, %originalBBpart2406
  %1621 = load i32, i32* @x.37
  %1622 = load i32, i32* @y.38
  %1623 = sub i32 %1621, 1
  %1624 = mul i32 %1621, %1623
  %1625 = urem i32 %1624, 2
  %1626 = icmp eq i32 %1625, 0
  %1627 = icmp slt i32 %1622, 10
  %1628 = or i1 %1626, %1627
  br i1 %1628, label %originalBB408, label %originalBB408alteredBB

originalBB408:                                    ; preds = %1620, %originalBB408alteredBB
  %1629 = load i8, i8* %27, align 1, !dbg !2402
  %1630 = trunc i8 %1629 to i1, !dbg !2402
  %1631 = load i32, i32* @x.37
  %1632 = load i32, i32* @y.38
  %1633 = sub i32 %1631, 1
  %1634 = mul i32 %1631, %1633
  %1635 = urem i32 %1634, 2
  %1636 = icmp eq i32 %1635, 0
  %1637 = icmp slt i32 %1632, 10
  %1638 = or i1 %1636, %1637
  br i1 %1638, label %originalBBpart2410, label %originalBB408alteredBB

originalBBpart2410:                               ; preds = %originalBB408
  br i1 %1630, label %1639, label %1640, !dbg !2405

1639:                                             ; preds = %originalBBpart2410
  br label %5470, !dbg !2406

1640:                                             ; preds = %originalBBpart2410
  %1641 = load i8*, i8** %13, align 8, !dbg !2407
  %1642 = load i64, i64* %20, align 8, !dbg !2408
  %1643 = add i64 %1642, 2, !dbg !2409
  %1644 = getelementptr inbounds i8, i8* %1641, i64 %1643, !dbg !2407
  %1645 = load i8, i8* %1644, align 1, !dbg !2407
  store i8 %1645, i8* %31, align 1, !dbg !2410
  %1646 = load i64, i64* %20, align 8, !dbg !2411
  %1647 = add i64 %1646, 2, !dbg !2411
  store i64 %1647, i64* %20, align 8, !dbg !2411
  br label %1648, !dbg !2412

1648:                                             ; preds = %1640
  %1649 = load i64, i64* %21, align 8, !dbg !2413
  %1650 = load i64, i64* %12, align 8, !dbg !2413
  %1651 = icmp ult i64 %1649, %1650, !dbg !2413
  br i1 %1651, label %1652, label %1672, !dbg !2416

1652:                                             ; preds = %1648
  %1653 = load i32, i32* @x.37
  %1654 = load i32, i32* @y.38
  %1655 = sub i32 %1653, 1
  %1656 = mul i32 %1653, %1655
  %1657 = urem i32 %1656, 2
  %1658 = icmp eq i32 %1657, 0
  %1659 = icmp slt i32 %1654, 10
  %1660 = or i1 %1658, %1659
  br i1 %1660, label %originalBB412, label %originalBB412alteredBB

originalBB412:                                    ; preds = %1652, %originalBB412alteredBB
  %1661 = load i8*, i8** %11, align 8, !dbg !2413
  %1662 = load i64, i64* %21, align 8, !dbg !2413
  %1663 = getelementptr inbounds i8, i8* %1661, i64 %1662, !dbg !2413
  store i8 63, i8* %1663, align 1, !dbg !2413
  %1664 = load i32, i32* @x.37
  %1665 = load i32, i32* @y.38
  %1666 = sub i32 %1664, 1
  %1667 = mul i32 %1664, %1666
  %1668 = urem i32 %1667, 2
  %1669 = icmp eq i32 %1668, 0
  %1670 = icmp slt i32 %1665, 10
  %1671 = or i1 %1669, %1670
  br i1 %1671, label %originalBBpart2414, label %originalBB412alteredBB

originalBBpart2414:                               ; preds = %originalBB412
  br label %1672, !dbg !2413

1672:                                             ; preds = %originalBBpart2414, %1648
  %1673 = load i32, i32* @x.37
  %1674 = load i32, i32* @y.38
  %1675 = sub i32 %1673, 1
  %1676 = mul i32 %1673, %1675
  %1677 = urem i32 %1676, 2
  %1678 = icmp eq i32 %1677, 0
  %1679 = icmp slt i32 %1674, 10
  %1680 = or i1 %1678, %1679
  br i1 %1680, label %originalBB416, label %originalBB416alteredBB

originalBB416:                                    ; preds = %1672, %originalBB416alteredBB
  %1681 = load i64, i64* %21, align 8, !dbg !2416
  %1682 = add i64 %1681, 1, !dbg !2416
  store i64 %1682, i64* %21, align 8, !dbg !2416
  %1683 = load i32, i32* @x.37
  %1684 = load i32, i32* @y.38
  %1685 = sub i32 %1683, 1
  %1686 = mul i32 %1683, %1685
  %1687 = urem i32 %1686, 2
  %1688 = icmp eq i32 %1687, 0
  %1689 = icmp slt i32 %1684, 10
  %1690 = or i1 %1688, %1689
  br i1 %1690, label %originalBBpart2425, label %originalBB416alteredBB

originalBBpart2425:                               ; preds = %originalBB416
  br label %1691, !dbg !2416

1691:                                             ; preds = %originalBBpart2425
  %1692 = load i32, i32* @x.37
  %1693 = load i32, i32* @y.38
  %1694 = sub i32 %1692, 1
  %1695 = mul i32 %1692, %1694
  %1696 = urem i32 %1695, 2
  %1697 = icmp eq i32 %1696, 0
  %1698 = icmp slt i32 %1693, 10
  %1699 = or i1 %1697, %1698
  br i1 %1699, label %originalBB427, label %originalBB427alteredBB

originalBB427:                                    ; preds = %1691, %originalBB427alteredBB
  %1700 = load i32, i32* @x.37
  %1701 = load i32, i32* @y.38
  %1702 = sub i32 %1700, 1
  %1703 = mul i32 %1700, %1702
  %1704 = urem i32 %1703, 2
  %1705 = icmp eq i32 %1704, 0
  %1706 = icmp slt i32 %1701, 10
  %1707 = or i1 %1705, %1706
  br i1 %1707, label %originalBBpart2429, label %originalBB427alteredBB

originalBBpart2429:                               ; preds = %originalBB427
  br label %1708, !dbg !2417

1708:                                             ; preds = %originalBBpart2429
  %1709 = load i64, i64* %21, align 8, !dbg !2418
  %1710 = load i64, i64* %12, align 8, !dbg !2418
  %1711 = icmp ult i64 %1709, %1710, !dbg !2418
  br i1 %1711, label %1712, label %1732, !dbg !2421

1712:                                             ; preds = %1708
  %1713 = load i32, i32* @x.37
  %1714 = load i32, i32* @y.38
  %1715 = sub i32 %1713, 1
  %1716 = mul i32 %1713, %1715
  %1717 = urem i32 %1716, 2
  %1718 = icmp eq i32 %1717, 0
  %1719 = icmp slt i32 %1714, 10
  %1720 = or i1 %1718, %1719
  br i1 %1720, label %originalBB431, label %originalBB431alteredBB

originalBB431:                                    ; preds = %1712, %originalBB431alteredBB
  %1721 = load i8*, i8** %11, align 8, !dbg !2418
  %1722 = load i64, i64* %21, align 8, !dbg !2418
  %1723 = getelementptr inbounds i8, i8* %1721, i64 %1722, !dbg !2418
  store i8 34, i8* %1723, align 1, !dbg !2418
  %1724 = load i32, i32* @x.37
  %1725 = load i32, i32* @y.38
  %1726 = sub i32 %1724, 1
  %1727 = mul i32 %1724, %1726
  %1728 = urem i32 %1727, 2
  %1729 = icmp eq i32 %1728, 0
  %1730 = icmp slt i32 %1725, 10
  %1731 = or i1 %1729, %1730
  br i1 %1731, label %originalBBpart2433, label %originalBB431alteredBB

originalBBpart2433:                               ; preds = %originalBB431
  br label %1732, !dbg !2418

1732:                                             ; preds = %originalBBpart2433, %1708
  %1733 = load i32, i32* @x.37
  %1734 = load i32, i32* @y.38
  %1735 = sub i32 %1733, 1
  %1736 = mul i32 %1733, %1735
  %1737 = urem i32 %1736, 2
  %1738 = icmp eq i32 %1737, 0
  %1739 = icmp slt i32 %1734, 10
  %1740 = or i1 %1738, %1739
  br i1 %1740, label %originalBB435, label %originalBB435alteredBB

originalBB435:                                    ; preds = %1732, %originalBB435alteredBB
  %1741 = load i64, i64* %21, align 8, !dbg !2421
  %1742 = add i64 %1741, 1, !dbg !2421
  store i64 %1742, i64* %21, align 8, !dbg !2421
  %1743 = load i32, i32* @x.37
  %1744 = load i32, i32* @y.38
  %1745 = sub i32 %1743, 1
  %1746 = mul i32 %1743, %1745
  %1747 = urem i32 %1746, 2
  %1748 = icmp eq i32 %1747, 0
  %1749 = icmp slt i32 %1744, 10
  %1750 = or i1 %1748, %1749
  br i1 %1750, label %originalBBpart2437, label %originalBB435alteredBB

originalBBpart2437:                               ; preds = %originalBB435
  br label %1751, !dbg !2421

1751:                                             ; preds = %originalBBpart2437
  %1752 = load i32, i32* @x.37
  %1753 = load i32, i32* @y.38
  %1754 = sub i32 %1752, 1
  %1755 = mul i32 %1752, %1754
  %1756 = urem i32 %1755, 2
  %1757 = icmp eq i32 %1756, 0
  %1758 = icmp slt i32 %1753, 10
  %1759 = or i1 %1757, %1758
  br i1 %1759, label %originalBB439, label %originalBB439alteredBB

originalBB439:                                    ; preds = %1751, %originalBB439alteredBB
  %1760 = load i32, i32* @x.37
  %1761 = load i32, i32* @y.38
  %1762 = sub i32 %1760, 1
  %1763 = mul i32 %1760, %1762
  %1764 = urem i32 %1763, 2
  %1765 = icmp eq i32 %1764, 0
  %1766 = icmp slt i32 %1761, 10
  %1767 = or i1 %1765, %1766
  br i1 %1767, label %originalBBpart2441, label %originalBB439alteredBB

originalBBpart2441:                               ; preds = %originalBB439
  br label %1768, !dbg !2422

1768:                                             ; preds = %originalBBpart2441
  %1769 = load i32, i32* @x.37
  %1770 = load i32, i32* @y.38
  %1771 = sub i32 %1769, 1
  %1772 = mul i32 %1769, %1771
  %1773 = urem i32 %1772, 2
  %1774 = icmp eq i32 %1773, 0
  %1775 = icmp slt i32 %1770, 10
  %1776 = or i1 %1774, %1775
  br i1 %1776, label %originalBB443, label %originalBB443alteredBB

originalBB443:                                    ; preds = %1768, %originalBB443alteredBB
  %1777 = load i64, i64* %21, align 8, !dbg !2423
  %1778 = load i64, i64* %12, align 8, !dbg !2423
  %1779 = icmp ult i64 %1777, %1778, !dbg !2423
  %1780 = load i32, i32* @x.37
  %1781 = load i32, i32* @y.38
  %1782 = sub i32 %1780, 1
  %1783 = mul i32 %1780, %1782
  %1784 = urem i32 %1783, 2
  %1785 = icmp eq i32 %1784, 0
  %1786 = icmp slt i32 %1781, 10
  %1787 = or i1 %1785, %1786
  br i1 %1787, label %originalBBpart2445, label %originalBB443alteredBB

originalBBpart2445:                               ; preds = %originalBB443
  br i1 %1779, label %1788, label %1792, !dbg !2426

1788:                                             ; preds = %originalBBpart2445
  %1789 = load i8*, i8** %11, align 8, !dbg !2423
  %1790 = load i64, i64* %21, align 8, !dbg !2423
  %1791 = getelementptr inbounds i8, i8* %1789, i64 %1790, !dbg !2423
  store i8 34, i8* %1791, align 1, !dbg !2423
  br label %1792, !dbg !2423

1792:                                             ; preds = %1788, %originalBBpart2445
  %1793 = load i64, i64* %21, align 8, !dbg !2426
  %1794 = add i64 %1793, 1, !dbg !2426
  store i64 %1794, i64* %21, align 8, !dbg !2426
  br label %1795, !dbg !2426

1795:                                             ; preds = %1792
  br label %1796, !dbg !2427

1796:                                             ; preds = %1795
  %1797 = load i32, i32* @x.37
  %1798 = load i32, i32* @y.38
  %1799 = sub i32 %1797, 1
  %1800 = mul i32 %1797, %1799
  %1801 = urem i32 %1800, 2
  %1802 = icmp eq i32 %1801, 0
  %1803 = icmp slt i32 %1798, 10
  %1804 = or i1 %1802, %1803
  br i1 %1804, label %originalBB447, label %originalBB447alteredBB

originalBB447:                                    ; preds = %1796, %originalBB447alteredBB
  %1805 = load i64, i64* %21, align 8, !dbg !2428
  %1806 = load i64, i64* %12, align 8, !dbg !2428
  %1807 = icmp ult i64 %1805, %1806, !dbg !2428
  %1808 = load i32, i32* @x.37
  %1809 = load i32, i32* @y.38
  %1810 = sub i32 %1808, 1
  %1811 = mul i32 %1808, %1810
  %1812 = urem i32 %1811, 2
  %1813 = icmp eq i32 %1812, 0
  %1814 = icmp slt i32 %1809, 10
  %1815 = or i1 %1813, %1814
  br i1 %1815, label %originalBBpart2449, label %originalBB447alteredBB

originalBBpart2449:                               ; preds = %originalBB447
  br i1 %1807, label %1816, label %1836, !dbg !2431

1816:                                             ; preds = %originalBBpart2449
  %1817 = load i32, i32* @x.37
  %1818 = load i32, i32* @y.38
  %1819 = sub i32 %1817, 1
  %1820 = mul i32 %1817, %1819
  %1821 = urem i32 %1820, 2
  %1822 = icmp eq i32 %1821, 0
  %1823 = icmp slt i32 %1818, 10
  %1824 = or i1 %1822, %1823
  br i1 %1824, label %originalBB451, label %originalBB451alteredBB

originalBB451:                                    ; preds = %1816, %originalBB451alteredBB
  %1825 = load i8*, i8** %11, align 8, !dbg !2428
  %1826 = load i64, i64* %21, align 8, !dbg !2428
  %1827 = getelementptr inbounds i8, i8* %1825, i64 %1826, !dbg !2428
  store i8 63, i8* %1827, align 1, !dbg !2428
  %1828 = load i32, i32* @x.37
  %1829 = load i32, i32* @y.38
  %1830 = sub i32 %1828, 1
  %1831 = mul i32 %1828, %1830
  %1832 = urem i32 %1831, 2
  %1833 = icmp eq i32 %1832, 0
  %1834 = icmp slt i32 %1829, 10
  %1835 = or i1 %1833, %1834
  br i1 %1835, label %originalBBpart2453, label %originalBB451alteredBB

originalBBpart2453:                               ; preds = %originalBB451
  br label %1836, !dbg !2428

1836:                                             ; preds = %originalBBpart2453, %originalBBpart2449
  %1837 = load i64, i64* %21, align 8, !dbg !2431
  %1838 = add i64 %1837, 1, !dbg !2431
  store i64 %1838, i64* %21, align 8, !dbg !2431
  br label %1839, !dbg !2431

1839:                                             ; preds = %1836
  br label %1841, !dbg !2432

1840:                                             ; preds = %originalBBpart2406
  br label %1841, !dbg !2433

1841:                                             ; preds = %1840, %1839
  %1842 = load i32, i32* @x.37
  %1843 = load i32, i32* @y.38
  %1844 = sub i32 %1842, 1
  %1845 = mul i32 %1842, %1844
  %1846 = urem i32 %1845, 2
  %1847 = icmp eq i32 %1846, 0
  %1848 = icmp slt i32 %1843, 10
  %1849 = or i1 %1847, %1848
  br i1 %1849, label %originalBB455, label %originalBB455alteredBB

originalBB455:                                    ; preds = %1841, %originalBB455alteredBB
  %1850 = load i32, i32* @x.37
  %1851 = load i32, i32* @y.38
  %1852 = sub i32 %1850, 1
  %1853 = mul i32 %1850, %1852
  %1854 = urem i32 %1853, 2
  %1855 = icmp eq i32 %1854, 0
  %1856 = icmp slt i32 %1851, 10
  %1857 = or i1 %1855, %1856
  br i1 %1857, label %originalBBpart2457, label %originalBB455alteredBB

originalBBpart2457:                               ; preds = %originalBB455
  br label %1858, !dbg !2434

1858:                                             ; preds = %originalBBpart2457, %originalBBpart2392, %1568, %originalBBpart2382
  %1859 = load i32, i32* @x.37
  %1860 = load i32, i32* @y.38
  %1861 = sub i32 %1859, 1
  %1862 = mul i32 %1859, %1861
  %1863 = urem i32 %1862, 2
  %1864 = icmp eq i32 %1863, 0
  %1865 = icmp slt i32 %1860, 10
  %1866 = or i1 %1864, %1865
  br i1 %1866, label %originalBB459, label %originalBB459alteredBB

originalBB459:                                    ; preds = %1858, %originalBB459alteredBB
  %1867 = load i32, i32* @x.37
  %1868 = load i32, i32* @y.38
  %1869 = sub i32 %1867, 1
  %1870 = mul i32 %1867, %1869
  %1871 = urem i32 %1870, 2
  %1872 = icmp eq i32 %1871, 0
  %1873 = icmp slt i32 %1868, 10
  %1874 = or i1 %1872, %1873
  br i1 %1874, label %originalBBpart2461, label %originalBB459alteredBB

originalBBpart2461:                               ; preds = %originalBB459
  br label %1876, !dbg !2435

1875:                                             ; preds = %originalBBpart2361
  br label %1876, !dbg !2436

1876:                                             ; preds = %1875, %originalBBpart2461, %originalBBpart2369
  %1877 = load i32, i32* @x.37
  %1878 = load i32, i32* @y.38
  %1879 = sub i32 %1877, 1
  %1880 = mul i32 %1877, %1879
  %1881 = urem i32 %1880, 2
  %1882 = icmp eq i32 %1881, 0
  %1883 = icmp slt i32 %1878, 10
  %1884 = or i1 %1882, %1883
  br i1 %1884, label %originalBB463, label %originalBB463alteredBB

originalBB463:                                    ; preds = %1876, %originalBB463alteredBB
  %1885 = load i32, i32* @x.37
  %1886 = load i32, i32* @y.38
  %1887 = sub i32 %1885, 1
  %1888 = mul i32 %1885, %1887
  %1889 = urem i32 %1888, 2
  %1890 = icmp eq i32 %1889, 0
  %1891 = icmp slt i32 %1886, 10
  %1892 = or i1 %1890, %1891
  br i1 %1892, label %originalBBpart2465, label %originalBB463alteredBB

originalBBpart2465:                               ; preds = %originalBB463
  br label %4345, !dbg !2437

1893:                                             ; preds = %originalBBpart2195
  %1894 = load i32, i32* @x.37
  %1895 = load i32, i32* @y.38
  %1896 = sub i32 %1894, 1
  %1897 = mul i32 %1894, %1896
  %1898 = urem i32 %1897, 2
  %1899 = icmp eq i32 %1898, 0
  %1900 = icmp slt i32 %1895, 10
  %1901 = or i1 %1899, %1900
  br i1 %1901, label %originalBB467, label %originalBB467alteredBB

originalBB467:                                    ; preds = %1893, %originalBB467alteredBB
  store i8 97, i8* %32, align 1, !dbg !2438
  %1902 = load i32, i32* @x.37
  %1903 = load i32, i32* @y.38
  %1904 = sub i32 %1902, 1
  %1905 = mul i32 %1902, %1904
  %1906 = urem i32 %1905, 2
  %1907 = icmp eq i32 %1906, 0
  %1908 = icmp slt i32 %1903, 10
  %1909 = or i1 %1907, %1908
  br i1 %1909, label %originalBBpart2469, label %originalBB467alteredBB

originalBBpart2469:                               ; preds = %originalBB467
  br label %2216, !dbg !2439

1910:                                             ; preds = %originalBBpart2195
  %1911 = load i32, i32* @x.37
  %1912 = load i32, i32* @y.38
  %1913 = sub i32 %1911, 1
  %1914 = mul i32 %1911, %1913
  %1915 = urem i32 %1914, 2
  %1916 = icmp eq i32 %1915, 0
  %1917 = icmp slt i32 %1912, 10
  %1918 = or i1 %1916, %1917
  br i1 %1918, label %originalBB471, label %originalBB471alteredBB

originalBB471:                                    ; preds = %1910, %originalBB471alteredBB
  store i8 98, i8* %32, align 1, !dbg !2440
  %1919 = load i32, i32* @x.37
  %1920 = load i32, i32* @y.38
  %1921 = sub i32 %1919, 1
  %1922 = mul i32 %1919, %1921
  %1923 = urem i32 %1922, 2
  %1924 = icmp eq i32 %1923, 0
  %1925 = icmp slt i32 %1920, 10
  %1926 = or i1 %1924, %1925
  br i1 %1926, label %originalBBpart2473, label %originalBB471alteredBB

originalBBpart2473:                               ; preds = %originalBB471
  br label %2216, !dbg !2441

1927:                                             ; preds = %originalBBpart2195
  %1928 = load i32, i32* @x.37
  %1929 = load i32, i32* @y.38
  %1930 = sub i32 %1928, 1
  %1931 = mul i32 %1928, %1930
  %1932 = urem i32 %1931, 2
  %1933 = icmp eq i32 %1932, 0
  %1934 = icmp slt i32 %1929, 10
  %1935 = or i1 %1933, %1934
  br i1 %1935, label %originalBB475, label %originalBB475alteredBB

originalBB475:                                    ; preds = %1927, %originalBB475alteredBB
  store i8 102, i8* %32, align 1, !dbg !2442
  %1936 = load i32, i32* @x.37
  %1937 = load i32, i32* @y.38
  %1938 = sub i32 %1936, 1
  %1939 = mul i32 %1936, %1938
  %1940 = urem i32 %1939, 2
  %1941 = icmp eq i32 %1940, 0
  %1942 = icmp slt i32 %1937, 10
  %1943 = or i1 %1941, %1942
  br i1 %1943, label %originalBBpart2477, label %originalBB475alteredBB

originalBBpart2477:                               ; preds = %originalBB475
  br label %2216, !dbg !2443

1944:                                             ; preds = %originalBBpart2195
  %1945 = load i32, i32* @x.37
  %1946 = load i32, i32* @y.38
  %1947 = sub i32 %1945, 1
  %1948 = mul i32 %1945, %1947
  %1949 = urem i32 %1948, 2
  %1950 = icmp eq i32 %1949, 0
  %1951 = icmp slt i32 %1946, 10
  %1952 = or i1 %1950, %1951
  br i1 %1952, label %originalBB479, label %originalBB479alteredBB

originalBB479:                                    ; preds = %1944, %originalBB479alteredBB
  store i8 110, i8* %32, align 1, !dbg !2444
  %1953 = load i32, i32* @x.37
  %1954 = load i32, i32* @y.38
  %1955 = sub i32 %1953, 1
  %1956 = mul i32 %1953, %1955
  %1957 = urem i32 %1956, 2
  %1958 = icmp eq i32 %1957, 0
  %1959 = icmp slt i32 %1954, 10
  %1960 = or i1 %1958, %1959
  br i1 %1960, label %originalBBpart2481, label %originalBB479alteredBB

originalBBpart2481:                               ; preds = %originalBB479
  br label %2144, !dbg !2445

1961:                                             ; preds = %originalBBpart2195
  %1962 = load i32, i32* @x.37
  %1963 = load i32, i32* @y.38
  %1964 = sub i32 %1962, 1
  %1965 = mul i32 %1962, %1964
  %1966 = urem i32 %1965, 2
  %1967 = icmp eq i32 %1966, 0
  %1968 = icmp slt i32 %1963, 10
  %1969 = or i1 %1967, %1968
  br i1 %1969, label %originalBB483, label %originalBB483alteredBB

originalBB483:                                    ; preds = %1961, %originalBB483alteredBB
  store i8 114, i8* %32, align 1, !dbg !2446
  %1970 = load i32, i32* @x.37
  %1971 = load i32, i32* @y.38
  %1972 = sub i32 %1970, 1
  %1973 = mul i32 %1970, %1972
  %1974 = urem i32 %1973, 2
  %1975 = icmp eq i32 %1974, 0
  %1976 = icmp slt i32 %1971, 10
  %1977 = or i1 %1975, %1976
  br i1 %1977, label %originalBBpart2485, label %originalBB483alteredBB

originalBBpart2485:                               ; preds = %originalBB483
  br label %2144, !dbg !2447

1978:                                             ; preds = %originalBBpart2195
  %1979 = load i32, i32* @x.37
  %1980 = load i32, i32* @y.38
  %1981 = sub i32 %1979, 1
  %1982 = mul i32 %1979, %1981
  %1983 = urem i32 %1982, 2
  %1984 = icmp eq i32 %1983, 0
  %1985 = icmp slt i32 %1980, 10
  %1986 = or i1 %1984, %1985
  br i1 %1986, label %originalBB487, label %originalBB487alteredBB

originalBB487:                                    ; preds = %1978, %originalBB487alteredBB
  store i8 116, i8* %32, align 1, !dbg !2448
  %1987 = load i32, i32* @x.37
  %1988 = load i32, i32* @y.38
  %1989 = sub i32 %1987, 1
  %1990 = mul i32 %1987, %1989
  %1991 = urem i32 %1990, 2
  %1992 = icmp eq i32 %1991, 0
  %1993 = icmp slt i32 %1988, 10
  %1994 = or i1 %1992, %1993
  br i1 %1994, label %originalBBpart2489, label %originalBB487alteredBB

originalBBpart2489:                               ; preds = %originalBB487
  br label %2144, !dbg !2449

1995:                                             ; preds = %originalBBpart2195
  %1996 = load i32, i32* @x.37
  %1997 = load i32, i32* @y.38
  %1998 = sub i32 %1996, 1
  %1999 = mul i32 %1996, %1998
  %2000 = urem i32 %1999, 2
  %2001 = icmp eq i32 %2000, 0
  %2002 = icmp slt i32 %1997, 10
  %2003 = or i1 %2001, %2002
  br i1 %2003, label %originalBB491, label %originalBB491alteredBB

originalBB491:                                    ; preds = %1995, %originalBB491alteredBB
  store i8 118, i8* %32, align 1, !dbg !2450
  %2004 = load i32, i32* @x.37
  %2005 = load i32, i32* @y.38
  %2006 = sub i32 %2004, 1
  %2007 = mul i32 %2004, %2006
  %2008 = urem i32 %2007, 2
  %2009 = icmp eq i32 %2008, 0
  %2010 = icmp slt i32 %2005, 10
  %2011 = or i1 %2009, %2010
  br i1 %2011, label %originalBBpart2493, label %originalBB491alteredBB

originalBBpart2493:                               ; preds = %originalBB491
  br label %2216, !dbg !2451

2012:                                             ; preds = %originalBBpart2195
  %2013 = load i32, i32* @x.37
  %2014 = load i32, i32* @y.38
  %2015 = sub i32 %2013, 1
  %2016 = mul i32 %2013, %2015
  %2017 = urem i32 %2016, 2
  %2018 = icmp eq i32 %2017, 0
  %2019 = icmp slt i32 %2014, 10
  %2020 = or i1 %2018, %2019
  br i1 %2020, label %originalBB495, label %originalBB495alteredBB

originalBB495:                                    ; preds = %2012, %originalBB495alteredBB
  %2021 = load i8, i8* %31, align 1, !dbg !2452
  store i8 %2021, i8* %32, align 1, !dbg !2453
  %2022 = load i32, i32* %15, align 4, !dbg !2454
  %2023 = icmp eq i32 %2022, 2, !dbg !2456
  %2024 = load i32, i32* @x.37
  %2025 = load i32, i32* @y.38
  %2026 = sub i32 %2024, 1
  %2027 = mul i32 %2024, %2026
  %2028 = urem i32 %2027, 2
  %2029 = icmp eq i32 %2028, 0
  %2030 = icmp slt i32 %2025, 10
  %2031 = or i1 %2029, %2030
  br i1 %2031, label %originalBBpart2497, label %originalBB495alteredBB

originalBBpart2497:                               ; preds = %originalBB495
  br i1 %2023, label %2032, label %2069, !dbg !2457

2032:                                             ; preds = %originalBBpart2497
  %2033 = load i32, i32* @x.37
  %2034 = load i32, i32* @y.38
  %2035 = sub i32 %2033, 1
  %2036 = mul i32 %2033, %2035
  %2037 = urem i32 %2036, 2
  %2038 = icmp eq i32 %2037, 0
  %2039 = icmp slt i32 %2034, 10
  %2040 = or i1 %2038, %2039
  br i1 %2040, label %originalBB499, label %originalBB499alteredBB

originalBB499:                                    ; preds = %2032, %originalBB499alteredBB
  %2041 = load i8, i8* %27, align 1, !dbg !2458
  %2042 = trunc i8 %2041 to i1, !dbg !2458
  %2043 = load i32, i32* @x.37
  %2044 = load i32, i32* @y.38
  %2045 = sub i32 %2043, 1
  %2046 = mul i32 %2043, %2045
  %2047 = urem i32 %2046, 2
  %2048 = icmp eq i32 %2047, 0
  %2049 = icmp slt i32 %2044, 10
  %2050 = or i1 %2048, %2049
  br i1 %2050, label %originalBBpart2501, label %originalBB499alteredBB

originalBBpart2501:                               ; preds = %originalBB499
  br i1 %2042, label %2051, label %2068, !dbg !2461

2051:                                             ; preds = %originalBBpart2501
  %2052 = load i32, i32* @x.37
  %2053 = load i32, i32* @y.38
  %2054 = sub i32 %2052, 1
  %2055 = mul i32 %2052, %2054
  %2056 = urem i32 %2055, 2
  %2057 = icmp eq i32 %2056, 0
  %2058 = icmp slt i32 %2053, 10
  %2059 = or i1 %2057, %2058
  br i1 %2059, label %originalBB503, label %originalBB503alteredBB

originalBB503:                                    ; preds = %2051, %originalBB503alteredBB
  %2060 = load i32, i32* @x.37
  %2061 = load i32, i32* @y.38
  %2062 = sub i32 %2060, 1
  %2063 = mul i32 %2060, %2062
  %2064 = urem i32 %2063, 2
  %2065 = icmp eq i32 %2064, 0
  %2066 = icmp slt i32 %2061, 10
  %2067 = or i1 %2065, %2066
  br i1 %2067, label %originalBBpart2505, label %originalBB503alteredBB

originalBBpart2505:                               ; preds = %originalBB503
  br label %5470, !dbg !2462

2068:                                             ; preds = %originalBBpart2501
  br label %4822, !dbg !2463

2069:                                             ; preds = %originalBBpart2497
  %2070 = load i32, i32* @x.37
  %2071 = load i32, i32* @y.38
  %2072 = sub i32 %2070, 1
  %2073 = mul i32 %2070, %2072
  %2074 = urem i32 %2073, 2
  %2075 = icmp eq i32 %2074, 0
  %2076 = icmp slt i32 %2071, 10
  %2077 = or i1 %2075, %2076
  br i1 %2077, label %originalBB507, label %originalBB507alteredBB

originalBB507:                                    ; preds = %2069, %originalBB507alteredBB
  %2078 = load i8, i8* %25, align 1, !dbg !2464
  %2079 = trunc i8 %2078 to i1, !dbg !2464
  %2080 = load i32, i32* @x.37
  %2081 = load i32, i32* @y.38
  %2082 = sub i32 %2080, 1
  %2083 = mul i32 %2080, %2082
  %2084 = urem i32 %2083, 2
  %2085 = icmp eq i32 %2084, 0
  %2086 = icmp slt i32 %2081, 10
  %2087 = or i1 %2085, %2086
  br i1 %2087, label %originalBBpart2509, label %originalBB507alteredBB

originalBBpart2509:                               ; preds = %originalBB507
  br i1 %2079, label %2088, label %2143, !dbg !2466

2088:                                             ; preds = %originalBBpart2509
  %2089 = load i32, i32* @x.37
  %2090 = load i32, i32* @y.38
  %2091 = sub i32 %2089, 1
  %2092 = mul i32 %2089, %2091
  %2093 = urem i32 %2092, 2
  %2094 = icmp eq i32 %2093, 0
  %2095 = icmp slt i32 %2090, 10
  %2096 = or i1 %2094, %2095
  br i1 %2096, label %originalBB511, label %originalBB511alteredBB

originalBB511:                                    ; preds = %2088, %originalBB511alteredBB
  %2097 = load i8, i8* %27, align 1, !dbg !2467
  %2098 = trunc i8 %2097 to i1, !dbg !2467
  %2099 = load i32, i32* @x.37
  %2100 = load i32, i32* @y.38
  %2101 = sub i32 %2099, 1
  %2102 = mul i32 %2099, %2101
  %2103 = urem i32 %2102, 2
  %2104 = icmp eq i32 %2103, 0
  %2105 = icmp slt i32 %2100, 10
  %2106 = or i1 %2104, %2105
  br i1 %2106, label %originalBBpart2513, label %originalBB511alteredBB

originalBBpart2513:                               ; preds = %originalBB511
  br i1 %2098, label %2107, label %2143, !dbg !2468

2107:                                             ; preds = %originalBBpart2513
  %2108 = load i32, i32* @x.37
  %2109 = load i32, i32* @y.38
  %2110 = sub i32 %2108, 1
  %2111 = mul i32 %2108, %2110
  %2112 = urem i32 %2111, 2
  %2113 = icmp eq i32 %2112, 0
  %2114 = icmp slt i32 %2109, 10
  %2115 = or i1 %2113, %2114
  br i1 %2115, label %originalBB515, label %originalBB515alteredBB

originalBB515:                                    ; preds = %2107, %originalBB515alteredBB
  %2116 = load i64, i64* %24, align 8, !dbg !2469
  %2117 = icmp ne i64 %2116, 0, !dbg !2469
  %2118 = load i32, i32* @x.37
  %2119 = load i32, i32* @y.38
  %2120 = sub i32 %2118, 1
  %2121 = mul i32 %2118, %2120
  %2122 = urem i32 %2121, 2
  %2123 = icmp eq i32 %2122, 0
  %2124 = icmp slt i32 %2119, 10
  %2125 = or i1 %2123, %2124
  br i1 %2125, label %originalBBpart2517, label %originalBB515alteredBB

originalBBpart2517:                               ; preds = %originalBB515
  br i1 %2117, label %2126, label %2143, !dbg !2470

2126:                                             ; preds = %originalBBpart2517
  %2127 = load i32, i32* @x.37
  %2128 = load i32, i32* @y.38
  %2129 = sub i32 %2127, 1
  %2130 = mul i32 %2127, %2129
  %2131 = urem i32 %2130, 2
  %2132 = icmp eq i32 %2131, 0
  %2133 = icmp slt i32 %2128, 10
  %2134 = or i1 %2132, %2133
  br i1 %2134, label %originalBB519, label %originalBB519alteredBB

originalBB519:                                    ; preds = %2126, %originalBB519alteredBB
  %2135 = load i32, i32* @x.37
  %2136 = load i32, i32* @y.38
  %2137 = sub i32 %2135, 1
  %2138 = mul i32 %2135, %2137
  %2139 = urem i32 %2138, 2
  %2140 = icmp eq i32 %2139, 0
  %2141 = icmp slt i32 %2136, 10
  %2142 = or i1 %2140, %2141
  br i1 %2142, label %originalBBpart2521, label %originalBB519alteredBB

originalBBpart2521:                               ; preds = %originalBB519
  br label %4822, !dbg !2471

2143:                                             ; preds = %originalBBpart2517, %originalBBpart2513, %originalBBpart2509
  br label %2144, !dbg !2469

2144:                                             ; preds = %2143, %originalBBpart2489, %originalBBpart2485, %originalBBpart2481
  call void @llvm.dbg.label(metadata !2472), !dbg !2473
  %2145 = load i32, i32* @x.37
  %2146 = load i32, i32* @y.38
  %2147 = sub i32 %2145, 1
  %2148 = mul i32 %2145, %2147
  %2149 = urem i32 %2148, 2
  %2150 = icmp eq i32 %2149, 0
  %2151 = icmp slt i32 %2146, 10
  %2152 = or i1 %2150, %2151
  br i1 %2152, label %originalBB523, label %originalBB523alteredBB

originalBB523:                                    ; preds = %2144, %originalBB523alteredBB
  %2153 = load i32, i32* %15, align 4, !dbg !2474
  %2154 = icmp eq i32 %2153, 2, !dbg !2476
  %2155 = load i32, i32* @x.37
  %2156 = load i32, i32* @y.38
  %2157 = sub i32 %2155, 1
  %2158 = mul i32 %2155, %2157
  %2159 = urem i32 %2158, 2
  %2160 = icmp eq i32 %2159, 0
  %2161 = icmp slt i32 %2156, 10
  %2162 = or i1 %2160, %2161
  br i1 %2162, label %originalBBpart2525, label %originalBB523alteredBB

originalBBpart2525:                               ; preds = %originalBB523
  br i1 %2154, label %2163, label %2199, !dbg !2477

2163:                                             ; preds = %originalBBpart2525
  %2164 = load i32, i32* @x.37
  %2165 = load i32, i32* @y.38
  %2166 = sub i32 %2164, 1
  %2167 = mul i32 %2164, %2166
  %2168 = urem i32 %2167, 2
  %2169 = icmp eq i32 %2168, 0
  %2170 = icmp slt i32 %2165, 10
  %2171 = or i1 %2169, %2170
  br i1 %2171, label %originalBB527, label %originalBB527alteredBB

originalBB527:                                    ; preds = %2163, %originalBB527alteredBB
  %2172 = load i8, i8* %27, align 1, !dbg !2478
  %2173 = trunc i8 %2172 to i1, !dbg !2478
  %2174 = load i32, i32* @x.37
  %2175 = load i32, i32* @y.38
  %2176 = sub i32 %2174, 1
  %2177 = mul i32 %2174, %2176
  %2178 = urem i32 %2177, 2
  %2179 = icmp eq i32 %2178, 0
  %2180 = icmp slt i32 %2175, 10
  %2181 = or i1 %2179, %2180
  br i1 %2181, label %originalBBpart2529, label %originalBB527alteredBB

originalBBpart2529:                               ; preds = %originalBB527
  br i1 %2173, label %2182, label %2199, !dbg !2479

2182:                                             ; preds = %originalBBpart2529
  %2183 = load i32, i32* @x.37
  %2184 = load i32, i32* @y.38
  %2185 = sub i32 %2183, 1
  %2186 = mul i32 %2183, %2185
  %2187 = urem i32 %2186, 2
  %2188 = icmp eq i32 %2187, 0
  %2189 = icmp slt i32 %2184, 10
  %2190 = or i1 %2188, %2189
  br i1 %2190, label %originalBB531, label %originalBB531alteredBB

originalBB531:                                    ; preds = %2182, %originalBB531alteredBB
  %2191 = load i32, i32* @x.37
  %2192 = load i32, i32* @y.38
  %2193 = sub i32 %2191, 1
  %2194 = mul i32 %2191, %2193
  %2195 = urem i32 %2194, 2
  %2196 = icmp eq i32 %2195, 0
  %2197 = icmp slt i32 %2192, 10
  %2198 = or i1 %2196, %2197
  br i1 %2198, label %originalBBpart2533, label %originalBB531alteredBB

originalBBpart2533:                               ; preds = %originalBB531
  br label %5470, !dbg !2480

2199:                                             ; preds = %originalBBpart2529, %originalBBpart2525
  %2200 = load i32, i32* @x.37
  %2201 = load i32, i32* @y.38
  %2202 = sub i32 %2200, 1
  %2203 = mul i32 %2200, %2202
  %2204 = urem i32 %2203, 2
  %2205 = icmp eq i32 %2204, 0
  %2206 = icmp slt i32 %2201, 10
  %2207 = or i1 %2205, %2206
  br i1 %2207, label %originalBB535, label %originalBB535alteredBB

originalBB535:                                    ; preds = %2199, %originalBB535alteredBB
  %2208 = load i32, i32* @x.37
  %2209 = load i32, i32* @y.38
  %2210 = sub i32 %2208, 1
  %2211 = mul i32 %2208, %2210
  %2212 = urem i32 %2211, 2
  %2213 = icmp eq i32 %2212, 0
  %2214 = icmp slt i32 %2209, 10
  %2215 = or i1 %2213, %2214
  br i1 %2215, label %originalBBpart2537, label %originalBB535alteredBB

originalBBpart2537:                               ; preds = %originalBB535
  br label %2216, !dbg !2478

2216:                                             ; preds = %originalBBpart2537, %originalBBpart2493, %originalBBpart2477, %originalBBpart2473, %originalBBpart2469
  call void @llvm.dbg.label(metadata !2481), !dbg !2482
  %2217 = load i32, i32* @x.37
  %2218 = load i32, i32* @y.38
  %2219 = sub i32 %2217, 1
  %2220 = mul i32 %2217, %2219
  %2221 = urem i32 %2220, 2
  %2222 = icmp eq i32 %2221, 0
  %2223 = icmp slt i32 %2218, 10
  %2224 = or i1 %2222, %2223
  br i1 %2224, label %originalBB539, label %originalBB539alteredBB

originalBB539:                                    ; preds = %2216, %originalBB539alteredBB
  %2225 = load i8, i8* %25, align 1, !dbg !2483
  %2226 = trunc i8 %2225 to i1, !dbg !2483
  %2227 = load i32, i32* @x.37
  %2228 = load i32, i32* @y.38
  %2229 = sub i32 %2227, 1
  %2230 = mul i32 %2227, %2229
  %2231 = urem i32 %2230, 2
  %2232 = icmp eq i32 %2231, 0
  %2233 = icmp slt i32 %2228, 10
  %2234 = or i1 %2232, %2233
  br i1 %2234, label %originalBBpart2541, label %originalBB539alteredBB

originalBBpart2541:                               ; preds = %originalBB539
  br i1 %2226, label %2235, label %2253, !dbg !2485

2235:                                             ; preds = %originalBBpart2541
  %2236 = load i32, i32* @x.37
  %2237 = load i32, i32* @y.38
  %2238 = sub i32 %2236, 1
  %2239 = mul i32 %2236, %2238
  %2240 = urem i32 %2239, 2
  %2241 = icmp eq i32 %2240, 0
  %2242 = icmp slt i32 %2237, 10
  %2243 = or i1 %2241, %2242
  br i1 %2243, label %originalBB543, label %originalBB543alteredBB

originalBB543:                                    ; preds = %2235, %originalBB543alteredBB
  %2244 = load i8, i8* %32, align 1, !dbg !2486
  store i8 %2244, i8* %31, align 1, !dbg !2488
  %2245 = load i32, i32* @x.37
  %2246 = load i32, i32* @y.38
  %2247 = sub i32 %2245, 1
  %2248 = mul i32 %2245, %2247
  %2249 = urem i32 %2248, 2
  %2250 = icmp eq i32 %2249, 0
  %2251 = icmp slt i32 %2246, 10
  %2252 = or i1 %2250, %2251
  br i1 %2252, label %originalBBpart2545, label %originalBB543alteredBB

originalBBpart2545:                               ; preds = %originalBB543
  br label %4472, !dbg !2489

2253:                                             ; preds = %originalBBpart2541
  %2254 = load i32, i32* @x.37
  %2255 = load i32, i32* @y.38
  %2256 = sub i32 %2254, 1
  %2257 = mul i32 %2254, %2256
  %2258 = urem i32 %2257, 2
  %2259 = icmp eq i32 %2258, 0
  %2260 = icmp slt i32 %2255, 10
  %2261 = or i1 %2259, %2260
  br i1 %2261, label %originalBB547, label %originalBB547alteredBB

originalBB547:                                    ; preds = %2253, %originalBB547alteredBB
  %2262 = load i32, i32* @x.37
  %2263 = load i32, i32* @y.38
  %2264 = sub i32 %2262, 1
  %2265 = mul i32 %2262, %2264
  %2266 = urem i32 %2265, 2
  %2267 = icmp eq i32 %2266, 0
  %2268 = icmp slt i32 %2263, 10
  %2269 = or i1 %2267, %2268
  br i1 %2269, label %originalBBpart2549, label %originalBB547alteredBB

originalBBpart2549:                               ; preds = %originalBB547
  br label %4345, !dbg !2490

2270:                                             ; preds = %originalBBpart2195, %originalBBpart2195
  %2271 = load i32, i32* @x.37
  %2272 = load i32, i32* @y.38
  %2273 = sub i32 %2271, 1
  %2274 = mul i32 %2271, %2273
  %2275 = urem i32 %2274, 2
  %2276 = icmp eq i32 %2275, 0
  %2277 = icmp slt i32 %2272, 10
  %2278 = or i1 %2276, %2277
  br i1 %2278, label %originalBB551, label %originalBB551alteredBB

originalBB551:                                    ; preds = %2270, %originalBB551alteredBB
  %2279 = load i64, i64* %14, align 8, !dbg !2491
  %2280 = icmp eq i64 %2279, -1, !dbg !2493
  %2281 = load i32, i32* @x.37
  %2282 = load i32, i32* @y.38
  %2283 = sub i32 %2281, 1
  %2284 = mul i32 %2281, %2283
  %2285 = urem i32 %2284, 2
  %2286 = icmp eq i32 %2285, 0
  %2287 = icmp slt i32 %2282, 10
  %2288 = or i1 %2286, %2287
  br i1 %2288, label %originalBBpart2553, label %originalBB551alteredBB

originalBBpart2553:                               ; preds = %originalBB551
  br i1 %2280, label %2289, label %2311, !dbg !2494

2289:                                             ; preds = %originalBBpart2553
  %2290 = load i32, i32* @x.37
  %2291 = load i32, i32* @y.38
  %2292 = sub i32 %2290, 1
  %2293 = mul i32 %2290, %2292
  %2294 = urem i32 %2293, 2
  %2295 = icmp eq i32 %2294, 0
  %2296 = icmp slt i32 %2291, 10
  %2297 = or i1 %2295, %2296
  br i1 %2297, label %originalBB555, label %originalBB555alteredBB

originalBB555:                                    ; preds = %2289, %originalBB555alteredBB
  %2298 = load i8*, i8** %13, align 8, !dbg !2495
  %2299 = getelementptr inbounds i8, i8* %2298, i64 1, !dbg !2495
  %2300 = load i8, i8* %2299, align 1, !dbg !2495
  %2301 = sext i8 %2300 to i32, !dbg !2495
  %2302 = icmp eq i32 %2301, 0, !dbg !2496
  %2303 = load i32, i32* @x.37
  %2304 = load i32, i32* @y.38
  %2305 = sub i32 %2303, 1
  %2306 = mul i32 %2303, %2305
  %2307 = urem i32 %2306, 2
  %2308 = icmp eq i32 %2307, 0
  %2309 = icmp slt i32 %2304, 10
  %2310 = or i1 %2308, %2309
  br i1 %2310, label %originalBBpart2557, label %originalBB555alteredBB

originalBBpart2557:                               ; preds = %originalBB555
  br i1 %2302, label %2331, label %2314, !dbg !2491

2311:                                             ; preds = %originalBBpart2553
  %2312 = load i64, i64* %14, align 8, !dbg !2497
  %2313 = icmp eq i64 %2312, 1, !dbg !2498
  br i1 %2313, label %2331, label %2314, !dbg !2494

2314:                                             ; preds = %2311, %originalBBpart2557
  %2315 = load i32, i32* @x.37
  %2316 = load i32, i32* @y.38
  %2317 = sub i32 %2315, 1
  %2318 = mul i32 %2315, %2317
  %2319 = urem i32 %2318, 2
  %2320 = icmp eq i32 %2319, 0
  %2321 = icmp slt i32 %2316, 10
  %2322 = or i1 %2320, %2321
  br i1 %2322, label %originalBB559, label %originalBB559alteredBB

originalBB559:                                    ; preds = %2314, %originalBB559alteredBB
  %2323 = load i32, i32* @x.37
  %2324 = load i32, i32* @y.38
  %2325 = sub i32 %2323, 1
  %2326 = mul i32 %2323, %2325
  %2327 = urem i32 %2326, 2
  %2328 = icmp eq i32 %2327, 0
  %2329 = icmp slt i32 %2324, 10
  %2330 = or i1 %2328, %2329
  br i1 %2330, label %originalBBpart2561, label %originalBB559alteredBB

originalBBpart2561:                               ; preds = %originalBB559
  br label %4345, !dbg !2499

2331:                                             ; preds = %2311, %originalBBpart2557
  %2332 = load i32, i32* @x.37
  %2333 = load i32, i32* @y.38
  %2334 = sub i32 %2332, 1
  %2335 = mul i32 %2332, %2334
  %2336 = urem i32 %2335, 2
  %2337 = icmp eq i32 %2336, 0
  %2338 = icmp slt i32 %2333, 10
  %2339 = or i1 %2337, %2338
  br i1 %2339, label %originalBB563, label %originalBB563alteredBB

originalBB563:                                    ; preds = %2331, %originalBB563alteredBB
  %2340 = load i32, i32* @x.37
  %2341 = load i32, i32* @y.38
  %2342 = sub i32 %2340, 1
  %2343 = mul i32 %2340, %2342
  %2344 = urem i32 %2343, 2
  %2345 = icmp eq i32 %2344, 0
  %2346 = icmp slt i32 %2341, 10
  %2347 = or i1 %2345, %2346
  br i1 %2347, label %originalBBpart2565, label %originalBB563alteredBB

originalBBpart2565:                               ; preds = %originalBB563
  br label %2348, !dbg !2500

2348:                                             ; preds = %originalBBpart2565, %originalBBpart2195, %originalBBpart2195
  %2349 = load i32, i32* @x.37
  %2350 = load i32, i32* @y.38
  %2351 = sub i32 %2349, 1
  %2352 = mul i32 %2349, %2351
  %2353 = urem i32 %2352, 2
  %2354 = icmp eq i32 %2353, 0
  %2355 = icmp slt i32 %2350, 10
  %2356 = or i1 %2354, %2355
  br i1 %2356, label %originalBB567, label %originalBB567alteredBB

originalBB567:                                    ; preds = %2348, %originalBB567alteredBB
  %2357 = load i64, i64* %20, align 8, !dbg !2501
  %2358 = icmp ne i64 %2357, 0, !dbg !2503
  %2359 = load i32, i32* @x.37
  %2360 = load i32, i32* @y.38
  %2361 = sub i32 %2359, 1
  %2362 = mul i32 %2359, %2361
  %2363 = urem i32 %2362, 2
  %2364 = icmp eq i32 %2363, 0
  %2365 = icmp slt i32 %2360, 10
  %2366 = or i1 %2364, %2365
  br i1 %2366, label %originalBBpart2569, label %originalBB567alteredBB

originalBBpart2569:                               ; preds = %originalBB567
  br i1 %2358, label %2367, label %2384, !dbg !2504

2367:                                             ; preds = %originalBBpart2569
  %2368 = load i32, i32* @x.37
  %2369 = load i32, i32* @y.38
  %2370 = sub i32 %2368, 1
  %2371 = mul i32 %2368, %2370
  %2372 = urem i32 %2371, 2
  %2373 = icmp eq i32 %2372, 0
  %2374 = icmp slt i32 %2369, 10
  %2375 = or i1 %2373, %2374
  br i1 %2375, label %originalBB571, label %originalBB571alteredBB

originalBB571:                                    ; preds = %2367, %originalBB571alteredBB
  %2376 = load i32, i32* @x.37
  %2377 = load i32, i32* @y.38
  %2378 = sub i32 %2376, 1
  %2379 = mul i32 %2376, %2378
  %2380 = urem i32 %2379, 2
  %2381 = icmp eq i32 %2380, 0
  %2382 = icmp slt i32 %2377, 10
  %2383 = or i1 %2381, %2382
  br i1 %2383, label %originalBBpart2573, label %originalBB571alteredBB

originalBBpart2573:                               ; preds = %originalBB571
  br label %4345, !dbg !2505

2384:                                             ; preds = %originalBBpart2569
  %2385 = load i32, i32* @x.37
  %2386 = load i32, i32* @y.38
  %2387 = sub i32 %2385, 1
  %2388 = mul i32 %2385, %2387
  %2389 = urem i32 %2388, 2
  %2390 = icmp eq i32 %2389, 0
  %2391 = icmp slt i32 %2386, 10
  %2392 = or i1 %2390, %2391
  br i1 %2392, label %originalBB575, label %originalBB575alteredBB

originalBB575:                                    ; preds = %2384, %originalBB575alteredBB
  %2393 = load i32, i32* @x.37
  %2394 = load i32, i32* @y.38
  %2395 = sub i32 %2393, 1
  %2396 = mul i32 %2393, %2395
  %2397 = urem i32 %2396, 2
  %2398 = icmp eq i32 %2397, 0
  %2399 = icmp slt i32 %2394, 10
  %2400 = or i1 %2398, %2399
  br i1 %2400, label %originalBBpart2577, label %originalBB575alteredBB

originalBBpart2577:                               ; preds = %originalBB575
  br label %2401, !dbg !2506

2401:                                             ; preds = %originalBBpart2577, %originalBBpart2195
  %2402 = load i32, i32* @x.37
  %2403 = load i32, i32* @y.38
  %2404 = sub i32 %2402, 1
  %2405 = mul i32 %2402, %2404
  %2406 = urem i32 %2405, 2
  %2407 = icmp eq i32 %2406, 0
  %2408 = icmp slt i32 %2403, 10
  %2409 = or i1 %2407, %2408
  br i1 %2409, label %originalBB579, label %originalBB579alteredBB

originalBB579:                                    ; preds = %2401, %originalBB579alteredBB
  store i8 1, i8* %35, align 1, !dbg !2507
  %2410 = load i32, i32* @x.37
  %2411 = load i32, i32* @y.38
  %2412 = sub i32 %2410, 1
  %2413 = mul i32 %2410, %2412
  %2414 = urem i32 %2413, 2
  %2415 = icmp eq i32 %2414, 0
  %2416 = icmp slt i32 %2411, 10
  %2417 = or i1 %2415, %2416
  br i1 %2417, label %originalBBpart2581, label %originalBB579alteredBB

originalBBpart2581:                               ; preds = %originalBB579
  br label %2418, !dbg !2508

2418:                                             ; preds = %originalBBpart2581, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195
  %2419 = load i32, i32* %15, align 4, !dbg !2509
  %2420 = icmp eq i32 %2419, 2, !dbg !2511
  br i1 %2420, label %2421, label %2425, !dbg !2512

2421:                                             ; preds = %2418
  %2422 = load i8, i8* %27, align 1, !dbg !2513
  %2423 = trunc i8 %2422 to i1, !dbg !2513
  br i1 %2423, label %2424, label %2425, !dbg !2514

2424:                                             ; preds = %2421
  br label %5470, !dbg !2515

2425:                                             ; preds = %2421, %2418
  %2426 = load i32, i32* @x.37
  %2427 = load i32, i32* @y.38
  %2428 = sub i32 %2426, 1
  %2429 = mul i32 %2426, %2428
  %2430 = urem i32 %2429, 2
  %2431 = icmp eq i32 %2430, 0
  %2432 = icmp slt i32 %2427, 10
  %2433 = or i1 %2431, %2432
  br i1 %2433, label %originalBB583, label %originalBB583alteredBB

originalBB583:                                    ; preds = %2425, %originalBB583alteredBB
  %2434 = load i32, i32* @x.37
  %2435 = load i32, i32* @y.38
  %2436 = sub i32 %2434, 1
  %2437 = mul i32 %2434, %2436
  %2438 = urem i32 %2437, 2
  %2439 = icmp eq i32 %2438, 0
  %2440 = icmp slt i32 %2435, 10
  %2441 = or i1 %2439, %2440
  br i1 %2441, label %originalBBpart2585, label %originalBB583alteredBB

originalBBpart2585:                               ; preds = %originalBB583
  br label %4345, !dbg !2516

2442:                                             ; preds = %originalBBpart2195
  store i8 1, i8* %29, align 1, !dbg !2517
  store i8 1, i8* %35, align 1, !dbg !2518
  %2443 = load i32, i32* %15, align 4, !dbg !2519
  %2444 = icmp eq i32 %2443, 2, !dbg !2521
  br i1 %2444, label %2445, label %2734, !dbg !2522

2445:                                             ; preds = %2442
  %2446 = load i32, i32* @x.37
  %2447 = load i32, i32* @y.38
  %2448 = sub i32 %2446, 1
  %2449 = mul i32 %2446, %2448
  %2450 = urem i32 %2449, 2
  %2451 = icmp eq i32 %2450, 0
  %2452 = icmp slt i32 %2447, 10
  %2453 = or i1 %2451, %2452
  br i1 %2453, label %originalBB587, label %originalBB587alteredBB

originalBB587:                                    ; preds = %2445, %originalBB587alteredBB
  %2454 = load i8, i8* %27, align 1, !dbg !2523
  %2455 = trunc i8 %2454 to i1, !dbg !2523
  %2456 = load i32, i32* @x.37
  %2457 = load i32, i32* @y.38
  %2458 = sub i32 %2456, 1
  %2459 = mul i32 %2456, %2458
  %2460 = urem i32 %2459, 2
  %2461 = icmp eq i32 %2460, 0
  %2462 = icmp slt i32 %2457, 10
  %2463 = or i1 %2461, %2462
  br i1 %2463, label %originalBBpart2589, label %originalBB587alteredBB

originalBBpart2589:                               ; preds = %originalBB587
  br i1 %2455, label %2464, label %2481, !dbg !2526

2464:                                             ; preds = %originalBBpart2589
  %2465 = load i32, i32* @x.37
  %2466 = load i32, i32* @y.38
  %2467 = sub i32 %2465, 1
  %2468 = mul i32 %2465, %2467
  %2469 = urem i32 %2468, 2
  %2470 = icmp eq i32 %2469, 0
  %2471 = icmp slt i32 %2466, 10
  %2472 = or i1 %2470, %2471
  br i1 %2472, label %originalBB591, label %originalBB591alteredBB

originalBB591:                                    ; preds = %2464, %originalBB591alteredBB
  %2473 = load i32, i32* @x.37
  %2474 = load i32, i32* @y.38
  %2475 = sub i32 %2473, 1
  %2476 = mul i32 %2473, %2475
  %2477 = urem i32 %2476, 2
  %2478 = icmp eq i32 %2477, 0
  %2479 = icmp slt i32 %2474, 10
  %2480 = or i1 %2478, %2479
  br i1 %2480, label %originalBBpart2593, label %originalBB591alteredBB

originalBBpart2593:                               ; preds = %originalBB591
  br label %5470, !dbg !2527

2481:                                             ; preds = %originalBBpart2589
  %2482 = load i32, i32* @x.37
  %2483 = load i32, i32* @y.38
  %2484 = sub i32 %2482, 1
  %2485 = mul i32 %2482, %2484
  %2486 = urem i32 %2485, 2
  %2487 = icmp eq i32 %2486, 0
  %2488 = icmp slt i32 %2483, 10
  %2489 = or i1 %2487, %2488
  br i1 %2489, label %originalBB595, label %originalBB595alteredBB

originalBB595:                                    ; preds = %2481, %originalBB595alteredBB
  %2490 = load i64, i64* %12, align 8, !dbg !2528
  %2491 = icmp ne i64 %2490, 0, !dbg !2528
  %2492 = load i32, i32* @x.37
  %2493 = load i32, i32* @y.38
  %2494 = sub i32 %2492, 1
  %2495 = mul i32 %2492, %2494
  %2496 = urem i32 %2495, 2
  %2497 = icmp eq i32 %2496, 0
  %2498 = icmp slt i32 %2493, 10
  %2499 = or i1 %2497, %2498
  br i1 %2499, label %originalBBpart2597, label %originalBB595alteredBB

originalBBpart2597:                               ; preds = %originalBB595
  br i1 %2491, label %2500, label %2537, !dbg !2530

2500:                                             ; preds = %originalBBpart2597
  %2501 = load i32, i32* @x.37
  %2502 = load i32, i32* @y.38
  %2503 = sub i32 %2501, 1
  %2504 = mul i32 %2501, %2503
  %2505 = urem i32 %2504, 2
  %2506 = icmp eq i32 %2505, 0
  %2507 = icmp slt i32 %2502, 10
  %2508 = or i1 %2506, %2507
  br i1 %2508, label %originalBB599, label %originalBB599alteredBB

originalBB599:                                    ; preds = %2500, %originalBB599alteredBB
  %2509 = load i64, i64* %22, align 8, !dbg !2531
  %2510 = icmp ne i64 %2509, 0, !dbg !2531
  %2511 = load i32, i32* @x.37
  %2512 = load i32, i32* @y.38
  %2513 = sub i32 %2511, 1
  %2514 = mul i32 %2511, %2513
  %2515 = urem i32 %2514, 2
  %2516 = icmp eq i32 %2515, 0
  %2517 = icmp slt i32 %2512, 10
  %2518 = or i1 %2516, %2517
  br i1 %2518, label %originalBBpart2601, label %originalBB599alteredBB

originalBBpart2601:                               ; preds = %originalBB599
  br i1 %2510, label %2537, label %2519, !dbg !2532

2519:                                             ; preds = %originalBBpart2601
  %2520 = load i32, i32* @x.37
  %2521 = load i32, i32* @y.38
  %2522 = sub i32 %2520, 1
  %2523 = mul i32 %2520, %2522
  %2524 = urem i32 %2523, 2
  %2525 = icmp eq i32 %2524, 0
  %2526 = icmp slt i32 %2521, 10
  %2527 = or i1 %2525, %2526
  br i1 %2527, label %originalBB603, label %originalBB603alteredBB

originalBB603:                                    ; preds = %2519, %originalBB603alteredBB
  %2528 = load i64, i64* %12, align 8, !dbg !2533
  store i64 %2528, i64* %22, align 8, !dbg !2535
  store i64 0, i64* %12, align 8, !dbg !2536
  %2529 = load i32, i32* @x.37
  %2530 = load i32, i32* @y.38
  %2531 = sub i32 %2529, 1
  %2532 = mul i32 %2529, %2531
  %2533 = urem i32 %2532, 2
  %2534 = icmp eq i32 %2533, 0
  %2535 = icmp slt i32 %2530, 10
  %2536 = or i1 %2534, %2535
  br i1 %2536, label %originalBBpart2605, label %originalBB603alteredBB

originalBBpart2605:                               ; preds = %originalBB603
  br label %2537, !dbg !2537

2537:                                             ; preds = %originalBBpart2605, %originalBBpart2601, %originalBBpart2597
  %2538 = load i32, i32* @x.37
  %2539 = load i32, i32* @y.38
  %2540 = sub i32 %2538, 1
  %2541 = mul i32 %2538, %2540
  %2542 = urem i32 %2541, 2
  %2543 = icmp eq i32 %2542, 0
  %2544 = icmp slt i32 %2539, 10
  %2545 = or i1 %2543, %2544
  br i1 %2545, label %originalBB607, label %originalBB607alteredBB

originalBB607:                                    ; preds = %2537, %originalBB607alteredBB
  %2546 = load i32, i32* @x.37
  %2547 = load i32, i32* @y.38
  %2548 = sub i32 %2546, 1
  %2549 = mul i32 %2546, %2548
  %2550 = urem i32 %2549, 2
  %2551 = icmp eq i32 %2550, 0
  %2552 = icmp slt i32 %2547, 10
  %2553 = or i1 %2551, %2552
  br i1 %2553, label %originalBBpart2609, label %originalBB607alteredBB

originalBBpart2609:                               ; preds = %originalBB607
  br label %2554, !dbg !2538

2554:                                             ; preds = %originalBBpart2609
  %2555 = load i64, i64* %21, align 8, !dbg !2539
  %2556 = load i64, i64* %12, align 8, !dbg !2539
  %2557 = icmp ult i64 %2555, %2556, !dbg !2539
  br i1 %2557, label %2558, label %2578, !dbg !2542

2558:                                             ; preds = %2554
  %2559 = load i32, i32* @x.37
  %2560 = load i32, i32* @y.38
  %2561 = sub i32 %2559, 1
  %2562 = mul i32 %2559, %2561
  %2563 = urem i32 %2562, 2
  %2564 = icmp eq i32 %2563, 0
  %2565 = icmp slt i32 %2560, 10
  %2566 = or i1 %2564, %2565
  br i1 %2566, label %originalBB611, label %originalBB611alteredBB

originalBB611:                                    ; preds = %2558, %originalBB611alteredBB
  %2567 = load i8*, i8** %11, align 8, !dbg !2539
  %2568 = load i64, i64* %21, align 8, !dbg !2539
  %2569 = getelementptr inbounds i8, i8* %2567, i64 %2568, !dbg !2539
  store i8 39, i8* %2569, align 1, !dbg !2539
  %2570 = load i32, i32* @x.37
  %2571 = load i32, i32* @y.38
  %2572 = sub i32 %2570, 1
  %2573 = mul i32 %2570, %2572
  %2574 = urem i32 %2573, 2
  %2575 = icmp eq i32 %2574, 0
  %2576 = icmp slt i32 %2571, 10
  %2577 = or i1 %2575, %2576
  br i1 %2577, label %originalBBpart2613, label %originalBB611alteredBB

originalBBpart2613:                               ; preds = %originalBB611
  br label %2578, !dbg !2539

2578:                                             ; preds = %originalBBpart2613, %2554
  %2579 = load i32, i32* @x.37
  %2580 = load i32, i32* @y.38
  %2581 = sub i32 %2579, 1
  %2582 = mul i32 %2579, %2581
  %2583 = urem i32 %2582, 2
  %2584 = icmp eq i32 %2583, 0
  %2585 = icmp slt i32 %2580, 10
  %2586 = or i1 %2584, %2585
  br i1 %2586, label %originalBB615, label %originalBB615alteredBB

originalBB615:                                    ; preds = %2578, %originalBB615alteredBB
  %2587 = load i64, i64* %21, align 8, !dbg !2542
  %2588 = add i64 %2587, 1, !dbg !2542
  store i64 %2588, i64* %21, align 8, !dbg !2542
  %2589 = load i32, i32* @x.37
  %2590 = load i32, i32* @y.38
  %2591 = sub i32 %2589, 1
  %2592 = mul i32 %2589, %2591
  %2593 = urem i32 %2592, 2
  %2594 = icmp eq i32 %2593, 0
  %2595 = icmp slt i32 %2590, 10
  %2596 = or i1 %2594, %2595
  br i1 %2596, label %originalBBpart2619, label %originalBB615alteredBB

originalBBpart2619:                               ; preds = %originalBB615
  br label %2597, !dbg !2542

2597:                                             ; preds = %originalBBpart2619
  %2598 = load i32, i32* @x.37
  %2599 = load i32, i32* @y.38
  %2600 = sub i32 %2598, 1
  %2601 = mul i32 %2598, %2600
  %2602 = urem i32 %2601, 2
  %2603 = icmp eq i32 %2602, 0
  %2604 = icmp slt i32 %2599, 10
  %2605 = or i1 %2603, %2604
  br i1 %2605, label %originalBB621, label %originalBB621alteredBB

originalBB621:                                    ; preds = %2597, %originalBB621alteredBB
  %2606 = load i32, i32* @x.37
  %2607 = load i32, i32* @y.38
  %2608 = sub i32 %2606, 1
  %2609 = mul i32 %2606, %2608
  %2610 = urem i32 %2609, 2
  %2611 = icmp eq i32 %2610, 0
  %2612 = icmp slt i32 %2607, 10
  %2613 = or i1 %2611, %2612
  br i1 %2613, label %originalBBpart2623, label %originalBB621alteredBB

originalBBpart2623:                               ; preds = %originalBB621
  br label %2614, !dbg !2543

2614:                                             ; preds = %originalBBpart2623
  %2615 = load i64, i64* %21, align 8, !dbg !2544
  %2616 = load i64, i64* %12, align 8, !dbg !2544
  %2617 = icmp ult i64 %2615, %2616, !dbg !2544
  br i1 %2617, label %2618, label %2638, !dbg !2547

2618:                                             ; preds = %2614
  %2619 = load i32, i32* @x.37
  %2620 = load i32, i32* @y.38
  %2621 = sub i32 %2619, 1
  %2622 = mul i32 %2619, %2621
  %2623 = urem i32 %2622, 2
  %2624 = icmp eq i32 %2623, 0
  %2625 = icmp slt i32 %2620, 10
  %2626 = or i1 %2624, %2625
  br i1 %2626, label %originalBB625, label %originalBB625alteredBB

originalBB625:                                    ; preds = %2618, %originalBB625alteredBB
  %2627 = load i8*, i8** %11, align 8, !dbg !2544
  %2628 = load i64, i64* %21, align 8, !dbg !2544
  %2629 = getelementptr inbounds i8, i8* %2627, i64 %2628, !dbg !2544
  store i8 92, i8* %2629, align 1, !dbg !2544
  %2630 = load i32, i32* @x.37
  %2631 = load i32, i32* @y.38
  %2632 = sub i32 %2630, 1
  %2633 = mul i32 %2630, %2632
  %2634 = urem i32 %2633, 2
  %2635 = icmp eq i32 %2634, 0
  %2636 = icmp slt i32 %2631, 10
  %2637 = or i1 %2635, %2636
  br i1 %2637, label %originalBBpart2627, label %originalBB625alteredBB

originalBBpart2627:                               ; preds = %originalBB625
  br label %2638, !dbg !2544

2638:                                             ; preds = %originalBBpart2627, %2614
  %2639 = load i32, i32* @x.37
  %2640 = load i32, i32* @y.38
  %2641 = sub i32 %2639, 1
  %2642 = mul i32 %2639, %2641
  %2643 = urem i32 %2642, 2
  %2644 = icmp eq i32 %2643, 0
  %2645 = icmp slt i32 %2640, 10
  %2646 = or i1 %2644, %2645
  br i1 %2646, label %originalBB629, label %originalBB629alteredBB

originalBB629:                                    ; preds = %2638, %originalBB629alteredBB
  %2647 = load i64, i64* %21, align 8, !dbg !2547
  %2648 = add i64 %2647, 1, !dbg !2547
  store i64 %2648, i64* %21, align 8, !dbg !2547
  %2649 = load i32, i32* @x.37
  %2650 = load i32, i32* @y.38
  %2651 = sub i32 %2649, 1
  %2652 = mul i32 %2649, %2651
  %2653 = urem i32 %2652, 2
  %2654 = icmp eq i32 %2653, 0
  %2655 = icmp slt i32 %2650, 10
  %2656 = or i1 %2654, %2655
  br i1 %2656, label %originalBBpart2642, label %originalBB629alteredBB

originalBBpart2642:                               ; preds = %originalBB629
  br label %2657, !dbg !2547

2657:                                             ; preds = %originalBBpart2642
  %2658 = load i32, i32* @x.37
  %2659 = load i32, i32* @y.38
  %2660 = sub i32 %2658, 1
  %2661 = mul i32 %2658, %2660
  %2662 = urem i32 %2661, 2
  %2663 = icmp eq i32 %2662, 0
  %2664 = icmp slt i32 %2659, 10
  %2665 = or i1 %2663, %2664
  br i1 %2665, label %originalBB644, label %originalBB644alteredBB

originalBB644:                                    ; preds = %2657, %originalBB644alteredBB
  %2666 = load i32, i32* @x.37
  %2667 = load i32, i32* @y.38
  %2668 = sub i32 %2666, 1
  %2669 = mul i32 %2666, %2668
  %2670 = urem i32 %2669, 2
  %2671 = icmp eq i32 %2670, 0
  %2672 = icmp slt i32 %2667, 10
  %2673 = or i1 %2671, %2672
  br i1 %2673, label %originalBBpart2646, label %originalBB644alteredBB

originalBBpart2646:                               ; preds = %originalBB644
  br label %2674, !dbg !2548

2674:                                             ; preds = %originalBBpart2646
  %2675 = load i64, i64* %21, align 8, !dbg !2549
  %2676 = load i64, i64* %12, align 8, !dbg !2549
  %2677 = icmp ult i64 %2675, %2676, !dbg !2549
  br i1 %2677, label %2678, label %2698, !dbg !2552

2678:                                             ; preds = %2674
  %2679 = load i32, i32* @x.37
  %2680 = load i32, i32* @y.38
  %2681 = sub i32 %2679, 1
  %2682 = mul i32 %2679, %2681
  %2683 = urem i32 %2682, 2
  %2684 = icmp eq i32 %2683, 0
  %2685 = icmp slt i32 %2680, 10
  %2686 = or i1 %2684, %2685
  br i1 %2686, label %originalBB648, label %originalBB648alteredBB

originalBB648:                                    ; preds = %2678, %originalBB648alteredBB
  %2687 = load i8*, i8** %11, align 8, !dbg !2549
  %2688 = load i64, i64* %21, align 8, !dbg !2549
  %2689 = getelementptr inbounds i8, i8* %2687, i64 %2688, !dbg !2549
  store i8 39, i8* %2689, align 1, !dbg !2549
  %2690 = load i32, i32* @x.37
  %2691 = load i32, i32* @y.38
  %2692 = sub i32 %2690, 1
  %2693 = mul i32 %2690, %2692
  %2694 = urem i32 %2693, 2
  %2695 = icmp eq i32 %2694, 0
  %2696 = icmp slt i32 %2691, 10
  %2697 = or i1 %2695, %2696
  br i1 %2697, label %originalBBpart2650, label %originalBB648alteredBB

originalBBpart2650:                               ; preds = %originalBB648
  br label %2698, !dbg !2549

2698:                                             ; preds = %originalBBpart2650, %2674
  %2699 = load i32, i32* @x.37
  %2700 = load i32, i32* @y.38
  %2701 = sub i32 %2699, 1
  %2702 = mul i32 %2699, %2701
  %2703 = urem i32 %2702, 2
  %2704 = icmp eq i32 %2703, 0
  %2705 = icmp slt i32 %2700, 10
  %2706 = or i1 %2704, %2705
  br i1 %2706, label %originalBB652, label %originalBB652alteredBB

originalBB652:                                    ; preds = %2698, %originalBB652alteredBB
  %2707 = load i64, i64* %21, align 8, !dbg !2552
  %2708 = add i64 %2707, 1, !dbg !2552
  store i64 %2708, i64* %21, align 8, !dbg !2552
  %2709 = load i32, i32* @x.37
  %2710 = load i32, i32* @y.38
  %2711 = sub i32 %2709, 1
  %2712 = mul i32 %2709, %2711
  %2713 = urem i32 %2712, 2
  %2714 = icmp eq i32 %2713, 0
  %2715 = icmp slt i32 %2710, 10
  %2716 = or i1 %2714, %2715
  br i1 %2716, label %originalBBpart2663, label %originalBB652alteredBB

originalBBpart2663:                               ; preds = %originalBB652
  br label %2717, !dbg !2552

2717:                                             ; preds = %originalBBpart2663
  %2718 = load i32, i32* @x.37
  %2719 = load i32, i32* @y.38
  %2720 = sub i32 %2718, 1
  %2721 = mul i32 %2718, %2720
  %2722 = urem i32 %2721, 2
  %2723 = icmp eq i32 %2722, 0
  %2724 = icmp slt i32 %2719, 10
  %2725 = or i1 %2723, %2724
  br i1 %2725, label %originalBB665, label %originalBB665alteredBB

originalBB665:                                    ; preds = %2717, %originalBB665alteredBB
  store i8 0, i8* %28, align 1, !dbg !2553
  %2726 = load i32, i32* @x.37
  %2727 = load i32, i32* @y.38
  %2728 = sub i32 %2726, 1
  %2729 = mul i32 %2726, %2728
  %2730 = urem i32 %2729, 2
  %2731 = icmp eq i32 %2730, 0
  %2732 = icmp slt i32 %2727, 10
  %2733 = or i1 %2731, %2732
  br i1 %2733, label %originalBBpart2667, label %originalBB665alteredBB

originalBBpart2667:                               ; preds = %originalBB665
  br label %2734, !dbg !2554

2734:                                             ; preds = %originalBBpart2667, %2442
  %2735 = load i32, i32* @x.37
  %2736 = load i32, i32* @y.38
  %2737 = sub i32 %2735, 1
  %2738 = mul i32 %2735, %2737
  %2739 = urem i32 %2738, 2
  %2740 = icmp eq i32 %2739, 0
  %2741 = icmp slt i32 %2736, 10
  %2742 = or i1 %2740, %2741
  br i1 %2742, label %originalBB669, label %originalBB669alteredBB

originalBB669:                                    ; preds = %2734, %originalBB669alteredBB
  %2743 = load i32, i32* @x.37
  %2744 = load i32, i32* @y.38
  %2745 = sub i32 %2743, 1
  %2746 = mul i32 %2743, %2745
  %2747 = urem i32 %2746, 2
  %2748 = icmp eq i32 %2747, 0
  %2749 = icmp slt i32 %2744, 10
  %2750 = or i1 %2748, %2749
  br i1 %2750, label %originalBBpart2671, label %originalBB669alteredBB

originalBBpart2671:                               ; preds = %originalBB669
  br label %4345, !dbg !2555

2751:                                             ; preds = %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195, %originalBBpart2195
  %2752 = load i32, i32* @x.37
  %2753 = load i32, i32* @y.38
  %2754 = sub i32 %2752, 1
  %2755 = mul i32 %2752, %2754
  %2756 = urem i32 %2755, 2
  %2757 = icmp eq i32 %2756, 0
  %2758 = icmp slt i32 %2753, 10
  %2759 = or i1 %2757, %2758
  br i1 %2759, label %originalBB673, label %originalBB673alteredBB

originalBB673:                                    ; preds = %2751, %originalBB673alteredBB
  store i8 1, i8* %35, align 1, !dbg !2556
  %2760 = load i32, i32* @x.37
  %2761 = load i32, i32* @y.38
  %2762 = sub i32 %2760, 1
  %2763 = mul i32 %2760, %2762
  %2764 = urem i32 %2763, 2
  %2765 = icmp eq i32 %2764, 0
  %2766 = icmp slt i32 %2761, 10
  %2767 = or i1 %2765, %2766
  br i1 %2767, label %originalBBpart2675, label %originalBB673alteredBB

originalBBpart2675:                               ; preds = %originalBB673
  br label %4345, !dbg !2557

2768:                                             ; preds = %originalBBpart2195
  call void @llvm.dbg.declare(metadata i64* %36, metadata !2558, metadata !DIExpression()), !dbg !2560
  call void @llvm.dbg.declare(metadata i8* %37, metadata !2561, metadata !DIExpression()), !dbg !2562
  %2769 = load i32, i32* @x.37
  %2770 = load i32, i32* @y.38
  %2771 = sub i32 %2769, 1
  %2772 = mul i32 %2769, %2771
  %2773 = urem i32 %2772, 2
  %2774 = icmp eq i32 %2773, 0
  %2775 = icmp slt i32 %2770, 10
  %2776 = or i1 %2774, %2775
  br i1 %2776, label %originalBB677, label %originalBB677alteredBB

originalBB677:                                    ; preds = %2768, %originalBB677alteredBB
  %2777 = load i8, i8* %26, align 1, !dbg !2563
  %2778 = trunc i8 %2777 to i1, !dbg !2563
  %2779 = load i32, i32* @x.37
  %2780 = load i32, i32* @y.38
  %2781 = sub i32 %2779, 1
  %2782 = mul i32 %2779, %2781
  %2783 = urem i32 %2782, 2
  %2784 = icmp eq i32 %2783, 0
  %2785 = icmp slt i32 %2780, 10
  %2786 = or i1 %2784, %2785
  br i1 %2786, label %originalBBpart2679, label %originalBB677alteredBB

originalBBpart2679:                               ; preds = %originalBB677
  br i1 %2778, label %2787, label %2799, !dbg !2565

2787:                                             ; preds = %originalBBpart2679
  store i64 1, i64* %36, align 8, !dbg !2566
  %2788 = call i16** @__ctype_b_loc() #15, !dbg !2568
  %2789 = load i16*, i16** %2788, align 8, !dbg !2568
  %2790 = load i8, i8* %31, align 1, !dbg !2568
  %2791 = zext i8 %2790 to i32, !dbg !2568
  %2792 = sext i32 %2791 to i64, !dbg !2568
  %2793 = getelementptr inbounds i16, i16* %2789, i64 %2792, !dbg !2568
  %2794 = load i16, i16* %2793, align 2, !dbg !2568
  %2795 = zext i16 %2794 to i32, !dbg !2568
  %2796 = and i32 %2795, 16384, !dbg !2568
  %2797 = icmp ne i32 %2796, 0, !dbg !2569
  %2798 = zext i1 %2797 to i8, !dbg !2570
  store i8 %2798, i8* %37, align 1, !dbg !2570
  br label %3296, !dbg !2571

2799:                                             ; preds = %originalBBpart2679
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %38, metadata !2572, metadata !DIExpression()), !dbg !2589
  %2800 = bitcast %struct.__mbstate_t* %38 to i8*, !dbg !2590
  call void @llvm.memset.p0i8.i64(i8* align 4 %2800, i8 0, i64 8, i1 false), !dbg !2590
  store i64 0, i64* %36, align 8, !dbg !2591
  store i8 1, i8* %37, align 1, !dbg !2592
  %2801 = load i64, i64* %14, align 8, !dbg !2593
  %2802 = icmp eq i64 %2801, -1, !dbg !2595
  br i1 %2802, label %2803, label %2822, !dbg !2596

2803:                                             ; preds = %2799
  %2804 = load i32, i32* @x.37
  %2805 = load i32, i32* @y.38
  %2806 = sub i32 %2804, 1
  %2807 = mul i32 %2804, %2806
  %2808 = urem i32 %2807, 2
  %2809 = icmp eq i32 %2808, 0
  %2810 = icmp slt i32 %2805, 10
  %2811 = or i1 %2809, %2810
  br i1 %2811, label %originalBB681, label %originalBB681alteredBB

originalBB681:                                    ; preds = %2803, %originalBB681alteredBB
  %2812 = load i8*, i8** %13, align 8, !dbg !2597
  %2813 = call i64 @strlen(i8* %2812) #13, !dbg !2598
  store i64 %2813, i64* %14, align 8, !dbg !2599
  %2814 = load i32, i32* @x.37
  %2815 = load i32, i32* @y.38
  %2816 = sub i32 %2814, 1
  %2817 = mul i32 %2814, %2816
  %2818 = urem i32 %2817, 2
  %2819 = icmp eq i32 %2818, 0
  %2820 = icmp slt i32 %2815, 10
  %2821 = or i1 %2819, %2820
  br i1 %2821, label %originalBBpart2683, label %originalBB681alteredBB

originalBBpart2683:                               ; preds = %originalBB681
  br label %2822, !dbg !2600

2822:                                             ; preds = %originalBBpart2683, %2799
  br label %2823, !dbg !2601

2823:                                             ; preds = %originalBBpart2815, %2822
  call void @llvm.dbg.declare(metadata i32* %39, metadata !2602, metadata !DIExpression()), !dbg !2605
  call void @llvm.dbg.declare(metadata i64* %40, metadata !2606, metadata !DIExpression()), !dbg !2607
  %2824 = load i32, i32* @x.37
  %2825 = load i32, i32* @y.38
  %2826 = sub i32 %2824, 1
  %2827 = mul i32 %2824, %2826
  %2828 = urem i32 %2827, 2
  %2829 = icmp eq i32 %2828, 0
  %2830 = icmp slt i32 %2825, 10
  %2831 = or i1 %2829, %2830
  br i1 %2831, label %originalBB685, label %originalBB685alteredBB

originalBB685:                                    ; preds = %2823, %originalBB685alteredBB
  %2832 = load i8*, i8** %13, align 8, !dbg !2608
  %2833 = load i64, i64* %20, align 8, !dbg !2609
  %2834 = load i64, i64* %36, align 8, !dbg !2610
  %2835 = add i64 %2833, %2834, !dbg !2611
  %2836 = getelementptr inbounds i8, i8* %2832, i64 %2835, !dbg !2608
  %2837 = load i64, i64* %14, align 8, !dbg !2612
  %2838 = load i64, i64* %20, align 8, !dbg !2613
  %2839 = load i64, i64* %36, align 8, !dbg !2614
  %2840 = add i64 %2838, %2839, !dbg !2615
  %2841 = sub i64 %2837, %2840, !dbg !2616
  %2842 = call i64 @rpl_mbrtowc(i32* %39, i8* %2836, i64 %2841, %struct.__mbstate_t* %38), !dbg !2617
  store i64 %2842, i64* %40, align 8, !dbg !2607
  %2843 = load i64, i64* %40, align 8, !dbg !2618
  %2844 = icmp eq i64 %2843, 0, !dbg !2620
  %2845 = load i32, i32* @x.37
  %2846 = load i32, i32* @y.38
  %2847 = sub i32 %2845, 1
  %2848 = mul i32 %2845, %2847
  %2849 = urem i32 %2848, 2
  %2850 = icmp eq i32 %2849, 0
  %2851 = icmp slt i32 %2846, 10
  %2852 = or i1 %2850, %2851
  br i1 %2852, label %originalBBpart2694, label %originalBB685alteredBB

originalBBpart2694:                               ; preds = %originalBB685
  br i1 %2844, label %2853, label %2870, !dbg !2621

2853:                                             ; preds = %originalBBpart2694
  %2854 = load i32, i32* @x.37
  %2855 = load i32, i32* @y.38
  %2856 = sub i32 %2854, 1
  %2857 = mul i32 %2854, %2856
  %2858 = urem i32 %2857, 2
  %2859 = icmp eq i32 %2858, 0
  %2860 = icmp slt i32 %2855, 10
  %2861 = or i1 %2859, %2860
  br i1 %2861, label %originalBB696, label %originalBB696alteredBB

originalBB696:                                    ; preds = %2853, %originalBB696alteredBB
  %2862 = load i32, i32* @x.37
  %2863 = load i32, i32* @y.38
  %2864 = sub i32 %2862, 1
  %2865 = mul i32 %2862, %2864
  %2866 = urem i32 %2865, 2
  %2867 = icmp eq i32 %2866, 0
  %2868 = icmp slt i32 %2863, 10
  %2869 = or i1 %2867, %2868
  br i1 %2869, label %originalBBpart2698, label %originalBB696alteredBB

originalBBpart2698:                               ; preds = %originalBB696
  br label %3279, !dbg !2622

2870:                                             ; preds = %originalBBpart2694
  %2871 = load i32, i32* @x.37
  %2872 = load i32, i32* @y.38
  %2873 = sub i32 %2871, 1
  %2874 = mul i32 %2871, %2873
  %2875 = urem i32 %2874, 2
  %2876 = icmp eq i32 %2875, 0
  %2877 = icmp slt i32 %2872, 10
  %2878 = or i1 %2876, %2877
  br i1 %2878, label %originalBB700, label %originalBB700alteredBB

originalBB700:                                    ; preds = %2870, %originalBB700alteredBB
  %2879 = load i64, i64* %40, align 8, !dbg !2623
  %2880 = icmp eq i64 %2879, -1, !dbg !2625
  %2881 = load i32, i32* @x.37
  %2882 = load i32, i32* @y.38
  %2883 = sub i32 %2881, 1
  %2884 = mul i32 %2881, %2883
  %2885 = urem i32 %2884, 2
  %2886 = icmp eq i32 %2885, 0
  %2887 = icmp slt i32 %2882, 10
  %2888 = or i1 %2886, %2887
  br i1 %2888, label %originalBBpart2702, label %originalBB700alteredBB

originalBBpart2702:                               ; preds = %originalBB700
  br i1 %2880, label %2889, label %2906, !dbg !2626

2889:                                             ; preds = %originalBBpart2702
  %2890 = load i32, i32* @x.37
  %2891 = load i32, i32* @y.38
  %2892 = sub i32 %2890, 1
  %2893 = mul i32 %2890, %2892
  %2894 = urem i32 %2893, 2
  %2895 = icmp eq i32 %2894, 0
  %2896 = icmp slt i32 %2891, 10
  %2897 = or i1 %2895, %2896
  br i1 %2897, label %originalBB704, label %originalBB704alteredBB

originalBB704:                                    ; preds = %2889, %originalBB704alteredBB
  store i8 0, i8* %37, align 1, !dbg !2627
  %2898 = load i32, i32* @x.37
  %2899 = load i32, i32* @y.38
  %2900 = sub i32 %2898, 1
  %2901 = mul i32 %2898, %2900
  %2902 = urem i32 %2901, 2
  %2903 = icmp eq i32 %2902, 0
  %2904 = icmp slt i32 %2899, 10
  %2905 = or i1 %2903, %2904
  br i1 %2905, label %originalBBpart2706, label %originalBB704alteredBB

originalBBpart2706:                               ; preds = %originalBB704
  br label %3279, !dbg !2629

2906:                                             ; preds = %originalBBpart2702
  %2907 = load i32, i32* @x.37
  %2908 = load i32, i32* @y.38
  %2909 = sub i32 %2907, 1
  %2910 = mul i32 %2907, %2909
  %2911 = urem i32 %2910, 2
  %2912 = icmp eq i32 %2911, 0
  %2913 = icmp slt i32 %2908, 10
  %2914 = or i1 %2912, %2913
  br i1 %2914, label %originalBB708, label %originalBB708alteredBB

originalBB708:                                    ; preds = %2906, %originalBB708alteredBB
  %2915 = load i64, i64* %40, align 8, !dbg !2630
  %2916 = icmp eq i64 %2915, -2, !dbg !2632
  %2917 = load i32, i32* @x.37
  %2918 = load i32, i32* @y.38
  %2919 = sub i32 %2917, 1
  %2920 = mul i32 %2917, %2919
  %2921 = urem i32 %2920, 2
  %2922 = icmp eq i32 %2921, 0
  %2923 = icmp slt i32 %2918, 10
  %2924 = or i1 %2922, %2923
  br i1 %2924, label %originalBBpart2710, label %originalBB708alteredBB

originalBBpart2710:                               ; preds = %originalBB708
  br i1 %2916, label %2925, label %3043, !dbg !2633

2925:                                             ; preds = %originalBBpart2710
  %2926 = load i32, i32* @x.37
  %2927 = load i32, i32* @y.38
  %2928 = sub i32 %2926, 1
  %2929 = mul i32 %2926, %2928
  %2930 = urem i32 %2929, 2
  %2931 = icmp eq i32 %2930, 0
  %2932 = icmp slt i32 %2927, 10
  %2933 = or i1 %2931, %2932
  br i1 %2933, label %originalBB712, label %originalBB712alteredBB

originalBB712:                                    ; preds = %2925, %originalBB712alteredBB
  store i8 0, i8* %37, align 1, !dbg !2634
  %2934 = load i32, i32* @x.37
  %2935 = load i32, i32* @y.38
  %2936 = sub i32 %2934, 1
  %2937 = mul i32 %2934, %2936
  %2938 = urem i32 %2937, 2
  %2939 = icmp eq i32 %2938, 0
  %2940 = icmp slt i32 %2935, 10
  %2941 = or i1 %2939, %2940
  br i1 %2941, label %originalBBpart2714, label %originalBB712alteredBB

originalBBpart2714:                               ; preds = %originalBB712
  br label %2942, !dbg !2636

2942:                                             ; preds = %originalBBpart2733, %originalBBpart2714
  %2943 = load i32, i32* @x.37
  %2944 = load i32, i32* @y.38
  %2945 = sub i32 %2943, 1
  %2946 = mul i32 %2943, %2945
  %2947 = urem i32 %2946, 2
  %2948 = icmp eq i32 %2947, 0
  %2949 = icmp slt i32 %2944, 10
  %2950 = or i1 %2948, %2949
  br i1 %2950, label %originalBB716, label %originalBB716alteredBB

originalBB716:                                    ; preds = %2942, %originalBB716alteredBB
  %2951 = load i64, i64* %20, align 8, !dbg !2637
  %2952 = load i64, i64* %36, align 8, !dbg !2638
  %2953 = add i64 %2951, %2952, !dbg !2639
  %2954 = load i64, i64* %14, align 8, !dbg !2640
  %2955 = icmp ult i64 %2953, %2954, !dbg !2641
  %2956 = load i32, i32* @x.37
  %2957 = load i32, i32* @y.38
  %2958 = sub i32 %2956, 1
  %2959 = mul i32 %2956, %2958
  %2960 = urem i32 %2959, 2
  %2961 = icmp eq i32 %2960, 0
  %2962 = icmp slt i32 %2957, 10
  %2963 = or i1 %2961, %2962
  br i1 %2963, label %originalBBpart2718, label %originalBB716alteredBB

originalBBpart2718:                               ; preds = %originalBB716
  br i1 %2955, label %2964, label %2989, !dbg !2642

2964:                                             ; preds = %originalBBpart2718
  %2965 = load i32, i32* @x.37
  %2966 = load i32, i32* @y.38
  %2967 = sub i32 %2965, 1
  %2968 = mul i32 %2965, %2967
  %2969 = urem i32 %2968, 2
  %2970 = icmp eq i32 %2969, 0
  %2971 = icmp slt i32 %2966, 10
  %2972 = or i1 %2970, %2971
  br i1 %2972, label %originalBB720, label %originalBB720alteredBB

originalBB720:                                    ; preds = %2964, %originalBB720alteredBB
  %2973 = load i8*, i8** %13, align 8, !dbg !2643
  %2974 = load i64, i64* %20, align 8, !dbg !2644
  %2975 = load i64, i64* %36, align 8, !dbg !2645
  %2976 = add i64 %2974, %2975, !dbg !2646
  %2977 = getelementptr inbounds i8, i8* %2973, i64 %2976, !dbg !2643
  %2978 = load i8, i8* %2977, align 1, !dbg !2643
  %2979 = sext i8 %2978 to i32, !dbg !2643
  %2980 = icmp ne i32 %2979, 0, !dbg !2642
  %2981 = load i32, i32* @x.37
  %2982 = load i32, i32* @y.38
  %2983 = sub i32 %2981, 1
  %2984 = mul i32 %2981, %2983
  %2985 = urem i32 %2984, 2
  %2986 = icmp eq i32 %2985, 0
  %2987 = icmp slt i32 %2982, 10
  %2988 = or i1 %2986, %2987
  br i1 %2988, label %originalBBpart2724, label %originalBB720alteredBB

originalBBpart2724:                               ; preds = %originalBB720
  br label %2989

2989:                                             ; preds = %originalBBpart2724, %originalBBpart2718
  %2990 = phi i1 [ false, %originalBBpart2718 ], [ %2980, %originalBBpart2724 ], !dbg !2647
  %2991 = load i32, i32* @x.37
  %2992 = load i32, i32* @y.38
  %2993 = sub i32 %2991, 1
  %2994 = mul i32 %2991, %2993
  %2995 = urem i32 %2994, 2
  %2996 = icmp eq i32 %2995, 0
  %2997 = icmp slt i32 %2992, 10
  %2998 = or i1 %2996, %2997
  br i1 %2998, label %originalBB726, label %originalBB726alteredBB

originalBB726:                                    ; preds = %2989, %originalBB726alteredBB
  %2999 = load i32, i32* @x.37
  %3000 = load i32, i32* @y.38
  %3001 = sub i32 %2999, 1
  %3002 = mul i32 %2999, %3001
  %3003 = urem i32 %3002, 2
  %3004 = icmp eq i32 %3003, 0
  %3005 = icmp slt i32 %3000, 10
  %3006 = or i1 %3004, %3005
  br i1 %3006, label %originalBBpart2728, label %originalBB726alteredBB

originalBBpart2728:                               ; preds = %originalBB726
  br i1 %2990, label %3007, label %3026, !dbg !2636

3007:                                             ; preds = %originalBBpart2728
  %3008 = load i32, i32* @x.37
  %3009 = load i32, i32* @y.38
  %3010 = sub i32 %3008, 1
  %3011 = mul i32 %3008, %3010
  %3012 = urem i32 %3011, 2
  %3013 = icmp eq i32 %3012, 0
  %3014 = icmp slt i32 %3009, 10
  %3015 = or i1 %3013, %3014
  br i1 %3015, label %originalBB730, label %originalBB730alteredBB

originalBB730:                                    ; preds = %3007, %originalBB730alteredBB
  %3016 = load i64, i64* %36, align 8, !dbg !2648
  %3017 = add i64 %3016, 1, !dbg !2648
  store i64 %3017, i64* %36, align 8, !dbg !2648
  %3018 = load i32, i32* @x.37
  %3019 = load i32, i32* @y.38
  %3020 = sub i32 %3018, 1
  %3021 = mul i32 %3018, %3020
  %3022 = urem i32 %3021, 2
  %3023 = icmp eq i32 %3022, 0
  %3024 = icmp slt i32 %3019, 10
  %3025 = or i1 %3023, %3024
  br i1 %3025, label %originalBBpart2733, label %originalBB730alteredBB

originalBBpart2733:                               ; preds = %originalBB730
  br label %2942, !dbg !2636, !llvm.loop !2649

3026:                                             ; preds = %originalBBpart2728
  %3027 = load i32, i32* @x.37
  %3028 = load i32, i32* @y.38
  %3029 = sub i32 %3027, 1
  %3030 = mul i32 %3027, %3029
  %3031 = urem i32 %3030, 2
  %3032 = icmp eq i32 %3031, 0
  %3033 = icmp slt i32 %3028, 10
  %3034 = or i1 %3032, %3033
  br i1 %3034, label %originalBB735, label %originalBB735alteredBB

originalBB735:                                    ; preds = %3026, %originalBB735alteredBB
  %3035 = load i32, i32* @x.37
  %3036 = load i32, i32* @y.38
  %3037 = sub i32 %3035, 1
  %3038 = mul i32 %3035, %3037
  %3039 = urem i32 %3038, 2
  %3040 = icmp eq i32 %3039, 0
  %3041 = icmp slt i32 %3036, 10
  %3042 = or i1 %3040, %3041
  br i1 %3042, label %originalBBpart2737, label %originalBB735alteredBB

originalBBpart2737:                               ; preds = %originalBB735
  br label %3279, !dbg !2650

3043:                                             ; preds = %originalBBpart2710
  %3044 = load i32, i32* @x.37
  %3045 = load i32, i32* @y.38
  %3046 = sub i32 %3044, 1
  %3047 = mul i32 %3044, %3046
  %3048 = urem i32 %3047, 2
  %3049 = icmp eq i32 %3048, 0
  %3050 = icmp slt i32 %3045, 10
  %3051 = or i1 %3049, %3050
  br i1 %3051, label %originalBB739, label %originalBB739alteredBB

originalBB739:                                    ; preds = %3043, %originalBB739alteredBB
  %3052 = load i8, i8* %27, align 1, !dbg !2651
  %3053 = trunc i8 %3052 to i1, !dbg !2651
  %3054 = load i32, i32* @x.37
  %3055 = load i32, i32* @y.38
  %3056 = sub i32 %3054, 1
  %3057 = mul i32 %3054, %3056
  %3058 = urem i32 %3057, 2
  %3059 = icmp eq i32 %3058, 0
  %3060 = icmp slt i32 %3055, 10
  %3061 = or i1 %3059, %3060
  br i1 %3061, label %originalBBpart2741, label %originalBB739alteredBB

originalBBpart2741:                               ; preds = %originalBB739
  br i1 %3053, label %3062, label %3151, !dbg !2654

3062:                                             ; preds = %originalBBpart2741
  %3063 = load i32, i32* %15, align 4, !dbg !2655
  %3064 = icmp eq i32 %3063, 2, !dbg !2656
  br i1 %3064, label %3065, label %3151, !dbg !2657

3065:                                             ; preds = %3062
  call void @llvm.dbg.declare(metadata i64* %41, metadata !2658, metadata !DIExpression()), !dbg !2660
  %3066 = load i32, i32* @x.37
  %3067 = load i32, i32* @y.38
  %3068 = sub i32 %3066, 1
  %3069 = mul i32 %3066, %3068
  %3070 = urem i32 %3069, 2
  %3071 = icmp eq i32 %3070, 0
  %3072 = icmp slt i32 %3067, 10
  %3073 = or i1 %3071, %3072
  br i1 %3073, label %originalBB743, label %originalBB743alteredBB

originalBB743:                                    ; preds = %3065, %originalBB743alteredBB
  store i64 1, i64* %41, align 8, !dbg !2661
  %3074 = load i32, i32* @x.37
  %3075 = load i32, i32* @y.38
  %3076 = sub i32 %3074, 1
  %3077 = mul i32 %3074, %3076
  %3078 = urem i32 %3077, 2
  %3079 = icmp eq i32 %3078, 0
  %3080 = icmp slt i32 %3075, 10
  %3081 = or i1 %3079, %3080
  br i1 %3081, label %originalBBpart2745, label %originalBB743alteredBB

originalBBpart2745:                               ; preds = %originalBB743
  br label %3082, !dbg !2663

3082:                                             ; preds = %originalBBpart2769, %originalBBpart2745
  %3083 = load i32, i32* @x.37
  %3084 = load i32, i32* @y.38
  %3085 = sub i32 %3083, 1
  %3086 = mul i32 %3083, %3085
  %3087 = urem i32 %3086, 2
  %3088 = icmp eq i32 %3087, 0
  %3089 = icmp slt i32 %3084, 10
  %3090 = or i1 %3088, %3089
  br i1 %3090, label %originalBB747, label %originalBB747alteredBB

originalBB747:                                    ; preds = %3082, %originalBB747alteredBB
  %3091 = load i64, i64* %41, align 8, !dbg !2664
  %3092 = load i64, i64* %40, align 8, !dbg !2666
  %3093 = icmp ult i64 %3091, %3092, !dbg !2667
  %3094 = load i32, i32* @x.37
  %3095 = load i32, i32* @y.38
  %3096 = sub i32 %3094, 1
  %3097 = mul i32 %3094, %3096
  %3098 = urem i32 %3097, 2
  %3099 = icmp eq i32 %3098, 0
  %3100 = icmp slt i32 %3095, 10
  %3101 = or i1 %3099, %3100
  br i1 %3101, label %originalBBpart2749, label %originalBB747alteredBB

originalBBpart2749:                               ; preds = %originalBB747
  br i1 %3093, label %3102, label %3150, !dbg !2668

3102:                                             ; preds = %originalBBpart2749
  %3103 = load i8*, i8** %13, align 8, !dbg !2669
  %3104 = load i64, i64* %20, align 8, !dbg !2670
  %3105 = load i64, i64* %36, align 8, !dbg !2671
  %3106 = add i64 %3104, %3105, !dbg !2672
  %3107 = load i64, i64* %41, align 8, !dbg !2673
  %3108 = add i64 %3106, %3107, !dbg !2674
  %3109 = getelementptr inbounds i8, i8* %3103, i64 %3108, !dbg !2669
  %3110 = load i8, i8* %3109, align 1, !dbg !2669
  %3111 = sext i8 %3110 to i32, !dbg !2669
  switch i32 %3111, label %3129 [
    i32 91, label %3112
    i32 92, label %3112
    i32 94, label %3112
    i32 96, label %3112
    i32 124, label %3112
  ], !dbg !2675

3112:                                             ; preds = %3102, %3102, %3102, %3102, %3102
  %3113 = load i32, i32* @x.37
  %3114 = load i32, i32* @y.38
  %3115 = sub i32 %3113, 1
  %3116 = mul i32 %3113, %3115
  %3117 = urem i32 %3116, 2
  %3118 = icmp eq i32 %3117, 0
  %3119 = icmp slt i32 %3114, 10
  %3120 = or i1 %3118, %3119
  br i1 %3120, label %originalBB751, label %originalBB751alteredBB

originalBB751:                                    ; preds = %3112, %originalBB751alteredBB
  %3121 = load i32, i32* @x.37
  %3122 = load i32, i32* @y.38
  %3123 = sub i32 %3121, 1
  %3124 = mul i32 %3121, %3123
  %3125 = urem i32 %3124, 2
  %3126 = icmp eq i32 %3125, 0
  %3127 = icmp slt i32 %3122, 10
  %3128 = or i1 %3126, %3127
  br i1 %3128, label %originalBBpart2753, label %originalBB751alteredBB

originalBBpart2753:                               ; preds = %originalBB751
  br label %5470, !dbg !2676

3129:                                             ; preds = %3102
  br label %3130, !dbg !2678

3130:                                             ; preds = %3129
  br label %3131, !dbg !2679

3131:                                             ; preds = %3130
  %3132 = load i32, i32* @x.37
  %3133 = load i32, i32* @y.38
  %3134 = sub i32 %3132, 1
  %3135 = mul i32 %3132, %3134
  %3136 = urem i32 %3135, 2
  %3137 = icmp eq i32 %3136, 0
  %3138 = icmp slt i32 %3133, 10
  %3139 = or i1 %3137, %3138
  br i1 %3139, label %originalBB755, label %originalBB755alteredBB

originalBB755:                                    ; preds = %3131, %originalBB755alteredBB
  %3140 = load i64, i64* %41, align 8, !dbg !2680
  %3141 = add i64 %3140, 1, !dbg !2680
  store i64 %3141, i64* %41, align 8, !dbg !2680
  %3142 = load i32, i32* @x.37
  %3143 = load i32, i32* @y.38
  %3144 = sub i32 %3142, 1
  %3145 = mul i32 %3142, %3144
  %3146 = urem i32 %3145, 2
  %3147 = icmp eq i32 %3146, 0
  %3148 = icmp slt i32 %3143, 10
  %3149 = or i1 %3147, %3148
  br i1 %3149, label %originalBBpart2769, label %originalBB755alteredBB

originalBBpart2769:                               ; preds = %originalBB755
  br label %3082, !dbg !2681, !llvm.loop !2682

3150:                                             ; preds = %originalBBpart2749
  br label %3151, !dbg !2684

3151:                                             ; preds = %3150, %3062, %originalBBpart2741
  %3152 = load i32, i32* @x.37
  %3153 = load i32, i32* @y.38
  %3154 = sub i32 %3152, 1
  %3155 = mul i32 %3152, %3154
  %3156 = urem i32 %3155, 2
  %3157 = icmp eq i32 %3156, 0
  %3158 = icmp slt i32 %3153, 10
  %3159 = or i1 %3157, %3158
  br i1 %3159, label %originalBB771, label %originalBB771alteredBB

originalBB771:                                    ; preds = %3151, %originalBB771alteredBB
  %3160 = load i32, i32* %39, align 4, !dbg !2685
  %3161 = call i32 @iswprint(i32 %3160) #10, !dbg !2687
  %3162 = icmp ne i32 %3161, 0, !dbg !2687
  %3163 = load i32, i32* @x.37
  %3164 = load i32, i32* @y.38
  %3165 = sub i32 %3163, 1
  %3166 = mul i32 %3163, %3165
  %3167 = urem i32 %3166, 2
  %3168 = icmp eq i32 %3167, 0
  %3169 = icmp slt i32 %3164, 10
  %3170 = or i1 %3168, %3169
  br i1 %3170, label %originalBBpart2773, label %originalBB771alteredBB

originalBBpart2773:                               ; preds = %originalBB771
  br i1 %3162, label %3188, label %3171, !dbg !2688

3171:                                             ; preds = %originalBBpart2773
  %3172 = load i32, i32* @x.37
  %3173 = load i32, i32* @y.38
  %3174 = sub i32 %3172, 1
  %3175 = mul i32 %3172, %3174
  %3176 = urem i32 %3175, 2
  %3177 = icmp eq i32 %3176, 0
  %3178 = icmp slt i32 %3173, 10
  %3179 = or i1 %3177, %3178
  br i1 %3179, label %originalBB775, label %originalBB775alteredBB

originalBB775:                                    ; preds = %3171, %originalBB775alteredBB
  store i8 0, i8* %37, align 1, !dbg !2689
  %3180 = load i32, i32* @x.37
  %3181 = load i32, i32* @y.38
  %3182 = sub i32 %3180, 1
  %3183 = mul i32 %3180, %3182
  %3184 = urem i32 %3183, 2
  %3185 = icmp eq i32 %3184, 0
  %3186 = icmp slt i32 %3181, 10
  %3187 = or i1 %3185, %3186
  br i1 %3187, label %originalBBpart2777, label %originalBB775alteredBB

originalBBpart2777:                               ; preds = %originalBB775
  br label %3188, !dbg !2690

3188:                                             ; preds = %originalBBpart2777, %originalBBpart2773
  %3189 = load i32, i32* @x.37
  %3190 = load i32, i32* @y.38
  %3191 = sub i32 %3189, 1
  %3192 = mul i32 %3189, %3191
  %3193 = urem i32 %3192, 2
  %3194 = icmp eq i32 %3193, 0
  %3195 = icmp slt i32 %3190, 10
  %3196 = or i1 %3194, %3195
  br i1 %3196, label %originalBB779, label %originalBB779alteredBB

originalBB779:                                    ; preds = %3188, %originalBB779alteredBB
  %3197 = load i64, i64* %40, align 8, !dbg !2691
  %3198 = load i64, i64* %36, align 8, !dbg !2692
  %3199 = add i64 %3198, %3197, !dbg !2692
  store i64 %3199, i64* %36, align 8, !dbg !2692
  %3200 = load i32, i32* @x.37
  %3201 = load i32, i32* @y.38
  %3202 = sub i32 %3200, 1
  %3203 = mul i32 %3200, %3202
  %3204 = urem i32 %3203, 2
  %3205 = icmp eq i32 %3204, 0
  %3206 = icmp slt i32 %3201, 10
  %3207 = or i1 %3205, %3206
  br i1 %3207, label %originalBBpart2788, label %originalBB779alteredBB

originalBBpart2788:                               ; preds = %originalBB779
  br label %3208

3208:                                             ; preds = %originalBBpart2788
  %3209 = load i32, i32* @x.37
  %3210 = load i32, i32* @y.38
  %3211 = sub i32 %3209, 1
  %3212 = mul i32 %3209, %3211
  %3213 = urem i32 %3212, 2
  %3214 = icmp eq i32 %3213, 0
  %3215 = icmp slt i32 %3210, 10
  %3216 = or i1 %3214, %3215
  br i1 %3216, label %originalBB790, label %originalBB790alteredBB

originalBB790:                                    ; preds = %3208, %originalBB790alteredBB
  %3217 = load i32, i32* @x.37
  %3218 = load i32, i32* @y.38
  %3219 = sub i32 %3217, 1
  %3220 = mul i32 %3217, %3219
  %3221 = urem i32 %3220, 2
  %3222 = icmp eq i32 %3221, 0
  %3223 = icmp slt i32 %3218, 10
  %3224 = or i1 %3222, %3223
  br i1 %3224, label %originalBBpart2792, label %originalBB790alteredBB

originalBBpart2792:                               ; preds = %originalBB790
  br label %3225

3225:                                             ; preds = %originalBBpart2792
  %3226 = load i32, i32* @x.37
  %3227 = load i32, i32* @y.38
  %3228 = sub i32 %3226, 1
  %3229 = mul i32 %3226, %3228
  %3230 = urem i32 %3229, 2
  %3231 = icmp eq i32 %3230, 0
  %3232 = icmp slt i32 %3227, 10
  %3233 = or i1 %3231, %3232
  br i1 %3233, label %originalBB794, label %originalBB794alteredBB

originalBB794:                                    ; preds = %3225, %originalBB794alteredBB
  %3234 = load i32, i32* @x.37
  %3235 = load i32, i32* @y.38
  %3236 = sub i32 %3234, 1
  %3237 = mul i32 %3234, %3236
  %3238 = urem i32 %3237, 2
  %3239 = icmp eq i32 %3238, 0
  %3240 = icmp slt i32 %3235, 10
  %3241 = or i1 %3239, %3240
  br i1 %3241, label %originalBBpart2796, label %originalBB794alteredBB

originalBBpart2796:                               ; preds = %originalBB794
  br label %3242

3242:                                             ; preds = %originalBBpart2796
  %3243 = load i32, i32* @x.37
  %3244 = load i32, i32* @y.38
  %3245 = sub i32 %3243, 1
  %3246 = mul i32 %3243, %3245
  %3247 = urem i32 %3246, 2
  %3248 = icmp eq i32 %3247, 0
  %3249 = icmp slt i32 %3244, 10
  %3250 = or i1 %3248, %3249
  br i1 %3250, label %originalBB798, label %originalBB798alteredBB

originalBB798:                                    ; preds = %3242, %originalBB798alteredBB
  %3251 = load i32, i32* @x.37
  %3252 = load i32, i32* @y.38
  %3253 = sub i32 %3251, 1
  %3254 = mul i32 %3251, %3253
  %3255 = urem i32 %3254, 2
  %3256 = icmp eq i32 %3255, 0
  %3257 = icmp slt i32 %3252, 10
  %3258 = or i1 %3256, %3257
  br i1 %3258, label %originalBBpart2800, label %originalBB798alteredBB

originalBBpart2800:                               ; preds = %originalBB798
  br label %3259, !dbg !2693

3259:                                             ; preds = %originalBBpart2800
  %3260 = load i32, i32* @x.37
  %3261 = load i32, i32* @y.38
  %3262 = sub i32 %3260, 1
  %3263 = mul i32 %3260, %3262
  %3264 = urem i32 %3263, 2
  %3265 = icmp eq i32 %3264, 0
  %3266 = icmp slt i32 %3261, 10
  %3267 = or i1 %3265, %3266
  br i1 %3267, label %originalBB802, label %originalBB802alteredBB

originalBB802:                                    ; preds = %3259, %originalBB802alteredBB
  %3268 = call i32 @mbsinit(%struct.__mbstate_t* %38) #13, !dbg !2694
  %3269 = icmp ne i32 %3268, 0, !dbg !2695
  %3270 = xor i1 %3269, true, !dbg !2695
  %3271 = load i32, i32* @x.37
  %3272 = load i32, i32* @y.38
  %3273 = sub i32 %3271, 1
  %3274 = mul i32 %3271, %3273
  %3275 = urem i32 %3274, 2
  %3276 = icmp eq i32 %3275, 0
  %3277 = icmp slt i32 %3272, 10
  %3278 = or i1 %3276, %3277
  br i1 %3278, label %originalBBpart2815, label %originalBB802alteredBB

originalBBpart2815:                               ; preds = %originalBB802
  br i1 %3270, label %2823, label %3279, !dbg !2693, !llvm.loop !2696

3279:                                             ; preds = %originalBBpart2815, %originalBBpart2737, %originalBBpart2706, %originalBBpart2698
  %3280 = load i32, i32* @x.37
  %3281 = load i32, i32* @y.38
  %3282 = sub i32 %3280, 1
  %3283 = mul i32 %3280, %3282
  %3284 = urem i32 %3283, 2
  %3285 = icmp eq i32 %3284, 0
  %3286 = icmp slt i32 %3281, 10
  %3287 = or i1 %3285, %3286
  br i1 %3287, label %originalBB817, label %originalBB817alteredBB

originalBB817:                                    ; preds = %3279, %originalBB817alteredBB
  %3288 = load i32, i32* @x.37
  %3289 = load i32, i32* @y.38
  %3290 = sub i32 %3288, 1
  %3291 = mul i32 %3288, %3290
  %3292 = urem i32 %3291, 2
  %3293 = icmp eq i32 %3292, 0
  %3294 = icmp slt i32 %3289, 10
  %3295 = or i1 %3293, %3294
  br i1 %3295, label %originalBBpart2819, label %originalBB817alteredBB

originalBBpart2819:                               ; preds = %originalBB817
  br label %3296

3296:                                             ; preds = %originalBBpart2819, %2787
  %3297 = load i32, i32* @x.37
  %3298 = load i32, i32* @y.38
  %3299 = sub i32 %3297, 1
  %3300 = mul i32 %3297, %3299
  %3301 = urem i32 %3300, 2
  %3302 = icmp eq i32 %3301, 0
  %3303 = icmp slt i32 %3298, 10
  %3304 = or i1 %3302, %3303
  br i1 %3304, label %originalBB821, label %originalBB821alteredBB

originalBB821:                                    ; preds = %3296, %originalBB821alteredBB
  %3305 = load i8, i8* %37, align 1, !dbg !2698
  %3306 = trunc i8 %3305 to i1, !dbg !2698
  %3307 = zext i1 %3306 to i8, !dbg !2699
  store i8 %3307, i8* %35, align 1, !dbg !2699
  %3308 = load i64, i64* %36, align 8, !dbg !2700
  %3309 = icmp ult i64 1, %3308, !dbg !2702
  %3310 = load i32, i32* @x.37
  %3311 = load i32, i32* @y.38
  %3312 = sub i32 %3310, 1
  %3313 = mul i32 %3310, %3312
  %3314 = urem i32 %3313, 2
  %3315 = icmp eq i32 %3314, 0
  %3316 = icmp slt i32 %3311, 10
  %3317 = or i1 %3315, %3316
  br i1 %3317, label %originalBBpart2823, label %originalBB821alteredBB

originalBBpart2823:                               ; preds = %originalBB821
  br i1 %3309, label %3356, label %3318, !dbg !2703

3318:                                             ; preds = %originalBBpart2823
  %3319 = load i32, i32* @x.37
  %3320 = load i32, i32* @y.38
  %3321 = sub i32 %3319, 1
  %3322 = mul i32 %3319, %3321
  %3323 = urem i32 %3322, 2
  %3324 = icmp eq i32 %3323, 0
  %3325 = icmp slt i32 %3320, 10
  %3326 = or i1 %3324, %3325
  br i1 %3326, label %originalBB825, label %originalBB825alteredBB

originalBB825:                                    ; preds = %3318, %originalBB825alteredBB
  %3327 = load i8, i8* %25, align 1, !dbg !2704
  %3328 = trunc i8 %3327 to i1, !dbg !2704
  %3329 = load i32, i32* @x.37
  %3330 = load i32, i32* @y.38
  %3331 = sub i32 %3329, 1
  %3332 = mul i32 %3329, %3331
  %3333 = urem i32 %3332, 2
  %3334 = icmp eq i32 %3333, 0
  %3335 = icmp slt i32 %3330, 10
  %3336 = or i1 %3334, %3335
  br i1 %3336, label %originalBBpart2827, label %originalBB825alteredBB

originalBBpart2827:                               ; preds = %originalBB825
  br i1 %3328, label %3337, label %4328, !dbg !2705

3337:                                             ; preds = %originalBBpart2827
  %3338 = load i32, i32* @x.37
  %3339 = load i32, i32* @y.38
  %3340 = sub i32 %3338, 1
  %3341 = mul i32 %3338, %3340
  %3342 = urem i32 %3341, 2
  %3343 = icmp eq i32 %3342, 0
  %3344 = icmp slt i32 %3339, 10
  %3345 = or i1 %3343, %3344
  br i1 %3345, label %originalBB829, label %originalBB829alteredBB

originalBB829:                                    ; preds = %3337, %originalBB829alteredBB
  %3346 = load i8, i8* %37, align 1, !dbg !2706
  %3347 = trunc i8 %3346 to i1, !dbg !2706
  %3348 = load i32, i32* @x.37
  %3349 = load i32, i32* @y.38
  %3350 = sub i32 %3348, 1
  %3351 = mul i32 %3348, %3350
  %3352 = urem i32 %3351, 2
  %3353 = icmp eq i32 %3352, 0
  %3354 = icmp slt i32 %3349, 10
  %3355 = or i1 %3353, %3354
  br i1 %3355, label %originalBBpart2831, label %originalBB829alteredBB

originalBBpart2831:                               ; preds = %originalBB829
  br i1 %3347, label %4328, label %3356, !dbg !2707

3356:                                             ; preds = %originalBBpart2831, %originalBBpart2823
  call void @llvm.dbg.declare(metadata i64* %42, metadata !2708, metadata !DIExpression()), !dbg !2710
  %3357 = load i64, i64* %20, align 8, !dbg !2711
  %3358 = load i64, i64* %36, align 8, !dbg !2712
  %3359 = add i64 %3357, %3358, !dbg !2713
  store i64 %3359, i64* %42, align 8, !dbg !2710
  br label %3360, !dbg !2714

3360:                                             ; preds = %originalBBpart21130, %3356
  %3361 = load i32, i32* @x.37
  %3362 = load i32, i32* @y.38
  %3363 = sub i32 %3361, 1
  %3364 = mul i32 %3361, %3363
  %3365 = urem i32 %3364, 2
  %3366 = icmp eq i32 %3365, 0
  %3367 = icmp slt i32 %3362, 10
  %3368 = or i1 %3366, %3367
  br i1 %3368, label %originalBB833, label %originalBB833alteredBB

originalBB833:                                    ; preds = %3360, %originalBB833alteredBB
  %3369 = load i8, i8* %25, align 1, !dbg !2715
  %3370 = trunc i8 %3369 to i1, !dbg !2715
  %3371 = load i32, i32* @x.37
  %3372 = load i32, i32* @y.38
  %3373 = sub i32 %3371, 1
  %3374 = mul i32 %3371, %3373
  %3375 = urem i32 %3374, 2
  %3376 = icmp eq i32 %3375, 0
  %3377 = icmp slt i32 %3372, 10
  %3378 = or i1 %3376, %3377
  br i1 %3378, label %originalBBpart2835, label %originalBB833alteredBB

originalBBpart2835:                               ; preds = %originalBB833
  br i1 %3370, label %3379, label %3900, !dbg !2720

3379:                                             ; preds = %originalBBpart2835
  %3380 = load i32, i32* @x.37
  %3381 = load i32, i32* @y.38
  %3382 = sub i32 %3380, 1
  %3383 = mul i32 %3380, %3382
  %3384 = urem i32 %3383, 2
  %3385 = icmp eq i32 %3384, 0
  %3386 = icmp slt i32 %3381, 10
  %3387 = or i1 %3385, %3386
  br i1 %3387, label %originalBB837, label %originalBB837alteredBB

originalBB837:                                    ; preds = %3379, %originalBB837alteredBB
  %3388 = load i8, i8* %37, align 1, !dbg !2721
  %3389 = trunc i8 %3388 to i1, !dbg !2721
  %3390 = load i32, i32* @x.37
  %3391 = load i32, i32* @y.38
  %3392 = sub i32 %3390, 1
  %3393 = mul i32 %3390, %3392
  %3394 = urem i32 %3393, 2
  %3395 = icmp eq i32 %3394, 0
  %3396 = icmp slt i32 %3391, 10
  %3397 = or i1 %3395, %3396
  br i1 %3397, label %originalBBpart2839, label %originalBB837alteredBB

originalBBpart2839:                               ; preds = %originalBB837
  br i1 %3389, label %3900, label %3398, !dbg !2722

3398:                                             ; preds = %originalBBpart2839
  %3399 = load i32, i32* @x.37
  %3400 = load i32, i32* @y.38
  %3401 = sub i32 %3399, 1
  %3402 = mul i32 %3399, %3401
  %3403 = urem i32 %3402, 2
  %3404 = icmp eq i32 %3403, 0
  %3405 = icmp slt i32 %3400, 10
  %3406 = or i1 %3404, %3405
  br i1 %3406, label %originalBB841, label %originalBB841alteredBB

originalBB841:                                    ; preds = %3398, %originalBB841alteredBB
  %3407 = load i32, i32* @x.37
  %3408 = load i32, i32* @y.38
  %3409 = sub i32 %3407, 1
  %3410 = mul i32 %3407, %3409
  %3411 = urem i32 %3410, 2
  %3412 = icmp eq i32 %3411, 0
  %3413 = icmp slt i32 %3408, 10
  %3414 = or i1 %3412, %3413
  br i1 %3414, label %originalBBpart2843, label %originalBB841alteredBB

originalBBpart2843:                               ; preds = %originalBB841
  br label %3415, !dbg !2723

3415:                                             ; preds = %originalBBpart2843
  %3416 = load i32, i32* @x.37
  %3417 = load i32, i32* @y.38
  %3418 = sub i32 %3416, 1
  %3419 = mul i32 %3416, %3418
  %3420 = urem i32 %3419, 2
  %3421 = icmp eq i32 %3420, 0
  %3422 = icmp slt i32 %3417, 10
  %3423 = or i1 %3421, %3422
  br i1 %3423, label %originalBB845, label %originalBB845alteredBB

originalBB845:                                    ; preds = %3415, %originalBB845alteredBB
  %3424 = load i8, i8* %27, align 1, !dbg !2725
  %3425 = trunc i8 %3424 to i1, !dbg !2725
  %3426 = load i32, i32* @x.37
  %3427 = load i32, i32* @y.38
  %3428 = sub i32 %3426, 1
  %3429 = mul i32 %3426, %3428
  %3430 = urem i32 %3429, 2
  %3431 = icmp eq i32 %3430, 0
  %3432 = icmp slt i32 %3427, 10
  %3433 = or i1 %3431, %3432
  br i1 %3433, label %originalBBpart2847, label %originalBB845alteredBB

originalBBpart2847:                               ; preds = %originalBB845
  br i1 %3425, label %3434, label %3451, !dbg !2728

3434:                                             ; preds = %originalBBpart2847
  %3435 = load i32, i32* @x.37
  %3436 = load i32, i32* @y.38
  %3437 = sub i32 %3435, 1
  %3438 = mul i32 %3435, %3437
  %3439 = urem i32 %3438, 2
  %3440 = icmp eq i32 %3439, 0
  %3441 = icmp slt i32 %3436, 10
  %3442 = or i1 %3440, %3441
  br i1 %3442, label %originalBB849, label %originalBB849alteredBB

originalBB849:                                    ; preds = %3434, %originalBB849alteredBB
  %3443 = load i32, i32* @x.37
  %3444 = load i32, i32* @y.38
  %3445 = sub i32 %3443, 1
  %3446 = mul i32 %3443, %3445
  %3447 = urem i32 %3446, 2
  %3448 = icmp eq i32 %3447, 0
  %3449 = icmp slt i32 %3444, 10
  %3450 = or i1 %3448, %3449
  br i1 %3450, label %originalBBpart2851, label %originalBB849alteredBB

originalBBpart2851:                               ; preds = %originalBB849
  br label %5470, !dbg !2725

3451:                                             ; preds = %originalBBpart2847
  store i8 1, i8* %34, align 1, !dbg !2728
  %3452 = load i32, i32* %15, align 4, !dbg !2729
  %3453 = icmp eq i32 %3452, 2, !dbg !2729
  br i1 %3453, label %3454, label %3686, !dbg !2729

3454:                                             ; preds = %3451
  %3455 = load i32, i32* @x.37
  %3456 = load i32, i32* @y.38
  %3457 = sub i32 %3455, 1
  %3458 = mul i32 %3455, %3457
  %3459 = urem i32 %3458, 2
  %3460 = icmp eq i32 %3459, 0
  %3461 = icmp slt i32 %3456, 10
  %3462 = or i1 %3460, %3461
  br i1 %3462, label %originalBB853, label %originalBB853alteredBB

originalBB853:                                    ; preds = %3454, %originalBB853alteredBB
  %3463 = load i8, i8* %28, align 1, !dbg !2729
  %3464 = trunc i8 %3463 to i1, !dbg !2729
  %3465 = load i32, i32* @x.37
  %3466 = load i32, i32* @y.38
  %3467 = sub i32 %3465, 1
  %3468 = mul i32 %3465, %3467
  %3469 = urem i32 %3468, 2
  %3470 = icmp eq i32 %3469, 0
  %3471 = icmp slt i32 %3466, 10
  %3472 = or i1 %3470, %3471
  br i1 %3472, label %originalBBpart2855, label %originalBB853alteredBB

originalBBpart2855:                               ; preds = %originalBB853
  br i1 %3464, label %3686, label %3473, !dbg !2728

3473:                                             ; preds = %originalBBpart2855
  %3474 = load i32, i32* @x.37
  %3475 = load i32, i32* @y.38
  %3476 = sub i32 %3474, 1
  %3477 = mul i32 %3474, %3476
  %3478 = urem i32 %3477, 2
  %3479 = icmp eq i32 %3478, 0
  %3480 = icmp slt i32 %3475, 10
  %3481 = or i1 %3479, %3480
  br i1 %3481, label %originalBB857, label %originalBB857alteredBB

originalBB857:                                    ; preds = %3473, %originalBB857alteredBB
  %3482 = load i32, i32* @x.37
  %3483 = load i32, i32* @y.38
  %3484 = sub i32 %3482, 1
  %3485 = mul i32 %3482, %3484
  %3486 = urem i32 %3485, 2
  %3487 = icmp eq i32 %3486, 0
  %3488 = icmp slt i32 %3483, 10
  %3489 = or i1 %3487, %3488
  br i1 %3489, label %originalBBpart2859, label %originalBB857alteredBB

originalBBpart2859:                               ; preds = %originalBB857
  br label %3490, !dbg !2731

3490:                                             ; preds = %originalBBpart2859
  %3491 = load i32, i32* @x.37
  %3492 = load i32, i32* @y.38
  %3493 = sub i32 %3491, 1
  %3494 = mul i32 %3491, %3493
  %3495 = urem i32 %3494, 2
  %3496 = icmp eq i32 %3495, 0
  %3497 = icmp slt i32 %3492, 10
  %3498 = or i1 %3496, %3497
  br i1 %3498, label %originalBB861, label %originalBB861alteredBB

originalBB861:                                    ; preds = %3490, %originalBB861alteredBB
  %3499 = load i64, i64* %21, align 8, !dbg !2733
  %3500 = load i64, i64* %12, align 8, !dbg !2733
  %3501 = icmp ult i64 %3499, %3500, !dbg !2733
  %3502 = load i32, i32* @x.37
  %3503 = load i32, i32* @y.38
  %3504 = sub i32 %3502, 1
  %3505 = mul i32 %3502, %3504
  %3506 = urem i32 %3505, 2
  %3507 = icmp eq i32 %3506, 0
  %3508 = icmp slt i32 %3503, 10
  %3509 = or i1 %3507, %3508
  br i1 %3509, label %originalBBpart2863, label %originalBB861alteredBB

originalBBpart2863:                               ; preds = %originalBB861
  br i1 %3501, label %3510, label %3514, !dbg !2736

3510:                                             ; preds = %originalBBpart2863
  %3511 = load i8*, i8** %11, align 8, !dbg !2733
  %3512 = load i64, i64* %21, align 8, !dbg !2733
  %3513 = getelementptr inbounds i8, i8* %3511, i64 %3512, !dbg !2733
  store i8 39, i8* %3513, align 1, !dbg !2733
  br label %3514, !dbg !2733

3514:                                             ; preds = %3510, %originalBBpart2863
  %3515 = load i32, i32* @x.37
  %3516 = load i32, i32* @y.38
  %3517 = sub i32 %3515, 1
  %3518 = mul i32 %3515, %3517
  %3519 = urem i32 %3518, 2
  %3520 = icmp eq i32 %3519, 0
  %3521 = icmp slt i32 %3516, 10
  %3522 = or i1 %3520, %3521
  br i1 %3522, label %originalBB865, label %originalBB865alteredBB

originalBB865:                                    ; preds = %3514, %originalBB865alteredBB
  %3523 = load i64, i64* %21, align 8, !dbg !2736
  %3524 = add i64 %3523, 1, !dbg !2736
  store i64 %3524, i64* %21, align 8, !dbg !2736
  %3525 = load i32, i32* @x.37
  %3526 = load i32, i32* @y.38
  %3527 = sub i32 %3525, 1
  %3528 = mul i32 %3525, %3527
  %3529 = urem i32 %3528, 2
  %3530 = icmp eq i32 %3529, 0
  %3531 = icmp slt i32 %3526, 10
  %3532 = or i1 %3530, %3531
  br i1 %3532, label %originalBBpart2878, label %originalBB865alteredBB

originalBBpart2878:                               ; preds = %originalBB865
  br label %3533, !dbg !2736

3533:                                             ; preds = %originalBBpart2878
  br label %3534, !dbg !2731

3534:                                             ; preds = %3533
  %3535 = load i32, i32* @x.37
  %3536 = load i32, i32* @y.38
  %3537 = sub i32 %3535, 1
  %3538 = mul i32 %3535, %3537
  %3539 = urem i32 %3538, 2
  %3540 = icmp eq i32 %3539, 0
  %3541 = icmp slt i32 %3536, 10
  %3542 = or i1 %3540, %3541
  br i1 %3542, label %originalBB880, label %originalBB880alteredBB

originalBB880:                                    ; preds = %3534, %originalBB880alteredBB
  %3543 = load i64, i64* %21, align 8, !dbg !2737
  %3544 = load i64, i64* %12, align 8, !dbg !2737
  %3545 = icmp ult i64 %3543, %3544, !dbg !2737
  %3546 = load i32, i32* @x.37
  %3547 = load i32, i32* @y.38
  %3548 = sub i32 %3546, 1
  %3549 = mul i32 %3546, %3548
  %3550 = urem i32 %3549, 2
  %3551 = icmp eq i32 %3550, 0
  %3552 = icmp slt i32 %3547, 10
  %3553 = or i1 %3551, %3552
  br i1 %3553, label %originalBBpart2882, label %originalBB880alteredBB

originalBBpart2882:                               ; preds = %originalBB880
  br i1 %3545, label %3554, label %3574, !dbg !2740

3554:                                             ; preds = %originalBBpart2882
  %3555 = load i32, i32* @x.37
  %3556 = load i32, i32* @y.38
  %3557 = sub i32 %3555, 1
  %3558 = mul i32 %3555, %3557
  %3559 = urem i32 %3558, 2
  %3560 = icmp eq i32 %3559, 0
  %3561 = icmp slt i32 %3556, 10
  %3562 = or i1 %3560, %3561
  br i1 %3562, label %originalBB884, label %originalBB884alteredBB

originalBB884:                                    ; preds = %3554, %originalBB884alteredBB
  %3563 = load i8*, i8** %11, align 8, !dbg !2737
  %3564 = load i64, i64* %21, align 8, !dbg !2737
  %3565 = getelementptr inbounds i8, i8* %3563, i64 %3564, !dbg !2737
  store i8 36, i8* %3565, align 1, !dbg !2737
  %3566 = load i32, i32* @x.37
  %3567 = load i32, i32* @y.38
  %3568 = sub i32 %3566, 1
  %3569 = mul i32 %3566, %3568
  %3570 = urem i32 %3569, 2
  %3571 = icmp eq i32 %3570, 0
  %3572 = icmp slt i32 %3567, 10
  %3573 = or i1 %3571, %3572
  br i1 %3573, label %originalBBpart2886, label %originalBB884alteredBB

originalBBpart2886:                               ; preds = %originalBB884
  br label %3574, !dbg !2737

3574:                                             ; preds = %originalBBpart2886, %originalBBpart2882
  %3575 = load i32, i32* @x.37
  %3576 = load i32, i32* @y.38
  %3577 = sub i32 %3575, 1
  %3578 = mul i32 %3575, %3577
  %3579 = urem i32 %3578, 2
  %3580 = icmp eq i32 %3579, 0
  %3581 = icmp slt i32 %3576, 10
  %3582 = or i1 %3580, %3581
  br i1 %3582, label %originalBB888, label %originalBB888alteredBB

originalBB888:                                    ; preds = %3574, %originalBB888alteredBB
  %3583 = load i64, i64* %21, align 8, !dbg !2740
  %3584 = add i64 %3583, 1, !dbg !2740
  store i64 %3584, i64* %21, align 8, !dbg !2740
  %3585 = load i32, i32* @x.37
  %3586 = load i32, i32* @y.38
  %3587 = sub i32 %3585, 1
  %3588 = mul i32 %3585, %3587
  %3589 = urem i32 %3588, 2
  %3590 = icmp eq i32 %3589, 0
  %3591 = icmp slt i32 %3586, 10
  %3592 = or i1 %3590, %3591
  br i1 %3592, label %originalBBpart2896, label %originalBB888alteredBB

originalBBpart2896:                               ; preds = %originalBB888
  br label %3593, !dbg !2740

3593:                                             ; preds = %originalBBpart2896
  %3594 = load i32, i32* @x.37
  %3595 = load i32, i32* @y.38
  %3596 = sub i32 %3594, 1
  %3597 = mul i32 %3594, %3596
  %3598 = urem i32 %3597, 2
  %3599 = icmp eq i32 %3598, 0
  %3600 = icmp slt i32 %3595, 10
  %3601 = or i1 %3599, %3600
  br i1 %3601, label %originalBB898, label %originalBB898alteredBB

originalBB898:                                    ; preds = %3593, %originalBB898alteredBB
  %3602 = load i32, i32* @x.37
  %3603 = load i32, i32* @y.38
  %3604 = sub i32 %3602, 1
  %3605 = mul i32 %3602, %3604
  %3606 = urem i32 %3605, 2
  %3607 = icmp eq i32 %3606, 0
  %3608 = icmp slt i32 %3603, 10
  %3609 = or i1 %3607, %3608
  br i1 %3609, label %originalBBpart2900, label %originalBB898alteredBB

originalBBpart2900:                               ; preds = %originalBB898
  br label %3610, !dbg !2731

3610:                                             ; preds = %originalBBpart2900
  %3611 = load i32, i32* @x.37
  %3612 = load i32, i32* @y.38
  %3613 = sub i32 %3611, 1
  %3614 = mul i32 %3611, %3613
  %3615 = urem i32 %3614, 2
  %3616 = icmp eq i32 %3615, 0
  %3617 = icmp slt i32 %3612, 10
  %3618 = or i1 %3616, %3617
  br i1 %3618, label %originalBB902, label %originalBB902alteredBB

originalBB902:                                    ; preds = %3610, %originalBB902alteredBB
  %3619 = load i64, i64* %21, align 8, !dbg !2741
  %3620 = load i64, i64* %12, align 8, !dbg !2741
  %3621 = icmp ult i64 %3619, %3620, !dbg !2741
  %3622 = load i32, i32* @x.37
  %3623 = load i32, i32* @y.38
  %3624 = sub i32 %3622, 1
  %3625 = mul i32 %3622, %3624
  %3626 = urem i32 %3625, 2
  %3627 = icmp eq i32 %3626, 0
  %3628 = icmp slt i32 %3623, 10
  %3629 = or i1 %3627, %3628
  br i1 %3629, label %originalBBpart2904, label %originalBB902alteredBB

originalBBpart2904:                               ; preds = %originalBB902
  br i1 %3621, label %3630, label %3650, !dbg !2744

3630:                                             ; preds = %originalBBpart2904
  %3631 = load i32, i32* @x.37
  %3632 = load i32, i32* @y.38
  %3633 = sub i32 %3631, 1
  %3634 = mul i32 %3631, %3633
  %3635 = urem i32 %3634, 2
  %3636 = icmp eq i32 %3635, 0
  %3637 = icmp slt i32 %3632, 10
  %3638 = or i1 %3636, %3637
  br i1 %3638, label %originalBB906, label %originalBB906alteredBB

originalBB906:                                    ; preds = %3630, %originalBB906alteredBB
  %3639 = load i8*, i8** %11, align 8, !dbg !2741
  %3640 = load i64, i64* %21, align 8, !dbg !2741
  %3641 = getelementptr inbounds i8, i8* %3639, i64 %3640, !dbg !2741
  store i8 39, i8* %3641, align 1, !dbg !2741
  %3642 = load i32, i32* @x.37
  %3643 = load i32, i32* @y.38
  %3644 = sub i32 %3642, 1
  %3645 = mul i32 %3642, %3644
  %3646 = urem i32 %3645, 2
  %3647 = icmp eq i32 %3646, 0
  %3648 = icmp slt i32 %3643, 10
  %3649 = or i1 %3647, %3648
  br i1 %3649, label %originalBBpart2908, label %originalBB906alteredBB

originalBBpart2908:                               ; preds = %originalBB906
  br label %3650, !dbg !2741

3650:                                             ; preds = %originalBBpart2908, %originalBBpart2904
  %3651 = load i32, i32* @x.37
  %3652 = load i32, i32* @y.38
  %3653 = sub i32 %3651, 1
  %3654 = mul i32 %3651, %3653
  %3655 = urem i32 %3654, 2
  %3656 = icmp eq i32 %3655, 0
  %3657 = icmp slt i32 %3652, 10
  %3658 = or i1 %3656, %3657
  br i1 %3658, label %originalBB910, label %originalBB910alteredBB

originalBB910:                                    ; preds = %3650, %originalBB910alteredBB
  %3659 = load i64, i64* %21, align 8, !dbg !2744
  %3660 = add i64 %3659, 1, !dbg !2744
  store i64 %3660, i64* %21, align 8, !dbg !2744
  %3661 = load i32, i32* @x.37
  %3662 = load i32, i32* @y.38
  %3663 = sub i32 %3661, 1
  %3664 = mul i32 %3661, %3663
  %3665 = urem i32 %3664, 2
  %3666 = icmp eq i32 %3665, 0
  %3667 = icmp slt i32 %3662, 10
  %3668 = or i1 %3666, %3667
  br i1 %3668, label %originalBBpart2913, label %originalBB910alteredBB

originalBBpart2913:                               ; preds = %originalBB910
  br label %3669, !dbg !2744

3669:                                             ; preds = %originalBBpart2913
  %3670 = load i32, i32* @x.37
  %3671 = load i32, i32* @y.38
  %3672 = sub i32 %3670, 1
  %3673 = mul i32 %3670, %3672
  %3674 = urem i32 %3673, 2
  %3675 = icmp eq i32 %3674, 0
  %3676 = icmp slt i32 %3671, 10
  %3677 = or i1 %3675, %3676
  br i1 %3677, label %originalBB915, label %originalBB915alteredBB

originalBB915:                                    ; preds = %3669, %originalBB915alteredBB
  store i8 1, i8* %28, align 1, !dbg !2731
  %3678 = load i32, i32* @x.37
  %3679 = load i32, i32* @y.38
  %3680 = sub i32 %3678, 1
  %3681 = mul i32 %3678, %3680
  %3682 = urem i32 %3681, 2
  %3683 = icmp eq i32 %3682, 0
  %3684 = icmp slt i32 %3679, 10
  %3685 = or i1 %3683, %3684
  br i1 %3685, label %originalBBpart2917, label %originalBB915alteredBB

originalBBpart2917:                               ; preds = %originalBB915
  br label %3686, !dbg !2731

3686:                                             ; preds = %originalBBpart2917, %originalBBpart2855, %3451
  %3687 = load i32, i32* @x.37
  %3688 = load i32, i32* @y.38
  %3689 = sub i32 %3687, 1
  %3690 = mul i32 %3687, %3689
  %3691 = urem i32 %3690, 2
  %3692 = icmp eq i32 %3691, 0
  %3693 = icmp slt i32 %3688, 10
  %3694 = or i1 %3692, %3693
  br i1 %3694, label %originalBB919, label %originalBB919alteredBB

originalBB919:                                    ; preds = %3686, %originalBB919alteredBB
  %3695 = load i32, i32* @x.37
  %3696 = load i32, i32* @y.38
  %3697 = sub i32 %3695, 1
  %3698 = mul i32 %3695, %3697
  %3699 = urem i32 %3698, 2
  %3700 = icmp eq i32 %3699, 0
  %3701 = icmp slt i32 %3696, 10
  %3702 = or i1 %3700, %3701
  br i1 %3702, label %originalBBpart2921, label %originalBB919alteredBB

originalBBpart2921:                               ; preds = %originalBB919
  br label %3703, !dbg !2728

3703:                                             ; preds = %originalBBpart2921
  %3704 = load i32, i32* @x.37
  %3705 = load i32, i32* @y.38
  %3706 = sub i32 %3704, 1
  %3707 = mul i32 %3704, %3706
  %3708 = urem i32 %3707, 2
  %3709 = icmp eq i32 %3708, 0
  %3710 = icmp slt i32 %3705, 10
  %3711 = or i1 %3709, %3710
  br i1 %3711, label %originalBB923, label %originalBB923alteredBB

originalBB923:                                    ; preds = %3703, %originalBB923alteredBB
  %3712 = load i64, i64* %21, align 8, !dbg !2745
  %3713 = load i64, i64* %12, align 8, !dbg !2745
  %3714 = icmp ult i64 %3712, %3713, !dbg !2745
  %3715 = load i32, i32* @x.37
  %3716 = load i32, i32* @y.38
  %3717 = sub i32 %3715, 1
  %3718 = mul i32 %3715, %3717
  %3719 = urem i32 %3718, 2
  %3720 = icmp eq i32 %3719, 0
  %3721 = icmp slt i32 %3716, 10
  %3722 = or i1 %3720, %3721
  br i1 %3722, label %originalBBpart2925, label %originalBB923alteredBB

originalBBpart2925:                               ; preds = %originalBB923
  br i1 %3714, label %3723, label %3743, !dbg !2748

3723:                                             ; preds = %originalBBpart2925
  %3724 = load i32, i32* @x.37
  %3725 = load i32, i32* @y.38
  %3726 = sub i32 %3724, 1
  %3727 = mul i32 %3724, %3726
  %3728 = urem i32 %3727, 2
  %3729 = icmp eq i32 %3728, 0
  %3730 = icmp slt i32 %3725, 10
  %3731 = or i1 %3729, %3730
  br i1 %3731, label %originalBB927, label %originalBB927alteredBB

originalBB927:                                    ; preds = %3723, %originalBB927alteredBB
  %3732 = load i8*, i8** %11, align 8, !dbg !2745
  %3733 = load i64, i64* %21, align 8, !dbg !2745
  %3734 = getelementptr inbounds i8, i8* %3732, i64 %3733, !dbg !2745
  store i8 92, i8* %3734, align 1, !dbg !2745
  %3735 = load i32, i32* @x.37
  %3736 = load i32, i32* @y.38
  %3737 = sub i32 %3735, 1
  %3738 = mul i32 %3735, %3737
  %3739 = urem i32 %3738, 2
  %3740 = icmp eq i32 %3739, 0
  %3741 = icmp slt i32 %3736, 10
  %3742 = or i1 %3740, %3741
  br i1 %3742, label %originalBBpart2929, label %originalBB927alteredBB

originalBBpart2929:                               ; preds = %originalBB927
  br label %3743, !dbg !2745

3743:                                             ; preds = %originalBBpart2929, %originalBBpart2925
  %3744 = load i64, i64* %21, align 8, !dbg !2748
  %3745 = add i64 %3744, 1, !dbg !2748
  store i64 %3745, i64* %21, align 8, !dbg !2748
  br label %3746, !dbg !2748

3746:                                             ; preds = %3743
  %3747 = load i32, i32* @x.37
  %3748 = load i32, i32* @y.38
  %3749 = sub i32 %3747, 1
  %3750 = mul i32 %3747, %3749
  %3751 = urem i32 %3750, 2
  %3752 = icmp eq i32 %3751, 0
  %3753 = icmp slt i32 %3748, 10
  %3754 = or i1 %3752, %3753
  br i1 %3754, label %originalBB931, label %originalBB931alteredBB

originalBB931:                                    ; preds = %3746, %originalBB931alteredBB
  %3755 = load i32, i32* @x.37
  %3756 = load i32, i32* @y.38
  %3757 = sub i32 %3755, 1
  %3758 = mul i32 %3755, %3757
  %3759 = urem i32 %3758, 2
  %3760 = icmp eq i32 %3759, 0
  %3761 = icmp slt i32 %3756, 10
  %3762 = or i1 %3760, %3761
  br i1 %3762, label %originalBBpart2933, label %originalBB931alteredBB

originalBBpart2933:                               ; preds = %originalBB931
  br label %3763, !dbg !2728

3763:                                             ; preds = %originalBBpart2933
  %3764 = load i32, i32* @x.37
  %3765 = load i32, i32* @y.38
  %3766 = sub i32 %3764, 1
  %3767 = mul i32 %3764, %3766
  %3768 = urem i32 %3767, 2
  %3769 = icmp eq i32 %3768, 0
  %3770 = icmp slt i32 %3765, 10
  %3771 = or i1 %3769, %3770
  br i1 %3771, label %originalBB935, label %originalBB935alteredBB

originalBB935:                                    ; preds = %3763, %originalBB935alteredBB
  %3772 = load i32, i32* @x.37
  %3773 = load i32, i32* @y.38
  %3774 = sub i32 %3772, 1
  %3775 = mul i32 %3772, %3774
  %3776 = urem i32 %3775, 2
  %3777 = icmp eq i32 %3776, 0
  %3778 = icmp slt i32 %3773, 10
  %3779 = or i1 %3777, %3778
  br i1 %3779, label %originalBBpart2937, label %originalBB935alteredBB

originalBBpart2937:                               ; preds = %originalBB935
  br label %3780, !dbg !2749

3780:                                             ; preds = %originalBBpart2937
  %3781 = load i64, i64* %21, align 8, !dbg !2750
  %3782 = load i64, i64* %12, align 8, !dbg !2750
  %3783 = icmp ult i64 %3781, %3782, !dbg !2750
  br i1 %3783, label %3784, label %3809, !dbg !2753

3784:                                             ; preds = %3780
  %3785 = load i32, i32* @x.37
  %3786 = load i32, i32* @y.38
  %3787 = sub i32 %3785, 1
  %3788 = mul i32 %3785, %3787
  %3789 = urem i32 %3788, 2
  %3790 = icmp eq i32 %3789, 0
  %3791 = icmp slt i32 %3786, 10
  %3792 = or i1 %3790, %3791
  br i1 %3792, label %originalBB939, label %originalBB939alteredBB

originalBB939:                                    ; preds = %3784, %originalBB939alteredBB
  %3793 = load i8, i8* %31, align 1, !dbg !2750
  %3794 = zext i8 %3793 to i32, !dbg !2750
  %3795 = ashr i32 %3794, 6, !dbg !2750
  %3796 = add nsw i32 48, %3795, !dbg !2750
  %3797 = trunc i32 %3796 to i8, !dbg !2750
  %3798 = load i8*, i8** %11, align 8, !dbg !2750
  %3799 = load i64, i64* %21, align 8, !dbg !2750
  %3800 = getelementptr inbounds i8, i8* %3798, i64 %3799, !dbg !2750
  store i8 %3797, i8* %3800, align 1, !dbg !2750
  %3801 = load i32, i32* @x.37
  %3802 = load i32, i32* @y.38
  %3803 = sub i32 %3801, 1
  %3804 = mul i32 %3801, %3803
  %3805 = urem i32 %3804, 2
  %3806 = icmp eq i32 %3805, 0
  %3807 = icmp slt i32 %3802, 10
  %3808 = or i1 %3806, %3807
  br i1 %3808, label %originalBBpart2966, label %originalBB939alteredBB

originalBBpart2966:                               ; preds = %originalBB939
  br label %3809, !dbg !2750

3809:                                             ; preds = %originalBBpart2966, %3780
  %3810 = load i32, i32* @x.37
  %3811 = load i32, i32* @y.38
  %3812 = sub i32 %3810, 1
  %3813 = mul i32 %3810, %3812
  %3814 = urem i32 %3813, 2
  %3815 = icmp eq i32 %3814, 0
  %3816 = icmp slt i32 %3811, 10
  %3817 = or i1 %3815, %3816
  br i1 %3817, label %originalBB968, label %originalBB968alteredBB

originalBB968:                                    ; preds = %3809, %originalBB968alteredBB
  %3818 = load i64, i64* %21, align 8, !dbg !2753
  %3819 = add i64 %3818, 1, !dbg !2753
  store i64 %3819, i64* %21, align 8, !dbg !2753
  %3820 = load i32, i32* @x.37
  %3821 = load i32, i32* @y.38
  %3822 = sub i32 %3820, 1
  %3823 = mul i32 %3820, %3822
  %3824 = urem i32 %3823, 2
  %3825 = icmp eq i32 %3824, 0
  %3826 = icmp slt i32 %3821, 10
  %3827 = or i1 %3825, %3826
  br i1 %3827, label %originalBBpart2974, label %originalBB968alteredBB

originalBBpart2974:                               ; preds = %originalBB968
  br label %3828, !dbg !2753

3828:                                             ; preds = %originalBBpart2974
  %3829 = load i32, i32* @x.37
  %3830 = load i32, i32* @y.38
  %3831 = sub i32 %3829, 1
  %3832 = mul i32 %3829, %3831
  %3833 = urem i32 %3832, 2
  %3834 = icmp eq i32 %3833, 0
  %3835 = icmp slt i32 %3830, 10
  %3836 = or i1 %3834, %3835
  br i1 %3836, label %originalBB976, label %originalBB976alteredBB

originalBB976:                                    ; preds = %3828, %originalBB976alteredBB
  %3837 = load i32, i32* @x.37
  %3838 = load i32, i32* @y.38
  %3839 = sub i32 %3837, 1
  %3840 = mul i32 %3837, %3839
  %3841 = urem i32 %3840, 2
  %3842 = icmp eq i32 %3841, 0
  %3843 = icmp slt i32 %3838, 10
  %3844 = or i1 %3842, %3843
  br i1 %3844, label %originalBBpart2978, label %originalBB976alteredBB

originalBBpart2978:                               ; preds = %originalBB976
  br label %3845, !dbg !2754

3845:                                             ; preds = %originalBBpart2978
  %3846 = load i64, i64* %21, align 8, !dbg !2755
  %3847 = load i64, i64* %12, align 8, !dbg !2755
  %3848 = icmp ult i64 %3846, %3847, !dbg !2755
  br i1 %3848, label %3849, label %3875, !dbg !2758

3849:                                             ; preds = %3845
  %3850 = load i32, i32* @x.37
  %3851 = load i32, i32* @y.38
  %3852 = sub i32 %3850, 1
  %3853 = mul i32 %3850, %3852
  %3854 = urem i32 %3853, 2
  %3855 = icmp eq i32 %3854, 0
  %3856 = icmp slt i32 %3851, 10
  %3857 = or i1 %3855, %3856
  br i1 %3857, label %originalBB980, label %originalBB980alteredBB

originalBB980:                                    ; preds = %3849, %originalBB980alteredBB
  %3858 = load i8, i8* %31, align 1, !dbg !2755
  %3859 = zext i8 %3858 to i32, !dbg !2755
  %3860 = ashr i32 %3859, 3, !dbg !2755
  %3861 = and i32 %3860, 7, !dbg !2755
  %3862 = add nsw i32 48, %3861, !dbg !2755
  %3863 = trunc i32 %3862 to i8, !dbg !2755
  %3864 = load i8*, i8** %11, align 8, !dbg !2755
  %3865 = load i64, i64* %21, align 8, !dbg !2755
  %3866 = getelementptr inbounds i8, i8* %3864, i64 %3865, !dbg !2755
  store i8 %3863, i8* %3866, align 1, !dbg !2755
  %3867 = load i32, i32* @x.37
  %3868 = load i32, i32* @y.38
  %3869 = sub i32 %3867, 1
  %3870 = mul i32 %3867, %3869
  %3871 = urem i32 %3870, 2
  %3872 = icmp eq i32 %3871, 0
  %3873 = icmp slt i32 %3868, 10
  %3874 = or i1 %3872, %3873
  br i1 %3874, label %originalBBpart2994, label %originalBB980alteredBB

originalBBpart2994:                               ; preds = %originalBB980
  br label %3875, !dbg !2755

3875:                                             ; preds = %originalBBpart2994, %3845
  %3876 = load i64, i64* %21, align 8, !dbg !2758
  %3877 = add i64 %3876, 1, !dbg !2758
  store i64 %3877, i64* %21, align 8, !dbg !2758
  br label %3878, !dbg !2758

3878:                                             ; preds = %3875
  %3879 = load i32, i32* @x.37
  %3880 = load i32, i32* @y.38
  %3881 = sub i32 %3879, 1
  %3882 = mul i32 %3879, %3881
  %3883 = urem i32 %3882, 2
  %3884 = icmp eq i32 %3883, 0
  %3885 = icmp slt i32 %3880, 10
  %3886 = or i1 %3884, %3885
  br i1 %3886, label %originalBB996, label %originalBB996alteredBB

originalBB996:                                    ; preds = %3878, %originalBB996alteredBB
  %3887 = load i8, i8* %31, align 1, !dbg !2759
  %3888 = zext i8 %3887 to i32, !dbg !2759
  %3889 = and i32 %3888, 7, !dbg !2760
  %3890 = add nsw i32 48, %3889, !dbg !2761
  %3891 = trunc i32 %3890 to i8, !dbg !2762
  store i8 %3891, i8* %31, align 1, !dbg !2763
  %3892 = load i32, i32* @x.37
  %3893 = load i32, i32* @y.38
  %3894 = sub i32 %3892, 1
  %3895 = mul i32 %3892, %3894
  %3896 = urem i32 %3895, 2
  %3897 = icmp eq i32 %3896, 0
  %3898 = icmp slt i32 %3893, 10
  %3899 = or i1 %3897, %3898
  br i1 %3899, label %originalBBpart21001, label %originalBB996alteredBB

originalBBpart21001:                              ; preds = %originalBB996
  br label %3997, !dbg !2764

3900:                                             ; preds = %originalBBpart2839, %originalBBpart2835
  %3901 = load i8, i8* %33, align 1, !dbg !2765
  %3902 = trunc i8 %3901 to i1, !dbg !2765
  br i1 %3902, label %3903, label %3980, !dbg !2767

3903:                                             ; preds = %3900
  br label %3904, !dbg !2768

3904:                                             ; preds = %3903
  %3905 = load i32, i32* @x.37
  %3906 = load i32, i32* @y.38
  %3907 = sub i32 %3905, 1
  %3908 = mul i32 %3905, %3907
  %3909 = urem i32 %3908, 2
  %3910 = icmp eq i32 %3909, 0
  %3911 = icmp slt i32 %3906, 10
  %3912 = or i1 %3910, %3911
  br i1 %3912, label %originalBB1003, label %originalBB1003alteredBB

originalBB1003:                                   ; preds = %3904, %originalBB1003alteredBB
  %3913 = load i64, i64* %21, align 8, !dbg !2770
  %3914 = load i64, i64* %12, align 8, !dbg !2770
  %3915 = icmp ult i64 %3913, %3914, !dbg !2770
  %3916 = load i32, i32* @x.37
  %3917 = load i32, i32* @y.38
  %3918 = sub i32 %3916, 1
  %3919 = mul i32 %3916, %3918
  %3920 = urem i32 %3919, 2
  %3921 = icmp eq i32 %3920, 0
  %3922 = icmp slt i32 %3917, 10
  %3923 = or i1 %3921, %3922
  br i1 %3923, label %originalBBpart21005, label %originalBB1003alteredBB

originalBBpart21005:                              ; preds = %originalBB1003
  br i1 %3915, label %3924, label %3944, !dbg !2773

3924:                                             ; preds = %originalBBpart21005
  %3925 = load i32, i32* @x.37
  %3926 = load i32, i32* @y.38
  %3927 = sub i32 %3925, 1
  %3928 = mul i32 %3925, %3927
  %3929 = urem i32 %3928, 2
  %3930 = icmp eq i32 %3929, 0
  %3931 = icmp slt i32 %3926, 10
  %3932 = or i1 %3930, %3931
  br i1 %3932, label %originalBB1007, label %originalBB1007alteredBB

originalBB1007:                                   ; preds = %3924, %originalBB1007alteredBB
  %3933 = load i8*, i8** %11, align 8, !dbg !2770
  %3934 = load i64, i64* %21, align 8, !dbg !2770
  %3935 = getelementptr inbounds i8, i8* %3933, i64 %3934, !dbg !2770
  store i8 92, i8* %3935, align 1, !dbg !2770
  %3936 = load i32, i32* @x.37
  %3937 = load i32, i32* @y.38
  %3938 = sub i32 %3936, 1
  %3939 = mul i32 %3936, %3938
  %3940 = urem i32 %3939, 2
  %3941 = icmp eq i32 %3940, 0
  %3942 = icmp slt i32 %3937, 10
  %3943 = or i1 %3941, %3942
  br i1 %3943, label %originalBBpart21009, label %originalBB1007alteredBB

originalBBpart21009:                              ; preds = %originalBB1007
  br label %3944, !dbg !2770

3944:                                             ; preds = %originalBBpart21009, %originalBBpart21005
  %3945 = load i32, i32* @x.37
  %3946 = load i32, i32* @y.38
  %3947 = sub i32 %3945, 1
  %3948 = mul i32 %3945, %3947
  %3949 = urem i32 %3948, 2
  %3950 = icmp eq i32 %3949, 0
  %3951 = icmp slt i32 %3946, 10
  %3952 = or i1 %3950, %3951
  br i1 %3952, label %originalBB1011, label %originalBB1011alteredBB

originalBB1011:                                   ; preds = %3944, %originalBB1011alteredBB
  %3953 = load i64, i64* %21, align 8, !dbg !2773
  %3954 = add i64 %3953, 1, !dbg !2773
  store i64 %3954, i64* %21, align 8, !dbg !2773
  %3955 = load i32, i32* @x.37
  %3956 = load i32, i32* @y.38
  %3957 = sub i32 %3955, 1
  %3958 = mul i32 %3955, %3957
  %3959 = urem i32 %3958, 2
  %3960 = icmp eq i32 %3959, 0
  %3961 = icmp slt i32 %3956, 10
  %3962 = or i1 %3960, %3961
  br i1 %3962, label %originalBBpart21015, label %originalBB1011alteredBB

originalBBpart21015:                              ; preds = %originalBB1011
  br label %3963, !dbg !2773

3963:                                             ; preds = %originalBBpart21015
  %3964 = load i32, i32* @x.37
  %3965 = load i32, i32* @y.38
  %3966 = sub i32 %3964, 1
  %3967 = mul i32 %3964, %3966
  %3968 = urem i32 %3967, 2
  %3969 = icmp eq i32 %3968, 0
  %3970 = icmp slt i32 %3965, 10
  %3971 = or i1 %3969, %3970
  br i1 %3971, label %originalBB1017, label %originalBB1017alteredBB

originalBB1017:                                   ; preds = %3963, %originalBB1017alteredBB
  store i8 0, i8* %33, align 1, !dbg !2774
  %3972 = load i32, i32* @x.37
  %3973 = load i32, i32* @y.38
  %3974 = sub i32 %3972, 1
  %3975 = mul i32 %3972, %3974
  %3976 = urem i32 %3975, 2
  %3977 = icmp eq i32 %3976, 0
  %3978 = icmp slt i32 %3973, 10
  %3979 = or i1 %3977, %3978
  br i1 %3979, label %originalBBpart21019, label %originalBB1017alteredBB

originalBBpart21019:                              ; preds = %originalBB1017
  br label %3980, !dbg !2775

3980:                                             ; preds = %originalBBpart21019, %3900
  %3981 = load i32, i32* @x.37
  %3982 = load i32, i32* @y.38
  %3983 = sub i32 %3981, 1
  %3984 = mul i32 %3981, %3983
  %3985 = urem i32 %3984, 2
  %3986 = icmp eq i32 %3985, 0
  %3987 = icmp slt i32 %3982, 10
  %3988 = or i1 %3986, %3987
  br i1 %3988, label %originalBB1021, label %originalBB1021alteredBB

originalBB1021:                                   ; preds = %3980, %originalBB1021alteredBB
  %3989 = load i32, i32* @x.37
  %3990 = load i32, i32* @y.38
  %3991 = sub i32 %3989, 1
  %3992 = mul i32 %3989, %3991
  %3993 = urem i32 %3992, 2
  %3994 = icmp eq i32 %3993, 0
  %3995 = icmp slt i32 %3990, 10
  %3996 = or i1 %3994, %3995
  br i1 %3996, label %originalBBpart21023, label %originalBB1021alteredBB

originalBBpart21023:                              ; preds = %originalBB1021
  br label %3997

3997:                                             ; preds = %originalBBpart21023, %originalBBpart21001
  %3998 = load i32, i32* @x.37
  %3999 = load i32, i32* @y.38
  %4000 = sub i32 %3998, 1
  %4001 = mul i32 %3998, %4000
  %4002 = urem i32 %4001, 2
  %4003 = icmp eq i32 %4002, 0
  %4004 = icmp slt i32 %3999, 10
  %4005 = or i1 %4003, %4004
  br i1 %4005, label %originalBB1025, label %originalBB1025alteredBB

originalBB1025:                                   ; preds = %3997, %originalBB1025alteredBB
  %4006 = load i64, i64* %42, align 8, !dbg !2776
  %4007 = load i64, i64* %20, align 8, !dbg !2778
  %4008 = add i64 %4007, 1, !dbg !2779
  %4009 = icmp ule i64 %4006, %4008, !dbg !2780
  %4010 = load i32, i32* @x.37
  %4011 = load i32, i32* @y.38
  %4012 = sub i32 %4010, 1
  %4013 = mul i32 %4010, %4012
  %4014 = urem i32 %4013, 2
  %4015 = icmp eq i32 %4014, 0
  %4016 = icmp slt i32 %4011, 10
  %4017 = or i1 %4015, %4016
  br i1 %4017, label %originalBBpart21034, label %originalBB1025alteredBB

originalBBpart21034:                              ; preds = %originalBB1025
  br i1 %4009, label %4018, label %4035, !dbg !2781

4018:                                             ; preds = %originalBBpart21034
  %4019 = load i32, i32* @x.37
  %4020 = load i32, i32* @y.38
  %4021 = sub i32 %4019, 1
  %4022 = mul i32 %4019, %4021
  %4023 = urem i32 %4022, 2
  %4024 = icmp eq i32 %4023, 0
  %4025 = icmp slt i32 %4020, 10
  %4026 = or i1 %4024, %4025
  br i1 %4026, label %originalBB1036, label %originalBB1036alteredBB

originalBB1036:                                   ; preds = %4018, %originalBB1036alteredBB
  %4027 = load i32, i32* @x.37
  %4028 = load i32, i32* @y.38
  %4029 = sub i32 %4027, 1
  %4030 = mul i32 %4027, %4029
  %4031 = urem i32 %4030, 2
  %4032 = icmp eq i32 %4031, 0
  %4033 = icmp slt i32 %4028, 10
  %4034 = or i1 %4032, %4033
  br i1 %4034, label %originalBBpart21038, label %originalBB1036alteredBB

originalBBpart21038:                              ; preds = %originalBB1036
  br label %4311, !dbg !2782

4035:                                             ; preds = %originalBBpart21034
  %4036 = load i32, i32* @x.37
  %4037 = load i32, i32* @y.38
  %4038 = sub i32 %4036, 1
  %4039 = mul i32 %4036, %4038
  %4040 = urem i32 %4039, 2
  %4041 = icmp eq i32 %4040, 0
  %4042 = icmp slt i32 %4037, 10
  %4043 = or i1 %4041, %4042
  br i1 %4043, label %originalBB1040, label %originalBB1040alteredBB

originalBB1040:                                   ; preds = %4035, %originalBB1040alteredBB
  %4044 = load i32, i32* @x.37
  %4045 = load i32, i32* @y.38
  %4046 = sub i32 %4044, 1
  %4047 = mul i32 %4044, %4046
  %4048 = urem i32 %4047, 2
  %4049 = icmp eq i32 %4048, 0
  %4050 = icmp slt i32 %4045, 10
  %4051 = or i1 %4049, %4050
  br i1 %4051, label %originalBBpart21042, label %originalBB1040alteredBB

originalBBpart21042:                              ; preds = %originalBB1040
  br label %4052, !dbg !2783

4052:                                             ; preds = %originalBBpart21042
  %4053 = load i32, i32* @x.37
  %4054 = load i32, i32* @y.38
  %4055 = sub i32 %4053, 1
  %4056 = mul i32 %4053, %4055
  %4057 = urem i32 %4056, 2
  %4058 = icmp eq i32 %4057, 0
  %4059 = icmp slt i32 %4054, 10
  %4060 = or i1 %4058, %4059
  br i1 %4060, label %originalBB1044, label %originalBB1044alteredBB

originalBB1044:                                   ; preds = %4052, %originalBB1044alteredBB
  %4061 = load i8, i8* %28, align 1, !dbg !2784
  %4062 = trunc i8 %4061 to i1, !dbg !2784
  %4063 = load i32, i32* @x.37
  %4064 = load i32, i32* @y.38
  %4065 = sub i32 %4063, 1
  %4066 = mul i32 %4063, %4065
  %4067 = urem i32 %4066, 2
  %4068 = icmp eq i32 %4067, 0
  %4069 = icmp slt i32 %4064, 10
  %4070 = or i1 %4068, %4069
  br i1 %4070, label %originalBBpart21046, label %originalBB1044alteredBB

originalBBpart21046:                              ; preds = %originalBB1044
  br i1 %4062, label %4071, label %4227, !dbg !2784

4071:                                             ; preds = %originalBBpart21046
  %4072 = load i32, i32* @x.37
  %4073 = load i32, i32* @y.38
  %4074 = sub i32 %4072, 1
  %4075 = mul i32 %4072, %4074
  %4076 = urem i32 %4075, 2
  %4077 = icmp eq i32 %4076, 0
  %4078 = icmp slt i32 %4073, 10
  %4079 = or i1 %4077, %4078
  br i1 %4079, label %originalBB1048, label %originalBB1048alteredBB

originalBB1048:                                   ; preds = %4071, %originalBB1048alteredBB
  %4080 = load i8, i8* %34, align 1, !dbg !2784
  %4081 = trunc i8 %4080 to i1, !dbg !2784
  %4082 = load i32, i32* @x.37
  %4083 = load i32, i32* @y.38
  %4084 = sub i32 %4082, 1
  %4085 = mul i32 %4082, %4084
  %4086 = urem i32 %4085, 2
  %4087 = icmp eq i32 %4086, 0
  %4088 = icmp slt i32 %4083, 10
  %4089 = or i1 %4087, %4088
  br i1 %4089, label %originalBBpart21050, label %originalBB1048alteredBB

originalBBpart21050:                              ; preds = %originalBB1048
  br i1 %4081, label %4227, label %4090, !dbg !2787

4090:                                             ; preds = %originalBBpart21050
  %4091 = load i32, i32* @x.37
  %4092 = load i32, i32* @y.38
  %4093 = sub i32 %4091, 1
  %4094 = mul i32 %4091, %4093
  %4095 = urem i32 %4094, 2
  %4096 = icmp eq i32 %4095, 0
  %4097 = icmp slt i32 %4092, 10
  %4098 = or i1 %4096, %4097
  br i1 %4098, label %originalBB1052, label %originalBB1052alteredBB

originalBB1052:                                   ; preds = %4090, %originalBB1052alteredBB
  %4099 = load i32, i32* @x.37
  %4100 = load i32, i32* @y.38
  %4101 = sub i32 %4099, 1
  %4102 = mul i32 %4099, %4101
  %4103 = urem i32 %4102, 2
  %4104 = icmp eq i32 %4103, 0
  %4105 = icmp slt i32 %4100, 10
  %4106 = or i1 %4104, %4105
  br i1 %4106, label %originalBBpart21054, label %originalBB1052alteredBB

originalBBpart21054:                              ; preds = %originalBB1052
  br label %4107, !dbg !2788

4107:                                             ; preds = %originalBBpart21054
  %4108 = load i64, i64* %21, align 8, !dbg !2790
  %4109 = load i64, i64* %12, align 8, !dbg !2790
  %4110 = icmp ult i64 %4108, %4109, !dbg !2790
  br i1 %4110, label %4111, label %4131, !dbg !2793

4111:                                             ; preds = %4107
  %4112 = load i32, i32* @x.37
  %4113 = load i32, i32* @y.38
  %4114 = sub i32 %4112, 1
  %4115 = mul i32 %4112, %4114
  %4116 = urem i32 %4115, 2
  %4117 = icmp eq i32 %4116, 0
  %4118 = icmp slt i32 %4113, 10
  %4119 = or i1 %4117, %4118
  br i1 %4119, label %originalBB1056, label %originalBB1056alteredBB

originalBB1056:                                   ; preds = %4111, %originalBB1056alteredBB
  %4120 = load i8*, i8** %11, align 8, !dbg !2790
  %4121 = load i64, i64* %21, align 8, !dbg !2790
  %4122 = getelementptr inbounds i8, i8* %4120, i64 %4121, !dbg !2790
  store i8 39, i8* %4122, align 1, !dbg !2790
  %4123 = load i32, i32* @x.37
  %4124 = load i32, i32* @y.38
  %4125 = sub i32 %4123, 1
  %4126 = mul i32 %4123, %4125
  %4127 = urem i32 %4126, 2
  %4128 = icmp eq i32 %4127, 0
  %4129 = icmp slt i32 %4124, 10
  %4130 = or i1 %4128, %4129
  br i1 %4130, label %originalBBpart21058, label %originalBB1056alteredBB

originalBBpart21058:                              ; preds = %originalBB1056
  br label %4131, !dbg !2790

4131:                                             ; preds = %originalBBpart21058, %4107
  %4132 = load i32, i32* @x.37
  %4133 = load i32, i32* @y.38
  %4134 = sub i32 %4132, 1
  %4135 = mul i32 %4132, %4134
  %4136 = urem i32 %4135, 2
  %4137 = icmp eq i32 %4136, 0
  %4138 = icmp slt i32 %4133, 10
  %4139 = or i1 %4137, %4138
  br i1 %4139, label %originalBB1060, label %originalBB1060alteredBB

originalBB1060:                                   ; preds = %4131, %originalBB1060alteredBB
  %4140 = load i64, i64* %21, align 8, !dbg !2793
  %4141 = add i64 %4140, 1, !dbg !2793
  store i64 %4141, i64* %21, align 8, !dbg !2793
  %4142 = load i32, i32* @x.37
  %4143 = load i32, i32* @y.38
  %4144 = sub i32 %4142, 1
  %4145 = mul i32 %4142, %4144
  %4146 = urem i32 %4145, 2
  %4147 = icmp eq i32 %4146, 0
  %4148 = icmp slt i32 %4143, 10
  %4149 = or i1 %4147, %4148
  br i1 %4149, label %originalBBpart21074, label %originalBB1060alteredBB

originalBBpart21074:                              ; preds = %originalBB1060
  br label %4150, !dbg !2793

4150:                                             ; preds = %originalBBpart21074
  %4151 = load i32, i32* @x.37
  %4152 = load i32, i32* @y.38
  %4153 = sub i32 %4151, 1
  %4154 = mul i32 %4151, %4153
  %4155 = urem i32 %4154, 2
  %4156 = icmp eq i32 %4155, 0
  %4157 = icmp slt i32 %4152, 10
  %4158 = or i1 %4156, %4157
  br i1 %4158, label %originalBB1076, label %originalBB1076alteredBB

originalBB1076:                                   ; preds = %4150, %originalBB1076alteredBB
  %4159 = load i32, i32* @x.37
  %4160 = load i32, i32* @y.38
  %4161 = sub i32 %4159, 1
  %4162 = mul i32 %4159, %4161
  %4163 = urem i32 %4162, 2
  %4164 = icmp eq i32 %4163, 0
  %4165 = icmp slt i32 %4160, 10
  %4166 = or i1 %4164, %4165
  br i1 %4166, label %originalBBpart21078, label %originalBB1076alteredBB

originalBBpart21078:                              ; preds = %originalBB1076
  br label %4167, !dbg !2788

4167:                                             ; preds = %originalBBpart21078
  %4168 = load i32, i32* @x.37
  %4169 = load i32, i32* @y.38
  %4170 = sub i32 %4168, 1
  %4171 = mul i32 %4168, %4170
  %4172 = urem i32 %4171, 2
  %4173 = icmp eq i32 %4172, 0
  %4174 = icmp slt i32 %4169, 10
  %4175 = or i1 %4173, %4174
  br i1 %4175, label %originalBB1080, label %originalBB1080alteredBB

originalBB1080:                                   ; preds = %4167, %originalBB1080alteredBB
  %4176 = load i64, i64* %21, align 8, !dbg !2794
  %4177 = load i64, i64* %12, align 8, !dbg !2794
  %4178 = icmp ult i64 %4176, %4177, !dbg !2794
  %4179 = load i32, i32* @x.37
  %4180 = load i32, i32* @y.38
  %4181 = sub i32 %4179, 1
  %4182 = mul i32 %4179, %4181
  %4183 = urem i32 %4182, 2
  %4184 = icmp eq i32 %4183, 0
  %4185 = icmp slt i32 %4180, 10
  %4186 = or i1 %4184, %4185
  br i1 %4186, label %originalBBpart21082, label %originalBB1080alteredBB

originalBBpart21082:                              ; preds = %originalBB1080
  br i1 %4178, label %4187, label %4191, !dbg !2797

4187:                                             ; preds = %originalBBpart21082
  %4188 = load i8*, i8** %11, align 8, !dbg !2794
  %4189 = load i64, i64* %21, align 8, !dbg !2794
  %4190 = getelementptr inbounds i8, i8* %4188, i64 %4189, !dbg !2794
  store i8 39, i8* %4190, align 1, !dbg !2794
  br label %4191, !dbg !2794

4191:                                             ; preds = %4187, %originalBBpart21082
  %4192 = load i32, i32* @x.37
  %4193 = load i32, i32* @y.38
  %4194 = sub i32 %4192, 1
  %4195 = mul i32 %4192, %4194
  %4196 = urem i32 %4195, 2
  %4197 = icmp eq i32 %4196, 0
  %4198 = icmp slt i32 %4193, 10
  %4199 = or i1 %4197, %4198
  br i1 %4199, label %originalBB1084, label %originalBB1084alteredBB

originalBB1084:                                   ; preds = %4191, %originalBB1084alteredBB
  %4200 = load i64, i64* %21, align 8, !dbg !2797
  %4201 = add i64 %4200, 1, !dbg !2797
  store i64 %4201, i64* %21, align 8, !dbg !2797
  %4202 = load i32, i32* @x.37
  %4203 = load i32, i32* @y.38
  %4204 = sub i32 %4202, 1
  %4205 = mul i32 %4202, %4204
  %4206 = urem i32 %4205, 2
  %4207 = icmp eq i32 %4206, 0
  %4208 = icmp slt i32 %4203, 10
  %4209 = or i1 %4207, %4208
  br i1 %4209, label %originalBBpart21096, label %originalBB1084alteredBB

originalBBpart21096:                              ; preds = %originalBB1084
  br label %4210, !dbg !2797

4210:                                             ; preds = %originalBBpart21096
  %4211 = load i32, i32* @x.37
  %4212 = load i32, i32* @y.38
  %4213 = sub i32 %4211, 1
  %4214 = mul i32 %4211, %4213
  %4215 = urem i32 %4214, 2
  %4216 = icmp eq i32 %4215, 0
  %4217 = icmp slt i32 %4212, 10
  %4218 = or i1 %4216, %4217
  br i1 %4218, label %originalBB1098, label %originalBB1098alteredBB

originalBB1098:                                   ; preds = %4210, %originalBB1098alteredBB
  store i8 0, i8* %28, align 1, !dbg !2788
  %4219 = load i32, i32* @x.37
  %4220 = load i32, i32* @y.38
  %4221 = sub i32 %4219, 1
  %4222 = mul i32 %4219, %4221
  %4223 = urem i32 %4222, 2
  %4224 = icmp eq i32 %4223, 0
  %4225 = icmp slt i32 %4220, 10
  %4226 = or i1 %4224, %4225
  br i1 %4226, label %originalBBpart21100, label %originalBB1098alteredBB

originalBBpart21100:                              ; preds = %originalBB1098
  br label %4227, !dbg !2788

4227:                                             ; preds = %originalBBpart21100, %originalBBpart21050, %originalBBpart21046
  %4228 = load i32, i32* @x.37
  %4229 = load i32, i32* @y.38
  %4230 = sub i32 %4228, 1
  %4231 = mul i32 %4228, %4230
  %4232 = urem i32 %4231, 2
  %4233 = icmp eq i32 %4232, 0
  %4234 = icmp slt i32 %4229, 10
  %4235 = or i1 %4233, %4234
  br i1 %4235, label %originalBB1102, label %originalBB1102alteredBB

originalBB1102:                                   ; preds = %4227, %originalBB1102alteredBB
  %4236 = load i32, i32* @x.37
  %4237 = load i32, i32* @y.38
  %4238 = sub i32 %4236, 1
  %4239 = mul i32 %4236, %4238
  %4240 = urem i32 %4239, 2
  %4241 = icmp eq i32 %4240, 0
  %4242 = icmp slt i32 %4237, 10
  %4243 = or i1 %4241, %4242
  br i1 %4243, label %originalBBpart21104, label %originalBB1102alteredBB

originalBBpart21104:                              ; preds = %originalBB1102
  br label %4244, !dbg !2787

4244:                                             ; preds = %originalBBpart21104
  br label %4245, !dbg !2798

4245:                                             ; preds = %4244
  %4246 = load i64, i64* %21, align 8, !dbg !2799
  %4247 = load i64, i64* %12, align 8, !dbg !2799
  %4248 = icmp ult i64 %4246, %4247, !dbg !2799
  br i1 %4248, label %4249, label %4270, !dbg !2802

4249:                                             ; preds = %4245
  %4250 = load i32, i32* @x.37
  %4251 = load i32, i32* @y.38
  %4252 = sub i32 %4250, 1
  %4253 = mul i32 %4250, %4252
  %4254 = urem i32 %4253, 2
  %4255 = icmp eq i32 %4254, 0
  %4256 = icmp slt i32 %4251, 10
  %4257 = or i1 %4255, %4256
  br i1 %4257, label %originalBB1106, label %originalBB1106alteredBB

originalBB1106:                                   ; preds = %4249, %originalBB1106alteredBB
  %4258 = load i8, i8* %31, align 1, !dbg !2799
  %4259 = load i8*, i8** %11, align 8, !dbg !2799
  %4260 = load i64, i64* %21, align 8, !dbg !2799
  %4261 = getelementptr inbounds i8, i8* %4259, i64 %4260, !dbg !2799
  store i8 %4258, i8* %4261, align 1, !dbg !2799
  %4262 = load i32, i32* @x.37
  %4263 = load i32, i32* @y.38
  %4264 = sub i32 %4262, 1
  %4265 = mul i32 %4262, %4264
  %4266 = urem i32 %4265, 2
  %4267 = icmp eq i32 %4266, 0
  %4268 = icmp slt i32 %4263, 10
  %4269 = or i1 %4267, %4268
  br i1 %4269, label %originalBBpart21108, label %originalBB1106alteredBB

originalBBpart21108:                              ; preds = %originalBB1106
  br label %4270, !dbg !2799

4270:                                             ; preds = %originalBBpart21108, %4245
  %4271 = load i32, i32* @x.37
  %4272 = load i32, i32* @y.38
  %4273 = sub i32 %4271, 1
  %4274 = mul i32 %4271, %4273
  %4275 = urem i32 %4274, 2
  %4276 = icmp eq i32 %4275, 0
  %4277 = icmp slt i32 %4272, 10
  %4278 = or i1 %4276, %4277
  br i1 %4278, label %originalBB1110, label %originalBB1110alteredBB

originalBB1110:                                   ; preds = %4270, %originalBB1110alteredBB
  %4279 = load i64, i64* %21, align 8, !dbg !2802
  %4280 = add i64 %4279, 1, !dbg !2802
  store i64 %4280, i64* %21, align 8, !dbg !2802
  %4281 = load i32, i32* @x.37
  %4282 = load i32, i32* @y.38
  %4283 = sub i32 %4281, 1
  %4284 = mul i32 %4281, %4283
  %4285 = urem i32 %4284, 2
  %4286 = icmp eq i32 %4285, 0
  %4287 = icmp slt i32 %4282, 10
  %4288 = or i1 %4286, %4287
  br i1 %4288, label %originalBBpart21121, label %originalBB1110alteredBB

originalBBpart21121:                              ; preds = %originalBB1110
  br label %4289, !dbg !2802

4289:                                             ; preds = %originalBBpart21121
  %4290 = load i32, i32* @x.37
  %4291 = load i32, i32* @y.38
  %4292 = sub i32 %4290, 1
  %4293 = mul i32 %4290, %4292
  %4294 = urem i32 %4293, 2
  %4295 = icmp eq i32 %4294, 0
  %4296 = icmp slt i32 %4291, 10
  %4297 = or i1 %4295, %4296
  br i1 %4297, label %originalBB1123, label %originalBB1123alteredBB

originalBB1123:                                   ; preds = %4289, %originalBB1123alteredBB
  %4298 = load i8*, i8** %13, align 8, !dbg !2803
  %4299 = load i64, i64* %20, align 8, !dbg !2804
  %4300 = add i64 %4299, 1, !dbg !2804
  store i64 %4300, i64* %20, align 8, !dbg !2804
  %4301 = getelementptr inbounds i8, i8* %4298, i64 %4300, !dbg !2803
  %4302 = load i8, i8* %4301, align 1, !dbg !2803
  store i8 %4302, i8* %31, align 1, !dbg !2805
  %4303 = load i32, i32* @x.37
  %4304 = load i32, i32* @y.38
  %4305 = sub i32 %4303, 1
  %4306 = mul i32 %4303, %4305
  %4307 = urem i32 %4306, 2
  %4308 = icmp eq i32 %4307, 0
  %4309 = icmp slt i32 %4304, 10
  %4310 = or i1 %4308, %4309
  br i1 %4310, label %originalBBpart21130, label %originalBB1123alteredBB

originalBBpart21130:                              ; preds = %originalBB1123
  br label %3360, !dbg !2806, !llvm.loop !2807

4311:                                             ; preds = %originalBBpart21038
  %4312 = load i32, i32* @x.37
  %4313 = load i32, i32* @y.38
  %4314 = sub i32 %4312, 1
  %4315 = mul i32 %4312, %4314
  %4316 = urem i32 %4315, 2
  %4317 = icmp eq i32 %4316, 0
  %4318 = icmp slt i32 %4313, 10
  %4319 = or i1 %4317, %4318
  br i1 %4319, label %originalBB1132, label %originalBB1132alteredBB

originalBB1132:                                   ; preds = %4311, %originalBB1132alteredBB
  %4320 = load i32, i32* @x.37
  %4321 = load i32, i32* @y.38
  %4322 = sub i32 %4320, 1
  %4323 = mul i32 %4320, %4322
  %4324 = urem i32 %4323, 2
  %4325 = icmp eq i32 %4324, 0
  %4326 = icmp slt i32 %4321, 10
  %4327 = or i1 %4325, %4326
  br i1 %4327, label %originalBBpart21134, label %originalBB1132alteredBB

originalBBpart21134:                              ; preds = %originalBB1132
  br label %4822, !dbg !2810

4328:                                             ; preds = %originalBBpart2831, %originalBBpart2827
  %4329 = load i32, i32* @x.37
  %4330 = load i32, i32* @y.38
  %4331 = sub i32 %4329, 1
  %4332 = mul i32 %4329, %4331
  %4333 = urem i32 %4332, 2
  %4334 = icmp eq i32 %4333, 0
  %4335 = icmp slt i32 %4330, 10
  %4336 = or i1 %4334, %4335
  br i1 %4336, label %originalBB1136, label %originalBB1136alteredBB

originalBB1136:                                   ; preds = %4328, %originalBB1136alteredBB
  %4337 = load i32, i32* @x.37
  %4338 = load i32, i32* @y.38
  %4339 = sub i32 %4337, 1
  %4340 = mul i32 %4337, %4339
  %4341 = urem i32 %4340, 2
  %4342 = icmp eq i32 %4341, 0
  %4343 = icmp slt i32 %4338, 10
  %4344 = or i1 %4342, %4343
  br i1 %4344, label %originalBBpart21138, label %originalBB1136alteredBB

originalBBpart21138:                              ; preds = %originalBB1136
  br label %4345, !dbg !2811

4345:                                             ; preds = %originalBBpart21138, %originalBBpart2675, %originalBBpart2671, %originalBBpart2585, %originalBBpart2573, %originalBBpart2561, %originalBBpart2549, %originalBBpart2465, %1492
  %4346 = load i32, i32* @x.37
  %4347 = load i32, i32* @y.38
  %4348 = sub i32 %4346, 1
  %4349 = mul i32 %4346, %4348
  %4350 = urem i32 %4349, 2
  %4351 = icmp eq i32 %4350, 0
  %4352 = icmp slt i32 %4347, 10
  %4353 = or i1 %4351, %4352
  br i1 %4353, label %originalBB1140, label %originalBB1140alteredBB

originalBB1140:                                   ; preds = %4345, %originalBB1140alteredBB
  %4354 = load i8, i8* %25, align 1, !dbg !2812
  %4355 = trunc i8 %4354 to i1, !dbg !2812
  %4356 = load i32, i32* @x.37
  %4357 = load i32, i32* @y.38
  %4358 = sub i32 %4356, 1
  %4359 = mul i32 %4356, %4358
  %4360 = urem i32 %4359, 2
  %4361 = icmp eq i32 %4360, 0
  %4362 = icmp slt i32 %4357, 10
  %4363 = or i1 %4361, %4362
  br i1 %4363, label %originalBBpart21142, label %originalBB1140alteredBB

originalBBpart21142:                              ; preds = %originalBB1140
  br i1 %4355, label %4364, label %4367, !dbg !2814

4364:                                             ; preds = %originalBBpart21142
  %4365 = load i32, i32* %15, align 4, !dbg !2815
  %4366 = icmp ne i32 %4365, 2, !dbg !2816
  br i1 %4366, label %4386, label %4367, !dbg !2817

4367:                                             ; preds = %4364, %originalBBpart21142
  %4368 = load i32, i32* @x.37
  %4369 = load i32, i32* @y.38
  %4370 = sub i32 %4368, 1
  %4371 = mul i32 %4368, %4370
  %4372 = urem i32 %4371, 2
  %4373 = icmp eq i32 %4372, 0
  %4374 = icmp slt i32 %4369, 10
  %4375 = or i1 %4373, %4374
  br i1 %4375, label %originalBB1144, label %originalBB1144alteredBB

originalBB1144:                                   ; preds = %4367, %originalBB1144alteredBB
  %4376 = load i8, i8* %27, align 1, !dbg !2818
  %4377 = trunc i8 %4376 to i1, !dbg !2818
  %4378 = load i32, i32* @x.37
  %4379 = load i32, i32* @y.38
  %4380 = sub i32 %4378, 1
  %4381 = mul i32 %4378, %4380
  %4382 = urem i32 %4381, 2
  %4383 = icmp eq i32 %4382, 0
  %4384 = icmp slt i32 %4379, 10
  %4385 = or i1 %4383, %4384
  br i1 %4385, label %originalBBpart21146, label %originalBB1144alteredBB

originalBBpart21146:                              ; preds = %originalBB1144
  br i1 %4377, label %4386, label %4419, !dbg !2819

4386:                                             ; preds = %originalBBpart21146, %4364
  %4387 = load i32*, i32** %17, align 8, !dbg !2820
  %4388 = icmp ne i32* %4387, null, !dbg !2820
  br i1 %4388, label %4389, label %4419, !dbg !2821

4389:                                             ; preds = %4386
  %4390 = load i32, i32* @x.37
  %4391 = load i32, i32* @y.38
  %4392 = sub i32 %4390, 1
  %4393 = mul i32 %4390, %4392
  %4394 = urem i32 %4393, 2
  %4395 = icmp eq i32 %4394, 0
  %4396 = icmp slt i32 %4391, 10
  %4397 = or i1 %4395, %4396
  br i1 %4397, label %originalBB1148, label %originalBB1148alteredBB

originalBB1148:                                   ; preds = %4389, %originalBB1148alteredBB
  %4398 = load i32*, i32** %17, align 8, !dbg !2822
  %4399 = load i8, i8* %31, align 1, !dbg !2823
  %4400 = zext i8 %4399 to i64, !dbg !2823
  %4401 = udiv i64 %4400, 32, !dbg !2824
  %4402 = getelementptr inbounds i32, i32* %4398, i64 %4401, !dbg !2822
  %4403 = load i32, i32* %4402, align 4, !dbg !2822
  %4404 = load i8, i8* %31, align 1, !dbg !2825
  %4405 = zext i8 %4404 to i64, !dbg !2825
  %4406 = urem i64 %4405, 32, !dbg !2826
  %4407 = trunc i64 %4406 to i32, !dbg !2827
  %4408 = lshr i32 %4403, %4407, !dbg !2827
  %4409 = and i32 %4408, 1, !dbg !2828
  %4410 = icmp ne i32 %4409, 0, !dbg !2828
  %4411 = load i32, i32* @x.37
  %4412 = load i32, i32* @y.38
  %4413 = sub i32 %4411, 1
  %4414 = mul i32 %4411, %4413
  %4415 = urem i32 %4414, 2
  %4416 = icmp eq i32 %4415, 0
  %4417 = icmp slt i32 %4412, 10
  %4418 = or i1 %4416, %4417
  br i1 %4418, label %originalBBpart21169, label %originalBB1148alteredBB

originalBBpart21169:                              ; preds = %originalBB1148
  br i1 %4410, label %4455, label %4419, !dbg !2829

4419:                                             ; preds = %originalBBpart21169, %4386, %originalBBpart21146
  %4420 = load i32, i32* @x.37
  %4421 = load i32, i32* @y.38
  %4422 = sub i32 %4420, 1
  %4423 = mul i32 %4420, %4422
  %4424 = urem i32 %4423, 2
  %4425 = icmp eq i32 %4424, 0
  %4426 = icmp slt i32 %4421, 10
  %4427 = or i1 %4425, %4426
  br i1 %4427, label %originalBB1171, label %originalBB1171alteredBB

originalBB1171:                                   ; preds = %4419, %originalBB1171alteredBB
  %4428 = load i8, i8* %33, align 1, !dbg !2830
  %4429 = trunc i8 %4428 to i1, !dbg !2830
  %4430 = load i32, i32* @x.37
  %4431 = load i32, i32* @y.38
  %4432 = sub i32 %4430, 1
  %4433 = mul i32 %4430, %4432
  %4434 = urem i32 %4433, 2
  %4435 = icmp eq i32 %4434, 0
  %4436 = icmp slt i32 %4431, 10
  %4437 = or i1 %4435, %4436
  br i1 %4437, label %originalBBpart21173, label %originalBB1171alteredBB

originalBBpart21173:                              ; preds = %originalBB1171
  br i1 %4429, label %4455, label %4438, !dbg !2831

4438:                                             ; preds = %originalBBpart21173
  %4439 = load i32, i32* @x.37
  %4440 = load i32, i32* @y.38
  %4441 = sub i32 %4439, 1
  %4442 = mul i32 %4439, %4441
  %4443 = urem i32 %4442, 2
  %4444 = icmp eq i32 %4443, 0
  %4445 = icmp slt i32 %4440, 10
  %4446 = or i1 %4444, %4445
  br i1 %4446, label %originalBB1175, label %originalBB1175alteredBB

originalBB1175:                                   ; preds = %4438, %originalBB1175alteredBB
  %4447 = load i32, i32* @x.37
  %4448 = load i32, i32* @y.38
  %4449 = sub i32 %4447, 1
  %4450 = mul i32 %4447, %4449
  %4451 = urem i32 %4450, 2
  %4452 = icmp eq i32 %4451, 0
  %4453 = icmp slt i32 %4448, 10
  %4454 = or i1 %4452, %4453
  br i1 %4454, label %originalBBpart21177, label %originalBB1175alteredBB

originalBBpart21177:                              ; preds = %originalBB1175
  br label %4822, !dbg !2832

4455:                                             ; preds = %originalBBpart21173, %originalBBpart21169
  %4456 = load i32, i32* @x.37
  %4457 = load i32, i32* @y.38
  %4458 = sub i32 %4456, 1
  %4459 = mul i32 %4456, %4458
  %4460 = urem i32 %4459, 2
  %4461 = icmp eq i32 %4460, 0
  %4462 = icmp slt i32 %4457, 10
  %4463 = or i1 %4461, %4462
  br i1 %4463, label %originalBB1179, label %originalBB1179alteredBB

originalBB1179:                                   ; preds = %4455, %originalBB1179alteredBB
  %4464 = load i32, i32* @x.37
  %4465 = load i32, i32* @y.38
  %4466 = sub i32 %4464, 1
  %4467 = mul i32 %4464, %4466
  %4468 = urem i32 %4467, 2
  %4469 = icmp eq i32 %4468, 0
  %4470 = icmp slt i32 %4465, 10
  %4471 = or i1 %4469, %4470
  br i1 %4471, label %originalBBpart21181, label %originalBB1179alteredBB

originalBBpart21181:                              ; preds = %originalBB1179
  br label %4472, !dbg !2830

4472:                                             ; preds = %originalBBpart21181, %originalBBpart2545
  call void @llvm.dbg.label(metadata !2833), !dbg !2834
  %4473 = load i32, i32* @x.37
  %4474 = load i32, i32* @y.38
  %4475 = sub i32 %4473, 1
  %4476 = mul i32 %4473, %4475
  %4477 = urem i32 %4476, 2
  %4478 = icmp eq i32 %4477, 0
  %4479 = icmp slt i32 %4474, 10
  %4480 = or i1 %4478, %4479
  br i1 %4480, label %originalBB1183, label %originalBB1183alteredBB

originalBB1183:                                   ; preds = %4472, %originalBB1183alteredBB
  %4481 = load i32, i32* @x.37
  %4482 = load i32, i32* @y.38
  %4483 = sub i32 %4481, 1
  %4484 = mul i32 %4481, %4483
  %4485 = urem i32 %4484, 2
  %4486 = icmp eq i32 %4485, 0
  %4487 = icmp slt i32 %4482, 10
  %4488 = or i1 %4486, %4487
  br i1 %4488, label %originalBBpart21185, label %originalBB1183alteredBB

originalBBpart21185:                              ; preds = %originalBB1183
  br label %4489, !dbg !2835

4489:                                             ; preds = %originalBBpart21185
  %4490 = load i32, i32* @x.37
  %4491 = load i32, i32* @y.38
  %4492 = sub i32 %4490, 1
  %4493 = mul i32 %4490, %4492
  %4494 = urem i32 %4493, 2
  %4495 = icmp eq i32 %4494, 0
  %4496 = icmp slt i32 %4491, 10
  %4497 = or i1 %4495, %4496
  br i1 %4497, label %originalBB1187, label %originalBB1187alteredBB

originalBB1187:                                   ; preds = %4489, %originalBB1187alteredBB
  %4498 = load i8, i8* %27, align 1, !dbg !2836
  %4499 = trunc i8 %4498 to i1, !dbg !2836
  %4500 = load i32, i32* @x.37
  %4501 = load i32, i32* @y.38
  %4502 = sub i32 %4500, 1
  %4503 = mul i32 %4500, %4502
  %4504 = urem i32 %4503, 2
  %4505 = icmp eq i32 %4504, 0
  %4506 = icmp slt i32 %4501, 10
  %4507 = or i1 %4505, %4506
  br i1 %4507, label %originalBBpart21189, label %originalBB1187alteredBB

originalBBpart21189:                              ; preds = %originalBB1187
  br i1 %4499, label %4508, label %4525, !dbg !2839

4508:                                             ; preds = %originalBBpart21189
  %4509 = load i32, i32* @x.37
  %4510 = load i32, i32* @y.38
  %4511 = sub i32 %4509, 1
  %4512 = mul i32 %4509, %4511
  %4513 = urem i32 %4512, 2
  %4514 = icmp eq i32 %4513, 0
  %4515 = icmp slt i32 %4510, 10
  %4516 = or i1 %4514, %4515
  br i1 %4516, label %originalBB1191, label %originalBB1191alteredBB

originalBB1191:                                   ; preds = %4508, %originalBB1191alteredBB
  %4517 = load i32, i32* @x.37
  %4518 = load i32, i32* @y.38
  %4519 = sub i32 %4517, 1
  %4520 = mul i32 %4517, %4519
  %4521 = urem i32 %4520, 2
  %4522 = icmp eq i32 %4521, 0
  %4523 = icmp slt i32 %4518, 10
  %4524 = or i1 %4522, %4523
  br i1 %4524, label %originalBBpart21193, label %originalBB1191alteredBB

originalBBpart21193:                              ; preds = %originalBB1191
  br label %5470, !dbg !2836

4525:                                             ; preds = %originalBBpart21189
  %4526 = load i32, i32* @x.37
  %4527 = load i32, i32* @y.38
  %4528 = sub i32 %4526, 1
  %4529 = mul i32 %4526, %4528
  %4530 = urem i32 %4529, 2
  %4531 = icmp eq i32 %4530, 0
  %4532 = icmp slt i32 %4527, 10
  %4533 = or i1 %4531, %4532
  br i1 %4533, label %originalBB1195, label %originalBB1195alteredBB

originalBB1195:                                   ; preds = %4525, %originalBB1195alteredBB
  store i8 1, i8* %34, align 1, !dbg !2839
  %4534 = load i32, i32* %15, align 4, !dbg !2840
  %4535 = icmp eq i32 %4534, 2, !dbg !2840
  %4536 = load i32, i32* @x.37
  %4537 = load i32, i32* @y.38
  %4538 = sub i32 %4536, 1
  %4539 = mul i32 %4536, %4538
  %4540 = urem i32 %4539, 2
  %4541 = icmp eq i32 %4540, 0
  %4542 = icmp slt i32 %4537, 10
  %4543 = or i1 %4541, %4542
  br i1 %4543, label %originalBBpart21197, label %originalBB1195alteredBB

originalBBpart21197:                              ; preds = %originalBB1195
  br i1 %4535, label %4544, label %4744, !dbg !2840

4544:                                             ; preds = %originalBBpart21197
  %4545 = load i32, i32* @x.37
  %4546 = load i32, i32* @y.38
  %4547 = sub i32 %4545, 1
  %4548 = mul i32 %4545, %4547
  %4549 = urem i32 %4548, 2
  %4550 = icmp eq i32 %4549, 0
  %4551 = icmp slt i32 %4546, 10
  %4552 = or i1 %4550, %4551
  br i1 %4552, label %originalBB1199, label %originalBB1199alteredBB

originalBB1199:                                   ; preds = %4544, %originalBB1199alteredBB
  %4553 = load i8, i8* %28, align 1, !dbg !2840
  %4554 = trunc i8 %4553 to i1, !dbg !2840
  %4555 = load i32, i32* @x.37
  %4556 = load i32, i32* @y.38
  %4557 = sub i32 %4555, 1
  %4558 = mul i32 %4555, %4557
  %4559 = urem i32 %4558, 2
  %4560 = icmp eq i32 %4559, 0
  %4561 = icmp slt i32 %4556, 10
  %4562 = or i1 %4560, %4561
  br i1 %4562, label %originalBBpart21201, label %originalBB1199alteredBB

originalBBpart21201:                              ; preds = %originalBB1199
  br i1 %4554, label %4744, label %4563, !dbg !2839

4563:                                             ; preds = %originalBBpart21201
  %4564 = load i32, i32* @x.37
  %4565 = load i32, i32* @y.38
  %4566 = sub i32 %4564, 1
  %4567 = mul i32 %4564, %4566
  %4568 = urem i32 %4567, 2
  %4569 = icmp eq i32 %4568, 0
  %4570 = icmp slt i32 %4565, 10
  %4571 = or i1 %4569, %4570
  br i1 %4571, label %originalBB1203, label %originalBB1203alteredBB

originalBB1203:                                   ; preds = %4563, %originalBB1203alteredBB
  %4572 = load i32, i32* @x.37
  %4573 = load i32, i32* @y.38
  %4574 = sub i32 %4572, 1
  %4575 = mul i32 %4572, %4574
  %4576 = urem i32 %4575, 2
  %4577 = icmp eq i32 %4576, 0
  %4578 = icmp slt i32 %4573, 10
  %4579 = or i1 %4577, %4578
  br i1 %4579, label %originalBBpart21205, label %originalBB1203alteredBB

originalBBpart21205:                              ; preds = %originalBB1203
  br label %4580, !dbg !2842

4580:                                             ; preds = %originalBBpart21205
  %4581 = load i32, i32* @x.37
  %4582 = load i32, i32* @y.38
  %4583 = sub i32 %4581, 1
  %4584 = mul i32 %4581, %4583
  %4585 = urem i32 %4584, 2
  %4586 = icmp eq i32 %4585, 0
  %4587 = icmp slt i32 %4582, 10
  %4588 = or i1 %4586, %4587
  br i1 %4588, label %originalBB1207, label %originalBB1207alteredBB

originalBB1207:                                   ; preds = %4580, %originalBB1207alteredBB
  %4589 = load i64, i64* %21, align 8, !dbg !2844
  %4590 = load i64, i64* %12, align 8, !dbg !2844
  %4591 = icmp ult i64 %4589, %4590, !dbg !2844
  %4592 = load i32, i32* @x.37
  %4593 = load i32, i32* @y.38
  %4594 = sub i32 %4592, 1
  %4595 = mul i32 %4592, %4594
  %4596 = urem i32 %4595, 2
  %4597 = icmp eq i32 %4596, 0
  %4598 = icmp slt i32 %4593, 10
  %4599 = or i1 %4597, %4598
  br i1 %4599, label %originalBBpart21209, label %originalBB1207alteredBB

originalBBpart21209:                              ; preds = %originalBB1207
  br i1 %4591, label %4600, label %4604, !dbg !2847

4600:                                             ; preds = %originalBBpart21209
  %4601 = load i8*, i8** %11, align 8, !dbg !2844
  %4602 = load i64, i64* %21, align 8, !dbg !2844
  %4603 = getelementptr inbounds i8, i8* %4601, i64 %4602, !dbg !2844
  store i8 39, i8* %4603, align 1, !dbg !2844
  br label %4604, !dbg !2844

4604:                                             ; preds = %4600, %originalBBpart21209
  %4605 = load i32, i32* @x.37
  %4606 = load i32, i32* @y.38
  %4607 = sub i32 %4605, 1
  %4608 = mul i32 %4605, %4607
  %4609 = urem i32 %4608, 2
  %4610 = icmp eq i32 %4609, 0
  %4611 = icmp slt i32 %4606, 10
  %4612 = or i1 %4610, %4611
  br i1 %4612, label %originalBB1211, label %originalBB1211alteredBB

originalBB1211:                                   ; preds = %4604, %originalBB1211alteredBB
  %4613 = load i64, i64* %21, align 8, !dbg !2847
  %4614 = add i64 %4613, 1, !dbg !2847
  store i64 %4614, i64* %21, align 8, !dbg !2847
  %4615 = load i32, i32* @x.37
  %4616 = load i32, i32* @y.38
  %4617 = sub i32 %4615, 1
  %4618 = mul i32 %4615, %4617
  %4619 = urem i32 %4618, 2
  %4620 = icmp eq i32 %4619, 0
  %4621 = icmp slt i32 %4616, 10
  %4622 = or i1 %4620, %4621
  br i1 %4622, label %originalBBpart21221, label %originalBB1211alteredBB

originalBBpart21221:                              ; preds = %originalBB1211
  br label %4623, !dbg !2847

4623:                                             ; preds = %originalBBpart21221
  br label %4624, !dbg !2842

4624:                                             ; preds = %4623
  %4625 = load i32, i32* @x.37
  %4626 = load i32, i32* @y.38
  %4627 = sub i32 %4625, 1
  %4628 = mul i32 %4625, %4627
  %4629 = urem i32 %4628, 2
  %4630 = icmp eq i32 %4629, 0
  %4631 = icmp slt i32 %4626, 10
  %4632 = or i1 %4630, %4631
  br i1 %4632, label %originalBB1223, label %originalBB1223alteredBB

originalBB1223:                                   ; preds = %4624, %originalBB1223alteredBB
  %4633 = load i64, i64* %21, align 8, !dbg !2848
  %4634 = load i64, i64* %12, align 8, !dbg !2848
  %4635 = icmp ult i64 %4633, %4634, !dbg !2848
  %4636 = load i32, i32* @x.37
  %4637 = load i32, i32* @y.38
  %4638 = sub i32 %4636, 1
  %4639 = mul i32 %4636, %4638
  %4640 = urem i32 %4639, 2
  %4641 = icmp eq i32 %4640, 0
  %4642 = icmp slt i32 %4637, 10
  %4643 = or i1 %4641, %4642
  br i1 %4643, label %originalBBpart21225, label %originalBB1223alteredBB

originalBBpart21225:                              ; preds = %originalBB1223
  br i1 %4635, label %4644, label %4664, !dbg !2851

4644:                                             ; preds = %originalBBpart21225
  %4645 = load i32, i32* @x.37
  %4646 = load i32, i32* @y.38
  %4647 = sub i32 %4645, 1
  %4648 = mul i32 %4645, %4647
  %4649 = urem i32 %4648, 2
  %4650 = icmp eq i32 %4649, 0
  %4651 = icmp slt i32 %4646, 10
  %4652 = or i1 %4650, %4651
  br i1 %4652, label %originalBB1227, label %originalBB1227alteredBB

originalBB1227:                                   ; preds = %4644, %originalBB1227alteredBB
  %4653 = load i8*, i8** %11, align 8, !dbg !2848
  %4654 = load i64, i64* %21, align 8, !dbg !2848
  %4655 = getelementptr inbounds i8, i8* %4653, i64 %4654, !dbg !2848
  store i8 36, i8* %4655, align 1, !dbg !2848
  %4656 = load i32, i32* @x.37
  %4657 = load i32, i32* @y.38
  %4658 = sub i32 %4656, 1
  %4659 = mul i32 %4656, %4658
  %4660 = urem i32 %4659, 2
  %4661 = icmp eq i32 %4660, 0
  %4662 = icmp slt i32 %4657, 10
  %4663 = or i1 %4661, %4662
  br i1 %4663, label %originalBBpart21229, label %originalBB1227alteredBB

originalBBpart21229:                              ; preds = %originalBB1227
  br label %4664, !dbg !2848

4664:                                             ; preds = %originalBBpart21229, %originalBBpart21225
  %4665 = load i32, i32* @x.37
  %4666 = load i32, i32* @y.38
  %4667 = sub i32 %4665, 1
  %4668 = mul i32 %4665, %4667
  %4669 = urem i32 %4668, 2
  %4670 = icmp eq i32 %4669, 0
  %4671 = icmp slt i32 %4666, 10
  %4672 = or i1 %4670, %4671
  br i1 %4672, label %originalBB1231, label %originalBB1231alteredBB

originalBB1231:                                   ; preds = %4664, %originalBB1231alteredBB
  %4673 = load i64, i64* %21, align 8, !dbg !2851
  %4674 = add i64 %4673, 1, !dbg !2851
  store i64 %4674, i64* %21, align 8, !dbg !2851
  %4675 = load i32, i32* @x.37
  %4676 = load i32, i32* @y.38
  %4677 = sub i32 %4675, 1
  %4678 = mul i32 %4675, %4677
  %4679 = urem i32 %4678, 2
  %4680 = icmp eq i32 %4679, 0
  %4681 = icmp slt i32 %4676, 10
  %4682 = or i1 %4680, %4681
  br i1 %4682, label %originalBBpart21234, label %originalBB1231alteredBB

originalBBpart21234:                              ; preds = %originalBB1231
  br label %4683, !dbg !2851

4683:                                             ; preds = %originalBBpart21234
  %4684 = load i32, i32* @x.37
  %4685 = load i32, i32* @y.38
  %4686 = sub i32 %4684, 1
  %4687 = mul i32 %4684, %4686
  %4688 = urem i32 %4687, 2
  %4689 = icmp eq i32 %4688, 0
  %4690 = icmp slt i32 %4685, 10
  %4691 = or i1 %4689, %4690
  br i1 %4691, label %originalBB1236, label %originalBB1236alteredBB

originalBB1236:                                   ; preds = %4683, %originalBB1236alteredBB
  %4692 = load i32, i32* @x.37
  %4693 = load i32, i32* @y.38
  %4694 = sub i32 %4692, 1
  %4695 = mul i32 %4692, %4694
  %4696 = urem i32 %4695, 2
  %4697 = icmp eq i32 %4696, 0
  %4698 = icmp slt i32 %4693, 10
  %4699 = or i1 %4697, %4698
  br i1 %4699, label %originalBBpart21238, label %originalBB1236alteredBB

originalBBpart21238:                              ; preds = %originalBB1236
  br label %4700, !dbg !2842

4700:                                             ; preds = %originalBBpart21238
  %4701 = load i32, i32* @x.37
  %4702 = load i32, i32* @y.38
  %4703 = sub i32 %4701, 1
  %4704 = mul i32 %4701, %4703
  %4705 = urem i32 %4704, 2
  %4706 = icmp eq i32 %4705, 0
  %4707 = icmp slt i32 %4702, 10
  %4708 = or i1 %4706, %4707
  br i1 %4708, label %originalBB1240, label %originalBB1240alteredBB

originalBB1240:                                   ; preds = %4700, %originalBB1240alteredBB
  %4709 = load i64, i64* %21, align 8, !dbg !2852
  %4710 = load i64, i64* %12, align 8, !dbg !2852
  %4711 = icmp ult i64 %4709, %4710, !dbg !2852
  %4712 = load i32, i32* @x.37
  %4713 = load i32, i32* @y.38
  %4714 = sub i32 %4712, 1
  %4715 = mul i32 %4712, %4714
  %4716 = urem i32 %4715, 2
  %4717 = icmp eq i32 %4716, 0
  %4718 = icmp slt i32 %4713, 10
  %4719 = or i1 %4717, %4718
  br i1 %4719, label %originalBBpart21242, label %originalBB1240alteredBB

originalBBpart21242:                              ; preds = %originalBB1240
  br i1 %4711, label %4720, label %4724, !dbg !2855

4720:                                             ; preds = %originalBBpart21242
  %4721 = load i8*, i8** %11, align 8, !dbg !2852
  %4722 = load i64, i64* %21, align 8, !dbg !2852
  %4723 = getelementptr inbounds i8, i8* %4721, i64 %4722, !dbg !2852
  store i8 39, i8* %4723, align 1, !dbg !2852
  br label %4724, !dbg !2852

4724:                                             ; preds = %4720, %originalBBpart21242
  %4725 = load i32, i32* @x.37
  %4726 = load i32, i32* @y.38
  %4727 = sub i32 %4725, 1
  %4728 = mul i32 %4725, %4727
  %4729 = urem i32 %4728, 2
  %4730 = icmp eq i32 %4729, 0
  %4731 = icmp slt i32 %4726, 10
  %4732 = or i1 %4730, %4731
  br i1 %4732, label %originalBB1244, label %originalBB1244alteredBB

originalBB1244:                                   ; preds = %4724, %originalBB1244alteredBB
  %4733 = load i64, i64* %21, align 8, !dbg !2855
  %4734 = add i64 %4733, 1, !dbg !2855
  store i64 %4734, i64* %21, align 8, !dbg !2855
  %4735 = load i32, i32* @x.37
  %4736 = load i32, i32* @y.38
  %4737 = sub i32 %4735, 1
  %4738 = mul i32 %4735, %4737
  %4739 = urem i32 %4738, 2
  %4740 = icmp eq i32 %4739, 0
  %4741 = icmp slt i32 %4736, 10
  %4742 = or i1 %4740, %4741
  br i1 %4742, label %originalBBpart21258, label %originalBB1244alteredBB

originalBBpart21258:                              ; preds = %originalBB1244
  br label %4743, !dbg !2855

4743:                                             ; preds = %originalBBpart21258
  store i8 1, i8* %28, align 1, !dbg !2842
  br label %4744, !dbg !2842

4744:                                             ; preds = %4743, %originalBBpart21201, %originalBBpart21197
  br label %4745, !dbg !2839

4745:                                             ; preds = %4744
  %4746 = load i64, i64* %21, align 8, !dbg !2856
  %4747 = load i64, i64* %12, align 8, !dbg !2856
  %4748 = icmp ult i64 %4746, %4747, !dbg !2856
  br i1 %4748, label %4749, label %4769, !dbg !2859

4749:                                             ; preds = %4745
  %4750 = load i32, i32* @x.37
  %4751 = load i32, i32* @y.38
  %4752 = sub i32 %4750, 1
  %4753 = mul i32 %4750, %4752
  %4754 = urem i32 %4753, 2
  %4755 = icmp eq i32 %4754, 0
  %4756 = icmp slt i32 %4751, 10
  %4757 = or i1 %4755, %4756
  br i1 %4757, label %originalBB1260, label %originalBB1260alteredBB

originalBB1260:                                   ; preds = %4749, %originalBB1260alteredBB
  %4758 = load i8*, i8** %11, align 8, !dbg !2856
  %4759 = load i64, i64* %21, align 8, !dbg !2856
  %4760 = getelementptr inbounds i8, i8* %4758, i64 %4759, !dbg !2856
  store i8 92, i8* %4760, align 1, !dbg !2856
  %4761 = load i32, i32* @x.37
  %4762 = load i32, i32* @y.38
  %4763 = sub i32 %4761, 1
  %4764 = mul i32 %4761, %4763
  %4765 = urem i32 %4764, 2
  %4766 = icmp eq i32 %4765, 0
  %4767 = icmp slt i32 %4762, 10
  %4768 = or i1 %4766, %4767
  br i1 %4768, label %originalBBpart21262, label %originalBB1260alteredBB

originalBBpart21262:                              ; preds = %originalBB1260
  br label %4769, !dbg !2856

4769:                                             ; preds = %originalBBpart21262, %4745
  %4770 = load i32, i32* @x.37
  %4771 = load i32, i32* @y.38
  %4772 = sub i32 %4770, 1
  %4773 = mul i32 %4770, %4772
  %4774 = urem i32 %4773, 2
  %4775 = icmp eq i32 %4774, 0
  %4776 = icmp slt i32 %4771, 10
  %4777 = or i1 %4775, %4776
  br i1 %4777, label %originalBB1264, label %originalBB1264alteredBB

originalBB1264:                                   ; preds = %4769, %originalBB1264alteredBB
  %4778 = load i64, i64* %21, align 8, !dbg !2859
  %4779 = add i64 %4778, 1, !dbg !2859
  store i64 %4779, i64* %21, align 8, !dbg !2859
  %4780 = load i32, i32* @x.37
  %4781 = load i32, i32* @y.38
  %4782 = sub i32 %4780, 1
  %4783 = mul i32 %4780, %4782
  %4784 = urem i32 %4783, 2
  %4785 = icmp eq i32 %4784, 0
  %4786 = icmp slt i32 %4781, 10
  %4787 = or i1 %4785, %4786
  br i1 %4787, label %originalBBpart21278, label %originalBB1264alteredBB

originalBBpart21278:                              ; preds = %originalBB1264
  br label %4788, !dbg !2859

4788:                                             ; preds = %originalBBpart21278
  %4789 = load i32, i32* @x.37
  %4790 = load i32, i32* @y.38
  %4791 = sub i32 %4789, 1
  %4792 = mul i32 %4789, %4791
  %4793 = urem i32 %4792, 2
  %4794 = icmp eq i32 %4793, 0
  %4795 = icmp slt i32 %4790, 10
  %4796 = or i1 %4794, %4795
  br i1 %4796, label %originalBB1280, label %originalBB1280alteredBB

originalBB1280:                                   ; preds = %4788, %originalBB1280alteredBB
  %4797 = load i32, i32* @x.37
  %4798 = load i32, i32* @y.38
  %4799 = sub i32 %4797, 1
  %4800 = mul i32 %4797, %4799
  %4801 = urem i32 %4800, 2
  %4802 = icmp eq i32 %4801, 0
  %4803 = icmp slt i32 %4798, 10
  %4804 = or i1 %4802, %4803
  br i1 %4804, label %originalBBpart21282, label %originalBB1280alteredBB

originalBBpart21282:                              ; preds = %originalBB1280
  br label %4805, !dbg !2839

4805:                                             ; preds = %originalBBpart21282
  %4806 = load i32, i32* @x.37
  %4807 = load i32, i32* @y.38
  %4808 = sub i32 %4806, 1
  %4809 = mul i32 %4806, %4808
  %4810 = urem i32 %4809, 2
  %4811 = icmp eq i32 %4810, 0
  %4812 = icmp slt i32 %4807, 10
  %4813 = or i1 %4811, %4812
  br i1 %4813, label %originalBB1284, label %originalBB1284alteredBB

originalBB1284:                                   ; preds = %4805, %originalBB1284alteredBB
  %4814 = load i32, i32* @x.37
  %4815 = load i32, i32* @y.38
  %4816 = sub i32 %4814, 1
  %4817 = mul i32 %4814, %4816
  %4818 = urem i32 %4817, 2
  %4819 = icmp eq i32 %4818, 0
  %4820 = icmp slt i32 %4815, 10
  %4821 = or i1 %4819, %4820
  br i1 %4821, label %originalBBpart21286, label %originalBB1284alteredBB

originalBBpart21286:                              ; preds = %originalBB1284
  br label %4822, !dbg !2839

4822:                                             ; preds = %originalBBpart21286, %originalBBpart21177, %originalBBpart21134, %originalBBpart2521, %2068
  call void @llvm.dbg.label(metadata !2860), !dbg !2861
  br label %4823, !dbg !2862

4823:                                             ; preds = %4822
  %4824 = load i8, i8* %28, align 1, !dbg !2863
  %4825 = trunc i8 %4824 to i1, !dbg !2863
  br i1 %4825, label %4826, label %4982, !dbg !2863

4826:                                             ; preds = %4823
  %4827 = load i32, i32* @x.37
  %4828 = load i32, i32* @y.38
  %4829 = sub i32 %4827, 1
  %4830 = mul i32 %4827, %4829
  %4831 = urem i32 %4830, 2
  %4832 = icmp eq i32 %4831, 0
  %4833 = icmp slt i32 %4828, 10
  %4834 = or i1 %4832, %4833
  br i1 %4834, label %originalBB1288, label %originalBB1288alteredBB

originalBB1288:                                   ; preds = %4826, %originalBB1288alteredBB
  %4835 = load i8, i8* %34, align 1, !dbg !2863
  %4836 = trunc i8 %4835 to i1, !dbg !2863
  %4837 = load i32, i32* @x.37
  %4838 = load i32, i32* @y.38
  %4839 = sub i32 %4837, 1
  %4840 = mul i32 %4837, %4839
  %4841 = urem i32 %4840, 2
  %4842 = icmp eq i32 %4841, 0
  %4843 = icmp slt i32 %4838, 10
  %4844 = or i1 %4842, %4843
  br i1 %4844, label %originalBBpart21290, label %originalBB1288alteredBB

originalBBpart21290:                              ; preds = %originalBB1288
  br i1 %4836, label %4982, label %4845, !dbg !2866

4845:                                             ; preds = %originalBBpart21290
  %4846 = load i32, i32* @x.37
  %4847 = load i32, i32* @y.38
  %4848 = sub i32 %4846, 1
  %4849 = mul i32 %4846, %4848
  %4850 = urem i32 %4849, 2
  %4851 = icmp eq i32 %4850, 0
  %4852 = icmp slt i32 %4847, 10
  %4853 = or i1 %4851, %4852
  br i1 %4853, label %originalBB1292, label %originalBB1292alteredBB

originalBB1292:                                   ; preds = %4845, %originalBB1292alteredBB
  %4854 = load i32, i32* @x.37
  %4855 = load i32, i32* @y.38
  %4856 = sub i32 %4854, 1
  %4857 = mul i32 %4854, %4856
  %4858 = urem i32 %4857, 2
  %4859 = icmp eq i32 %4858, 0
  %4860 = icmp slt i32 %4855, 10
  %4861 = or i1 %4859, %4860
  br i1 %4861, label %originalBBpart21294, label %originalBB1292alteredBB

originalBBpart21294:                              ; preds = %originalBB1292
  br label %4862, !dbg !2867

4862:                                             ; preds = %originalBBpart21294
  %4863 = load i64, i64* %21, align 8, !dbg !2869
  %4864 = load i64, i64* %12, align 8, !dbg !2869
  %4865 = icmp ult i64 %4863, %4864, !dbg !2869
  br i1 %4865, label %4866, label %4870, !dbg !2872

4866:                                             ; preds = %4862
  %4867 = load i8*, i8** %11, align 8, !dbg !2869
  %4868 = load i64, i64* %21, align 8, !dbg !2869
  %4869 = getelementptr inbounds i8, i8* %4867, i64 %4868, !dbg !2869
  store i8 39, i8* %4869, align 1, !dbg !2869
  br label %4870, !dbg !2869

4870:                                             ; preds = %4866, %4862
  %4871 = load i32, i32* @x.37
  %4872 = load i32, i32* @y.38
  %4873 = sub i32 %4871, 1
  %4874 = mul i32 %4871, %4873
  %4875 = urem i32 %4874, 2
  %4876 = icmp eq i32 %4875, 0
  %4877 = icmp slt i32 %4872, 10
  %4878 = or i1 %4876, %4877
  br i1 %4878, label %originalBB1296, label %originalBB1296alteredBB

originalBB1296:                                   ; preds = %4870, %originalBB1296alteredBB
  %4879 = load i64, i64* %21, align 8, !dbg !2872
  %4880 = add i64 %4879, 1, !dbg !2872
  store i64 %4880, i64* %21, align 8, !dbg !2872
  %4881 = load i32, i32* @x.37
  %4882 = load i32, i32* @y.38
  %4883 = sub i32 %4881, 1
  %4884 = mul i32 %4881, %4883
  %4885 = urem i32 %4884, 2
  %4886 = icmp eq i32 %4885, 0
  %4887 = icmp slt i32 %4882, 10
  %4888 = or i1 %4886, %4887
  br i1 %4888, label %originalBBpart21314, label %originalBB1296alteredBB

originalBBpart21314:                              ; preds = %originalBB1296
  br label %4889, !dbg !2872

4889:                                             ; preds = %originalBBpart21314
  %4890 = load i32, i32* @x.37
  %4891 = load i32, i32* @y.38
  %4892 = sub i32 %4890, 1
  %4893 = mul i32 %4890, %4892
  %4894 = urem i32 %4893, 2
  %4895 = icmp eq i32 %4894, 0
  %4896 = icmp slt i32 %4891, 10
  %4897 = or i1 %4895, %4896
  br i1 %4897, label %originalBB1316, label %originalBB1316alteredBB

originalBB1316:                                   ; preds = %4889, %originalBB1316alteredBB
  %4898 = load i32, i32* @x.37
  %4899 = load i32, i32* @y.38
  %4900 = sub i32 %4898, 1
  %4901 = mul i32 %4898, %4900
  %4902 = urem i32 %4901, 2
  %4903 = icmp eq i32 %4902, 0
  %4904 = icmp slt i32 %4899, 10
  %4905 = or i1 %4903, %4904
  br i1 %4905, label %originalBBpart21318, label %originalBB1316alteredBB

originalBBpart21318:                              ; preds = %originalBB1316
  br label %4906, !dbg !2867

4906:                                             ; preds = %originalBBpart21318
  %4907 = load i32, i32* @x.37
  %4908 = load i32, i32* @y.38
  %4909 = sub i32 %4907, 1
  %4910 = mul i32 %4907, %4909
  %4911 = urem i32 %4910, 2
  %4912 = icmp eq i32 %4911, 0
  %4913 = icmp slt i32 %4908, 10
  %4914 = or i1 %4912, %4913
  br i1 %4914, label %originalBB1320, label %originalBB1320alteredBB

originalBB1320:                                   ; preds = %4906, %originalBB1320alteredBB
  %4915 = load i64, i64* %21, align 8, !dbg !2873
  %4916 = load i64, i64* %12, align 8, !dbg !2873
  %4917 = icmp ult i64 %4915, %4916, !dbg !2873
  %4918 = load i32, i32* @x.37
  %4919 = load i32, i32* @y.38
  %4920 = sub i32 %4918, 1
  %4921 = mul i32 %4918, %4920
  %4922 = urem i32 %4921, 2
  %4923 = icmp eq i32 %4922, 0
  %4924 = icmp slt i32 %4919, 10
  %4925 = or i1 %4923, %4924
  br i1 %4925, label %originalBBpart21322, label %originalBB1320alteredBB

originalBBpart21322:                              ; preds = %originalBB1320
  br i1 %4917, label %4926, label %4946, !dbg !2876

4926:                                             ; preds = %originalBBpart21322
  %4927 = load i32, i32* @x.37
  %4928 = load i32, i32* @y.38
  %4929 = sub i32 %4927, 1
  %4930 = mul i32 %4927, %4929
  %4931 = urem i32 %4930, 2
  %4932 = icmp eq i32 %4931, 0
  %4933 = icmp slt i32 %4928, 10
  %4934 = or i1 %4932, %4933
  br i1 %4934, label %originalBB1324, label %originalBB1324alteredBB

originalBB1324:                                   ; preds = %4926, %originalBB1324alteredBB
  %4935 = load i8*, i8** %11, align 8, !dbg !2873
  %4936 = load i64, i64* %21, align 8, !dbg !2873
  %4937 = getelementptr inbounds i8, i8* %4935, i64 %4936, !dbg !2873
  store i8 39, i8* %4937, align 1, !dbg !2873
  %4938 = load i32, i32* @x.37
  %4939 = load i32, i32* @y.38
  %4940 = sub i32 %4938, 1
  %4941 = mul i32 %4938, %4940
  %4942 = urem i32 %4941, 2
  %4943 = icmp eq i32 %4942, 0
  %4944 = icmp slt i32 %4939, 10
  %4945 = or i1 %4943, %4944
  br i1 %4945, label %originalBBpart21326, label %originalBB1324alteredBB

originalBBpart21326:                              ; preds = %originalBB1324
  br label %4946, !dbg !2873

4946:                                             ; preds = %originalBBpart21326, %originalBBpart21322
  %4947 = load i32, i32* @x.37
  %4948 = load i32, i32* @y.38
  %4949 = sub i32 %4947, 1
  %4950 = mul i32 %4947, %4949
  %4951 = urem i32 %4950, 2
  %4952 = icmp eq i32 %4951, 0
  %4953 = icmp slt i32 %4948, 10
  %4954 = or i1 %4952, %4953
  br i1 %4954, label %originalBB1328, label %originalBB1328alteredBB

originalBB1328:                                   ; preds = %4946, %originalBB1328alteredBB
  %4955 = load i64, i64* %21, align 8, !dbg !2876
  %4956 = add i64 %4955, 1, !dbg !2876
  store i64 %4956, i64* %21, align 8, !dbg !2876
  %4957 = load i32, i32* @x.37
  %4958 = load i32, i32* @y.38
  %4959 = sub i32 %4957, 1
  %4960 = mul i32 %4957, %4959
  %4961 = urem i32 %4960, 2
  %4962 = icmp eq i32 %4961, 0
  %4963 = icmp slt i32 %4958, 10
  %4964 = or i1 %4962, %4963
  br i1 %4964, label %originalBBpart21334, label %originalBB1328alteredBB

originalBBpart21334:                              ; preds = %originalBB1328
  br label %4965, !dbg !2876

4965:                                             ; preds = %originalBBpart21334
  %4966 = load i32, i32* @x.37
  %4967 = load i32, i32* @y.38
  %4968 = sub i32 %4966, 1
  %4969 = mul i32 %4966, %4968
  %4970 = urem i32 %4969, 2
  %4971 = icmp eq i32 %4970, 0
  %4972 = icmp slt i32 %4967, 10
  %4973 = or i1 %4971, %4972
  br i1 %4973, label %originalBB1336, label %originalBB1336alteredBB

originalBB1336:                                   ; preds = %4965, %originalBB1336alteredBB
  store i8 0, i8* %28, align 1, !dbg !2867
  %4974 = load i32, i32* @x.37
  %4975 = load i32, i32* @y.38
  %4976 = sub i32 %4974, 1
  %4977 = mul i32 %4974, %4976
  %4978 = urem i32 %4977, 2
  %4979 = icmp eq i32 %4978, 0
  %4980 = icmp slt i32 %4975, 10
  %4981 = or i1 %4979, %4980
  br i1 %4981, label %originalBBpart21338, label %originalBB1336alteredBB

originalBBpart21338:                              ; preds = %originalBB1336
  br label %4982, !dbg !2867

4982:                                             ; preds = %originalBBpart21338, %originalBBpart21290, %4823
  %4983 = load i32, i32* @x.37
  %4984 = load i32, i32* @y.38
  %4985 = sub i32 %4983, 1
  %4986 = mul i32 %4983, %4985
  %4987 = urem i32 %4986, 2
  %4988 = icmp eq i32 %4987, 0
  %4989 = icmp slt i32 %4984, 10
  %4990 = or i1 %4988, %4989
  br i1 %4990, label %originalBB1340, label %originalBB1340alteredBB

originalBB1340:                                   ; preds = %4982, %originalBB1340alteredBB
  %4991 = load i32, i32* @x.37
  %4992 = load i32, i32* @y.38
  %4993 = sub i32 %4991, 1
  %4994 = mul i32 %4991, %4993
  %4995 = urem i32 %4994, 2
  %4996 = icmp eq i32 %4995, 0
  %4997 = icmp slt i32 %4992, 10
  %4998 = or i1 %4996, %4997
  br i1 %4998, label %originalBBpart21342, label %originalBB1340alteredBB

originalBBpart21342:                              ; preds = %originalBB1340
  br label %4999, !dbg !2866

4999:                                             ; preds = %originalBBpart21342
  br label %5000, !dbg !2877

5000:                                             ; preds = %4999
  %5001 = load i32, i32* @x.37
  %5002 = load i32, i32* @y.38
  %5003 = sub i32 %5001, 1
  %5004 = mul i32 %5001, %5003
  %5005 = urem i32 %5004, 2
  %5006 = icmp eq i32 %5005, 0
  %5007 = icmp slt i32 %5002, 10
  %5008 = or i1 %5006, %5007
  br i1 %5008, label %originalBB1344, label %originalBB1344alteredBB

originalBB1344:                                   ; preds = %5000, %originalBB1344alteredBB
  %5009 = load i64, i64* %21, align 8, !dbg !2878
  %5010 = load i64, i64* %12, align 8, !dbg !2878
  %5011 = icmp ult i64 %5009, %5010, !dbg !2878
  %5012 = load i32, i32* @x.37
  %5013 = load i32, i32* @y.38
  %5014 = sub i32 %5012, 1
  %5015 = mul i32 %5012, %5014
  %5016 = urem i32 %5015, 2
  %5017 = icmp eq i32 %5016, 0
  %5018 = icmp slt i32 %5013, 10
  %5019 = or i1 %5017, %5018
  br i1 %5019, label %originalBBpart21346, label %originalBB1344alteredBB

originalBBpart21346:                              ; preds = %originalBB1344
  br i1 %5011, label %5020, label %5041, !dbg !2881

5020:                                             ; preds = %originalBBpart21346
  %5021 = load i32, i32* @x.37
  %5022 = load i32, i32* @y.38
  %5023 = sub i32 %5021, 1
  %5024 = mul i32 %5021, %5023
  %5025 = urem i32 %5024, 2
  %5026 = icmp eq i32 %5025, 0
  %5027 = icmp slt i32 %5022, 10
  %5028 = or i1 %5026, %5027
  br i1 %5028, label %originalBB1348, label %originalBB1348alteredBB

originalBB1348:                                   ; preds = %5020, %originalBB1348alteredBB
  %5029 = load i8, i8* %31, align 1, !dbg !2878
  %5030 = load i8*, i8** %11, align 8, !dbg !2878
  %5031 = load i64, i64* %21, align 8, !dbg !2878
  %5032 = getelementptr inbounds i8, i8* %5030, i64 %5031, !dbg !2878
  store i8 %5029, i8* %5032, align 1, !dbg !2878
  %5033 = load i32, i32* @x.37
  %5034 = load i32, i32* @y.38
  %5035 = sub i32 %5033, 1
  %5036 = mul i32 %5033, %5035
  %5037 = urem i32 %5036, 2
  %5038 = icmp eq i32 %5037, 0
  %5039 = icmp slt i32 %5034, 10
  %5040 = or i1 %5038, %5039
  br i1 %5040, label %originalBBpart21350, label %originalBB1348alteredBB

originalBBpart21350:                              ; preds = %originalBB1348
  br label %5041, !dbg !2878

5041:                                             ; preds = %originalBBpart21350, %originalBBpart21346
  %5042 = load i64, i64* %21, align 8, !dbg !2881
  %5043 = add i64 %5042, 1, !dbg !2881
  store i64 %5043, i64* %21, align 8, !dbg !2881
  br label %5044, !dbg !2881

5044:                                             ; preds = %5041
  %5045 = load i8, i8* %35, align 1, !dbg !2882
  %5046 = trunc i8 %5045 to i1, !dbg !2882
  br i1 %5046, label %5064, label %5047, !dbg !2884

5047:                                             ; preds = %5044
  %5048 = load i32, i32* @x.37
  %5049 = load i32, i32* @y.38
  %5050 = sub i32 %5048, 1
  %5051 = mul i32 %5048, %5050
  %5052 = urem i32 %5051, 2
  %5053 = icmp eq i32 %5052, 0
  %5054 = icmp slt i32 %5049, 10
  %5055 = or i1 %5053, %5054
  br i1 %5055, label %originalBB1352, label %originalBB1352alteredBB

originalBB1352:                                   ; preds = %5047, %originalBB1352alteredBB
  store i8 0, i8* %30, align 1, !dbg !2885
  %5056 = load i32, i32* @x.37
  %5057 = load i32, i32* @y.38
  %5058 = sub i32 %5056, 1
  %5059 = mul i32 %5056, %5058
  %5060 = urem i32 %5059, 2
  %5061 = icmp eq i32 %5060, 0
  %5062 = icmp slt i32 %5057, 10
  %5063 = or i1 %5061, %5062
  br i1 %5063, label %originalBBpart21354, label %originalBB1352alteredBB

originalBBpart21354:                              ; preds = %originalBB1352
  br label %5064, !dbg !2886

5064:                                             ; preds = %originalBBpart21354, %5044
  %5065 = load i32, i32* @x.37
  %5066 = load i32, i32* @y.38
  %5067 = sub i32 %5065, 1
  %5068 = mul i32 %5065, %5067
  %5069 = urem i32 %5068, 2
  %5070 = icmp eq i32 %5069, 0
  %5071 = icmp slt i32 %5066, 10
  %5072 = or i1 %5070, %5071
  br i1 %5072, label %originalBB1356, label %originalBB1356alteredBB

originalBB1356:                                   ; preds = %5064, %originalBB1356alteredBB
  %5073 = load i32, i32* @x.37
  %5074 = load i32, i32* @y.38
  %5075 = sub i32 %5073, 1
  %5076 = mul i32 %5073, %5075
  %5077 = urem i32 %5076, 2
  %5078 = icmp eq i32 %5077, 0
  %5079 = icmp slt i32 %5074, 10
  %5080 = or i1 %5078, %5079
  br i1 %5080, label %originalBBpart21358, label %originalBB1356alteredBB

originalBBpart21358:                              ; preds = %originalBB1356
  br label %5081, !dbg !2887

5081:                                             ; preds = %originalBBpart21358, %originalBBpart2353
  %5082 = load i64, i64* %20, align 8, !dbg !2888
  %5083 = add i64 %5082, 1, !dbg !2888
  store i64 %5083, i64* %20, align 8, !dbg !2888
  br label %586, !dbg !2889, !llvm.loop !2890

5084:                                             ; preds = %originalBBpart2140
  %5085 = load i32, i32* @x.37
  %5086 = load i32, i32* @y.38
  %5087 = sub i32 %5085, 1
  %5088 = mul i32 %5085, %5087
  %5089 = urem i32 %5088, 2
  %5090 = icmp eq i32 %5089, 0
  %5091 = icmp slt i32 %5086, 10
  %5092 = or i1 %5090, %5091
  br i1 %5092, label %originalBB1360, label %originalBB1360alteredBB

originalBB1360:                                   ; preds = %5084, %originalBB1360alteredBB
  %5093 = load i64, i64* %21, align 8, !dbg !2892
  %5094 = icmp eq i64 %5093, 0, !dbg !2894
  %5095 = load i32, i32* @x.37
  %5096 = load i32, i32* @y.38
  %5097 = sub i32 %5095, 1
  %5098 = mul i32 %5095, %5097
  %5099 = urem i32 %5098, 2
  %5100 = icmp eq i32 %5099, 0
  %5101 = icmp slt i32 %5096, 10
  %5102 = or i1 %5100, %5101
  br i1 %5102, label %originalBBpart21362, label %originalBB1360alteredBB

originalBBpart21362:                              ; preds = %originalBB1360
  br i1 %5094, label %5103, label %5158, !dbg !2895

5103:                                             ; preds = %originalBBpart21362
  %5104 = load i32, i32* @x.37
  %5105 = load i32, i32* @y.38
  %5106 = sub i32 %5104, 1
  %5107 = mul i32 %5104, %5106
  %5108 = urem i32 %5107, 2
  %5109 = icmp eq i32 %5108, 0
  %5110 = icmp slt i32 %5105, 10
  %5111 = or i1 %5109, %5110
  br i1 %5111, label %originalBB1364, label %originalBB1364alteredBB

originalBB1364:                                   ; preds = %5103, %originalBB1364alteredBB
  %5112 = load i32, i32* %15, align 4, !dbg !2896
  %5113 = icmp eq i32 %5112, 2, !dbg !2897
  %5114 = load i32, i32* @x.37
  %5115 = load i32, i32* @y.38
  %5116 = sub i32 %5114, 1
  %5117 = mul i32 %5114, %5116
  %5118 = urem i32 %5117, 2
  %5119 = icmp eq i32 %5118, 0
  %5120 = icmp slt i32 %5115, 10
  %5121 = or i1 %5119, %5120
  br i1 %5121, label %originalBBpart21366, label %originalBB1364alteredBB

originalBBpart21366:                              ; preds = %originalBB1364
  br i1 %5113, label %5122, label %5158, !dbg !2898

5122:                                             ; preds = %originalBBpart21366
  %5123 = load i32, i32* @x.37
  %5124 = load i32, i32* @y.38
  %5125 = sub i32 %5123, 1
  %5126 = mul i32 %5123, %5125
  %5127 = urem i32 %5126, 2
  %5128 = icmp eq i32 %5127, 0
  %5129 = icmp slt i32 %5124, 10
  %5130 = or i1 %5128, %5129
  br i1 %5130, label %originalBB1368, label %originalBB1368alteredBB

originalBB1368:                                   ; preds = %5122, %originalBB1368alteredBB
  %5131 = load i8, i8* %27, align 1, !dbg !2899
  %5132 = trunc i8 %5131 to i1, !dbg !2899
  %5133 = load i32, i32* @x.37
  %5134 = load i32, i32* @y.38
  %5135 = sub i32 %5133, 1
  %5136 = mul i32 %5133, %5135
  %5137 = urem i32 %5136, 2
  %5138 = icmp eq i32 %5137, 0
  %5139 = icmp slt i32 %5134, 10
  %5140 = or i1 %5138, %5139
  br i1 %5140, label %originalBBpart21370, label %originalBB1368alteredBB

originalBBpart21370:                              ; preds = %originalBB1368
  br i1 %5132, label %5141, label %5158, !dbg !2900

5141:                                             ; preds = %originalBBpart21370
  %5142 = load i32, i32* @x.37
  %5143 = load i32, i32* @y.38
  %5144 = sub i32 %5142, 1
  %5145 = mul i32 %5142, %5144
  %5146 = urem i32 %5145, 2
  %5147 = icmp eq i32 %5146, 0
  %5148 = icmp slt i32 %5143, 10
  %5149 = or i1 %5147, %5148
  br i1 %5149, label %originalBB1372, label %originalBB1372alteredBB

originalBB1372:                                   ; preds = %5141, %originalBB1372alteredBB
  %5150 = load i32, i32* @x.37
  %5151 = load i32, i32* @y.38
  %5152 = sub i32 %5150, 1
  %5153 = mul i32 %5150, %5152
  %5154 = urem i32 %5153, 2
  %5155 = icmp eq i32 %5154, 0
  %5156 = icmp slt i32 %5151, 10
  %5157 = or i1 %5155, %5156
  br i1 %5157, label %originalBBpart21374, label %originalBB1372alteredBB

originalBBpart21374:                              ; preds = %originalBB1372
  br label %5470, !dbg !2901

5158:                                             ; preds = %originalBBpart21370, %originalBBpart21366, %originalBBpart21362
  %5159 = load i32, i32* @x.37
  %5160 = load i32, i32* @y.38
  %5161 = sub i32 %5159, 1
  %5162 = mul i32 %5159, %5161
  %5163 = urem i32 %5162, 2
  %5164 = icmp eq i32 %5163, 0
  %5165 = icmp slt i32 %5160, 10
  %5166 = or i1 %5164, %5165
  br i1 %5166, label %originalBB1376, label %originalBB1376alteredBB

originalBB1376:                                   ; preds = %5158, %originalBB1376alteredBB
  %5167 = load i32, i32* %15, align 4, !dbg !2902
  %5168 = icmp eq i32 %5167, 2, !dbg !2904
  %5169 = load i32, i32* @x.37
  %5170 = load i32, i32* @y.38
  %5171 = sub i32 %5169, 1
  %5172 = mul i32 %5169, %5171
  %5173 = urem i32 %5172, 2
  %5174 = icmp eq i32 %5173, 0
  %5175 = icmp slt i32 %5170, 10
  %5176 = or i1 %5174, %5175
  br i1 %5176, label %originalBBpart21378, label %originalBB1376alteredBB

originalBBpart21378:                              ; preds = %originalBB1376
  br i1 %5168, label %5177, label %5302, !dbg !2905

5177:                                             ; preds = %originalBBpart21378
  %5178 = load i8, i8* %27, align 1, !dbg !2906
  %5179 = trunc i8 %5178 to i1, !dbg !2906
  br i1 %5179, label %5302, label %5180, !dbg !2907

5180:                                             ; preds = %5177
  %5181 = load i32, i32* @x.37
  %5182 = load i32, i32* @y.38
  %5183 = sub i32 %5181, 1
  %5184 = mul i32 %5181, %5183
  %5185 = urem i32 %5184, 2
  %5186 = icmp eq i32 %5185, 0
  %5187 = icmp slt i32 %5182, 10
  %5188 = or i1 %5186, %5187
  br i1 %5188, label %originalBB1380, label %originalBB1380alteredBB

originalBB1380:                                   ; preds = %5180, %originalBB1380alteredBB
  %5189 = load i8, i8* %29, align 1, !dbg !2908
  %5190 = trunc i8 %5189 to i1, !dbg !2908
  %5191 = load i32, i32* @x.37
  %5192 = load i32, i32* @y.38
  %5193 = sub i32 %5191, 1
  %5194 = mul i32 %5191, %5193
  %5195 = urem i32 %5194, 2
  %5196 = icmp eq i32 %5195, 0
  %5197 = icmp slt i32 %5192, 10
  %5198 = or i1 %5196, %5197
  br i1 %5198, label %originalBBpart21382, label %originalBB1380alteredBB

originalBBpart21382:                              ; preds = %originalBB1380
  br i1 %5190, label %5199, label %5302, !dbg !2909

5199:                                             ; preds = %originalBBpart21382
  %5200 = load i32, i32* @x.37
  %5201 = load i32, i32* @y.38
  %5202 = sub i32 %5200, 1
  %5203 = mul i32 %5200, %5202
  %5204 = urem i32 %5203, 2
  %5205 = icmp eq i32 %5204, 0
  %5206 = icmp slt i32 %5201, 10
  %5207 = or i1 %5205, %5206
  br i1 %5207, label %originalBB1384, label %originalBB1384alteredBB

originalBB1384:                                   ; preds = %5199, %originalBB1384alteredBB
  %5208 = load i8, i8* %30, align 1, !dbg !2910
  %5209 = trunc i8 %5208 to i1, !dbg !2910
  %5210 = load i32, i32* @x.37
  %5211 = load i32, i32* @y.38
  %5212 = sub i32 %5210, 1
  %5213 = mul i32 %5210, %5212
  %5214 = urem i32 %5213, 2
  %5215 = icmp eq i32 %5214, 0
  %5216 = icmp slt i32 %5211, 10
  %5217 = or i1 %5215, %5216
  br i1 %5217, label %originalBBpart21386, label %originalBB1384alteredBB

originalBBpart21386:                              ; preds = %originalBB1384
  br i1 %5209, label %5218, label %5244, !dbg !2913

5218:                                             ; preds = %originalBBpart21386
  %5219 = load i32, i32* @x.37
  %5220 = load i32, i32* @y.38
  %5221 = sub i32 %5219, 1
  %5222 = mul i32 %5219, %5221
  %5223 = urem i32 %5222, 2
  %5224 = icmp eq i32 %5223, 0
  %5225 = icmp slt i32 %5220, 10
  %5226 = or i1 %5224, %5225
  br i1 %5226, label %originalBB1388, label %originalBB1388alteredBB

originalBB1388:                                   ; preds = %5218, %originalBB1388alteredBB
  %5227 = load i8*, i8** %11, align 8, !dbg !2914
  %5228 = load i64, i64* %22, align 8, !dbg !2915
  %5229 = load i8*, i8** %13, align 8, !dbg !2916
  %5230 = load i64, i64* %14, align 8, !dbg !2917
  %5231 = load i32, i32* %16, align 4, !dbg !2918
  %5232 = load i32*, i32** %17, align 8, !dbg !2919
  %5233 = load i8*, i8** %18, align 8, !dbg !2920
  %5234 = load i8*, i8** %19, align 8, !dbg !2921
  %5235 = call i64 @quotearg_buffer_restyled(i8* %5227, i64 %5228, i8* %5229, i64 %5230, i32 5, i32 %5231, i32* %5232, i8* %5233, i8* %5234), !dbg !2922
  store i64 %5235, i64* %10, align 8, !dbg !2923
  %5236 = load i32, i32* @x.37
  %5237 = load i32, i32* @y.38
  %5238 = sub i32 %5236, 1
  %5239 = mul i32 %5236, %5238
  %5240 = urem i32 %5239, 2
  %5241 = icmp eq i32 %5240, 0
  %5242 = icmp slt i32 %5237, 10
  %5243 = or i1 %5241, %5242
  br i1 %5243, label %originalBBpart21390, label %originalBB1388alteredBB

originalBBpart21390:                              ; preds = %originalBB1388
  br label %5552, !dbg !2923

5244:                                             ; preds = %originalBBpart21386
  %5245 = load i64, i64* %12, align 8, !dbg !2924
  %5246 = icmp ne i64 %5245, 0, !dbg !2924
  br i1 %5246, label %5268, label %5247, !dbg !2926

5247:                                             ; preds = %5244
  %5248 = load i32, i32* @x.37
  %5249 = load i32, i32* @y.38
  %5250 = sub i32 %5248, 1
  %5251 = mul i32 %5248, %5250
  %5252 = urem i32 %5251, 2
  %5253 = icmp eq i32 %5252, 0
  %5254 = icmp slt i32 %5249, 10
  %5255 = or i1 %5253, %5254
  br i1 %5255, label %originalBB1392, label %originalBB1392alteredBB

originalBB1392:                                   ; preds = %5247, %originalBB1392alteredBB
  %5256 = load i64, i64* %22, align 8, !dbg !2927
  %5257 = icmp ne i64 %5256, 0, !dbg !2927
  %5258 = load i32, i32* @x.37
  %5259 = load i32, i32* @y.38
  %5260 = sub i32 %5258, 1
  %5261 = mul i32 %5258, %5260
  %5262 = urem i32 %5261, 2
  %5263 = icmp eq i32 %5262, 0
  %5264 = icmp slt i32 %5259, 10
  %5265 = or i1 %5263, %5264
  br i1 %5265, label %originalBBpart21394, label %originalBB1392alteredBB

originalBBpart21394:                              ; preds = %originalBB1392
  br i1 %5257, label %5266, label %5268, !dbg !2928

5266:                                             ; preds = %originalBBpart21394
  %5267 = load i64, i64* %22, align 8, !dbg !2929
  store i64 %5267, i64* %12, align 8, !dbg !2931
  store i64 0, i64* %21, align 8, !dbg !2932
  br label %50, !dbg !2933

5268:                                             ; preds = %originalBBpart21394, %5244
  %5269 = load i32, i32* @x.37
  %5270 = load i32, i32* @y.38
  %5271 = sub i32 %5269, 1
  %5272 = mul i32 %5269, %5271
  %5273 = urem i32 %5272, 2
  %5274 = icmp eq i32 %5273, 0
  %5275 = icmp slt i32 %5270, 10
  %5276 = or i1 %5274, %5275
  br i1 %5276, label %originalBB1396, label %originalBB1396alteredBB

originalBB1396:                                   ; preds = %5268, %originalBB1396alteredBB
  %5277 = load i32, i32* @x.37
  %5278 = load i32, i32* @y.38
  %5279 = sub i32 %5277, 1
  %5280 = mul i32 %5277, %5279
  %5281 = urem i32 %5280, 2
  %5282 = icmp eq i32 %5281, 0
  %5283 = icmp slt i32 %5278, 10
  %5284 = or i1 %5282, %5283
  br i1 %5284, label %originalBBpart21398, label %originalBB1396alteredBB

originalBBpart21398:                              ; preds = %originalBB1396
  br label %5285

5285:                                             ; preds = %originalBBpart21398
  %5286 = load i32, i32* @x.37
  %5287 = load i32, i32* @y.38
  %5288 = sub i32 %5286, 1
  %5289 = mul i32 %5286, %5288
  %5290 = urem i32 %5289, 2
  %5291 = icmp eq i32 %5290, 0
  %5292 = icmp slt i32 %5287, 10
  %5293 = or i1 %5291, %5292
  br i1 %5293, label %originalBB1400, label %originalBB1400alteredBB

originalBB1400:                                   ; preds = %5285, %originalBB1400alteredBB
  %5294 = load i32, i32* @x.37
  %5295 = load i32, i32* @y.38
  %5296 = sub i32 %5294, 1
  %5297 = mul i32 %5294, %5296
  %5298 = urem i32 %5297, 2
  %5299 = icmp eq i32 %5298, 0
  %5300 = icmp slt i32 %5295, 10
  %5301 = or i1 %5299, %5300
  br i1 %5301, label %originalBBpart21402, label %originalBB1400alteredBB

originalBBpart21402:                              ; preds = %originalBB1400
  br label %5302, !dbg !2934

5302:                                             ; preds = %originalBBpart21402, %originalBBpart21382, %5177, %originalBBpart21378
  %5303 = load i32, i32* @x.37
  %5304 = load i32, i32* @y.38
  %5305 = sub i32 %5303, 1
  %5306 = mul i32 %5303, %5305
  %5307 = urem i32 %5306, 2
  %5308 = icmp eq i32 %5307, 0
  %5309 = icmp slt i32 %5304, 10
  %5310 = or i1 %5308, %5309
  br i1 %5310, label %originalBB1404, label %originalBB1404alteredBB

originalBB1404:                                   ; preds = %5302, %originalBB1404alteredBB
  %5311 = load i8*, i8** %23, align 8, !dbg !2935
  %5312 = icmp ne i8* %5311, null, !dbg !2935
  %5313 = load i32, i32* @x.37
  %5314 = load i32, i32* @y.38
  %5315 = sub i32 %5313, 1
  %5316 = mul i32 %5313, %5315
  %5317 = urem i32 %5316, 2
  %5318 = icmp eq i32 %5317, 0
  %5319 = icmp slt i32 %5314, 10
  %5320 = or i1 %5318, %5319
  br i1 %5320, label %originalBBpart21406, label %originalBB1404alteredBB

originalBBpart21406:                              ; preds = %originalBB1404
  br i1 %5312, label %5321, label %5444, !dbg !2937

5321:                                             ; preds = %originalBBpart21406
  %5322 = load i32, i32* @x.37
  %5323 = load i32, i32* @y.38
  %5324 = sub i32 %5322, 1
  %5325 = mul i32 %5322, %5324
  %5326 = urem i32 %5325, 2
  %5327 = icmp eq i32 %5326, 0
  %5328 = icmp slt i32 %5323, 10
  %5329 = or i1 %5327, %5328
  br i1 %5329, label %originalBB1408, label %originalBB1408alteredBB

originalBB1408:                                   ; preds = %5321, %originalBB1408alteredBB
  %5330 = load i8, i8* %27, align 1, !dbg !2938
  %5331 = trunc i8 %5330 to i1, !dbg !2938
  %5332 = load i32, i32* @x.37
  %5333 = load i32, i32* @y.38
  %5334 = sub i32 %5332, 1
  %5335 = mul i32 %5332, %5334
  %5336 = urem i32 %5335, 2
  %5337 = icmp eq i32 %5336, 0
  %5338 = icmp slt i32 %5333, 10
  %5339 = or i1 %5337, %5338
  br i1 %5339, label %originalBBpart21410, label %originalBB1408alteredBB

originalBBpart21410:                              ; preds = %originalBB1408
  br i1 %5331, label %5444, label %5340, !dbg !2939

5340:                                             ; preds = %originalBBpart21410
  %5341 = load i32, i32* @x.37
  %5342 = load i32, i32* @y.38
  %5343 = sub i32 %5341, 1
  %5344 = mul i32 %5341, %5343
  %5345 = urem i32 %5344, 2
  %5346 = icmp eq i32 %5345, 0
  %5347 = icmp slt i32 %5342, 10
  %5348 = or i1 %5346, %5347
  br i1 %5348, label %originalBB1412, label %originalBB1412alteredBB

originalBB1412:                                   ; preds = %5340, %originalBB1412alteredBB
  %5349 = load i32, i32* @x.37
  %5350 = load i32, i32* @y.38
  %5351 = sub i32 %5349, 1
  %5352 = mul i32 %5349, %5351
  %5353 = urem i32 %5352, 2
  %5354 = icmp eq i32 %5353, 0
  %5355 = icmp slt i32 %5350, 10
  %5356 = or i1 %5354, %5355
  br i1 %5356, label %originalBBpart21414, label %originalBB1412alteredBB

originalBBpart21414:                              ; preds = %originalBB1412
  br label %5357, !dbg !2940

5357:                                             ; preds = %5424, %originalBBpart21414
  %5358 = load i32, i32* @x.37
  %5359 = load i32, i32* @y.38
  %5360 = sub i32 %5358, 1
  %5361 = mul i32 %5358, %5360
  %5362 = urem i32 %5361, 2
  %5363 = icmp eq i32 %5362, 0
  %5364 = icmp slt i32 %5359, 10
  %5365 = or i1 %5363, %5364
  br i1 %5365, label %originalBB1416, label %originalBB1416alteredBB

originalBB1416:                                   ; preds = %5357, %originalBB1416alteredBB
  %5366 = load i8*, i8** %23, align 8, !dbg !2941
  %5367 = load i8, i8* %5366, align 1, !dbg !2944
  %5368 = icmp ne i8 %5367, 0, !dbg !2945
  %5369 = load i32, i32* @x.37
  %5370 = load i32, i32* @y.38
  %5371 = sub i32 %5369, 1
  %5372 = mul i32 %5369, %5371
  %5373 = urem i32 %5372, 2
  %5374 = icmp eq i32 %5373, 0
  %5375 = icmp slt i32 %5370, 10
  %5376 = or i1 %5374, %5375
  br i1 %5376, label %originalBBpart21418, label %originalBB1416alteredBB

originalBBpart21418:                              ; preds = %originalBB1416
  br i1 %5368, label %5377, label %5427, !dbg !2945

5377:                                             ; preds = %originalBBpart21418
  %5378 = load i32, i32* @x.37
  %5379 = load i32, i32* @y.38
  %5380 = sub i32 %5378, 1
  %5381 = mul i32 %5378, %5380
  %5382 = urem i32 %5381, 2
  %5383 = icmp eq i32 %5382, 0
  %5384 = icmp slt i32 %5379, 10
  %5385 = or i1 %5383, %5384
  br i1 %5385, label %originalBB1420, label %originalBB1420alteredBB

originalBB1420:                                   ; preds = %5377, %originalBB1420alteredBB
  %5386 = load i32, i32* @x.37
  %5387 = load i32, i32* @y.38
  %5388 = sub i32 %5386, 1
  %5389 = mul i32 %5386, %5388
  %5390 = urem i32 %5389, 2
  %5391 = icmp eq i32 %5390, 0
  %5392 = icmp slt i32 %5387, 10
  %5393 = or i1 %5391, %5392
  br i1 %5393, label %originalBBpart21422, label %originalBB1420alteredBB

originalBBpart21422:                              ; preds = %originalBB1420
  br label %5394, !dbg !2946

5394:                                             ; preds = %originalBBpart21422
  %5395 = load i64, i64* %21, align 8, !dbg !2947
  %5396 = load i64, i64* %12, align 8, !dbg !2947
  %5397 = icmp ult i64 %5395, %5396, !dbg !2947
  br i1 %5397, label %5398, label %5404, !dbg !2950

5398:                                             ; preds = %5394
  %5399 = load i8*, i8** %23, align 8, !dbg !2947
  %5400 = load i8, i8* %5399, align 1, !dbg !2947
  %5401 = load i8*, i8** %11, align 8, !dbg !2947
  %5402 = load i64, i64* %21, align 8, !dbg !2947
  %5403 = getelementptr inbounds i8, i8* %5401, i64 %5402, !dbg !2947
  store i8 %5400, i8* %5403, align 1, !dbg !2947
  br label %5404, !dbg !2947

5404:                                             ; preds = %5398, %5394
  %5405 = load i64, i64* %21, align 8, !dbg !2950
  %5406 = add i64 %5405, 1, !dbg !2950
  store i64 %5406, i64* %21, align 8, !dbg !2950
  br label %5407, !dbg !2950

5407:                                             ; preds = %5404
  %5408 = load i32, i32* @x.37
  %5409 = load i32, i32* @y.38
  %5410 = sub i32 %5408, 1
  %5411 = mul i32 %5408, %5410
  %5412 = urem i32 %5411, 2
  %5413 = icmp eq i32 %5412, 0
  %5414 = icmp slt i32 %5409, 10
  %5415 = or i1 %5413, %5414
  br i1 %5415, label %originalBB1424, label %originalBB1424alteredBB

originalBB1424:                                   ; preds = %5407, %originalBB1424alteredBB
  %5416 = load i32, i32* @x.37
  %5417 = load i32, i32* @y.38
  %5418 = sub i32 %5416, 1
  %5419 = mul i32 %5416, %5418
  %5420 = urem i32 %5419, 2
  %5421 = icmp eq i32 %5420, 0
  %5422 = icmp slt i32 %5417, 10
  %5423 = or i1 %5421, %5422
  br i1 %5423, label %originalBBpart21426, label %originalBB1424alteredBB

originalBBpart21426:                              ; preds = %originalBB1424
  br label %5424, !dbg !2950

5424:                                             ; preds = %originalBBpart21426
  %5425 = load i8*, i8** %23, align 8, !dbg !2951
  %5426 = getelementptr inbounds i8, i8* %5425, i32 1, !dbg !2951
  store i8* %5426, i8** %23, align 8, !dbg !2951
  br label %5357, !dbg !2952, !llvm.loop !2953

5427:                                             ; preds = %originalBBpart21418
  %5428 = load i32, i32* @x.37
  %5429 = load i32, i32* @y.38
  %5430 = sub i32 %5428, 1
  %5431 = mul i32 %5428, %5430
  %5432 = urem i32 %5431, 2
  %5433 = icmp eq i32 %5432, 0
  %5434 = icmp slt i32 %5429, 10
  %5435 = or i1 %5433, %5434
  br i1 %5435, label %originalBB1428, label %originalBB1428alteredBB

originalBB1428:                                   ; preds = %5427, %originalBB1428alteredBB
  %5436 = load i32, i32* @x.37
  %5437 = load i32, i32* @y.38
  %5438 = sub i32 %5436, 1
  %5439 = mul i32 %5436, %5438
  %5440 = urem i32 %5439, 2
  %5441 = icmp eq i32 %5440, 0
  %5442 = icmp slt i32 %5437, 10
  %5443 = or i1 %5441, %5442
  br i1 %5443, label %originalBBpart21430, label %originalBB1428alteredBB

originalBBpart21430:                              ; preds = %originalBB1428
  br label %5444, !dbg !2954

5444:                                             ; preds = %originalBBpart21430, %originalBBpart21410, %originalBBpart21406
  %5445 = load i32, i32* @x.37
  %5446 = load i32, i32* @y.38
  %5447 = sub i32 %5445, 1
  %5448 = mul i32 %5445, %5447
  %5449 = urem i32 %5448, 2
  %5450 = icmp eq i32 %5449, 0
  %5451 = icmp slt i32 %5446, 10
  %5452 = or i1 %5450, %5451
  br i1 %5452, label %originalBB1432, label %originalBB1432alteredBB

originalBB1432:                                   ; preds = %5444, %originalBB1432alteredBB
  %5453 = load i64, i64* %21, align 8, !dbg !2955
  %5454 = load i64, i64* %12, align 8, !dbg !2957
  %5455 = icmp ult i64 %5453, %5454, !dbg !2958
  %5456 = load i32, i32* @x.37
  %5457 = load i32, i32* @y.38
  %5458 = sub i32 %5456, 1
  %5459 = mul i32 %5456, %5458
  %5460 = urem i32 %5459, 2
  %5461 = icmp eq i32 %5460, 0
  %5462 = icmp slt i32 %5457, 10
  %5463 = or i1 %5461, %5462
  br i1 %5463, label %originalBBpart21434, label %originalBB1432alteredBB

originalBBpart21434:                              ; preds = %originalBB1432
  br i1 %5455, label %5464, label %5468, !dbg !2959

5464:                                             ; preds = %originalBBpart21434
  %5465 = load i8*, i8** %11, align 8, !dbg !2960
  %5466 = load i64, i64* %21, align 8, !dbg !2961
  %5467 = getelementptr inbounds i8, i8* %5465, i64 %5466, !dbg !2960
  store i8 0, i8* %5467, align 1, !dbg !2962
  br label %5468, !dbg !2960

5468:                                             ; preds = %5464, %originalBBpart21434
  %5469 = load i64, i64* %21, align 8, !dbg !2963
  store i64 %5469, i64* %10, align 8, !dbg !2964
  br label %5552, !dbg !2964

5470:                                             ; preds = %originalBBpart21374, %originalBBpart21193, %originalBBpart2851, %originalBBpart2753, %originalBBpart2593, %2424, %originalBBpart2533, %originalBBpart2505, %1639, %originalBBpart2365, %915, %819
  call void @llvm.dbg.label(metadata !2965), !dbg !2966
  %5471 = load i32, i32* @x.37
  %5472 = load i32, i32* @y.38
  %5473 = sub i32 %5471, 1
  %5474 = mul i32 %5471, %5473
  %5475 = urem i32 %5474, 2
  %5476 = icmp eq i32 %5475, 0
  %5477 = icmp slt i32 %5472, 10
  %5478 = or i1 %5476, %5477
  br i1 %5478, label %originalBB1436, label %originalBB1436alteredBB

originalBB1436:                                   ; preds = %5470, %originalBB1436alteredBB
  %5479 = load i32, i32* %15, align 4, !dbg !2967
  %5480 = icmp eq i32 %5479, 2, !dbg !2969
  %5481 = load i32, i32* @x.37
  %5482 = load i32, i32* @y.38
  %5483 = sub i32 %5481, 1
  %5484 = mul i32 %5481, %5483
  %5485 = urem i32 %5484, 2
  %5486 = icmp eq i32 %5485, 0
  %5487 = icmp slt i32 %5482, 10
  %5488 = or i1 %5486, %5487
  br i1 %5488, label %originalBBpart21438, label %originalBB1436alteredBB

originalBBpart21438:                              ; preds = %originalBB1436
  br i1 %5480, label %5489, label %5525, !dbg !2970

5489:                                             ; preds = %originalBBpart21438
  %5490 = load i32, i32* @x.37
  %5491 = load i32, i32* @y.38
  %5492 = sub i32 %5490, 1
  %5493 = mul i32 %5490, %5492
  %5494 = urem i32 %5493, 2
  %5495 = icmp eq i32 %5494, 0
  %5496 = icmp slt i32 %5491, 10
  %5497 = or i1 %5495, %5496
  br i1 %5497, label %originalBB1440, label %originalBB1440alteredBB

originalBB1440:                                   ; preds = %5489, %originalBB1440alteredBB
  %5498 = load i8, i8* %25, align 1, !dbg !2971
  %5499 = trunc i8 %5498 to i1, !dbg !2971
  %5500 = load i32, i32* @x.37
  %5501 = load i32, i32* @y.38
  %5502 = sub i32 %5500, 1
  %5503 = mul i32 %5500, %5502
  %5504 = urem i32 %5503, 2
  %5505 = icmp eq i32 %5504, 0
  %5506 = icmp slt i32 %5501, 10
  %5507 = or i1 %5505, %5506
  br i1 %5507, label %originalBBpart21442, label %originalBB1440alteredBB

originalBBpart21442:                              ; preds = %originalBB1440
  br i1 %5499, label %5508, label %5525, !dbg !2972

5508:                                             ; preds = %originalBBpart21442
  %5509 = load i32, i32* @x.37
  %5510 = load i32, i32* @y.38
  %5511 = sub i32 %5509, 1
  %5512 = mul i32 %5509, %5511
  %5513 = urem i32 %5512, 2
  %5514 = icmp eq i32 %5513, 0
  %5515 = icmp slt i32 %5510, 10
  %5516 = or i1 %5514, %5515
  br i1 %5516, label %originalBB1444, label %originalBB1444alteredBB

originalBB1444:                                   ; preds = %5508, %originalBB1444alteredBB
  store i32 4, i32* %15, align 4, !dbg !2973
  %5517 = load i32, i32* @x.37
  %5518 = load i32, i32* @y.38
  %5519 = sub i32 %5517, 1
  %5520 = mul i32 %5517, %5519
  %5521 = urem i32 %5520, 2
  %5522 = icmp eq i32 %5521, 0
  %5523 = icmp slt i32 %5518, 10
  %5524 = or i1 %5522, %5523
  br i1 %5524, label %originalBBpart21446, label %originalBB1444alteredBB

originalBBpart21446:                              ; preds = %originalBB1444
  br label %5525, !dbg !2974

5525:                                             ; preds = %originalBBpart21446, %originalBBpart21442, %originalBBpart21438
  %5526 = load i32, i32* @x.37
  %5527 = load i32, i32* @y.38
  %5528 = sub i32 %5526, 1
  %5529 = mul i32 %5526, %5528
  %5530 = urem i32 %5529, 2
  %5531 = icmp eq i32 %5530, 0
  %5532 = icmp slt i32 %5527, 10
  %5533 = or i1 %5531, %5532
  br i1 %5533, label %originalBB1448, label %originalBB1448alteredBB

originalBB1448:                                   ; preds = %5525, %originalBB1448alteredBB
  %5534 = load i8*, i8** %11, align 8, !dbg !2975
  %5535 = load i64, i64* %12, align 8, !dbg !2976
  %5536 = load i8*, i8** %13, align 8, !dbg !2977
  %5537 = load i64, i64* %14, align 8, !dbg !2978
  %5538 = load i32, i32* %15, align 4, !dbg !2979
  %5539 = load i32, i32* %16, align 4, !dbg !2980
  %5540 = and i32 %5539, -3, !dbg !2981
  %5541 = load i8*, i8** %18, align 8, !dbg !2982
  %5542 = load i8*, i8** %19, align 8, !dbg !2983
  %5543 = call i64 @quotearg_buffer_restyled(i8* %5534, i64 %5535, i8* %5536, i64 %5537, i32 %5538, i32 %5540, i32* null, i8* %5541, i8* %5542), !dbg !2984
  store i64 %5543, i64* %10, align 8, !dbg !2985
  %5544 = load i32, i32* @x.37
  %5545 = load i32, i32* @y.38
  %5546 = sub i32 %5544, 1
  %5547 = mul i32 %5544, %5546
  %5548 = urem i32 %5547, 2
  %5549 = icmp eq i32 %5548, 0
  %5550 = icmp slt i32 %5545, 10
  %5551 = or i1 %5549, %5550
  br i1 %5551, label %originalBBpart21455, label %originalBB1448alteredBB

originalBBpart21455:                              ; preds = %originalBB1448
  br label %5552, !dbg !2985

5552:                                             ; preds = %originalBBpart21455, %5468, %originalBBpart21390
  %5553 = load i32, i32* @x.37
  %5554 = load i32, i32* @y.38
  %5555 = sub i32 %5553, 1
  %5556 = mul i32 %5553, %5555
  %5557 = urem i32 %5556, 2
  %5558 = icmp eq i32 %5557, 0
  %5559 = icmp slt i32 %5554, 10
  %5560 = or i1 %5558, %5559
  br i1 %5560, label %originalBB1457, label %originalBB1457alteredBB

originalBB1457:                                   ; preds = %5552, %originalBB1457alteredBB
  %5561 = load i64, i64* %10, align 8, !dbg !2986
  %5562 = load i32, i32* @x.37
  %5563 = load i32, i32* @y.38
  %5564 = sub i32 %5562, 1
  %5565 = mul i32 %5562, %5564
  %5566 = urem i32 %5565, 2
  %5567 = icmp eq i32 %5566, 0
  %5568 = icmp slt i32 %5563, 10
  %5569 = or i1 %5567, %5568
  br i1 %5569, label %originalBBpart21459, label %originalBB1457alteredBB

originalBBpart21459:                              ; preds = %originalBB1457
  ret i64 %5561, !dbg !2986

originalBBalteredBB:                              ; preds = %originalBB, %50
  %5570 = load i32, i32* %15, align 4, !dbg !2154
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %68
  store i32 5, i32* %15, align 4, !dbg !2156
  store i8 1, i8* %27, align 1, !dbg !2158
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %85
  %5571 = load i8, i8* %27, align 1, !dbg !2160
  %5572 = trunc i8 %5571 to i1, !dbg !2160
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %105
  %5573 = load i64, i64* %21, align 8, !dbg !2164
  %5574 = load i64, i64* %12, align 8, !dbg !2164
  %5575 = icmp ult i64 %5573, %5574, !dbg !2164
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %129
  %5576 = load i64, i64* %21, align 8, !dbg !2167
  %_ = sub i64 0, %5576
  %gen = add i64 %_, 1
  %_15 = shl i64 %5576, 1
  %_16 = sub i64 0, %5576
  %gen17 = add i64 %_16, 1
  %_18 = sub i64 %5576, 1
  %gen19 = mul i64 %_18, 1
  %_20 = sub i64 0, %5576
  %gen21 = add i64 %_20, 1
  %5577 = add i64 %5576, 1, !dbg !2167
  store i64 %5577, i64* %21, align 8, !dbg !2167
  br label %originalBB14

originalBB25alteredBB:                            ; preds = %originalBB25, %148
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %166
  store i8 1, i8* %25, align 1, !dbg !2172
  store i8 0, i8* %27, align 1, !dbg !2173
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %183
  %5578 = load i32, i32* %15, align 4, !dbg !2175
  %5579 = icmp ne i32 %5578, 10, !dbg !2178
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %202
  %5580 = load i32, i32* %15, align 4, !dbg !2180
  %5581 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.86, i64 0, i64 0), i32 %5580), !dbg !2182
  store i8* %5581, i8** %18, align 8, !dbg !2183
  %5582 = load i32, i32* %15, align 4, !dbg !2184
  %5583 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.87, i64 0, i64 0), i32 %5582), !dbg !2185
  store i8* %5583, i8** %19, align 8, !dbg !2186
  br label %originalBB37

originalBB41alteredBB:                            ; preds = %originalBB41, %223
  %5584 = load i8, i8* %27, align 1, !dbg !2188
  %5585 = trunc i8 %5584 to i1, !dbg !2188
  br label %originalBB41

originalBB45alteredBB:                            ; preds = %originalBB45, %242
  %5586 = load i8*, i8** %18, align 8, !dbg !2191
  store i8* %5586, i8** %23, align 8, !dbg !2193
  br label %originalBB45

originalBB49alteredBB:                            ; preds = %originalBB49, %260
  %5587 = load i8*, i8** %23, align 8, !dbg !2195
  %5588 = load i8, i8* %5587, align 1, !dbg !2197
  %5589 = icmp ne i8 %5588, 0, !dbg !2198
  br label %originalBB49

originalBB53alteredBB:                            ; preds = %originalBB53, %280
  br label %originalBB53

originalBB57alteredBB:                            ; preds = %originalBB57, %301
  %5590 = load i8*, i8** %23, align 8, !dbg !2200
  %5591 = load i8, i8* %5590, align 1, !dbg !2200
  %5592 = load i8*, i8** %11, align 8, !dbg !2200
  %5593 = load i64, i64* %21, align 8, !dbg !2200
  %5594 = getelementptr inbounds i8, i8* %5592, i64 %5593, !dbg !2200
  store i8 %5591, i8* %5594, align 1, !dbg !2200
  br label %originalBB57

originalBB61alteredBB:                            ; preds = %originalBB61, %323
  %5595 = load i64, i64* %21, align 8, !dbg !2203
  %_62 = sub i64 0, %5595
  %gen63 = add i64 %_62, 1
  %_64 = sub i64 %5595, 1
  %gen65 = mul i64 %_64, 1
  %_66 = sub i64 %5595, 1
  %gen67 = mul i64 %_66, 1
  %5596 = add i64 %5595, 1, !dbg !2203
  store i64 %5596, i64* %21, align 8, !dbg !2203
  br label %originalBB61

originalBB71alteredBB:                            ; preds = %originalBB71, %343
  %5597 = load i8*, i8** %23, align 8, !dbg !2204
  %5598 = getelementptr inbounds i8, i8* %5597, i32 1, !dbg !2204
  store i8* %5598, i8** %23, align 8, !dbg !2204
  br label %originalBB71

originalBB75alteredBB:                            ; preds = %originalBB75, %362
  br label %originalBB75

originalBB79alteredBB:                            ; preds = %originalBB79, %379
  store i8 1, i8* %25, align 1, !dbg !2208
  %5599 = load i8*, i8** %19, align 8, !dbg !2209
  store i8* %5599, i8** %23, align 8, !dbg !2210
  %5600 = load i8*, i8** %23, align 8, !dbg !2211
  %5601 = call i64 @strlen(i8* %5600) #13, !dbg !2212
  store i64 %5601, i64* %24, align 8, !dbg !2213
  br label %originalBB79

originalBB83alteredBB:                            ; preds = %originalBB83, %399
  store i8 1, i8* %25, align 1, !dbg !2215
  br label %originalBB83

originalBB87alteredBB:                            ; preds = %originalBB87, %416
  store i8 1, i8* %27, align 1, !dbg !2217
  br label %originalBB87

originalBB91alteredBB:                            ; preds = %originalBB91, %436
  store i8 1, i8* %25, align 1, !dbg !2222
  br label %originalBB91

originalBB95alteredBB:                            ; preds = %originalBB95, %454
  store i32 2, i32* %15, align 4, !dbg !2225
  %5602 = load i8, i8* %27, align 1, !dbg !2226
  %5603 = trunc i8 %5602 to i1, !dbg !2226
  br label %originalBB95

originalBB99alteredBB:                            ; preds = %originalBB99, %473
  br label %originalBB99

originalBB103alteredBB:                           ; preds = %originalBB103, %490
  %5604 = load i64, i64* %21, align 8, !dbg !2230
  %5605 = load i64, i64* %12, align 8, !dbg !2230
  %5606 = icmp ult i64 %5604, %5605, !dbg !2230
  br label %originalBB103

originalBB107alteredBB:                           ; preds = %originalBB107, %514
  %5607 = load i64, i64* %21, align 8, !dbg !2233
  %_108 = sub i64 %5607, 1
  %gen109 = mul i64 %_108, 1
  %_110 = shl i64 %5607, 1
  %_111 = sub i64 0, %5607
  %gen112 = add i64 %_111, 1
  %5608 = add i64 %5607, 1, !dbg !2233
  store i64 %5608, i64* %21, align 8, !dbg !2233
  br label %originalBB107

originalBB116alteredBB:                           ; preds = %originalBB116, %533
  br label %originalBB116

originalBB120alteredBB:                           ; preds = %originalBB120, %550
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.87, i64 0, i64 0), i8** %23, align 8, !dbg !2234
  store i64 1, i64* %24, align 8, !dbg !2235
  br label %originalBB120

originalBB124alteredBB:                           ; preds = %originalBB124, %568
  call void @abort() #12, !dbg !2239
  br label %originalBB124

originalBB128alteredBB:                           ; preds = %originalBB128, %597
  %5609 = load i64, i64* %20, align 8, !dbg !2249
  %5610 = load i64, i64* %14, align 8, !dbg !2250
  %5611 = icmp eq i64 %5609, %5610, !dbg !2251
  %5612 = zext i1 %5611 to i32, !dbg !2251
  br label %originalBB128

originalBB132alteredBB:                           ; preds = %originalBB132, %618
  %5613 = icmp ne i32 %619, 0, !dbg !2252
  %_133 = sub i1 false, %5613
  %gen134 = add i1 %_133, true
  %_135 = sub i1 false, %5613
  %gen136 = add i1 %_135, true
  %_137 = sub i1 false, %5613
  %gen138 = add i1 %_137, true
  %5614 = xor i1 %5613, true, !dbg !2252
  br label %originalBB132

originalBB142alteredBB:                           ; preds = %originalBB142, %638
  store i8 0, i8* %33, align 1, !dbg !2260
  call void @llvm.dbg.declare(metadata !4, metadata !2987, metadata !DIExpression()), !dbg !2262
  store i8 0, i8* %34, align 1, !dbg !2262
  call void @llvm.dbg.declare(metadata !4, metadata !3022, metadata !DIExpression()), !dbg !2264
  store i8 0, i8* %35, align 1, !dbg !2264
  %5615 = load i8, i8* %25, align 1, !dbg !2265
  %5616 = trunc i8 %5615 to i1, !dbg !2265
  br label %originalBB142

originalBB146alteredBB:                           ; preds = %originalBB146, %657
  %5617 = load i32, i32* %15, align 4, !dbg !2268
  %5618 = icmp ne i32 %5617, 2, !dbg !2269
  br label %originalBB146

originalBB150alteredBB:                           ; preds = %originalBB150, %676
  %5619 = load i64, i64* %24, align 8, !dbg !2271
  %5620 = icmp ne i64 %5619, 0, !dbg !2271
  br label %originalBB150

originalBB154alteredBB:                           ; preds = %originalBB154, %695
  %5621 = load i64, i64* %20, align 8, !dbg !2273
  %5622 = load i64, i64* %24, align 8, !dbg !2274
  %_155 = shl i64 %5621, %5622
  %_156 = sub i64 %5621, %5622
  %gen157 = mul i64 %_156, %5622
  %_158 = sub i64 %5621, %5622
  %gen159 = mul i64 %_158, %5622
  %_160 = shl i64 %5621, %5622
  %_161 = sub i64 %5621, %5622
  %gen162 = mul i64 %_161, %5622
  %_163 = shl i64 %5621, %5622
  %_164 = sub i64 %5621, %5622
  %gen165 = mul i64 %_164, %5622
  %5623 = add i64 %5621, %5622, !dbg !2275
  %5624 = load i64, i64* %14, align 8, !dbg !2276
  %5625 = icmp eq i64 %5624, -1, !dbg !2277
  br label %originalBB154

originalBB169alteredBB:                           ; preds = %originalBB169, %720
  %5626 = load i8*, i8** %13, align 8, !dbg !2281
  %5627 = call i64 @strlen(i8* %5626) #13, !dbg !2282
  store i64 %5627, i64* %14, align 8, !dbg !2283
  br label %originalBB169

originalBB173alteredBB:                           ; preds = %originalBB173, %739
  %5628 = load i64, i64* %14, align 8, !dbg !2284
  br label %originalBB173

originalBB177alteredBB:                           ; preds = %originalBB177, %757
  %5629 = icmp ule i64 %706, %758, !dbg !2285
  br label %originalBB177

originalBB181alteredBB:                           ; preds = %originalBB181, %776
  %5630 = load i8*, i8** %13, align 8, !dbg !2287
  %5631 = load i64, i64* %20, align 8, !dbg !2288
  %5632 = getelementptr inbounds i8, i8* %5630, i64 %5631, !dbg !2289
  %5633 = load i8*, i8** %23, align 8, !dbg !2290
  %5634 = load i64, i64* %24, align 8, !dbg !2291
  %5635 = call i32 @memcmp(i8* %5632, i8* %5633, i64 %5634) #13, !dbg !2292
  %5636 = icmp eq i32 %5635, 0, !dbg !2293
  br label %originalBB181

originalBB185alteredBB:                           ; preds = %originalBB185, %800
  %5637 = load i8, i8* %27, align 1, !dbg !2295
  %5638 = trunc i8 %5637 to i1, !dbg !2295
  br label %originalBB185

originalBB189alteredBB:                           ; preds = %originalBB189, %820
  store i8 1, i8* %33, align 1, !dbg !2300
  br label %originalBB189

originalBB193alteredBB:                           ; preds = %originalBB193, %837
  %5639 = load i8*, i8** %13, align 8, !dbg !2302
  %5640 = load i64, i64* %20, align 8, !dbg !2303
  %5641 = getelementptr inbounds i8, i8* %5639, i64 %5640, !dbg !2302
  %5642 = load i8, i8* %5641, align 1, !dbg !2302
  store i8 %5642, i8* %31, align 1, !dbg !2304
  %5643 = load i8, i8* %31, align 1, !dbg !2305
  %5644 = zext i8 %5643 to i32, !dbg !2305
  br label %originalBB193

originalBB197alteredBB:                           ; preds = %originalBB197, %860
  %5645 = load i8, i8* %25, align 1, !dbg !2307
  %5646 = trunc i8 %5645 to i1, !dbg !2307
  br label %originalBB197

originalBB201alteredBB:                           ; preds = %originalBB201, %879
  br label %originalBB201

originalBB205alteredBB:                           ; preds = %originalBB205, %896
  %5647 = load i8, i8* %27, align 1, !dbg !2313
  %5648 = trunc i8 %5647 to i1, !dbg !2313
  br label %originalBB205

originalBB209alteredBB:                           ; preds = %originalBB209, %916
  store i8 1, i8* %34, align 1, !dbg !2316
  %5649 = load i32, i32* %15, align 4, !dbg !2317
  %5650 = icmp eq i32 %5649, 2, !dbg !2317
  br label %originalBB209

originalBB213alteredBB:                           ; preds = %originalBB213, %935
  %5651 = load i8, i8* %28, align 1, !dbg !2317
  %5652 = trunc i8 %5651 to i1, !dbg !2317
  br label %originalBB213

originalBB217alteredBB:                           ; preds = %originalBB217, %954
  br label %originalBB217

originalBB221alteredBB:                           ; preds = %originalBB221, %971
  %5653 = load i64, i64* %21, align 8, !dbg !2321
  %5654 = load i64, i64* %12, align 8, !dbg !2321
  %5655 = icmp ult i64 %5653, %5654, !dbg !2321
  br label %originalBB221

originalBB225alteredBB:                           ; preds = %originalBB225, %991
  %5656 = load i8*, i8** %11, align 8, !dbg !2321
  %5657 = load i64, i64* %21, align 8, !dbg !2321
  %5658 = getelementptr inbounds i8, i8* %5656, i64 %5657, !dbg !2321
  store i8 39, i8* %5658, align 1, !dbg !2321
  br label %originalBB225

originalBB229alteredBB:                           ; preds = %originalBB229, %1014
  br label %originalBB229

originalBB233alteredBB:                           ; preds = %originalBB233, %1035
  %5659 = load i8*, i8** %11, align 8, !dbg !2325
  %5660 = load i64, i64* %21, align 8, !dbg !2325
  %5661 = getelementptr inbounds i8, i8* %5659, i64 %5660, !dbg !2325
  store i8 36, i8* %5661, align 1, !dbg !2325
  br label %originalBB233

originalBB237alteredBB:                           ; preds = %originalBB237, %1058
  br label %originalBB237

originalBB241alteredBB:                           ; preds = %originalBB241, %1087
  br label %originalBB241

originalBB245alteredBB:                           ; preds = %originalBB245, %1104
  %5662 = load i64, i64* %21, align 8, !dbg !2333
  %5663 = load i64, i64* %12, align 8, !dbg !2333
  %5664 = icmp ult i64 %5662, %5663, !dbg !2333
  br label %originalBB245

originalBB249alteredBB:                           ; preds = %originalBB249, %1124
  %5665 = load i8*, i8** %11, align 8, !dbg !2333
  %5666 = load i64, i64* %21, align 8, !dbg !2333
  %5667 = getelementptr inbounds i8, i8* %5665, i64 %5666, !dbg !2333
  store i8 92, i8* %5667, align 1, !dbg !2333
  br label %originalBB249

originalBB253alteredBB:                           ; preds = %originalBB253, %1144
  %5668 = load i64, i64* %21, align 8, !dbg !2336
  %_254 = shl i64 %5668, 1
  %_255 = sub i64 0, %5668
  %gen256 = add i64 %_255, 1
  %_257 = sub i64 %5668, 1
  %gen258 = mul i64 %_257, 1
  %_259 = sub i64 0, %5668
  %gen260 = add i64 %_259, 1
  %5669 = add i64 %5668, 1, !dbg !2336
  store i64 %5669, i64* %21, align 8, !dbg !2336
  br label %originalBB253

originalBB264alteredBB:                           ; preds = %originalBB264, %1163
  br label %originalBB264

originalBB268alteredBB:                           ; preds = %originalBB268, %1180
  %5670 = load i32, i32* %15, align 4, !dbg !2337
  %5671 = icmp ne i32 %5670, 2, !dbg !2339
  br label %originalBB268

originalBB272alteredBB:                           ; preds = %originalBB272, %1199
  %5672 = load i64, i64* %20, align 8, !dbg !2341
  %_273 = shl i64 %5672, 1
  %_274 = shl i64 %5672, 1
  %_275 = shl i64 %5672, 1
  %_276 = shl i64 %5672, 1
  %5673 = add i64 %5672, 1, !dbg !2342
  %5674 = load i64, i64* %14, align 8, !dbg !2343
  %5675 = icmp ult i64 %5673, %5674, !dbg !2344
  br label %originalBB272

originalBB280alteredBB:                           ; preds = %originalBB280, %1220
  %5676 = load i8*, i8** %13, align 8, !dbg !2346
  %5677 = load i64, i64* %20, align 8, !dbg !2347
  %_281 = shl i64 %5677, 1
  %_282 = sub i64 %5677, 1
  %gen283 = mul i64 %_282, 1
  %5678 = add i64 %5677, 1, !dbg !2348
  %5679 = getelementptr inbounds i8, i8* %5676, i64 %5678, !dbg !2346
  %5680 = load i8, i8* %5679, align 1, !dbg !2346
  %5681 = sext i8 %5680 to i32, !dbg !2346
  %5682 = icmp sle i32 48, %5681, !dbg !2349
  br label %originalBB280

originalBB287alteredBB:                           ; preds = %originalBB287, %1244
  %5683 = load i8*, i8** %13, align 8, !dbg !2351
  %5684 = load i64, i64* %20, align 8, !dbg !2352
  %_288 = sub i64 0, %5684
  %gen289 = add i64 %_288, 1
  %5685 = add i64 %5684, 1, !dbg !2353
  %5686 = getelementptr inbounds i8, i8* %5683, i64 %5685, !dbg !2351
  %5687 = load i8, i8* %5686, align 1, !dbg !2351
  %5688 = sext i8 %5687 to i32, !dbg !2351
  %5689 = icmp sle i32 %5688, 57, !dbg !2354
  br label %originalBB287

originalBB294alteredBB:                           ; preds = %originalBB294, %1268
  br label %originalBB294

originalBB298alteredBB:                           ; preds = %originalBB298, %1289
  %5690 = load i8*, i8** %11, align 8, !dbg !2358
  %5691 = load i64, i64* %21, align 8, !dbg !2358
  %5692 = getelementptr inbounds i8, i8* %5690, i64 %5691, !dbg !2358
  store i8 48, i8* %5692, align 1, !dbg !2358
  br label %originalBB298

originalBB302alteredBB:                           ; preds = %originalBB302, %1309
  %5693 = load i64, i64* %21, align 8, !dbg !2361
  %_303 = shl i64 %5693, 1
  %_304 = shl i64 %5693, 1
  %_305 = sub i64 %5693, 1
  %gen306 = mul i64 %_305, 1
  %_307 = sub i64 %5693, 1
  %gen308 = mul i64 %_307, 1
  %5694 = add i64 %5693, 1, !dbg !2361
  store i64 %5694, i64* %21, align 8, !dbg !2361
  br label %originalBB302

originalBB312alteredBB:                           ; preds = %originalBB312, %1328
  br label %originalBB312

originalBB316alteredBB:                           ; preds = %originalBB316, %1345
  %5695 = load i64, i64* %21, align 8, !dbg !2363
  %5696 = load i64, i64* %12, align 8, !dbg !2363
  %5697 = icmp ult i64 %5695, %5696, !dbg !2363
  br label %originalBB316

originalBB320alteredBB:                           ; preds = %originalBB320, %1365
  %5698 = load i8*, i8** %11, align 8, !dbg !2363
  %5699 = load i64, i64* %21, align 8, !dbg !2363
  %5700 = getelementptr inbounds i8, i8* %5698, i64 %5699, !dbg !2363
  store i8 48, i8* %5700, align 1, !dbg !2363
  br label %originalBB320

originalBB324alteredBB:                           ; preds = %originalBB324, %1385
  %5701 = load i64, i64* %21, align 8, !dbg !2366
  %_325 = sub i64 %5701, 1
  %gen326 = mul i64 %_325, 1
  %_327 = sub i64 0, %5701
  %gen328 = add i64 %_327, 1
  %_329 = shl i64 %5701, 1
  %_330 = sub i64 %5701, 1
  %gen331 = mul i64 %_330, 1
  %_332 = sub i64 %5701, 1
  %gen333 = mul i64 %_332, 1
  %5702 = add i64 %5701, 1, !dbg !2366
  store i64 %5702, i64* %21, align 8, !dbg !2366
  br label %originalBB324

originalBB337alteredBB:                           ; preds = %originalBB337, %1404
  br label %originalBB337

originalBB341alteredBB:                           ; preds = %originalBB341, %1421
  store i8 48, i8* %31, align 1, !dbg !2368
  br label %originalBB341

originalBB345alteredBB:                           ; preds = %originalBB345, %1438
  %5703 = load i32, i32* %16, align 4, !dbg !2370
  %_346 = sub i32 0, %5703
  %gen347 = add i32 %_346, 1
  %5704 = and i32 %5703, 1, !dbg !2372
  %5705 = icmp ne i32 %5704, 0, !dbg !2372
  br label %originalBB345

originalBB351alteredBB:                           ; preds = %originalBB351, %1458
  br label %originalBB351

originalBB355alteredBB:                           ; preds = %originalBB355, %1475
  br label %originalBB355

originalBB359alteredBB:                           ; preds = %originalBB359, %1493
  %5706 = load i32, i32* %15, align 4, !dbg !2376
  br label %originalBB359

originalBB363alteredBB:                           ; preds = %originalBB363, %1514
  br label %originalBB363

originalBB367alteredBB:                           ; preds = %originalBB367, %1531
  br label %originalBB367

originalBB371alteredBB:                           ; preds = %originalBB371, %1548
  %5707 = load i32, i32* %16, align 4, !dbg !2384
  %_372 = shl i32 %5707, 4
  %_373 = shl i32 %5707, 4
  %_374 = sub i32 %5707, 4
  %gen375 = mul i32 %_374, 4
  %_376 = shl i32 %5707, 4
  %_377 = sub i32 0, %5707
  %gen378 = add i32 %_377, 4
  %_379 = sub i32 0, %5707
  %gen380 = add i32 %_379, 4
  %5708 = and i32 %5707, 4, !dbg !2386
  %5709 = icmp ne i32 %5708, 0, !dbg !2386
  br label %originalBB371

originalBB384alteredBB:                           ; preds = %originalBB384, %1573
  %5710 = load i8*, i8** %13, align 8, !dbg !2393
  %5711 = load i64, i64* %20, align 8, !dbg !2394
  %_385 = sub i64 %5711, 1
  %gen386 = mul i64 %_385, 1
  %_387 = sub i64 %5711, 1
  %gen388 = mul i64 %_387, 1
  %_389 = sub i64 0, %5711
  %gen390 = add i64 %_389, 1
  %5712 = add i64 %5711, 1, !dbg !2395
  %5713 = getelementptr inbounds i8, i8* %5710, i64 %5712, !dbg !2393
  %5714 = load i8, i8* %5713, align 1, !dbg !2393
  %5715 = sext i8 %5714 to i32, !dbg !2393
  %5716 = icmp eq i32 %5715, 63, !dbg !2396
  br label %originalBB384

originalBB394alteredBB:                           ; preds = %originalBB394, %1597
  %5717 = load i8*, i8** %13, align 8, !dbg !2398
  %5718 = load i64, i64* %20, align 8, !dbg !2399
  %_395 = shl i64 %5718, 2
  %_396 = shl i64 %5718, 2
  %_397 = sub i64 %5718, 2
  %gen398 = mul i64 %_397, 2
  %_399 = shl i64 %5718, 2
  %_400 = sub i64 %5718, 2
  %gen401 = mul i64 %_400, 2
  %_402 = shl i64 %5718, 2
  %_403 = sub i64 %5718, 2
  %gen404 = mul i64 %_403, 2
  %5719 = add i64 %5718, 2, !dbg !2400
  %5720 = getelementptr inbounds i8, i8* %5717, i64 %5719, !dbg !2398
  %5721 = load i8, i8* %5720, align 1, !dbg !2398
  %5722 = sext i8 %5721 to i32, !dbg !2398
  br label %originalBB394

originalBB408alteredBB:                           ; preds = %originalBB408, %1620
  %5723 = load i8, i8* %27, align 1, !dbg !2402
  %5724 = trunc i8 %5723 to i1, !dbg !2402
  br label %originalBB408

originalBB412alteredBB:                           ; preds = %originalBB412, %1652
  %5725 = load i8*, i8** %11, align 8, !dbg !2413
  %5726 = load i64, i64* %21, align 8, !dbg !2413
  %5727 = getelementptr inbounds i8, i8* %5725, i64 %5726, !dbg !2413
  store i8 63, i8* %5727, align 1, !dbg !2413
  br label %originalBB412

originalBB416alteredBB:                           ; preds = %originalBB416, %1672
  %5728 = load i64, i64* %21, align 8, !dbg !2416
  %_417 = shl i64 %5728, 1
  %_418 = shl i64 %5728, 1
  %_419 = shl i64 %5728, 1
  %_420 = sub i64 0, %5728
  %gen421 = add i64 %_420, 1
  %_422 = sub i64 0, %5728
  %gen423 = add i64 %_422, 1
  %5729 = add i64 %5728, 1, !dbg !2416
  store i64 %5729, i64* %21, align 8, !dbg !2416
  br label %originalBB416

originalBB427alteredBB:                           ; preds = %originalBB427, %1691
  br label %originalBB427

originalBB431alteredBB:                           ; preds = %originalBB431, %1712
  %5730 = load i8*, i8** %11, align 8, !dbg !2418
  %5731 = load i64, i64* %21, align 8, !dbg !2418
  %5732 = getelementptr inbounds i8, i8* %5730, i64 %5731, !dbg !2418
  store i8 34, i8* %5732, align 1, !dbg !2418
  br label %originalBB431

originalBB435alteredBB:                           ; preds = %originalBB435, %1732
  %5733 = load i64, i64* %21, align 8, !dbg !2421
  %5734 = add i64 %5733, 1, !dbg !2421
  store i64 %5734, i64* %21, align 8, !dbg !2421
  br label %originalBB435

originalBB439alteredBB:                           ; preds = %originalBB439, %1751
  br label %originalBB439

originalBB443alteredBB:                           ; preds = %originalBB443, %1768
  %5735 = load i64, i64* %21, align 8, !dbg !2423
  %5736 = load i64, i64* %12, align 8, !dbg !2423
  %5737 = icmp ult i64 %5735, %5736, !dbg !2423
  br label %originalBB443

originalBB447alteredBB:                           ; preds = %originalBB447, %1796
  %5738 = load i64, i64* %21, align 8, !dbg !2428
  %5739 = load i64, i64* %12, align 8, !dbg !2428
  %5740 = icmp ult i64 %5738, %5739, !dbg !2428
  br label %originalBB447

originalBB451alteredBB:                           ; preds = %originalBB451, %1816
  %5741 = load i8*, i8** %11, align 8, !dbg !2428
  %5742 = load i64, i64* %21, align 8, !dbg !2428
  %5743 = getelementptr inbounds i8, i8* %5741, i64 %5742, !dbg !2428
  store i8 63, i8* %5743, align 1, !dbg !2428
  br label %originalBB451

originalBB455alteredBB:                           ; preds = %originalBB455, %1841
  br label %originalBB455

originalBB459alteredBB:                           ; preds = %originalBB459, %1858
  br label %originalBB459

originalBB463alteredBB:                           ; preds = %originalBB463, %1876
  br label %originalBB463

originalBB467alteredBB:                           ; preds = %originalBB467, %1893
  store i8 97, i8* %32, align 1, !dbg !2438
  br label %originalBB467

originalBB471alteredBB:                           ; preds = %originalBB471, %1910
  store i8 98, i8* %32, align 1, !dbg !2440
  br label %originalBB471

originalBB475alteredBB:                           ; preds = %originalBB475, %1927
  store i8 102, i8* %32, align 1, !dbg !2442
  br label %originalBB475

originalBB479alteredBB:                           ; preds = %originalBB479, %1944
  store i8 110, i8* %32, align 1, !dbg !2444
  br label %originalBB479

originalBB483alteredBB:                           ; preds = %originalBB483, %1961
  store i8 114, i8* %32, align 1, !dbg !2446
  br label %originalBB483

originalBB487alteredBB:                           ; preds = %originalBB487, %1978
  store i8 116, i8* %32, align 1, !dbg !2448
  br label %originalBB487

originalBB491alteredBB:                           ; preds = %originalBB491, %1995
  store i8 118, i8* %32, align 1, !dbg !2450
  br label %originalBB491

originalBB495alteredBB:                           ; preds = %originalBB495, %2012
  %5744 = load i8, i8* %31, align 1, !dbg !2452
  store i8 %5744, i8* %32, align 1, !dbg !2453
  %5745 = load i32, i32* %15, align 4, !dbg !2454
  %5746 = icmp eq i32 %5745, 2, !dbg !2456
  br label %originalBB495

originalBB499alteredBB:                           ; preds = %originalBB499, %2032
  %5747 = load i8, i8* %27, align 1, !dbg !2458
  %5748 = trunc i8 %5747 to i1, !dbg !2458
  br label %originalBB499

originalBB503alteredBB:                           ; preds = %originalBB503, %2051
  br label %originalBB503

originalBB507alteredBB:                           ; preds = %originalBB507, %2069
  %5749 = load i8, i8* %25, align 1, !dbg !2464
  %5750 = trunc i8 %5749 to i1, !dbg !2464
  br label %originalBB507

originalBB511alteredBB:                           ; preds = %originalBB511, %2088
  %5751 = load i8, i8* %27, align 1, !dbg !2467
  %5752 = trunc i8 %5751 to i1, !dbg !2467
  br label %originalBB511

originalBB515alteredBB:                           ; preds = %originalBB515, %2107
  %5753 = load i64, i64* %24, align 8, !dbg !2469
  %5754 = icmp ne i64 %5753, 0, !dbg !2469
  br label %originalBB515

originalBB519alteredBB:                           ; preds = %originalBB519, %2126
  br label %originalBB519

originalBB523alteredBB:                           ; preds = %originalBB523, %2144
  %5755 = load i32, i32* %15, align 4, !dbg !2474
  %5756 = icmp eq i32 %5755, 2, !dbg !2476
  br label %originalBB523

originalBB527alteredBB:                           ; preds = %originalBB527, %2163
  %5757 = load i8, i8* %27, align 1, !dbg !2478
  %5758 = trunc i8 %5757 to i1, !dbg !2478
  br label %originalBB527

originalBB531alteredBB:                           ; preds = %originalBB531, %2182
  br label %originalBB531

originalBB535alteredBB:                           ; preds = %originalBB535, %2199
  br label %originalBB535

originalBB539alteredBB:                           ; preds = %originalBB539, %2216
  %5759 = load i8, i8* %25, align 1, !dbg !2483
  %5760 = trunc i8 %5759 to i1, !dbg !2483
  br label %originalBB539

originalBB543alteredBB:                           ; preds = %originalBB543, %2235
  %5761 = load i8, i8* %32, align 1, !dbg !2486
  store i8 %5761, i8* %31, align 1, !dbg !2488
  br label %originalBB543

originalBB547alteredBB:                           ; preds = %originalBB547, %2253
  br label %originalBB547

originalBB551alteredBB:                           ; preds = %originalBB551, %2270
  %5762 = load i64, i64* %14, align 8, !dbg !2491
  %5763 = icmp eq i64 %5762, -1, !dbg !2493
  br label %originalBB551

originalBB555alteredBB:                           ; preds = %originalBB555, %2289
  %5764 = load i8*, i8** %13, align 8, !dbg !2495
  %5765 = getelementptr inbounds i8, i8* %5764, i64 1, !dbg !2495
  %5766 = load i8, i8* %5765, align 1, !dbg !2495
  %5767 = sext i8 %5766 to i32, !dbg !2495
  %5768 = icmp eq i32 %5767, 0, !dbg !2496
  br label %originalBB555

originalBB559alteredBB:                           ; preds = %originalBB559, %2314
  br label %originalBB559

originalBB563alteredBB:                           ; preds = %originalBB563, %2331
  br label %originalBB563

originalBB567alteredBB:                           ; preds = %originalBB567, %2348
  %5769 = load i64, i64* %20, align 8, !dbg !2501
  %5770 = icmp ne i64 %5769, 0, !dbg !2503
  br label %originalBB567

originalBB571alteredBB:                           ; preds = %originalBB571, %2367
  br label %originalBB571

originalBB575alteredBB:                           ; preds = %originalBB575, %2384
  br label %originalBB575

originalBB579alteredBB:                           ; preds = %originalBB579, %2401
  store i8 1, i8* %35, align 1, !dbg !2507
  br label %originalBB579

originalBB583alteredBB:                           ; preds = %originalBB583, %2425
  br label %originalBB583

originalBB587alteredBB:                           ; preds = %originalBB587, %2445
  %5771 = load i8, i8* %27, align 1, !dbg !2523
  %5772 = trunc i8 %5771 to i1, !dbg !2523
  br label %originalBB587

originalBB591alteredBB:                           ; preds = %originalBB591, %2464
  br label %originalBB591

originalBB595alteredBB:                           ; preds = %originalBB595, %2481
  %5773 = load i64, i64* %12, align 8, !dbg !2528
  %5774 = icmp ne i64 %5773, 0, !dbg !2528
  br label %originalBB595

originalBB599alteredBB:                           ; preds = %originalBB599, %2500
  %5775 = load i64, i64* %22, align 8, !dbg !2531
  %5776 = icmp ne i64 %5775, 0, !dbg !2531
  br label %originalBB599

originalBB603alteredBB:                           ; preds = %originalBB603, %2519
  %5777 = load i64, i64* %12, align 8, !dbg !2533
  store i64 %5777, i64* %22, align 8, !dbg !2535
  store i64 0, i64* %12, align 8, !dbg !2536
  br label %originalBB603

originalBB607alteredBB:                           ; preds = %originalBB607, %2537
  br label %originalBB607

originalBB611alteredBB:                           ; preds = %originalBB611, %2558
  %5778 = load i8*, i8** %11, align 8, !dbg !2539
  %5779 = load i64, i64* %21, align 8, !dbg !2539
  %5780 = getelementptr inbounds i8, i8* %5778, i64 %5779, !dbg !2539
  store i8 39, i8* %5780, align 1, !dbg !2539
  br label %originalBB611

originalBB615alteredBB:                           ; preds = %originalBB615, %2578
  %5781 = load i64, i64* %21, align 8, !dbg !2542
  %_616 = sub i64 0, %5781
  %gen617 = add i64 %_616, 1
  %5782 = add i64 %5781, 1, !dbg !2542
  store i64 %5782, i64* %21, align 8, !dbg !2542
  br label %originalBB615

originalBB621alteredBB:                           ; preds = %originalBB621, %2597
  br label %originalBB621

originalBB625alteredBB:                           ; preds = %originalBB625, %2618
  %5783 = load i8*, i8** %11, align 8, !dbg !2544
  %5784 = load i64, i64* %21, align 8, !dbg !2544
  %5785 = getelementptr inbounds i8, i8* %5783, i64 %5784, !dbg !2544
  store i8 92, i8* %5785, align 1, !dbg !2544
  br label %originalBB625

originalBB629alteredBB:                           ; preds = %originalBB629, %2638
  %5786 = load i64, i64* %21, align 8, !dbg !2547
  %_630 = sub i64 0, %5786
  %gen631 = add i64 %_630, 1
  %_632 = sub i64 0, %5786
  %gen633 = add i64 %_632, 1
  %_634 = shl i64 %5786, 1
  %_635 = sub i64 %5786, 1
  %gen636 = mul i64 %_635, 1
  %_637 = sub i64 0, %5786
  %gen638 = add i64 %_637, 1
  %_639 = shl i64 %5786, 1
  %_640 = shl i64 %5786, 1
  %5787 = add i64 %5786, 1, !dbg !2547
  store i64 %5787, i64* %21, align 8, !dbg !2547
  br label %originalBB629

originalBB644alteredBB:                           ; preds = %originalBB644, %2657
  br label %originalBB644

originalBB648alteredBB:                           ; preds = %originalBB648, %2678
  %5788 = load i8*, i8** %11, align 8, !dbg !2549
  %5789 = load i64, i64* %21, align 8, !dbg !2549
  %5790 = getelementptr inbounds i8, i8* %5788, i64 %5789, !dbg !2549
  store i8 39, i8* %5790, align 1, !dbg !2549
  br label %originalBB648

originalBB652alteredBB:                           ; preds = %originalBB652, %2698
  %5791 = load i64, i64* %21, align 8, !dbg !2552
  %_653 = sub i64 0, %5791
  %gen654 = add i64 %_653, 1
  %_655 = sub i64 0, %5791
  %gen656 = add i64 %_655, 1
  %_657 = shl i64 %5791, 1
  %_658 = sub i64 %5791, 1
  %gen659 = mul i64 %_658, 1
  %_660 = sub i64 0, %5791
  %gen661 = add i64 %_660, 1
  %5792 = add i64 %5791, 1, !dbg !2552
  store i64 %5792, i64* %21, align 8, !dbg !2552
  br label %originalBB652

originalBB665alteredBB:                           ; preds = %originalBB665, %2717
  store i8 0, i8* %28, align 1, !dbg !2553
  br label %originalBB665

originalBB669alteredBB:                           ; preds = %originalBB669, %2734
  br label %originalBB669

originalBB673alteredBB:                           ; preds = %originalBB673, %2751
  store i8 1, i8* %35, align 1, !dbg !2556
  br label %originalBB673

originalBB677alteredBB:                           ; preds = %originalBB677, %2768
  %5793 = load i8, i8* %26, align 1, !dbg !2563
  %5794 = trunc i8 %5793 to i1, !dbg !2563
  br label %originalBB677

originalBB681alteredBB:                           ; preds = %originalBB681, %2803
  %5795 = load i8*, i8** %13, align 8, !dbg !2597
  %5796 = call i64 @strlen(i8* %5795) #13, !dbg !2598
  store i64 %5796, i64* %14, align 8, !dbg !2599
  br label %originalBB681

originalBB685alteredBB:                           ; preds = %originalBB685, %2823
  %5797 = load i8*, i8** %13, align 8, !dbg !2608
  %5798 = load i64, i64* %20, align 8, !dbg !2609
  %5799 = load i64, i64* %36, align 8, !dbg !2610
  %_686 = shl i64 %5798, %5799
  %_687 = sub i64 %5798, %5799
  %gen688 = mul i64 %_687, %5799
  %_689 = shl i64 %5798, %5799
  %_690 = shl i64 %5798, %5799
  %5800 = add i64 %5798, %5799, !dbg !2611
  %5801 = getelementptr inbounds i8, i8* %5797, i64 %5800, !dbg !2608
  %5802 = load i64, i64* %14, align 8, !dbg !2612
  %5803 = load i64, i64* %20, align 8, !dbg !2613
  %5804 = load i64, i64* %36, align 8, !dbg !2614
  %_691 = sub i64 %5803, %5804
  %gen692 = mul i64 %_691, %5804
  %5805 = add i64 %5803, %5804, !dbg !2615
  %5806 = sub i64 %5802, %5805, !dbg !2616
  %5807 = call i64 @rpl_mbrtowc(i32* %39, i8* %5801, i64 %5806, %struct.__mbstate_t* %38), !dbg !2617
  store i64 %5807, i64* %40, align 8, !dbg !2607
  %5808 = load i64, i64* %40, align 8, !dbg !2618
  %5809 = icmp eq i64 %5808, 0, !dbg !2620
  br label %originalBB685

originalBB696alteredBB:                           ; preds = %originalBB696, %2853
  br label %originalBB696

originalBB700alteredBB:                           ; preds = %originalBB700, %2870
  %5810 = load i64, i64* %40, align 8, !dbg !2623
  %5811 = icmp eq i64 %5810, -1, !dbg !2625
  br label %originalBB700

originalBB704alteredBB:                           ; preds = %originalBB704, %2889
  store i8 0, i8* %37, align 1, !dbg !2627
  br label %originalBB704

originalBB708alteredBB:                           ; preds = %originalBB708, %2906
  %5812 = load i64, i64* %40, align 8, !dbg !2630
  %5813 = icmp eq i64 %5812, -2, !dbg !2632
  br label %originalBB708

originalBB712alteredBB:                           ; preds = %originalBB712, %2925
  store i8 0, i8* %37, align 1, !dbg !2634
  br label %originalBB712

originalBB716alteredBB:                           ; preds = %originalBB716, %2942
  %5814 = load i64, i64* %20, align 8, !dbg !2637
  %5815 = load i64, i64* %36, align 8, !dbg !2638
  %5816 = add i64 %5814, %5815, !dbg !2639
  %5817 = load i64, i64* %14, align 8, !dbg !2640
  %5818 = icmp ult i64 %5816, %5817, !dbg !2641
  br label %originalBB716

originalBB720alteredBB:                           ; preds = %originalBB720, %2964
  %5819 = load i8*, i8** %13, align 8, !dbg !2643
  %5820 = load i64, i64* %20, align 8, !dbg !2644
  %5821 = load i64, i64* %36, align 8, !dbg !2645
  %_721 = sub i64 0, %5820
  %gen722 = add i64 %_721, %5821
  %5822 = add i64 %5820, %5821, !dbg !2646
  %5823 = getelementptr inbounds i8, i8* %5819, i64 %5822, !dbg !2643
  %5824 = load i8, i8* %5823, align 1, !dbg !2643
  %5825 = sext i8 %5824 to i32, !dbg !2643
  %5826 = icmp ne i32 %5825, 0, !dbg !2642
  br label %originalBB720

originalBB726alteredBB:                           ; preds = %originalBB726, %2989
  br label %originalBB726

originalBB730alteredBB:                           ; preds = %originalBB730, %3007
  %5827 = load i64, i64* %36, align 8, !dbg !2648
  %_731 = shl i64 %5827, 1
  %5828 = add i64 %5827, 1, !dbg !2648
  store i64 %5828, i64* %36, align 8, !dbg !2648
  br label %originalBB730

originalBB735alteredBB:                           ; preds = %originalBB735, %3026
  br label %originalBB735

originalBB739alteredBB:                           ; preds = %originalBB739, %3043
  %5829 = load i8, i8* %27, align 1, !dbg !2651
  %5830 = trunc i8 %5829 to i1, !dbg !2651
  br label %originalBB739

originalBB743alteredBB:                           ; preds = %originalBB743, %3065
  store i64 1, i64* %41, align 8, !dbg !2661
  br label %originalBB743

originalBB747alteredBB:                           ; preds = %originalBB747, %3082
  %5831 = load i64, i64* %41, align 8, !dbg !2664
  %5832 = load i64, i64* %40, align 8, !dbg !2666
  %5833 = icmp ult i64 %5831, %5832, !dbg !2667
  br label %originalBB747

originalBB751alteredBB:                           ; preds = %originalBB751, %3112
  br label %originalBB751

originalBB755alteredBB:                           ; preds = %originalBB755, %3131
  %5834 = load i64, i64* %41, align 8, !dbg !2680
  %_756 = sub i64 0, %5834
  %gen757 = add i64 %_756, 1
  %_758 = shl i64 %5834, 1
  %_759 = sub i64 0, %5834
  %gen760 = add i64 %_759, 1
  %_761 = sub i64 0, %5834
  %gen762 = add i64 %_761, 1
  %_763 = sub i64 0, %5834
  %gen764 = add i64 %_763, 1
  %_765 = shl i64 %5834, 1
  %_766 = shl i64 %5834, 1
  %_767 = shl i64 %5834, 1
  %5835 = add i64 %5834, 1, !dbg !2680
  store i64 %5835, i64* %41, align 8, !dbg !2680
  br label %originalBB755

originalBB771alteredBB:                           ; preds = %originalBB771, %3151
  %5836 = load i32, i32* %39, align 4, !dbg !2685
  %5837 = call i32 @iswprint(i32 %5836) #10, !dbg !2687
  %5838 = icmp ne i32 %5837, 0, !dbg !2687
  br label %originalBB771

originalBB775alteredBB:                           ; preds = %originalBB775, %3171
  store i8 0, i8* %37, align 1, !dbg !2689
  br label %originalBB775

originalBB779alteredBB:                           ; preds = %originalBB779, %3188
  %5839 = load i64, i64* %40, align 8, !dbg !2691
  %5840 = load i64, i64* %36, align 8, !dbg !2692
  %_780 = sub i64 0, %5840
  %gen781 = add i64 %_780, %5839
  %_782 = sub i64 0, %5840
  %gen783 = add i64 %_782, %5839
  %_784 = shl i64 %5840, %5839
  %_785 = sub i64 0, %5840
  %gen786 = add i64 %_785, %5839
  %5841 = add i64 %5840, %5839, !dbg !2692
  store i64 %5841, i64* %36, align 8, !dbg !2692
  br label %originalBB779

originalBB790alteredBB:                           ; preds = %originalBB790, %3208
  br label %originalBB790

originalBB794alteredBB:                           ; preds = %originalBB794, %3225
  br label %originalBB794

originalBB798alteredBB:                           ; preds = %originalBB798, %3242
  br label %originalBB798

originalBB802alteredBB:                           ; preds = %originalBB802, %3259
  %5842 = call i32 @mbsinit(%struct.__mbstate_t* %38) #13, !dbg !2694
  %5843 = icmp ne i32 %5842, 0, !dbg !2695
  %_803 = sub i1 false, %5843
  %gen804 = add i1 %_803, true
  %_805 = sub i1 false, %5843
  %gen806 = add i1 %_805, true
  %_807 = shl i1 %5843, true
  %_808 = shl i1 %5843, true
  %_809 = shl i1 %5843, true
  %_810 = shl i1 %5843, true
  %_811 = shl i1 %5843, true
  %_812 = sub i1 %5843, true
  %gen813 = mul i1 %_812, true
  %5844 = xor i1 %5843, true, !dbg !2695
  br label %originalBB802

originalBB817alteredBB:                           ; preds = %originalBB817, %3279
  br label %originalBB817

originalBB821alteredBB:                           ; preds = %originalBB821, %3296
  %5845 = load i8, i8* %37, align 1, !dbg !2698
  %5846 = trunc i8 %5845 to i1, !dbg !2698
  %5847 = zext i1 %5846 to i8, !dbg !2699
  store i8 %5847, i8* %35, align 1, !dbg !2699
  %5848 = load i64, i64* %36, align 8, !dbg !2700
  %5849 = icmp ult i64 1, %5848, !dbg !2702
  br label %originalBB821

originalBB825alteredBB:                           ; preds = %originalBB825, %3318
  %5850 = load i8, i8* %25, align 1, !dbg !2704
  %5851 = trunc i8 %5850 to i1, !dbg !2704
  br label %originalBB825

originalBB829alteredBB:                           ; preds = %originalBB829, %3337
  %5852 = load i8, i8* %37, align 1, !dbg !2706
  %5853 = trunc i8 %5852 to i1, !dbg !2706
  br label %originalBB829

originalBB833alteredBB:                           ; preds = %originalBB833, %3360
  %5854 = load i8, i8* %25, align 1, !dbg !2715
  %5855 = trunc i8 %5854 to i1, !dbg !2715
  br label %originalBB833

originalBB837alteredBB:                           ; preds = %originalBB837, %3379
  %5856 = load i8, i8* %37, align 1, !dbg !2721
  %5857 = trunc i8 %5856 to i1, !dbg !2721
  br label %originalBB837

originalBB841alteredBB:                           ; preds = %originalBB841, %3398
  br label %originalBB841

originalBB845alteredBB:                           ; preds = %originalBB845, %3415
  %5858 = load i8, i8* %27, align 1, !dbg !2725
  %5859 = trunc i8 %5858 to i1, !dbg !2725
  br label %originalBB845

originalBB849alteredBB:                           ; preds = %originalBB849, %3434
  br label %originalBB849

originalBB853alteredBB:                           ; preds = %originalBB853, %3454
  %5860 = load i8, i8* %28, align 1, !dbg !2729
  %5861 = trunc i8 %5860 to i1, !dbg !2729
  br label %originalBB853

originalBB857alteredBB:                           ; preds = %originalBB857, %3473
  br label %originalBB857

originalBB861alteredBB:                           ; preds = %originalBB861, %3490
  %5862 = load i64, i64* %21, align 8, !dbg !2733
  %5863 = load i64, i64* %12, align 8, !dbg !2733
  %5864 = icmp ult i64 %5862, %5863, !dbg !2733
  br label %originalBB861

originalBB865alteredBB:                           ; preds = %originalBB865, %3514
  %5865 = load i64, i64* %21, align 8, !dbg !2736
  %_866 = sub i64 0, %5865
  %gen867 = add i64 %_866, 1
  %_868 = sub i64 0, %5865
  %gen869 = add i64 %_868, 1
  %_870 = shl i64 %5865, 1
  %_871 = sub i64 %5865, 1
  %gen872 = mul i64 %_871, 1
  %_873 = sub i64 0, %5865
  %gen874 = add i64 %_873, 1
  %_875 = sub i64 0, %5865
  %gen876 = add i64 %_875, 1
  %5866 = add i64 %5865, 1, !dbg !2736
  store i64 %5866, i64* %21, align 8, !dbg !2736
  br label %originalBB865

originalBB880alteredBB:                           ; preds = %originalBB880, %3534
  %5867 = load i64, i64* %21, align 8, !dbg !2737
  %5868 = load i64, i64* %12, align 8, !dbg !2737
  %5869 = icmp ult i64 %5867, %5868, !dbg !2737
  br label %originalBB880

originalBB884alteredBB:                           ; preds = %originalBB884, %3554
  %5870 = load i8*, i8** %11, align 8, !dbg !2737
  %5871 = load i64, i64* %21, align 8, !dbg !2737
  %5872 = getelementptr inbounds i8, i8* %5870, i64 %5871, !dbg !2737
  store i8 36, i8* %5872, align 1, !dbg !2737
  br label %originalBB884

originalBB888alteredBB:                           ; preds = %originalBB888, %3574
  %5873 = load i64, i64* %21, align 8, !dbg !2740
  %_889 = shl i64 %5873, 1
  %_890 = sub i64 0, %5873
  %gen891 = add i64 %_890, 1
  %_892 = shl i64 %5873, 1
  %_893 = shl i64 %5873, 1
  %_894 = shl i64 %5873, 1
  %5874 = add i64 %5873, 1, !dbg !2740
  store i64 %5874, i64* %21, align 8, !dbg !2740
  br label %originalBB888

originalBB898alteredBB:                           ; preds = %originalBB898, %3593
  br label %originalBB898

originalBB902alteredBB:                           ; preds = %originalBB902, %3610
  %5875 = load i64, i64* %21, align 8, !dbg !2741
  %5876 = load i64, i64* %12, align 8, !dbg !2741
  %5877 = icmp ult i64 %5875, %5876, !dbg !2741
  br label %originalBB902

originalBB906alteredBB:                           ; preds = %originalBB906, %3630
  %5878 = load i8*, i8** %11, align 8, !dbg !2741
  %5879 = load i64, i64* %21, align 8, !dbg !2741
  %5880 = getelementptr inbounds i8, i8* %5878, i64 %5879, !dbg !2741
  store i8 39, i8* %5880, align 1, !dbg !2741
  br label %originalBB906

originalBB910alteredBB:                           ; preds = %originalBB910, %3650
  %5881 = load i64, i64* %21, align 8, !dbg !2744
  %_911 = shl i64 %5881, 1
  %5882 = add i64 %5881, 1, !dbg !2744
  store i64 %5882, i64* %21, align 8, !dbg !2744
  br label %originalBB910

originalBB915alteredBB:                           ; preds = %originalBB915, %3669
  store i8 1, i8* %28, align 1, !dbg !2731
  br label %originalBB915

originalBB919alteredBB:                           ; preds = %originalBB919, %3686
  br label %originalBB919

originalBB923alteredBB:                           ; preds = %originalBB923, %3703
  %5883 = load i64, i64* %21, align 8, !dbg !2745
  %5884 = load i64, i64* %12, align 8, !dbg !2745
  %5885 = icmp ult i64 %5883, %5884, !dbg !2745
  br label %originalBB923

originalBB927alteredBB:                           ; preds = %originalBB927, %3723
  %5886 = load i8*, i8** %11, align 8, !dbg !2745
  %5887 = load i64, i64* %21, align 8, !dbg !2745
  %5888 = getelementptr inbounds i8, i8* %5886, i64 %5887, !dbg !2745
  store i8 92, i8* %5888, align 1, !dbg !2745
  br label %originalBB927

originalBB931alteredBB:                           ; preds = %originalBB931, %3746
  br label %originalBB931

originalBB935alteredBB:                           ; preds = %originalBB935, %3763
  br label %originalBB935

originalBB939alteredBB:                           ; preds = %originalBB939, %3784
  %5889 = load i8, i8* %31, align 1, !dbg !2750
  %5890 = zext i8 %5889 to i32, !dbg !2750
  %_940 = sub i32 %5890, 6
  %gen941 = mul i32 %_940, 6
  %_942 = sub i32 0, %5890
  %gen943 = add i32 %_942, 6
  %_944 = sub i32 %5890, 6
  %gen945 = mul i32 %_944, 6
  %_946 = sub i32 %5890, 6
  %gen947 = mul i32 %_946, 6
  %_948 = shl i32 %5890, 6
  %5891 = ashr i32 %5890, 6, !dbg !2750
  %_949 = sub i32 48, %5891
  %gen950 = mul i32 %_949, %5891
  %_951 = sub i32 48, %5891
  %gen952 = mul i32 %_951, %5891
  %_953 = sub i32 0, 48
  %gen954 = add i32 %_953, %5891
  %_955 = sub i32 0, 48
  %gen956 = add i32 %_955, %5891
  %_957 = sub i32 48, %5891
  %gen958 = mul i32 %_957, %5891
  %_959 = sub i32 0, 48
  %gen960 = add i32 %_959, %5891
  %_961 = sub i32 0, 48
  %gen962 = add i32 %_961, %5891
  %_963 = sub i32 0, 48
  %gen964 = add i32 %_963, %5891
  %5892 = add nsw i32 48, %5891, !dbg !2750
  %5893 = trunc i32 %5892 to i8, !dbg !2750
  %5894 = load i8*, i8** %11, align 8, !dbg !2750
  %5895 = load i64, i64* %21, align 8, !dbg !2750
  %5896 = getelementptr inbounds i8, i8* %5894, i64 %5895, !dbg !2750
  store i8 %5893, i8* %5896, align 1, !dbg !2750
  br label %originalBB939

originalBB968alteredBB:                           ; preds = %originalBB968, %3809
  %5897 = load i64, i64* %21, align 8, !dbg !2753
  %_969 = sub i64 %5897, 1
  %gen970 = mul i64 %_969, 1
  %_971 = sub i64 %5897, 1
  %gen972 = mul i64 %_971, 1
  %5898 = add i64 %5897, 1, !dbg !2753
  store i64 %5898, i64* %21, align 8, !dbg !2753
  br label %originalBB968

originalBB976alteredBB:                           ; preds = %originalBB976, %3828
  br label %originalBB976

originalBB980alteredBB:                           ; preds = %originalBB980, %3849
  %5899 = load i8, i8* %31, align 1, !dbg !2755
  %5900 = zext i8 %5899 to i32, !dbg !2755
  %_981 = sub i32 0, %5900
  %gen982 = add i32 %_981, 3
  %5901 = ashr i32 %5900, 3, !dbg !2755
  %_983 = shl i32 %5901, 7
  %_984 = sub i32 %5901, 7
  %gen985 = mul i32 %_984, 7
  %5902 = and i32 %5901, 7, !dbg !2755
  %_986 = shl i32 48, %5902
  %_987 = shl i32 48, %5902
  %_988 = sub i32 0, 48
  %gen989 = add i32 %_988, %5902
  %_990 = sub i32 0, 48
  %gen991 = add i32 %_990, %5902
  %_992 = shl i32 48, %5902
  %5903 = add nsw i32 48, %5902, !dbg !2755
  %5904 = trunc i32 %5903 to i8, !dbg !2755
  %5905 = load i8*, i8** %11, align 8, !dbg !2755
  %5906 = load i64, i64* %21, align 8, !dbg !2755
  %5907 = getelementptr inbounds i8, i8* %5905, i64 %5906, !dbg !2755
  store i8 %5904, i8* %5907, align 1, !dbg !2755
  br label %originalBB980

originalBB996alteredBB:                           ; preds = %originalBB996, %3878
  %5908 = load i8, i8* %31, align 1, !dbg !2759
  %5909 = zext i8 %5908 to i32, !dbg !2759
  %_997 = sub i32 0, %5909
  %gen998 = add i32 %_997, 7
  %5910 = and i32 %5909, 7, !dbg !2760
  %_999 = shl i32 48, %5910
  %5911 = add nsw i32 48, %5910, !dbg !2761
  %5912 = trunc i32 %5911 to i8, !dbg !2762
  store i8 %5912, i8* %31, align 1, !dbg !2763
  br label %originalBB996

originalBB1003alteredBB:                          ; preds = %originalBB1003, %3904
  %5913 = load i64, i64* %21, align 8, !dbg !2770
  %5914 = load i64, i64* %12, align 8, !dbg !2770
  %5915 = icmp ult i64 %5913, %5914, !dbg !2770
  br label %originalBB1003

originalBB1007alteredBB:                          ; preds = %originalBB1007, %3924
  %5916 = load i8*, i8** %11, align 8, !dbg !2770
  %5917 = load i64, i64* %21, align 8, !dbg !2770
  %5918 = getelementptr inbounds i8, i8* %5916, i64 %5917, !dbg !2770
  store i8 92, i8* %5918, align 1, !dbg !2770
  br label %originalBB1007

originalBB1011alteredBB:                          ; preds = %originalBB1011, %3944
  %5919 = load i64, i64* %21, align 8, !dbg !2773
  %_1012 = sub i64 %5919, 1
  %gen1013 = mul i64 %_1012, 1
  %5920 = add i64 %5919, 1, !dbg !2773
  store i64 %5920, i64* %21, align 8, !dbg !2773
  br label %originalBB1011

originalBB1017alteredBB:                          ; preds = %originalBB1017, %3963
  store i8 0, i8* %33, align 1, !dbg !2774
  br label %originalBB1017

originalBB1021alteredBB:                          ; preds = %originalBB1021, %3980
  br label %originalBB1021

originalBB1025alteredBB:                          ; preds = %originalBB1025, %3997
  %5921 = load i64, i64* %42, align 8, !dbg !2776
  %5922 = load i64, i64* %20, align 8, !dbg !2778
  %_1026 = shl i64 %5922, 1
  %_1027 = shl i64 %5922, 1
  %_1028 = shl i64 %5922, 1
  %_1029 = sub i64 %5922, 1
  %gen1030 = mul i64 %_1029, 1
  %_1031 = sub i64 0, %5922
  %gen1032 = add i64 %_1031, 1
  %5923 = add i64 %5922, 1, !dbg !2779
  %5924 = icmp ule i64 %5921, %5923, !dbg !2780
  br label %originalBB1025

originalBB1036alteredBB:                          ; preds = %originalBB1036, %4018
  br label %originalBB1036

originalBB1040alteredBB:                          ; preds = %originalBB1040, %4035
  br label %originalBB1040

originalBB1044alteredBB:                          ; preds = %originalBB1044, %4052
  %5925 = load i8, i8* %28, align 1, !dbg !2784
  %5926 = trunc i8 %5925 to i1, !dbg !2784
  br label %originalBB1044

originalBB1048alteredBB:                          ; preds = %originalBB1048, %4071
  %5927 = load i8, i8* %34, align 1, !dbg !2784
  %5928 = trunc i8 %5927 to i1, !dbg !2784
  br label %originalBB1048

originalBB1052alteredBB:                          ; preds = %originalBB1052, %4090
  br label %originalBB1052

originalBB1056alteredBB:                          ; preds = %originalBB1056, %4111
  %5929 = load i8*, i8** %11, align 8, !dbg !2790
  %5930 = load i64, i64* %21, align 8, !dbg !2790
  %5931 = getelementptr inbounds i8, i8* %5929, i64 %5930, !dbg !2790
  store i8 39, i8* %5931, align 1, !dbg !2790
  br label %originalBB1056

originalBB1060alteredBB:                          ; preds = %originalBB1060, %4131
  %5932 = load i64, i64* %21, align 8, !dbg !2793
  %_1061 = sub i64 0, %5932
  %gen1062 = add i64 %_1061, 1
  %_1063 = sub i64 %5932, 1
  %gen1064 = mul i64 %_1063, 1
  %_1065 = shl i64 %5932, 1
  %_1066 = sub i64 0, %5932
  %gen1067 = add i64 %_1066, 1
  %_1068 = sub i64 0, %5932
  %gen1069 = add i64 %_1068, 1
  %_1070 = shl i64 %5932, 1
  %_1071 = sub i64 0, %5932
  %gen1072 = add i64 %_1071, 1
  %5933 = add i64 %5932, 1, !dbg !2793
  store i64 %5933, i64* %21, align 8, !dbg !2793
  br label %originalBB1060

originalBB1076alteredBB:                          ; preds = %originalBB1076, %4150
  br label %originalBB1076

originalBB1080alteredBB:                          ; preds = %originalBB1080, %4167
  %5934 = load i64, i64* %21, align 8, !dbg !2794
  %5935 = load i64, i64* %12, align 8, !dbg !2794
  %5936 = icmp ult i64 %5934, %5935, !dbg !2794
  br label %originalBB1080

originalBB1084alteredBB:                          ; preds = %originalBB1084, %4191
  %5937 = load i64, i64* %21, align 8, !dbg !2797
  %_1085 = sub i64 0, %5937
  %gen1086 = add i64 %_1085, 1
  %_1087 = sub i64 0, %5937
  %gen1088 = add i64 %_1087, 1
  %_1089 = sub i64 0, %5937
  %gen1090 = add i64 %_1089, 1
  %_1091 = sub i64 0, %5937
  %gen1092 = add i64 %_1091, 1
  %_1093 = sub i64 %5937, 1
  %gen1094 = mul i64 %_1093, 1
  %5938 = add i64 %5937, 1, !dbg !2797
  store i64 %5938, i64* %21, align 8, !dbg !2797
  br label %originalBB1084

originalBB1098alteredBB:                          ; preds = %originalBB1098, %4210
  store i8 0, i8* %28, align 1, !dbg !2788
  br label %originalBB1098

originalBB1102alteredBB:                          ; preds = %originalBB1102, %4227
  br label %originalBB1102

originalBB1106alteredBB:                          ; preds = %originalBB1106, %4249
  %5939 = load i8, i8* %31, align 1, !dbg !2799
  %5940 = load i8*, i8** %11, align 8, !dbg !2799
  %5941 = load i64, i64* %21, align 8, !dbg !2799
  %5942 = getelementptr inbounds i8, i8* %5940, i64 %5941, !dbg !2799
  store i8 %5939, i8* %5942, align 1, !dbg !2799
  br label %originalBB1106

originalBB1110alteredBB:                          ; preds = %originalBB1110, %4270
  %5943 = load i64, i64* %21, align 8, !dbg !2802
  %_1111 = sub i64 %5943, 1
  %gen1112 = mul i64 %_1111, 1
  %_1113 = shl i64 %5943, 1
  %_1114 = sub i64 %5943, 1
  %gen1115 = mul i64 %_1114, 1
  %_1116 = sub i64 0, %5943
  %gen1117 = add i64 %_1116, 1
  %_1118 = sub i64 0, %5943
  %gen1119 = add i64 %_1118, 1
  %5944 = add i64 %5943, 1, !dbg !2802
  store i64 %5944, i64* %21, align 8, !dbg !2802
  br label %originalBB1110

originalBB1123alteredBB:                          ; preds = %originalBB1123, %4289
  %5945 = load i8*, i8** %13, align 8, !dbg !2803
  %5946 = load i64, i64* %20, align 8, !dbg !2804
  %_1124 = sub i64 0, %5946
  %gen1125 = add i64 %_1124, 1
  %_1126 = sub i64 %5946, 1
  %gen1127 = mul i64 %_1126, 1
  %_1128 = shl i64 %5946, 1
  %5947 = add i64 %5946, 1, !dbg !2804
  store i64 %5947, i64* %20, align 8, !dbg !2804
  %5948 = getelementptr inbounds i8, i8* %5945, i64 %5947, !dbg !2803
  %5949 = load i8, i8* %5948, align 1, !dbg !2803
  store i8 %5949, i8* %31, align 1, !dbg !2805
  br label %originalBB1123

originalBB1132alteredBB:                          ; preds = %originalBB1132, %4311
  br label %originalBB1132

originalBB1136alteredBB:                          ; preds = %originalBB1136, %4328
  br label %originalBB1136

originalBB1140alteredBB:                          ; preds = %originalBB1140, %4345
  %5950 = load i8, i8* %25, align 1, !dbg !2812
  %5951 = trunc i8 %5950 to i1, !dbg !2812
  br label %originalBB1140

originalBB1144alteredBB:                          ; preds = %originalBB1144, %4367
  %5952 = load i8, i8* %27, align 1, !dbg !2818
  %5953 = trunc i8 %5952 to i1, !dbg !2818
  br label %originalBB1144

originalBB1148alteredBB:                          ; preds = %originalBB1148, %4389
  %5954 = load i32*, i32** %17, align 8, !dbg !2822
  %5955 = load i8, i8* %31, align 1, !dbg !2823
  %5956 = zext i8 %5955 to i64, !dbg !2823
  %_1149 = sub i64 %5956, 32
  %gen1150 = mul i64 %_1149, 32
  %5957 = udiv i64 %5956, 32, !dbg !2824
  %5958 = getelementptr inbounds i32, i32* %5954, i64 %5957, !dbg !2822
  %5959 = load i32, i32* %5958, align 4, !dbg !2822
  %5960 = load i8, i8* %31, align 1, !dbg !2825
  %5961 = zext i8 %5960 to i64, !dbg !2825
  %_1151 = sub i64 %5961, 32
  %gen1152 = mul i64 %_1151, 32
  %_1153 = shl i64 %5961, 32
  %_1154 = shl i64 %5961, 32
  %_1155 = sub i64 0, %5961
  %gen1156 = add i64 %_1155, 32
  %5962 = urem i64 %5961, 32, !dbg !2826
  %5963 = trunc i64 %5962 to i32, !dbg !2827
  %_1157 = sub i32 0, %5959
  %gen1158 = add i32 %_1157, %5963
  %_1159 = sub i32 %5959, %5963
  %gen1160 = mul i32 %_1159, %5963
  %_1161 = sub i32 0, %5959
  %gen1162 = add i32 %_1161, %5963
  %_1163 = sub i32 0, %5959
  %gen1164 = add i32 %_1163, %5963
  %5964 = lshr i32 %5959, %5963, !dbg !2827
  %_1165 = shl i32 %5964, 1
  %_1166 = sub i32 %5964, 1
  %gen1167 = mul i32 %_1166, 1
  %5965 = and i32 %5964, 1, !dbg !2828
  %5966 = icmp ne i32 %5965, 0, !dbg !2828
  br label %originalBB1148

originalBB1171alteredBB:                          ; preds = %originalBB1171, %4419
  %5967 = load i8, i8* %33, align 1, !dbg !2830
  %5968 = trunc i8 %5967 to i1, !dbg !2830
  br label %originalBB1171

originalBB1175alteredBB:                          ; preds = %originalBB1175, %4438
  br label %originalBB1175

originalBB1179alteredBB:                          ; preds = %originalBB1179, %4455
  br label %originalBB1179

originalBB1183alteredBB:                          ; preds = %originalBB1183, %4472
  br label %originalBB1183

originalBB1187alteredBB:                          ; preds = %originalBB1187, %4489
  %5969 = load i8, i8* %27, align 1, !dbg !2836
  %5970 = trunc i8 %5969 to i1, !dbg !2836
  br label %originalBB1187

originalBB1191alteredBB:                          ; preds = %originalBB1191, %4508
  br label %originalBB1191

originalBB1195alteredBB:                          ; preds = %originalBB1195, %4525
  store i8 1, i8* %34, align 1, !dbg !2839
  %5971 = load i32, i32* %15, align 4, !dbg !2840
  %5972 = icmp eq i32 %5971, 2, !dbg !2840
  br label %originalBB1195

originalBB1199alteredBB:                          ; preds = %originalBB1199, %4544
  %5973 = load i8, i8* %28, align 1, !dbg !2840
  %5974 = trunc i8 %5973 to i1, !dbg !2840
  br label %originalBB1199

originalBB1203alteredBB:                          ; preds = %originalBB1203, %4563
  br label %originalBB1203

originalBB1207alteredBB:                          ; preds = %originalBB1207, %4580
  %5975 = load i64, i64* %21, align 8, !dbg !2844
  %5976 = load i64, i64* %12, align 8, !dbg !2844
  %5977 = icmp ult i64 %5975, %5976, !dbg !2844
  br label %originalBB1207

originalBB1211alteredBB:                          ; preds = %originalBB1211, %4604
  %5978 = load i64, i64* %21, align 8, !dbg !2847
  %_1212 = sub i64 0, %5978
  %gen1213 = add i64 %_1212, 1
  %_1214 = shl i64 %5978, 1
  %_1215 = shl i64 %5978, 1
  %_1216 = sub i64 %5978, 1
  %gen1217 = mul i64 %_1216, 1
  %_1218 = sub i64 %5978, 1
  %gen1219 = mul i64 %_1218, 1
  %5979 = add i64 %5978, 1, !dbg !2847
  store i64 %5979, i64* %21, align 8, !dbg !2847
  br label %originalBB1211

originalBB1223alteredBB:                          ; preds = %originalBB1223, %4624
  %5980 = load i64, i64* %21, align 8, !dbg !2848
  %5981 = load i64, i64* %12, align 8, !dbg !2848
  %5982 = icmp ult i64 %5980, %5981, !dbg !2848
  br label %originalBB1223

originalBB1227alteredBB:                          ; preds = %originalBB1227, %4644
  %5983 = load i8*, i8** %11, align 8, !dbg !2848
  %5984 = load i64, i64* %21, align 8, !dbg !2848
  %5985 = getelementptr inbounds i8, i8* %5983, i64 %5984, !dbg !2848
  store i8 36, i8* %5985, align 1, !dbg !2848
  br label %originalBB1227

originalBB1231alteredBB:                          ; preds = %originalBB1231, %4664
  %5986 = load i64, i64* %21, align 8, !dbg !2851
  %_1232 = shl i64 %5986, 1
  %5987 = add i64 %5986, 1, !dbg !2851
  store i64 %5987, i64* %21, align 8, !dbg !2851
  br label %originalBB1231

originalBB1236alteredBB:                          ; preds = %originalBB1236, %4683
  br label %originalBB1236

originalBB1240alteredBB:                          ; preds = %originalBB1240, %4700
  %5988 = load i64, i64* %21, align 8, !dbg !2852
  %5989 = load i64, i64* %12, align 8, !dbg !2852
  %5990 = icmp ult i64 %5988, %5989, !dbg !2852
  br label %originalBB1240

originalBB1244alteredBB:                          ; preds = %originalBB1244, %4724
  %5991 = load i64, i64* %21, align 8, !dbg !2855
  %_1245 = sub i64 0, %5991
  %gen1246 = add i64 %_1245, 1
  %_1247 = sub i64 0, %5991
  %gen1248 = add i64 %_1247, 1
  %_1249 = shl i64 %5991, 1
  %_1250 = shl i64 %5991, 1
  %_1251 = sub i64 %5991, 1
  %gen1252 = mul i64 %_1251, 1
  %_1253 = sub i64 %5991, 1
  %gen1254 = mul i64 %_1253, 1
  %_1255 = sub i64 %5991, 1
  %gen1256 = mul i64 %_1255, 1
  %5992 = add i64 %5991, 1, !dbg !2855
  store i64 %5992, i64* %21, align 8, !dbg !2855
  br label %originalBB1244

originalBB1260alteredBB:                          ; preds = %originalBB1260, %4749
  %5993 = load i8*, i8** %11, align 8, !dbg !2856
  %5994 = load i64, i64* %21, align 8, !dbg !2856
  %5995 = getelementptr inbounds i8, i8* %5993, i64 %5994, !dbg !2856
  store i8 92, i8* %5995, align 1, !dbg !2856
  br label %originalBB1260

originalBB1264alteredBB:                          ; preds = %originalBB1264, %4769
  %5996 = load i64, i64* %21, align 8, !dbg !2859
  %_1265 = sub i64 0, %5996
  %gen1266 = add i64 %_1265, 1
  %_1267 = shl i64 %5996, 1
  %_1268 = sub i64 0, %5996
  %gen1269 = add i64 %_1268, 1
  %_1270 = sub i64 0, %5996
  %gen1271 = add i64 %_1270, 1
  %_1272 = shl i64 %5996, 1
  %_1273 = sub i64 0, %5996
  %gen1274 = add i64 %_1273, 1
  %_1275 = sub i64 %5996, 1
  %gen1276 = mul i64 %_1275, 1
  %5997 = add i64 %5996, 1, !dbg !2859
  store i64 %5997, i64* %21, align 8, !dbg !2859
  br label %originalBB1264

originalBB1280alteredBB:                          ; preds = %originalBB1280, %4788
  br label %originalBB1280

originalBB1284alteredBB:                          ; preds = %originalBB1284, %4805
  br label %originalBB1284

originalBB1288alteredBB:                          ; preds = %originalBB1288, %4826
  %5998 = load i8, i8* %34, align 1, !dbg !2863
  %5999 = trunc i8 %5998 to i1, !dbg !2863
  br label %originalBB1288

originalBB1292alteredBB:                          ; preds = %originalBB1292, %4845
  br label %originalBB1292

originalBB1296alteredBB:                          ; preds = %originalBB1296, %4870
  %6000 = load i64, i64* %21, align 8, !dbg !2872
  %_1297 = shl i64 %6000, 1
  %_1298 = shl i64 %6000, 1
  %_1299 = sub i64 0, %6000
  %gen1300 = add i64 %_1299, 1
  %_1301 = sub i64 0, %6000
  %gen1302 = add i64 %_1301, 1
  %_1303 = sub i64 0, %6000
  %gen1304 = add i64 %_1303, 1
  %_1305 = sub i64 %6000, 1
  %gen1306 = mul i64 %_1305, 1
  %_1307 = sub i64 0, %6000
  %gen1308 = add i64 %_1307, 1
  %_1309 = sub i64 %6000, 1
  %gen1310 = mul i64 %_1309, 1
  %_1311 = sub i64 %6000, 1
  %gen1312 = mul i64 %_1311, 1
  %6001 = add i64 %6000, 1, !dbg !2872
  store i64 %6001, i64* %21, align 8, !dbg !2872
  br label %originalBB1296

originalBB1316alteredBB:                          ; preds = %originalBB1316, %4889
  br label %originalBB1316

originalBB1320alteredBB:                          ; preds = %originalBB1320, %4906
  %6002 = load i64, i64* %21, align 8, !dbg !2873
  %6003 = load i64, i64* %12, align 8, !dbg !2873
  %6004 = icmp ult i64 %6002, %6003, !dbg !2873
  br label %originalBB1320

originalBB1324alteredBB:                          ; preds = %originalBB1324, %4926
  %6005 = load i8*, i8** %11, align 8, !dbg !2873
  %6006 = load i64, i64* %21, align 8, !dbg !2873
  %6007 = getelementptr inbounds i8, i8* %6005, i64 %6006, !dbg !2873
  store i8 39, i8* %6007, align 1, !dbg !2873
  br label %originalBB1324

originalBB1328alteredBB:                          ; preds = %originalBB1328, %4946
  %6008 = load i64, i64* %21, align 8, !dbg !2876
  %_1329 = sub i64 %6008, 1
  %gen1330 = mul i64 %_1329, 1
  %_1331 = sub i64 %6008, 1
  %gen1332 = mul i64 %_1331, 1
  %6009 = add i64 %6008, 1, !dbg !2876
  store i64 %6009, i64* %21, align 8, !dbg !2876
  br label %originalBB1328

originalBB1336alteredBB:                          ; preds = %originalBB1336, %4965
  store i8 0, i8* %28, align 1, !dbg !2867
  br label %originalBB1336

originalBB1340alteredBB:                          ; preds = %originalBB1340, %4982
  br label %originalBB1340

originalBB1344alteredBB:                          ; preds = %originalBB1344, %5000
  %6010 = load i64, i64* %21, align 8, !dbg !2878
  %6011 = load i64, i64* %12, align 8, !dbg !2878
  %6012 = icmp ult i64 %6010, %6011, !dbg !2878
  br label %originalBB1344

originalBB1348alteredBB:                          ; preds = %originalBB1348, %5020
  %6013 = load i8, i8* %31, align 1, !dbg !2878
  %6014 = load i8*, i8** %11, align 8, !dbg !2878
  %6015 = load i64, i64* %21, align 8, !dbg !2878
  %6016 = getelementptr inbounds i8, i8* %6014, i64 %6015, !dbg !2878
  store i8 %6013, i8* %6016, align 1, !dbg !2878
  br label %originalBB1348

originalBB1352alteredBB:                          ; preds = %originalBB1352, %5047
  store i8 0, i8* %30, align 1, !dbg !2885
  br label %originalBB1352

originalBB1356alteredBB:                          ; preds = %originalBB1356, %5064
  br label %originalBB1356

originalBB1360alteredBB:                          ; preds = %originalBB1360, %5084
  %6017 = load i64, i64* %21, align 8, !dbg !2892
  %6018 = icmp eq i64 %6017, 0, !dbg !2894
  br label %originalBB1360

originalBB1364alteredBB:                          ; preds = %originalBB1364, %5103
  %6019 = load i32, i32* %15, align 4, !dbg !2896
  %6020 = icmp eq i32 %6019, 2, !dbg !2897
  br label %originalBB1364

originalBB1368alteredBB:                          ; preds = %originalBB1368, %5122
  %6021 = load i8, i8* %27, align 1, !dbg !2899
  %6022 = trunc i8 %6021 to i1, !dbg !2899
  br label %originalBB1368

originalBB1372alteredBB:                          ; preds = %originalBB1372, %5141
  br label %originalBB1372

originalBB1376alteredBB:                          ; preds = %originalBB1376, %5158
  %6023 = load i32, i32* %15, align 4, !dbg !2902
  %6024 = icmp eq i32 %6023, 2, !dbg !2904
  br label %originalBB1376

originalBB1380alteredBB:                          ; preds = %originalBB1380, %5180
  %6025 = load i8, i8* %29, align 1, !dbg !2908
  %6026 = trunc i8 %6025 to i1, !dbg !2908
  br label %originalBB1380

originalBB1384alteredBB:                          ; preds = %originalBB1384, %5199
  %6027 = load i8, i8* %30, align 1, !dbg !2910
  %6028 = trunc i8 %6027 to i1, !dbg !2910
  br label %originalBB1384

originalBB1388alteredBB:                          ; preds = %originalBB1388, %5218
  %6029 = load i8*, i8** %11, align 8, !dbg !2914
  %6030 = load i64, i64* %22, align 8, !dbg !2915
  %6031 = load i8*, i8** %13, align 8, !dbg !2916
  %6032 = load i64, i64* %14, align 8, !dbg !2917
  %6033 = load i32, i32* %16, align 4, !dbg !2918
  %6034 = load i32*, i32** %17, align 8, !dbg !2919
  %6035 = load i8*, i8** %18, align 8, !dbg !2920
  %6036 = load i8*, i8** %19, align 8, !dbg !2921
  %6037 = call i64 @quotearg_buffer_restyled(i8* %6029, i64 %6030, i8* %6031, i64 %6032, i32 5, i32 %6033, i32* %6034, i8* %6035, i8* %6036), !dbg !2922
  store i64 %6037, i64* %10, align 8, !dbg !2923
  br label %originalBB1388

originalBB1392alteredBB:                          ; preds = %originalBB1392, %5247
  %6038 = load i64, i64* %22, align 8, !dbg !2927
  %6039 = icmp ne i64 %6038, 0, !dbg !2927
  br label %originalBB1392

originalBB1396alteredBB:                          ; preds = %originalBB1396, %5268
  br label %originalBB1396

originalBB1400alteredBB:                          ; preds = %originalBB1400, %5285
  br label %originalBB1400

originalBB1404alteredBB:                          ; preds = %originalBB1404, %5302
  %6040 = load i8*, i8** %23, align 8, !dbg !2935
  %6041 = icmp ne i8* %6040, null, !dbg !2935
  br label %originalBB1404

originalBB1408alteredBB:                          ; preds = %originalBB1408, %5321
  %6042 = load i8, i8* %27, align 1, !dbg !2938
  %6043 = trunc i8 %6042 to i1, !dbg !2938
  br label %originalBB1408

originalBB1412alteredBB:                          ; preds = %originalBB1412, %5340
  br label %originalBB1412

originalBB1416alteredBB:                          ; preds = %originalBB1416, %5357
  %6044 = load i8*, i8** %23, align 8, !dbg !2941
  %6045 = load i8, i8* %6044, align 1, !dbg !2944
  %6046 = icmp ne i8 %6045, 0, !dbg !2945
  br label %originalBB1416

originalBB1420alteredBB:                          ; preds = %originalBB1420, %5377
  br label %originalBB1420

originalBB1424alteredBB:                          ; preds = %originalBB1424, %5407
  br label %originalBB1424

originalBB1428alteredBB:                          ; preds = %originalBB1428, %5427
  br label %originalBB1428

originalBB1432alteredBB:                          ; preds = %originalBB1432, %5444
  %6047 = load i64, i64* %21, align 8, !dbg !2955
  %6048 = load i64, i64* %12, align 8, !dbg !2957
  %6049 = icmp ult i64 %6047, %6048, !dbg !2958
  br label %originalBB1432

originalBB1436alteredBB:                          ; preds = %originalBB1436, %5470
  %6050 = load i32, i32* %15, align 4, !dbg !2967
  %6051 = icmp eq i32 %6050, 2, !dbg !2969
  br label %originalBB1436

originalBB1440alteredBB:                          ; preds = %originalBB1440, %5489
  %6052 = load i8, i8* %25, align 1, !dbg !2971
  %6053 = trunc i8 %6052 to i1, !dbg !2971
  br label %originalBB1440

originalBB1444alteredBB:                          ; preds = %originalBB1444, %5508
  store i32 4, i32* %15, align 4, !dbg !2973
  br label %originalBB1444

originalBB1448alteredBB:                          ; preds = %originalBB1448, %5525
  %6054 = load i8*, i8** %11, align 8, !dbg !2975
  %6055 = load i64, i64* %12, align 8, !dbg !2976
  %6056 = load i8*, i8** %13, align 8, !dbg !2977
  %6057 = load i64, i64* %14, align 8, !dbg !2978
  %6058 = load i32, i32* %15, align 4, !dbg !2979
  %6059 = load i32, i32* %16, align 4, !dbg !2980
  %_1449 = sub i32 0, %6059
  %gen1450 = add i32 %_1449, -3
  %_1451 = shl i32 %6059, -3
  %_1452 = sub i32 0, %6059
  %gen1453 = add i32 %_1452, -3
  %6060 = and i32 %6059, -3, !dbg !2981
  %6061 = load i8*, i8** %18, align 8, !dbg !2982
  %6062 = load i8*, i8** %19, align 8, !dbg !2983
  %6063 = call i64 @quotearg_buffer_restyled(i8* %6054, i64 %6055, i8* %6056, i64 %6057, i32 %6058, i32 %6060, i32* null, i8* %6061, i8* %6062), !dbg !2984
  store i64 %6063, i64* %10, align 8, !dbg !2985
  br label %originalBB1448

originalBB1457alteredBB:                          ; preds = %originalBB1457, %5552
  %6064 = load i64, i64* %10, align 8, !dbg !2986
  br label %originalBB1457
}

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gettext_quote(i8*, i32) #4 !dbg !3023 {
  %3 = load i32, i32* @x.39
  %4 = load i32, i32* @y.40
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3026, metadata !DIExpression()), !dbg !3027
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !3028, metadata !DIExpression()), !dbg !3029
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3030, metadata !DIExpression()), !dbg !3031
  %16 = load i8*, i8** %12, align 8, !dbg !3032
  %17 = call i8* @gettext(i8* %16) #10, !dbg !3032
  store i8* %17, i8** %14, align 8, !dbg !3031
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3033, metadata !DIExpression()), !dbg !3034
  %18 = load i8*, i8** %14, align 8, !dbg !3035
  %19 = load i8*, i8** %12, align 8, !dbg !3037
  %20 = icmp ne i8* %18, %19, !dbg !3038
  %21 = load i32, i32* @x.39
  %22 = load i32, i32* @y.40
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %20, label %29, label %47, !dbg !3039

29:                                               ; preds = %originalBBpart2
  %30 = load i32, i32* @x.39
  %31 = load i32, i32* @y.40
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i8*, i8** %14, align 8, !dbg !3040
  store i8* %38, i8** %11, align 8, !dbg !3041
  %39 = load i32, i32* @x.39
  %40 = load i32, i32* @y.40
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %394, !dbg !3041

47:                                               ; preds = %originalBBpart2
  %48 = load i32, i32* @x.39
  %49 = load i32, i32* @y.40
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = call i8* @locale_charset(), !dbg !3042
  store i8* %56, i8** %15, align 8, !dbg !3043
  %57 = load i8*, i8** %15, align 8, !dbg !3044
  %58 = call i32 @c_strcasecmp(i8* %57, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.88, i64 0, i64 0)) #13, !dbg !3044
  %59 = load i32, i32* @x.39
  %60 = load i32, i32* @y.40
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %67, !dbg !3044

67:                                               ; preds = %originalBBpart28
  %68 = load i32, i32* @x.39
  %69 = load i32, i32* @y.40
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %67, %originalBB10alteredBB
  %collatzVar1 = alloca i32
  %76 = load i32, i32* @x.39
  %77 = load i32, i32* @y.40
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %84

84:                                               ; preds = %originalBBpart212
  %85 = load i32, i32* @inVal0
  %86 = icmp sgt i32 %85, 1
  br i1 %86, label %88, label %87

87:                                               ; preds = %84
  store i32 48, i32* %collatzVar1
  br label %88

88:                                               ; preds = %87, %84
  %89 = load i32, i32* @x.39
  %90 = load i32, i32* @y.40
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %88, %originalBB14alteredBB
  %97 = load i8**, i8*** @inVal1
  %98 = getelementptr inbounds i8*, i8** %97, i64 1
  %99 = load i8*, i8** %98
  %controle2 = call i32 @controle(i8* %99, i32 0)
  store i32 %controle2, i32* %collatzVar1
  %100 = load i32, i32* @x.39
  %101 = load i32, i32* @y.40
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %108

108:                                              ; preds = %originalBBpart277, %originalBBpart270, %originalBBpart216
  %109 = load i32, i32* @x.39
  %110 = load i32, i32* @y.40
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %108, %originalBB18alteredBB
  %117 = load i32, i32* %collatzVar1
  %118 = icmp sgt i32 %117, 1
  %119 = load i32, i32* @x.39
  %120 = load i32, i32* @y.40
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %118, label %127, label %250

127:                                              ; preds = %originalBBpart220
  %128 = load i32, i32* @x.39
  %129 = load i32, i32* @y.40
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %127, %originalBB22alteredBB
  %136 = load i32, i32* %collatzVar1
  %137 = srem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = load i32, i32* @x.39
  %140 = load i32, i32* @y.40
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart225, label %originalBB22alteredBB

originalBBpart225:                                ; preds = %originalBB22
  br i1 %138, label %147, label %166

147:                                              ; preds = %originalBBpart225
  %148 = load i32, i32* @x.39
  %149 = load i32, i32* @y.40
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %147, %originalBB27alteredBB
  %156 = load i32, i32* %collatzVar1
  %157 = sdiv i32 %156, 2
  store i32 %157, i32* %collatzVar1
  %158 = load i32, i32* @x.39
  %159 = load i32, i32* @y.40
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart233, label %originalBB27alteredBB

originalBBpart233:                                ; preds = %originalBB27
  br label %186

166:                                              ; preds = %originalBBpart225
  %167 = load i32, i32* @x.39
  %168 = load i32, i32* @y.40
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %166, %originalBB35alteredBB
  %175 = load i32, i32* %collatzVar1
  %176 = mul i32 %175, 3
  %177 = add i32 %176, 1
  store i32 %177, i32* %collatzVar1
  %178 = load i32, i32* @x.39
  %179 = load i32, i32* @y.40
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBBpart253, label %originalBB35alteredBB

originalBBpart253:                                ; preds = %originalBB35
  br label %186

186:                                              ; preds = %originalBBpart253, %originalBBpart233
  %187 = load i32, i32* @x.39
  %188 = load i32, i32* @y.40
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBB55, label %originalBB55alteredBB

originalBB55:                                     ; preds = %186, %originalBB55alteredBB
  %195 = load i32, i32* %collatzVar1
  %196 = sub i32 %58, %195
  %197 = icmp sgt i32 %196, -2
  %198 = load i32, i32* @x.39
  %199 = load i32, i32* @y.40
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBBpart270, label %originalBB55alteredBB

originalBBpart270:                                ; preds = %originalBB55
  br i1 %197, label %206, label %108

206:                                              ; preds = %originalBBpart270
  %207 = load i32, i32* @x.39
  %208 = load i32, i32* @y.40
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBB72, label %originalBB72alteredBB

originalBB72:                                     ; preds = %206, %originalBB72alteredBB
  %215 = load i32, i32* %collatzVar1
  %216 = add i32 %58, %215
  %217 = icmp slt i32 %216, 2
  %218 = load i32, i32* @x.39
  %219 = load i32, i32* @y.40
  %220 = sub i32 %218, 1
  %221 = mul i32 %218, %220
  %222 = urem i32 %221, 2
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %223, %224
  br i1 %225, label %originalBBpart277, label %originalBB72alteredBB

originalBBpart277:                                ; preds = %originalBB72
  br i1 %217, label %226, label %108

226:                                              ; preds = %originalBBpart277
  %227 = load i32, i32* @x.39
  %228 = load i32, i32* @y.40
  %229 = sub i32 %227, 1
  %230 = mul i32 %227, %229
  %231 = urem i32 %230, 2
  %232 = icmp eq i32 %231, 0
  %233 = icmp slt i32 %228, 10
  %234 = or i1 %232, %233
  br i1 %234, label %originalBB79, label %originalBB79alteredBB

originalBB79:                                     ; preds = %226, %originalBB79alteredBB
  %235 = load i8*, i8** %12, align 8, !dbg !3046
  %236 = getelementptr inbounds i8, i8* %235, i64 0, !dbg !3046
  %237 = load i8, i8* %236, align 1, !dbg !3046
  %238 = sext i8 %237 to i32, !dbg !3046
  %239 = icmp eq i32 %238, 96, !dbg !3047
  %240 = zext i1 %239 to i64, !dbg !3046
  %241 = select i1 %239, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.89, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.90, i64 0, i64 0), !dbg !3046
  store i8* %241, i8** %11, align 8, !dbg !3048
  %242 = load i32, i32* @x.39
  %243 = load i32, i32* @y.40
  %244 = sub i32 %242, 1
  %245 = mul i32 %242, %244
  %246 = urem i32 %245, 2
  %247 = icmp eq i32 %246, 0
  %248 = icmp slt i32 %243, 10
  %249 = or i1 %247, %248
  br i1 %249, label %originalBBpart281, label %originalBB79alteredBB

originalBBpart281:                                ; preds = %originalBB79
  br label %394, !dbg !3048

250:                                              ; preds = %originalBBpart220
  %251 = load i8*, i8** %15, align 8, !dbg !3049
  %252 = call i32 @c_strcasecmp(i8* %251, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.91, i64 0, i64 0)) #13, !dbg !3049
  br label %253, !dbg !3049

253:                                              ; preds = %250
  %collatzVar = alloca i32
  br label %254

254:                                              ; preds = %253
  %255 = load i32, i32* @x.39
  %256 = load i32, i32* @y.40
  %257 = sub i32 %255, 1
  %258 = mul i32 %255, %257
  %259 = urem i32 %258, 2
  %260 = icmp eq i32 %259, 0
  %261 = icmp slt i32 %256, 10
  %262 = or i1 %260, %261
  br i1 %262, label %originalBB83, label %originalBB83alteredBB

originalBB83:                                     ; preds = %254, %originalBB83alteredBB
  %263 = load i32, i32* @inVal0
  %264 = icmp sgt i32 %263, 1
  %265 = load i32, i32* @x.39
  %266 = load i32, i32* @y.40
  %267 = sub i32 %265, 1
  %268 = mul i32 %265, %267
  %269 = urem i32 %268, 2
  %270 = icmp eq i32 %269, 0
  %271 = icmp slt i32 %266, 10
  %272 = or i1 %270, %271
  br i1 %272, label %originalBBpart285, label %originalBB83alteredBB

originalBBpart285:                                ; preds = %originalBB83
  br i1 %264, label %290, label %273

273:                                              ; preds = %originalBBpart285
  %274 = load i32, i32* @x.39
  %275 = load i32, i32* @y.40
  %276 = sub i32 %274, 1
  %277 = mul i32 %274, %276
  %278 = urem i32 %277, 2
  %279 = icmp eq i32 %278, 0
  %280 = icmp slt i32 %275, 10
  %281 = or i1 %279, %280
  br i1 %281, label %originalBB87, label %originalBB87alteredBB

originalBB87:                                     ; preds = %273, %originalBB87alteredBB
  store i32 46, i32* %collatzVar
  %282 = load i32, i32* @x.39
  %283 = load i32, i32* @y.40
  %284 = sub i32 %282, 1
  %285 = mul i32 %282, %284
  %286 = urem i32 %285, 2
  %287 = icmp eq i32 %286, 0
  %288 = icmp slt i32 %283, 10
  %289 = or i1 %287, %288
  br i1 %289, label %originalBBpart289, label %originalBB87alteredBB

originalBBpart289:                                ; preds = %originalBB87
  br label %290

290:                                              ; preds = %originalBBpart289, %originalBBpart285
  %291 = load i8**, i8*** @inVal1
  %292 = getelementptr inbounds i8*, i8** %291, i64 1
  %293 = load i8*, i8** %292
  %294 = add i32 0, -1
  %controle = call i32 @controle(i8* %293, i32 %294)
  store i32 %controle, i32* %collatzVar
  br label %295

295:                                              ; preds = %361, %originalBBpart2131, %290
  %296 = load i32, i32* %collatzVar
  %297 = icmp sgt i32 %296, 1
  br i1 %297, label %298, label %389

298:                                              ; preds = %295
  %299 = load i32, i32* @x.39
  %300 = load i32, i32* @y.40
  %301 = sub i32 %299, 1
  %302 = mul i32 %299, %301
  %303 = urem i32 %302, 2
  %304 = icmp eq i32 %303, 0
  %305 = icmp slt i32 %300, 10
  %306 = or i1 %304, %305
  br i1 %306, label %originalBB91, label %originalBB91alteredBB

originalBB91:                                     ; preds = %298, %originalBB91alteredBB
  %307 = load i32, i32* %collatzVar
  %308 = srem i32 %307, 2
  %309 = icmp eq i32 %308, 0
  %310 = load i32, i32* @x.39
  %311 = load i32, i32* @y.40
  %312 = sub i32 %310, 1
  %313 = mul i32 %310, %312
  %314 = urem i32 %313, 2
  %315 = icmp eq i32 %314, 0
  %316 = icmp slt i32 %311, 10
  %317 = or i1 %315, %316
  br i1 %317, label %originalBBpart2108, label %originalBB91alteredBB

originalBBpart2108:                               ; preds = %originalBB91
  br i1 %309, label %318, label %337

318:                                              ; preds = %originalBBpart2108
  %319 = load i32, i32* @x.39
  %320 = load i32, i32* @y.40
  %321 = sub i32 %319, 1
  %322 = mul i32 %319, %321
  %323 = urem i32 %322, 2
  %324 = icmp eq i32 %323, 0
  %325 = icmp slt i32 %320, 10
  %326 = or i1 %324, %325
  br i1 %326, label %originalBB110, label %originalBB110alteredBB

originalBB110:                                    ; preds = %318, %originalBB110alteredBB
  %327 = load i32, i32* %collatzVar
  %328 = sdiv i32 %327, 2
  store i32 %328, i32* %collatzVar
  %329 = load i32, i32* @x.39
  %330 = load i32, i32* @y.40
  %331 = sub i32 %329, 1
  %332 = mul i32 %329, %331
  %333 = urem i32 %332, 2
  %334 = icmp eq i32 %333, 0
  %335 = icmp slt i32 %330, 10
  %336 = or i1 %334, %335
  br i1 %336, label %originalBBpart2117, label %originalBB110alteredBB

originalBBpart2117:                               ; preds = %originalBB110
  br label %341

337:                                              ; preds = %originalBBpart2108
  %338 = load i32, i32* %collatzVar
  %339 = mul i32 %338, 3
  %340 = add i32 %339, 1
  store i32 %340, i32* %collatzVar
  br label %341

341:                                              ; preds = %337, %originalBBpart2117
  %342 = load i32, i32* @x.39
  %343 = load i32, i32* @y.40
  %344 = sub i32 %342, 1
  %345 = mul i32 %342, %344
  %346 = urem i32 %345, 2
  %347 = icmp eq i32 %346, 0
  %348 = icmp slt i32 %343, 10
  %349 = or i1 %347, %348
  br i1 %349, label %originalBB119, label %originalBB119alteredBB

originalBB119:                                    ; preds = %341, %originalBB119alteredBB
  %350 = load i32, i32* %collatzVar
  %351 = sub i32 %252, %350
  %352 = icmp sgt i32 %351, -2
  %353 = load i32, i32* @x.39
  %354 = load i32, i32* @y.40
  %355 = sub i32 %353, 1
  %356 = mul i32 %353, %355
  %357 = urem i32 %356, 2
  %358 = icmp eq i32 %357, 0
  %359 = icmp slt i32 %354, 10
  %360 = or i1 %358, %359
  br i1 %360, label %originalBBpart2131, label %originalBB119alteredBB

originalBBpart2131:                               ; preds = %originalBB119
  br i1 %352, label %361, label %295

361:                                              ; preds = %originalBBpart2131
  %362 = load i32, i32* %collatzVar
  %363 = add i32 %252, %362
  %364 = icmp slt i32 %363, 2
  br i1 %364, label %365, label %295

365:                                              ; preds = %361
  %366 = load i32, i32* @x.39
  %367 = load i32, i32* @y.40
  %368 = sub i32 %366, 1
  %369 = mul i32 %366, %368
  %370 = urem i32 %369, 2
  %371 = icmp eq i32 %370, 0
  %372 = icmp slt i32 %367, 10
  %373 = or i1 %371, %372
  br i1 %373, label %originalBB133, label %originalBB133alteredBB

originalBB133:                                    ; preds = %365, %originalBB133alteredBB
  %374 = load i8*, i8** %12, align 8, !dbg !3051
  %375 = getelementptr inbounds i8, i8* %374, i64 0, !dbg !3051
  %376 = load i8, i8* %375, align 1, !dbg !3051
  %377 = sext i8 %376 to i32, !dbg !3051
  %378 = icmp eq i32 %377, 96, !dbg !3052
  %379 = zext i1 %378 to i64, !dbg !3051
  %380 = select i1 %378, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.92, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.93, i64 0, i64 0), !dbg !3051
  store i8* %380, i8** %11, align 8, !dbg !3053
  %381 = load i32, i32* @x.39
  %382 = load i32, i32* @y.40
  %383 = sub i32 %381, 1
  %384 = mul i32 %381, %383
  %385 = urem i32 %384, 2
  %386 = icmp eq i32 %385, 0
  %387 = icmp slt i32 %382, 10
  %388 = or i1 %386, %387
  br i1 %388, label %originalBBpart2135, label %originalBB133alteredBB

originalBBpart2135:                               ; preds = %originalBB133
  br label %394, !dbg !3053

389:                                              ; preds = %295
  %390 = load i32, i32* %13, align 4, !dbg !3054
  %391 = icmp eq i32 %390, 9, !dbg !3055
  %392 = zext i1 %391 to i64, !dbg !3054
  %393 = select i1 %391, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.85, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.87, i64 0, i64 0), !dbg !3054
  store i8* %393, i8** %11, align 8, !dbg !3056
  br label %394, !dbg !3056

394:                                              ; preds = %389, %originalBBpart2135, %originalBBpart281, %originalBBpart24
  %395 = load i32, i32* @x.39
  %396 = load i32, i32* @y.40
  %397 = sub i32 %395, 1
  %398 = mul i32 %395, %397
  %399 = urem i32 %398, 2
  %400 = icmp eq i32 %399, 0
  %401 = icmp slt i32 %396, 10
  %402 = or i1 %400, %401
  br i1 %402, label %originalBB137, label %originalBB137alteredBB

originalBB137:                                    ; preds = %394, %originalBB137alteredBB
  %403 = load i8*, i8** %11, align 8, !dbg !3057
  %404 = load i32, i32* @x.39
  %405 = load i32, i32* @y.40
  %406 = sub i32 %404, 1
  %407 = mul i32 %404, %406
  %408 = urem i32 %407, 2
  %409 = icmp eq i32 %408, 0
  %410 = icmp slt i32 %405, 10
  %411 = or i1 %409, %410
  br i1 %411, label %originalBBpart2139, label %originalBB137alteredBB

originalBBpart2139:                               ; preds = %originalBB137
  ret i8* %403, !dbg !3057

originalBBalteredBB:                              ; preds = %originalBB, %2
  %412 = alloca i8*, align 8
  %413 = alloca i8*, align 8
  %414 = alloca i32, align 4
  %415 = alloca i8*, align 8
  %416 = alloca i8*, align 8
  store i8* %0, i8** %413, align 8
  call void @llvm.dbg.declare(metadata i8** %413, metadata !3058, metadata !DIExpression()), !dbg !3027
  store i32 %1, i32* %414, align 4
  call void @llvm.dbg.declare(metadata i32* %414, metadata !3090, metadata !DIExpression()), !dbg !3029
  call void @llvm.dbg.declare(metadata i8** %415, metadata !3091, metadata !DIExpression()), !dbg !3031
  %417 = load i8*, i8** %413, align 8, !dbg !3032
  %418 = call i8* @gettext(i8* %417) #10, !dbg !3032
  store i8* %418, i8** %415, align 8, !dbg !3031
  call void @llvm.dbg.declare(metadata i8** %416, metadata !3092, metadata !DIExpression()), !dbg !3034
  %419 = load i8*, i8** %415, align 8, !dbg !3035
  %420 = load i8*, i8** %413, align 8, !dbg !3037
  %421 = icmp ne i8* %419, %420, !dbg !3038
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %422 = load i8*, i8** %14, align 8, !dbg !3040
  store i8* %422, i8** %11, align 8, !dbg !3041
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %423 = call i8* @locale_charset(), !dbg !3042
  store i8* %423, i8** %15, align 8, !dbg !3043
  %424 = load i8*, i8** %15, align 8, !dbg !3044
  %425 = call i32 @c_strcasecmp(i8* %424, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.88, i64 0, i64 0)) #13, !dbg !3044
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %67
  %collatzVar1alteredBB = alloca i32
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %88
  %426 = load i8**, i8*** @inVal1
  %427 = getelementptr inbounds i8*, i8** %426, i64 1
  %428 = load i8*, i8** %427
  %controle2alteredBB = call i32 @controle(i8* %428, i32 0)
  store i32 %controle2alteredBB, i32* %collatzVar1
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %108
  %429 = load i32, i32* %collatzVar1
  %430 = icmp sgt i32 %429, 1
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %127
  %431 = load i32, i32* %collatzVar1
  %_ = shl i32 %431, 2
  %_23 = sub i32 %431, 2
  %gen = mul i32 %_23, 2
  %432 = srem i32 %431, 2
  %433 = icmp eq i32 %432, 0
  br label %originalBB22

originalBB27alteredBB:                            ; preds = %originalBB27, %147
  %434 = load i32, i32* %collatzVar1
  %_28 = sub i32 %434, 2
  %gen29 = mul i32 %_28, 2
  %_30 = sub i32 0, %434
  %gen31 = add i32 %_30, 2
  %435 = sdiv i32 %434, 2
  store i32 %435, i32* %collatzVar1
  br label %originalBB27

originalBB35alteredBB:                            ; preds = %originalBB35, %166
  %436 = load i32, i32* %collatzVar1
  %_36 = shl i32 %436, 3
  %_37 = sub i32 0, %436
  %gen38 = add i32 %_37, 3
  %437 = mul i32 %436, 3
  %_39 = sub i32 0, %437
  %gen40 = add i32 %_39, 1
  %_41 = shl i32 %437, 1
  %_42 = sub i32 0, %437
  %gen43 = add i32 %_42, 1
  %_44 = sub i32 0, %437
  %gen45 = add i32 %_44, 1
  %_46 = sub i32 0, %437
  %gen47 = add i32 %_46, 1
  %_48 = sub i32 %437, 1
  %gen49 = mul i32 %_48, 1
  %_50 = sub i32 0, %437
  %gen51 = add i32 %_50, 1
  %438 = add i32 %437, 1
  store i32 %438, i32* %collatzVar1
  br label %originalBB35

originalBB55alteredBB:                            ; preds = %originalBB55, %186
  %439 = load i32, i32* %collatzVar1
  %_56 = sub i32 0, %58
  %gen57 = add i32 %_56, %439
  %_58 = sub i32 %58, %439
  %gen59 = mul i32 %_58, %439
  %_60 = sub i32 0, %58
  %gen61 = add i32 %_60, %439
  %_62 = sub i32 0, %58
  %gen63 = add i32 %_62, %439
  %_64 = sub i32 %58, %439
  %gen65 = mul i32 %_64, %439
  %_66 = sub i32 0, %58
  %gen67 = add i32 %_66, %439
  %_68 = shl i32 %58, %439
  %440 = sub i32 %58, %439
  %441 = icmp sgt i32 %440, -2
  br label %originalBB55

originalBB72alteredBB:                            ; preds = %originalBB72, %206
  %442 = load i32, i32* %collatzVar1
  %_73 = sub i32 0, %58
  %gen74 = add i32 %_73, %442
  %_75 = shl i32 %58, %442
  %443 = add i32 %58, %442
  %444 = icmp slt i32 %443, 2
  br label %originalBB72

originalBB79alteredBB:                            ; preds = %originalBB79, %226
  %445 = load i8*, i8** %12, align 8, !dbg !3046
  %446 = getelementptr inbounds i8, i8* %445, i64 0, !dbg !3046
  %447 = load i8, i8* %446, align 1, !dbg !3046
  %448 = sext i8 %447 to i32, !dbg !3046
  %449 = icmp eq i32 %448, 96, !dbg !3047
  %450 = zext i1 %449 to i64, !dbg !3046
  %451 = select i1 %449, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.89, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.90, i64 0, i64 0), !dbg !3046
  store i8* %451, i8** %11, align 8, !dbg !3048
  br label %originalBB79

originalBB83alteredBB:                            ; preds = %originalBB83, %254
  %452 = load i32, i32* @inVal0
  %453 = icmp sgt i32 %452, 1
  br label %originalBB83

originalBB87alteredBB:                            ; preds = %originalBB87, %273
  store i32 46, i32* %collatzVar
  br label %originalBB87

originalBB91alteredBB:                            ; preds = %originalBB91, %298
  %454 = load i32, i32* %collatzVar
  %_92 = shl i32 %454, 2
  %_93 = sub i32 0, %454
  %gen94 = add i32 %_93, 2
  %_95 = sub i32 0, %454
  %gen96 = add i32 %_95, 2
  %_97 = shl i32 %454, 2
  %_98 = sub i32 %454, 2
  %gen99 = mul i32 %_98, 2
  %_100 = sub i32 %454, 2
  %gen101 = mul i32 %_100, 2
  %_102 = sub i32 %454, 2
  %gen103 = mul i32 %_102, 2
  %_104 = sub i32 %454, 2
  %gen105 = mul i32 %_104, 2
  %_106 = shl i32 %454, 2
  %455 = srem i32 %454, 2
  %456 = icmp eq i32 %455, 0
  br label %originalBB91

originalBB110alteredBB:                           ; preds = %originalBB110, %318
  %457 = load i32, i32* %collatzVar
  %_111 = shl i32 %457, 2
  %_112 = shl i32 %457, 2
  %_113 = shl i32 %457, 2
  %_114 = sub i32 0, %457
  %gen115 = add i32 %_114, 2
  %458 = sdiv i32 %457, 2
  store i32 %458, i32* %collatzVar
  br label %originalBB110

originalBB119alteredBB:                           ; preds = %originalBB119, %341
  %459 = load i32, i32* %collatzVar
  %_120 = shl i32 %252, %459
  %_121 = shl i32 %252, %459
  %_122 = shl i32 %252, %459
  %_123 = sub i32 %252, %459
  %gen124 = mul i32 %_123, %459
  %_125 = shl i32 %252, %459
  %_126 = sub i32 %252, %459
  %gen127 = mul i32 %_126, %459
  %_128 = sub i32 0, %252
  %gen129 = add i32 %_128, %459
  %460 = sub i32 %252, %459
  %461 = icmp sgt i32 %460, -2
  br label %originalBB119

originalBB133alteredBB:                           ; preds = %originalBB133, %365
  %462 = load i8*, i8** %12, align 8, !dbg !3051
  %463 = getelementptr inbounds i8, i8* %462, i64 0, !dbg !3051
  %464 = load i8, i8* %463, align 1, !dbg !3051
  %465 = sext i8 %464 to i32, !dbg !3051
  %466 = icmp eq i32 %465, 96, !dbg !3052
  %467 = zext i1 %466 to i64, !dbg !3051
  %468 = select i1 %466, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.92, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.93, i64 0, i64 0), !dbg !3051
  store i8* %468, i8** %11, align 8, !dbg !3053
  br label %originalBB133

originalBB137alteredBB:                           ; preds = %originalBB137, %394
  %469 = load i8*, i8** %11, align 8, !dbg !3057
  br label %originalBB137
}

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #7

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #7

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #8

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char(i8*, i8 signext) #4 !dbg !3093 {
  %3 = load i32, i32* @x.41
  %4 = load i32, i32* @y.42
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8, align 1
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3096, metadata !DIExpression()), !dbg !3097
  store i8 %1, i8* %12, align 1
  call void @llvm.dbg.declare(metadata i8* %12, metadata !3098, metadata !DIExpression()), !dbg !3099
  %13 = load i8*, i8** %11, align 8, !dbg !3100
  %14 = load i8, i8* %12, align 1, !dbg !3101
  %15 = call i8* @quotearg_char_mem(i8* %13, i64 -1, i8 signext %14), !dbg !3102
  %16 = load i32, i32* @x.41
  %17 = load i32, i32* @y.42
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !3103

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i8*, align 8
  %25 = alloca i8, align 1
  store i8* %0, i8** %24, align 8
  call void @llvm.dbg.declare(metadata i8** %24, metadata !3104, metadata !DIExpression()), !dbg !3097
  store i8 %1, i8* %25, align 1
  call void @llvm.dbg.declare(metadata i8* %25, metadata !3136, metadata !DIExpression()), !dbg !3099
  %26 = load i8*, i8** %24, align 8, !dbg !3100
  %27 = load i8, i8* %25, align 1, !dbg !3101
  %28 = call i8* @quotearg_char_mem(i8* %26, i64 -1, i8 signext %27), !dbg !3102
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_colon(i8*) #4 !dbg !3137 {
  %2 = load i32, i32* @x.43
  %3 = load i32, i32* @y.44
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !3140, metadata !DIExpression()), !dbg !3141
  %11 = load i8*, i8** %10, align 8, !dbg !3142
  %12 = call i8* @quotearg_char(i8* %11, i8 signext 58), !dbg !3143
  %13 = load i32, i32* @x.43
  %14 = load i32, i32* @y.44
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !3144

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !3145, metadata !DIExpression()), !dbg !3141
  %22 = load i8*, i8** %21, align 8, !dbg !3142
  %23 = call i8* @quotearg_char(i8* %22, i8 signext 58), !dbg !3143
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n_mem(i32, i8*, i64) #4 !dbg !3177 {
  %4 = load i32, i32* @x.45
  %5 = load i32, i32* @y.46
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !3180, metadata !DIExpression()), !dbg !3181
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3182, metadata !DIExpression()), !dbg !3183
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !3184, metadata !DIExpression()), !dbg !3185
  %15 = load i32, i32* %12, align 4, !dbg !3186
  %16 = load i8*, i8** %13, align 8, !dbg !3187
  %17 = load i64, i64* %14, align 8, !dbg !3188
  %18 = call i8* @quotearg_n_options(i32 %15, i8* %16, i64 %17, %struct.quoting_options* @quote_quoting_options), !dbg !3189
  %19 = load i32, i32* @x.45
  %20 = load i32, i32* @y.46
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %18, !dbg !3190

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !3191, metadata !DIExpression()), !dbg !3181
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !3223, metadata !DIExpression()), !dbg !3183
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !3224, metadata !DIExpression()), !dbg !3185
  %30 = load i32, i32* %27, align 4, !dbg !3186
  %31 = load i8*, i8** %28, align 8, !dbg !3187
  %32 = load i64, i64* %29, align 8, !dbg !3188
  %33 = call i8* @quotearg_n_options(i32 %30, i8* %31, i64 %32, %struct.quoting_options* @quote_quoting_options), !dbg !3189
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n(i32, i8*) #4 !dbg !3225 {
  %3 = load i32, i32* @x.47
  %4 = load i32, i32* @y.48
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3228, metadata !DIExpression()), !dbg !3229
  store i8* %1, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3230, metadata !DIExpression()), !dbg !3231
  %13 = load i32, i32* %11, align 4, !dbg !3232
  %14 = load i8*, i8** %12, align 8, !dbg !3233
  %15 = call i8* @quote_n_mem(i32 %13, i8* %14, i64 -1), !dbg !3234
  %16 = load i32, i32* @x.47
  %17 = load i32, i32* @y.48
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !3235

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i32, align 4
  %25 = alloca i8*, align 8
  store i32 %0, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !3236, metadata !DIExpression()), !dbg !3229
  store i8* %1, i8** %25, align 8
  call void @llvm.dbg.declare(metadata i8** %25, metadata !3268, metadata !DIExpression()), !dbg !3231
  %26 = load i32, i32* %24, align 4, !dbg !3232
  %27 = load i8*, i8** %25, align 8, !dbg !3233
  %28 = call i8* @quote_n_mem(i32 %26, i8* %27, i64 -1), !dbg !3234
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote(i8*) #4 !dbg !3269 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !3272, metadata !DIExpression()), !dbg !3273
  %3 = load i8*, i8** %2, align 8, !dbg !3274
  %4 = call i8* @quote_n(i32 0, i8* %3), !dbg !3275
  ret i8* %4, !dbg !3276
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @getcon(i8**) #4 !dbg !3277 {
  %2 = load i32, i32* @x.51
  %3 = load i32, i32* @y.52
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8**, align 8
  store i8** %0, i8*** %10, align 8
  call void @llvm.dbg.declare(metadata i8*** %10, metadata !3283, metadata !DIExpression()), !dbg !3284
  %11 = call i32* @__errno_location() #15, !dbg !3285
  store i32 95, i32* %11, align 4, !dbg !3286
  %12 = load i32, i32* @x.51
  %13 = load i32, i32* @y.52
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i32 -1, !dbg !3287

originalBBalteredBB:                              ; preds = %originalBB, %1
  %20 = alloca i8**, align 8
  store i8** %0, i8*** %20, align 8
  call void @llvm.dbg.declare(metadata i8*** %20, metadata !3288, metadata !DIExpression()), !dbg !3284
  %21 = call i32* @__errno_location() #15, !dbg !3285
  store i32 95, i32* %21, align 4, !dbg !3286
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @parse_user_spec(i8*, i32*, i32*, i8**, i8**) #4 !dbg !3291 {
  %6 = alloca i8*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i8**, align 8
  %10 = alloca i8**, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  store i8* %0, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !3294, metadata !DIExpression()), !dbg !3295
  store i32* %1, i32** %7, align 8
  call void @llvm.dbg.declare(metadata i32** %7, metadata !3296, metadata !DIExpression()), !dbg !3297
  store i32* %2, i32** %8, align 8
  call void @llvm.dbg.declare(metadata i32** %8, metadata !3298, metadata !DIExpression()), !dbg !3299
  store i8** %3, i8*** %9, align 8
  call void @llvm.dbg.declare(metadata i8*** %9, metadata !3300, metadata !DIExpression()), !dbg !3301
  store i8** %4, i8*** %10, align 8
  call void @llvm.dbg.declare(metadata i8*** %10, metadata !3302, metadata !DIExpression()), !dbg !3303
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3304, metadata !DIExpression()), !dbg !3305
  %14 = load i32*, i32** %8, align 8, !dbg !3306
  %15 = icmp ne i32* %14, null, !dbg !3306
  br i1 %15, label %16, label %19, !dbg !3306

16:                                               ; preds = %5
  %17 = load i8*, i8** %6, align 8, !dbg !3307
  %18 = call i8* @strchr(i8* %17, i32 58) #13, !dbg !3308
  br label %36, !dbg !3306

19:                                               ; preds = %5
  %20 = load i32, i32* @x.53
  %21 = load i32, i32* @y.54
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %19, %originalBBalteredBB
  %28 = load i32, i32* @x.53
  %29 = load i32, i32* @y.54
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %36, !dbg !3306

36:                                               ; preds = %originalBBpart2, %16
  %37 = phi i8* [ %18, %16 ], [ null, %originalBBpart2 ], !dbg !3306
  %38 = load i32, i32* @x.53
  %39 = load i32, i32* @y.54
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %36, %originalBB1alteredBB
  store i8* %37, i8** %11, align 8, !dbg !3305
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3309, metadata !DIExpression()), !dbg !3310
  %46 = load i8*, i8** %6, align 8, !dbg !3311
  %47 = load i8*, i8** %11, align 8, !dbg !3312
  %48 = load i32*, i32** %7, align 8, !dbg !3313
  %49 = load i32*, i32** %8, align 8, !dbg !3314
  %50 = load i8**, i8*** %9, align 8, !dbg !3315
  %51 = load i8**, i8*** %10, align 8, !dbg !3316
  %52 = call i8* @parse_with_separator(i8* %46, i8* %47, i32* %48, i32* %49, i8** %50, i8** %51), !dbg !3317
  store i8* %52, i8** %12, align 8, !dbg !3310
  %53 = load i32*, i32** %8, align 8, !dbg !3318
  %54 = icmp ne i32* %53, null, !dbg !3318
  %55 = load i32, i32* @x.53
  %56 = load i32, i32* @y.54
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %54, label %63, label %149, !dbg !3320

63:                                               ; preds = %originalBBpart24
  %64 = load i32, i32* @x.53
  %65 = load i32, i32* @y.54
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %63, %originalBB6alteredBB
  %72 = load i8*, i8** %11, align 8, !dbg !3321
  %73 = icmp ne i8* %72, null, !dbg !3321
  %74 = load i32, i32* @x.53
  %75 = load i32, i32* @y.54
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %73, label %149, label %82, !dbg !3322

82:                                               ; preds = %originalBBpart28
  %83 = load i32, i32* @x.53
  %84 = load i32, i32* @y.54
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %82, %originalBB10alteredBB
  %91 = load i8*, i8** %12, align 8, !dbg !3323
  %92 = icmp ne i8* %91, null, !dbg !3323
  %93 = load i32, i32* @x.53
  %94 = load i32, i32* @y.54
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %92, label %101, label %149, !dbg !3324

101:                                              ; preds = %originalBBpart212
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3325, metadata !DIExpression()), !dbg !3327
  %102 = load i32, i32* @x.53
  %103 = load i32, i32* @y.54
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %101, %originalBB14alteredBB
  %110 = load i8*, i8** %6, align 8, !dbg !3328
  %111 = call i8* @strchr(i8* %110, i32 46) #13, !dbg !3329
  store i8* %111, i8** %13, align 8, !dbg !3327
  %112 = load i8*, i8** %13, align 8, !dbg !3330
  %113 = icmp ne i8* %112, null, !dbg !3330
  %114 = load i32, i32* @x.53
  %115 = load i32, i32* @y.54
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %113, label %122, label %132, !dbg !3332

122:                                              ; preds = %originalBBpart216
  %123 = load i8*, i8** %6, align 8, !dbg !3333
  %124 = load i8*, i8** %13, align 8, !dbg !3334
  %125 = load i32*, i32** %7, align 8, !dbg !3335
  %126 = load i32*, i32** %8, align 8, !dbg !3336
  %127 = load i8**, i8*** %9, align 8, !dbg !3337
  %128 = load i8**, i8*** %10, align 8, !dbg !3338
  %129 = call i8* @parse_with_separator(i8* %123, i8* %124, i32* %125, i32* %126, i8** %127, i8** %128), !dbg !3339
  %130 = icmp ne i8* %129, null, !dbg !3339
  br i1 %130, label %132, label %131, !dbg !3340

131:                                              ; preds = %122
  store i8* null, i8** %12, align 8, !dbg !3341
  br label %132, !dbg !3342

132:                                              ; preds = %131, %122, %originalBBpart216
  %133 = load i32, i32* @x.53
  %134 = load i32, i32* @y.54
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %132, %originalBB18alteredBB
  %141 = load i32, i32* @x.53
  %142 = load i32, i32* @y.54
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %149, !dbg !3343

149:                                              ; preds = %originalBBpart220, %originalBBpart212, %originalBBpart28, %originalBBpart24
  %150 = load i8*, i8** %12, align 8, !dbg !3344
  ret i8* %150, !dbg !3345

originalBBalteredBB:                              ; preds = %originalBB, %19
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %36
  store i8* %37, i8** %11, align 8, !dbg !3305
  call void @llvm.dbg.declare(metadata !4, metadata !3346, metadata !DIExpression()), !dbg !3310
  %151 = load i8*, i8** %6, align 8, !dbg !3311
  %152 = load i8*, i8** %11, align 8, !dbg !3312
  %153 = load i32*, i32** %7, align 8, !dbg !3313
  %154 = load i32*, i32** %8, align 8, !dbg !3314
  %155 = load i8**, i8*** %9, align 8, !dbg !3315
  %156 = load i8**, i8*** %10, align 8, !dbg !3316
  %157 = call i8* @parse_with_separator(i8* %151, i8* %152, i32* %153, i32* %154, i8** %155, i8** %156), !dbg !3317
  store i8* %157, i8** %12, align 8, !dbg !3310
  %158 = load i32*, i32** %8, align 8, !dbg !3318
  %159 = icmp ne i32* %158, null, !dbg !3318
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %63
  %160 = load i8*, i8** %11, align 8, !dbg !3321
  %161 = icmp ne i8* %160, null, !dbg !3321
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %82
  %162 = load i8*, i8** %12, align 8, !dbg !3323
  %163 = icmp ne i8* %162, null, !dbg !3323
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %101
  %164 = load i8*, i8** %6, align 8, !dbg !3328
  %165 = call i8* @strchr(i8* %164, i32 46) #13, !dbg !3329
  store i8* %165, i8** %13, align 8, !dbg !3327
  %166 = load i8*, i8** %13, align 8, !dbg !3330
  %167 = icmp ne i8* %166, null, !dbg !3330
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %132
  br label %originalBB18
}

; Function Attrs: nounwind readonly
declare dso_local i8* @strchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @parse_with_separator(i8*, i8*, i32*, i32*, i8**, i8**) #4 !dbg !178 {
  %7 = load i32, i32* @x.55
  %8 = load i32, i32* @y.56
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %6, %originalBBalteredBB
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i32*, align 8
  %18 = alloca i32*, align 8
  %19 = alloca i8**, align 8
  %20 = alloca i8**, align 8
  %21 = alloca i8*, align 8
  %22 = alloca %struct.passwd*, align 8
  %23 = alloca %struct.group*, align 8
  %24 = alloca i8*, align 8
  %25 = alloca i8*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i64, align 8
  %30 = alloca i8, align 1
  %31 = alloca i64, align 8
  %32 = alloca [21 x i8], align 16
  %33 = alloca i64, align 8
  store i8* %0, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3357, metadata !DIExpression()), !dbg !3358
  store i8* %1, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3359, metadata !DIExpression()), !dbg !3360
  store i32* %2, i32** %17, align 8
  call void @llvm.dbg.declare(metadata i32** %17, metadata !3361, metadata !DIExpression()), !dbg !3362
  store i32* %3, i32** %18, align 8
  call void @llvm.dbg.declare(metadata i32** %18, metadata !3363, metadata !DIExpression()), !dbg !3364
  store i8** %4, i8*** %19, align 8
  call void @llvm.dbg.declare(metadata i8*** %19, metadata !3365, metadata !DIExpression()), !dbg !3366
  store i8** %5, i8*** %20, align 8
  call void @llvm.dbg.declare(metadata i8*** %20, metadata !3367, metadata !DIExpression()), !dbg !3368
  call void @llvm.dbg.declare(metadata i8** %21, metadata !3369, metadata !DIExpression()), !dbg !3370
  call void @llvm.dbg.declare(metadata %struct.passwd** %22, metadata !3371, metadata !DIExpression()), !dbg !3382
  call void @llvm.dbg.declare(metadata %struct.group** %23, metadata !3383, metadata !DIExpression()), !dbg !3391
  call void @llvm.dbg.declare(metadata i8** %24, metadata !3392, metadata !DIExpression()), !dbg !3393
  call void @llvm.dbg.declare(metadata i8** %25, metadata !3394, metadata !DIExpression()), !dbg !3395
  call void @llvm.dbg.declare(metadata i8** %26, metadata !3396, metadata !DIExpression()), !dbg !3397
  store i8* null, i8** %26, align 8, !dbg !3397
  call void @llvm.dbg.declare(metadata i32* %27, metadata !3398, metadata !DIExpression()), !dbg !3399
  %34 = load i32*, i32** %17, align 8, !dbg !3400
  %35 = load i32, i32* %34, align 4, !dbg !3401
  store i32 %35, i32* %27, align 4, !dbg !3399
  call void @llvm.dbg.declare(metadata i32* %28, metadata !3402, metadata !DIExpression()), !dbg !3403
  %36 = load i32*, i32** %18, align 8, !dbg !3404
  %37 = icmp ne i32* %36, null, !dbg !3404
  %38 = load i32, i32* @x.55
  %39 = load i32, i32* @y.56
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %37, label %46, label %65, !dbg !3404

46:                                               ; preds = %originalBBpart2
  %47 = load i32, i32* @x.55
  %48 = load i32, i32* @y.56
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %46, %originalBB1alteredBB
  %55 = load i32*, i32** %18, align 8, !dbg !3405
  %56 = load i32, i32* %55, align 4, !dbg !3406
  %57 = load i32, i32* @x.55
  %58 = load i32, i32* @y.56
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %82, !dbg !3404

65:                                               ; preds = %originalBBpart2
  %66 = load i32, i32* @x.55
  %67 = load i32, i32* @y.56
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %65, %originalBB6alteredBB
  %74 = load i32, i32* @x.55
  %75 = load i32, i32* @y.56
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %82, !dbg !3404

82:                                               ; preds = %originalBBpart28, %originalBBpart24
  %83 = phi i32 [ %56, %originalBBpart24 ], [ -1, %originalBBpart28 ], !dbg !3404
  store i32 %83, i32* %28, align 4, !dbg !3403
  store i8* null, i8** %21, align 8, !dbg !3407
  %84 = load i8**, i8*** %19, align 8, !dbg !3408
  %85 = icmp ne i8** %84, null, !dbg !3408
  br i1 %85, label %86, label %104, !dbg !3410

86:                                               ; preds = %82
  %87 = load i32, i32* @x.55
  %88 = load i32, i32* @y.56
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %86, %originalBB10alteredBB
  %95 = load i8**, i8*** %19, align 8, !dbg !3411
  store i8* null, i8** %95, align 8, !dbg !3412
  %96 = load i32, i32* @x.55
  %97 = load i32, i32* @y.56
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %104, !dbg !3413

104:                                              ; preds = %originalBBpart212, %82
  %105 = load i32, i32* @x.55
  %106 = load i32, i32* @y.56
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %104, %originalBB14alteredBB
  %113 = load i8**, i8*** %20, align 8, !dbg !3414
  %114 = icmp ne i8** %113, null, !dbg !3414
  %115 = load i32, i32* @x.55
  %116 = load i32, i32* @y.56
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %114, label %123, label %125, !dbg !3416

123:                                              ; preds = %originalBBpart216
  %124 = load i8**, i8*** %20, align 8, !dbg !3417
  store i8* null, i8** %124, align 8, !dbg !3418
  br label %125, !dbg !3419

125:                                              ; preds = %123, %originalBBpart216
  %126 = load i32, i32* @x.55
  %127 = load i32, i32* @y.56
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %125, %originalBB18alteredBB
  store i8* null, i8** %24, align 8, !dbg !3420
  %134 = load i8*, i8** %16, align 8, !dbg !3421
  %135 = icmp eq i8* %134, null, !dbg !3423
  %136 = load i32, i32* @x.55
  %137 = load i32, i32* @y.56
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %135, label %144, label %200, !dbg !3424

144:                                              ; preds = %originalBBpart220
  %145 = load i32, i32* @x.55
  %146 = load i32, i32* @y.56
  %147 = sub i32 %145, 1
  %148 = mul i32 %145, %147
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %150, %151
  br i1 %152, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %144, %originalBB22alteredBB
  %153 = load i8*, i8** %15, align 8, !dbg !3425
  %154 = load i8, i8* %153, align 1, !dbg !3428
  %155 = icmp ne i8 %154, 0, !dbg !3428
  %156 = load i32, i32* @x.55
  %157 = load i32, i32* @y.56
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %155, label %164, label %183, !dbg !3429

164:                                              ; preds = %originalBBpart224
  %165 = load i32, i32* @x.55
  %166 = load i32, i32* @y.56
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %164, %originalBB26alteredBB
  %173 = load i8*, i8** %15, align 8, !dbg !3430
  %174 = call noalias i8* @xstrdup(i8* %173), !dbg !3431
  store i8* %174, i8** %24, align 8, !dbg !3432
  %175 = load i32, i32* @x.55
  %176 = load i32, i32* @y.56
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %183, !dbg !3433

183:                                              ; preds = %originalBBpart228, %originalBBpart224
  %184 = load i32, i32* @x.55
  %185 = load i32, i32* @y.56
  %186 = sub i32 %184, 1
  %187 = mul i32 %184, %186
  %188 = urem i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %189, %190
  br i1 %191, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %183, %originalBB30alteredBB
  %192 = load i32, i32* @x.55
  %193 = load i32, i32* @y.56
  %194 = sub i32 %192, 1
  %195 = mul i32 %192, %194
  %196 = urem i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %197, %198
  br i1 %199, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %265, !dbg !3434

200:                                              ; preds = %originalBBpart220
  call void @llvm.dbg.declare(metadata i64* %29, metadata !3435, metadata !DIExpression()), !dbg !3437
  %201 = load i32, i32* @x.55
  %202 = load i32, i32* @y.56
  %203 = sub i32 %201, 1
  %204 = mul i32 %201, %203
  %205 = urem i32 %204, 2
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %202, 10
  %208 = or i1 %206, %207
  br i1 %208, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %200, %originalBB34alteredBB
  %209 = load i8*, i8** %16, align 8, !dbg !3438
  %210 = load i8*, i8** %15, align 8, !dbg !3439
  %211 = ptrtoint i8* %209 to i64, !dbg !3440
  %212 = ptrtoint i8* %210 to i64, !dbg !3440
  %213 = sub i64 %211, %212, !dbg !3440
  store i64 %213, i64* %29, align 8, !dbg !3437
  %214 = load i64, i64* %29, align 8, !dbg !3441
  %215 = icmp ne i64 %214, 0, !dbg !3443
  %216 = load i32, i32* @x.55
  %217 = load i32, i32* @y.56
  %218 = sub i32 %216, 1
  %219 = mul i32 %216, %218
  %220 = urem i32 %219, 2
  %221 = icmp eq i32 %220, 0
  %222 = icmp slt i32 %217, 10
  %223 = or i1 %221, %222
  br i1 %223, label %originalBBpart244, label %originalBB34alteredBB

originalBBpart244:                                ; preds = %originalBB34
  br i1 %215, label %224, label %248, !dbg !3444

224:                                              ; preds = %originalBBpart244
  %225 = load i32, i32* @x.55
  %226 = load i32, i32* @y.56
  %227 = sub i32 %225, 1
  %228 = mul i32 %225, %227
  %229 = urem i32 %228, 2
  %230 = icmp eq i32 %229, 0
  %231 = icmp slt i32 %226, 10
  %232 = or i1 %230, %231
  br i1 %232, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %224, %originalBB46alteredBB
  %233 = load i8*, i8** %15, align 8, !dbg !3445
  %234 = load i64, i64* %29, align 8, !dbg !3447
  %235 = add i64 %234, 1, !dbg !3448
  %236 = call i8* @xmemdup(i8* %233, i64 %235), !dbg !3449
  store i8* %236, i8** %24, align 8, !dbg !3450
  %237 = load i8*, i8** %24, align 8, !dbg !3451
  %238 = load i64, i64* %29, align 8, !dbg !3452
  %239 = getelementptr inbounds i8, i8* %237, i64 %238, !dbg !3451
  store i8 0, i8* %239, align 1, !dbg !3453
  %240 = load i32, i32* @x.55
  %241 = load i32, i32* @y.56
  %242 = sub i32 %240, 1
  %243 = mul i32 %240, %242
  %244 = urem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %245, %246
  br i1 %247, label %originalBBpart256, label %originalBB46alteredBB

originalBBpart256:                                ; preds = %originalBB46
  br label %248, !dbg !3454

248:                                              ; preds = %originalBBpart256, %originalBBpart244
  %249 = load i32, i32* @x.55
  %250 = load i32, i32* @y.56
  %251 = sub i32 %249, 1
  %252 = mul i32 %249, %251
  %253 = urem i32 %252, 2
  %254 = icmp eq i32 %253, 0
  %255 = icmp slt i32 %250, 10
  %256 = or i1 %254, %255
  br i1 %256, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %248, %originalBB58alteredBB
  %257 = load i32, i32* @x.55
  %258 = load i32, i32* @y.56
  %259 = sub i32 %257, 1
  %260 = mul i32 %257, %259
  %261 = urem i32 %260, 2
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %262, %263
  br i1 %264, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br label %265

265:                                              ; preds = %originalBBpart260, %originalBBpart232
  %266 = load i32, i32* @x.55
  %267 = load i32, i32* @y.56
  %268 = sub i32 %266, 1
  %269 = mul i32 %266, %268
  %270 = urem i32 %269, 2
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %271, %272
  br i1 %273, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %265, %originalBB62alteredBB
  %274 = load i8*, i8** %16, align 8, !dbg !3455
  %275 = icmp eq i8* %274, null, !dbg !3456
  %276 = load i32, i32* @x.55
  %277 = load i32, i32* @y.56
  %278 = sub i32 %276, 1
  %279 = mul i32 %276, %278
  %280 = urem i32 %279, 2
  %281 = icmp eq i32 %280, 0
  %282 = icmp slt i32 %277, 10
  %283 = or i1 %281, %282
  br i1 %283, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br i1 %275, label %306, label %284, !dbg !3457

284:                                              ; preds = %originalBBpart264
  %285 = load i32, i32* @x.55
  %286 = load i32, i32* @y.56
  %287 = sub i32 %285, 1
  %288 = mul i32 %285, %287
  %289 = urem i32 %288, 2
  %290 = icmp eq i32 %289, 0
  %291 = icmp slt i32 %286, 10
  %292 = or i1 %290, %291
  br i1 %292, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %284, %originalBB66alteredBB
  %293 = load i8*, i8** %16, align 8, !dbg !3458
  %294 = getelementptr inbounds i8, i8* %293, i64 1, !dbg !3459
  %295 = load i8, i8* %294, align 1, !dbg !3460
  %296 = sext i8 %295 to i32, !dbg !3460
  %297 = icmp eq i32 %296, 0, !dbg !3461
  %298 = load i32, i32* @x.55
  %299 = load i32, i32* @y.56
  %300 = sub i32 %298, 1
  %301 = mul i32 %298, %300
  %302 = urem i32 %301, 2
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %303, %304
  br i1 %305, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br i1 %297, label %306, label %323, !dbg !3455

306:                                              ; preds = %originalBBpart268, %originalBBpart264
  %307 = load i32, i32* @x.55
  %308 = load i32, i32* @y.56
  %309 = sub i32 %307, 1
  %310 = mul i32 %307, %309
  %311 = urem i32 %310, 2
  %312 = icmp eq i32 %311, 0
  %313 = icmp slt i32 %308, 10
  %314 = or i1 %312, %313
  br i1 %314, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %306, %originalBB70alteredBB
  %315 = load i32, i32* @x.55
  %316 = load i32, i32* @y.56
  %317 = sub i32 %315, 1
  %318 = mul i32 %315, %317
  %319 = urem i32 %318, 2
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %320, %321
  br i1 %322, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br label %342, !dbg !3455

323:                                              ; preds = %originalBBpart268
  %324 = load i32, i32* @x.55
  %325 = load i32, i32* @y.56
  %326 = sub i32 %324, 1
  %327 = mul i32 %324, %326
  %328 = urem i32 %327, 2
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %329, %330
  br i1 %331, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %323, %originalBB74alteredBB
  %332 = load i8*, i8** %16, align 8, !dbg !3462
  %333 = getelementptr inbounds i8, i8* %332, i64 1, !dbg !3463
  %334 = load i32, i32* @x.55
  %335 = load i32, i32* @y.56
  %336 = sub i32 %334, 1
  %337 = mul i32 %334, %336
  %338 = urem i32 %337, 2
  %339 = icmp eq i32 %338, 0
  %340 = icmp slt i32 %335, 10
  %341 = or i1 %339, %340
  br i1 %341, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br label %342, !dbg !3455

342:                                              ; preds = %originalBBpart276, %originalBBpart272
  %343 = phi i8* [ null, %originalBBpart272 ], [ %333, %originalBBpart276 ], !dbg !3455
  store i8* %343, i8** %25, align 8, !dbg !3464
  %344 = load i8*, i8** %24, align 8, !dbg !3465
  %345 = icmp ne i8* %344, null, !dbg !3467
  br i1 %345, label %346, label %883, !dbg !3468

346:                                              ; preds = %342
  %347 = load i32, i32* @x.55
  %348 = load i32, i32* @y.56
  %349 = sub i32 %347, 1
  %350 = mul i32 %347, %349
  %351 = urem i32 %350, 2
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %352, %353
  br i1 %354, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %346, %originalBB78alteredBB
  %355 = load i8*, i8** %24, align 8, !dbg !3469
  %356 = load i8, i8* %355, align 1, !dbg !3471
  %357 = sext i8 %356 to i32, !dbg !3471
  %358 = load i32, i32* @x.55
  %359 = load i32, i32* @y.56
  %360 = sub i32 %358, 1
  %361 = mul i32 %358, %360
  %362 = urem i32 %361, 2
  %363 = icmp eq i32 %362, 0
  %364 = icmp slt i32 %359, 10
  %365 = or i1 %363, %364
  br i1 %365, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br label %366, !dbg !3472

366:                                              ; preds = %originalBBpart280
  %367 = load i32, i32* @x.55
  %368 = load i32, i32* @y.56
  %369 = sub i32 %367, 1
  %370 = mul i32 %367, %369
  %371 = urem i32 %370, 2
  %372 = icmp eq i32 %371, 0
  %373 = icmp slt i32 %368, 10
  %374 = or i1 %372, %373
  br i1 %374, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %366, %originalBB82alteredBB
  %collatzVar = alloca i32
  %375 = load i32, i32* @x.55
  %376 = load i32, i32* @y.56
  %377 = sub i32 %375, 1
  %378 = mul i32 %375, %377
  %379 = urem i32 %378, 2
  %380 = icmp eq i32 %379, 0
  %381 = icmp slt i32 %376, 10
  %382 = or i1 %380, %381
  br i1 %382, label %originalBBpart284, label %originalBB82alteredBB

originalBBpart284:                                ; preds = %originalBB82
  br label %383

383:                                              ; preds = %originalBBpart284
  %384 = load i32, i32* @x.55
  %385 = load i32, i32* @y.56
  %386 = sub i32 %384, 1
  %387 = mul i32 %384, %386
  %388 = urem i32 %387, 2
  %389 = icmp eq i32 %388, 0
  %390 = icmp slt i32 %385, 10
  %391 = or i1 %389, %390
  br i1 %391, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %383, %originalBB86alteredBB
  %392 = load i32, i32* @inVal0
  %393 = icmp sgt i32 %392, 1
  %394 = load i32, i32* @x.55
  %395 = load i32, i32* @y.56
  %396 = sub i32 %394, 1
  %397 = mul i32 %394, %396
  %398 = urem i32 %397, 2
  %399 = icmp eq i32 %398, 0
  %400 = icmp slt i32 %395, 10
  %401 = or i1 %399, %400
  br i1 %401, label %originalBBpart288, label %originalBB86alteredBB

originalBBpart288:                                ; preds = %originalBB86
  br i1 %393, label %419, label %402

402:                                              ; preds = %originalBBpart288
  %403 = load i32, i32* @x.55
  %404 = load i32, i32* @y.56
  %405 = sub i32 %403, 1
  %406 = mul i32 %403, %405
  %407 = urem i32 %406, 2
  %408 = icmp eq i32 %407, 0
  %409 = icmp slt i32 %404, 10
  %410 = or i1 %408, %409
  br i1 %410, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %402, %originalBB90alteredBB
  store i32 82, i32* %collatzVar
  %411 = load i32, i32* @x.55
  %412 = load i32, i32* @y.56
  %413 = sub i32 %411, 1
  %414 = mul i32 %411, %413
  %415 = urem i32 %414, 2
  %416 = icmp eq i32 %415, 0
  %417 = icmp slt i32 %412, 10
  %418 = or i1 %416, %417
  br i1 %418, label %originalBBpart292, label %originalBB90alteredBB

originalBBpart292:                                ; preds = %originalBB90
  br label %419

419:                                              ; preds = %originalBBpart292, %originalBBpart288
  %420 = load i32, i32* @x.55
  %421 = load i32, i32* @y.56
  %422 = sub i32 %420, 1
  %423 = mul i32 %420, %422
  %424 = urem i32 %423, 2
  %425 = icmp eq i32 %424, 0
  %426 = icmp slt i32 %421, 10
  %427 = or i1 %425, %426
  br i1 %427, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %419, %originalBB94alteredBB
  %428 = load i8**, i8*** @inVal1
  %429 = getelementptr inbounds i8*, i8** %428, i64 1
  %430 = load i8*, i8** %429
  %controle = call i32 @controle(i8* %430, i32 43)
  store i32 %controle, i32* %collatzVar
  %431 = load i32, i32* @x.55
  %432 = load i32, i32* @y.56
  %433 = sub i32 %431, 1
  %434 = mul i32 %431, %433
  %435 = urem i32 %434, 2
  %436 = icmp eq i32 %435, 0
  %437 = icmp slt i32 %432, 10
  %438 = or i1 %436, %437
  br i1 %438, label %originalBBpart296, label %originalBB94alteredBB

originalBBpart296:                                ; preds = %originalBB94
  br label %439

439:                                              ; preds = %originalBBpart2148, %originalBBpart2142, %originalBBpart296
  %440 = load i32, i32* @x.55
  %441 = load i32, i32* @y.56
  %442 = sub i32 %440, 1
  %443 = mul i32 %440, %442
  %444 = urem i32 %443, 2
  %445 = icmp eq i32 %444, 0
  %446 = icmp slt i32 %441, 10
  %447 = or i1 %445, %446
  br i1 %447, label %originalBB98, label %originalBB98alteredBB

originalBB98:                                     ; preds = %439, %originalBB98alteredBB
  %448 = load i32, i32* %collatzVar
  %449 = icmp sgt i32 %448, 1
  %450 = load i32, i32* @x.55
  %451 = load i32, i32* @y.56
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBBpart2100, label %originalBB98alteredBB

originalBBpart2100:                               ; preds = %originalBB98
  br i1 %449, label %458, label %558

458:                                              ; preds = %originalBBpart2100
  %459 = load i32, i32* @x.55
  %460 = load i32, i32* @y.56
  %461 = sub i32 %459, 1
  %462 = mul i32 %459, %461
  %463 = urem i32 %462, 2
  %464 = icmp eq i32 %463, 0
  %465 = icmp slt i32 %460, 10
  %466 = or i1 %464, %465
  br i1 %466, label %originalBB102, label %originalBB102alteredBB

originalBB102:                                    ; preds = %458, %originalBB102alteredBB
  %467 = load i32, i32* %collatzVar
  %468 = srem i32 %467, 2
  %469 = icmp eq i32 %468, 0
  %470 = load i32, i32* @x.55
  %471 = load i32, i32* @y.56
  %472 = sub i32 %470, 1
  %473 = mul i32 %470, %472
  %474 = urem i32 %473, 2
  %475 = icmp eq i32 %474, 0
  %476 = icmp slt i32 %471, 10
  %477 = or i1 %475, %476
  br i1 %477, label %originalBBpart2106, label %originalBB102alteredBB

originalBBpart2106:                               ; preds = %originalBB102
  br i1 %469, label %478, label %497

478:                                              ; preds = %originalBBpart2106
  %479 = load i32, i32* @x.55
  %480 = load i32, i32* @y.56
  %481 = sub i32 %479, 1
  %482 = mul i32 %479, %481
  %483 = urem i32 %482, 2
  %484 = icmp eq i32 %483, 0
  %485 = icmp slt i32 %480, 10
  %486 = or i1 %484, %485
  br i1 %486, label %originalBB108, label %originalBB108alteredBB

originalBB108:                                    ; preds = %478, %originalBB108alteredBB
  %487 = load i32, i32* %collatzVar
  %488 = sdiv i32 %487, 2
  store i32 %488, i32* %collatzVar
  %489 = load i32, i32* @x.55
  %490 = load i32, i32* @y.56
  %491 = sub i32 %489, 1
  %492 = mul i32 %489, %491
  %493 = urem i32 %492, 2
  %494 = icmp eq i32 %493, 0
  %495 = icmp slt i32 %490, 10
  %496 = or i1 %494, %495
  br i1 %496, label %originalBBpart2118, label %originalBB108alteredBB

originalBBpart2118:                               ; preds = %originalBB108
  br label %517

497:                                              ; preds = %originalBBpart2106
  %498 = load i32, i32* @x.55
  %499 = load i32, i32* @y.56
  %500 = sub i32 %498, 1
  %501 = mul i32 %498, %500
  %502 = urem i32 %501, 2
  %503 = icmp eq i32 %502, 0
  %504 = icmp slt i32 %499, 10
  %505 = or i1 %503, %504
  br i1 %505, label %originalBB120, label %originalBB120alteredBB

originalBB120:                                    ; preds = %497, %originalBB120alteredBB
  %506 = load i32, i32* %collatzVar
  %507 = mul i32 %506, 3
  %508 = add i32 %507, 1
  store i32 %508, i32* %collatzVar
  %509 = load i32, i32* @x.55
  %510 = load i32, i32* @y.56
  %511 = sub i32 %509, 1
  %512 = mul i32 %509, %511
  %513 = urem i32 %512, 2
  %514 = icmp eq i32 %513, 0
  %515 = icmp slt i32 %510, 10
  %516 = or i1 %514, %515
  br i1 %516, label %originalBBpart2126, label %originalBB120alteredBB

originalBBpart2126:                               ; preds = %originalBB120
  br label %517

517:                                              ; preds = %originalBBpart2126, %originalBBpart2118
  %518 = load i32, i32* @x.55
  %519 = load i32, i32* @y.56
  %520 = sub i32 %518, 1
  %521 = mul i32 %518, %520
  %522 = urem i32 %521, 2
  %523 = icmp eq i32 %522, 0
  %524 = icmp slt i32 %519, 10
  %525 = or i1 %523, %524
  br i1 %525, label %originalBB128, label %originalBB128alteredBB

originalBB128:                                    ; preds = %517, %originalBB128alteredBB
  %526 = load i32, i32* %collatzVar
  %527 = sub i32 %357, %526
  %528 = icmp sgt i32 %527, 41
  %529 = load i32, i32* @x.55
  %530 = load i32, i32* @y.56
  %531 = sub i32 %529, 1
  %532 = mul i32 %529, %531
  %533 = urem i32 %532, 2
  %534 = icmp eq i32 %533, 0
  %535 = icmp slt i32 %530, 10
  %536 = or i1 %534, %535
  br i1 %536, label %originalBBpart2142, label %originalBB128alteredBB

originalBBpart2142:                               ; preds = %originalBB128
  br i1 %528, label %537, label %439

537:                                              ; preds = %originalBBpart2142
  %538 = load i32, i32* @x.55
  %539 = load i32, i32* @y.56
  %540 = sub i32 %538, 1
  %541 = mul i32 %538, %540
  %542 = urem i32 %541, 2
  %543 = icmp eq i32 %542, 0
  %544 = icmp slt i32 %539, 10
  %545 = or i1 %543, %544
  br i1 %545, label %originalBB144, label %originalBB144alteredBB

originalBB144:                                    ; preds = %537, %originalBB144alteredBB
  %546 = load i32, i32* %collatzVar
  %547 = add i32 %357, %546
  %548 = icmp slt i32 %547, 45
  %549 = load i32, i32* @x.55
  %550 = load i32, i32* @y.56
  %551 = sub i32 %549, 1
  %552 = mul i32 %549, %551
  %553 = urem i32 %552, 2
  %554 = icmp eq i32 %553, 0
  %555 = icmp slt i32 %550, 10
  %556 = or i1 %554, %555
  br i1 %556, label %originalBBpart2148, label %originalBB144alteredBB

originalBBpart2148:                               ; preds = %originalBB144
  br i1 %548, label %557, label %439

557:                                              ; preds = %originalBBpart2148
  br label %577, !dbg !3471

558:                                              ; preds = %originalBBpart2100
  %559 = load i32, i32* @x.55
  %560 = load i32, i32* @y.56
  %561 = sub i32 %559, 1
  %562 = mul i32 %559, %561
  %563 = urem i32 %562, 2
  %564 = icmp eq i32 %563, 0
  %565 = icmp slt i32 %560, 10
  %566 = or i1 %564, %565
  br i1 %566, label %originalBB150, label %originalBB150alteredBB

originalBB150:                                    ; preds = %558, %originalBB150alteredBB
  %567 = load i8*, i8** %24, align 8, !dbg !3473
  %568 = call %struct.passwd* @getpwnam(i8* %567), !dbg !3474
  %569 = load i32, i32* @x.55
  %570 = load i32, i32* @y.56
  %571 = sub i32 %569, 1
  %572 = mul i32 %569, %571
  %573 = urem i32 %572, 2
  %574 = icmp eq i32 %573, 0
  %575 = icmp slt i32 %570, 10
  %576 = or i1 %574, %575
  br i1 %576, label %originalBBpart2152, label %originalBB150alteredBB

originalBBpart2152:                               ; preds = %originalBB150
  br label %577, !dbg !3471

577:                                              ; preds = %originalBBpart2152, %557
  %578 = phi %struct.passwd* [ null, %557 ], [ %568, %originalBBpart2152 ], !dbg !3471
  %579 = load i32, i32* @x.55
  %580 = load i32, i32* @y.56
  %581 = sub i32 %579, 1
  %582 = mul i32 %579, %581
  %583 = urem i32 %582, 2
  %584 = icmp eq i32 %583, 0
  %585 = icmp slt i32 %580, 10
  %586 = or i1 %584, %585
  br i1 %586, label %originalBB154, label %originalBB154alteredBB

originalBB154:                                    ; preds = %577, %originalBB154alteredBB
  store %struct.passwd* %578, %struct.passwd** %22, align 8, !dbg !3475
  %587 = load %struct.passwd*, %struct.passwd** %22, align 8, !dbg !3476
  %588 = icmp eq %struct.passwd* %587, null, !dbg !3478
  %589 = load i32, i32* @x.55
  %590 = load i32, i32* @y.56
  %591 = sub i32 %589, 1
  %592 = mul i32 %589, %591
  %593 = urem i32 %592, 2
  %594 = icmp eq i32 %593, 0
  %595 = icmp slt i32 %590, 10
  %596 = or i1 %594, %595
  br i1 %596, label %originalBBpart2156, label %originalBB154alteredBB

originalBBpart2156:                               ; preds = %originalBB154
  br i1 %588, label %597, label %756, !dbg !3479

597:                                              ; preds = %originalBBpart2156
  call void @llvm.dbg.declare(metadata i8* %30, metadata !3480, metadata !DIExpression()), !dbg !3482
  %598 = load i32, i32* @x.55
  %599 = load i32, i32* @y.56
  %600 = sub i32 %598, 1
  %601 = mul i32 %598, %600
  %602 = urem i32 %601, 2
  %603 = icmp eq i32 %602, 0
  %604 = icmp slt i32 %599, 10
  %605 = or i1 %603, %604
  br i1 %605, label %originalBB158, label %originalBB158alteredBB

originalBB158:                                    ; preds = %597, %originalBB158alteredBB
  %606 = load i8*, i8** %16, align 8, !dbg !3483
  %607 = icmp ne i8* %606, null, !dbg !3484
  %608 = load i32, i32* @x.55
  %609 = load i32, i32* @y.56
  %610 = sub i32 %608, 1
  %611 = mul i32 %608, %610
  %612 = urem i32 %611, 2
  %613 = icmp eq i32 %612, 0
  %614 = icmp slt i32 %609, 10
  %615 = or i1 %613, %614
  br i1 %615, label %originalBBpart2160, label %originalBB158alteredBB

originalBBpart2160:                               ; preds = %originalBB158
  br i1 %607, label %616, label %619, !dbg !3485

616:                                              ; preds = %originalBBpart2160
  %617 = load i8*, i8** %25, align 8, !dbg !3486
  %618 = icmp eq i8* %617, null, !dbg !3487
  br label %619

619:                                              ; preds = %616, %originalBBpart2160
  %620 = phi i1 [ false, %originalBBpart2160 ], [ %618, %616 ], !dbg !3488
  %621 = load i32, i32* @x.55
  %622 = load i32, i32* @y.56
  %623 = sub i32 %621, 1
  %624 = mul i32 %621, %623
  %625 = urem i32 %624, 2
  %626 = icmp eq i32 %625, 0
  %627 = icmp slt i32 %622, 10
  %628 = or i1 %626, %627
  br i1 %628, label %originalBB162, label %originalBB162alteredBB

originalBB162:                                    ; preds = %619, %originalBB162alteredBB
  %629 = zext i1 %620 to i8, !dbg !3482
  store i8 %629, i8* %30, align 1, !dbg !3482
  %630 = load i8, i8* %30, align 1, !dbg !3489
  %631 = trunc i8 %630 to i1, !dbg !3489
  %632 = load i32, i32* @x.55
  %633 = load i32, i32* @y.56
  %634 = sub i32 %632, 1
  %635 = mul i32 %632, %634
  %636 = urem i32 %635, 2
  %637 = icmp eq i32 %636, 0
  %638 = icmp slt i32 %633, 10
  %639 = or i1 %637, %638
  br i1 %639, label %originalBBpart2164, label %originalBB162alteredBB

originalBBpart2164:                               ; preds = %originalBB162
  br i1 %631, label %640, label %658, !dbg !3491

640:                                              ; preds = %originalBBpart2164
  %641 = load i32, i32* @x.55
  %642 = load i32, i32* @y.56
  %643 = sub i32 %641, 1
  %644 = mul i32 %641, %643
  %645 = urem i32 %644, 2
  %646 = icmp eq i32 %645, 0
  %647 = icmp slt i32 %642, 10
  %648 = or i1 %646, %647
  br i1 %648, label %originalBB166, label %originalBB166alteredBB

originalBB166:                                    ; preds = %640, %originalBB166alteredBB
  %649 = load i8*, i8** @parse_with_separator.E_bad_spec, align 8, !dbg !3492
  store i8* %649, i8** %21, align 8, !dbg !3494
  %650 = load i32, i32* @x.55
  %651 = load i32, i32* @y.56
  %652 = sub i32 %650, 1
  %653 = mul i32 %650, %652
  %654 = urem i32 %653, 2
  %655 = icmp eq i32 %654, 0
  %656 = icmp slt i32 %651, 10
  %657 = or i1 %655, %656
  br i1 %657, label %originalBBpart2168, label %originalBB166alteredBB

originalBBpart2168:                               ; preds = %originalBB166
  br label %755, !dbg !3495

658:                                              ; preds = %originalBBpart2164
  call void @llvm.dbg.declare(metadata i64* %31, metadata !3496, metadata !DIExpression()), !dbg !3498
  %659 = load i32, i32* @x.55
  %660 = load i32, i32* @y.56
  %661 = sub i32 %659, 1
  %662 = mul i32 %659, %661
  %663 = urem i32 %662, 2
  %664 = icmp eq i32 %663, 0
  %665 = icmp slt i32 %660, 10
  %666 = or i1 %664, %665
  br i1 %666, label %originalBB170, label %originalBB170alteredBB

originalBB170:                                    ; preds = %658, %originalBB170alteredBB
  %667 = load i8*, i8** %24, align 8, !dbg !3499
  %668 = call i32 @xstrtoul(i8* %667, i8** null, i32 10, i64* %31, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3.102, i64 0, i64 0)), !dbg !3501
  %669 = icmp eq i32 %668, 0, !dbg !3502
  %670 = load i32, i32* @x.55
  %671 = load i32, i32* @y.56
  %672 = sub i32 %670, 1
  %673 = mul i32 %670, %672
  %674 = urem i32 %673, 2
  %675 = icmp eq i32 %674, 0
  %676 = icmp slt i32 %671, 10
  %677 = or i1 %675, %676
  br i1 %677, label %originalBBpart2172, label %originalBB170alteredBB

originalBBpart2172:                               ; preds = %originalBB170
  br i1 %669, label %678, label %720, !dbg !3503

678:                                              ; preds = %originalBBpart2172
  %679 = load i64, i64* %31, align 8, !dbg !3504
  %680 = icmp ule i64 %679, 4294967295, !dbg !3505
  br i1 %680, label %681, label %720, !dbg !3506

681:                                              ; preds = %678
  %682 = load i32, i32* @x.55
  %683 = load i32, i32* @y.56
  %684 = sub i32 %682, 1
  %685 = mul i32 %682, %684
  %686 = urem i32 %685, 2
  %687 = icmp eq i32 %686, 0
  %688 = icmp slt i32 %683, 10
  %689 = or i1 %687, %688
  br i1 %689, label %originalBB174, label %originalBB174alteredBB

originalBB174:                                    ; preds = %681, %originalBB174alteredBB
  %690 = load i64, i64* %31, align 8, !dbg !3507
  %691 = trunc i64 %690 to i32, !dbg !3508
  %692 = icmp ne i32 %691, -1, !dbg !3509
  %693 = load i32, i32* @x.55
  %694 = load i32, i32* @y.56
  %695 = sub i32 %693, 1
  %696 = mul i32 %693, %695
  %697 = urem i32 %696, 2
  %698 = icmp eq i32 %697, 0
  %699 = icmp slt i32 %694, 10
  %700 = or i1 %698, %699
  br i1 %700, label %originalBBpart2176, label %originalBB174alteredBB

originalBBpart2176:                               ; preds = %originalBB174
  br i1 %692, label %701, label %720, !dbg !3510

701:                                              ; preds = %originalBBpart2176
  %702 = load i32, i32* @x.55
  %703 = load i32, i32* @y.56
  %704 = sub i32 %702, 1
  %705 = mul i32 %702, %704
  %706 = urem i32 %705, 2
  %707 = icmp eq i32 %706, 0
  %708 = icmp slt i32 %703, 10
  %709 = or i1 %707, %708
  br i1 %709, label %originalBB178, label %originalBB178alteredBB

originalBB178:                                    ; preds = %701, %originalBB178alteredBB
  %710 = load i64, i64* %31, align 8, !dbg !3511
  %711 = trunc i64 %710 to i32, !dbg !3511
  store i32 %711, i32* %27, align 4, !dbg !3512
  %712 = load i32, i32* @x.55
  %713 = load i32, i32* @y.56
  %714 = sub i32 %712, 1
  %715 = mul i32 %712, %714
  %716 = urem i32 %715, 2
  %717 = icmp eq i32 %716, 0
  %718 = icmp slt i32 %713, 10
  %719 = or i1 %717, %718
  br i1 %719, label %originalBBpart2180, label %originalBB178alteredBB

originalBBpart2180:                               ; preds = %originalBB178
  br label %738, !dbg !3513

720:                                              ; preds = %originalBBpart2176, %678, %originalBBpart2172
  %721 = load i32, i32* @x.55
  %722 = load i32, i32* @y.56
  %723 = sub i32 %721, 1
  %724 = mul i32 %721, %723
  %725 = urem i32 %724, 2
  %726 = icmp eq i32 %725, 0
  %727 = icmp slt i32 %722, 10
  %728 = or i1 %726, %727
  br i1 %728, label %originalBB182, label %originalBB182alteredBB

originalBB182:                                    ; preds = %720, %originalBB182alteredBB
  %729 = load i8*, i8** @parse_with_separator.E_invalid_user, align 8, !dbg !3514
  store i8* %729, i8** %21, align 8, !dbg !3515
  %730 = load i32, i32* @x.55
  %731 = load i32, i32* @y.56
  %732 = sub i32 %730, 1
  %733 = mul i32 %730, %732
  %734 = urem i32 %733, 2
  %735 = icmp eq i32 %734, 0
  %736 = icmp slt i32 %731, 10
  %737 = or i1 %735, %736
  br i1 %737, label %originalBBpart2184, label %originalBB182alteredBB

originalBBpart2184:                               ; preds = %originalBB182
  br label %738

738:                                              ; preds = %originalBBpart2184, %originalBBpart2180
  %739 = load i32, i32* @x.55
  %740 = load i32, i32* @y.56
  %741 = sub i32 %739, 1
  %742 = mul i32 %739, %741
  %743 = urem i32 %742, 2
  %744 = icmp eq i32 %743, 0
  %745 = icmp slt i32 %740, 10
  %746 = or i1 %744, %745
  br i1 %746, label %originalBB186, label %originalBB186alteredBB

originalBB186:                                    ; preds = %738, %originalBB186alteredBB
  %747 = load i32, i32* @x.55
  %748 = load i32, i32* @y.56
  %749 = sub i32 %747, 1
  %750 = mul i32 %747, %749
  %751 = urem i32 %750, 2
  %752 = icmp eq i32 %751, 0
  %753 = icmp slt i32 %748, 10
  %754 = or i1 %752, %753
  br i1 %754, label %originalBBpart2188, label %originalBB186alteredBB

originalBBpart2188:                               ; preds = %originalBB186
  br label %755

755:                                              ; preds = %originalBBpart2188, %originalBBpart2168
  br label %866, !dbg !3516

756:                                              ; preds = %originalBBpart2156
  %757 = load i32, i32* @x.55
  %758 = load i32, i32* @y.56
  %759 = sub i32 %757, 1
  %760 = mul i32 %757, %759
  %761 = urem i32 %760, 2
  %762 = icmp eq i32 %761, 0
  %763 = icmp slt i32 %758, 10
  %764 = or i1 %762, %763
  br i1 %764, label %originalBB190, label %originalBB190alteredBB

originalBB190:                                    ; preds = %756, %originalBB190alteredBB
  %765 = load %struct.passwd*, %struct.passwd** %22, align 8, !dbg !3517
  %766 = getelementptr inbounds %struct.passwd, %struct.passwd* %765, i32 0, i32 2, !dbg !3519
  %767 = load i32, i32* %766, align 8, !dbg !3519
  store i32 %767, i32* %27, align 4, !dbg !3520
  %768 = load i8*, i8** %25, align 8, !dbg !3521
  %769 = icmp eq i8* %768, null, !dbg !3523
  %770 = load i32, i32* @x.55
  %771 = load i32, i32* @y.56
  %772 = sub i32 %770, 1
  %773 = mul i32 %770, %772
  %774 = urem i32 %773, 2
  %775 = icmp eq i32 %774, 0
  %776 = icmp slt i32 %771, 10
  %777 = or i1 %775, %776
  br i1 %777, label %originalBBpart2192, label %originalBB190alteredBB

originalBBpart2192:                               ; preds = %originalBB190
  br i1 %769, label %778, label %865, !dbg !3524

778:                                              ; preds = %originalBBpart2192
  %779 = load i32, i32* @x.55
  %780 = load i32, i32* @y.56
  %781 = sub i32 %779, 1
  %782 = mul i32 %779, %781
  %783 = urem i32 %782, 2
  %784 = icmp eq i32 %783, 0
  %785 = icmp slt i32 %780, 10
  %786 = or i1 %784, %785
  br i1 %786, label %originalBB194, label %originalBB194alteredBB

originalBB194:                                    ; preds = %778, %originalBB194alteredBB
  %787 = load i8*, i8** %16, align 8, !dbg !3525
  %788 = icmp ne i8* %787, null, !dbg !3526
  %789 = load i32, i32* @x.55
  %790 = load i32, i32* @y.56
  %791 = sub i32 %789, 1
  %792 = mul i32 %789, %791
  %793 = urem i32 %792, 2
  %794 = icmp eq i32 %793, 0
  %795 = icmp slt i32 %790, 10
  %796 = or i1 %794, %795
  br i1 %796, label %originalBBpart2196, label %originalBB194alteredBB

originalBBpart2196:                               ; preds = %originalBB194
  br i1 %788, label %797, label %865, !dbg !3527

797:                                              ; preds = %originalBBpart2196
  call void @llvm.dbg.declare(metadata [21 x i8]* %32, metadata !3528, metadata !DIExpression()), !dbg !3530
  %798 = load %struct.passwd*, %struct.passwd** %22, align 8, !dbg !3531
  %799 = getelementptr inbounds %struct.passwd, %struct.passwd* %798, i32 0, i32 3, !dbg !3532
  %800 = load i32, i32* %799, align 4, !dbg !3532
  store i32 %800, i32* %28, align 4, !dbg !3533
  %801 = load i32, i32* %28, align 4, !dbg !3534
  %802 = call %struct.group* @getgrgid(i32 %801), !dbg !3535
  store %struct.group* %802, %struct.group** %23, align 8, !dbg !3536
  %803 = load %struct.group*, %struct.group** %23, align 8, !dbg !3537
  %804 = icmp ne %struct.group* %803, null, !dbg !3537
  br i1 %804, label %805, label %825, !dbg !3537

805:                                              ; preds = %797
  %806 = load i32, i32* @x.55
  %807 = load i32, i32* @y.56
  %808 = sub i32 %806, 1
  %809 = mul i32 %806, %808
  %810 = urem i32 %809, 2
  %811 = icmp eq i32 %810, 0
  %812 = icmp slt i32 %807, 10
  %813 = or i1 %811, %812
  br i1 %813, label %originalBB198, label %originalBB198alteredBB

originalBB198:                                    ; preds = %805, %originalBB198alteredBB
  %814 = load %struct.group*, %struct.group** %23, align 8, !dbg !3538
  %815 = getelementptr inbounds %struct.group, %struct.group* %814, i32 0, i32 0, !dbg !3539
  %816 = load i8*, i8** %815, align 8, !dbg !3539
  %817 = load i32, i32* @x.55
  %818 = load i32, i32* @y.56
  %819 = sub i32 %817, 1
  %820 = mul i32 %817, %819
  %821 = urem i32 %820, 2
  %822 = icmp eq i32 %821, 0
  %823 = icmp slt i32 %818, 10
  %824 = or i1 %822, %823
  br i1 %824, label %originalBBpart2200, label %originalBB198alteredBB

originalBBpart2200:                               ; preds = %originalBB198
  br label %846, !dbg !3537

825:                                              ; preds = %797
  %826 = load i32, i32* @x.55
  %827 = load i32, i32* @y.56
  %828 = sub i32 %826, 1
  %829 = mul i32 %826, %828
  %830 = urem i32 %829, 2
  %831 = icmp eq i32 %830, 0
  %832 = icmp slt i32 %827, 10
  %833 = or i1 %831, %832
  br i1 %833, label %originalBB202, label %originalBB202alteredBB

originalBB202:                                    ; preds = %825, %originalBB202alteredBB
  %834 = load i32, i32* %28, align 4, !dbg !3540
  %835 = zext i32 %834 to i64, !dbg !3540
  %836 = getelementptr inbounds [21 x i8], [21 x i8]* %32, i64 0, i64 0, !dbg !3541
  %837 = call i8* @umaxtostr(i64 %835, i8* %836), !dbg !3542
  %838 = load i32, i32* @x.55
  %839 = load i32, i32* @y.56
  %840 = sub i32 %838, 1
  %841 = mul i32 %838, %840
  %842 = urem i32 %841, 2
  %843 = icmp eq i32 %842, 0
  %844 = icmp slt i32 %839, 10
  %845 = or i1 %843, %844
  br i1 %845, label %originalBBpart2204, label %originalBB202alteredBB

originalBBpart2204:                               ; preds = %originalBB202
  br label %846, !dbg !3537

846:                                              ; preds = %originalBBpart2204, %originalBBpart2200
  %847 = phi i8* [ %816, %originalBBpart2200 ], [ %837, %originalBBpart2204 ], !dbg !3537
  %848 = load i32, i32* @x.55
  %849 = load i32, i32* @y.56
  %850 = sub i32 %848, 1
  %851 = mul i32 %848, %850
  %852 = urem i32 %851, 2
  %853 = icmp eq i32 %852, 0
  %854 = icmp slt i32 %849, 10
  %855 = or i1 %853, %854
  br i1 %855, label %originalBB206, label %originalBB206alteredBB

originalBB206:                                    ; preds = %846, %originalBB206alteredBB
  %856 = call noalias i8* @xstrdup(i8* %847), !dbg !3543
  store i8* %856, i8** %26, align 8, !dbg !3544
  call void @endgrent(), !dbg !3545
  %857 = load i32, i32* @x.55
  %858 = load i32, i32* @y.56
  %859 = sub i32 %857, 1
  %860 = mul i32 %857, %859
  %861 = urem i32 %860, 2
  %862 = icmp eq i32 %861, 0
  %863 = icmp slt i32 %858, 10
  %864 = or i1 %862, %863
  br i1 %864, label %originalBBpart2208, label %originalBB206alteredBB

originalBBpart2208:                               ; preds = %originalBB206
  br label %865, !dbg !3546

865:                                              ; preds = %originalBBpart2208, %originalBBpart2196, %originalBBpart2192
  br label %866

866:                                              ; preds = %865, %755
  %867 = load i32, i32* @x.55
  %868 = load i32, i32* @y.56
  %869 = sub i32 %867, 1
  %870 = mul i32 %867, %869
  %871 = urem i32 %870, 2
  %872 = icmp eq i32 %871, 0
  %873 = icmp slt i32 %868, 10
  %874 = or i1 %872, %873
  br i1 %874, label %originalBB210, label %originalBB210alteredBB

originalBB210:                                    ; preds = %866, %originalBB210alteredBB
  call void @endpwent(), !dbg !3547
  %875 = load i32, i32* @x.55
  %876 = load i32, i32* @y.56
  %877 = sub i32 %875, 1
  %878 = mul i32 %875, %877
  %879 = urem i32 %878, 2
  %880 = icmp eq i32 %879, 0
  %881 = icmp slt i32 %876, 10
  %882 = or i1 %880, %881
  br i1 %882, label %originalBBpart2212, label %originalBB210alteredBB

originalBBpart2212:                               ; preds = %originalBB210
  br label %883, !dbg !3548

883:                                              ; preds = %originalBBpart2212, %342
  %884 = load i32, i32* @x.55
  %885 = load i32, i32* @y.56
  %886 = sub i32 %884, 1
  %887 = mul i32 %884, %886
  %888 = urem i32 %887, 2
  %889 = icmp eq i32 %888, 0
  %890 = icmp slt i32 %885, 10
  %891 = or i1 %889, %890
  br i1 %891, label %originalBB214, label %originalBB214alteredBB

originalBB214:                                    ; preds = %883, %originalBB214alteredBB
  %892 = load i8*, i8** %25, align 8, !dbg !3549
  %893 = icmp ne i8* %892, null, !dbg !3551
  %894 = load i32, i32* @x.55
  %895 = load i32, i32* @y.56
  %896 = sub i32 %894, 1
  %897 = mul i32 %894, %896
  %898 = urem i32 %897, 2
  %899 = icmp eq i32 %898, 0
  %900 = icmp slt i32 %895, 10
  %901 = or i1 %899, %900
  br i1 %901, label %originalBBpart2216, label %originalBB214alteredBB

originalBBpart2216:                               ; preds = %originalBB214
  br i1 %893, label %902, label %1102, !dbg !3552

902:                                              ; preds = %originalBBpart2216
  %903 = load i32, i32* @x.55
  %904 = load i32, i32* @y.56
  %905 = sub i32 %903, 1
  %906 = mul i32 %903, %905
  %907 = urem i32 %906, 2
  %908 = icmp eq i32 %907, 0
  %909 = icmp slt i32 %904, 10
  %910 = or i1 %908, %909
  br i1 %910, label %originalBB218, label %originalBB218alteredBB

originalBB218:                                    ; preds = %902, %originalBB218alteredBB
  %911 = load i8*, i8** %21, align 8, !dbg !3553
  %912 = icmp eq i8* %911, null, !dbg !3554
  %913 = load i32, i32* @x.55
  %914 = load i32, i32* @y.56
  %915 = sub i32 %913, 1
  %916 = mul i32 %913, %915
  %917 = urem i32 %916, 2
  %918 = icmp eq i32 %917, 0
  %919 = icmp slt i32 %914, 10
  %920 = or i1 %918, %919
  br i1 %920, label %originalBBpart2220, label %originalBB218alteredBB

originalBBpart2220:                               ; preds = %originalBB218
  br i1 %912, label %921, label %1102, !dbg !3555

921:                                              ; preds = %originalBBpart2220
  %922 = load i32, i32* @x.55
  %923 = load i32, i32* @y.56
  %924 = sub i32 %922, 1
  %925 = mul i32 %922, %924
  %926 = urem i32 %925, 2
  %927 = icmp eq i32 %926, 0
  %928 = icmp slt i32 %923, 10
  %929 = or i1 %927, %928
  br i1 %929, label %originalBB222, label %originalBB222alteredBB

originalBB222:                                    ; preds = %921, %originalBB222alteredBB
  %930 = load i8*, i8** %25, align 8, !dbg !3556
  %931 = load i8, i8* %930, align 1, !dbg !3558
  %932 = sext i8 %931 to i32, !dbg !3558
  %933 = icmp eq i32 %932, 43, !dbg !3559
  %934 = load i32, i32* @x.55
  %935 = load i32, i32* @y.56
  %936 = sub i32 %934, 1
  %937 = mul i32 %934, %936
  %938 = urem i32 %937, 2
  %939 = icmp eq i32 %938, 0
  %940 = icmp slt i32 %935, 10
  %941 = or i1 %939, %940
  br i1 %941, label %originalBBpart2224, label %originalBB222alteredBB

originalBBpart2224:                               ; preds = %originalBB222
  br i1 %933, label %942, label %959, !dbg !3558

942:                                              ; preds = %originalBBpart2224
  %943 = load i32, i32* @x.55
  %944 = load i32, i32* @y.56
  %945 = sub i32 %943, 1
  %946 = mul i32 %943, %945
  %947 = urem i32 %946, 2
  %948 = icmp eq i32 %947, 0
  %949 = icmp slt i32 %944, 10
  %950 = or i1 %948, %949
  br i1 %950, label %originalBB226, label %originalBB226alteredBB

originalBB226:                                    ; preds = %942, %originalBB226alteredBB
  %951 = load i32, i32* @x.55
  %952 = load i32, i32* @y.56
  %953 = sub i32 %951, 1
  %954 = mul i32 %951, %953
  %955 = urem i32 %954, 2
  %956 = icmp eq i32 %955, 0
  %957 = icmp slt i32 %952, 10
  %958 = or i1 %956, %957
  br i1 %958, label %originalBBpart2228, label %originalBB226alteredBB

originalBBpart2228:                               ; preds = %originalBB226
  br label %978, !dbg !3558

959:                                              ; preds = %originalBBpart2224
  %960 = load i32, i32* @x.55
  %961 = load i32, i32* @y.56
  %962 = sub i32 %960, 1
  %963 = mul i32 %960, %962
  %964 = urem i32 %963, 2
  %965 = icmp eq i32 %964, 0
  %966 = icmp slt i32 %961, 10
  %967 = or i1 %965, %966
  br i1 %967, label %originalBB230, label %originalBB230alteredBB

originalBB230:                                    ; preds = %959, %originalBB230alteredBB
  %968 = load i8*, i8** %25, align 8, !dbg !3560
  %969 = call %struct.group* @getgrnam(i8* %968), !dbg !3561
  %970 = load i32, i32* @x.55
  %971 = load i32, i32* @y.56
  %972 = sub i32 %970, 1
  %973 = mul i32 %970, %972
  %974 = urem i32 %973, 2
  %975 = icmp eq i32 %974, 0
  %976 = icmp slt i32 %971, 10
  %977 = or i1 %975, %976
  br i1 %977, label %originalBBpart2232, label %originalBB230alteredBB

originalBBpart2232:                               ; preds = %originalBB230
  br label %978, !dbg !3558

978:                                              ; preds = %originalBBpart2232, %originalBBpart2228
  %979 = phi %struct.group* [ null, %originalBBpart2228 ], [ %969, %originalBBpart2232 ], !dbg !3558
  %980 = load i32, i32* @x.55
  %981 = load i32, i32* @y.56
  %982 = sub i32 %980, 1
  %983 = mul i32 %980, %982
  %984 = urem i32 %983, 2
  %985 = icmp eq i32 %984, 0
  %986 = icmp slt i32 %981, 10
  %987 = or i1 %985, %986
  br i1 %987, label %originalBB234, label %originalBB234alteredBB

originalBB234:                                    ; preds = %978, %originalBB234alteredBB
  store %struct.group* %979, %struct.group** %23, align 8, !dbg !3562
  %988 = load %struct.group*, %struct.group** %23, align 8, !dbg !3563
  %989 = icmp eq %struct.group* %988, null, !dbg !3565
  %990 = load i32, i32* @x.55
  %991 = load i32, i32* @y.56
  %992 = sub i32 %990, 1
  %993 = mul i32 %990, %992
  %994 = urem i32 %993, 2
  %995 = icmp eq i32 %994, 0
  %996 = icmp slt i32 %991, 10
  %997 = or i1 %995, %996
  br i1 %997, label %originalBBpart2236, label %originalBB234alteredBB

originalBBpart2236:                               ; preds = %originalBB234
  br i1 %989, label %998, label %1079, !dbg !3566

998:                                              ; preds = %originalBBpart2236
  call void @llvm.dbg.declare(metadata i64* %33, metadata !3567, metadata !DIExpression()), !dbg !3569
  %999 = load i32, i32* @x.55
  %1000 = load i32, i32* @y.56
  %1001 = sub i32 %999, 1
  %1002 = mul i32 %999, %1001
  %1003 = urem i32 %1002, 2
  %1004 = icmp eq i32 %1003, 0
  %1005 = icmp slt i32 %1000, 10
  %1006 = or i1 %1004, %1005
  br i1 %1006, label %originalBB238, label %originalBB238alteredBB

originalBB238:                                    ; preds = %998, %originalBB238alteredBB
  %1007 = load i8*, i8** %25, align 8, !dbg !3570
  %1008 = call i32 @xstrtoul(i8* %1007, i8** null, i32 10, i64* %33, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3.102, i64 0, i64 0)), !dbg !3572
  %1009 = icmp eq i32 %1008, 0, !dbg !3573
  %1010 = load i32, i32* @x.55
  %1011 = load i32, i32* @y.56
  %1012 = sub i32 %1010, 1
  %1013 = mul i32 %1010, %1012
  %1014 = urem i32 %1013, 2
  %1015 = icmp eq i32 %1014, 0
  %1016 = icmp slt i32 %1011, 10
  %1017 = or i1 %1015, %1016
  br i1 %1017, label %originalBBpart2240, label %originalBB238alteredBB

originalBBpart2240:                               ; preds = %originalBB238
  br i1 %1009, label %1018, label %1060, !dbg !3574

1018:                                             ; preds = %originalBBpart2240
  %1019 = load i64, i64* %33, align 8, !dbg !3575
  %1020 = icmp ule i64 %1019, 4294967295, !dbg !3576
  br i1 %1020, label %1021, label %1060, !dbg !3577

1021:                                             ; preds = %1018
  %1022 = load i32, i32* @x.55
  %1023 = load i32, i32* @y.56
  %1024 = sub i32 %1022, 1
  %1025 = mul i32 %1022, %1024
  %1026 = urem i32 %1025, 2
  %1027 = icmp eq i32 %1026, 0
  %1028 = icmp slt i32 %1023, 10
  %1029 = or i1 %1027, %1028
  br i1 %1029, label %originalBB242, label %originalBB242alteredBB

originalBB242:                                    ; preds = %1021, %originalBB242alteredBB
  %1030 = load i64, i64* %33, align 8, !dbg !3578
  %1031 = trunc i64 %1030 to i32, !dbg !3579
  %1032 = icmp ne i32 %1031, -1, !dbg !3580
  %1033 = load i32, i32* @x.55
  %1034 = load i32, i32* @y.56
  %1035 = sub i32 %1033, 1
  %1036 = mul i32 %1033, %1035
  %1037 = urem i32 %1036, 2
  %1038 = icmp eq i32 %1037, 0
  %1039 = icmp slt i32 %1034, 10
  %1040 = or i1 %1038, %1039
  br i1 %1040, label %originalBBpart2244, label %originalBB242alteredBB

originalBBpart2244:                               ; preds = %originalBB242
  br i1 %1032, label %1041, label %1060, !dbg !3581

1041:                                             ; preds = %originalBBpart2244
  %1042 = load i32, i32* @x.55
  %1043 = load i32, i32* @y.56
  %1044 = sub i32 %1042, 1
  %1045 = mul i32 %1042, %1044
  %1046 = urem i32 %1045, 2
  %1047 = icmp eq i32 %1046, 0
  %1048 = icmp slt i32 %1043, 10
  %1049 = or i1 %1047, %1048
  br i1 %1049, label %originalBB246, label %originalBB246alteredBB

originalBB246:                                    ; preds = %1041, %originalBB246alteredBB
  %1050 = load i64, i64* %33, align 8, !dbg !3582
  %1051 = trunc i64 %1050 to i32, !dbg !3582
  store i32 %1051, i32* %28, align 4, !dbg !3583
  %1052 = load i32, i32* @x.55
  %1053 = load i32, i32* @y.56
  %1054 = sub i32 %1052, 1
  %1055 = mul i32 %1052, %1054
  %1056 = urem i32 %1055, 2
  %1057 = icmp eq i32 %1056, 0
  %1058 = icmp slt i32 %1053, 10
  %1059 = or i1 %1057, %1058
  br i1 %1059, label %originalBBpart2248, label %originalBB246alteredBB

originalBBpart2248:                               ; preds = %originalBB246
  br label %1062, !dbg !3584

1060:                                             ; preds = %originalBBpart2244, %1018, %originalBBpart2240
  %1061 = load i8*, i8** @parse_with_separator.E_invalid_group, align 8, !dbg !3585
  store i8* %1061, i8** %21, align 8, !dbg !3586
  br label %1062

1062:                                             ; preds = %1060, %originalBBpart2248
  %1063 = load i32, i32* @x.55
  %1064 = load i32, i32* @y.56
  %1065 = sub i32 %1063, 1
  %1066 = mul i32 %1063, %1065
  %1067 = urem i32 %1066, 2
  %1068 = icmp eq i32 %1067, 0
  %1069 = icmp slt i32 %1064, 10
  %1070 = or i1 %1068, %1069
  br i1 %1070, label %originalBB250, label %originalBB250alteredBB

originalBB250:                                    ; preds = %1062, %originalBB250alteredBB
  %1071 = load i32, i32* @x.55
  %1072 = load i32, i32* @y.56
  %1073 = sub i32 %1071, 1
  %1074 = mul i32 %1071, %1073
  %1075 = urem i32 %1074, 2
  %1076 = icmp eq i32 %1075, 0
  %1077 = icmp slt i32 %1072, 10
  %1078 = or i1 %1076, %1077
  br i1 %1078, label %originalBBpart2252, label %originalBB250alteredBB

originalBBpart2252:                               ; preds = %originalBB250
  br label %1083, !dbg !3587

1079:                                             ; preds = %originalBBpart2236
  %1080 = load %struct.group*, %struct.group** %23, align 8, !dbg !3588
  %1081 = getelementptr inbounds %struct.group, %struct.group* %1080, i32 0, i32 2, !dbg !3589
  %1082 = load i32, i32* %1081, align 8, !dbg !3589
  store i32 %1082, i32* %28, align 4, !dbg !3590
  br label %1083

1083:                                             ; preds = %1079, %originalBBpart2252
  %1084 = load i32, i32* @x.55
  %1085 = load i32, i32* @y.56
  %1086 = sub i32 %1084, 1
  %1087 = mul i32 %1084, %1086
  %1088 = urem i32 %1087, 2
  %1089 = icmp eq i32 %1088, 0
  %1090 = icmp slt i32 %1085, 10
  %1091 = or i1 %1089, %1090
  br i1 %1091, label %originalBB254, label %originalBB254alteredBB

originalBB254:                                    ; preds = %1083, %originalBB254alteredBB
  call void @endgrent(), !dbg !3591
  %1092 = load i8*, i8** %25, align 8, !dbg !3592
  %1093 = call noalias i8* @xstrdup(i8* %1092), !dbg !3593
  store i8* %1093, i8** %26, align 8, !dbg !3594
  %1094 = load i32, i32* @x.55
  %1095 = load i32, i32* @y.56
  %1096 = sub i32 %1094, 1
  %1097 = mul i32 %1094, %1096
  %1098 = urem i32 %1097, 2
  %1099 = icmp eq i32 %1098, 0
  %1100 = icmp slt i32 %1095, 10
  %1101 = or i1 %1099, %1100
  br i1 %1101, label %originalBBpart2256, label %originalBB254alteredBB

originalBBpart2256:                               ; preds = %originalBB254
  br label %1102, !dbg !3595

1102:                                             ; preds = %originalBBpart2256, %originalBBpart2220, %originalBBpart2216
  %1103 = load i32, i32* @x.55
  %1104 = load i32, i32* @y.56
  %1105 = sub i32 %1103, 1
  %1106 = mul i32 %1103, %1105
  %1107 = urem i32 %1106, 2
  %1108 = icmp eq i32 %1107, 0
  %1109 = icmp slt i32 %1104, 10
  %1110 = or i1 %1108, %1109
  br i1 %1110, label %originalBB258, label %originalBB258alteredBB

originalBB258:                                    ; preds = %1102, %originalBB258alteredBB
  %1111 = load i8*, i8** %21, align 8, !dbg !3596
  %1112 = icmp eq i8* %1111, null, !dbg !3598
  %1113 = load i32, i32* @x.55
  %1114 = load i32, i32* @y.56
  %1115 = sub i32 %1113, 1
  %1116 = mul i32 %1113, %1115
  %1117 = urem i32 %1116, 2
  %1118 = icmp eq i32 %1117, 0
  %1119 = icmp slt i32 %1114, 10
  %1120 = or i1 %1118, %1119
  br i1 %1120, label %originalBBpart2260, label %originalBB258alteredBB

originalBBpart2260:                               ; preds = %originalBB258
  br i1 %1112, label %1121, label %1206, !dbg !3599

1121:                                             ; preds = %originalBBpart2260
  %1122 = load i32, i32* @x.55
  %1123 = load i32, i32* @y.56
  %1124 = sub i32 %1122, 1
  %1125 = mul i32 %1122, %1124
  %1126 = urem i32 %1125, 2
  %1127 = icmp eq i32 %1126, 0
  %1128 = icmp slt i32 %1123, 10
  %1129 = or i1 %1127, %1128
  br i1 %1129, label %originalBB262, label %originalBB262alteredBB

originalBB262:                                    ; preds = %1121, %originalBB262alteredBB
  %1130 = load i32, i32* %27, align 4, !dbg !3600
  %1131 = load i32*, i32** %17, align 8, !dbg !3602
  store i32 %1130, i32* %1131, align 4, !dbg !3603
  %1132 = load i32*, i32** %18, align 8, !dbg !3604
  %1133 = icmp ne i32* %1132, null, !dbg !3604
  %1134 = load i32, i32* @x.55
  %1135 = load i32, i32* @y.56
  %1136 = sub i32 %1134, 1
  %1137 = mul i32 %1134, %1136
  %1138 = urem i32 %1137, 2
  %1139 = icmp eq i32 %1138, 0
  %1140 = icmp slt i32 %1135, 10
  %1141 = or i1 %1139, %1140
  br i1 %1141, label %originalBBpart2264, label %originalBB262alteredBB

originalBBpart2264:                               ; preds = %originalBB262
  br i1 %1133, label %1142, label %1161, !dbg !3606

1142:                                             ; preds = %originalBBpart2264
  %1143 = load i32, i32* @x.55
  %1144 = load i32, i32* @y.56
  %1145 = sub i32 %1143, 1
  %1146 = mul i32 %1143, %1145
  %1147 = urem i32 %1146, 2
  %1148 = icmp eq i32 %1147, 0
  %1149 = icmp slt i32 %1144, 10
  %1150 = or i1 %1148, %1149
  br i1 %1150, label %originalBB266, label %originalBB266alteredBB

originalBB266:                                    ; preds = %1142, %originalBB266alteredBB
  %1151 = load i32, i32* %28, align 4, !dbg !3607
  %1152 = load i32*, i32** %18, align 8, !dbg !3608
  store i32 %1151, i32* %1152, align 4, !dbg !3609
  %1153 = load i32, i32* @x.55
  %1154 = load i32, i32* @y.56
  %1155 = sub i32 %1153, 1
  %1156 = mul i32 %1153, %1155
  %1157 = urem i32 %1156, 2
  %1158 = icmp eq i32 %1157, 0
  %1159 = icmp slt i32 %1154, 10
  %1160 = or i1 %1158, %1159
  br i1 %1160, label %originalBBpart2268, label %originalBB266alteredBB

originalBBpart2268:                               ; preds = %originalBB266
  br label %1161, !dbg !3610

1161:                                             ; preds = %originalBBpart2268, %originalBBpart2264
  %1162 = load i32, i32* @x.55
  %1163 = load i32, i32* @y.56
  %1164 = sub i32 %1162, 1
  %1165 = mul i32 %1162, %1164
  %1166 = urem i32 %1165, 2
  %1167 = icmp eq i32 %1166, 0
  %1168 = icmp slt i32 %1163, 10
  %1169 = or i1 %1167, %1168
  br i1 %1169, label %originalBB270, label %originalBB270alteredBB

originalBB270:                                    ; preds = %1161, %originalBB270alteredBB
  %1170 = load i8**, i8*** %19, align 8, !dbg !3611
  %1171 = icmp ne i8** %1170, null, !dbg !3611
  %1172 = load i32, i32* @x.55
  %1173 = load i32, i32* @y.56
  %1174 = sub i32 %1172, 1
  %1175 = mul i32 %1172, %1174
  %1176 = urem i32 %1175, 2
  %1177 = icmp eq i32 %1176, 0
  %1178 = icmp slt i32 %1173, 10
  %1179 = or i1 %1177, %1178
  br i1 %1179, label %originalBBpart2272, label %originalBB270alteredBB

originalBBpart2272:                               ; preds = %originalBB270
  br i1 %1171, label %1180, label %1183, !dbg !3613

1180:                                             ; preds = %originalBBpart2272
  %1181 = load i8*, i8** %24, align 8, !dbg !3614
  %1182 = load i8**, i8*** %19, align 8, !dbg !3616
  store i8* %1181, i8** %1182, align 8, !dbg !3617
  store i8* null, i8** %24, align 8, !dbg !3618
  br label %1183, !dbg !3619

1183:                                             ; preds = %1180, %originalBBpart2272
  %1184 = load i8**, i8*** %20, align 8, !dbg !3620
  %1185 = icmp ne i8** %1184, null, !dbg !3620
  br i1 %1185, label %1186, label %1205, !dbg !3622

1186:                                             ; preds = %1183
  %1187 = load i32, i32* @x.55
  %1188 = load i32, i32* @y.56
  %1189 = sub i32 %1187, 1
  %1190 = mul i32 %1187, %1189
  %1191 = urem i32 %1190, 2
  %1192 = icmp eq i32 %1191, 0
  %1193 = icmp slt i32 %1188, 10
  %1194 = or i1 %1192, %1193
  br i1 %1194, label %originalBB274, label %originalBB274alteredBB

originalBB274:                                    ; preds = %1186, %originalBB274alteredBB
  %1195 = load i8*, i8** %26, align 8, !dbg !3623
  %1196 = load i8**, i8*** %20, align 8, !dbg !3625
  store i8* %1195, i8** %1196, align 8, !dbg !3626
  store i8* null, i8** %26, align 8, !dbg !3627
  %1197 = load i32, i32* @x.55
  %1198 = load i32, i32* @y.56
  %1199 = sub i32 %1197, 1
  %1200 = mul i32 %1197, %1199
  %1201 = urem i32 %1200, 2
  %1202 = icmp eq i32 %1201, 0
  %1203 = icmp slt i32 %1198, 10
  %1204 = or i1 %1202, %1203
  br i1 %1204, label %originalBBpart2276, label %originalBB274alteredBB

originalBBpart2276:                               ; preds = %originalBB274
  br label %1205, !dbg !3628

1205:                                             ; preds = %originalBBpart2276, %1183
  br label %1206, !dbg !3629

1206:                                             ; preds = %1205, %originalBBpart2260
  %1207 = load i32, i32* @x.55
  %1208 = load i32, i32* @y.56
  %1209 = sub i32 %1207, 1
  %1210 = mul i32 %1207, %1209
  %1211 = urem i32 %1210, 2
  %1212 = icmp eq i32 %1211, 0
  %1213 = icmp slt i32 %1208, 10
  %1214 = or i1 %1212, %1213
  br i1 %1214, label %originalBB278, label %originalBB278alteredBB

originalBB278:                                    ; preds = %1206, %originalBB278alteredBB
  %1215 = load i8*, i8** %24, align 8, !dbg !3630
  call void @free(i8* %1215) #10, !dbg !3631
  %1216 = load i8*, i8** %26, align 8, !dbg !3632
  call void @free(i8* %1216) #10, !dbg !3633
  %1217 = load i8*, i8** %21, align 8, !dbg !3634
  %1218 = icmp ne i8* %1217, null, !dbg !3634
  %1219 = load i32, i32* @x.55
  %1220 = load i32, i32* @y.56
  %1221 = sub i32 %1219, 1
  %1222 = mul i32 %1219, %1221
  %1223 = urem i32 %1222, 2
  %1224 = icmp eq i32 %1223, 0
  %1225 = icmp slt i32 %1220, 10
  %1226 = or i1 %1224, %1225
  br i1 %1226, label %originalBBpart2280, label %originalBB278alteredBB

originalBBpart2280:                               ; preds = %originalBB278
  br i1 %1218, label %1227, label %1246, !dbg !3634

1227:                                             ; preds = %originalBBpart2280
  %1228 = load i32, i32* @x.55
  %1229 = load i32, i32* @y.56
  %1230 = sub i32 %1228, 1
  %1231 = mul i32 %1228, %1230
  %1232 = urem i32 %1231, 2
  %1233 = icmp eq i32 %1232, 0
  %1234 = icmp slt i32 %1229, 10
  %1235 = or i1 %1233, %1234
  br i1 %1235, label %originalBB282, label %originalBB282alteredBB

originalBB282:                                    ; preds = %1227, %originalBB282alteredBB
  %1236 = load i8*, i8** %21, align 8, !dbg !3635
  %1237 = call i8* @gettext(i8* %1236) #10, !dbg !3635
  %1238 = load i32, i32* @x.55
  %1239 = load i32, i32* @y.56
  %1240 = sub i32 %1238, 1
  %1241 = mul i32 %1238, %1240
  %1242 = urem i32 %1241, 2
  %1243 = icmp eq i32 %1242, 0
  %1244 = icmp slt i32 %1239, 10
  %1245 = or i1 %1243, %1244
  br i1 %1245, label %originalBBpart2284, label %originalBB282alteredBB

originalBBpart2284:                               ; preds = %originalBB282
  br label %1247, !dbg !3634

1246:                                             ; preds = %originalBBpart2280
  br label %1247, !dbg !3634

1247:                                             ; preds = %1246, %originalBBpart2284
  %1248 = phi i8* [ %1237, %originalBBpart2284 ], [ null, %1246 ], !dbg !3634
  %1249 = load i32, i32* @x.55
  %1250 = load i32, i32* @y.56
  %1251 = sub i32 %1249, 1
  %1252 = mul i32 %1249, %1251
  %1253 = urem i32 %1252, 2
  %1254 = icmp eq i32 %1253, 0
  %1255 = icmp slt i32 %1250, 10
  %1256 = or i1 %1254, %1255
  br i1 %1256, label %originalBB286, label %originalBB286alteredBB

originalBB286:                                    ; preds = %1247, %originalBB286alteredBB
  %1257 = load i32, i32* @x.55
  %1258 = load i32, i32* @y.56
  %1259 = sub i32 %1257, 1
  %1260 = mul i32 %1257, %1259
  %1261 = urem i32 %1260, 2
  %1262 = icmp eq i32 %1261, 0
  %1263 = icmp slt i32 %1258, 10
  %1264 = or i1 %1262, %1263
  br i1 %1264, label %originalBBpart2288, label %originalBB286alteredBB

originalBBpart2288:                               ; preds = %originalBB286
  ret i8* %1248, !dbg !3636

originalBBalteredBB:                              ; preds = %originalBB, %6
  %1265 = alloca i8*, align 8
  %1266 = alloca i8*, align 8
  %1267 = alloca i32*, align 8
  %1268 = alloca i32*, align 8
  %1269 = alloca i8**, align 8
  %1270 = alloca i8**, align 8
  %1271 = alloca i8*, align 8
  %1272 = alloca %struct.passwd*, align 8
  %1273 = alloca %struct.group*, align 8
  %1274 = alloca i8*, align 8
  %1275 = alloca i8*, align 8
  %1276 = alloca i8*, align 8
  %1277 = alloca i32, align 4
  %1278 = alloca i32, align 4
  %1279 = alloca i64, align 8
  %1280 = alloca i8, align 1
  %1281 = alloca i64, align 8
  %1282 = alloca [21 x i8], align 16
  %1283 = alloca i64, align 8
  store i8* %0, i8** %1265, align 8
  call void @llvm.dbg.declare(metadata i8** %1265, metadata !3637, metadata !DIExpression()), !dbg !3358
  store i8* %1, i8** %1266, align 8
  call void @llvm.dbg.declare(metadata i8** %1266, metadata !3647, metadata !DIExpression()), !dbg !3360
  store i32* %2, i32** %1267, align 8
  call void @llvm.dbg.declare(metadata i32** %1267, metadata !3648, metadata !DIExpression()), !dbg !3362
  store i32* %3, i32** %1268, align 8
  call void @llvm.dbg.declare(metadata i32** %1268, metadata !3649, metadata !DIExpression()), !dbg !3364
  store i8** %4, i8*** %1269, align 8
  call void @llvm.dbg.declare(metadata i8*** %1269, metadata !3650, metadata !DIExpression()), !dbg !3366
  store i8** %5, i8*** %1270, align 8
  call void @llvm.dbg.declare(metadata i8*** %1270, metadata !3651, metadata !DIExpression()), !dbg !3368
  call void @llvm.dbg.declare(metadata i8** %1271, metadata !3652, metadata !DIExpression()), !dbg !3370
  call void @llvm.dbg.declare(metadata %struct.passwd** %1272, metadata !3653, metadata !DIExpression()), !dbg !3382
  call void @llvm.dbg.declare(metadata %struct.group** %1273, metadata !3664, metadata !DIExpression()), !dbg !3391
  call void @llvm.dbg.declare(metadata i8** %1274, metadata !3672, metadata !DIExpression()), !dbg !3393
  call void @llvm.dbg.declare(metadata i8** %1275, metadata !3673, metadata !DIExpression()), !dbg !3395
  call void @llvm.dbg.declare(metadata i8** %1276, metadata !3674, metadata !DIExpression()), !dbg !3397
  store i8* null, i8** %1276, align 8, !dbg !3397
  call void @llvm.dbg.declare(metadata i32* %1277, metadata !3675, metadata !DIExpression()), !dbg !3399
  %1284 = load i32*, i32** %1267, align 8, !dbg !3400
  %1285 = load i32, i32* %1284, align 4, !dbg !3401
  store i32 %1285, i32* %1277, align 4, !dbg !3399
  call void @llvm.dbg.declare(metadata i32* %1278, metadata !3676, metadata !DIExpression()), !dbg !3403
  %1286 = load i32*, i32** %1268, align 8, !dbg !3404
  %1287 = icmp ne i32* %1286, null, !dbg !3404
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %46
  %1288 = load i32*, i32** %18, align 8, !dbg !3405
  %1289 = load i32, i32* %1288, align 4, !dbg !3406
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %65
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %86
  %1290 = load i8**, i8*** %19, align 8, !dbg !3411
  store i8* null, i8** %1290, align 8, !dbg !3412
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %104
  %1291 = load i8**, i8*** %20, align 8, !dbg !3414
  %1292 = icmp ne i8** %1291, null, !dbg !3414
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %125
  store i8* null, i8** %24, align 8, !dbg !3420
  %1293 = load i8*, i8** %16, align 8, !dbg !3421
  %1294 = icmp eq i8* %1293, null, !dbg !3423
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %144
  %1295 = load i8*, i8** %15, align 8, !dbg !3425
  %1296 = load i8, i8* %1295, align 1, !dbg !3428
  %1297 = icmp ne i8 %1296, 0, !dbg !3428
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %164
  %1298 = load i8*, i8** %15, align 8, !dbg !3430
  %1299 = call noalias i8* @xstrdup(i8* %1298), !dbg !3431
  store i8* %1299, i8** %24, align 8, !dbg !3432
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %183
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %200
  %1300 = load i8*, i8** %16, align 8, !dbg !3438
  %1301 = load i8*, i8** %15, align 8, !dbg !3439
  %1302 = ptrtoint i8* %1300 to i64, !dbg !3440
  %1303 = ptrtoint i8* %1301 to i64, !dbg !3440
  %_ = shl i64 %1302, %1303
  %_35 = sub i64 0, %1302
  %gen = add i64 %_35, %1303
  %_36 = sub i64 %1302, %1303
  %gen37 = mul i64 %_36, %1303
  %_38 = shl i64 %1302, %1303
  %_39 = shl i64 %1302, %1303
  %_40 = sub i64 %1302, %1303
  %gen41 = mul i64 %_40, %1303
  %_42 = shl i64 %1302, %1303
  %1304 = sub i64 %1302, %1303, !dbg !3440
  store i64 %1304, i64* %29, align 8, !dbg !3437
  %1305 = load i64, i64* %29, align 8, !dbg !3441
  %1306 = icmp ne i64 %1305, 0, !dbg !3443
  br label %originalBB34

originalBB46alteredBB:                            ; preds = %originalBB46, %224
  %1307 = load i8*, i8** %15, align 8, !dbg !3445
  %1308 = load i64, i64* %29, align 8, !dbg !3447
  %_47 = shl i64 %1308, 1
  %_48 = sub i64 0, %1308
  %gen49 = add i64 %_48, 1
  %_50 = sub i64 %1308, 1
  %gen51 = mul i64 %_50, 1
  %_52 = sub i64 0, %1308
  %gen53 = add i64 %_52, 1
  %_54 = shl i64 %1308, 1
  %1309 = add i64 %1308, 1, !dbg !3448
  %1310 = call i8* @xmemdup(i8* %1307, i64 %1309), !dbg !3449
  store i8* %1310, i8** %24, align 8, !dbg !3450
  %1311 = load i8*, i8** %24, align 8, !dbg !3451
  %1312 = load i64, i64* %29, align 8, !dbg !3452
  %1313 = getelementptr inbounds i8, i8* %1311, i64 %1312, !dbg !3451
  store i8 0, i8* %1313, align 1, !dbg !3453
  br label %originalBB46

originalBB58alteredBB:                            ; preds = %originalBB58, %248
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %265
  %1314 = load i8*, i8** %16, align 8, !dbg !3455
  %1315 = icmp eq i8* %1314, null, !dbg !3456
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %284
  %1316 = load i8*, i8** %16, align 8, !dbg !3458
  %1317 = getelementptr inbounds i8, i8* %1316, i64 1, !dbg !3459
  %1318 = load i8, i8* %1317, align 1, !dbg !3460
  %1319 = sext i8 %1318 to i32, !dbg !3460
  %1320 = icmp eq i32 %1319, 0, !dbg !3461
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %306
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %323
  %1321 = load i8*, i8** %16, align 8, !dbg !3462
  %1322 = getelementptr inbounds i8, i8* %1321, i64 1, !dbg !3463
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %346
  %1323 = load i8*, i8** %24, align 8, !dbg !3469
  %1324 = load i8, i8* %1323, align 1, !dbg !3471
  %1325 = sext i8 %1324 to i32, !dbg !3471
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %366
  %collatzVaralteredBB = alloca i32
  br label %originalBB82

originalBB86alteredBB:                            ; preds = %originalBB86, %383
  %1326 = load i32, i32* @inVal0
  %1327 = icmp sgt i32 %1326, 1
  br label %originalBB86

originalBB90alteredBB:                            ; preds = %originalBB90, %402
  store i32 82, i32* %collatzVar
  br label %originalBB90

originalBB94alteredBB:                            ; preds = %originalBB94, %419
  %1328 = load i8**, i8*** @inVal1
  %1329 = getelementptr inbounds i8*, i8** %1328, i64 1
  %1330 = load i8*, i8** %1329
  %controlealteredBB = call i32 @controle(i8* %1330, i32 43)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB94

originalBB98alteredBB:                            ; preds = %originalBB98, %439
  %1331 = load i32, i32* %collatzVar
  %1332 = icmp sgt i32 %1331, 1
  br label %originalBB98

originalBB102alteredBB:                           ; preds = %originalBB102, %458
  %1333 = load i32, i32* %collatzVar
  %_103 = shl i32 %1333, 2
  %_104 = shl i32 %1333, 2
  %1334 = srem i32 %1333, 2
  %1335 = icmp eq i32 %1334, 0
  br label %originalBB102

originalBB108alteredBB:                           ; preds = %originalBB108, %478
  %1336 = load i32, i32* %collatzVar
  %_109 = shl i32 %1336, 2
  %_110 = shl i32 %1336, 2
  %_111 = sub i32 %1336, 2
  %gen112 = mul i32 %_111, 2
  %_113 = sub i32 0, %1336
  %gen114 = add i32 %_113, 2
  %_115 = sub i32 %1336, 2
  %gen116 = mul i32 %_115, 2
  %1337 = sdiv i32 %1336, 2
  store i32 %1337, i32* %collatzVar
  br label %originalBB108

originalBB120alteredBB:                           ; preds = %originalBB120, %497
  %1338 = load i32, i32* %collatzVar
  %_121 = sub i32 %1338, 3
  %gen122 = mul i32 %_121, 3
  %1339 = mul i32 %1338, 3
  %_123 = sub i32 %1339, 1
  %gen124 = mul i32 %_123, 1
  %1340 = add i32 %1339, 1
  store i32 %1340, i32* %collatzVar
  br label %originalBB120

originalBB128alteredBB:                           ; preds = %originalBB128, %517
  %1341 = load i32, i32* %collatzVar
  %_129 = sub i32 0, %357
  %gen130 = add i32 %_129, %1341
  %_131 = sub i32 %357, %1341
  %gen132 = mul i32 %_131, %1341
  %_133 = sub i32 %357, %1341
  %gen134 = mul i32 %_133, %1341
  %_135 = sub i32 %357, %1341
  %gen136 = mul i32 %_135, %1341
  %_137 = sub i32 0, %357
  %gen138 = add i32 %_137, %1341
  %_139 = sub i32 0, %357
  %gen140 = add i32 %_139, %1341
  %1342 = sub i32 %357, %1341
  %1343 = icmp sgt i32 %1342, 41
  br label %originalBB128

originalBB144alteredBB:                           ; preds = %originalBB144, %537
  %1344 = load i32, i32* %collatzVar
  %_145 = sub i32 %357, %1344
  %gen146 = mul i32 %_145, %1344
  %1345 = add i32 %357, %1344
  %1346 = icmp slt i32 %1345, 45
  br label %originalBB144

originalBB150alteredBB:                           ; preds = %originalBB150, %558
  %1347 = load i8*, i8** %24, align 8, !dbg !3473
  %1348 = call %struct.passwd* @getpwnam(i8* %1347), !dbg !3474
  br label %originalBB150

originalBB154alteredBB:                           ; preds = %originalBB154, %577
  store %struct.passwd* %578, %struct.passwd** %22, align 8, !dbg !3475
  %1349 = load %struct.passwd*, %struct.passwd** %22, align 8, !dbg !3476
  %1350 = icmp eq %struct.passwd* %1349, null, !dbg !3478
  br label %originalBB154

originalBB158alteredBB:                           ; preds = %originalBB158, %597
  %1351 = load i8*, i8** %16, align 8, !dbg !3483
  %1352 = icmp ne i8* %1351, null, !dbg !3484
  br label %originalBB158

originalBB162alteredBB:                           ; preds = %originalBB162, %619
  %1353 = zext i1 %620 to i8, !dbg !3482
  store i8 %1353, i8* %30, align 1, !dbg !3482
  %1354 = load i8, i8* %30, align 1, !dbg !3489
  %1355 = trunc i8 %1354 to i1, !dbg !3489
  br label %originalBB162

originalBB166alteredBB:                           ; preds = %originalBB166, %640
  %1356 = load i8*, i8** @parse_with_separator.E_bad_spec, align 8, !dbg !3492
  store i8* %1356, i8** %21, align 8, !dbg !3494
  br label %originalBB166

originalBB170alteredBB:                           ; preds = %originalBB170, %658
  %1357 = load i8*, i8** %24, align 8, !dbg !3499
  %1358 = call i32 @xstrtoul(i8* %1357, i8** null, i32 10, i64* %31, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3.102, i64 0, i64 0)), !dbg !3501
  %1359 = icmp eq i32 %1358, 0, !dbg !3502
  br label %originalBB170

originalBB174alteredBB:                           ; preds = %originalBB174, %681
  %1360 = load i64, i64* %31, align 8, !dbg !3507
  %1361 = trunc i64 %1360 to i32, !dbg !3508
  %1362 = icmp ne i32 %1361, -1, !dbg !3509
  br label %originalBB174

originalBB178alteredBB:                           ; preds = %originalBB178, %701
  %1363 = load i64, i64* %31, align 8, !dbg !3511
  %1364 = trunc i64 %1363 to i32, !dbg !3511
  store i32 %1364, i32* %27, align 4, !dbg !3512
  br label %originalBB178

originalBB182alteredBB:                           ; preds = %originalBB182, %720
  %1365 = load i8*, i8** @parse_with_separator.E_invalid_user, align 8, !dbg !3514
  store i8* %1365, i8** %21, align 8, !dbg !3515
  br label %originalBB182

originalBB186alteredBB:                           ; preds = %originalBB186, %738
  br label %originalBB186

originalBB190alteredBB:                           ; preds = %originalBB190, %756
  %1366 = load %struct.passwd*, %struct.passwd** %22, align 8, !dbg !3517
  %1367 = getelementptr inbounds %struct.passwd, %struct.passwd* %1366, i32 0, i32 2, !dbg !3519
  %1368 = load i32, i32* %1367, align 8, !dbg !3519
  store i32 %1368, i32* %27, align 4, !dbg !3520
  %1369 = load i8*, i8** %25, align 8, !dbg !3521
  %1370 = icmp eq i8* %1369, null, !dbg !3523
  br label %originalBB190

originalBB194alteredBB:                           ; preds = %originalBB194, %778
  %1371 = load i8*, i8** %16, align 8, !dbg !3525
  %1372 = icmp ne i8* %1371, null, !dbg !3526
  br label %originalBB194

originalBB198alteredBB:                           ; preds = %originalBB198, %805
  %1373 = load %struct.group*, %struct.group** %23, align 8, !dbg !3538
  %1374 = getelementptr inbounds %struct.group, %struct.group* %1373, i32 0, i32 0, !dbg !3539
  %1375 = load i8*, i8** %1374, align 8, !dbg !3539
  br label %originalBB198

originalBB202alteredBB:                           ; preds = %originalBB202, %825
  %1376 = load i32, i32* %28, align 4, !dbg !3540
  %1377 = zext i32 %1376 to i64, !dbg !3540
  %1378 = getelementptr inbounds [21 x i8], [21 x i8]* %32, i64 0, i64 0, !dbg !3541
  %1379 = call i8* @umaxtostr(i64 %1377, i8* %1378), !dbg !3542
  br label %originalBB202

originalBB206alteredBB:                           ; preds = %originalBB206, %846
  %1380 = call noalias i8* @xstrdup(i8* %847), !dbg !3543
  store i8* %1380, i8** %26, align 8, !dbg !3544
  call void @endgrent(), !dbg !3545
  br label %originalBB206

originalBB210alteredBB:                           ; preds = %originalBB210, %866
  call void @endpwent(), !dbg !3547
  br label %originalBB210

originalBB214alteredBB:                           ; preds = %originalBB214, %883
  %1381 = load i8*, i8** %25, align 8, !dbg !3549
  %1382 = icmp ne i8* %1381, null, !dbg !3551
  br label %originalBB214

originalBB218alteredBB:                           ; preds = %originalBB218, %902
  %1383 = load i8*, i8** %21, align 8, !dbg !3553
  %1384 = icmp eq i8* %1383, null, !dbg !3554
  br label %originalBB218

originalBB222alteredBB:                           ; preds = %originalBB222, %921
  %1385 = load i8*, i8** %25, align 8, !dbg !3556
  %1386 = load i8, i8* %1385, align 1, !dbg !3558
  %1387 = sext i8 %1386 to i32, !dbg !3558
  %1388 = icmp eq i32 %1387, 43, !dbg !3559
  br label %originalBB222

originalBB226alteredBB:                           ; preds = %originalBB226, %942
  br label %originalBB226

originalBB230alteredBB:                           ; preds = %originalBB230, %959
  %1389 = load i8*, i8** %25, align 8, !dbg !3560
  %1390 = call %struct.group* @getgrnam(i8* %1389), !dbg !3561
  br label %originalBB230

originalBB234alteredBB:                           ; preds = %originalBB234, %978
  store %struct.group* %979, %struct.group** %23, align 8, !dbg !3562
  %1391 = load %struct.group*, %struct.group** %23, align 8, !dbg !3563
  %1392 = icmp eq %struct.group* %1391, null, !dbg !3565
  br label %originalBB234

originalBB238alteredBB:                           ; preds = %originalBB238, %998
  %1393 = load i8*, i8** %25, align 8, !dbg !3570
  %1394 = call i32 @xstrtoul(i8* %1393, i8** null, i32 10, i64* %33, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3.102, i64 0, i64 0)), !dbg !3572
  %1395 = icmp eq i32 %1394, 0, !dbg !3573
  br label %originalBB238

originalBB242alteredBB:                           ; preds = %originalBB242, %1021
  %1396 = load i64, i64* %33, align 8, !dbg !3578
  %1397 = trunc i64 %1396 to i32, !dbg !3579
  %1398 = icmp ne i32 %1397, -1, !dbg !3580
  br label %originalBB242

originalBB246alteredBB:                           ; preds = %originalBB246, %1041
  %1399 = load i64, i64* %33, align 8, !dbg !3582
  %1400 = trunc i64 %1399 to i32, !dbg !3582
  store i32 %1400, i32* %28, align 4, !dbg !3583
  br label %originalBB246

originalBB250alteredBB:                           ; preds = %originalBB250, %1062
  br label %originalBB250

originalBB254alteredBB:                           ; preds = %originalBB254, %1083
  call void @endgrent(), !dbg !3591
  %1401 = load i8*, i8** %25, align 8, !dbg !3592
  %1402 = call noalias i8* @xstrdup(i8* %1401), !dbg !3593
  store i8* %1402, i8** %26, align 8, !dbg !3594
  br label %originalBB254

originalBB258alteredBB:                           ; preds = %originalBB258, %1102
  %1403 = load i8*, i8** %21, align 8, !dbg !3596
  %1404 = icmp eq i8* %1403, null, !dbg !3598
  br label %originalBB258

originalBB262alteredBB:                           ; preds = %originalBB262, %1121
  %1405 = load i32, i32* %27, align 4, !dbg !3600
  %1406 = load i32*, i32** %17, align 8, !dbg !3602
  store i32 %1405, i32* %1406, align 4, !dbg !3603
  %1407 = load i32*, i32** %18, align 8, !dbg !3604
  %1408 = icmp ne i32* %1407, null, !dbg !3604
  br label %originalBB262

originalBB266alteredBB:                           ; preds = %originalBB266, %1142
  %1409 = load i32, i32* %28, align 4, !dbg !3607
  %1410 = load i32*, i32** %18, align 8, !dbg !3608
  store i32 %1409, i32* %1410, align 4, !dbg !3609
  br label %originalBB266

originalBB270alteredBB:                           ; preds = %originalBB270, %1161
  %1411 = load i8**, i8*** %19, align 8, !dbg !3611
  %1412 = icmp ne i8** %1411, null, !dbg !3611
  br label %originalBB270

originalBB274alteredBB:                           ; preds = %originalBB274, %1186
  %1413 = load i8*, i8** %26, align 8, !dbg !3623
  %1414 = load i8**, i8*** %20, align 8, !dbg !3625
  store i8* %1413, i8** %1414, align 8, !dbg !3626
  store i8* null, i8** %26, align 8, !dbg !3627
  br label %originalBB274

originalBB278alteredBB:                           ; preds = %originalBB278, %1206
  %1415 = load i8*, i8** %24, align 8, !dbg !3630
  call void @free(i8* %1415) #10, !dbg !3631
  %1416 = load i8*, i8** %26, align 8, !dbg !3632
  call void @free(i8* %1416) #10, !dbg !3633
  %1417 = load i8*, i8** %21, align 8, !dbg !3634
  %1418 = icmp ne i8* %1417, null, !dbg !3634
  br label %originalBB278

originalBB282alteredBB:                           ; preds = %originalBB282, %1227
  %1419 = load i8*, i8** %21, align 8, !dbg !3635
  %1420 = call i8* @gettext(i8* %1419) #10, !dbg !3635
  br label %originalBB282

originalBB286alteredBB:                           ; preds = %originalBB286, %1247
  br label %originalBB286
}

declare dso_local %struct.passwd* @getpwnam(i8*) #3

declare dso_local void @endgrent() #3

declare dso_local void @endpwent() #3

declare dso_local %struct.group* @getgrnam(i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_arn(%struct._IO_FILE*, i8*, i8*, i8*, i8**, i64) #4 !dbg !3677 {
  %7 = alloca %struct._IO_FILE*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8**, align 8
  %12 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %7, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %7, metadata !3735, metadata !DIExpression()), !dbg !3736
  store i8* %1, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !3737, metadata !DIExpression()), !dbg !3738
  store i8* %2, i8** %9, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !3739, metadata !DIExpression()), !dbg !3740
  store i8* %3, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !3741, metadata !DIExpression()), !dbg !3742
  store i8** %4, i8*** %11, align 8
  call void @llvm.dbg.declare(metadata i8*** %11, metadata !3743, metadata !DIExpression()), !dbg !3744
  store i64 %5, i64* %12, align 8
  call void @llvm.dbg.declare(metadata i64* %12, metadata !3745, metadata !DIExpression()), !dbg !3746
  %13 = load i8*, i8** %8, align 8, !dbg !3747
  %14 = icmp ne i8* %13, null, !dbg !3747
  br i1 %14, label %15, label %37, !dbg !3749

15:                                               ; preds = %6
  %16 = load i32, i32* @x.57
  %17 = load i32, i32* @y.58
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %15, %originalBBalteredBB
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3750
  %25 = load i8*, i8** %8, align 8, !dbg !3751
  %26 = load i8*, i8** %9, align 8, !dbg !3752
  %27 = load i8*, i8** %10, align 8, !dbg !3753
  %28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.106, i64 0, i64 0), i8* %25, i8* %26, i8* %27), !dbg !3754
  %29 = load i32, i32* @x.57
  %30 = load i32, i32* @y.58
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %58, !dbg !3754

37:                                               ; preds = %6
  %38 = load i32, i32* @x.57
  %39 = load i32, i32* @y.58
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3755
  %47 = load i8*, i8** %9, align 8, !dbg !3756
  %48 = load i8*, i8** %10, align 8, !dbg !3757
  %49 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.107, i64 0, i64 0), i8* %47, i8* %48), !dbg !3758
  %50 = load i32, i32* @x.57
  %51 = load i32, i32* @y.58
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %58

58:                                               ; preds = %originalBBpart24, %originalBBpart2
  %59 = load i32, i32* @x.57
  %60 = load i32, i32* @y.58
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %58, %originalBB6alteredBB
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3759
  %68 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.108, i64 0, i64 0)) #10, !dbg !3760
  %69 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %67, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %68, i32 2020), !dbg !3761
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3762
  %71 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.109, i64 0, i64 0), %struct._IO_FILE* %70), !dbg !3762
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3763
  %73 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.110, i64 0, i64 0)) #10, !dbg !3764
  %74 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* %73, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.111, i64 0, i64 0)), !dbg !3765
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3766
  %76 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.109, i64 0, i64 0), %struct._IO_FILE* %75), !dbg !3766
  %77 = load i64, i64* %12, align 8, !dbg !3767
  %78 = load i32, i32* @x.57
  %79 = load i32, i32* @y.58
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  switch i64 %77, label %354 [
    i64 0, label %86
    i64 1, label %87
    i64 2, label %94
    i64 3, label %104
    i64 4, label %133
    i64 5, label %165
    i64 6, label %200
    i64 7, label %238
    i64 8, label %279
    i64 9, label %323
  ], !dbg !3768

86:                                               ; preds = %originalBBpart28
  br label %385, !dbg !3769

87:                                               ; preds = %originalBBpart28
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3771
  %89 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.112, i64 0, i64 0)) #10, !dbg !3772
  %90 = load i8**, i8*** %11, align 8, !dbg !3773
  %91 = getelementptr inbounds i8*, i8** %90, i64 0, !dbg !3773
  %92 = load i8*, i8** %91, align 8, !dbg !3773
  %93 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %88, i8* %89, i8* %92), !dbg !3774
  br label %385, !dbg !3775

94:                                               ; preds = %originalBBpart28
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3776
  %96 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.113, i64 0, i64 0)) #10, !dbg !3777
  %97 = load i8**, i8*** %11, align 8, !dbg !3778
  %98 = getelementptr inbounds i8*, i8** %97, i64 0, !dbg !3778
  %99 = load i8*, i8** %98, align 8, !dbg !3778
  %100 = load i8**, i8*** %11, align 8, !dbg !3779
  %101 = getelementptr inbounds i8*, i8** %100, i64 1, !dbg !3779
  %102 = load i8*, i8** %101, align 8, !dbg !3779
  %103 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %95, i8* %96, i8* %99, i8* %102), !dbg !3780
  br label %385, !dbg !3781

104:                                              ; preds = %originalBBpart28
  %105 = load i32, i32* @x.57
  %106 = load i32, i32* @y.58
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %104, %originalBB10alteredBB
  %113 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3782
  %114 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.114, i64 0, i64 0)) #10, !dbg !3783
  %115 = load i8**, i8*** %11, align 8, !dbg !3784
  %116 = getelementptr inbounds i8*, i8** %115, i64 0, !dbg !3784
  %117 = load i8*, i8** %116, align 8, !dbg !3784
  %118 = load i8**, i8*** %11, align 8, !dbg !3785
  %119 = getelementptr inbounds i8*, i8** %118, i64 1, !dbg !3785
  %120 = load i8*, i8** %119, align 8, !dbg !3785
  %121 = load i8**, i8*** %11, align 8, !dbg !3786
  %122 = getelementptr inbounds i8*, i8** %121, i64 2, !dbg !3786
  %123 = load i8*, i8** %122, align 8, !dbg !3786
  %124 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %113, i8* %114, i8* %117, i8* %120, i8* %123), !dbg !3787
  %125 = load i32, i32* @x.57
  %126 = load i32, i32* @y.58
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %385, !dbg !3788

133:                                              ; preds = %originalBBpart28
  %134 = load i32, i32* @x.57
  %135 = load i32, i32* @y.58
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %133, %originalBB14alteredBB
  %142 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3789
  %143 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.115, i64 0, i64 0)) #10, !dbg !3790
  %144 = load i8**, i8*** %11, align 8, !dbg !3791
  %145 = getelementptr inbounds i8*, i8** %144, i64 0, !dbg !3791
  %146 = load i8*, i8** %145, align 8, !dbg !3791
  %147 = load i8**, i8*** %11, align 8, !dbg !3792
  %148 = getelementptr inbounds i8*, i8** %147, i64 1, !dbg !3792
  %149 = load i8*, i8** %148, align 8, !dbg !3792
  %150 = load i8**, i8*** %11, align 8, !dbg !3793
  %151 = getelementptr inbounds i8*, i8** %150, i64 2, !dbg !3793
  %152 = load i8*, i8** %151, align 8, !dbg !3793
  %153 = load i8**, i8*** %11, align 8, !dbg !3794
  %154 = getelementptr inbounds i8*, i8** %153, i64 3, !dbg !3794
  %155 = load i8*, i8** %154, align 8, !dbg !3794
  %156 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %142, i8* %143, i8* %146, i8* %149, i8* %152, i8* %155), !dbg !3795
  %157 = load i32, i32* @x.57
  %158 = load i32, i32* @y.58
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %385, !dbg !3796

165:                                              ; preds = %originalBBpart28
  %166 = load i32, i32* @x.57
  %167 = load i32, i32* @y.58
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %165, %originalBB18alteredBB
  %174 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3797
  %175 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.116, i64 0, i64 0)) #10, !dbg !3798
  %176 = load i8**, i8*** %11, align 8, !dbg !3799
  %177 = getelementptr inbounds i8*, i8** %176, i64 0, !dbg !3799
  %178 = load i8*, i8** %177, align 8, !dbg !3799
  %179 = load i8**, i8*** %11, align 8, !dbg !3800
  %180 = getelementptr inbounds i8*, i8** %179, i64 1, !dbg !3800
  %181 = load i8*, i8** %180, align 8, !dbg !3800
  %182 = load i8**, i8*** %11, align 8, !dbg !3801
  %183 = getelementptr inbounds i8*, i8** %182, i64 2, !dbg !3801
  %184 = load i8*, i8** %183, align 8, !dbg !3801
  %185 = load i8**, i8*** %11, align 8, !dbg !3802
  %186 = getelementptr inbounds i8*, i8** %185, i64 3, !dbg !3802
  %187 = load i8*, i8** %186, align 8, !dbg !3802
  %188 = load i8**, i8*** %11, align 8, !dbg !3803
  %189 = getelementptr inbounds i8*, i8** %188, i64 4, !dbg !3803
  %190 = load i8*, i8** %189, align 8, !dbg !3803
  %191 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %174, i8* %175, i8* %178, i8* %181, i8* %184, i8* %187, i8* %190), !dbg !3804
  %192 = load i32, i32* @x.57
  %193 = load i32, i32* @y.58
  %194 = sub i32 %192, 1
  %195 = mul i32 %192, %194
  %196 = urem i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %197, %198
  br i1 %199, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %385, !dbg !3805

200:                                              ; preds = %originalBBpart28
  %201 = load i32, i32* @x.57
  %202 = load i32, i32* @y.58
  %203 = sub i32 %201, 1
  %204 = mul i32 %201, %203
  %205 = urem i32 %204, 2
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %202, 10
  %208 = or i1 %206, %207
  br i1 %208, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %200, %originalBB22alteredBB
  %209 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3806
  %210 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.117, i64 0, i64 0)) #10, !dbg !3807
  %211 = load i8**, i8*** %11, align 8, !dbg !3808
  %212 = getelementptr inbounds i8*, i8** %211, i64 0, !dbg !3808
  %213 = load i8*, i8** %212, align 8, !dbg !3808
  %214 = load i8**, i8*** %11, align 8, !dbg !3809
  %215 = getelementptr inbounds i8*, i8** %214, i64 1, !dbg !3809
  %216 = load i8*, i8** %215, align 8, !dbg !3809
  %217 = load i8**, i8*** %11, align 8, !dbg !3810
  %218 = getelementptr inbounds i8*, i8** %217, i64 2, !dbg !3810
  %219 = load i8*, i8** %218, align 8, !dbg !3810
  %220 = load i8**, i8*** %11, align 8, !dbg !3811
  %221 = getelementptr inbounds i8*, i8** %220, i64 3, !dbg !3811
  %222 = load i8*, i8** %221, align 8, !dbg !3811
  %223 = load i8**, i8*** %11, align 8, !dbg !3812
  %224 = getelementptr inbounds i8*, i8** %223, i64 4, !dbg !3812
  %225 = load i8*, i8** %224, align 8, !dbg !3812
  %226 = load i8**, i8*** %11, align 8, !dbg !3813
  %227 = getelementptr inbounds i8*, i8** %226, i64 5, !dbg !3813
  %228 = load i8*, i8** %227, align 8, !dbg !3813
  %229 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %209, i8* %210, i8* %213, i8* %216, i8* %219, i8* %222, i8* %225, i8* %228), !dbg !3814
  %230 = load i32, i32* @x.57
  %231 = load i32, i32* @y.58
  %232 = sub i32 %230, 1
  %233 = mul i32 %230, %232
  %234 = urem i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = icmp slt i32 %231, 10
  %237 = or i1 %235, %236
  br i1 %237, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %385, !dbg !3815

238:                                              ; preds = %originalBBpart28
  %239 = load i32, i32* @x.57
  %240 = load i32, i32* @y.58
  %241 = sub i32 %239, 1
  %242 = mul i32 %239, %241
  %243 = urem i32 %242, 2
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %244, %245
  br i1 %246, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %238, %originalBB26alteredBB
  %247 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3816
  %248 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.118, i64 0, i64 0)) #10, !dbg !3817
  %249 = load i8**, i8*** %11, align 8, !dbg !3818
  %250 = getelementptr inbounds i8*, i8** %249, i64 0, !dbg !3818
  %251 = load i8*, i8** %250, align 8, !dbg !3818
  %252 = load i8**, i8*** %11, align 8, !dbg !3819
  %253 = getelementptr inbounds i8*, i8** %252, i64 1, !dbg !3819
  %254 = load i8*, i8** %253, align 8, !dbg !3819
  %255 = load i8**, i8*** %11, align 8, !dbg !3820
  %256 = getelementptr inbounds i8*, i8** %255, i64 2, !dbg !3820
  %257 = load i8*, i8** %256, align 8, !dbg !3820
  %258 = load i8**, i8*** %11, align 8, !dbg !3821
  %259 = getelementptr inbounds i8*, i8** %258, i64 3, !dbg !3821
  %260 = load i8*, i8** %259, align 8, !dbg !3821
  %261 = load i8**, i8*** %11, align 8, !dbg !3822
  %262 = getelementptr inbounds i8*, i8** %261, i64 4, !dbg !3822
  %263 = load i8*, i8** %262, align 8, !dbg !3822
  %264 = load i8**, i8*** %11, align 8, !dbg !3823
  %265 = getelementptr inbounds i8*, i8** %264, i64 5, !dbg !3823
  %266 = load i8*, i8** %265, align 8, !dbg !3823
  %267 = load i8**, i8*** %11, align 8, !dbg !3824
  %268 = getelementptr inbounds i8*, i8** %267, i64 6, !dbg !3824
  %269 = load i8*, i8** %268, align 8, !dbg !3824
  %270 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %247, i8* %248, i8* %251, i8* %254, i8* %257, i8* %260, i8* %263, i8* %266, i8* %269), !dbg !3825
  %271 = load i32, i32* @x.57
  %272 = load i32, i32* @y.58
  %273 = sub i32 %271, 1
  %274 = mul i32 %271, %273
  %275 = urem i32 %274, 2
  %276 = icmp eq i32 %275, 0
  %277 = icmp slt i32 %272, 10
  %278 = or i1 %276, %277
  br i1 %278, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %385, !dbg !3826

279:                                              ; preds = %originalBBpart28
  %280 = load i32, i32* @x.57
  %281 = load i32, i32* @y.58
  %282 = sub i32 %280, 1
  %283 = mul i32 %280, %282
  %284 = urem i32 %283, 2
  %285 = icmp eq i32 %284, 0
  %286 = icmp slt i32 %281, 10
  %287 = or i1 %285, %286
  br i1 %287, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %279, %originalBB30alteredBB
  %288 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3827
  %289 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.119, i64 0, i64 0)) #10, !dbg !3828
  %290 = load i8**, i8*** %11, align 8, !dbg !3829
  %291 = getelementptr inbounds i8*, i8** %290, i64 0, !dbg !3829
  %292 = load i8*, i8** %291, align 8, !dbg !3829
  %293 = load i8**, i8*** %11, align 8, !dbg !3830
  %294 = getelementptr inbounds i8*, i8** %293, i64 1, !dbg !3830
  %295 = load i8*, i8** %294, align 8, !dbg !3830
  %296 = load i8**, i8*** %11, align 8, !dbg !3831
  %297 = getelementptr inbounds i8*, i8** %296, i64 2, !dbg !3831
  %298 = load i8*, i8** %297, align 8, !dbg !3831
  %299 = load i8**, i8*** %11, align 8, !dbg !3832
  %300 = getelementptr inbounds i8*, i8** %299, i64 3, !dbg !3832
  %301 = load i8*, i8** %300, align 8, !dbg !3832
  %302 = load i8**, i8*** %11, align 8, !dbg !3833
  %303 = getelementptr inbounds i8*, i8** %302, i64 4, !dbg !3833
  %304 = load i8*, i8** %303, align 8, !dbg !3833
  %305 = load i8**, i8*** %11, align 8, !dbg !3834
  %306 = getelementptr inbounds i8*, i8** %305, i64 5, !dbg !3834
  %307 = load i8*, i8** %306, align 8, !dbg !3834
  %308 = load i8**, i8*** %11, align 8, !dbg !3835
  %309 = getelementptr inbounds i8*, i8** %308, i64 6, !dbg !3835
  %310 = load i8*, i8** %309, align 8, !dbg !3835
  %311 = load i8**, i8*** %11, align 8, !dbg !3836
  %312 = getelementptr inbounds i8*, i8** %311, i64 7, !dbg !3836
  %313 = load i8*, i8** %312, align 8, !dbg !3836
  %314 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %288, i8* %289, i8* %292, i8* %295, i8* %298, i8* %301, i8* %304, i8* %307, i8* %310, i8* %313), !dbg !3837
  %315 = load i32, i32* @x.57
  %316 = load i32, i32* @y.58
  %317 = sub i32 %315, 1
  %318 = mul i32 %315, %317
  %319 = urem i32 %318, 2
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %320, %321
  br i1 %322, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %385, !dbg !3838

323:                                              ; preds = %originalBBpart28
  %324 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3839
  %325 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.120, i64 0, i64 0)) #10, !dbg !3840
  %326 = load i8**, i8*** %11, align 8, !dbg !3841
  %327 = getelementptr inbounds i8*, i8** %326, i64 0, !dbg !3841
  %328 = load i8*, i8** %327, align 8, !dbg !3841
  %329 = load i8**, i8*** %11, align 8, !dbg !3842
  %330 = getelementptr inbounds i8*, i8** %329, i64 1, !dbg !3842
  %331 = load i8*, i8** %330, align 8, !dbg !3842
  %332 = load i8**, i8*** %11, align 8, !dbg !3843
  %333 = getelementptr inbounds i8*, i8** %332, i64 2, !dbg !3843
  %334 = load i8*, i8** %333, align 8, !dbg !3843
  %335 = load i8**, i8*** %11, align 8, !dbg !3844
  %336 = getelementptr inbounds i8*, i8** %335, i64 3, !dbg !3844
  %337 = load i8*, i8** %336, align 8, !dbg !3844
  %338 = load i8**, i8*** %11, align 8, !dbg !3845
  %339 = getelementptr inbounds i8*, i8** %338, i64 4, !dbg !3845
  %340 = load i8*, i8** %339, align 8, !dbg !3845
  %341 = load i8**, i8*** %11, align 8, !dbg !3846
  %342 = getelementptr inbounds i8*, i8** %341, i64 5, !dbg !3846
  %343 = load i8*, i8** %342, align 8, !dbg !3846
  %344 = load i8**, i8*** %11, align 8, !dbg !3847
  %345 = getelementptr inbounds i8*, i8** %344, i64 6, !dbg !3847
  %346 = load i8*, i8** %345, align 8, !dbg !3847
  %347 = load i8**, i8*** %11, align 8, !dbg !3848
  %348 = getelementptr inbounds i8*, i8** %347, i64 7, !dbg !3848
  %349 = load i8*, i8** %348, align 8, !dbg !3848
  %350 = load i8**, i8*** %11, align 8, !dbg !3849
  %351 = getelementptr inbounds i8*, i8** %350, i64 8, !dbg !3849
  %352 = load i8*, i8** %351, align 8, !dbg !3849
  %353 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %324, i8* %325, i8* %328, i8* %331, i8* %334, i8* %337, i8* %340, i8* %343, i8* %346, i8* %349, i8* %352), !dbg !3850
  br label %385, !dbg !3851

354:                                              ; preds = %originalBBpart28
  %355 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3852
  %356 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.121, i64 0, i64 0)) #10, !dbg !3853
  %357 = load i8**, i8*** %11, align 8, !dbg !3854
  %358 = getelementptr inbounds i8*, i8** %357, i64 0, !dbg !3854
  %359 = load i8*, i8** %358, align 8, !dbg !3854
  %360 = load i8**, i8*** %11, align 8, !dbg !3855
  %361 = getelementptr inbounds i8*, i8** %360, i64 1, !dbg !3855
  %362 = load i8*, i8** %361, align 8, !dbg !3855
  %363 = load i8**, i8*** %11, align 8, !dbg !3856
  %364 = getelementptr inbounds i8*, i8** %363, i64 2, !dbg !3856
  %365 = load i8*, i8** %364, align 8, !dbg !3856
  %366 = load i8**, i8*** %11, align 8, !dbg !3857
  %367 = getelementptr inbounds i8*, i8** %366, i64 3, !dbg !3857
  %368 = load i8*, i8** %367, align 8, !dbg !3857
  %369 = load i8**, i8*** %11, align 8, !dbg !3858
  %370 = getelementptr inbounds i8*, i8** %369, i64 4, !dbg !3858
  %371 = load i8*, i8** %370, align 8, !dbg !3858
  %372 = load i8**, i8*** %11, align 8, !dbg !3859
  %373 = getelementptr inbounds i8*, i8** %372, i64 5, !dbg !3859
  %374 = load i8*, i8** %373, align 8, !dbg !3859
  %375 = load i8**, i8*** %11, align 8, !dbg !3860
  %376 = getelementptr inbounds i8*, i8** %375, i64 6, !dbg !3860
  %377 = load i8*, i8** %376, align 8, !dbg !3860
  %378 = load i8**, i8*** %11, align 8, !dbg !3861
  %379 = getelementptr inbounds i8*, i8** %378, i64 7, !dbg !3861
  %380 = load i8*, i8** %379, align 8, !dbg !3861
  %381 = load i8**, i8*** %11, align 8, !dbg !3862
  %382 = getelementptr inbounds i8*, i8** %381, i64 8, !dbg !3862
  %383 = load i8*, i8** %382, align 8, !dbg !3862
  %384 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %355, i8* %356, i8* %359, i8* %362, i8* %365, i8* %368, i8* %371, i8* %374, i8* %377, i8* %380, i8* %383), !dbg !3863
  br label %385, !dbg !3864

385:                                              ; preds = %354, %323, %originalBBpart232, %originalBBpart228, %originalBBpart224, %originalBBpart220, %originalBBpart216, %originalBBpart212, %94, %87, %86
  %386 = load i32, i32* @x.57
  %387 = load i32, i32* @y.58
  %388 = sub i32 %386, 1
  %389 = mul i32 %386, %388
  %390 = urem i32 %389, 2
  %391 = icmp eq i32 %390, 0
  %392 = icmp slt i32 %387, 10
  %393 = or i1 %391, %392
  br i1 %393, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %385, %originalBB34alteredBB
  %394 = load i32, i32* @x.57
  %395 = load i32, i32* @y.58
  %396 = sub i32 %394, 1
  %397 = mul i32 %394, %396
  %398 = urem i32 %397, 2
  %399 = icmp eq i32 %398, 0
  %400 = icmp slt i32 %395, 10
  %401 = or i1 %399, %400
  br i1 %401, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  ret void, !dbg !3865

originalBBalteredBB:                              ; preds = %originalBB, %15
  %402 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3750
  %403 = load i8*, i8** %8, align 8, !dbg !3751
  %404 = load i8*, i8** %9, align 8, !dbg !3752
  %405 = load i8*, i8** %10, align 8, !dbg !3753
  %406 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %402, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.106, i64 0, i64 0), i8* %403, i8* %404, i8* %405), !dbg !3754
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %407 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3755
  %408 = load i8*, i8** %9, align 8, !dbg !3756
  %409 = load i8*, i8** %10, align 8, !dbg !3757
  %410 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %407, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.107, i64 0, i64 0), i8* %408, i8* %409), !dbg !3758
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %58
  %411 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3759
  %412 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.108, i64 0, i64 0)) #10, !dbg !3760
  %413 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %411, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %412, i32 2020), !dbg !3761
  %414 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3762
  %415 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.109, i64 0, i64 0), %struct._IO_FILE* %414), !dbg !3762
  %416 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3763
  %417 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.110, i64 0, i64 0)) #10, !dbg !3764
  %418 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %416, i8* %417, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.111, i64 0, i64 0)), !dbg !3765
  %419 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3766
  %420 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.109, i64 0, i64 0), %struct._IO_FILE* %419), !dbg !3766
  %421 = load i64, i64* %12, align 8, !dbg !3767
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %104
  %422 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3782
  %423 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.114, i64 0, i64 0)) #10, !dbg !3783
  %424 = load i8**, i8*** %11, align 8, !dbg !3784
  %425 = getelementptr inbounds i8*, i8** %424, i64 0, !dbg !3784
  %426 = load i8*, i8** %425, align 8, !dbg !3784
  %427 = load i8**, i8*** %11, align 8, !dbg !3785
  %428 = getelementptr inbounds i8*, i8** %427, i64 1, !dbg !3785
  %429 = load i8*, i8** %428, align 8, !dbg !3785
  %430 = load i8**, i8*** %11, align 8, !dbg !3786
  %431 = getelementptr inbounds i8*, i8** %430, i64 2, !dbg !3786
  %432 = load i8*, i8** %431, align 8, !dbg !3786
  %433 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %422, i8* %423, i8* %426, i8* %429, i8* %432), !dbg !3787
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %133
  %434 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3789
  %435 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.115, i64 0, i64 0)) #10, !dbg !3790
  %436 = load i8**, i8*** %11, align 8, !dbg !3791
  %437 = getelementptr inbounds i8*, i8** %436, i64 0, !dbg !3791
  %438 = load i8*, i8** %437, align 8, !dbg !3791
  %439 = load i8**, i8*** %11, align 8, !dbg !3792
  %440 = getelementptr inbounds i8*, i8** %439, i64 1, !dbg !3792
  %441 = load i8*, i8** %440, align 8, !dbg !3792
  %442 = load i8**, i8*** %11, align 8, !dbg !3793
  %443 = getelementptr inbounds i8*, i8** %442, i64 2, !dbg !3793
  %444 = load i8*, i8** %443, align 8, !dbg !3793
  %445 = load i8**, i8*** %11, align 8, !dbg !3794
  %446 = getelementptr inbounds i8*, i8** %445, i64 3, !dbg !3794
  %447 = load i8*, i8** %446, align 8, !dbg !3794
  %448 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %434, i8* %435, i8* %438, i8* %441, i8* %444, i8* %447), !dbg !3795
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %165
  %449 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3797
  %450 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.116, i64 0, i64 0)) #10, !dbg !3798
  %451 = load i8**, i8*** %11, align 8, !dbg !3799
  %452 = getelementptr inbounds i8*, i8** %451, i64 0, !dbg !3799
  %453 = load i8*, i8** %452, align 8, !dbg !3799
  %454 = load i8**, i8*** %11, align 8, !dbg !3800
  %455 = getelementptr inbounds i8*, i8** %454, i64 1, !dbg !3800
  %456 = load i8*, i8** %455, align 8, !dbg !3800
  %457 = load i8**, i8*** %11, align 8, !dbg !3801
  %458 = getelementptr inbounds i8*, i8** %457, i64 2, !dbg !3801
  %459 = load i8*, i8** %458, align 8, !dbg !3801
  %460 = load i8**, i8*** %11, align 8, !dbg !3802
  %461 = getelementptr inbounds i8*, i8** %460, i64 3, !dbg !3802
  %462 = load i8*, i8** %461, align 8, !dbg !3802
  %463 = load i8**, i8*** %11, align 8, !dbg !3803
  %464 = getelementptr inbounds i8*, i8** %463, i64 4, !dbg !3803
  %465 = load i8*, i8** %464, align 8, !dbg !3803
  %466 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %449, i8* %450, i8* %453, i8* %456, i8* %459, i8* %462, i8* %465), !dbg !3804
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %200
  %467 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3806
  %468 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.117, i64 0, i64 0)) #10, !dbg !3807
  %469 = load i8**, i8*** %11, align 8, !dbg !3808
  %470 = getelementptr inbounds i8*, i8** %469, i64 0, !dbg !3808
  %471 = load i8*, i8** %470, align 8, !dbg !3808
  %472 = load i8**, i8*** %11, align 8, !dbg !3809
  %473 = getelementptr inbounds i8*, i8** %472, i64 1, !dbg !3809
  %474 = load i8*, i8** %473, align 8, !dbg !3809
  %475 = load i8**, i8*** %11, align 8, !dbg !3810
  %476 = getelementptr inbounds i8*, i8** %475, i64 2, !dbg !3810
  %477 = load i8*, i8** %476, align 8, !dbg !3810
  %478 = load i8**, i8*** %11, align 8, !dbg !3811
  %479 = getelementptr inbounds i8*, i8** %478, i64 3, !dbg !3811
  %480 = load i8*, i8** %479, align 8, !dbg !3811
  %481 = load i8**, i8*** %11, align 8, !dbg !3812
  %482 = getelementptr inbounds i8*, i8** %481, i64 4, !dbg !3812
  %483 = load i8*, i8** %482, align 8, !dbg !3812
  %484 = load i8**, i8*** %11, align 8, !dbg !3813
  %485 = getelementptr inbounds i8*, i8** %484, i64 5, !dbg !3813
  %486 = load i8*, i8** %485, align 8, !dbg !3813
  %487 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %467, i8* %468, i8* %471, i8* %474, i8* %477, i8* %480, i8* %483, i8* %486), !dbg !3814
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %238
  %488 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3816
  %489 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.118, i64 0, i64 0)) #10, !dbg !3817
  %490 = load i8**, i8*** %11, align 8, !dbg !3818
  %491 = getelementptr inbounds i8*, i8** %490, i64 0, !dbg !3818
  %492 = load i8*, i8** %491, align 8, !dbg !3818
  %493 = load i8**, i8*** %11, align 8, !dbg !3819
  %494 = getelementptr inbounds i8*, i8** %493, i64 1, !dbg !3819
  %495 = load i8*, i8** %494, align 8, !dbg !3819
  %496 = load i8**, i8*** %11, align 8, !dbg !3820
  %497 = getelementptr inbounds i8*, i8** %496, i64 2, !dbg !3820
  %498 = load i8*, i8** %497, align 8, !dbg !3820
  %499 = load i8**, i8*** %11, align 8, !dbg !3821
  %500 = getelementptr inbounds i8*, i8** %499, i64 3, !dbg !3821
  %501 = load i8*, i8** %500, align 8, !dbg !3821
  %502 = load i8**, i8*** %11, align 8, !dbg !3822
  %503 = getelementptr inbounds i8*, i8** %502, i64 4, !dbg !3822
  %504 = load i8*, i8** %503, align 8, !dbg !3822
  %505 = load i8**, i8*** %11, align 8, !dbg !3823
  %506 = getelementptr inbounds i8*, i8** %505, i64 5, !dbg !3823
  %507 = load i8*, i8** %506, align 8, !dbg !3823
  %508 = load i8**, i8*** %11, align 8, !dbg !3824
  %509 = getelementptr inbounds i8*, i8** %508, i64 6, !dbg !3824
  %510 = load i8*, i8** %509, align 8, !dbg !3824
  %511 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %488, i8* %489, i8* %492, i8* %495, i8* %498, i8* %501, i8* %504, i8* %507, i8* %510), !dbg !3825
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %279
  %512 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3827
  %513 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.119, i64 0, i64 0)) #10, !dbg !3828
  %514 = load i8**, i8*** %11, align 8, !dbg !3829
  %515 = getelementptr inbounds i8*, i8** %514, i64 0, !dbg !3829
  %516 = load i8*, i8** %515, align 8, !dbg !3829
  %517 = load i8**, i8*** %11, align 8, !dbg !3830
  %518 = getelementptr inbounds i8*, i8** %517, i64 1, !dbg !3830
  %519 = load i8*, i8** %518, align 8, !dbg !3830
  %520 = load i8**, i8*** %11, align 8, !dbg !3831
  %521 = getelementptr inbounds i8*, i8** %520, i64 2, !dbg !3831
  %522 = load i8*, i8** %521, align 8, !dbg !3831
  %523 = load i8**, i8*** %11, align 8, !dbg !3832
  %524 = getelementptr inbounds i8*, i8** %523, i64 3, !dbg !3832
  %525 = load i8*, i8** %524, align 8, !dbg !3832
  %526 = load i8**, i8*** %11, align 8, !dbg !3833
  %527 = getelementptr inbounds i8*, i8** %526, i64 4, !dbg !3833
  %528 = load i8*, i8** %527, align 8, !dbg !3833
  %529 = load i8**, i8*** %11, align 8, !dbg !3834
  %530 = getelementptr inbounds i8*, i8** %529, i64 5, !dbg !3834
  %531 = load i8*, i8** %530, align 8, !dbg !3834
  %532 = load i8**, i8*** %11, align 8, !dbg !3835
  %533 = getelementptr inbounds i8*, i8** %532, i64 6, !dbg !3835
  %534 = load i8*, i8** %533, align 8, !dbg !3835
  %535 = load i8**, i8*** %11, align 8, !dbg !3836
  %536 = getelementptr inbounds i8*, i8** %535, i64 7, !dbg !3836
  %537 = load i8*, i8** %536, align 8, !dbg !3836
  %538 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %512, i8* %513, i8* %516, i8* %519, i8* %522, i8* %525, i8* %528, i8* %531, i8* %534, i8* %537), !dbg !3837
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %385
  br label %originalBB34
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_va(%struct._IO_FILE*, i8*, i8*, i8*, %struct.__va_list_tag*) #4 !dbg !3866 {
  %6 = load i32, i32* @x.59
  %7 = load i32, i32* @y.60
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = alloca %struct._IO_FILE*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca %struct.__va_list_tag*, align 8
  %19 = alloca i64, align 8
  %20 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %14, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %14, metadata !3876, metadata !DIExpression()), !dbg !3877
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3878, metadata !DIExpression()), !dbg !3879
  store i8* %2, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3880, metadata !DIExpression()), !dbg !3881
  store i8* %3, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !3882, metadata !DIExpression()), !dbg !3883
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %18, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %18, metadata !3884, metadata !DIExpression()), !dbg !3885
  call void @llvm.dbg.declare(metadata i64* %19, metadata !3886, metadata !DIExpression()), !dbg !3887
  call void @llvm.dbg.declare(metadata [10 x i8*]* %20, metadata !3888, metadata !DIExpression()), !dbg !3890
  store i64 0, i64* %19, align 8, !dbg !3891
  %21 = load i32, i32* @x.59
  %22 = load i32, i32* @y.60
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %29, !dbg !3893

29:                                               ; preds = %originalBBpart237, %originalBBpart2
  %30 = load i32, i32* @x.59
  %31 = load i32, i32* @y.60
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i64, i64* %19, align 8, !dbg !3894
  %39 = icmp ult i64 %38, 10, !dbg !3896
  %40 = load i32, i32* @x.59
  %41 = load i32, i32* @y.60
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %39, label %48, label %134, !dbg !3897

48:                                               ; preds = %originalBBpart24
  %49 = load i32, i32* @x.59
  %50 = load i32, i32* @y.60
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !3898
  %58 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 0, !dbg !3898
  %59 = load i32, i32* %58, align 8, !dbg !3898
  %60 = icmp ule i32 %59, 40, !dbg !3898
  %61 = load i32, i32* @x.59
  %62 = load i32, i32* @y.60
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %60, label %69, label %91, !dbg !3898

69:                                               ; preds = %originalBBpart28
  %70 = load i32, i32* @x.59
  %71 = load i32, i32* @y.60
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %69, %originalBB10alteredBB
  %78 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !3898
  %79 = load i8*, i8** %78, align 8, !dbg !3898
  %80 = getelementptr i8, i8* %79, i32 %59, !dbg !3898
  %81 = bitcast i8* %80 to i8**, !dbg !3898
  %82 = add i32 %59, 8, !dbg !3898
  store i32 %82, i32* %58, align 8, !dbg !3898
  %83 = load i32, i32* @x.59
  %84 = load i32, i32* @y.60
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart214, label %originalBB10alteredBB

originalBBpart214:                                ; preds = %originalBB10
  br label %112, !dbg !3898

91:                                               ; preds = %originalBBpart28
  %92 = load i32, i32* @x.59
  %93 = load i32, i32* @y.60
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB16, label %originalBB16alteredBB

originalBB16:                                     ; preds = %91, %originalBB16alteredBB
  %100 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !3898
  %101 = load i8*, i8** %100, align 8, !dbg !3898
  %102 = bitcast i8* %101 to i8**, !dbg !3898
  %103 = getelementptr i8, i8* %101, i32 8, !dbg !3898
  store i8* %103, i8** %100, align 8, !dbg !3898
  %104 = load i32, i32* @x.59
  %105 = load i32, i32* @y.60
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart218, label %originalBB16alteredBB

originalBBpart218:                                ; preds = %originalBB16
  br label %112, !dbg !3898

112:                                              ; preds = %originalBBpart218, %originalBBpart214
  %113 = phi i8** [ %81, %originalBBpart214 ], [ %102, %originalBBpart218 ], !dbg !3898
  %114 = load i32, i32* @x.59
  %115 = load i32, i32* @y.60
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %112, %originalBB20alteredBB
  %122 = load i8*, i8** %113, align 8, !dbg !3898
  %123 = load i64, i64* %19, align 8, !dbg !3899
  %124 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %123, !dbg !3900
  store i8* %122, i8** %124, align 8, !dbg !3901
  %125 = icmp ne i8* %122, null, !dbg !3902
  %126 = load i32, i32* @x.59
  %127 = load i32, i32* @y.60
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  br label %134

134:                                              ; preds = %originalBBpart222, %originalBBpart24
  %135 = phi i1 [ false, %originalBBpart24 ], [ %125, %originalBBpart222 ], !dbg !3903
  br i1 %135, label %136, label %172, !dbg !3904

136:                                              ; preds = %134
  %137 = load i32, i32* @x.59
  %138 = load i32, i32* @y.60
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %136, %originalBB24alteredBB
  %145 = load i32, i32* @x.59
  %146 = load i32, i32* @y.60
  %147 = sub i32 %145, 1
  %148 = mul i32 %145, %147
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %150, %151
  br i1 %152, label %originalBBpart227, label %originalBB24alteredBB

originalBBpart227:                                ; preds = %originalBB24
  br label %153, !dbg !3904

153:                                              ; preds = %originalBBpart227
  %154 = load i32, i32* @x.59
  %155 = load i32, i32* @y.60
  %156 = sub i32 %154, 1
  %157 = mul i32 %154, %156
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %159, %160
  br i1 %161, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %153, %originalBB29alteredBB
  %162 = load i64, i64* %19, align 8, !dbg !3905
  %163 = add i64 %162, 1, !dbg !3905
  store i64 %163, i64* %19, align 8, !dbg !3905
  %164 = load i32, i32* @x.59
  %165 = load i32, i32* @y.60
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBBpart237, label %originalBB29alteredBB

originalBBpart237:                                ; preds = %originalBB29
  br label %29, !dbg !3906, !llvm.loop !3907

172:                                              ; preds = %134
  %173 = load i32, i32* @x.59
  %174 = load i32, i32* @y.60
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %172, %originalBB39alteredBB
  %181 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !3909
  %182 = load i8*, i8** %15, align 8, !dbg !3910
  %183 = load i8*, i8** %16, align 8, !dbg !3911
  %184 = load i8*, i8** %17, align 8, !dbg !3912
  %185 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !3913
  %186 = load i64, i64* %19, align 8, !dbg !3914
  call void @version_etc_arn(%struct._IO_FILE* %181, i8* %182, i8* %183, i8* %184, i8** %185, i64 %186), !dbg !3915
  %187 = load i32, i32* @x.59
  %188 = load i32, i32* @y.60
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  ret void, !dbg !3916

originalBBalteredBB:                              ; preds = %originalBB, %5
  %195 = alloca %struct._IO_FILE*, align 8
  %196 = alloca i8*, align 8
  %197 = alloca i8*, align 8
  %198 = alloca i8*, align 8
  %199 = alloca %struct.__va_list_tag*, align 8
  %200 = alloca i64, align 8
  %201 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %195, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %195, metadata !3917, metadata !DIExpression()), !dbg !3877
  store i8* %1, i8** %196, align 8
  call void @llvm.dbg.declare(metadata i8** %196, metadata !3963, metadata !DIExpression()), !dbg !3879
  store i8* %2, i8** %197, align 8
  call void @llvm.dbg.declare(metadata i8** %197, metadata !3964, metadata !DIExpression()), !dbg !3881
  store i8* %3, i8** %198, align 8
  call void @llvm.dbg.declare(metadata i8** %198, metadata !3965, metadata !DIExpression()), !dbg !3883
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %199, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %199, metadata !3966, metadata !DIExpression()), !dbg !3885
  call void @llvm.dbg.declare(metadata i64* %200, metadata !3967, metadata !DIExpression()), !dbg !3887
  call void @llvm.dbg.declare(metadata [10 x i8*]* %201, metadata !3968, metadata !DIExpression()), !dbg !3890
  store i64 0, i64* %200, align 8, !dbg !3891
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %202 = load i64, i64* %19, align 8, !dbg !3894
  %203 = icmp ult i64 %202, 10, !dbg !3896
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %204 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !3898
  %205 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %204, i32 0, i32 0, !dbg !3898
  %206 = load i32, i32* %205, align 8, !dbg !3898
  %207 = icmp ule i32 %206, 40, !dbg !3898
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %69
  %208 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !3898
  %209 = load i8*, i8** %208, align 8, !dbg !3898
  %210 = getelementptr i8, i8* %209, i32 %59, !dbg !3898
  %211 = bitcast i8* %210 to i8**, !dbg !3898
  %_ = shl i32 %59, 8
  %_11 = sub i32 %59, 8
  %gen = mul i32 %_11, 8
  %_12 = shl i32 %59, 8
  %212 = add i32 %59, 8, !dbg !3898
  store i32 %212, i32* %58, align 8, !dbg !3898
  br label %originalBB10

originalBB16alteredBB:                            ; preds = %originalBB16, %91
  %213 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !3898
  %214 = load i8*, i8** %213, align 8, !dbg !3898
  %215 = bitcast i8* %214 to i8**, !dbg !3898
  %216 = getelementptr i8, i8* %214, i32 8, !dbg !3898
  store i8* %216, i8** %213, align 8, !dbg !3898
  br label %originalBB16

originalBB20alteredBB:                            ; preds = %originalBB20, %112
  %217 = load i8*, i8** %113, align 8, !dbg !3898
  %218 = load i64, i64* %19, align 8, !dbg !3899
  %219 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %218, !dbg !3900
  store i8* %217, i8** %219, align 8, !dbg !3901
  %220 = icmp ne i8* %217, null, !dbg !3902
  br label %originalBB20

originalBB24alteredBB:                            ; preds = %originalBB24, %136
  br label %originalBB24

originalBB29alteredBB:                            ; preds = %originalBB29, %153
  %221 = load i64, i64* %19, align 8, !dbg !3905
  %_30 = sub i64 0, %221
  %gen31 = add i64 %_30, 1
  %_32 = sub i64 %221, 1
  %gen33 = mul i64 %_32, 1
  %_34 = sub i64 %221, 1
  %gen35 = mul i64 %_34, 1
  %222 = add i64 %221, 1, !dbg !3905
  store i64 %222, i64* %19, align 8, !dbg !3905
  br label %originalBB29

originalBB39alteredBB:                            ; preds = %originalBB39, %172
  %223 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !3909
  %224 = load i8*, i8** %15, align 8, !dbg !3910
  %225 = load i8*, i8** %16, align 8, !dbg !3911
  %226 = load i8*, i8** %17, align 8, !dbg !3912
  %227 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !3913
  %228 = load i64, i64* %19, align 8, !dbg !3914
  call void @version_etc_arn(%struct._IO_FILE* %223, i8* %224, i8* %225, i8* %226, i8** %227, i64 %228), !dbg !3915
  br label %originalBB39
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc(%struct._IO_FILE*, i8*, i8*, i8*, ...) #4 !dbg !3969 {
  %5 = alloca %struct._IO_FILE*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %5, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %5, metadata !3972, metadata !DIExpression()), !dbg !3973
  store i8* %1, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !3974, metadata !DIExpression()), !dbg !3975
  store i8* %2, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !3976, metadata !DIExpression()), !dbg !3977
  store i8* %3, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !3978, metadata !DIExpression()), !dbg !3979
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %9, metadata !3980, metadata !DIExpression()), !dbg !3986
  %10 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %9, i64 0, i64 0, !dbg !3987
  %11 = bitcast %struct.__va_list_tag* %10 to i8*, !dbg !3987
  call void @llvm.va_start(i8* %11), !dbg !3987
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !3988
  %13 = load i8*, i8** %6, align 8, !dbg !3989
  %14 = load i8*, i8** %7, align 8, !dbg !3990
  %15 = load i8*, i8** %8, align 8, !dbg !3991
  %16 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %9, i64 0, i64 0, !dbg !3992
  call void @version_etc_va(%struct._IO_FILE* %12, i8* %13, i8* %14, i8* %15, %struct.__va_list_tag* %16), !dbg !3993
  %17 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %9, i64 0, i64 0, !dbg !3994
  %18 = bitcast %struct.__va_list_tag* %17 to i8*, !dbg !3994
  call void @llvm.va_end(i8* %18), !dbg !3994
  ret void, !dbg !3995
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xmalloc(i64) #4 !dbg !3996 {
  %2 = alloca i64, align 8
  %3 = alloca i8*, align 8
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !4000, metadata !DIExpression()), !dbg !4001
  call void @llvm.dbg.declare(metadata i8** %3, metadata !4002, metadata !DIExpression()), !dbg !4003
  %4 = load i64, i64* %2, align 8, !dbg !4004
  %5 = call noalias i8* @malloc(i64 %4) #10, !dbg !4005
  store i8* %5, i8** %3, align 8, !dbg !4003
  %6 = load i8*, i8** %3, align 8, !dbg !4006
  %7 = icmp ne i8* %6, null, !dbg !4006
  br i1 %7, label %44, label %8, !dbg !4008

8:                                                ; preds = %1
  %9 = load i32, i32* @x.63
  %10 = load i32, i32* @y.64
  %11 = sub i32 %9, 1
  %12 = mul i32 %9, %11
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %10, 10
  %16 = or i1 %14, %15
  br i1 %16, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %8, %originalBBalteredBB
  %17 = load i64, i64* %2, align 8, !dbg !4009
  %18 = icmp ne i64 %17, 0, !dbg !4010
  %19 = load i32, i32* @x.63
  %20 = load i32, i32* @y.64
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %44, !dbg !4011

27:                                               ; preds = %originalBBpart2
  %28 = load i32, i32* @x.63
  %29 = load i32, i32* @y.64
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  call void @xalloc_die() #14, !dbg !4012
  %36 = load i32, i32* @x.63
  %37 = load i32, i32* @y.64
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !4012

44:                                               ; preds = %originalBBpart2, %1
  %45 = load i32, i32* @x.63
  %46 = load i32, i32* @y.64
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  %53 = load i8*, i8** %3, align 8, !dbg !4013
  %54 = load i32, i32* @x.63
  %55 = load i32, i32* @y.64
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i8* %53, !dbg !4014

originalBBalteredBB:                              ; preds = %originalBB, %8
  %62 = load i64, i64* %2, align 8, !dbg !4009
  %63 = icmp ne i64 %62, 0, !dbg !4010
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  call void @xalloc_die() #14, !dbg !4012
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  %64 = load i8*, i8** %3, align 8, !dbg !4013
  br label %originalBB6
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xrealloc(i8*, i64) #4 !dbg !4015 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !4018, metadata !DIExpression()), !dbg !4019
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !4020, metadata !DIExpression()), !dbg !4021
  %6 = load i64, i64* %5, align 8, !dbg !4022
  %7 = icmp ne i64 %6, 0, !dbg !4022
  br i1 %7, label %45, label %8, !dbg !4024

8:                                                ; preds = %2
  %9 = load i32, i32* @x.65
  %10 = load i32, i32* @y.66
  %11 = sub i32 %9, 1
  %12 = mul i32 %9, %11
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %10, 10
  %16 = or i1 %14, %15
  br i1 %16, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %8, %originalBBalteredBB
  %17 = load i8*, i8** %4, align 8, !dbg !4025
  %18 = icmp ne i8* %17, null, !dbg !4025
  %19 = load i32, i32* @x.65
  %20 = load i32, i32* @y.66
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %45, !dbg !4026

27:                                               ; preds = %originalBBpart2
  %28 = load i32, i32* @x.65
  %29 = load i32, i32* @y.66
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load i8*, i8** %4, align 8, !dbg !4027
  call void @free(i8* %36) #10, !dbg !4029
  store i8* null, i8** %3, align 8, !dbg !4030
  %37 = load i32, i32* @x.65
  %38 = load i32, i32* @y.66
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %73, !dbg !4030

45:                                               ; preds = %originalBBpart2, %2
  %46 = load i32, i32* @x.65
  %47 = load i32, i32* @y.66
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %45, %originalBB6alteredBB
  %54 = load i8*, i8** %4, align 8, !dbg !4031
  %55 = load i64, i64* %5, align 8, !dbg !4032
  %56 = call i8* @realloc(i8* %54, i64 %55) #10, !dbg !4033
  store i8* %56, i8** %4, align 8, !dbg !4034
  %57 = load i8*, i8** %4, align 8, !dbg !4035
  %58 = icmp ne i8* %57, null, !dbg !4035
  %59 = load i32, i32* @x.65
  %60 = load i32, i32* @y.66
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %58, label %71, label %67, !dbg !4037

67:                                               ; preds = %originalBBpart28
  %68 = load i64, i64* %5, align 8, !dbg !4038
  %69 = icmp ne i64 %68, 0, !dbg !4038
  br i1 %69, label %70, label %71, !dbg !4039

70:                                               ; preds = %67
  call void @xalloc_die() #14, !dbg !4040
  unreachable, !dbg !4040

71:                                               ; preds = %67, %originalBBpart28
  %72 = load i8*, i8** %4, align 8, !dbg !4041
  store i8* %72, i8** %3, align 8, !dbg !4042
  br label %73, !dbg !4042

73:                                               ; preds = %71, %originalBBpart24
  %74 = load i32, i32* @x.65
  %75 = load i32, i32* @y.66
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %73, %originalBB10alteredBB
  %82 = load i8*, i8** %3, align 8, !dbg !4043
  %83 = load i32, i32* @x.65
  %84 = load i32, i32* @y.66
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %82, !dbg !4043

originalBBalteredBB:                              ; preds = %originalBB, %8
  %91 = load i8*, i8** %4, align 8, !dbg !4025
  %92 = icmp ne i8* %91, null, !dbg !4025
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  %93 = load i8*, i8** %4, align 8, !dbg !4027
  call void @free(i8* %93) #10, !dbg !4029
  store i8* null, i8** %3, align 8, !dbg !4030
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %45
  %94 = load i8*, i8** %4, align 8, !dbg !4031
  %95 = load i64, i64* %5, align 8, !dbg !4032
  %96 = call i8* @realloc(i8* %94, i64 %95) #10, !dbg !4033
  store i8* %96, i8** %4, align 8, !dbg !4034
  %97 = load i8*, i8** %4, align 8, !dbg !4035
  %98 = icmp ne i8* %97, null, !dbg !4035
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %73
  %99 = load i8*, i8** %3, align 8, !dbg !4043
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xcharalloc(i64) #4 !dbg !4044 {
  %2 = load i32, i32* @x.67
  %3 = load i32, i32* @y.68
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !4048, metadata !DIExpression()), !dbg !4049
  %11 = load i64, i64* %10, align 8, !dbg !4050
  %12 = call noalias i8* @xmalloc(i64 %11), !dbg !4050
  %13 = load i32, i32* @x.67
  %14 = load i32, i32* @y.68
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !4051

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i64, align 8
  store i64 %0, i64* %21, align 8
  call void @llvm.dbg.declare(metadata i64* %21, metadata !4052, metadata !DIExpression()), !dbg !4049
  %22 = load i64, i64* %21, align 8, !dbg !4050
  %23 = call noalias i8* @xmalloc(i64 %22), !dbg !4050
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xmemdup(i8*, i64) #4 !dbg !4055 {
  %3 = load i32, i32* @x.69
  %4 = load i32, i32* @y.70
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !4060, metadata !DIExpression()), !dbg !4061
  store i64 %1, i64* %12, align 8
  call void @llvm.dbg.declare(metadata i64* %12, metadata !4062, metadata !DIExpression()), !dbg !4063
  %13 = load i64, i64* %12, align 8, !dbg !4064
  %14 = call noalias i8* @xmalloc(i64 %13), !dbg !4065
  %15 = load i8*, i8** %11, align 8, !dbg !4066
  %16 = load i64, i64* %12, align 8, !dbg !4067
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %15, i64 %16, i1 false), !dbg !4068
  %17 = load i32, i32* @x.69
  %18 = load i32, i32* @y.70
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !4069

originalBBalteredBB:                              ; preds = %originalBB, %2
  %25 = alloca i8*, align 8
  %26 = alloca i64, align 8
  store i8* %0, i8** %25, align 8
  call void @llvm.dbg.declare(metadata i8** %25, metadata !4070, metadata !DIExpression()), !dbg !4061
  store i64 %1, i64* %26, align 8
  call void @llvm.dbg.declare(metadata i64* %26, metadata !4073, metadata !DIExpression()), !dbg !4063
  %27 = load i64, i64* %26, align 8, !dbg !4064
  %28 = call noalias i8* @xmalloc(i64 %27), !dbg !4065
  %29 = load i8*, i8** %25, align 8, !dbg !4066
  %30 = load i64, i64* %26, align 8, !dbg !4067
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %28, i8* align 1 %29, i64 %30, i1 false), !dbg !4068
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xstrdup(i8*) #4 !dbg !4074 {
  %2 = load i32, i32* @x.71
  %3 = load i32, i32* @y.72
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !4075, metadata !DIExpression()), !dbg !4076
  %11 = load i8*, i8** %10, align 8, !dbg !4077
  %12 = load i8*, i8** %10, align 8, !dbg !4078
  %13 = call i64 @strlen(i8* %12) #13, !dbg !4079
  %14 = add i64 %13, 1, !dbg !4080
  %15 = call i8* @xmemdup(i8* %11, i64 %14), !dbg !4081
  %16 = load i32, i32* @x.71
  %17 = load i32, i32* @y.72
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !4082

originalBBalteredBB:                              ; preds = %originalBB, %1
  %24 = alloca i8*, align 8
  store i8* %0, i8** %24, align 8
  call void @llvm.dbg.declare(metadata i8** %24, metadata !4083, metadata !DIExpression()), !dbg !4076
  %25 = load i8*, i8** %24, align 8, !dbg !4077
  %26 = load i8*, i8** %24, align 8, !dbg !4078
  %27 = call i64 @strlen(i8* %26) #13, !dbg !4079
  %_ = sub i64 %27, 1
  %gen = mul i64 %_, 1
  %_1 = shl i64 %27, 1
  %28 = add i64 %27, 1, !dbg !4080
  %29 = call i8* @xmemdup(i8* %25, i64 %28), !dbg !4081
  br label %originalBB
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @xalloc_die() #0 !dbg !4086 {
  %1 = load i32, i32* @x.73
  %2 = load i32, i32* @y.74
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = load volatile i32, i32* @exit_failure, align 4, !dbg !4088
  %10 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.136, i64 0, i64 0)) #10, !dbg !4089
  call void (i32, i32, i8*, ...) @error(i32 %9, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.137, i64 0, i64 0), i8* %10), !dbg !4090
  call void @abort() #12, !dbg !4091
  %11 = load i32, i32* @x.73
  %12 = load i32, i32* @y.74
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !4091

originalBBalteredBB:                              ; preds = %originalBB, %0
  %19 = load volatile i32, i32* @exit_failure, align 4, !dbg !4088
  %20 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.136, i64 0, i64 0)) #10, !dbg !4089
  call void (i32, i32, i8*, ...) @error(i32 %19, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.137, i64 0, i64 0), i8* %20), !dbg !4090
  call void @abort() #12, !dbg !4091
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xgetgroups(i8*, i32, i32**) #4 !dbg !4092 {
  %4 = load i32, i32* @x.75
  %5 = load i32, i32* @y.76
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32**, align 8
  %15 = alloca i32, align 4
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !4097, metadata !DIExpression()), !dbg !4098
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !4099, metadata !DIExpression()), !dbg !4100
  store i32** %2, i32*** %14, align 8
  call void @llvm.dbg.declare(metadata i32*** %14, metadata !4101, metadata !DIExpression()), !dbg !4102
  call void @llvm.dbg.declare(metadata i32* %15, metadata !4103, metadata !DIExpression()), !dbg !4104
  %16 = load i8*, i8** %12, align 8, !dbg !4105
  %17 = load i32, i32* %13, align 4, !dbg !4106
  %18 = load i32**, i32*** %14, align 8, !dbg !4107
  %19 = call i32 @mgetgroups(i8* %16, i32 %17, i32** %18), !dbg !4108
  store i32 %19, i32* %15, align 4, !dbg !4104
  %20 = load i32, i32* %15, align 4, !dbg !4109
  %21 = icmp eq i32 %20, -1, !dbg !4111
  %22 = load i32, i32* @x.75
  %23 = load i32, i32* @y.76
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %67, !dbg !4112

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.75
  %32 = load i32, i32* @y.76
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = call i32* @__errno_location() #15, !dbg !4113
  %40 = load i32, i32* %39, align 4, !dbg !4113
  %41 = icmp eq i32 %40, 12, !dbg !4114
  %42 = load i32, i32* @x.75
  %43 = load i32, i32* @y.76
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %41, label %50, label %67, !dbg !4115

50:                                               ; preds = %originalBBpart24
  %51 = load i32, i32* @x.75
  %52 = load i32, i32* @y.76
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %50, %originalBB6alteredBB
  call void @xalloc_die() #14, !dbg !4116
  %59 = load i32, i32* @x.75
  %60 = load i32, i32* @y.76
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !4116

67:                                               ; preds = %originalBBpart24, %originalBBpart2
  %68 = load i32, i32* @x.75
  %69 = load i32, i32* @y.76
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %67, %originalBB10alteredBB
  %76 = load i32, i32* %15, align 4, !dbg !4117
  %77 = load i32, i32* @x.75
  %78 = load i32, i32* @y.76
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i32 %76, !dbg !4118

originalBBalteredBB:                              ; preds = %originalBB, %3
  %85 = alloca i8*, align 8
  %86 = alloca i32, align 4
  %87 = alloca i32**, align 8
  %88 = alloca i32, align 4
  store i8* %0, i8** %85, align 8
  call void @llvm.dbg.declare(metadata i8** %85, metadata !4119, metadata !DIExpression()), !dbg !4098
  store i32 %1, i32* %86, align 4
  call void @llvm.dbg.declare(metadata i32* %86, metadata !4122, metadata !DIExpression()), !dbg !4100
  store i32** %2, i32*** %87, align 8
  call void @llvm.dbg.declare(metadata i32*** %87, metadata !4123, metadata !DIExpression()), !dbg !4102
  call void @llvm.dbg.declare(metadata i32* %88, metadata !4124, metadata !DIExpression()), !dbg !4104
  %89 = load i8*, i8** %85, align 8, !dbg !4105
  %90 = load i32, i32* %86, align 4, !dbg !4106
  %91 = load i32**, i32*** %87, align 8, !dbg !4107
  %92 = call i32 @mgetgroups(i8* %89, i32 %90, i32** %91), !dbg !4108
  store i32 %92, i32* %88, align 4, !dbg !4104
  %93 = load i32, i32* %88, align 4, !dbg !4109
  %94 = icmp eq i32 %93, -1, !dbg !4111
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %95 = call i32* @__errno_location() #15, !dbg !4113
  %96 = load i32, i32* %95, align 4, !dbg !4113
  %97 = icmp eq i32 %96, 12, !dbg !4114
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %50
  call void @xalloc_die() #14, !dbg !4116
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %67
  %98 = load i32, i32* %15, align 4, !dbg !4117
  br label %originalBB10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrtoul(i8*, i8**, i32, i64*, i8*) #4 !dbg !4125 {
  %6 = load i32, i32* @x.77
  %7 = load i32, i32* @y.78
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca i8**, align 8
  %17 = alloca i32, align 4
  %18 = alloca i64*, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i8*, align 8
  %21 = alloca i8**, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i8*, align 8
  %25 = alloca i8, align 1
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  store i8* %0, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !4131, metadata !DIExpression()), !dbg !4132
  store i8** %1, i8*** %16, align 8
  call void @llvm.dbg.declare(metadata i8*** %16, metadata !4133, metadata !DIExpression()), !dbg !4134
  store i32 %2, i32* %17, align 4
  call void @llvm.dbg.declare(metadata i32* %17, metadata !4135, metadata !DIExpression()), !dbg !4136
  store i64* %3, i64** %18, align 8
  call void @llvm.dbg.declare(metadata i64** %18, metadata !4137, metadata !DIExpression()), !dbg !4138
  store i8* %4, i8** %19, align 8
  call void @llvm.dbg.declare(metadata i8** %19, metadata !4139, metadata !DIExpression()), !dbg !4140
  call void @llvm.dbg.declare(metadata i8** %20, metadata !4141, metadata !DIExpression()), !dbg !4142
  call void @llvm.dbg.declare(metadata i8*** %21, metadata !4143, metadata !DIExpression()), !dbg !4144
  call void @llvm.dbg.declare(metadata i64* %22, metadata !4145, metadata !DIExpression()), !dbg !4146
  call void @llvm.dbg.declare(metadata i32* %23, metadata !4147, metadata !DIExpression()), !dbg !4148
  store i32 0, i32* %23, align 4, !dbg !4148
  %29 = load i32, i32* %17, align 4, !dbg !4149
  %30 = icmp sle i32 0, %29, !dbg !4149
  %31 = load i32, i32* @x.77
  %32 = load i32, i32* @y.78
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %30, label %39, label %43, !dbg !4149

39:                                               ; preds = %originalBBpart2
  %40 = load i32, i32* %17, align 4, !dbg !4149
  %41 = icmp sle i32 %40, 36, !dbg !4149
  br i1 %41, label %42, label %43, !dbg !4152

42:                                               ; preds = %39
  br label %60, !dbg !4152

43:                                               ; preds = %39, %originalBBpart2
  %44 = load i32, i32* @x.77
  %45 = load i32, i32* @y.78
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %43, %originalBB1alteredBB
  call void @__assert_fail(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.142, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.143, i64 0, i64 0), i32 84, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @__PRETTY_FUNCTION__.xstrtoul, i64 0, i64 0)) #12, !dbg !4149
  %52 = load i32, i32* @x.77
  %53 = load i32, i32* @y.78
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !4149

60:                                               ; preds = %42
  %61 = load i32, i32* @x.77
  %62 = load i32, i32* @y.78
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %60, %originalBB6alteredBB
  %69 = load i8**, i8*** %16, align 8, !dbg !4153
  %70 = icmp ne i8** %69, null, !dbg !4153
  %71 = load i32, i32* @x.77
  %72 = load i32, i32* @y.78
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %70, label %79, label %97, !dbg !4153

79:                                               ; preds = %originalBBpart28
  %80 = load i32, i32* @x.77
  %81 = load i32, i32* @y.78
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %79, %originalBB10alteredBB
  %88 = load i8**, i8*** %16, align 8, !dbg !4154
  %89 = load i32, i32* @x.77
  %90 = load i32, i32* @y.78
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %114, !dbg !4153

97:                                               ; preds = %originalBBpart28
  %98 = load i32, i32* @x.77
  %99 = load i32, i32* @y.78
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %97, %originalBB14alteredBB
  %106 = load i32, i32* @x.77
  %107 = load i32, i32* @y.78
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %114, !dbg !4153

114:                                              ; preds = %originalBBpart216, %originalBBpart212
  %115 = phi i8** [ %88, %originalBBpart212 ], [ %20, %originalBBpart216 ], !dbg !4153
  %116 = load i32, i32* @x.77
  %117 = load i32, i32* @y.78
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %114, %originalBB18alteredBB
  store i8** %115, i8*** %21, align 8, !dbg !4155
  %124 = call i32* @__errno_location() #15, !dbg !4156
  store i32 0, i32* %124, align 4, !dbg !4157
  call void @llvm.dbg.declare(metadata i8** %24, metadata !4158, metadata !DIExpression()), !dbg !4161
  %125 = load i8*, i8** %15, align 8, !dbg !4162
  store i8* %125, i8** %24, align 8, !dbg !4161
  call void @llvm.dbg.declare(metadata i8* %25, metadata !4163, metadata !DIExpression()), !dbg !4164
  %126 = load i8*, i8** %24, align 8, !dbg !4165
  %127 = load i8, i8* %126, align 1, !dbg !4166
  store i8 %127, i8* %25, align 1, !dbg !4164
  %128 = load i32, i32* @x.77
  %129 = load i32, i32* @y.78
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %136, !dbg !4167

136:                                              ; preds = %originalBBpart236, %originalBBpart220
  %137 = load i32, i32* @x.77
  %138 = load i32, i32* @y.78
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %136, %originalBB22alteredBB
  %145 = call i16** @__ctype_b_loc() #15, !dbg !4168
  %146 = load i16*, i16** %145, align 8, !dbg !4168
  %147 = load i8, i8* %25, align 1, !dbg !4168
  %148 = zext i8 %147 to i32, !dbg !4168
  %149 = sext i32 %148 to i64, !dbg !4168
  %150 = getelementptr inbounds i16, i16* %146, i64 %149, !dbg !4168
  %151 = load i16, i16* %150, align 2, !dbg !4168
  %152 = zext i16 %151 to i32, !dbg !4168
  %153 = and i32 %152, 8192, !dbg !4168
  %154 = icmp ne i32 %153, 0, !dbg !4167
  %155 = load i32, i32* @x.77
  %156 = load i32, i32* @y.78
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart232, label %originalBB22alteredBB

originalBBpart232:                                ; preds = %originalBB22
  br i1 %154, label %163, label %183, !dbg !4167

163:                                              ; preds = %originalBBpart232
  %164 = load i32, i32* @x.77
  %165 = load i32, i32* @y.78
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %163, %originalBB34alteredBB
  %172 = load i8*, i8** %24, align 8, !dbg !4169
  %173 = getelementptr inbounds i8, i8* %172, i32 1, !dbg !4169
  store i8* %173, i8** %24, align 8, !dbg !4169
  %174 = load i8, i8* %173, align 1, !dbg !4170
  store i8 %174, i8* %25, align 1, !dbg !4171
  %175 = load i32, i32* @x.77
  %176 = load i32, i32* @y.78
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %136, !dbg !4167, !llvm.loop !4172

183:                                              ; preds = %originalBBpart232
  %184 = load i32, i32* @x.77
  %185 = load i32, i32* @y.78
  %186 = sub i32 %184, 1
  %187 = mul i32 %184, %186
  %188 = urem i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %189, %190
  br i1 %191, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %183, %originalBB38alteredBB
  %192 = load i8, i8* %25, align 1, !dbg !4174
  %193 = zext i8 %192 to i32, !dbg !4174
  %194 = icmp eq i32 %193, 45, !dbg !4176
  %195 = load i32, i32* @x.77
  %196 = load i32, i32* @y.78
  %197 = sub i32 %195, 1
  %198 = mul i32 %195, %197
  %199 = urem i32 %198, 2
  %200 = icmp eq i32 %199, 0
  %201 = icmp slt i32 %196, 10
  %202 = or i1 %200, %201
  br i1 %202, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %194, label %203, label %204, !dbg !4177

203:                                              ; preds = %originalBBpart240
  store i32 4, i32* %14, align 4, !dbg !4178
  br label %893, !dbg !4178

204:                                              ; preds = %originalBBpart240
  %205 = load i8*, i8** %15, align 8, !dbg !4179
  %206 = load i8**, i8*** %21, align 8, !dbg !4180
  %207 = load i32, i32* %17, align 4, !dbg !4181
  %208 = call i64 @strtoul(i8* %205, i8** %206, i32 %207) #10, !dbg !4182
  store i64 %208, i64* %22, align 8, !dbg !4183
  %209 = load i8**, i8*** %21, align 8, !dbg !4184
  %210 = load i8*, i8** %209, align 8, !dbg !4186
  %211 = load i8*, i8** %15, align 8, !dbg !4187
  %212 = icmp eq i8* %210, %211, !dbg !4188
  br i1 %212, label %213, label %265, !dbg !4189

213:                                              ; preds = %204
  %214 = load i32, i32* @x.77
  %215 = load i32, i32* @y.78
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %213, %originalBB42alteredBB
  %222 = load i8*, i8** %19, align 8, !dbg !4190
  %223 = icmp ne i8* %222, null, !dbg !4190
  %224 = load i32, i32* @x.77
  %225 = load i32, i32* @y.78
  %226 = sub i32 %224, 1
  %227 = mul i32 %224, %226
  %228 = urem i32 %227, 2
  %229 = icmp eq i32 %228, 0
  %230 = icmp slt i32 %225, 10
  %231 = or i1 %229, %230
  br i1 %231, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br i1 %223, label %232, label %263, !dbg !4193

232:                                              ; preds = %originalBBpart244
  %233 = load i8**, i8*** %21, align 8, !dbg !4194
  %234 = load i8*, i8** %233, align 8, !dbg !4195
  %235 = load i8, i8* %234, align 1, !dbg !4196
  %236 = sext i8 %235 to i32, !dbg !4196
  %237 = icmp ne i32 %236, 0, !dbg !4196
  br i1 %237, label %238, label %263, !dbg !4197

238:                                              ; preds = %232
  %239 = load i8*, i8** %19, align 8, !dbg !4198
  %240 = load i8**, i8*** %21, align 8, !dbg !4199
  %241 = load i8*, i8** %240, align 8, !dbg !4200
  %242 = load i8, i8* %241, align 1, !dbg !4201
  %243 = sext i8 %242 to i32, !dbg !4201
  %244 = call i8* @strchr(i8* %239, i32 %243) #13, !dbg !4202
  %245 = icmp ne i8* %244, null, !dbg !4202
  br i1 %245, label %246, label %263, !dbg !4203

246:                                              ; preds = %238
  %247 = load i32, i32* @x.77
  %248 = load i32, i32* @y.78
  %249 = sub i32 %247, 1
  %250 = mul i32 %247, %249
  %251 = urem i32 %250, 2
  %252 = icmp eq i32 %251, 0
  %253 = icmp slt i32 %248, 10
  %254 = or i1 %252, %253
  br i1 %254, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %246, %originalBB46alteredBB
  store i64 1, i64* %22, align 8, !dbg !4204
  %255 = load i32, i32* @x.77
  %256 = load i32, i32* @y.78
  %257 = sub i32 %255, 1
  %258 = mul i32 %255, %257
  %259 = urem i32 %258, 2
  %260 = icmp eq i32 %259, 0
  %261 = icmp slt i32 %256, 10
  %262 = or i1 %260, %261
  br i1 %262, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %264, !dbg !4205

263:                                              ; preds = %238, %232, %originalBBpart244
  store i32 4, i32* %14, align 4, !dbg !4206
  br label %893, !dbg !4206

264:                                              ; preds = %originalBBpart248
  br label %340, !dbg !4207

265:                                              ; preds = %204
  %266 = load i32, i32* @x.77
  %267 = load i32, i32* @y.78
  %268 = sub i32 %266, 1
  %269 = mul i32 %266, %268
  %270 = urem i32 %269, 2
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %271, %272
  br i1 %273, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %265, %originalBB50alteredBB
  %274 = call i32* @__errno_location() #15, !dbg !4208
  %275 = load i32, i32* %274, align 4, !dbg !4208
  %276 = icmp ne i32 %275, 0, !dbg !4210
  %277 = load i32, i32* @x.77
  %278 = load i32, i32* @y.78
  %279 = sub i32 %277, 1
  %280 = mul i32 %277, %279
  %281 = urem i32 %280, 2
  %282 = icmp eq i32 %281, 0
  %283 = icmp slt i32 %278, 10
  %284 = or i1 %282, %283
  br i1 %284, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br i1 %276, label %285, label %339, !dbg !4211

285:                                              ; preds = %originalBBpart252
  %286 = load i32, i32* @x.77
  %287 = load i32, i32* @y.78
  %288 = sub i32 %286, 1
  %289 = mul i32 %286, %288
  %290 = urem i32 %289, 2
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %291, %292
  br i1 %293, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %285, %originalBB54alteredBB
  %294 = call i32* @__errno_location() #15, !dbg !4212
  %295 = load i32, i32* %294, align 4, !dbg !4212
  %296 = icmp ne i32 %295, 34, !dbg !4215
  %297 = load i32, i32* @x.77
  %298 = load i32, i32* @y.78
  %299 = sub i32 %297, 1
  %300 = mul i32 %297, %299
  %301 = urem i32 %300, 2
  %302 = icmp eq i32 %301, 0
  %303 = icmp slt i32 %298, 10
  %304 = or i1 %302, %303
  br i1 %304, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br i1 %296, label %305, label %322, !dbg !4216

305:                                              ; preds = %originalBBpart256
  %306 = load i32, i32* @x.77
  %307 = load i32, i32* @y.78
  %308 = sub i32 %306, 1
  %309 = mul i32 %306, %308
  %310 = urem i32 %309, 2
  %311 = icmp eq i32 %310, 0
  %312 = icmp slt i32 %307, 10
  %313 = or i1 %311, %312
  br i1 %313, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %305, %originalBB58alteredBB
  store i32 4, i32* %14, align 4, !dbg !4217
  %314 = load i32, i32* @x.77
  %315 = load i32, i32* @y.78
  %316 = sub i32 %314, 1
  %317 = mul i32 %314, %316
  %318 = urem i32 %317, 2
  %319 = icmp eq i32 %318, 0
  %320 = icmp slt i32 %315, 10
  %321 = or i1 %319, %320
  br i1 %321, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br label %893, !dbg !4217

322:                                              ; preds = %originalBBpart256
  %323 = load i32, i32* @x.77
  %324 = load i32, i32* @y.78
  %325 = sub i32 %323, 1
  %326 = mul i32 %323, %325
  %327 = urem i32 %326, 2
  %328 = icmp eq i32 %327, 0
  %329 = icmp slt i32 %324, 10
  %330 = or i1 %328, %329
  br i1 %330, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %322, %originalBB62alteredBB
  store i32 1, i32* %23, align 4, !dbg !4218
  %331 = load i32, i32* @x.77
  %332 = load i32, i32* @y.78
  %333 = sub i32 %331, 1
  %334 = mul i32 %331, %333
  %335 = urem i32 %334, 2
  %336 = icmp eq i32 %335, 0
  %337 = icmp slt i32 %332, 10
  %338 = or i1 %336, %337
  br i1 %338, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br label %339, !dbg !4219

339:                                              ; preds = %originalBBpart264, %originalBBpart252
  br label %340

340:                                              ; preds = %339, %264
  %341 = load i32, i32* @x.77
  %342 = load i32, i32* @y.78
  %343 = sub i32 %341, 1
  %344 = mul i32 %341, %343
  %345 = urem i32 %344, 2
  %346 = icmp eq i32 %345, 0
  %347 = icmp slt i32 %342, 10
  %348 = or i1 %346, %347
  br i1 %348, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %340, %originalBB66alteredBB
  %349 = load i8*, i8** %19, align 8, !dbg !4220
  %350 = icmp ne i8* %349, null, !dbg !4220
  %351 = load i32, i32* @x.77
  %352 = load i32, i32* @y.78
  %353 = sub i32 %351, 1
  %354 = mul i32 %351, %353
  %355 = urem i32 %354, 2
  %356 = icmp eq i32 %355, 0
  %357 = icmp slt i32 %352, 10
  %358 = or i1 %356, %357
  br i1 %358, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br i1 %350, label %379, label %359, !dbg !4222

359:                                              ; preds = %originalBBpart268
  %360 = load i32, i32* @x.77
  %361 = load i32, i32* @y.78
  %362 = sub i32 %360, 1
  %363 = mul i32 %360, %362
  %364 = urem i32 %363, 2
  %365 = icmp eq i32 %364, 0
  %366 = icmp slt i32 %361, 10
  %367 = or i1 %365, %366
  br i1 %367, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %359, %originalBB70alteredBB
  %368 = load i64, i64* %22, align 8, !dbg !4223
  %369 = load i64*, i64** %18, align 8, !dbg !4225
  store i64 %368, i64* %369, align 8, !dbg !4226
  %370 = load i32, i32* %23, align 4, !dbg !4227
  store i32 %370, i32* %14, align 4, !dbg !4228
  %371 = load i32, i32* @x.77
  %372 = load i32, i32* @y.78
  %373 = sub i32 %371, 1
  %374 = mul i32 %371, %373
  %375 = urem i32 %374, 2
  %376 = icmp eq i32 %375, 0
  %377 = icmp slt i32 %372, 10
  %378 = or i1 %376, %377
  br i1 %378, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br label %893, !dbg !4228

379:                                              ; preds = %originalBBpart268
  %380 = load i32, i32* @x.77
  %381 = load i32, i32* @y.78
  %382 = sub i32 %380, 1
  %383 = mul i32 %380, %382
  %384 = urem i32 %383, 2
  %385 = icmp eq i32 %384, 0
  %386 = icmp slt i32 %381, 10
  %387 = or i1 %385, %386
  br i1 %387, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %379, %originalBB74alteredBB
  %388 = load i8**, i8*** %21, align 8, !dbg !4229
  %389 = load i8*, i8** %388, align 8, !dbg !4231
  %390 = load i8, i8* %389, align 1, !dbg !4232
  %391 = sext i8 %390 to i32, !dbg !4232
  %392 = icmp ne i32 %391, 0, !dbg !4233
  %393 = load i32, i32* @x.77
  %394 = load i32, i32* @y.78
  %395 = sub i32 %393, 1
  %396 = mul i32 %393, %395
  %397 = urem i32 %396, 2
  %398 = icmp eq i32 %397, 0
  %399 = icmp slt i32 %394, 10
  %400 = or i1 %398, %399
  br i1 %400, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br i1 %392, label %401, label %873, !dbg !4234

401:                                              ; preds = %originalBBpart276
  call void @llvm.dbg.declare(metadata i32* %26, metadata !4235, metadata !DIExpression()), !dbg !4237
  %402 = load i32, i32* @x.77
  %403 = load i32, i32* @y.78
  %404 = sub i32 %402, 1
  %405 = mul i32 %402, %404
  %406 = urem i32 %405, 2
  %407 = icmp eq i32 %406, 0
  %408 = icmp slt i32 %403, 10
  %409 = or i1 %407, %408
  br i1 %409, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %401, %originalBB78alteredBB
  store i32 1024, i32* %26, align 4, !dbg !4237
  call void @llvm.dbg.declare(metadata i32* %27, metadata !4238, metadata !DIExpression()), !dbg !4239
  store i32 1, i32* %27, align 4, !dbg !4239
  call void @llvm.dbg.declare(metadata i32* %28, metadata !4240, metadata !DIExpression()), !dbg !4241
  %410 = load i8*, i8** %19, align 8, !dbg !4242
  %411 = load i8**, i8*** %21, align 8, !dbg !4244
  %412 = load i8*, i8** %411, align 8, !dbg !4245
  %413 = load i8, i8* %412, align 1, !dbg !4246
  %414 = sext i8 %413 to i32, !dbg !4246
  %415 = call i8* @strchr(i8* %410, i32 %414) #13, !dbg !4247
  %416 = icmp ne i8* %415, null, !dbg !4247
  %417 = load i32, i32* @x.77
  %418 = load i32, i32* @y.78
  %419 = sub i32 %417, 1
  %420 = mul i32 %417, %419
  %421 = urem i32 %420, 2
  %422 = icmp eq i32 %421, 0
  %423 = icmp slt i32 %418, 10
  %424 = or i1 %422, %423
  br i1 %424, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br i1 %416, label %446, label %425, !dbg !4248

425:                                              ; preds = %originalBBpart280
  %426 = load i32, i32* @x.77
  %427 = load i32, i32* @y.78
  %428 = sub i32 %426, 1
  %429 = mul i32 %426, %428
  %430 = urem i32 %429, 2
  %431 = icmp eq i32 %430, 0
  %432 = icmp slt i32 %427, 10
  %433 = or i1 %431, %432
  br i1 %433, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %425, %originalBB82alteredBB
  %434 = load i64, i64* %22, align 8, !dbg !4249
  %435 = load i64*, i64** %18, align 8, !dbg !4251
  store i64 %434, i64* %435, align 8, !dbg !4252
  %436 = load i32, i32* %23, align 4, !dbg !4253
  %437 = or i32 %436, 2, !dbg !4254
  store i32 %437, i32* %14, align 4, !dbg !4255
  %438 = load i32, i32* @x.77
  %439 = load i32, i32* @y.78
  %440 = sub i32 %438, 1
  %441 = mul i32 %438, %440
  %442 = urem i32 %441, 2
  %443 = icmp eq i32 %442, 0
  %444 = icmp slt i32 %439, 10
  %445 = or i1 %443, %444
  br i1 %445, label %originalBBpart287, label %originalBB82alteredBB

originalBBpart287:                                ; preds = %originalBB82
  br label %893, !dbg !4255

446:                                              ; preds = %originalBBpart280
  %447 = load i32, i32* @x.77
  %448 = load i32, i32* @y.78
  %449 = sub i32 %447, 1
  %450 = mul i32 %447, %449
  %451 = urem i32 %450, 2
  %452 = icmp eq i32 %451, 0
  %453 = icmp slt i32 %448, 10
  %454 = or i1 %452, %453
  br i1 %454, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %446, %originalBB89alteredBB
  %455 = load i8**, i8*** %21, align 8, !dbg !4256
  %456 = load i8*, i8** %455, align 8, !dbg !4257
  %457 = load i8, i8* %456, align 1, !dbg !4258
  %458 = sext i8 %457 to i32, !dbg !4258
  %459 = load i32, i32* @x.77
  %460 = load i32, i32* @y.78
  %461 = sub i32 %459, 1
  %462 = mul i32 %459, %461
  %463 = urem i32 %462, 2
  %464 = icmp eq i32 %463, 0
  %465 = icmp slt i32 %460, 10
  %466 = or i1 %464, %465
  br i1 %466, label %originalBBpart291, label %originalBB89alteredBB

originalBBpart291:                                ; preds = %originalBB89
  switch i32 %458, label %591 [
    i32 69, label %467
    i32 71, label %467
    i32 103, label %467
    i32 107, label %467
    i32 75, label %467
    i32 77, label %467
    i32 109, label %467
    i32 80, label %467
    i32 84, label %467
    i32 116, label %467
    i32 89, label %467
    i32 90, label %467
  ], !dbg !4259

467:                                              ; preds = %originalBBpart291, %originalBBpart291, %originalBBpart291, %originalBBpart291, %originalBBpart291, %originalBBpart291, %originalBBpart291, %originalBBpart291, %originalBBpart291, %originalBBpart291, %originalBBpart291, %originalBBpart291
  %468 = load i32, i32* @x.77
  %469 = load i32, i32* @y.78
  %470 = sub i32 %468, 1
  %471 = mul i32 %468, %470
  %472 = urem i32 %471, 2
  %473 = icmp eq i32 %472, 0
  %474 = icmp slt i32 %469, 10
  %475 = or i1 %473, %474
  br i1 %475, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %467, %originalBB93alteredBB
  %476 = load i8*, i8** %19, align 8, !dbg !4260
  %477 = call i8* @strchr(i8* %476, i32 48) #13, !dbg !4263
  %478 = icmp ne i8* %477, null, !dbg !4263
  %479 = load i32, i32* @x.77
  %480 = load i32, i32* @y.78
  %481 = sub i32 %479, 1
  %482 = mul i32 %479, %481
  %483 = urem i32 %482, 2
  %484 = icmp eq i32 %483, 0
  %485 = icmp slt i32 %480, 10
  %486 = or i1 %484, %485
  br i1 %486, label %originalBBpart295, label %originalBB93alteredBB

originalBBpart295:                                ; preds = %originalBB93
  br i1 %478, label %487, label %574, !dbg !4264

487:                                              ; preds = %originalBBpart295
  %488 = load i32, i32* @x.77
  %489 = load i32, i32* @y.78
  %490 = sub i32 %488, 1
  %491 = mul i32 %488, %490
  %492 = urem i32 %491, 2
  %493 = icmp eq i32 %492, 0
  %494 = icmp slt i32 %489, 10
  %495 = or i1 %493, %494
  br i1 %495, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %487, %originalBB97alteredBB
  %496 = load i8**, i8*** %21, align 8, !dbg !4265
  %497 = getelementptr inbounds i8*, i8** %496, i64 0, !dbg !4265
  %498 = load i8*, i8** %497, align 8, !dbg !4265
  %499 = getelementptr inbounds i8, i8* %498, i64 1, !dbg !4265
  %500 = load i8, i8* %499, align 1, !dbg !4265
  %501 = sext i8 %500 to i32, !dbg !4265
  %502 = load i32, i32* @x.77
  %503 = load i32, i32* @y.78
  %504 = sub i32 %502, 1
  %505 = mul i32 %502, %504
  %506 = urem i32 %505, 2
  %507 = icmp eq i32 %506, 0
  %508 = icmp slt i32 %503, 10
  %509 = or i1 %507, %508
  br i1 %509, label %originalBBpart299, label %originalBB97alteredBB

originalBBpart299:                                ; preds = %originalBB97
  switch i32 %501, label %573 [
    i32 105, label %510
    i32 66, label %570
    i32 68, label %570
  ], !dbg !4266

510:                                              ; preds = %originalBBpart299
  %511 = load i32, i32* @x.77
  %512 = load i32, i32* @y.78
  %513 = sub i32 %511, 1
  %514 = mul i32 %511, %513
  %515 = urem i32 %514, 2
  %516 = icmp eq i32 %515, 0
  %517 = icmp slt i32 %512, 10
  %518 = or i1 %516, %517
  br i1 %518, label %originalBB101, label %originalBB101alteredBB

originalBB101:                                    ; preds = %510, %originalBB101alteredBB
  %519 = load i8**, i8*** %21, align 8, !dbg !4267
  %520 = getelementptr inbounds i8*, i8** %519, i64 0, !dbg !4267
  %521 = load i8*, i8** %520, align 8, !dbg !4267
  %522 = getelementptr inbounds i8, i8* %521, i64 2, !dbg !4267
  %523 = load i8, i8* %522, align 1, !dbg !4267
  %524 = sext i8 %523 to i32, !dbg !4267
  %525 = icmp eq i32 %524, 66, !dbg !4270
  %526 = load i32, i32* @x.77
  %527 = load i32, i32* @y.78
  %528 = sub i32 %526, 1
  %529 = mul i32 %526, %528
  %530 = urem i32 %529, 2
  %531 = icmp eq i32 %530, 0
  %532 = icmp slt i32 %527, 10
  %533 = or i1 %531, %532
  br i1 %533, label %originalBBpart2103, label %originalBB101alteredBB

originalBBpart2103:                               ; preds = %originalBB101
  br i1 %525, label %534, label %553, !dbg !4271

534:                                              ; preds = %originalBBpart2103
  %535 = load i32, i32* @x.77
  %536 = load i32, i32* @y.78
  %537 = sub i32 %535, 1
  %538 = mul i32 %535, %537
  %539 = urem i32 %538, 2
  %540 = icmp eq i32 %539, 0
  %541 = icmp slt i32 %536, 10
  %542 = or i1 %540, %541
  br i1 %542, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %534, %originalBB105alteredBB
  %543 = load i32, i32* %27, align 4, !dbg !4272
  %544 = add nsw i32 %543, 2, !dbg !4272
  store i32 %544, i32* %27, align 4, !dbg !4272
  %545 = load i32, i32* @x.77
  %546 = load i32, i32* @y.78
  %547 = sub i32 %545, 1
  %548 = mul i32 %545, %547
  %549 = urem i32 %548, 2
  %550 = icmp eq i32 %549, 0
  %551 = icmp slt i32 %546, 10
  %552 = or i1 %550, %551
  br i1 %552, label %originalBBpart2112, label %originalBB105alteredBB

originalBBpart2112:                               ; preds = %originalBB105
  br label %553, !dbg !4273

553:                                              ; preds = %originalBBpart2112, %originalBBpart2103
  %554 = load i32, i32* @x.77
  %555 = load i32, i32* @y.78
  %556 = sub i32 %554, 1
  %557 = mul i32 %554, %556
  %558 = urem i32 %557, 2
  %559 = icmp eq i32 %558, 0
  %560 = icmp slt i32 %555, 10
  %561 = or i1 %559, %560
  br i1 %561, label %originalBB114, label %originalBB114alteredBB

originalBB114:                                    ; preds = %553, %originalBB114alteredBB
  %562 = load i32, i32* @x.77
  %563 = load i32, i32* @y.78
  %564 = sub i32 %562, 1
  %565 = mul i32 %562, %564
  %566 = urem i32 %565, 2
  %567 = icmp eq i32 %566, 0
  %568 = icmp slt i32 %563, 10
  %569 = or i1 %567, %568
  br i1 %569, label %originalBBpart2116, label %originalBB114alteredBB

originalBBpart2116:                               ; preds = %originalBB114
  br label %573, !dbg !4274

570:                                              ; preds = %originalBBpart299, %originalBBpart299
  store i32 1000, i32* %26, align 4, !dbg !4275
  %571 = load i32, i32* %27, align 4, !dbg !4276
  %572 = add nsw i32 %571, 1, !dbg !4276
  store i32 %572, i32* %27, align 4, !dbg !4276
  br label %573, !dbg !4277

573:                                              ; preds = %570, %originalBBpart2116, %originalBBpart299
  br label %574, !dbg !4278

574:                                              ; preds = %573, %originalBBpart295
  %575 = load i32, i32* @x.77
  %576 = load i32, i32* @y.78
  %577 = sub i32 %575, 1
  %578 = mul i32 %575, %577
  %579 = urem i32 %578, 2
  %580 = icmp eq i32 %579, 0
  %581 = icmp slt i32 %576, 10
  %582 = or i1 %580, %581
  br i1 %582, label %originalBB118, label %originalBB118alteredBB

originalBB118:                                    ; preds = %574, %originalBB118alteredBB
  %583 = load i32, i32* @x.77
  %584 = load i32, i32* @y.78
  %585 = sub i32 %583, 1
  %586 = mul i32 %583, %585
  %587 = urem i32 %586, 2
  %588 = icmp eq i32 %587, 0
  %589 = icmp slt i32 %584, 10
  %590 = or i1 %588, %589
  br i1 %590, label %originalBBpart2120, label %originalBB118alteredBB

originalBBpart2120:                               ; preds = %originalBB118
  br label %591, !dbg !4279

591:                                              ; preds = %originalBBpart2120, %originalBBpart291
  %592 = load i32, i32* @x.77
  %593 = load i32, i32* @y.78
  %594 = sub i32 %592, 1
  %595 = mul i32 %592, %594
  %596 = urem i32 %595, 2
  %597 = icmp eq i32 %596, 0
  %598 = icmp slt i32 %593, 10
  %599 = or i1 %597, %598
  br i1 %599, label %originalBB122, label %originalBB122alteredBB

originalBB122:                                    ; preds = %591, %originalBB122alteredBB
  %600 = load i8**, i8*** %21, align 8, !dbg !4280
  %601 = load i8*, i8** %600, align 8, !dbg !4281
  %602 = load i8, i8* %601, align 1, !dbg !4282
  %603 = sext i8 %602 to i32, !dbg !4282
  %604 = load i32, i32* @x.77
  %605 = load i32, i32* @y.78
  %606 = sub i32 %604, 1
  %607 = mul i32 %604, %606
  %608 = urem i32 %607, 2
  %609 = icmp eq i32 %608, 0
  %610 = icmp slt i32 %605, 10
  %611 = or i1 %609, %610
  br i1 %611, label %originalBBpart2124, label %originalBB122alteredBB

originalBBpart2124:                               ; preds = %originalBB122
  switch i32 %603, label %803 [
    i32 98, label %612
    i32 66, label %630
    i32 99, label %648
    i32 69, label %665
    i32 71, label %668
    i32 103, label %668
    i32 107, label %687
    i32 75, label %687
    i32 77, label %706
    i32 109, label %706
    i32 80, label %725
    i32 84, label %744
    i32 116, label %744
    i32 119, label %763
    i32 89, label %781
    i32 90, label %800
  ], !dbg !4283

612:                                              ; preds = %originalBBpart2124
  %613 = load i32, i32* @x.77
  %614 = load i32, i32* @y.78
  %615 = sub i32 %613, 1
  %616 = mul i32 %613, %615
  %617 = urem i32 %616, 2
  %618 = icmp eq i32 %617, 0
  %619 = icmp slt i32 %614, 10
  %620 = or i1 %618, %619
  br i1 %620, label %originalBB126, label %originalBB126alteredBB

originalBB126:                                    ; preds = %612, %originalBB126alteredBB
  %621 = call i32 @bkm_scale(i64* %22, i32 512), !dbg !4284
  store i32 %621, i32* %28, align 4, !dbg !4286
  %622 = load i32, i32* @x.77
  %623 = load i32, i32* @y.78
  %624 = sub i32 %622, 1
  %625 = mul i32 %622, %624
  %626 = urem i32 %625, 2
  %627 = icmp eq i32 %626, 0
  %628 = icmp slt i32 %623, 10
  %629 = or i1 %627, %628
  br i1 %629, label %originalBBpart2128, label %originalBB126alteredBB

originalBBpart2128:                               ; preds = %originalBB126
  br label %824, !dbg !4287

630:                                              ; preds = %originalBBpart2124
  %631 = load i32, i32* @x.77
  %632 = load i32, i32* @y.78
  %633 = sub i32 %631, 1
  %634 = mul i32 %631, %633
  %635 = urem i32 %634, 2
  %636 = icmp eq i32 %635, 0
  %637 = icmp slt i32 %632, 10
  %638 = or i1 %636, %637
  br i1 %638, label %originalBB130, label %originalBB130alteredBB

originalBB130:                                    ; preds = %630, %originalBB130alteredBB
  %639 = call i32 @bkm_scale(i64* %22, i32 1024), !dbg !4288
  store i32 %639, i32* %28, align 4, !dbg !4289
  %640 = load i32, i32* @x.77
  %641 = load i32, i32* @y.78
  %642 = sub i32 %640, 1
  %643 = mul i32 %640, %642
  %644 = urem i32 %643, 2
  %645 = icmp eq i32 %644, 0
  %646 = icmp slt i32 %641, 10
  %647 = or i1 %645, %646
  br i1 %647, label %originalBBpart2132, label %originalBB130alteredBB

originalBBpart2132:                               ; preds = %originalBB130
  br label %824, !dbg !4290

648:                                              ; preds = %originalBBpart2124
  %649 = load i32, i32* @x.77
  %650 = load i32, i32* @y.78
  %651 = sub i32 %649, 1
  %652 = mul i32 %649, %651
  %653 = urem i32 %652, 2
  %654 = icmp eq i32 %653, 0
  %655 = icmp slt i32 %650, 10
  %656 = or i1 %654, %655
  br i1 %656, label %originalBB134, label %originalBB134alteredBB

originalBB134:                                    ; preds = %648, %originalBB134alteredBB
  store i32 0, i32* %28, align 4, !dbg !4291
  %657 = load i32, i32* @x.77
  %658 = load i32, i32* @y.78
  %659 = sub i32 %657, 1
  %660 = mul i32 %657, %659
  %661 = urem i32 %660, 2
  %662 = icmp eq i32 %661, 0
  %663 = icmp slt i32 %658, 10
  %664 = or i1 %662, %663
  br i1 %664, label %originalBBpart2136, label %originalBB134alteredBB

originalBBpart2136:                               ; preds = %originalBB134
  br label %824, !dbg !4292

665:                                              ; preds = %originalBBpart2124
  %666 = load i32, i32* %26, align 4, !dbg !4293
  %667 = call i32 @bkm_scale_by_power(i64* %22, i32 %666, i32 6), !dbg !4294
  store i32 %667, i32* %28, align 4, !dbg !4295
  br label %824, !dbg !4296

668:                                              ; preds = %originalBBpart2124, %originalBBpart2124
  %669 = load i32, i32* @x.77
  %670 = load i32, i32* @y.78
  %671 = sub i32 %669, 1
  %672 = mul i32 %669, %671
  %673 = urem i32 %672, 2
  %674 = icmp eq i32 %673, 0
  %675 = icmp slt i32 %670, 10
  %676 = or i1 %674, %675
  br i1 %676, label %originalBB138, label %originalBB138alteredBB

originalBB138:                                    ; preds = %668, %originalBB138alteredBB
  %677 = load i32, i32* %26, align 4, !dbg !4297
  %678 = call i32 @bkm_scale_by_power(i64* %22, i32 %677, i32 3), !dbg !4298
  store i32 %678, i32* %28, align 4, !dbg !4299
  %679 = load i32, i32* @x.77
  %680 = load i32, i32* @y.78
  %681 = sub i32 %679, 1
  %682 = mul i32 %679, %681
  %683 = urem i32 %682, 2
  %684 = icmp eq i32 %683, 0
  %685 = icmp slt i32 %680, 10
  %686 = or i1 %684, %685
  br i1 %686, label %originalBBpart2140, label %originalBB138alteredBB

originalBBpart2140:                               ; preds = %originalBB138
  br label %824, !dbg !4300

687:                                              ; preds = %originalBBpart2124, %originalBBpart2124
  %688 = load i32, i32* @x.77
  %689 = load i32, i32* @y.78
  %690 = sub i32 %688, 1
  %691 = mul i32 %688, %690
  %692 = urem i32 %691, 2
  %693 = icmp eq i32 %692, 0
  %694 = icmp slt i32 %689, 10
  %695 = or i1 %693, %694
  br i1 %695, label %originalBB142, label %originalBB142alteredBB

originalBB142:                                    ; preds = %687, %originalBB142alteredBB
  %696 = load i32, i32* %26, align 4, !dbg !4301
  %697 = call i32 @bkm_scale_by_power(i64* %22, i32 %696, i32 1), !dbg !4302
  store i32 %697, i32* %28, align 4, !dbg !4303
  %698 = load i32, i32* @x.77
  %699 = load i32, i32* @y.78
  %700 = sub i32 %698, 1
  %701 = mul i32 %698, %700
  %702 = urem i32 %701, 2
  %703 = icmp eq i32 %702, 0
  %704 = icmp slt i32 %699, 10
  %705 = or i1 %703, %704
  br i1 %705, label %originalBBpart2144, label %originalBB142alteredBB

originalBBpart2144:                               ; preds = %originalBB142
  br label %824, !dbg !4304

706:                                              ; preds = %originalBBpart2124, %originalBBpart2124
  %707 = load i32, i32* @x.77
  %708 = load i32, i32* @y.78
  %709 = sub i32 %707, 1
  %710 = mul i32 %707, %709
  %711 = urem i32 %710, 2
  %712 = icmp eq i32 %711, 0
  %713 = icmp slt i32 %708, 10
  %714 = or i1 %712, %713
  br i1 %714, label %originalBB146, label %originalBB146alteredBB

originalBB146:                                    ; preds = %706, %originalBB146alteredBB
  %715 = load i32, i32* %26, align 4, !dbg !4305
  %716 = call i32 @bkm_scale_by_power(i64* %22, i32 %715, i32 2), !dbg !4306
  store i32 %716, i32* %28, align 4, !dbg !4307
  %717 = load i32, i32* @x.77
  %718 = load i32, i32* @y.78
  %719 = sub i32 %717, 1
  %720 = mul i32 %717, %719
  %721 = urem i32 %720, 2
  %722 = icmp eq i32 %721, 0
  %723 = icmp slt i32 %718, 10
  %724 = or i1 %722, %723
  br i1 %724, label %originalBBpart2148, label %originalBB146alteredBB

originalBBpart2148:                               ; preds = %originalBB146
  br label %824, !dbg !4308

725:                                              ; preds = %originalBBpart2124
  %726 = load i32, i32* @x.77
  %727 = load i32, i32* @y.78
  %728 = sub i32 %726, 1
  %729 = mul i32 %726, %728
  %730 = urem i32 %729, 2
  %731 = icmp eq i32 %730, 0
  %732 = icmp slt i32 %727, 10
  %733 = or i1 %731, %732
  br i1 %733, label %originalBB150, label %originalBB150alteredBB

originalBB150:                                    ; preds = %725, %originalBB150alteredBB
  %734 = load i32, i32* %26, align 4, !dbg !4309
  %735 = call i32 @bkm_scale_by_power(i64* %22, i32 %734, i32 5), !dbg !4310
  store i32 %735, i32* %28, align 4, !dbg !4311
  %736 = load i32, i32* @x.77
  %737 = load i32, i32* @y.78
  %738 = sub i32 %736, 1
  %739 = mul i32 %736, %738
  %740 = urem i32 %739, 2
  %741 = icmp eq i32 %740, 0
  %742 = icmp slt i32 %737, 10
  %743 = or i1 %741, %742
  br i1 %743, label %originalBBpart2152, label %originalBB150alteredBB

originalBBpart2152:                               ; preds = %originalBB150
  br label %824, !dbg !4312

744:                                              ; preds = %originalBBpart2124, %originalBBpart2124
  %745 = load i32, i32* @x.77
  %746 = load i32, i32* @y.78
  %747 = sub i32 %745, 1
  %748 = mul i32 %745, %747
  %749 = urem i32 %748, 2
  %750 = icmp eq i32 %749, 0
  %751 = icmp slt i32 %746, 10
  %752 = or i1 %750, %751
  br i1 %752, label %originalBB154, label %originalBB154alteredBB

originalBB154:                                    ; preds = %744, %originalBB154alteredBB
  %753 = load i32, i32* %26, align 4, !dbg !4313
  %754 = call i32 @bkm_scale_by_power(i64* %22, i32 %753, i32 4), !dbg !4314
  store i32 %754, i32* %28, align 4, !dbg !4315
  %755 = load i32, i32* @x.77
  %756 = load i32, i32* @y.78
  %757 = sub i32 %755, 1
  %758 = mul i32 %755, %757
  %759 = urem i32 %758, 2
  %760 = icmp eq i32 %759, 0
  %761 = icmp slt i32 %756, 10
  %762 = or i1 %760, %761
  br i1 %762, label %originalBBpart2156, label %originalBB154alteredBB

originalBBpart2156:                               ; preds = %originalBB154
  br label %824, !dbg !4316

763:                                              ; preds = %originalBBpart2124
  %764 = load i32, i32* @x.77
  %765 = load i32, i32* @y.78
  %766 = sub i32 %764, 1
  %767 = mul i32 %764, %766
  %768 = urem i32 %767, 2
  %769 = icmp eq i32 %768, 0
  %770 = icmp slt i32 %765, 10
  %771 = or i1 %769, %770
  br i1 %771, label %originalBB158, label %originalBB158alteredBB

originalBB158:                                    ; preds = %763, %originalBB158alteredBB
  %772 = call i32 @bkm_scale(i64* %22, i32 2), !dbg !4317
  store i32 %772, i32* %28, align 4, !dbg !4318
  %773 = load i32, i32* @x.77
  %774 = load i32, i32* @y.78
  %775 = sub i32 %773, 1
  %776 = mul i32 %773, %775
  %777 = urem i32 %776, 2
  %778 = icmp eq i32 %777, 0
  %779 = icmp slt i32 %774, 10
  %780 = or i1 %778, %779
  br i1 %780, label %originalBBpart2160, label %originalBB158alteredBB

originalBBpart2160:                               ; preds = %originalBB158
  br label %824, !dbg !4319

781:                                              ; preds = %originalBBpart2124
  %782 = load i32, i32* @x.77
  %783 = load i32, i32* @y.78
  %784 = sub i32 %782, 1
  %785 = mul i32 %782, %784
  %786 = urem i32 %785, 2
  %787 = icmp eq i32 %786, 0
  %788 = icmp slt i32 %783, 10
  %789 = or i1 %787, %788
  br i1 %789, label %originalBB162, label %originalBB162alteredBB

originalBB162:                                    ; preds = %781, %originalBB162alteredBB
  %790 = load i32, i32* %26, align 4, !dbg !4320
  %791 = call i32 @bkm_scale_by_power(i64* %22, i32 %790, i32 8), !dbg !4321
  store i32 %791, i32* %28, align 4, !dbg !4322
  %792 = load i32, i32* @x.77
  %793 = load i32, i32* @y.78
  %794 = sub i32 %792, 1
  %795 = mul i32 %792, %794
  %796 = urem i32 %795, 2
  %797 = icmp eq i32 %796, 0
  %798 = icmp slt i32 %793, 10
  %799 = or i1 %797, %798
  br i1 %799, label %originalBBpart2164, label %originalBB162alteredBB

originalBBpart2164:                               ; preds = %originalBB162
  br label %824, !dbg !4323

800:                                              ; preds = %originalBBpart2124
  %801 = load i32, i32* %26, align 4, !dbg !4324
  %802 = call i32 @bkm_scale_by_power(i64* %22, i32 %801, i32 7), !dbg !4325
  store i32 %802, i32* %28, align 4, !dbg !4326
  br label %824, !dbg !4327

803:                                              ; preds = %originalBBpart2124
  %804 = load i32, i32* @x.77
  %805 = load i32, i32* @y.78
  %806 = sub i32 %804, 1
  %807 = mul i32 %804, %806
  %808 = urem i32 %807, 2
  %809 = icmp eq i32 %808, 0
  %810 = icmp slt i32 %805, 10
  %811 = or i1 %809, %810
  br i1 %811, label %originalBB166, label %originalBB166alteredBB

originalBB166:                                    ; preds = %803, %originalBB166alteredBB
  %812 = load i64, i64* %22, align 8, !dbg !4328
  %813 = load i64*, i64** %18, align 8, !dbg !4329
  store i64 %812, i64* %813, align 8, !dbg !4330
  %814 = load i32, i32* %23, align 4, !dbg !4331
  %815 = or i32 %814, 2, !dbg !4332
  store i32 %815, i32* %14, align 4, !dbg !4333
  %816 = load i32, i32* @x.77
  %817 = load i32, i32* @y.78
  %818 = sub i32 %816, 1
  %819 = mul i32 %816, %818
  %820 = urem i32 %819, 2
  %821 = icmp eq i32 %820, 0
  %822 = icmp slt i32 %817, 10
  %823 = or i1 %821, %822
  br i1 %823, label %originalBBpart2174, label %originalBB166alteredBB

originalBBpart2174:                               ; preds = %originalBB166
  br label %893, !dbg !4333

824:                                              ; preds = %800, %originalBBpart2164, %originalBBpart2160, %originalBBpart2156, %originalBBpart2152, %originalBBpart2148, %originalBBpart2144, %originalBBpart2140, %665, %originalBBpart2136, %originalBBpart2132, %originalBBpart2128
  %825 = load i32, i32* @x.77
  %826 = load i32, i32* @y.78
  %827 = sub i32 %825, 1
  %828 = mul i32 %825, %827
  %829 = urem i32 %828, 2
  %830 = icmp eq i32 %829, 0
  %831 = icmp slt i32 %826, 10
  %832 = or i1 %830, %831
  br i1 %832, label %originalBB176, label %originalBB176alteredBB

originalBB176:                                    ; preds = %824, %originalBB176alteredBB
  %833 = load i32, i32* %28, align 4, !dbg !4334
  %834 = load i32, i32* %23, align 4, !dbg !4335
  %835 = or i32 %834, %833, !dbg !4335
  store i32 %835, i32* %23, align 4, !dbg !4335
  %836 = load i32, i32* %27, align 4, !dbg !4336
  %837 = load i8**, i8*** %21, align 8, !dbg !4337
  %838 = load i8*, i8** %837, align 8, !dbg !4338
  %839 = sext i32 %836 to i64, !dbg !4338
  %840 = getelementptr inbounds i8, i8* %838, i64 %839, !dbg !4338
  store i8* %840, i8** %837, align 8, !dbg !4338
  %841 = load i8**, i8*** %21, align 8, !dbg !4339
  %842 = load i8*, i8** %841, align 8, !dbg !4341
  %843 = load i8, i8* %842, align 1, !dbg !4342
  %844 = icmp ne i8 %843, 0, !dbg !4342
  %845 = load i32, i32* @x.77
  %846 = load i32, i32* @y.78
  %847 = sub i32 %845, 1
  %848 = mul i32 %845, %847
  %849 = urem i32 %848, 2
  %850 = icmp eq i32 %849, 0
  %851 = icmp slt i32 %846, 10
  %852 = or i1 %850, %851
  br i1 %852, label %originalBBpart2178, label %originalBB176alteredBB

originalBBpart2178:                               ; preds = %originalBB176
  br i1 %844, label %853, label %872, !dbg !4343

853:                                              ; preds = %originalBBpart2178
  %854 = load i32, i32* @x.77
  %855 = load i32, i32* @y.78
  %856 = sub i32 %854, 1
  %857 = mul i32 %854, %856
  %858 = urem i32 %857, 2
  %859 = icmp eq i32 %858, 0
  %860 = icmp slt i32 %855, 10
  %861 = or i1 %859, %860
  br i1 %861, label %originalBB180, label %originalBB180alteredBB

originalBB180:                                    ; preds = %853, %originalBB180alteredBB
  %862 = load i32, i32* %23, align 4, !dbg !4344
  %863 = or i32 %862, 2, !dbg !4344
  store i32 %863, i32* %23, align 4, !dbg !4344
  %864 = load i32, i32* @x.77
  %865 = load i32, i32* @y.78
  %866 = sub i32 %864, 1
  %867 = mul i32 %864, %866
  %868 = urem i32 %867, 2
  %869 = icmp eq i32 %868, 0
  %870 = icmp slt i32 %865, 10
  %871 = or i1 %869, %870
  br i1 %871, label %originalBBpart2189, label %originalBB180alteredBB

originalBBpart2189:                               ; preds = %originalBB180
  br label %872, !dbg !4345

872:                                              ; preds = %originalBBpart2189, %originalBBpart2178
  br label %873, !dbg !4346

873:                                              ; preds = %872, %originalBBpart276
  %874 = load i32, i32* @x.77
  %875 = load i32, i32* @y.78
  %876 = sub i32 %874, 1
  %877 = mul i32 %874, %876
  %878 = urem i32 %877, 2
  %879 = icmp eq i32 %878, 0
  %880 = icmp slt i32 %875, 10
  %881 = or i1 %879, %880
  br i1 %881, label %originalBB191, label %originalBB191alteredBB

originalBB191:                                    ; preds = %873, %originalBB191alteredBB
  %882 = load i64, i64* %22, align 8, !dbg !4347
  %883 = load i64*, i64** %18, align 8, !dbg !4348
  store i64 %882, i64* %883, align 8, !dbg !4349
  %884 = load i32, i32* %23, align 4, !dbg !4350
  store i32 %884, i32* %14, align 4, !dbg !4351
  %885 = load i32, i32* @x.77
  %886 = load i32, i32* @y.78
  %887 = sub i32 %885, 1
  %888 = mul i32 %885, %887
  %889 = urem i32 %888, 2
  %890 = icmp eq i32 %889, 0
  %891 = icmp slt i32 %886, 10
  %892 = or i1 %890, %891
  br i1 %892, label %originalBBpart2193, label %originalBB191alteredBB

originalBBpart2193:                               ; preds = %originalBB191
  br label %893, !dbg !4351

893:                                              ; preds = %originalBBpart2193, %originalBBpart2174, %originalBBpart287, %originalBBpart272, %originalBBpart260, %263, %203
  %894 = load i32, i32* @x.77
  %895 = load i32, i32* @y.78
  %896 = sub i32 %894, 1
  %897 = mul i32 %894, %896
  %898 = urem i32 %897, 2
  %899 = icmp eq i32 %898, 0
  %900 = icmp slt i32 %895, 10
  %901 = or i1 %899, %900
  br i1 %901, label %originalBB195, label %originalBB195alteredBB

originalBB195:                                    ; preds = %893, %originalBB195alteredBB
  %902 = load i32, i32* %14, align 4, !dbg !4352
  %903 = load i32, i32* @x.77
  %904 = load i32, i32* @y.78
  %905 = sub i32 %903, 1
  %906 = mul i32 %903, %905
  %907 = urem i32 %906, 2
  %908 = icmp eq i32 %907, 0
  %909 = icmp slt i32 %904, 10
  %910 = or i1 %908, %909
  br i1 %910, label %originalBBpart2197, label %originalBB195alteredBB

originalBBpart2197:                               ; preds = %originalBB195
  ret i32 %902, !dbg !4352

originalBBalteredBB:                              ; preds = %originalBB, %5
  %911 = alloca i32, align 4
  %912 = alloca i8*, align 8
  %913 = alloca i8**, align 8
  %914 = alloca i32, align 4
  %915 = alloca i64*, align 8
  %916 = alloca i8*, align 8
  %917 = alloca i8*, align 8
  %918 = alloca i8**, align 8
  %919 = alloca i64, align 8
  %920 = alloca i32, align 4
  %921 = alloca i8*, align 8
  %922 = alloca i8, align 1
  %923 = alloca i32, align 4
  %924 = alloca i32, align 4
  %925 = alloca i32, align 4
  store i8* %0, i8** %912, align 8
  call void @llvm.dbg.declare(metadata i8** %912, metadata !4353, metadata !DIExpression()), !dbg !4132
  store i8** %1, i8*** %913, align 8
  call void @llvm.dbg.declare(metadata i8*** %913, metadata !4356, metadata !DIExpression()), !dbg !4134
  store i32 %2, i32* %914, align 4
  call void @llvm.dbg.declare(metadata i32* %914, metadata !4357, metadata !DIExpression()), !dbg !4136
  store i64* %3, i64** %915, align 8
  call void @llvm.dbg.declare(metadata i64** %915, metadata !4358, metadata !DIExpression()), !dbg !4138
  store i8* %4, i8** %916, align 8
  call void @llvm.dbg.declare(metadata i8** %916, metadata !4359, metadata !DIExpression()), !dbg !4140
  call void @llvm.dbg.declare(metadata i8** %917, metadata !4360, metadata !DIExpression()), !dbg !4142
  call void @llvm.dbg.declare(metadata i8*** %918, metadata !4361, metadata !DIExpression()), !dbg !4144
  call void @llvm.dbg.declare(metadata i64* %919, metadata !4362, metadata !DIExpression()), !dbg !4146
  call void @llvm.dbg.declare(metadata i32* %920, metadata !4363, metadata !DIExpression()), !dbg !4148
  store i32 0, i32* %920, align 4, !dbg !4148
  %926 = load i32, i32* %914, align 4, !dbg !4149
  %927 = icmp sle i32 0, %926, !dbg !4149
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %43
  call void @__assert_fail(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.142, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.143, i64 0, i64 0), i32 84, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @__PRETTY_FUNCTION__.xstrtoul, i64 0, i64 0)) #12, !dbg !4149
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %60
  %928 = load i8**, i8*** %16, align 8, !dbg !4153
  %929 = icmp ne i8** %928, null, !dbg !4153
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %79
  %930 = load i8**, i8*** %16, align 8, !dbg !4154
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %97
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %114
  store i8** %115, i8*** %21, align 8, !dbg !4155
  %931 = call i32* @__errno_location() #15, !dbg !4156
  store i32 0, i32* %931, align 4, !dbg !4157
  call void @llvm.dbg.declare(metadata !4, metadata !4364, metadata !DIExpression()), !dbg !4161
  %932 = load i8*, i8** %15, align 8, !dbg !4162
  store i8* %932, i8** %24, align 8, !dbg !4161
  call void @llvm.dbg.declare(metadata !4, metadata !4369, metadata !DIExpression()), !dbg !4164
  %933 = load i8*, i8** %24, align 8, !dbg !4165
  %934 = load i8, i8* %933, align 1, !dbg !4166
  store i8 %934, i8* %25, align 1, !dbg !4164
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %136
  %935 = call i16** @__ctype_b_loc() #15, !dbg !4168
  %936 = load i16*, i16** %935, align 8, !dbg !4168
  %937 = load i8, i8* %25, align 1, !dbg !4168
  %938 = zext i8 %937 to i32, !dbg !4168
  %939 = sext i32 %938 to i64, !dbg !4168
  %940 = getelementptr inbounds i16, i16* %936, i64 %939, !dbg !4168
  %941 = load i16, i16* %940, align 2, !dbg !4168
  %942 = zext i16 %941 to i32, !dbg !4168
  %_ = sub i32 0, %942
  %gen = add i32 %_, 8192
  %_23 = sub i32 0, %942
  %gen24 = add i32 %_23, 8192
  %_25 = sub i32 %942, 8192
  %gen26 = mul i32 %_25, 8192
  %_27 = sub i32 0, %942
  %gen28 = add i32 %_27, 8192
  %_29 = sub i32 0, %942
  %gen30 = add i32 %_29, 8192
  %943 = and i32 %942, 8192, !dbg !4168
  %944 = icmp ne i32 %943, 0, !dbg !4167
  br label %originalBB22

originalBB34alteredBB:                            ; preds = %originalBB34, %163
  %945 = load i8*, i8** %24, align 8, !dbg !4169
  %946 = getelementptr inbounds i8, i8* %945, i32 1, !dbg !4169
  store i8* %946, i8** %24, align 8, !dbg !4169
  %947 = load i8, i8* %946, align 1, !dbg !4170
  store i8 %947, i8* %25, align 1, !dbg !4171
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %183
  %948 = load i8, i8* %25, align 1, !dbg !4174
  %949 = zext i8 %948 to i32, !dbg !4174
  %950 = icmp eq i32 %949, 45, !dbg !4176
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %213
  %951 = load i8*, i8** %19, align 8, !dbg !4190
  %952 = icmp ne i8* %951, null, !dbg !4190
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %246
  store i64 1, i64* %22, align 8, !dbg !4204
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %265
  %953 = call i32* @__errno_location() #15, !dbg !4208
  %954 = load i32, i32* %953, align 4, !dbg !4208
  %955 = icmp ne i32 %954, 0, !dbg !4210
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %285
  %956 = call i32* @__errno_location() #15, !dbg !4212
  %957 = load i32, i32* %956, align 4, !dbg !4212
  %958 = icmp ne i32 %957, 34, !dbg !4215
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %305
  store i32 4, i32* %14, align 4, !dbg !4217
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %322
  store i32 1, i32* %23, align 4, !dbg !4218
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %340
  %959 = load i8*, i8** %19, align 8, !dbg !4220
  %960 = icmp ne i8* %959, null, !dbg !4220
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %359
  %961 = load i64, i64* %22, align 8, !dbg !4223
  %962 = load i64*, i64** %18, align 8, !dbg !4225
  store i64 %961, i64* %962, align 8, !dbg !4226
  %963 = load i32, i32* %23, align 4, !dbg !4227
  store i32 %963, i32* %14, align 4, !dbg !4228
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %379
  %964 = load i8**, i8*** %21, align 8, !dbg !4229
  %965 = load i8*, i8** %964, align 8, !dbg !4231
  %966 = load i8, i8* %965, align 1, !dbg !4232
  %967 = sext i8 %966 to i32, !dbg !4232
  %968 = icmp ne i32 %967, 0, !dbg !4233
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %401
  store i32 1024, i32* %26, align 4, !dbg !4237
  call void @llvm.dbg.declare(metadata !4, metadata !4370, metadata !DIExpression()), !dbg !4239
  store i32 1, i32* %27, align 4, !dbg !4239
  call void @llvm.dbg.declare(metadata !4, metadata !4375, metadata !DIExpression()), !dbg !4241
  %969 = load i8*, i8** %19, align 8, !dbg !4242
  %970 = load i8**, i8*** %21, align 8, !dbg !4244
  %971 = load i8*, i8** %970, align 8, !dbg !4245
  %972 = load i8, i8* %971, align 1, !dbg !4246
  %973 = sext i8 %972 to i32, !dbg !4246
  %974 = call i8* @strchr(i8* %969, i32 %973) #13, !dbg !4247
  %975 = icmp ne i8* %974, null, !dbg !4247
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %425
  %976 = load i64, i64* %22, align 8, !dbg !4249
  %977 = load i64*, i64** %18, align 8, !dbg !4251
  store i64 %976, i64* %977, align 8, !dbg !4252
  %978 = load i32, i32* %23, align 4, !dbg !4253
  %_83 = sub i32 %978, 2
  %gen84 = mul i32 %_83, 2
  %_85 = shl i32 %978, 2
  %979 = or i32 %978, 2, !dbg !4254
  store i32 %979, i32* %14, align 4, !dbg !4255
  br label %originalBB82

originalBB89alteredBB:                            ; preds = %originalBB89, %446
  %980 = load i8**, i8*** %21, align 8, !dbg !4256
  %981 = load i8*, i8** %980, align 8, !dbg !4257
  %982 = load i8, i8* %981, align 1, !dbg !4258
  %983 = sext i8 %982 to i32, !dbg !4258
  br label %originalBB89

originalBB93alteredBB:                            ; preds = %originalBB93, %467
  %984 = load i8*, i8** %19, align 8, !dbg !4260
  %985 = call i8* @strchr(i8* %984, i32 48) #13, !dbg !4263
  %986 = icmp ne i8* %985, null, !dbg !4263
  br label %originalBB93

originalBB97alteredBB:                            ; preds = %originalBB97, %487
  %987 = load i8**, i8*** %21, align 8, !dbg !4265
  %988 = getelementptr inbounds i8*, i8** %987, i64 0, !dbg !4265
  %989 = load i8*, i8** %988, align 8, !dbg !4265
  %990 = getelementptr inbounds i8, i8* %989, i64 1, !dbg !4265
  %991 = load i8, i8* %990, align 1, !dbg !4265
  %992 = sext i8 %991 to i32, !dbg !4265
  br label %originalBB97

originalBB101alteredBB:                           ; preds = %originalBB101, %510
  %993 = load i8**, i8*** %21, align 8, !dbg !4267
  %994 = getelementptr inbounds i8*, i8** %993, i64 0, !dbg !4267
  %995 = load i8*, i8** %994, align 8, !dbg !4267
  %996 = getelementptr inbounds i8, i8* %995, i64 2, !dbg !4267
  %997 = load i8, i8* %996, align 1, !dbg !4267
  %998 = sext i8 %997 to i32, !dbg !4267
  %999 = icmp eq i32 %998, 66, !dbg !4270
  br label %originalBB101

originalBB105alteredBB:                           ; preds = %originalBB105, %534
  %1000 = load i32, i32* %27, align 4, !dbg !4272
  %_106 = shl i32 %1000, 2
  %_107 = sub i32 0, %1000
  %gen108 = add i32 %_107, 2
  %_109 = shl i32 %1000, 2
  %_110 = shl i32 %1000, 2
  %1001 = add nsw i32 %1000, 2, !dbg !4272
  store i32 %1001, i32* %27, align 4, !dbg !4272
  br label %originalBB105

originalBB114alteredBB:                           ; preds = %originalBB114, %553
  br label %originalBB114

originalBB118alteredBB:                           ; preds = %originalBB118, %574
  br label %originalBB118

originalBB122alteredBB:                           ; preds = %originalBB122, %591
  %1002 = load i8**, i8*** %21, align 8, !dbg !4280
  %1003 = load i8*, i8** %1002, align 8, !dbg !4281
  %1004 = load i8, i8* %1003, align 1, !dbg !4282
  %1005 = sext i8 %1004 to i32, !dbg !4282
  br label %originalBB122

originalBB126alteredBB:                           ; preds = %originalBB126, %612
  %1006 = call i32 @bkm_scale(i64* %22, i32 512), !dbg !4284
  store i32 %1006, i32* %28, align 4, !dbg !4286
  br label %originalBB126

originalBB130alteredBB:                           ; preds = %originalBB130, %630
  %1007 = call i32 @bkm_scale(i64* %22, i32 1024), !dbg !4288
  store i32 %1007, i32* %28, align 4, !dbg !4289
  br label %originalBB130

originalBB134alteredBB:                           ; preds = %originalBB134, %648
  store i32 0, i32* %28, align 4, !dbg !4291
  br label %originalBB134

originalBB138alteredBB:                           ; preds = %originalBB138, %668
  %1008 = load i32, i32* %26, align 4, !dbg !4297
  %1009 = call i32 @bkm_scale_by_power(i64* %22, i32 %1008, i32 3), !dbg !4298
  store i32 %1009, i32* %28, align 4, !dbg !4299
  br label %originalBB138

originalBB142alteredBB:                           ; preds = %originalBB142, %687
  %1010 = load i32, i32* %26, align 4, !dbg !4301
  %1011 = call i32 @bkm_scale_by_power(i64* %22, i32 %1010, i32 1), !dbg !4302
  store i32 %1011, i32* %28, align 4, !dbg !4303
  br label %originalBB142

originalBB146alteredBB:                           ; preds = %originalBB146, %706
  %1012 = load i32, i32* %26, align 4, !dbg !4305
  %1013 = call i32 @bkm_scale_by_power(i64* %22, i32 %1012, i32 2), !dbg !4306
  store i32 %1013, i32* %28, align 4, !dbg !4307
  br label %originalBB146

originalBB150alteredBB:                           ; preds = %originalBB150, %725
  %1014 = load i32, i32* %26, align 4, !dbg !4309
  %1015 = call i32 @bkm_scale_by_power(i64* %22, i32 %1014, i32 5), !dbg !4310
  store i32 %1015, i32* %28, align 4, !dbg !4311
  br label %originalBB150

originalBB154alteredBB:                           ; preds = %originalBB154, %744
  %1016 = load i32, i32* %26, align 4, !dbg !4313
  %1017 = call i32 @bkm_scale_by_power(i64* %22, i32 %1016, i32 4), !dbg !4314
  store i32 %1017, i32* %28, align 4, !dbg !4315
  br label %originalBB154

originalBB158alteredBB:                           ; preds = %originalBB158, %763
  %1018 = call i32 @bkm_scale(i64* %22, i32 2), !dbg !4317
  store i32 %1018, i32* %28, align 4, !dbg !4318
  br label %originalBB158

originalBB162alteredBB:                           ; preds = %originalBB162, %781
  %1019 = load i32, i32* %26, align 4, !dbg !4320
  %1020 = call i32 @bkm_scale_by_power(i64* %22, i32 %1019, i32 8), !dbg !4321
  store i32 %1020, i32* %28, align 4, !dbg !4322
  br label %originalBB162

originalBB166alteredBB:                           ; preds = %originalBB166, %803
  %1021 = load i64, i64* %22, align 8, !dbg !4328
  %1022 = load i64*, i64** %18, align 8, !dbg !4329
  store i64 %1021, i64* %1022, align 8, !dbg !4330
  %1023 = load i32, i32* %23, align 4, !dbg !4331
  %_167 = sub i32 %1023, 2
  %gen168 = mul i32 %_167, 2
  %_169 = sub i32 %1023, 2
  %gen170 = mul i32 %_169, 2
  %_171 = sub i32 %1023, 2
  %gen172 = mul i32 %_171, 2
  %1024 = or i32 %1023, 2, !dbg !4332
  store i32 %1024, i32* %14, align 4, !dbg !4333
  br label %originalBB166

originalBB176alteredBB:                           ; preds = %originalBB176, %824
  %1025 = load i32, i32* %28, align 4, !dbg !4334
  %1026 = load i32, i32* %23, align 4, !dbg !4335
  %1027 = or i32 %1026, %1025, !dbg !4335
  store i32 %1027, i32* %23, align 4, !dbg !4335
  %1028 = load i32, i32* %27, align 4, !dbg !4336
  %1029 = load i8**, i8*** %21, align 8, !dbg !4337
  %1030 = load i8*, i8** %1029, align 8, !dbg !4338
  %1031 = sext i32 %1028 to i64, !dbg !4338
  %1032 = getelementptr inbounds i8, i8* %1030, i64 %1031, !dbg !4338
  store i8* %1032, i8** %1029, align 8, !dbg !4338
  %1033 = load i8**, i8*** %21, align 8, !dbg !4339
  %1034 = load i8*, i8** %1033, align 8, !dbg !4341
  %1035 = load i8, i8* %1034, align 1, !dbg !4342
  %1036 = icmp ne i8 %1035, 0, !dbg !4342
  br label %originalBB176

originalBB180alteredBB:                           ; preds = %originalBB180, %853
  %1037 = load i32, i32* %23, align 4, !dbg !4344
  %_181 = shl i32 %1037, 2
  %_182 = sub i32 %1037, 2
  %gen183 = mul i32 %_182, 2
  %_184 = sub i32 %1037, 2
  %gen185 = mul i32 %_184, 2
  %_186 = sub i32 0, %1037
  %gen187 = add i32 %_186, 2
  %1038 = or i32 %1037, 2, !dbg !4344
  store i32 %1038, i32* %23, align 4, !dbg !4344
  br label %originalBB180

originalBB191alteredBB:                           ; preds = %originalBB191, %873
  %1039 = load i64, i64* %22, align 8, !dbg !4347
  %1040 = load i64*, i64** %18, align 8, !dbg !4348
  store i64 %1039, i64* %1040, align 8, !dbg !4349
  %1041 = load i32, i32* %23, align 4, !dbg !4350
  store i32 %1041, i32* %14, align 4, !dbg !4351
  br label %originalBB191

originalBB195alteredBB:                           ; preds = %originalBB195, %893
  %1042 = load i32, i32* %14, align 4, !dbg !4352
  br label %originalBB195
}

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #5

; Function Attrs: nounwind
declare dso_local i64 @strtoul(i8*, i8**, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale(i64*, i32) #4 !dbg !4376 {
  %3 = load i32, i32* @x.79
  %4 = load i32, i32* @y.80
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i64*, align 8
  %13 = alloca i32, align 4
  store i64* %0, i64** %12, align 8
  call void @llvm.dbg.declare(metadata i64** %12, metadata !4379, metadata !DIExpression()), !dbg !4380
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !4381, metadata !DIExpression()), !dbg !4382
  %14 = load i32, i32* %13, align 4, !dbg !4383
  %15 = sext i32 %14 to i64, !dbg !4383
  %16 = udiv i64 -1, %15, !dbg !4385
  %17 = load i64*, i64** %12, align 8, !dbg !4386
  %18 = load i64, i64* %17, align 8, !dbg !4387
  %19 = icmp ult i64 %16, %18, !dbg !4388
  %20 = load i32, i32* @x.79
  %21 = load i32, i32* @y.80
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %19, label %28, label %46, !dbg !4389

28:                                               ; preds = %originalBBpart2
  %29 = load i32, i32* @x.79
  %30 = load i32, i32* @y.80
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %28, %originalBB11alteredBB
  %37 = load i64*, i64** %12, align 8, !dbg !4390
  store i64 -1, i64* %37, align 8, !dbg !4392
  store i32 1, i32* %11, align 4, !dbg !4393
  %38 = load i32, i32* @x.79
  %39 = load i32, i32* @y.80
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  br label %52, !dbg !4393

46:                                               ; preds = %originalBBpart2
  %47 = load i32, i32* %13, align 4, !dbg !4394
  %48 = sext i32 %47 to i64, !dbg !4394
  %49 = load i64*, i64** %12, align 8, !dbg !4395
  %50 = load i64, i64* %49, align 8, !dbg !4396
  %51 = mul i64 %50, %48, !dbg !4396
  store i64 %51, i64* %49, align 8, !dbg !4396
  store i32 0, i32* %11, align 4, !dbg !4397
  br label %52, !dbg !4397

52:                                               ; preds = %46, %originalBBpart213
  %53 = load i32, i32* @x.79
  %54 = load i32, i32* @y.80
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %52, %originalBB15alteredBB
  %61 = load i32, i32* %11, align 4, !dbg !4398
  %62 = load i32, i32* @x.79
  %63 = load i32, i32* @y.80
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  ret i32 %61, !dbg !4398

originalBBalteredBB:                              ; preds = %originalBB, %2
  %70 = alloca i32, align 4
  %71 = alloca i64*, align 8
  %72 = alloca i32, align 4
  store i64* %0, i64** %71, align 8
  call void @llvm.dbg.declare(metadata i64** %71, metadata !4399, metadata !DIExpression()), !dbg !4380
  store i32 %1, i32* %72, align 4
  call void @llvm.dbg.declare(metadata i32* %72, metadata !4402, metadata !DIExpression()), !dbg !4382
  %73 = load i32, i32* %72, align 4, !dbg !4383
  %74 = sext i32 %73 to i64, !dbg !4383
  %_ = sub i64 0, -1
  %gen = add i64 %_, %74
  %_1 = shl i64 -1, %74
  %_2 = sub i64 -1, %74
  %gen3 = mul i64 %_2, %74
  %_4 = sub i64 -1, %74
  %gen5 = mul i64 %_4, %74
  %_6 = sub i64 -1, %74
  %gen7 = mul i64 %_6, %74
  %_8 = shl i64 -1, %74
  %_9 = sub i64 -1, %74
  %gen10 = mul i64 %_9, %74
  %75 = udiv i64 -1, %74, !dbg !4385
  %76 = load i64*, i64** %71, align 8, !dbg !4386
  %77 = load i64, i64* %76, align 8, !dbg !4387
  %78 = icmp ult i64 %75, %77, !dbg !4388
  br label %originalBB

originalBB11alteredBB:                            ; preds = %originalBB11, %28
  %79 = load i64*, i64** %12, align 8, !dbg !4390
  store i64 -1, i64* %79, align 8, !dbg !4392
  store i32 1, i32* %11, align 4, !dbg !4393
  br label %originalBB11

originalBB15alteredBB:                            ; preds = %originalBB15, %52
  %80 = load i32, i32* %11, align 4, !dbg !4398
  br label %originalBB15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale_by_power(i64*, i32, i32) #4 !dbg !4403 {
  %4 = load i32, i32* @x.81
  %5 = load i32, i32* @y.82
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i64*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i64* %0, i64** %12, align 8
  call void @llvm.dbg.declare(metadata i64** %12, metadata !4406, metadata !DIExpression()), !dbg !4407
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !4408, metadata !DIExpression()), !dbg !4409
  store i32 %2, i32* %14, align 4
  call void @llvm.dbg.declare(metadata i32* %14, metadata !4410, metadata !DIExpression()), !dbg !4411
  call void @llvm.dbg.declare(metadata i32* %15, metadata !4412, metadata !DIExpression()), !dbg !4413
  store i32 0, i32* %15, align 4, !dbg !4413
  %16 = load i32, i32* @x.81
  %17 = load i32, i32* @y.82
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %24, !dbg !4414

24:                                               ; preds = %originalBBpart228, %originalBBpart2
  %25 = load i32, i32* @x.81
  %26 = load i32, i32* @y.82
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i32, i32* %14, align 4, !dbg !4415
  %34 = add nsw i32 %33, -1, !dbg !4415
  store i32 %34, i32* %14, align 4, !dbg !4415
  %35 = icmp ne i32 %33, 0, !dbg !4414
  %36 = load i32, i32* @x.81
  %37 = load i32, i32* @y.82
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart214, label %originalBB1alteredBB

originalBBpart214:                                ; preds = %originalBB1
  br i1 %35, label %44, label %66, !dbg !4414

44:                                               ; preds = %originalBBpart214
  %45 = load i32, i32* @x.81
  %46 = load i32, i32* @y.82
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB16, label %originalBB16alteredBB

originalBB16:                                     ; preds = %44, %originalBB16alteredBB
  %53 = load i64*, i64** %12, align 8, !dbg !4416
  %54 = load i32, i32* %13, align 4, !dbg !4417
  %55 = call i32 @bkm_scale(i64* %53, i32 %54), !dbg !4418
  %56 = load i32, i32* %15, align 4, !dbg !4419
  %57 = or i32 %56, %55, !dbg !4419
  store i32 %57, i32* %15, align 4, !dbg !4419
  %58 = load i32, i32* @x.81
  %59 = load i32, i32* @y.82
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart228, label %originalBB16alteredBB

originalBBpart228:                                ; preds = %originalBB16
  br label %24, !dbg !4414, !llvm.loop !4420

66:                                               ; preds = %originalBBpart214
  %67 = load i32, i32* %15, align 4, !dbg !4422
  ret i32 %67, !dbg !4423

originalBBalteredBB:                              ; preds = %originalBB, %3
  %68 = alloca i64*, align 8
  %69 = alloca i32, align 4
  %70 = alloca i32, align 4
  %71 = alloca i32, align 4
  store i64* %0, i64** %68, align 8
  call void @llvm.dbg.declare(metadata i64** %68, metadata !4424, metadata !DIExpression()), !dbg !4407
  store i32 %1, i32* %69, align 4
  call void @llvm.dbg.declare(metadata i32* %69, metadata !4427, metadata !DIExpression()), !dbg !4409
  store i32 %2, i32* %70, align 4
  call void @llvm.dbg.declare(metadata i32* %70, metadata !4428, metadata !DIExpression()), !dbg !4411
  call void @llvm.dbg.declare(metadata i32* %71, metadata !4429, metadata !DIExpression()), !dbg !4413
  store i32 0, i32* %71, align 4, !dbg !4413
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %72 = load i32, i32* %14, align 4, !dbg !4415
  %_ = sub i32 %72, -1
  %gen = mul i32 %_, -1
  %_2 = sub i32 0, %72
  %gen3 = add i32 %_2, -1
  %_4 = sub i32 0, %72
  %gen5 = add i32 %_4, -1
  %_6 = sub i32 %72, -1
  %gen7 = mul i32 %_6, -1
  %_8 = sub i32 0, %72
  %gen9 = add i32 %_8, -1
  %_10 = sub i32 0, %72
  %gen11 = add i32 %_10, -1
  %_12 = shl i32 %72, -1
  %73 = add nsw i32 %72, -1, !dbg !4415
  store i32 %73, i32* %14, align 4, !dbg !4415
  %74 = icmp ne i32 %72, 0, !dbg !4414
  br label %originalBB1

originalBB16alteredBB:                            ; preds = %originalBB16, %44
  %75 = load i64*, i64** %12, align 8, !dbg !4416
  %76 = load i32, i32* %13, align 4, !dbg !4417
  %77 = call i32 @bkm_scale(i64* %75, i32 %76), !dbg !4418
  %78 = load i32, i32* %15, align 4, !dbg !4419
  %_17 = shl i32 %78, %77
  %_18 = sub i32 %78, %77
  %gen19 = mul i32 %_18, %77
  %_20 = sub i32 0, %78
  %gen21 = add i32 %_20, %77
  %_22 = sub i32 0, %78
  %gen23 = add i32 %_22, %77
  %_24 = shl i32 %78, %77
  %_25 = sub i32 0, %78
  %gen26 = add i32 %_25, %77
  %79 = or i32 %78, %77, !dbg !4419
  store i32 %79, i32* %15, align 4, !dbg !4419
  br label %originalBB16
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @rpl_mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #4 !dbg !4430 {
  %5 = alloca i64, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %struct.__mbstate_t*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8, align 1
  store i32* %0, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !4446, metadata !DIExpression()), !dbg !4447
  store i8* %1, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !4448, metadata !DIExpression()), !dbg !4449
  store i64 %2, i64* %8, align 8
  call void @llvm.dbg.declare(metadata i64* %8, metadata !4450, metadata !DIExpression()), !dbg !4451
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %9, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %9, metadata !4452, metadata !DIExpression()), !dbg !4453
  call void @llvm.dbg.declare(metadata i64* %10, metadata !4454, metadata !DIExpression()), !dbg !4455
  call void @llvm.dbg.declare(metadata i32* %11, metadata !4456, metadata !DIExpression()), !dbg !4457
  %13 = load i32*, i32** %6, align 8, !dbg !4458
  %14 = icmp ne i32* %13, null, !dbg !4458
  br i1 %14, label %32, label %15, !dbg !4460

15:                                               ; preds = %4
  %16 = load i32, i32* @x.83
  %17 = load i32, i32* @y.84
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %15, %originalBBalteredBB
  store i32* %11, i32** %6, align 8, !dbg !4461
  %24 = load i32, i32* @x.83
  %25 = load i32, i32* @y.84
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %32, !dbg !4462

32:                                               ; preds = %originalBBpart2, %4
  %33 = load i32, i32* @x.83
  %34 = load i32, i32* @y.84
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load i32*, i32** %6, align 8, !dbg !4463
  %42 = load i8*, i8** %7, align 8, !dbg !4464
  %43 = load i64, i64* %8, align 8, !dbg !4465
  %44 = load %struct.__mbstate_t*, %struct.__mbstate_t** %9, align 8, !dbg !4466
  %45 = call i64 @mbrtowc(i32* %41, i8* %42, i64 %43, %struct.__mbstate_t* %44) #10, !dbg !4467
  store i64 %45, i64* %10, align 8, !dbg !4468
  %46 = load i64, i64* %10, align 8, !dbg !4469
  %47 = icmp ule i64 -2, %46, !dbg !4471
  %48 = load i32, i32* @x.83
  %49 = load i32, i32* @y.84
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %115, !dbg !4472

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.83
  %58 = load i32, i32* @y.84
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load i64, i64* %8, align 8, !dbg !4473
  %66 = icmp ne i64 %65, 0, !dbg !4474
  %67 = load i32, i32* @x.83
  %68 = load i32, i32* @y.84
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %75, label %115, !dbg !4475

75:                                               ; preds = %originalBBpart28
  %76 = load i32, i32* @x.83
  %77 = load i32, i32* @y.84
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = call zeroext i1 @hard_locale(i32 0), !dbg !4476
  %85 = load i32, i32* @x.83
  %86 = load i32, i32* @y.84
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %84, label %115, label %93, !dbg !4477

93:                                               ; preds = %originalBBpart212
  call void @llvm.dbg.declare(metadata i8* %12, metadata !4478, metadata !DIExpression()), !dbg !4480
  %94 = load i32, i32* @x.83
  %95 = load i32, i32* @y.84
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %93, %originalBB14alteredBB
  %102 = load i8*, i8** %7, align 8, !dbg !4481
  %103 = load i8, i8* %102, align 1, !dbg !4482
  store i8 %103, i8* %12, align 1, !dbg !4480
  %104 = load i8, i8* %12, align 1, !dbg !4483
  %105 = zext i8 %104 to i32, !dbg !4483
  %106 = load i32*, i32** %6, align 8, !dbg !4484
  store i32 %105, i32* %106, align 4, !dbg !4485
  store i64 1, i64* %5, align 8, !dbg !4486
  %107 = load i32, i32* @x.83
  %108 = load i32, i32* @y.84
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %133, !dbg !4486

115:                                              ; preds = %originalBBpart212, %originalBBpart28, %originalBBpart24
  %116 = load i32, i32* @x.83
  %117 = load i32, i32* @y.84
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %115, %originalBB18alteredBB
  %124 = load i64, i64* %10, align 8, !dbg !4487
  store i64 %124, i64* %5, align 8, !dbg !4488
  %125 = load i32, i32* @x.83
  %126 = load i32, i32* @y.84
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %133, !dbg !4488

133:                                              ; preds = %originalBBpart220, %originalBBpart216
  %134 = load i32, i32* @x.83
  %135 = load i32, i32* @y.84
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %133, %originalBB22alteredBB
  %142 = load i64, i64* %5, align 8, !dbg !4489
  %143 = load i32, i32* @x.83
  %144 = load i32, i32* @y.84
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret i64 %142, !dbg !4489

originalBBalteredBB:                              ; preds = %originalBB, %15
  store i32* %11, i32** %6, align 8, !dbg !4461
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  %151 = load i32*, i32** %6, align 8, !dbg !4463
  %152 = load i8*, i8** %7, align 8, !dbg !4464
  %153 = load i64, i64* %8, align 8, !dbg !4465
  %154 = load %struct.__mbstate_t*, %struct.__mbstate_t** %9, align 8, !dbg !4466
  %155 = call i64 @mbrtowc(i32* %151, i8* %152, i64 %153, %struct.__mbstate_t* %154) #10, !dbg !4467
  store i64 %155, i64* %10, align 8, !dbg !4468
  %156 = load i64, i64* %10, align 8, !dbg !4469
  %157 = icmp ule i64 -2, %156, !dbg !4471
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %158 = load i64, i64* %8, align 8, !dbg !4473
  %159 = icmp ne i64 %158, 0, !dbg !4474
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %160 = call zeroext i1 @hard_locale(i32 0), !dbg !4476
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %93
  %161 = load i8*, i8** %7, align 8, !dbg !4481
  %162 = load i8, i8* %161, align 1, !dbg !4482
  store i8 %162, i8* %12, align 1, !dbg !4480
  %163 = load i8, i8* %12, align 1, !dbg !4483
  %164 = zext i8 %163 to i32, !dbg !4483
  %165 = load i32*, i32** %6, align 8, !dbg !4484
  store i32 %164, i32* %165, align 4, !dbg !4485
  store i64 1, i64* %5, align 8, !dbg !4486
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %115
  %166 = load i64, i64* %10, align 8, !dbg !4487
  store i64 %166, i64* %5, align 8, !dbg !4488
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %133
  %167 = load i64, i64* %5, align 8, !dbg !4489
  br label %originalBB22
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #2

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @c_strcasecmp(i8*, i8*) #11 !dbg !4490 {
  %3 = load i32, i32* @x.85
  %4 = load i32, i32* @y.86
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !4494, metadata !DIExpression()), !dbg !4495
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !4496, metadata !DIExpression()), !dbg !4497
  call void @llvm.dbg.declare(metadata i8** %14, metadata !4498, metadata !DIExpression()), !dbg !4499
  %18 = load i8*, i8** %12, align 8, !dbg !4500
  store i8* %18, i8** %14, align 8, !dbg !4499
  call void @llvm.dbg.declare(metadata i8** %15, metadata !4501, metadata !DIExpression()), !dbg !4502
  %19 = load i8*, i8** %13, align 8, !dbg !4503
  store i8* %19, i8** %15, align 8, !dbg !4502
  call void @llvm.dbg.declare(metadata i8* %16, metadata !4504, metadata !DIExpression()), !dbg !4505
  call void @llvm.dbg.declare(metadata i8* %17, metadata !4506, metadata !DIExpression()), !dbg !4507
  %20 = load i8*, i8** %14, align 8, !dbg !4508
  %21 = load i8*, i8** %15, align 8, !dbg !4510
  %22 = icmp eq i8* %20, %21, !dbg !4511
  %23 = load i32, i32* @x.85
  %24 = load i32, i32* @y.86
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %48, !dbg !4512

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.85
  %33 = load i32, i32* @y.86
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32 0, i32* %11, align 4, !dbg !4513
  %40 = load i32, i32* @x.85
  %41 = load i32, i32* @y.86
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %161, !dbg !4513

48:                                               ; preds = %originalBBpart2
  br label %49, !dbg !4514

49:                                               ; preds = %originalBBpart220, %48
  %50 = load i32, i32* @x.85
  %51 = load i32, i32* @y.86
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %49, %originalBB6alteredBB
  %58 = load i8*, i8** %14, align 8, !dbg !4515
  %59 = load i8, i8* %58, align 1, !dbg !4517
  %60 = zext i8 %59 to i32, !dbg !4517
  %61 = call i32 @c_tolower(i32 %60), !dbg !4518
  %62 = trunc i32 %61 to i8, !dbg !4518
  store i8 %62, i8* %16, align 1, !dbg !4519
  %63 = load i8*, i8** %15, align 8, !dbg !4520
  %64 = load i8, i8* %63, align 1, !dbg !4521
  %65 = zext i8 %64 to i32, !dbg !4521
  %66 = call i32 @c_tolower(i32 %65), !dbg !4522
  %67 = trunc i32 %66 to i8, !dbg !4522
  store i8 %67, i8* %17, align 1, !dbg !4523
  %68 = load i8, i8* %16, align 1, !dbg !4524
  %69 = zext i8 %68 to i32, !dbg !4524
  %70 = icmp eq i32 %69, 0, !dbg !4526
  %71 = load i32, i32* @x.85
  %72 = load i32, i32* @y.86
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %70, label %79, label %96, !dbg !4527

79:                                               ; preds = %originalBBpart28
  %80 = load i32, i32* @x.85
  %81 = load i32, i32* @y.86
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %79, %originalBB10alteredBB
  %88 = load i32, i32* @x.85
  %89 = load i32, i32* @y.86
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %139, !dbg !4528

96:                                               ; preds = %originalBBpart28
  %97 = load i32, i32* @x.85
  %98 = load i32, i32* @y.86
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %96, %originalBB14alteredBB
  %105 = load i8*, i8** %14, align 8, !dbg !4529
  %106 = getelementptr inbounds i8, i8* %105, i32 1, !dbg !4529
  store i8* %106, i8** %14, align 8, !dbg !4529
  %107 = load i8*, i8** %15, align 8, !dbg !4530
  %108 = getelementptr inbounds i8, i8* %107, i32 1, !dbg !4530
  store i8* %108, i8** %15, align 8, !dbg !4530
  %109 = load i32, i32* @x.85
  %110 = load i32, i32* @y.86
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %117, !dbg !4531

117:                                              ; preds = %originalBBpart216
  %118 = load i32, i32* @x.85
  %119 = load i32, i32* @y.86
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %117, %originalBB18alteredBB
  %126 = load i8, i8* %16, align 1, !dbg !4532
  %127 = zext i8 %126 to i32, !dbg !4532
  %128 = load i8, i8* %17, align 1, !dbg !4533
  %129 = zext i8 %128 to i32, !dbg !4533
  %130 = icmp eq i32 %127, %129, !dbg !4534
  %131 = load i32, i32* @x.85
  %132 = load i32, i32* @y.86
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %130, label %49, label %139, !dbg !4531, !llvm.loop !4535

139:                                              ; preds = %originalBBpart220, %originalBBpart212
  %140 = load i32, i32* @x.85
  %141 = load i32, i32* @y.86
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %139, %originalBB22alteredBB
  %148 = load i8, i8* %16, align 1, !dbg !4537
  %149 = zext i8 %148 to i32, !dbg !4537
  %150 = load i8, i8* %17, align 1, !dbg !4539
  %151 = zext i8 %150 to i32, !dbg !4539
  %152 = sub nsw i32 %149, %151, !dbg !4540
  store i32 %152, i32* %11, align 4, !dbg !4541
  %153 = load i32, i32* @x.85
  %154 = load i32, i32* @y.86
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBBpart227, label %originalBB22alteredBB

originalBBpart227:                                ; preds = %originalBB22
  br label %161, !dbg !4541

161:                                              ; preds = %originalBBpart227, %originalBBpart24
  %162 = load i32, i32* %11, align 4, !dbg !4542
  ret i32 %162, !dbg !4542

originalBBalteredBB:                              ; preds = %originalBB, %2
  %163 = alloca i32, align 4
  %164 = alloca i8*, align 8
  %165 = alloca i8*, align 8
  %166 = alloca i8*, align 8
  %167 = alloca i8*, align 8
  %168 = alloca i8, align 1
  %169 = alloca i8, align 1
  store i8* %0, i8** %164, align 8
  call void @llvm.dbg.declare(metadata i8** %164, metadata !4543, metadata !DIExpression()), !dbg !4495
  store i8* %1, i8** %165, align 8
  call void @llvm.dbg.declare(metadata i8** %165, metadata !4546, metadata !DIExpression()), !dbg !4497
  call void @llvm.dbg.declare(metadata i8** %166, metadata !4547, metadata !DIExpression()), !dbg !4499
  %170 = load i8*, i8** %164, align 8, !dbg !4500
  store i8* %170, i8** %166, align 8, !dbg !4499
  call void @llvm.dbg.declare(metadata i8** %167, metadata !4548, metadata !DIExpression()), !dbg !4502
  %171 = load i8*, i8** %165, align 8, !dbg !4503
  store i8* %171, i8** %167, align 8, !dbg !4502
  call void @llvm.dbg.declare(metadata i8* %168, metadata !4549, metadata !DIExpression()), !dbg !4505
  call void @llvm.dbg.declare(metadata i8* %169, metadata !4550, metadata !DIExpression()), !dbg !4507
  %172 = load i8*, i8** %166, align 8, !dbg !4508
  %173 = load i8*, i8** %167, align 8, !dbg !4510
  %174 = icmp eq i8* %172, %173, !dbg !4511
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32 0, i32* %11, align 4, !dbg !4513
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %49
  %175 = load i8*, i8** %14, align 8, !dbg !4515
  %176 = load i8, i8* %175, align 1, !dbg !4517
  %177 = zext i8 %176 to i32, !dbg !4517
  %178 = call i32 @c_tolower(i32 %177), !dbg !4518
  %179 = trunc i32 %178 to i8, !dbg !4518
  store i8 %179, i8* %16, align 1, !dbg !4519
  %180 = load i8*, i8** %15, align 8, !dbg !4520
  %181 = load i8, i8* %180, align 1, !dbg !4521
  %182 = zext i8 %181 to i32, !dbg !4521
  %183 = call i32 @c_tolower(i32 %182), !dbg !4522
  %184 = trunc i32 %183 to i8, !dbg !4522
  store i8 %184, i8* %17, align 1, !dbg !4523
  %185 = load i8, i8* %16, align 1, !dbg !4524
  %186 = zext i8 %185 to i32, !dbg !4524
  %187 = icmp eq i32 %186, 0, !dbg !4526
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %79
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %96
  %188 = load i8*, i8** %14, align 8, !dbg !4529
  %189 = getelementptr inbounds i8, i8* %188, i32 1, !dbg !4529
  store i8* %189, i8** %14, align 8, !dbg !4529
  %190 = load i8*, i8** %15, align 8, !dbg !4530
  %191 = getelementptr inbounds i8, i8* %190, i32 1, !dbg !4530
  store i8* %191, i8** %15, align 8, !dbg !4530
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %117
  %192 = load i8, i8* %16, align 1, !dbg !4532
  %193 = zext i8 %192 to i32, !dbg !4532
  %194 = load i8, i8* %17, align 1, !dbg !4533
  %195 = zext i8 %194 to i32, !dbg !4533
  %196 = icmp eq i32 %193, %195, !dbg !4534
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %139
  %197 = load i8, i8* %16, align 1, !dbg !4537
  %198 = zext i8 %197 to i32, !dbg !4537
  %199 = load i8, i8* %17, align 1, !dbg !4539
  %200 = zext i8 %199 to i32, !dbg !4539
  %_ = shl i32 %198, %200
  %_23 = sub i32 %198, %200
  %gen = mul i32 %_23, %200
  %_24 = sub i32 0, %198
  %gen25 = add i32 %_24, %200
  %201 = sub nsw i32 %198, %200, !dbg !4540
  store i32 %201, i32* %11, align 4, !dbg !4541
  br label %originalBB22
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @close_stream(%struct._IO_FILE*) #4 !dbg !4551 {
  %2 = alloca i32, align 4
  %3 = alloca %struct._IO_FILE*, align 8
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %3, metadata !4589, metadata !DIExpression()), !dbg !4590
  call void @llvm.dbg.declare(metadata i8* %4, metadata !4591, metadata !DIExpression()), !dbg !4593
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !4594
  %8 = call i64 @__fpending(%struct._IO_FILE* %7) #10, !dbg !4595
  %9 = icmp ne i64 %8, 0, !dbg !4596
  %10 = zext i1 %9 to i8, !dbg !4593
  store i8 %10, i8* %4, align 1, !dbg !4593
  call void @llvm.dbg.declare(metadata i8* %5, metadata !4597, metadata !DIExpression()), !dbg !4598
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !4599
  %12 = call i32 @ferror_unlocked(%struct._IO_FILE* %11) #10, !dbg !4599
  %13 = icmp ne i32 %12, 0, !dbg !4600
  %14 = zext i1 %13 to i8, !dbg !4598
  store i8 %14, i8* %5, align 1, !dbg !4598
  call void @llvm.dbg.declare(metadata i8* %6, metadata !4601, metadata !DIExpression()), !dbg !4602
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !4603
  %16 = call i32 @rpl_fclose(%struct._IO_FILE* %15), !dbg !4604
  %17 = icmp ne i32 %16, 0, !dbg !4605
  %18 = zext i1 %17 to i8, !dbg !4602
  store i8 %18, i8* %6, align 1, !dbg !4602
  %19 = load i8, i8* %5, align 1, !dbg !4606
  %20 = trunc i8 %19 to i1, !dbg !4606
  br i1 %20, label %63, label %21, !dbg !4608

21:                                               ; preds = %1
  %22 = load i32, i32* @x.87
  %23 = load i32, i32* @y.88
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %21, %originalBBalteredBB
  %30 = load i8, i8* %6, align 1, !dbg !4609
  %31 = trunc i8 %30 to i1, !dbg !4609
  %32 = load i32, i32* @x.87
  %33 = load i32, i32* @y.88
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %31, label %40, label %117, !dbg !4610

40:                                               ; preds = %originalBBpart2
  %41 = load i32, i32* @x.87
  %42 = load i32, i32* @y.88
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %40, %originalBB1alteredBB
  %49 = load i8, i8* %4, align 1, !dbg !4611
  %50 = trunc i8 %49 to i1, !dbg !4611
  %51 = load i32, i32* @x.87
  %52 = load i32, i32* @y.88
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %50, label %63, label %59, !dbg !4612

59:                                               ; preds = %originalBBpart24
  %60 = call i32* @__errno_location() #15, !dbg !4613
  %61 = load i32, i32* %60, align 4, !dbg !4613
  %62 = icmp ne i32 %61, 9, !dbg !4614
  br i1 %62, label %63, label %117, !dbg !4615

63:                                               ; preds = %59, %originalBBpart24, %1
  %64 = load i32, i32* @x.87
  %65 = load i32, i32* @y.88
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %63, %originalBB6alteredBB
  %72 = load i8, i8* %6, align 1, !dbg !4616
  %73 = trunc i8 %72 to i1, !dbg !4616
  %74 = load i32, i32* @x.87
  %75 = load i32, i32* @y.88
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %73, label %100, label %82, !dbg !4619

82:                                               ; preds = %originalBBpart28
  %83 = load i32, i32* @x.87
  %84 = load i32, i32* @y.88
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %82, %originalBB10alteredBB
  %91 = call i32* @__errno_location() #15, !dbg !4620
  store i32 0, i32* %91, align 4, !dbg !4621
  %92 = load i32, i32* @x.87
  %93 = load i32, i32* @y.88
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %100, !dbg !4620

100:                                              ; preds = %originalBBpart212, %originalBBpart28
  %101 = load i32, i32* @x.87
  %102 = load i32, i32* @y.88
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %100, %originalBB14alteredBB
  store i32 -1, i32* %2, align 4, !dbg !4622
  %109 = load i32, i32* @x.87
  %110 = load i32, i32* @y.88
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %134, !dbg !4622

117:                                              ; preds = %59, %originalBBpart2
  %118 = load i32, i32* @x.87
  %119 = load i32, i32* @y.88
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %117, %originalBB18alteredBB
  store i32 0, i32* %2, align 4, !dbg !4623
  %126 = load i32, i32* @x.87
  %127 = load i32, i32* @y.88
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %134, !dbg !4623

134:                                              ; preds = %originalBBpart220, %originalBBpart216
  %135 = load i32, i32* @x.87
  %136 = load i32, i32* @y.88
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %134, %originalBB22alteredBB
  %143 = load i32, i32* %2, align 4, !dbg !4624
  %144 = load i32, i32* @x.87
  %145 = load i32, i32* @y.88
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret i32 %143, !dbg !4624

originalBBalteredBB:                              ; preds = %originalBB, %21
  %152 = load i8, i8* %6, align 1, !dbg !4609
  %153 = trunc i8 %152 to i1, !dbg !4609
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %40
  %154 = load i8, i8* %4, align 1, !dbg !4611
  %155 = trunc i8 %154 to i1, !dbg !4611
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %63
  %156 = load i8, i8* %6, align 1, !dbg !4616
  %157 = trunc i8 %156 to i1, !dbg !4616
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %82
  %158 = call i32* @__errno_location() #15, !dbg !4620
  store i32 0, i32* %158, align 4, !dbg !4621
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %100
  store i32 -1, i32* %2, align 4, !dbg !4622
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %117
  store i32 0, i32* %2, align 4, !dbg !4623
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %134
  %159 = load i32, i32* %2, align 4, !dbg !4624
  br label %originalBB22
}

; Function Attrs: nounwind
declare dso_local i64 @__fpending(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @hard_locale(i32) #4 !dbg !4625 {
  %2 = alloca i1, align 1
  %3 = alloca i32, align 4
  %4 = alloca [257 x i8], align 16
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !4629, metadata !DIExpression()), !dbg !4630
  call void @llvm.dbg.declare(metadata [257 x i8]* %4, metadata !4631, metadata !DIExpression()), !dbg !4635
  %5 = load i32, i32* %3, align 4, !dbg !4636
  %6 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !4638
  %7 = call i32 @setlocale_null_r(i32 %5, i8* %6, i64 257), !dbg !4639
  %8 = icmp ne i32 %7, 0, !dbg !4639
  br i1 %8, label %9, label %10, !dbg !4640

9:                                                ; preds = %1
  store i1 false, i1* %2, align 1, !dbg !4641
  br label %53, !dbg !4641

10:                                               ; preds = %1
  %11 = load i32, i32* @x.89
  %12 = load i32, i32* @y.90
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %10, %originalBBalteredBB
  %19 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !4642
  %20 = call i32 @strcmp(i8* %19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.152, i64 0, i64 0)) #13, !dbg !4643
  %21 = icmp eq i32 %20, 0, !dbg !4644
  %22 = load i32, i32* @x.89
  %23 = load i32, i32* @y.90
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %34, label %30, !dbg !4645

30:                                               ; preds = %originalBBpart2
  %31 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !4646
  %32 = call i32 @strcmp(i8* %31, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.153, i64 0, i64 0)) #13, !dbg !4647
  %33 = icmp eq i32 %32, 0, !dbg !4648
  br label %34, !dbg !4645

34:                                               ; preds = %30, %originalBBpart2
  %35 = phi i1 [ true, %originalBBpart2 ], [ %33, %30 ]
  %36 = load i32, i32* @x.89
  %37 = load i32, i32* @y.90
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %34, %originalBB1alteredBB
  %44 = xor i1 %35, true, !dbg !4649
  store i1 %44, i1* %2, align 1, !dbg !4650
  %45 = load i32, i32* @x.89
  %46 = load i32, i32* @y.90
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %53, !dbg !4650

53:                                               ; preds = %originalBBpart24, %9
  %54 = load i32, i32* @x.89
  %55 = load i32, i32* @y.90
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = load i1, i1* %2, align 1, !dbg !4651
  %63 = load i32, i32* @x.89
  %64 = load i32, i32* @y.90
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i1 %62, !dbg !4651

originalBBalteredBB:                              ; preds = %originalBB, %10
  %71 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !4642
  %72 = call i32 @strcmp(i8* %71, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.152, i64 0, i64 0)) #13, !dbg !4643
  %73 = icmp eq i32 %72, 0, !dbg !4644
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %34
  %_ = shl i1 %35, true
  %74 = xor i1 %35, true, !dbg !4649
  store i1 %74, i1* %2, align 1, !dbg !4650
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  %75 = load i1, i1* %2, align 1, !dbg !4651
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @locale_charset() #4 !dbg !4652 {
  %1 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %1, metadata !4656, metadata !DIExpression()), !dbg !4657
  %2 = call i8* @nl_langinfo(i32 14) #10, !dbg !4658
  store i8* %2, i8** %1, align 8, !dbg !4659
  %3 = load i8*, i8** %1, align 8, !dbg !4660
  %4 = icmp eq i8* %3, null, !dbg !4662
  br i1 %4, label %5, label %6, !dbg !4663

5:                                                ; preds = %0
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.156, i64 0, i64 0), i8** %1, align 8, !dbg !4664
  br label %6, !dbg !4665

6:                                                ; preds = %5, %0
  %7 = load i8*, i8** %1, align 8, !dbg !4666
  %8 = getelementptr inbounds i8, i8* %7, i64 0, !dbg !4666
  %9 = load i8, i8* %8, align 1, !dbg !4666
  %10 = sext i8 %9 to i32, !dbg !4666
  %11 = icmp eq i32 %10, 0, !dbg !4670
  br i1 %11, label %12, label %29, !dbg !4671

12:                                               ; preds = %6
  %13 = load i32, i32* @x.91
  %14 = load i32, i32* @y.92
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %12, %originalBBalteredBB
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.157, i64 0, i64 0), i8** %1, align 8, !dbg !4672
  %21 = load i32, i32* @x.91
  %22 = load i32, i32* @y.92
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %29, !dbg !4673

29:                                               ; preds = %originalBBpart2, %6
  %30 = load i32, i32* @x.91
  %31 = load i32, i32* @y.92
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i8*, i8** %1, align 8, !dbg !4674
  %39 = load i32, i32* @x.91
  %40 = load i32, i32* @y.92
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  ret i8* %38, !dbg !4675

originalBBalteredBB:                              ; preds = %originalBB, %12
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.157, i64 0, i64 0), i8** %1, align 8, !dbg !4672
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %47 = load i8*, i8** %1, align 8, !dbg !4674
  br label %originalBB1
}

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @mgetgroups(i8*, i32, i32**) #4 !dbg !4676 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32**, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32*, align 8
  %11 = alloca i32*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32*, align 8
  %17 = alloca i32*, align 8
  store i8* %0, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !4678, metadata !DIExpression()), !dbg !4679
  store i32 %1, i32* %6, align 4
  call void @llvm.dbg.declare(metadata i32* %6, metadata !4680, metadata !DIExpression()), !dbg !4681
  store i32** %2, i32*** %7, align 8
  call void @llvm.dbg.declare(metadata i32*** %7, metadata !4682, metadata !DIExpression()), !dbg !4683
  call void @llvm.dbg.declare(metadata i32* %8, metadata !4684, metadata !DIExpression()), !dbg !4685
  call void @llvm.dbg.declare(metadata i32* %9, metadata !4686, metadata !DIExpression()), !dbg !4687
  call void @llvm.dbg.declare(metadata i32** %10, metadata !4688, metadata !DIExpression()), !dbg !4689
  %18 = load i8*, i8** %5, align 8, !dbg !4690
  %19 = icmp ne i8* %18, null, !dbg !4690
  br i1 %19, label %20, label %161, !dbg !4692

20:                                               ; preds = %3
  store i32 10, i32* %8, align 4, !dbg !4693
  %21 = load i32, i32* %8, align 4, !dbg !4695
  %22 = sext i32 %21 to i64, !dbg !4695
  %23 = call i32* @realloc_groupbuf(i32* null, i64 %22), !dbg !4696
  store i32* %23, i32** %10, align 8, !dbg !4697
  %24 = load i32*, i32** %10, align 8, !dbg !4698
  %25 = icmp eq i32* %24, null, !dbg !4700
  br i1 %25, label %26, label %43, !dbg !4701

26:                                               ; preds = %20
  %27 = load i32, i32* @x.93
  %28 = load i32, i32* @y.94
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %26, %originalBBalteredBB
  store i32 -1, i32* %4, align 4, !dbg !4702
  %35 = load i32, i32* @x.93
  %36 = load i32, i32* @y.94
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %649, !dbg !4702

43:                                               ; preds = %20
  %44 = load i32, i32* @x.93
  %45 = load i32, i32* @y.94
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %43, %originalBB1alteredBB
  %52 = load i32, i32* @x.93
  %53 = load i32, i32* @y.94
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %60, !dbg !4703

60:                                               ; preds = %160, %originalBBpart24
  call void @llvm.dbg.declare(metadata i32** %11, metadata !4704, metadata !DIExpression()), !dbg !4706
  call void @llvm.dbg.declare(metadata i32* %12, metadata !4707, metadata !DIExpression()), !dbg !4708
  %61 = load i32, i32* %8, align 4, !dbg !4709
  store i32 %61, i32* %12, align 4, !dbg !4708
  %62 = load i8*, i8** %5, align 8, !dbg !4710
  %63 = load i32, i32* %6, align 4, !dbg !4711
  %64 = load i32*, i32** %10, align 8, !dbg !4712
  %65 = call i32 @getgrouplist(i8* %62, i32 %63, i32* %64, i32* %8), !dbg !4713
  store i32 %65, i32* %9, align 4, !dbg !4714
  %66 = load i32, i32* %9, align 4, !dbg !4715
  %67 = icmp slt i32 %66, 0, !dbg !4717
  br i1 %67, label %68, label %75, !dbg !4718

68:                                               ; preds = %60
  %69 = load i32, i32* %12, align 4, !dbg !4719
  %70 = load i32, i32* %8, align 4, !dbg !4720
  %71 = icmp eq i32 %69, %70, !dbg !4721
  br i1 %71, label %72, label %75, !dbg !4722

72:                                               ; preds = %68
  %73 = load i32, i32* %8, align 4, !dbg !4723
  %74 = mul nsw i32 %73, 2, !dbg !4723
  store i32 %74, i32* %8, align 4, !dbg !4723
  br label %75, !dbg !4724

75:                                               ; preds = %72, %68, %60
  %76 = load i32, i32* @x.93
  %77 = load i32, i32* @y.94
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %75, %originalBB6alteredBB
  %84 = load i32*, i32** %10, align 8, !dbg !4725
  %85 = load i32, i32* %8, align 4, !dbg !4727
  %86 = sext i32 %85 to i64, !dbg !4727
  %87 = call i32* @realloc_groupbuf(i32* %84, i64 %86), !dbg !4728
  store i32* %87, i32** %11, align 8, !dbg !4729
  %88 = icmp eq i32* %87, null, !dbg !4730
  %89 = load i32, i32* @x.93
  %90 = load i32, i32* @y.94
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %88, label %97, label %120, !dbg !4731

97:                                               ; preds = %originalBBpart28
  call void @llvm.dbg.declare(metadata i32* %13, metadata !4732, metadata !DIExpression()), !dbg !4734
  %98 = load i32, i32* @x.93
  %99 = load i32, i32* @y.94
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %97, %originalBB10alteredBB
  %106 = call i32* @__errno_location() #15, !dbg !4735
  %107 = load i32, i32* %106, align 4, !dbg !4735
  store i32 %107, i32* %13, align 4, !dbg !4734
  %108 = load i32*, i32** %10, align 8, !dbg !4736
  %109 = bitcast i32* %108 to i8*, !dbg !4736
  call void @free(i8* %109) #10, !dbg !4737
  %110 = load i32, i32* %13, align 4, !dbg !4738
  %111 = call i32* @__errno_location() #15, !dbg !4739
  store i32 %110, i32* %111, align 4, !dbg !4740
  store i32 -1, i32* %4, align 4, !dbg !4741
  %112 = load i32, i32* @x.93
  %113 = load i32, i32* @y.94
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %649, !dbg !4741

120:                                              ; preds = %originalBBpart28
  %121 = load i32, i32* @x.93
  %122 = load i32, i32* @y.94
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %120, %originalBB14alteredBB
  %129 = load i32*, i32** %11, align 8, !dbg !4742
  store i32* %129, i32** %10, align 8, !dbg !4743
  %130 = load i32, i32* %9, align 4, !dbg !4744
  %131 = icmp sle i32 0, %130, !dbg !4746
  %132 = load i32, i32* @x.93
  %133 = load i32, i32* @y.94
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %131, label %140, label %160, !dbg !4747

140:                                              ; preds = %originalBBpart216
  %141 = load i32, i32* @x.93
  %142 = load i32, i32* @y.94
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %140, %originalBB18alteredBB
  %149 = load i32*, i32** %10, align 8, !dbg !4748
  %150 = load i32**, i32*** %7, align 8, !dbg !4750
  store i32* %149, i32** %150, align 8, !dbg !4751
  %151 = load i32, i32* %8, align 4, !dbg !4752
  store i32 %151, i32* %4, align 4, !dbg !4753
  %152 = load i32, i32* @x.93
  %153 = load i32, i32* @y.94
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %649, !dbg !4753

160:                                              ; preds = %originalBBpart216
  br label %60, !dbg !4703, !llvm.loop !4754

161:                                              ; preds = %3
  %162 = load i8*, i8** %5, align 8, !dbg !4756
  %163 = icmp ne i8* %162, null, !dbg !4756
  br i1 %163, label %164, label %184, !dbg !4756

164:                                              ; preds = %161
  %165 = load i32, i32* @x.93
  %166 = load i32, i32* @y.94
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %164, %originalBB22alteredBB
  %173 = load i8*, i8** %5, align 8, !dbg !4757
  %174 = load i32, i32* %6, align 4, !dbg !4758
  %175 = call i32 @getugroups(i32 0, i32* null, i8* %173, i32 %174), !dbg !4759
  %176 = load i32, i32* @x.93
  %177 = load i32, i32* @y.94
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %202, !dbg !4756

184:                                              ; preds = %161
  %185 = load i32, i32* @x.93
  %186 = load i32, i32* @y.94
  %187 = sub i32 %185, 1
  %188 = mul i32 %185, %187
  %189 = urem i32 %188, 2
  %190 = icmp eq i32 %189, 0
  %191 = icmp slt i32 %186, 10
  %192 = or i1 %190, %191
  br i1 %192, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %184, %originalBB26alteredBB
  %193 = call i32 @getgroups(i32 0, i32* null) #10, !dbg !4760
  %194 = load i32, i32* @x.93
  %195 = load i32, i32* @y.94
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %202, !dbg !4756

202:                                              ; preds = %originalBBpart228, %originalBBpart224
  %203 = phi i32 [ %175, %originalBBpart224 ], [ %193, %originalBBpart228 ], !dbg !4756
  %204 = load i32, i32* @x.93
  %205 = load i32, i32* @y.94
  %206 = sub i32 %204, 1
  %207 = mul i32 %204, %206
  %208 = urem i32 %207, 2
  %209 = icmp eq i32 %208, 0
  %210 = icmp slt i32 %205, 10
  %211 = or i1 %209, %210
  br i1 %211, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %202, %originalBB30alteredBB
  store i32 %203, i32* %8, align 4, !dbg !4761
  %212 = load i32, i32* %8, align 4, !dbg !4762
  %213 = icmp slt i32 %212, 0, !dbg !4764
  %214 = load i32, i32* @x.93
  %215 = load i32, i32* @y.94
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %213, label %222, label %286, !dbg !4765

222:                                              ; preds = %originalBBpart232
  %223 = call i32* @__errno_location() #15, !dbg !4766
  %224 = load i32, i32* %223, align 4, !dbg !4766
  %225 = icmp eq i32 %224, 38, !dbg !4769
  br i1 %225, label %226, label %269, !dbg !4770

226:                                              ; preds = %222
  %227 = load i32, i32* @x.93
  %228 = load i32, i32* @y.94
  %229 = sub i32 %227, 1
  %230 = mul i32 %227, %229
  %231 = urem i32 %230, 2
  %232 = icmp eq i32 %231, 0
  %233 = icmp slt i32 %228, 10
  %234 = or i1 %232, %233
  br i1 %234, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %226, %originalBB34alteredBB
  %235 = call i32* @realloc_groupbuf(i32* null, i64 1), !dbg !4771
  store i32* %235, i32** %10, align 8, !dbg !4772
  %236 = icmp ne i32* %235, null, !dbg !4772
  %237 = load i32, i32* @x.93
  %238 = load i32, i32* @y.94
  %239 = sub i32 %237, 1
  %240 = mul i32 %237, %239
  %241 = urem i32 %240, 2
  %242 = icmp eq i32 %241, 0
  %243 = icmp slt i32 %238, 10
  %244 = or i1 %242, %243
  br i1 %244, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %236, label %245, label %269, !dbg !4773

245:                                              ; preds = %originalBBpart236
  %246 = load i32, i32* @x.93
  %247 = load i32, i32* @y.94
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %245, %originalBB38alteredBB
  %254 = load i32*, i32** %10, align 8, !dbg !4774
  %255 = load i32**, i32*** %7, align 8, !dbg !4776
  store i32* %254, i32** %255, align 8, !dbg !4777
  %256 = load i32, i32* %6, align 4, !dbg !4778
  %257 = load i32*, i32** %10, align 8, !dbg !4779
  store i32 %256, i32* %257, align 4, !dbg !4780
  %258 = load i32, i32* %6, align 4, !dbg !4781
  %259 = icmp ne i32 %258, -1, !dbg !4782
  %260 = zext i1 %259 to i32, !dbg !4782
  store i32 %260, i32* %4, align 4, !dbg !4783
  %261 = load i32, i32* @x.93
  %262 = load i32, i32* @y.94
  %263 = sub i32 %261, 1
  %264 = mul i32 %261, %263
  %265 = urem i32 %264, 2
  %266 = icmp eq i32 %265, 0
  %267 = icmp slt i32 %262, 10
  %268 = or i1 %266, %267
  br i1 %268, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %649, !dbg !4783

269:                                              ; preds = %originalBBpart236, %222
  %270 = load i32, i32* @x.93
  %271 = load i32, i32* @y.94
  %272 = sub i32 %270, 1
  %273 = mul i32 %270, %272
  %274 = urem i32 %273, 2
  %275 = icmp eq i32 %274, 0
  %276 = icmp slt i32 %271, 10
  %277 = or i1 %275, %276
  br i1 %277, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %269, %originalBB42alteredBB
  store i32 -1, i32* %4, align 4, !dbg !4784
  %278 = load i32, i32* @x.93
  %279 = load i32, i32* @y.94
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %649, !dbg !4784

286:                                              ; preds = %originalBBpart232
  %287 = load i32, i32* @x.93
  %288 = load i32, i32* @y.94
  %289 = sub i32 %287, 1
  %290 = mul i32 %287, %289
  %291 = urem i32 %290, 2
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %292, %293
  br i1 %294, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %286, %originalBB46alteredBB
  %295 = load i32, i32* %8, align 4, !dbg !4785
  %296 = icmp eq i32 %295, 0, !dbg !4787
  %297 = load i32, i32* @x.93
  %298 = load i32, i32* @y.94
  %299 = sub i32 %297, 1
  %300 = mul i32 %297, %299
  %301 = urem i32 %300, 2
  %302 = icmp eq i32 %301, 0
  %303 = icmp slt i32 %298, 10
  %304 = or i1 %302, %303
  br i1 %304, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br i1 %296, label %311, label %305, !dbg !4788

305:                                              ; preds = %originalBBpart248
  %306 = load i8*, i8** %5, align 8, !dbg !4789
  %307 = icmp ne i8* %306, null, !dbg !4789
  br i1 %307, label %330, label %308, !dbg !4790

308:                                              ; preds = %305
  %309 = load i32, i32* %6, align 4, !dbg !4791
  %310 = icmp ne i32 %309, -1, !dbg !4792
  br i1 %310, label %311, label %330, !dbg !4793

311:                                              ; preds = %308, %originalBBpart248
  %312 = load i32, i32* @x.93
  %313 = load i32, i32* @y.94
  %314 = sub i32 %312, 1
  %315 = mul i32 %312, %314
  %316 = urem i32 %315, 2
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %317, %318
  br i1 %319, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %311, %originalBB50alteredBB
  %320 = load i32, i32* %8, align 4, !dbg !4794
  %321 = add nsw i32 %320, 1, !dbg !4794
  store i32 %321, i32* %8, align 4, !dbg !4794
  %322 = load i32, i32* @x.93
  %323 = load i32, i32* @y.94
  %324 = sub i32 %322, 1
  %325 = mul i32 %322, %324
  %326 = urem i32 %325, 2
  %327 = icmp eq i32 %326, 0
  %328 = icmp slt i32 %323, 10
  %329 = or i1 %327, %328
  br i1 %329, label %originalBBpart259, label %originalBB50alteredBB

originalBBpart259:                                ; preds = %originalBB50
  br label %330, !dbg !4795

330:                                              ; preds = %originalBBpart259, %308, %305
  %331 = load i32, i32* @x.93
  %332 = load i32, i32* @y.94
  %333 = sub i32 %331, 1
  %334 = mul i32 %331, %333
  %335 = urem i32 %334, 2
  %336 = icmp eq i32 %335, 0
  %337 = icmp slt i32 %332, 10
  %338 = or i1 %336, %337
  br i1 %338, label %originalBB61, label %originalBB61alteredBB

originalBB61:                                     ; preds = %330, %originalBB61alteredBB
  %339 = load i32, i32* %8, align 4, !dbg !4796
  %340 = sext i32 %339 to i64, !dbg !4796
  %341 = call i32* @realloc_groupbuf(i32* null, i64 %340), !dbg !4797
  store i32* %341, i32** %10, align 8, !dbg !4798
  %342 = load i32*, i32** %10, align 8, !dbg !4799
  %343 = icmp eq i32* %342, null, !dbg !4801
  %344 = load i32, i32* @x.93
  %345 = load i32, i32* @y.94
  %346 = sub i32 %344, 1
  %347 = mul i32 %344, %346
  %348 = urem i32 %347, 2
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %349, %350
  br i1 %351, label %originalBBpart263, label %originalBB61alteredBB

originalBBpart263:                                ; preds = %originalBB61
  br i1 %343, label %352, label %353, !dbg !4802

352:                                              ; preds = %originalBBpart263
  store i32 -1, i32* %4, align 4, !dbg !4803
  br label %649, !dbg !4803

353:                                              ; preds = %originalBBpart263
  %354 = load i8*, i8** %5, align 8, !dbg !4804
  %355 = icmp ne i8* %354, null, !dbg !4804
  br i1 %355, label %356, label %378, !dbg !4804

356:                                              ; preds = %353
  %357 = load i32, i32* @x.93
  %358 = load i32, i32* @y.94
  %359 = sub i32 %357, 1
  %360 = mul i32 %357, %359
  %361 = urem i32 %360, 2
  %362 = icmp eq i32 %361, 0
  %363 = icmp slt i32 %358, 10
  %364 = or i1 %362, %363
  br i1 %364, label %originalBB65, label %originalBB65alteredBB

originalBB65:                                     ; preds = %356, %originalBB65alteredBB
  %365 = load i32, i32* %8, align 4, !dbg !4805
  %366 = load i32*, i32** %10, align 8, !dbg !4806
  %367 = load i8*, i8** %5, align 8, !dbg !4807
  %368 = load i32, i32* %6, align 4, !dbg !4808
  %369 = call i32 @getugroups(i32 %365, i32* %366, i8* %367, i32 %368), !dbg !4809
  %370 = load i32, i32* @x.93
  %371 = load i32, i32* @y.94
  %372 = sub i32 %370, 1
  %373 = mul i32 %370, %372
  %374 = urem i32 %373, 2
  %375 = icmp eq i32 %374, 0
  %376 = icmp slt i32 %371, 10
  %377 = or i1 %375, %376
  br i1 %377, label %originalBBpart267, label %originalBB65alteredBB

originalBBpart267:                                ; preds = %originalBB65
  br label %407, !dbg !4804

378:                                              ; preds = %353
  %379 = load i32, i32* @x.93
  %380 = load i32, i32* @y.94
  %381 = sub i32 %379, 1
  %382 = mul i32 %379, %381
  %383 = urem i32 %382, 2
  %384 = icmp eq i32 %383, 0
  %385 = icmp slt i32 %380, 10
  %386 = or i1 %384, %385
  br i1 %386, label %originalBB69, label %originalBB69alteredBB

originalBB69:                                     ; preds = %378, %originalBB69alteredBB
  %387 = load i32, i32* %8, align 4, !dbg !4810
  %388 = load i32, i32* %6, align 4, !dbg !4811
  %389 = icmp ne i32 %388, -1, !dbg !4812
  %390 = zext i1 %389 to i32, !dbg !4812
  %391 = sub nsw i32 %387, %390, !dbg !4813
  %392 = load i32*, i32** %10, align 8, !dbg !4814
  %393 = load i32, i32* %6, align 4, !dbg !4815
  %394 = icmp ne i32 %393, -1, !dbg !4816
  %395 = zext i1 %394 to i32, !dbg !4816
  %396 = sext i32 %395 to i64, !dbg !4817
  %397 = getelementptr inbounds i32, i32* %392, i64 %396, !dbg !4817
  %398 = call i32 @getgroups(i32 %391, i32* %397) #10, !dbg !4818
  %399 = load i32, i32* @x.93
  %400 = load i32, i32* @y.94
  %401 = sub i32 %399, 1
  %402 = mul i32 %399, %401
  %403 = urem i32 %402, 2
  %404 = icmp eq i32 %403, 0
  %405 = icmp slt i32 %400, 10
  %406 = or i1 %404, %405
  br i1 %406, label %originalBBpart276, label %originalBB69alteredBB

originalBBpart276:                                ; preds = %originalBB69
  br label %407, !dbg !4804

407:                                              ; preds = %originalBBpart276, %originalBBpart267
  %408 = phi i32 [ %369, %originalBBpart267 ], [ %398, %originalBBpart276 ], !dbg !4804
  %409 = load i32, i32* @x.93
  %410 = load i32, i32* @y.94
  %411 = sub i32 %409, 1
  %412 = mul i32 %409, %411
  %413 = urem i32 %412, 2
  %414 = icmp eq i32 %413, 0
  %415 = icmp slt i32 %410, 10
  %416 = or i1 %414, %415
  br i1 %416, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %407, %originalBB78alteredBB
  store i32 %408, i32* %9, align 4, !dbg !4819
  %417 = load i32, i32* %9, align 4, !dbg !4820
  %418 = icmp slt i32 %417, 0, !dbg !4822
  %419 = load i32, i32* @x.93
  %420 = load i32, i32* @y.94
  %421 = sub i32 %419, 1
  %422 = mul i32 %419, %421
  %423 = urem i32 %422, 2
  %424 = icmp eq i32 %423, 0
  %425 = icmp slt i32 %420, 10
  %426 = or i1 %424, %425
  br i1 %426, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br i1 %418, label %427, label %434, !dbg !4823

427:                                              ; preds = %originalBBpart280
  call void @llvm.dbg.declare(metadata i32* %14, metadata !4824, metadata !DIExpression()), !dbg !4826
  %428 = call i32* @__errno_location() #15, !dbg !4827
  %429 = load i32, i32* %428, align 4, !dbg !4827
  store i32 %429, i32* %14, align 4, !dbg !4826
  %430 = load i32*, i32** %10, align 8, !dbg !4828
  %431 = bitcast i32* %430 to i8*, !dbg !4828
  call void @free(i8* %431) #10, !dbg !4829
  %432 = load i32, i32* %14, align 4, !dbg !4830
  %433 = call i32* @__errno_location() #15, !dbg !4831
  store i32 %432, i32* %433, align 4, !dbg !4832
  store i32 -1, i32* %4, align 4, !dbg !4833
  br label %649, !dbg !4833

434:                                              ; preds = %originalBBpart280
  %435 = load i32, i32* @x.93
  %436 = load i32, i32* @y.94
  %437 = sub i32 %435, 1
  %438 = mul i32 %435, %437
  %439 = urem i32 %438, 2
  %440 = icmp eq i32 %439, 0
  %441 = icmp slt i32 %436, 10
  %442 = or i1 %440, %441
  br i1 %442, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %434, %originalBB82alteredBB
  %443 = load i8*, i8** %5, align 8, !dbg !4834
  %444 = icmp ne i8* %443, null, !dbg !4834
  %445 = load i32, i32* @x.93
  %446 = load i32, i32* @y.94
  %447 = sub i32 %445, 1
  %448 = mul i32 %445, %447
  %449 = urem i32 %448, 2
  %450 = icmp eq i32 %449, 0
  %451 = icmp slt i32 %446, 10
  %452 = or i1 %450, %451
  br i1 %452, label %originalBBpart284, label %originalBB82alteredBB

originalBBpart284:                                ; preds = %originalBB82
  br i1 %444, label %477, label %453, !dbg !4836

453:                                              ; preds = %originalBBpart284
  %454 = load i32, i32* %6, align 4, !dbg !4837
  %455 = icmp ne i32 %454, -1, !dbg !4838
  br i1 %455, label %456, label %477, !dbg !4839

456:                                              ; preds = %453
  %457 = load i32, i32* @x.93
  %458 = load i32, i32* @y.94
  %459 = sub i32 %457, 1
  %460 = mul i32 %457, %459
  %461 = urem i32 %460, 2
  %462 = icmp eq i32 %461, 0
  %463 = icmp slt i32 %458, 10
  %464 = or i1 %462, %463
  br i1 %464, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %456, %originalBB86alteredBB
  %465 = load i32, i32* %6, align 4, !dbg !4840
  %466 = load i32*, i32** %10, align 8, !dbg !4842
  store i32 %465, i32* %466, align 4, !dbg !4843
  %467 = load i32, i32* %9, align 4, !dbg !4844
  %468 = add nsw i32 %467, 1, !dbg !4844
  store i32 %468, i32* %9, align 4, !dbg !4844
  %469 = load i32, i32* @x.93
  %470 = load i32, i32* @y.94
  %471 = sub i32 %469, 1
  %472 = mul i32 %469, %471
  %473 = urem i32 %472, 2
  %474 = icmp eq i32 %473, 0
  %475 = icmp slt i32 %470, 10
  %476 = or i1 %474, %475
  br i1 %476, label %originalBBpart289, label %originalBB86alteredBB

originalBBpart289:                                ; preds = %originalBB86
  br label %477, !dbg !4845

477:                                              ; preds = %originalBBpart289, %453, %originalBBpart284
  %478 = load i32*, i32** %10, align 8, !dbg !4846
  %479 = load i32**, i32*** %7, align 8, !dbg !4847
  store i32* %478, i32** %479, align 8, !dbg !4848
  %480 = load i32, i32* %9, align 4, !dbg !4849
  %481 = icmp slt i32 1, %480, !dbg !4851
  br i1 %481, label %482, label %631, !dbg !4852

482:                                              ; preds = %477
  call void @llvm.dbg.declare(metadata i32* %15, metadata !4853, metadata !DIExpression()), !dbg !4855
  %483 = load i32, i32* @x.93
  %484 = load i32, i32* @y.94
  %485 = sub i32 %483, 1
  %486 = mul i32 %483, %485
  %487 = urem i32 %486, 2
  %488 = icmp eq i32 %487, 0
  %489 = icmp slt i32 %484, 10
  %490 = or i1 %488, %489
  br i1 %490, label %originalBB91, label %originalBB91alteredBB

originalBB91:                                     ; preds = %482, %originalBB91alteredBB
  %491 = load i32*, i32** %10, align 8, !dbg !4856
  %492 = load i32, i32* %491, align 4, !dbg !4857
  store i32 %492, i32* %15, align 4, !dbg !4855
  call void @llvm.dbg.declare(metadata i32** %16, metadata !4858, metadata !DIExpression()), !dbg !4859
  call void @llvm.dbg.declare(metadata i32** %17, metadata !4860, metadata !DIExpression()), !dbg !4861
  %493 = load i32*, i32** %10, align 8, !dbg !4862
  %494 = load i32, i32* %9, align 4, !dbg !4863
  %495 = sext i32 %494 to i64, !dbg !4864
  %496 = getelementptr inbounds i32, i32* %493, i64 %495, !dbg !4864
  store i32* %496, i32** %17, align 8, !dbg !4861
  %497 = load i32*, i32** %10, align 8, !dbg !4865
  %498 = getelementptr inbounds i32, i32* %497, i64 1, !dbg !4867
  store i32* %498, i32** %16, align 8, !dbg !4868
  %499 = load i32, i32* @x.93
  %500 = load i32, i32* @y.94
  %501 = sub i32 %499, 1
  %502 = mul i32 %499, %501
  %503 = urem i32 %502, 2
  %504 = icmp eq i32 %503, 0
  %505 = icmp slt i32 %500, 10
  %506 = or i1 %504, %505
  br i1 %506, label %originalBBpart293, label %originalBB91alteredBB

originalBBpart293:                                ; preds = %originalBB91
  br label %507, !dbg !4869

507:                                              ; preds = %originalBBpart2119, %originalBBpart293
  %508 = load i32*, i32** %16, align 8, !dbg !4870
  %509 = load i32*, i32** %17, align 8, !dbg !4872
  %510 = icmp ult i32* %508, %509, !dbg !4873
  br i1 %510, label %511, label %630, !dbg !4874

511:                                              ; preds = %507
  %512 = load i32, i32* @x.93
  %513 = load i32, i32* @y.94
  %514 = sub i32 %512, 1
  %515 = mul i32 %512, %514
  %516 = urem i32 %515, 2
  %517 = icmp eq i32 %516, 0
  %518 = icmp slt i32 %513, 10
  %519 = or i1 %517, %518
  br i1 %519, label %originalBB95, label %originalBB95alteredBB

originalBB95:                                     ; preds = %511, %originalBB95alteredBB
  %520 = load i32*, i32** %16, align 8, !dbg !4875
  %521 = load i32, i32* %520, align 4, !dbg !4878
  %522 = load i32, i32* %15, align 4, !dbg !4879
  %523 = icmp eq i32 %521, %522, !dbg !4880
  %524 = load i32, i32* @x.93
  %525 = load i32, i32* @y.94
  %526 = sub i32 %524, 1
  %527 = mul i32 %524, %526
  %528 = urem i32 %527, 2
  %529 = icmp eq i32 %528, 0
  %530 = icmp slt i32 %525, 10
  %531 = or i1 %529, %530
  br i1 %531, label %originalBBpart297, label %originalBB95alteredBB

originalBBpart297:                                ; preds = %originalBB95
  br i1 %523, label %554, label %532, !dbg !4881

532:                                              ; preds = %originalBBpart297
  %533 = load i32, i32* @x.93
  %534 = load i32, i32* @y.94
  %535 = sub i32 %533, 1
  %536 = mul i32 %533, %535
  %537 = urem i32 %536, 2
  %538 = icmp eq i32 %537, 0
  %539 = icmp slt i32 %534, 10
  %540 = or i1 %538, %539
  br i1 %540, label %originalBB99, label %originalBB99alteredBB

originalBB99:                                     ; preds = %532, %originalBB99alteredBB
  %541 = load i32*, i32** %16, align 8, !dbg !4882
  %542 = load i32, i32* %541, align 4, !dbg !4883
  %543 = load i32*, i32** %10, align 8, !dbg !4884
  %544 = load i32, i32* %543, align 4, !dbg !4885
  %545 = icmp eq i32 %542, %544, !dbg !4886
  %546 = load i32, i32* @x.93
  %547 = load i32, i32* @y.94
  %548 = sub i32 %546, 1
  %549 = mul i32 %546, %548
  %550 = urem i32 %549, 2
  %551 = icmp eq i32 %550, 0
  %552 = icmp slt i32 %547, 10
  %553 = or i1 %551, %552
  br i1 %553, label %originalBBpart2101, label %originalBB99alteredBB

originalBBpart2101:                               ; preds = %originalBB99
  br i1 %545, label %554, label %573, !dbg !4887

554:                                              ; preds = %originalBBpart2101, %originalBBpart297
  %555 = load i32, i32* @x.93
  %556 = load i32, i32* @y.94
  %557 = sub i32 %555, 1
  %558 = mul i32 %555, %557
  %559 = urem i32 %558, 2
  %560 = icmp eq i32 %559, 0
  %561 = icmp slt i32 %556, 10
  %562 = or i1 %560, %561
  br i1 %562, label %originalBB103, label %originalBB103alteredBB

originalBB103:                                    ; preds = %554, %originalBB103alteredBB
  %563 = load i32, i32* %9, align 4, !dbg !4888
  %564 = add nsw i32 %563, -1, !dbg !4888
  store i32 %564, i32* %9, align 4, !dbg !4888
  %565 = load i32, i32* @x.93
  %566 = load i32, i32* @y.94
  %567 = sub i32 %565, 1
  %568 = mul i32 %565, %567
  %569 = urem i32 %568, 2
  %570 = icmp eq i32 %569, 0
  %571 = icmp slt i32 %566, 10
  %572 = or i1 %570, %571
  br i1 %572, label %originalBBpart2107, label %originalBB103alteredBB

originalBBpart2107:                               ; preds = %originalBB103
  br label %594, !dbg !4889

573:                                              ; preds = %originalBBpart2101
  %574 = load i32, i32* @x.93
  %575 = load i32, i32* @y.94
  %576 = sub i32 %574, 1
  %577 = mul i32 %574, %576
  %578 = urem i32 %577, 2
  %579 = icmp eq i32 %578, 0
  %580 = icmp slt i32 %575, 10
  %581 = or i1 %579, %580
  br i1 %581, label %originalBB109, label %originalBB109alteredBB

originalBB109:                                    ; preds = %573, %originalBB109alteredBB
  %582 = load i32*, i32** %16, align 8, !dbg !4890
  %583 = load i32, i32* %582, align 4, !dbg !4891
  %584 = load i32*, i32** %10, align 8, !dbg !4892
  %585 = getelementptr inbounds i32, i32* %584, i32 1, !dbg !4892
  store i32* %585, i32** %10, align 8, !dbg !4892
  store i32 %583, i32* %585, align 4, !dbg !4893
  %586 = load i32, i32* @x.93
  %587 = load i32, i32* @y.94
  %588 = sub i32 %586, 1
  %589 = mul i32 %586, %588
  %590 = urem i32 %589, 2
  %591 = icmp eq i32 %590, 0
  %592 = icmp slt i32 %587, 10
  %593 = or i1 %591, %592
  br i1 %593, label %originalBBpart2111, label %originalBB109alteredBB

originalBBpart2111:                               ; preds = %originalBB109
  br label %594

594:                                              ; preds = %originalBBpart2111, %originalBBpart2107
  %595 = load i32, i32* @x.93
  %596 = load i32, i32* @y.94
  %597 = sub i32 %595, 1
  %598 = mul i32 %595, %597
  %599 = urem i32 %598, 2
  %600 = icmp eq i32 %599, 0
  %601 = icmp slt i32 %596, 10
  %602 = or i1 %600, %601
  br i1 %602, label %originalBB113, label %originalBB113alteredBB

originalBB113:                                    ; preds = %594, %originalBB113alteredBB
  %603 = load i32, i32* @x.93
  %604 = load i32, i32* @y.94
  %605 = sub i32 %603, 1
  %606 = mul i32 %603, %605
  %607 = urem i32 %606, 2
  %608 = icmp eq i32 %607, 0
  %609 = icmp slt i32 %604, 10
  %610 = or i1 %608, %609
  br i1 %610, label %originalBBpart2115, label %originalBB113alteredBB

originalBBpart2115:                               ; preds = %originalBB113
  br label %611, !dbg !4894

611:                                              ; preds = %originalBBpart2115
  %612 = load i32, i32* @x.93
  %613 = load i32, i32* @y.94
  %614 = sub i32 %612, 1
  %615 = mul i32 %612, %614
  %616 = urem i32 %615, 2
  %617 = icmp eq i32 %616, 0
  %618 = icmp slt i32 %613, 10
  %619 = or i1 %617, %618
  br i1 %619, label %originalBB117, label %originalBB117alteredBB

originalBB117:                                    ; preds = %611, %originalBB117alteredBB
  %620 = load i32*, i32** %16, align 8, !dbg !4895
  %621 = getelementptr inbounds i32, i32* %620, i32 1, !dbg !4895
  store i32* %621, i32** %16, align 8, !dbg !4895
  %622 = load i32, i32* @x.93
  %623 = load i32, i32* @y.94
  %624 = sub i32 %622, 1
  %625 = mul i32 %622, %624
  %626 = urem i32 %625, 2
  %627 = icmp eq i32 %626, 0
  %628 = icmp slt i32 %623, 10
  %629 = or i1 %627, %628
  br i1 %629, label %originalBBpart2119, label %originalBB117alteredBB

originalBBpart2119:                               ; preds = %originalBB117
  br label %507, !dbg !4896, !llvm.loop !4897

630:                                              ; preds = %507
  br label %631, !dbg !4899

631:                                              ; preds = %630, %477
  %632 = load i32, i32* @x.93
  %633 = load i32, i32* @y.94
  %634 = sub i32 %632, 1
  %635 = mul i32 %632, %634
  %636 = urem i32 %635, 2
  %637 = icmp eq i32 %636, 0
  %638 = icmp slt i32 %633, 10
  %639 = or i1 %637, %638
  br i1 %639, label %originalBB121, label %originalBB121alteredBB

originalBB121:                                    ; preds = %631, %originalBB121alteredBB
  %640 = load i32, i32* %9, align 4, !dbg !4900
  store i32 %640, i32* %4, align 4, !dbg !4901
  %641 = load i32, i32* @x.93
  %642 = load i32, i32* @y.94
  %643 = sub i32 %641, 1
  %644 = mul i32 %641, %643
  %645 = urem i32 %644, 2
  %646 = icmp eq i32 %645, 0
  %647 = icmp slt i32 %642, 10
  %648 = or i1 %646, %647
  br i1 %648, label %originalBBpart2123, label %originalBB121alteredBB

originalBBpart2123:                               ; preds = %originalBB121
  br label %649, !dbg !4901

649:                                              ; preds = %originalBBpart2123, %427, %352, %originalBBpart244, %originalBBpart240, %originalBBpart220, %originalBBpart212, %originalBBpart2
  %650 = load i32, i32* @x.93
  %651 = load i32, i32* @y.94
  %652 = sub i32 %650, 1
  %653 = mul i32 %650, %652
  %654 = urem i32 %653, 2
  %655 = icmp eq i32 %654, 0
  %656 = icmp slt i32 %651, 10
  %657 = or i1 %655, %656
  br i1 %657, label %originalBB125, label %originalBB125alteredBB

originalBB125:                                    ; preds = %649, %originalBB125alteredBB
  %658 = load i32, i32* %4, align 4, !dbg !4902
  %659 = load i32, i32* @x.93
  %660 = load i32, i32* @y.94
  %661 = sub i32 %659, 1
  %662 = mul i32 %659, %661
  %663 = urem i32 %662, 2
  %664 = icmp eq i32 %663, 0
  %665 = icmp slt i32 %660, 10
  %666 = or i1 %664, %665
  br i1 %666, label %originalBBpart2127, label %originalBB125alteredBB

originalBBpart2127:                               ; preds = %originalBB125
  ret i32 %658, !dbg !4902

originalBBalteredBB:                              ; preds = %originalBB, %26
  store i32 -1, i32* %4, align 4, !dbg !4702
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %43
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %75
  %667 = load i32*, i32** %10, align 8, !dbg !4725
  %668 = load i32, i32* %8, align 4, !dbg !4727
  %669 = sext i32 %668 to i64, !dbg !4727
  %670 = call i32* @realloc_groupbuf(i32* %667, i64 %669), !dbg !4728
  store i32* %670, i32** %11, align 8, !dbg !4729
  %671 = icmp eq i32* %670, null, !dbg !4730
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %97
  %672 = call i32* @__errno_location() #15, !dbg !4735
  %673 = load i32, i32* %672, align 4, !dbg !4735
  store i32 %673, i32* %13, align 4, !dbg !4734
  %674 = load i32*, i32** %10, align 8, !dbg !4736
  %675 = bitcast i32* %674 to i8*, !dbg !4736
  call void @free(i8* %675) #10, !dbg !4737
  %676 = load i32, i32* %13, align 4, !dbg !4738
  %677 = call i32* @__errno_location() #15, !dbg !4739
  store i32 %676, i32* %677, align 4, !dbg !4740
  store i32 -1, i32* %4, align 4, !dbg !4741
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %120
  %678 = load i32*, i32** %11, align 8, !dbg !4742
  store i32* %678, i32** %10, align 8, !dbg !4743
  %679 = load i32, i32* %9, align 4, !dbg !4744
  %680 = icmp sle i32 0, %679, !dbg !4746
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %140
  %681 = load i32*, i32** %10, align 8, !dbg !4748
  %682 = load i32**, i32*** %7, align 8, !dbg !4750
  store i32* %681, i32** %682, align 8, !dbg !4751
  %683 = load i32, i32* %8, align 4, !dbg !4752
  store i32 %683, i32* %4, align 4, !dbg !4753
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %164
  %684 = load i8*, i8** %5, align 8, !dbg !4757
  %685 = load i32, i32* %6, align 4, !dbg !4758
  %686 = call i32 @getugroups(i32 0, i32* null, i8* %684, i32 %685), !dbg !4759
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %184
  %687 = call i32 @getgroups(i32 0, i32* null) #10, !dbg !4760
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %202
  store i32 %203, i32* %8, align 4, !dbg !4761
  %688 = load i32, i32* %8, align 4, !dbg !4762
  %689 = icmp slt i32 %688, 0, !dbg !4764
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %226
  %690 = call i32* @realloc_groupbuf(i32* null, i64 1), !dbg !4771
  store i32* %690, i32** %10, align 8, !dbg !4772
  %691 = icmp ne i32* %690, null, !dbg !4772
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %245
  %692 = load i32*, i32** %10, align 8, !dbg !4774
  %693 = load i32**, i32*** %7, align 8, !dbg !4776
  store i32* %692, i32** %693, align 8, !dbg !4777
  %694 = load i32, i32* %6, align 4, !dbg !4778
  %695 = load i32*, i32** %10, align 8, !dbg !4779
  store i32 %694, i32* %695, align 4, !dbg !4780
  %696 = load i32, i32* %6, align 4, !dbg !4781
  %697 = icmp ne i32 %696, -1, !dbg !4782
  %698 = zext i1 %697 to i32, !dbg !4782
  store i32 %698, i32* %4, align 4, !dbg !4783
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %269
  store i32 -1, i32* %4, align 4, !dbg !4784
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %286
  %699 = load i32, i32* %8, align 4, !dbg !4785
  %700 = icmp eq i32 %699, 0, !dbg !4787
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %311
  %701 = load i32, i32* %8, align 4, !dbg !4794
  %_ = sub i32 0, %701
  %gen = add i32 %_, 1
  %_51 = sub i32 0, %701
  %gen52 = add i32 %_51, 1
  %_53 = sub i32 0, %701
  %gen54 = add i32 %_53, 1
  %_55 = shl i32 %701, 1
  %_56 = sub i32 0, %701
  %gen57 = add i32 %_56, 1
  %702 = add nsw i32 %701, 1, !dbg !4794
  store i32 %702, i32* %8, align 4, !dbg !4794
  br label %originalBB50

originalBB61alteredBB:                            ; preds = %originalBB61, %330
  %703 = load i32, i32* %8, align 4, !dbg !4796
  %704 = sext i32 %703 to i64, !dbg !4796
  %705 = call i32* @realloc_groupbuf(i32* null, i64 %704), !dbg !4797
  store i32* %705, i32** %10, align 8, !dbg !4798
  %706 = load i32*, i32** %10, align 8, !dbg !4799
  %707 = icmp eq i32* %706, null, !dbg !4801
  br label %originalBB61

originalBB65alteredBB:                            ; preds = %originalBB65, %356
  %708 = load i32, i32* %8, align 4, !dbg !4805
  %709 = load i32*, i32** %10, align 8, !dbg !4806
  %710 = load i8*, i8** %5, align 8, !dbg !4807
  %711 = load i32, i32* %6, align 4, !dbg !4808
  %712 = call i32 @getugroups(i32 %708, i32* %709, i8* %710, i32 %711), !dbg !4809
  br label %originalBB65

originalBB69alteredBB:                            ; preds = %originalBB69, %378
  %713 = load i32, i32* %8, align 4, !dbg !4810
  %714 = load i32, i32* %6, align 4, !dbg !4811
  %715 = icmp ne i32 %714, -1, !dbg !4812
  %716 = zext i1 %715 to i32, !dbg !4812
  %_70 = shl i32 %713, %716
  %_71 = sub i32 %713, %716
  %gen72 = mul i32 %_71, %716
  %_73 = sub i32 %713, %716
  %gen74 = mul i32 %_73, %716
  %717 = sub nsw i32 %713, %716, !dbg !4813
  %718 = load i32*, i32** %10, align 8, !dbg !4814
  %719 = load i32, i32* %6, align 4, !dbg !4815
  %720 = icmp ne i32 %719, -1, !dbg !4816
  %721 = zext i1 %720 to i32, !dbg !4816
  %722 = sext i32 %721 to i64, !dbg !4817
  %723 = getelementptr inbounds i32, i32* %718, i64 %722, !dbg !4817
  %724 = call i32 @getgroups(i32 %717, i32* %723) #10, !dbg !4818
  br label %originalBB69

originalBB78alteredBB:                            ; preds = %originalBB78, %407
  store i32 %408, i32* %9, align 4, !dbg !4819
  %725 = load i32, i32* %9, align 4, !dbg !4820
  %726 = icmp slt i32 %725, 0, !dbg !4822
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %434
  %727 = load i8*, i8** %5, align 8, !dbg !4834
  %728 = icmp ne i8* %727, null, !dbg !4834
  br label %originalBB82

originalBB86alteredBB:                            ; preds = %originalBB86, %456
  %729 = load i32, i32* %6, align 4, !dbg !4840
  %730 = load i32*, i32** %10, align 8, !dbg !4842
  store i32 %729, i32* %730, align 4, !dbg !4843
  %731 = load i32, i32* %9, align 4, !dbg !4844
  %_87 = shl i32 %731, 1
  %732 = add nsw i32 %731, 1, !dbg !4844
  store i32 %732, i32* %9, align 4, !dbg !4844
  br label %originalBB86

originalBB91alteredBB:                            ; preds = %originalBB91, %482
  %733 = load i32*, i32** %10, align 8, !dbg !4856
  %734 = load i32, i32* %733, align 4, !dbg !4857
  store i32 %734, i32* %15, align 4, !dbg !4855
  call void @llvm.dbg.declare(metadata !4, metadata !4903, metadata !DIExpression()), !dbg !4859
  call void @llvm.dbg.declare(metadata !4, metadata !4908, metadata !DIExpression()), !dbg !4861
  %735 = load i32*, i32** %10, align 8, !dbg !4862
  %736 = load i32, i32* %9, align 4, !dbg !4863
  %737 = sext i32 %736 to i64, !dbg !4864
  %738 = getelementptr inbounds i32, i32* %735, i64 %737, !dbg !4864
  store i32* %738, i32** %17, align 8, !dbg !4861
  %739 = load i32*, i32** %10, align 8, !dbg !4865
  %740 = getelementptr inbounds i32, i32* %739, i64 1, !dbg !4867
  store i32* %740, i32** %16, align 8, !dbg !4868
  br label %originalBB91

originalBB95alteredBB:                            ; preds = %originalBB95, %511
  %741 = load i32*, i32** %16, align 8, !dbg !4875
  %742 = load i32, i32* %741, align 4, !dbg !4878
  %743 = load i32, i32* %15, align 4, !dbg !4879
  %744 = icmp eq i32 %742, %743, !dbg !4880
  br label %originalBB95

originalBB99alteredBB:                            ; preds = %originalBB99, %532
  %745 = load i32*, i32** %16, align 8, !dbg !4882
  %746 = load i32, i32* %745, align 4, !dbg !4883
  %747 = load i32*, i32** %10, align 8, !dbg !4884
  %748 = load i32, i32* %747, align 4, !dbg !4885
  %749 = icmp eq i32 %746, %748, !dbg !4886
  br label %originalBB99

originalBB103alteredBB:                           ; preds = %originalBB103, %554
  %750 = load i32, i32* %9, align 4, !dbg !4888
  %_104 = sub i32 %750, -1
  %gen105 = mul i32 %_104, -1
  %751 = add nsw i32 %750, -1, !dbg !4888
  store i32 %751, i32* %9, align 4, !dbg !4888
  br label %originalBB103

originalBB109alteredBB:                           ; preds = %originalBB109, %573
  %752 = load i32*, i32** %16, align 8, !dbg !4890
  %753 = load i32, i32* %752, align 4, !dbg !4891
  %754 = load i32*, i32** %10, align 8, !dbg !4892
  %755 = getelementptr inbounds i32, i32* %754, i32 1, !dbg !4892
  store i32* %755, i32** %10, align 8, !dbg !4892
  store i32 %753, i32* %755, align 4, !dbg !4893
  br label %originalBB109

originalBB113alteredBB:                           ; preds = %originalBB113, %594
  br label %originalBB113

originalBB117alteredBB:                           ; preds = %originalBB117, %611
  %756 = load i32*, i32** %16, align 8, !dbg !4895
  %757 = getelementptr inbounds i32, i32* %756, i32 1, !dbg !4895
  store i32* %757, i32** %16, align 8, !dbg !4895
  br label %originalBB117

originalBB121alteredBB:                           ; preds = %originalBB121, %631
  %758 = load i32, i32* %9, align 4, !dbg !4900
  store i32 %758, i32* %4, align 4, !dbg !4901
  br label %originalBB121

originalBB125alteredBB:                           ; preds = %originalBB125, %649
  %759 = load i32, i32* %4, align 4, !dbg !4902
  br label %originalBB125
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32* @realloc_groupbuf(i32*, i64) #4 !dbg !4909 {
  %3 = load i32, i32* @x.95
  %4 = load i32, i32* @y.96
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i64, align 8
  store i32* %0, i32** %12, align 8
  call void @llvm.dbg.declare(metadata i32** %12, metadata !4912, metadata !DIExpression()), !dbg !4913
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !4914, metadata !DIExpression()), !dbg !4915
  %14 = load i64, i64* %13, align 8, !dbg !4916
  %15 = icmp ult i64 2305843009213693951, %14, !dbg !4916
  %16 = load i32, i32* @x.95
  %17 = load i32, i32* @y.96
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %26, !dbg !4918

24:                                               ; preds = %originalBBpart2
  %25 = call i32* @__errno_location() #15, !dbg !4919
  store i32 12, i32* %25, align 4, !dbg !4921
  store i32* null, i32** %11, align 8, !dbg !4922
  br label %49, !dbg !4922

26:                                               ; preds = %originalBBpart2
  %27 = load i32, i32* @x.95
  %28 = load i32, i32* @y.96
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load i32*, i32** %12, align 8, !dbg !4923
  %36 = bitcast i32* %35 to i8*, !dbg !4923
  %37 = load i64, i64* %13, align 8, !dbg !4924
  %38 = mul i64 %37, 4, !dbg !4925
  %39 = call i8* @realloc(i8* %36, i64 %38) #10, !dbg !4926
  %40 = bitcast i8* %39 to i32*, !dbg !4926
  store i32* %40, i32** %11, align 8, !dbg !4927
  %41 = load i32, i32* @x.95
  %42 = load i32, i32* @y.96
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %49, !dbg !4927

49:                                               ; preds = %originalBBpart24, %24
  %50 = load i32*, i32** %11, align 8, !dbg !4928
  ret i32* %50, !dbg !4928

originalBBalteredBB:                              ; preds = %originalBB, %2
  %51 = alloca i32*, align 8
  %52 = alloca i32*, align 8
  %53 = alloca i64, align 8
  store i32* %0, i32** %52, align 8
  call void @llvm.dbg.declare(metadata i32** %52, metadata !4929, metadata !DIExpression()), !dbg !4913
  store i64 %1, i64* %53, align 8
  call void @llvm.dbg.declare(metadata i64* %53, metadata !4932, metadata !DIExpression()), !dbg !4915
  %54 = load i64, i64* %53, align 8, !dbg !4916
  %55 = icmp ult i64 2305843009213693951, %54, !dbg !4916
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %56 = load i32*, i32** %12, align 8, !dbg !4923
  %57 = bitcast i32* %56 to i8*, !dbg !4923
  %58 = load i64, i64* %13, align 8, !dbg !4924
  %_ = sub i64 0, %58
  %gen = add i64 %_, 4
  %59 = mul i64 %58, 4, !dbg !4925
  %60 = call i8* @realloc(i8* %57, i64 %59) #10, !dbg !4926
  %61 = bitcast i8* %60 to i32*, !dbg !4926
  store i32* %61, i32** %11, align 8, !dbg !4927
  br label %originalBB1
}

declare dso_local i32 @getgrouplist(i8*, i32, i32*, i32*) #3

; Function Attrs: nounwind
declare dso_local i32 @getgroups(i32, i32*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_r(i32, i8* nonnull, i64) #4 !dbg !4933 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !4937, metadata !DIExpression()), !dbg !4938
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !4939, metadata !DIExpression()), !dbg !4940
  store i64 %2, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !4941, metadata !DIExpression()), !dbg !4942
  %7 = load i32, i32* %4, align 4, !dbg !4943
  %8 = load i8*, i8** %5, align 8, !dbg !4944
  %9 = load i64, i64* %6, align 8, !dbg !4945
  %10 = call i32 @setlocale_null_unlocked(i32 %7, i8* %8, i64 %9), !dbg !4946
  ret i32 %10, !dbg !4947
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_unlocked(i32, i8*, i64) #4 !dbg !4948 {
  %4 = load i32, i32* @x.99
  %5 = load i32, i32* @y.100
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !4949, metadata !DIExpression()), !dbg !4950
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !4951, metadata !DIExpression()), !dbg !4952
  store i64 %2, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !4953, metadata !DIExpression()), !dbg !4954
  call void @llvm.dbg.declare(metadata i8** %16, metadata !4955, metadata !DIExpression()), !dbg !4956
  %18 = load i32, i32* %13, align 4, !dbg !4957
  %19 = call i8* @setlocale_null_androidfix(i32 %18), !dbg !4958
  store i8* %19, i8** %16, align 8, !dbg !4956
  %20 = load i8*, i8** %16, align 8, !dbg !4959
  %21 = icmp eq i8* %20, null, !dbg !4961
  %22 = load i32, i32* @x.99
  %23 = load i32, i32* @y.100
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %53, !dbg !4962

30:                                               ; preds = %originalBBpart2
  %31 = load i64, i64* %15, align 8, !dbg !4963
  %32 = icmp ugt i64 %31, 0, !dbg !4966
  br i1 %32, label %33, label %52, !dbg !4967

33:                                               ; preds = %30
  %34 = load i32, i32* @x.99
  %35 = load i32, i32* @y.100
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %33, %originalBB1alteredBB
  %42 = load i8*, i8** %14, align 8, !dbg !4968
  %43 = getelementptr inbounds i8, i8* %42, i64 0, !dbg !4968
  store i8 0, i8* %43, align 1, !dbg !4969
  %44 = load i32, i32* @x.99
  %45 = load i32, i32* @y.100
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %52, !dbg !4968

52:                                               ; preds = %originalBBpart24, %30
  store i32 22, i32* %12, align 4, !dbg !4970
  br label %141, !dbg !4970

53:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i64* %17, metadata !4971, metadata !DIExpression()), !dbg !4973
  %54 = load i32, i32* @x.99
  %55 = load i32, i32* @y.100
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = load i8*, i8** %16, align 8, !dbg !4974
  %63 = call i64 @strlen(i8* %62) #13, !dbg !4975
  store i64 %63, i64* %17, align 8, !dbg !4973
  %64 = load i64, i64* %17, align 8, !dbg !4976
  %65 = load i64, i64* %15, align 8, !dbg !4978
  %66 = icmp ult i64 %64, %65, !dbg !4979
  %67 = load i32, i32* @x.99
  %68 = load i32, i32* @y.100
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %75, label %96, !dbg !4980

75:                                               ; preds = %originalBBpart28
  %76 = load i32, i32* @x.99
  %77 = load i32, i32* @y.100
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = load i8*, i8** %14, align 8, !dbg !4981
  %85 = load i8*, i8** %16, align 8, !dbg !4983
  %86 = load i64, i64* %17, align 8, !dbg !4984
  %87 = add i64 %86, 1, !dbg !4985
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %84, i8* align 1 %85, i64 %87, i1 false), !dbg !4986
  store i32 0, i32* %12, align 4, !dbg !4987
  %88 = load i32, i32* @x.99
  %89 = load i32, i32* @y.100
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart215, label %originalBB10alteredBB

originalBBpart215:                                ; preds = %originalBB10
  br label %141, !dbg !4987

96:                                               ; preds = %originalBBpart28
  %97 = load i64, i64* %15, align 8, !dbg !4988
  %98 = icmp ugt i64 %97, 0, !dbg !4991
  br i1 %98, label %99, label %124, !dbg !4992

99:                                               ; preds = %96
  %100 = load i32, i32* @x.99
  %101 = load i32, i32* @y.100
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %99, %originalBB17alteredBB
  %108 = load i8*, i8** %14, align 8, !dbg !4993
  %109 = load i8*, i8** %16, align 8, !dbg !4995
  %110 = load i64, i64* %15, align 8, !dbg !4996
  %111 = sub i64 %110, 1, !dbg !4997
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %108, i8* align 1 %109, i64 %111, i1 false), !dbg !4998
  %112 = load i8*, i8** %14, align 8, !dbg !4999
  %113 = load i64, i64* %15, align 8, !dbg !5000
  %114 = sub i64 %113, 1, !dbg !5001
  %115 = getelementptr inbounds i8, i8* %112, i64 %114, !dbg !4999
  store i8 0, i8* %115, align 1, !dbg !5002
  %116 = load i32, i32* @x.99
  %117 = load i32, i32* @y.100
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBBpart236, label %originalBB17alteredBB

originalBBpart236:                                ; preds = %originalBB17
  br label %124, !dbg !5003

124:                                              ; preds = %originalBBpart236, %96
  %125 = load i32, i32* @x.99
  %126 = load i32, i32* @y.100
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %124, %originalBB38alteredBB
  store i32 34, i32* %12, align 4, !dbg !5004
  %133 = load i32, i32* @x.99
  %134 = load i32, i32* @y.100
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %141, !dbg !5004

141:                                              ; preds = %originalBBpart240, %originalBBpart215, %52
  %142 = load i32, i32* %12, align 4, !dbg !5005
  ret i32 %142, !dbg !5005

originalBBalteredBB:                              ; preds = %originalBB, %3
  %143 = alloca i32, align 4
  %144 = alloca i32, align 4
  %145 = alloca i8*, align 8
  %146 = alloca i64, align 8
  %147 = alloca i8*, align 8
  %148 = alloca i64, align 8
  store i32 %0, i32* %144, align 4
  call void @llvm.dbg.declare(metadata i32* %144, metadata !5006, metadata !DIExpression()), !dbg !4950
  store i8* %1, i8** %145, align 8
  call void @llvm.dbg.declare(metadata i8** %145, metadata !5009, metadata !DIExpression()), !dbg !4952
  store i64 %2, i64* %146, align 8
  call void @llvm.dbg.declare(metadata i64* %146, metadata !5010, metadata !DIExpression()), !dbg !4954
  call void @llvm.dbg.declare(metadata i8** %147, metadata !5011, metadata !DIExpression()), !dbg !4956
  %149 = load i32, i32* %144, align 4, !dbg !4957
  %150 = call i8* @setlocale_null_androidfix(i32 %149), !dbg !4958
  store i8* %150, i8** %147, align 8, !dbg !4956
  %151 = load i8*, i8** %147, align 8, !dbg !4959
  %152 = icmp eq i8* %151, null, !dbg !4961
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %33
  %153 = load i8*, i8** %14, align 8, !dbg !4968
  %154 = getelementptr inbounds i8, i8* %153, i64 0, !dbg !4968
  store i8 0, i8* %154, align 1, !dbg !4969
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  %155 = load i8*, i8** %16, align 8, !dbg !4974
  %156 = call i64 @strlen(i8* %155) #13, !dbg !4975
  store i64 %156, i64* %17, align 8, !dbg !4973
  %157 = load i64, i64* %17, align 8, !dbg !4976
  %158 = load i64, i64* %15, align 8, !dbg !4978
  %159 = icmp ult i64 %157, %158, !dbg !4979
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %160 = load i8*, i8** %14, align 8, !dbg !4981
  %161 = load i8*, i8** %16, align 8, !dbg !4983
  %162 = load i64, i64* %17, align 8, !dbg !4984
  %_ = sub i64 0, %162
  %gen = add i64 %_, 1
  %_11 = sub i64 0, %162
  %gen12 = add i64 %_11, 1
  %_13 = shl i64 %162, 1
  %163 = add i64 %162, 1, !dbg !4985
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %160, i8* align 1 %161, i64 %163, i1 false), !dbg !4986
  store i32 0, i32* %12, align 4, !dbg !4987
  br label %originalBB10

originalBB17alteredBB:                            ; preds = %originalBB17, %99
  %164 = load i8*, i8** %14, align 8, !dbg !4993
  %165 = load i8*, i8** %16, align 8, !dbg !4995
  %166 = load i64, i64* %15, align 8, !dbg !4996
  %_18 = shl i64 %166, 1
  %_19 = shl i64 %166, 1
  %_20 = sub i64 0, %166
  %gen21 = add i64 %_20, 1
  %_22 = shl i64 %166, 1
  %_23 = shl i64 %166, 1
  %_24 = sub i64 %166, 1
  %gen25 = mul i64 %_24, 1
  %_26 = sub i64 0, %166
  %gen27 = add i64 %_26, 1
  %_28 = sub i64 0, %166
  %gen29 = add i64 %_28, 1
  %167 = sub i64 %166, 1, !dbg !4997
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %164, i8* align 1 %165, i64 %167, i1 false), !dbg !4998
  %168 = load i8*, i8** %14, align 8, !dbg !4999
  %169 = load i64, i64* %15, align 8, !dbg !5000
  %_30 = shl i64 %169, 1
  %_31 = sub i64 %169, 1
  %gen32 = mul i64 %_31, 1
  %_33 = shl i64 %169, 1
  %_34 = shl i64 %169, 1
  %170 = sub i64 %169, 1, !dbg !5001
  %171 = getelementptr inbounds i8, i8* %168, i64 %170, !dbg !4999
  store i8 0, i8* %171, align 1, !dbg !5002
  br label %originalBB17

originalBB38alteredBB:                            ; preds = %originalBB38, %124
  store i32 34, i32* %12, align 4, !dbg !5004
  br label %originalBB38
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @setlocale_null_androidfix(i32) #4 !dbg !5012 {
  %2 = load i32, i32* @x.101
  %3 = load i32, i32* @y.102
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !5015, metadata !DIExpression()), !dbg !5016
  call void @llvm.dbg.declare(metadata i8** %11, metadata !5017, metadata !DIExpression()), !dbg !5018
  %12 = load i32, i32* %10, align 4, !dbg !5019
  %13 = call i8* @setlocale(i32 %12, i8* null) #10, !dbg !5020
  store i8* %13, i8** %11, align 8, !dbg !5018
  %14 = load i8*, i8** %11, align 8, !dbg !5021
  %15 = load i32, i32* @x.101
  %16 = load i32, i32* @y.102
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !5022

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32, align 4
  %24 = alloca i8*, align 8
  store i32 %0, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !5023, metadata !DIExpression()), !dbg !5016
  call void @llvm.dbg.declare(metadata i8** %24, metadata !5026, metadata !DIExpression()), !dbg !5018
  %25 = load i32, i32* %23, align 4, !dbg !5019
  %26 = call i8* @setlocale(i32 %25, i8* null) #10, !dbg !5020
  store i8* %26, i8** %24, align 8, !dbg !5018
  %27 = load i8*, i8** %24, align 8, !dbg !5021
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fclose(%struct._IO_FILE* nonnull) #4 !dbg !5027 {
  %2 = alloca i32, align 4
  %3 = alloca %struct._IO_FILE*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %3, metadata !5065, metadata !DIExpression()), !dbg !5066
  call void @llvm.dbg.declare(metadata i32* %4, metadata !5067, metadata !DIExpression()), !dbg !5068
  store i32 0, i32* %4, align 4, !dbg !5068
  call void @llvm.dbg.declare(metadata i32* %5, metadata !5069, metadata !DIExpression()), !dbg !5070
  call void @llvm.dbg.declare(metadata i32* %6, metadata !5071, metadata !DIExpression()), !dbg !5072
  store i32 0, i32* %6, align 4, !dbg !5072
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5073
  %8 = call i32 @fileno(%struct._IO_FILE* %7) #10, !dbg !5074
  store i32 %8, i32* %5, align 4, !dbg !5075
  %9 = load i32, i32* %5, align 4, !dbg !5076
  %10 = icmp slt i32 %9, 0, !dbg !5078
  br i1 %10, label %11, label %30, !dbg !5079

11:                                               ; preds = %1
  %12 = load i32, i32* @x.103
  %13 = load i32, i32* @y.104
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %11, %originalBBalteredBB
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5080
  %21 = call i32 @fclose(%struct._IO_FILE* %20), !dbg !5081
  store i32 %21, i32* %2, align 4, !dbg !5082
  %22 = load i32, i32* @x.103
  %23 = load i32, i32* @y.104
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %168, !dbg !5082

30:                                               ; preds = %1
  %31 = load i32, i32* @x.103
  %32 = load i32, i32* @y.104
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5083
  %40 = call i32 @__freading(%struct._IO_FILE* %39) #10, !dbg !5083
  %41 = icmp ne i32 %40, 0, !dbg !5083
  %42 = load i32, i32* @x.103
  %43 = load i32, i32* @y.104
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %41, label %50, label %71, !dbg !5085

50:                                               ; preds = %originalBBpart24
  %51 = load i32, i32* @x.103
  %52 = load i32, i32* @y.104
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %50, %originalBB6alteredBB
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5086
  %60 = call i32 @fileno(%struct._IO_FILE* %59) #10, !dbg !5087
  %61 = call i64 @lseek(i32 %60, i64 0, i32 1) #10, !dbg !5088
  %62 = icmp ne i64 %61, -1, !dbg !5089
  %63 = load i32, i32* @x.103
  %64 = load i32, i32* @y.104
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %62, label %71, label %110, !dbg !5090

71:                                               ; preds = %originalBBpart28, %originalBBpart24
  %72 = load i32, i32* @x.103
  %73 = load i32, i32* @y.104
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %71, %originalBB10alteredBB
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5091
  %81 = call i32 @rpl_fflush(%struct._IO_FILE* %80), !dbg !5092
  %82 = icmp ne i32 %81, 0, !dbg !5092
  %83 = load i32, i32* @x.103
  %84 = load i32, i32* @y.104
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %82, label %91, label %110, !dbg !5093

91:                                               ; preds = %originalBBpart212
  %92 = load i32, i32* @x.103
  %93 = load i32, i32* @y.104
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %91, %originalBB14alteredBB
  %100 = call i32* @__errno_location() #15, !dbg !5094
  %101 = load i32, i32* %100, align 4, !dbg !5094
  store i32 %101, i32* %4, align 4, !dbg !5095
  %102 = load i32, i32* @x.103
  %103 = load i32, i32* @y.104
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %110, !dbg !5096

110:                                              ; preds = %originalBBpart216, %originalBBpart212, %originalBBpart28
  %111 = load i32, i32* @x.103
  %112 = load i32, i32* @y.104
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %110, %originalBB18alteredBB
  %119 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5097
  %120 = call i32 @fclose(%struct._IO_FILE* %119), !dbg !5098
  store i32 %120, i32* %6, align 4, !dbg !5099
  %121 = load i32, i32* %4, align 4, !dbg !5100
  %122 = icmp ne i32 %121, 0, !dbg !5102
  %123 = load i32, i32* @x.103
  %124 = load i32, i32* @y.104
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %122, label %131, label %150, !dbg !5103

131:                                              ; preds = %originalBBpart220
  %132 = load i32, i32* @x.103
  %133 = load i32, i32* @y.104
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %131, %originalBB22alteredBB
  %140 = load i32, i32* %4, align 4, !dbg !5104
  %141 = call i32* @__errno_location() #15, !dbg !5106
  store i32 %140, i32* %141, align 4, !dbg !5107
  store i32 -1, i32* %6, align 4, !dbg !5108
  %142 = load i32, i32* @x.103
  %143 = load i32, i32* @y.104
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %150, !dbg !5109

150:                                              ; preds = %originalBBpart224, %originalBBpart220
  %151 = load i32, i32* @x.103
  %152 = load i32, i32* @y.104
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %150, %originalBB26alteredBB
  %159 = load i32, i32* %6, align 4, !dbg !5110
  store i32 %159, i32* %2, align 4, !dbg !5111
  %160 = load i32, i32* @x.103
  %161 = load i32, i32* @y.104
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %168, !dbg !5111

168:                                              ; preds = %originalBBpart228, %originalBBpart2
  %169 = load i32, i32* @x.103
  %170 = load i32, i32* @y.104
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %168, %originalBB30alteredBB
  %177 = load i32, i32* %2, align 4, !dbg !5112
  %178 = load i32, i32* @x.103
  %179 = load i32, i32* @y.104
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  ret i32 %177, !dbg !5112

originalBBalteredBB:                              ; preds = %originalBB, %11
  %186 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5080
  %187 = call i32 @fclose(%struct._IO_FILE* %186), !dbg !5081
  store i32 %187, i32* %2, align 4, !dbg !5082
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %188 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5083
  %189 = call i32 @__freading(%struct._IO_FILE* %188) #10, !dbg !5083
  %190 = icmp ne i32 %189, 0, !dbg !5083
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %50
  %191 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5086
  %192 = call i32 @fileno(%struct._IO_FILE* %191) #10, !dbg !5087
  %193 = call i64 @lseek(i32 %192, i64 0, i32 1) #10, !dbg !5088
  %194 = icmp ne i64 %193, -1, !dbg !5089
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %71
  %195 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5091
  %196 = call i32 @rpl_fflush(%struct._IO_FILE* %195), !dbg !5092
  %197 = icmp ne i32 %196, 0, !dbg !5092
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %91
  %198 = call i32* @__errno_location() #15, !dbg !5094
  %199 = load i32, i32* %198, align 4, !dbg !5094
  store i32 %199, i32* %4, align 4, !dbg !5095
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %110
  %200 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5097
  %201 = call i32 @fclose(%struct._IO_FILE* %200), !dbg !5098
  store i32 %201, i32* %6, align 4, !dbg !5099
  %202 = load i32, i32* %4, align 4, !dbg !5100
  %203 = icmp ne i32 %202, 0, !dbg !5102
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %131
  %204 = load i32, i32* %4, align 4, !dbg !5104
  %205 = call i32* @__errno_location() #15, !dbg !5106
  store i32 %204, i32* %205, align 4, !dbg !5107
  store i32 -1, i32* %6, align 4, !dbg !5108
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %150
  %206 = load i32, i32* %6, align 4, !dbg !5110
  store i32 %206, i32* %2, align 4, !dbg !5111
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %168
  %207 = load i32, i32* %2, align 4, !dbg !5112
  br label %originalBB30
}

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #2

declare dso_local i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @__freading(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fflush(%struct._IO_FILE*) #4 !dbg !5113 {
  %2 = alloca i32, align 4
  %3 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %3, metadata !5151, metadata !DIExpression()), !dbg !5152
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5153
  %5 = icmp eq %struct._IO_FILE* %4, null, !dbg !5155
  br i1 %5, label %26, label %6, !dbg !5156

6:                                                ; preds = %1
  %7 = load i32, i32* @x.105
  %8 = load i32, i32* @y.106
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %6, %originalBBalteredBB
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5157
  %16 = call i32 @__freading(%struct._IO_FILE* %15) #10, !dbg !5157
  %17 = icmp ne i32 %16, 0, !dbg !5157
  %18 = load i32, i32* @x.105
  %19 = load i32, i32* @y.106
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %17, label %45, label %26, !dbg !5158

26:                                               ; preds = %originalBBpart2, %1
  %27 = load i32, i32* @x.105
  %28 = load i32, i32* @y.106
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5159
  %36 = call i32 @fflush(%struct._IO_FILE* %35), !dbg !5160
  store i32 %36, i32* %2, align 4, !dbg !5161
  %37 = load i32, i32* @x.105
  %38 = load i32, i32* @y.106
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %65, !dbg !5161

45:                                               ; preds = %originalBBpart2
  %46 = load i32, i32* @x.105
  %47 = load i32, i32* @y.106
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %45, %originalBB6alteredBB
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5162
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %54), !dbg !5163
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5164
  %56 = call i32 @fflush(%struct._IO_FILE* %55), !dbg !5165
  store i32 %56, i32* %2, align 4, !dbg !5166
  %57 = load i32, i32* @x.105
  %58 = load i32, i32* @y.106
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !5166

65:                                               ; preds = %originalBBpart28, %originalBBpart24
  %66 = load i32, i32* @x.105
  %67 = load i32, i32* @y.106
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %74 = load i32, i32* %2, align 4, !dbg !5167
  %75 = load i32, i32* @x.105
  %76 = load i32, i32* @y.106
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i32 %74, !dbg !5167

originalBBalteredBB:                              ; preds = %originalBB, %6
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5157
  %84 = call i32 @__freading(%struct._IO_FILE* %83) #10, !dbg !5157
  %85 = icmp ne i32 %84, 0, !dbg !5157
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5159
  %87 = call i32 @fflush(%struct._IO_FILE* %86), !dbg !5160
  store i32 %87, i32* %2, align 4, !dbg !5161
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %45
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5162
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %88), !dbg !5163
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5164
  %90 = call i32 @fflush(%struct._IO_FILE* %89), !dbg !5165
  store i32 %90, i32* %2, align 4, !dbg !5166
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %91 = load i32, i32* %2, align 4, !dbg !5167
  br label %originalBB10
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE*) #4 !dbg !5168 {
  %2 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %2, metadata !5171, metadata !DIExpression()), !dbg !5172
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8, !dbg !5173
  %4 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %3, i32 0, i32 0, !dbg !5175
  %5 = load i32, i32* %4, align 8, !dbg !5175
  %6 = and i32 %5, 256, !dbg !5176
  %7 = icmp ne i32 %6, 0, !dbg !5176
  br i1 %7, label %8, label %11, !dbg !5177

8:                                                ; preds = %1
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8, !dbg !5178
  %10 = call i32 @rpl_fseeko(%struct._IO_FILE* %9, i64 0, i32 1), !dbg !5179
  br label %11, !dbg !5179

11:                                               ; preds = %8, %1
  ret void, !dbg !5180
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fseeko(%struct._IO_FILE* nonnull, i64, i32) #4 !dbg !5181 {
  %4 = alloca i32, align 4
  %5 = alloca %struct._IO_FILE*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %5, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %5, metadata !5220, metadata !DIExpression()), !dbg !5221
  store i64 %1, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !5222, metadata !DIExpression()), !dbg !5223
  store i32 %2, i32* %7, align 4
  call void @llvm.dbg.declare(metadata i32* %7, metadata !5224, metadata !DIExpression()), !dbg !5225
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5226
  %10 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %9, i32 0, i32 2, !dbg !5228
  %11 = load i8*, i8** %10, align 8, !dbg !5228
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5229
  %13 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %12, i32 0, i32 1, !dbg !5230
  %14 = load i8*, i8** %13, align 8, !dbg !5230
  %15 = icmp eq i8* %11, %14, !dbg !5231
  br i1 %15, label %16, label %62, !dbg !5232

16:                                               ; preds = %3
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5233
  %18 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %17, i32 0, i32 5, !dbg !5234
  %19 = load i8*, i8** %18, align 8, !dbg !5234
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5235
  %21 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %20, i32 0, i32 4, !dbg !5236
  %22 = load i8*, i8** %21, align 8, !dbg !5236
  %23 = icmp eq i8* %19, %22, !dbg !5237
  br i1 %23, label %24, label %62, !dbg !5238

24:                                               ; preds = %16
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5239
  %26 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %25, i32 0, i32 9, !dbg !5240
  %27 = load i8*, i8** %26, align 8, !dbg !5240
  %28 = icmp eq i8* %27, null, !dbg !5241
  br i1 %28, label %29, label %62, !dbg !5242

29:                                               ; preds = %24
  call void @llvm.dbg.declare(metadata i64* %8, metadata !5243, metadata !DIExpression()), !dbg !5245
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5246
  %31 = call i32 @fileno(%struct._IO_FILE* %30) #10, !dbg !5247
  %32 = load i64, i64* %6, align 8, !dbg !5248
  %33 = load i32, i32* %7, align 4, !dbg !5249
  %34 = call i64 @lseek(i32 %31, i64 %32, i32 %33) #10, !dbg !5250
  store i64 %34, i64* %8, align 8, !dbg !5245
  %35 = load i64, i64* %8, align 8, !dbg !5251
  %36 = icmp eq i64 %35, -1, !dbg !5253
  br i1 %36, label %37, label %54, !dbg !5254

37:                                               ; preds = %29
  %38 = load i32, i32* @x.109
  %39 = load i32, i32* @y.110
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %37, %originalBBalteredBB
  store i32 -1, i32* %4, align 4, !dbg !5255
  %46 = load i32, i32* @x.109
  %47 = load i32, i32* @y.110
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %83, !dbg !5255

54:                                               ; preds = %29
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5257
  %56 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %55, i32 0, i32 0, !dbg !5258
  %57 = load i32, i32* %56, align 8, !dbg !5259
  %58 = and i32 %57, -17, !dbg !5259
  store i32 %58, i32* %56, align 8, !dbg !5259
  %59 = load i64, i64* %8, align 8, !dbg !5260
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5261
  %61 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %60, i32 0, i32 21, !dbg !5262
  store i64 %59, i64* %61, align 8, !dbg !5263
  store i32 0, i32* %4, align 4, !dbg !5264
  br label %83, !dbg !5264

62:                                               ; preds = %24, %16, %3
  %63 = load i32, i32* @x.109
  %64 = load i32, i32* @y.110
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %62, %originalBB1alteredBB
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5265
  %72 = load i64, i64* %6, align 8, !dbg !5266
  %73 = load i32, i32* %7, align 4, !dbg !5267
  %74 = call i32 @fseeko(%struct._IO_FILE* %71, i64 %72, i32 %73), !dbg !5268
  store i32 %74, i32* %4, align 4, !dbg !5269
  %75 = load i32, i32* @x.109
  %76 = load i32, i32* @y.110
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %83, !dbg !5269

83:                                               ; preds = %originalBBpart24, %54, %originalBBpart2
  %84 = load i32, i32* @x.109
  %85 = load i32, i32* @y.110
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %83, %originalBB6alteredBB
  %92 = load i32, i32* %4, align 4, !dbg !5270
  %93 = load i32, i32* @x.109
  %94 = load i32, i32* @y.110
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i32 %92, !dbg !5270

originalBBalteredBB:                              ; preds = %originalBB, %37
  store i32 -1, i32* %4, align 4, !dbg !5255
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %62
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5265
  %102 = load i64, i64* %6, align 8, !dbg !5266
  %103 = load i32, i32* %7, align 4, !dbg !5267
  %104 = call i32 @fseeko(%struct._IO_FILE* %101, i64 %102, i32 %103), !dbg !5268
  store i32 %104, i32* %4, align 4, !dbg !5269
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %83
  %105 = load i32, i32* %4, align 4, !dbg !5270
  br label %originalBB6
}

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @c_tolower(i32) #4 !dbg !5271 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !5275, metadata !DIExpression()), !dbg !5276
  %4 = load i32, i32* %3, align 4, !dbg !5277
  switch i32 %4, label %9 [
    i32 65, label %5
    i32 66, label %5
    i32 67, label %5
    i32 68, label %5
    i32 69, label %5
    i32 70, label %5
    i32 71, label %5
    i32 72, label %5
    i32 73, label %5
    i32 74, label %5
    i32 75, label %5
    i32 76, label %5
    i32 77, label %5
    i32 78, label %5
    i32 79, label %5
    i32 80, label %5
    i32 81, label %5
    i32 82, label %5
    i32 83, label %5
    i32 84, label %5
    i32 85, label %5
    i32 86, label %5
    i32 87, label %5
    i32 88, label %5
    i32 89, label %5
    i32 90, label %5
  ], !dbg !5278

5:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1
  %6 = load i32, i32* %3, align 4, !dbg !5279
  %7 = sub nsw i32 %6, 65, !dbg !5281
  %8 = add nsw i32 %7, 97, !dbg !5282
  store i32 %8, i32* %2, align 4, !dbg !5283
  br label %27, !dbg !5283

9:                                                ; preds = %1
  %10 = load i32, i32* @x.111
  %11 = load i32, i32* @y.112
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  %18 = load i32, i32* %3, align 4, !dbg !5284
  store i32 %18, i32* %2, align 4, !dbg !5285
  %19 = load i32, i32* @x.111
  %20 = load i32, i32* @y.112
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %27, !dbg !5285

27:                                               ; preds = %originalBBpart2, %5
  %28 = load i32, i32* @x.111
  %29 = load i32, i32* @y.112
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load i32, i32* %2, align 4, !dbg !5286
  %37 = load i32, i32* @x.111
  %38 = load i32, i32* @y.112
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  ret i32 %36, !dbg !5286

originalBBalteredBB:                              ; preds = %originalBB, %9
  %45 = load i32, i32* %3, align 4, !dbg !5284
  store i32 %45, i32* %2, align 4, !dbg !5285
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  %46 = load i32, i32* %2, align 4, !dbg !5286
  br label %originalBB1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @getugroups(i32, i32*, i8*, i32) #4 !dbg !5287 {
  %5 = alloca i32, align 4
  %6 = alloca i32*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8**, align 8
  %11 = alloca %struct.group*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !5291, metadata !DIExpression()), !dbg !5292
  store i32* %1, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !5293, metadata !DIExpression()), !dbg !5294
  store i8* %2, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !5295, metadata !DIExpression()), !dbg !5296
  store i32 %3, i32* %8, align 4
  call void @llvm.dbg.declare(metadata i32* %8, metadata !5297, metadata !DIExpression()), !dbg !5298
  call void @llvm.dbg.declare(metadata i32* %9, metadata !5299, metadata !DIExpression()), !dbg !5300
  store i32 0, i32* %9, align 4, !dbg !5300
  %14 = load i32, i32* %8, align 4, !dbg !5301
  %15 = icmp ne i32 %14, -1, !dbg !5303
  br i1 %15, label %16, label %60, !dbg !5304

16:                                               ; preds = %4
  %17 = load i32, i32* @x.113
  %18 = load i32, i32* @y.114
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %16, %originalBBalteredBB
  %25 = load i32, i32* %5, align 4, !dbg !5305
  %26 = icmp ne i32 %25, 0, !dbg !5308
  %27 = load i32, i32* @x.113
  %28 = load i32, i32* @y.114
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %26, label %35, label %57, !dbg !5309

35:                                               ; preds = %originalBBpart2
  %36 = load i32, i32* @x.113
  %37 = load i32, i32* @y.114
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %35, %originalBB1alteredBB
  %44 = load i32, i32* %8, align 4, !dbg !5310
  %45 = load i32*, i32** %6, align 8, !dbg !5311
  %46 = load i32, i32* %9, align 4, !dbg !5312
  %47 = sext i32 %46 to i64, !dbg !5311
  %48 = getelementptr inbounds i32, i32* %45, i64 %47, !dbg !5311
  store i32 %44, i32* %48, align 4, !dbg !5313
  %49 = load i32, i32* @x.113
  %50 = load i32, i32* @y.114
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %57, !dbg !5311

57:                                               ; preds = %originalBBpart24, %originalBBpart2
  %58 = load i32, i32* %9, align 4, !dbg !5314
  %59 = add nsw i32 %58, 1, !dbg !5314
  store i32 %59, i32* %9, align 4, !dbg !5314
  br label %60, !dbg !5315

60:                                               ; preds = %57, %4
  %61 = load i32, i32* @x.113
  %62 = load i32, i32* @y.114
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %60, %originalBB6alteredBB
  call void @setgrent(), !dbg !5316
  %69 = load i32, i32* @x.113
  %70 = load i32, i32* @y.114
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %77, !dbg !5317

77:                                               ; preds = %originalBBpart289, %originalBBpart28
  call void @llvm.dbg.declare(metadata i8*** %10, metadata !5318, metadata !DIExpression()), !dbg !5320
  call void @llvm.dbg.declare(metadata %struct.group** %11, metadata !5321, metadata !DIExpression()), !dbg !5329
  %78 = call i32* @__errno_location() #15, !dbg !5330
  store i32 0, i32* %78, align 4, !dbg !5331
  %79 = call %struct.group* @getgrent(), !dbg !5332
  store %struct.group* %79, %struct.group** %11, align 8, !dbg !5333
  %80 = load %struct.group*, %struct.group** %11, align 8, !dbg !5334
  %81 = icmp eq %struct.group* %80, null, !dbg !5336
  br i1 %81, label %82, label %99, !dbg !5337

82:                                               ; preds = %77
  %83 = load i32, i32* @x.113
  %84 = load i32, i32* @y.114
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %82, %originalBB10alteredBB
  %91 = load i32, i32* @x.113
  %92 = load i32, i32* @y.114
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %442, !dbg !5338

99:                                               ; preds = %77
  %100 = load i32, i32* @x.113
  %101 = load i32, i32* @y.114
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %99, %originalBB14alteredBB
  %108 = load %struct.group*, %struct.group** %11, align 8, !dbg !5339
  %109 = getelementptr inbounds %struct.group, %struct.group* %108, i32 0, i32 3, !dbg !5341
  %110 = load i8**, i8*** %109, align 8, !dbg !5341
  store i8** %110, i8*** %10, align 8, !dbg !5342
  %111 = load i32, i32* @x.113
  %112 = load i32, i32* @y.114
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %119, !dbg !5343

119:                                              ; preds = %originalBBpart285, %originalBBpart216
  %120 = load i32, i32* @x.113
  %121 = load i32, i32* @y.114
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %119, %originalBB18alteredBB
  %128 = load i8**, i8*** %10, align 8, !dbg !5344
  %129 = load i8*, i8** %128, align 8, !dbg !5346
  %130 = icmp ne i8* %129, null, !dbg !5347
  %131 = load i32, i32* @x.113
  %132 = load i32, i32* @y.114
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %130, label %139, label %425, !dbg !5347

139:                                              ; preds = %originalBBpart220
  call void @llvm.dbg.declare(metadata i32* %12, metadata !5348, metadata !DIExpression()), !dbg !5350
  %140 = load i8*, i8** %7, align 8, !dbg !5351
  %141 = load i8**, i8*** %10, align 8, !dbg !5351
  %142 = load i8*, i8** %141, align 8, !dbg !5351
  %143 = call i32 @strcmp(i8* %140, i8* %142) #13, !dbg !5351
  %144 = icmp eq i32 %143, 0, !dbg !5351
  br i1 %144, label %162, label %145, !dbg !5353

145:                                              ; preds = %139
  %146 = load i32, i32* @x.113
  %147 = load i32, i32* @y.114
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %145, %originalBB22alteredBB
  %154 = load i32, i32* @x.113
  %155 = load i32, i32* @y.114
  %156 = sub i32 %154, 1
  %157 = mul i32 %154, %156
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %159, %160
  br i1 %161, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %406, !dbg !5354

162:                                              ; preds = %139
  %163 = load i32, i32* @x.113
  %164 = load i32, i32* @y.114
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %162, %originalBB26alteredBB
  store i32 0, i32* %12, align 4, !dbg !5355
  %171 = load i32, i32* @x.113
  %172 = load i32, i32* @y.114
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %179, !dbg !5357

179:                                              ; preds = %originalBBpart247, %originalBBpart228
  %180 = load i32, i32* %12, align 4, !dbg !5358
  %181 = load i32, i32* %9, align 4, !dbg !5360
  %182 = icmp slt i32 %180, %181, !dbg !5361
  br i1 %182, label %183, label %265, !dbg !5362

183:                                              ; preds = %179
  %184 = load i32*, i32** %6, align 8, !dbg !5363
  %185 = icmp ne i32* %184, null, !dbg !5363
  br i1 %185, label %186, label %229, !dbg !5365

186:                                              ; preds = %183
  %187 = load i32, i32* @x.113
  %188 = load i32, i32* @y.114
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %186, %originalBB30alteredBB
  %195 = load i32*, i32** %6, align 8, !dbg !5366
  %196 = load i32, i32* %12, align 4, !dbg !5367
  %197 = sext i32 %196 to i64, !dbg !5366
  %198 = getelementptr inbounds i32, i32* %195, i64 %197, !dbg !5366
  %199 = load i32, i32* %198, align 4, !dbg !5366
  %200 = load %struct.group*, %struct.group** %11, align 8, !dbg !5368
  %201 = getelementptr inbounds %struct.group, %struct.group* %200, i32 0, i32 2, !dbg !5369
  %202 = load i32, i32* %201, align 8, !dbg !5369
  %203 = icmp eq i32 %199, %202, !dbg !5370
  %204 = load i32, i32* @x.113
  %205 = load i32, i32* @y.114
  %206 = sub i32 %204, 1
  %207 = mul i32 %204, %206
  %208 = urem i32 %207, 2
  %209 = icmp eq i32 %208, 0
  %210 = icmp slt i32 %205, 10
  %211 = or i1 %209, %210
  br i1 %211, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %203, label %212, label %229, !dbg !5371

212:                                              ; preds = %originalBBpart232
  %213 = load i32, i32* @x.113
  %214 = load i32, i32* @y.114
  %215 = sub i32 %213, 1
  %216 = mul i32 %213, %215
  %217 = urem i32 %216, 2
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %218, %219
  br i1 %220, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %212, %originalBB34alteredBB
  %221 = load i32, i32* @x.113
  %222 = load i32, i32* @y.114
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %265, !dbg !5372

229:                                              ; preds = %originalBBpart232, %183
  %230 = load i32, i32* @x.113
  %231 = load i32, i32* @y.114
  %232 = sub i32 %230, 1
  %233 = mul i32 %230, %232
  %234 = urem i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = icmp slt i32 %231, 10
  %237 = or i1 %235, %236
  br i1 %237, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %229, %originalBB38alteredBB
  %238 = load i32, i32* @x.113
  %239 = load i32, i32* @y.114
  %240 = sub i32 %238, 1
  %241 = mul i32 %238, %240
  %242 = urem i32 %241, 2
  %243 = icmp eq i32 %242, 0
  %244 = icmp slt i32 %239, 10
  %245 = or i1 %243, %244
  br i1 %245, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %246, !dbg !5369

246:                                              ; preds = %originalBBpart240
  %247 = load i32, i32* @x.113
  %248 = load i32, i32* @y.114
  %249 = sub i32 %247, 1
  %250 = mul i32 %247, %249
  %251 = urem i32 %250, 2
  %252 = icmp eq i32 %251, 0
  %253 = icmp slt i32 %248, 10
  %254 = or i1 %252, %253
  br i1 %254, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %246, %originalBB42alteredBB
  %255 = load i32, i32* %12, align 4, !dbg !5373
  %256 = add nsw i32 %255, 1, !dbg !5373
  store i32 %256, i32* %12, align 4, !dbg !5373
  %257 = load i32, i32* @x.113
  %258 = load i32, i32* @y.114
  %259 = sub i32 %257, 1
  %260 = mul i32 %257, %259
  %261 = urem i32 %260, 2
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %262, %263
  br i1 %264, label %originalBBpart247, label %originalBB42alteredBB

originalBBpart247:                                ; preds = %originalBB42
  br label %179, !dbg !5374, !llvm.loop !5375

265:                                              ; preds = %originalBBpart236, %179
  %266 = load i32, i32* @x.113
  %267 = load i32, i32* @y.114
  %268 = sub i32 %266, 1
  %269 = mul i32 %266, %268
  %270 = urem i32 %269, 2
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %271, %272
  br i1 %273, label %originalBB49, label %originalBB49alteredBB

originalBB49:                                     ; preds = %265, %originalBB49alteredBB
  %274 = load i32, i32* %12, align 4, !dbg !5377
  %275 = load i32, i32* %9, align 4, !dbg !5379
  %276 = icmp eq i32 %274, %275, !dbg !5380
  %277 = load i32, i32* @x.113
  %278 = load i32, i32* @y.114
  %279 = sub i32 %277, 1
  %280 = mul i32 %277, %279
  %281 = urem i32 %280, 2
  %282 = icmp eq i32 %281, 0
  %283 = icmp slt i32 %278, 10
  %284 = or i1 %282, %283
  br i1 %284, label %originalBBpart251, label %originalBB49alteredBB

originalBBpart251:                                ; preds = %originalBB49
  br i1 %276, label %285, label %405, !dbg !5381

285:                                              ; preds = %originalBBpart251
  %286 = load i32, i32* @x.113
  %287 = load i32, i32* @y.114
  %288 = sub i32 %286, 1
  %289 = mul i32 %286, %288
  %290 = urem i32 %289, 2
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %291, %292
  br i1 %293, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %285, %originalBB53alteredBB
  %294 = load i32, i32* %5, align 4, !dbg !5382
  %295 = icmp ne i32 %294, 0, !dbg !5385
  %296 = load i32, i32* @x.113
  %297 = load i32, i32* @y.114
  %298 = sub i32 %296, 1
  %299 = mul i32 %296, %298
  %300 = urem i32 %299, 2
  %301 = icmp eq i32 %300, 0
  %302 = icmp slt i32 %297, 10
  %303 = or i1 %301, %302
  br i1 %303, label %originalBBpart255, label %originalBB53alteredBB

originalBBpart255:                                ; preds = %originalBB53
  br i1 %295, label %304, label %349, !dbg !5386

304:                                              ; preds = %originalBBpart255
  %305 = load i32, i32* @x.113
  %306 = load i32, i32* @y.114
  %307 = sub i32 %305, 1
  %308 = mul i32 %305, %307
  %309 = urem i32 %308, 2
  %310 = icmp eq i32 %309, 0
  %311 = icmp slt i32 %306, 10
  %312 = or i1 %310, %311
  br i1 %312, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %304, %originalBB57alteredBB
  %313 = load i32, i32* %9, align 4, !dbg !5387
  %314 = load i32, i32* %5, align 4, !dbg !5390
  %315 = icmp sge i32 %313, %314, !dbg !5391
  %316 = load i32, i32* @x.113
  %317 = load i32, i32* @y.114
  %318 = sub i32 %316, 1
  %319 = mul i32 %316, %318
  %320 = urem i32 %319, 2
  %321 = icmp eq i32 %320, 0
  %322 = icmp slt i32 %317, 10
  %323 = or i1 %321, %322
  br i1 %323, label %originalBBpart259, label %originalBB57alteredBB

originalBBpart259:                                ; preds = %originalBB57
  br i1 %315, label %324, label %325, !dbg !5392

324:                                              ; preds = %originalBBpart259
  br label %480, !dbg !5393

325:                                              ; preds = %originalBBpart259
  %326 = load i32, i32* @x.113
  %327 = load i32, i32* @y.114
  %328 = sub i32 %326, 1
  %329 = mul i32 %326, %328
  %330 = urem i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %331, %332
  br i1 %333, label %originalBB61, label %originalBB61alteredBB

originalBB61:                                     ; preds = %325, %originalBB61alteredBB
  %334 = load %struct.group*, %struct.group** %11, align 8, !dbg !5394
  %335 = getelementptr inbounds %struct.group, %struct.group* %334, i32 0, i32 2, !dbg !5395
  %336 = load i32, i32* %335, align 8, !dbg !5395
  %337 = load i32*, i32** %6, align 8, !dbg !5396
  %338 = load i32, i32* %9, align 4, !dbg !5397
  %339 = sext i32 %338 to i64, !dbg !5396
  %340 = getelementptr inbounds i32, i32* %337, i64 %339, !dbg !5396
  store i32 %336, i32* %340, align 4, !dbg !5398
  %341 = load i32, i32* @x.113
  %342 = load i32, i32* @y.114
  %343 = sub i32 %341, 1
  %344 = mul i32 %341, %343
  %345 = urem i32 %344, 2
  %346 = icmp eq i32 %345, 0
  %347 = icmp slt i32 %342, 10
  %348 = or i1 %346, %347
  br i1 %348, label %originalBBpart263, label %originalBB61alteredBB

originalBBpart263:                                ; preds = %originalBB61
  br label %349, !dbg !5399

349:                                              ; preds = %originalBBpart263, %originalBBpart255
  %350 = load i32, i32* @x.113
  %351 = load i32, i32* @y.114
  %352 = sub i32 %350, 1
  %353 = mul i32 %350, %352
  %354 = urem i32 %353, 2
  %355 = icmp eq i32 %354, 0
  %356 = icmp slt i32 %351, 10
  %357 = or i1 %355, %356
  br i1 %357, label %originalBB65, label %originalBB65alteredBB

originalBB65:                                     ; preds = %349, %originalBB65alteredBB
  %358 = load i32, i32* %9, align 4, !dbg !5400
  %359 = icmp eq i32 %358, 2147483647, !dbg !5402
  %360 = load i32, i32* @x.113
  %361 = load i32, i32* @y.114
  %362 = sub i32 %360, 1
  %363 = mul i32 %360, %362
  %364 = urem i32 %363, 2
  %365 = icmp eq i32 %364, 0
  %366 = icmp slt i32 %361, 10
  %367 = or i1 %365, %366
  br i1 %367, label %originalBBpart267, label %originalBB65alteredBB

originalBBpart267:                                ; preds = %originalBB65
  br i1 %359, label %368, label %386, !dbg !5403

368:                                              ; preds = %originalBBpart267
  %369 = load i32, i32* @x.113
  %370 = load i32, i32* @y.114
  %371 = sub i32 %369, 1
  %372 = mul i32 %369, %371
  %373 = urem i32 %372, 2
  %374 = icmp eq i32 %373, 0
  %375 = icmp slt i32 %370, 10
  %376 = or i1 %374, %375
  br i1 %376, label %originalBB69, label %originalBB69alteredBB

originalBB69:                                     ; preds = %368, %originalBB69alteredBB
  %377 = call i32* @__errno_location() #15, !dbg !5404
  store i32 75, i32* %377, align 4, !dbg !5406
  %378 = load i32, i32* @x.113
  %379 = load i32, i32* @y.114
  %380 = sub i32 %378, 1
  %381 = mul i32 %378, %380
  %382 = urem i32 %381, 2
  %383 = icmp eq i32 %382, 0
  %384 = icmp slt i32 %379, 10
  %385 = or i1 %383, %384
  br i1 %385, label %originalBBpart271, label %originalBB69alteredBB

originalBBpart271:                                ; preds = %originalBB69
  br label %480, !dbg !5407

386:                                              ; preds = %originalBBpart267
  %387 = load i32, i32* @x.113
  %388 = load i32, i32* @y.114
  %389 = sub i32 %387, 1
  %390 = mul i32 %387, %389
  %391 = urem i32 %390, 2
  %392 = icmp eq i32 %391, 0
  %393 = icmp slt i32 %388, 10
  %394 = or i1 %392, %393
  br i1 %394, label %originalBB73, label %originalBB73alteredBB

originalBB73:                                     ; preds = %386, %originalBB73alteredBB
  %395 = load i32, i32* %9, align 4, !dbg !5408
  %396 = add nsw i32 %395, 1, !dbg !5408
  store i32 %396, i32* %9, align 4, !dbg !5408
  %397 = load i32, i32* @x.113
  %398 = load i32, i32* @y.114
  %399 = sub i32 %397, 1
  %400 = mul i32 %397, %399
  %401 = urem i32 %400, 2
  %402 = icmp eq i32 %401, 0
  %403 = icmp slt i32 %398, 10
  %404 = or i1 %402, %403
  br i1 %404, label %originalBBpart281, label %originalBB73alteredBB

originalBBpart281:                                ; preds = %originalBB73
  br label %405, !dbg !5409

405:                                              ; preds = %originalBBpart281, %originalBBpart251
  br label %406, !dbg !5410

406:                                              ; preds = %405, %originalBBpart224
  %407 = load i32, i32* @x.113
  %408 = load i32, i32* @y.114
  %409 = sub i32 %407, 1
  %410 = mul i32 %407, %409
  %411 = urem i32 %410, 2
  %412 = icmp eq i32 %411, 0
  %413 = icmp slt i32 %408, 10
  %414 = or i1 %412, %413
  br i1 %414, label %originalBB83, label %originalBB83alteredBB

originalBB83:                                     ; preds = %406, %originalBB83alteredBB
  %415 = load i8**, i8*** %10, align 8, !dbg !5411
  %416 = getelementptr inbounds i8*, i8** %415, i32 1, !dbg !5411
  store i8** %416, i8*** %10, align 8, !dbg !5411
  %417 = load i32, i32* @x.113
  %418 = load i32, i32* @y.114
  %419 = sub i32 %417, 1
  %420 = mul i32 %417, %419
  %421 = urem i32 %420, 2
  %422 = icmp eq i32 %421, 0
  %423 = icmp slt i32 %418, 10
  %424 = or i1 %422, %423
  br i1 %424, label %originalBBpart285, label %originalBB83alteredBB

originalBBpart285:                                ; preds = %originalBB83
  br label %119, !dbg !5412, !llvm.loop !5413

425:                                              ; preds = %originalBBpart220
  %426 = load i32, i32* @x.113
  %427 = load i32, i32* @y.114
  %428 = sub i32 %426, 1
  %429 = mul i32 %426, %428
  %430 = urem i32 %429, 2
  %431 = icmp eq i32 %430, 0
  %432 = icmp slt i32 %427, 10
  %433 = or i1 %431, %432
  br i1 %433, label %originalBB87, label %originalBB87alteredBB

originalBB87:                                     ; preds = %425, %originalBB87alteredBB
  %434 = load i32, i32* @x.113
  %435 = load i32, i32* @y.114
  %436 = sub i32 %434, 1
  %437 = mul i32 %434, %436
  %438 = urem i32 %437, 2
  %439 = icmp eq i32 %438, 0
  %440 = icmp slt i32 %435, 10
  %441 = or i1 %439, %440
  br i1 %441, label %originalBBpart289, label %originalBB87alteredBB

originalBBpart289:                                ; preds = %originalBB87
  br label %77, !dbg !5317, !llvm.loop !5415

442:                                              ; preds = %originalBBpart212
  %443 = load i32, i32* @x.113
  %444 = load i32, i32* @y.114
  %445 = sub i32 %443, 1
  %446 = mul i32 %443, %445
  %447 = urem i32 %446, 2
  %448 = icmp eq i32 %447, 0
  %449 = icmp slt i32 %444, 10
  %450 = or i1 %448, %449
  br i1 %450, label %originalBB91, label %originalBB91alteredBB

originalBB91:                                     ; preds = %442, %originalBB91alteredBB
  %451 = call i32* @__errno_location() #15, !dbg !5417
  %452 = load i32, i32* %451, align 4, !dbg !5417
  %453 = icmp ne i32 %452, 0, !dbg !5419
  %454 = load i32, i32* @x.113
  %455 = load i32, i32* @y.114
  %456 = sub i32 %454, 1
  %457 = mul i32 %454, %456
  %458 = urem i32 %457, 2
  %459 = icmp eq i32 %458, 0
  %460 = icmp slt i32 %455, 10
  %461 = or i1 %459, %460
  br i1 %461, label %originalBBpart293, label %originalBB91alteredBB

originalBBpart293:                                ; preds = %originalBB91
  br i1 %453, label %462, label %463, !dbg !5420

462:                                              ; preds = %originalBBpart293
  store i32 -1, i32* %9, align 4, !dbg !5421
  br label %463, !dbg !5422

463:                                              ; preds = %462, %originalBBpart293
  %464 = load i32, i32* @x.113
  %465 = load i32, i32* @y.114
  %466 = sub i32 %464, 1
  %467 = mul i32 %464, %466
  %468 = urem i32 %467, 2
  %469 = icmp eq i32 %468, 0
  %470 = icmp slt i32 %465, 10
  %471 = or i1 %469, %470
  br i1 %471, label %originalBB95, label %originalBB95alteredBB

originalBB95:                                     ; preds = %463, %originalBB95alteredBB
  %472 = load i32, i32* @x.113
  %473 = load i32, i32* @y.114
  %474 = sub i32 %472, 1
  %475 = mul i32 %472, %474
  %476 = urem i32 %475, 2
  %477 = icmp eq i32 %476, 0
  %478 = icmp slt i32 %473, 10
  %479 = or i1 %477, %478
  br i1 %479, label %originalBBpart297, label %originalBB95alteredBB

originalBBpart297:                                ; preds = %originalBB95
  br label %480, !dbg !5423

480:                                              ; preds = %originalBBpart297, %originalBBpart271, %324
  call void @llvm.dbg.label(metadata !5424), !dbg !5425
  call void @llvm.dbg.declare(metadata i32* %13, metadata !5426, metadata !DIExpression()), !dbg !5428
  %481 = load i32, i32* @x.113
  %482 = load i32, i32* @y.114
  %483 = sub i32 %481, 1
  %484 = mul i32 %481, %483
  %485 = urem i32 %484, 2
  %486 = icmp eq i32 %485, 0
  %487 = icmp slt i32 %482, 10
  %488 = or i1 %486, %487
  br i1 %488, label %originalBB99, label %originalBB99alteredBB

originalBB99:                                     ; preds = %480, %originalBB99alteredBB
  %489 = call i32* @__errno_location() #15, !dbg !5429
  %490 = load i32, i32* %489, align 4, !dbg !5429
  store i32 %490, i32* %13, align 4, !dbg !5428
  call void @endgrent(), !dbg !5430
  %491 = load i32, i32* %13, align 4, !dbg !5431
  %492 = call i32* @__errno_location() #15, !dbg !5432
  store i32 %491, i32* %492, align 4, !dbg !5433
  %493 = load i32, i32* %9, align 4, !dbg !5434
  %494 = load i32, i32* @x.113
  %495 = load i32, i32* @y.114
  %496 = sub i32 %494, 1
  %497 = mul i32 %494, %496
  %498 = urem i32 %497, 2
  %499 = icmp eq i32 %498, 0
  %500 = icmp slt i32 %495, 10
  %501 = or i1 %499, %500
  br i1 %501, label %originalBBpart2101, label %originalBB99alteredBB

originalBBpart2101:                               ; preds = %originalBB99
  ret i32 %493, !dbg !5435

originalBBalteredBB:                              ; preds = %originalBB, %16
  %502 = load i32, i32* %5, align 4, !dbg !5305
  %503 = icmp ne i32 %502, 0, !dbg !5308
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %35
  %504 = load i32, i32* %8, align 4, !dbg !5310
  %505 = load i32*, i32** %6, align 8, !dbg !5311
  %506 = load i32, i32* %9, align 4, !dbg !5312
  %507 = sext i32 %506 to i64, !dbg !5311
  %508 = getelementptr inbounds i32, i32* %505, i64 %507, !dbg !5311
  store i32 %504, i32* %508, align 4, !dbg !5313
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %60
  call void @setgrent(), !dbg !5316
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %82
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %99
  %509 = load %struct.group*, %struct.group** %11, align 8, !dbg !5339
  %510 = getelementptr inbounds %struct.group, %struct.group* %509, i32 0, i32 3, !dbg !5341
  %511 = load i8**, i8*** %510, align 8, !dbg !5341
  store i8** %511, i8*** %10, align 8, !dbg !5342
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %119
  %512 = load i8**, i8*** %10, align 8, !dbg !5344
  %513 = load i8*, i8** %512, align 8, !dbg !5346
  %514 = icmp ne i8* %513, null, !dbg !5347
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %145
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %162
  store i32 0, i32* %12, align 4, !dbg !5355
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %186
  %515 = load i32*, i32** %6, align 8, !dbg !5366
  %516 = load i32, i32* %12, align 4, !dbg !5367
  %517 = sext i32 %516 to i64, !dbg !5366
  %518 = getelementptr inbounds i32, i32* %515, i64 %517, !dbg !5366
  %519 = load i32, i32* %518, align 4, !dbg !5366
  %520 = load %struct.group*, %struct.group** %11, align 8, !dbg !5368
  %521 = getelementptr inbounds %struct.group, %struct.group* %520, i32 0, i32 2, !dbg !5369
  %522 = load i32, i32* %521, align 8, !dbg !5369
  %523 = icmp eq i32 %519, %522, !dbg !5370
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %212
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %229
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %246
  %524 = load i32, i32* %12, align 4, !dbg !5373
  %_ = sub i32 %524, 1
  %gen = mul i32 %_, 1
  %_43 = shl i32 %524, 1
  %_44 = sub i32 0, %524
  %gen45 = add i32 %_44, 1
  %525 = add nsw i32 %524, 1, !dbg !5373
  store i32 %525, i32* %12, align 4, !dbg !5373
  br label %originalBB42

originalBB49alteredBB:                            ; preds = %originalBB49, %265
  %526 = load i32, i32* %12, align 4, !dbg !5377
  %527 = load i32, i32* %9, align 4, !dbg !5379
  %528 = icmp eq i32 %526, %527, !dbg !5380
  br label %originalBB49

originalBB53alteredBB:                            ; preds = %originalBB53, %285
  %529 = load i32, i32* %5, align 4, !dbg !5382
  %530 = icmp ne i32 %529, 0, !dbg !5385
  br label %originalBB53

originalBB57alteredBB:                            ; preds = %originalBB57, %304
  %531 = load i32, i32* %9, align 4, !dbg !5387
  %532 = load i32, i32* %5, align 4, !dbg !5390
  %533 = icmp sge i32 %531, %532, !dbg !5391
  br label %originalBB57

originalBB61alteredBB:                            ; preds = %originalBB61, %325
  %534 = load %struct.group*, %struct.group** %11, align 8, !dbg !5394
  %535 = getelementptr inbounds %struct.group, %struct.group* %534, i32 0, i32 2, !dbg !5395
  %536 = load i32, i32* %535, align 8, !dbg !5395
  %537 = load i32*, i32** %6, align 8, !dbg !5396
  %538 = load i32, i32* %9, align 4, !dbg !5397
  %539 = sext i32 %538 to i64, !dbg !5396
  %540 = getelementptr inbounds i32, i32* %537, i64 %539, !dbg !5396
  store i32 %536, i32* %540, align 4, !dbg !5398
  br label %originalBB61

originalBB65alteredBB:                            ; preds = %originalBB65, %349
  %541 = load i32, i32* %9, align 4, !dbg !5400
  %542 = icmp eq i32 %541, 2147483647, !dbg !5402
  br label %originalBB65

originalBB69alteredBB:                            ; preds = %originalBB69, %368
  %543 = call i32* @__errno_location() #15, !dbg !5404
  store i32 75, i32* %543, align 4, !dbg !5406
  br label %originalBB69

originalBB73alteredBB:                            ; preds = %originalBB73, %386
  %544 = load i32, i32* %9, align 4, !dbg !5408
  %_74 = shl i32 %544, 1
  %_75 = sub i32 %544, 1
  %gen76 = mul i32 %_75, 1
  %_77 = shl i32 %544, 1
  %_78 = sub i32 0, %544
  %gen79 = add i32 %_78, 1
  %545 = add nsw i32 %544, 1, !dbg !5408
  store i32 %545, i32* %9, align 4, !dbg !5408
  br label %originalBB73

originalBB83alteredBB:                            ; preds = %originalBB83, %406
  %546 = load i8**, i8*** %10, align 8, !dbg !5411
  %547 = getelementptr inbounds i8*, i8** %546, i32 1, !dbg !5411
  store i8** %547, i8*** %10, align 8, !dbg !5411
  br label %originalBB83

originalBB87alteredBB:                            ; preds = %originalBB87, %425
  br label %originalBB87

originalBB91alteredBB:                            ; preds = %originalBB91, %442
  %548 = call i32* @__errno_location() #15, !dbg !5417
  %549 = load i32, i32* %548, align 4, !dbg !5417
  %550 = icmp ne i32 %549, 0, !dbg !5419
  br label %originalBB91

originalBB95alteredBB:                            ; preds = %originalBB95, %463
  br label %originalBB95

originalBB99alteredBB:                            ; preds = %originalBB99, %480
  %551 = call i32* @__errno_location() #15, !dbg !5429
  %552 = load i32, i32* %551, align 4, !dbg !5429
  store i32 %552, i32* %13, align 4, !dbg !5428
  call void @endgrent(), !dbg !5430
  %553 = load i32, i32* %13, align 4, !dbg !5431
  %554 = call i32* @__errno_location() #15, !dbg !5432
  store i32 %553, i32* %554, align 4, !dbg !5433
  %555 = load i32, i32* %9, align 4, !dbg !5434
  br label %originalBB99
}

declare dso_local void @setgrent() #3

declare dso_local %struct.group* @getgrent() #3

define private i32 @controle(i8*, i32) {
  %3 = load i32, i32* @x.115
  %4 = load i32, i32* @y.116
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = load i32, i32* @inVal0
  %12 = icmp sgt i32 %11, 0
  %13 = load i32, i32* @x.115
  %14 = load i32, i32* @y.116
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %41, label %21

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.115
  %23 = load i32, i32* @y.116
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  call void @srand(i32 %1)
  %30 = call i32 @rand()
  %31 = srem i32 %30, 50000
  %32 = add i32 %31, 2
  %33 = load i32, i32* @x.115
  %34 = load i32, i32* @y.116
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart28, label %originalBB1alteredBB

originalBBpart28:                                 ; preds = %originalBB1
  ret i32 %32

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* @x.115
  %43 = load i32, i32* @y.116
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %41, %originalBB10alteredBB
  %50 = getelementptr inbounds [1 x i8], [1 x i8]* @.compVal2, i32 0, i32 0
  %51 = call i32 @strcmp(i8* %50, i8* %0)
  %52 = icmp eq i32 %51, 0
  %53 = load i32, i32* @x.115
  %54 = load i32, i32* @y.116
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %52, label %61, label %80

61:                                               ; preds = %originalBBpart212
  %62 = load i32, i32* @x.115
  %63 = load i32, i32* @y.116
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %61, %originalBB14alteredBB
  %70 = icmp eq i32 %1, 0
  %71 = load i32, i32* @x.115
  %72 = load i32, i32* @y.116
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %70, label %79, label %80

79:                                               ; preds = %originalBBpart216
  ret i32 5

80:                                               ; preds = %originalBBpart216, %originalBBpart212
  %81 = load i32, i32* @x.115
  %82 = load i32, i32* @y.116
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %80, %originalBB18alteredBB
  %89 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal1, i32 0, i32 0
  %90 = call i32 @strcmp(i8* %89, i8* %0)
  %91 = icmp eq i32 %90, 0
  %92 = load i32, i32* @x.115
  %93 = load i32, i32* @y.116
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %91, label %100, label %119

100:                                              ; preds = %originalBBpart220
  %101 = icmp eq i32 %1, 43
  br i1 %101, label %102, label %119

102:                                              ; preds = %100
  %103 = load i32, i32* @x.115
  %104 = load i32, i32* @y.116
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %102, %originalBB22alteredBB
  %111 = load i32, i32* @x.115
  %112 = load i32, i32* @y.116
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret i32 3

119:                                              ; preds = %100, %originalBBpart220
  %120 = load i32, i32* @x.115
  %121 = load i32, i32* @y.116
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %119, %originalBB26alteredBB
  %128 = getelementptr inbounds [2 x i8], [2 x i8]* @.compVal0, i32 0, i32 0
  %129 = call i32 @strcmp(i8* %128, i8* %0)
  %130 = icmp eq i32 %129, 0
  %131 = load i32, i32* @x.115
  %132 = load i32, i32* @y.116
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %130, label %139, label %158

139:                                              ; preds = %originalBBpart228
  %140 = load i32, i32* @x.115
  %141 = load i32, i32* @y.116
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %139, %originalBB30alteredBB
  %148 = icmp eq i32 %1, -1
  %149 = load i32, i32* @x.115
  %150 = load i32, i32* @y.116
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %148, label %157, label %158

157:                                              ; preds = %originalBBpart232
  ret i32 3

158:                                              ; preds = %originalBBpart232, %originalBBpart228
  %159 = load i32, i32* @x.115
  %160 = load i32, i32* @y.116
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %158, %originalBB34alteredBB
  %167 = getelementptr inbounds [2 x i8], [2 x i8]* @.compVal0, i32 0, i32 0
  %168 = call i32 @strcmp(i8* %167, i8* %0)
  %169 = icmp eq i32 %168, 0
  %170 = load i32, i32* @x.115
  %171 = load i32, i32* @y.116
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %169, label %178, label %213

178:                                              ; preds = %originalBBpart236
  %179 = load i32, i32* @x.115
  %180 = load i32, i32* @y.116
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %178, %originalBB38alteredBB
  %187 = icmp eq i32 %1, 0
  %188 = load i32, i32* @x.115
  %189 = load i32, i32* @y.116
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %187, label %196, label %213

196:                                              ; preds = %originalBBpart240
  %197 = load i32, i32* @x.115
  %198 = load i32, i32* @y.116
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %196, %originalBB42alteredBB
  %205 = load i32, i32* @x.115
  %206 = load i32, i32* @y.116
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  ret i32 5

213:                                              ; preds = %originalBBpart240, %originalBBpart236
  %214 = load i32, i32* @x.115
  %215 = load i32, i32* @y.116
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %213, %originalBB46alteredBB
  call void @srand(i32 %1)
  %222 = call i32 @rand()
  %223 = srem i32 %222, 50000
  %224 = add i32 %223, 2
  %225 = load i32, i32* @x.115
  %226 = load i32, i32* @y.116
  %227 = sub i32 %225, 1
  %228 = mul i32 %225, %227
  %229 = urem i32 %228, 2
  %230 = icmp eq i32 %229, 0
  %231 = icmp slt i32 %226, 10
  %232 = or i1 %230, %231
  br i1 %232, label %originalBBpart265, label %originalBB46alteredBB

originalBBpart265:                                ; preds = %originalBB46
  ret i32 %224

originalBBalteredBB:                              ; preds = %originalBB, %2
  %233 = load i32, i32* @inVal0
  %234 = icmp sgt i32 %233, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  call void @srand(i32 %1)
  %235 = call i32 @rand()
  %_ = sub i32 %235, 50000
  %gen = mul i32 %_, 50000
  %_2 = sub i32 %235, 50000
  %gen3 = mul i32 %_2, 50000
  %_4 = shl i32 %235, 50000
  %_5 = shl i32 %235, 50000
  %236 = srem i32 %235, 50000
  %_6 = shl i32 %236, 2
  %237 = add i32 %236, 2
  br label %originalBB1

originalBB10alteredBB:                            ; preds = %originalBB10, %41
  %238 = getelementptr inbounds [1 x i8], [1 x i8]* @.compVal2, i32 0, i32 0
  %239 = call i32 @strcmp(i8* %238, i8* %0)
  %240 = icmp eq i32 %239, 0
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %61
  %241 = icmp eq i32 %1, 0
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %80
  %242 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal1, i32 0, i32 0
  %243 = call i32 @strcmp(i8* %242, i8* %0)
  %244 = icmp eq i32 %243, 0
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %102
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %119
  %245 = getelementptr inbounds [2 x i8], [2 x i8]* @.compVal0, i32 0, i32 0
  %246 = call i32 @strcmp(i8* %245, i8* %0)
  %247 = icmp eq i32 %246, 0
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %139
  %248 = icmp eq i32 %1, -1
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %158
  %249 = getelementptr inbounds [2 x i8], [2 x i8]* @.compVal0, i32 0, i32 0
  %250 = call i32 @strcmp(i8* %249, i8* %0)
  %251 = icmp eq i32 %250, 0
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %178
  %252 = icmp eq i32 %1, 0
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %196
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %213
  call void @srand(i32 %1)
  %253 = call i32 @rand()
  %_47 = sub i32 %253, 50000
  %gen48 = mul i32 %_47, 50000
  %_49 = shl i32 %253, 50000
  %_50 = sub i32 0, %253
  %gen51 = add i32 %_50, 50000
  %_52 = shl i32 %253, 50000
  %254 = srem i32 %253, 50000
  %_53 = shl i32 %254, 2
  %_54 = shl i32 %254, 2
  %_55 = sub i32 %254, 2
  %gen56 = mul i32 %_55, 2
  %_57 = shl i32 %254, 2
  %_58 = shl i32 %254, 2
  %_59 = sub i32 0, %254
  %gen60 = add i32 %_59, 2
  %_61 = shl i32 %254, 2
  %_62 = sub i32 %254, 2
  %gen63 = mul i32 %_62, 2
  %255 = add i32 %254, 2
  br label %originalBB46
}

declare void @srand(i32)

declare i32 @rand()

attributes #0 = { noinline noreturn nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noinline nounwind optnone readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { noreturn }
attributes #15 = { nounwind readnone }

!llvm.dbg.cu = !{!2, !82, !88, !93, !101, !202, !108, !115, !208, !185, !210, !195, !213, !216, !218, !220, !232, !235, !241, !243, !245, !247, !250, !252, !254, !256, !258, !260}
!llvm.ident = !{!263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263}
!llvm.module.flags = !{!264, !265, !266, !267, !268}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "longopts", scope: !2, file: !3, line: 75, type: !63, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !9, nameTableKind: None)
!3 = !DIFile(filename: "src/id.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4 = !{}
!5 = !{!6, !8}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!9 = !{!10, !17, !19, !23, !0, !25, !28, !30, !32, !34, !36, !38, !40, !42, !44, !46, !56}
!10 = !DIGlobalVariableExpression(var: !11, expr: !DIExpression())
!11 = distinct !DIGlobalVariable(name: "ruid", scope: !2, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!12 = !DIDerivedType(tag: DW_TAG_typedef, name: "uid_t", file: !13, line: 79, baseType: !14)
!13 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/types.h", directory: "")
!14 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !15, line: 146, baseType: !16)
!15 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!16 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "euid", scope: !2, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!19 = !DIGlobalVariableExpression(var: !20, expr: !DIExpression())
!20 = distinct !DIGlobalVariable(name: "rgid", scope: !2, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!21 = !DIDerivedType(tag: DW_TAG_typedef, name: "gid_t", file: !13, line: 64, baseType: !22)
!22 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !15, line: 147, baseType: !16)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(name: "egid", scope: !2, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!25 = !DIGlobalVariableExpression(var: !26, expr: !DIExpression())
!26 = distinct !DIGlobalVariable(name: "just_context", scope: !2, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!27 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(name: "just_group", scope: !2, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression())
!31 = distinct !DIGlobalVariable(name: "use_name", scope: !2, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!32 = !DIGlobalVariableExpression(var: !33, expr: !DIExpression())
!33 = distinct !DIGlobalVariable(name: "use_real", scope: !2, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!34 = !DIGlobalVariableExpression(var: !35, expr: !DIExpression())
!35 = distinct !DIGlobalVariable(name: "just_user", scope: !2, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!36 = !DIGlobalVariableExpression(var: !37, expr: !DIExpression())
!37 = distinct !DIGlobalVariable(name: "opt_zero", scope: !2, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!38 = !DIGlobalVariableExpression(var: !39, expr: !DIExpression())
!39 = distinct !DIGlobalVariable(name: "just_group_list", scope: !2, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!40 = !DIGlobalVariableExpression(var: !41, expr: !DIExpression())
!41 = distinct !DIGlobalVariable(name: "context", scope: !2, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!42 = !DIGlobalVariableExpression(var: !43, expr: !DIExpression())
!43 = distinct !DIGlobalVariable(name: "multiple_users", scope: !2, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(name: "ok", scope: !2, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!46 = !DIGlobalVariableExpression(var: !47, expr: !DIExpression())
!47 = distinct !DIGlobalVariable(name: "buf", scope: !48, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!48 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!49 = !DISubroutineType(types: !50)
!50 = !{!6, !51}
!51 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !52, size: 64)
!52 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !12)
!53 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 168, elements: !54)
!54 = !{!55}
!55 = !DISubrange(count: 21)
!56 = !DIGlobalVariableExpression(var: !57, expr: !DIExpression())
!57 = distinct !DIGlobalVariable(name: "buf", scope: !58, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!58 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!59 = !DISubroutineType(types: !60)
!60 = !{!6, !61}
!61 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !62, size: 64)
!62 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !21)
!63 = !DICompositeType(tag: DW_TAG_array_type, baseType: !64, size: 2560, elements: !76)
!64 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !65)
!65 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !67)
!66 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/getopt_ext.h", directory: "")
!67 = !{!68, !71, !73, !75}
!68 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !65, file: !66, line: 52, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !70, size: 64)
!70 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!71 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !65, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!72 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!73 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !65, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!74 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !72, size: 64)
!75 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !65, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!76 = !{!77}
!77 = !DISubrange(count: 10)
!78 = !DIGlobalVariableExpression(var: !79, expr: !DIExpression())
!79 = distinct !DIGlobalVariable(name: "buf", scope: !80, file: !81, line: 96, type: !53, isLocal: true, isDefinition: true)
!80 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !81, file: !81, line: 94, type: !59, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !82, retainedNodes: !4)
!81 = !DIFile(filename: "src/group-list.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!82 = distinct !DICompileUnit(language: DW_LANG_C99, file: !81, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !83, globals: !85, nameTableKind: None)
!83 = !{!8, !84}
!84 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!85 = !{!78}
!86 = !DIGlobalVariableExpression(var: !87, expr: !DIExpression())
!87 = distinct !DIGlobalVariable(name: "Version", scope: !88, file: !89, line: 2, type: !69, isLocal: false, isDefinition: true)
!88 = distinct !DICompileUnit(language: DW_LANG_C99, file: !89, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !90, nameTableKind: None)
!89 = !DIFile(filename: "src/version.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!90 = !{!86}
!91 = !DIGlobalVariableExpression(var: !92, expr: !DIExpression())
!92 = distinct !DIGlobalVariable(name: "ignore_EPIPE", scope: !93, file: !98, line: 56, type: !27, isLocal: true, isDefinition: true)
!93 = distinct !DICompileUnit(language: DW_LANG_C99, file: !94, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !95, nameTableKind: None)
!94 = !DIFile(filename: "./lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!95 = !{!96, !91}
!96 = !DIGlobalVariableExpression(var: !97, expr: !DIExpression())
!97 = distinct !DIGlobalVariable(name: "file_name", scope: !93, file: !98, line: 46, type: !69, isLocal: true, isDefinition: true)
!98 = !DIFile(filename: "lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!99 = !DIGlobalVariableExpression(var: !100, expr: !DIExpression())
!100 = distinct !DIGlobalVariable(name: "exit_failure", scope: !101, file: !104, line: 24, type: !105, isLocal: false, isDefinition: true)
!101 = distinct !DICompileUnit(language: DW_LANG_C99, file: !102, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !103, nameTableKind: None)
!102 = !DIFile(filename: "./lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!103 = !{!99}
!104 = !DIFile(filename: "lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!105 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !72)
!106 = !DIGlobalVariableExpression(var: !107, expr: !DIExpression())
!107 = distinct !DIGlobalVariable(name: "program_name", scope: !108, file: !112, line: 33, type: !69, isLocal: false, isDefinition: true)
!108 = distinct !DICompileUnit(language: DW_LANG_C99, file: !109, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !110, globals: !111, nameTableKind: None)
!109 = !DIFile(filename: "./lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!110 = !{!8, !6}
!111 = !{!106}
!112 = !DIFile(filename: "lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!113 = !DIGlobalVariableExpression(var: !114, expr: !DIExpression())
!114 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !115, file: !139, line: 116, type: !150, isLocal: true, isDefinition: true)
!115 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !136, nameTableKind: None)
!116 = !DIFile(filename: "./lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!117 = !{!118}
!118 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "quoting_style", file: !119, line: 32, baseType: !16, size: 32, elements: !120)
!119 = !DIFile(filename: "./lib/quotearg.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!120 = !{!121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131}
!121 = !DIEnumerator(name: "literal_quoting_style", value: 0, isUnsigned: true)
!122 = !DIEnumerator(name: "shell_quoting_style", value: 1, isUnsigned: true)
!123 = !DIEnumerator(name: "shell_always_quoting_style", value: 2, isUnsigned: true)
!124 = !DIEnumerator(name: "shell_escape_quoting_style", value: 3, isUnsigned: true)
!125 = !DIEnumerator(name: "shell_escape_always_quoting_style", value: 4, isUnsigned: true)
!126 = !DIEnumerator(name: "c_quoting_style", value: 5, isUnsigned: true)
!127 = !DIEnumerator(name: "c_maybe_quoting_style", value: 6, isUnsigned: true)
!128 = !DIEnumerator(name: "escape_quoting_style", value: 7, isUnsigned: true)
!129 = !DIEnumerator(name: "locale_quoting_style", value: 8, isUnsigned: true)
!130 = !DIEnumerator(name: "clocale_quoting_style", value: 9, isUnsigned: true)
!131 = !DIEnumerator(name: "custom_quoting_style", value: 10, isUnsigned: true)
!132 = !{!72, !133, !134}
!133 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!134 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !135, line: 46, baseType: !84)
!135 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stddef.h", directory: "")
!136 = !{!137, !144, !148, !113, !160, !165, !172, !174}
!137 = !DIGlobalVariableExpression(var: !138, expr: !DIExpression())
!138 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !115, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!139 = !DIFile(filename: "lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!140 = !DICompositeType(tag: DW_TAG_array_type, baseType: !141, size: 704, elements: !142)
!141 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !69)
!142 = !{!143}
!143 = !DISubrange(count: 11)
!144 = !DIGlobalVariableExpression(var: !145, expr: !DIExpression())
!145 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !115, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!146 = !DICompositeType(tag: DW_TAG_array_type, baseType: !147, size: 320, elements: !76)
!147 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !118)
!148 = !DIGlobalVariableExpression(var: !149, expr: !DIExpression())
!149 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !115, file: !139, line: 1052, type: !150, isLocal: false, isDefinition: true)
!150 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !151)
!151 = !{!152, !153, !154, !158, !159}
!152 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !150, file: !139, line: 68, baseType: !118, size: 32)
!153 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !150, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!154 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !150, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!155 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 256, elements: !156)
!156 = !{!157}
!157 = !DISubrange(count: 8)
!158 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !150, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!159 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !150, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!160 = !DIGlobalVariableExpression(var: !161, expr: !DIExpression())
!161 = distinct !DIGlobalVariable(name: "slot0", scope: !115, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!162 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 2048, elements: !163)
!163 = !{!164}
!164 = !DISubrange(count: 256)
!165 = !DIGlobalVariableExpression(var: !166, expr: !DIExpression())
!166 = distinct !DIGlobalVariable(name: "slotvec", scope: !115, file: !139, line: 845, type: !167, isLocal: true, isDefinition: true)
!167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !168, size: 64)
!168 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !169)
!169 = !{!170, !171}
!170 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !168, file: !139, line: 836, baseType: !134, size: 64)
!171 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !168, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!172 = !DIGlobalVariableExpression(var: !173, expr: !DIExpression())
!173 = distinct !DIGlobalVariable(name: "nslots", scope: !115, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!174 = !DIGlobalVariableExpression(var: !175, expr: !DIExpression())
!175 = distinct !DIGlobalVariable(name: "slotvec0", scope: !115, file: !139, line: 844, type: !168, isLocal: true, isDefinition: true)
!176 = !DIGlobalVariableExpression(var: !177, expr: !DIExpression())
!177 = distinct !DIGlobalVariable(name: "E_bad_spec", scope: !178, file: !179, line: 108, type: !69, isLocal: true, isDefinition: true)
!178 = distinct !DISubprogram(name: "parse_with_separator", scope: !179, file: !179, line: 102, type: !180, scopeLine: 105, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !185, retainedNodes: !4)
!179 = !DIFile(filename: "lib/userspec.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!180 = !DISubroutineType(types: !181)
!181 = !{!69, !69, !69, !182, !183, !184, !184}
!182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64)
!183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!184 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!185 = distinct !DICompileUnit(language: DW_LANG_C99, file: !186, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !187, globals: !188, nameTableKind: None)
!186 = !DIFile(filename: "./lib/userspec.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!187 = !{!8, !12, !21}
!188 = !{!189, !191, !176}
!189 = !DIGlobalVariableExpression(var: !190, expr: !DIExpression())
!190 = distinct !DIGlobalVariable(name: "E_invalid_user", scope: !178, file: !179, line: 106, type: !69, isLocal: true, isDefinition: true)
!191 = !DIGlobalVariableExpression(var: !192, expr: !DIExpression())
!192 = distinct !DIGlobalVariable(name: "E_invalid_group", scope: !178, file: !179, line: 107, type: !69, isLocal: true, isDefinition: true)
!193 = !DIGlobalVariableExpression(var: !194, expr: !DIExpression())
!194 = distinct !DIGlobalVariable(name: "version_etc_copyright", scope: !195, file: !198, line: 26, type: !199, isLocal: false, isDefinition: true)
!195 = distinct !DICompileUnit(language: DW_LANG_C99, file: !196, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !197, nameTableKind: None)
!196 = !DIFile(filename: "./lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!197 = !{!193}
!198 = !DIFile(filename: "lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!199 = !DICompositeType(tag: DW_TAG_array_type, baseType: !70, size: 376, elements: !200)
!200 = !{!201}
!201 = !DISubrange(count: 47)
!202 = distinct !DICompileUnit(language: DW_LANG_C99, file: !203, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !204, nameTableKind: None)
!203 = !DIFile(filename: "./lib/umaxtostr.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!204 = !{!205}
!205 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !206, line: 102, baseType: !207)
!206 = !DIFile(filename: "/usr/include/stdint.h", directory: "")
!207 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uintmax_t", file: !15, line: 73, baseType: !84)
!208 = distinct !DICompileUnit(language: DW_LANG_C99, file: !209, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!209 = !DIFile(filename: "./lib/se-selinux.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!210 = distinct !DICompileUnit(language: DW_LANG_C99, file: !211, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!211 = !DIFile(filename: "./lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!212 = !{!8}
!213 = distinct !DICompileUnit(language: DW_LANG_C99, file: !214, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !215, nameTableKind: None)
!214 = !DIFile(filename: "./lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!215 = !{!134, !6, !8}
!216 = distinct !DICompileUnit(language: DW_LANG_C99, file: !217, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!217 = !DIFile(filename: "./lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!218 = distinct !DICompileUnit(language: DW_LANG_C99, file: !219, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!219 = !DIFile(filename: "./lib/xgetgroups.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!220 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !231, nameTableKind: None)
!221 = !DIFile(filename: "./lib/xstrtoul.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!222 = !{!223}
!223 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "strtol_error", file: !224, line: 25, baseType: !16, size: 32, elements: !225)
!224 = !DIFile(filename: "./lib/xstrtol.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!225 = !{!226, !227, !228, !229, !230}
!226 = !DIEnumerator(name: "LONGINT_OK", value: 0, isUnsigned: true)
!227 = !DIEnumerator(name: "LONGINT_OVERFLOW", value: 1, isUnsigned: true)
!228 = !DIEnumerator(name: "LONGINT_INVALID_SUFFIX_CHAR", value: 2, isUnsigned: true)
!229 = !DIEnumerator(name: "LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW", value: 3, isUnsigned: true)
!230 = !DIEnumerator(name: "LONGINT_INVALID", value: 4, isUnsigned: true)
!231 = !{!72, !133}
!232 = distinct !DICompileUnit(language: DW_LANG_C99, file: !233, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !234, nameTableKind: None)
!233 = !DIFile(filename: "./lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!234 = !{!134}
!235 = distinct !DICompileUnit(language: DW_LANG_C99, file: !236, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !237, nameTableKind: None)
!236 = !DIFile(filename: "./lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!237 = !{!238}
!238 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !239, size: 64)
!239 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !240)
!240 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!241 = distinct !DICompileUnit(language: DW_LANG_C99, file: !242, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!242 = !DIFile(filename: "./lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!243 = distinct !DICompileUnit(language: DW_LANG_C99, file: !244, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!244 = !DIFile(filename: "./lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!245 = distinct !DICompileUnit(language: DW_LANG_C99, file: !246, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!246 = !DIFile(filename: "./lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!247 = distinct !DICompileUnit(language: DW_LANG_C99, file: !248, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !249, nameTableKind: None)
!248 = !DIFile(filename: "./lib/mgetgroups.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!249 = !{!8, !21, !134}
!250 = distinct !DICompileUnit(language: DW_LANG_C99, file: !251, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!251 = !DIFile(filename: "./lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!252 = distinct !DICompileUnit(language: DW_LANG_C99, file: !253, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!253 = !DIFile(filename: "./lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!254 = distinct !DICompileUnit(language: DW_LANG_C99, file: !255, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!255 = !DIFile(filename: "./lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!256 = distinct !DICompileUnit(language: DW_LANG_C99, file: !257, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!257 = !DIFile(filename: "./lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!258 = distinct !DICompileUnit(language: DW_LANG_C99, file: !259, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!259 = !DIFile(filename: "./lib/c-ctype.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!260 = distinct !DICompileUnit(language: DW_LANG_C99, file: !261, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !262, nameTableKind: None)
!261 = !DIFile(filename: "./lib/getugroups.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!262 = !{!21, !8}
!263 = !{!"clang version 9.0.1-12 "}
!264 = !{i32 2, !"Dwarf Version", i32 4}
!265 = !{i32 2, !"Debug Info Version", i32 3}
!266 = !{i32 1, !"wchar_size", i32 4}
!267 = !{i32 1, !"ThinLTO", i32 0}
!268 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!269 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 90, type: !270, scopeLine: 91, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!270 = !DISubroutineType(types: !271)
!271 = !{null, !72}
!272 = !DILocalVariable(name: "status", arg: 1, scope: !269, file: !3, line: 90, type: !72)
!273 = !DILocation(line: 90, column: 12, scope: !269)
!274 = !DILocation(line: 92, column: 7, scope: !275)
!275 = distinct !DILexicalBlock(scope: !269, file: !3, line: 92, column: 7)
!276 = !DILocation(line: 92, column: 14, scope: !275)
!277 = !DILocation(line: 92, column: 7, scope: !269)
!278 = !DILocation(line: 93, column: 5, scope: !275)
!279 = !DILocation(line: 93, column: 5, scope: !280)
!280 = distinct !DILexicalBlock(scope: !275, file: !3, line: 93, column: 5)
!281 = !DILocation(line: 96, column: 15, scope: !282)
!282 = distinct !DILexicalBlock(scope: !275, file: !3, line: 95, column: 5)
!283 = !DILocation(line: 96, column: 55, scope: !282)
!284 = !DILocation(line: 96, column: 7, scope: !282)
!285 = !DILocation(line: 97, column: 7, scope: !282)
!286 = !DILocation(line: 102, column: 7, scope: !282)
!287 = !DILocation(line: 113, column: 7, scope: !282)
!288 = !DILocation(line: 114, column: 7, scope: !282)
!289 = !DILocation(line: 115, column: 7, scope: !282)
!290 = !DILocation(line: 119, column: 7, scope: !282)
!291 = !DILocation(line: 121, column: 9, scope: !269)
!292 = !DILocation(line: 121, column: 3, scope: !269)
!293 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !294, file: !294, line: 634, type: !295, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!294 = !DIFile(filename: "src/system.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!295 = !DISubroutineType(types: !296)
!296 = !{null, !69}
!297 = !DILocalVariable(name: "program", arg: 1, scope: !293, file: !294, line: 634, type: !69)
!298 = !DILocation(line: 634, column: 34, scope: !293)
!299 = !DILocalVariable(name: "infomap", scope: !293, file: !294, line: 636, type: !300)
!300 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 896, elements: !306)
!301 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !302)
!302 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !293, file: !294, line: 636, size: 128, elements: !303)
!303 = !{!304, !305}
!304 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !302, file: !294, line: 636, baseType: !69, size: 64)
!305 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !302, file: !294, line: 636, baseType: !69, size: 64, offset: 64)
!306 = !{!307}
!307 = !DISubrange(count: 7)
!308 = !DILocation(line: 636, column: 67, scope: !293)
!309 = !DILocalVariable(name: "node", scope: !293, file: !294, line: 646, type: !69)
!310 = !DILocation(line: 646, column: 15, scope: !293)
!311 = !DILocation(line: 646, column: 22, scope: !293)
!312 = !DILocalVariable(name: "map_prog", scope: !293, file: !294, line: 647, type: !313)
!313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !301, size: 64)
!314 = !DILocation(line: 647, column: 25, scope: !293)
!315 = !DILocation(line: 647, column: 36, scope: !293)
!316 = !DILocation(line: 649, column: 3, scope: !293)
!317 = !DILocation(line: 649, column: 10, scope: !293)
!318 = !DILocation(line: 649, column: 20, scope: !293)
!319 = !DILocation(line: 649, column: 28, scope: !293)
!320 = !DILocation(line: 649, column: 33, scope: !293)
!321 = !DILocation(line: 649, column: 31, scope: !293)
!322 = !DILocation(line: 0, scope: !293)
!323 = !DILocation(line: 650, column: 13, scope: !293)
!324 = distinct !{!324, !316, !323}
!325 = !DILocation(line: 652, column: 7, scope: !326)
!326 = distinct !DILexicalBlock(scope: !293, file: !294, line: 652, column: 7)
!327 = !DILocation(line: 652, column: 17, scope: !326)
!328 = !DILocation(line: 652, column: 7, scope: !293)
!329 = !DILocation(line: 653, column: 12, scope: !326)
!330 = !DILocation(line: 653, column: 22, scope: !326)
!331 = !DILocation(line: 653, column: 10, scope: !326)
!332 = !DILocation(line: 653, column: 5, scope: !326)
!333 = !DILocation(line: 655, column: 11, scope: !293)
!334 = !DILocation(line: 655, column: 3, scope: !293)
!335 = !DILocalVariable(name: "lc_messages", scope: !293, file: !294, line: 659, type: !69)
!336 = !DILocation(line: 659, column: 15, scope: !293)
!337 = !DILocation(line: 659, column: 29, scope: !293)
!338 = !DILocation(line: 660, column: 7, scope: !339)
!339 = distinct !DILexicalBlock(scope: !293, file: !294, line: 660, column: 7)
!340 = !DILocation(line: 660, column: 19, scope: !339)
!341 = !DILocation(line: 660, column: 22, scope: !339)
!342 = !DILocation(line: 660, column: 7, scope: !293)
!343 = !DILocation(line: 666, column: 7, scope: !344)
!344 = distinct !DILexicalBlock(scope: !339, file: !294, line: 661, column: 5)
!345 = !DILocation(line: 668, column: 5, scope: !344)
!346 = !DILocation(line: 669, column: 11, scope: !293)
!347 = !DILocation(line: 670, column: 24, scope: !293)
!348 = !DILocation(line: 669, column: 3, scope: !293)
!349 = !DILocation(line: 671, column: 11, scope: !293)
!350 = !DILocation(line: 672, column: 11, scope: !293)
!351 = !DILocation(line: 672, column: 17, scope: !293)
!352 = !DILocation(line: 672, column: 25, scope: !293)
!353 = !DILocation(line: 672, column: 22, scope: !293)
!354 = !DILocation(line: 671, column: 3, scope: !293)
!355 = !DILocation(line: 673, column: 1, scope: !293)
!356 = !DILocalVariable(name: "program", arg: 1, scope: !357, file: !294, line: 634, type: !69)
!357 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !294, file: !294, line: 634, type: !295, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !358, retainedNodes: !4)
!358 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !359, nameTableKind: None)
!359 = !{!360, !362, !364, !366, !368, !378, !380, !382, !384, !386, !388, !390, !392, !394, !396, !398, !401}
!360 = !DIGlobalVariableExpression(var: !361, expr: !DIExpression())
!361 = distinct !DIGlobalVariable(name: "ruid", scope: !358, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!362 = !DIGlobalVariableExpression(var: !363, expr: !DIExpression())
!363 = distinct !DIGlobalVariable(name: "euid", scope: !358, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!364 = !DIGlobalVariableExpression(var: !365, expr: !DIExpression())
!365 = distinct !DIGlobalVariable(name: "rgid", scope: !358, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!366 = !DIGlobalVariableExpression(var: !367, expr: !DIExpression())
!367 = distinct !DIGlobalVariable(name: "egid", scope: !358, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!368 = !DIGlobalVariableExpression(var: !369, expr: !DIExpression())
!369 = distinct !DIGlobalVariable(name: "longopts", scope: !358, file: !3, line: 75, type: !370, isLocal: true, isDefinition: true)
!370 = !DICompositeType(tag: DW_TAG_array_type, baseType: !371, size: 2560, elements: !76)
!371 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !372)
!372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !373)
!373 = !{!374, !375, !376, !377}
!374 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !372, file: !66, line: 52, baseType: !69, size: 64)
!375 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !372, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!376 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !372, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!377 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !372, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!378 = !DIGlobalVariableExpression(var: !379, expr: !DIExpression())
!379 = distinct !DIGlobalVariable(name: "just_context", scope: !358, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!380 = !DIGlobalVariableExpression(var: !381, expr: !DIExpression())
!381 = distinct !DIGlobalVariable(name: "just_group", scope: !358, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!382 = !DIGlobalVariableExpression(var: !383, expr: !DIExpression())
!383 = distinct !DIGlobalVariable(name: "use_name", scope: !358, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!384 = !DIGlobalVariableExpression(var: !385, expr: !DIExpression())
!385 = distinct !DIGlobalVariable(name: "use_real", scope: !358, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!386 = !DIGlobalVariableExpression(var: !387, expr: !DIExpression())
!387 = distinct !DIGlobalVariable(name: "just_user", scope: !358, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!388 = !DIGlobalVariableExpression(var: !389, expr: !DIExpression())
!389 = distinct !DIGlobalVariable(name: "opt_zero", scope: !358, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!390 = !DIGlobalVariableExpression(var: !391, expr: !DIExpression())
!391 = distinct !DIGlobalVariable(name: "just_group_list", scope: !358, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!392 = !DIGlobalVariableExpression(var: !393, expr: !DIExpression())
!393 = distinct !DIGlobalVariable(name: "context", scope: !358, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!394 = !DIGlobalVariableExpression(var: !395, expr: !DIExpression())
!395 = distinct !DIGlobalVariable(name: "multiple_users", scope: !358, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!396 = !DIGlobalVariableExpression(var: !397, expr: !DIExpression())
!397 = distinct !DIGlobalVariable(name: "ok", scope: !358, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!398 = !DIGlobalVariableExpression(var: !399, expr: !DIExpression())
!399 = distinct !DIGlobalVariable(name: "buf", scope: !400, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!400 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !358, retainedNodes: !4)
!401 = !DIGlobalVariableExpression(var: !402, expr: !DIExpression())
!402 = distinct !DIGlobalVariable(name: "buf", scope: !403, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!403 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !358, retainedNodes: !4)
!404 = !DILocalVariable(name: "infomap", scope: !357, file: !294, line: 636, type: !405)
!405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !406, size: 896, elements: !306)
!406 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !407)
!407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !357, file: !294, line: 636, size: 128, elements: !408)
!408 = !{!409, !410}
!409 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !407, file: !294, line: 636, baseType: !69, size: 64)
!410 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !407, file: !294, line: 636, baseType: !69, size: 64, offset: 64)
!411 = !DILocalVariable(name: "node", scope: !357, file: !294, line: 646, type: !69)
!412 = !DILocalVariable(name: "map_prog", scope: !357, file: !294, line: 647, type: !413)
!413 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !406, size: 64)
!414 = !DILocalVariable(name: "lc_messages", scope: !415, file: !294, line: 659, type: !69)
!415 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !294, file: !294, line: 634, type: !295, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !416, retainedNodes: !4)
!416 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !417, nameTableKind: None)
!417 = !{!418, !420, !422, !424, !426, !436, !438, !440, !442, !444, !446, !448, !450, !452, !454, !456, !459}
!418 = !DIGlobalVariableExpression(var: !419, expr: !DIExpression())
!419 = distinct !DIGlobalVariable(name: "ruid", scope: !416, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!420 = !DIGlobalVariableExpression(var: !421, expr: !DIExpression())
!421 = distinct !DIGlobalVariable(name: "euid", scope: !416, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!422 = !DIGlobalVariableExpression(var: !423, expr: !DIExpression())
!423 = distinct !DIGlobalVariable(name: "rgid", scope: !416, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!424 = !DIGlobalVariableExpression(var: !425, expr: !DIExpression())
!425 = distinct !DIGlobalVariable(name: "egid", scope: !416, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!426 = !DIGlobalVariableExpression(var: !427, expr: !DIExpression())
!427 = distinct !DIGlobalVariable(name: "longopts", scope: !416, file: !3, line: 75, type: !428, isLocal: true, isDefinition: true)
!428 = !DICompositeType(tag: DW_TAG_array_type, baseType: !429, size: 2560, elements: !76)
!429 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !430)
!430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !431)
!431 = !{!432, !433, !434, !435}
!432 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !430, file: !66, line: 52, baseType: !69, size: 64)
!433 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !430, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!434 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !430, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!435 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !430, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!436 = !DIGlobalVariableExpression(var: !437, expr: !DIExpression())
!437 = distinct !DIGlobalVariable(name: "just_context", scope: !416, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!438 = !DIGlobalVariableExpression(var: !439, expr: !DIExpression())
!439 = distinct !DIGlobalVariable(name: "just_group", scope: !416, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!440 = !DIGlobalVariableExpression(var: !441, expr: !DIExpression())
!441 = distinct !DIGlobalVariable(name: "use_name", scope: !416, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!442 = !DIGlobalVariableExpression(var: !443, expr: !DIExpression())
!443 = distinct !DIGlobalVariable(name: "use_real", scope: !416, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!444 = !DIGlobalVariableExpression(var: !445, expr: !DIExpression())
!445 = distinct !DIGlobalVariable(name: "just_user", scope: !416, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!446 = !DIGlobalVariableExpression(var: !447, expr: !DIExpression())
!447 = distinct !DIGlobalVariable(name: "opt_zero", scope: !416, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!448 = !DIGlobalVariableExpression(var: !449, expr: !DIExpression())
!449 = distinct !DIGlobalVariable(name: "just_group_list", scope: !416, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!450 = !DIGlobalVariableExpression(var: !451, expr: !DIExpression())
!451 = distinct !DIGlobalVariable(name: "context", scope: !416, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!452 = !DIGlobalVariableExpression(var: !453, expr: !DIExpression())
!453 = distinct !DIGlobalVariable(name: "multiple_users", scope: !416, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!454 = !DIGlobalVariableExpression(var: !455, expr: !DIExpression())
!455 = distinct !DIGlobalVariable(name: "ok", scope: !416, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!456 = !DIGlobalVariableExpression(var: !457, expr: !DIExpression())
!457 = distinct !DIGlobalVariable(name: "buf", scope: !458, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!458 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !416, retainedNodes: !4)
!459 = !DIGlobalVariableExpression(var: !460, expr: !DIExpression())
!460 = distinct !DIGlobalVariable(name: "buf", scope: !461, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!461 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !416, retainedNodes: !4)
!462 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 125, type: !463, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!463 = !DISubroutineType(types: !464)
!464 = !{!72, !72, !184}
!465 = !DILocalVariable(name: "argc", arg: 1, scope: !462, file: !3, line: 125, type: !72)
!466 = !DILocation(line: 125, column: 11, scope: !462)
!467 = !DILocalVariable(name: "argv", arg: 2, scope: !462, file: !3, line: 125, type: !184)
!468 = !DILocation(line: 125, column: 24, scope: !462)
!469 = !DILocalVariable(name: "optc", scope: !462, file: !3, line: 127, type: !72)
!470 = !DILocation(line: 127, column: 7, scope: !462)
!471 = !DILocalVariable(name: "selinux_enabled", scope: !462, file: !3, line: 128, type: !72)
!472 = !DILocation(line: 128, column: 7, scope: !462)
!473 = !DILocalVariable(name: "smack_enabled", scope: !462, file: !3, line: 129, type: !27)
!474 = !DILocation(line: 129, column: 8, scope: !462)
!475 = !DILocation(line: 129, column: 24, scope: !462)
!476 = !DILocalVariable(name: "pw_name", scope: !462, file: !3, line: 130, type: !6)
!477 = !DILocation(line: 130, column: 9, scope: !462)
!478 = !DILocation(line: 133, column: 21, scope: !462)
!479 = !DILocation(line: 133, column: 3, scope: !462)
!480 = !DILocation(line: 134, column: 3, scope: !462)
!481 = !DILocation(line: 135, column: 3, scope: !462)
!482 = !DILocation(line: 136, column: 3, scope: !462)
!483 = !DILocation(line: 138, column: 3, scope: !462)
!484 = !DILocation(line: 140, column: 3, scope: !462)
!485 = !DILocation(line: 140, column: 31, scope: !462)
!486 = !DILocation(line: 140, column: 37, scope: !462)
!487 = !DILocation(line: 140, column: 18, scope: !462)
!488 = !DILocation(line: 140, column: 16, scope: !462)
!489 = !DILocation(line: 140, column: 72, scope: !462)
!490 = !DILocation(line: 142, column: 15, scope: !491)
!491 = distinct !DILexicalBlock(scope: !462, file: !3, line: 141, column: 5)
!492 = !DILocation(line: 142, column: 7, scope: !491)
!493 = !DILocation(line: 146, column: 11, scope: !494)
!494 = distinct !DILexicalBlock(scope: !491, file: !3, line: 143, column: 9)
!495 = !DILocation(line: 156, column: 16, scope: !496)
!496 = distinct !DILexicalBlock(scope: !494, file: !3, line: 156, column: 15)
!497 = !DILocation(line: 156, column: 15, scope: !494)
!498 = !DILocation(line: 157, column: 13, scope: !496)
!499 = !DILocation(line: 160, column: 24, scope: !494)
!500 = !DILocation(line: 161, column: 11, scope: !494)
!501 = !DILocation(line: 164, column: 22, scope: !494)
!502 = !DILocation(line: 165, column: 11, scope: !494)
!503 = !DILocation(line: 167, column: 20, scope: !494)
!504 = !DILocation(line: 168, column: 11, scope: !494)
!505 = !DILocation(line: 170, column: 20, scope: !494)
!506 = !DILocation(line: 171, column: 11, scope: !494)
!507 = !DILocation(line: 173, column: 21, scope: !494)
!508 = !DILocation(line: 174, column: 11, scope: !494)
!509 = !DILocation(line: 176, column: 20, scope: !494)
!510 = !DILocation(line: 177, column: 11, scope: !494)
!511 = !DILocation(line: 179, column: 27, scope: !494)
!512 = !DILocation(line: 180, column: 11, scope: !494)
!513 = !DILocation(line: 181, column: 9, scope: !494)
!514 = !DILocation(line: 182, column: 9, scope: !494)
!515 = !DILocation(line: 184, column: 11, scope: !494)
!516 = distinct !{!516, !484, !517}
!517 = !DILocation(line: 186, column: 5, scope: !462)
!518 = !DILocalVariable(name: "n_ids", scope: !462, file: !3, line: 188, type: !134)
!519 = !DILocation(line: 188, column: 10, scope: !462)
!520 = !DILocation(line: 188, column: 18, scope: !462)
!521 = !DILocation(line: 188, column: 25, scope: !462)
!522 = !DILocation(line: 188, column: 23, scope: !462)
!523 = !DILocation(line: 190, column: 7, scope: !524)
!524 = distinct !DILexicalBlock(scope: !462, file: !3, line: 190, column: 7)
!525 = !DILocation(line: 190, column: 13, scope: !524)
!526 = !DILocation(line: 190, column: 16, scope: !524)
!527 = !DILocation(line: 190, column: 7, scope: !462)
!528 = !DILocation(line: 191, column: 5, scope: !524)
!529 = !DILocation(line: 194, column: 7, scope: !530)
!530 = distinct !DILexicalBlock(scope: !462, file: !3, line: 194, column: 7)
!531 = !DILocation(line: 194, column: 19, scope: !530)
!532 = !DILocation(line: 194, column: 17, scope: !530)
!533 = !DILocation(line: 194, column: 32, scope: !530)
!534 = !DILocation(line: 194, column: 30, scope: !530)
!535 = !DILocation(line: 194, column: 50, scope: !530)
!536 = !DILocation(line: 194, column: 48, scope: !530)
!537 = !DILocation(line: 194, column: 63, scope: !530)
!538 = !DILocation(line: 194, column: 7, scope: !462)
!539 = !DILocation(line: 195, column: 5, scope: !530)
!540 = !DILocalVariable(name: "default_format", scope: !462, file: !3, line: 197, type: !27)
!541 = !DILocation(line: 197, column: 8, scope: !462)
!542 = !DILocation(line: 197, column: 28, scope: !462)
!543 = !DILocation(line: 198, column: 28, scope: !462)
!544 = !DILocation(line: 198, column: 31, scope: !462)
!545 = !DILocation(line: 199, column: 28, scope: !462)
!546 = !DILocation(line: 199, column: 31, scope: !462)
!547 = !DILocation(line: 200, column: 28, scope: !462)
!548 = !DILocation(line: 200, column: 31, scope: !462)
!549 = !DILocation(line: 197, column: 25, scope: !462)
!550 = !DILocation(line: 202, column: 7, scope: !551)
!551 = distinct !DILexicalBlock(scope: !462, file: !3, line: 202, column: 7)
!552 = !DILocation(line: 202, column: 22, scope: !551)
!553 = !DILocation(line: 202, column: 26, scope: !551)
!554 = !DILocation(line: 202, column: 35, scope: !551)
!555 = !DILocation(line: 202, column: 38, scope: !551)
!556 = !DILocation(line: 202, column: 7, scope: !462)
!557 = !DILocation(line: 203, column: 5, scope: !551)
!558 = !DILocation(line: 206, column: 7, scope: !559)
!559 = distinct !DILexicalBlock(scope: !462, file: !3, line: 206, column: 7)
!560 = !DILocation(line: 206, column: 22, scope: !559)
!561 = !DILocation(line: 206, column: 25, scope: !559)
!562 = !DILocation(line: 206, column: 7, scope: !462)
!563 = !DILocation(line: 207, column: 5, scope: !559)
!564 = !DILocation(line: 215, column: 7, scope: !565)
!565 = distinct !DILexicalBlock(scope: !462, file: !3, line: 215, column: 7)
!566 = !DILocation(line: 215, column: 13, scope: !565)
!567 = !DILocation(line: 216, column: 11, scope: !565)
!568 = !DILocation(line: 217, column: 11, scope: !565)
!569 = !DILocation(line: 217, column: 15, scope: !565)
!570 = !DILocation(line: 217, column: 30, scope: !565)
!571 = !DILocation(line: 217, column: 35, scope: !565)
!572 = !DILocation(line: 215, column: 7, scope: !462)
!573 = !DILocation(line: 220, column: 12, scope: !574)
!574 = distinct !DILexicalBlock(scope: !575, file: !3, line: 220, column: 11)
!575 = distinct !DILexicalBlock(scope: !565, file: !3, line: 218, column: 5)
!576 = !DILocation(line: 220, column: 28, scope: !574)
!577 = !DILocation(line: 220, column: 31, scope: !574)
!578 = !DILocation(line: 220, column: 49, scope: !574)
!579 = !DILocation(line: 220, column: 52, scope: !574)
!580 = !DILocation(line: 221, column: 11, scope: !574)
!581 = !DILocation(line: 221, column: 15, scope: !574)
!582 = !DILocation(line: 222, column: 15, scope: !574)
!583 = !DILocation(line: 222, column: 18, scope: !574)
!584 = !DILocation(line: 222, column: 55, scope: !574)
!585 = !DILocation(line: 223, column: 15, scope: !574)
!586 = !DILocation(line: 223, column: 18, scope: !574)
!587 = !DILocation(line: 220, column: 11, scope: !575)
!588 = !DILocation(line: 224, column: 9, scope: !574)
!589 = !DILocation(line: 225, column: 5, scope: !575)
!590 = !DILocation(line: 227, column: 7, scope: !591)
!591 = distinct !DILexicalBlock(scope: !462, file: !3, line: 227, column: 7)
!592 = !DILocation(line: 227, column: 13, scope: !591)
!593 = !DILocation(line: 227, column: 7, scope: !462)
!594 = !DILocation(line: 229, column: 24, scope: !595)
!595 = distinct !DILexicalBlock(scope: !591, file: !3, line: 228, column: 5)
!596 = !DILocation(line: 229, column: 30, scope: !595)
!597 = !DILocation(line: 229, column: 22, scope: !595)
!598 = !DILocation(line: 234, column: 16, scope: !595)
!599 = !DILocation(line: 234, column: 13, scope: !595)
!600 = !DILocation(line: 236, column: 7, scope: !595)
!601 = !DILocation(line: 236, column: 14, scope: !602)
!602 = distinct !DILexicalBlock(scope: !603, file: !3, line: 236, column: 7)
!603 = distinct !DILexicalBlock(scope: !595, file: !3, line: 236, column: 7)
!604 = !DILocation(line: 236, column: 23, scope: !602)
!605 = !DILocation(line: 236, column: 21, scope: !602)
!606 = !DILocation(line: 236, column: 7, scope: !603)
!607 = !DILocalVariable(name: "pwd", scope: !608, file: !3, line: 238, type: !609)
!608 = distinct !DILexicalBlock(scope: !602, file: !3, line: 237, column: 9)
!609 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !610, size: 64)
!610 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "passwd", file: !611, line: 49, size: 384, elements: !612)
!611 = !DIFile(filename: "/usr/include/pwd.h", directory: "")
!612 = !{!613, !614, !615, !616, !617, !618, !619}
!613 = !DIDerivedType(tag: DW_TAG_member, name: "pw_name", scope: !610, file: !611, line: 51, baseType: !6, size: 64)
!614 = !DIDerivedType(tag: DW_TAG_member, name: "pw_passwd", scope: !610, file: !611, line: 52, baseType: !6, size: 64, offset: 64)
!615 = !DIDerivedType(tag: DW_TAG_member, name: "pw_uid", scope: !610, file: !611, line: 54, baseType: !14, size: 32, offset: 128)
!616 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gid", scope: !610, file: !611, line: 55, baseType: !22, size: 32, offset: 160)
!617 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gecos", scope: !610, file: !611, line: 56, baseType: !6, size: 64, offset: 192)
!618 = !DIDerivedType(tag: DW_TAG_member, name: "pw_dir", scope: !610, file: !611, line: 57, baseType: !6, size: 64, offset: 256)
!619 = !DIDerivedType(tag: DW_TAG_member, name: "pw_shell", scope: !610, file: !611, line: 58, baseType: !6, size: 64, offset: 320)
!620 = !DILocation(line: 238, column: 26, scope: !608)
!621 = !DILocalVariable(name: "spec", scope: !608, file: !3, line: 239, type: !69)
!622 = !DILocation(line: 239, column: 23, scope: !608)
!623 = !DILocation(line: 239, column: 30, scope: !608)
!624 = !DILocation(line: 239, column: 35, scope: !608)
!625 = !DILocation(line: 243, column: 16, scope: !626)
!626 = distinct !DILexicalBlock(scope: !608, file: !3, line: 243, column: 15)
!627 = !DILocation(line: 243, column: 15, scope: !626)
!628 = !DILocation(line: 243, column: 15, scope: !608)
!629 = !DILocation(line: 245, column: 36, scope: !630)
!630 = distinct !DILexicalBlock(scope: !631, file: !3, line: 245, column: 19)
!631 = distinct !DILexicalBlock(scope: !626, file: !3, line: 244, column: 13)
!632 = !DILocation(line: 245, column: 19, scope: !630)
!633 = !DILocation(line: 245, column: 67, scope: !630)
!634 = !DILocation(line: 245, column: 19, scope: !631)
!635 = !DILocation(line: 250, column: 35, scope: !636)
!636 = distinct !DILexicalBlock(scope: !630, file: !3, line: 246, column: 17)
!637 = !DILocation(line: 250, column: 25, scope: !636)
!638 = !DILocation(line: 250, column: 23, scope: !636)
!639 = !DILocation(line: 251, column: 17, scope: !636)
!640 = !DILocation(line: 252, column: 13, scope: !631)
!641 = !DILocation(line: 253, column: 15, scope: !642)
!642 = distinct !DILexicalBlock(scope: !608, file: !3, line: 253, column: 15)
!643 = !DILocation(line: 253, column: 19, scope: !642)
!644 = !DILocation(line: 253, column: 15, scope: !608)
!645 = !DILocation(line: 255, column: 25, scope: !646)
!646 = distinct !DILexicalBlock(scope: !642, file: !3, line: 254, column: 13)
!647 = !DILocation(line: 255, column: 32, scope: !646)
!648 = !DILocation(line: 255, column: 62, scope: !646)
!649 = !DILocation(line: 255, column: 67, scope: !646)
!650 = !DILocation(line: 255, column: 55, scope: !646)
!651 = !DILocation(line: 255, column: 15, scope: !646)
!652 = !DILocation(line: 256, column: 18, scope: !646)
!653 = !DILocation(line: 257, column: 15, scope: !646)
!654 = !DILocation(line: 259, column: 30, scope: !608)
!655 = !DILocation(line: 259, column: 35, scope: !608)
!656 = !DILocation(line: 259, column: 21, scope: !608)
!657 = !DILocation(line: 259, column: 19, scope: !608)
!658 = !DILocation(line: 260, column: 25, scope: !608)
!659 = !DILocation(line: 260, column: 30, scope: !608)
!660 = !DILocation(line: 260, column: 23, scope: !608)
!661 = !DILocation(line: 260, column: 16, scope: !608)
!662 = !DILocation(line: 261, column: 25, scope: !608)
!663 = !DILocation(line: 261, column: 30, scope: !608)
!664 = !DILocation(line: 261, column: 23, scope: !608)
!665 = !DILocation(line: 261, column: 16, scope: !608)
!666 = !DILocation(line: 262, column: 24, scope: !608)
!667 = !DILocation(line: 262, column: 11, scope: !608)
!668 = !DILocation(line: 263, column: 17, scope: !608)
!669 = !DILocation(line: 263, column: 11, scope: !608)
!670 = !DILocation(line: 264, column: 9, scope: !608)
!671 = !DILocation(line: 236, column: 36, scope: !602)
!672 = !DILocation(line: 236, column: 7, scope: !602)
!673 = distinct !{!673, !606, !674}
!674 = !DILocation(line: 264, column: 9, scope: !603)
!675 = !DILocation(line: 265, column: 5, scope: !595)
!676 = !DILocalVariable(name: "NO_UID", scope: !677, file: !3, line: 271, type: !12)
!677 = distinct !DILexicalBlock(scope: !591, file: !3, line: 267, column: 5)
!678 = !DILocation(line: 271, column: 13, scope: !677)
!679 = !DILocalVariable(name: "NO_GID", scope: !677, file: !3, line: 272, type: !21)
!680 = !DILocation(line: 272, column: 13, scope: !677)
!681 = !DILocation(line: 274, column: 11, scope: !682)
!682 = distinct !DILexicalBlock(scope: !677, file: !3, line: 274, column: 11)
!683 = !DILocation(line: 274, column: 11, scope: !677)
!684 = !DILocation(line: 274, column: 24, scope: !682)
!685 = !DILocation(line: 275, column: 14, scope: !682)
!686 = !DILocation(line: 275, column: 25, scope: !682)
!687 = !DILocation(line: 275, column: 29, scope: !682)
!688 = !DILocation(line: 275, column: 45, scope: !682)
!689 = !DILocation(line: 275, column: 49, scope: !682)
!690 = !DILocation(line: 277, column: 11, scope: !691)
!691 = distinct !DILexicalBlock(scope: !682, file: !3, line: 276, column: 9)
!692 = !DILocation(line: 277, column: 17, scope: !691)
!693 = !DILocation(line: 278, column: 18, scope: !691)
!694 = !DILocation(line: 278, column: 16, scope: !691)
!695 = !DILocation(line: 279, column: 15, scope: !696)
!696 = distinct !DILexicalBlock(scope: !691, file: !3, line: 279, column: 15)
!697 = !DILocation(line: 279, column: 23, scope: !696)
!698 = !DILocation(line: 279, column: 20, scope: !696)
!699 = !DILocation(line: 279, column: 30, scope: !696)
!700 = !DILocation(line: 279, column: 33, scope: !696)
!701 = !DILocation(line: 279, column: 15, scope: !691)
!702 = !DILocation(line: 280, column: 13, scope: !696)
!703 = !DILocation(line: 281, column: 9, scope: !691)
!704 = !DILocation(line: 283, column: 11, scope: !705)
!705 = distinct !DILexicalBlock(scope: !677, file: !3, line: 283, column: 11)
!706 = !DILocation(line: 283, column: 11, scope: !677)
!707 = !DILocation(line: 283, column: 23, scope: !705)
!708 = !DILocation(line: 284, column: 14, scope: !705)
!709 = !DILocation(line: 284, column: 25, scope: !705)
!710 = !DILocation(line: 284, column: 29, scope: !705)
!711 = !DILocation(line: 284, column: 45, scope: !705)
!712 = !DILocation(line: 284, column: 49, scope: !705)
!713 = !DILocation(line: 286, column: 11, scope: !714)
!714 = distinct !DILexicalBlock(scope: !705, file: !3, line: 285, column: 9)
!715 = !DILocation(line: 286, column: 17, scope: !714)
!716 = !DILocation(line: 287, column: 18, scope: !714)
!717 = !DILocation(line: 287, column: 16, scope: !714)
!718 = !DILocation(line: 288, column: 15, scope: !719)
!719 = distinct !DILexicalBlock(scope: !714, file: !3, line: 288, column: 15)
!720 = !DILocation(line: 288, column: 23, scope: !719)
!721 = !DILocation(line: 288, column: 20, scope: !719)
!722 = !DILocation(line: 288, column: 30, scope: !719)
!723 = !DILocation(line: 288, column: 33, scope: !719)
!724 = !DILocation(line: 288, column: 15, scope: !714)
!725 = !DILocation(line: 289, column: 13, scope: !719)
!726 = !DILocation(line: 290, column: 9, scope: !714)
!727 = !DILocation(line: 292, column: 12, scope: !728)
!728 = distinct !DILexicalBlock(scope: !677, file: !3, line: 292, column: 11)
!729 = !DILocation(line: 292, column: 22, scope: !728)
!730 = !DILocation(line: 292, column: 26, scope: !728)
!731 = !DILocation(line: 292, column: 37, scope: !728)
!732 = !DILocation(line: 292, column: 40, scope: !728)
!733 = !DILocation(line: 292, column: 56, scope: !728)
!734 = !DILocation(line: 292, column: 60, scope: !728)
!735 = !DILocation(line: 292, column: 11, scope: !677)
!736 = !DILocation(line: 294, column: 11, scope: !737)
!737 = distinct !DILexicalBlock(scope: !728, file: !3, line: 293, column: 9)
!738 = !DILocation(line: 294, column: 17, scope: !737)
!739 = !DILocation(line: 295, column: 18, scope: !737)
!740 = !DILocation(line: 295, column: 16, scope: !737)
!741 = !DILocation(line: 296, column: 15, scope: !742)
!742 = distinct !DILexicalBlock(scope: !737, file: !3, line: 296, column: 15)
!743 = !DILocation(line: 296, column: 23, scope: !742)
!744 = !DILocation(line: 296, column: 20, scope: !742)
!745 = !DILocation(line: 296, column: 30, scope: !742)
!746 = !DILocation(line: 296, column: 33, scope: !742)
!747 = !DILocation(line: 296, column: 15, scope: !737)
!748 = !DILocation(line: 297, column: 13, scope: !742)
!749 = !DILocation(line: 299, column: 11, scope: !737)
!750 = !DILocation(line: 299, column: 17, scope: !737)
!751 = !DILocation(line: 300, column: 18, scope: !737)
!752 = !DILocation(line: 300, column: 16, scope: !737)
!753 = !DILocation(line: 301, column: 15, scope: !754)
!754 = distinct !DILexicalBlock(scope: !737, file: !3, line: 301, column: 15)
!755 = !DILocation(line: 301, column: 23, scope: !754)
!756 = !DILocation(line: 301, column: 20, scope: !754)
!757 = !DILocation(line: 301, column: 30, scope: !754)
!758 = !DILocation(line: 301, column: 33, scope: !754)
!759 = !DILocation(line: 301, column: 15, scope: !737)
!760 = !DILocation(line: 302, column: 13, scope: !754)
!761 = !DILocation(line: 303, column: 9, scope: !737)
!762 = !DILocation(line: 304, column: 22, scope: !677)
!763 = !DILocation(line: 304, column: 9, scope: !677)
!764 = !DILocation(line: 307, column: 10, scope: !462)
!765 = !DILocation(line: 307, column: 3, scope: !462)
!766 = !DILocalVariable(name: "argc", arg: 1, scope: !767, file: !3, line: 125, type: !72)
!767 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 125, type: !463, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !768, retainedNodes: !4)
!768 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !769, nameTableKind: None)
!769 = !{!770, !772, !774, !776, !778, !788, !790, !792, !794, !796, !798, !800, !802, !804, !806, !808, !811}
!770 = !DIGlobalVariableExpression(var: !771, expr: !DIExpression())
!771 = distinct !DIGlobalVariable(name: "ruid", scope: !768, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!772 = !DIGlobalVariableExpression(var: !773, expr: !DIExpression())
!773 = distinct !DIGlobalVariable(name: "euid", scope: !768, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!774 = !DIGlobalVariableExpression(var: !775, expr: !DIExpression())
!775 = distinct !DIGlobalVariable(name: "rgid", scope: !768, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!776 = !DIGlobalVariableExpression(var: !777, expr: !DIExpression())
!777 = distinct !DIGlobalVariable(name: "egid", scope: !768, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!778 = !DIGlobalVariableExpression(var: !779, expr: !DIExpression())
!779 = distinct !DIGlobalVariable(name: "longopts", scope: !768, file: !3, line: 75, type: !780, isLocal: true, isDefinition: true)
!780 = !DICompositeType(tag: DW_TAG_array_type, baseType: !781, size: 2560, elements: !76)
!781 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !782)
!782 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !783)
!783 = !{!784, !785, !786, !787}
!784 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !782, file: !66, line: 52, baseType: !69, size: 64)
!785 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !782, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!786 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !782, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!787 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !782, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!788 = !DIGlobalVariableExpression(var: !789, expr: !DIExpression())
!789 = distinct !DIGlobalVariable(name: "just_context", scope: !768, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!790 = !DIGlobalVariableExpression(var: !791, expr: !DIExpression())
!791 = distinct !DIGlobalVariable(name: "just_group", scope: !768, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!792 = !DIGlobalVariableExpression(var: !793, expr: !DIExpression())
!793 = distinct !DIGlobalVariable(name: "use_name", scope: !768, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!794 = !DIGlobalVariableExpression(var: !795, expr: !DIExpression())
!795 = distinct !DIGlobalVariable(name: "use_real", scope: !768, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!796 = !DIGlobalVariableExpression(var: !797, expr: !DIExpression())
!797 = distinct !DIGlobalVariable(name: "just_user", scope: !768, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!798 = !DIGlobalVariableExpression(var: !799, expr: !DIExpression())
!799 = distinct !DIGlobalVariable(name: "opt_zero", scope: !768, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!800 = !DIGlobalVariableExpression(var: !801, expr: !DIExpression())
!801 = distinct !DIGlobalVariable(name: "just_group_list", scope: !768, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!802 = !DIGlobalVariableExpression(var: !803, expr: !DIExpression())
!803 = distinct !DIGlobalVariable(name: "context", scope: !768, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!804 = !DIGlobalVariableExpression(var: !805, expr: !DIExpression())
!805 = distinct !DIGlobalVariable(name: "multiple_users", scope: !768, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!806 = !DIGlobalVariableExpression(var: !807, expr: !DIExpression())
!807 = distinct !DIGlobalVariable(name: "ok", scope: !768, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!808 = !DIGlobalVariableExpression(var: !809, expr: !DIExpression())
!809 = distinct !DIGlobalVariable(name: "buf", scope: !810, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!810 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !768, retainedNodes: !4)
!811 = !DIGlobalVariableExpression(var: !812, expr: !DIExpression())
!812 = distinct !DIGlobalVariable(name: "buf", scope: !813, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!813 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !768, retainedNodes: !4)
!814 = !DILocalVariable(name: "argv", arg: 2, scope: !767, file: !3, line: 125, type: !184)
!815 = !DILocalVariable(name: "optc", scope: !767, file: !3, line: 127, type: !72)
!816 = !DILocalVariable(name: "selinux_enabled", scope: !767, file: !3, line: 128, type: !72)
!817 = !DILocalVariable(name: "smack_enabled", scope: !767, file: !3, line: 129, type: !27)
!818 = !DILocalVariable(name: "pw_name", scope: !767, file: !3, line: 130, type: !6)
!819 = !DILocalVariable(name: "NO_GID", scope: !820, file: !3, line: 272, type: !21)
!820 = distinct !DILexicalBlock(scope: !821, file: !3, line: 267, column: 5)
!821 = distinct !DILexicalBlock(scope: !822, file: !3, line: 227, column: 7)
!822 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 125, type: !463, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !823, retainedNodes: !4)
!823 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !824, nameTableKind: None)
!824 = !{!825, !827, !829, !831, !833, !843, !845, !847, !849, !851, !853, !855, !857, !859, !861, !863, !866}
!825 = !DIGlobalVariableExpression(var: !826, expr: !DIExpression())
!826 = distinct !DIGlobalVariable(name: "ruid", scope: !823, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!827 = !DIGlobalVariableExpression(var: !828, expr: !DIExpression())
!828 = distinct !DIGlobalVariable(name: "euid", scope: !823, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!829 = !DIGlobalVariableExpression(var: !830, expr: !DIExpression())
!830 = distinct !DIGlobalVariable(name: "rgid", scope: !823, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!831 = !DIGlobalVariableExpression(var: !832, expr: !DIExpression())
!832 = distinct !DIGlobalVariable(name: "egid", scope: !823, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!833 = !DIGlobalVariableExpression(var: !834, expr: !DIExpression())
!834 = distinct !DIGlobalVariable(name: "longopts", scope: !823, file: !3, line: 75, type: !835, isLocal: true, isDefinition: true)
!835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !836, size: 2560, elements: !76)
!836 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !837)
!837 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !838)
!838 = !{!839, !840, !841, !842}
!839 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !837, file: !66, line: 52, baseType: !69, size: 64)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !837, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !837, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !837, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!843 = !DIGlobalVariableExpression(var: !844, expr: !DIExpression())
!844 = distinct !DIGlobalVariable(name: "just_context", scope: !823, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!845 = !DIGlobalVariableExpression(var: !846, expr: !DIExpression())
!846 = distinct !DIGlobalVariable(name: "just_group", scope: !823, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!847 = !DIGlobalVariableExpression(var: !848, expr: !DIExpression())
!848 = distinct !DIGlobalVariable(name: "use_name", scope: !823, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!849 = !DIGlobalVariableExpression(var: !850, expr: !DIExpression())
!850 = distinct !DIGlobalVariable(name: "use_real", scope: !823, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!851 = !DIGlobalVariableExpression(var: !852, expr: !DIExpression())
!852 = distinct !DIGlobalVariable(name: "just_user", scope: !823, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!853 = !DIGlobalVariableExpression(var: !854, expr: !DIExpression())
!854 = distinct !DIGlobalVariable(name: "opt_zero", scope: !823, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!855 = !DIGlobalVariableExpression(var: !856, expr: !DIExpression())
!856 = distinct !DIGlobalVariable(name: "just_group_list", scope: !823, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!857 = !DIGlobalVariableExpression(var: !858, expr: !DIExpression())
!858 = distinct !DIGlobalVariable(name: "context", scope: !823, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!859 = !DIGlobalVariableExpression(var: !860, expr: !DIExpression())
!860 = distinct !DIGlobalVariable(name: "multiple_users", scope: !823, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!861 = !DIGlobalVariableExpression(var: !862, expr: !DIExpression())
!862 = distinct !DIGlobalVariable(name: "ok", scope: !823, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!863 = !DIGlobalVariableExpression(var: !864, expr: !DIExpression())
!864 = distinct !DIGlobalVariable(name: "buf", scope: !865, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!865 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !823, retainedNodes: !4)
!866 = !DIGlobalVariableExpression(var: !867, expr: !DIExpression())
!867 = distinct !DIGlobalVariable(name: "buf", scope: !868, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!868 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !823, retainedNodes: !4)
!869 = distinct !DISubprogram(name: "is_smack_enabled", scope: !870, file: !870, line: 39, type: !871, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!870 = !DIFile(filename: "./lib/smack.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!871 = !DISubroutineType(types: !872)
!872 = !{!27}
!873 = !DILocation(line: 44, column: 3, scope: !869)
!874 = distinct !DISubprogram(name: "smack_new_label_from_self", scope: !870, file: !870, line: 26, type: !875, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!875 = !DISubroutineType(types: !876)
!876 = !{!877, !184}
!877 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssize_t", file: !878, line: 77, baseType: !879)
!878 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!879 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ssize_t", file: !15, line: 193, baseType: !880)
!880 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!881 = !DILocalVariable(name: "label", arg: 1, scope: !874, file: !870, line: 26, type: !184)
!882 = !DILocation(line: 26, column: 35, scope: !874)
!883 = !DILocation(line: 28, column: 3, scope: !874)
!884 = distinct !DISubprogram(name: "print_stuff", scope: !3, file: !3, line: 432, type: !295, scopeLine: 433, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!885 = !DILocalVariable(name: "pw_name", arg: 1, scope: !884, file: !3, line: 432, type: !69)
!886 = !DILocation(line: 432, column: 26, scope: !884)
!887 = !DILocation(line: 434, column: 7, scope: !888)
!888 = distinct !DILexicalBlock(scope: !884, file: !3, line: 434, column: 7)
!889 = !DILocation(line: 434, column: 7, scope: !884)
!890 = !DILocation(line: 435, column: 19, scope: !888)
!891 = !DILocation(line: 435, column: 30, scope: !888)
!892 = !DILocation(line: 435, column: 37, scope: !888)
!893 = !DILocation(line: 435, column: 7, scope: !888)
!894 = !DILocation(line: 442, column: 12, scope: !895)
!895 = distinct !DILexicalBlock(scope: !888, file: !3, line: 442, column: 12)
!896 = !DILocation(line: 442, column: 12, scope: !888)
!897 = !DILocation(line: 443, column: 24, scope: !895)
!898 = !DILocation(line: 443, column: 35, scope: !895)
!899 = !DILocation(line: 443, column: 42, scope: !895)
!900 = !DILocation(line: 443, column: 48, scope: !895)
!901 = !DILocation(line: 443, column: 11, scope: !895)
!902 = !DILocation(line: 443, column: 8, scope: !895)
!903 = !DILocation(line: 443, column: 5, scope: !895)
!904 = !DILocation(line: 444, column: 12, scope: !905)
!905 = distinct !DILexicalBlock(scope: !895, file: !3, line: 444, column: 12)
!906 = !DILocation(line: 444, column: 12, scope: !895)
!907 = !DILocation(line: 445, column: 29, scope: !905)
!908 = !DILocation(line: 445, column: 38, scope: !905)
!909 = !DILocation(line: 445, column: 44, scope: !905)
!910 = !DILocation(line: 445, column: 50, scope: !905)
!911 = !DILocation(line: 446, column: 29, scope: !905)
!912 = !DILocation(line: 446, column: 39, scope: !905)
!913 = !DILocation(line: 445, column: 11, scope: !905)
!914 = !DILocation(line: 445, column: 8, scope: !905)
!915 = !DILocation(line: 445, column: 5, scope: !905)
!916 = !DILocation(line: 447, column: 12, scope: !917)
!917 = distinct !DILexicalBlock(scope: !905, file: !3, line: 447, column: 12)
!918 = !DILocation(line: 447, column: 12, scope: !905)
!919 = !DILocation(line: 448, column: 5, scope: !917)
!920 = !DILocation(line: 450, column: 22, scope: !917)
!921 = !DILocation(line: 450, column: 5, scope: !917)
!922 = !DILocation(line: 455, column: 7, scope: !923)
!923 = distinct !DILexicalBlock(scope: !884, file: !3, line: 455, column: 7)
!924 = !DILocation(line: 455, column: 16, scope: !923)
!925 = !DILocation(line: 455, column: 19, scope: !923)
!926 = !DILocation(line: 455, column: 35, scope: !923)
!927 = !DILocation(line: 455, column: 38, scope: !923)
!928 = !DILocation(line: 455, column: 7, scope: !884)
!929 = !DILocation(line: 457, column: 7, scope: !930)
!930 = distinct !DILexicalBlock(scope: !923, file: !3, line: 456, column: 5)
!931 = !DILocation(line: 458, column: 7, scope: !930)
!932 = !DILocation(line: 459, column: 5, scope: !930)
!933 = !DILocation(line: 462, column: 7, scope: !934)
!934 = distinct !DILexicalBlock(scope: !923, file: !3, line: 461, column: 5)
!935 = !DILocation(line: 464, column: 1, scope: !884)
!936 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 335, type: !937, scopeLine: 336, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!937 = !DISubroutineType(types: !938)
!938 = !{null, !12}
!939 = !DILocalVariable(name: "uid", arg: 1, scope: !936, file: !3, line: 335, type: !12)
!940 = !DILocation(line: 335, column: 19, scope: !936)
!941 = !DILocalVariable(name: "pwd", scope: !936, file: !3, line: 337, type: !609)
!942 = !DILocation(line: 337, column: 18, scope: !936)
!943 = !DILocation(line: 339, column: 7, scope: !944)
!944 = distinct !DILexicalBlock(scope: !936, file: !3, line: 339, column: 7)
!945 = !DILocation(line: 339, column: 7, scope: !936)
!946 = !DILocation(line: 341, column: 23, scope: !947)
!947 = distinct !DILexicalBlock(scope: !944, file: !3, line: 340, column: 5)
!948 = !DILocation(line: 341, column: 13, scope: !947)
!949 = !DILocation(line: 341, column: 11, scope: !947)
!950 = !DILocation(line: 342, column: 11, scope: !951)
!951 = distinct !DILexicalBlock(scope: !947, file: !3, line: 342, column: 11)
!952 = !DILocation(line: 342, column: 15, scope: !951)
!953 = !DILocation(line: 342, column: 11, scope: !947)
!954 = !DILocation(line: 344, column: 24, scope: !955)
!955 = distinct !DILexicalBlock(scope: !951, file: !3, line: 343, column: 9)
!956 = !DILocation(line: 345, column: 18, scope: !955)
!957 = !DILocation(line: 344, column: 11, scope: !955)
!958 = !DILocation(line: 346, column: 14, scope: !955)
!959 = !DILocation(line: 347, column: 9, scope: !955)
!960 = !DILocation(line: 348, column: 5, scope: !947)
!961 = !DILocalVariable(name: "s", scope: !936, file: !3, line: 350, type: !6)
!962 = !DILocation(line: 350, column: 9, scope: !936)
!963 = !DILocation(line: 350, column: 13, scope: !936)
!964 = !DILocation(line: 350, column: 19, scope: !936)
!965 = !DILocation(line: 350, column: 24, scope: !936)
!966 = !DILocation(line: 350, column: 34, scope: !936)
!967 = !DILocation(line: 351, column: 3, scope: !936)
!968 = !DILocation(line: 352, column: 1, scope: !936)
!969 = !DILocalVariable(name: "uid", arg: 1, scope: !970, file: !3, line: 335, type: !12)
!970 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 335, type: !937, scopeLine: 336, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !971, retainedNodes: !4)
!971 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !972, nameTableKind: None)
!972 = !{!973, !975, !977, !979, !981, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1007, !1009, !1011, !1014}
!973 = !DIGlobalVariableExpression(var: !974, expr: !DIExpression())
!974 = distinct !DIGlobalVariable(name: "ruid", scope: !971, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!975 = !DIGlobalVariableExpression(var: !976, expr: !DIExpression())
!976 = distinct !DIGlobalVariable(name: "euid", scope: !971, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!977 = !DIGlobalVariableExpression(var: !978, expr: !DIExpression())
!978 = distinct !DIGlobalVariable(name: "rgid", scope: !971, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!979 = !DIGlobalVariableExpression(var: !980, expr: !DIExpression())
!980 = distinct !DIGlobalVariable(name: "egid", scope: !971, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!981 = !DIGlobalVariableExpression(var: !982, expr: !DIExpression())
!982 = distinct !DIGlobalVariable(name: "longopts", scope: !971, file: !3, line: 75, type: !983, isLocal: true, isDefinition: true)
!983 = !DICompositeType(tag: DW_TAG_array_type, baseType: !984, size: 2560, elements: !76)
!984 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !985)
!985 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !986)
!986 = !{!987, !988, !989, !990}
!987 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !985, file: !66, line: 52, baseType: !69, size: 64)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !985, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!989 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !985, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !985, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!991 = !DIGlobalVariableExpression(var: !992, expr: !DIExpression())
!992 = distinct !DIGlobalVariable(name: "just_context", scope: !971, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!993 = !DIGlobalVariableExpression(var: !994, expr: !DIExpression())
!994 = distinct !DIGlobalVariable(name: "just_group", scope: !971, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!995 = !DIGlobalVariableExpression(var: !996, expr: !DIExpression())
!996 = distinct !DIGlobalVariable(name: "use_name", scope: !971, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!997 = !DIGlobalVariableExpression(var: !998, expr: !DIExpression())
!998 = distinct !DIGlobalVariable(name: "use_real", scope: !971, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!999 = !DIGlobalVariableExpression(var: !1000, expr: !DIExpression())
!1000 = distinct !DIGlobalVariable(name: "just_user", scope: !971, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!1001 = !DIGlobalVariableExpression(var: !1002, expr: !DIExpression())
!1002 = distinct !DIGlobalVariable(name: "opt_zero", scope: !971, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!1003 = !DIGlobalVariableExpression(var: !1004, expr: !DIExpression())
!1004 = distinct !DIGlobalVariable(name: "just_group_list", scope: !971, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!1005 = !DIGlobalVariableExpression(var: !1006, expr: !DIExpression())
!1006 = distinct !DIGlobalVariable(name: "context", scope: !971, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!1007 = !DIGlobalVariableExpression(var: !1008, expr: !DIExpression())
!1008 = distinct !DIGlobalVariable(name: "multiple_users", scope: !971, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!1009 = !DIGlobalVariableExpression(var: !1010, expr: !DIExpression())
!1010 = distinct !DIGlobalVariable(name: "ok", scope: !971, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!1011 = !DIGlobalVariableExpression(var: !1012, expr: !DIExpression())
!1012 = distinct !DIGlobalVariable(name: "buf", scope: !1013, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!1013 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !971, retainedNodes: !4)
!1014 = !DIGlobalVariableExpression(var: !1015, expr: !DIExpression())
!1015 = distinct !DIGlobalVariable(name: "buf", scope: !1016, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!1016 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !971, retainedNodes: !4)
!1017 = !DILocalVariable(name: "pwd", scope: !970, file: !3, line: 337, type: !1018)
!1018 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1019, size: 64)
!1019 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "passwd", file: !611, line: 49, size: 384, elements: !1020)
!1020 = !{!1021, !1022, !1023, !1024, !1025, !1026, !1027}
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "pw_name", scope: !1019, file: !611, line: 51, baseType: !6, size: 64)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "pw_passwd", scope: !1019, file: !611, line: 52, baseType: !6, size: 64, offset: 64)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "pw_uid", scope: !1019, file: !611, line: 54, baseType: !14, size: 32, offset: 128)
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gid", scope: !1019, file: !611, line: 55, baseType: !22, size: 32, offset: 160)
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gecos", scope: !1019, file: !611, line: 56, baseType: !6, size: 64, offset: 192)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "pw_dir", scope: !1019, file: !611, line: 57, baseType: !6, size: 64, offset: 256)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "pw_shell", scope: !1019, file: !611, line: 58, baseType: !6, size: 64, offset: 320)
!1028 = distinct !DISubprogram(name: "print_full_info", scope: !3, file: !3, line: 357, type: !295, scopeLine: 358, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1029 = !DILocalVariable(name: "username", arg: 1, scope: !1028, file: !3, line: 357, type: !69)
!1030 = !DILocation(line: 357, column: 30, scope: !1028)
!1031 = !DILocalVariable(name: "pwd", scope: !1028, file: !3, line: 359, type: !609)
!1032 = !DILocation(line: 359, column: 18, scope: !1028)
!1033 = !DILocalVariable(name: "grp", scope: !1028, file: !3, line: 360, type: !1034)
!1034 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1035, size: 64)
!1035 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "group", file: !1036, line: 42, size: 256, elements: !1037)
!1036 = !DIFile(filename: "/usr/include/grp.h", directory: "")
!1037 = !{!1038, !1039, !1040, !1041}
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "gr_name", scope: !1035, file: !1036, line: 44, baseType: !6, size: 64)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "gr_passwd", scope: !1035, file: !1036, line: 45, baseType: !6, size: 64, offset: 64)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "gr_gid", scope: !1035, file: !1036, line: 46, baseType: !22, size: 32, offset: 128)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "gr_mem", scope: !1035, file: !1036, line: 47, baseType: !184, size: 64, offset: 192)
!1042 = !DILocation(line: 360, column: 17, scope: !1028)
!1043 = !DILocation(line: 362, column: 11, scope: !1028)
!1044 = !DILocation(line: 362, column: 24, scope: !1028)
!1045 = !DILocation(line: 362, column: 3, scope: !1028)
!1046 = !DILocation(line: 363, column: 19, scope: !1028)
!1047 = !DILocation(line: 363, column: 9, scope: !1028)
!1048 = !DILocation(line: 363, column: 7, scope: !1028)
!1049 = !DILocation(line: 364, column: 7, scope: !1050)
!1050 = distinct !DILexicalBlock(scope: !1028, file: !3, line: 364, column: 7)
!1051 = !DILocation(line: 364, column: 7, scope: !1028)
!1052 = !DILocation(line: 365, column: 21, scope: !1050)
!1053 = !DILocation(line: 365, column: 26, scope: !1050)
!1054 = !DILocation(line: 365, column: 5, scope: !1050)
!1055 = !DILocation(line: 367, column: 11, scope: !1028)
!1056 = !DILocation(line: 367, column: 25, scope: !1028)
!1057 = !DILocation(line: 367, column: 3, scope: !1028)
!1058 = !DILocation(line: 368, column: 19, scope: !1028)
!1059 = !DILocation(line: 368, column: 9, scope: !1028)
!1060 = !DILocation(line: 368, column: 7, scope: !1028)
!1061 = !DILocation(line: 369, column: 7, scope: !1062)
!1062 = distinct !DILexicalBlock(scope: !1028, file: !3, line: 369, column: 7)
!1063 = !DILocation(line: 369, column: 7, scope: !1028)
!1064 = !DILocation(line: 370, column: 21, scope: !1062)
!1065 = !DILocation(line: 370, column: 26, scope: !1062)
!1066 = !DILocation(line: 370, column: 5, scope: !1062)
!1067 = !DILocation(line: 372, column: 7, scope: !1068)
!1068 = distinct !DILexicalBlock(scope: !1028, file: !3, line: 372, column: 7)
!1069 = !DILocation(line: 372, column: 15, scope: !1068)
!1070 = !DILocation(line: 372, column: 12, scope: !1068)
!1071 = !DILocation(line: 372, column: 7, scope: !1028)
!1072 = !DILocation(line: 374, column: 15, scope: !1073)
!1073 = distinct !DILexicalBlock(scope: !1068, file: !3, line: 373, column: 5)
!1074 = !DILocation(line: 374, column: 30, scope: !1073)
!1075 = !DILocation(line: 374, column: 7, scope: !1073)
!1076 = !DILocation(line: 375, column: 23, scope: !1073)
!1077 = !DILocation(line: 375, column: 13, scope: !1073)
!1078 = !DILocation(line: 375, column: 11, scope: !1073)
!1079 = !DILocation(line: 376, column: 11, scope: !1080)
!1080 = distinct !DILexicalBlock(scope: !1073, file: !3, line: 376, column: 11)
!1081 = !DILocation(line: 376, column: 11, scope: !1073)
!1082 = !DILocation(line: 377, column: 25, scope: !1080)
!1083 = !DILocation(line: 377, column: 30, scope: !1080)
!1084 = !DILocation(line: 377, column: 9, scope: !1080)
!1085 = !DILocation(line: 378, column: 5, scope: !1073)
!1086 = !DILocation(line: 380, column: 7, scope: !1087)
!1087 = distinct !DILexicalBlock(scope: !1028, file: !3, line: 380, column: 7)
!1088 = !DILocation(line: 380, column: 15, scope: !1087)
!1089 = !DILocation(line: 380, column: 12, scope: !1087)
!1090 = !DILocation(line: 380, column: 7, scope: !1028)
!1091 = !DILocation(line: 382, column: 15, scope: !1092)
!1092 = distinct !DILexicalBlock(scope: !1087, file: !3, line: 381, column: 5)
!1093 = !DILocation(line: 382, column: 30, scope: !1092)
!1094 = !DILocation(line: 382, column: 7, scope: !1092)
!1095 = !DILocation(line: 383, column: 23, scope: !1092)
!1096 = !DILocation(line: 383, column: 13, scope: !1092)
!1097 = !DILocation(line: 383, column: 11, scope: !1092)
!1098 = !DILocation(line: 384, column: 11, scope: !1099)
!1099 = distinct !DILexicalBlock(scope: !1092, file: !3, line: 384, column: 11)
!1100 = !DILocation(line: 384, column: 11, scope: !1092)
!1101 = !DILocation(line: 385, column: 25, scope: !1099)
!1102 = !DILocation(line: 385, column: 30, scope: !1099)
!1103 = !DILocation(line: 385, column: 9, scope: !1099)
!1104 = !DILocation(line: 386, column: 5, scope: !1092)
!1105 = !DILocalVariable(name: "groups", scope: !1106, file: !3, line: 389, type: !183)
!1106 = distinct !DILexicalBlock(scope: !1028, file: !3, line: 388, column: 3)
!1107 = !DILocation(line: 389, column: 12, scope: !1106)
!1108 = !DILocalVariable(name: "primary_group", scope: !1106, file: !3, line: 391, type: !21)
!1109 = !DILocation(line: 391, column: 11, scope: !1106)
!1110 = !DILocation(line: 392, column: 9, scope: !1111)
!1111 = distinct !DILexicalBlock(scope: !1106, file: !3, line: 392, column: 9)
!1112 = !DILocation(line: 392, column: 9, scope: !1106)
!1113 = !DILocation(line: 393, column: 23, scope: !1111)
!1114 = !DILocation(line: 393, column: 29, scope: !1111)
!1115 = !DILocation(line: 393, column: 34, scope: !1111)
!1116 = !DILocation(line: 393, column: 21, scope: !1111)
!1117 = !DILocation(line: 393, column: 7, scope: !1111)
!1118 = !DILocation(line: 395, column: 23, scope: !1111)
!1119 = !DILocation(line: 395, column: 21, scope: !1111)
!1120 = !DILocalVariable(name: "n_groups", scope: !1106, file: !3, line: 397, type: !72)
!1121 = !DILocation(line: 397, column: 9, scope: !1106)
!1122 = !DILocation(line: 397, column: 32, scope: !1106)
!1123 = !DILocation(line: 397, column: 42, scope: !1106)
!1124 = !DILocation(line: 397, column: 20, scope: !1106)
!1125 = !DILocation(line: 398, column: 9, scope: !1126)
!1126 = distinct !DILexicalBlock(scope: !1106, file: !3, line: 398, column: 9)
!1127 = !DILocation(line: 398, column: 18, scope: !1126)
!1128 = !DILocation(line: 398, column: 9, scope: !1106)
!1129 = !DILocation(line: 400, column: 13, scope: !1130)
!1130 = distinct !DILexicalBlock(scope: !1131, file: !3, line: 400, column: 13)
!1131 = distinct !DILexicalBlock(scope: !1126, file: !3, line: 399, column: 7)
!1132 = !DILocation(line: 400, column: 13, scope: !1131)
!1133 = !DILocation(line: 401, column: 21, scope: !1130)
!1134 = !DILocation(line: 401, column: 28, scope: !1130)
!1135 = !DILocation(line: 402, column: 25, scope: !1130)
!1136 = !DILocation(line: 402, column: 18, scope: !1130)
!1137 = !DILocation(line: 401, column: 11, scope: !1130)
!1138 = !DILocation(line: 404, column: 21, scope: !1130)
!1139 = !DILocation(line: 404, column: 28, scope: !1130)
!1140 = !DILocation(line: 404, column: 11, scope: !1130)
!1141 = !DILocation(line: 405, column: 12, scope: !1131)
!1142 = !DILocation(line: 406, column: 9, scope: !1131)
!1143 = !DILocation(line: 409, column: 9, scope: !1144)
!1144 = distinct !DILexicalBlock(scope: !1106, file: !3, line: 409, column: 9)
!1145 = !DILocation(line: 409, column: 18, scope: !1144)
!1146 = !DILocation(line: 409, column: 9, scope: !1106)
!1147 = !DILocation(line: 410, column: 7, scope: !1144)
!1148 = !DILocalVariable(name: "i", scope: !1149, file: !3, line: 411, type: !72)
!1149 = distinct !DILexicalBlock(scope: !1106, file: !3, line: 411, column: 5)
!1150 = !DILocation(line: 411, column: 14, scope: !1149)
!1151 = !DILocation(line: 411, column: 10, scope: !1149)
!1152 = !DILocation(line: 411, column: 21, scope: !1153)
!1153 = distinct !DILexicalBlock(scope: !1149, file: !3, line: 411, column: 5)
!1154 = !DILocation(line: 411, column: 25, scope: !1153)
!1155 = !DILocation(line: 411, column: 23, scope: !1153)
!1156 = !DILocation(line: 411, column: 5, scope: !1149)
!1157 = !DILocation(line: 413, column: 13, scope: !1158)
!1158 = distinct !DILexicalBlock(scope: !1159, file: !3, line: 413, column: 13)
!1159 = distinct !DILexicalBlock(scope: !1153, file: !3, line: 412, column: 7)
!1160 = !DILocation(line: 413, column: 15, scope: !1158)
!1161 = !DILocation(line: 413, column: 13, scope: !1159)
!1162 = !DILocation(line: 414, column: 11, scope: !1158)
!1163 = !DILocation(line: 415, column: 9, scope: !1159)
!1164 = !DILocation(line: 416, column: 25, scope: !1159)
!1165 = !DILocation(line: 416, column: 32, scope: !1159)
!1166 = !DILocation(line: 416, column: 15, scope: !1159)
!1167 = !DILocation(line: 416, column: 13, scope: !1159)
!1168 = !DILocation(line: 417, column: 13, scope: !1169)
!1169 = distinct !DILexicalBlock(scope: !1159, file: !3, line: 417, column: 13)
!1170 = !DILocation(line: 417, column: 13, scope: !1159)
!1171 = !DILocation(line: 418, column: 27, scope: !1169)
!1172 = !DILocation(line: 418, column: 32, scope: !1169)
!1173 = !DILocation(line: 418, column: 11, scope: !1169)
!1174 = !DILocation(line: 419, column: 7, scope: !1159)
!1175 = !DILocation(line: 411, column: 36, scope: !1153)
!1176 = !DILocation(line: 411, column: 5, scope: !1153)
!1177 = distinct !{!1177, !1156, !1178}
!1178 = !DILocation(line: 419, column: 7, scope: !1149)
!1179 = !DILocation(line: 420, column: 11, scope: !1106)
!1180 = !DILocation(line: 420, column: 5, scope: !1106)
!1181 = !DILocation(line: 425, column: 7, scope: !1182)
!1182 = distinct !DILexicalBlock(scope: !1028, file: !3, line: 425, column: 7)
!1183 = !DILocation(line: 425, column: 7, scope: !1028)
!1184 = !DILocation(line: 426, column: 13, scope: !1182)
!1185 = !DILocation(line: 426, column: 31, scope: !1182)
!1186 = !DILocation(line: 426, column: 5, scope: !1182)
!1187 = !DILocation(line: 427, column: 1, scope: !1028)
!1188 = !DILocalVariable(name: "username", arg: 1, scope: !1189, file: !3, line: 357, type: !69)
!1189 = distinct !DISubprogram(name: "print_full_info", scope: !3, file: !3, line: 357, type: !295, scopeLine: 358, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1190, retainedNodes: !4)
!1190 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1191, nameTableKind: None)
!1191 = !{!1192, !1194, !1196, !1198, !1200, !1210, !1212, !1214, !1216, !1218, !1220, !1222, !1224, !1226, !1228, !1230, !1233}
!1192 = !DIGlobalVariableExpression(var: !1193, expr: !DIExpression())
!1193 = distinct !DIGlobalVariable(name: "ruid", scope: !1190, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!1194 = !DIGlobalVariableExpression(var: !1195, expr: !DIExpression())
!1195 = distinct !DIGlobalVariable(name: "euid", scope: !1190, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!1196 = !DIGlobalVariableExpression(var: !1197, expr: !DIExpression())
!1197 = distinct !DIGlobalVariable(name: "rgid", scope: !1190, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!1198 = !DIGlobalVariableExpression(var: !1199, expr: !DIExpression())
!1199 = distinct !DIGlobalVariable(name: "egid", scope: !1190, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!1200 = !DIGlobalVariableExpression(var: !1201, expr: !DIExpression())
!1201 = distinct !DIGlobalVariable(name: "longopts", scope: !1190, file: !3, line: 75, type: !1202, isLocal: true, isDefinition: true)
!1202 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1203, size: 2560, elements: !76)
!1203 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1204 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !1205)
!1205 = !{!1206, !1207, !1208, !1209}
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1204, file: !66, line: 52, baseType: !69, size: 64)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1204, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1204, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1204, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!1210 = !DIGlobalVariableExpression(var: !1211, expr: !DIExpression())
!1211 = distinct !DIGlobalVariable(name: "just_context", scope: !1190, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!1212 = !DIGlobalVariableExpression(var: !1213, expr: !DIExpression())
!1213 = distinct !DIGlobalVariable(name: "just_group", scope: !1190, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!1214 = !DIGlobalVariableExpression(var: !1215, expr: !DIExpression())
!1215 = distinct !DIGlobalVariable(name: "use_name", scope: !1190, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!1216 = !DIGlobalVariableExpression(var: !1217, expr: !DIExpression())
!1217 = distinct !DIGlobalVariable(name: "use_real", scope: !1190, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!1218 = !DIGlobalVariableExpression(var: !1219, expr: !DIExpression())
!1219 = distinct !DIGlobalVariable(name: "just_user", scope: !1190, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!1220 = !DIGlobalVariableExpression(var: !1221, expr: !DIExpression())
!1221 = distinct !DIGlobalVariable(name: "opt_zero", scope: !1190, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!1222 = !DIGlobalVariableExpression(var: !1223, expr: !DIExpression())
!1223 = distinct !DIGlobalVariable(name: "just_group_list", scope: !1190, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!1224 = !DIGlobalVariableExpression(var: !1225, expr: !DIExpression())
!1225 = distinct !DIGlobalVariable(name: "context", scope: !1190, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!1226 = !DIGlobalVariableExpression(var: !1227, expr: !DIExpression())
!1227 = distinct !DIGlobalVariable(name: "multiple_users", scope: !1190, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!1228 = !DIGlobalVariableExpression(var: !1229, expr: !DIExpression())
!1229 = distinct !DIGlobalVariable(name: "ok", scope: !1190, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!1230 = !DIGlobalVariableExpression(var: !1231, expr: !DIExpression())
!1231 = distinct !DIGlobalVariable(name: "buf", scope: !1232, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!1232 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1190, retainedNodes: !4)
!1233 = !DIGlobalVariableExpression(var: !1234, expr: !DIExpression())
!1234 = distinct !DIGlobalVariable(name: "buf", scope: !1235, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!1235 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1190, retainedNodes: !4)
!1236 = !DILocalVariable(name: "pwd", scope: !1189, file: !3, line: 359, type: !1237)
!1237 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1238, size: 64)
!1238 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "passwd", file: !611, line: 49, size: 384, elements: !1239)
!1239 = !{!1240, !1241, !1242, !1243, !1244, !1245, !1246}
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "pw_name", scope: !1238, file: !611, line: 51, baseType: !6, size: 64)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "pw_passwd", scope: !1238, file: !611, line: 52, baseType: !6, size: 64, offset: 64)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "pw_uid", scope: !1238, file: !611, line: 54, baseType: !14, size: 32, offset: 128)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gid", scope: !1238, file: !611, line: 55, baseType: !22, size: 32, offset: 160)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gecos", scope: !1238, file: !611, line: 56, baseType: !6, size: 64, offset: 192)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "pw_dir", scope: !1238, file: !611, line: 57, baseType: !6, size: 64, offset: 256)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "pw_shell", scope: !1238, file: !611, line: 58, baseType: !6, size: 64, offset: 320)
!1247 = !DILocalVariable(name: "grp", scope: !1189, file: !3, line: 360, type: !1248)
!1248 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1249, size: 64)
!1249 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "group", file: !1036, line: 42, size: 256, elements: !1250)
!1250 = !{!1251, !1252, !1253, !1254}
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "gr_name", scope: !1249, file: !1036, line: 44, baseType: !6, size: 64)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "gr_passwd", scope: !1249, file: !1036, line: 45, baseType: !6, size: 64, offset: 64)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "gr_gid", scope: !1249, file: !1036, line: 46, baseType: !22, size: 32, offset: 128)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "gr_mem", scope: !1249, file: !1036, line: 47, baseType: !184, size: 64, offset: 192)
!1255 = !DILocalVariable(name: "uid", arg: 1, scope: !48, file: !3, line: 325, type: !51)
!1256 = !DILocation(line: 325, column: 28, scope: !48)
!1257 = !DILocation(line: 328, column: 22, scope: !48)
!1258 = !DILocation(line: 328, column: 21, scope: !48)
!1259 = !DILocation(line: 328, column: 10, scope: !48)
!1260 = !DILocation(line: 328, column: 3, scope: !48)
!1261 = !DILocalVariable(name: "uid", arg: 1, scope: !1262, file: !3, line: 325, type: !51)
!1262 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1263, retainedNodes: !4)
!1263 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1264, nameTableKind: None)
!1264 = !{!1265, !1267, !1269, !1271, !1273, !1283, !1285, !1287, !1289, !1291, !1293, !1295, !1297, !1299, !1301, !1303, !1305}
!1265 = !DIGlobalVariableExpression(var: !1266, expr: !DIExpression())
!1266 = distinct !DIGlobalVariable(name: "ruid", scope: !1263, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!1267 = !DIGlobalVariableExpression(var: !1268, expr: !DIExpression())
!1268 = distinct !DIGlobalVariable(name: "euid", scope: !1263, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!1269 = !DIGlobalVariableExpression(var: !1270, expr: !DIExpression())
!1270 = distinct !DIGlobalVariable(name: "rgid", scope: !1263, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!1271 = !DIGlobalVariableExpression(var: !1272, expr: !DIExpression())
!1272 = distinct !DIGlobalVariable(name: "egid", scope: !1263, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!1273 = !DIGlobalVariableExpression(var: !1274, expr: !DIExpression())
!1274 = distinct !DIGlobalVariable(name: "longopts", scope: !1263, file: !3, line: 75, type: !1275, isLocal: true, isDefinition: true)
!1275 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1276, size: 2560, elements: !76)
!1276 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1277)
!1277 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !1278)
!1278 = !{!1279, !1280, !1281, !1282}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1277, file: !66, line: 52, baseType: !69, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1277, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1277, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1277, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!1283 = !DIGlobalVariableExpression(var: !1284, expr: !DIExpression())
!1284 = distinct !DIGlobalVariable(name: "just_context", scope: !1263, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!1285 = !DIGlobalVariableExpression(var: !1286, expr: !DIExpression())
!1286 = distinct !DIGlobalVariable(name: "just_group", scope: !1263, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!1287 = !DIGlobalVariableExpression(var: !1288, expr: !DIExpression())
!1288 = distinct !DIGlobalVariable(name: "use_name", scope: !1263, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!1289 = !DIGlobalVariableExpression(var: !1290, expr: !DIExpression())
!1290 = distinct !DIGlobalVariable(name: "use_real", scope: !1263, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!1291 = !DIGlobalVariableExpression(var: !1292, expr: !DIExpression())
!1292 = distinct !DIGlobalVariable(name: "just_user", scope: !1263, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!1293 = !DIGlobalVariableExpression(var: !1294, expr: !DIExpression())
!1294 = distinct !DIGlobalVariable(name: "opt_zero", scope: !1263, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!1295 = !DIGlobalVariableExpression(var: !1296, expr: !DIExpression())
!1296 = distinct !DIGlobalVariable(name: "just_group_list", scope: !1263, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!1297 = !DIGlobalVariableExpression(var: !1298, expr: !DIExpression())
!1298 = distinct !DIGlobalVariable(name: "context", scope: !1263, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!1299 = !DIGlobalVariableExpression(var: !1300, expr: !DIExpression())
!1300 = distinct !DIGlobalVariable(name: "multiple_users", scope: !1263, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!1301 = !DIGlobalVariableExpression(var: !1302, expr: !DIExpression())
!1302 = distinct !DIGlobalVariable(name: "ok", scope: !1263, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!1303 = !DIGlobalVariableExpression(var: !1304, expr: !DIExpression())
!1304 = distinct !DIGlobalVariable(name: "buf", scope: !1262, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!1305 = !DIGlobalVariableExpression(var: !1306, expr: !DIExpression())
!1306 = distinct !DIGlobalVariable(name: "buf", scope: !1307, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!1307 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1263, retainedNodes: !4)
!1308 = !DILocalVariable(name: "gid", arg: 1, scope: !58, file: !3, line: 314, type: !61)
!1309 = !DILocation(line: 314, column: 28, scope: !58)
!1310 = !DILocation(line: 317, column: 22, scope: !58)
!1311 = !DILocation(line: 317, column: 21, scope: !58)
!1312 = !DILocation(line: 317, column: 10, scope: !58)
!1313 = !DILocation(line: 317, column: 3, scope: !58)
!1314 = !DILocalVariable(name: "gid", arg: 1, scope: !1315, file: !3, line: 314, type: !61)
!1315 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1316, retainedNodes: !4)
!1316 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1317, nameTableKind: None)
!1317 = !{!1318, !1320, !1322, !1324, !1326, !1336, !1338, !1340, !1342, !1344, !1346, !1348, !1350, !1352, !1354, !1356, !1359}
!1318 = !DIGlobalVariableExpression(var: !1319, expr: !DIExpression())
!1319 = distinct !DIGlobalVariable(name: "ruid", scope: !1316, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!1320 = !DIGlobalVariableExpression(var: !1321, expr: !DIExpression())
!1321 = distinct !DIGlobalVariable(name: "euid", scope: !1316, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!1322 = !DIGlobalVariableExpression(var: !1323, expr: !DIExpression())
!1323 = distinct !DIGlobalVariable(name: "rgid", scope: !1316, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!1324 = !DIGlobalVariableExpression(var: !1325, expr: !DIExpression())
!1325 = distinct !DIGlobalVariable(name: "egid", scope: !1316, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!1326 = !DIGlobalVariableExpression(var: !1327, expr: !DIExpression())
!1327 = distinct !DIGlobalVariable(name: "longopts", scope: !1316, file: !3, line: 75, type: !1328, isLocal: true, isDefinition: true)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1329, size: 2560, elements: !76)
!1329 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1330)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !1331)
!1331 = !{!1332, !1333, !1334, !1335}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1330, file: !66, line: 52, baseType: !69, size: 64)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1330, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1330, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1330, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!1336 = !DIGlobalVariableExpression(var: !1337, expr: !DIExpression())
!1337 = distinct !DIGlobalVariable(name: "just_context", scope: !1316, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!1338 = !DIGlobalVariableExpression(var: !1339, expr: !DIExpression())
!1339 = distinct !DIGlobalVariable(name: "just_group", scope: !1316, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!1340 = !DIGlobalVariableExpression(var: !1341, expr: !DIExpression())
!1341 = distinct !DIGlobalVariable(name: "use_name", scope: !1316, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!1342 = !DIGlobalVariableExpression(var: !1343, expr: !DIExpression())
!1343 = distinct !DIGlobalVariable(name: "use_real", scope: !1316, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!1344 = !DIGlobalVariableExpression(var: !1345, expr: !DIExpression())
!1345 = distinct !DIGlobalVariable(name: "just_user", scope: !1316, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!1346 = !DIGlobalVariableExpression(var: !1347, expr: !DIExpression())
!1347 = distinct !DIGlobalVariable(name: "opt_zero", scope: !1316, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!1348 = !DIGlobalVariableExpression(var: !1349, expr: !DIExpression())
!1349 = distinct !DIGlobalVariable(name: "just_group_list", scope: !1316, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!1350 = !DIGlobalVariableExpression(var: !1351, expr: !DIExpression())
!1351 = distinct !DIGlobalVariable(name: "context", scope: !1316, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!1352 = !DIGlobalVariableExpression(var: !1353, expr: !DIExpression())
!1353 = distinct !DIGlobalVariable(name: "multiple_users", scope: !1316, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!1354 = !DIGlobalVariableExpression(var: !1355, expr: !DIExpression())
!1355 = distinct !DIGlobalVariable(name: "ok", scope: !1316, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!1356 = !DIGlobalVariableExpression(var: !1357, expr: !DIExpression())
!1357 = distinct !DIGlobalVariable(name: "buf", scope: !1358, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!1358 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1316, retainedNodes: !4)
!1359 = !DIGlobalVariableExpression(var: !1360, expr: !DIExpression())
!1360 = distinct !DIGlobalVariable(name: "buf", scope: !1315, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!1361 = distinct !DISubprogram(name: "print_group_list", scope: !81, file: !81, line: 36, type: !1362, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !82, retainedNodes: !4)
!1362 = !DISubroutineType(types: !1363)
!1363 = !{!27, !69, !12, !21, !21, !27, !7}
!1364 = !DILocalVariable(name: "username", arg: 1, scope: !1361, file: !81, line: 36, type: !69)
!1365 = !DILocation(line: 36, column: 31, scope: !1361)
!1366 = !DILocalVariable(name: "ruid", arg: 2, scope: !1361, file: !81, line: 37, type: !12)
!1367 = !DILocation(line: 37, column: 25, scope: !1361)
!1368 = !DILocalVariable(name: "rgid", arg: 3, scope: !1361, file: !81, line: 37, type: !21)
!1369 = !DILocation(line: 37, column: 37, scope: !1361)
!1370 = !DILocalVariable(name: "egid", arg: 4, scope: !1361, file: !81, line: 37, type: !21)
!1371 = !DILocation(line: 37, column: 49, scope: !1361)
!1372 = !DILocalVariable(name: "use_names", arg: 5, scope: !1361, file: !81, line: 38, type: !27)
!1373 = !DILocation(line: 38, column: 24, scope: !1361)
!1374 = !DILocalVariable(name: "delim", arg: 6, scope: !1361, file: !81, line: 38, type: !7)
!1375 = !DILocation(line: 38, column: 40, scope: !1361)
!1376 = !DILocalVariable(name: "ok", scope: !1361, file: !81, line: 40, type: !27)
!1377 = !DILocation(line: 40, column: 8, scope: !1361)
!1378 = !DILocalVariable(name: "pwd", scope: !1361, file: !81, line: 41, type: !1379)
!1379 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1380, size: 64)
!1380 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "passwd", file: !611, line: 49, size: 384, elements: !1381)
!1381 = !{!1382, !1383, !1384, !1385, !1386, !1387, !1388}
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "pw_name", scope: !1380, file: !611, line: 51, baseType: !6, size: 64)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "pw_passwd", scope: !1380, file: !611, line: 52, baseType: !6, size: 64, offset: 64)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "pw_uid", scope: !1380, file: !611, line: 54, baseType: !14, size: 32, offset: 128)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gid", scope: !1380, file: !611, line: 55, baseType: !22, size: 32, offset: 160)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gecos", scope: !1380, file: !611, line: 56, baseType: !6, size: 64, offset: 192)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "pw_dir", scope: !1380, file: !611, line: 57, baseType: !6, size: 64, offset: 256)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "pw_shell", scope: !1380, file: !611, line: 58, baseType: !6, size: 64, offset: 320)
!1389 = !DILocation(line: 41, column: 18, scope: !1361)
!1390 = !DILocation(line: 43, column: 7, scope: !1391)
!1391 = distinct !DILexicalBlock(scope: !1361, file: !81, line: 43, column: 7)
!1392 = !DILocation(line: 43, column: 7, scope: !1361)
!1393 = !DILocation(line: 45, column: 23, scope: !1394)
!1394 = distinct !DILexicalBlock(scope: !1391, file: !81, line: 44, column: 5)
!1395 = !DILocation(line: 45, column: 13, scope: !1394)
!1396 = !DILocation(line: 45, column: 11, scope: !1394)
!1397 = !DILocation(line: 46, column: 11, scope: !1398)
!1398 = distinct !DILexicalBlock(scope: !1394, file: !81, line: 46, column: 11)
!1399 = !DILocation(line: 46, column: 15, scope: !1398)
!1400 = !DILocation(line: 46, column: 11, scope: !1394)
!1401 = !DILocation(line: 47, column: 12, scope: !1398)
!1402 = !DILocation(line: 47, column: 9, scope: !1398)
!1403 = !DILocation(line: 48, column: 5, scope: !1394)
!1404 = !DILocation(line: 50, column: 21, scope: !1405)
!1405 = distinct !DILexicalBlock(scope: !1361, file: !81, line: 50, column: 7)
!1406 = !DILocation(line: 50, column: 27, scope: !1405)
!1407 = !DILocation(line: 50, column: 8, scope: !1405)
!1408 = !DILocation(line: 50, column: 7, scope: !1361)
!1409 = !DILocation(line: 51, column: 8, scope: !1405)
!1410 = !DILocation(line: 51, column: 5, scope: !1405)
!1411 = !DILocation(line: 53, column: 7, scope: !1412)
!1412 = distinct !DILexicalBlock(scope: !1361, file: !81, line: 53, column: 7)
!1413 = !DILocation(line: 53, column: 15, scope: !1412)
!1414 = !DILocation(line: 53, column: 12, scope: !1412)
!1415 = !DILocation(line: 53, column: 7, scope: !1361)
!1416 = !DILocation(line: 55, column: 7, scope: !1417)
!1417 = distinct !DILexicalBlock(scope: !1412, file: !81, line: 54, column: 5)
!1418 = !DILocation(line: 56, column: 25, scope: !1419)
!1419 = distinct !DILexicalBlock(scope: !1417, file: !81, line: 56, column: 11)
!1420 = !DILocation(line: 56, column: 31, scope: !1419)
!1421 = !DILocation(line: 56, column: 12, scope: !1419)
!1422 = !DILocation(line: 56, column: 11, scope: !1417)
!1423 = !DILocation(line: 57, column: 12, scope: !1419)
!1424 = !DILocation(line: 57, column: 9, scope: !1419)
!1425 = !DILocation(line: 58, column: 5, scope: !1417)
!1426 = !DILocalVariable(name: "groups", scope: !1427, file: !81, line: 61, type: !183)
!1427 = distinct !DILexicalBlock(scope: !1361, file: !81, line: 60, column: 3)
!1428 = !DILocation(line: 61, column: 12, scope: !1427)
!1429 = !DILocalVariable(name: "n_groups", scope: !1427, file: !81, line: 63, type: !72)
!1430 = !DILocation(line: 63, column: 9, scope: !1427)
!1431 = !DILocation(line: 63, column: 32, scope: !1427)
!1432 = !DILocation(line: 63, column: 43, scope: !1427)
!1433 = !DILocation(line: 63, column: 49, scope: !1427)
!1434 = !DILocation(line: 63, column: 54, scope: !1427)
!1435 = !DILocation(line: 63, column: 63, scope: !1427)
!1436 = !DILocation(line: 63, column: 20, scope: !1427)
!1437 = !DILocation(line: 64, column: 9, scope: !1438)
!1438 = distinct !DILexicalBlock(scope: !1427, file: !81, line: 64, column: 9)
!1439 = !DILocation(line: 64, column: 18, scope: !1438)
!1440 = !DILocation(line: 64, column: 9, scope: !1427)
!1441 = !DILocation(line: 66, column: 13, scope: !1442)
!1442 = distinct !DILexicalBlock(scope: !1443, file: !81, line: 66, column: 13)
!1443 = distinct !DILexicalBlock(scope: !1438, file: !81, line: 65, column: 7)
!1444 = !DILocation(line: 66, column: 13, scope: !1443)
!1445 = !DILocation(line: 68, column: 23, scope: !1446)
!1446 = distinct !DILexicalBlock(scope: !1442, file: !81, line: 67, column: 11)
!1447 = !DILocation(line: 68, column: 30, scope: !1446)
!1448 = !DILocation(line: 69, column: 27, scope: !1446)
!1449 = !DILocation(line: 69, column: 20, scope: !1446)
!1450 = !DILocation(line: 68, column: 13, scope: !1446)
!1451 = !DILocation(line: 70, column: 11, scope: !1446)
!1452 = !DILocation(line: 73, column: 23, scope: !1453)
!1453 = distinct !DILexicalBlock(scope: !1442, file: !81, line: 72, column: 11)
!1454 = !DILocation(line: 73, column: 30, scope: !1453)
!1455 = !DILocation(line: 73, column: 13, scope: !1453)
!1456 = !DILocation(line: 75, column: 9, scope: !1443)
!1457 = !DILocalVariable(name: "i", scope: !1458, file: !81, line: 78, type: !72)
!1458 = distinct !DILexicalBlock(scope: !1427, file: !81, line: 78, column: 5)
!1459 = !DILocation(line: 78, column: 14, scope: !1458)
!1460 = !DILocation(line: 78, column: 10, scope: !1458)
!1461 = !DILocation(line: 78, column: 21, scope: !1462)
!1462 = distinct !DILexicalBlock(scope: !1458, file: !81, line: 78, column: 5)
!1463 = !DILocation(line: 78, column: 25, scope: !1462)
!1464 = !DILocation(line: 78, column: 23, scope: !1462)
!1465 = !DILocation(line: 78, column: 5, scope: !1458)
!1466 = !DILocation(line: 79, column: 11, scope: !1467)
!1467 = distinct !DILexicalBlock(scope: !1462, file: !81, line: 79, column: 11)
!1468 = !DILocation(line: 79, column: 18, scope: !1467)
!1469 = !DILocation(line: 79, column: 24, scope: !1467)
!1470 = !DILocation(line: 79, column: 21, scope: !1467)
!1471 = !DILocation(line: 79, column: 29, scope: !1467)
!1472 = !DILocation(line: 79, column: 32, scope: !1467)
!1473 = !DILocation(line: 79, column: 39, scope: !1467)
!1474 = !DILocation(line: 79, column: 45, scope: !1467)
!1475 = !DILocation(line: 79, column: 42, scope: !1467)
!1476 = !DILocation(line: 79, column: 11, scope: !1462)
!1477 = !DILocation(line: 81, column: 11, scope: !1478)
!1478 = distinct !DILexicalBlock(scope: !1467, file: !81, line: 80, column: 9)
!1479 = !DILocation(line: 82, column: 29, scope: !1480)
!1480 = distinct !DILexicalBlock(scope: !1478, file: !81, line: 82, column: 15)
!1481 = !DILocation(line: 82, column: 36, scope: !1480)
!1482 = !DILocation(line: 82, column: 40, scope: !1480)
!1483 = !DILocation(line: 82, column: 16, scope: !1480)
!1484 = !DILocation(line: 82, column: 15, scope: !1478)
!1485 = !DILocation(line: 83, column: 16, scope: !1480)
!1486 = !DILocation(line: 83, column: 13, scope: !1480)
!1487 = !DILocation(line: 84, column: 9, scope: !1478)
!1488 = !DILocation(line: 78, column: 36, scope: !1462)
!1489 = !DILocation(line: 78, column: 5, scope: !1462)
!1490 = distinct !{!1490, !1465, !1491}
!1491 = !DILocation(line: 84, column: 9, scope: !1458)
!1492 = !DILocation(line: 85, column: 11, scope: !1427)
!1493 = !DILocation(line: 85, column: 5, scope: !1427)
!1494 = !DILocation(line: 87, column: 10, scope: !1361)
!1495 = !DILocation(line: 87, column: 3, scope: !1361)
!1496 = !DILocation(line: 88, column: 1, scope: !1361)
!1497 = !DILocalVariable(name: "username", arg: 1, scope: !1498, file: !81, line: 36, type: !69)
!1498 = distinct !DISubprogram(name: "print_group_list", scope: !81, file: !81, line: 36, type: !1362, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1499, retainedNodes: !4)
!1499 = distinct !DICompileUnit(language: DW_LANG_C99, file: !81, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !83, globals: !1500, nameTableKind: None)
!1500 = !{!1501}
!1501 = !DIGlobalVariableExpression(var: !1502, expr: !DIExpression())
!1502 = distinct !DIGlobalVariable(name: "buf", scope: !1503, file: !81, line: 96, type: !53, isLocal: true, isDefinition: true)
!1503 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !81, file: !81, line: 94, type: !59, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1499, retainedNodes: !4)
!1504 = !DILocalVariable(name: "ruid", arg: 2, scope: !1498, file: !81, line: 37, type: !12)
!1505 = !DILocalVariable(name: "rgid", arg: 3, scope: !1498, file: !81, line: 37, type: !21)
!1506 = !DILocalVariable(name: "egid", arg: 4, scope: !1498, file: !81, line: 37, type: !21)
!1507 = !DILocalVariable(name: "use_names", arg: 5, scope: !1498, file: !81, line: 38, type: !27)
!1508 = !DILocalVariable(name: "delim", arg: 6, scope: !1498, file: !81, line: 38, type: !7)
!1509 = !DILocalVariable(name: "ok", scope: !1498, file: !81, line: 40, type: !27)
!1510 = !DILocalVariable(name: "pwd", scope: !1498, file: !81, line: 41, type: !1511)
!1511 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1512, size: 64)
!1512 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "passwd", file: !611, line: 49, size: 384, elements: !1513)
!1513 = !{!1514, !1515, !1516, !1517, !1518, !1519, !1520}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "pw_name", scope: !1512, file: !611, line: 51, baseType: !6, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "pw_passwd", scope: !1512, file: !611, line: 52, baseType: !6, size: 64, offset: 64)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "pw_uid", scope: !1512, file: !611, line: 54, baseType: !14, size: 32, offset: 128)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gid", scope: !1512, file: !611, line: 55, baseType: !22, size: 32, offset: 160)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gecos", scope: !1512, file: !611, line: 56, baseType: !6, size: 64, offset: 192)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "pw_dir", scope: !1512, file: !611, line: 57, baseType: !6, size: 64, offset: 256)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pw_shell", scope: !1512, file: !611, line: 58, baseType: !6, size: 64, offset: 320)
!1521 = distinct !DISubprogram(name: "print_group", scope: !81, file: !81, line: 103, type: !1522, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !82, retainedNodes: !4)
!1522 = !DISubroutineType(types: !1523)
!1523 = !{!27, !21, !27}
!1524 = !DILocalVariable(name: "gid", arg: 1, scope: !1521, file: !81, line: 103, type: !21)
!1525 = !DILocation(line: 103, column: 20, scope: !1521)
!1526 = !DILocalVariable(name: "use_name", arg: 2, scope: !1521, file: !81, line: 103, type: !27)
!1527 = !DILocation(line: 103, column: 30, scope: !1521)
!1528 = !DILocalVariable(name: "grp", scope: !1521, file: !81, line: 105, type: !1529)
!1529 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1530, size: 64)
!1530 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "group", file: !1036, line: 42, size: 256, elements: !1531)
!1531 = !{!1532, !1533, !1534, !1535}
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "gr_name", scope: !1530, file: !1036, line: 44, baseType: !6, size: 64)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "gr_passwd", scope: !1530, file: !1036, line: 45, baseType: !6, size: 64, offset: 64)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "gr_gid", scope: !1530, file: !1036, line: 46, baseType: !22, size: 32, offset: 128)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "gr_mem", scope: !1530, file: !1036, line: 47, baseType: !184, size: 64, offset: 192)
!1536 = !DILocation(line: 105, column: 17, scope: !1521)
!1537 = !DILocalVariable(name: "ok", scope: !1521, file: !81, line: 106, type: !27)
!1538 = !DILocation(line: 106, column: 8, scope: !1521)
!1539 = !DILocation(line: 108, column: 7, scope: !1540)
!1540 = distinct !DILexicalBlock(scope: !1521, file: !81, line: 108, column: 7)
!1541 = !DILocation(line: 108, column: 7, scope: !1521)
!1542 = !DILocation(line: 110, column: 23, scope: !1543)
!1543 = distinct !DILexicalBlock(scope: !1540, file: !81, line: 109, column: 5)
!1544 = !DILocation(line: 110, column: 13, scope: !1543)
!1545 = !DILocation(line: 110, column: 11, scope: !1543)
!1546 = !DILocation(line: 111, column: 11, scope: !1547)
!1547 = distinct !DILexicalBlock(scope: !1543, file: !81, line: 111, column: 11)
!1548 = !DILocation(line: 111, column: 15, scope: !1547)
!1549 = !DILocation(line: 111, column: 11, scope: !1543)
!1550 = !DILocation(line: 113, column: 24, scope: !1551)
!1551 = distinct !DILexicalBlock(scope: !1547, file: !81, line: 112, column: 9)
!1552 = !DILocation(line: 114, column: 38, scope: !1551)
!1553 = !DILocation(line: 114, column: 18, scope: !1551)
!1554 = !DILocation(line: 113, column: 11, scope: !1551)
!1555 = !DILocation(line: 115, column: 14, scope: !1551)
!1556 = !DILocation(line: 116, column: 9, scope: !1551)
!1557 = !DILocation(line: 117, column: 5, scope: !1543)
!1558 = !DILocalVariable(name: "s", scope: !1521, file: !81, line: 119, type: !6)
!1559 = !DILocation(line: 119, column: 9, scope: !1521)
!1560 = !DILocation(line: 119, column: 13, scope: !1521)
!1561 = !DILocation(line: 119, column: 19, scope: !1521)
!1562 = !DILocation(line: 119, column: 24, scope: !1521)
!1563 = !DILocation(line: 119, column: 34, scope: !1521)
!1564 = !DILocation(line: 120, column: 3, scope: !1521)
!1565 = !DILocation(line: 121, column: 10, scope: !1521)
!1566 = !DILocation(line: 121, column: 3, scope: !1521)
!1567 = !DILocalVariable(name: "gid", arg: 1, scope: !1568, file: !81, line: 103, type: !21)
!1568 = distinct !DISubprogram(name: "print_group", scope: !81, file: !81, line: 103, type: !1522, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1569, retainedNodes: !4)
!1569 = distinct !DICompileUnit(language: DW_LANG_C99, file: !81, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !83, globals: !1570, nameTableKind: None)
!1570 = !{!1571}
!1571 = !DIGlobalVariableExpression(var: !1572, expr: !DIExpression())
!1572 = distinct !DIGlobalVariable(name: "buf", scope: !1573, file: !81, line: 96, type: !53, isLocal: true, isDefinition: true)
!1573 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !81, file: !81, line: 94, type: !59, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1569, retainedNodes: !4)
!1574 = !DILocalVariable(name: "use_name", arg: 2, scope: !1568, file: !81, line: 103, type: !27)
!1575 = !DILocalVariable(name: "grp", scope: !1568, file: !81, line: 105, type: !1576)
!1576 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1577, size: 64)
!1577 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "group", file: !1036, line: 42, size: 256, elements: !1578)
!1578 = !{!1579, !1580, !1581, !1582}
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "gr_name", scope: !1577, file: !1036, line: 44, baseType: !6, size: 64)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "gr_passwd", scope: !1577, file: !1036, line: 45, baseType: !6, size: 64, offset: 64)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "gr_gid", scope: !1577, file: !1036, line: 46, baseType: !22, size: 32, offset: 128)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "gr_mem", scope: !1577, file: !1036, line: 47, baseType: !184, size: 64, offset: 192)
!1583 = !DILocalVariable(name: "ok", scope: !1568, file: !81, line: 106, type: !27)
!1584 = !DILocalVariable(name: "gid", arg: 1, scope: !80, file: !81, line: 94, type: !61)
!1585 = !DILocation(line: 94, column: 28, scope: !80)
!1586 = !DILocation(line: 97, column: 22, scope: !80)
!1587 = !DILocation(line: 97, column: 21, scope: !80)
!1588 = !DILocation(line: 97, column: 10, scope: !80)
!1589 = !DILocation(line: 97, column: 3, scope: !80)
!1590 = !DILocalVariable(name: "gid", arg: 1, scope: !1591, file: !81, line: 94, type: !61)
!1591 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !81, file: !81, line: 94, type: !59, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1592, retainedNodes: !4)
!1592 = distinct !DICompileUnit(language: DW_LANG_C99, file: !81, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !83, globals: !1593, nameTableKind: None)
!1593 = !{!1594}
!1594 = !DIGlobalVariableExpression(var: !1595, expr: !DIExpression())
!1595 = distinct !DIGlobalVariable(name: "buf", scope: !1591, file: !81, line: 96, type: !53, isLocal: true, isDefinition: true)
!1596 = distinct !DISubprogram(name: "close_stdout", scope: !98, file: !98, line: 117, type: !1597, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !93, retainedNodes: !4)
!1597 = !DISubroutineType(types: !1598)
!1598 = !{null}
!1599 = !DILocation(line: 119, column: 21, scope: !1600)
!1600 = distinct !DILexicalBlock(scope: !1596, file: !98, line: 119, column: 7)
!1601 = !DILocation(line: 119, column: 7, scope: !1600)
!1602 = !DILocation(line: 119, column: 29, scope: !1600)
!1603 = !DILocation(line: 120, column: 7, scope: !1600)
!1604 = !DILocation(line: 120, column: 12, scope: !1600)
!1605 = !DILocation(line: 120, column: 25, scope: !1600)
!1606 = !DILocation(line: 120, column: 28, scope: !1600)
!1607 = !DILocation(line: 120, column: 34, scope: !1600)
!1608 = !DILocation(line: 119, column: 7, scope: !1596)
!1609 = !DILocalVariable(name: "write_error", scope: !1610, file: !98, line: 122, type: !69)
!1610 = distinct !DILexicalBlock(scope: !1600, file: !98, line: 121, column: 5)
!1611 = !DILocation(line: 122, column: 19, scope: !1610)
!1612 = !DILocation(line: 122, column: 33, scope: !1610)
!1613 = !DILocation(line: 123, column: 11, scope: !1614)
!1614 = distinct !DILexicalBlock(scope: !1610, file: !98, line: 123, column: 11)
!1615 = !DILocation(line: 123, column: 11, scope: !1610)
!1616 = !DILocation(line: 124, column: 19, scope: !1614)
!1617 = !DILocation(line: 124, column: 52, scope: !1614)
!1618 = !DILocation(line: 124, column: 36, scope: !1614)
!1619 = !DILocation(line: 125, column: 16, scope: !1614)
!1620 = !DILocation(line: 124, column: 9, scope: !1614)
!1621 = !DILocation(line: 127, column: 19, scope: !1614)
!1622 = !DILocation(line: 127, column: 32, scope: !1614)
!1623 = !DILocation(line: 127, column: 9, scope: !1614)
!1624 = !DILocation(line: 129, column: 14, scope: !1610)
!1625 = !DILocation(line: 129, column: 7, scope: !1610)
!1626 = !DILocation(line: 134, column: 42, scope: !1627)
!1627 = distinct !DILexicalBlock(scope: !1596, file: !98, line: 134, column: 7)
!1628 = !DILocation(line: 134, column: 28, scope: !1627)
!1629 = !DILocation(line: 134, column: 50, scope: !1627)
!1630 = !DILocation(line: 134, column: 7, scope: !1596)
!1631 = !DILocation(line: 135, column: 12, scope: !1627)
!1632 = !DILocation(line: 135, column: 5, scope: !1627)
!1633 = !DILocation(line: 136, column: 1, scope: !1596)
!1634 = distinct !DISubprogram(name: "umaxtostr", scope: !1635, file: !1635, line: 36, type: !1636, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !202, retainedNodes: !4)
!1635 = !DIFile(filename: "./lib/anytostr.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!1636 = !DISubroutineType(types: !1637)
!1637 = !{!6, !205, !6}
!1638 = !DILocalVariable(name: "i", arg: 1, scope: !1634, file: !1635, line: 36, type: !205)
!1639 = !DILocation(line: 36, column: 19, scope: !1634)
!1640 = !DILocalVariable(name: "buf", arg: 2, scope: !1634, file: !1635, line: 36, type: !6)
!1641 = !DILocation(line: 36, column: 28, scope: !1634)
!1642 = !DILocalVariable(name: "p", scope: !1634, file: !1635, line: 38, type: !6)
!1643 = !DILocation(line: 38, column: 9, scope: !1634)
!1644 = !DILocation(line: 38, column: 13, scope: !1634)
!1645 = !DILocation(line: 38, column: 17, scope: !1634)
!1646 = !DILocation(line: 39, column: 4, scope: !1634)
!1647 = !DILocation(line: 39, column: 6, scope: !1634)
!1648 = !DILocation(line: 41, column: 7, scope: !1649)
!1649 = distinct !DILexicalBlock(scope: !1634, file: !1635, line: 41, column: 7)
!1650 = !DILocation(line: 41, column: 9, scope: !1649)
!1651 = !DILocation(line: 41, column: 7, scope: !1634)
!1652 = !DILocation(line: 43, column: 7, scope: !1653)
!1653 = distinct !DILexicalBlock(scope: !1649, file: !1635, line: 42, column: 5)
!1654 = !DILocation(line: 44, column: 22, scope: !1653)
!1655 = !DILocation(line: 44, column: 24, scope: !1653)
!1656 = !DILocation(line: 44, column: 20, scope: !1653)
!1657 = !DILocation(line: 44, column: 16, scope: !1653)
!1658 = !DILocation(line: 44, column: 10, scope: !1653)
!1659 = !DILocation(line: 44, column: 14, scope: !1653)
!1660 = !DILocation(line: 44, column: 9, scope: !1653)
!1661 = !DILocation(line: 45, column: 17, scope: !1653)
!1662 = !DILocation(line: 45, column: 24, scope: !1653)
!1663 = distinct !{!1663, !1652, !1664}
!1664 = !DILocation(line: 45, column: 28, scope: !1653)
!1665 = !DILocation(line: 47, column: 8, scope: !1653)
!1666 = !DILocation(line: 47, column: 12, scope: !1653)
!1667 = !DILocation(line: 48, column: 5, scope: !1653)
!1668 = !DILocation(line: 51, column: 7, scope: !1669)
!1669 = distinct !DILexicalBlock(scope: !1649, file: !1635, line: 50, column: 5)
!1670 = !DILocation(line: 52, column: 22, scope: !1669)
!1671 = !DILocation(line: 52, column: 24, scope: !1669)
!1672 = !DILocation(line: 52, column: 20, scope: !1669)
!1673 = !DILocation(line: 52, column: 16, scope: !1669)
!1674 = !DILocation(line: 52, column: 10, scope: !1669)
!1675 = !DILocation(line: 52, column: 14, scope: !1669)
!1676 = !DILocation(line: 52, column: 9, scope: !1669)
!1677 = !DILocation(line: 53, column: 17, scope: !1669)
!1678 = !DILocation(line: 53, column: 24, scope: !1669)
!1679 = distinct !{!1679, !1668, !1680}
!1680 = !DILocation(line: 53, column: 28, scope: !1669)
!1681 = !DILocation(line: 56, column: 10, scope: !1634)
!1682 = !DILocation(line: 56, column: 3, scope: !1634)
!1683 = distinct !DISubprogram(name: "set_program_name", scope: !112, file: !112, line: 39, type: !295, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !108, retainedNodes: !4)
!1684 = !DILocalVariable(name: "argv0", arg: 1, scope: !1683, file: !112, line: 39, type: !69)
!1685 = !DILocation(line: 39, column: 31, scope: !1683)
!1686 = !DILocalVariable(name: "slash", scope: !1683, file: !112, line: 46, type: !69)
!1687 = !DILocation(line: 46, column: 15, scope: !1683)
!1688 = !DILocalVariable(name: "base", scope: !1683, file: !112, line: 47, type: !69)
!1689 = !DILocation(line: 47, column: 15, scope: !1683)
!1690 = !DILocation(line: 51, column: 7, scope: !1691)
!1691 = distinct !DILexicalBlock(scope: !1683, file: !112, line: 51, column: 7)
!1692 = !DILocation(line: 51, column: 13, scope: !1691)
!1693 = !DILocation(line: 51, column: 7, scope: !1683)
!1694 = !DILocation(line: 55, column: 14, scope: !1695)
!1695 = distinct !DILexicalBlock(scope: !1691, file: !112, line: 52, column: 5)
!1696 = !DILocation(line: 54, column: 7, scope: !1695)
!1697 = !DILocation(line: 56, column: 7, scope: !1695)
!1698 = !DILocation(line: 59, column: 20, scope: !1683)
!1699 = !DILocation(line: 59, column: 11, scope: !1683)
!1700 = !DILocation(line: 59, column: 9, scope: !1683)
!1701 = !DILocation(line: 60, column: 11, scope: !1683)
!1702 = !DILocation(line: 60, column: 17, scope: !1683)
!1703 = !DILocation(line: 60, column: 27, scope: !1683)
!1704 = !DILocation(line: 60, column: 33, scope: !1683)
!1705 = !DILocation(line: 60, column: 39, scope: !1683)
!1706 = !DILocation(line: 60, column: 8, scope: !1683)
!1707 = !DILocation(line: 61, column: 7, scope: !1708)
!1708 = distinct !DILexicalBlock(scope: !1683, file: !112, line: 61, column: 7)
!1709 = !DILocation(line: 61, column: 14, scope: !1708)
!1710 = !DILocation(line: 61, column: 12, scope: !1708)
!1711 = !DILocation(line: 61, column: 20, scope: !1708)
!1712 = !DILocation(line: 61, column: 25, scope: !1708)
!1713 = !DILocation(line: 61, column: 37, scope: !1708)
!1714 = !DILocation(line: 61, column: 42, scope: !1708)
!1715 = !DILocation(line: 61, column: 28, scope: !1708)
!1716 = !DILocation(line: 61, column: 61, scope: !1708)
!1717 = !DILocation(line: 61, column: 7, scope: !1683)
!1718 = !DILocation(line: 63, column: 15, scope: !1719)
!1719 = distinct !DILexicalBlock(scope: !1708, file: !112, line: 62, column: 5)
!1720 = !DILocation(line: 63, column: 13, scope: !1719)
!1721 = !DILocation(line: 64, column: 20, scope: !1722)
!1722 = distinct !DILexicalBlock(scope: !1719, file: !112, line: 64, column: 11)
!1723 = !DILocation(line: 64, column: 11, scope: !1722)
!1724 = !DILocation(line: 64, column: 36, scope: !1722)
!1725 = !DILocation(line: 64, column: 11, scope: !1719)
!1726 = !DILocation(line: 66, column: 19, scope: !1727)
!1727 = distinct !DILexicalBlock(scope: !1722, file: !112, line: 65, column: 9)
!1728 = !DILocation(line: 66, column: 24, scope: !1727)
!1729 = !DILocation(line: 66, column: 17, scope: !1727)
!1730 = !DILocation(line: 70, column: 52, scope: !1727)
!1731 = !DILocation(line: 70, column: 41, scope: !1727)
!1732 = !DILocation(line: 72, column: 9, scope: !1727)
!1733 = !DILocation(line: 73, column: 5, scope: !1719)
!1734 = !DILocation(line: 84, column: 18, scope: !1683)
!1735 = !DILocation(line: 84, column: 16, scope: !1683)
!1736 = !DILocation(line: 90, column: 38, scope: !1683)
!1737 = !DILocation(line: 90, column: 27, scope: !1683)
!1738 = !DILocation(line: 92, column: 1, scope: !1683)
!1739 = distinct !DISubprogram(name: "set_char_quoting", scope: !139, file: !139, line: 152, type: !1740, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !115, retainedNodes: !4)
!1740 = !DISubroutineType(types: !1741)
!1741 = !{!72, !1742, !7, !72}
!1742 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !150, size: 64)
!1743 = !DILocalVariable(name: "o", arg: 1, scope: !1739, file: !139, line: 152, type: !1742)
!1744 = !DILocation(line: 152, column: 43, scope: !1739)
!1745 = !DILocalVariable(name: "c", arg: 2, scope: !1739, file: !139, line: 152, type: !7)
!1746 = !DILocation(line: 152, column: 51, scope: !1739)
!1747 = !DILocalVariable(name: "i", arg: 3, scope: !1739, file: !139, line: 152, type: !72)
!1748 = !DILocation(line: 152, column: 58, scope: !1739)
!1749 = !DILocalVariable(name: "uc", scope: !1739, file: !139, line: 154, type: !240)
!1750 = !DILocation(line: 154, column: 17, scope: !1739)
!1751 = !DILocation(line: 154, column: 22, scope: !1739)
!1752 = !DILocalVariable(name: "p", scope: !1739, file: !139, line: 155, type: !1753)
!1753 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64)
!1754 = !DILocation(line: 155, column: 17, scope: !1739)
!1755 = !DILocation(line: 156, column: 6, scope: !1739)
!1756 = !DILocation(line: 156, column: 10, scope: !1739)
!1757 = !DILocation(line: 156, column: 41, scope: !1739)
!1758 = !DILocation(line: 156, column: 5, scope: !1739)
!1759 = !DILocation(line: 156, column: 59, scope: !1739)
!1760 = !DILocation(line: 156, column: 62, scope: !1739)
!1761 = !DILocation(line: 156, column: 57, scope: !1739)
!1762 = !DILocalVariable(name: "shift", scope: !1739, file: !139, line: 157, type: !72)
!1763 = !DILocation(line: 157, column: 7, scope: !1739)
!1764 = !DILocation(line: 157, column: 15, scope: !1739)
!1765 = !DILocation(line: 157, column: 18, scope: !1739)
!1766 = !DILocalVariable(name: "r", scope: !1739, file: !139, line: 158, type: !72)
!1767 = !DILocation(line: 158, column: 7, scope: !1739)
!1768 = !DILocation(line: 158, column: 13, scope: !1739)
!1769 = !DILocation(line: 158, column: 12, scope: !1739)
!1770 = !DILocation(line: 158, column: 18, scope: !1739)
!1771 = !DILocation(line: 158, column: 15, scope: !1739)
!1772 = !DILocation(line: 158, column: 25, scope: !1739)
!1773 = !DILocation(line: 159, column: 11, scope: !1739)
!1774 = !DILocation(line: 159, column: 13, scope: !1739)
!1775 = !DILocation(line: 159, column: 20, scope: !1739)
!1776 = !DILocation(line: 159, column: 18, scope: !1739)
!1777 = !DILocation(line: 159, column: 26, scope: !1739)
!1778 = !DILocation(line: 159, column: 23, scope: !1739)
!1779 = !DILocation(line: 159, column: 4, scope: !1739)
!1780 = !DILocation(line: 159, column: 6, scope: !1739)
!1781 = !DILocation(line: 160, column: 10, scope: !1739)
!1782 = !DILocation(line: 160, column: 3, scope: !1739)
!1783 = !DILocalVariable(name: "o", arg: 1, scope: !1784, file: !139, line: 152, type: !1787)
!1784 = distinct !DISubprogram(name: "set_char_quoting", scope: !139, file: !139, line: 152, type: !1785, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1795, retainedNodes: !4)
!1785 = !DISubroutineType(types: !1786)
!1786 = !{!72, !1787, !7, !72}
!1787 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1788, size: 64)
!1788 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !1789)
!1789 = !{!1790, !1791, !1792, !1793, !1794}
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1788, file: !139, line: 68, baseType: !118, size: 32)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1788, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1788, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1788, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1788, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!1795 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !1796, nameTableKind: None)
!1796 = !{!1797, !1799, !1801, !1803, !1805, !1807, !1814, !1816}
!1797 = !DIGlobalVariableExpression(var: !1798, expr: !DIExpression())
!1798 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1795, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!1799 = !DIGlobalVariableExpression(var: !1800, expr: !DIExpression())
!1800 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1795, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!1801 = !DIGlobalVariableExpression(var: !1802, expr: !DIExpression())
!1802 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1795, file: !139, line: 1052, type: !1788, isLocal: false, isDefinition: true)
!1803 = !DIGlobalVariableExpression(var: !1804, expr: !DIExpression())
!1804 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1795, file: !139, line: 116, type: !1788, isLocal: true, isDefinition: true)
!1805 = !DIGlobalVariableExpression(var: !1806, expr: !DIExpression())
!1806 = distinct !DIGlobalVariable(name: "slot0", scope: !1795, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!1807 = !DIGlobalVariableExpression(var: !1808, expr: !DIExpression())
!1808 = distinct !DIGlobalVariable(name: "slotvec", scope: !1795, file: !139, line: 845, type: !1809, isLocal: true, isDefinition: true)
!1809 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1810, size: 64)
!1810 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !1811)
!1811 = !{!1812, !1813}
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1810, file: !139, line: 836, baseType: !134, size: 64)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1810, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!1814 = !DIGlobalVariableExpression(var: !1815, expr: !DIExpression())
!1815 = distinct !DIGlobalVariable(name: "nslots", scope: !1795, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!1816 = !DIGlobalVariableExpression(var: !1817, expr: !DIExpression())
!1817 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1795, file: !139, line: 844, type: !1810, isLocal: true, isDefinition: true)
!1818 = !DILocalVariable(name: "c", arg: 2, scope: !1784, file: !139, line: 152, type: !7)
!1819 = !DILocalVariable(name: "i", arg: 3, scope: !1784, file: !139, line: 152, type: !72)
!1820 = !DILocalVariable(name: "uc", scope: !1784, file: !139, line: 154, type: !240)
!1821 = !DILocalVariable(name: "p", scope: !1784, file: !139, line: 155, type: !1753)
!1822 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !139, file: !139, line: 982, type: !1823, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !115, retainedNodes: !4)
!1823 = !DISubroutineType(types: !1824)
!1824 = !{!6, !69, !134, !7}
!1825 = !DILocalVariable(name: "arg", arg: 1, scope: !1822, file: !139, line: 982, type: !69)
!1826 = !DILocation(line: 982, column: 32, scope: !1822)
!1827 = !DILocalVariable(name: "argsize", arg: 2, scope: !1822, file: !139, line: 982, type: !134)
!1828 = !DILocation(line: 982, column: 44, scope: !1822)
!1829 = !DILocalVariable(name: "ch", arg: 3, scope: !1822, file: !139, line: 982, type: !7)
!1830 = !DILocation(line: 982, column: 58, scope: !1822)
!1831 = !DILocalVariable(name: "options", scope: !1822, file: !139, line: 984, type: !150)
!1832 = !DILocation(line: 984, column: 26, scope: !1822)
!1833 = !DILocation(line: 985, column: 13, scope: !1822)
!1834 = !DILocation(line: 986, column: 31, scope: !1822)
!1835 = !DILocation(line: 986, column: 3, scope: !1822)
!1836 = !DILocation(line: 987, column: 33, scope: !1822)
!1837 = !DILocation(line: 987, column: 38, scope: !1822)
!1838 = !DILocation(line: 987, column: 10, scope: !1822)
!1839 = !DILocation(line: 987, column: 3, scope: !1822)
!1840 = !DILocalVariable(name: "arg", arg: 1, scope: !1841, file: !139, line: 982, type: !69)
!1841 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !139, file: !139, line: 982, type: !1823, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1842, retainedNodes: !4)
!1842 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !1843, nameTableKind: None)
!1843 = !{!1844, !1846, !1848, !1857, !1859, !1861, !1868, !1870}
!1844 = !DIGlobalVariableExpression(var: !1845, expr: !DIExpression())
!1845 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1842, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!1846 = !DIGlobalVariableExpression(var: !1847, expr: !DIExpression())
!1847 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1842, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!1848 = !DIGlobalVariableExpression(var: !1849, expr: !DIExpression())
!1849 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1842, file: !139, line: 1052, type: !1850, isLocal: false, isDefinition: true)
!1850 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !1851)
!1851 = !{!1852, !1853, !1854, !1855, !1856}
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1850, file: !139, line: 68, baseType: !118, size: 32)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1850, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1850, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1850, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1850, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!1857 = !DIGlobalVariableExpression(var: !1858, expr: !DIExpression())
!1858 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1842, file: !139, line: 116, type: !1850, isLocal: true, isDefinition: true)
!1859 = !DIGlobalVariableExpression(var: !1860, expr: !DIExpression())
!1860 = distinct !DIGlobalVariable(name: "slot0", scope: !1842, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!1861 = !DIGlobalVariableExpression(var: !1862, expr: !DIExpression())
!1862 = distinct !DIGlobalVariable(name: "slotvec", scope: !1842, file: !139, line: 845, type: !1863, isLocal: true, isDefinition: true)
!1863 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1864, size: 64)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !1865)
!1865 = !{!1866, !1867}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1864, file: !139, line: 836, baseType: !134, size: 64)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1864, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!1868 = !DIGlobalVariableExpression(var: !1869, expr: !DIExpression())
!1869 = distinct !DIGlobalVariable(name: "nslots", scope: !1842, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!1870 = !DIGlobalVariableExpression(var: !1871, expr: !DIExpression())
!1871 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1842, file: !139, line: 844, type: !1864, isLocal: true, isDefinition: true)
!1872 = !DILocalVariable(name: "argsize", arg: 2, scope: !1841, file: !139, line: 982, type: !134)
!1873 = !DILocalVariable(name: "ch", arg: 3, scope: !1841, file: !139, line: 982, type: !7)
!1874 = !DILocalVariable(name: "options", scope: !1841, file: !139, line: 984, type: !1850)
!1875 = distinct !DISubprogram(name: "quotearg_n_options", scope: !139, file: !139, line: 877, type: !1876, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !115, retainedNodes: !4)
!1876 = !DISubroutineType(types: !1877)
!1877 = !{!6, !72, !69, !134, !1878}
!1878 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1879, size: 64)
!1879 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !150)
!1880 = !DILocalVariable(name: "n", arg: 1, scope: !1875, file: !139, line: 877, type: !72)
!1881 = !DILocation(line: 877, column: 25, scope: !1875)
!1882 = !DILocalVariable(name: "arg", arg: 2, scope: !1875, file: !139, line: 877, type: !69)
!1883 = !DILocation(line: 877, column: 40, scope: !1875)
!1884 = !DILocalVariable(name: "argsize", arg: 3, scope: !1875, file: !139, line: 877, type: !134)
!1885 = !DILocation(line: 877, column: 52, scope: !1875)
!1886 = !DILocalVariable(name: "options", arg: 4, scope: !1875, file: !139, line: 878, type: !1878)
!1887 = !DILocation(line: 878, column: 51, scope: !1875)
!1888 = !DILocalVariable(name: "e", scope: !1875, file: !139, line: 880, type: !72)
!1889 = !DILocation(line: 880, column: 7, scope: !1875)
!1890 = !DILocation(line: 880, column: 11, scope: !1875)
!1891 = !DILocalVariable(name: "sv", scope: !1875, file: !139, line: 882, type: !167)
!1892 = !DILocation(line: 882, column: 19, scope: !1875)
!1893 = !DILocation(line: 882, column: 24, scope: !1875)
!1894 = !DILocation(line: 884, column: 7, scope: !1895)
!1895 = distinct !DILexicalBlock(scope: !1875, file: !139, line: 884, column: 7)
!1896 = !DILocation(line: 884, column: 9, scope: !1895)
!1897 = !DILocation(line: 884, column: 7, scope: !1875)
!1898 = !DILocation(line: 885, column: 5, scope: !1895)
!1899 = !DILocation(line: 887, column: 7, scope: !1900)
!1900 = distinct !DILexicalBlock(scope: !1875, file: !139, line: 887, column: 7)
!1901 = !DILocation(line: 887, column: 17, scope: !1900)
!1902 = !DILocation(line: 887, column: 14, scope: !1900)
!1903 = !DILocation(line: 887, column: 7, scope: !1875)
!1904 = !DILocalVariable(name: "preallocated", scope: !1905, file: !139, line: 889, type: !27)
!1905 = distinct !DILexicalBlock(scope: !1900, file: !139, line: 888, column: 5)
!1906 = !DILocation(line: 889, column: 12, scope: !1905)
!1907 = !DILocation(line: 889, column: 28, scope: !1905)
!1908 = !DILocation(line: 889, column: 31, scope: !1905)
!1909 = !DILocalVariable(name: "nmax", scope: !1905, file: !139, line: 890, type: !72)
!1910 = !DILocation(line: 890, column: 11, scope: !1905)
!1911 = !DILocation(line: 892, column: 11, scope: !1912)
!1912 = distinct !DILexicalBlock(scope: !1905, file: !139, line: 892, column: 11)
!1913 = !DILocation(line: 892, column: 18, scope: !1912)
!1914 = !DILocation(line: 892, column: 16, scope: !1912)
!1915 = !DILocation(line: 892, column: 11, scope: !1905)
!1916 = !DILocation(line: 893, column: 9, scope: !1912)
!1917 = !DILocation(line: 895, column: 32, scope: !1905)
!1918 = !DILocation(line: 895, column: 54, scope: !1905)
!1919 = !DILocation(line: 895, column: 59, scope: !1905)
!1920 = !DILocation(line: 895, column: 61, scope: !1905)
!1921 = !DILocation(line: 895, column: 58, scope: !1905)
!1922 = !DILocation(line: 895, column: 66, scope: !1905)
!1923 = !DILocation(line: 895, column: 22, scope: !1905)
!1924 = !DILocation(line: 895, column: 20, scope: !1905)
!1925 = !DILocation(line: 895, column: 15, scope: !1905)
!1926 = !DILocation(line: 896, column: 11, scope: !1927)
!1927 = distinct !DILexicalBlock(scope: !1905, file: !139, line: 896, column: 11)
!1928 = !DILocation(line: 896, column: 11, scope: !1905)
!1929 = !DILocation(line: 897, column: 10, scope: !1927)
!1930 = !DILocation(line: 897, column: 15, scope: !1927)
!1931 = !DILocation(line: 897, column: 9, scope: !1927)
!1932 = !DILocation(line: 898, column: 15, scope: !1905)
!1933 = !DILocation(line: 898, column: 20, scope: !1905)
!1934 = !DILocation(line: 898, column: 18, scope: !1905)
!1935 = !DILocation(line: 898, column: 7, scope: !1905)
!1936 = !DILocation(line: 898, column: 32, scope: !1905)
!1937 = !DILocation(line: 898, column: 34, scope: !1905)
!1938 = !DILocation(line: 898, column: 40, scope: !1905)
!1939 = !DILocation(line: 898, column: 38, scope: !1905)
!1940 = !DILocation(line: 898, column: 31, scope: !1905)
!1941 = !DILocation(line: 898, column: 48, scope: !1905)
!1942 = !DILocation(line: 899, column: 16, scope: !1905)
!1943 = !DILocation(line: 899, column: 18, scope: !1905)
!1944 = !DILocation(line: 899, column: 14, scope: !1905)
!1945 = !DILocation(line: 900, column: 5, scope: !1905)
!1946 = !DILocalVariable(name: "size", scope: !1947, file: !139, line: 903, type: !134)
!1947 = distinct !DILexicalBlock(scope: !1875, file: !139, line: 902, column: 3)
!1948 = !DILocation(line: 903, column: 12, scope: !1947)
!1949 = !DILocation(line: 903, column: 19, scope: !1947)
!1950 = !DILocation(line: 903, column: 22, scope: !1947)
!1951 = !DILocation(line: 903, column: 25, scope: !1947)
!1952 = !DILocalVariable(name: "val", scope: !1947, file: !139, line: 904, type: !6)
!1953 = !DILocation(line: 904, column: 11, scope: !1947)
!1954 = !DILocation(line: 904, column: 17, scope: !1947)
!1955 = !DILocation(line: 904, column: 20, scope: !1947)
!1956 = !DILocation(line: 904, column: 23, scope: !1947)
!1957 = !DILocalVariable(name: "flags", scope: !1947, file: !139, line: 906, type: !72)
!1958 = !DILocation(line: 906, column: 9, scope: !1947)
!1959 = !DILocation(line: 906, column: 17, scope: !1947)
!1960 = !DILocation(line: 906, column: 26, scope: !1947)
!1961 = !DILocation(line: 906, column: 32, scope: !1947)
!1962 = !DILocalVariable(name: "qsize", scope: !1947, file: !139, line: 907, type: !134)
!1963 = !DILocation(line: 907, column: 12, scope: !1947)
!1964 = !DILocation(line: 907, column: 46, scope: !1947)
!1965 = !DILocation(line: 907, column: 51, scope: !1947)
!1966 = !DILocation(line: 907, column: 57, scope: !1947)
!1967 = !DILocation(line: 907, column: 62, scope: !1947)
!1968 = !DILocation(line: 908, column: 46, scope: !1947)
!1969 = !DILocation(line: 908, column: 55, scope: !1947)
!1970 = !DILocation(line: 908, column: 62, scope: !1947)
!1971 = !DILocation(line: 909, column: 46, scope: !1947)
!1972 = !DILocation(line: 909, column: 55, scope: !1947)
!1973 = !DILocation(line: 910, column: 46, scope: !1947)
!1974 = !DILocation(line: 910, column: 55, scope: !1947)
!1975 = !DILocation(line: 911, column: 46, scope: !1947)
!1976 = !DILocation(line: 911, column: 55, scope: !1947)
!1977 = !DILocation(line: 907, column: 20, scope: !1947)
!1978 = !DILocation(line: 913, column: 9, scope: !1979)
!1979 = distinct !DILexicalBlock(scope: !1947, file: !139, line: 913, column: 9)
!1980 = !DILocation(line: 913, column: 17, scope: !1979)
!1981 = !DILocation(line: 913, column: 14, scope: !1979)
!1982 = !DILocation(line: 913, column: 9, scope: !1947)
!1983 = !DILocation(line: 915, column: 29, scope: !1984)
!1984 = distinct !DILexicalBlock(scope: !1979, file: !139, line: 914, column: 7)
!1985 = !DILocation(line: 915, column: 35, scope: !1984)
!1986 = !DILocation(line: 915, column: 27, scope: !1984)
!1987 = !DILocation(line: 915, column: 9, scope: !1984)
!1988 = !DILocation(line: 915, column: 12, scope: !1984)
!1989 = !DILocation(line: 915, column: 15, scope: !1984)
!1990 = !DILocation(line: 915, column: 20, scope: !1984)
!1991 = !DILocation(line: 916, column: 13, scope: !1992)
!1992 = distinct !DILexicalBlock(scope: !1984, file: !139, line: 916, column: 13)
!1993 = !DILocation(line: 916, column: 17, scope: !1992)
!1994 = !DILocation(line: 916, column: 13, scope: !1984)
!1995 = !DILocation(line: 917, column: 17, scope: !1992)
!1996 = !DILocation(line: 917, column: 11, scope: !1992)
!1997 = !DILocation(line: 918, column: 39, scope: !1984)
!1998 = !DILocation(line: 918, column: 27, scope: !1984)
!1999 = !DILocation(line: 918, column: 25, scope: !1984)
!2000 = !DILocation(line: 918, column: 9, scope: !1984)
!2001 = !DILocation(line: 918, column: 12, scope: !1984)
!2002 = !DILocation(line: 918, column: 15, scope: !1984)
!2003 = !DILocation(line: 918, column: 19, scope: !1984)
!2004 = !DILocation(line: 919, column: 35, scope: !1984)
!2005 = !DILocation(line: 919, column: 40, scope: !1984)
!2006 = !DILocation(line: 919, column: 46, scope: !1984)
!2007 = !DILocation(line: 919, column: 51, scope: !1984)
!2008 = !DILocation(line: 919, column: 60, scope: !1984)
!2009 = !DILocation(line: 919, column: 69, scope: !1984)
!2010 = !DILocation(line: 920, column: 35, scope: !1984)
!2011 = !DILocation(line: 920, column: 42, scope: !1984)
!2012 = !DILocation(line: 920, column: 51, scope: !1984)
!2013 = !DILocation(line: 921, column: 35, scope: !1984)
!2014 = !DILocation(line: 921, column: 44, scope: !1984)
!2015 = !DILocation(line: 922, column: 35, scope: !1984)
!2016 = !DILocation(line: 922, column: 44, scope: !1984)
!2017 = !DILocation(line: 919, column: 9, scope: !1984)
!2018 = !DILocation(line: 923, column: 7, scope: !1984)
!2019 = !DILocation(line: 925, column: 13, scope: !1947)
!2020 = !DILocation(line: 925, column: 5, scope: !1947)
!2021 = !DILocation(line: 925, column: 11, scope: !1947)
!2022 = !DILocation(line: 926, column: 12, scope: !1947)
!2023 = !DILocation(line: 926, column: 5, scope: !1947)
!2024 = !DILocalVariable(name: "nmax", scope: !2025, file: !139, line: 890, type: !72)
!2025 = distinct !DILexicalBlock(scope: !2026, file: !139, line: 888, column: 5)
!2026 = distinct !DILexicalBlock(scope: !2027, file: !139, line: 887, column: 7)
!2027 = distinct !DISubprogram(name: "quotearg_n_options", scope: !139, file: !139, line: 877, type: !2028, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2039, retainedNodes: !4)
!2028 = !DISubroutineType(types: !2029)
!2029 = !{!6, !72, !69, !134, !2030}
!2030 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2031, size: 64)
!2031 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2032)
!2032 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !2033)
!2033 = !{!2034, !2035, !2036, !2037, !2038}
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2032, file: !139, line: 68, baseType: !118, size: 32)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2032, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2032, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2032, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2032, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!2039 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !2040, nameTableKind: None)
!2040 = !{!2041, !2043, !2045, !2047, !2049, !2051, !2058, !2060}
!2041 = !DIGlobalVariableExpression(var: !2042, expr: !DIExpression())
!2042 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2039, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!2043 = !DIGlobalVariableExpression(var: !2044, expr: !DIExpression())
!2044 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2039, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!2045 = !DIGlobalVariableExpression(var: !2046, expr: !DIExpression())
!2046 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2039, file: !139, line: 1052, type: !2032, isLocal: false, isDefinition: true)
!2047 = !DIGlobalVariableExpression(var: !2048, expr: !DIExpression())
!2048 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2039, file: !139, line: 116, type: !2032, isLocal: true, isDefinition: true)
!2049 = !DIGlobalVariableExpression(var: !2050, expr: !DIExpression())
!2050 = distinct !DIGlobalVariable(name: "slot0", scope: !2039, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!2051 = !DIGlobalVariableExpression(var: !2052, expr: !DIExpression())
!2052 = distinct !DIGlobalVariable(name: "slotvec", scope: !2039, file: !139, line: 845, type: !2053, isLocal: true, isDefinition: true)
!2053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2054, size: 64)
!2054 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !2055)
!2055 = !{!2056, !2057}
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2054, file: !139, line: 836, baseType: !134, size: 64)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2054, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!2058 = !DIGlobalVariableExpression(var: !2059, expr: !DIExpression())
!2059 = distinct !DIGlobalVariable(name: "nslots", scope: !2039, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!2060 = !DIGlobalVariableExpression(var: !2061, expr: !DIExpression())
!2061 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2039, file: !139, line: 844, type: !2054, isLocal: true, isDefinition: true)
!2062 = !DILocalVariable(name: "val", scope: !2063, file: !139, line: 904, type: !6)
!2063 = distinct !DILexicalBlock(scope: !2064, file: !139, line: 902, column: 3)
!2064 = distinct !DISubprogram(name: "quotearg_n_options", scope: !139, file: !139, line: 877, type: !2065, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2076, retainedNodes: !4)
!2065 = !DISubroutineType(types: !2066)
!2066 = !{!6, !72, !69, !134, !2067}
!2067 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2068, size: 64)
!2068 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2069)
!2069 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !2070)
!2070 = !{!2071, !2072, !2073, !2074, !2075}
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2069, file: !139, line: 68, baseType: !118, size: 32)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2069, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2069, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2069, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2069, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!2076 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !2077, nameTableKind: None)
!2077 = !{!2078, !2080, !2082, !2084, !2086, !2088, !2095, !2097}
!2078 = !DIGlobalVariableExpression(var: !2079, expr: !DIExpression())
!2079 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2076, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!2080 = !DIGlobalVariableExpression(var: !2081, expr: !DIExpression())
!2081 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2076, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!2082 = !DIGlobalVariableExpression(var: !2083, expr: !DIExpression())
!2083 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2076, file: !139, line: 1052, type: !2069, isLocal: false, isDefinition: true)
!2084 = !DIGlobalVariableExpression(var: !2085, expr: !DIExpression())
!2085 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2076, file: !139, line: 116, type: !2069, isLocal: true, isDefinition: true)
!2086 = !DIGlobalVariableExpression(var: !2087, expr: !DIExpression())
!2087 = distinct !DIGlobalVariable(name: "slot0", scope: !2076, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!2088 = !DIGlobalVariableExpression(var: !2089, expr: !DIExpression())
!2089 = distinct !DIGlobalVariable(name: "slotvec", scope: !2076, file: !139, line: 845, type: !2090, isLocal: true, isDefinition: true)
!2090 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2091, size: 64)
!2091 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !2092)
!2092 = !{!2093, !2094}
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2091, file: !139, line: 836, baseType: !134, size: 64)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2091, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!2095 = !DIGlobalVariableExpression(var: !2096, expr: !DIExpression())
!2096 = distinct !DIGlobalVariable(name: "nslots", scope: !2076, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!2097 = !DIGlobalVariableExpression(var: !2098, expr: !DIExpression())
!2098 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2076, file: !139, line: 844, type: !2091, isLocal: true, isDefinition: true)
!2099 = !DILocalVariable(name: "flags", scope: !2063, file: !139, line: 906, type: !72)
!2100 = !DILocalVariable(name: "qsize", scope: !2063, file: !139, line: 907, type: !134)
!2101 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !139, file: !139, line: 256, type: !2102, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !115, retainedNodes: !4)
!2102 = !DISubroutineType(types: !2103)
!2103 = !{!134, !6, !134, !69, !134, !118, !72, !2104, !69, !69}
!2104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2105, size: 64)
!2105 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !16)
!2106 = !DILocalVariable(name: "buffer", arg: 1, scope: !2101, file: !139, line: 256, type: !6)
!2107 = !DILocation(line: 256, column: 33, scope: !2101)
!2108 = !DILocalVariable(name: "buffersize", arg: 2, scope: !2101, file: !139, line: 256, type: !134)
!2109 = !DILocation(line: 256, column: 48, scope: !2101)
!2110 = !DILocalVariable(name: "arg", arg: 3, scope: !2101, file: !139, line: 257, type: !69)
!2111 = !DILocation(line: 257, column: 39, scope: !2101)
!2112 = !DILocalVariable(name: "argsize", arg: 4, scope: !2101, file: !139, line: 257, type: !134)
!2113 = !DILocation(line: 257, column: 51, scope: !2101)
!2114 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !2101, file: !139, line: 258, type: !118)
!2115 = !DILocation(line: 258, column: 46, scope: !2101)
!2116 = !DILocalVariable(name: "flags", arg: 6, scope: !2101, file: !139, line: 258, type: !72)
!2117 = !DILocation(line: 258, column: 65, scope: !2101)
!2118 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !2101, file: !139, line: 259, type: !2104)
!2119 = !DILocation(line: 259, column: 47, scope: !2101)
!2120 = !DILocalVariable(name: "left_quote", arg: 8, scope: !2101, file: !139, line: 260, type: !69)
!2121 = !DILocation(line: 260, column: 39, scope: !2101)
!2122 = !DILocalVariable(name: "right_quote", arg: 9, scope: !2101, file: !139, line: 261, type: !69)
!2123 = !DILocation(line: 261, column: 39, scope: !2101)
!2124 = !DILocalVariable(name: "i", scope: !2101, file: !139, line: 263, type: !134)
!2125 = !DILocation(line: 263, column: 10, scope: !2101)
!2126 = !DILocalVariable(name: "len", scope: !2101, file: !139, line: 264, type: !134)
!2127 = !DILocation(line: 264, column: 10, scope: !2101)
!2128 = !DILocalVariable(name: "orig_buffersize", scope: !2101, file: !139, line: 265, type: !134)
!2129 = !DILocation(line: 265, column: 10, scope: !2101)
!2130 = !DILocalVariable(name: "quote_string", scope: !2101, file: !139, line: 266, type: !69)
!2131 = !DILocation(line: 266, column: 15, scope: !2101)
!2132 = !DILocalVariable(name: "quote_string_len", scope: !2101, file: !139, line: 267, type: !134)
!2133 = !DILocation(line: 267, column: 10, scope: !2101)
!2134 = !DILocalVariable(name: "backslash_escapes", scope: !2101, file: !139, line: 268, type: !27)
!2135 = !DILocation(line: 268, column: 8, scope: !2101)
!2136 = !DILocalVariable(name: "unibyte_locale", scope: !2101, file: !139, line: 269, type: !27)
!2137 = !DILocation(line: 269, column: 8, scope: !2101)
!2138 = !DILocation(line: 269, column: 25, scope: !2101)
!2139 = !DILocation(line: 269, column: 36, scope: !2101)
!2140 = !DILocalVariable(name: "elide_outer_quotes", scope: !2101, file: !139, line: 270, type: !27)
!2141 = !DILocation(line: 270, column: 8, scope: !2101)
!2142 = !DILocation(line: 270, column: 30, scope: !2101)
!2143 = !DILocation(line: 270, column: 36, scope: !2101)
!2144 = !DILocation(line: 270, column: 61, scope: !2101)
!2145 = !DILocalVariable(name: "pending_shell_escape_end", scope: !2101, file: !139, line: 271, type: !27)
!2146 = !DILocation(line: 271, column: 8, scope: !2101)
!2147 = !DILocalVariable(name: "encountered_single_quote", scope: !2101, file: !139, line: 272, type: !27)
!2148 = !DILocation(line: 272, column: 8, scope: !2101)
!2149 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !2101, file: !139, line: 273, type: !27)
!2150 = !DILocation(line: 273, column: 8, scope: !2101)
!2151 = !DILocation(line: 273, column: 3, scope: !2101)
!2152 = !DILabel(scope: !2101, name: "process_input", file: !139, line: 314)
!2153 = !DILocation(line: 314, column: 2, scope: !2101)
!2154 = !DILocation(line: 316, column: 11, scope: !2101)
!2155 = !DILocation(line: 316, column: 3, scope: !2101)
!2156 = !DILocation(line: 319, column: 21, scope: !2157)
!2157 = distinct !DILexicalBlock(scope: !2101, file: !139, line: 317, column: 5)
!2158 = !DILocation(line: 320, column: 26, scope: !2157)
!2159 = !DILocation(line: 321, column: 7, scope: !2157)
!2160 = !DILocation(line: 323, column: 12, scope: !2161)
!2161 = distinct !DILexicalBlock(scope: !2157, file: !139, line: 323, column: 11)
!2162 = !DILocation(line: 323, column: 11, scope: !2157)
!2163 = !DILocation(line: 324, column: 9, scope: !2161)
!2164 = !DILocation(line: 324, column: 9, scope: !2165)
!2165 = distinct !DILexicalBlock(scope: !2166, file: !139, line: 324, column: 9)
!2166 = distinct !DILexicalBlock(scope: !2161, file: !139, line: 324, column: 9)
!2167 = !DILocation(line: 324, column: 9, scope: !2166)
!2168 = !DILocation(line: 325, column: 25, scope: !2157)
!2169 = !DILocation(line: 326, column: 20, scope: !2157)
!2170 = !DILocation(line: 327, column: 24, scope: !2157)
!2171 = !DILocation(line: 328, column: 7, scope: !2157)
!2172 = !DILocation(line: 331, column: 25, scope: !2157)
!2173 = !DILocation(line: 332, column: 26, scope: !2157)
!2174 = !DILocation(line: 333, column: 7, scope: !2157)
!2175 = !DILocation(line: 339, column: 13, scope: !2176)
!2176 = distinct !DILexicalBlock(scope: !2177, file: !139, line: 339, column: 13)
!2177 = distinct !DILexicalBlock(scope: !2157, file: !139, line: 338, column: 7)
!2178 = !DILocation(line: 339, column: 27, scope: !2176)
!2179 = !DILocation(line: 339, column: 13, scope: !2177)
!2180 = !DILocation(line: 362, column: 50, scope: !2181)
!2181 = distinct !DILexicalBlock(scope: !2176, file: !139, line: 340, column: 11)
!2182 = !DILocation(line: 362, column: 26, scope: !2181)
!2183 = !DILocation(line: 362, column: 24, scope: !2181)
!2184 = !DILocation(line: 363, column: 51, scope: !2181)
!2185 = !DILocation(line: 363, column: 27, scope: !2181)
!2186 = !DILocation(line: 363, column: 25, scope: !2181)
!2187 = !DILocation(line: 364, column: 11, scope: !2181)
!2188 = !DILocation(line: 365, column: 14, scope: !2189)
!2189 = distinct !DILexicalBlock(scope: !2177, file: !139, line: 365, column: 13)
!2190 = !DILocation(line: 365, column: 13, scope: !2177)
!2191 = !DILocation(line: 366, column: 31, scope: !2192)
!2192 = distinct !DILexicalBlock(scope: !2189, file: !139, line: 366, column: 11)
!2193 = !DILocation(line: 366, column: 29, scope: !2192)
!2194 = !DILocation(line: 366, column: 16, scope: !2192)
!2195 = !DILocation(line: 366, column: 44, scope: !2196)
!2196 = distinct !DILexicalBlock(scope: !2192, file: !139, line: 366, column: 11)
!2197 = !DILocation(line: 366, column: 43, scope: !2196)
!2198 = !DILocation(line: 366, column: 11, scope: !2192)
!2199 = !DILocation(line: 367, column: 13, scope: !2196)
!2200 = !DILocation(line: 367, column: 13, scope: !2201)
!2201 = distinct !DILexicalBlock(scope: !2202, file: !139, line: 367, column: 13)
!2202 = distinct !DILexicalBlock(scope: !2196, file: !139, line: 367, column: 13)
!2203 = !DILocation(line: 367, column: 13, scope: !2202)
!2204 = !DILocation(line: 366, column: 70, scope: !2196)
!2205 = !DILocation(line: 366, column: 11, scope: !2196)
!2206 = distinct !{!2206, !2198, !2207}
!2207 = !DILocation(line: 367, column: 13, scope: !2192)
!2208 = !DILocation(line: 368, column: 27, scope: !2177)
!2209 = !DILocation(line: 369, column: 24, scope: !2177)
!2210 = !DILocation(line: 369, column: 22, scope: !2177)
!2211 = !DILocation(line: 370, column: 36, scope: !2177)
!2212 = !DILocation(line: 370, column: 28, scope: !2177)
!2213 = !DILocation(line: 370, column: 26, scope: !2177)
!2214 = !DILocation(line: 372, column: 7, scope: !2157)
!2215 = !DILocation(line: 375, column: 25, scope: !2157)
!2216 = !DILocation(line: 376, column: 7, scope: !2157)
!2217 = !DILocation(line: 378, column: 26, scope: !2157)
!2218 = !DILocation(line: 379, column: 7, scope: !2157)
!2219 = !DILocation(line: 381, column: 12, scope: !2220)
!2220 = distinct !DILexicalBlock(scope: !2157, file: !139, line: 381, column: 11)
!2221 = !DILocation(line: 381, column: 11, scope: !2157)
!2222 = !DILocation(line: 382, column: 27, scope: !2220)
!2223 = !DILocation(line: 382, column: 9, scope: !2220)
!2224 = !DILocation(line: 383, column: 7, scope: !2157)
!2225 = !DILocation(line: 385, column: 21, scope: !2157)
!2226 = !DILocation(line: 386, column: 12, scope: !2227)
!2227 = distinct !DILexicalBlock(scope: !2157, file: !139, line: 386, column: 11)
!2228 = !DILocation(line: 386, column: 11, scope: !2157)
!2229 = !DILocation(line: 387, column: 9, scope: !2227)
!2230 = !DILocation(line: 387, column: 9, scope: !2231)
!2231 = distinct !DILexicalBlock(scope: !2232, file: !139, line: 387, column: 9)
!2232 = distinct !DILexicalBlock(scope: !2227, file: !139, line: 387, column: 9)
!2233 = !DILocation(line: 387, column: 9, scope: !2232)
!2234 = !DILocation(line: 388, column: 20, scope: !2157)
!2235 = !DILocation(line: 389, column: 24, scope: !2157)
!2236 = !DILocation(line: 390, column: 7, scope: !2157)
!2237 = !DILocation(line: 393, column: 26, scope: !2157)
!2238 = !DILocation(line: 394, column: 7, scope: !2157)
!2239 = !DILocation(line: 397, column: 7, scope: !2157)
!2240 = !DILocation(line: 400, column: 10, scope: !2241)
!2241 = distinct !DILexicalBlock(scope: !2101, file: !139, line: 400, column: 3)
!2242 = !DILocation(line: 400, column: 8, scope: !2241)
!2243 = !DILocation(line: 400, column: 19, scope: !2244)
!2244 = distinct !DILexicalBlock(scope: !2241, file: !139, line: 400, column: 3)
!2245 = !DILocation(line: 400, column: 27, scope: !2244)
!2246 = !DILocation(line: 400, column: 41, scope: !2244)
!2247 = !DILocation(line: 400, column: 45, scope: !2244)
!2248 = !DILocation(line: 400, column: 48, scope: !2244)
!2249 = !DILocation(line: 400, column: 58, scope: !2244)
!2250 = !DILocation(line: 400, column: 63, scope: !2244)
!2251 = !DILocation(line: 400, column: 60, scope: !2244)
!2252 = !DILocation(line: 400, column: 16, scope: !2244)
!2253 = !DILocation(line: 400, column: 3, scope: !2241)
!2254 = !DILocalVariable(name: "c", scope: !2255, file: !139, line: 402, type: !240)
!2255 = distinct !DILexicalBlock(scope: !2244, file: !139, line: 401, column: 5)
!2256 = !DILocation(line: 402, column: 21, scope: !2255)
!2257 = !DILocalVariable(name: "esc", scope: !2255, file: !139, line: 403, type: !240)
!2258 = !DILocation(line: 403, column: 21, scope: !2255)
!2259 = !DILocalVariable(name: "is_right_quote", scope: !2255, file: !139, line: 404, type: !27)
!2260 = !DILocation(line: 404, column: 12, scope: !2255)
!2261 = !DILocalVariable(name: "escaping", scope: !2255, file: !139, line: 405, type: !27)
!2262 = !DILocation(line: 405, column: 12, scope: !2255)
!2263 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !2255, file: !139, line: 406, type: !27)
!2264 = !DILocation(line: 406, column: 12, scope: !2255)
!2265 = !DILocation(line: 408, column: 11, scope: !2266)
!2266 = distinct !DILexicalBlock(scope: !2255, file: !139, line: 408, column: 11)
!2267 = !DILocation(line: 409, column: 11, scope: !2266)
!2268 = !DILocation(line: 409, column: 14, scope: !2266)
!2269 = !DILocation(line: 409, column: 28, scope: !2266)
!2270 = !DILocation(line: 410, column: 11, scope: !2266)
!2271 = !DILocation(line: 410, column: 14, scope: !2266)
!2272 = !DILocation(line: 411, column: 11, scope: !2266)
!2273 = !DILocation(line: 411, column: 15, scope: !2266)
!2274 = !DILocation(line: 411, column: 19, scope: !2266)
!2275 = !DILocation(line: 411, column: 17, scope: !2266)
!2276 = !DILocation(line: 412, column: 19, scope: !2266)
!2277 = !DILocation(line: 412, column: 27, scope: !2266)
!2278 = !DILocation(line: 412, column: 39, scope: !2266)
!2279 = !DILocation(line: 412, column: 46, scope: !2266)
!2280 = !DILocation(line: 412, column: 44, scope: !2266)
!2281 = !DILocation(line: 416, column: 40, scope: !2266)
!2282 = !DILocation(line: 416, column: 32, scope: !2266)
!2283 = !DILocation(line: 416, column: 30, scope: !2266)
!2284 = !DILocation(line: 416, column: 48, scope: !2266)
!2285 = !DILocation(line: 412, column: 15, scope: !2266)
!2286 = !DILocation(line: 417, column: 11, scope: !2266)
!2287 = !DILocation(line: 417, column: 22, scope: !2266)
!2288 = !DILocation(line: 417, column: 28, scope: !2266)
!2289 = !DILocation(line: 417, column: 26, scope: !2266)
!2290 = !DILocation(line: 417, column: 31, scope: !2266)
!2291 = !DILocation(line: 417, column: 45, scope: !2266)
!2292 = !DILocation(line: 417, column: 14, scope: !2266)
!2293 = !DILocation(line: 417, column: 63, scope: !2266)
!2294 = !DILocation(line: 408, column: 11, scope: !2255)
!2295 = !DILocation(line: 419, column: 15, scope: !2296)
!2296 = distinct !DILexicalBlock(scope: !2297, file: !139, line: 419, column: 15)
!2297 = distinct !DILexicalBlock(scope: !2266, file: !139, line: 418, column: 9)
!2298 = !DILocation(line: 419, column: 15, scope: !2297)
!2299 = !DILocation(line: 420, column: 13, scope: !2296)
!2300 = !DILocation(line: 421, column: 26, scope: !2297)
!2301 = !DILocation(line: 422, column: 9, scope: !2297)
!2302 = !DILocation(line: 424, column: 11, scope: !2255)
!2303 = !DILocation(line: 424, column: 15, scope: !2255)
!2304 = !DILocation(line: 424, column: 9, scope: !2255)
!2305 = !DILocation(line: 425, column: 15, scope: !2255)
!2306 = !DILocation(line: 425, column: 7, scope: !2255)
!2307 = !DILocation(line: 428, column: 15, scope: !2308)
!2308 = distinct !DILexicalBlock(scope: !2309, file: !139, line: 428, column: 15)
!2309 = distinct !DILexicalBlock(scope: !2255, file: !139, line: 426, column: 9)
!2310 = !DILocation(line: 428, column: 15, scope: !2309)
!2311 = !DILocation(line: 430, column: 15, scope: !2312)
!2312 = distinct !DILexicalBlock(scope: !2308, file: !139, line: 429, column: 13)
!2313 = !DILocation(line: 430, column: 15, scope: !2314)
!2314 = distinct !DILexicalBlock(scope: !2315, file: !139, line: 430, column: 15)
!2315 = distinct !DILexicalBlock(scope: !2312, file: !139, line: 430, column: 15)
!2316 = !DILocation(line: 430, column: 15, scope: !2315)
!2317 = !DILocation(line: 430, column: 15, scope: !2318)
!2318 = distinct !DILexicalBlock(scope: !2315, file: !139, line: 430, column: 15)
!2319 = !DILocation(line: 430, column: 15, scope: !2320)
!2320 = distinct !DILexicalBlock(scope: !2318, file: !139, line: 430, column: 15)
!2321 = !DILocation(line: 430, column: 15, scope: !2322)
!2322 = distinct !DILexicalBlock(scope: !2323, file: !139, line: 430, column: 15)
!2323 = distinct !DILexicalBlock(scope: !2320, file: !139, line: 430, column: 15)
!2324 = !DILocation(line: 430, column: 15, scope: !2323)
!2325 = !DILocation(line: 430, column: 15, scope: !2326)
!2326 = distinct !DILexicalBlock(scope: !2327, file: !139, line: 430, column: 15)
!2327 = distinct !DILexicalBlock(scope: !2320, file: !139, line: 430, column: 15)
!2328 = !DILocation(line: 430, column: 15, scope: !2327)
!2329 = !DILocation(line: 430, column: 15, scope: !2330)
!2330 = distinct !DILexicalBlock(scope: !2331, file: !139, line: 430, column: 15)
!2331 = distinct !DILexicalBlock(scope: !2320, file: !139, line: 430, column: 15)
!2332 = !DILocation(line: 430, column: 15, scope: !2331)
!2333 = !DILocation(line: 430, column: 15, scope: !2334)
!2334 = distinct !DILexicalBlock(scope: !2335, file: !139, line: 430, column: 15)
!2335 = distinct !DILexicalBlock(scope: !2315, file: !139, line: 430, column: 15)
!2336 = !DILocation(line: 430, column: 15, scope: !2335)
!2337 = !DILocation(line: 437, column: 19, scope: !2338)
!2338 = distinct !DILexicalBlock(scope: !2312, file: !139, line: 437, column: 19)
!2339 = !DILocation(line: 437, column: 33, scope: !2338)
!2340 = !DILocation(line: 438, column: 19, scope: !2338)
!2341 = !DILocation(line: 438, column: 22, scope: !2338)
!2342 = !DILocation(line: 438, column: 24, scope: !2338)
!2343 = !DILocation(line: 438, column: 30, scope: !2338)
!2344 = !DILocation(line: 438, column: 28, scope: !2338)
!2345 = !DILocation(line: 438, column: 38, scope: !2338)
!2346 = !DILocation(line: 438, column: 48, scope: !2338)
!2347 = !DILocation(line: 438, column: 52, scope: !2338)
!2348 = !DILocation(line: 438, column: 54, scope: !2338)
!2349 = !DILocation(line: 438, column: 45, scope: !2338)
!2350 = !DILocation(line: 438, column: 59, scope: !2338)
!2351 = !DILocation(line: 438, column: 62, scope: !2338)
!2352 = !DILocation(line: 438, column: 66, scope: !2338)
!2353 = !DILocation(line: 438, column: 68, scope: !2338)
!2354 = !DILocation(line: 438, column: 73, scope: !2338)
!2355 = !DILocation(line: 437, column: 19, scope: !2312)
!2356 = !DILocation(line: 440, column: 19, scope: !2357)
!2357 = distinct !DILexicalBlock(scope: !2338, file: !139, line: 439, column: 17)
!2358 = !DILocation(line: 440, column: 19, scope: !2359)
!2359 = distinct !DILexicalBlock(scope: !2360, file: !139, line: 440, column: 19)
!2360 = distinct !DILexicalBlock(scope: !2357, file: !139, line: 440, column: 19)
!2361 = !DILocation(line: 440, column: 19, scope: !2360)
!2362 = !DILocation(line: 441, column: 19, scope: !2357)
!2363 = !DILocation(line: 441, column: 19, scope: !2364)
!2364 = distinct !DILexicalBlock(scope: !2365, file: !139, line: 441, column: 19)
!2365 = distinct !DILexicalBlock(scope: !2357, file: !139, line: 441, column: 19)
!2366 = !DILocation(line: 441, column: 19, scope: !2365)
!2367 = !DILocation(line: 442, column: 17, scope: !2357)
!2368 = !DILocation(line: 443, column: 17, scope: !2312)
!2369 = !DILocation(line: 448, column: 13, scope: !2312)
!2370 = !DILocation(line: 449, column: 20, scope: !2371)
!2371 = distinct !DILexicalBlock(scope: !2308, file: !139, line: 449, column: 20)
!2372 = !DILocation(line: 449, column: 26, scope: !2371)
!2373 = !DILocation(line: 449, column: 20, scope: !2308)
!2374 = !DILocation(line: 450, column: 13, scope: !2371)
!2375 = !DILocation(line: 451, column: 11, scope: !2309)
!2376 = !DILocation(line: 454, column: 19, scope: !2309)
!2377 = !DILocation(line: 454, column: 11, scope: !2309)
!2378 = !DILocation(line: 457, column: 19, scope: !2379)
!2379 = distinct !DILexicalBlock(scope: !2380, file: !139, line: 457, column: 19)
!2380 = distinct !DILexicalBlock(scope: !2309, file: !139, line: 455, column: 13)
!2381 = !DILocation(line: 457, column: 19, scope: !2380)
!2382 = !DILocation(line: 458, column: 17, scope: !2379)
!2383 = !DILocation(line: 459, column: 15, scope: !2380)
!2384 = !DILocation(line: 462, column: 20, scope: !2385)
!2385 = distinct !DILexicalBlock(scope: !2380, file: !139, line: 462, column: 19)
!2386 = !DILocation(line: 462, column: 26, scope: !2385)
!2387 = !DILocation(line: 463, column: 19, scope: !2385)
!2388 = !DILocation(line: 463, column: 22, scope: !2385)
!2389 = !DILocation(line: 463, column: 24, scope: !2385)
!2390 = !DILocation(line: 463, column: 30, scope: !2385)
!2391 = !DILocation(line: 463, column: 28, scope: !2385)
!2392 = !DILocation(line: 463, column: 38, scope: !2385)
!2393 = !DILocation(line: 463, column: 41, scope: !2385)
!2394 = !DILocation(line: 463, column: 45, scope: !2385)
!2395 = !DILocation(line: 463, column: 47, scope: !2385)
!2396 = !DILocation(line: 463, column: 52, scope: !2385)
!2397 = !DILocation(line: 462, column: 19, scope: !2380)
!2398 = !DILocation(line: 464, column: 25, scope: !2385)
!2399 = !DILocation(line: 464, column: 29, scope: !2385)
!2400 = !DILocation(line: 464, column: 31, scope: !2385)
!2401 = !DILocation(line: 464, column: 17, scope: !2385)
!2402 = !DILocation(line: 471, column: 25, scope: !2403)
!2403 = distinct !DILexicalBlock(scope: !2404, file: !139, line: 471, column: 25)
!2404 = distinct !DILexicalBlock(scope: !2385, file: !139, line: 465, column: 19)
!2405 = !DILocation(line: 471, column: 25, scope: !2404)
!2406 = !DILocation(line: 472, column: 23, scope: !2403)
!2407 = !DILocation(line: 473, column: 25, scope: !2404)
!2408 = !DILocation(line: 473, column: 29, scope: !2404)
!2409 = !DILocation(line: 473, column: 31, scope: !2404)
!2410 = !DILocation(line: 473, column: 23, scope: !2404)
!2411 = !DILocation(line: 474, column: 23, scope: !2404)
!2412 = !DILocation(line: 475, column: 21, scope: !2404)
!2413 = !DILocation(line: 475, column: 21, scope: !2414)
!2414 = distinct !DILexicalBlock(scope: !2415, file: !139, line: 475, column: 21)
!2415 = distinct !DILexicalBlock(scope: !2404, file: !139, line: 475, column: 21)
!2416 = !DILocation(line: 475, column: 21, scope: !2415)
!2417 = !DILocation(line: 476, column: 21, scope: !2404)
!2418 = !DILocation(line: 476, column: 21, scope: !2419)
!2419 = distinct !DILexicalBlock(scope: !2420, file: !139, line: 476, column: 21)
!2420 = distinct !DILexicalBlock(scope: !2404, file: !139, line: 476, column: 21)
!2421 = !DILocation(line: 476, column: 21, scope: !2420)
!2422 = !DILocation(line: 477, column: 21, scope: !2404)
!2423 = !DILocation(line: 477, column: 21, scope: !2424)
!2424 = distinct !DILexicalBlock(scope: !2425, file: !139, line: 477, column: 21)
!2425 = distinct !DILexicalBlock(scope: !2404, file: !139, line: 477, column: 21)
!2426 = !DILocation(line: 477, column: 21, scope: !2425)
!2427 = !DILocation(line: 478, column: 21, scope: !2404)
!2428 = !DILocation(line: 478, column: 21, scope: !2429)
!2429 = distinct !DILexicalBlock(scope: !2430, file: !139, line: 478, column: 21)
!2430 = distinct !DILexicalBlock(scope: !2404, file: !139, line: 478, column: 21)
!2431 = !DILocation(line: 478, column: 21, scope: !2430)
!2432 = !DILocation(line: 479, column: 21, scope: !2404)
!2433 = !DILocation(line: 482, column: 21, scope: !2404)
!2434 = !DILocation(line: 483, column: 19, scope: !2404)
!2435 = !DILocation(line: 484, column: 15, scope: !2380)
!2436 = !DILocation(line: 487, column: 15, scope: !2380)
!2437 = !DILocation(line: 489, column: 11, scope: !2309)
!2438 = !DILocation(line: 491, column: 24, scope: !2309)
!2439 = !DILocation(line: 491, column: 31, scope: !2309)
!2440 = !DILocation(line: 492, column: 24, scope: !2309)
!2441 = !DILocation(line: 492, column: 31, scope: !2309)
!2442 = !DILocation(line: 493, column: 24, scope: !2309)
!2443 = !DILocation(line: 493, column: 31, scope: !2309)
!2444 = !DILocation(line: 494, column: 24, scope: !2309)
!2445 = !DILocation(line: 494, column: 31, scope: !2309)
!2446 = !DILocation(line: 495, column: 24, scope: !2309)
!2447 = !DILocation(line: 495, column: 31, scope: !2309)
!2448 = !DILocation(line: 496, column: 24, scope: !2309)
!2449 = !DILocation(line: 496, column: 31, scope: !2309)
!2450 = !DILocation(line: 497, column: 24, scope: !2309)
!2451 = !DILocation(line: 497, column: 31, scope: !2309)
!2452 = !DILocation(line: 498, column: 26, scope: !2309)
!2453 = !DILocation(line: 498, column: 24, scope: !2309)
!2454 = !DILocation(line: 500, column: 15, scope: !2455)
!2455 = distinct !DILexicalBlock(scope: !2309, file: !139, line: 500, column: 15)
!2456 = !DILocation(line: 500, column: 29, scope: !2455)
!2457 = !DILocation(line: 500, column: 15, scope: !2309)
!2458 = !DILocation(line: 502, column: 19, scope: !2459)
!2459 = distinct !DILexicalBlock(scope: !2460, file: !139, line: 502, column: 19)
!2460 = distinct !DILexicalBlock(scope: !2455, file: !139, line: 501, column: 13)
!2461 = !DILocation(line: 502, column: 19, scope: !2460)
!2462 = !DILocation(line: 503, column: 17, scope: !2459)
!2463 = !DILocation(line: 504, column: 15, scope: !2460)
!2464 = !DILocation(line: 509, column: 15, scope: !2465)
!2465 = distinct !DILexicalBlock(scope: !2309, file: !139, line: 509, column: 15)
!2466 = !DILocation(line: 509, column: 33, scope: !2465)
!2467 = !DILocation(line: 509, column: 36, scope: !2465)
!2468 = !DILocation(line: 509, column: 55, scope: !2465)
!2469 = !DILocation(line: 509, column: 58, scope: !2465)
!2470 = !DILocation(line: 509, column: 15, scope: !2309)
!2471 = !DILocation(line: 510, column: 13, scope: !2465)
!2472 = !DILabel(scope: !2309, name: "c_and_shell_escape", file: !139, line: 512)
!2473 = !DILocation(line: 512, column: 9, scope: !2309)
!2474 = !DILocation(line: 513, column: 15, scope: !2475)
!2475 = distinct !DILexicalBlock(scope: !2309, file: !139, line: 513, column: 15)
!2476 = !DILocation(line: 513, column: 29, scope: !2475)
!2477 = !DILocation(line: 514, column: 15, scope: !2475)
!2478 = !DILocation(line: 514, column: 18, scope: !2475)
!2479 = !DILocation(line: 513, column: 15, scope: !2309)
!2480 = !DILocation(line: 515, column: 13, scope: !2475)
!2481 = !DILabel(scope: !2309, name: "c_escape", file: !139, line: 517)
!2482 = !DILocation(line: 517, column: 9, scope: !2309)
!2483 = !DILocation(line: 518, column: 15, scope: !2484)
!2484 = distinct !DILexicalBlock(scope: !2309, file: !139, line: 518, column: 15)
!2485 = !DILocation(line: 518, column: 15, scope: !2309)
!2486 = !DILocation(line: 520, column: 19, scope: !2487)
!2487 = distinct !DILexicalBlock(scope: !2484, file: !139, line: 519, column: 13)
!2488 = !DILocation(line: 520, column: 17, scope: !2487)
!2489 = !DILocation(line: 521, column: 15, scope: !2487)
!2490 = !DILocation(line: 523, column: 11, scope: !2309)
!2491 = !DILocation(line: 526, column: 18, scope: !2492)
!2492 = distinct !DILexicalBlock(scope: !2309, file: !139, line: 526, column: 15)
!2493 = !DILocation(line: 526, column: 26, scope: !2492)
!2494 = !DILocation(line: 526, column: 15, scope: !2309)
!2495 = !DILocation(line: 526, column: 40, scope: !2492)
!2496 = !DILocation(line: 526, column: 47, scope: !2492)
!2497 = !DILocation(line: 526, column: 57, scope: !2492)
!2498 = !DILocation(line: 526, column: 65, scope: !2492)
!2499 = !DILocation(line: 527, column: 13, scope: !2492)
!2500 = !DILocation(line: 528, column: 11, scope: !2309)
!2501 = !DILocation(line: 530, column: 15, scope: !2502)
!2502 = distinct !DILexicalBlock(scope: !2309, file: !139, line: 530, column: 15)
!2503 = !DILocation(line: 530, column: 17, scope: !2502)
!2504 = !DILocation(line: 530, column: 15, scope: !2309)
!2505 = !DILocation(line: 531, column: 13, scope: !2502)
!2506 = !DILocation(line: 532, column: 11, scope: !2309)
!2507 = !DILocation(line: 534, column: 36, scope: !2309)
!2508 = !DILocation(line: 535, column: 11, scope: !2309)
!2509 = !DILocation(line: 548, column: 15, scope: !2510)
!2510 = distinct !DILexicalBlock(scope: !2309, file: !139, line: 548, column: 15)
!2511 = !DILocation(line: 548, column: 29, scope: !2510)
!2512 = !DILocation(line: 549, column: 15, scope: !2510)
!2513 = !DILocation(line: 549, column: 18, scope: !2510)
!2514 = !DILocation(line: 548, column: 15, scope: !2309)
!2515 = !DILocation(line: 550, column: 13, scope: !2510)
!2516 = !DILocation(line: 551, column: 11, scope: !2309)
!2517 = !DILocation(line: 554, column: 36, scope: !2309)
!2518 = !DILocation(line: 555, column: 36, scope: !2309)
!2519 = !DILocation(line: 556, column: 15, scope: !2520)
!2520 = distinct !DILexicalBlock(scope: !2309, file: !139, line: 556, column: 15)
!2521 = !DILocation(line: 556, column: 29, scope: !2520)
!2522 = !DILocation(line: 556, column: 15, scope: !2309)
!2523 = !DILocation(line: 558, column: 19, scope: !2524)
!2524 = distinct !DILexicalBlock(scope: !2525, file: !139, line: 558, column: 19)
!2525 = distinct !DILexicalBlock(scope: !2520, file: !139, line: 557, column: 13)
!2526 = !DILocation(line: 558, column: 19, scope: !2525)
!2527 = !DILocation(line: 559, column: 17, scope: !2524)
!2528 = !DILocation(line: 561, column: 19, scope: !2529)
!2529 = distinct !DILexicalBlock(scope: !2525, file: !139, line: 561, column: 19)
!2530 = !DILocation(line: 561, column: 30, scope: !2529)
!2531 = !DILocation(line: 561, column: 35, scope: !2529)
!2532 = !DILocation(line: 561, column: 19, scope: !2525)
!2533 = !DILocation(line: 566, column: 37, scope: !2534)
!2534 = distinct !DILexicalBlock(scope: !2529, file: !139, line: 562, column: 17)
!2535 = !DILocation(line: 566, column: 35, scope: !2534)
!2536 = !DILocation(line: 567, column: 30, scope: !2534)
!2537 = !DILocation(line: 568, column: 17, scope: !2534)
!2538 = !DILocation(line: 570, column: 15, scope: !2525)
!2539 = !DILocation(line: 570, column: 15, scope: !2540)
!2540 = distinct !DILexicalBlock(scope: !2541, file: !139, line: 570, column: 15)
!2541 = distinct !DILexicalBlock(scope: !2525, file: !139, line: 570, column: 15)
!2542 = !DILocation(line: 570, column: 15, scope: !2541)
!2543 = !DILocation(line: 571, column: 15, scope: !2525)
!2544 = !DILocation(line: 571, column: 15, scope: !2545)
!2545 = distinct !DILexicalBlock(scope: !2546, file: !139, line: 571, column: 15)
!2546 = distinct !DILexicalBlock(scope: !2525, file: !139, line: 571, column: 15)
!2547 = !DILocation(line: 571, column: 15, scope: !2546)
!2548 = !DILocation(line: 572, column: 15, scope: !2525)
!2549 = !DILocation(line: 572, column: 15, scope: !2550)
!2550 = distinct !DILexicalBlock(scope: !2551, file: !139, line: 572, column: 15)
!2551 = distinct !DILexicalBlock(scope: !2525, file: !139, line: 572, column: 15)
!2552 = !DILocation(line: 572, column: 15, scope: !2551)
!2553 = !DILocation(line: 573, column: 40, scope: !2525)
!2554 = !DILocation(line: 574, column: 13, scope: !2525)
!2555 = !DILocation(line: 575, column: 11, scope: !2309)
!2556 = !DILocation(line: 599, column: 36, scope: !2309)
!2557 = !DILocation(line: 600, column: 11, scope: !2309)
!2558 = !DILocalVariable(name: "m", scope: !2559, file: !139, line: 610, type: !134)
!2559 = distinct !DILexicalBlock(scope: !2309, file: !139, line: 608, column: 11)
!2560 = !DILocation(line: 610, column: 20, scope: !2559)
!2561 = !DILocalVariable(name: "printable", scope: !2559, file: !139, line: 612, type: !27)
!2562 = !DILocation(line: 612, column: 18, scope: !2559)
!2563 = !DILocation(line: 614, column: 17, scope: !2564)
!2564 = distinct !DILexicalBlock(scope: !2559, file: !139, line: 614, column: 17)
!2565 = !DILocation(line: 614, column: 17, scope: !2559)
!2566 = !DILocation(line: 616, column: 19, scope: !2567)
!2567 = distinct !DILexicalBlock(scope: !2564, file: !139, line: 615, column: 15)
!2568 = !DILocation(line: 617, column: 29, scope: !2567)
!2569 = !DILocation(line: 617, column: 41, scope: !2567)
!2570 = !DILocation(line: 617, column: 27, scope: !2567)
!2571 = !DILocation(line: 618, column: 15, scope: !2567)
!2572 = !DILocalVariable(name: "mbstate", scope: !2573, file: !139, line: 621, type: !2574)
!2573 = distinct !DILexicalBlock(scope: !2564, file: !139, line: 620, column: 15)
!2574 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !2575, line: 6, baseType: !2576)
!2575 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "")
!2576 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !2577, line: 21, baseType: !2578)
!2577 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "")
!2578 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2577, line: 13, size: 64, elements: !2579)
!2579 = !{!2580, !2581}
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !2578, file: !2577, line: 15, baseType: !72, size: 32)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !2578, file: !2577, line: 20, baseType: !2582, size: 32, offset: 32)
!2582 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2578, file: !2577, line: 16, size: 32, elements: !2583)
!2583 = !{!2584, !2585}
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !2582, file: !2577, line: 18, baseType: !16, size: 32)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !2582, file: !2577, line: 19, baseType: !2586, size: 32)
!2586 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 32, elements: !2587)
!2587 = !{!2588}
!2588 = !DISubrange(count: 4)
!2589 = !DILocation(line: 621, column: 27, scope: !2573)
!2590 = !DILocation(line: 622, column: 17, scope: !2573)
!2591 = !DILocation(line: 624, column: 19, scope: !2573)
!2592 = !DILocation(line: 625, column: 27, scope: !2573)
!2593 = !DILocation(line: 626, column: 21, scope: !2594)
!2594 = distinct !DILexicalBlock(scope: !2573, file: !139, line: 626, column: 21)
!2595 = !DILocation(line: 626, column: 29, scope: !2594)
!2596 = !DILocation(line: 626, column: 21, scope: !2573)
!2597 = !DILocation(line: 627, column: 37, scope: !2594)
!2598 = !DILocation(line: 627, column: 29, scope: !2594)
!2599 = !DILocation(line: 627, column: 27, scope: !2594)
!2600 = !DILocation(line: 627, column: 19, scope: !2594)
!2601 = !DILocation(line: 629, column: 17, scope: !2573)
!2602 = !DILocalVariable(name: "w", scope: !2603, file: !139, line: 631, type: !2604)
!2603 = distinct !DILexicalBlock(scope: !2573, file: !139, line: 630, column: 19)
!2604 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !135, line: 74, baseType: !72)
!2605 = !DILocation(line: 631, column: 29, scope: !2603)
!2606 = !DILocalVariable(name: "bytes", scope: !2603, file: !139, line: 632, type: !134)
!2607 = !DILocation(line: 632, column: 28, scope: !2603)
!2608 = !DILocation(line: 632, column: 50, scope: !2603)
!2609 = !DILocation(line: 632, column: 54, scope: !2603)
!2610 = !DILocation(line: 632, column: 58, scope: !2603)
!2611 = !DILocation(line: 632, column: 56, scope: !2603)
!2612 = !DILocation(line: 633, column: 45, scope: !2603)
!2613 = !DILocation(line: 633, column: 56, scope: !2603)
!2614 = !DILocation(line: 633, column: 60, scope: !2603)
!2615 = !DILocation(line: 633, column: 58, scope: !2603)
!2616 = !DILocation(line: 633, column: 53, scope: !2603)
!2617 = !DILocation(line: 632, column: 36, scope: !2603)
!2618 = !DILocation(line: 634, column: 25, scope: !2619)
!2619 = distinct !DILexicalBlock(scope: !2603, file: !139, line: 634, column: 25)
!2620 = !DILocation(line: 634, column: 31, scope: !2619)
!2621 = !DILocation(line: 634, column: 25, scope: !2603)
!2622 = !DILocation(line: 635, column: 23, scope: !2619)
!2623 = !DILocation(line: 636, column: 30, scope: !2624)
!2624 = distinct !DILexicalBlock(scope: !2619, file: !139, line: 636, column: 30)
!2625 = !DILocation(line: 636, column: 36, scope: !2624)
!2626 = !DILocation(line: 636, column: 30, scope: !2619)
!2627 = !DILocation(line: 638, column: 35, scope: !2628)
!2628 = distinct !DILexicalBlock(scope: !2624, file: !139, line: 637, column: 23)
!2629 = !DILocation(line: 639, column: 25, scope: !2628)
!2630 = !DILocation(line: 641, column: 30, scope: !2631)
!2631 = distinct !DILexicalBlock(scope: !2624, file: !139, line: 641, column: 30)
!2632 = !DILocation(line: 641, column: 36, scope: !2631)
!2633 = !DILocation(line: 641, column: 30, scope: !2624)
!2634 = !DILocation(line: 643, column: 35, scope: !2635)
!2635 = distinct !DILexicalBlock(scope: !2631, file: !139, line: 642, column: 23)
!2636 = !DILocation(line: 644, column: 25, scope: !2635)
!2637 = !DILocation(line: 644, column: 32, scope: !2635)
!2638 = !DILocation(line: 644, column: 36, scope: !2635)
!2639 = !DILocation(line: 644, column: 34, scope: !2635)
!2640 = !DILocation(line: 644, column: 40, scope: !2635)
!2641 = !DILocation(line: 644, column: 38, scope: !2635)
!2642 = !DILocation(line: 644, column: 48, scope: !2635)
!2643 = !DILocation(line: 644, column: 51, scope: !2635)
!2644 = !DILocation(line: 644, column: 55, scope: !2635)
!2645 = !DILocation(line: 644, column: 59, scope: !2635)
!2646 = !DILocation(line: 644, column: 57, scope: !2635)
!2647 = !DILocation(line: 0, scope: !2635)
!2648 = !DILocation(line: 645, column: 28, scope: !2635)
!2649 = distinct !{!2649, !2636, !2648}
!2650 = !DILocation(line: 646, column: 25, scope: !2635)
!2651 = !DILocation(line: 654, column: 44, scope: !2652)
!2652 = distinct !DILexicalBlock(scope: !2653, file: !139, line: 654, column: 29)
!2653 = distinct !DILexicalBlock(scope: !2631, file: !139, line: 649, column: 23)
!2654 = !DILocation(line: 655, column: 29, scope: !2652)
!2655 = !DILocation(line: 655, column: 32, scope: !2652)
!2656 = !DILocation(line: 655, column: 46, scope: !2652)
!2657 = !DILocation(line: 654, column: 29, scope: !2653)
!2658 = !DILocalVariable(name: "j", scope: !2659, file: !139, line: 657, type: !134)
!2659 = distinct !DILexicalBlock(scope: !2652, file: !139, line: 656, column: 27)
!2660 = !DILocation(line: 657, column: 36, scope: !2659)
!2661 = !DILocation(line: 658, column: 36, scope: !2662)
!2662 = distinct !DILexicalBlock(scope: !2659, file: !139, line: 658, column: 29)
!2663 = !DILocation(line: 658, column: 34, scope: !2662)
!2664 = !DILocation(line: 658, column: 41, scope: !2665)
!2665 = distinct !DILexicalBlock(scope: !2662, file: !139, line: 658, column: 29)
!2666 = !DILocation(line: 658, column: 45, scope: !2665)
!2667 = !DILocation(line: 658, column: 43, scope: !2665)
!2668 = !DILocation(line: 658, column: 29, scope: !2662)
!2669 = !DILocation(line: 659, column: 39, scope: !2665)
!2670 = !DILocation(line: 659, column: 43, scope: !2665)
!2671 = !DILocation(line: 659, column: 47, scope: !2665)
!2672 = !DILocation(line: 659, column: 45, scope: !2665)
!2673 = !DILocation(line: 659, column: 51, scope: !2665)
!2674 = !DILocation(line: 659, column: 49, scope: !2665)
!2675 = !DILocation(line: 659, column: 31, scope: !2665)
!2676 = !DILocation(line: 663, column: 35, scope: !2677)
!2677 = distinct !DILexicalBlock(scope: !2665, file: !139, line: 660, column: 33)
!2678 = !DILocation(line: 666, column: 35, scope: !2677)
!2679 = !DILocation(line: 667, column: 33, scope: !2677)
!2680 = !DILocation(line: 658, column: 53, scope: !2665)
!2681 = !DILocation(line: 658, column: 29, scope: !2665)
!2682 = distinct !{!2682, !2668, !2683}
!2683 = !DILocation(line: 667, column: 33, scope: !2662)
!2684 = !DILocation(line: 668, column: 27, scope: !2659)
!2685 = !DILocation(line: 670, column: 41, scope: !2686)
!2686 = distinct !DILexicalBlock(scope: !2653, file: !139, line: 670, column: 29)
!2687 = !DILocation(line: 670, column: 31, scope: !2686)
!2688 = !DILocation(line: 670, column: 29, scope: !2653)
!2689 = !DILocation(line: 671, column: 37, scope: !2686)
!2690 = !DILocation(line: 671, column: 27, scope: !2686)
!2691 = !DILocation(line: 672, column: 30, scope: !2653)
!2692 = !DILocation(line: 672, column: 27, scope: !2653)
!2693 = !DILocation(line: 674, column: 19, scope: !2603)
!2694 = !DILocation(line: 675, column: 26, scope: !2573)
!2695 = !DILocation(line: 675, column: 24, scope: !2573)
!2696 = distinct !{!2696, !2601, !2697}
!2697 = !DILocation(line: 675, column: 44, scope: !2573)
!2698 = !DILocation(line: 678, column: 40, scope: !2559)
!2699 = !DILocation(line: 678, column: 38, scope: !2559)
!2700 = !DILocation(line: 680, column: 21, scope: !2701)
!2701 = distinct !DILexicalBlock(scope: !2559, file: !139, line: 680, column: 17)
!2702 = !DILocation(line: 680, column: 19, scope: !2701)
!2703 = !DILocation(line: 680, column: 23, scope: !2701)
!2704 = !DILocation(line: 680, column: 27, scope: !2701)
!2705 = !DILocation(line: 680, column: 45, scope: !2701)
!2706 = !DILocation(line: 680, column: 50, scope: !2701)
!2707 = !DILocation(line: 680, column: 17, scope: !2559)
!2708 = !DILocalVariable(name: "ilim", scope: !2709, file: !139, line: 684, type: !134)
!2709 = distinct !DILexicalBlock(scope: !2701, file: !139, line: 681, column: 15)
!2710 = !DILocation(line: 684, column: 24, scope: !2709)
!2711 = !DILocation(line: 684, column: 31, scope: !2709)
!2712 = !DILocation(line: 684, column: 35, scope: !2709)
!2713 = !DILocation(line: 684, column: 33, scope: !2709)
!2714 = !DILocation(line: 686, column: 17, scope: !2709)
!2715 = !DILocation(line: 688, column: 25, scope: !2716)
!2716 = distinct !DILexicalBlock(scope: !2717, file: !139, line: 688, column: 25)
!2717 = distinct !DILexicalBlock(scope: !2718, file: !139, line: 687, column: 19)
!2718 = distinct !DILexicalBlock(scope: !2719, file: !139, line: 686, column: 17)
!2719 = distinct !DILexicalBlock(scope: !2709, file: !139, line: 686, column: 17)
!2720 = !DILocation(line: 688, column: 43, scope: !2716)
!2721 = !DILocation(line: 688, column: 48, scope: !2716)
!2722 = !DILocation(line: 688, column: 25, scope: !2717)
!2723 = !DILocation(line: 690, column: 25, scope: !2724)
!2724 = distinct !DILexicalBlock(scope: !2716, file: !139, line: 689, column: 23)
!2725 = !DILocation(line: 690, column: 25, scope: !2726)
!2726 = distinct !DILexicalBlock(scope: !2727, file: !139, line: 690, column: 25)
!2727 = distinct !DILexicalBlock(scope: !2724, file: !139, line: 690, column: 25)
!2728 = !DILocation(line: 690, column: 25, scope: !2727)
!2729 = !DILocation(line: 690, column: 25, scope: !2730)
!2730 = distinct !DILexicalBlock(scope: !2727, file: !139, line: 690, column: 25)
!2731 = !DILocation(line: 690, column: 25, scope: !2732)
!2732 = distinct !DILexicalBlock(scope: !2730, file: !139, line: 690, column: 25)
!2733 = !DILocation(line: 690, column: 25, scope: !2734)
!2734 = distinct !DILexicalBlock(scope: !2735, file: !139, line: 690, column: 25)
!2735 = distinct !DILexicalBlock(scope: !2732, file: !139, line: 690, column: 25)
!2736 = !DILocation(line: 690, column: 25, scope: !2735)
!2737 = !DILocation(line: 690, column: 25, scope: !2738)
!2738 = distinct !DILexicalBlock(scope: !2739, file: !139, line: 690, column: 25)
!2739 = distinct !DILexicalBlock(scope: !2732, file: !139, line: 690, column: 25)
!2740 = !DILocation(line: 690, column: 25, scope: !2739)
!2741 = !DILocation(line: 690, column: 25, scope: !2742)
!2742 = distinct !DILexicalBlock(scope: !2743, file: !139, line: 690, column: 25)
!2743 = distinct !DILexicalBlock(scope: !2732, file: !139, line: 690, column: 25)
!2744 = !DILocation(line: 690, column: 25, scope: !2743)
!2745 = !DILocation(line: 690, column: 25, scope: !2746)
!2746 = distinct !DILexicalBlock(scope: !2747, file: !139, line: 690, column: 25)
!2747 = distinct !DILexicalBlock(scope: !2727, file: !139, line: 690, column: 25)
!2748 = !DILocation(line: 690, column: 25, scope: !2747)
!2749 = !DILocation(line: 691, column: 25, scope: !2724)
!2750 = !DILocation(line: 691, column: 25, scope: !2751)
!2751 = distinct !DILexicalBlock(scope: !2752, file: !139, line: 691, column: 25)
!2752 = distinct !DILexicalBlock(scope: !2724, file: !139, line: 691, column: 25)
!2753 = !DILocation(line: 691, column: 25, scope: !2752)
!2754 = !DILocation(line: 692, column: 25, scope: !2724)
!2755 = !DILocation(line: 692, column: 25, scope: !2756)
!2756 = distinct !DILexicalBlock(scope: !2757, file: !139, line: 692, column: 25)
!2757 = distinct !DILexicalBlock(scope: !2724, file: !139, line: 692, column: 25)
!2758 = !DILocation(line: 692, column: 25, scope: !2757)
!2759 = !DILocation(line: 693, column: 36, scope: !2724)
!2760 = !DILocation(line: 693, column: 38, scope: !2724)
!2761 = !DILocation(line: 693, column: 33, scope: !2724)
!2762 = !DILocation(line: 693, column: 29, scope: !2724)
!2763 = !DILocation(line: 693, column: 27, scope: !2724)
!2764 = !DILocation(line: 694, column: 23, scope: !2724)
!2765 = !DILocation(line: 695, column: 30, scope: !2766)
!2766 = distinct !DILexicalBlock(scope: !2716, file: !139, line: 695, column: 30)
!2767 = !DILocation(line: 695, column: 30, scope: !2716)
!2768 = !DILocation(line: 697, column: 25, scope: !2769)
!2769 = distinct !DILexicalBlock(scope: !2766, file: !139, line: 696, column: 23)
!2770 = !DILocation(line: 697, column: 25, scope: !2771)
!2771 = distinct !DILexicalBlock(scope: !2772, file: !139, line: 697, column: 25)
!2772 = distinct !DILexicalBlock(scope: !2769, file: !139, line: 697, column: 25)
!2773 = !DILocation(line: 697, column: 25, scope: !2772)
!2774 = !DILocation(line: 698, column: 40, scope: !2769)
!2775 = !DILocation(line: 699, column: 23, scope: !2769)
!2776 = !DILocation(line: 700, column: 25, scope: !2777)
!2777 = distinct !DILexicalBlock(scope: !2717, file: !139, line: 700, column: 25)
!2778 = !DILocation(line: 700, column: 33, scope: !2777)
!2779 = !DILocation(line: 700, column: 35, scope: !2777)
!2780 = !DILocation(line: 700, column: 30, scope: !2777)
!2781 = !DILocation(line: 700, column: 25, scope: !2717)
!2782 = !DILocation(line: 701, column: 23, scope: !2777)
!2783 = !DILocation(line: 702, column: 21, scope: !2717)
!2784 = !DILocation(line: 702, column: 21, scope: !2785)
!2785 = distinct !DILexicalBlock(scope: !2786, file: !139, line: 702, column: 21)
!2786 = distinct !DILexicalBlock(scope: !2717, file: !139, line: 702, column: 21)
!2787 = !DILocation(line: 702, column: 21, scope: !2786)
!2788 = !DILocation(line: 702, column: 21, scope: !2789)
!2789 = distinct !DILexicalBlock(scope: !2785, file: !139, line: 702, column: 21)
!2790 = !DILocation(line: 702, column: 21, scope: !2791)
!2791 = distinct !DILexicalBlock(scope: !2792, file: !139, line: 702, column: 21)
!2792 = distinct !DILexicalBlock(scope: !2789, file: !139, line: 702, column: 21)
!2793 = !DILocation(line: 702, column: 21, scope: !2792)
!2794 = !DILocation(line: 702, column: 21, scope: !2795)
!2795 = distinct !DILexicalBlock(scope: !2796, file: !139, line: 702, column: 21)
!2796 = distinct !DILexicalBlock(scope: !2789, file: !139, line: 702, column: 21)
!2797 = !DILocation(line: 702, column: 21, scope: !2796)
!2798 = !DILocation(line: 703, column: 21, scope: !2717)
!2799 = !DILocation(line: 703, column: 21, scope: !2800)
!2800 = distinct !DILexicalBlock(scope: !2801, file: !139, line: 703, column: 21)
!2801 = distinct !DILexicalBlock(scope: !2717, file: !139, line: 703, column: 21)
!2802 = !DILocation(line: 703, column: 21, scope: !2801)
!2803 = !DILocation(line: 704, column: 25, scope: !2717)
!2804 = !DILocation(line: 704, column: 29, scope: !2717)
!2805 = !DILocation(line: 704, column: 23, scope: !2717)
!2806 = !DILocation(line: 686, column: 17, scope: !2718)
!2807 = distinct !{!2807, !2808, !2809}
!2808 = !DILocation(line: 686, column: 17, scope: !2719)
!2809 = !DILocation(line: 705, column: 19, scope: !2719)
!2810 = !DILocation(line: 707, column: 17, scope: !2709)
!2811 = !DILocation(line: 710, column: 9, scope: !2309)
!2812 = !DILocation(line: 712, column: 16, scope: !2813)
!2813 = distinct !DILexicalBlock(scope: !2255, file: !139, line: 712, column: 11)
!2814 = !DILocation(line: 712, column: 34, scope: !2813)
!2815 = !DILocation(line: 712, column: 37, scope: !2813)
!2816 = !DILocation(line: 712, column: 51, scope: !2813)
!2817 = !DILocation(line: 713, column: 15, scope: !2813)
!2818 = !DILocation(line: 713, column: 18, scope: !2813)
!2819 = !DILocation(line: 714, column: 14, scope: !2813)
!2820 = !DILocation(line: 714, column: 17, scope: !2813)
!2821 = !DILocation(line: 715, column: 14, scope: !2813)
!2822 = !DILocation(line: 715, column: 17, scope: !2813)
!2823 = !DILocation(line: 715, column: 33, scope: !2813)
!2824 = !DILocation(line: 715, column: 35, scope: !2813)
!2825 = !DILocation(line: 715, column: 51, scope: !2813)
!2826 = !DILocation(line: 715, column: 53, scope: !2813)
!2827 = !DILocation(line: 715, column: 47, scope: !2813)
!2828 = !DILocation(line: 715, column: 65, scope: !2813)
!2829 = !DILocation(line: 716, column: 11, scope: !2813)
!2830 = !DILocation(line: 716, column: 15, scope: !2813)
!2831 = !DILocation(line: 712, column: 11, scope: !2255)
!2832 = !DILocation(line: 717, column: 9, scope: !2813)
!2833 = !DILabel(scope: !2255, name: "store_escape", file: !139, line: 719)
!2834 = !DILocation(line: 719, column: 5, scope: !2255)
!2835 = !DILocation(line: 720, column: 7, scope: !2255)
!2836 = !DILocation(line: 720, column: 7, scope: !2837)
!2837 = distinct !DILexicalBlock(scope: !2838, file: !139, line: 720, column: 7)
!2838 = distinct !DILexicalBlock(scope: !2255, file: !139, line: 720, column: 7)
!2839 = !DILocation(line: 720, column: 7, scope: !2838)
!2840 = !DILocation(line: 720, column: 7, scope: !2841)
!2841 = distinct !DILexicalBlock(scope: !2838, file: !139, line: 720, column: 7)
!2842 = !DILocation(line: 720, column: 7, scope: !2843)
!2843 = distinct !DILexicalBlock(scope: !2841, file: !139, line: 720, column: 7)
!2844 = !DILocation(line: 720, column: 7, scope: !2845)
!2845 = distinct !DILexicalBlock(scope: !2846, file: !139, line: 720, column: 7)
!2846 = distinct !DILexicalBlock(scope: !2843, file: !139, line: 720, column: 7)
!2847 = !DILocation(line: 720, column: 7, scope: !2846)
!2848 = !DILocation(line: 720, column: 7, scope: !2849)
!2849 = distinct !DILexicalBlock(scope: !2850, file: !139, line: 720, column: 7)
!2850 = distinct !DILexicalBlock(scope: !2843, file: !139, line: 720, column: 7)
!2851 = !DILocation(line: 720, column: 7, scope: !2850)
!2852 = !DILocation(line: 720, column: 7, scope: !2853)
!2853 = distinct !DILexicalBlock(scope: !2854, file: !139, line: 720, column: 7)
!2854 = distinct !DILexicalBlock(scope: !2843, file: !139, line: 720, column: 7)
!2855 = !DILocation(line: 720, column: 7, scope: !2854)
!2856 = !DILocation(line: 720, column: 7, scope: !2857)
!2857 = distinct !DILexicalBlock(scope: !2858, file: !139, line: 720, column: 7)
!2858 = distinct !DILexicalBlock(scope: !2838, file: !139, line: 720, column: 7)
!2859 = !DILocation(line: 720, column: 7, scope: !2858)
!2860 = !DILabel(scope: !2255, name: "store_c", file: !139, line: 722)
!2861 = !DILocation(line: 722, column: 5, scope: !2255)
!2862 = !DILocation(line: 723, column: 7, scope: !2255)
!2863 = !DILocation(line: 723, column: 7, scope: !2864)
!2864 = distinct !DILexicalBlock(scope: !2865, file: !139, line: 723, column: 7)
!2865 = distinct !DILexicalBlock(scope: !2255, file: !139, line: 723, column: 7)
!2866 = !DILocation(line: 723, column: 7, scope: !2865)
!2867 = !DILocation(line: 723, column: 7, scope: !2868)
!2868 = distinct !DILexicalBlock(scope: !2864, file: !139, line: 723, column: 7)
!2869 = !DILocation(line: 723, column: 7, scope: !2870)
!2870 = distinct !DILexicalBlock(scope: !2871, file: !139, line: 723, column: 7)
!2871 = distinct !DILexicalBlock(scope: !2868, file: !139, line: 723, column: 7)
!2872 = !DILocation(line: 723, column: 7, scope: !2871)
!2873 = !DILocation(line: 723, column: 7, scope: !2874)
!2874 = distinct !DILexicalBlock(scope: !2875, file: !139, line: 723, column: 7)
!2875 = distinct !DILexicalBlock(scope: !2868, file: !139, line: 723, column: 7)
!2876 = !DILocation(line: 723, column: 7, scope: !2875)
!2877 = !DILocation(line: 724, column: 7, scope: !2255)
!2878 = !DILocation(line: 724, column: 7, scope: !2879)
!2879 = distinct !DILexicalBlock(scope: !2880, file: !139, line: 724, column: 7)
!2880 = distinct !DILexicalBlock(scope: !2255, file: !139, line: 724, column: 7)
!2881 = !DILocation(line: 724, column: 7, scope: !2880)
!2882 = !DILocation(line: 726, column: 13, scope: !2883)
!2883 = distinct !DILexicalBlock(scope: !2255, file: !139, line: 726, column: 11)
!2884 = !DILocation(line: 726, column: 11, scope: !2255)
!2885 = !DILocation(line: 727, column: 38, scope: !2883)
!2886 = !DILocation(line: 727, column: 9, scope: !2883)
!2887 = !DILocation(line: 728, column: 5, scope: !2255)
!2888 = !DILocation(line: 400, column: 75, scope: !2244)
!2889 = !DILocation(line: 400, column: 3, scope: !2244)
!2890 = distinct !{!2890, !2253, !2891}
!2891 = !DILocation(line: 728, column: 5, scope: !2241)
!2892 = !DILocation(line: 730, column: 7, scope: !2893)
!2893 = distinct !DILexicalBlock(scope: !2101, file: !139, line: 730, column: 7)
!2894 = !DILocation(line: 730, column: 11, scope: !2893)
!2895 = !DILocation(line: 730, column: 16, scope: !2893)
!2896 = !DILocation(line: 730, column: 19, scope: !2893)
!2897 = !DILocation(line: 730, column: 33, scope: !2893)
!2898 = !DILocation(line: 731, column: 7, scope: !2893)
!2899 = !DILocation(line: 731, column: 10, scope: !2893)
!2900 = !DILocation(line: 730, column: 7, scope: !2101)
!2901 = !DILocation(line: 732, column: 5, scope: !2893)
!2902 = !DILocation(line: 738, column: 7, scope: !2903)
!2903 = distinct !DILexicalBlock(scope: !2101, file: !139, line: 738, column: 7)
!2904 = !DILocation(line: 738, column: 21, scope: !2903)
!2905 = !DILocation(line: 738, column: 51, scope: !2903)
!2906 = !DILocation(line: 738, column: 56, scope: !2903)
!2907 = !DILocation(line: 739, column: 7, scope: !2903)
!2908 = !DILocation(line: 739, column: 10, scope: !2903)
!2909 = !DILocation(line: 738, column: 7, scope: !2101)
!2910 = !DILocation(line: 741, column: 11, scope: !2911)
!2911 = distinct !DILexicalBlock(scope: !2912, file: !139, line: 741, column: 11)
!2912 = distinct !DILexicalBlock(scope: !2903, file: !139, line: 740, column: 5)
!2913 = !DILocation(line: 741, column: 11, scope: !2912)
!2914 = !DILocation(line: 742, column: 42, scope: !2911)
!2915 = !DILocation(line: 742, column: 50, scope: !2911)
!2916 = !DILocation(line: 742, column: 67, scope: !2911)
!2917 = !DILocation(line: 742, column: 72, scope: !2911)
!2918 = !DILocation(line: 744, column: 42, scope: !2911)
!2919 = !DILocation(line: 744, column: 49, scope: !2911)
!2920 = !DILocation(line: 745, column: 42, scope: !2911)
!2921 = !DILocation(line: 745, column: 54, scope: !2911)
!2922 = !DILocation(line: 742, column: 16, scope: !2911)
!2923 = !DILocation(line: 742, column: 9, scope: !2911)
!2924 = !DILocation(line: 746, column: 18, scope: !2925)
!2925 = distinct !DILexicalBlock(scope: !2911, file: !139, line: 746, column: 16)
!2926 = !DILocation(line: 746, column: 29, scope: !2925)
!2927 = !DILocation(line: 746, column: 32, scope: !2925)
!2928 = !DILocation(line: 746, column: 16, scope: !2911)
!2929 = !DILocation(line: 749, column: 24, scope: !2930)
!2930 = distinct !DILexicalBlock(scope: !2925, file: !139, line: 747, column: 9)
!2931 = !DILocation(line: 749, column: 22, scope: !2930)
!2932 = !DILocation(line: 750, column: 15, scope: !2930)
!2933 = !DILocation(line: 751, column: 11, scope: !2930)
!2934 = !DILocation(line: 753, column: 5, scope: !2912)
!2935 = !DILocation(line: 755, column: 7, scope: !2936)
!2936 = distinct !DILexicalBlock(scope: !2101, file: !139, line: 755, column: 7)
!2937 = !DILocation(line: 755, column: 20, scope: !2936)
!2938 = !DILocation(line: 755, column: 24, scope: !2936)
!2939 = !DILocation(line: 755, column: 7, scope: !2101)
!2940 = !DILocation(line: 756, column: 5, scope: !2936)
!2941 = !DILocation(line: 756, column: 13, scope: !2942)
!2942 = distinct !DILexicalBlock(scope: !2943, file: !139, line: 756, column: 5)
!2943 = distinct !DILexicalBlock(scope: !2936, file: !139, line: 756, column: 5)
!2944 = !DILocation(line: 756, column: 12, scope: !2942)
!2945 = !DILocation(line: 756, column: 5, scope: !2943)
!2946 = !DILocation(line: 757, column: 7, scope: !2942)
!2947 = !DILocation(line: 757, column: 7, scope: !2948)
!2948 = distinct !DILexicalBlock(scope: !2949, file: !139, line: 757, column: 7)
!2949 = distinct !DILexicalBlock(scope: !2942, file: !139, line: 757, column: 7)
!2950 = !DILocation(line: 757, column: 7, scope: !2949)
!2951 = !DILocation(line: 756, column: 39, scope: !2942)
!2952 = !DILocation(line: 756, column: 5, scope: !2942)
!2953 = distinct !{!2953, !2945, !2954}
!2954 = !DILocation(line: 757, column: 7, scope: !2943)
!2955 = !DILocation(line: 759, column: 7, scope: !2956)
!2956 = distinct !DILexicalBlock(scope: !2101, file: !139, line: 759, column: 7)
!2957 = !DILocation(line: 759, column: 13, scope: !2956)
!2958 = !DILocation(line: 759, column: 11, scope: !2956)
!2959 = !DILocation(line: 759, column: 7, scope: !2101)
!2960 = !DILocation(line: 760, column: 5, scope: !2956)
!2961 = !DILocation(line: 760, column: 12, scope: !2956)
!2962 = !DILocation(line: 760, column: 17, scope: !2956)
!2963 = !DILocation(line: 761, column: 10, scope: !2101)
!2964 = !DILocation(line: 761, column: 3, scope: !2101)
!2965 = !DILabel(scope: !2101, name: "force_outer_quoting_style", file: !139, line: 763)
!2966 = !DILocation(line: 763, column: 2, scope: !2101)
!2967 = !DILocation(line: 766, column: 7, scope: !2968)
!2968 = distinct !DILexicalBlock(scope: !2101, file: !139, line: 766, column: 7)
!2969 = !DILocation(line: 766, column: 21, scope: !2968)
!2970 = !DILocation(line: 766, column: 51, scope: !2968)
!2971 = !DILocation(line: 766, column: 54, scope: !2968)
!2972 = !DILocation(line: 766, column: 7, scope: !2101)
!2973 = !DILocation(line: 767, column: 19, scope: !2968)
!2974 = !DILocation(line: 767, column: 5, scope: !2968)
!2975 = !DILocation(line: 768, column: 36, scope: !2101)
!2976 = !DILocation(line: 768, column: 44, scope: !2101)
!2977 = !DILocation(line: 768, column: 56, scope: !2101)
!2978 = !DILocation(line: 768, column: 61, scope: !2101)
!2979 = !DILocation(line: 769, column: 36, scope: !2101)
!2980 = !DILocation(line: 770, column: 36, scope: !2101)
!2981 = !DILocation(line: 770, column: 42, scope: !2101)
!2982 = !DILocation(line: 771, column: 36, scope: !2101)
!2983 = !DILocation(line: 771, column: 48, scope: !2101)
!2984 = !DILocation(line: 768, column: 10, scope: !2101)
!2985 = !DILocation(line: 768, column: 3, scope: !2101)
!2986 = !DILocation(line: 772, column: 1, scope: !2101)
!2987 = !DILocalVariable(name: "escaping", scope: !2988, file: !139, line: 405, type: !27)
!2988 = distinct !DILexicalBlock(scope: !2989, file: !139, line: 401, column: 5)
!2989 = distinct !DILexicalBlock(scope: !2990, file: !139, line: 400, column: 3)
!2990 = distinct !DILexicalBlock(scope: !2991, file: !139, line: 400, column: 3)
!2991 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !139, file: !139, line: 256, type: !2102, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2992, retainedNodes: !4)
!2992 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !2993, nameTableKind: None)
!2993 = !{!2994, !2996, !2998, !3007, !3009, !3011, !3018, !3020}
!2994 = !DIGlobalVariableExpression(var: !2995, expr: !DIExpression())
!2995 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2992, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!2996 = !DIGlobalVariableExpression(var: !2997, expr: !DIExpression())
!2997 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2992, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!2998 = !DIGlobalVariableExpression(var: !2999, expr: !DIExpression())
!2999 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2992, file: !139, line: 1052, type: !3000, isLocal: false, isDefinition: true)
!3000 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !3001)
!3001 = !{!3002, !3003, !3004, !3005, !3006}
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3000, file: !139, line: 68, baseType: !118, size: 32)
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3000, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3000, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3000, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3000, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!3007 = !DIGlobalVariableExpression(var: !3008, expr: !DIExpression())
!3008 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2992, file: !139, line: 116, type: !3000, isLocal: true, isDefinition: true)
!3009 = !DIGlobalVariableExpression(var: !3010, expr: !DIExpression())
!3010 = distinct !DIGlobalVariable(name: "slot0", scope: !2992, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!3011 = !DIGlobalVariableExpression(var: !3012, expr: !DIExpression())
!3012 = distinct !DIGlobalVariable(name: "slotvec", scope: !2992, file: !139, line: 845, type: !3013, isLocal: true, isDefinition: true)
!3013 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3014, size: 64)
!3014 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !3015)
!3015 = !{!3016, !3017}
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3014, file: !139, line: 836, baseType: !134, size: 64)
!3017 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3014, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!3018 = !DIGlobalVariableExpression(var: !3019, expr: !DIExpression())
!3019 = distinct !DIGlobalVariable(name: "nslots", scope: !2992, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!3020 = !DIGlobalVariableExpression(var: !3021, expr: !DIExpression())
!3021 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2992, file: !139, line: 844, type: !3014, isLocal: true, isDefinition: true)
!3022 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !2988, file: !139, line: 406, type: !27)
!3023 = distinct !DISubprogram(name: "gettext_quote", scope: !139, file: !139, line: 207, type: !3024, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !115, retainedNodes: !4)
!3024 = !DISubroutineType(types: !3025)
!3025 = !{!69, !69, !118}
!3026 = !DILocalVariable(name: "msgid", arg: 1, scope: !3023, file: !139, line: 207, type: !69)
!3027 = !DILocation(line: 207, column: 28, scope: !3023)
!3028 = !DILocalVariable(name: "s", arg: 2, scope: !3023, file: !139, line: 207, type: !118)
!3029 = !DILocation(line: 207, column: 54, scope: !3023)
!3030 = !DILocalVariable(name: "translation", scope: !3023, file: !139, line: 209, type: !69)
!3031 = !DILocation(line: 209, column: 15, scope: !3023)
!3032 = !DILocation(line: 209, column: 29, scope: !3023)
!3033 = !DILocalVariable(name: "locale_code", scope: !3023, file: !139, line: 210, type: !69)
!3034 = !DILocation(line: 210, column: 15, scope: !3023)
!3035 = !DILocation(line: 212, column: 7, scope: !3036)
!3036 = distinct !DILexicalBlock(scope: !3023, file: !139, line: 212, column: 7)
!3037 = !DILocation(line: 212, column: 22, scope: !3036)
!3038 = !DILocation(line: 212, column: 19, scope: !3036)
!3039 = !DILocation(line: 212, column: 7, scope: !3023)
!3040 = !DILocation(line: 213, column: 12, scope: !3036)
!3041 = !DILocation(line: 213, column: 5, scope: !3036)
!3042 = !DILocation(line: 233, column: 17, scope: !3023)
!3043 = !DILocation(line: 233, column: 15, scope: !3023)
!3044 = !DILocation(line: 234, column: 7, scope: !3045)
!3045 = distinct !DILexicalBlock(scope: !3023, file: !139, line: 234, column: 7)
!3046 = !DILocation(line: 235, column: 12, scope: !3045)
!3047 = !DILocation(line: 235, column: 21, scope: !3045)
!3048 = !DILocation(line: 235, column: 5, scope: !3045)
!3049 = !DILocation(line: 236, column: 7, scope: !3050)
!3050 = distinct !DILexicalBlock(scope: !3023, file: !139, line: 236, column: 7)
!3051 = !DILocation(line: 237, column: 12, scope: !3050)
!3052 = !DILocation(line: 237, column: 21, scope: !3050)
!3053 = !DILocation(line: 237, column: 5, scope: !3050)
!3054 = !DILocation(line: 239, column: 11, scope: !3023)
!3055 = !DILocation(line: 239, column: 13, scope: !3023)
!3056 = !DILocation(line: 239, column: 3, scope: !3023)
!3057 = !DILocation(line: 240, column: 1, scope: !3023)
!3058 = !DILocalVariable(name: "msgid", arg: 1, scope: !3059, file: !139, line: 207, type: !69)
!3059 = distinct !DISubprogram(name: "gettext_quote", scope: !139, file: !139, line: 207, type: !3024, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3060, retainedNodes: !4)
!3060 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !3061, nameTableKind: None)
!3061 = !{!3062, !3064, !3066, !3075, !3077, !3079, !3086, !3088}
!3062 = !DIGlobalVariableExpression(var: !3063, expr: !DIExpression())
!3063 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3060, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!3064 = !DIGlobalVariableExpression(var: !3065, expr: !DIExpression())
!3065 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3060, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!3066 = !DIGlobalVariableExpression(var: !3067, expr: !DIExpression())
!3067 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3060, file: !139, line: 1052, type: !3068, isLocal: false, isDefinition: true)
!3068 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !3069)
!3069 = !{!3070, !3071, !3072, !3073, !3074}
!3070 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3068, file: !139, line: 68, baseType: !118, size: 32)
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3068, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3068, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3068, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3068, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!3075 = !DIGlobalVariableExpression(var: !3076, expr: !DIExpression())
!3076 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3060, file: !139, line: 116, type: !3068, isLocal: true, isDefinition: true)
!3077 = !DIGlobalVariableExpression(var: !3078, expr: !DIExpression())
!3078 = distinct !DIGlobalVariable(name: "slot0", scope: !3060, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!3079 = !DIGlobalVariableExpression(var: !3080, expr: !DIExpression())
!3080 = distinct !DIGlobalVariable(name: "slotvec", scope: !3060, file: !139, line: 845, type: !3081, isLocal: true, isDefinition: true)
!3081 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3082, size: 64)
!3082 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !3083)
!3083 = !{!3084, !3085}
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3082, file: !139, line: 836, baseType: !134, size: 64)
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3082, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!3086 = !DIGlobalVariableExpression(var: !3087, expr: !DIExpression())
!3087 = distinct !DIGlobalVariable(name: "nslots", scope: !3060, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!3088 = !DIGlobalVariableExpression(var: !3089, expr: !DIExpression())
!3089 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3060, file: !139, line: 844, type: !3082, isLocal: true, isDefinition: true)
!3090 = !DILocalVariable(name: "s", arg: 2, scope: !3059, file: !139, line: 207, type: !118)
!3091 = !DILocalVariable(name: "translation", scope: !3059, file: !139, line: 209, type: !69)
!3092 = !DILocalVariable(name: "locale_code", scope: !3059, file: !139, line: 210, type: !69)
!3093 = distinct !DISubprogram(name: "quotearg_char", scope: !139, file: !139, line: 991, type: !3094, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !115, retainedNodes: !4)
!3094 = !DISubroutineType(types: !3095)
!3095 = !{!6, !69, !7}
!3096 = !DILocalVariable(name: "arg", arg: 1, scope: !3093, file: !139, line: 991, type: !69)
!3097 = !DILocation(line: 991, column: 28, scope: !3093)
!3098 = !DILocalVariable(name: "ch", arg: 2, scope: !3093, file: !139, line: 991, type: !7)
!3099 = !DILocation(line: 991, column: 38, scope: !3093)
!3100 = !DILocation(line: 993, column: 29, scope: !3093)
!3101 = !DILocation(line: 993, column: 44, scope: !3093)
!3102 = !DILocation(line: 993, column: 10, scope: !3093)
!3103 = !DILocation(line: 993, column: 3, scope: !3093)
!3104 = !DILocalVariable(name: "arg", arg: 1, scope: !3105, file: !139, line: 991, type: !69)
!3105 = distinct !DISubprogram(name: "quotearg_char", scope: !139, file: !139, line: 991, type: !3094, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3106, retainedNodes: !4)
!3106 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !3107, nameTableKind: None)
!3107 = !{!3108, !3110, !3112, !3121, !3123, !3125, !3132, !3134}
!3108 = !DIGlobalVariableExpression(var: !3109, expr: !DIExpression())
!3109 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3106, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!3110 = !DIGlobalVariableExpression(var: !3111, expr: !DIExpression())
!3111 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3106, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!3112 = !DIGlobalVariableExpression(var: !3113, expr: !DIExpression())
!3113 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3106, file: !139, line: 1052, type: !3114, isLocal: false, isDefinition: true)
!3114 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !3115)
!3115 = !{!3116, !3117, !3118, !3119, !3120}
!3116 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3114, file: !139, line: 68, baseType: !118, size: 32)
!3117 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3114, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!3118 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3114, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!3119 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3114, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!3120 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3114, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!3121 = !DIGlobalVariableExpression(var: !3122, expr: !DIExpression())
!3122 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3106, file: !139, line: 116, type: !3114, isLocal: true, isDefinition: true)
!3123 = !DIGlobalVariableExpression(var: !3124, expr: !DIExpression())
!3124 = distinct !DIGlobalVariable(name: "slot0", scope: !3106, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!3125 = !DIGlobalVariableExpression(var: !3126, expr: !DIExpression())
!3126 = distinct !DIGlobalVariable(name: "slotvec", scope: !3106, file: !139, line: 845, type: !3127, isLocal: true, isDefinition: true)
!3127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3128, size: 64)
!3128 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !3129)
!3129 = !{!3130, !3131}
!3130 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3128, file: !139, line: 836, baseType: !134, size: 64)
!3131 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3128, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!3132 = !DIGlobalVariableExpression(var: !3133, expr: !DIExpression())
!3133 = distinct !DIGlobalVariable(name: "nslots", scope: !3106, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!3134 = !DIGlobalVariableExpression(var: !3135, expr: !DIExpression())
!3135 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3106, file: !139, line: 844, type: !3128, isLocal: true, isDefinition: true)
!3136 = !DILocalVariable(name: "ch", arg: 2, scope: !3105, file: !139, line: 991, type: !7)
!3137 = distinct !DISubprogram(name: "quotearg_colon", scope: !139, file: !139, line: 997, type: !3138, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !115, retainedNodes: !4)
!3138 = !DISubroutineType(types: !3139)
!3139 = !{!6, !69}
!3140 = !DILocalVariable(name: "arg", arg: 1, scope: !3137, file: !139, line: 997, type: !69)
!3141 = !DILocation(line: 997, column: 29, scope: !3137)
!3142 = !DILocation(line: 999, column: 25, scope: !3137)
!3143 = !DILocation(line: 999, column: 10, scope: !3137)
!3144 = !DILocation(line: 999, column: 3, scope: !3137)
!3145 = !DILocalVariable(name: "arg", arg: 1, scope: !3146, file: !139, line: 997, type: !69)
!3146 = distinct !DISubprogram(name: "quotearg_colon", scope: !139, file: !139, line: 997, type: !3138, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3147, retainedNodes: !4)
!3147 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !3148, nameTableKind: None)
!3148 = !{!3149, !3151, !3153, !3162, !3164, !3166, !3173, !3175}
!3149 = !DIGlobalVariableExpression(var: !3150, expr: !DIExpression())
!3150 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3147, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!3151 = !DIGlobalVariableExpression(var: !3152, expr: !DIExpression())
!3152 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3147, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!3153 = !DIGlobalVariableExpression(var: !3154, expr: !DIExpression())
!3154 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3147, file: !139, line: 1052, type: !3155, isLocal: false, isDefinition: true)
!3155 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !3156)
!3156 = !{!3157, !3158, !3159, !3160, !3161}
!3157 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3155, file: !139, line: 68, baseType: !118, size: 32)
!3158 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3155, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!3159 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3155, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!3160 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3155, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!3161 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3155, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!3162 = !DIGlobalVariableExpression(var: !3163, expr: !DIExpression())
!3163 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3147, file: !139, line: 116, type: !3155, isLocal: true, isDefinition: true)
!3164 = !DIGlobalVariableExpression(var: !3165, expr: !DIExpression())
!3165 = distinct !DIGlobalVariable(name: "slot0", scope: !3147, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!3166 = !DIGlobalVariableExpression(var: !3167, expr: !DIExpression())
!3167 = distinct !DIGlobalVariable(name: "slotvec", scope: !3147, file: !139, line: 845, type: !3168, isLocal: true, isDefinition: true)
!3168 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3169, size: 64)
!3169 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !3170)
!3170 = !{!3171, !3172}
!3171 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3169, file: !139, line: 836, baseType: !134, size: 64)
!3172 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3169, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!3173 = !DIGlobalVariableExpression(var: !3174, expr: !DIExpression())
!3174 = distinct !DIGlobalVariable(name: "nslots", scope: !3147, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!3175 = !DIGlobalVariableExpression(var: !3176, expr: !DIExpression())
!3176 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3147, file: !139, line: 844, type: !3169, isLocal: true, isDefinition: true)
!3177 = distinct !DISubprogram(name: "quote_n_mem", scope: !139, file: !139, line: 1061, type: !3178, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !115, retainedNodes: !4)
!3178 = !DISubroutineType(types: !3179)
!3179 = !{!69, !72, !69, !134}
!3180 = !DILocalVariable(name: "n", arg: 1, scope: !3177, file: !139, line: 1061, type: !72)
!3181 = !DILocation(line: 1061, column: 18, scope: !3177)
!3182 = !DILocalVariable(name: "arg", arg: 2, scope: !3177, file: !139, line: 1061, type: !69)
!3183 = !DILocation(line: 1061, column: 33, scope: !3177)
!3184 = !DILocalVariable(name: "argsize", arg: 3, scope: !3177, file: !139, line: 1061, type: !134)
!3185 = !DILocation(line: 1061, column: 45, scope: !3177)
!3186 = !DILocation(line: 1063, column: 30, scope: !3177)
!3187 = !DILocation(line: 1063, column: 33, scope: !3177)
!3188 = !DILocation(line: 1063, column: 38, scope: !3177)
!3189 = !DILocation(line: 1063, column: 10, scope: !3177)
!3190 = !DILocation(line: 1063, column: 3, scope: !3177)
!3191 = !DILocalVariable(name: "n", arg: 1, scope: !3192, file: !139, line: 1061, type: !72)
!3192 = distinct !DISubprogram(name: "quote_n_mem", scope: !139, file: !139, line: 1061, type: !3178, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3193, retainedNodes: !4)
!3193 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !3194, nameTableKind: None)
!3194 = !{!3195, !3197, !3199, !3208, !3210, !3212, !3219, !3221}
!3195 = !DIGlobalVariableExpression(var: !3196, expr: !DIExpression())
!3196 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3193, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!3197 = !DIGlobalVariableExpression(var: !3198, expr: !DIExpression())
!3198 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3193, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!3199 = !DIGlobalVariableExpression(var: !3200, expr: !DIExpression())
!3200 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3193, file: !139, line: 1052, type: !3201, isLocal: false, isDefinition: true)
!3201 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !3202)
!3202 = !{!3203, !3204, !3205, !3206, !3207}
!3203 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3201, file: !139, line: 68, baseType: !118, size: 32)
!3204 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3201, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!3205 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3201, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!3206 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3201, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!3207 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3201, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!3208 = !DIGlobalVariableExpression(var: !3209, expr: !DIExpression())
!3209 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3193, file: !139, line: 116, type: !3201, isLocal: true, isDefinition: true)
!3210 = !DIGlobalVariableExpression(var: !3211, expr: !DIExpression())
!3211 = distinct !DIGlobalVariable(name: "slot0", scope: !3193, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!3212 = !DIGlobalVariableExpression(var: !3213, expr: !DIExpression())
!3213 = distinct !DIGlobalVariable(name: "slotvec", scope: !3193, file: !139, line: 845, type: !3214, isLocal: true, isDefinition: true)
!3214 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3215, size: 64)
!3215 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !3216)
!3216 = !{!3217, !3218}
!3217 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3215, file: !139, line: 836, baseType: !134, size: 64)
!3218 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3215, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!3219 = !DIGlobalVariableExpression(var: !3220, expr: !DIExpression())
!3220 = distinct !DIGlobalVariable(name: "nslots", scope: !3193, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!3221 = !DIGlobalVariableExpression(var: !3222, expr: !DIExpression())
!3222 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3193, file: !139, line: 844, type: !3215, isLocal: true, isDefinition: true)
!3223 = !DILocalVariable(name: "arg", arg: 2, scope: !3192, file: !139, line: 1061, type: !69)
!3224 = !DILocalVariable(name: "argsize", arg: 3, scope: !3192, file: !139, line: 1061, type: !134)
!3225 = distinct !DISubprogram(name: "quote_n", scope: !139, file: !139, line: 1073, type: !3226, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !115, retainedNodes: !4)
!3226 = !DISubroutineType(types: !3227)
!3227 = !{!69, !72, !69}
!3228 = !DILocalVariable(name: "n", arg: 1, scope: !3225, file: !139, line: 1073, type: !72)
!3229 = !DILocation(line: 1073, column: 14, scope: !3225)
!3230 = !DILocalVariable(name: "arg", arg: 2, scope: !3225, file: !139, line: 1073, type: !69)
!3231 = !DILocation(line: 1073, column: 29, scope: !3225)
!3232 = !DILocation(line: 1075, column: 23, scope: !3225)
!3233 = !DILocation(line: 1075, column: 26, scope: !3225)
!3234 = !DILocation(line: 1075, column: 10, scope: !3225)
!3235 = !DILocation(line: 1075, column: 3, scope: !3225)
!3236 = !DILocalVariable(name: "n", arg: 1, scope: !3237, file: !139, line: 1073, type: !72)
!3237 = distinct !DISubprogram(name: "quote_n", scope: !139, file: !139, line: 1073, type: !3226, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3238, retainedNodes: !4)
!3238 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !3239, nameTableKind: None)
!3239 = !{!3240, !3242, !3244, !3253, !3255, !3257, !3264, !3266}
!3240 = !DIGlobalVariableExpression(var: !3241, expr: !DIExpression())
!3241 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3238, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!3242 = !DIGlobalVariableExpression(var: !3243, expr: !DIExpression())
!3243 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3238, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!3244 = !DIGlobalVariableExpression(var: !3245, expr: !DIExpression())
!3245 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3238, file: !139, line: 1052, type: !3246, isLocal: false, isDefinition: true)
!3246 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !3247)
!3247 = !{!3248, !3249, !3250, !3251, !3252}
!3248 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3246, file: !139, line: 68, baseType: !118, size: 32)
!3249 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3246, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!3250 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3246, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!3251 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3246, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3246, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!3253 = !DIGlobalVariableExpression(var: !3254, expr: !DIExpression())
!3254 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3238, file: !139, line: 116, type: !3246, isLocal: true, isDefinition: true)
!3255 = !DIGlobalVariableExpression(var: !3256, expr: !DIExpression())
!3256 = distinct !DIGlobalVariable(name: "slot0", scope: !3238, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!3257 = !DIGlobalVariableExpression(var: !3258, expr: !DIExpression())
!3258 = distinct !DIGlobalVariable(name: "slotvec", scope: !3238, file: !139, line: 845, type: !3259, isLocal: true, isDefinition: true)
!3259 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3260, size: 64)
!3260 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !3261)
!3261 = !{!3262, !3263}
!3262 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3260, file: !139, line: 836, baseType: !134, size: 64)
!3263 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3260, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!3264 = !DIGlobalVariableExpression(var: !3265, expr: !DIExpression())
!3265 = distinct !DIGlobalVariable(name: "nslots", scope: !3238, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!3266 = !DIGlobalVariableExpression(var: !3267, expr: !DIExpression())
!3267 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3238, file: !139, line: 844, type: !3260, isLocal: true, isDefinition: true)
!3268 = !DILocalVariable(name: "arg", arg: 2, scope: !3237, file: !139, line: 1073, type: !69)
!3269 = distinct !DISubprogram(name: "quote", scope: !139, file: !139, line: 1079, type: !3270, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !115, retainedNodes: !4)
!3270 = !DISubroutineType(types: !3271)
!3271 = !{!69, !69}
!3272 = !DILocalVariable(name: "arg", arg: 1, scope: !3269, file: !139, line: 1079, type: !69)
!3273 = !DILocation(line: 1079, column: 20, scope: !3269)
!3274 = !DILocation(line: 1081, column: 22, scope: !3269)
!3275 = !DILocation(line: 1081, column: 10, scope: !3269)
!3276 = !DILocation(line: 1081, column: 3, scope: !3269)
!3277 = distinct !DISubprogram(name: "getcon", scope: !3278, file: !3278, line: 87, type: !3279, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !208, retainedNodes: !4)
!3278 = !DIFile(filename: "./lib/selinux/selinux.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3279 = !DISubroutineType(types: !3280)
!3280 = !{!72, !3281}
!3281 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3282, size: 64)
!3282 = !DIDerivedType(tag: DW_TAG_typedef, name: "security_context_t", file: !3278, line: 83, baseType: !6)
!3283 = !DILocalVariable(name: "con", arg: 1, scope: !3277, file: !3278, line: 87, type: !3281)
!3284 = !DILocation(line: 87, column: 29, scope: !3277)
!3285 = !DILocation(line: 88, column: 5, scope: !3277)
!3286 = !DILocation(line: 88, column: 11, scope: !3277)
!3287 = !DILocation(line: 88, column: 22, scope: !3277)
!3288 = !DILocalVariable(name: "con", arg: 1, scope: !3289, file: !3278, line: 87, type: !3281)
!3289 = distinct !DISubprogram(name: "getcon", scope: !3278, file: !3278, line: 87, type: !3279, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3290, retainedNodes: !4)
!3290 = distinct !DICompileUnit(language: DW_LANG_C99, file: !209, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3291 = distinct !DISubprogram(name: "parse_user_spec", scope: !179, file: !179, line: 259, type: !3292, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !185, retainedNodes: !4)
!3292 = !DISubroutineType(types: !3293)
!3293 = !{!69, !69, !182, !183, !184, !184}
!3294 = !DILocalVariable(name: "spec", arg: 1, scope: !3291, file: !179, line: 259, type: !69)
!3295 = !DILocation(line: 259, column: 30, scope: !3291)
!3296 = !DILocalVariable(name: "uid", arg: 2, scope: !3291, file: !179, line: 259, type: !182)
!3297 = !DILocation(line: 259, column: 43, scope: !3291)
!3298 = !DILocalVariable(name: "gid", arg: 3, scope: !3291, file: !179, line: 259, type: !183)
!3299 = !DILocation(line: 259, column: 55, scope: !3291)
!3300 = !DILocalVariable(name: "username", arg: 4, scope: !3291, file: !179, line: 260, type: !184)
!3301 = !DILocation(line: 260, column: 25, scope: !3291)
!3302 = !DILocalVariable(name: "groupname", arg: 5, scope: !3291, file: !179, line: 260, type: !184)
!3303 = !DILocation(line: 260, column: 42, scope: !3291)
!3304 = !DILocalVariable(name: "colon", scope: !3291, file: !179, line: 262, type: !69)
!3305 = !DILocation(line: 262, column: 15, scope: !3291)
!3306 = !DILocation(line: 262, column: 23, scope: !3291)
!3307 = !DILocation(line: 262, column: 37, scope: !3291)
!3308 = !DILocation(line: 262, column: 29, scope: !3291)
!3309 = !DILocalVariable(name: "error_msg", scope: !3291, file: !179, line: 263, type: !69)
!3310 = !DILocation(line: 263, column: 15, scope: !3291)
!3311 = !DILocation(line: 264, column: 27, scope: !3291)
!3312 = !DILocation(line: 264, column: 33, scope: !3291)
!3313 = !DILocation(line: 264, column: 40, scope: !3291)
!3314 = !DILocation(line: 264, column: 45, scope: !3291)
!3315 = !DILocation(line: 264, column: 50, scope: !3291)
!3316 = !DILocation(line: 264, column: 60, scope: !3291)
!3317 = !DILocation(line: 264, column: 5, scope: !3291)
!3318 = !DILocation(line: 266, column: 7, scope: !3319)
!3319 = distinct !DILexicalBlock(scope: !3291, file: !179, line: 266, column: 7)
!3320 = !DILocation(line: 266, column: 11, scope: !3319)
!3321 = !DILocation(line: 266, column: 15, scope: !3319)
!3322 = !DILocation(line: 266, column: 21, scope: !3319)
!3323 = !DILocation(line: 266, column: 24, scope: !3319)
!3324 = !DILocation(line: 266, column: 7, scope: !3291)
!3325 = !DILocalVariable(name: "dot", scope: !3326, file: !179, line: 274, type: !69)
!3326 = distinct !DILexicalBlock(scope: !3319, file: !179, line: 267, column: 5)
!3327 = !DILocation(line: 274, column: 19, scope: !3326)
!3328 = !DILocation(line: 274, column: 33, scope: !3326)
!3329 = !DILocation(line: 274, column: 25, scope: !3326)
!3330 = !DILocation(line: 275, column: 11, scope: !3331)
!3331 = distinct !DILexicalBlock(scope: !3326, file: !179, line: 275, column: 11)
!3332 = !DILocation(line: 276, column: 11, scope: !3331)
!3333 = !DILocation(line: 276, column: 38, scope: !3331)
!3334 = !DILocation(line: 276, column: 44, scope: !3331)
!3335 = !DILocation(line: 276, column: 49, scope: !3331)
!3336 = !DILocation(line: 276, column: 54, scope: !3331)
!3337 = !DILocation(line: 276, column: 59, scope: !3331)
!3338 = !DILocation(line: 276, column: 69, scope: !3331)
!3339 = !DILocation(line: 276, column: 16, scope: !3331)
!3340 = !DILocation(line: 275, column: 11, scope: !3326)
!3341 = !DILocation(line: 277, column: 19, scope: !3331)
!3342 = !DILocation(line: 277, column: 9, scope: !3331)
!3343 = !DILocation(line: 278, column: 5, scope: !3326)
!3344 = !DILocation(line: 280, column: 10, scope: !3291)
!3345 = !DILocation(line: 280, column: 3, scope: !3291)
!3346 = !DILocalVariable(name: "error_msg", scope: !3347, file: !179, line: 263, type: !69)
!3347 = distinct !DISubprogram(name: "parse_user_spec", scope: !179, file: !179, line: 259, type: !3292, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3348, retainedNodes: !4)
!3348 = distinct !DICompileUnit(language: DW_LANG_C99, file: !186, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !187, globals: !3349, nameTableKind: None)
!3349 = !{!3350, !3353, !3355}
!3350 = !DIGlobalVariableExpression(var: !3351, expr: !DIExpression())
!3351 = distinct !DIGlobalVariable(name: "E_invalid_user", scope: !3352, file: !179, line: 106, type: !69, isLocal: true, isDefinition: true)
!3352 = distinct !DISubprogram(name: "parse_with_separator", scope: !179, file: !179, line: 102, type: !180, scopeLine: 105, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3348, retainedNodes: !4)
!3353 = !DIGlobalVariableExpression(var: !3354, expr: !DIExpression())
!3354 = distinct !DIGlobalVariable(name: "E_invalid_group", scope: !3352, file: !179, line: 107, type: !69, isLocal: true, isDefinition: true)
!3355 = !DIGlobalVariableExpression(var: !3356, expr: !DIExpression())
!3356 = distinct !DIGlobalVariable(name: "E_bad_spec", scope: !3352, file: !179, line: 108, type: !69, isLocal: true, isDefinition: true)
!3357 = !DILocalVariable(name: "spec", arg: 1, scope: !178, file: !179, line: 102, type: !69)
!3358 = !DILocation(line: 102, column: 35, scope: !178)
!3359 = !DILocalVariable(name: "separator", arg: 2, scope: !178, file: !179, line: 102, type: !69)
!3360 = !DILocation(line: 102, column: 53, scope: !178)
!3361 = !DILocalVariable(name: "uid", arg: 3, scope: !178, file: !179, line: 103, type: !182)
!3362 = !DILocation(line: 103, column: 30, scope: !178)
!3363 = !DILocalVariable(name: "gid", arg: 4, scope: !178, file: !179, line: 103, type: !183)
!3364 = !DILocation(line: 103, column: 42, scope: !178)
!3365 = !DILocalVariable(name: "username", arg: 5, scope: !178, file: !179, line: 104, type: !184)
!3366 = !DILocation(line: 104, column: 30, scope: !178)
!3367 = !DILocalVariable(name: "groupname", arg: 6, scope: !178, file: !179, line: 104, type: !184)
!3368 = !DILocation(line: 104, column: 47, scope: !178)
!3369 = !DILocalVariable(name: "error_msg", scope: !178, file: !179, line: 110, type: !69)
!3370 = !DILocation(line: 110, column: 15, scope: !178)
!3371 = !DILocalVariable(name: "pwd", scope: !178, file: !179, line: 111, type: !3372)
!3372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3373, size: 64)
!3373 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "passwd", file: !611, line: 49, size: 384, elements: !3374)
!3374 = !{!3375, !3376, !3377, !3378, !3379, !3380, !3381}
!3375 = !DIDerivedType(tag: DW_TAG_member, name: "pw_name", scope: !3373, file: !611, line: 51, baseType: !6, size: 64)
!3376 = !DIDerivedType(tag: DW_TAG_member, name: "pw_passwd", scope: !3373, file: !611, line: 52, baseType: !6, size: 64, offset: 64)
!3377 = !DIDerivedType(tag: DW_TAG_member, name: "pw_uid", scope: !3373, file: !611, line: 54, baseType: !14, size: 32, offset: 128)
!3378 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gid", scope: !3373, file: !611, line: 55, baseType: !22, size: 32, offset: 160)
!3379 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gecos", scope: !3373, file: !611, line: 56, baseType: !6, size: 64, offset: 192)
!3380 = !DIDerivedType(tag: DW_TAG_member, name: "pw_dir", scope: !3373, file: !611, line: 57, baseType: !6, size: 64, offset: 256)
!3381 = !DIDerivedType(tag: DW_TAG_member, name: "pw_shell", scope: !3373, file: !611, line: 58, baseType: !6, size: 64, offset: 320)
!3382 = !DILocation(line: 111, column: 18, scope: !178)
!3383 = !DILocalVariable(name: "grp", scope: !178, file: !179, line: 112, type: !3384)
!3384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3385, size: 64)
!3385 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "group", file: !1036, line: 42, size: 256, elements: !3386)
!3386 = !{!3387, !3388, !3389, !3390}
!3387 = !DIDerivedType(tag: DW_TAG_member, name: "gr_name", scope: !3385, file: !1036, line: 44, baseType: !6, size: 64)
!3388 = !DIDerivedType(tag: DW_TAG_member, name: "gr_passwd", scope: !3385, file: !1036, line: 45, baseType: !6, size: 64, offset: 64)
!3389 = !DIDerivedType(tag: DW_TAG_member, name: "gr_gid", scope: !3385, file: !1036, line: 46, baseType: !22, size: 32, offset: 128)
!3390 = !DIDerivedType(tag: DW_TAG_member, name: "gr_mem", scope: !3385, file: !1036, line: 47, baseType: !184, size: 64, offset: 192)
!3391 = !DILocation(line: 112, column: 17, scope: !178)
!3392 = !DILocalVariable(name: "u", scope: !178, file: !179, line: 113, type: !6)
!3393 = !DILocation(line: 113, column: 9, scope: !178)
!3394 = !DILocalVariable(name: "g", scope: !178, file: !179, line: 114, type: !69)
!3395 = !DILocation(line: 114, column: 15, scope: !178)
!3396 = !DILocalVariable(name: "gname", scope: !178, file: !179, line: 115, type: !6)
!3397 = !DILocation(line: 115, column: 9, scope: !178)
!3398 = !DILocalVariable(name: "unum", scope: !178, file: !179, line: 116, type: !12)
!3399 = !DILocation(line: 116, column: 9, scope: !178)
!3400 = !DILocation(line: 116, column: 17, scope: !178)
!3401 = !DILocation(line: 116, column: 16, scope: !178)
!3402 = !DILocalVariable(name: "gnum", scope: !178, file: !179, line: 117, type: !21)
!3403 = !DILocation(line: 117, column: 9, scope: !178)
!3404 = !DILocation(line: 117, column: 16, scope: !178)
!3405 = !DILocation(line: 117, column: 23, scope: !178)
!3406 = !DILocation(line: 117, column: 22, scope: !178)
!3407 = !DILocation(line: 119, column: 13, scope: !178)
!3408 = !DILocation(line: 120, column: 7, scope: !3409)
!3409 = distinct !DILexicalBlock(scope: !178, file: !179, line: 120, column: 7)
!3410 = !DILocation(line: 120, column: 7, scope: !178)
!3411 = !DILocation(line: 121, column: 6, scope: !3409)
!3412 = !DILocation(line: 121, column: 15, scope: !3409)
!3413 = !DILocation(line: 121, column: 5, scope: !3409)
!3414 = !DILocation(line: 122, column: 7, scope: !3415)
!3415 = distinct !DILexicalBlock(scope: !178, file: !179, line: 122, column: 7)
!3416 = !DILocation(line: 122, column: 7, scope: !178)
!3417 = !DILocation(line: 123, column: 6, scope: !3415)
!3418 = !DILocation(line: 123, column: 16, scope: !3415)
!3419 = !DILocation(line: 123, column: 5, scope: !3415)
!3420 = !DILocation(line: 129, column: 5, scope: !178)
!3421 = !DILocation(line: 130, column: 7, scope: !3422)
!3422 = distinct !DILexicalBlock(scope: !178, file: !179, line: 130, column: 7)
!3423 = !DILocation(line: 130, column: 17, scope: !3422)
!3424 = !DILocation(line: 130, column: 7, scope: !178)
!3425 = !DILocation(line: 132, column: 12, scope: !3426)
!3426 = distinct !DILexicalBlock(scope: !3427, file: !179, line: 132, column: 11)
!3427 = distinct !DILexicalBlock(scope: !3422, file: !179, line: 131, column: 5)
!3428 = !DILocation(line: 132, column: 11, scope: !3426)
!3429 = !DILocation(line: 132, column: 11, scope: !3427)
!3430 = !DILocation(line: 133, column: 22, scope: !3426)
!3431 = !DILocation(line: 133, column: 13, scope: !3426)
!3432 = !DILocation(line: 133, column: 11, scope: !3426)
!3433 = !DILocation(line: 133, column: 9, scope: !3426)
!3434 = !DILocation(line: 134, column: 5, scope: !3427)
!3435 = !DILocalVariable(name: "ulen", scope: !3436, file: !179, line: 137, type: !134)
!3436 = distinct !DILexicalBlock(scope: !3422, file: !179, line: 136, column: 5)
!3437 = !DILocation(line: 137, column: 14, scope: !3436)
!3438 = !DILocation(line: 137, column: 21, scope: !3436)
!3439 = !DILocation(line: 137, column: 33, scope: !3436)
!3440 = !DILocation(line: 137, column: 31, scope: !3436)
!3441 = !DILocation(line: 138, column: 11, scope: !3442)
!3442 = distinct !DILexicalBlock(scope: !3436, file: !179, line: 138, column: 11)
!3443 = !DILocation(line: 138, column: 16, scope: !3442)
!3444 = !DILocation(line: 138, column: 11, scope: !3436)
!3445 = !DILocation(line: 140, column: 24, scope: !3446)
!3446 = distinct !DILexicalBlock(scope: !3442, file: !179, line: 139, column: 9)
!3447 = !DILocation(line: 140, column: 30, scope: !3446)
!3448 = !DILocation(line: 140, column: 35, scope: !3446)
!3449 = !DILocation(line: 140, column: 15, scope: !3446)
!3450 = !DILocation(line: 140, column: 13, scope: !3446)
!3451 = !DILocation(line: 141, column: 11, scope: !3446)
!3452 = !DILocation(line: 141, column: 13, scope: !3446)
!3453 = !DILocation(line: 141, column: 19, scope: !3446)
!3454 = !DILocation(line: 142, column: 9, scope: !3446)
!3455 = !DILocation(line: 145, column: 8, scope: !178)
!3456 = !DILocation(line: 145, column: 18, scope: !178)
!3457 = !DILocation(line: 145, column: 26, scope: !178)
!3458 = !DILocation(line: 145, column: 31, scope: !178)
!3459 = !DILocation(line: 145, column: 41, scope: !178)
!3460 = !DILocation(line: 145, column: 29, scope: !178)
!3461 = !DILocation(line: 145, column: 46, scope: !178)
!3462 = !DILocation(line: 147, column: 10, scope: !178)
!3463 = !DILocation(line: 147, column: 20, scope: !178)
!3464 = !DILocation(line: 145, column: 5, scope: !178)
!3465 = !DILocation(line: 158, column: 7, scope: !3466)
!3466 = distinct !DILexicalBlock(scope: !178, file: !179, line: 158, column: 7)
!3467 = !DILocation(line: 158, column: 9, scope: !3466)
!3468 = !DILocation(line: 158, column: 7, scope: !178)
!3469 = !DILocation(line: 161, column: 15, scope: !3470)
!3470 = distinct !DILexicalBlock(scope: !3466, file: !179, line: 159, column: 5)
!3471 = !DILocation(line: 161, column: 14, scope: !3470)
!3472 = !DILocation(line: 161, column: 17, scope: !3470)
!3473 = !DILocation(line: 161, column: 43, scope: !3470)
!3474 = !DILocation(line: 161, column: 33, scope: !3470)
!3475 = !DILocation(line: 161, column: 11, scope: !3470)
!3476 = !DILocation(line: 162, column: 11, scope: !3477)
!3477 = distinct !DILexicalBlock(scope: !3470, file: !179, line: 162, column: 11)
!3478 = !DILocation(line: 162, column: 15, scope: !3477)
!3479 = !DILocation(line: 162, column: 11, scope: !3470)
!3480 = !DILocalVariable(name: "use_login_group", scope: !3481, file: !179, line: 164, type: !27)
!3481 = distinct !DILexicalBlock(scope: !3477, file: !179, line: 163, column: 9)
!3482 = !DILocation(line: 164, column: 16, scope: !3481)
!3483 = !DILocation(line: 164, column: 35, scope: !3481)
!3484 = !DILocation(line: 164, column: 45, scope: !3481)
!3485 = !DILocation(line: 164, column: 53, scope: !3481)
!3486 = !DILocation(line: 164, column: 56, scope: !3481)
!3487 = !DILocation(line: 164, column: 58, scope: !3481)
!3488 = !DILocation(line: 0, scope: !3481)
!3489 = !DILocation(line: 165, column: 15, scope: !3490)
!3490 = distinct !DILexicalBlock(scope: !3481, file: !179, line: 165, column: 15)
!3491 = !DILocation(line: 165, column: 15, scope: !3481)
!3492 = !DILocation(line: 169, column: 27, scope: !3493)
!3493 = distinct !DILexicalBlock(scope: !3490, file: !179, line: 166, column: 13)
!3494 = !DILocation(line: 169, column: 25, scope: !3493)
!3495 = !DILocation(line: 170, column: 13, scope: !3493)
!3496 = !DILocalVariable(name: "tmp", scope: !3497, file: !179, line: 173, type: !84)
!3497 = distinct !DILexicalBlock(scope: !3490, file: !179, line: 172, column: 13)
!3498 = !DILocation(line: 173, column: 33, scope: !3497)
!3499 = !DILocation(line: 174, column: 29, scope: !3500)
!3500 = distinct !DILexicalBlock(scope: !3497, file: !179, line: 174, column: 19)
!3501 = !DILocation(line: 174, column: 19, scope: !3500)
!3502 = !DILocation(line: 174, column: 52, scope: !3500)
!3503 = !DILocation(line: 175, column: 19, scope: !3500)
!3504 = !DILocation(line: 175, column: 22, scope: !3500)
!3505 = !DILocation(line: 175, column: 26, scope: !3500)
!3506 = !DILocation(line: 175, column: 36, scope: !3500)
!3507 = !DILocation(line: 175, column: 47, scope: !3500)
!3508 = !DILocation(line: 175, column: 39, scope: !3500)
!3509 = !DILocation(line: 175, column: 51, scope: !3500)
!3510 = !DILocation(line: 174, column: 19, scope: !3497)
!3511 = !DILocation(line: 176, column: 24, scope: !3500)
!3512 = !DILocation(line: 176, column: 22, scope: !3500)
!3513 = !DILocation(line: 176, column: 17, scope: !3500)
!3514 = !DILocation(line: 178, column: 29, scope: !3500)
!3515 = !DILocation(line: 178, column: 27, scope: !3500)
!3516 = !DILocation(line: 180, column: 9, scope: !3481)
!3517 = !DILocation(line: 183, column: 18, scope: !3518)
!3518 = distinct !DILexicalBlock(scope: !3477, file: !179, line: 182, column: 9)
!3519 = !DILocation(line: 183, column: 23, scope: !3518)
!3520 = !DILocation(line: 183, column: 16, scope: !3518)
!3521 = !DILocation(line: 184, column: 15, scope: !3522)
!3522 = distinct !DILexicalBlock(scope: !3518, file: !179, line: 184, column: 15)
!3523 = !DILocation(line: 184, column: 17, scope: !3522)
!3524 = !DILocation(line: 184, column: 25, scope: !3522)
!3525 = !DILocation(line: 184, column: 28, scope: !3522)
!3526 = !DILocation(line: 184, column: 38, scope: !3522)
!3527 = !DILocation(line: 184, column: 15, scope: !3518)
!3528 = !DILocalVariable(name: "buf", scope: !3529, file: !179, line: 188, type: !53)
!3529 = distinct !DILexicalBlock(scope: !3522, file: !179, line: 185, column: 13)
!3530 = !DILocation(line: 188, column: 20, scope: !3529)
!3531 = !DILocation(line: 189, column: 22, scope: !3529)
!3532 = !DILocation(line: 189, column: 27, scope: !3529)
!3533 = !DILocation(line: 189, column: 20, scope: !3529)
!3534 = !DILocation(line: 190, column: 31, scope: !3529)
!3535 = !DILocation(line: 190, column: 21, scope: !3529)
!3536 = !DILocation(line: 190, column: 19, scope: !3529)
!3537 = !DILocation(line: 191, column: 32, scope: !3529)
!3538 = !DILocation(line: 191, column: 38, scope: !3529)
!3539 = !DILocation(line: 191, column: 43, scope: !3529)
!3540 = !DILocation(line: 191, column: 64, scope: !3529)
!3541 = !DILocation(line: 191, column: 70, scope: !3529)
!3542 = !DILocation(line: 191, column: 53, scope: !3529)
!3543 = !DILocation(line: 191, column: 23, scope: !3529)
!3544 = !DILocation(line: 191, column: 21, scope: !3529)
!3545 = !DILocation(line: 192, column: 15, scope: !3529)
!3546 = !DILocation(line: 193, column: 13, scope: !3529)
!3547 = !DILocation(line: 195, column: 7, scope: !3470)
!3548 = !DILocation(line: 196, column: 5, scope: !3470)
!3549 = !DILocation(line: 198, column: 7, scope: !3550)
!3550 = distinct !DILexicalBlock(scope: !178, file: !179, line: 198, column: 7)
!3551 = !DILocation(line: 198, column: 9, scope: !3550)
!3552 = !DILocation(line: 198, column: 17, scope: !3550)
!3553 = !DILocation(line: 198, column: 20, scope: !3550)
!3554 = !DILocation(line: 198, column: 30, scope: !3550)
!3555 = !DILocation(line: 198, column: 7, scope: !178)
!3556 = !DILocation(line: 202, column: 15, scope: !3557)
!3557 = distinct !DILexicalBlock(scope: !3550, file: !179, line: 199, column: 5)
!3558 = !DILocation(line: 202, column: 14, scope: !3557)
!3559 = !DILocation(line: 202, column: 17, scope: !3557)
!3560 = !DILocation(line: 202, column: 43, scope: !3557)
!3561 = !DILocation(line: 202, column: 33, scope: !3557)
!3562 = !DILocation(line: 202, column: 11, scope: !3557)
!3563 = !DILocation(line: 203, column: 11, scope: !3564)
!3564 = distinct !DILexicalBlock(scope: !3557, file: !179, line: 203, column: 11)
!3565 = !DILocation(line: 203, column: 15, scope: !3564)
!3566 = !DILocation(line: 203, column: 11, scope: !3557)
!3567 = !DILocalVariable(name: "tmp", scope: !3568, file: !179, line: 205, type: !84)
!3568 = distinct !DILexicalBlock(scope: !3564, file: !179, line: 204, column: 9)
!3569 = !DILocation(line: 205, column: 29, scope: !3568)
!3570 = !DILocation(line: 206, column: 25, scope: !3571)
!3571 = distinct !DILexicalBlock(scope: !3568, file: !179, line: 206, column: 15)
!3572 = !DILocation(line: 206, column: 15, scope: !3571)
!3573 = !DILocation(line: 206, column: 48, scope: !3571)
!3574 = !DILocation(line: 207, column: 15, scope: !3571)
!3575 = !DILocation(line: 207, column: 18, scope: !3571)
!3576 = !DILocation(line: 207, column: 22, scope: !3571)
!3577 = !DILocation(line: 207, column: 32, scope: !3571)
!3578 = !DILocation(line: 207, column: 43, scope: !3571)
!3579 = !DILocation(line: 207, column: 35, scope: !3571)
!3580 = !DILocation(line: 207, column: 47, scope: !3571)
!3581 = !DILocation(line: 206, column: 15, scope: !3568)
!3582 = !DILocation(line: 208, column: 20, scope: !3571)
!3583 = !DILocation(line: 208, column: 18, scope: !3571)
!3584 = !DILocation(line: 208, column: 13, scope: !3571)
!3585 = !DILocation(line: 210, column: 25, scope: !3571)
!3586 = !DILocation(line: 210, column: 23, scope: !3571)
!3587 = !DILocation(line: 211, column: 9, scope: !3568)
!3588 = !DILocation(line: 213, column: 16, scope: !3564)
!3589 = !DILocation(line: 213, column: 21, scope: !3564)
!3590 = !DILocation(line: 213, column: 14, scope: !3564)
!3591 = !DILocation(line: 214, column: 7, scope: !3557)
!3592 = !DILocation(line: 215, column: 24, scope: !3557)
!3593 = !DILocation(line: 215, column: 15, scope: !3557)
!3594 = !DILocation(line: 215, column: 13, scope: !3557)
!3595 = !DILocation(line: 216, column: 5, scope: !3557)
!3596 = !DILocation(line: 218, column: 7, scope: !3597)
!3597 = distinct !DILexicalBlock(scope: !178, file: !179, line: 218, column: 7)
!3598 = !DILocation(line: 218, column: 17, scope: !3597)
!3599 = !DILocation(line: 218, column: 7, scope: !178)
!3600 = !DILocation(line: 220, column: 14, scope: !3601)
!3601 = distinct !DILexicalBlock(scope: !3597, file: !179, line: 219, column: 5)
!3602 = !DILocation(line: 220, column: 8, scope: !3601)
!3603 = !DILocation(line: 220, column: 12, scope: !3601)
!3604 = !DILocation(line: 221, column: 11, scope: !3605)
!3605 = distinct !DILexicalBlock(scope: !3601, file: !179, line: 221, column: 11)
!3606 = !DILocation(line: 221, column: 11, scope: !3601)
!3607 = !DILocation(line: 222, column: 16, scope: !3605)
!3608 = !DILocation(line: 222, column: 10, scope: !3605)
!3609 = !DILocation(line: 222, column: 14, scope: !3605)
!3610 = !DILocation(line: 222, column: 9, scope: !3605)
!3611 = !DILocation(line: 223, column: 11, scope: !3612)
!3612 = distinct !DILexicalBlock(scope: !3601, file: !179, line: 223, column: 11)
!3613 = !DILocation(line: 223, column: 11, scope: !3601)
!3614 = !DILocation(line: 225, column: 23, scope: !3615)
!3615 = distinct !DILexicalBlock(scope: !3612, file: !179, line: 224, column: 9)
!3616 = !DILocation(line: 225, column: 12, scope: !3615)
!3617 = !DILocation(line: 225, column: 21, scope: !3615)
!3618 = !DILocation(line: 226, column: 13, scope: !3615)
!3619 = !DILocation(line: 227, column: 9, scope: !3615)
!3620 = !DILocation(line: 228, column: 11, scope: !3621)
!3621 = distinct !DILexicalBlock(scope: !3601, file: !179, line: 228, column: 11)
!3622 = !DILocation(line: 228, column: 11, scope: !3601)
!3623 = !DILocation(line: 230, column: 24, scope: !3624)
!3624 = distinct !DILexicalBlock(scope: !3621, file: !179, line: 229, column: 9)
!3625 = !DILocation(line: 230, column: 12, scope: !3624)
!3626 = !DILocation(line: 230, column: 22, scope: !3624)
!3627 = !DILocation(line: 231, column: 17, scope: !3624)
!3628 = !DILocation(line: 232, column: 9, scope: !3624)
!3629 = !DILocation(line: 233, column: 5, scope: !3601)
!3630 = !DILocation(line: 235, column: 9, scope: !178)
!3631 = !DILocation(line: 235, column: 3, scope: !178)
!3632 = !DILocation(line: 236, column: 9, scope: !178)
!3633 = !DILocation(line: 236, column: 3, scope: !178)
!3634 = !DILocation(line: 237, column: 10, scope: !178)
!3635 = !DILocation(line: 237, column: 22, scope: !178)
!3636 = !DILocation(line: 237, column: 3, scope: !178)
!3637 = !DILocalVariable(name: "spec", arg: 1, scope: !3638, file: !179, line: 102, type: !69)
!3638 = distinct !DISubprogram(name: "parse_with_separator", scope: !179, file: !179, line: 102, type: !180, scopeLine: 105, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3639, retainedNodes: !4)
!3639 = distinct !DICompileUnit(language: DW_LANG_C99, file: !186, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !187, globals: !3640, nameTableKind: None)
!3640 = !{!3641, !3643, !3645}
!3641 = !DIGlobalVariableExpression(var: !3642, expr: !DIExpression())
!3642 = distinct !DIGlobalVariable(name: "E_invalid_user", scope: !3638, file: !179, line: 106, type: !69, isLocal: true, isDefinition: true)
!3643 = !DIGlobalVariableExpression(var: !3644, expr: !DIExpression())
!3644 = distinct !DIGlobalVariable(name: "E_invalid_group", scope: !3638, file: !179, line: 107, type: !69, isLocal: true, isDefinition: true)
!3645 = !DIGlobalVariableExpression(var: !3646, expr: !DIExpression())
!3646 = distinct !DIGlobalVariable(name: "E_bad_spec", scope: !3638, file: !179, line: 108, type: !69, isLocal: true, isDefinition: true)
!3647 = !DILocalVariable(name: "separator", arg: 2, scope: !3638, file: !179, line: 102, type: !69)
!3648 = !DILocalVariable(name: "uid", arg: 3, scope: !3638, file: !179, line: 103, type: !182)
!3649 = !DILocalVariable(name: "gid", arg: 4, scope: !3638, file: !179, line: 103, type: !183)
!3650 = !DILocalVariable(name: "username", arg: 5, scope: !3638, file: !179, line: 104, type: !184)
!3651 = !DILocalVariable(name: "groupname", arg: 6, scope: !3638, file: !179, line: 104, type: !184)
!3652 = !DILocalVariable(name: "error_msg", scope: !3638, file: !179, line: 110, type: !69)
!3653 = !DILocalVariable(name: "pwd", scope: !3638, file: !179, line: 111, type: !3654)
!3654 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3655, size: 64)
!3655 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "passwd", file: !611, line: 49, size: 384, elements: !3656)
!3656 = !{!3657, !3658, !3659, !3660, !3661, !3662, !3663}
!3657 = !DIDerivedType(tag: DW_TAG_member, name: "pw_name", scope: !3655, file: !611, line: 51, baseType: !6, size: 64)
!3658 = !DIDerivedType(tag: DW_TAG_member, name: "pw_passwd", scope: !3655, file: !611, line: 52, baseType: !6, size: 64, offset: 64)
!3659 = !DIDerivedType(tag: DW_TAG_member, name: "pw_uid", scope: !3655, file: !611, line: 54, baseType: !14, size: 32, offset: 128)
!3660 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gid", scope: !3655, file: !611, line: 55, baseType: !22, size: 32, offset: 160)
!3661 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gecos", scope: !3655, file: !611, line: 56, baseType: !6, size: 64, offset: 192)
!3662 = !DIDerivedType(tag: DW_TAG_member, name: "pw_dir", scope: !3655, file: !611, line: 57, baseType: !6, size: 64, offset: 256)
!3663 = !DIDerivedType(tag: DW_TAG_member, name: "pw_shell", scope: !3655, file: !611, line: 58, baseType: !6, size: 64, offset: 320)
!3664 = !DILocalVariable(name: "grp", scope: !3638, file: !179, line: 112, type: !3665)
!3665 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3666, size: 64)
!3666 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "group", file: !1036, line: 42, size: 256, elements: !3667)
!3667 = !{!3668, !3669, !3670, !3671}
!3668 = !DIDerivedType(tag: DW_TAG_member, name: "gr_name", scope: !3666, file: !1036, line: 44, baseType: !6, size: 64)
!3669 = !DIDerivedType(tag: DW_TAG_member, name: "gr_passwd", scope: !3666, file: !1036, line: 45, baseType: !6, size: 64, offset: 64)
!3670 = !DIDerivedType(tag: DW_TAG_member, name: "gr_gid", scope: !3666, file: !1036, line: 46, baseType: !22, size: 32, offset: 128)
!3671 = !DIDerivedType(tag: DW_TAG_member, name: "gr_mem", scope: !3666, file: !1036, line: 47, baseType: !184, size: 64, offset: 192)
!3672 = !DILocalVariable(name: "u", scope: !3638, file: !179, line: 113, type: !6)
!3673 = !DILocalVariable(name: "g", scope: !3638, file: !179, line: 114, type: !69)
!3674 = !DILocalVariable(name: "gname", scope: !3638, file: !179, line: 115, type: !6)
!3675 = !DILocalVariable(name: "unum", scope: !3638, file: !179, line: 116, type: !12)
!3676 = !DILocalVariable(name: "gnum", scope: !3638, file: !179, line: 117, type: !21)
!3677 = distinct !DISubprogram(name: "version_etc_arn", scope: !3678, file: !3678, line: 61, type: !3679, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !210, retainedNodes: !4)
!3678 = !DIFile(filename: "lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3679 = !DISubroutineType(types: !3680)
!3680 = !{null, !3681, !69, !69, !69, !3734, !134}
!3681 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3682, size: 64)
!3682 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3683, line: 7, baseType: !3684)
!3683 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!3684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3685, line: 49, size: 1728, elements: !3686)
!3685 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!3686 = !{!3687, !3688, !3689, !3690, !3691, !3692, !3693, !3694, !3695, !3696, !3697, !3698, !3699, !3702, !3704, !3705, !3706, !3708, !3709, !3711, !3715, !3718, !3720, !3723, !3726, !3727, !3728, !3729, !3730}
!3687 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3684, file: !3685, line: 51, baseType: !72, size: 32)
!3688 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3684, file: !3685, line: 54, baseType: !6, size: 64, offset: 64)
!3689 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3684, file: !3685, line: 55, baseType: !6, size: 64, offset: 128)
!3690 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3684, file: !3685, line: 56, baseType: !6, size: 64, offset: 192)
!3691 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3684, file: !3685, line: 57, baseType: !6, size: 64, offset: 256)
!3692 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3684, file: !3685, line: 58, baseType: !6, size: 64, offset: 320)
!3693 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3684, file: !3685, line: 59, baseType: !6, size: 64, offset: 384)
!3694 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3684, file: !3685, line: 60, baseType: !6, size: 64, offset: 448)
!3695 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3684, file: !3685, line: 61, baseType: !6, size: 64, offset: 512)
!3696 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3684, file: !3685, line: 64, baseType: !6, size: 64, offset: 576)
!3697 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3684, file: !3685, line: 65, baseType: !6, size: 64, offset: 640)
!3698 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3684, file: !3685, line: 66, baseType: !6, size: 64, offset: 704)
!3699 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3684, file: !3685, line: 68, baseType: !3700, size: 64, offset: 768)
!3700 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3701, size: 64)
!3701 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !3685, line: 36, flags: DIFlagFwdDecl)
!3702 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3684, file: !3685, line: 70, baseType: !3703, size: 64, offset: 832)
!3703 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3684, size: 64)
!3704 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3684, file: !3685, line: 72, baseType: !72, size: 32, offset: 896)
!3705 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3684, file: !3685, line: 73, baseType: !72, size: 32, offset: 928)
!3706 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3684, file: !3685, line: 74, baseType: !3707, size: 64, offset: 960)
!3707 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !15, line: 152, baseType: !880)
!3708 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3684, file: !3685, line: 77, baseType: !133, size: 16, offset: 1024)
!3709 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3684, file: !3685, line: 78, baseType: !3710, size: 8, offset: 1040)
!3710 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!3711 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3684, file: !3685, line: 79, baseType: !3712, size: 8, offset: 1048)
!3712 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 8, elements: !3713)
!3713 = !{!3714}
!3714 = !DISubrange(count: 1)
!3715 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3684, file: !3685, line: 81, baseType: !3716, size: 64, offset: 1088)
!3716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3717, size: 64)
!3717 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !3685, line: 43, baseType: null)
!3718 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3684, file: !3685, line: 89, baseType: !3719, size: 64, offset: 1152)
!3719 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !15, line: 153, baseType: !880)
!3720 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3684, file: !3685, line: 91, baseType: !3721, size: 64, offset: 1216)
!3721 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3722, size: 64)
!3722 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !3685, line: 37, flags: DIFlagFwdDecl)
!3723 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3684, file: !3685, line: 92, baseType: !3724, size: 64, offset: 1280)
!3724 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3725, size: 64)
!3725 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !3685, line: 38, flags: DIFlagFwdDecl)
!3726 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3684, file: !3685, line: 93, baseType: !3703, size: 64, offset: 1344)
!3727 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3684, file: !3685, line: 94, baseType: !8, size: 64, offset: 1408)
!3728 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3684, file: !3685, line: 95, baseType: !134, size: 64, offset: 1472)
!3729 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3684, file: !3685, line: 96, baseType: !72, size: 32, offset: 1536)
!3730 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3684, file: !3685, line: 98, baseType: !3731, size: 160, offset: 1568)
!3731 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 160, elements: !3732)
!3732 = !{!3733}
!3733 = !DISubrange(count: 20)
!3734 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !141, size: 64)
!3735 = !DILocalVariable(name: "stream", arg: 1, scope: !3677, file: !3678, line: 61, type: !3681)
!3736 = !DILocation(line: 61, column: 24, scope: !3677)
!3737 = !DILocalVariable(name: "command_name", arg: 2, scope: !3677, file: !3678, line: 62, type: !69)
!3738 = !DILocation(line: 62, column: 30, scope: !3677)
!3739 = !DILocalVariable(name: "package", arg: 3, scope: !3677, file: !3678, line: 62, type: !69)
!3740 = !DILocation(line: 62, column: 56, scope: !3677)
!3741 = !DILocalVariable(name: "version", arg: 4, scope: !3677, file: !3678, line: 63, type: !69)
!3742 = !DILocation(line: 63, column: 30, scope: !3677)
!3743 = !DILocalVariable(name: "authors", arg: 5, scope: !3677, file: !3678, line: 64, type: !3734)
!3744 = !DILocation(line: 64, column: 39, scope: !3677)
!3745 = !DILocalVariable(name: "n_authors", arg: 6, scope: !3677, file: !3678, line: 64, type: !134)
!3746 = !DILocation(line: 64, column: 55, scope: !3677)
!3747 = !DILocation(line: 66, column: 7, scope: !3748)
!3748 = distinct !DILexicalBlock(scope: !3677, file: !3678, line: 66, column: 7)
!3749 = !DILocation(line: 66, column: 7, scope: !3677)
!3750 = !DILocation(line: 67, column: 14, scope: !3748)
!3751 = !DILocation(line: 67, column: 38, scope: !3748)
!3752 = !DILocation(line: 67, column: 52, scope: !3748)
!3753 = !DILocation(line: 67, column: 61, scope: !3748)
!3754 = !DILocation(line: 67, column: 5, scope: !3748)
!3755 = !DILocation(line: 69, column: 14, scope: !3748)
!3756 = !DILocation(line: 69, column: 33, scope: !3748)
!3757 = !DILocation(line: 69, column: 42, scope: !3748)
!3758 = !DILocation(line: 69, column: 5, scope: !3748)
!3759 = !DILocation(line: 83, column: 12, scope: !3677)
!3760 = !DILocation(line: 83, column: 43, scope: !3677)
!3761 = !DILocation(line: 83, column: 3, scope: !3677)
!3762 = !DILocation(line: 85, column: 3, scope: !3677)
!3763 = !DILocation(line: 88, column: 12, scope: !3677)
!3764 = !DILocation(line: 88, column: 20, scope: !3677)
!3765 = !DILocation(line: 88, column: 3, scope: !3677)
!3766 = !DILocation(line: 95, column: 3, scope: !3677)
!3767 = !DILocation(line: 97, column: 11, scope: !3677)
!3768 = !DILocation(line: 97, column: 3, scope: !3677)
!3769 = !DILocation(line: 102, column: 7, scope: !3770)
!3770 = distinct !DILexicalBlock(scope: !3677, file: !3678, line: 98, column: 5)
!3771 = !DILocation(line: 105, column: 16, scope: !3770)
!3772 = !DILocation(line: 105, column: 24, scope: !3770)
!3773 = !DILocation(line: 105, column: 47, scope: !3770)
!3774 = !DILocation(line: 105, column: 7, scope: !3770)
!3775 = !DILocation(line: 106, column: 7, scope: !3770)
!3776 = !DILocation(line: 109, column: 16, scope: !3770)
!3777 = !DILocation(line: 109, column: 24, scope: !3770)
!3778 = !DILocation(line: 109, column: 54, scope: !3770)
!3779 = !DILocation(line: 109, column: 66, scope: !3770)
!3780 = !DILocation(line: 109, column: 7, scope: !3770)
!3781 = !DILocation(line: 110, column: 7, scope: !3770)
!3782 = !DILocation(line: 113, column: 16, scope: !3770)
!3783 = !DILocation(line: 113, column: 24, scope: !3770)
!3784 = !DILocation(line: 114, column: 16, scope: !3770)
!3785 = !DILocation(line: 114, column: 28, scope: !3770)
!3786 = !DILocation(line: 114, column: 40, scope: !3770)
!3787 = !DILocation(line: 113, column: 7, scope: !3770)
!3788 = !DILocation(line: 115, column: 7, scope: !3770)
!3789 = !DILocation(line: 120, column: 16, scope: !3770)
!3790 = !DILocation(line: 120, column: 24, scope: !3770)
!3791 = !DILocation(line: 121, column: 16, scope: !3770)
!3792 = !DILocation(line: 121, column: 28, scope: !3770)
!3793 = !DILocation(line: 121, column: 40, scope: !3770)
!3794 = !DILocation(line: 121, column: 52, scope: !3770)
!3795 = !DILocation(line: 120, column: 7, scope: !3770)
!3796 = !DILocation(line: 122, column: 7, scope: !3770)
!3797 = !DILocation(line: 127, column: 16, scope: !3770)
!3798 = !DILocation(line: 127, column: 24, scope: !3770)
!3799 = !DILocation(line: 128, column: 16, scope: !3770)
!3800 = !DILocation(line: 128, column: 28, scope: !3770)
!3801 = !DILocation(line: 128, column: 40, scope: !3770)
!3802 = !DILocation(line: 128, column: 52, scope: !3770)
!3803 = !DILocation(line: 128, column: 64, scope: !3770)
!3804 = !DILocation(line: 127, column: 7, scope: !3770)
!3805 = !DILocation(line: 129, column: 7, scope: !3770)
!3806 = !DILocation(line: 134, column: 16, scope: !3770)
!3807 = !DILocation(line: 134, column: 24, scope: !3770)
!3808 = !DILocation(line: 135, column: 16, scope: !3770)
!3809 = !DILocation(line: 135, column: 28, scope: !3770)
!3810 = !DILocation(line: 135, column: 40, scope: !3770)
!3811 = !DILocation(line: 135, column: 52, scope: !3770)
!3812 = !DILocation(line: 135, column: 64, scope: !3770)
!3813 = !DILocation(line: 136, column: 16, scope: !3770)
!3814 = !DILocation(line: 134, column: 7, scope: !3770)
!3815 = !DILocation(line: 137, column: 7, scope: !3770)
!3816 = !DILocation(line: 142, column: 16, scope: !3770)
!3817 = !DILocation(line: 142, column: 24, scope: !3770)
!3818 = !DILocation(line: 143, column: 16, scope: !3770)
!3819 = !DILocation(line: 143, column: 28, scope: !3770)
!3820 = !DILocation(line: 143, column: 40, scope: !3770)
!3821 = !DILocation(line: 143, column: 52, scope: !3770)
!3822 = !DILocation(line: 143, column: 64, scope: !3770)
!3823 = !DILocation(line: 144, column: 16, scope: !3770)
!3824 = !DILocation(line: 144, column: 28, scope: !3770)
!3825 = !DILocation(line: 142, column: 7, scope: !3770)
!3826 = !DILocation(line: 145, column: 7, scope: !3770)
!3827 = !DILocation(line: 150, column: 16, scope: !3770)
!3828 = !DILocation(line: 150, column: 24, scope: !3770)
!3829 = !DILocation(line: 152, column: 17, scope: !3770)
!3830 = !DILocation(line: 152, column: 29, scope: !3770)
!3831 = !DILocation(line: 152, column: 41, scope: !3770)
!3832 = !DILocation(line: 152, column: 53, scope: !3770)
!3833 = !DILocation(line: 152, column: 65, scope: !3770)
!3834 = !DILocation(line: 153, column: 17, scope: !3770)
!3835 = !DILocation(line: 153, column: 29, scope: !3770)
!3836 = !DILocation(line: 153, column: 41, scope: !3770)
!3837 = !DILocation(line: 150, column: 7, scope: !3770)
!3838 = !DILocation(line: 154, column: 7, scope: !3770)
!3839 = !DILocation(line: 159, column: 16, scope: !3770)
!3840 = !DILocation(line: 159, column: 24, scope: !3770)
!3841 = !DILocation(line: 161, column: 16, scope: !3770)
!3842 = !DILocation(line: 161, column: 28, scope: !3770)
!3843 = !DILocation(line: 161, column: 40, scope: !3770)
!3844 = !DILocation(line: 161, column: 52, scope: !3770)
!3845 = !DILocation(line: 161, column: 64, scope: !3770)
!3846 = !DILocation(line: 162, column: 16, scope: !3770)
!3847 = !DILocation(line: 162, column: 28, scope: !3770)
!3848 = !DILocation(line: 162, column: 40, scope: !3770)
!3849 = !DILocation(line: 162, column: 52, scope: !3770)
!3850 = !DILocation(line: 159, column: 7, scope: !3770)
!3851 = !DILocation(line: 163, column: 7, scope: !3770)
!3852 = !DILocation(line: 170, column: 16, scope: !3770)
!3853 = !DILocation(line: 170, column: 24, scope: !3770)
!3854 = !DILocation(line: 172, column: 17, scope: !3770)
!3855 = !DILocation(line: 172, column: 29, scope: !3770)
!3856 = !DILocation(line: 172, column: 41, scope: !3770)
!3857 = !DILocation(line: 172, column: 53, scope: !3770)
!3858 = !DILocation(line: 172, column: 65, scope: !3770)
!3859 = !DILocation(line: 173, column: 17, scope: !3770)
!3860 = !DILocation(line: 173, column: 29, scope: !3770)
!3861 = !DILocation(line: 173, column: 41, scope: !3770)
!3862 = !DILocation(line: 173, column: 53, scope: !3770)
!3863 = !DILocation(line: 170, column: 7, scope: !3770)
!3864 = !DILocation(line: 174, column: 7, scope: !3770)
!3865 = !DILocation(line: 176, column: 1, scope: !3677)
!3866 = distinct !DISubprogram(name: "version_etc_va", scope: !3678, file: !3678, line: 199, type: !3867, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !210, retainedNodes: !4)
!3867 = !DISubroutineType(types: !3868)
!3868 = !{null, !3681, !69, !69, !69, !3869}
!3869 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3870, size: 64)
!3870 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !211, line: 192, size: 192, elements: !3871)
!3871 = !{!3872, !3873, !3874, !3875}
!3872 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !3870, file: !211, line: 192, baseType: !16, size: 32)
!3873 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !3870, file: !211, line: 192, baseType: !16, size: 32, offset: 32)
!3874 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !3870, file: !211, line: 192, baseType: !8, size: 64, offset: 64)
!3875 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !3870, file: !211, line: 192, baseType: !8, size: 64, offset: 128)
!3876 = !DILocalVariable(name: "stream", arg: 1, scope: !3866, file: !3678, line: 199, type: !3681)
!3877 = !DILocation(line: 199, column: 23, scope: !3866)
!3878 = !DILocalVariable(name: "command_name", arg: 2, scope: !3866, file: !3678, line: 200, type: !69)
!3879 = !DILocation(line: 200, column: 29, scope: !3866)
!3880 = !DILocalVariable(name: "package", arg: 3, scope: !3866, file: !3678, line: 200, type: !69)
!3881 = !DILocation(line: 200, column: 55, scope: !3866)
!3882 = !DILocalVariable(name: "version", arg: 4, scope: !3866, file: !3678, line: 201, type: !69)
!3883 = !DILocation(line: 201, column: 29, scope: !3866)
!3884 = !DILocalVariable(name: "authors", arg: 5, scope: !3866, file: !3678, line: 201, type: !3869)
!3885 = !DILocation(line: 201, column: 46, scope: !3866)
!3886 = !DILocalVariable(name: "n_authors", scope: !3866, file: !3678, line: 203, type: !134)
!3887 = !DILocation(line: 203, column: 10, scope: !3866)
!3888 = !DILocalVariable(name: "authtab", scope: !3866, file: !3678, line: 204, type: !3889)
!3889 = !DICompositeType(tag: DW_TAG_array_type, baseType: !69, size: 640, elements: !76)
!3890 = !DILocation(line: 204, column: 15, scope: !3866)
!3891 = !DILocation(line: 206, column: 18, scope: !3892)
!3892 = distinct !DILexicalBlock(scope: !3866, file: !3678, line: 206, column: 3)
!3893 = !DILocation(line: 206, column: 8, scope: !3892)
!3894 = !DILocation(line: 207, column: 8, scope: !3895)
!3895 = distinct !DILexicalBlock(scope: !3892, file: !3678, line: 206, column: 3)
!3896 = !DILocation(line: 207, column: 18, scope: !3895)
!3897 = !DILocation(line: 208, column: 10, scope: !3895)
!3898 = !DILocation(line: 208, column: 35, scope: !3895)
!3899 = !DILocation(line: 208, column: 22, scope: !3895)
!3900 = !DILocation(line: 208, column: 14, scope: !3895)
!3901 = !DILocation(line: 208, column: 33, scope: !3895)
!3902 = !DILocation(line: 208, column: 67, scope: !3895)
!3903 = !DILocation(line: 0, scope: !3895)
!3904 = !DILocation(line: 206, column: 3, scope: !3892)
!3905 = !DILocation(line: 209, column: 17, scope: !3895)
!3906 = !DILocation(line: 206, column: 3, scope: !3895)
!3907 = distinct !{!3907, !3904, !3908}
!3908 = !DILocation(line: 210, column: 5, scope: !3892)
!3909 = !DILocation(line: 211, column: 20, scope: !3866)
!3910 = !DILocation(line: 211, column: 28, scope: !3866)
!3911 = !DILocation(line: 211, column: 42, scope: !3866)
!3912 = !DILocation(line: 211, column: 51, scope: !3866)
!3913 = !DILocation(line: 212, column: 20, scope: !3866)
!3914 = !DILocation(line: 212, column: 29, scope: !3866)
!3915 = !DILocation(line: 211, column: 3, scope: !3866)
!3916 = !DILocation(line: 213, column: 1, scope: !3866)
!3917 = !DILocalVariable(name: "stream", arg: 1, scope: !3918, file: !3678, line: 199, type: !3921)
!3918 = distinct !DISubprogram(name: "version_etc_va", scope: !3678, file: !3678, line: 199, type: !3919, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3962, retainedNodes: !4)
!3919 = !DISubroutineType(types: !3920)
!3920 = !{null, !3921, !69, !69, !69, !3955}
!3921 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3922, size: 64)
!3922 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3683, line: 7, baseType: !3923)
!3923 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3685, line: 49, size: 1728, elements: !3924)
!3924 = !{!3925, !3926, !3927, !3928, !3929, !3930, !3931, !3932, !3933, !3934, !3935, !3936, !3937, !3938, !3940, !3941, !3942, !3943, !3944, !3945, !3946, !3947, !3948, !3949, !3950, !3951, !3952, !3953, !3954}
!3925 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3923, file: !3685, line: 51, baseType: !72, size: 32)
!3926 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3923, file: !3685, line: 54, baseType: !6, size: 64, offset: 64)
!3927 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3923, file: !3685, line: 55, baseType: !6, size: 64, offset: 128)
!3928 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3923, file: !3685, line: 56, baseType: !6, size: 64, offset: 192)
!3929 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3923, file: !3685, line: 57, baseType: !6, size: 64, offset: 256)
!3930 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3923, file: !3685, line: 58, baseType: !6, size: 64, offset: 320)
!3931 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3923, file: !3685, line: 59, baseType: !6, size: 64, offset: 384)
!3932 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3923, file: !3685, line: 60, baseType: !6, size: 64, offset: 448)
!3933 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3923, file: !3685, line: 61, baseType: !6, size: 64, offset: 512)
!3934 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3923, file: !3685, line: 64, baseType: !6, size: 64, offset: 576)
!3935 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3923, file: !3685, line: 65, baseType: !6, size: 64, offset: 640)
!3936 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3923, file: !3685, line: 66, baseType: !6, size: 64, offset: 704)
!3937 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3923, file: !3685, line: 68, baseType: !3700, size: 64, offset: 768)
!3938 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3923, file: !3685, line: 70, baseType: !3939, size: 64, offset: 832)
!3939 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3923, size: 64)
!3940 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3923, file: !3685, line: 72, baseType: !72, size: 32, offset: 896)
!3941 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3923, file: !3685, line: 73, baseType: !72, size: 32, offset: 928)
!3942 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3923, file: !3685, line: 74, baseType: !3707, size: 64, offset: 960)
!3943 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3923, file: !3685, line: 77, baseType: !133, size: 16, offset: 1024)
!3944 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3923, file: !3685, line: 78, baseType: !3710, size: 8, offset: 1040)
!3945 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3923, file: !3685, line: 79, baseType: !3712, size: 8, offset: 1048)
!3946 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3923, file: !3685, line: 81, baseType: !3716, size: 64, offset: 1088)
!3947 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3923, file: !3685, line: 89, baseType: !3719, size: 64, offset: 1152)
!3948 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3923, file: !3685, line: 91, baseType: !3721, size: 64, offset: 1216)
!3949 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3923, file: !3685, line: 92, baseType: !3724, size: 64, offset: 1280)
!3950 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3923, file: !3685, line: 93, baseType: !3939, size: 64, offset: 1344)
!3951 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3923, file: !3685, line: 94, baseType: !8, size: 64, offset: 1408)
!3952 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3923, file: !3685, line: 95, baseType: !134, size: 64, offset: 1472)
!3953 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3923, file: !3685, line: 96, baseType: !72, size: 32, offset: 1536)
!3954 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3923, file: !3685, line: 98, baseType: !3731, size: 160, offset: 1568)
!3955 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3956, size: 64)
!3956 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !211, line: 192, size: 192, elements: !3957)
!3957 = !{!3958, !3959, !3960, !3961}
!3958 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !3956, file: !211, line: 192, baseType: !16, size: 32)
!3959 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !3956, file: !211, line: 192, baseType: !16, size: 32, offset: 32)
!3960 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !3956, file: !211, line: 192, baseType: !8, size: 64, offset: 64)
!3961 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !3956, file: !211, line: 192, baseType: !8, size: 64, offset: 128)
!3962 = distinct !DICompileUnit(language: DW_LANG_C99, file: !211, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!3963 = !DILocalVariable(name: "command_name", arg: 2, scope: !3918, file: !3678, line: 200, type: !69)
!3964 = !DILocalVariable(name: "package", arg: 3, scope: !3918, file: !3678, line: 200, type: !69)
!3965 = !DILocalVariable(name: "version", arg: 4, scope: !3918, file: !3678, line: 201, type: !69)
!3966 = !DILocalVariable(name: "authors", arg: 5, scope: !3918, file: !3678, line: 201, type: !3955)
!3967 = !DILocalVariable(name: "n_authors", scope: !3918, file: !3678, line: 203, type: !134)
!3968 = !DILocalVariable(name: "authtab", scope: !3918, file: !3678, line: 204, type: !3889)
!3969 = distinct !DISubprogram(name: "version_etc", scope: !3678, file: !3678, line: 230, type: !3970, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !210, retainedNodes: !4)
!3970 = !DISubroutineType(types: !3971)
!3971 = !{null, !3681, !69, !69, !69, null}
!3972 = !DILocalVariable(name: "stream", arg: 1, scope: !3969, file: !3678, line: 230, type: !3681)
!3973 = !DILocation(line: 230, column: 20, scope: !3969)
!3974 = !DILocalVariable(name: "command_name", arg: 2, scope: !3969, file: !3678, line: 231, type: !69)
!3975 = !DILocation(line: 231, column: 26, scope: !3969)
!3976 = !DILocalVariable(name: "package", arg: 3, scope: !3969, file: !3678, line: 231, type: !69)
!3977 = !DILocation(line: 231, column: 52, scope: !3969)
!3978 = !DILocalVariable(name: "version", arg: 4, scope: !3969, file: !3678, line: 232, type: !69)
!3979 = !DILocation(line: 232, column: 26, scope: !3969)
!3980 = !DILocalVariable(name: "authors", scope: !3969, file: !3678, line: 234, type: !3981)
!3981 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !878, line: 52, baseType: !3982)
!3982 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !3983, line: 32, baseType: !3984)
!3983 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stdarg.h", directory: "")
!3984 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !211, line: 234, baseType: !3985)
!3985 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3870, size: 192, elements: !3713)
!3986 = !DILocation(line: 234, column: 11, scope: !3969)
!3987 = !DILocation(line: 236, column: 3, scope: !3969)
!3988 = !DILocation(line: 237, column: 19, scope: !3969)
!3989 = !DILocation(line: 237, column: 27, scope: !3969)
!3990 = !DILocation(line: 237, column: 41, scope: !3969)
!3991 = !DILocation(line: 237, column: 50, scope: !3969)
!3992 = !DILocation(line: 237, column: 59, scope: !3969)
!3993 = !DILocation(line: 237, column: 3, scope: !3969)
!3994 = !DILocation(line: 238, column: 3, scope: !3969)
!3995 = !DILocation(line: 239, column: 1, scope: !3969)
!3996 = distinct !DISubprogram(name: "xmalloc", scope: !3997, file: !3997, line: 39, type: !3998, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !213, retainedNodes: !4)
!3997 = !DIFile(filename: "lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3998 = !DISubroutineType(types: !3999)
!3999 = !{!8, !134}
!4000 = !DILocalVariable(name: "n", arg: 1, scope: !3996, file: !3997, line: 39, type: !134)
!4001 = !DILocation(line: 39, column: 17, scope: !3996)
!4002 = !DILocalVariable(name: "p", scope: !3996, file: !3997, line: 41, type: !8)
!4003 = !DILocation(line: 41, column: 9, scope: !3996)
!4004 = !DILocation(line: 41, column: 21, scope: !3996)
!4005 = !DILocation(line: 41, column: 13, scope: !3996)
!4006 = !DILocation(line: 42, column: 8, scope: !4007)
!4007 = distinct !DILexicalBlock(scope: !3996, file: !3997, line: 42, column: 7)
!4008 = !DILocation(line: 42, column: 10, scope: !4007)
!4009 = !DILocation(line: 42, column: 13, scope: !4007)
!4010 = !DILocation(line: 42, column: 15, scope: !4007)
!4011 = !DILocation(line: 42, column: 7, scope: !3996)
!4012 = !DILocation(line: 43, column: 5, scope: !4007)
!4013 = !DILocation(line: 44, column: 10, scope: !3996)
!4014 = !DILocation(line: 44, column: 3, scope: !3996)
!4015 = distinct !DISubprogram(name: "xrealloc", scope: !3997, file: !3997, line: 51, type: !4016, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !213, retainedNodes: !4)
!4016 = !DISubroutineType(types: !4017)
!4017 = !{!8, !8, !134}
!4018 = !DILocalVariable(name: "p", arg: 1, scope: !4015, file: !3997, line: 51, type: !8)
!4019 = !DILocation(line: 51, column: 17, scope: !4015)
!4020 = !DILocalVariable(name: "n", arg: 2, scope: !4015, file: !3997, line: 51, type: !134)
!4021 = !DILocation(line: 51, column: 27, scope: !4015)
!4022 = !DILocation(line: 53, column: 8, scope: !4023)
!4023 = distinct !DILexicalBlock(scope: !4015, file: !3997, line: 53, column: 7)
!4024 = !DILocation(line: 53, column: 10, scope: !4023)
!4025 = !DILocation(line: 53, column: 13, scope: !4023)
!4026 = !DILocation(line: 53, column: 7, scope: !4015)
!4027 = !DILocation(line: 57, column: 13, scope: !4028)
!4028 = distinct !DILexicalBlock(scope: !4023, file: !3997, line: 54, column: 5)
!4029 = !DILocation(line: 57, column: 7, scope: !4028)
!4030 = !DILocation(line: 58, column: 7, scope: !4028)
!4031 = !DILocation(line: 61, column: 16, scope: !4015)
!4032 = !DILocation(line: 61, column: 19, scope: !4015)
!4033 = !DILocation(line: 61, column: 7, scope: !4015)
!4034 = !DILocation(line: 61, column: 5, scope: !4015)
!4035 = !DILocation(line: 62, column: 8, scope: !4036)
!4036 = distinct !DILexicalBlock(scope: !4015, file: !3997, line: 62, column: 7)
!4037 = !DILocation(line: 62, column: 10, scope: !4036)
!4038 = !DILocation(line: 62, column: 13, scope: !4036)
!4039 = !DILocation(line: 62, column: 7, scope: !4015)
!4040 = !DILocation(line: 63, column: 5, scope: !4036)
!4041 = !DILocation(line: 64, column: 10, scope: !4015)
!4042 = !DILocation(line: 64, column: 3, scope: !4015)
!4043 = !DILocation(line: 65, column: 1, scope: !4015)
!4044 = distinct !DISubprogram(name: "xcharalloc", scope: !4045, file: !4045, line: 216, type: !4046, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !213, retainedNodes: !4)
!4045 = !DIFile(filename: "./lib/xalloc.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4046 = !DISubroutineType(types: !4047)
!4047 = !{!6, !134}
!4048 = !DILocalVariable(name: "n", arg: 1, scope: !4044, file: !4045, line: 216, type: !134)
!4049 = !DILocation(line: 216, column: 20, scope: !4044)
!4050 = !DILocation(line: 218, column: 10, scope: !4044)
!4051 = !DILocation(line: 218, column: 3, scope: !4044)
!4052 = !DILocalVariable(name: "n", arg: 1, scope: !4053, file: !4045, line: 216, type: !134)
!4053 = distinct !DISubprogram(name: "xcharalloc", scope: !4045, file: !4045, line: 216, type: !4046, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4054, retainedNodes: !4)
!4054 = distinct !DICompileUnit(language: DW_LANG_C99, file: !214, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !215, nameTableKind: None)
!4055 = distinct !DISubprogram(name: "xmemdup", scope: !3997, file: !3997, line: 111, type: !4056, scopeLine: 112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !213, retainedNodes: !4)
!4056 = !DISubroutineType(types: !4057)
!4057 = !{!8, !4058, !134}
!4058 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4059, size: 64)
!4059 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!4060 = !DILocalVariable(name: "p", arg: 1, scope: !4055, file: !3997, line: 111, type: !4058)
!4061 = !DILocation(line: 111, column: 22, scope: !4055)
!4062 = !DILocalVariable(name: "s", arg: 2, scope: !4055, file: !3997, line: 111, type: !134)
!4063 = !DILocation(line: 111, column: 32, scope: !4055)
!4064 = !DILocation(line: 113, column: 27, scope: !4055)
!4065 = !DILocation(line: 113, column: 18, scope: !4055)
!4066 = !DILocation(line: 113, column: 31, scope: !4055)
!4067 = !DILocation(line: 113, column: 34, scope: !4055)
!4068 = !DILocation(line: 113, column: 10, scope: !4055)
!4069 = !DILocation(line: 113, column: 3, scope: !4055)
!4070 = !DILocalVariable(name: "p", arg: 1, scope: !4071, file: !3997, line: 111, type: !4058)
!4071 = distinct !DISubprogram(name: "xmemdup", scope: !3997, file: !3997, line: 111, type: !4056, scopeLine: 112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4072, retainedNodes: !4)
!4072 = distinct !DICompileUnit(language: DW_LANG_C99, file: !214, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !215, nameTableKind: None)
!4073 = !DILocalVariable(name: "s", arg: 2, scope: !4071, file: !3997, line: 111, type: !134)
!4074 = distinct !DISubprogram(name: "xstrdup", scope: !3997, file: !3997, line: 119, type: !3138, scopeLine: 120, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !213, retainedNodes: !4)
!4075 = !DILocalVariable(name: "string", arg: 1, scope: !4074, file: !3997, line: 119, type: !69)
!4076 = !DILocation(line: 119, column: 22, scope: !4074)
!4077 = !DILocation(line: 121, column: 19, scope: !4074)
!4078 = !DILocation(line: 121, column: 35, scope: !4074)
!4079 = !DILocation(line: 121, column: 27, scope: !4074)
!4080 = !DILocation(line: 121, column: 43, scope: !4074)
!4081 = !DILocation(line: 121, column: 10, scope: !4074)
!4082 = !DILocation(line: 121, column: 3, scope: !4074)
!4083 = !DILocalVariable(name: "string", arg: 1, scope: !4084, file: !3997, line: 119, type: !69)
!4084 = distinct !DISubprogram(name: "xstrdup", scope: !3997, file: !3997, line: 119, type: !3138, scopeLine: 120, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4085, retainedNodes: !4)
!4085 = distinct !DICompileUnit(language: DW_LANG_C99, file: !214, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !215, nameTableKind: None)
!4086 = distinct !DISubprogram(name: "xalloc_die", scope: !4087, file: !4087, line: 32, type: !1597, scopeLine: 33, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !216, retainedNodes: !4)
!4087 = !DIFile(filename: "lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4088 = !DILocation(line: 34, column: 10, scope: !4086)
!4089 = !DILocation(line: 34, column: 33, scope: !4086)
!4090 = !DILocation(line: 34, column: 3, scope: !4086)
!4091 = !DILocation(line: 40, column: 3, scope: !4086)
!4092 = distinct !DISubprogram(name: "xgetgroups", scope: !4093, file: !4093, line: 31, type: !4094, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !218, retainedNodes: !4)
!4093 = !DIFile(filename: "lib/xgetgroups.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4094 = !DISubroutineType(types: !4095)
!4095 = !{!72, !69, !21, !4096}
!4096 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !183, size: 64)
!4097 = !DILocalVariable(name: "username", arg: 1, scope: !4092, file: !4093, line: 31, type: !69)
!4098 = !DILocation(line: 31, column: 25, scope: !4092)
!4099 = !DILocalVariable(name: "gid", arg: 2, scope: !4092, file: !4093, line: 31, type: !21)
!4100 = !DILocation(line: 31, column: 41, scope: !4092)
!4101 = !DILocalVariable(name: "groups", arg: 3, scope: !4092, file: !4093, line: 31, type: !4096)
!4102 = !DILocation(line: 31, column: 54, scope: !4092)
!4103 = !DILocalVariable(name: "result", scope: !4092, file: !4093, line: 33, type: !72)
!4104 = !DILocation(line: 33, column: 7, scope: !4092)
!4105 = !DILocation(line: 33, column: 28, scope: !4092)
!4106 = !DILocation(line: 33, column: 38, scope: !4092)
!4107 = !DILocation(line: 33, column: 43, scope: !4092)
!4108 = !DILocation(line: 33, column: 16, scope: !4092)
!4109 = !DILocation(line: 34, column: 7, scope: !4110)
!4110 = distinct !DILexicalBlock(scope: !4092, file: !4093, line: 34, column: 7)
!4111 = !DILocation(line: 34, column: 14, scope: !4110)
!4112 = !DILocation(line: 34, column: 20, scope: !4110)
!4113 = !DILocation(line: 34, column: 23, scope: !4110)
!4114 = !DILocation(line: 34, column: 29, scope: !4110)
!4115 = !DILocation(line: 34, column: 7, scope: !4092)
!4116 = !DILocation(line: 35, column: 5, scope: !4110)
!4117 = !DILocation(line: 36, column: 10, scope: !4092)
!4118 = !DILocation(line: 36, column: 3, scope: !4092)
!4119 = !DILocalVariable(name: "username", arg: 1, scope: !4120, file: !4093, line: 31, type: !69)
!4120 = distinct !DISubprogram(name: "xgetgroups", scope: !4093, file: !4093, line: 31, type: !4094, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4121, retainedNodes: !4)
!4121 = distinct !DICompileUnit(language: DW_LANG_C99, file: !219, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!4122 = !DILocalVariable(name: "gid", arg: 2, scope: !4120, file: !4093, line: 31, type: !21)
!4123 = !DILocalVariable(name: "groups", arg: 3, scope: !4120, file: !4093, line: 31, type: !4096)
!4124 = !DILocalVariable(name: "result", scope: !4120, file: !4093, line: 33, type: !72)
!4125 = distinct !DISubprogram(name: "xstrtoul", scope: !4126, file: !4126, line: 76, type: !4127, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!4126 = !DIFile(filename: "./lib/xstrtol.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4127 = !DISubroutineType(types: !4128)
!4128 = !{!4129, !69, !184, !72, !4130, !69}
!4129 = !DIDerivedType(tag: DW_TAG_typedef, name: "strtol_error", file: !224, line: 38, baseType: !223)
!4130 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !84, size: 64)
!4131 = !DILocalVariable(name: "s", arg: 1, scope: !4125, file: !4126, line: 76, type: !69)
!4132 = !DILocation(line: 76, column: 24, scope: !4125)
!4133 = !DILocalVariable(name: "ptr", arg: 2, scope: !4125, file: !4126, line: 76, type: !184)
!4134 = !DILocation(line: 76, column: 34, scope: !4125)
!4135 = !DILocalVariable(name: "strtol_base", arg: 3, scope: !4125, file: !4126, line: 76, type: !72)
!4136 = !DILocation(line: 76, column: 43, scope: !4125)
!4137 = !DILocalVariable(name: "val", arg: 4, scope: !4125, file: !4126, line: 77, type: !4130)
!4138 = !DILocation(line: 77, column: 24, scope: !4125)
!4139 = !DILocalVariable(name: "valid_suffixes", arg: 5, scope: !4125, file: !4126, line: 77, type: !69)
!4140 = !DILocation(line: 77, column: 41, scope: !4125)
!4141 = !DILocalVariable(name: "t_ptr", scope: !4125, file: !4126, line: 79, type: !6)
!4142 = !DILocation(line: 79, column: 9, scope: !4125)
!4143 = !DILocalVariable(name: "p", scope: !4125, file: !4126, line: 80, type: !184)
!4144 = !DILocation(line: 80, column: 10, scope: !4125)
!4145 = !DILocalVariable(name: "tmp", scope: !4125, file: !4126, line: 81, type: !84)
!4146 = !DILocation(line: 81, column: 14, scope: !4125)
!4147 = !DILocalVariable(name: "err", scope: !4125, file: !4126, line: 82, type: !4129)
!4148 = !DILocation(line: 82, column: 16, scope: !4125)
!4149 = !DILocation(line: 84, column: 3, scope: !4150)
!4150 = distinct !DILexicalBlock(scope: !4151, file: !4126, line: 84, column: 3)
!4151 = distinct !DILexicalBlock(scope: !4125, file: !4126, line: 84, column: 3)
!4152 = !DILocation(line: 84, column: 3, scope: !4151)
!4153 = !DILocation(line: 86, column: 8, scope: !4125)
!4154 = !DILocation(line: 86, column: 14, scope: !4125)
!4155 = !DILocation(line: 86, column: 5, scope: !4125)
!4156 = !DILocation(line: 88, column: 3, scope: !4125)
!4157 = !DILocation(line: 88, column: 9, scope: !4125)
!4158 = !DILocalVariable(name: "q", scope: !4159, file: !4126, line: 92, type: !69)
!4159 = distinct !DILexicalBlock(scope: !4160, file: !4126, line: 91, column: 5)
!4160 = distinct !DILexicalBlock(scope: !4125, file: !4126, line: 90, column: 7)
!4161 = !DILocation(line: 92, column: 19, scope: !4159)
!4162 = !DILocation(line: 92, column: 23, scope: !4159)
!4163 = !DILocalVariable(name: "ch", scope: !4159, file: !4126, line: 93, type: !240)
!4164 = !DILocation(line: 93, column: 21, scope: !4159)
!4165 = !DILocation(line: 93, column: 27, scope: !4159)
!4166 = !DILocation(line: 93, column: 26, scope: !4159)
!4167 = !DILocation(line: 94, column: 7, scope: !4159)
!4168 = !DILocation(line: 94, column: 14, scope: !4159)
!4169 = !DILocation(line: 95, column: 15, scope: !4159)
!4170 = !DILocation(line: 95, column: 14, scope: !4159)
!4171 = !DILocation(line: 95, column: 12, scope: !4159)
!4172 = distinct !{!4172, !4167, !4173}
!4173 = !DILocation(line: 95, column: 17, scope: !4159)
!4174 = !DILocation(line: 96, column: 11, scope: !4175)
!4175 = distinct !DILexicalBlock(scope: !4159, file: !4126, line: 96, column: 11)
!4176 = !DILocation(line: 96, column: 14, scope: !4175)
!4177 = !DILocation(line: 96, column: 11, scope: !4159)
!4178 = !DILocation(line: 97, column: 9, scope: !4175)
!4179 = !DILocation(line: 100, column: 19, scope: !4125)
!4180 = !DILocation(line: 100, column: 22, scope: !4125)
!4181 = !DILocation(line: 100, column: 25, scope: !4125)
!4182 = !DILocation(line: 100, column: 9, scope: !4125)
!4183 = !DILocation(line: 100, column: 7, scope: !4125)
!4184 = !DILocation(line: 102, column: 8, scope: !4185)
!4185 = distinct !DILexicalBlock(scope: !4125, file: !4126, line: 102, column: 7)
!4186 = !DILocation(line: 102, column: 7, scope: !4185)
!4187 = !DILocation(line: 102, column: 13, scope: !4185)
!4188 = !DILocation(line: 102, column: 10, scope: !4185)
!4189 = !DILocation(line: 102, column: 7, scope: !4125)
!4190 = !DILocation(line: 106, column: 11, scope: !4191)
!4191 = distinct !DILexicalBlock(scope: !4192, file: !4126, line: 106, column: 11)
!4192 = distinct !DILexicalBlock(scope: !4185, file: !4126, line: 103, column: 5)
!4193 = !DILocation(line: 106, column: 26, scope: !4191)
!4194 = !DILocation(line: 106, column: 31, scope: !4191)
!4195 = !DILocation(line: 106, column: 30, scope: !4191)
!4196 = !DILocation(line: 106, column: 29, scope: !4191)
!4197 = !DILocation(line: 106, column: 33, scope: !4191)
!4198 = !DILocation(line: 106, column: 44, scope: !4191)
!4199 = !DILocation(line: 106, column: 62, scope: !4191)
!4200 = !DILocation(line: 106, column: 61, scope: !4191)
!4201 = !DILocation(line: 106, column: 60, scope: !4191)
!4202 = !DILocation(line: 106, column: 36, scope: !4191)
!4203 = !DILocation(line: 106, column: 11, scope: !4192)
!4204 = !DILocation(line: 107, column: 13, scope: !4191)
!4205 = !DILocation(line: 107, column: 9, scope: !4191)
!4206 = !DILocation(line: 109, column: 9, scope: !4191)
!4207 = !DILocation(line: 110, column: 5, scope: !4192)
!4208 = !DILocation(line: 111, column: 12, scope: !4209)
!4209 = distinct !DILexicalBlock(scope: !4185, file: !4126, line: 111, column: 12)
!4210 = !DILocation(line: 111, column: 18, scope: !4209)
!4211 = !DILocation(line: 111, column: 12, scope: !4185)
!4212 = !DILocation(line: 113, column: 11, scope: !4213)
!4213 = distinct !DILexicalBlock(scope: !4214, file: !4126, line: 113, column: 11)
!4214 = distinct !DILexicalBlock(scope: !4209, file: !4126, line: 112, column: 5)
!4215 = !DILocation(line: 113, column: 17, scope: !4213)
!4216 = !DILocation(line: 113, column: 11, scope: !4214)
!4217 = !DILocation(line: 114, column: 9, scope: !4213)
!4218 = !DILocation(line: 115, column: 11, scope: !4214)
!4219 = !DILocation(line: 116, column: 5, scope: !4214)
!4220 = !DILocation(line: 121, column: 8, scope: !4221)
!4221 = distinct !DILexicalBlock(scope: !4125, file: !4126, line: 121, column: 7)
!4222 = !DILocation(line: 121, column: 7, scope: !4125)
!4223 = !DILocation(line: 123, column: 14, scope: !4224)
!4224 = distinct !DILexicalBlock(scope: !4221, file: !4126, line: 122, column: 5)
!4225 = !DILocation(line: 123, column: 8, scope: !4224)
!4226 = !DILocation(line: 123, column: 12, scope: !4224)
!4227 = !DILocation(line: 124, column: 14, scope: !4224)
!4228 = !DILocation(line: 124, column: 7, scope: !4224)
!4229 = !DILocation(line: 127, column: 9, scope: !4230)
!4230 = distinct !DILexicalBlock(scope: !4125, file: !4126, line: 127, column: 7)
!4231 = !DILocation(line: 127, column: 8, scope: !4230)
!4232 = !DILocation(line: 127, column: 7, scope: !4230)
!4233 = !DILocation(line: 127, column: 11, scope: !4230)
!4234 = !DILocation(line: 127, column: 7, scope: !4125)
!4235 = !DILocalVariable(name: "base", scope: !4236, file: !4126, line: 129, type: !72)
!4236 = distinct !DILexicalBlock(scope: !4230, file: !4126, line: 128, column: 5)
!4237 = !DILocation(line: 129, column: 11, scope: !4236)
!4238 = !DILocalVariable(name: "suffixes", scope: !4236, file: !4126, line: 130, type: !72)
!4239 = !DILocation(line: 130, column: 11, scope: !4236)
!4240 = !DILocalVariable(name: "overflow", scope: !4236, file: !4126, line: 131, type: !4129)
!4241 = !DILocation(line: 131, column: 20, scope: !4236)
!4242 = !DILocation(line: 133, column: 20, scope: !4243)
!4243 = distinct !DILexicalBlock(scope: !4236, file: !4126, line: 133, column: 11)
!4244 = !DILocation(line: 133, column: 38, scope: !4243)
!4245 = !DILocation(line: 133, column: 37, scope: !4243)
!4246 = !DILocation(line: 133, column: 36, scope: !4243)
!4247 = !DILocation(line: 133, column: 12, scope: !4243)
!4248 = !DILocation(line: 133, column: 11, scope: !4236)
!4249 = !DILocation(line: 135, column: 18, scope: !4250)
!4250 = distinct !DILexicalBlock(scope: !4243, file: !4126, line: 134, column: 9)
!4251 = !DILocation(line: 135, column: 12, scope: !4250)
!4252 = !DILocation(line: 135, column: 16, scope: !4250)
!4253 = !DILocation(line: 136, column: 18, scope: !4250)
!4254 = !DILocation(line: 136, column: 22, scope: !4250)
!4255 = !DILocation(line: 136, column: 11, scope: !4250)
!4256 = !DILocation(line: 139, column: 17, scope: !4236)
!4257 = !DILocation(line: 139, column: 16, scope: !4236)
!4258 = !DILocation(line: 139, column: 15, scope: !4236)
!4259 = !DILocation(line: 139, column: 7, scope: !4236)
!4260 = !DILocation(line: 151, column: 23, scope: !4261)
!4261 = distinct !DILexicalBlock(scope: !4262, file: !4126, line: 151, column: 15)
!4262 = distinct !DILexicalBlock(scope: !4236, file: !4126, line: 140, column: 9)
!4263 = !DILocation(line: 151, column: 15, scope: !4261)
!4264 = !DILocation(line: 151, column: 15, scope: !4262)
!4265 = !DILocation(line: 152, column: 21, scope: !4261)
!4266 = !DILocation(line: 152, column: 13, scope: !4261)
!4267 = !DILocation(line: 155, column: 21, scope: !4268)
!4268 = distinct !DILexicalBlock(scope: !4269, file: !4126, line: 155, column: 21)
!4269 = distinct !DILexicalBlock(scope: !4261, file: !4126, line: 153, column: 15)
!4270 = !DILocation(line: 155, column: 29, scope: !4268)
!4271 = !DILocation(line: 155, column: 21, scope: !4269)
!4272 = !DILocation(line: 156, column: 28, scope: !4268)
!4273 = !DILocation(line: 156, column: 19, scope: !4268)
!4274 = !DILocation(line: 157, column: 17, scope: !4269)
!4275 = !DILocation(line: 161, column: 22, scope: !4269)
!4276 = !DILocation(line: 162, column: 25, scope: !4269)
!4277 = !DILocation(line: 163, column: 17, scope: !4269)
!4278 = !DILocation(line: 164, column: 15, scope: !4269)
!4279 = !DILocation(line: 165, column: 9, scope: !4262)
!4280 = !DILocation(line: 167, column: 17, scope: !4236)
!4281 = !DILocation(line: 167, column: 16, scope: !4236)
!4282 = !DILocation(line: 167, column: 15, scope: !4236)
!4283 = !DILocation(line: 167, column: 7, scope: !4236)
!4284 = !DILocation(line: 170, column: 22, scope: !4285)
!4285 = distinct !DILexicalBlock(scope: !4236, file: !4126, line: 168, column: 9)
!4286 = !DILocation(line: 170, column: 20, scope: !4285)
!4287 = !DILocation(line: 171, column: 11, scope: !4285)
!4288 = !DILocation(line: 177, column: 22, scope: !4285)
!4289 = !DILocation(line: 177, column: 20, scope: !4285)
!4290 = !DILocation(line: 178, column: 11, scope: !4285)
!4291 = !DILocation(line: 181, column: 20, scope: !4285)
!4292 = !DILocation(line: 182, column: 11, scope: !4285)
!4293 = !DILocation(line: 185, column: 48, scope: !4285)
!4294 = !DILocation(line: 185, column: 22, scope: !4285)
!4295 = !DILocation(line: 185, column: 20, scope: !4285)
!4296 = !DILocation(line: 186, column: 11, scope: !4285)
!4297 = !DILocation(line: 190, column: 48, scope: !4285)
!4298 = !DILocation(line: 190, column: 22, scope: !4285)
!4299 = !DILocation(line: 190, column: 20, scope: !4285)
!4300 = !DILocation(line: 191, column: 11, scope: !4285)
!4301 = !DILocation(line: 195, column: 48, scope: !4285)
!4302 = !DILocation(line: 195, column: 22, scope: !4285)
!4303 = !DILocation(line: 195, column: 20, scope: !4285)
!4304 = !DILocation(line: 196, column: 11, scope: !4285)
!4305 = !DILocation(line: 200, column: 48, scope: !4285)
!4306 = !DILocation(line: 200, column: 22, scope: !4285)
!4307 = !DILocation(line: 200, column: 20, scope: !4285)
!4308 = !DILocation(line: 201, column: 11, scope: !4285)
!4309 = !DILocation(line: 204, column: 48, scope: !4285)
!4310 = !DILocation(line: 204, column: 22, scope: !4285)
!4311 = !DILocation(line: 204, column: 20, scope: !4285)
!4312 = !DILocation(line: 205, column: 11, scope: !4285)
!4313 = !DILocation(line: 209, column: 48, scope: !4285)
!4314 = !DILocation(line: 209, column: 22, scope: !4285)
!4315 = !DILocation(line: 209, column: 20, scope: !4285)
!4316 = !DILocation(line: 210, column: 11, scope: !4285)
!4317 = !DILocation(line: 213, column: 22, scope: !4285)
!4318 = !DILocation(line: 213, column: 20, scope: !4285)
!4319 = !DILocation(line: 214, column: 11, scope: !4285)
!4320 = !DILocation(line: 217, column: 48, scope: !4285)
!4321 = !DILocation(line: 217, column: 22, scope: !4285)
!4322 = !DILocation(line: 217, column: 20, scope: !4285)
!4323 = !DILocation(line: 218, column: 11, scope: !4285)
!4324 = !DILocation(line: 221, column: 48, scope: !4285)
!4325 = !DILocation(line: 221, column: 22, scope: !4285)
!4326 = !DILocation(line: 221, column: 20, scope: !4285)
!4327 = !DILocation(line: 222, column: 11, scope: !4285)
!4328 = !DILocation(line: 225, column: 18, scope: !4285)
!4329 = !DILocation(line: 225, column: 12, scope: !4285)
!4330 = !DILocation(line: 225, column: 16, scope: !4285)
!4331 = !DILocation(line: 226, column: 18, scope: !4285)
!4332 = !DILocation(line: 226, column: 22, scope: !4285)
!4333 = !DILocation(line: 226, column: 11, scope: !4285)
!4334 = !DILocation(line: 229, column: 14, scope: !4236)
!4335 = !DILocation(line: 229, column: 11, scope: !4236)
!4336 = !DILocation(line: 230, column: 13, scope: !4236)
!4337 = !DILocation(line: 230, column: 8, scope: !4236)
!4338 = !DILocation(line: 230, column: 10, scope: !4236)
!4339 = !DILocation(line: 231, column: 13, scope: !4340)
!4340 = distinct !DILexicalBlock(scope: !4236, file: !4126, line: 231, column: 11)
!4341 = !DILocation(line: 231, column: 12, scope: !4340)
!4342 = !DILocation(line: 231, column: 11, scope: !4340)
!4343 = !DILocation(line: 231, column: 11, scope: !4236)
!4344 = !DILocation(line: 232, column: 13, scope: !4340)
!4345 = !DILocation(line: 232, column: 9, scope: !4340)
!4346 = !DILocation(line: 233, column: 5, scope: !4236)
!4347 = !DILocation(line: 235, column: 10, scope: !4125)
!4348 = !DILocation(line: 235, column: 4, scope: !4125)
!4349 = !DILocation(line: 235, column: 8, scope: !4125)
!4350 = !DILocation(line: 236, column: 10, scope: !4125)
!4351 = !DILocation(line: 236, column: 3, scope: !4125)
!4352 = !DILocation(line: 237, column: 1, scope: !4125)
!4353 = !DILocalVariable(name: "s", arg: 1, scope: !4354, file: !4126, line: 76, type: !69)
!4354 = distinct !DISubprogram(name: "xstrtoul", scope: !4126, file: !4126, line: 76, type: !4127, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4355, retainedNodes: !4)
!4355 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !231, nameTableKind: None)
!4356 = !DILocalVariable(name: "ptr", arg: 2, scope: !4354, file: !4126, line: 76, type: !184)
!4357 = !DILocalVariable(name: "strtol_base", arg: 3, scope: !4354, file: !4126, line: 76, type: !72)
!4358 = !DILocalVariable(name: "val", arg: 4, scope: !4354, file: !4126, line: 77, type: !4130)
!4359 = !DILocalVariable(name: "valid_suffixes", arg: 5, scope: !4354, file: !4126, line: 77, type: !69)
!4360 = !DILocalVariable(name: "t_ptr", scope: !4354, file: !4126, line: 79, type: !6)
!4361 = !DILocalVariable(name: "p", scope: !4354, file: !4126, line: 80, type: !184)
!4362 = !DILocalVariable(name: "tmp", scope: !4354, file: !4126, line: 81, type: !84)
!4363 = !DILocalVariable(name: "err", scope: !4354, file: !4126, line: 82, type: !4129)
!4364 = !DILocalVariable(name: "q", scope: !4365, file: !4126, line: 92, type: !69)
!4365 = distinct !DILexicalBlock(scope: !4366, file: !4126, line: 91, column: 5)
!4366 = distinct !DILexicalBlock(scope: !4367, file: !4126, line: 90, column: 7)
!4367 = distinct !DISubprogram(name: "xstrtoul", scope: !4126, file: !4126, line: 76, type: !4127, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4368, retainedNodes: !4)
!4368 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !231, nameTableKind: None)
!4369 = !DILocalVariable(name: "ch", scope: !4365, file: !4126, line: 93, type: !240)
!4370 = !DILocalVariable(name: "suffixes", scope: !4371, file: !4126, line: 130, type: !72)
!4371 = distinct !DILexicalBlock(scope: !4372, file: !4126, line: 128, column: 5)
!4372 = distinct !DILexicalBlock(scope: !4373, file: !4126, line: 127, column: 7)
!4373 = distinct !DISubprogram(name: "xstrtoul", scope: !4126, file: !4126, line: 76, type: !4127, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4374, retainedNodes: !4)
!4374 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !231, nameTableKind: None)
!4375 = !DILocalVariable(name: "overflow", scope: !4371, file: !4126, line: 131, type: !4129)
!4376 = distinct !DISubprogram(name: "bkm_scale", scope: !4126, file: !4126, line: 48, type: !4377, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !220, retainedNodes: !4)
!4377 = !DISubroutineType(types: !4378)
!4378 = !{!4129, !4130, !72}
!4379 = !DILocalVariable(name: "x", arg: 1, scope: !4376, file: !4126, line: 48, type: !4130)
!4380 = !DILocation(line: 48, column: 24, scope: !4376)
!4381 = !DILocalVariable(name: "scale_factor", arg: 2, scope: !4376, file: !4126, line: 48, type: !72)
!4382 = !DILocation(line: 48, column: 31, scope: !4376)
!4383 = !DILocation(line: 55, column: 26, scope: !4384)
!4384 = distinct !DILexicalBlock(scope: !4376, file: !4126, line: 55, column: 7)
!4385 = !DILocation(line: 55, column: 24, scope: !4384)
!4386 = !DILocation(line: 55, column: 42, scope: !4384)
!4387 = !DILocation(line: 55, column: 41, scope: !4384)
!4388 = !DILocation(line: 55, column: 39, scope: !4384)
!4389 = !DILocation(line: 55, column: 7, scope: !4376)
!4390 = !DILocation(line: 57, column: 8, scope: !4391)
!4391 = distinct !DILexicalBlock(scope: !4384, file: !4126, line: 56, column: 5)
!4392 = !DILocation(line: 57, column: 10, scope: !4391)
!4393 = !DILocation(line: 58, column: 7, scope: !4391)
!4394 = !DILocation(line: 60, column: 9, scope: !4376)
!4395 = !DILocation(line: 60, column: 4, scope: !4376)
!4396 = !DILocation(line: 60, column: 6, scope: !4376)
!4397 = !DILocation(line: 61, column: 3, scope: !4376)
!4398 = !DILocation(line: 62, column: 1, scope: !4376)
!4399 = !DILocalVariable(name: "x", arg: 1, scope: !4400, file: !4126, line: 48, type: !4130)
!4400 = distinct !DISubprogram(name: "bkm_scale", scope: !4126, file: !4126, line: 48, type: !4377, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !4401, retainedNodes: !4)
!4401 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !231, nameTableKind: None)
!4402 = !DILocalVariable(name: "scale_factor", arg: 2, scope: !4400, file: !4126, line: 48, type: !72)
!4403 = distinct !DISubprogram(name: "bkm_scale_by_power", scope: !4126, file: !4126, line: 65, type: !4404, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !220, retainedNodes: !4)
!4404 = !DISubroutineType(types: !4405)
!4405 = !{!4129, !4130, !72, !72}
!4406 = !DILocalVariable(name: "x", arg: 1, scope: !4403, file: !4126, line: 65, type: !4130)
!4407 = !DILocation(line: 65, column: 33, scope: !4403)
!4408 = !DILocalVariable(name: "base", arg: 2, scope: !4403, file: !4126, line: 65, type: !72)
!4409 = !DILocation(line: 65, column: 40, scope: !4403)
!4410 = !DILocalVariable(name: "power", arg: 3, scope: !4403, file: !4126, line: 65, type: !72)
!4411 = !DILocation(line: 65, column: 50, scope: !4403)
!4412 = !DILocalVariable(name: "err", scope: !4403, file: !4126, line: 67, type: !4129)
!4413 = !DILocation(line: 67, column: 16, scope: !4403)
!4414 = !DILocation(line: 68, column: 3, scope: !4403)
!4415 = !DILocation(line: 68, column: 15, scope: !4403)
!4416 = !DILocation(line: 69, column: 23, scope: !4403)
!4417 = !DILocation(line: 69, column: 26, scope: !4403)
!4418 = !DILocation(line: 69, column: 12, scope: !4403)
!4419 = !DILocation(line: 69, column: 9, scope: !4403)
!4420 = distinct !{!4420, !4414, !4421}
!4421 = !DILocation(line: 69, column: 30, scope: !4403)
!4422 = !DILocation(line: 70, column: 10, scope: !4403)
!4423 = !DILocation(line: 70, column: 3, scope: !4403)
!4424 = !DILocalVariable(name: "x", arg: 1, scope: !4425, file: !4126, line: 65, type: !4130)
!4425 = distinct !DISubprogram(name: "bkm_scale_by_power", scope: !4126, file: !4126, line: 65, type: !4404, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !4426, retainedNodes: !4)
!4426 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !231, nameTableKind: None)
!4427 = !DILocalVariable(name: "base", arg: 2, scope: !4425, file: !4126, line: 65, type: !72)
!4428 = !DILocalVariable(name: "power", arg: 3, scope: !4425, file: !4126, line: 65, type: !72)
!4429 = !DILocalVariable(name: "err", scope: !4425, file: !4126, line: 67, type: !4129)
!4430 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !4431, file: !4431, line: 86, type: !4432, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !232, retainedNodes: !4)
!4431 = !DIFile(filename: "lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4432 = !DISubroutineType(types: !4433)
!4433 = !{!134, !4434, !69, !134, !4435}
!4434 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2604, size: 64)
!4435 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4436, size: 64)
!4436 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !2575, line: 6, baseType: !4437)
!4437 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !2577, line: 21, baseType: !4438)
!4438 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2577, line: 13, size: 64, elements: !4439)
!4439 = !{!4440, !4441}
!4440 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !4438, file: !2577, line: 15, baseType: !72, size: 32)
!4441 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !4438, file: !2577, line: 20, baseType: !4442, size: 32, offset: 32)
!4442 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !4438, file: !2577, line: 16, size: 32, elements: !4443)
!4443 = !{!4444, !4445}
!4444 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !4442, file: !2577, line: 18, baseType: !16, size: 32)
!4445 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !4442, file: !2577, line: 19, baseType: !2586, size: 32)
!4446 = !DILocalVariable(name: "pwc", arg: 1, scope: !4430, file: !4431, line: 86, type: !4434)
!4447 = !DILocation(line: 86, column: 23, scope: !4430)
!4448 = !DILocalVariable(name: "s", arg: 2, scope: !4430, file: !4431, line: 86, type: !69)
!4449 = !DILocation(line: 86, column: 40, scope: !4430)
!4450 = !DILocalVariable(name: "n", arg: 3, scope: !4430, file: !4431, line: 86, type: !134)
!4451 = !DILocation(line: 86, column: 50, scope: !4430)
!4452 = !DILocalVariable(name: "ps", arg: 4, scope: !4430, file: !4431, line: 86, type: !4435)
!4453 = !DILocation(line: 86, column: 64, scope: !4430)
!4454 = !DILocalVariable(name: "ret", scope: !4430, file: !4431, line: 88, type: !134)
!4455 = !DILocation(line: 88, column: 10, scope: !4430)
!4456 = !DILocalVariable(name: "wc", scope: !4430, file: !4431, line: 89, type: !2604)
!4457 = !DILocation(line: 89, column: 11, scope: !4430)
!4458 = !DILocation(line: 105, column: 9, scope: !4459)
!4459 = distinct !DILexicalBlock(scope: !4430, file: !4431, line: 105, column: 7)
!4460 = !DILocation(line: 105, column: 7, scope: !4430)
!4461 = !DILocation(line: 106, column: 9, scope: !4459)
!4462 = !DILocation(line: 106, column: 5, scope: !4459)
!4463 = !DILocation(line: 145, column: 18, scope: !4430)
!4464 = !DILocation(line: 145, column: 23, scope: !4430)
!4465 = !DILocation(line: 145, column: 26, scope: !4430)
!4466 = !DILocation(line: 145, column: 29, scope: !4430)
!4467 = !DILocation(line: 145, column: 9, scope: !4430)
!4468 = !DILocation(line: 145, column: 7, scope: !4430)
!4469 = !DILocation(line: 154, column: 22, scope: !4470)
!4470 = distinct !DILexicalBlock(scope: !4430, file: !4431, line: 154, column: 7)
!4471 = !DILocation(line: 154, column: 19, scope: !4470)
!4472 = !DILocation(line: 154, column: 26, scope: !4470)
!4473 = !DILocation(line: 154, column: 29, scope: !4470)
!4474 = !DILocation(line: 154, column: 31, scope: !4470)
!4475 = !DILocation(line: 154, column: 36, scope: !4470)
!4476 = !DILocation(line: 154, column: 41, scope: !4470)
!4477 = !DILocation(line: 154, column: 7, scope: !4430)
!4478 = !DILocalVariable(name: "uc", scope: !4479, file: !4431, line: 156, type: !240)
!4479 = distinct !DILexicalBlock(scope: !4470, file: !4431, line: 155, column: 5)
!4480 = !DILocation(line: 156, column: 21, scope: !4479)
!4481 = !DILocation(line: 156, column: 27, scope: !4479)
!4482 = !DILocation(line: 156, column: 26, scope: !4479)
!4483 = !DILocation(line: 157, column: 14, scope: !4479)
!4484 = !DILocation(line: 157, column: 8, scope: !4479)
!4485 = !DILocation(line: 157, column: 12, scope: !4479)
!4486 = !DILocation(line: 158, column: 7, scope: !4479)
!4487 = !DILocation(line: 162, column: 10, scope: !4430)
!4488 = !DILocation(line: 162, column: 3, scope: !4430)
!4489 = !DILocation(line: 163, column: 1, scope: !4430)
!4490 = distinct !DISubprogram(name: "c_strcasecmp", scope: !4491, file: !4491, line: 27, type: !4492, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !235, retainedNodes: !4)
!4491 = !DIFile(filename: "lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4492 = !DISubroutineType(types: !4493)
!4493 = !{!72, !69, !69}
!4494 = !DILocalVariable(name: "s1", arg: 1, scope: !4490, file: !4491, line: 27, type: !69)
!4495 = !DILocation(line: 27, column: 27, scope: !4490)
!4496 = !DILocalVariable(name: "s2", arg: 2, scope: !4490, file: !4491, line: 27, type: !69)
!4497 = !DILocation(line: 27, column: 43, scope: !4490)
!4498 = !DILocalVariable(name: "p1", scope: !4490, file: !4491, line: 29, type: !238)
!4499 = !DILocation(line: 29, column: 33, scope: !4490)
!4500 = !DILocation(line: 29, column: 62, scope: !4490)
!4501 = !DILocalVariable(name: "p2", scope: !4490, file: !4491, line: 30, type: !238)
!4502 = !DILocation(line: 30, column: 33, scope: !4490)
!4503 = !DILocation(line: 30, column: 62, scope: !4490)
!4504 = !DILocalVariable(name: "c1", scope: !4490, file: !4491, line: 31, type: !240)
!4505 = !DILocation(line: 31, column: 17, scope: !4490)
!4506 = !DILocalVariable(name: "c2", scope: !4490, file: !4491, line: 31, type: !240)
!4507 = !DILocation(line: 31, column: 21, scope: !4490)
!4508 = !DILocation(line: 33, column: 7, scope: !4509)
!4509 = distinct !DILexicalBlock(scope: !4490, file: !4491, line: 33, column: 7)
!4510 = !DILocation(line: 33, column: 13, scope: !4509)
!4511 = !DILocation(line: 33, column: 10, scope: !4509)
!4512 = !DILocation(line: 33, column: 7, scope: !4490)
!4513 = !DILocation(line: 34, column: 5, scope: !4509)
!4514 = !DILocation(line: 36, column: 3, scope: !4490)
!4515 = !DILocation(line: 38, column: 24, scope: !4516)
!4516 = distinct !DILexicalBlock(scope: !4490, file: !4491, line: 37, column: 5)
!4517 = !DILocation(line: 38, column: 23, scope: !4516)
!4518 = !DILocation(line: 38, column: 12, scope: !4516)
!4519 = !DILocation(line: 38, column: 10, scope: !4516)
!4520 = !DILocation(line: 39, column: 24, scope: !4516)
!4521 = !DILocation(line: 39, column: 23, scope: !4516)
!4522 = !DILocation(line: 39, column: 12, scope: !4516)
!4523 = !DILocation(line: 39, column: 10, scope: !4516)
!4524 = !DILocation(line: 41, column: 11, scope: !4525)
!4525 = distinct !DILexicalBlock(scope: !4516, file: !4491, line: 41, column: 11)
!4526 = !DILocation(line: 41, column: 14, scope: !4525)
!4527 = !DILocation(line: 41, column: 11, scope: !4516)
!4528 = !DILocation(line: 42, column: 9, scope: !4525)
!4529 = !DILocation(line: 44, column: 7, scope: !4516)
!4530 = !DILocation(line: 45, column: 7, scope: !4516)
!4531 = !DILocation(line: 46, column: 5, scope: !4516)
!4532 = !DILocation(line: 47, column: 10, scope: !4490)
!4533 = !DILocation(line: 47, column: 16, scope: !4490)
!4534 = !DILocation(line: 47, column: 13, scope: !4490)
!4535 = distinct !{!4535, !4514, !4536}
!4536 = !DILocation(line: 47, column: 18, scope: !4490)
!4537 = !DILocation(line: 50, column: 12, scope: !4538)
!4538 = distinct !DILexicalBlock(scope: !4490, file: !4491, line: 49, column: 7)
!4539 = !DILocation(line: 50, column: 17, scope: !4538)
!4540 = !DILocation(line: 50, column: 15, scope: !4538)
!4541 = !DILocation(line: 50, column: 5, scope: !4538)
!4542 = !DILocation(line: 56, column: 1, scope: !4490)
!4543 = !DILocalVariable(name: "s1", arg: 1, scope: !4544, file: !4491, line: 27, type: !69)
!4544 = distinct !DISubprogram(name: "c_strcasecmp", scope: !4491, file: !4491, line: 27, type: !4492, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4545, retainedNodes: !4)
!4545 = distinct !DICompileUnit(language: DW_LANG_C99, file: !236, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !237, nameTableKind: None)
!4546 = !DILocalVariable(name: "s2", arg: 2, scope: !4544, file: !4491, line: 27, type: !69)
!4547 = !DILocalVariable(name: "p1", scope: !4544, file: !4491, line: 29, type: !238)
!4548 = !DILocalVariable(name: "p2", scope: !4544, file: !4491, line: 30, type: !238)
!4549 = !DILocalVariable(name: "c1", scope: !4544, file: !4491, line: 31, type: !240)
!4550 = !DILocalVariable(name: "c2", scope: !4544, file: !4491, line: 31, type: !240)
!4551 = distinct !DISubprogram(name: "close_stream", scope: !4552, file: !4552, line: 56, type: !4553, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !241, retainedNodes: !4)
!4552 = !DIFile(filename: "lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4553 = !DISubroutineType(types: !4554)
!4554 = !{!72, !4555}
!4555 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4556, size: 64)
!4556 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3683, line: 7, baseType: !4557)
!4557 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3685, line: 49, size: 1728, elements: !4558)
!4558 = !{!4559, !4560, !4561, !4562, !4563, !4564, !4565, !4566, !4567, !4568, !4569, !4570, !4571, !4572, !4574, !4575, !4576, !4577, !4578, !4579, !4580, !4581, !4582, !4583, !4584, !4585, !4586, !4587, !4588}
!4559 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4557, file: !3685, line: 51, baseType: !72, size: 32)
!4560 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4557, file: !3685, line: 54, baseType: !6, size: 64, offset: 64)
!4561 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4557, file: !3685, line: 55, baseType: !6, size: 64, offset: 128)
!4562 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4557, file: !3685, line: 56, baseType: !6, size: 64, offset: 192)
!4563 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4557, file: !3685, line: 57, baseType: !6, size: 64, offset: 256)
!4564 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4557, file: !3685, line: 58, baseType: !6, size: 64, offset: 320)
!4565 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4557, file: !3685, line: 59, baseType: !6, size: 64, offset: 384)
!4566 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4557, file: !3685, line: 60, baseType: !6, size: 64, offset: 448)
!4567 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4557, file: !3685, line: 61, baseType: !6, size: 64, offset: 512)
!4568 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4557, file: !3685, line: 64, baseType: !6, size: 64, offset: 576)
!4569 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4557, file: !3685, line: 65, baseType: !6, size: 64, offset: 640)
!4570 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4557, file: !3685, line: 66, baseType: !6, size: 64, offset: 704)
!4571 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4557, file: !3685, line: 68, baseType: !3700, size: 64, offset: 768)
!4572 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4557, file: !3685, line: 70, baseType: !4573, size: 64, offset: 832)
!4573 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4557, size: 64)
!4574 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4557, file: !3685, line: 72, baseType: !72, size: 32, offset: 896)
!4575 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4557, file: !3685, line: 73, baseType: !72, size: 32, offset: 928)
!4576 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4557, file: !3685, line: 74, baseType: !3707, size: 64, offset: 960)
!4577 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4557, file: !3685, line: 77, baseType: !133, size: 16, offset: 1024)
!4578 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4557, file: !3685, line: 78, baseType: !3710, size: 8, offset: 1040)
!4579 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4557, file: !3685, line: 79, baseType: !3712, size: 8, offset: 1048)
!4580 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4557, file: !3685, line: 81, baseType: !3716, size: 64, offset: 1088)
!4581 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4557, file: !3685, line: 89, baseType: !3719, size: 64, offset: 1152)
!4582 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4557, file: !3685, line: 91, baseType: !3721, size: 64, offset: 1216)
!4583 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4557, file: !3685, line: 92, baseType: !3724, size: 64, offset: 1280)
!4584 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4557, file: !3685, line: 93, baseType: !4573, size: 64, offset: 1344)
!4585 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4557, file: !3685, line: 94, baseType: !8, size: 64, offset: 1408)
!4586 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4557, file: !3685, line: 95, baseType: !134, size: 64, offset: 1472)
!4587 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4557, file: !3685, line: 96, baseType: !72, size: 32, offset: 1536)
!4588 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4557, file: !3685, line: 98, baseType: !3731, size: 160, offset: 1568)
!4589 = !DILocalVariable(name: "stream", arg: 1, scope: !4551, file: !4552, line: 56, type: !4555)
!4590 = !DILocation(line: 56, column: 21, scope: !4551)
!4591 = !DILocalVariable(name: "some_pending", scope: !4551, file: !4552, line: 58, type: !4592)
!4592 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !27)
!4593 = !DILocation(line: 58, column: 14, scope: !4551)
!4594 = !DILocation(line: 58, column: 42, scope: !4551)
!4595 = !DILocation(line: 58, column: 30, scope: !4551)
!4596 = !DILocation(line: 58, column: 50, scope: !4551)
!4597 = !DILocalVariable(name: "prev_fail", scope: !4551, file: !4552, line: 59, type: !4592)
!4598 = !DILocation(line: 59, column: 14, scope: !4551)
!4599 = !DILocation(line: 59, column: 27, scope: !4551)
!4600 = !DILocation(line: 59, column: 43, scope: !4551)
!4601 = !DILocalVariable(name: "fclose_fail", scope: !4551, file: !4552, line: 60, type: !4592)
!4602 = !DILocation(line: 60, column: 14, scope: !4551)
!4603 = !DILocation(line: 60, column: 37, scope: !4551)
!4604 = !DILocation(line: 60, column: 29, scope: !4551)
!4605 = !DILocation(line: 60, column: 45, scope: !4551)
!4606 = !DILocation(line: 70, column: 7, scope: !4607)
!4607 = distinct !DILexicalBlock(scope: !4551, file: !4552, line: 70, column: 7)
!4608 = !DILocation(line: 70, column: 17, scope: !4607)
!4609 = !DILocation(line: 70, column: 21, scope: !4607)
!4610 = !DILocation(line: 70, column: 33, scope: !4607)
!4611 = !DILocation(line: 70, column: 37, scope: !4607)
!4612 = !DILocation(line: 70, column: 50, scope: !4607)
!4613 = !DILocation(line: 70, column: 53, scope: !4607)
!4614 = !DILocation(line: 70, column: 59, scope: !4607)
!4615 = !DILocation(line: 70, column: 7, scope: !4551)
!4616 = !DILocation(line: 72, column: 13, scope: !4617)
!4617 = distinct !DILexicalBlock(scope: !4618, file: !4552, line: 72, column: 11)
!4618 = distinct !DILexicalBlock(scope: !4607, file: !4552, line: 71, column: 5)
!4619 = !DILocation(line: 72, column: 11, scope: !4618)
!4620 = !DILocation(line: 73, column: 9, scope: !4617)
!4621 = !DILocation(line: 73, column: 15, scope: !4617)
!4622 = !DILocation(line: 74, column: 7, scope: !4618)
!4623 = !DILocation(line: 77, column: 3, scope: !4551)
!4624 = !DILocation(line: 78, column: 1, scope: !4551)
!4625 = distinct !DISubprogram(name: "hard_locale", scope: !4626, file: !4626, line: 27, type: !4627, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !243, retainedNodes: !4)
!4626 = !DIFile(filename: "lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4627 = !DISubroutineType(types: !4628)
!4628 = !{!27, !72}
!4629 = !DILocalVariable(name: "category", arg: 1, scope: !4625, file: !4626, line: 27, type: !72)
!4630 = !DILocation(line: 27, column: 18, scope: !4625)
!4631 = !DILocalVariable(name: "locale", scope: !4625, file: !4626, line: 29, type: !4632)
!4632 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 2056, elements: !4633)
!4633 = !{!4634}
!4634 = !DISubrange(count: 257)
!4635 = !DILocation(line: 29, column: 8, scope: !4625)
!4636 = !DILocation(line: 31, column: 25, scope: !4637)
!4637 = distinct !DILexicalBlock(scope: !4625, file: !4626, line: 31, column: 7)
!4638 = !DILocation(line: 31, column: 35, scope: !4637)
!4639 = !DILocation(line: 31, column: 7, scope: !4637)
!4640 = !DILocation(line: 31, column: 7, scope: !4625)
!4641 = !DILocation(line: 32, column: 5, scope: !4637)
!4642 = !DILocation(line: 34, column: 20, scope: !4625)
!4643 = !DILocation(line: 34, column: 12, scope: !4625)
!4644 = !DILocation(line: 34, column: 33, scope: !4625)
!4645 = !DILocation(line: 34, column: 38, scope: !4625)
!4646 = !DILocation(line: 34, column: 49, scope: !4625)
!4647 = !DILocation(line: 34, column: 41, scope: !4625)
!4648 = !DILocation(line: 34, column: 66, scope: !4625)
!4649 = !DILocation(line: 34, column: 10, scope: !4625)
!4650 = !DILocation(line: 34, column: 3, scope: !4625)
!4651 = !DILocation(line: 35, column: 1, scope: !4625)
!4652 = distinct !DISubprogram(name: "locale_charset", scope: !4653, file: !4653, line: 831, type: !4654, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !245, retainedNodes: !4)
!4653 = !DIFile(filename: "lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4654 = !DISubroutineType(types: !4655)
!4655 = !{!69}
!4656 = !DILocalVariable(name: "codeset", scope: !4652, file: !4653, line: 833, type: !69)
!4657 = !DILocation(line: 833, column: 15, scope: !4652)
!4658 = !DILocation(line: 847, column: 13, scope: !4652)
!4659 = !DILocation(line: 847, column: 11, scope: !4652)
!4660 = !DILocation(line: 911, column: 7, scope: !4661)
!4661 = distinct !DILexicalBlock(scope: !4652, file: !4653, line: 911, column: 7)
!4662 = !DILocation(line: 911, column: 15, scope: !4661)
!4663 = !DILocation(line: 911, column: 7, scope: !4652)
!4664 = !DILocation(line: 913, column: 13, scope: !4661)
!4665 = !DILocation(line: 913, column: 5, scope: !4661)
!4666 = !DILocation(line: 1070, column: 13, scope: !4667)
!4667 = distinct !DILexicalBlock(scope: !4668, file: !4653, line: 1070, column: 13)
!4668 = distinct !DILexicalBlock(scope: !4669, file: !4653, line: 1060, column: 7)
!4669 = distinct !DILexicalBlock(scope: !4652, file: !4653, line: 1019, column: 3)
!4670 = !DILocation(line: 1070, column: 24, scope: !4667)
!4671 = !DILocation(line: 1070, column: 13, scope: !4668)
!4672 = !DILocation(line: 1071, column: 19, scope: !4667)
!4673 = !DILocation(line: 1071, column: 11, scope: !4667)
!4674 = !DILocation(line: 1158, column: 10, scope: !4652)
!4675 = !DILocation(line: 1158, column: 3, scope: !4652)
!4676 = distinct !DISubprogram(name: "mgetgroups", scope: !4677, file: !4677, line: 66, type: !4094, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !247, retainedNodes: !4)
!4677 = !DIFile(filename: "lib/mgetgroups.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4678 = !DILocalVariable(name: "username", arg: 1, scope: !4676, file: !4677, line: 66, type: !69)
!4679 = !DILocation(line: 66, column: 25, scope: !4676)
!4680 = !DILocalVariable(name: "gid", arg: 2, scope: !4676, file: !4677, line: 66, type: !21)
!4681 = !DILocation(line: 66, column: 41, scope: !4676)
!4682 = !DILocalVariable(name: "groups", arg: 3, scope: !4676, file: !4677, line: 66, type: !4096)
!4683 = !DILocation(line: 66, column: 54, scope: !4676)
!4684 = !DILocalVariable(name: "max_n_groups", scope: !4676, file: !4677, line: 68, type: !72)
!4685 = !DILocation(line: 68, column: 7, scope: !4676)
!4686 = !DILocalVariable(name: "ng", scope: !4676, file: !4677, line: 69, type: !72)
!4687 = !DILocation(line: 69, column: 7, scope: !4676)
!4688 = !DILocalVariable(name: "g", scope: !4676, file: !4677, line: 70, type: !183)
!4689 = !DILocation(line: 70, column: 10, scope: !4676)
!4690 = !DILocation(line: 81, column: 7, scope: !4691)
!4691 = distinct !DILexicalBlock(scope: !4676, file: !4677, line: 81, column: 7)
!4692 = !DILocation(line: 81, column: 7, scope: !4676)
!4693 = !DILocation(line: 84, column: 20, scope: !4694)
!4694 = distinct !DILexicalBlock(scope: !4691, file: !4677, line: 82, column: 5)
!4695 = !DILocation(line: 86, column: 35, scope: !4694)
!4696 = !DILocation(line: 86, column: 11, scope: !4694)
!4697 = !DILocation(line: 86, column: 9, scope: !4694)
!4698 = !DILocation(line: 87, column: 11, scope: !4699)
!4699 = distinct !DILexicalBlock(scope: !4694, file: !4677, line: 87, column: 11)
!4700 = !DILocation(line: 87, column: 13, scope: !4699)
!4701 = !DILocation(line: 87, column: 11, scope: !4694)
!4702 = !DILocation(line: 88, column: 9, scope: !4699)
!4703 = !DILocation(line: 90, column: 7, scope: !4694)
!4704 = !DILocalVariable(name: "h", scope: !4705, file: !4677, line: 92, type: !183)
!4705 = distinct !DILexicalBlock(scope: !4694, file: !4677, line: 91, column: 9)
!4706 = !DILocation(line: 92, column: 18, scope: !4705)
!4707 = !DILocalVariable(name: "last_n_groups", scope: !4705, file: !4677, line: 93, type: !72)
!4708 = !DILocation(line: 93, column: 15, scope: !4705)
!4709 = !DILocation(line: 93, column: 31, scope: !4705)
!4710 = !DILocation(line: 96, column: 30, scope: !4705)
!4711 = !DILocation(line: 96, column: 40, scope: !4705)
!4712 = !DILocation(line: 96, column: 45, scope: !4705)
!4713 = !DILocation(line: 96, column: 16, scope: !4705)
!4714 = !DILocation(line: 96, column: 14, scope: !4705)
!4715 = !DILocation(line: 100, column: 15, scope: !4716)
!4716 = distinct !DILexicalBlock(scope: !4705, file: !4677, line: 100, column: 15)
!4717 = !DILocation(line: 100, column: 18, scope: !4716)
!4718 = !DILocation(line: 100, column: 22, scope: !4716)
!4719 = !DILocation(line: 100, column: 25, scope: !4716)
!4720 = !DILocation(line: 100, column: 42, scope: !4716)
!4721 = !DILocation(line: 100, column: 39, scope: !4716)
!4722 = !DILocation(line: 100, column: 15, scope: !4705)
!4723 = !DILocation(line: 101, column: 26, scope: !4716)
!4724 = !DILocation(line: 101, column: 13, scope: !4716)
!4725 = !DILocation(line: 103, column: 38, scope: !4726)
!4726 = distinct !DILexicalBlock(scope: !4705, file: !4677, line: 103, column: 15)
!4727 = !DILocation(line: 103, column: 41, scope: !4726)
!4728 = !DILocation(line: 103, column: 20, scope: !4726)
!4729 = !DILocation(line: 103, column: 18, scope: !4726)
!4730 = !DILocation(line: 103, column: 56, scope: !4726)
!4731 = !DILocation(line: 103, column: 15, scope: !4705)
!4732 = !DILocalVariable(name: "saved_errno", scope: !4733, file: !4677, line: 105, type: !72)
!4733 = distinct !DILexicalBlock(scope: !4726, file: !4677, line: 104, column: 13)
!4734 = !DILocation(line: 105, column: 19, scope: !4733)
!4735 = !DILocation(line: 105, column: 33, scope: !4733)
!4736 = !DILocation(line: 106, column: 21, scope: !4733)
!4737 = !DILocation(line: 106, column: 15, scope: !4733)
!4738 = !DILocation(line: 107, column: 23, scope: !4733)
!4739 = !DILocation(line: 107, column: 15, scope: !4733)
!4740 = !DILocation(line: 107, column: 21, scope: !4733)
!4741 = !DILocation(line: 108, column: 15, scope: !4733)
!4742 = !DILocation(line: 110, column: 15, scope: !4705)
!4743 = !DILocation(line: 110, column: 13, scope: !4705)
!4744 = !DILocation(line: 112, column: 20, scope: !4745)
!4745 = distinct !DILexicalBlock(scope: !4705, file: !4677, line: 112, column: 15)
!4746 = !DILocation(line: 112, column: 17, scope: !4745)
!4747 = !DILocation(line: 112, column: 15, scope: !4705)
!4748 = !DILocation(line: 114, column: 25, scope: !4749)
!4749 = distinct !DILexicalBlock(scope: !4745, file: !4677, line: 113, column: 13)
!4750 = !DILocation(line: 114, column: 16, scope: !4749)
!4751 = !DILocation(line: 114, column: 23, scope: !4749)
!4752 = !DILocation(line: 117, column: 22, scope: !4749)
!4753 = !DILocation(line: 117, column: 15, scope: !4749)
!4754 = distinct !{!4754, !4703, !4755}
!4755 = !DILocation(line: 119, column: 9, scope: !4694)
!4756 = !DILocation(line: 124, column: 19, scope: !4676)
!4757 = !DILocation(line: 125, column: 42, scope: !4676)
!4758 = !DILocation(line: 125, column: 52, scope: !4676)
!4759 = !DILocation(line: 125, column: 21, scope: !4676)
!4760 = !DILocation(line: 126, column: 21, scope: !4676)
!4761 = !DILocation(line: 124, column: 16, scope: !4676)
!4762 = !DILocation(line: 131, column: 7, scope: !4763)
!4763 = distinct !DILexicalBlock(scope: !4676, file: !4677, line: 131, column: 7)
!4764 = !DILocation(line: 131, column: 20, scope: !4763)
!4765 = !DILocation(line: 131, column: 7, scope: !4676)
!4766 = !DILocation(line: 133, column: 11, scope: !4767)
!4767 = distinct !DILexicalBlock(scope: !4768, file: !4677, line: 133, column: 11)
!4768 = distinct !DILexicalBlock(scope: !4763, file: !4677, line: 132, column: 5)
!4769 = !DILocation(line: 133, column: 17, scope: !4767)
!4770 = !DILocation(line: 133, column: 27, scope: !4767)
!4771 = !DILocation(line: 133, column: 35, scope: !4767)
!4772 = !DILocation(line: 133, column: 33, scope: !4767)
!4773 = !DILocation(line: 133, column: 11, scope: !4768)
!4774 = !DILocation(line: 135, column: 21, scope: !4775)
!4775 = distinct !DILexicalBlock(scope: !4767, file: !4677, line: 134, column: 9)
!4776 = !DILocation(line: 135, column: 12, scope: !4775)
!4777 = !DILocation(line: 135, column: 19, scope: !4775)
!4778 = !DILocation(line: 136, column: 16, scope: !4775)
!4779 = !DILocation(line: 136, column: 12, scope: !4775)
!4780 = !DILocation(line: 136, column: 14, scope: !4775)
!4781 = !DILocation(line: 137, column: 18, scope: !4775)
!4782 = !DILocation(line: 137, column: 22, scope: !4775)
!4783 = !DILocation(line: 137, column: 11, scope: !4775)
!4784 = !DILocation(line: 139, column: 7, scope: !4768)
!4785 = !DILocation(line: 142, column: 7, scope: !4786)
!4786 = distinct !DILexicalBlock(scope: !4676, file: !4677, line: 142, column: 7)
!4787 = !DILocation(line: 142, column: 20, scope: !4786)
!4788 = !DILocation(line: 142, column: 25, scope: !4786)
!4789 = !DILocation(line: 142, column: 30, scope: !4786)
!4790 = !DILocation(line: 142, column: 39, scope: !4786)
!4791 = !DILocation(line: 142, column: 42, scope: !4786)
!4792 = !DILocation(line: 142, column: 46, scope: !4786)
!4793 = !DILocation(line: 142, column: 7, scope: !4676)
!4794 = !DILocation(line: 143, column: 17, scope: !4786)
!4795 = !DILocation(line: 143, column: 5, scope: !4786)
!4796 = !DILocation(line: 144, column: 31, scope: !4676)
!4797 = !DILocation(line: 144, column: 7, scope: !4676)
!4798 = !DILocation(line: 144, column: 5, scope: !4676)
!4799 = !DILocation(line: 145, column: 7, scope: !4800)
!4800 = distinct !DILexicalBlock(scope: !4676, file: !4677, line: 145, column: 7)
!4801 = !DILocation(line: 145, column: 9, scope: !4800)
!4802 = !DILocation(line: 145, column: 7, scope: !4676)
!4803 = !DILocation(line: 146, column: 5, scope: !4800)
!4804 = !DILocation(line: 148, column: 9, scope: !4676)
!4805 = !DILocation(line: 149, column: 23, scope: !4676)
!4806 = !DILocation(line: 149, column: 37, scope: !4676)
!4807 = !DILocation(line: 149, column: 40, scope: !4676)
!4808 = !DILocation(line: 149, column: 50, scope: !4676)
!4809 = !DILocation(line: 149, column: 11, scope: !4676)
!4810 = !DILocation(line: 150, column: 22, scope: !4676)
!4811 = !DILocation(line: 150, column: 38, scope: !4676)
!4812 = !DILocation(line: 150, column: 42, scope: !4676)
!4813 = !DILocation(line: 150, column: 35, scope: !4676)
!4814 = !DILocation(line: 151, column: 33, scope: !4676)
!4815 = !DILocation(line: 151, column: 38, scope: !4676)
!4816 = !DILocation(line: 151, column: 42, scope: !4676)
!4817 = !DILocation(line: 151, column: 35, scope: !4676)
!4818 = !DILocation(line: 150, column: 11, scope: !4676)
!4819 = !DILocation(line: 148, column: 6, scope: !4676)
!4820 = !DILocation(line: 153, column: 7, scope: !4821)
!4821 = distinct !DILexicalBlock(scope: !4676, file: !4677, line: 153, column: 7)
!4822 = !DILocation(line: 153, column: 10, scope: !4821)
!4823 = !DILocation(line: 153, column: 7, scope: !4676)
!4824 = !DILocalVariable(name: "saved_errno", scope: !4825, file: !4677, line: 156, type: !72)
!4825 = distinct !DILexicalBlock(scope: !4821, file: !4677, line: 154, column: 5)
!4826 = !DILocation(line: 156, column: 11, scope: !4825)
!4827 = !DILocation(line: 156, column: 25, scope: !4825)
!4828 = !DILocation(line: 157, column: 13, scope: !4825)
!4829 = !DILocation(line: 157, column: 7, scope: !4825)
!4830 = !DILocation(line: 158, column: 15, scope: !4825)
!4831 = !DILocation(line: 158, column: 7, scope: !4825)
!4832 = !DILocation(line: 158, column: 13, scope: !4825)
!4833 = !DILocation(line: 159, column: 7, scope: !4825)
!4834 = !DILocation(line: 162, column: 8, scope: !4835)
!4835 = distinct !DILexicalBlock(scope: !4676, file: !4677, line: 162, column: 7)
!4836 = !DILocation(line: 162, column: 17, scope: !4835)
!4837 = !DILocation(line: 162, column: 20, scope: !4835)
!4838 = !DILocation(line: 162, column: 24, scope: !4835)
!4839 = !DILocation(line: 162, column: 7, scope: !4676)
!4840 = !DILocation(line: 164, column: 12, scope: !4841)
!4841 = distinct !DILexicalBlock(scope: !4835, file: !4677, line: 163, column: 5)
!4842 = !DILocation(line: 164, column: 8, scope: !4841)
!4843 = !DILocation(line: 164, column: 10, scope: !4841)
!4844 = !DILocation(line: 165, column: 9, scope: !4841)
!4845 = !DILocation(line: 166, column: 5, scope: !4841)
!4846 = !DILocation(line: 167, column: 13, scope: !4676)
!4847 = !DILocation(line: 167, column: 4, scope: !4676)
!4848 = !DILocation(line: 167, column: 11, scope: !4676)
!4849 = !DILocation(line: 185, column: 11, scope: !4850)
!4850 = distinct !DILexicalBlock(scope: !4676, file: !4677, line: 185, column: 7)
!4851 = !DILocation(line: 185, column: 9, scope: !4850)
!4852 = !DILocation(line: 185, column: 7, scope: !4676)
!4853 = !DILocalVariable(name: "first", scope: !4854, file: !4677, line: 187, type: !21)
!4854 = distinct !DILexicalBlock(scope: !4850, file: !4677, line: 186, column: 5)
!4855 = !DILocation(line: 187, column: 13, scope: !4854)
!4856 = !DILocation(line: 187, column: 22, scope: !4854)
!4857 = !DILocation(line: 187, column: 21, scope: !4854)
!4858 = !DILocalVariable(name: "next", scope: !4854, file: !4677, line: 188, type: !183)
!4859 = !DILocation(line: 188, column: 14, scope: !4854)
!4860 = !DILocalVariable(name: "groups_end", scope: !4854, file: !4677, line: 189, type: !183)
!4861 = !DILocation(line: 189, column: 14, scope: !4854)
!4862 = !DILocation(line: 189, column: 27, scope: !4854)
!4863 = !DILocation(line: 189, column: 31, scope: !4854)
!4864 = !DILocation(line: 189, column: 29, scope: !4854)
!4865 = !DILocation(line: 191, column: 19, scope: !4866)
!4866 = distinct !DILexicalBlock(scope: !4854, file: !4677, line: 191, column: 7)
!4867 = !DILocation(line: 191, column: 21, scope: !4866)
!4868 = !DILocation(line: 191, column: 17, scope: !4866)
!4869 = !DILocation(line: 191, column: 12, scope: !4866)
!4870 = !DILocation(line: 191, column: 26, scope: !4871)
!4871 = distinct !DILexicalBlock(scope: !4866, file: !4677, line: 191, column: 7)
!4872 = !DILocation(line: 191, column: 33, scope: !4871)
!4873 = !DILocation(line: 191, column: 31, scope: !4871)
!4874 = !DILocation(line: 191, column: 7, scope: !4866)
!4875 = !DILocation(line: 193, column: 16, scope: !4876)
!4876 = distinct !DILexicalBlock(scope: !4877, file: !4677, line: 193, column: 15)
!4877 = distinct !DILexicalBlock(scope: !4871, file: !4677, line: 192, column: 9)
!4878 = !DILocation(line: 193, column: 15, scope: !4876)
!4879 = !DILocation(line: 193, column: 24, scope: !4876)
!4880 = !DILocation(line: 193, column: 21, scope: !4876)
!4881 = !DILocation(line: 193, column: 30, scope: !4876)
!4882 = !DILocation(line: 193, column: 34, scope: !4876)
!4883 = !DILocation(line: 193, column: 33, scope: !4876)
!4884 = !DILocation(line: 193, column: 43, scope: !4876)
!4885 = !DILocation(line: 193, column: 42, scope: !4876)
!4886 = !DILocation(line: 193, column: 39, scope: !4876)
!4887 = !DILocation(line: 193, column: 15, scope: !4877)
!4888 = !DILocation(line: 194, column: 15, scope: !4876)
!4889 = !DILocation(line: 194, column: 13, scope: !4876)
!4890 = !DILocation(line: 196, column: 21, scope: !4876)
!4891 = !DILocation(line: 196, column: 20, scope: !4876)
!4892 = !DILocation(line: 196, column: 14, scope: !4876)
!4893 = !DILocation(line: 196, column: 18, scope: !4876)
!4894 = !DILocation(line: 197, column: 9, scope: !4877)
!4895 = !DILocation(line: 191, column: 49, scope: !4871)
!4896 = !DILocation(line: 191, column: 7, scope: !4871)
!4897 = distinct !{!4897, !4874, !4898}
!4898 = !DILocation(line: 197, column: 9, scope: !4866)
!4899 = !DILocation(line: 198, column: 5, scope: !4854)
!4900 = !DILocation(line: 200, column: 10, scope: !4676)
!4901 = !DILocation(line: 200, column: 3, scope: !4676)
!4902 = !DILocation(line: 201, column: 1, scope: !4676)
!4903 = !DILocalVariable(name: "next", scope: !4904, file: !4677, line: 188, type: !183)
!4904 = distinct !DILexicalBlock(scope: !4905, file: !4677, line: 186, column: 5)
!4905 = distinct !DILexicalBlock(scope: !4906, file: !4677, line: 185, column: 7)
!4906 = distinct !DISubprogram(name: "mgetgroups", scope: !4677, file: !4677, line: 66, type: !4094, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4907, retainedNodes: !4)
!4907 = distinct !DICompileUnit(language: DW_LANG_C99, file: !248, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !249, nameTableKind: None)
!4908 = !DILocalVariable(name: "groups_end", scope: !4904, file: !4677, line: 189, type: !183)
!4909 = distinct !DISubprogram(name: "realloc_groupbuf", scope: !4677, file: !4677, line: 43, type: !4910, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !247, retainedNodes: !4)
!4910 = !DISubroutineType(types: !4911)
!4911 = !{!183, !183, !134}
!4912 = !DILocalVariable(name: "g", arg: 1, scope: !4909, file: !4677, line: 43, type: !183)
!4913 = !DILocation(line: 43, column: 26, scope: !4909)
!4914 = !DILocalVariable(name: "num", arg: 2, scope: !4909, file: !4677, line: 43, type: !134)
!4915 = !DILocation(line: 43, column: 36, scope: !4909)
!4916 = !DILocation(line: 45, column: 7, scope: !4917)
!4917 = distinct !DILexicalBlock(scope: !4909, file: !4677, line: 45, column: 7)
!4918 = !DILocation(line: 45, column: 7, scope: !4909)
!4919 = !DILocation(line: 47, column: 7, scope: !4920)
!4920 = distinct !DILexicalBlock(scope: !4917, file: !4677, line: 46, column: 5)
!4921 = !DILocation(line: 47, column: 13, scope: !4920)
!4922 = !DILocation(line: 48, column: 7, scope: !4920)
!4923 = !DILocation(line: 51, column: 19, scope: !4909)
!4924 = !DILocation(line: 51, column: 22, scope: !4909)
!4925 = !DILocation(line: 51, column: 26, scope: !4909)
!4926 = !DILocation(line: 51, column: 10, scope: !4909)
!4927 = !DILocation(line: 51, column: 3, scope: !4909)
!4928 = !DILocation(line: 52, column: 1, scope: !4909)
!4929 = !DILocalVariable(name: "g", arg: 1, scope: !4930, file: !4677, line: 43, type: !183)
!4930 = distinct !DISubprogram(name: "realloc_groupbuf", scope: !4677, file: !4677, line: 43, type: !4910, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !4931, retainedNodes: !4)
!4931 = distinct !DICompileUnit(language: DW_LANG_C99, file: !248, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !249, nameTableKind: None)
!4932 = !DILocalVariable(name: "num", arg: 2, scope: !4930, file: !4677, line: 43, type: !134)
!4933 = distinct !DISubprogram(name: "setlocale_null_r", scope: !4934, file: !4934, line: 269, type: !4935, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !250, retainedNodes: !4)
!4934 = !DIFile(filename: "lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4935 = !DISubroutineType(types: !4936)
!4936 = !{!72, !72, !6, !134}
!4937 = !DILocalVariable(name: "category", arg: 1, scope: !4933, file: !4934, line: 269, type: !72)
!4938 = !DILocation(line: 269, column: 23, scope: !4933)
!4939 = !DILocalVariable(name: "buf", arg: 2, scope: !4933, file: !4934, line: 269, type: !6)
!4940 = !DILocation(line: 269, column: 39, scope: !4933)
!4941 = !DILocalVariable(name: "bufsize", arg: 3, scope: !4933, file: !4934, line: 269, type: !134)
!4942 = !DILocation(line: 269, column: 51, scope: !4933)
!4943 = !DILocation(line: 274, column: 35, scope: !4933)
!4944 = !DILocation(line: 274, column: 45, scope: !4933)
!4945 = !DILocation(line: 274, column: 50, scope: !4933)
!4946 = !DILocation(line: 274, column: 10, scope: !4933)
!4947 = !DILocation(line: 274, column: 3, scope: !4933)
!4948 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !4934, file: !4934, line: 91, type: !4935, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !250, retainedNodes: !4)
!4949 = !DILocalVariable(name: "category", arg: 1, scope: !4948, file: !4934, line: 91, type: !72)
!4950 = !DILocation(line: 91, column: 30, scope: !4948)
!4951 = !DILocalVariable(name: "buf", arg: 2, scope: !4948, file: !4934, line: 91, type: !6)
!4952 = !DILocation(line: 91, column: 46, scope: !4948)
!4953 = !DILocalVariable(name: "bufsize", arg: 3, scope: !4948, file: !4934, line: 91, type: !134)
!4954 = !DILocation(line: 91, column: 58, scope: !4948)
!4955 = !DILocalVariable(name: "result", scope: !4948, file: !4934, line: 140, type: !69)
!4956 = !DILocation(line: 140, column: 15, scope: !4948)
!4957 = !DILocation(line: 140, column: 51, scope: !4948)
!4958 = !DILocation(line: 140, column: 24, scope: !4948)
!4959 = !DILocation(line: 142, column: 7, scope: !4960)
!4960 = distinct !DILexicalBlock(scope: !4948, file: !4934, line: 142, column: 7)
!4961 = !DILocation(line: 142, column: 14, scope: !4960)
!4962 = !DILocation(line: 142, column: 7, scope: !4948)
!4963 = !DILocation(line: 145, column: 11, scope: !4964)
!4964 = distinct !DILexicalBlock(scope: !4965, file: !4934, line: 145, column: 11)
!4965 = distinct !DILexicalBlock(scope: !4960, file: !4934, line: 143, column: 5)
!4966 = !DILocation(line: 145, column: 19, scope: !4964)
!4967 = !DILocation(line: 145, column: 11, scope: !4965)
!4968 = !DILocation(line: 149, column: 9, scope: !4964)
!4969 = !DILocation(line: 149, column: 16, scope: !4964)
!4970 = !DILocation(line: 150, column: 7, scope: !4965)
!4971 = !DILocalVariable(name: "length", scope: !4972, file: !4934, line: 154, type: !134)
!4972 = distinct !DILexicalBlock(scope: !4960, file: !4934, line: 153, column: 5)
!4973 = !DILocation(line: 154, column: 14, scope: !4972)
!4974 = !DILocation(line: 154, column: 31, scope: !4972)
!4975 = !DILocation(line: 154, column: 23, scope: !4972)
!4976 = !DILocation(line: 155, column: 11, scope: !4977)
!4977 = distinct !DILexicalBlock(scope: !4972, file: !4934, line: 155, column: 11)
!4978 = !DILocation(line: 155, column: 20, scope: !4977)
!4979 = !DILocation(line: 155, column: 18, scope: !4977)
!4980 = !DILocation(line: 155, column: 11, scope: !4972)
!4981 = !DILocation(line: 157, column: 19, scope: !4982)
!4982 = distinct !DILexicalBlock(scope: !4977, file: !4934, line: 156, column: 9)
!4983 = !DILocation(line: 157, column: 24, scope: !4982)
!4984 = !DILocation(line: 157, column: 32, scope: !4982)
!4985 = !DILocation(line: 157, column: 39, scope: !4982)
!4986 = !DILocation(line: 157, column: 11, scope: !4982)
!4987 = !DILocation(line: 158, column: 11, scope: !4982)
!4988 = !DILocation(line: 162, column: 15, scope: !4989)
!4989 = distinct !DILexicalBlock(scope: !4990, file: !4934, line: 162, column: 15)
!4990 = distinct !DILexicalBlock(scope: !4977, file: !4934, line: 161, column: 9)
!4991 = !DILocation(line: 162, column: 23, scope: !4989)
!4992 = !DILocation(line: 162, column: 15, scope: !4990)
!4993 = !DILocation(line: 167, column: 23, scope: !4994)
!4994 = distinct !DILexicalBlock(scope: !4989, file: !4934, line: 163, column: 13)
!4995 = !DILocation(line: 167, column: 28, scope: !4994)
!4996 = !DILocation(line: 167, column: 36, scope: !4994)
!4997 = !DILocation(line: 167, column: 44, scope: !4994)
!4998 = !DILocation(line: 167, column: 15, scope: !4994)
!4999 = !DILocation(line: 168, column: 15, scope: !4994)
!5000 = !DILocation(line: 168, column: 19, scope: !4994)
!5001 = !DILocation(line: 168, column: 27, scope: !4994)
!5002 = !DILocation(line: 168, column: 32, scope: !4994)
!5003 = !DILocation(line: 169, column: 13, scope: !4994)
!5004 = !DILocation(line: 170, column: 11, scope: !4990)
!5005 = !DILocation(line: 174, column: 1, scope: !4948)
!5006 = !DILocalVariable(name: "category", arg: 1, scope: !5007, file: !4934, line: 91, type: !72)
!5007 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !4934, file: !4934, line: 91, type: !4935, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !5008, retainedNodes: !4)
!5008 = distinct !DICompileUnit(language: DW_LANG_C99, file: !251, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!5009 = !DILocalVariable(name: "buf", arg: 2, scope: !5007, file: !4934, line: 91, type: !6)
!5010 = !DILocalVariable(name: "bufsize", arg: 3, scope: !5007, file: !4934, line: 91, type: !134)
!5011 = !DILocalVariable(name: "result", scope: !5007, file: !4934, line: 140, type: !69)
!5012 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !4934, file: !4934, line: 60, type: !5013, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !250, retainedNodes: !4)
!5013 = !DISubroutineType(types: !5014)
!5014 = !{!69, !72}
!5015 = !DILocalVariable(name: "category", arg: 1, scope: !5012, file: !4934, line: 60, type: !72)
!5016 = !DILocation(line: 60, column: 32, scope: !5012)
!5017 = !DILocalVariable(name: "result", scope: !5012, file: !4934, line: 62, type: !69)
!5018 = !DILocation(line: 62, column: 15, scope: !5012)
!5019 = !DILocation(line: 62, column: 35, scope: !5012)
!5020 = !DILocation(line: 62, column: 24, scope: !5012)
!5021 = !DILocation(line: 87, column: 10, scope: !5012)
!5022 = !DILocation(line: 87, column: 3, scope: !5012)
!5023 = !DILocalVariable(name: "category", arg: 1, scope: !5024, file: !4934, line: 60, type: !72)
!5024 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !4934, file: !4934, line: 60, type: !5013, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !5025, retainedNodes: !4)
!5025 = distinct !DICompileUnit(language: DW_LANG_C99, file: !251, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!5026 = !DILocalVariable(name: "result", scope: !5024, file: !4934, line: 62, type: !69)
!5027 = distinct !DISubprogram(name: "rpl_fclose", scope: !5028, file: !5028, line: 58, type: !5029, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !252, retainedNodes: !4)
!5028 = !DIFile(filename: "lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5029 = !DISubroutineType(types: !5030)
!5030 = !{!72, !5031}
!5031 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5032, size: 64)
!5032 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3683, line: 7, baseType: !5033)
!5033 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3685, line: 49, size: 1728, elements: !5034)
!5034 = !{!5035, !5036, !5037, !5038, !5039, !5040, !5041, !5042, !5043, !5044, !5045, !5046, !5047, !5048, !5050, !5051, !5052, !5053, !5054, !5055, !5056, !5057, !5058, !5059, !5060, !5061, !5062, !5063, !5064}
!5035 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5033, file: !3685, line: 51, baseType: !72, size: 32)
!5036 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5033, file: !3685, line: 54, baseType: !6, size: 64, offset: 64)
!5037 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5033, file: !3685, line: 55, baseType: !6, size: 64, offset: 128)
!5038 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5033, file: !3685, line: 56, baseType: !6, size: 64, offset: 192)
!5039 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5033, file: !3685, line: 57, baseType: !6, size: 64, offset: 256)
!5040 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5033, file: !3685, line: 58, baseType: !6, size: 64, offset: 320)
!5041 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5033, file: !3685, line: 59, baseType: !6, size: 64, offset: 384)
!5042 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5033, file: !3685, line: 60, baseType: !6, size: 64, offset: 448)
!5043 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5033, file: !3685, line: 61, baseType: !6, size: 64, offset: 512)
!5044 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5033, file: !3685, line: 64, baseType: !6, size: 64, offset: 576)
!5045 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5033, file: !3685, line: 65, baseType: !6, size: 64, offset: 640)
!5046 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5033, file: !3685, line: 66, baseType: !6, size: 64, offset: 704)
!5047 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5033, file: !3685, line: 68, baseType: !3700, size: 64, offset: 768)
!5048 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5033, file: !3685, line: 70, baseType: !5049, size: 64, offset: 832)
!5049 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5033, size: 64)
!5050 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5033, file: !3685, line: 72, baseType: !72, size: 32, offset: 896)
!5051 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5033, file: !3685, line: 73, baseType: !72, size: 32, offset: 928)
!5052 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5033, file: !3685, line: 74, baseType: !3707, size: 64, offset: 960)
!5053 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5033, file: !3685, line: 77, baseType: !133, size: 16, offset: 1024)
!5054 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5033, file: !3685, line: 78, baseType: !3710, size: 8, offset: 1040)
!5055 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5033, file: !3685, line: 79, baseType: !3712, size: 8, offset: 1048)
!5056 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5033, file: !3685, line: 81, baseType: !3716, size: 64, offset: 1088)
!5057 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5033, file: !3685, line: 89, baseType: !3719, size: 64, offset: 1152)
!5058 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5033, file: !3685, line: 91, baseType: !3721, size: 64, offset: 1216)
!5059 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5033, file: !3685, line: 92, baseType: !3724, size: 64, offset: 1280)
!5060 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5033, file: !3685, line: 93, baseType: !5049, size: 64, offset: 1344)
!5061 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5033, file: !3685, line: 94, baseType: !8, size: 64, offset: 1408)
!5062 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5033, file: !3685, line: 95, baseType: !134, size: 64, offset: 1472)
!5063 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5033, file: !3685, line: 96, baseType: !72, size: 32, offset: 1536)
!5064 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5033, file: !3685, line: 98, baseType: !3731, size: 160, offset: 1568)
!5065 = !DILocalVariable(name: "fp", arg: 1, scope: !5027, file: !5028, line: 58, type: !5031)
!5066 = !DILocation(line: 58, column: 19, scope: !5027)
!5067 = !DILocalVariable(name: "saved_errno", scope: !5027, file: !5028, line: 60, type: !72)
!5068 = !DILocation(line: 60, column: 7, scope: !5027)
!5069 = !DILocalVariable(name: "fd", scope: !5027, file: !5028, line: 61, type: !72)
!5070 = !DILocation(line: 61, column: 7, scope: !5027)
!5071 = !DILocalVariable(name: "result", scope: !5027, file: !5028, line: 62, type: !72)
!5072 = !DILocation(line: 62, column: 7, scope: !5027)
!5073 = !DILocation(line: 65, column: 16, scope: !5027)
!5074 = !DILocation(line: 65, column: 8, scope: !5027)
!5075 = !DILocation(line: 65, column: 6, scope: !5027)
!5076 = !DILocation(line: 66, column: 7, scope: !5077)
!5077 = distinct !DILexicalBlock(scope: !5027, file: !5028, line: 66, column: 7)
!5078 = !DILocation(line: 66, column: 10, scope: !5077)
!5079 = !DILocation(line: 66, column: 7, scope: !5027)
!5080 = !DILocation(line: 67, column: 28, scope: !5077)
!5081 = !DILocation(line: 67, column: 12, scope: !5077)
!5082 = !DILocation(line: 67, column: 5, scope: !5077)
!5083 = !DILocation(line: 72, column: 9, scope: !5084)
!5084 = distinct !DILexicalBlock(scope: !5027, file: !5028, line: 72, column: 7)
!5085 = !DILocation(line: 72, column: 23, scope: !5084)
!5086 = !DILocation(line: 72, column: 41, scope: !5084)
!5087 = !DILocation(line: 72, column: 33, scope: !5084)
!5088 = !DILocation(line: 72, column: 26, scope: !5084)
!5089 = !DILocation(line: 72, column: 59, scope: !5084)
!5090 = !DILocation(line: 73, column: 7, scope: !5084)
!5091 = !DILocation(line: 73, column: 18, scope: !5084)
!5092 = !DILocation(line: 73, column: 10, scope: !5084)
!5093 = !DILocation(line: 72, column: 7, scope: !5027)
!5094 = !DILocation(line: 74, column: 19, scope: !5084)
!5095 = !DILocation(line: 74, column: 17, scope: !5084)
!5096 = !DILocation(line: 74, column: 5, scope: !5084)
!5097 = !DILocation(line: 100, column: 28, scope: !5027)
!5098 = !DILocation(line: 100, column: 12, scope: !5027)
!5099 = !DILocation(line: 100, column: 10, scope: !5027)
!5100 = !DILocation(line: 105, column: 7, scope: !5101)
!5101 = distinct !DILexicalBlock(scope: !5027, file: !5028, line: 105, column: 7)
!5102 = !DILocation(line: 105, column: 19, scope: !5101)
!5103 = !DILocation(line: 105, column: 7, scope: !5027)
!5104 = !DILocation(line: 107, column: 15, scope: !5105)
!5105 = distinct !DILexicalBlock(scope: !5101, file: !5028, line: 106, column: 5)
!5106 = !DILocation(line: 107, column: 7, scope: !5105)
!5107 = !DILocation(line: 107, column: 13, scope: !5105)
!5108 = !DILocation(line: 108, column: 14, scope: !5105)
!5109 = !DILocation(line: 109, column: 5, scope: !5105)
!5110 = !DILocation(line: 111, column: 10, scope: !5027)
!5111 = !DILocation(line: 111, column: 3, scope: !5027)
!5112 = !DILocation(line: 112, column: 1, scope: !5027)
!5113 = distinct !DISubprogram(name: "rpl_fflush", scope: !5114, file: !5114, line: 129, type: !5115, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !254, retainedNodes: !4)
!5114 = !DIFile(filename: "lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5115 = !DISubroutineType(types: !5116)
!5116 = !{!72, !5117}
!5117 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5118, size: 64)
!5118 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3683, line: 7, baseType: !5119)
!5119 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3685, line: 49, size: 1728, elements: !5120)
!5120 = !{!5121, !5122, !5123, !5124, !5125, !5126, !5127, !5128, !5129, !5130, !5131, !5132, !5133, !5134, !5136, !5137, !5138, !5139, !5140, !5141, !5142, !5143, !5144, !5145, !5146, !5147, !5148, !5149, !5150}
!5121 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5119, file: !3685, line: 51, baseType: !72, size: 32)
!5122 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5119, file: !3685, line: 54, baseType: !6, size: 64, offset: 64)
!5123 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5119, file: !3685, line: 55, baseType: !6, size: 64, offset: 128)
!5124 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5119, file: !3685, line: 56, baseType: !6, size: 64, offset: 192)
!5125 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5119, file: !3685, line: 57, baseType: !6, size: 64, offset: 256)
!5126 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5119, file: !3685, line: 58, baseType: !6, size: 64, offset: 320)
!5127 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5119, file: !3685, line: 59, baseType: !6, size: 64, offset: 384)
!5128 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5119, file: !3685, line: 60, baseType: !6, size: 64, offset: 448)
!5129 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5119, file: !3685, line: 61, baseType: !6, size: 64, offset: 512)
!5130 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5119, file: !3685, line: 64, baseType: !6, size: 64, offset: 576)
!5131 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5119, file: !3685, line: 65, baseType: !6, size: 64, offset: 640)
!5132 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5119, file: !3685, line: 66, baseType: !6, size: 64, offset: 704)
!5133 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5119, file: !3685, line: 68, baseType: !3700, size: 64, offset: 768)
!5134 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5119, file: !3685, line: 70, baseType: !5135, size: 64, offset: 832)
!5135 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5119, size: 64)
!5136 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5119, file: !3685, line: 72, baseType: !72, size: 32, offset: 896)
!5137 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5119, file: !3685, line: 73, baseType: !72, size: 32, offset: 928)
!5138 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5119, file: !3685, line: 74, baseType: !3707, size: 64, offset: 960)
!5139 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5119, file: !3685, line: 77, baseType: !133, size: 16, offset: 1024)
!5140 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5119, file: !3685, line: 78, baseType: !3710, size: 8, offset: 1040)
!5141 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5119, file: !3685, line: 79, baseType: !3712, size: 8, offset: 1048)
!5142 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5119, file: !3685, line: 81, baseType: !3716, size: 64, offset: 1088)
!5143 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5119, file: !3685, line: 89, baseType: !3719, size: 64, offset: 1152)
!5144 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5119, file: !3685, line: 91, baseType: !3721, size: 64, offset: 1216)
!5145 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5119, file: !3685, line: 92, baseType: !3724, size: 64, offset: 1280)
!5146 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5119, file: !3685, line: 93, baseType: !5135, size: 64, offset: 1344)
!5147 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5119, file: !3685, line: 94, baseType: !8, size: 64, offset: 1408)
!5148 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5119, file: !3685, line: 95, baseType: !134, size: 64, offset: 1472)
!5149 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5119, file: !3685, line: 96, baseType: !72, size: 32, offset: 1536)
!5150 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5119, file: !3685, line: 98, baseType: !3731, size: 160, offset: 1568)
!5151 = !DILocalVariable(name: "stream", arg: 1, scope: !5113, file: !5114, line: 129, type: !5117)
!5152 = !DILocation(line: 129, column: 19, scope: !5113)
!5153 = !DILocation(line: 150, column: 7, scope: !5154)
!5154 = distinct !DILexicalBlock(scope: !5113, file: !5114, line: 150, column: 7)
!5155 = !DILocation(line: 150, column: 14, scope: !5154)
!5156 = !DILocation(line: 150, column: 22, scope: !5154)
!5157 = !DILocation(line: 150, column: 27, scope: !5154)
!5158 = !DILocation(line: 150, column: 7, scope: !5113)
!5159 = !DILocation(line: 151, column: 20, scope: !5154)
!5160 = !DILocation(line: 151, column: 12, scope: !5154)
!5161 = !DILocation(line: 151, column: 5, scope: !5154)
!5162 = !DILocation(line: 156, column: 44, scope: !5113)
!5163 = !DILocation(line: 156, column: 3, scope: !5113)
!5164 = !DILocation(line: 158, column: 18, scope: !5113)
!5165 = !DILocation(line: 158, column: 10, scope: !5113)
!5166 = !DILocation(line: 158, column: 3, scope: !5113)
!5167 = !DILocation(line: 235, column: 1, scope: !5113)
!5168 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !5114, file: !5114, line: 41, type: !5169, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !254, retainedNodes: !4)
!5169 = !DISubroutineType(types: !5170)
!5170 = !{null, !5117}
!5171 = !DILocalVariable(name: "fp", arg: 1, scope: !5168, file: !5114, line: 41, type: !5117)
!5172 = !DILocation(line: 41, column: 48, scope: !5168)
!5173 = !DILocation(line: 43, column: 7, scope: !5174)
!5174 = distinct !DILexicalBlock(scope: !5168, file: !5114, line: 43, column: 7)
!5175 = !DILocation(line: 43, column: 11, scope: !5174)
!5176 = !DILocation(line: 43, column: 18, scope: !5174)
!5177 = !DILocation(line: 43, column: 7, scope: !5168)
!5178 = !DILocation(line: 45, column: 13, scope: !5174)
!5179 = !DILocation(line: 45, column: 5, scope: !5174)
!5180 = !DILocation(line: 46, column: 1, scope: !5168)
!5181 = distinct !DISubprogram(name: "rpl_fseeko", scope: !5182, file: !5182, line: 28, type: !5183, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !256, retainedNodes: !4)
!5182 = !DIFile(filename: "lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5183 = !DISubroutineType(types: !5184)
!5184 = !{!72, !5185, !5219, !72}
!5185 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5186, size: 64)
!5186 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3683, line: 7, baseType: !5187)
!5187 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3685, line: 49, size: 1728, elements: !5188)
!5188 = !{!5189, !5190, !5191, !5192, !5193, !5194, !5195, !5196, !5197, !5198, !5199, !5200, !5201, !5202, !5204, !5205, !5206, !5207, !5208, !5209, !5210, !5211, !5212, !5213, !5214, !5215, !5216, !5217, !5218}
!5189 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5187, file: !3685, line: 51, baseType: !72, size: 32)
!5190 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5187, file: !3685, line: 54, baseType: !6, size: 64, offset: 64)
!5191 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5187, file: !3685, line: 55, baseType: !6, size: 64, offset: 128)
!5192 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5187, file: !3685, line: 56, baseType: !6, size: 64, offset: 192)
!5193 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5187, file: !3685, line: 57, baseType: !6, size: 64, offset: 256)
!5194 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5187, file: !3685, line: 58, baseType: !6, size: 64, offset: 320)
!5195 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5187, file: !3685, line: 59, baseType: !6, size: 64, offset: 384)
!5196 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5187, file: !3685, line: 60, baseType: !6, size: 64, offset: 448)
!5197 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5187, file: !3685, line: 61, baseType: !6, size: 64, offset: 512)
!5198 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5187, file: !3685, line: 64, baseType: !6, size: 64, offset: 576)
!5199 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5187, file: !3685, line: 65, baseType: !6, size: 64, offset: 640)
!5200 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5187, file: !3685, line: 66, baseType: !6, size: 64, offset: 704)
!5201 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5187, file: !3685, line: 68, baseType: !3700, size: 64, offset: 768)
!5202 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5187, file: !3685, line: 70, baseType: !5203, size: 64, offset: 832)
!5203 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5187, size: 64)
!5204 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5187, file: !3685, line: 72, baseType: !72, size: 32, offset: 896)
!5205 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5187, file: !3685, line: 73, baseType: !72, size: 32, offset: 928)
!5206 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5187, file: !3685, line: 74, baseType: !3707, size: 64, offset: 960)
!5207 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5187, file: !3685, line: 77, baseType: !133, size: 16, offset: 1024)
!5208 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5187, file: !3685, line: 78, baseType: !3710, size: 8, offset: 1040)
!5209 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5187, file: !3685, line: 79, baseType: !3712, size: 8, offset: 1048)
!5210 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5187, file: !3685, line: 81, baseType: !3716, size: 64, offset: 1088)
!5211 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5187, file: !3685, line: 89, baseType: !3719, size: 64, offset: 1152)
!5212 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5187, file: !3685, line: 91, baseType: !3721, size: 64, offset: 1216)
!5213 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5187, file: !3685, line: 92, baseType: !3724, size: 64, offset: 1280)
!5214 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5187, file: !3685, line: 93, baseType: !5203, size: 64, offset: 1344)
!5215 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5187, file: !3685, line: 94, baseType: !8, size: 64, offset: 1408)
!5216 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5187, file: !3685, line: 95, baseType: !134, size: 64, offset: 1472)
!5217 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5187, file: !3685, line: 96, baseType: !72, size: 32, offset: 1536)
!5218 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5187, file: !3685, line: 98, baseType: !3731, size: 160, offset: 1568)
!5219 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !878, line: 63, baseType: !3707)
!5220 = !DILocalVariable(name: "fp", arg: 1, scope: !5181, file: !5182, line: 28, type: !5185)
!5221 = !DILocation(line: 28, column: 15, scope: !5181)
!5222 = !DILocalVariable(name: "offset", arg: 2, scope: !5181, file: !5182, line: 28, type: !5219)
!5223 = !DILocation(line: 28, column: 25, scope: !5181)
!5224 = !DILocalVariable(name: "whence", arg: 3, scope: !5181, file: !5182, line: 28, type: !72)
!5225 = !DILocation(line: 28, column: 37, scope: !5181)
!5226 = !DILocation(line: 52, column: 7, scope: !5227)
!5227 = distinct !DILexicalBlock(scope: !5181, file: !5182, line: 52, column: 7)
!5228 = !DILocation(line: 52, column: 11, scope: !5227)
!5229 = !DILocation(line: 52, column: 27, scope: !5227)
!5230 = !DILocation(line: 52, column: 31, scope: !5227)
!5231 = !DILocation(line: 52, column: 24, scope: !5227)
!5232 = !DILocation(line: 53, column: 7, scope: !5227)
!5233 = !DILocation(line: 53, column: 10, scope: !5227)
!5234 = !DILocation(line: 53, column: 14, scope: !5227)
!5235 = !DILocation(line: 53, column: 31, scope: !5227)
!5236 = !DILocation(line: 53, column: 35, scope: !5227)
!5237 = !DILocation(line: 53, column: 28, scope: !5227)
!5238 = !DILocation(line: 54, column: 7, scope: !5227)
!5239 = !DILocation(line: 54, column: 10, scope: !5227)
!5240 = !DILocation(line: 54, column: 14, scope: !5227)
!5241 = !DILocation(line: 54, column: 28, scope: !5227)
!5242 = !DILocation(line: 52, column: 7, scope: !5181)
!5243 = !DILocalVariable(name: "pos", scope: !5244, file: !5182, line: 117, type: !5219)
!5244 = distinct !DILexicalBlock(scope: !5227, file: !5182, line: 113, column: 5)
!5245 = !DILocation(line: 117, column: 13, scope: !5244)
!5246 = !DILocation(line: 117, column: 34, scope: !5244)
!5247 = !DILocation(line: 117, column: 26, scope: !5244)
!5248 = !DILocation(line: 117, column: 39, scope: !5244)
!5249 = !DILocation(line: 117, column: 47, scope: !5244)
!5250 = !DILocation(line: 117, column: 19, scope: !5244)
!5251 = !DILocation(line: 118, column: 11, scope: !5252)
!5252 = distinct !DILexicalBlock(scope: !5244, file: !5182, line: 118, column: 11)
!5253 = !DILocation(line: 118, column: 15, scope: !5252)
!5254 = !DILocation(line: 118, column: 11, scope: !5244)
!5255 = !DILocation(line: 124, column: 11, scope: !5256)
!5256 = distinct !DILexicalBlock(scope: !5252, file: !5182, line: 119, column: 9)
!5257 = !DILocation(line: 129, column: 7, scope: !5244)
!5258 = !DILocation(line: 129, column: 11, scope: !5244)
!5259 = !DILocation(line: 129, column: 18, scope: !5244)
!5260 = !DILocation(line: 130, column: 21, scope: !5244)
!5261 = !DILocation(line: 130, column: 7, scope: !5244)
!5262 = !DILocation(line: 130, column: 11, scope: !5244)
!5263 = !DILocation(line: 130, column: 19, scope: !5244)
!5264 = !DILocation(line: 161, column: 7, scope: !5244)
!5265 = !DILocation(line: 163, column: 18, scope: !5181)
!5266 = !DILocation(line: 163, column: 22, scope: !5181)
!5267 = !DILocation(line: 163, column: 30, scope: !5181)
!5268 = !DILocation(line: 163, column: 10, scope: !5181)
!5269 = !DILocation(line: 163, column: 3, scope: !5181)
!5270 = !DILocation(line: 164, column: 1, scope: !5181)
!5271 = distinct !DISubprogram(name: "c_tolower", scope: !5272, file: !5272, line: 337, type: !5273, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !258, retainedNodes: !4)
!5272 = !DIFile(filename: "./lib/c-ctype.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5273 = !DISubroutineType(types: !5274)
!5274 = !{!72, !72}
!5275 = !DILocalVariable(name: "c", arg: 1, scope: !5271, file: !5272, line: 337, type: !72)
!5276 = !DILocation(line: 337, column: 16, scope: !5271)
!5277 = !DILocation(line: 339, column: 11, scope: !5271)
!5278 = !DILocation(line: 339, column: 3, scope: !5271)
!5279 = !DILocation(line: 342, column: 14, scope: !5280)
!5280 = distinct !DILexicalBlock(scope: !5271, file: !5272, line: 340, column: 5)
!5281 = !DILocation(line: 342, column: 16, scope: !5280)
!5282 = !DILocation(line: 342, column: 22, scope: !5280)
!5283 = !DILocation(line: 342, column: 7, scope: !5280)
!5284 = !DILocation(line: 344, column: 14, scope: !5280)
!5285 = !DILocation(line: 344, column: 7, scope: !5280)
!5286 = !DILocation(line: 346, column: 1, scope: !5271)
!5287 = distinct !DISubprogram(name: "getugroups", scope: !5288, file: !5288, line: 61, type: !5289, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !260, retainedNodes: !4)
!5288 = !DIFile(filename: "lib/getugroups.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5289 = !DISubroutineType(types: !5290)
!5290 = !{!72, !72, !183, !69, !21}
!5291 = !DILocalVariable(name: "maxcount", arg: 1, scope: !5287, file: !5288, line: 61, type: !72)
!5292 = !DILocation(line: 61, column: 17, scope: !5287)
!5293 = !DILocalVariable(name: "grouplist", arg: 2, scope: !5287, file: !5288, line: 61, type: !183)
!5294 = !DILocation(line: 61, column: 34, scope: !5287)
!5295 = !DILocalVariable(name: "username", arg: 3, scope: !5287, file: !5288, line: 61, type: !69)
!5296 = !DILocation(line: 61, column: 57, scope: !5287)
!5297 = !DILocalVariable(name: "gid", arg: 4, scope: !5287, file: !5288, line: 62, type: !21)
!5298 = !DILocation(line: 62, column: 19, scope: !5287)
!5299 = !DILocalVariable(name: "count", scope: !5287, file: !5288, line: 64, type: !72)
!5300 = !DILocation(line: 64, column: 7, scope: !5287)
!5301 = !DILocation(line: 66, column: 7, scope: !5302)
!5302 = distinct !DILexicalBlock(scope: !5287, file: !5288, line: 66, column: 7)
!5303 = !DILocation(line: 66, column: 11, scope: !5302)
!5304 = !DILocation(line: 66, column: 7, scope: !5287)
!5305 = !DILocation(line: 68, column: 11, scope: !5306)
!5306 = distinct !DILexicalBlock(scope: !5307, file: !5288, line: 68, column: 11)
!5307 = distinct !DILexicalBlock(scope: !5302, file: !5288, line: 67, column: 5)
!5308 = !DILocation(line: 68, column: 20, scope: !5306)
!5309 = !DILocation(line: 68, column: 11, scope: !5307)
!5310 = !DILocation(line: 69, column: 28, scope: !5306)
!5311 = !DILocation(line: 69, column: 9, scope: !5306)
!5312 = !DILocation(line: 69, column: 19, scope: !5306)
!5313 = !DILocation(line: 69, column: 26, scope: !5306)
!5314 = !DILocation(line: 70, column: 7, scope: !5307)
!5315 = !DILocation(line: 71, column: 5, scope: !5307)
!5316 = !DILocation(line: 73, column: 3, scope: !5287)
!5317 = !DILocation(line: 74, column: 3, scope: !5287)
!5318 = !DILocalVariable(name: "cp", scope: !5319, file: !5288, line: 76, type: !184)
!5319 = distinct !DILexicalBlock(scope: !5287, file: !5288, line: 75, column: 5)
!5320 = !DILocation(line: 76, column: 14, scope: !5319)
!5321 = !DILocalVariable(name: "grp", scope: !5319, file: !5288, line: 77, type: !5322)
!5322 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5323, size: 64)
!5323 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "group", file: !1036, line: 42, size: 256, elements: !5324)
!5324 = !{!5325, !5326, !5327, !5328}
!5325 = !DIDerivedType(tag: DW_TAG_member, name: "gr_name", scope: !5323, file: !1036, line: 44, baseType: !6, size: 64)
!5326 = !DIDerivedType(tag: DW_TAG_member, name: "gr_passwd", scope: !5323, file: !1036, line: 45, baseType: !6, size: 64, offset: 64)
!5327 = !DIDerivedType(tag: DW_TAG_member, name: "gr_gid", scope: !5323, file: !1036, line: 46, baseType: !22, size: 32, offset: 128)
!5328 = !DIDerivedType(tag: DW_TAG_member, name: "gr_mem", scope: !5323, file: !1036, line: 47, baseType: !184, size: 64, offset: 192)
!5329 = !DILocation(line: 77, column: 21, scope: !5319)
!5330 = !DILocation(line: 79, column: 7, scope: !5319)
!5331 = !DILocation(line: 79, column: 13, scope: !5319)
!5332 = !DILocation(line: 80, column: 13, scope: !5319)
!5333 = !DILocation(line: 80, column: 11, scope: !5319)
!5334 = !DILocation(line: 81, column: 11, scope: !5335)
!5335 = distinct !DILexicalBlock(scope: !5319, file: !5288, line: 81, column: 11)
!5336 = !DILocation(line: 81, column: 15, scope: !5335)
!5337 = !DILocation(line: 81, column: 11, scope: !5319)
!5338 = !DILocation(line: 82, column: 9, scope: !5335)
!5339 = !DILocation(line: 84, column: 17, scope: !5340)
!5340 = distinct !DILexicalBlock(scope: !5319, file: !5288, line: 84, column: 7)
!5341 = !DILocation(line: 84, column: 22, scope: !5340)
!5342 = !DILocation(line: 84, column: 15, scope: !5340)
!5343 = !DILocation(line: 84, column: 12, scope: !5340)
!5344 = !DILocation(line: 84, column: 31, scope: !5345)
!5345 = distinct !DILexicalBlock(scope: !5340, file: !5288, line: 84, column: 7)
!5346 = !DILocation(line: 84, column: 30, scope: !5345)
!5347 = !DILocation(line: 84, column: 7, scope: !5340)
!5348 = !DILocalVariable(name: "n", scope: !5349, file: !5288, line: 86, type: !72)
!5349 = distinct !DILexicalBlock(scope: !5345, file: !5288, line: 85, column: 9)
!5350 = !DILocation(line: 86, column: 15, scope: !5349)
!5351 = !DILocation(line: 88, column: 18, scope: !5352)
!5352 = distinct !DILexicalBlock(scope: !5349, file: !5288, line: 88, column: 16)
!5353 = !DILocation(line: 88, column: 16, scope: !5349)
!5354 = !DILocation(line: 89, column: 13, scope: !5352)
!5355 = !DILocation(line: 92, column: 18, scope: !5356)
!5356 = distinct !DILexicalBlock(scope: !5349, file: !5288, line: 92, column: 11)
!5357 = !DILocation(line: 92, column: 16, scope: !5356)
!5358 = !DILocation(line: 92, column: 23, scope: !5359)
!5359 = distinct !DILexicalBlock(scope: !5356, file: !5288, line: 92, column: 11)
!5360 = !DILocation(line: 92, column: 27, scope: !5359)
!5361 = !DILocation(line: 92, column: 25, scope: !5359)
!5362 = !DILocation(line: 92, column: 11, scope: !5356)
!5363 = !DILocation(line: 93, column: 17, scope: !5364)
!5364 = distinct !DILexicalBlock(scope: !5359, file: !5288, line: 93, column: 17)
!5365 = !DILocation(line: 93, column: 27, scope: !5364)
!5366 = !DILocation(line: 93, column: 30, scope: !5364)
!5367 = !DILocation(line: 93, column: 40, scope: !5364)
!5368 = !DILocation(line: 93, column: 46, scope: !5364)
!5369 = !DILocation(line: 93, column: 51, scope: !5364)
!5370 = !DILocation(line: 93, column: 43, scope: !5364)
!5371 = !DILocation(line: 93, column: 17, scope: !5359)
!5372 = !DILocation(line: 94, column: 15, scope: !5364)
!5373 = !DILocation(line: 92, column: 34, scope: !5359)
!5374 = !DILocation(line: 92, column: 11, scope: !5359)
!5375 = distinct !{!5375, !5362, !5376}
!5376 = !DILocation(line: 94, column: 15, scope: !5356)
!5377 = !DILocation(line: 97, column: 15, scope: !5378)
!5378 = distinct !DILexicalBlock(scope: !5349, file: !5288, line: 97, column: 15)
!5379 = !DILocation(line: 97, column: 20, scope: !5378)
!5380 = !DILocation(line: 97, column: 17, scope: !5378)
!5381 = !DILocation(line: 97, column: 15, scope: !5349)
!5382 = !DILocation(line: 99, column: 19, scope: !5383)
!5383 = distinct !DILexicalBlock(scope: !5384, file: !5288, line: 99, column: 19)
!5384 = distinct !DILexicalBlock(scope: !5378, file: !5288, line: 98, column: 13)
!5385 = !DILocation(line: 99, column: 28, scope: !5383)
!5386 = !DILocation(line: 99, column: 19, scope: !5384)
!5387 = !DILocation(line: 101, column: 23, scope: !5388)
!5388 = distinct !DILexicalBlock(scope: !5389, file: !5288, line: 101, column: 23)
!5389 = distinct !DILexicalBlock(scope: !5383, file: !5288, line: 100, column: 17)
!5390 = !DILocation(line: 101, column: 32, scope: !5388)
!5391 = !DILocation(line: 101, column: 29, scope: !5388)
!5392 = !DILocation(line: 101, column: 23, scope: !5389)
!5393 = !DILocation(line: 102, column: 21, scope: !5388)
!5394 = !DILocation(line: 103, column: 38, scope: !5389)
!5395 = !DILocation(line: 103, column: 43, scope: !5389)
!5396 = !DILocation(line: 103, column: 19, scope: !5389)
!5397 = !DILocation(line: 103, column: 29, scope: !5389)
!5398 = !DILocation(line: 103, column: 36, scope: !5389)
!5399 = !DILocation(line: 104, column: 17, scope: !5389)
!5400 = !DILocation(line: 105, column: 19, scope: !5401)
!5401 = distinct !DILexicalBlock(scope: !5384, file: !5288, line: 105, column: 19)
!5402 = !DILocation(line: 105, column: 25, scope: !5401)
!5403 = !DILocation(line: 105, column: 19, scope: !5384)
!5404 = !DILocation(line: 107, column: 19, scope: !5405)
!5405 = distinct !DILexicalBlock(scope: !5401, file: !5288, line: 106, column: 17)
!5406 = !DILocation(line: 107, column: 25, scope: !5405)
!5407 = !DILocation(line: 108, column: 19, scope: !5405)
!5408 = !DILocation(line: 110, column: 20, scope: !5384)
!5409 = !DILocation(line: 111, column: 13, scope: !5384)
!5410 = !DILocation(line: 112, column: 9, scope: !5349)
!5411 = !DILocation(line: 84, column: 35, scope: !5345)
!5412 = !DILocation(line: 84, column: 7, scope: !5345)
!5413 = distinct !{!5413, !5347, !5414}
!5414 = !DILocation(line: 112, column: 9, scope: !5340)
!5415 = distinct !{!5415, !5317, !5416}
!5416 = !DILocation(line: 113, column: 5, scope: !5287)
!5417 = !DILocation(line: 115, column: 7, scope: !5418)
!5418 = distinct !DILexicalBlock(scope: !5287, file: !5288, line: 115, column: 7)
!5419 = !DILocation(line: 115, column: 13, scope: !5418)
!5420 = !DILocation(line: 115, column: 7, scope: !5287)
!5421 = !DILocation(line: 116, column: 11, scope: !5418)
!5422 = !DILocation(line: 116, column: 5, scope: !5418)
!5423 = !DILocation(line: 115, column: 16, scope: !5418)
!5424 = !DILabel(scope: !5287, name: "done", file: !5288, line: 118)
!5425 = !DILocation(line: 118, column: 2, scope: !5287)
!5426 = !DILocalVariable(name: "saved_errno", scope: !5427, file: !5288, line: 120, type: !72)
!5427 = distinct !DILexicalBlock(scope: !5287, file: !5288, line: 119, column: 3)
!5428 = !DILocation(line: 120, column: 9, scope: !5427)
!5429 = !DILocation(line: 120, column: 23, scope: !5427)
!5430 = !DILocation(line: 121, column: 5, scope: !5427)
!5431 = !DILocation(line: 122, column: 13, scope: !5427)
!5432 = !DILocation(line: 122, column: 5, scope: !5427)
!5433 = !DILocation(line: 122, column: 11, scope: !5427)
!5434 = !DILocation(line: 125, column: 10, scope: !5287)
!5435 = !DILocation(line: 125, column: 3, scope: !5287)
