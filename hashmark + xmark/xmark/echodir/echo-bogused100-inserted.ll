; ModuleID = '<stdin>'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.infomap = type { i8*, i8* }
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.slotvec = type { i64, i8* }
%struct.__mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@.str = private unnamed_addr constant [23 x i8] c"status == EXIT_SUCCESS\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"src/echo.c\00", align 1
@__PRETTY_FUNCTION__.usage = private unnamed_addr constant [16 x i8] c"void usage(int)\00", align 1
@.str.2 = private unnamed_addr constant [63 x i8] c"Usage: %s [SHORT-OPTION]... [STRING]...\0A  or:  %s LONG-OPTION\0A\00", align 1
@.str.3 = private unnamed_addr constant [93 x i8] c"Echo the STRING(s) to standard output.\0A\0A  -n             do not output the trailing newline\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.4 = private unnamed_addr constant [132 x i8] c"  -e             enable interpretation of backslash escapes\0A  -E             disable interpretation of backslash escapes (default)\0A\00", align 1
@.str.5 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.6 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.7 = private unnamed_addr constant [63 x i8] c"\0AIf -e is in effect, the following sequences are recognized:\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [229 x i8] c"  \5C\5C      backslash\0A  \5Ca      alert (BEL)\0A  \5Cb      backspace\0A  \5Cc      produce no further output\0A  \5Ce      escape\0A  \5Cf      form feed\0A  \5Cn      new line\0A  \5Cr      carriage return\0A  \5Ct      horizontal tab\0A  \5Cv      vertical tab\0A\00", align 1
@.str.9 = private unnamed_addr constant [110 x i8] c"  \5C0NNN   byte with octal value NNN (1 to 3 digits)\0A  \5CxHH    byte with hexadecimal value HH (1 to 2 digits)\0A\00", align 1
@.str.10 = private unnamed_addr constant [191 x i8] c"\0ANOTE: your shell may have its own version of %s, which usually supersedes\0Athe version described here.  Please refer to your shell's documentation\0Afor details about the options it supports.\0A\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"echo\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.23, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.24, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.26, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.26, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.26, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.26, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.30 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.19 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.31 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.32 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.33 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.34 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.35 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.36 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.14 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.22 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.23 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.15 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.24 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.25 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.26 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.27 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.28 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.29 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.12 = private unnamed_addr constant [16 x i8] c"POSIXLY_CORRECT\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"-n\00", align 1
@.str.16 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"--help\00", align 1
@.str.18 = private unnamed_addr constant [10 x i8] c"--version\00", align 1
@.str.20 = private unnamed_addr constant [10 x i8] c"Brian Fox\00", align 1
@.str.21 = private unnamed_addr constant [11 x i8] c"Chet Ramey\00", align 1
@Version = internal global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.37, i32 0, i32 0), align 8, !dbg !0
@.str.37 = private unnamed_addr constant [5 x i8] c"8.32\00", align 1
@ignore_EPIPE = internal global i8 0, align 1, !dbg !9
@.str.40 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@file_name = internal global i8* null, align 8, !dbg !14
@.str.1.41 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.42 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@exit_failure = internal global i32 1, align 4, !dbg !18
@.str.47 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.48 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.49 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external dso_local global i8*, align 8
@program_name = internal global i8* null, align 8, !dbg !26
@program_invocation_name = external dso_local global i8*, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8, !dbg !35
@slotvec = internal global %struct.slotvec* @slotvec0, align 8, !dbg !91
@nslots = internal global i32 1, align 4, !dbg !98
@slotvec0 = internal global %struct.slotvec { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8, !dbg !100
@slot0 = internal global [256 x i8] zeroinitializer, align 16, !dbg !86
@.str.10.52 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.53 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.54 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.55 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.56 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.57 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.58 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.59 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.60 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@.str.63 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.64 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.65 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.66 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4.67 = private unnamed_addr constant [171 x i8] c"License GPLv3+: GNU GPL version 3 or later <%s>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.5.68 = private unnamed_addr constant [34 x i8] c"https://gnu.org/licenses/gpl.html\00", align 1
@.str.6.69 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.7.70 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.8.71 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.9.72 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.10.73 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.11.74 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.12.75 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.13.76 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.14.77 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.15.78 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@version_etc_copyright = internal constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16, !dbg !102
@.str.1.89 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.90 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.99 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.100 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.103 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.104 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@inVal0 = global i32 0
@inVal1 = global i8** null
@.compVal0 = private global [4 x i8] c"   \00"
@.compVal1 = private global [2 x i8] c"-\00"
@.compVal2 = private global [1 x i8] zeroinitializer
@x = common global i32 0
@y = common global i32 0
@x.1 = common global i32 0
@y.2 = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @usage(i32) #0 !dbg !153 {
  %2 = load i32, i32* @x
  %3 = load i32, i32* @y
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !156, metadata !DIExpression()), !dbg !157
  %11 = load i32, i32* %10, align 4, !dbg !158
  %12 = icmp eq i32 %11, 0, !dbg !158
  %13 = load i32, i32* @x
  %14 = load i32, i32* @y
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %38, !dbg !161

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x
  %23 = load i32, i32* @y
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i32, i32* @x
  %31 = load i32, i32* @y
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %55, !dbg !161

38:                                               ; preds = %originalBBpart2
  %39 = load i32, i32* @x
  %40 = load i32, i32* @y
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %38, %originalBB6alteredBB
  call void @__assert_fail(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 40, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__PRETTY_FUNCTION__.usage, i64 0, i64 0)) #12, !dbg !158
  %47 = load i32, i32* @x
  %48 = load i32, i32* @y
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !158

55:                                               ; preds = %originalBBpart24
  %56 = load i32, i32* @x
  %57 = load i32, i32* @y
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %55, %originalBB10alteredBB
  %64 = call i8* @gettext(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !162
  %65 = load i8*, i8** @program_name, align 8, !dbg !163
  %66 = load i8*, i8** @program_name, align 8, !dbg !164
  %67 = call i32 (i8*, ...) @printf(i8* %64, i8* %65, i8* %66), !dbg !165
  %68 = call i8* @gettext(i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !166
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !166
  %70 = call i32 @fputs_unlocked(i8* %68, %struct._IO_FILE* %69), !dbg !166
  %71 = call i8* @gettext(i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !167
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !167
  %73 = call i32 @fputs_unlocked(i8* %71, %struct._IO_FILE* %72), !dbg !167
  %74 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !168
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !168
  %76 = call i32 @fputs_unlocked(i8* %74, %struct._IO_FILE* %75), !dbg !168
  %77 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !169
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !169
  %79 = call i32 @fputs_unlocked(i8* %77, %struct._IO_FILE* %78), !dbg !169
  %80 = call i8* @gettext(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.7, i64 0, i64 0)) #10, !dbg !170
  %81 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !170
  %82 = call i32 @fputs_unlocked(i8* %80, %struct._IO_FILE* %81), !dbg !170
  %83 = call i8* @gettext(i8* getelementptr inbounds ([229 x i8], [229 x i8]* @.str.8, i64 0, i64 0)) #10, !dbg !171
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !171
  %85 = call i32 @fputs_unlocked(i8* %83, %struct._IO_FILE* %84), !dbg !171
  %86 = call i8* @gettext(i8* getelementptr inbounds ([110 x i8], [110 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !172
  %87 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !172
  %88 = call i32 @fputs_unlocked(i8* %86, %struct._IO_FILE* %87), !dbg !172
  %89 = call i8* @gettext(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !173
  %90 = call i32 (i8*, ...) @printf(i8* %89, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0)), !dbg !174
  call void @emit_ancillary_info(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0)), !dbg !175
  %91 = load i32, i32* %10, align 4, !dbg !176
  call void @exit(i32 %91) #12, !dbg !177
  %92 = load i32, i32* @x
  %93 = load i32, i32* @y
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  unreachable, !dbg !177

originalBBalteredBB:                              ; preds = %originalBB, %1
  %100 = alloca i32, align 4
  store i32 %0, i32* %100, align 4
  call void @llvm.dbg.declare(metadata i32* %100, metadata !178, metadata !DIExpression()), !dbg !157
  %101 = load i32, i32* %100, align 4, !dbg !158
  %102 = icmp eq i32 %101, 0, !dbg !158
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %38
  call void @__assert_fail(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 40, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__PRETTY_FUNCTION__.usage, i64 0, i64 0)) #12, !dbg !158
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %55
  %103 = call i8* @gettext(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !162
  %104 = load i8*, i8** @program_name, align 8, !dbg !163
  %105 = load i8*, i8** @program_name, align 8, !dbg !164
  %106 = call i32 (i8*, ...) @printf(i8* %103, i8* %104, i8* %105), !dbg !165
  %107 = call i8* @gettext(i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !166
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !166
  %109 = call i32 @fputs_unlocked(i8* %107, %struct._IO_FILE* %108), !dbg !166
  %110 = call i8* @gettext(i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !167
  %111 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !167
  %112 = call i32 @fputs_unlocked(i8* %110, %struct._IO_FILE* %111), !dbg !167
  %113 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !168
  %114 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !168
  %115 = call i32 @fputs_unlocked(i8* %113, %struct._IO_FILE* %114), !dbg !168
  %116 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !169
  %117 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !169
  %118 = call i32 @fputs_unlocked(i8* %116, %struct._IO_FILE* %117), !dbg !169
  %119 = call i8* @gettext(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.7, i64 0, i64 0)) #10, !dbg !170
  %120 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !170
  %121 = call i32 @fputs_unlocked(i8* %119, %struct._IO_FILE* %120), !dbg !170
  %122 = call i8* @gettext(i8* getelementptr inbounds ([229 x i8], [229 x i8]* @.str.8, i64 0, i64 0)) #10, !dbg !171
  %123 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !171
  %124 = call i32 @fputs_unlocked(i8* %122, %struct._IO_FILE* %123), !dbg !171
  %125 = call i8* @gettext(i8* getelementptr inbounds ([110 x i8], [110 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !172
  %126 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !172
  %127 = call i32 @fputs_unlocked(i8* %125, %struct._IO_FILE* %126), !dbg !172
  %128 = call i8* @gettext(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !173
  %129 = call i32 (i8*, ...) @printf(i8* %128, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0)), !dbg !174
  call void @emit_ancillary_info(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0)), !dbg !175
  %130 = load i32, i32* %10, align 4, !dbg !176
  call void @exit(i32 %130) #12, !dbg !177
  br label %originalBB10
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @gettext(i8*) #3

declare dso_local i32 @printf(i8*, ...) #4

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(i8*) #5 !dbg !181 {
  %2 = load i32, i32* @x.1
  %3 = load i32, i32* @y.2
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca [7 x %struct.infomap], align 16
  %12 = alloca i8*, align 8
  %13 = alloca %struct.infomap*, align 8
  %14 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !185, metadata !DIExpression()), !dbg !186
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %11, metadata !187, metadata !DIExpression()), !dbg !196
  %15 = bitcast [7 x %struct.infomap]* %11 to i8*, !dbg !196
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !196
  call void @llvm.dbg.declare(metadata i8** %12, metadata !197, metadata !DIExpression()), !dbg !198
  %16 = load i8*, i8** %10, align 8, !dbg !199
  store i8* %16, i8** %12, align 8, !dbg !198
  call void @llvm.dbg.declare(metadata %struct.infomap** %13, metadata !200, metadata !DIExpression()), !dbg !202
  %17 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %11, i64 0, i64 0, !dbg !203
  store %struct.infomap* %17, %struct.infomap** %13, align 8, !dbg !202
  %18 = load i32, i32* @x.1
  %19 = load i32, i32* @y.2
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %26, !dbg !204

26:                                               ; preds = %originalBBpart219, %originalBBpart2
  %27 = load i32, i32* @x.1
  %28 = load i32, i32* @y.2
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !205
  %36 = getelementptr inbounds %struct.infomap, %struct.infomap* %35, i32 0, i32 0, !dbg !206
  %37 = load i8*, i8** %36, align 8, !dbg !206
  %38 = icmp ne i8* %37, null, !dbg !205
  %39 = load i32, i32* @x.1
  %40 = load i32, i32* @y.2
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %71, !dbg !207

47:                                               ; preds = %originalBBpart24
  %48 = load i32, i32* @x.1
  %49 = load i32, i32* @y.2
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = load i8*, i8** %10, align 8, !dbg !208
  %57 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !208
  %58 = getelementptr inbounds %struct.infomap, %struct.infomap* %57, i32 0, i32 0, !dbg !208
  %59 = load i8*, i8** %58, align 8, !dbg !208
  %60 = call i32 @strcmp(i8* %56, i8* %59) #13, !dbg !208
  %61 = icmp eq i32 %60, 0, !dbg !208
  %62 = xor i1 %61, true, !dbg !209
  %63 = load i32, i32* @x.1
  %64 = load i32, i32* @y.2
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart211, label %originalBB6alteredBB

originalBBpart211:                                ; preds = %originalBB6
  br label %71

71:                                               ; preds = %originalBBpart211, %originalBBpart24
  %72 = phi i1 [ false, %originalBBpart24 ], [ %62, %originalBBpart211 ], !dbg !210
  %73 = load i32, i32* @x.1
  %74 = load i32, i32* @y.2
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB13, label %originalBB13alteredBB

originalBB13:                                     ; preds = %71, %originalBB13alteredBB
  %81 = load i32, i32* @x.1
  %82 = load i32, i32* @y.2
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBBpart215, label %originalBB13alteredBB

originalBBpart215:                                ; preds = %originalBB13
  br i1 %72, label %89, label %108, !dbg !204

89:                                               ; preds = %originalBBpart215
  %90 = load i32, i32* @x.1
  %91 = load i32, i32* @y.2
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %89, %originalBB17alteredBB
  %98 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !211
  %99 = getelementptr inbounds %struct.infomap, %struct.infomap* %98, i32 1, !dbg !211
  store %struct.infomap* %99, %struct.infomap** %13, align 8, !dbg !211
  %100 = load i32, i32* @x.1
  %101 = load i32, i32* @y.2
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart219, label %originalBB17alteredBB

originalBBpart219:                                ; preds = %originalBB17
  br label %26, !dbg !204, !llvm.loop !212

108:                                              ; preds = %originalBBpart215
  %109 = load i32, i32* @x.1
  %110 = load i32, i32* @y.2
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB21, label %originalBB21alteredBB

originalBB21:                                     ; preds = %108, %originalBB21alteredBB
  %117 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !213
  %118 = getelementptr inbounds %struct.infomap, %struct.infomap* %117, i32 0, i32 1, !dbg !215
  %119 = load i8*, i8** %118, align 8, !dbg !215
  %120 = icmp ne i8* %119, null, !dbg !213
  %121 = load i32, i32* @x.1
  %122 = load i32, i32* @y.2
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart223, label %originalBB21alteredBB

originalBBpart223:                                ; preds = %originalBB21
  br i1 %120, label %129, label %149, !dbg !216

129:                                              ; preds = %originalBBpart223
  %130 = load i32, i32* @x.1
  %131 = load i32, i32* @y.2
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %129, %originalBB25alteredBB
  %138 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !217
  %139 = getelementptr inbounds %struct.infomap, %struct.infomap* %138, i32 0, i32 1, !dbg !218
  %140 = load i8*, i8** %139, align 8, !dbg !218
  store i8* %140, i8** %12, align 8, !dbg !219
  %141 = load i32, i32* @x.1
  %142 = load i32, i32* @y.2
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br label %149, !dbg !220

149:                                              ; preds = %originalBBpart227, %originalBBpart223
  %150 = load i32, i32* @x.1
  %151 = load i32, i32* @y.2
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %149, %originalBB29alteredBB
  %158 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.30, i64 0, i64 0)) #10, !dbg !221
  %159 = call i32 (i8*, ...) @printf(i8* %158, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.31, i64 0, i64 0)), !dbg !222
  call void @llvm.dbg.declare(metadata i8** %14, metadata !223, metadata !DIExpression()), !dbg !224
  %160 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !225
  store i8* %160, i8** %14, align 8, !dbg !224
  %161 = load i8*, i8** %14, align 8, !dbg !226
  %162 = icmp ne i8* %161, null, !dbg !226
  %163 = load i32, i32* @x.1
  %164 = load i32, i32* @y.2
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br i1 %162, label %171, label %211, !dbg !228

171:                                              ; preds = %originalBBpart231
  %172 = load i32, i32* @x.1
  %173 = load i32, i32* @y.2
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %171, %originalBB33alteredBB
  %180 = load i8*, i8** %14, align 8, !dbg !229
  %181 = call i32 @strncmp(i8* %180, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.32, i64 0, i64 0), i64 3) #13, !dbg !229
  %182 = icmp ne i32 %181, 0, !dbg !229
  %183 = load i32, i32* @x.1
  %184 = load i32, i32* @y.2
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br i1 %182, label %191, label %211, !dbg !230

191:                                              ; preds = %originalBBpart235
  %192 = load i32, i32* @x.1
  %193 = load i32, i32* @y.2
  %194 = sub i32 %192, 1
  %195 = mul i32 %192, %194
  %196 = urem i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %197, %198
  br i1 %199, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %191, %originalBB37alteredBB
  %200 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.33, i64 0, i64 0)) #10, !dbg !231
  %201 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !231
  %202 = call i32 @fputs_unlocked(i8* %200, %struct._IO_FILE* %201), !dbg !231
  %203 = load i32, i32* @x.1
  %204 = load i32, i32* @y.2
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  br label %211, !dbg !233

211:                                              ; preds = %originalBBpart239, %originalBBpart235, %originalBBpart231
  %212 = load i32, i32* @x.1
  %213 = load i32, i32* @y.2
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %211, %originalBB41alteredBB
  %220 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.34, i64 0, i64 0)) #10, !dbg !234
  %221 = load i8*, i8** %10, align 8, !dbg !235
  %222 = call i32 (i8*, ...) @printf(i8* %220, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.31, i64 0, i64 0), i8* %221), !dbg !236
  %223 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.35, i64 0, i64 0)) #10, !dbg !237
  %224 = load i8*, i8** %12, align 8, !dbg !238
  %225 = load i8*, i8** %12, align 8, !dbg !239
  %226 = load i8*, i8** %10, align 8, !dbg !240
  %227 = icmp eq i8* %225, %226, !dbg !241
  %228 = zext i1 %227 to i64, !dbg !239
  %229 = select i1 %227, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), !dbg !239
  %230 = call i32 (i8*, ...) @printf(i8* %223, i8* %224, i8* %229), !dbg !242
  %231 = load i32, i32* @x.1
  %232 = load i32, i32* @y.2
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBBpart243, label %originalBB41alteredBB

originalBBpart243:                                ; preds = %originalBB41
  ret void, !dbg !243

originalBBalteredBB:                              ; preds = %originalBB, %1
  %239 = alloca i8*, align 8
  %240 = alloca [7 x %struct.infomap], align 16
  %241 = alloca i8*, align 8
  %242 = alloca %struct.infomap*, align 8
  %243 = alloca i8*, align 8
  store i8* %0, i8** %239, align 8
  call void @llvm.dbg.declare(metadata i8** %239, metadata !244, metadata !DIExpression()), !dbg !186
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %240, metadata !247, metadata !DIExpression()), !dbg !196
  %244 = bitcast [7 x %struct.infomap]* %240 to i8*, !dbg !196
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %244, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !196
  call void @llvm.dbg.declare(metadata i8** %241, metadata !254, metadata !DIExpression()), !dbg !198
  %245 = load i8*, i8** %239, align 8, !dbg !199
  store i8* %245, i8** %241, align 8, !dbg !198
  call void @llvm.dbg.declare(metadata %struct.infomap** %242, metadata !255, metadata !DIExpression()), !dbg !202
  %246 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %240, i64 0, i64 0, !dbg !203
  store %struct.infomap* %246, %struct.infomap** %242, align 8, !dbg !202
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %247 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !205
  %248 = getelementptr inbounds %struct.infomap, %struct.infomap* %247, i32 0, i32 0, !dbg !206
  %249 = load i8*, i8** %248, align 8, !dbg !206
  %250 = icmp ne i8* %249, null, !dbg !205
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %251 = load i8*, i8** %10, align 8, !dbg !208
  %252 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !208
  %253 = getelementptr inbounds %struct.infomap, %struct.infomap* %252, i32 0, i32 0, !dbg !208
  %254 = load i8*, i8** %253, align 8, !dbg !208
  %255 = call i32 @strcmp(i8* %251, i8* %254) #13, !dbg !208
  %256 = icmp eq i32 %255, 0, !dbg !208
  %_ = sub i1 %256, true
  %gen = mul i1 %_, true
  %_7 = shl i1 %256, true
  %_8 = sub i1 %256, true
  %gen9 = mul i1 %_8, true
  %257 = xor i1 %256, true, !dbg !209
  br label %originalBB6

originalBB13alteredBB:                            ; preds = %originalBB13, %71
  br label %originalBB13

originalBB17alteredBB:                            ; preds = %originalBB17, %89
  %258 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !211
  %259 = getelementptr inbounds %struct.infomap, %struct.infomap* %258, i32 1, !dbg !211
  store %struct.infomap* %259, %struct.infomap** %13, align 8, !dbg !211
  br label %originalBB17

originalBB21alteredBB:                            ; preds = %originalBB21, %108
  %260 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !213
  %261 = getelementptr inbounds %struct.infomap, %struct.infomap* %260, i32 0, i32 1, !dbg !215
  %262 = load i8*, i8** %261, align 8, !dbg !215
  %263 = icmp ne i8* %262, null, !dbg !213
  br label %originalBB21

originalBB25alteredBB:                            ; preds = %originalBB25, %129
  %264 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !217
  %265 = getelementptr inbounds %struct.infomap, %struct.infomap* %264, i32 0, i32 1, !dbg !218
  %266 = load i8*, i8** %265, align 8, !dbg !218
  store i8* %266, i8** %12, align 8, !dbg !219
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %149
  %267 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.30, i64 0, i64 0)) #10, !dbg !221
  %268 = call i32 (i8*, ...) @printf(i8* %267, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.31, i64 0, i64 0)), !dbg !222
  call void @llvm.dbg.declare(metadata !4, metadata !257, metadata !DIExpression()), !dbg !224
  %269 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !225
  store i8* %269, i8** %14, align 8, !dbg !224
  %270 = load i8*, i8** %14, align 8, !dbg !226
  %271 = icmp ne i8* %270, null, !dbg !226
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %171
  %272 = load i8*, i8** %14, align 8, !dbg !229
  %273 = call i32 @strncmp(i8* %272, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.32, i64 0, i64 0), i64 3) #13, !dbg !229
  %274 = icmp ne i32 %273, 0, !dbg !229
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %191
  %275 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.33, i64 0, i64 0)) #10, !dbg !231
  %276 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !231
  %277 = call i32 @fputs_unlocked(i8* %275, %struct._IO_FILE* %276), !dbg !231
  br label %originalBB37

originalBB41alteredBB:                            ; preds = %originalBB41, %211
  %278 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.34, i64 0, i64 0)) #10, !dbg !234
  %279 = load i8*, i8** %10, align 8, !dbg !235
  %280 = call i32 (i8*, ...) @printf(i8* %278, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.31, i64 0, i64 0), i8* %279), !dbg !236
  %281 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.35, i64 0, i64 0)) #10, !dbg !237
  %282 = load i8*, i8** %12, align 8, !dbg !238
  %283 = load i8*, i8** %12, align 8, !dbg !239
  %284 = load i8*, i8** %10, align 8, !dbg !240
  %285 = icmp eq i8* %283, %284, !dbg !241
  %286 = zext i1 %285 to i64, !dbg !239
  %287 = select i1 %285, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), !dbg !239
  %288 = call i32 (i8*, ...) @printf(i8* %281, i8* %282, i8* %287), !dbg !242
  br label %originalBB41
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #7

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #3

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) #5 !dbg !260 {
  %3 = load i32, i32* @x.3
  %4 = load i32, i32* @y.4
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8**, align 8
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  %18 = alloca i8*, align 8
  %19 = alloca i64, align 8
  %20 = alloca i8*, align 8
  %21 = alloca i8, align 1
  %22 = alloca i8, align 1
  store i32 0, i32* %11, align 4
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !264, metadata !DIExpression()), !dbg !265
  store i8** %1, i8*** %13, align 8
  call void @llvm.dbg.declare(metadata i8*** %13, metadata !266, metadata !DIExpression()), !dbg !267
  call void @llvm.dbg.declare(metadata i8* %14, metadata !268, metadata !DIExpression()), !dbg !269
  store i8 1, i8* %14, align 1, !dbg !269
  call void @llvm.dbg.declare(metadata i8* %15, metadata !270, metadata !DIExpression()), !dbg !271
  %23 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !272
  %24 = icmp ne i8* %23, null, !dbg !272
  %25 = zext i1 %24 to i8, !dbg !271
  store i8 %25, i8* %15, align 1, !dbg !271
  call void @llvm.dbg.declare(metadata i8* %16, metadata !273, metadata !DIExpression()), !dbg !274
  %26 = load i8, i8* %15, align 1, !dbg !275
  %27 = trunc i8 %26 to i1, !dbg !275
  %28 = load i32, i32* @x.3
  %29 = load i32, i32* @y.4
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %27, label %36, label %95, !dbg !276

36:                                               ; preds = %originalBBpart2
  %37 = load i32, i32* @x.3
  %38 = load i32, i32* @y.4
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %36, %originalBB1alteredBB
  %45 = load i32, i32* %12, align 4, !dbg !277
  %46 = icmp slt i32 1, %45, !dbg !278
  %47 = load i32, i32* @x.3
  %48 = load i32, i32* @y.4
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %46, label %55, label %77, !dbg !279

55:                                               ; preds = %originalBBpart24
  %56 = load i32, i32* @x.3
  %57 = load i32, i32* @y.4
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %55, %originalBB6alteredBB
  %64 = load i8**, i8*** %13, align 8, !dbg !280
  %65 = getelementptr inbounds i8*, i8** %64, i64 1, !dbg !280
  %66 = load i8*, i8** %65, align 8, !dbg !280
  %67 = call i32 @strcmp(i8* %66, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0)) #13, !dbg !280
  %68 = icmp eq i32 %67, 0, !dbg !280
  %69 = load i32, i32* @x.3
  %70 = load i32, i32* @y.4
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %77

77:                                               ; preds = %originalBBpart28, %originalBBpart24
  %78 = phi i1 [ false, %originalBBpart24 ], [ %68, %originalBBpart28 ], !dbg !281
  %79 = load i32, i32* @x.3
  %80 = load i32, i32* @y.4
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %77, %originalBB10alteredBB
  %87 = load i32, i32* @x.3
  %88 = load i32, i32* @y.4
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %95, !dbg !276

95:                                               ; preds = %originalBBpart212, %originalBBpart2
  %96 = phi i1 [ true, %originalBBpart2 ], [ %78, %originalBBpart212 ]
  %97 = load i32, i32* @x.3
  %98 = load i32, i32* @y.4
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %95, %originalBB14alteredBB
  %105 = zext i1 %96 to i8, !dbg !274
  store i8 %105, i8* %16, align 1, !dbg !274
  call void @llvm.dbg.declare(metadata i8* %17, metadata !282, metadata !DIExpression()), !dbg !283
  store i8 0, i8* %17, align 1, !dbg !283
  %106 = load i8**, i8*** %13, align 8, !dbg !284
  %107 = getelementptr inbounds i8*, i8** %106, i64 0, !dbg !284
  %108 = load i8*, i8** %107, align 8, !dbg !284
  call void @set_program_name(i8* %108), !dbg !285
  %109 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)) #10, !dbg !286
  %110 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !287
  %111 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0)) #10, !dbg !288
  %112 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !289
  %113 = load i8, i8* %16, align 1, !dbg !290
  %114 = trunc i8 %113 to i1, !dbg !290
  %115 = load i32, i32* @x.3
  %116 = load i32, i32* @y.4
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %114, label %123, label %809, !dbg !292

123:                                              ; preds = %originalBBpart216
  %124 = load i32, i32* @x.3
  %125 = load i32, i32* @y.4
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %123, %originalBB18alteredBB
  %132 = load i32, i32* %12, align 4, !dbg !293
  %133 = load i32, i32* @x.3
  %134 = load i32, i32* @y.4
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %141, !dbg !294

141:                                              ; preds = %originalBBpart220
  %142 = load i32, i32* @x.3
  %143 = load i32, i32* @y.4
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %141, %originalBB22alteredBB
  %collatzVar = alloca i32
  %150 = load i32, i32* @x.3
  %151 = load i32, i32* @y.4
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %158

158:                                              ; preds = %originalBBpart224
  %159 = load i32, i32* @x.3
  %160 = load i32, i32* @y.4
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %158, %originalBB26alteredBB
  %167 = load i32, i32* @inVal0
  %168 = icmp sgt i32 %167, 1
  %169 = load i32, i32* @x.3
  %170 = load i32, i32* @y.4
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %168, label %194, label %177

177:                                              ; preds = %originalBBpart228
  %178 = load i32, i32* @x.3
  %179 = load i32, i32* @y.4
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %177, %originalBB30alteredBB
  store i32 51, i32* %collatzVar
  %186 = load i32, i32* @x.3
  %187 = load i32, i32* @y.4
  %188 = sub i32 %186, 1
  %189 = mul i32 %186, %188
  %190 = urem i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %191, %192
  br i1 %193, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %194

194:                                              ; preds = %originalBBpart232, %originalBBpart228
  %195 = load i32, i32* @x.3
  %196 = load i32, i32* @y.4
  %197 = sub i32 %195, 1
  %198 = mul i32 %195, %197
  %199 = urem i32 %198, 2
  %200 = icmp eq i32 %199, 0
  %201 = icmp slt i32 %196, 10
  %202 = or i1 %200, %201
  br i1 %202, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %194, %originalBB34alteredBB
  %203 = load i8**, i8*** @inVal1
  %204 = getelementptr inbounds i8*, i8** %203, i64 1
  %205 = load i8*, i8** %204
  %controle = call i32 @controle(i8* %205, i32 2)
  store i32 %controle, i32* %collatzVar
  %206 = load i32, i32* @x.3
  %207 = load i32, i32* @y.4
  %208 = sub i32 %206, 1
  %209 = mul i32 %206, %208
  %210 = urem i32 %209, 2
  %211 = icmp eq i32 %210, 0
  %212 = icmp slt i32 %207, 10
  %213 = or i1 %211, %212
  br i1 %213, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %214

214:                                              ; preds = %originalBBpart299, %originalBBpart293, %originalBBpart236
  %215 = load i32, i32* @x.3
  %216 = load i32, i32* @y.4
  %217 = sub i32 %215, 1
  %218 = mul i32 %215, %217
  %219 = urem i32 %218, 2
  %220 = icmp eq i32 %219, 0
  %221 = icmp slt i32 %216, 10
  %222 = or i1 %220, %221
  br i1 %222, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %214, %originalBB38alteredBB
  %223 = load i32, i32* %collatzVar
  %224 = icmp sgt i32 %223, 1
  %225 = load i32, i32* @x.3
  %226 = load i32, i32* @y.4
  %227 = sub i32 %225, 1
  %228 = mul i32 %225, %227
  %229 = urem i32 %228, 2
  %230 = icmp eq i32 %229, 0
  %231 = icmp slt i32 %226, 10
  %232 = or i1 %230, %231
  br i1 %232, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %224, label %233, label %809

233:                                              ; preds = %originalBBpart240
  %234 = load i32, i32* @x.3
  %235 = load i32, i32* @y.4
  %236 = sub i32 %234, 1
  %237 = mul i32 %234, %236
  %238 = urem i32 %237, 2
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %239, %240
  br i1 %241, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %233, %originalBB42alteredBB
  %242 = load i32, i32* %collatzVar
  %243 = srem i32 %242, 2
  %244 = icmp eq i32 %243, 0
  %245 = load i32, i32* @x.3
  %246 = load i32, i32* @y.4
  %247 = sub i32 %245, 1
  %248 = mul i32 %245, %247
  %249 = urem i32 %248, 2
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %250, %251
  br i1 %252, label %originalBBpart246, label %originalBB42alteredBB

originalBBpart246:                                ; preds = %originalBB42
  br i1 %244, label %253, label %272

253:                                              ; preds = %originalBBpart246
  %254 = load i32, i32* @x.3
  %255 = load i32, i32* @y.4
  %256 = sub i32 %254, 1
  %257 = mul i32 %254, %256
  %258 = urem i32 %257, 2
  %259 = icmp eq i32 %258, 0
  %260 = icmp slt i32 %255, 10
  %261 = or i1 %259, %260
  br i1 %261, label %originalBB48, label %originalBB48alteredBB

originalBB48:                                     ; preds = %253, %originalBB48alteredBB
  %262 = load i32, i32* %collatzVar
  %263 = sdiv i32 %262, 2
  store i32 %263, i32* %collatzVar
  %264 = load i32, i32* @x.3
  %265 = load i32, i32* @y.4
  %266 = sub i32 %264, 1
  %267 = mul i32 %264, %266
  %268 = urem i32 %267, 2
  %269 = icmp eq i32 %268, 0
  %270 = icmp slt i32 %265, 10
  %271 = or i1 %269, %270
  br i1 %271, label %originalBBpart255, label %originalBB48alteredBB

originalBBpart255:                                ; preds = %originalBB48
  br label %292

272:                                              ; preds = %originalBBpart246
  %273 = load i32, i32* @x.3
  %274 = load i32, i32* @y.4
  %275 = sub i32 %273, 1
  %276 = mul i32 %273, %275
  %277 = urem i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %278, %279
  br i1 %280, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %272, %originalBB57alteredBB
  %281 = load i32, i32* %collatzVar
  %282 = mul i32 %281, 3
  %283 = add i32 %282, 1
  store i32 %283, i32* %collatzVar
  %284 = load i32, i32* @x.3
  %285 = load i32, i32* @y.4
  %286 = sub i32 %284, 1
  %287 = mul i32 %284, %286
  %288 = urem i32 %287, 2
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %289, %290
  br i1 %291, label %originalBBpart271, label %originalBB57alteredBB

originalBBpart271:                                ; preds = %originalBB57
  br label %292

292:                                              ; preds = %originalBBpart271, %originalBBpart255
  %293 = load i32, i32* @x.3
  %294 = load i32, i32* @y.4
  %295 = sub i32 %293, 1
  %296 = mul i32 %293, %295
  %297 = urem i32 %296, 2
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %298, %299
  br i1 %300, label %originalBB73, label %originalBB73alteredBB

originalBB73:                                     ; preds = %292, %originalBB73alteredBB
  %301 = load i32, i32* %collatzVar
  %302 = sub i32 %132, %301
  %303 = icmp sgt i32 %302, 0
  %304 = load i32, i32* @x.3
  %305 = load i32, i32* @y.4
  %306 = sub i32 %304, 1
  %307 = mul i32 %304, %306
  %308 = urem i32 %307, 2
  %309 = icmp eq i32 %308, 0
  %310 = icmp slt i32 %305, 10
  %311 = or i1 %309, %310
  br i1 %311, label %originalBBpart293, label %originalBB73alteredBB

originalBBpart293:                                ; preds = %originalBB73
  br i1 %303, label %312, label %214

312:                                              ; preds = %originalBBpart293
  %313 = load i32, i32* @x.3
  %314 = load i32, i32* @y.4
  %315 = sub i32 %313, 1
  %316 = mul i32 %313, %315
  %317 = urem i32 %316, 2
  %318 = icmp eq i32 %317, 0
  %319 = icmp slt i32 %314, 10
  %320 = or i1 %318, %319
  br i1 %320, label %originalBB95, label %originalBB95alteredBB

originalBB95:                                     ; preds = %312, %originalBB95alteredBB
  %321 = load i32, i32* %collatzVar
  %322 = add i32 %132, %321
  %323 = icmp slt i32 %322, 4
  %324 = load i32, i32* @x.3
  %325 = load i32, i32* @y.4
  %326 = sub i32 %324, 1
  %327 = mul i32 %324, %326
  %328 = urem i32 %327, 2
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %329, %330
  br i1 %331, label %originalBBpart299, label %originalBB95alteredBB

originalBBpart299:                                ; preds = %originalBB95
  br i1 %323, label %332, label %214

332:                                              ; preds = %originalBBpart299
  %333 = load i32, i32* @x.3
  %334 = load i32, i32* @y.4
  %335 = sub i32 %333, 1
  %336 = mul i32 %333, %335
  %337 = urem i32 %336, 2
  %338 = icmp eq i32 %337, 0
  %339 = icmp slt i32 %334, 10
  %340 = or i1 %338, %339
  br i1 %340, label %originalBB101, label %originalBB101alteredBB

originalBB101:                                    ; preds = %332, %originalBB101alteredBB
  %341 = load i8**, i8*** %13, align 8, !dbg !295
  %342 = getelementptr inbounds i8*, i8** %341, i64 1, !dbg !295
  %343 = load i8*, i8** %342, align 8, !dbg !295
  %344 = call i32 @strcmp(i8* %343, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i64 0, i64 0)) #13, !dbg !295
  %345 = load i32, i32* @x.3
  %346 = load i32, i32* @y.4
  %347 = sub i32 %345, 1
  %348 = mul i32 %345, %347
  %349 = urem i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = icmp slt i32 %346, 10
  %352 = or i1 %350, %351
  br i1 %352, label %originalBBpart2103, label %originalBB101alteredBB

originalBBpart2103:                               ; preds = %originalBB101
  br label %353, !dbg !295

353:                                              ; preds = %originalBBpart2103
  %354 = load i32, i32* @x.3
  %355 = load i32, i32* @y.4
  %356 = sub i32 %354, 1
  %357 = mul i32 %354, %356
  %358 = urem i32 %357, 2
  %359 = icmp eq i32 %358, 0
  %360 = icmp slt i32 %355, 10
  %361 = or i1 %359, %360
  br i1 %361, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %353, %originalBB105alteredBB
  %collatzVar5 = alloca i32
  %362 = load i32, i32* @x.3
  %363 = load i32, i32* @y.4
  %364 = sub i32 %362, 1
  %365 = mul i32 %362, %364
  %366 = urem i32 %365, 2
  %367 = icmp eq i32 %366, 0
  %368 = icmp slt i32 %363, 10
  %369 = or i1 %367, %368
  br i1 %369, label %originalBBpart2107, label %originalBB105alteredBB

originalBBpart2107:                               ; preds = %originalBB105
  br label %370

370:                                              ; preds = %originalBBpart2107
  %371 = load i32, i32* @x.3
  %372 = load i32, i32* @y.4
  %373 = sub i32 %371, 1
  %374 = mul i32 %371, %373
  %375 = urem i32 %374, 2
  %376 = icmp eq i32 %375, 0
  %377 = icmp slt i32 %372, 10
  %378 = or i1 %376, %377
  br i1 %378, label %originalBB109, label %originalBB109alteredBB

originalBB109:                                    ; preds = %370, %originalBB109alteredBB
  %379 = load i32, i32* @inVal0
  %380 = icmp sgt i32 %379, 1
  %381 = load i32, i32* @x.3
  %382 = load i32, i32* @y.4
  %383 = sub i32 %381, 1
  %384 = mul i32 %381, %383
  %385 = urem i32 %384, 2
  %386 = icmp eq i32 %385, 0
  %387 = icmp slt i32 %382, 10
  %388 = or i1 %386, %387
  br i1 %388, label %originalBBpart2111, label %originalBB109alteredBB

originalBBpart2111:                               ; preds = %originalBB109
  br i1 %380, label %406, label %389

389:                                              ; preds = %originalBBpart2111
  %390 = load i32, i32* @x.3
  %391 = load i32, i32* @y.4
  %392 = sub i32 %390, 1
  %393 = mul i32 %390, %392
  %394 = urem i32 %393, 2
  %395 = icmp eq i32 %394, 0
  %396 = icmp slt i32 %391, 10
  %397 = or i1 %395, %396
  br i1 %397, label %originalBB113, label %originalBB113alteredBB

originalBB113:                                    ; preds = %389, %originalBB113alteredBB
  store i32 18, i32* %collatzVar5
  %398 = load i32, i32* @x.3
  %399 = load i32, i32* @y.4
  %400 = sub i32 %398, 1
  %401 = mul i32 %398, %400
  %402 = urem i32 %401, 2
  %403 = icmp eq i32 %402, 0
  %404 = icmp slt i32 %399, 10
  %405 = or i1 %403, %404
  br i1 %405, label %originalBBpart2115, label %originalBB113alteredBB

originalBBpart2115:                               ; preds = %originalBB113
  br label %406

406:                                              ; preds = %originalBBpart2115, %originalBBpart2111
  %407 = load i32, i32* @x.3
  %408 = load i32, i32* @y.4
  %409 = sub i32 %407, 1
  %410 = mul i32 %407, %409
  %411 = urem i32 %410, 2
  %412 = icmp eq i32 %411, 0
  %413 = icmp slt i32 %408, 10
  %414 = or i1 %412, %413
  br i1 %414, label %originalBB117, label %originalBB117alteredBB

originalBB117:                                    ; preds = %406, %originalBB117alteredBB
  %415 = load i8**, i8*** @inVal1
  %416 = getelementptr inbounds i8*, i8** %415, i64 1
  %417 = load i8*, i8** %416
  %controle6 = call i32 @controle(i8* %417, i32 0)
  store i32 %controle6, i32* %collatzVar5
  %418 = load i32, i32* @x.3
  %419 = load i32, i32* @y.4
  %420 = sub i32 %418, 1
  %421 = mul i32 %418, %420
  %422 = urem i32 %421, 2
  %423 = icmp eq i32 %422, 0
  %424 = icmp slt i32 %419, 10
  %425 = or i1 %423, %424
  br i1 %425, label %originalBBpart2119, label %originalBB117alteredBB

originalBBpart2119:                               ; preds = %originalBB117
  br label %426

426:                                              ; preds = %originalBBpart2176, %originalBBpart2165, %originalBBpart2119
  %427 = load i32, i32* @x.3
  %428 = load i32, i32* @y.4
  %429 = sub i32 %427, 1
  %430 = mul i32 %427, %429
  %431 = urem i32 %430, 2
  %432 = icmp eq i32 %431, 0
  %433 = icmp slt i32 %428, 10
  %434 = or i1 %432, %433
  br i1 %434, label %originalBB121, label %originalBB121alteredBB

originalBB121:                                    ; preds = %426, %originalBB121alteredBB
  %435 = load i32, i32* %collatzVar5
  %436 = icmp sgt i32 %435, 1
  %437 = load i32, i32* @x.3
  %438 = load i32, i32* @y.4
  %439 = sub i32 %437, 1
  %440 = mul i32 %437, %439
  %441 = urem i32 %440, 2
  %442 = icmp eq i32 %441, 0
  %443 = icmp slt i32 %438, 10
  %444 = or i1 %442, %443
  br i1 %444, label %originalBBpart2123, label %originalBB121alteredBB

originalBBpart2123:                               ; preds = %originalBB121
  br i1 %436, label %445, label %561

445:                                              ; preds = %originalBBpart2123
  %446 = load i32, i32* @x.3
  %447 = load i32, i32* @y.4
  %448 = sub i32 %446, 1
  %449 = mul i32 %446, %448
  %450 = urem i32 %449, 2
  %451 = icmp eq i32 %450, 0
  %452 = icmp slt i32 %447, 10
  %453 = or i1 %451, %452
  br i1 %453, label %originalBB125, label %originalBB125alteredBB

originalBB125:                                    ; preds = %445, %originalBB125alteredBB
  %454 = load i32, i32* %collatzVar5
  %455 = srem i32 %454, 2
  %456 = icmp eq i32 %455, 0
  %457 = load i32, i32* @x.3
  %458 = load i32, i32* @y.4
  %459 = sub i32 %457, 1
  %460 = mul i32 %457, %459
  %461 = urem i32 %460, 2
  %462 = icmp eq i32 %461, 0
  %463 = icmp slt i32 %458, 10
  %464 = or i1 %462, %463
  br i1 %464, label %originalBBpart2128, label %originalBB125alteredBB

originalBBpart2128:                               ; preds = %originalBB125
  br i1 %456, label %465, label %484

465:                                              ; preds = %originalBBpart2128
  %466 = load i32, i32* @x.3
  %467 = load i32, i32* @y.4
  %468 = sub i32 %466, 1
  %469 = mul i32 %466, %468
  %470 = urem i32 %469, 2
  %471 = icmp eq i32 %470, 0
  %472 = icmp slt i32 %467, 10
  %473 = or i1 %471, %472
  br i1 %473, label %originalBB130, label %originalBB130alteredBB

originalBB130:                                    ; preds = %465, %originalBB130alteredBB
  %474 = load i32, i32* %collatzVar5
  %475 = sdiv i32 %474, 2
  store i32 %475, i32* %collatzVar5
  %476 = load i32, i32* @x.3
  %477 = load i32, i32* @y.4
  %478 = sub i32 %476, 1
  %479 = mul i32 %476, %478
  %480 = urem i32 %479, 2
  %481 = icmp eq i32 %480, 0
  %482 = icmp slt i32 %477, 10
  %483 = or i1 %481, %482
  br i1 %483, label %originalBBpart2138, label %originalBB130alteredBB

originalBBpart2138:                               ; preds = %originalBB130
  br label %504

484:                                              ; preds = %originalBBpart2128
  %485 = load i32, i32* @x.3
  %486 = load i32, i32* @y.4
  %487 = sub i32 %485, 1
  %488 = mul i32 %485, %487
  %489 = urem i32 %488, 2
  %490 = icmp eq i32 %489, 0
  %491 = icmp slt i32 %486, 10
  %492 = or i1 %490, %491
  br i1 %492, label %originalBB140, label %originalBB140alteredBB

originalBB140:                                    ; preds = %484, %originalBB140alteredBB
  %493 = load i32, i32* %collatzVar5
  %494 = mul i32 %493, 3
  %495 = add i32 %494, 1
  store i32 %495, i32* %collatzVar5
  %496 = load i32, i32* @x.3
  %497 = load i32, i32* @y.4
  %498 = sub i32 %496, 1
  %499 = mul i32 %496, %498
  %500 = urem i32 %499, 2
  %501 = icmp eq i32 %500, 0
  %502 = icmp slt i32 %497, 10
  %503 = or i1 %501, %502
  br i1 %503, label %originalBBpart2157, label %originalBB140alteredBB

originalBBpart2157:                               ; preds = %originalBB140
  br label %504

504:                                              ; preds = %originalBBpart2157, %originalBBpart2138
  %505 = load i32, i32* @x.3
  %506 = load i32, i32* @y.4
  %507 = sub i32 %505, 1
  %508 = mul i32 %505, %507
  %509 = urem i32 %508, 2
  %510 = icmp eq i32 %509, 0
  %511 = icmp slt i32 %506, 10
  %512 = or i1 %510, %511
  br i1 %512, label %originalBB159, label %originalBB159alteredBB

originalBB159:                                    ; preds = %504, %originalBB159alteredBB
  %513 = load i32, i32* %collatzVar5
  %514 = sub i32 %344, %513
  %515 = icmp sgt i32 %514, -2
  %516 = load i32, i32* @x.3
  %517 = load i32, i32* @y.4
  %518 = sub i32 %516, 1
  %519 = mul i32 %516, %518
  %520 = urem i32 %519, 2
  %521 = icmp eq i32 %520, 0
  %522 = icmp slt i32 %517, 10
  %523 = or i1 %521, %522
  br i1 %523, label %originalBBpart2165, label %originalBB159alteredBB

originalBBpart2165:                               ; preds = %originalBB159
  br i1 %515, label %524, label %426

524:                                              ; preds = %originalBBpart2165
  %525 = load i32, i32* @x.3
  %526 = load i32, i32* @y.4
  %527 = sub i32 %525, 1
  %528 = mul i32 %525, %527
  %529 = urem i32 %528, 2
  %530 = icmp eq i32 %529, 0
  %531 = icmp slt i32 %526, 10
  %532 = or i1 %530, %531
  br i1 %532, label %originalBB167, label %originalBB167alteredBB

originalBB167:                                    ; preds = %524, %originalBB167alteredBB
  %533 = load i32, i32* %collatzVar5
  %534 = add i32 %344, %533
  %535 = icmp slt i32 %534, 2
  %536 = load i32, i32* @x.3
  %537 = load i32, i32* @y.4
  %538 = sub i32 %536, 1
  %539 = mul i32 %536, %538
  %540 = urem i32 %539, 2
  %541 = icmp eq i32 %540, 0
  %542 = icmp slt i32 %537, 10
  %543 = or i1 %541, %542
  br i1 %543, label %originalBBpart2176, label %originalBB167alteredBB

originalBBpart2176:                               ; preds = %originalBB167
  br i1 %535, label %544, label %426

544:                                              ; preds = %originalBBpart2176
  %545 = load i32, i32* @x.3
  %546 = load i32, i32* @y.4
  %547 = sub i32 %545, 1
  %548 = mul i32 %545, %547
  %549 = urem i32 %548, 2
  %550 = icmp eq i32 %549, 0
  %551 = icmp slt i32 %546, 10
  %552 = or i1 %550, %551
  br i1 %552, label %originalBB178, label %originalBB178alteredBB

originalBB178:                                    ; preds = %544, %originalBB178alteredBB
  call void @usage(i32 0) #14, !dbg !298
  %553 = load i32, i32* @x.3
  %554 = load i32, i32* @y.4
  %555 = sub i32 %553, 1
  %556 = mul i32 %553, %555
  %557 = urem i32 %556, 2
  %558 = icmp eq i32 %557, 0
  %559 = icmp slt i32 %554, 10
  %560 = or i1 %558, %559
  br i1 %560, label %originalBBpart2180, label %originalBB178alteredBB

originalBBpart2180:                               ; preds = %originalBB178
  unreachable, !dbg !298

561:                                              ; preds = %originalBBpart2123
  %562 = load i32, i32* @x.3
  %563 = load i32, i32* @y.4
  %564 = sub i32 %562, 1
  %565 = mul i32 %562, %564
  %566 = urem i32 %565, 2
  %567 = icmp eq i32 %566, 0
  %568 = icmp slt i32 %563, 10
  %569 = or i1 %567, %568
  br i1 %569, label %originalBB182, label %originalBB182alteredBB

originalBB182:                                    ; preds = %561, %originalBB182alteredBB
  %570 = load i8**, i8*** %13, align 8, !dbg !299
  %571 = getelementptr inbounds i8*, i8** %570, i64 1, !dbg !299
  %572 = load i8*, i8** %571, align 8, !dbg !299
  %573 = call i32 @strcmp(i8* %572, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i64 0, i64 0)) #13, !dbg !299
  %574 = load i32, i32* @x.3
  %575 = load i32, i32* @y.4
  %576 = sub i32 %574, 1
  %577 = mul i32 %574, %576
  %578 = urem i32 %577, 2
  %579 = icmp eq i32 %578, 0
  %580 = icmp slt i32 %575, 10
  %581 = or i1 %579, %580
  br i1 %581, label %originalBBpart2184, label %originalBB182alteredBB

originalBBpart2184:                               ; preds = %originalBB182
  br label %582, !dbg !299

582:                                              ; preds = %originalBBpart2184
  %583 = load i32, i32* @x.3
  %584 = load i32, i32* @y.4
  %585 = sub i32 %583, 1
  %586 = mul i32 %583, %585
  %587 = urem i32 %586, 2
  %588 = icmp eq i32 %587, 0
  %589 = icmp slt i32 %584, 10
  %590 = or i1 %588, %589
  br i1 %590, label %originalBB186, label %originalBB186alteredBB

originalBB186:                                    ; preds = %582, %originalBB186alteredBB
  %collatzVar1 = alloca i32
  %591 = load i32, i32* @x.3
  %592 = load i32, i32* @y.4
  %593 = sub i32 %591, 1
  %594 = mul i32 %591, %593
  %595 = urem i32 %594, 2
  %596 = icmp eq i32 %595, 0
  %597 = icmp slt i32 %592, 10
  %598 = or i1 %596, %597
  br i1 %598, label %originalBBpart2188, label %originalBB186alteredBB

originalBBpart2188:                               ; preds = %originalBB186
  br label %599

599:                                              ; preds = %originalBBpart2188
  %600 = load i32, i32* @x.3
  %601 = load i32, i32* @y.4
  %602 = sub i32 %600, 1
  %603 = mul i32 %600, %602
  %604 = urem i32 %603, 2
  %605 = icmp eq i32 %604, 0
  %606 = icmp slt i32 %601, 10
  %607 = or i1 %605, %606
  br i1 %607, label %originalBB190, label %originalBB190alteredBB

originalBB190:                                    ; preds = %599, %originalBB190alteredBB
  %608 = load i32, i32* @inVal0
  %609 = icmp sgt i32 %608, 1
  %610 = load i32, i32* @x.3
  %611 = load i32, i32* @y.4
  %612 = sub i32 %610, 1
  %613 = mul i32 %610, %612
  %614 = urem i32 %613, 2
  %615 = icmp eq i32 %614, 0
  %616 = icmp slt i32 %611, 10
  %617 = or i1 %615, %616
  br i1 %617, label %originalBBpart2192, label %originalBB190alteredBB

originalBBpart2192:                               ; preds = %originalBB190
  br i1 %609, label %635, label %618

618:                                              ; preds = %originalBBpart2192
  %619 = load i32, i32* @x.3
  %620 = load i32, i32* @y.4
  %621 = sub i32 %619, 1
  %622 = mul i32 %619, %621
  %623 = urem i32 %622, 2
  %624 = icmp eq i32 %623, 0
  %625 = icmp slt i32 %620, 10
  %626 = or i1 %624, %625
  br i1 %626, label %originalBB194, label %originalBB194alteredBB

originalBB194:                                    ; preds = %618, %originalBB194alteredBB
  store i32 5, i32* %collatzVar1
  %627 = load i32, i32* @x.3
  %628 = load i32, i32* @y.4
  %629 = sub i32 %627, 1
  %630 = mul i32 %627, %629
  %631 = urem i32 %630, 2
  %632 = icmp eq i32 %631, 0
  %633 = icmp slt i32 %628, 10
  %634 = or i1 %632, %633
  br i1 %634, label %originalBBpart2196, label %originalBB194alteredBB

originalBBpart2196:                               ; preds = %originalBB194
  br label %635

635:                                              ; preds = %originalBBpart2196, %originalBBpart2192
  %636 = load i32, i32* @x.3
  %637 = load i32, i32* @y.4
  %638 = sub i32 %636, 1
  %639 = mul i32 %636, %638
  %640 = urem i32 %639, 2
  %641 = icmp eq i32 %640, 0
  %642 = icmp slt i32 %637, 10
  %643 = or i1 %641, %642
  br i1 %643, label %originalBB198, label %originalBB198alteredBB

originalBB198:                                    ; preds = %635, %originalBB198alteredBB
  %644 = load i8**, i8*** @inVal1
  %645 = getelementptr inbounds i8*, i8** %644, i64 1
  %646 = load i8*, i8** %645
  %controle2 = call i32 @controle(i8* %646, i32 0)
  store i32 %controle2, i32* %collatzVar1
  %647 = load i32, i32* @x.3
  %648 = load i32, i32* @y.4
  %649 = sub i32 %647, 1
  %650 = mul i32 %647, %649
  %651 = urem i32 %650, 2
  %652 = icmp eq i32 %651, 0
  %653 = icmp slt i32 %648, 10
  %654 = or i1 %652, %653
  br i1 %654, label %originalBBpart2200, label %originalBB198alteredBB

originalBBpart2200:                               ; preds = %originalBB198
  br label %655

655:                                              ; preds = %originalBBpart2261, %originalBBpart2250, %originalBBpart2200
  %656 = load i32, i32* @x.3
  %657 = load i32, i32* @y.4
  %658 = sub i32 %656, 1
  %659 = mul i32 %656, %658
  %660 = urem i32 %659, 2
  %661 = icmp eq i32 %660, 0
  %662 = icmp slt i32 %657, 10
  %663 = or i1 %661, %662
  br i1 %663, label %originalBB202, label %originalBB202alteredBB

originalBB202:                                    ; preds = %655, %originalBB202alteredBB
  %664 = load i32, i32* %collatzVar1
  %665 = icmp sgt i32 %664, 1
  %666 = load i32, i32* @x.3
  %667 = load i32, i32* @y.4
  %668 = sub i32 %666, 1
  %669 = mul i32 %666, %668
  %670 = urem i32 %669, 2
  %671 = icmp eq i32 %670, 0
  %672 = icmp slt i32 %667, 10
  %673 = or i1 %671, %672
  br i1 %673, label %originalBBpart2204, label %originalBB202alteredBB

originalBBpart2204:                               ; preds = %originalBB202
  br i1 %665, label %674, label %792

674:                                              ; preds = %originalBBpart2204
  %675 = load i32, i32* @x.3
  %676 = load i32, i32* @y.4
  %677 = sub i32 %675, 1
  %678 = mul i32 %675, %677
  %679 = urem i32 %678, 2
  %680 = icmp eq i32 %679, 0
  %681 = icmp slt i32 %676, 10
  %682 = or i1 %680, %681
  br i1 %682, label %originalBB206, label %originalBB206alteredBB

originalBB206:                                    ; preds = %674, %originalBB206alteredBB
  %683 = load i32, i32* %collatzVar1
  %684 = srem i32 %683, 2
  %685 = icmp eq i32 %684, 0
  %686 = load i32, i32* @x.3
  %687 = load i32, i32* @y.4
  %688 = sub i32 %686, 1
  %689 = mul i32 %686, %688
  %690 = urem i32 %689, 2
  %691 = icmp eq i32 %690, 0
  %692 = icmp slt i32 %687, 10
  %693 = or i1 %691, %692
  br i1 %693, label %originalBBpart2223, label %originalBB206alteredBB

originalBBpart2223:                               ; preds = %originalBB206
  br i1 %685, label %694, label %713

694:                                              ; preds = %originalBBpart2223
  %695 = load i32, i32* @x.3
  %696 = load i32, i32* @y.4
  %697 = sub i32 %695, 1
  %698 = mul i32 %695, %697
  %699 = urem i32 %698, 2
  %700 = icmp eq i32 %699, 0
  %701 = icmp slt i32 %696, 10
  %702 = or i1 %700, %701
  br i1 %702, label %originalBB225, label %originalBB225alteredBB

originalBB225:                                    ; preds = %694, %originalBB225alteredBB
  %703 = load i32, i32* %collatzVar1
  %704 = sdiv i32 %703, 2
  store i32 %704, i32* %collatzVar1
  %705 = load i32, i32* @x.3
  %706 = load i32, i32* @y.4
  %707 = sub i32 %705, 1
  %708 = mul i32 %705, %707
  %709 = urem i32 %708, 2
  %710 = icmp eq i32 %709, 0
  %711 = icmp slt i32 %706, 10
  %712 = or i1 %710, %711
  br i1 %712, label %originalBBpart2227, label %originalBB225alteredBB

originalBBpart2227:                               ; preds = %originalBB225
  br label %733

713:                                              ; preds = %originalBBpart2223
  %714 = load i32, i32* @x.3
  %715 = load i32, i32* @y.4
  %716 = sub i32 %714, 1
  %717 = mul i32 %714, %716
  %718 = urem i32 %717, 2
  %719 = icmp eq i32 %718, 0
  %720 = icmp slt i32 %715, 10
  %721 = or i1 %719, %720
  br i1 %721, label %originalBB229, label %originalBB229alteredBB

originalBB229:                                    ; preds = %713, %originalBB229alteredBB
  %722 = load i32, i32* %collatzVar1
  %723 = mul i32 %722, 3
  %724 = add i32 %723, 1
  store i32 %724, i32* %collatzVar1
  %725 = load i32, i32* @x.3
  %726 = load i32, i32* @y.4
  %727 = sub i32 %725, 1
  %728 = mul i32 %725, %727
  %729 = urem i32 %728, 2
  %730 = icmp eq i32 %729, 0
  %731 = icmp slt i32 %726, 10
  %732 = or i1 %730, %731
  br i1 %732, label %originalBBpart2239, label %originalBB229alteredBB

originalBBpart2239:                               ; preds = %originalBB229
  br label %733

733:                                              ; preds = %originalBBpart2239, %originalBBpart2227
  %734 = load i32, i32* @x.3
  %735 = load i32, i32* @y.4
  %736 = sub i32 %734, 1
  %737 = mul i32 %734, %736
  %738 = urem i32 %737, 2
  %739 = icmp eq i32 %738, 0
  %740 = icmp slt i32 %735, 10
  %741 = or i1 %739, %740
  br i1 %741, label %originalBB241, label %originalBB241alteredBB

originalBB241:                                    ; preds = %733, %originalBB241alteredBB
  %742 = load i32, i32* %collatzVar1
  %743 = sub i32 %573, %742
  %744 = icmp sgt i32 %743, -2
  %745 = load i32, i32* @x.3
  %746 = load i32, i32* @y.4
  %747 = sub i32 %745, 1
  %748 = mul i32 %745, %747
  %749 = urem i32 %748, 2
  %750 = icmp eq i32 %749, 0
  %751 = icmp slt i32 %746, 10
  %752 = or i1 %750, %751
  br i1 %752, label %originalBBpart2250, label %originalBB241alteredBB

originalBBpart2250:                               ; preds = %originalBB241
  br i1 %744, label %753, label %655

753:                                              ; preds = %originalBBpart2250
  %754 = load i32, i32* @x.3
  %755 = load i32, i32* @y.4
  %756 = sub i32 %754, 1
  %757 = mul i32 %754, %756
  %758 = urem i32 %757, 2
  %759 = icmp eq i32 %758, 0
  %760 = icmp slt i32 %755, 10
  %761 = or i1 %759, %760
  br i1 %761, label %originalBB252, label %originalBB252alteredBB

originalBB252:                                    ; preds = %753, %originalBB252alteredBB
  %762 = load i32, i32* %collatzVar1
  %763 = add i32 %573, %762
  %764 = icmp slt i32 %763, 2
  %765 = load i32, i32* @x.3
  %766 = load i32, i32* @y.4
  %767 = sub i32 %765, 1
  %768 = mul i32 %765, %767
  %769 = urem i32 %768, 2
  %770 = icmp eq i32 %769, 0
  %771 = icmp slt i32 %766, 10
  %772 = or i1 %770, %771
  br i1 %772, label %originalBBpart2261, label %originalBB252alteredBB

originalBBpart2261:                               ; preds = %originalBB252
  br i1 %764, label %773, label %655

773:                                              ; preds = %originalBBpart2261
  %774 = load i32, i32* @x.3
  %775 = load i32, i32* @y.4
  %776 = sub i32 %774, 1
  %777 = mul i32 %774, %776
  %778 = urem i32 %777, 2
  %779 = icmp eq i32 %778, 0
  %780 = icmp slt i32 %775, 10
  %781 = or i1 %779, %780
  br i1 %781, label %originalBB263, label %originalBB263alteredBB

originalBB263:                                    ; preds = %773, %originalBB263alteredBB
  %782 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !301
  %783 = load i8*, i8** @Version, align 8, !dbg !303
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %782, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19, i64 0, i64 0), i8* %783, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i8* null), !dbg !304
  store i32 0, i32* %11, align 4, !dbg !305
  %784 = load i32, i32* @x.3
  %785 = load i32, i32* @y.4
  %786 = sub i32 %784, 1
  %787 = mul i32 %784, %786
  %788 = urem i32 %787, 2
  %789 = icmp eq i32 %788, 0
  %790 = icmp slt i32 %785, 10
  %791 = or i1 %789, %790
  br i1 %791, label %originalBBpart2265, label %originalBB263alteredBB

originalBBpart2265:                               ; preds = %originalBB263
  br label %2481, !dbg !305

792:                                              ; preds = %originalBBpart2204
  %793 = load i32, i32* @x.3
  %794 = load i32, i32* @y.4
  %795 = sub i32 %793, 1
  %796 = mul i32 %793, %795
  %797 = urem i32 %796, 2
  %798 = icmp eq i32 %797, 0
  %799 = icmp slt i32 %794, 10
  %800 = or i1 %798, %799
  br i1 %800, label %originalBB267, label %originalBB267alteredBB

originalBB267:                                    ; preds = %792, %originalBB267alteredBB
  %801 = load i32, i32* @x.3
  %802 = load i32, i32* @y.4
  %803 = sub i32 %801, 1
  %804 = mul i32 %801, %803
  %805 = urem i32 %804, 2
  %806 = icmp eq i32 %805, 0
  %807 = icmp slt i32 %802, 10
  %808 = or i1 %806, %807
  br i1 %808, label %originalBBpart2269, label %originalBB267alteredBB

originalBBpart2269:                               ; preds = %originalBB267
  br label %809, !dbg !306

809:                                              ; preds = %originalBBpart2269, %originalBBpart240, %originalBBpart216
  %810 = load i32, i32* @x.3
  %811 = load i32, i32* @y.4
  %812 = sub i32 %810, 1
  %813 = mul i32 %810, %812
  %814 = urem i32 %813, 2
  %815 = icmp eq i32 %814, 0
  %816 = icmp slt i32 %811, 10
  %817 = or i1 %815, %816
  br i1 %817, label %originalBB271, label %originalBB271alteredBB

originalBB271:                                    ; preds = %809, %originalBB271alteredBB
  %818 = load i32, i32* %12, align 4, !dbg !307
  %819 = add nsw i32 %818, -1, !dbg !307
  store i32 %819, i32* %12, align 4, !dbg !307
  %820 = load i8**, i8*** %13, align 8, !dbg !308
  %821 = getelementptr inbounds i8*, i8** %820, i32 1, !dbg !308
  store i8** %821, i8*** %13, align 8, !dbg !308
  %822 = load i8, i8* %16, align 1, !dbg !309
  %823 = trunc i8 %822 to i1, !dbg !309
  %824 = load i32, i32* @x.3
  %825 = load i32, i32* @y.4
  %826 = sub i32 %824, 1
  %827 = mul i32 %824, %826
  %828 = urem i32 %827, 2
  %829 = icmp eq i32 %828, 0
  %830 = icmp slt i32 %825, 10
  %831 = or i1 %829, %830
  br i1 %831, label %originalBBpart2286, label %originalBB271alteredBB

originalBBpart2286:                               ; preds = %originalBB271
  br i1 %823, label %832, label %1439, !dbg !311

832:                                              ; preds = %originalBBpart2286
  %833 = load i32, i32* @x.3
  %834 = load i32, i32* @y.4
  %835 = sub i32 %833, 1
  %836 = mul i32 %833, %835
  %837 = urem i32 %836, 2
  %838 = icmp eq i32 %837, 0
  %839 = icmp slt i32 %834, 10
  %840 = or i1 %838, %839
  br i1 %840, label %originalBB288, label %originalBB288alteredBB

originalBB288:                                    ; preds = %832, %originalBB288alteredBB
  %841 = load i32, i32* @x.3
  %842 = load i32, i32* @y.4
  %843 = sub i32 %841, 1
  %844 = mul i32 %841, %843
  %845 = urem i32 %844, 2
  %846 = icmp eq i32 %845, 0
  %847 = icmp slt i32 %842, 10
  %848 = or i1 %846, %847
  br i1 %848, label %originalBBpart2290, label %originalBB288alteredBB

originalBBpart2290:                               ; preds = %originalBB288
  br label %849, !dbg !312

849:                                              ; preds = %originalBBpart2465, %originalBBpart2290
  %850 = load i32, i32* @x.3
  %851 = load i32, i32* @y.4
  %852 = sub i32 %850, 1
  %853 = mul i32 %850, %852
  %854 = urem i32 %853, 2
  %855 = icmp eq i32 %854, 0
  %856 = icmp slt i32 %851, 10
  %857 = or i1 %855, %856
  br i1 %857, label %originalBB292, label %originalBB292alteredBB

originalBB292:                                    ; preds = %849, %originalBB292alteredBB
  %858 = load i32, i32* %12, align 4, !dbg !313
  %859 = icmp sgt i32 %858, 0, !dbg !314
  %860 = load i32, i32* @x.3
  %861 = load i32, i32* @y.4
  %862 = sub i32 %860, 1
  %863 = mul i32 %860, %862
  %864 = urem i32 %863, 2
  %865 = icmp eq i32 %864, 0
  %866 = icmp slt i32 %861, 10
  %867 = or i1 %865, %866
  br i1 %867, label %originalBBpart2294, label %originalBB292alteredBB

originalBBpart2294:                               ; preds = %originalBB292
  br i1 %859, label %868, label %891, !dbg !315

868:                                              ; preds = %originalBBpart2294
  %869 = load i32, i32* @x.3
  %870 = load i32, i32* @y.4
  %871 = sub i32 %869, 1
  %872 = mul i32 %869, %871
  %873 = urem i32 %872, 2
  %874 = icmp eq i32 %873, 0
  %875 = icmp slt i32 %870, 10
  %876 = or i1 %874, %875
  br i1 %876, label %originalBB296, label %originalBB296alteredBB

originalBB296:                                    ; preds = %868, %originalBB296alteredBB
  %877 = load i8**, i8*** %13, align 8, !dbg !316
  %878 = getelementptr inbounds i8*, i8** %877, i64 0, !dbg !316
  %879 = load i8*, i8** %878, align 8, !dbg !316
  %880 = load i8, i8* %879, align 1, !dbg !317
  %881 = sext i8 %880 to i32, !dbg !317
  %882 = icmp eq i32 %881, 45, !dbg !318
  %883 = load i32, i32* @x.3
  %884 = load i32, i32* @y.4
  %885 = sub i32 %883, 1
  %886 = mul i32 %883, %885
  %887 = urem i32 %886, 2
  %888 = icmp eq i32 %887, 0
  %889 = icmp slt i32 %884, 10
  %890 = or i1 %888, %889
  br i1 %890, label %originalBBpart2298, label %originalBB296alteredBB

originalBBpart2298:                               ; preds = %originalBB296
  br label %891

891:                                              ; preds = %originalBBpart2298, %originalBBpart2294
  %892 = phi i1 [ false, %originalBBpart2294 ], [ %882, %originalBBpart2298 ], !dbg !319
  %893 = load i32, i32* @x.3
  %894 = load i32, i32* @y.4
  %895 = sub i32 %893, 1
  %896 = mul i32 %893, %895
  %897 = urem i32 %896, 2
  %898 = icmp eq i32 %897, 0
  %899 = icmp slt i32 %894, 10
  %900 = or i1 %898, %899
  br i1 %900, label %originalBB300, label %originalBB300alteredBB

originalBB300:                                    ; preds = %891, %originalBB300alteredBB
  %901 = load i32, i32* @x.3
  %902 = load i32, i32* @y.4
  %903 = sub i32 %901, 1
  %904 = mul i32 %901, %903
  %905 = urem i32 %904, 2
  %906 = icmp eq i32 %905, 0
  %907 = icmp slt i32 %902, 10
  %908 = or i1 %906, %907
  br i1 %908, label %originalBBpart2302, label %originalBB300alteredBB

originalBBpart2302:                               ; preds = %originalBB300
  br i1 %892, label %909, label %1422, !dbg !312

909:                                              ; preds = %originalBBpart2302
  call void @llvm.dbg.declare(metadata i8** %18, metadata !320, metadata !DIExpression()), !dbg !322
  %910 = load i32, i32* @x.3
  %911 = load i32, i32* @y.4
  %912 = sub i32 %910, 1
  %913 = mul i32 %910, %912
  %914 = urem i32 %913, 2
  %915 = icmp eq i32 %914, 0
  %916 = icmp slt i32 %911, 10
  %917 = or i1 %915, %916
  br i1 %917, label %originalBB304, label %originalBB304alteredBB

originalBB304:                                    ; preds = %909, %originalBB304alteredBB
  %918 = load i8**, i8*** %13, align 8, !dbg !323
  %919 = getelementptr inbounds i8*, i8** %918, i64 0, !dbg !323
  %920 = load i8*, i8** %919, align 8, !dbg !323
  %921 = getelementptr inbounds i8, i8* %920, i64 1, !dbg !324
  store i8* %921, i8** %18, align 8, !dbg !322
  call void @llvm.dbg.declare(metadata i64* %19, metadata !325, metadata !DIExpression()), !dbg !326
  store i64 0, i64* %19, align 8, !dbg !327
  %922 = load i32, i32* @x.3
  %923 = load i32, i32* @y.4
  %924 = sub i32 %922, 1
  %925 = mul i32 %922, %924
  %926 = urem i32 %925, 2
  %927 = icmp eq i32 %926, 0
  %928 = icmp slt i32 %923, 10
  %929 = or i1 %927, %928
  br i1 %929, label %originalBBpart2306, label %originalBB304alteredBB

originalBBpart2306:                               ; preds = %originalBB304
  br label %930, !dbg !329

930:                                              ; preds = %originalBBpart2339, %originalBBpart2306
  %931 = load i32, i32* @x.3
  %932 = load i32, i32* @y.4
  %933 = sub i32 %931, 1
  %934 = mul i32 %931, %933
  %935 = urem i32 %934, 2
  %936 = icmp eq i32 %935, 0
  %937 = icmp slt i32 %932, 10
  %938 = or i1 %936, %937
  br i1 %938, label %originalBB308, label %originalBB308alteredBB

originalBB308:                                    ; preds = %930, %originalBB308alteredBB
  %939 = load i8*, i8** %18, align 8, !dbg !330
  %940 = load i64, i64* %19, align 8, !dbg !332
  %941 = getelementptr inbounds i8, i8* %939, i64 %940, !dbg !330
  %942 = load i8, i8* %941, align 1, !dbg !330
  %943 = icmp ne i8 %942, 0, !dbg !333
  %944 = load i32, i32* @x.3
  %945 = load i32, i32* @y.4
  %946 = sub i32 %944, 1
  %947 = mul i32 %944, %946
  %948 = urem i32 %947, 2
  %949 = icmp eq i32 %948, 0
  %950 = icmp slt i32 %945, 10
  %951 = or i1 %949, %950
  br i1 %951, label %originalBBpart2310, label %originalBB308alteredBB

originalBBpart2310:                               ; preds = %originalBB308
  br i1 %943, label %952, label %1044, !dbg !333

952:                                              ; preds = %originalBBpart2310
  %953 = load i32, i32* @x.3
  %954 = load i32, i32* @y.4
  %955 = sub i32 %953, 1
  %956 = mul i32 %953, %955
  %957 = urem i32 %956, 2
  %958 = icmp eq i32 %957, 0
  %959 = icmp slt i32 %954, 10
  %960 = or i1 %958, %959
  br i1 %960, label %originalBB312, label %originalBB312alteredBB

originalBB312:                                    ; preds = %952, %originalBB312alteredBB
  %961 = load i8*, i8** %18, align 8, !dbg !334
  %962 = load i64, i64* %19, align 8, !dbg !335
  %963 = getelementptr inbounds i8, i8* %961, i64 %962, !dbg !334
  %964 = load i8, i8* %963, align 1, !dbg !334
  %965 = sext i8 %964 to i32, !dbg !334
  %966 = load i32, i32* @x.3
  %967 = load i32, i32* @y.4
  %968 = sub i32 %966, 1
  %969 = mul i32 %966, %968
  %970 = urem i32 %969, 2
  %971 = icmp eq i32 %970, 0
  %972 = icmp slt i32 %967, 10
  %973 = or i1 %971, %972
  br i1 %973, label %originalBBpart2314, label %originalBB312alteredBB

originalBBpart2314:                               ; preds = %originalBB312
  switch i32 %965, label %991 [
    i32 101, label %974
    i32 69, label %974
    i32 110, label %974
  ], !dbg !336

974:                                              ; preds = %originalBBpart2314, %originalBBpart2314, %originalBBpart2314
  %975 = load i32, i32* @x.3
  %976 = load i32, i32* @y.4
  %977 = sub i32 %975, 1
  %978 = mul i32 %975, %977
  %979 = urem i32 %978, 2
  %980 = icmp eq i32 %979, 0
  %981 = icmp slt i32 %976, 10
  %982 = or i1 %980, %981
  br i1 %982, label %originalBB316, label %originalBB316alteredBB

originalBB316:                                    ; preds = %974, %originalBB316alteredBB
  %983 = load i32, i32* @x.3
  %984 = load i32, i32* @y.4
  %985 = sub i32 %983, 1
  %986 = mul i32 %983, %985
  %987 = urem i32 %986, 2
  %988 = icmp eq i32 %987, 0
  %989 = icmp slt i32 %984, 10
  %990 = or i1 %988, %989
  br i1 %990, label %originalBBpart2318, label %originalBB316alteredBB

originalBBpart2318:                               ; preds = %originalBB316
  br label %1008, !dbg !337

991:                                              ; preds = %originalBBpart2314
  %992 = load i32, i32* @x.3
  %993 = load i32, i32* @y.4
  %994 = sub i32 %992, 1
  %995 = mul i32 %992, %994
  %996 = urem i32 %995, 2
  %997 = icmp eq i32 %996, 0
  %998 = icmp slt i32 %993, 10
  %999 = or i1 %997, %998
  br i1 %999, label %originalBB320, label %originalBB320alteredBB

originalBB320:                                    ; preds = %991, %originalBB320alteredBB
  %1000 = load i32, i32* @x.3
  %1001 = load i32, i32* @y.4
  %1002 = sub i32 %1000, 1
  %1003 = mul i32 %1000, %1002
  %1004 = urem i32 %1003, 2
  %1005 = icmp eq i32 %1004, 0
  %1006 = icmp slt i32 %1001, 10
  %1007 = or i1 %1005, %1006
  br i1 %1007, label %originalBBpart2322, label %originalBB320alteredBB

originalBBpart2322:                               ; preds = %originalBB320
  br label %1456, !dbg !339

1008:                                             ; preds = %originalBBpart2318
  %1009 = load i32, i32* @x.3
  %1010 = load i32, i32* @y.4
  %1011 = sub i32 %1009, 1
  %1012 = mul i32 %1009, %1011
  %1013 = urem i32 %1012, 2
  %1014 = icmp eq i32 %1013, 0
  %1015 = icmp slt i32 %1010, 10
  %1016 = or i1 %1014, %1015
  br i1 %1016, label %originalBB324, label %originalBB324alteredBB

originalBB324:                                    ; preds = %1008, %originalBB324alteredBB
  %1017 = load i32, i32* @x.3
  %1018 = load i32, i32* @y.4
  %1019 = sub i32 %1017, 1
  %1020 = mul i32 %1017, %1019
  %1021 = urem i32 %1020, 2
  %1022 = icmp eq i32 %1021, 0
  %1023 = icmp slt i32 %1018, 10
  %1024 = or i1 %1022, %1023
  br i1 %1024, label %originalBBpart2326, label %originalBB324alteredBB

originalBBpart2326:                               ; preds = %originalBB324
  br label %1025, !dbg !340

1025:                                             ; preds = %originalBBpart2326
  %1026 = load i32, i32* @x.3
  %1027 = load i32, i32* @y.4
  %1028 = sub i32 %1026, 1
  %1029 = mul i32 %1026, %1028
  %1030 = urem i32 %1029, 2
  %1031 = icmp eq i32 %1030, 0
  %1032 = icmp slt i32 %1027, 10
  %1033 = or i1 %1031, %1032
  br i1 %1033, label %originalBB328, label %originalBB328alteredBB

originalBB328:                                    ; preds = %1025, %originalBB328alteredBB
  %1034 = load i64, i64* %19, align 8, !dbg !341
  %1035 = add i64 %1034, 1, !dbg !341
  store i64 %1035, i64* %19, align 8, !dbg !341
  %1036 = load i32, i32* @x.3
  %1037 = load i32, i32* @y.4
  %1038 = sub i32 %1036, 1
  %1039 = mul i32 %1036, %1038
  %1040 = urem i32 %1039, 2
  %1041 = icmp eq i32 %1040, 0
  %1042 = icmp slt i32 %1037, 10
  %1043 = or i1 %1041, %1042
  br i1 %1043, label %originalBBpart2339, label %originalBB328alteredBB

originalBBpart2339:                               ; preds = %originalBB328
  br label %930, !dbg !342, !llvm.loop !343

1044:                                             ; preds = %originalBBpart2310
  %1045 = load i32, i32* @x.3
  %1046 = load i32, i32* @y.4
  %1047 = sub i32 %1045, 1
  %1048 = mul i32 %1045, %1047
  %1049 = urem i32 %1048, 2
  %1050 = icmp eq i32 %1049, 0
  %1051 = icmp slt i32 %1046, 10
  %1052 = or i1 %1050, %1051
  br i1 %1052, label %originalBB341, label %originalBB341alteredBB

originalBB341:                                    ; preds = %1044, %originalBB341alteredBB
  %1053 = load i64, i64* %19, align 8, !dbg !345
  %1054 = load i32, i32* @x.3
  %1055 = load i32, i32* @y.4
  %1056 = sub i32 %1054, 1
  %1057 = mul i32 %1054, %1056
  %1058 = urem i32 %1057, 2
  %1059 = icmp eq i32 %1058, 0
  %1060 = icmp slt i32 %1055, 10
  %1061 = or i1 %1059, %1060
  br i1 %1061, label %originalBBpart2343, label %originalBB341alteredBB

originalBBpart2343:                               ; preds = %originalBB341
  br label %1062, !dbg !347

1062:                                             ; preds = %originalBBpart2343
  %1063 = load i32, i32* @x.3
  %1064 = load i32, i32* @y.4
  %1065 = sub i32 %1063, 1
  %1066 = mul i32 %1063, %1065
  %1067 = urem i32 %1066, 2
  %1068 = icmp eq i32 %1067, 0
  %1069 = icmp slt i32 %1064, 10
  %1070 = or i1 %1068, %1069
  br i1 %1070, label %originalBB345, label %originalBB345alteredBB

originalBB345:                                    ; preds = %1062, %originalBB345alteredBB
  %collatzVar3 = alloca i32
  %1071 = load i32, i32* @x.3
  %1072 = load i32, i32* @y.4
  %1073 = sub i32 %1071, 1
  %1074 = mul i32 %1071, %1073
  %1075 = urem i32 %1074, 2
  %1076 = icmp eq i32 %1075, 0
  %1077 = icmp slt i32 %1072, 10
  %1078 = or i1 %1076, %1077
  br i1 %1078, label %originalBBpart2347, label %originalBB345alteredBB

originalBBpart2347:                               ; preds = %originalBB345
  br label %1079

1079:                                             ; preds = %originalBBpart2347
  %1080 = load i32, i32* @x.3
  %1081 = load i32, i32* @y.4
  %1082 = sub i32 %1080, 1
  %1083 = mul i32 %1080, %1082
  %1084 = urem i32 %1083, 2
  %1085 = icmp eq i32 %1084, 0
  %1086 = icmp slt i32 %1081, 10
  %1087 = or i1 %1085, %1086
  br i1 %1087, label %originalBB349, label %originalBB349alteredBB

originalBB349:                                    ; preds = %1079, %originalBB349alteredBB
  %1088 = load i32, i32* @inVal0
  %1089 = icmp sgt i32 %1088, 1
  %1090 = load i32, i32* @x.3
  %1091 = load i32, i32* @y.4
  %1092 = sub i32 %1090, 1
  %1093 = mul i32 %1090, %1092
  %1094 = urem i32 %1093, 2
  %1095 = icmp eq i32 %1094, 0
  %1096 = icmp slt i32 %1091, 10
  %1097 = or i1 %1095, %1096
  br i1 %1097, label %originalBBpart2351, label %originalBB349alteredBB

originalBBpart2351:                               ; preds = %originalBB349
  br i1 %1089, label %1115, label %1098

1098:                                             ; preds = %originalBBpart2351
  %1099 = load i32, i32* @x.3
  %1100 = load i32, i32* @y.4
  %1101 = sub i32 %1099, 1
  %1102 = mul i32 %1099, %1101
  %1103 = urem i32 %1102, 2
  %1104 = icmp eq i32 %1103, 0
  %1105 = icmp slt i32 %1100, 10
  %1106 = or i1 %1104, %1105
  br i1 %1106, label %originalBB353, label %originalBB353alteredBB

originalBB353:                                    ; preds = %1098, %originalBB353alteredBB
  store i32 43, i32* %collatzVar3
  %1107 = load i32, i32* @x.3
  %1108 = load i32, i32* @y.4
  %1109 = sub i32 %1107, 1
  %1110 = mul i32 %1107, %1109
  %1111 = urem i32 %1110, 2
  %1112 = icmp eq i32 %1111, 0
  %1113 = icmp slt i32 %1108, 10
  %1114 = or i1 %1112, %1113
  br i1 %1114, label %originalBBpart2355, label %originalBB353alteredBB

originalBBpart2355:                               ; preds = %originalBB353
  br label %1115

1115:                                             ; preds = %originalBBpart2355, %originalBBpart2351
  %1116 = load i32, i32* @x.3
  %1117 = load i32, i32* @y.4
  %1118 = sub i32 %1116, 1
  %1119 = mul i32 %1116, %1118
  %1120 = urem i32 %1119, 2
  %1121 = icmp eq i32 %1120, 0
  %1122 = icmp slt i32 %1117, 10
  %1123 = or i1 %1121, %1122
  br i1 %1123, label %originalBB357, label %originalBB357alteredBB

originalBB357:                                    ; preds = %1115, %originalBB357alteredBB
  %1124 = load i8**, i8*** @inVal1
  %1125 = getelementptr inbounds i8*, i8** %1124, i64 1
  %1126 = load i8*, i8** %1125
  %1127 = trunc i64 0 to i32
  %controle4 = call i32 @controle(i8* %1126, i32 %1127)
  store i32 %controle4, i32* %collatzVar3
  %1128 = load i32, i32* @x.3
  %1129 = load i32, i32* @y.4
  %1130 = sub i32 %1128, 1
  %1131 = mul i32 %1128, %1130
  %1132 = urem i32 %1131, 2
  %1133 = icmp eq i32 %1132, 0
  %1134 = icmp slt i32 %1129, 10
  %1135 = or i1 %1133, %1134
  br i1 %1135, label %originalBBpart2359, label %originalBB357alteredBB

originalBBpart2359:                               ; preds = %originalBB357
  br label %1136

1136:                                             ; preds = %originalBBpart2422, %originalBBpart2405, %originalBBpart2359
  %1137 = load i32, i32* @x.3
  %1138 = load i32, i32* @y.4
  %1139 = sub i32 %1137, 1
  %1140 = mul i32 %1137, %1139
  %1141 = urem i32 %1140, 2
  %1142 = icmp eq i32 %1141, 0
  %1143 = icmp slt i32 %1138, 10
  %1144 = or i1 %1142, %1143
  br i1 %1144, label %originalBB361, label %originalBB361alteredBB

originalBB361:                                    ; preds = %1136, %originalBB361alteredBB
  %1145 = load i32, i32* %collatzVar3
  %1146 = icmp sgt i32 %1145, 1
  %1147 = load i32, i32* @x.3
  %1148 = load i32, i32* @y.4
  %1149 = sub i32 %1147, 1
  %1150 = mul i32 %1147, %1149
  %1151 = urem i32 %1150, 2
  %1152 = icmp eq i32 %1151, 0
  %1153 = icmp slt i32 %1148, 10
  %1154 = or i1 %1152, %1153
  br i1 %1154, label %originalBBpart2363, label %originalBB361alteredBB

originalBBpart2363:                               ; preds = %originalBB361
  br i1 %1146, label %1155, label %1275

1155:                                             ; preds = %originalBBpart2363
  %1156 = load i32, i32* @x.3
  %1157 = load i32, i32* @y.4
  %1158 = sub i32 %1156, 1
  %1159 = mul i32 %1156, %1158
  %1160 = urem i32 %1159, 2
  %1161 = icmp eq i32 %1160, 0
  %1162 = icmp slt i32 %1157, 10
  %1163 = or i1 %1161, %1162
  br i1 %1163, label %originalBB365, label %originalBB365alteredBB

originalBB365:                                    ; preds = %1155, %originalBB365alteredBB
  %1164 = load i32, i32* %collatzVar3
  %1165 = srem i32 %1164, 2
  %1166 = icmp eq i32 %1165, 0
  %1167 = load i32, i32* @x.3
  %1168 = load i32, i32* @y.4
  %1169 = sub i32 %1167, 1
  %1170 = mul i32 %1167, %1169
  %1171 = urem i32 %1170, 2
  %1172 = icmp eq i32 %1171, 0
  %1173 = icmp slt i32 %1168, 10
  %1174 = or i1 %1172, %1173
  br i1 %1174, label %originalBBpart2373, label %originalBB365alteredBB

originalBBpart2373:                               ; preds = %originalBB365
  br i1 %1166, label %1175, label %1194

1175:                                             ; preds = %originalBBpart2373
  %1176 = load i32, i32* @x.3
  %1177 = load i32, i32* @y.4
  %1178 = sub i32 %1176, 1
  %1179 = mul i32 %1176, %1178
  %1180 = urem i32 %1179, 2
  %1181 = icmp eq i32 %1180, 0
  %1182 = icmp slt i32 %1177, 10
  %1183 = or i1 %1181, %1182
  br i1 %1183, label %originalBB375, label %originalBB375alteredBB

originalBB375:                                    ; preds = %1175, %originalBB375alteredBB
  %1184 = load i32, i32* %collatzVar3
  %1185 = sdiv i32 %1184, 2
  store i32 %1185, i32* %collatzVar3
  %1186 = load i32, i32* @x.3
  %1187 = load i32, i32* @y.4
  %1188 = sub i32 %1186, 1
  %1189 = mul i32 %1186, %1188
  %1190 = urem i32 %1189, 2
  %1191 = icmp eq i32 %1190, 0
  %1192 = icmp slt i32 %1187, 10
  %1193 = or i1 %1191, %1192
  br i1 %1193, label %originalBBpart2384, label %originalBB375alteredBB

originalBBpart2384:                               ; preds = %originalBB375
  br label %1214

1194:                                             ; preds = %originalBBpart2373
  %1195 = load i32, i32* @x.3
  %1196 = load i32, i32* @y.4
  %1197 = sub i32 %1195, 1
  %1198 = mul i32 %1195, %1197
  %1199 = urem i32 %1198, 2
  %1200 = icmp eq i32 %1199, 0
  %1201 = icmp slt i32 %1196, 10
  %1202 = or i1 %1200, %1201
  br i1 %1202, label %originalBB386, label %originalBB386alteredBB

originalBB386:                                    ; preds = %1194, %originalBB386alteredBB
  %1203 = load i32, i32* %collatzVar3
  %1204 = mul i32 %1203, 3
  %1205 = add i32 %1204, 1
  store i32 %1205, i32* %collatzVar3
  %1206 = load i32, i32* @x.3
  %1207 = load i32, i32* @y.4
  %1208 = sub i32 %1206, 1
  %1209 = mul i32 %1206, %1208
  %1210 = urem i32 %1209, 2
  %1211 = icmp eq i32 %1210, 0
  %1212 = icmp slt i32 %1207, 10
  %1213 = or i1 %1211, %1212
  br i1 %1213, label %originalBBpart2399, label %originalBB386alteredBB

originalBBpart2399:                               ; preds = %originalBB386
  br label %1214

1214:                                             ; preds = %originalBBpart2399, %originalBBpart2384
  %1215 = load i32, i32* @x.3
  %1216 = load i32, i32* @y.4
  %1217 = sub i32 %1215, 1
  %1218 = mul i32 %1215, %1217
  %1219 = urem i32 %1218, 2
  %1220 = icmp eq i32 %1219, 0
  %1221 = icmp slt i32 %1216, 10
  %1222 = or i1 %1220, %1221
  br i1 %1222, label %originalBB401, label %originalBB401alteredBB

originalBB401:                                    ; preds = %1214, %originalBB401alteredBB
  %1223 = load i32, i32* %collatzVar3
  %1224 = sext i32 %1223 to i64
  %1225 = sext i32 -2 to i64
  %1226 = sub i64 %1053, %1224
  %1227 = icmp sgt i64 %1226, %1225
  %1228 = load i32, i32* @x.3
  %1229 = load i32, i32* @y.4
  %1230 = sub i32 %1228, 1
  %1231 = mul i32 %1228, %1230
  %1232 = urem i32 %1231, 2
  %1233 = icmp eq i32 %1232, 0
  %1234 = icmp slt i32 %1229, 10
  %1235 = or i1 %1233, %1234
  br i1 %1235, label %originalBBpart2405, label %originalBB401alteredBB

originalBBpart2405:                               ; preds = %originalBB401
  br i1 %1227, label %1236, label %1136

1236:                                             ; preds = %originalBBpart2405
  %1237 = load i32, i32* @x.3
  %1238 = load i32, i32* @y.4
  %1239 = sub i32 %1237, 1
  %1240 = mul i32 %1237, %1239
  %1241 = urem i32 %1240, 2
  %1242 = icmp eq i32 %1241, 0
  %1243 = icmp slt i32 %1238, 10
  %1244 = or i1 %1242, %1243
  br i1 %1244, label %originalBB407, label %originalBB407alteredBB

originalBB407:                                    ; preds = %1236, %originalBB407alteredBB
  %1245 = load i32, i32* %collatzVar3
  %1246 = sext i32 %1245 to i64
  %1247 = sext i32 2 to i64
  %1248 = add i64 %1053, %1246
  %1249 = icmp slt i64 %1248, %1247
  %1250 = load i32, i32* @x.3
  %1251 = load i32, i32* @y.4
  %1252 = sub i32 %1250, 1
  %1253 = mul i32 %1250, %1252
  %1254 = urem i32 %1253, 2
  %1255 = icmp eq i32 %1254, 0
  %1256 = icmp slt i32 %1251, 10
  %1257 = or i1 %1255, %1256
  br i1 %1257, label %originalBBpart2422, label %originalBB407alteredBB

originalBBpart2422:                               ; preds = %originalBB407
  br i1 %1249, label %1258, label %1136

1258:                                             ; preds = %originalBBpart2422
  %1259 = load i32, i32* @x.3
  %1260 = load i32, i32* @y.4
  %1261 = sub i32 %1259, 1
  %1262 = mul i32 %1259, %1261
  %1263 = urem i32 %1262, 2
  %1264 = icmp eq i32 %1263, 0
  %1265 = icmp slt i32 %1260, 10
  %1266 = or i1 %1264, %1265
  br i1 %1266, label %originalBB424, label %originalBB424alteredBB

originalBB424:                                    ; preds = %1258, %originalBB424alteredBB
  %1267 = load i32, i32* @x.3
  %1268 = load i32, i32* @y.4
  %1269 = sub i32 %1267, 1
  %1270 = mul i32 %1267, %1269
  %1271 = urem i32 %1270, 2
  %1272 = icmp eq i32 %1271, 0
  %1273 = icmp slt i32 %1268, 10
  %1274 = or i1 %1272, %1273
  br i1 %1274, label %originalBBpart2426, label %originalBB424alteredBB

originalBBpart2426:                               ; preds = %originalBB424
  br label %1456, !dbg !348

1275:                                             ; preds = %originalBBpart2363
  %1276 = load i32, i32* @x.3
  %1277 = load i32, i32* @y.4
  %1278 = sub i32 %1276, 1
  %1279 = mul i32 %1276, %1278
  %1280 = urem i32 %1279, 2
  %1281 = icmp eq i32 %1280, 0
  %1282 = icmp slt i32 %1277, 10
  %1283 = or i1 %1281, %1282
  br i1 %1283, label %originalBB428, label %originalBB428alteredBB

originalBB428:                                    ; preds = %1275, %originalBB428alteredBB
  %1284 = load i32, i32* @x.3
  %1285 = load i32, i32* @y.4
  %1286 = sub i32 %1284, 1
  %1287 = mul i32 %1284, %1286
  %1288 = urem i32 %1287, 2
  %1289 = icmp eq i32 %1288, 0
  %1290 = icmp slt i32 %1285, 10
  %1291 = or i1 %1289, %1290
  br i1 %1291, label %originalBBpart2430, label %originalBB428alteredBB

originalBBpart2430:                               ; preds = %originalBB428
  br label %1292, !dbg !349

1292:                                             ; preds = %originalBBpart2454, %originalBBpart2430
  %1293 = load i32, i32* @x.3
  %1294 = load i32, i32* @y.4
  %1295 = sub i32 %1293, 1
  %1296 = mul i32 %1293, %1295
  %1297 = urem i32 %1296, 2
  %1298 = icmp eq i32 %1297, 0
  %1299 = icmp slt i32 %1294, 10
  %1300 = or i1 %1298, %1299
  br i1 %1300, label %originalBB432, label %originalBB432alteredBB

originalBB432:                                    ; preds = %1292, %originalBB432alteredBB
  %1301 = load i8*, i8** %18, align 8, !dbg !350
  %1302 = load i8, i8* %1301, align 1, !dbg !351
  %1303 = icmp ne i8 %1302, 0, !dbg !349
  %1304 = load i32, i32* @x.3
  %1305 = load i32, i32* @y.4
  %1306 = sub i32 %1304, 1
  %1307 = mul i32 %1304, %1306
  %1308 = urem i32 %1307, 2
  %1309 = icmp eq i32 %1308, 0
  %1310 = icmp slt i32 %1305, 10
  %1311 = or i1 %1309, %1310
  br i1 %1311, label %originalBBpart2434, label %originalBB432alteredBB

originalBBpart2434:                               ; preds = %originalBB432
  br i1 %1303, label %1312, label %1401, !dbg !349

1312:                                             ; preds = %originalBBpart2434
  %1313 = load i32, i32* @x.3
  %1314 = load i32, i32* @y.4
  %1315 = sub i32 %1313, 1
  %1316 = mul i32 %1313, %1315
  %1317 = urem i32 %1316, 2
  %1318 = icmp eq i32 %1317, 0
  %1319 = icmp slt i32 %1314, 10
  %1320 = or i1 %1318, %1319
  br i1 %1320, label %originalBB436, label %originalBB436alteredBB

originalBB436:                                    ; preds = %1312, %originalBB436alteredBB
  %1321 = load i8*, i8** %18, align 8, !dbg !352
  %1322 = getelementptr inbounds i8, i8* %1321, i32 1, !dbg !352
  store i8* %1322, i8** %18, align 8, !dbg !352
  %1323 = load i8, i8* %1321, align 1, !dbg !353
  %1324 = sext i8 %1323 to i32, !dbg !353
  %1325 = load i32, i32* @x.3
  %1326 = load i32, i32* @y.4
  %1327 = sub i32 %1325, 1
  %1328 = mul i32 %1325, %1327
  %1329 = urem i32 %1328, 2
  %1330 = icmp eq i32 %1329, 0
  %1331 = icmp slt i32 %1326, 10
  %1332 = or i1 %1330, %1331
  br i1 %1332, label %originalBBpart2438, label %originalBB436alteredBB

originalBBpart2438:                               ; preds = %originalBB436
  switch i32 %1324, label %1384 [
    i32 101, label %1333
    i32 69, label %1350
    i32 110, label %1367
  ], !dbg !354

1333:                                             ; preds = %originalBBpart2438
  %1334 = load i32, i32* @x.3
  %1335 = load i32, i32* @y.4
  %1336 = sub i32 %1334, 1
  %1337 = mul i32 %1334, %1336
  %1338 = urem i32 %1337, 2
  %1339 = icmp eq i32 %1338, 0
  %1340 = icmp slt i32 %1335, 10
  %1341 = or i1 %1339, %1340
  br i1 %1341, label %originalBB440, label %originalBB440alteredBB

originalBB440:                                    ; preds = %1333, %originalBB440alteredBB
  store i8 1, i8* %17, align 1, !dbg !355
  %1342 = load i32, i32* @x.3
  %1343 = load i32, i32* @y.4
  %1344 = sub i32 %1342, 1
  %1345 = mul i32 %1342, %1344
  %1346 = urem i32 %1345, 2
  %1347 = icmp eq i32 %1346, 0
  %1348 = icmp slt i32 %1343, 10
  %1349 = or i1 %1347, %1348
  br i1 %1349, label %originalBBpart2442, label %originalBB440alteredBB

originalBBpart2442:                               ; preds = %originalBB440
  br label %1384, !dbg !357

1350:                                             ; preds = %originalBBpart2438
  %1351 = load i32, i32* @x.3
  %1352 = load i32, i32* @y.4
  %1353 = sub i32 %1351, 1
  %1354 = mul i32 %1351, %1353
  %1355 = urem i32 %1354, 2
  %1356 = icmp eq i32 %1355, 0
  %1357 = icmp slt i32 %1352, 10
  %1358 = or i1 %1356, %1357
  br i1 %1358, label %originalBB444, label %originalBB444alteredBB

originalBB444:                                    ; preds = %1350, %originalBB444alteredBB
  store i8 0, i8* %17, align 1, !dbg !358
  %1359 = load i32, i32* @x.3
  %1360 = load i32, i32* @y.4
  %1361 = sub i32 %1359, 1
  %1362 = mul i32 %1359, %1361
  %1363 = urem i32 %1362, 2
  %1364 = icmp eq i32 %1363, 0
  %1365 = icmp slt i32 %1360, 10
  %1366 = or i1 %1364, %1365
  br i1 %1366, label %originalBBpart2446, label %originalBB444alteredBB

originalBBpart2446:                               ; preds = %originalBB444
  br label %1384, !dbg !359

1367:                                             ; preds = %originalBBpart2438
  %1368 = load i32, i32* @x.3
  %1369 = load i32, i32* @y.4
  %1370 = sub i32 %1368, 1
  %1371 = mul i32 %1368, %1370
  %1372 = urem i32 %1371, 2
  %1373 = icmp eq i32 %1372, 0
  %1374 = icmp slt i32 %1369, 10
  %1375 = or i1 %1373, %1374
  br i1 %1375, label %originalBB448, label %originalBB448alteredBB

originalBB448:                                    ; preds = %1367, %originalBB448alteredBB
  store i8 0, i8* %14, align 1, !dbg !360
  %1376 = load i32, i32* @x.3
  %1377 = load i32, i32* @y.4
  %1378 = sub i32 %1376, 1
  %1379 = mul i32 %1376, %1378
  %1380 = urem i32 %1379, 2
  %1381 = icmp eq i32 %1380, 0
  %1382 = icmp slt i32 %1377, 10
  %1383 = or i1 %1381, %1382
  br i1 %1383, label %originalBBpart2450, label %originalBB448alteredBB

originalBBpart2450:                               ; preds = %originalBB448
  br label %1384, !dbg !361

1384:                                             ; preds = %originalBBpart2450, %originalBBpart2446, %originalBBpart2442, %originalBBpart2438
  %1385 = load i32, i32* @x.3
  %1386 = load i32, i32* @y.4
  %1387 = sub i32 %1385, 1
  %1388 = mul i32 %1385, %1387
  %1389 = urem i32 %1388, 2
  %1390 = icmp eq i32 %1389, 0
  %1391 = icmp slt i32 %1386, 10
  %1392 = or i1 %1390, %1391
  br i1 %1392, label %originalBB452, label %originalBB452alteredBB

originalBB452:                                    ; preds = %1384, %originalBB452alteredBB
  %1393 = load i32, i32* @x.3
  %1394 = load i32, i32* @y.4
  %1395 = sub i32 %1393, 1
  %1396 = mul i32 %1393, %1395
  %1397 = urem i32 %1396, 2
  %1398 = icmp eq i32 %1397, 0
  %1399 = icmp slt i32 %1394, 10
  %1400 = or i1 %1398, %1399
  br i1 %1400, label %originalBBpart2454, label %originalBB452alteredBB

originalBBpart2454:                               ; preds = %originalBB452
  br label %1292, !dbg !349, !llvm.loop !362

1401:                                             ; preds = %originalBBpart2434
  %1402 = load i32, i32* @x.3
  %1403 = load i32, i32* @y.4
  %1404 = sub i32 %1402, 1
  %1405 = mul i32 %1402, %1404
  %1406 = urem i32 %1405, 2
  %1407 = icmp eq i32 %1406, 0
  %1408 = icmp slt i32 %1403, 10
  %1409 = or i1 %1407, %1408
  br i1 %1409, label %originalBB456, label %originalBB456alteredBB

originalBB456:                                    ; preds = %1401, %originalBB456alteredBB
  %1410 = load i32, i32* %12, align 4, !dbg !364
  %1411 = add nsw i32 %1410, -1, !dbg !364
  store i32 %1411, i32* %12, align 4, !dbg !364
  %1412 = load i8**, i8*** %13, align 8, !dbg !365
  %1413 = getelementptr inbounds i8*, i8** %1412, i32 1, !dbg !365
  store i8** %1413, i8*** %13, align 8, !dbg !365
  %1414 = load i32, i32* @x.3
  %1415 = load i32, i32* @y.4
  %1416 = sub i32 %1414, 1
  %1417 = mul i32 %1414, %1416
  %1418 = urem i32 %1417, 2
  %1419 = icmp eq i32 %1418, 0
  %1420 = icmp slt i32 %1415, 10
  %1421 = or i1 %1419, %1420
  br i1 %1421, label %originalBBpart2465, label %originalBB456alteredBB

originalBBpart2465:                               ; preds = %originalBB456
  br label %849, !dbg !312, !llvm.loop !366

1422:                                             ; preds = %originalBBpart2302
  %1423 = load i32, i32* @x.3
  %1424 = load i32, i32* @y.4
  %1425 = sub i32 %1423, 1
  %1426 = mul i32 %1423, %1425
  %1427 = urem i32 %1426, 2
  %1428 = icmp eq i32 %1427, 0
  %1429 = icmp slt i32 %1424, 10
  %1430 = or i1 %1428, %1429
  br i1 %1430, label %originalBB467, label %originalBB467alteredBB

originalBB467:                                    ; preds = %1422, %originalBB467alteredBB
  %1431 = load i32, i32* @x.3
  %1432 = load i32, i32* @y.4
  %1433 = sub i32 %1431, 1
  %1434 = mul i32 %1431, %1433
  %1435 = urem i32 %1434, 2
  %1436 = icmp eq i32 %1435, 0
  %1437 = icmp slt i32 %1432, 10
  %1438 = or i1 %1436, %1437
  br i1 %1438, label %originalBBpart2469, label %originalBB467alteredBB

originalBBpart2469:                               ; preds = %originalBB467
  br label %1439, !dbg !312

1439:                                             ; preds = %originalBBpart2469, %originalBBpart2286
  %1440 = load i32, i32* @x.3
  %1441 = load i32, i32* @y.4
  %1442 = sub i32 %1440, 1
  %1443 = mul i32 %1440, %1442
  %1444 = urem i32 %1443, 2
  %1445 = icmp eq i32 %1444, 0
  %1446 = icmp slt i32 %1441, 10
  %1447 = or i1 %1445, %1446
  br i1 %1447, label %originalBB471, label %originalBB471alteredBB

originalBB471:                                    ; preds = %1439, %originalBB471alteredBB
  %1448 = load i32, i32* @x.3
  %1449 = load i32, i32* @y.4
  %1450 = sub i32 %1448, 1
  %1451 = mul i32 %1448, %1450
  %1452 = urem i32 %1451, 2
  %1453 = icmp eq i32 %1452, 0
  %1454 = icmp slt i32 %1449, 10
  %1455 = or i1 %1453, %1454
  br i1 %1455, label %originalBBpart2473, label %originalBB471alteredBB

originalBBpart2473:                               ; preds = %originalBB471
  br label %1456, !dbg !309

1456:                                             ; preds = %originalBBpart2473, %originalBBpart2426, %originalBBpart2322
  call void @llvm.dbg.label(metadata !368), !dbg !369
  %1457 = load i32, i32* @x.3
  %1458 = load i32, i32* @y.4
  %1459 = sub i32 %1457, 1
  %1460 = mul i32 %1457, %1459
  %1461 = urem i32 %1460, 2
  %1462 = icmp eq i32 %1461, 0
  %1463 = icmp slt i32 %1458, 10
  %1464 = or i1 %1462, %1463
  br i1 %1464, label %originalBB475, label %originalBB475alteredBB

originalBB475:                                    ; preds = %1456, %originalBB475alteredBB
  %1465 = load i8, i8* %17, align 1, !dbg !370
  %1466 = trunc i8 %1465 to i1, !dbg !370
  %1467 = load i32, i32* @x.3
  %1468 = load i32, i32* @y.4
  %1469 = sub i32 %1467, 1
  %1470 = mul i32 %1467, %1469
  %1471 = urem i32 %1470, 2
  %1472 = icmp eq i32 %1471, 0
  %1473 = icmp slt i32 %1468, 10
  %1474 = or i1 %1472, %1473
  br i1 %1474, label %originalBBpart2477, label %originalBB475alteredBB

originalBBpart2477:                               ; preds = %originalBB475
  br i1 %1466, label %1494, label %1475, !dbg !372

1475:                                             ; preds = %originalBBpart2477
  %1476 = load i32, i32* @x.3
  %1477 = load i32, i32* @y.4
  %1478 = sub i32 %1476, 1
  %1479 = mul i32 %1476, %1478
  %1480 = urem i32 %1479, 2
  %1481 = icmp eq i32 %1480, 0
  %1482 = icmp slt i32 %1477, 10
  %1483 = or i1 %1481, %1482
  br i1 %1483, label %originalBB479, label %originalBB479alteredBB

originalBB479:                                    ; preds = %1475, %originalBB479alteredBB
  %1484 = load i8, i8* %15, align 1, !dbg !373
  %1485 = trunc i8 %1484 to i1, !dbg !373
  %1486 = load i32, i32* @x.3
  %1487 = load i32, i32* @y.4
  %1488 = sub i32 %1486, 1
  %1489 = mul i32 %1486, %1488
  %1490 = urem i32 %1489, 2
  %1491 = icmp eq i32 %1490, 0
  %1492 = icmp slt i32 %1487, 10
  %1493 = or i1 %1491, %1492
  br i1 %1493, label %originalBBpart2481, label %originalBB479alteredBB

originalBBpart2481:                               ; preds = %originalBB479
  br i1 %1485, label %1494, label %2311, !dbg !374

1494:                                             ; preds = %originalBBpart2481, %originalBBpart2477
  %1495 = load i32, i32* @x.3
  %1496 = load i32, i32* @y.4
  %1497 = sub i32 %1495, 1
  %1498 = mul i32 %1495, %1497
  %1499 = urem i32 %1498, 2
  %1500 = icmp eq i32 %1499, 0
  %1501 = icmp slt i32 %1496, 10
  %1502 = or i1 %1500, %1501
  br i1 %1502, label %originalBB483, label %originalBB483alteredBB

originalBB483:                                    ; preds = %1494, %originalBB483alteredBB
  %1503 = load i32, i32* @x.3
  %1504 = load i32, i32* @y.4
  %1505 = sub i32 %1503, 1
  %1506 = mul i32 %1503, %1505
  %1507 = urem i32 %1506, 2
  %1508 = icmp eq i32 %1507, 0
  %1509 = icmp slt i32 %1504, 10
  %1510 = or i1 %1508, %1509
  br i1 %1510, label %originalBBpart2485, label %originalBB483alteredBB

originalBBpart2485:                               ; preds = %originalBB483
  br label %1511, !dbg !375

1511:                                             ; preds = %originalBBpart2704, %originalBBpart2485
  %1512 = load i32, i32* @x.3
  %1513 = load i32, i32* @y.4
  %1514 = sub i32 %1512, 1
  %1515 = mul i32 %1512, %1514
  %1516 = urem i32 %1515, 2
  %1517 = icmp eq i32 %1516, 0
  %1518 = icmp slt i32 %1513, 10
  %1519 = or i1 %1517, %1518
  br i1 %1519, label %originalBB487, label %originalBB487alteredBB

originalBB487:                                    ; preds = %1511, %originalBB487alteredBB
  %1520 = load i32, i32* %12, align 4, !dbg !377
  %1521 = icmp sgt i32 %1520, 0, !dbg !378
  %1522 = load i32, i32* @x.3
  %1523 = load i32, i32* @y.4
  %1524 = sub i32 %1522, 1
  %1525 = mul i32 %1522, %1524
  %1526 = urem i32 %1525, 2
  %1527 = icmp eq i32 %1526, 0
  %1528 = icmp slt i32 %1523, 10
  %1529 = or i1 %1527, %1528
  br i1 %1529, label %originalBBpart2489, label %originalBB487alteredBB

originalBBpart2489:                               ; preds = %originalBB487
  br i1 %1521, label %1530, label %2294, !dbg !375

1530:                                             ; preds = %originalBBpart2489
  call void @llvm.dbg.declare(metadata i8** %20, metadata !379, metadata !DIExpression()), !dbg !381
  %1531 = load i32, i32* @x.3
  %1532 = load i32, i32* @y.4
  %1533 = sub i32 %1531, 1
  %1534 = mul i32 %1531, %1533
  %1535 = urem i32 %1534, 2
  %1536 = icmp eq i32 %1535, 0
  %1537 = icmp slt i32 %1532, 10
  %1538 = or i1 %1536, %1537
  br i1 %1538, label %originalBB491, label %originalBB491alteredBB

originalBB491:                                    ; preds = %1530, %originalBB491alteredBB
  %1539 = load i8**, i8*** %13, align 8, !dbg !382
  %1540 = getelementptr inbounds i8*, i8** %1539, i64 0, !dbg !382
  %1541 = load i8*, i8** %1540, align 8, !dbg !382
  store i8* %1541, i8** %20, align 8, !dbg !381
  call void @llvm.dbg.declare(metadata i8* %21, metadata !383, metadata !DIExpression()), !dbg !384
  %1542 = load i32, i32* @x.3
  %1543 = load i32, i32* @y.4
  %1544 = sub i32 %1542, 1
  %1545 = mul i32 %1542, %1544
  %1546 = urem i32 %1545, 2
  %1547 = icmp eq i32 %1546, 0
  %1548 = icmp slt i32 %1543, 10
  %1549 = or i1 %1547, %1548
  br i1 %1549, label %originalBBpart2493, label %originalBB491alteredBB

originalBBpart2493:                               ; preds = %originalBB491
  br label %1550, !dbg !385

1550:                                             ; preds = %originalBBpart2691, %originalBBpart2493
  %1551 = load i32, i32* @x.3
  %1552 = load i32, i32* @y.4
  %1553 = sub i32 %1551, 1
  %1554 = mul i32 %1551, %1553
  %1555 = urem i32 %1554, 2
  %1556 = icmp eq i32 %1555, 0
  %1557 = icmp slt i32 %1552, 10
  %1558 = or i1 %1556, %1557
  br i1 %1558, label %originalBB495, label %originalBB495alteredBB

originalBB495:                                    ; preds = %1550, %originalBB495alteredBB
  %1559 = load i8*, i8** %20, align 8, !dbg !386
  %1560 = getelementptr inbounds i8, i8* %1559, i32 1, !dbg !386
  store i8* %1560, i8** %20, align 8, !dbg !386
  %1561 = load i8, i8* %1559, align 1, !dbg !387
  store i8 %1561, i8* %21, align 1, !dbg !388
  %1562 = icmp ne i8 %1561, 0, !dbg !385
  %1563 = load i32, i32* @x.3
  %1564 = load i32, i32* @y.4
  %1565 = sub i32 %1563, 1
  %1566 = mul i32 %1563, %1565
  %1567 = urem i32 %1566, 2
  %1568 = icmp eq i32 %1567, 0
  %1569 = icmp slt i32 %1564, 10
  %1570 = or i1 %1568, %1569
  br i1 %1570, label %originalBBpart2497, label %originalBB495alteredBB

originalBBpart2497:                               ; preds = %originalBB495
  br i1 %1562, label %1571, label %2236, !dbg !385

1571:                                             ; preds = %originalBBpart2497
  %1572 = load i32, i32* @x.3
  %1573 = load i32, i32* @y.4
  %1574 = sub i32 %1572, 1
  %1575 = mul i32 %1572, %1574
  %1576 = urem i32 %1575, 2
  %1577 = icmp eq i32 %1576, 0
  %1578 = icmp slt i32 %1573, 10
  %1579 = or i1 %1577, %1578
  br i1 %1579, label %originalBB499, label %originalBB499alteredBB

originalBB499:                                    ; preds = %1571, %originalBB499alteredBB
  %1580 = load i8, i8* %21, align 1, !dbg !389
  %1581 = zext i8 %1580 to i32, !dbg !389
  %1582 = icmp eq i32 %1581, 92, !dbg !392
  %1583 = load i32, i32* @x.3
  %1584 = load i32, i32* @y.4
  %1585 = sub i32 %1583, 1
  %1586 = mul i32 %1583, %1585
  %1587 = urem i32 %1586, 2
  %1588 = icmp eq i32 %1587, 0
  %1589 = icmp slt i32 %1584, 10
  %1590 = or i1 %1588, %1589
  br i1 %1590, label %originalBBpart2501, label %originalBB499alteredBB

originalBBpart2501:                               ; preds = %originalBB499
  br i1 %1582, label %1591, label %2216, !dbg !393

1591:                                             ; preds = %originalBBpart2501
  %1592 = load i32, i32* @x.3
  %1593 = load i32, i32* @y.4
  %1594 = sub i32 %1592, 1
  %1595 = mul i32 %1592, %1594
  %1596 = urem i32 %1595, 2
  %1597 = icmp eq i32 %1596, 0
  %1598 = icmp slt i32 %1593, 10
  %1599 = or i1 %1597, %1598
  br i1 %1599, label %originalBB503, label %originalBB503alteredBB

originalBB503:                                    ; preds = %1591, %originalBB503alteredBB
  %1600 = load i8*, i8** %20, align 8, !dbg !394
  %1601 = load i8, i8* %1600, align 1, !dbg !395
  %1602 = sext i8 %1601 to i32, !dbg !395
  %1603 = icmp ne i32 %1602, 0, !dbg !395
  %1604 = load i32, i32* @x.3
  %1605 = load i32, i32* @y.4
  %1606 = sub i32 %1604, 1
  %1607 = mul i32 %1604, %1606
  %1608 = urem i32 %1607, 2
  %1609 = icmp eq i32 %1608, 0
  %1610 = icmp slt i32 %1605, 10
  %1611 = or i1 %1609, %1610
  br i1 %1611, label %originalBBpart2505, label %originalBB503alteredBB

originalBBpart2505:                               ; preds = %originalBB503
  br i1 %1603, label %1612, label %2216, !dbg !396

1612:                                             ; preds = %originalBBpart2505
  %1613 = load i32, i32* @x.3
  %1614 = load i32, i32* @y.4
  %1615 = sub i32 %1613, 1
  %1616 = mul i32 %1613, %1615
  %1617 = urem i32 %1616, 2
  %1618 = icmp eq i32 %1617, 0
  %1619 = icmp slt i32 %1614, 10
  %1620 = or i1 %1618, %1619
  br i1 %1620, label %originalBB507, label %originalBB507alteredBB

originalBB507:                                    ; preds = %1612, %originalBB507alteredBB
  %1621 = load i8*, i8** %20, align 8, !dbg !397
  %1622 = getelementptr inbounds i8, i8* %1621, i32 1, !dbg !397
  store i8* %1622, i8** %20, align 8, !dbg !397
  %1623 = load i8, i8* %1621, align 1, !dbg !399
  store i8 %1623, i8* %21, align 1, !dbg !400
  %1624 = zext i8 %1623 to i32, !dbg !401
  %1625 = load i32, i32* @x.3
  %1626 = load i32, i32* @y.4
  %1627 = sub i32 %1625, 1
  %1628 = mul i32 %1625, %1627
  %1629 = urem i32 %1628, 2
  %1630 = icmp eq i32 %1629, 0
  %1631 = icmp slt i32 %1626, 10
  %1632 = or i1 %1630, %1631
  br i1 %1632, label %originalBBpart2509, label %originalBB507alteredBB

originalBBpart2509:                               ; preds = %originalBB507
  switch i32 %1624, label %2181 [
    i32 97, label %1633
    i32 98, label %1650
    i32 99, label %1667
    i32 101, label %1684
    i32 102, label %1701
    i32 110, label %1718
    i32 114, label %1735
    i32 116, label %1752
    i32 118, label %1769
    i32 120, label %1786
    i32 48, label %1909
    i32 49, label %1988
    i32 50, label %1988
    i32 51, label %1988
    i32 52, label %1988
    i32 53, label %1988
    i32 54, label %1988
    i32 55, label %1988
    i32 92, label %2147
  ], !dbg !402

1633:                                             ; preds = %originalBBpart2509
  %1634 = load i32, i32* @x.3
  %1635 = load i32, i32* @y.4
  %1636 = sub i32 %1634, 1
  %1637 = mul i32 %1634, %1636
  %1638 = urem i32 %1637, 2
  %1639 = icmp eq i32 %1638, 0
  %1640 = icmp slt i32 %1635, 10
  %1641 = or i1 %1639, %1640
  br i1 %1641, label %originalBB511, label %originalBB511alteredBB

originalBB511:                                    ; preds = %1633, %originalBB511alteredBB
  store i8 7, i8* %21, align 1, !dbg !403
  %1642 = load i32, i32* @x.3
  %1643 = load i32, i32* @y.4
  %1644 = sub i32 %1642, 1
  %1645 = mul i32 %1642, %1644
  %1646 = urem i32 %1645, 2
  %1647 = icmp eq i32 %1646, 0
  %1648 = icmp slt i32 %1643, 10
  %1649 = or i1 %1647, %1648
  br i1 %1649, label %originalBBpart2513, label %originalBB511alteredBB

originalBBpart2513:                               ; preds = %originalBB511
  br label %2199, !dbg !405

1650:                                             ; preds = %originalBBpart2509
  %1651 = load i32, i32* @x.3
  %1652 = load i32, i32* @y.4
  %1653 = sub i32 %1651, 1
  %1654 = mul i32 %1651, %1653
  %1655 = urem i32 %1654, 2
  %1656 = icmp eq i32 %1655, 0
  %1657 = icmp slt i32 %1652, 10
  %1658 = or i1 %1656, %1657
  br i1 %1658, label %originalBB515, label %originalBB515alteredBB

originalBB515:                                    ; preds = %1650, %originalBB515alteredBB
  store i8 8, i8* %21, align 1, !dbg !406
  %1659 = load i32, i32* @x.3
  %1660 = load i32, i32* @y.4
  %1661 = sub i32 %1659, 1
  %1662 = mul i32 %1659, %1661
  %1663 = urem i32 %1662, 2
  %1664 = icmp eq i32 %1663, 0
  %1665 = icmp slt i32 %1660, 10
  %1666 = or i1 %1664, %1665
  br i1 %1666, label %originalBBpart2517, label %originalBB515alteredBB

originalBBpart2517:                               ; preds = %originalBB515
  br label %2199, !dbg !407

1667:                                             ; preds = %originalBBpart2509
  %1668 = load i32, i32* @x.3
  %1669 = load i32, i32* @y.4
  %1670 = sub i32 %1668, 1
  %1671 = mul i32 %1668, %1670
  %1672 = urem i32 %1671, 2
  %1673 = icmp eq i32 %1672, 0
  %1674 = icmp slt i32 %1669, 10
  %1675 = or i1 %1673, %1674
  br i1 %1675, label %originalBB519, label %originalBB519alteredBB

originalBB519:                                    ; preds = %1667, %originalBB519alteredBB
  store i32 0, i32* %11, align 4, !dbg !408
  %1676 = load i32, i32* @x.3
  %1677 = load i32, i32* @y.4
  %1678 = sub i32 %1676, 1
  %1679 = mul i32 %1676, %1678
  %1680 = urem i32 %1679, 2
  %1681 = icmp eq i32 %1680, 0
  %1682 = icmp slt i32 %1677, 10
  %1683 = or i1 %1681, %1682
  br i1 %1683, label %originalBBpart2521, label %originalBB519alteredBB

originalBBpart2521:                               ; preds = %originalBB519
  br label %2481, !dbg !408

1684:                                             ; preds = %originalBBpart2509
  %1685 = load i32, i32* @x.3
  %1686 = load i32, i32* @y.4
  %1687 = sub i32 %1685, 1
  %1688 = mul i32 %1685, %1687
  %1689 = urem i32 %1688, 2
  %1690 = icmp eq i32 %1689, 0
  %1691 = icmp slt i32 %1686, 10
  %1692 = or i1 %1690, %1691
  br i1 %1692, label %originalBB523, label %originalBB523alteredBB

originalBB523:                                    ; preds = %1684, %originalBB523alteredBB
  store i8 27, i8* %21, align 1, !dbg !409
  %1693 = load i32, i32* @x.3
  %1694 = load i32, i32* @y.4
  %1695 = sub i32 %1693, 1
  %1696 = mul i32 %1693, %1695
  %1697 = urem i32 %1696, 2
  %1698 = icmp eq i32 %1697, 0
  %1699 = icmp slt i32 %1694, 10
  %1700 = or i1 %1698, %1699
  br i1 %1700, label %originalBBpart2525, label %originalBB523alteredBB

originalBBpart2525:                               ; preds = %originalBB523
  br label %2199, !dbg !410

1701:                                             ; preds = %originalBBpart2509
  %1702 = load i32, i32* @x.3
  %1703 = load i32, i32* @y.4
  %1704 = sub i32 %1702, 1
  %1705 = mul i32 %1702, %1704
  %1706 = urem i32 %1705, 2
  %1707 = icmp eq i32 %1706, 0
  %1708 = icmp slt i32 %1703, 10
  %1709 = or i1 %1707, %1708
  br i1 %1709, label %originalBB527, label %originalBB527alteredBB

originalBB527:                                    ; preds = %1701, %originalBB527alteredBB
  store i8 12, i8* %21, align 1, !dbg !411
  %1710 = load i32, i32* @x.3
  %1711 = load i32, i32* @y.4
  %1712 = sub i32 %1710, 1
  %1713 = mul i32 %1710, %1712
  %1714 = urem i32 %1713, 2
  %1715 = icmp eq i32 %1714, 0
  %1716 = icmp slt i32 %1711, 10
  %1717 = or i1 %1715, %1716
  br i1 %1717, label %originalBBpart2529, label %originalBB527alteredBB

originalBBpart2529:                               ; preds = %originalBB527
  br label %2199, !dbg !412

1718:                                             ; preds = %originalBBpart2509
  %1719 = load i32, i32* @x.3
  %1720 = load i32, i32* @y.4
  %1721 = sub i32 %1719, 1
  %1722 = mul i32 %1719, %1721
  %1723 = urem i32 %1722, 2
  %1724 = icmp eq i32 %1723, 0
  %1725 = icmp slt i32 %1720, 10
  %1726 = or i1 %1724, %1725
  br i1 %1726, label %originalBB531, label %originalBB531alteredBB

originalBB531:                                    ; preds = %1718, %originalBB531alteredBB
  store i8 10, i8* %21, align 1, !dbg !413
  %1727 = load i32, i32* @x.3
  %1728 = load i32, i32* @y.4
  %1729 = sub i32 %1727, 1
  %1730 = mul i32 %1727, %1729
  %1731 = urem i32 %1730, 2
  %1732 = icmp eq i32 %1731, 0
  %1733 = icmp slt i32 %1728, 10
  %1734 = or i1 %1732, %1733
  br i1 %1734, label %originalBBpart2533, label %originalBB531alteredBB

originalBBpart2533:                               ; preds = %originalBB531
  br label %2199, !dbg !414

1735:                                             ; preds = %originalBBpart2509
  %1736 = load i32, i32* @x.3
  %1737 = load i32, i32* @y.4
  %1738 = sub i32 %1736, 1
  %1739 = mul i32 %1736, %1738
  %1740 = urem i32 %1739, 2
  %1741 = icmp eq i32 %1740, 0
  %1742 = icmp slt i32 %1737, 10
  %1743 = or i1 %1741, %1742
  br i1 %1743, label %originalBB535, label %originalBB535alteredBB

originalBB535:                                    ; preds = %1735, %originalBB535alteredBB
  store i8 13, i8* %21, align 1, !dbg !415
  %1744 = load i32, i32* @x.3
  %1745 = load i32, i32* @y.4
  %1746 = sub i32 %1744, 1
  %1747 = mul i32 %1744, %1746
  %1748 = urem i32 %1747, 2
  %1749 = icmp eq i32 %1748, 0
  %1750 = icmp slt i32 %1745, 10
  %1751 = or i1 %1749, %1750
  br i1 %1751, label %originalBBpart2537, label %originalBB535alteredBB

originalBBpart2537:                               ; preds = %originalBB535
  br label %2199, !dbg !416

1752:                                             ; preds = %originalBBpart2509
  %1753 = load i32, i32* @x.3
  %1754 = load i32, i32* @y.4
  %1755 = sub i32 %1753, 1
  %1756 = mul i32 %1753, %1755
  %1757 = urem i32 %1756, 2
  %1758 = icmp eq i32 %1757, 0
  %1759 = icmp slt i32 %1754, 10
  %1760 = or i1 %1758, %1759
  br i1 %1760, label %originalBB539, label %originalBB539alteredBB

originalBB539:                                    ; preds = %1752, %originalBB539alteredBB
  store i8 9, i8* %21, align 1, !dbg !417
  %1761 = load i32, i32* @x.3
  %1762 = load i32, i32* @y.4
  %1763 = sub i32 %1761, 1
  %1764 = mul i32 %1761, %1763
  %1765 = urem i32 %1764, 2
  %1766 = icmp eq i32 %1765, 0
  %1767 = icmp slt i32 %1762, 10
  %1768 = or i1 %1766, %1767
  br i1 %1768, label %originalBBpart2541, label %originalBB539alteredBB

originalBBpart2541:                               ; preds = %originalBB539
  br label %2199, !dbg !418

1769:                                             ; preds = %originalBBpart2509
  %1770 = load i32, i32* @x.3
  %1771 = load i32, i32* @y.4
  %1772 = sub i32 %1770, 1
  %1773 = mul i32 %1770, %1772
  %1774 = urem i32 %1773, 2
  %1775 = icmp eq i32 %1774, 0
  %1776 = icmp slt i32 %1771, 10
  %1777 = or i1 %1775, %1776
  br i1 %1777, label %originalBB543, label %originalBB543alteredBB

originalBB543:                                    ; preds = %1769, %originalBB543alteredBB
  store i8 11, i8* %21, align 1, !dbg !419
  %1778 = load i32, i32* @x.3
  %1779 = load i32, i32* @y.4
  %1780 = sub i32 %1778, 1
  %1781 = mul i32 %1778, %1780
  %1782 = urem i32 %1781, 2
  %1783 = icmp eq i32 %1782, 0
  %1784 = icmp slt i32 %1779, 10
  %1785 = or i1 %1783, %1784
  br i1 %1785, label %originalBBpart2545, label %originalBB543alteredBB

originalBBpart2545:                               ; preds = %originalBB543
  br label %2199, !dbg !420

1786:                                             ; preds = %originalBBpart2509
  call void @llvm.dbg.declare(metadata i8* %22, metadata !421, metadata !DIExpression()), !dbg !423
  %1787 = load i32, i32* @x.3
  %1788 = load i32, i32* @y.4
  %1789 = sub i32 %1787, 1
  %1790 = mul i32 %1787, %1789
  %1791 = urem i32 %1790, 2
  %1792 = icmp eq i32 %1791, 0
  %1793 = icmp slt i32 %1788, 10
  %1794 = or i1 %1792, %1793
  br i1 %1794, label %originalBB547, label %originalBB547alteredBB

originalBB547:                                    ; preds = %1786, %originalBB547alteredBB
  %1795 = load i8*, i8** %20, align 8, !dbg !424
  %1796 = load i8, i8* %1795, align 1, !dbg !425
  store i8 %1796, i8* %22, align 1, !dbg !423
  %1797 = call i16** @__ctype_b_loc() #15, !dbg !426
  %1798 = load i16*, i16** %1797, align 8, !dbg !426
  %1799 = load i8, i8* %22, align 1, !dbg !426
  %1800 = zext i8 %1799 to i32, !dbg !426
  %1801 = sext i32 %1800 to i64, !dbg !426
  %1802 = getelementptr inbounds i16, i16* %1798, i64 %1801, !dbg !426
  %1803 = load i16, i16* %1802, align 2, !dbg !426
  %1804 = zext i16 %1803 to i32, !dbg !426
  %1805 = and i32 %1804, 4096, !dbg !426
  %1806 = icmp ne i32 %1805, 0, !dbg !426
  %1807 = load i32, i32* @x.3
  %1808 = load i32, i32* @y.4
  %1809 = sub i32 %1807, 1
  %1810 = mul i32 %1807, %1809
  %1811 = urem i32 %1810, 2
  %1812 = icmp eq i32 %1811, 0
  %1813 = icmp slt i32 %1808, 10
  %1814 = or i1 %1812, %1813
  br i1 %1814, label %originalBBpart2561, label %originalBB547alteredBB

originalBBpart2561:                               ; preds = %originalBB547
  br i1 %1806, label %1832, label %1815, !dbg !428

1815:                                             ; preds = %originalBBpart2561
  %1816 = load i32, i32* @x.3
  %1817 = load i32, i32* @y.4
  %1818 = sub i32 %1816, 1
  %1819 = mul i32 %1816, %1818
  %1820 = urem i32 %1819, 2
  %1821 = icmp eq i32 %1820, 0
  %1822 = icmp slt i32 %1817, 10
  %1823 = or i1 %1821, %1822
  br i1 %1823, label %originalBB563, label %originalBB563alteredBB

originalBB563:                                    ; preds = %1815, %originalBB563alteredBB
  %1824 = load i32, i32* @x.3
  %1825 = load i32, i32* @y.4
  %1826 = sub i32 %1824, 1
  %1827 = mul i32 %1824, %1826
  %1828 = urem i32 %1827, 2
  %1829 = icmp eq i32 %1828, 0
  %1830 = icmp slt i32 %1825, 10
  %1831 = or i1 %1829, %1830
  br i1 %1831, label %originalBBpart2565, label %originalBB563alteredBB

originalBBpart2565:                               ; preds = %originalBB563
  br label %2164, !dbg !429

1832:                                             ; preds = %originalBBpart2561
  %1833 = load i32, i32* @x.3
  %1834 = load i32, i32* @y.4
  %1835 = sub i32 %1833, 1
  %1836 = mul i32 %1833, %1835
  %1837 = urem i32 %1836, 2
  %1838 = icmp eq i32 %1837, 0
  %1839 = icmp slt i32 %1834, 10
  %1840 = or i1 %1838, %1839
  br i1 %1840, label %originalBB567, label %originalBB567alteredBB

originalBB567:                                    ; preds = %1832, %originalBB567alteredBB
  %1841 = load i8*, i8** %20, align 8, !dbg !430
  %1842 = getelementptr inbounds i8, i8* %1841, i32 1, !dbg !430
  store i8* %1842, i8** %20, align 8, !dbg !430
  %1843 = load i8, i8* %22, align 1, !dbg !431
  %1844 = call i32 @hextobin(i8 zeroext %1843), !dbg !432
  %1845 = trunc i32 %1844 to i8, !dbg !432
  store i8 %1845, i8* %21, align 1, !dbg !433
  %1846 = load i8*, i8** %20, align 8, !dbg !434
  %1847 = load i8, i8* %1846, align 1, !dbg !435
  store i8 %1847, i8* %22, align 1, !dbg !436
  %1848 = call i16** @__ctype_b_loc() #15, !dbg !437
  %1849 = load i16*, i16** %1848, align 8, !dbg !437
  %1850 = load i8, i8* %22, align 1, !dbg !437
  %1851 = zext i8 %1850 to i32, !dbg !437
  %1852 = sext i32 %1851 to i64, !dbg !437
  %1853 = getelementptr inbounds i16, i16* %1849, i64 %1852, !dbg !437
  %1854 = load i16, i16* %1853, align 2, !dbg !437
  %1855 = zext i16 %1854 to i32, !dbg !437
  %1856 = and i32 %1855, 4096, !dbg !437
  %1857 = icmp ne i32 %1856, 0, !dbg !437
  %1858 = load i32, i32* @x.3
  %1859 = load i32, i32* @y.4
  %1860 = sub i32 %1858, 1
  %1861 = mul i32 %1858, %1860
  %1862 = urem i32 %1861, 2
  %1863 = icmp eq i32 %1862, 0
  %1864 = icmp slt i32 %1859, 10
  %1865 = or i1 %1863, %1864
  br i1 %1865, label %originalBBpart2578, label %originalBB567alteredBB

originalBBpart2578:                               ; preds = %originalBB567
  br i1 %1857, label %1866, label %1892, !dbg !439

1866:                                             ; preds = %originalBBpart2578
  %1867 = load i32, i32* @x.3
  %1868 = load i32, i32* @y.4
  %1869 = sub i32 %1867, 1
  %1870 = mul i32 %1867, %1869
  %1871 = urem i32 %1870, 2
  %1872 = icmp eq i32 %1871, 0
  %1873 = icmp slt i32 %1868, 10
  %1874 = or i1 %1872, %1873
  br i1 %1874, label %originalBB580, label %originalBB580alteredBB

originalBB580:                                    ; preds = %1866, %originalBB580alteredBB
  %1875 = load i8*, i8** %20, align 8, !dbg !440
  %1876 = getelementptr inbounds i8, i8* %1875, i32 1, !dbg !440
  store i8* %1876, i8** %20, align 8, !dbg !440
  %1877 = load i8, i8* %21, align 1, !dbg !442
  %1878 = zext i8 %1877 to i32, !dbg !442
  %1879 = mul nsw i32 %1878, 16, !dbg !443
  %1880 = load i8, i8* %22, align 1, !dbg !444
  %1881 = call i32 @hextobin(i8 zeroext %1880), !dbg !445
  %1882 = add nsw i32 %1879, %1881, !dbg !446
  %1883 = trunc i32 %1882 to i8, !dbg !442
  store i8 %1883, i8* %21, align 1, !dbg !447
  %1884 = load i32, i32* @x.3
  %1885 = load i32, i32* @y.4
  %1886 = sub i32 %1884, 1
  %1887 = mul i32 %1884, %1886
  %1888 = urem i32 %1887, 2
  %1889 = icmp eq i32 %1888, 0
  %1890 = icmp slt i32 %1885, 10
  %1891 = or i1 %1889, %1890
  br i1 %1891, label %originalBBpart2584, label %originalBB580alteredBB

originalBBpart2584:                               ; preds = %originalBB580
  br label %1892, !dbg !448

1892:                                             ; preds = %originalBBpart2584, %originalBBpart2578
  %1893 = load i32, i32* @x.3
  %1894 = load i32, i32* @y.4
  %1895 = sub i32 %1893, 1
  %1896 = mul i32 %1893, %1895
  %1897 = urem i32 %1896, 2
  %1898 = icmp eq i32 %1897, 0
  %1899 = icmp slt i32 %1894, 10
  %1900 = or i1 %1898, %1899
  br i1 %1900, label %originalBB586, label %originalBB586alteredBB

originalBB586:                                    ; preds = %1892, %originalBB586alteredBB
  %1901 = load i32, i32* @x.3
  %1902 = load i32, i32* @y.4
  %1903 = sub i32 %1901, 1
  %1904 = mul i32 %1901, %1903
  %1905 = urem i32 %1904, 2
  %1906 = icmp eq i32 %1905, 0
  %1907 = icmp slt i32 %1902, 10
  %1908 = or i1 %1906, %1907
  br i1 %1908, label %originalBBpart2588, label %originalBB586alteredBB

originalBBpart2588:                               ; preds = %originalBB586
  br label %2199, !dbg !449

1909:                                             ; preds = %originalBBpart2509
  %1910 = load i32, i32* @x.3
  %1911 = load i32, i32* @y.4
  %1912 = sub i32 %1910, 1
  %1913 = mul i32 %1910, %1912
  %1914 = urem i32 %1913, 2
  %1915 = icmp eq i32 %1914, 0
  %1916 = icmp slt i32 %1911, 10
  %1917 = or i1 %1915, %1916
  br i1 %1917, label %originalBB590, label %originalBB590alteredBB

originalBB590:                                    ; preds = %1909, %originalBB590alteredBB
  store i8 0, i8* %21, align 1, !dbg !450
  %1918 = load i8*, i8** %20, align 8, !dbg !451
  %1919 = load i8, i8* %1918, align 1, !dbg !453
  %1920 = sext i8 %1919 to i32, !dbg !453
  %1921 = icmp sle i32 48, %1920, !dbg !454
  %1922 = load i32, i32* @x.3
  %1923 = load i32, i32* @y.4
  %1924 = sub i32 %1922, 1
  %1925 = mul i32 %1922, %1924
  %1926 = urem i32 %1925, 2
  %1927 = icmp eq i32 %1926, 0
  %1928 = icmp slt i32 %1923, 10
  %1929 = or i1 %1927, %1928
  br i1 %1929, label %originalBBpart2592, label %originalBB590alteredBB

originalBBpart2592:                               ; preds = %originalBB590
  br i1 %1921, label %1930, label %1951, !dbg !455

1930:                                             ; preds = %originalBBpart2592
  %1931 = load i32, i32* @x.3
  %1932 = load i32, i32* @y.4
  %1933 = sub i32 %1931, 1
  %1934 = mul i32 %1931, %1933
  %1935 = urem i32 %1934, 2
  %1936 = icmp eq i32 %1935, 0
  %1937 = icmp slt i32 %1932, 10
  %1938 = or i1 %1936, %1937
  br i1 %1938, label %originalBB594, label %originalBB594alteredBB

originalBB594:                                    ; preds = %1930, %originalBB594alteredBB
  %1939 = load i8*, i8** %20, align 8, !dbg !456
  %1940 = load i8, i8* %1939, align 1, !dbg !457
  %1941 = sext i8 %1940 to i32, !dbg !457
  %1942 = icmp sle i32 %1941, 55, !dbg !458
  %1943 = load i32, i32* @x.3
  %1944 = load i32, i32* @y.4
  %1945 = sub i32 %1943, 1
  %1946 = mul i32 %1943, %1945
  %1947 = urem i32 %1946, 2
  %1948 = icmp eq i32 %1947, 0
  %1949 = icmp slt i32 %1944, 10
  %1950 = or i1 %1948, %1949
  br i1 %1950, label %originalBBpart2596, label %originalBB594alteredBB

originalBBpart2596:                               ; preds = %originalBB594
  br i1 %1942, label %1968, label %1951, !dbg !459

1951:                                             ; preds = %originalBBpart2596, %originalBBpart2592
  %1952 = load i32, i32* @x.3
  %1953 = load i32, i32* @y.4
  %1954 = sub i32 %1952, 1
  %1955 = mul i32 %1952, %1954
  %1956 = urem i32 %1955, 2
  %1957 = icmp eq i32 %1956, 0
  %1958 = icmp slt i32 %1953, 10
  %1959 = or i1 %1957, %1958
  br i1 %1959, label %originalBB598, label %originalBB598alteredBB

originalBB598:                                    ; preds = %1951, %originalBB598alteredBB
  %1960 = load i32, i32* @x.3
  %1961 = load i32, i32* @y.4
  %1962 = sub i32 %1960, 1
  %1963 = mul i32 %1960, %1962
  %1964 = urem i32 %1963, 2
  %1965 = icmp eq i32 %1964, 0
  %1966 = icmp slt i32 %1961, 10
  %1967 = or i1 %1965, %1966
  br i1 %1967, label %originalBBpart2600, label %originalBB598alteredBB

originalBBpart2600:                               ; preds = %originalBB598
  br label %2199, !dbg !460

1968:                                             ; preds = %originalBBpart2596
  %1969 = load i32, i32* @x.3
  %1970 = load i32, i32* @y.4
  %1971 = sub i32 %1969, 1
  %1972 = mul i32 %1969, %1971
  %1973 = urem i32 %1972, 2
  %1974 = icmp eq i32 %1973, 0
  %1975 = icmp slt i32 %1970, 10
  %1976 = or i1 %1974, %1975
  br i1 %1976, label %originalBB602, label %originalBB602alteredBB

originalBB602:                                    ; preds = %1968, %originalBB602alteredBB
  %1977 = load i8*, i8** %20, align 8, !dbg !461
  %1978 = getelementptr inbounds i8, i8* %1977, i32 1, !dbg !461
  store i8* %1978, i8** %20, align 8, !dbg !461
  %1979 = load i8, i8* %1977, align 1, !dbg !462
  store i8 %1979, i8* %21, align 1, !dbg !463
  %1980 = load i32, i32* @x.3
  %1981 = load i32, i32* @y.4
  %1982 = sub i32 %1980, 1
  %1983 = mul i32 %1980, %1982
  %1984 = urem i32 %1983, 2
  %1985 = icmp eq i32 %1984, 0
  %1986 = icmp slt i32 %1981, 10
  %1987 = or i1 %1985, %1986
  br i1 %1987, label %originalBBpart2604, label %originalBB602alteredBB

originalBBpart2604:                               ; preds = %originalBB602
  br label %1988, !dbg !464

1988:                                             ; preds = %originalBBpart2604, %originalBBpart2509, %originalBBpart2509, %originalBBpart2509, %originalBBpart2509, %originalBBpart2509, %originalBBpart2509, %originalBBpart2509
  %1989 = load i32, i32* @x.3
  %1990 = load i32, i32* @y.4
  %1991 = sub i32 %1989, 1
  %1992 = mul i32 %1989, %1991
  %1993 = urem i32 %1992, 2
  %1994 = icmp eq i32 %1993, 0
  %1995 = icmp slt i32 %1990, 10
  %1996 = or i1 %1994, %1995
  br i1 %1996, label %originalBB606, label %originalBB606alteredBB

originalBB606:                                    ; preds = %1988, %originalBB606alteredBB
  %1997 = load i8, i8* %21, align 1, !dbg !465
  %1998 = zext i8 %1997 to i32, !dbg !465
  %1999 = sub nsw i32 %1998, 48, !dbg !465
  %2000 = trunc i32 %1999 to i8, !dbg !465
  store i8 %2000, i8* %21, align 1, !dbg !465
  %2001 = load i8*, i8** %20, align 8, !dbg !466
  %2002 = load i8, i8* %2001, align 1, !dbg !468
  %2003 = sext i8 %2002 to i32, !dbg !468
  %2004 = icmp sle i32 48, %2003, !dbg !469
  %2005 = load i32, i32* @x.3
  %2006 = load i32, i32* @y.4
  %2007 = sub i32 %2005, 1
  %2008 = mul i32 %2005, %2007
  %2009 = urem i32 %2008, 2
  %2010 = icmp eq i32 %2009, 0
  %2011 = icmp slt i32 %2006, 10
  %2012 = or i1 %2010, %2011
  br i1 %2012, label %originalBBpart2613, label %originalBB606alteredBB

originalBBpart2613:                               ; preds = %originalBB606
  br i1 %2004, label %2013, label %2061, !dbg !470

2013:                                             ; preds = %originalBBpart2613
  %2014 = load i32, i32* @x.3
  %2015 = load i32, i32* @y.4
  %2016 = sub i32 %2014, 1
  %2017 = mul i32 %2014, %2016
  %2018 = urem i32 %2017, 2
  %2019 = icmp eq i32 %2018, 0
  %2020 = icmp slt i32 %2015, 10
  %2021 = or i1 %2019, %2020
  br i1 %2021, label %originalBB615, label %originalBB615alteredBB

originalBB615:                                    ; preds = %2013, %originalBB615alteredBB
  %2022 = load i8*, i8** %20, align 8, !dbg !471
  %2023 = load i8, i8* %2022, align 1, !dbg !472
  %2024 = sext i8 %2023 to i32, !dbg !472
  %2025 = icmp sle i32 %2024, 55, !dbg !473
  %2026 = load i32, i32* @x.3
  %2027 = load i32, i32* @y.4
  %2028 = sub i32 %2026, 1
  %2029 = mul i32 %2026, %2028
  %2030 = urem i32 %2029, 2
  %2031 = icmp eq i32 %2030, 0
  %2032 = icmp slt i32 %2027, 10
  %2033 = or i1 %2031, %2032
  br i1 %2033, label %originalBBpart2617, label %originalBB615alteredBB

originalBBpart2617:                               ; preds = %originalBB615
  br i1 %2025, label %2034, label %2061, !dbg !474

2034:                                             ; preds = %originalBBpart2617
  %2035 = load i32, i32* @x.3
  %2036 = load i32, i32* @y.4
  %2037 = sub i32 %2035, 1
  %2038 = mul i32 %2035, %2037
  %2039 = urem i32 %2038, 2
  %2040 = icmp eq i32 %2039, 0
  %2041 = icmp slt i32 %2036, 10
  %2042 = or i1 %2040, %2041
  br i1 %2042, label %originalBB619, label %originalBB619alteredBB

originalBB619:                                    ; preds = %2034, %originalBB619alteredBB
  %2043 = load i8, i8* %21, align 1, !dbg !475
  %2044 = zext i8 %2043 to i32, !dbg !475
  %2045 = mul nsw i32 %2044, 8, !dbg !476
  %2046 = load i8*, i8** %20, align 8, !dbg !477
  %2047 = getelementptr inbounds i8, i8* %2046, i32 1, !dbg !477
  store i8* %2047, i8** %20, align 8, !dbg !477
  %2048 = load i8, i8* %2046, align 1, !dbg !478
  %2049 = sext i8 %2048 to i32, !dbg !478
  %2050 = sub nsw i32 %2049, 48, !dbg !479
  %2051 = add nsw i32 %2045, %2050, !dbg !480
  %2052 = trunc i32 %2051 to i8, !dbg !475
  store i8 %2052, i8* %21, align 1, !dbg !481
  %2053 = load i32, i32* @x.3
  %2054 = load i32, i32* @y.4
  %2055 = sub i32 %2053, 1
  %2056 = mul i32 %2053, %2055
  %2057 = urem i32 %2056, 2
  %2058 = icmp eq i32 %2057, 0
  %2059 = icmp slt i32 %2054, 10
  %2060 = or i1 %2058, %2059
  br i1 %2060, label %originalBBpart2638, label %originalBB619alteredBB

originalBBpart2638:                               ; preds = %originalBB619
  br label %2061, !dbg !482

2061:                                             ; preds = %originalBBpart2638, %originalBBpart2617, %originalBBpart2613
  %2062 = load i32, i32* @x.3
  %2063 = load i32, i32* @y.4
  %2064 = sub i32 %2062, 1
  %2065 = mul i32 %2062, %2064
  %2066 = urem i32 %2065, 2
  %2067 = icmp eq i32 %2066, 0
  %2068 = icmp slt i32 %2063, 10
  %2069 = or i1 %2067, %2068
  br i1 %2069, label %originalBB640, label %originalBB640alteredBB

originalBB640:                                    ; preds = %2061, %originalBB640alteredBB
  %2070 = load i8*, i8** %20, align 8, !dbg !483
  %2071 = load i8, i8* %2070, align 1, !dbg !485
  %2072 = sext i8 %2071 to i32, !dbg !485
  %2073 = icmp sle i32 48, %2072, !dbg !486
  %2074 = load i32, i32* @x.3
  %2075 = load i32, i32* @y.4
  %2076 = sub i32 %2074, 1
  %2077 = mul i32 %2074, %2076
  %2078 = urem i32 %2077, 2
  %2079 = icmp eq i32 %2078, 0
  %2080 = icmp slt i32 %2075, 10
  %2081 = or i1 %2079, %2080
  br i1 %2081, label %originalBBpart2642, label %originalBB640alteredBB

originalBBpart2642:                               ; preds = %originalBB640
  br i1 %2073, label %2082, label %2130, !dbg !487

2082:                                             ; preds = %originalBBpart2642
  %2083 = load i32, i32* @x.3
  %2084 = load i32, i32* @y.4
  %2085 = sub i32 %2083, 1
  %2086 = mul i32 %2083, %2085
  %2087 = urem i32 %2086, 2
  %2088 = icmp eq i32 %2087, 0
  %2089 = icmp slt i32 %2084, 10
  %2090 = or i1 %2088, %2089
  br i1 %2090, label %originalBB644, label %originalBB644alteredBB

originalBB644:                                    ; preds = %2082, %originalBB644alteredBB
  %2091 = load i8*, i8** %20, align 8, !dbg !488
  %2092 = load i8, i8* %2091, align 1, !dbg !489
  %2093 = sext i8 %2092 to i32, !dbg !489
  %2094 = icmp sle i32 %2093, 55, !dbg !490
  %2095 = load i32, i32* @x.3
  %2096 = load i32, i32* @y.4
  %2097 = sub i32 %2095, 1
  %2098 = mul i32 %2095, %2097
  %2099 = urem i32 %2098, 2
  %2100 = icmp eq i32 %2099, 0
  %2101 = icmp slt i32 %2096, 10
  %2102 = or i1 %2100, %2101
  br i1 %2102, label %originalBBpart2646, label %originalBB644alteredBB

originalBBpart2646:                               ; preds = %originalBB644
  br i1 %2094, label %2103, label %2130, !dbg !491

2103:                                             ; preds = %originalBBpart2646
  %2104 = load i32, i32* @x.3
  %2105 = load i32, i32* @y.4
  %2106 = sub i32 %2104, 1
  %2107 = mul i32 %2104, %2106
  %2108 = urem i32 %2107, 2
  %2109 = icmp eq i32 %2108, 0
  %2110 = icmp slt i32 %2105, 10
  %2111 = or i1 %2109, %2110
  br i1 %2111, label %originalBB648, label %originalBB648alteredBB

originalBB648:                                    ; preds = %2103, %originalBB648alteredBB
  %2112 = load i8, i8* %21, align 1, !dbg !492
  %2113 = zext i8 %2112 to i32, !dbg !492
  %2114 = mul nsw i32 %2113, 8, !dbg !493
  %2115 = load i8*, i8** %20, align 8, !dbg !494
  %2116 = getelementptr inbounds i8, i8* %2115, i32 1, !dbg !494
  store i8* %2116, i8** %20, align 8, !dbg !494
  %2117 = load i8, i8* %2115, align 1, !dbg !495
  %2118 = sext i8 %2117 to i32, !dbg !495
  %2119 = sub nsw i32 %2118, 48, !dbg !496
  %2120 = add nsw i32 %2114, %2119, !dbg !497
  %2121 = trunc i32 %2120 to i8, !dbg !492
  store i8 %2121, i8* %21, align 1, !dbg !498
  %2122 = load i32, i32* @x.3
  %2123 = load i32, i32* @y.4
  %2124 = sub i32 %2122, 1
  %2125 = mul i32 %2122, %2124
  %2126 = urem i32 %2125, 2
  %2127 = icmp eq i32 %2126, 0
  %2128 = icmp slt i32 %2123, 10
  %2129 = or i1 %2127, %2128
  br i1 %2129, label %originalBBpart2667, label %originalBB648alteredBB

originalBBpart2667:                               ; preds = %originalBB648
  br label %2130, !dbg !499

2130:                                             ; preds = %originalBBpart2667, %originalBBpart2646, %originalBBpart2642
  %2131 = load i32, i32* @x.3
  %2132 = load i32, i32* @y.4
  %2133 = sub i32 %2131, 1
  %2134 = mul i32 %2131, %2133
  %2135 = urem i32 %2134, 2
  %2136 = icmp eq i32 %2135, 0
  %2137 = icmp slt i32 %2132, 10
  %2138 = or i1 %2136, %2137
  br i1 %2138, label %originalBB669, label %originalBB669alteredBB

originalBB669:                                    ; preds = %2130, %originalBB669alteredBB
  %2139 = load i32, i32* @x.3
  %2140 = load i32, i32* @y.4
  %2141 = sub i32 %2139, 1
  %2142 = mul i32 %2139, %2141
  %2143 = urem i32 %2142, 2
  %2144 = icmp eq i32 %2143, 0
  %2145 = icmp slt i32 %2140, 10
  %2146 = or i1 %2144, %2145
  br i1 %2146, label %originalBBpart2671, label %originalBB669alteredBB

originalBBpart2671:                               ; preds = %originalBB669
  br label %2199, !dbg !500

2147:                                             ; preds = %originalBBpart2509
  %2148 = load i32, i32* @x.3
  %2149 = load i32, i32* @y.4
  %2150 = sub i32 %2148, 1
  %2151 = mul i32 %2148, %2150
  %2152 = urem i32 %2151, 2
  %2153 = icmp eq i32 %2152, 0
  %2154 = icmp slt i32 %2149, 10
  %2155 = or i1 %2153, %2154
  br i1 %2155, label %originalBB673, label %originalBB673alteredBB

originalBB673:                                    ; preds = %2147, %originalBB673alteredBB
  %2156 = load i32, i32* @x.3
  %2157 = load i32, i32* @y.4
  %2158 = sub i32 %2156, 1
  %2159 = mul i32 %2156, %2158
  %2160 = urem i32 %2159, 2
  %2161 = icmp eq i32 %2160, 0
  %2162 = icmp slt i32 %2157, 10
  %2163 = or i1 %2161, %2162
  br i1 %2163, label %originalBBpart2675, label %originalBB673alteredBB

originalBBpart2675:                               ; preds = %originalBB673
  br label %2199, !dbg !501

2164:                                             ; preds = %originalBBpart2565
  call void @llvm.dbg.label(metadata !502), !dbg !503
  %2165 = load i32, i32* @x.3
  %2166 = load i32, i32* @y.4
  %2167 = sub i32 %2165, 1
  %2168 = mul i32 %2165, %2167
  %2169 = urem i32 %2168, 2
  %2170 = icmp eq i32 %2169, 0
  %2171 = icmp slt i32 %2166, 10
  %2172 = or i1 %2170, %2171
  br i1 %2172, label %originalBB677, label %originalBB677alteredBB

originalBB677:                                    ; preds = %2164, %originalBB677alteredBB
  %2173 = load i32, i32* @x.3
  %2174 = load i32, i32* @y.4
  %2175 = sub i32 %2173, 1
  %2176 = mul i32 %2173, %2175
  %2177 = urem i32 %2176, 2
  %2178 = icmp eq i32 %2177, 0
  %2179 = icmp slt i32 %2174, 10
  %2180 = or i1 %2178, %2179
  br i1 %2180, label %originalBBpart2679, label %originalBB677alteredBB

originalBBpart2679:                               ; preds = %originalBB677
  br label %2181, !dbg !501

2181:                                             ; preds = %originalBBpart2679, %originalBBpart2509
  %2182 = load i32, i32* @x.3
  %2183 = load i32, i32* @y.4
  %2184 = sub i32 %2182, 1
  %2185 = mul i32 %2182, %2184
  %2186 = urem i32 %2185, 2
  %2187 = icmp eq i32 %2186, 0
  %2188 = icmp slt i32 %2183, 10
  %2189 = or i1 %2187, %2188
  br i1 %2189, label %originalBB681, label %originalBB681alteredBB

originalBB681:                                    ; preds = %2181, %originalBB681alteredBB
  %2190 = call i32 @putchar_unlocked(i32 92), !dbg !504
  %2191 = load i32, i32* @x.3
  %2192 = load i32, i32* @y.4
  %2193 = sub i32 %2191, 1
  %2194 = mul i32 %2191, %2193
  %2195 = urem i32 %2194, 2
  %2196 = icmp eq i32 %2195, 0
  %2197 = icmp slt i32 %2192, 10
  %2198 = or i1 %2196, %2197
  br i1 %2198, label %originalBBpart2683, label %originalBB681alteredBB

originalBBpart2683:                               ; preds = %originalBB681
  br label %2199, !dbg !505

2199:                                             ; preds = %originalBBpart2683, %originalBBpart2675, %originalBBpart2671, %originalBBpart2600, %originalBBpart2588, %originalBBpart2545, %originalBBpart2541, %originalBBpart2537, %originalBBpart2533, %originalBBpart2529, %originalBBpart2525, %originalBBpart2517, %originalBBpart2513
  %2200 = load i32, i32* @x.3
  %2201 = load i32, i32* @y.4
  %2202 = sub i32 %2200, 1
  %2203 = mul i32 %2200, %2202
  %2204 = urem i32 %2203, 2
  %2205 = icmp eq i32 %2204, 0
  %2206 = icmp slt i32 %2201, 10
  %2207 = or i1 %2205, %2206
  br i1 %2207, label %originalBB685, label %originalBB685alteredBB

originalBB685:                                    ; preds = %2199, %originalBB685alteredBB
  %2208 = load i32, i32* @x.3
  %2209 = load i32, i32* @y.4
  %2210 = sub i32 %2208, 1
  %2211 = mul i32 %2208, %2210
  %2212 = urem i32 %2211, 2
  %2213 = icmp eq i32 %2212, 0
  %2214 = icmp slt i32 %2209, 10
  %2215 = or i1 %2213, %2214
  br i1 %2215, label %originalBBpart2687, label %originalBB685alteredBB

originalBBpart2687:                               ; preds = %originalBB685
  br label %2216, !dbg !506

2216:                                             ; preds = %originalBBpart2687, %originalBBpart2505, %originalBBpart2501
  %2217 = load i32, i32* @x.3
  %2218 = load i32, i32* @y.4
  %2219 = sub i32 %2217, 1
  %2220 = mul i32 %2217, %2219
  %2221 = urem i32 %2220, 2
  %2222 = icmp eq i32 %2221, 0
  %2223 = icmp slt i32 %2218, 10
  %2224 = or i1 %2222, %2223
  br i1 %2224, label %originalBB689, label %originalBB689alteredBB

originalBB689:                                    ; preds = %2216, %originalBB689alteredBB
  %2225 = load i8, i8* %21, align 1, !dbg !507
  %2226 = zext i8 %2225 to i32, !dbg !507
  %2227 = call i32 @putchar_unlocked(i32 %2226), !dbg !507
  %2228 = load i32, i32* @x.3
  %2229 = load i32, i32* @y.4
  %2230 = sub i32 %2228, 1
  %2231 = mul i32 %2228, %2230
  %2232 = urem i32 %2231, 2
  %2233 = icmp eq i32 %2232, 0
  %2234 = icmp slt i32 %2229, 10
  %2235 = or i1 %2233, %2234
  br i1 %2235, label %originalBBpart2691, label %originalBB689alteredBB

originalBBpart2691:                               ; preds = %originalBB689
  br label %1550, !dbg !385, !llvm.loop !508

2236:                                             ; preds = %originalBBpart2497
  %2237 = load i32, i32* @x.3
  %2238 = load i32, i32* @y.4
  %2239 = sub i32 %2237, 1
  %2240 = mul i32 %2237, %2239
  %2241 = urem i32 %2240, 2
  %2242 = icmp eq i32 %2241, 0
  %2243 = icmp slt i32 %2238, 10
  %2244 = or i1 %2242, %2243
  br i1 %2244, label %originalBB693, label %originalBB693alteredBB

originalBB693:                                    ; preds = %2236, %originalBB693alteredBB
  %2245 = load i32, i32* %12, align 4, !dbg !510
  %2246 = add nsw i32 %2245, -1, !dbg !510
  store i32 %2246, i32* %12, align 4, !dbg !510
  %2247 = load i8**, i8*** %13, align 8, !dbg !511
  %2248 = getelementptr inbounds i8*, i8** %2247, i32 1, !dbg !511
  store i8** %2248, i8*** %13, align 8, !dbg !511
  %2249 = load i32, i32* %12, align 4, !dbg !512
  %2250 = icmp sgt i32 %2249, 0, !dbg !514
  %2251 = load i32, i32* @x.3
  %2252 = load i32, i32* @y.4
  %2253 = sub i32 %2251, 1
  %2254 = mul i32 %2251, %2253
  %2255 = urem i32 %2254, 2
  %2256 = icmp eq i32 %2255, 0
  %2257 = icmp slt i32 %2252, 10
  %2258 = or i1 %2256, %2257
  br i1 %2258, label %originalBBpart2696, label %originalBB693alteredBB

originalBBpart2696:                               ; preds = %originalBB693
  br i1 %2250, label %2259, label %2277, !dbg !515

2259:                                             ; preds = %originalBBpart2696
  %2260 = load i32, i32* @x.3
  %2261 = load i32, i32* @y.4
  %2262 = sub i32 %2260, 1
  %2263 = mul i32 %2260, %2262
  %2264 = urem i32 %2263, 2
  %2265 = icmp eq i32 %2264, 0
  %2266 = icmp slt i32 %2261, 10
  %2267 = or i1 %2265, %2266
  br i1 %2267, label %originalBB698, label %originalBB698alteredBB

originalBB698:                                    ; preds = %2259, %originalBB698alteredBB
  %2268 = call i32 @putchar_unlocked(i32 32), !dbg !516
  %2269 = load i32, i32* @x.3
  %2270 = load i32, i32* @y.4
  %2271 = sub i32 %2269, 1
  %2272 = mul i32 %2269, %2271
  %2273 = urem i32 %2272, 2
  %2274 = icmp eq i32 %2273, 0
  %2275 = icmp slt i32 %2270, 10
  %2276 = or i1 %2274, %2275
  br i1 %2276, label %originalBBpart2700, label %originalBB698alteredBB

originalBBpart2700:                               ; preds = %originalBB698
  br label %2277, !dbg !516

2277:                                             ; preds = %originalBBpart2700, %originalBBpart2696
  %2278 = load i32, i32* @x.3
  %2279 = load i32, i32* @y.4
  %2280 = sub i32 %2278, 1
  %2281 = mul i32 %2278, %2280
  %2282 = urem i32 %2281, 2
  %2283 = icmp eq i32 %2282, 0
  %2284 = icmp slt i32 %2279, 10
  %2285 = or i1 %2283, %2284
  br i1 %2285, label %originalBB702, label %originalBB702alteredBB

originalBB702:                                    ; preds = %2277, %originalBB702alteredBB
  %2286 = load i32, i32* @x.3
  %2287 = load i32, i32* @y.4
  %2288 = sub i32 %2286, 1
  %2289 = mul i32 %2286, %2288
  %2290 = urem i32 %2289, 2
  %2291 = icmp eq i32 %2290, 0
  %2292 = icmp slt i32 %2287, 10
  %2293 = or i1 %2291, %2292
  br i1 %2293, label %originalBBpart2704, label %originalBB702alteredBB

originalBBpart2704:                               ; preds = %originalBB702
  br label %1511, !dbg !375, !llvm.loop !517

2294:                                             ; preds = %originalBBpart2489
  %2295 = load i32, i32* @x.3
  %2296 = load i32, i32* @y.4
  %2297 = sub i32 %2295, 1
  %2298 = mul i32 %2295, %2297
  %2299 = urem i32 %2298, 2
  %2300 = icmp eq i32 %2299, 0
  %2301 = icmp slt i32 %2296, 10
  %2302 = or i1 %2300, %2301
  br i1 %2302, label %originalBB706, label %originalBB706alteredBB

originalBB706:                                    ; preds = %2294, %originalBB706alteredBB
  %2303 = load i32, i32* @x.3
  %2304 = load i32, i32* @y.4
  %2305 = sub i32 %2303, 1
  %2306 = mul i32 %2303, %2305
  %2307 = urem i32 %2306, 2
  %2308 = icmp eq i32 %2307, 0
  %2309 = icmp slt i32 %2304, 10
  %2310 = or i1 %2308, %2309
  br i1 %2310, label %originalBBpart2708, label %originalBB706alteredBB

originalBBpart2708:                               ; preds = %originalBB706
  br label %2427, !dbg !519

2311:                                             ; preds = %originalBBpart2481
  %2312 = load i32, i32* @x.3
  %2313 = load i32, i32* @y.4
  %2314 = sub i32 %2312, 1
  %2315 = mul i32 %2312, %2314
  %2316 = urem i32 %2315, 2
  %2317 = icmp eq i32 %2316, 0
  %2318 = icmp slt i32 %2313, 10
  %2319 = or i1 %2317, %2318
  br i1 %2319, label %originalBB710, label %originalBB710alteredBB

originalBB710:                                    ; preds = %2311, %originalBB710alteredBB
  %2320 = load i32, i32* @x.3
  %2321 = load i32, i32* @y.4
  %2322 = sub i32 %2320, 1
  %2323 = mul i32 %2320, %2322
  %2324 = urem i32 %2323, 2
  %2325 = icmp eq i32 %2324, 0
  %2326 = icmp slt i32 %2321, 10
  %2327 = or i1 %2325, %2326
  br i1 %2327, label %originalBBpart2712, label %originalBB710alteredBB

originalBBpart2712:                               ; preds = %originalBB710
  br label %2328, !dbg !520

2328:                                             ; preds = %originalBBpart2739, %originalBBpart2712
  %2329 = load i32, i32* @x.3
  %2330 = load i32, i32* @y.4
  %2331 = sub i32 %2329, 1
  %2332 = mul i32 %2329, %2331
  %2333 = urem i32 %2332, 2
  %2334 = icmp eq i32 %2333, 0
  %2335 = icmp slt i32 %2330, 10
  %2336 = or i1 %2334, %2335
  br i1 %2336, label %originalBB714, label %originalBB714alteredBB

originalBB714:                                    ; preds = %2328, %originalBB714alteredBB
  %2337 = load i32, i32* %12, align 4, !dbg !522
  %2338 = icmp sgt i32 %2337, 0, !dbg !523
  %2339 = load i32, i32* @x.3
  %2340 = load i32, i32* @y.4
  %2341 = sub i32 %2339, 1
  %2342 = mul i32 %2339, %2341
  %2343 = urem i32 %2342, 2
  %2344 = icmp eq i32 %2343, 0
  %2345 = icmp slt i32 %2340, 10
  %2346 = or i1 %2344, %2345
  br i1 %2346, label %originalBBpart2716, label %originalBB714alteredBB

originalBBpart2716:                               ; preds = %originalBB714
  br i1 %2338, label %2347, label %2410, !dbg !520

2347:                                             ; preds = %originalBBpart2716
  %2348 = load i32, i32* @x.3
  %2349 = load i32, i32* @y.4
  %2350 = sub i32 %2348, 1
  %2351 = mul i32 %2348, %2350
  %2352 = urem i32 %2351, 2
  %2353 = icmp eq i32 %2352, 0
  %2354 = icmp slt i32 %2349, 10
  %2355 = or i1 %2353, %2354
  br i1 %2355, label %originalBB718, label %originalBB718alteredBB

originalBB718:                                    ; preds = %2347, %originalBB718alteredBB
  %2356 = load i8**, i8*** %13, align 8, !dbg !524
  %2357 = getelementptr inbounds i8*, i8** %2356, i64 0, !dbg !524
  %2358 = load i8*, i8** %2357, align 8, !dbg !524
  %2359 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !524
  %2360 = call i32 @fputs_unlocked(i8* %2358, %struct._IO_FILE* %2359), !dbg !524
  %2361 = load i32, i32* %12, align 4, !dbg !526
  %2362 = add nsw i32 %2361, -1, !dbg !526
  store i32 %2362, i32* %12, align 4, !dbg !526
  %2363 = load i8**, i8*** %13, align 8, !dbg !527
  %2364 = getelementptr inbounds i8*, i8** %2363, i32 1, !dbg !527
  store i8** %2364, i8*** %13, align 8, !dbg !527
  %2365 = load i32, i32* %12, align 4, !dbg !528
  %2366 = icmp sgt i32 %2365, 0, !dbg !530
  %2367 = load i32, i32* @x.3
  %2368 = load i32, i32* @y.4
  %2369 = sub i32 %2367, 1
  %2370 = mul i32 %2367, %2369
  %2371 = urem i32 %2370, 2
  %2372 = icmp eq i32 %2371, 0
  %2373 = icmp slt i32 %2368, 10
  %2374 = or i1 %2372, %2373
  br i1 %2374, label %originalBBpart2731, label %originalBB718alteredBB

originalBBpart2731:                               ; preds = %originalBB718
  br i1 %2366, label %2375, label %2393, !dbg !531

2375:                                             ; preds = %originalBBpart2731
  %2376 = load i32, i32* @x.3
  %2377 = load i32, i32* @y.4
  %2378 = sub i32 %2376, 1
  %2379 = mul i32 %2376, %2378
  %2380 = urem i32 %2379, 2
  %2381 = icmp eq i32 %2380, 0
  %2382 = icmp slt i32 %2377, 10
  %2383 = or i1 %2381, %2382
  br i1 %2383, label %originalBB733, label %originalBB733alteredBB

originalBB733:                                    ; preds = %2375, %originalBB733alteredBB
  %2384 = call i32 @putchar_unlocked(i32 32), !dbg !532
  %2385 = load i32, i32* @x.3
  %2386 = load i32, i32* @y.4
  %2387 = sub i32 %2385, 1
  %2388 = mul i32 %2385, %2387
  %2389 = urem i32 %2388, 2
  %2390 = icmp eq i32 %2389, 0
  %2391 = icmp slt i32 %2386, 10
  %2392 = or i1 %2390, %2391
  br i1 %2392, label %originalBBpart2735, label %originalBB733alteredBB

originalBBpart2735:                               ; preds = %originalBB733
  br label %2393, !dbg !532

2393:                                             ; preds = %originalBBpart2735, %originalBBpart2731
  %2394 = load i32, i32* @x.3
  %2395 = load i32, i32* @y.4
  %2396 = sub i32 %2394, 1
  %2397 = mul i32 %2394, %2396
  %2398 = urem i32 %2397, 2
  %2399 = icmp eq i32 %2398, 0
  %2400 = icmp slt i32 %2395, 10
  %2401 = or i1 %2399, %2400
  br i1 %2401, label %originalBB737, label %originalBB737alteredBB

originalBB737:                                    ; preds = %2393, %originalBB737alteredBB
  %2402 = load i32, i32* @x.3
  %2403 = load i32, i32* @y.4
  %2404 = sub i32 %2402, 1
  %2405 = mul i32 %2402, %2404
  %2406 = urem i32 %2405, 2
  %2407 = icmp eq i32 %2406, 0
  %2408 = icmp slt i32 %2403, 10
  %2409 = or i1 %2407, %2408
  br i1 %2409, label %originalBBpart2739, label %originalBB737alteredBB

originalBBpart2739:                               ; preds = %originalBB737
  br label %2328, !dbg !520, !llvm.loop !533

2410:                                             ; preds = %originalBBpart2716
  %2411 = load i32, i32* @x.3
  %2412 = load i32, i32* @y.4
  %2413 = sub i32 %2411, 1
  %2414 = mul i32 %2411, %2413
  %2415 = urem i32 %2414, 2
  %2416 = icmp eq i32 %2415, 0
  %2417 = icmp slt i32 %2412, 10
  %2418 = or i1 %2416, %2417
  br i1 %2418, label %originalBB741, label %originalBB741alteredBB

originalBB741:                                    ; preds = %2410, %originalBB741alteredBB
  %2419 = load i32, i32* @x.3
  %2420 = load i32, i32* @y.4
  %2421 = sub i32 %2419, 1
  %2422 = mul i32 %2419, %2421
  %2423 = urem i32 %2422, 2
  %2424 = icmp eq i32 %2423, 0
  %2425 = icmp slt i32 %2420, 10
  %2426 = or i1 %2424, %2425
  br i1 %2426, label %originalBBpart2743, label %originalBB741alteredBB

originalBBpart2743:                               ; preds = %originalBB741
  br label %2427

2427:                                             ; preds = %originalBBpart2743, %originalBBpart2708
  %2428 = load i32, i32* @x.3
  %2429 = load i32, i32* @y.4
  %2430 = sub i32 %2428, 1
  %2431 = mul i32 %2428, %2430
  %2432 = urem i32 %2431, 2
  %2433 = icmp eq i32 %2432, 0
  %2434 = icmp slt i32 %2429, 10
  %2435 = or i1 %2433, %2434
  br i1 %2435, label %originalBB745, label %originalBB745alteredBB

originalBB745:                                    ; preds = %2427, %originalBB745alteredBB
  %2436 = load i8, i8* %14, align 1, !dbg !535
  %2437 = trunc i8 %2436 to i1, !dbg !535
  %2438 = load i32, i32* @x.3
  %2439 = load i32, i32* @y.4
  %2440 = sub i32 %2438, 1
  %2441 = mul i32 %2438, %2440
  %2442 = urem i32 %2441, 2
  %2443 = icmp eq i32 %2442, 0
  %2444 = icmp slt i32 %2439, 10
  %2445 = or i1 %2443, %2444
  br i1 %2445, label %originalBBpart2747, label %originalBB745alteredBB

originalBBpart2747:                               ; preds = %originalBB745
  br i1 %2437, label %2446, label %2464, !dbg !537

2446:                                             ; preds = %originalBBpart2747
  %2447 = load i32, i32* @x.3
  %2448 = load i32, i32* @y.4
  %2449 = sub i32 %2447, 1
  %2450 = mul i32 %2447, %2449
  %2451 = urem i32 %2450, 2
  %2452 = icmp eq i32 %2451, 0
  %2453 = icmp slt i32 %2448, 10
  %2454 = or i1 %2452, %2453
  br i1 %2454, label %originalBB749, label %originalBB749alteredBB

originalBB749:                                    ; preds = %2446, %originalBB749alteredBB
  %2455 = call i32 @putchar_unlocked(i32 10), !dbg !538
  %2456 = load i32, i32* @x.3
  %2457 = load i32, i32* @y.4
  %2458 = sub i32 %2456, 1
  %2459 = mul i32 %2456, %2458
  %2460 = urem i32 %2459, 2
  %2461 = icmp eq i32 %2460, 0
  %2462 = icmp slt i32 %2457, 10
  %2463 = or i1 %2461, %2462
  br i1 %2463, label %originalBBpart2751, label %originalBB749alteredBB

originalBBpart2751:                               ; preds = %originalBB749
  br label %2464, !dbg !538

2464:                                             ; preds = %originalBBpart2751, %originalBBpart2747
  %2465 = load i32, i32* @x.3
  %2466 = load i32, i32* @y.4
  %2467 = sub i32 %2465, 1
  %2468 = mul i32 %2465, %2467
  %2469 = urem i32 %2468, 2
  %2470 = icmp eq i32 %2469, 0
  %2471 = icmp slt i32 %2466, 10
  %2472 = or i1 %2470, %2471
  br i1 %2472, label %originalBB753, label %originalBB753alteredBB

originalBB753:                                    ; preds = %2464, %originalBB753alteredBB
  store i32 0, i32* %11, align 4, !dbg !539
  %2473 = load i32, i32* @x.3
  %2474 = load i32, i32* @y.4
  %2475 = sub i32 %2473, 1
  %2476 = mul i32 %2473, %2475
  %2477 = urem i32 %2476, 2
  %2478 = icmp eq i32 %2477, 0
  %2479 = icmp slt i32 %2474, 10
  %2480 = or i1 %2478, %2479
  br i1 %2480, label %originalBBpart2755, label %originalBB753alteredBB

originalBBpart2755:                               ; preds = %originalBB753
  br label %2481, !dbg !539

2481:                                             ; preds = %originalBBpart2755, %originalBBpart2521, %originalBBpart2265
  %2482 = load i32, i32* @x.3
  %2483 = load i32, i32* @y.4
  %2484 = sub i32 %2482, 1
  %2485 = mul i32 %2482, %2484
  %2486 = urem i32 %2485, 2
  %2487 = icmp eq i32 %2486, 0
  %2488 = icmp slt i32 %2483, 10
  %2489 = or i1 %2487, %2488
  br i1 %2489, label %originalBB757, label %originalBB757alteredBB

originalBB757:                                    ; preds = %2481, %originalBB757alteredBB
  %2490 = load i32, i32* %11, align 4, !dbg !540
  %2491 = load i32, i32* @x.3
  %2492 = load i32, i32* @y.4
  %2493 = sub i32 %2491, 1
  %2494 = mul i32 %2491, %2493
  %2495 = urem i32 %2494, 2
  %2496 = icmp eq i32 %2495, 0
  %2497 = icmp slt i32 %2492, 10
  %2498 = or i1 %2496, %2497
  br i1 %2498, label %originalBBpart2759, label %originalBB757alteredBB

originalBBpart2759:                               ; preds = %originalBB757
  ret i32 %2490, !dbg !540

originalBBalteredBB:                              ; preds = %originalBB, %2
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %2499 = alloca i32, align 4
  %2500 = alloca i32, align 4
  %2501 = alloca i8**, align 8
  %2502 = alloca i8, align 1
  %2503 = alloca i8, align 1
  %2504 = alloca i8, align 1
  %2505 = alloca i8, align 1
  %2506 = alloca i8*, align 8
  %2507 = alloca i64, align 8
  %2508 = alloca i8*, align 8
  %2509 = alloca i8, align 1
  %2510 = alloca i8, align 1
  store i32 0, i32* %2499, align 4
  store i32 %0, i32* %2500, align 4
  call void @llvm.dbg.declare(metadata i32* %2500, metadata !541, metadata !DIExpression()), !dbg !265
  store i8** %1, i8*** %2501, align 8
  call void @llvm.dbg.declare(metadata i8*** %2501, metadata !544, metadata !DIExpression()), !dbg !267
  call void @llvm.dbg.declare(metadata i8* %2502, metadata !545, metadata !DIExpression()), !dbg !269
  store i8 1, i8* %2502, align 1, !dbg !269
  call void @llvm.dbg.declare(metadata i8* %2503, metadata !546, metadata !DIExpression()), !dbg !271
  %2511 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !272
  %2512 = icmp ne i8* %2511, null, !dbg !272
  %2513 = zext i1 %2512 to i8, !dbg !271
  store i8 %2513, i8* %2503, align 1, !dbg !271
  call void @llvm.dbg.declare(metadata i8* %2504, metadata !547, metadata !DIExpression()), !dbg !274
  %2514 = load i8, i8* %2503, align 1, !dbg !275
  %2515 = trunc i8 %2514 to i1, !dbg !275
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %36
  %2516 = load i32, i32* %12, align 4, !dbg !277
  %2517 = icmp slt i32 1, %2516, !dbg !278
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %55
  %2518 = load i8**, i8*** %13, align 8, !dbg !280
  %2519 = getelementptr inbounds i8*, i8** %2518, i64 1, !dbg !280
  %2520 = load i8*, i8** %2519, align 8, !dbg !280
  %2521 = call i32 @strcmp(i8* %2520, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0)) #13, !dbg !280
  %2522 = icmp eq i32 %2521, 0, !dbg !280
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %77
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %95
  %2523 = zext i1 %96 to i8, !dbg !274
  store i8 %2523, i8* %16, align 1, !dbg !274
  call void @llvm.dbg.declare(metadata !4, metadata !548, metadata !DIExpression()), !dbg !283
  store i8 0, i8* %17, align 1, !dbg !283
  %2524 = load i8**, i8*** %13, align 8, !dbg !284
  %2525 = getelementptr inbounds i8*, i8** %2524, i64 0, !dbg !284
  %2526 = load i8*, i8** %2525, align 8, !dbg !284
  call void @set_program_name(i8* %2526), !dbg !285
  %2527 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)) #10, !dbg !286
  %2528 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !287
  %2529 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0)) #10, !dbg !288
  %2530 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !289
  %2531 = load i8, i8* %16, align 1, !dbg !290
  %2532 = trunc i8 %2531 to i1, !dbg !290
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %123
  %2533 = load i32, i32* %12, align 4, !dbg !293
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %141
  %collatzVaralteredBB = alloca i32
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %158
  %2534 = load i32, i32* @inVal0
  %2535 = icmp sgt i32 %2534, 1
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %177
  store i32 51, i32* %collatzVar
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %194
  %2536 = load i8**, i8*** @inVal1
  %2537 = getelementptr inbounds i8*, i8** %2536, i64 1
  %2538 = load i8*, i8** %2537
  %controlealteredBB = call i32 @controle(i8* %2538, i32 2)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %214
  %2539 = load i32, i32* %collatzVar
  %2540 = icmp sgt i32 %2539, 1
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %233
  %2541 = load i32, i32* %collatzVar
  %_ = sub i32 0, %2541
  %gen = add i32 %_, 2
  %_43 = sub i32 %2541, 2
  %gen44 = mul i32 %_43, 2
  %2542 = srem i32 %2541, 2
  %2543 = icmp eq i32 %2542, 0
  br label %originalBB42

originalBB48alteredBB:                            ; preds = %originalBB48, %253
  %2544 = load i32, i32* %collatzVar
  %_49 = shl i32 %2544, 2
  %_50 = shl i32 %2544, 2
  %_51 = shl i32 %2544, 2
  %_52 = sub i32 %2544, 2
  %gen53 = mul i32 %_52, 2
  %2545 = sdiv i32 %2544, 2
  store i32 %2545, i32* %collatzVar
  br label %originalBB48

originalBB57alteredBB:                            ; preds = %originalBB57, %272
  %2546 = load i32, i32* %collatzVar
  %_58 = sub i32 %2546, 3
  %gen59 = mul i32 %_58, 3
  %_60 = sub i32 %2546, 3
  %gen61 = mul i32 %_60, 3
  %_62 = sub i32 0, %2546
  %gen63 = add i32 %_62, 3
  %_64 = sub i32 %2546, 3
  %gen65 = mul i32 %_64, 3
  %2547 = mul i32 %2546, 3
  %_66 = shl i32 %2547, 1
  %_67 = shl i32 %2547, 1
  %_68 = sub i32 %2547, 1
  %gen69 = mul i32 %_68, 1
  %2548 = add i32 %2547, 1
  store i32 %2548, i32* %collatzVar
  br label %originalBB57

originalBB73alteredBB:                            ; preds = %originalBB73, %292
  %2549 = load i32, i32* %collatzVar
  %_74 = sub i32 %132, %2549
  %gen75 = mul i32 %_74, %2549
  %_76 = sub i32 %132, %2549
  %gen77 = mul i32 %_76, %2549
  %_78 = sub i32 0, %132
  %gen79 = add i32 %_78, %2549
  %_80 = sub i32 0, %132
  %gen81 = add i32 %_80, %2549
  %_82 = sub i32 0, %132
  %gen83 = add i32 %_82, %2549
  %_84 = sub i32 0, %132
  %gen85 = add i32 %_84, %2549
  %_86 = sub i32 0, %132
  %gen87 = add i32 %_86, %2549
  %_88 = sub i32 %132, %2549
  %gen89 = mul i32 %_88, %2549
  %_90 = sub i32 %132, %2549
  %gen91 = mul i32 %_90, %2549
  %2550 = sub i32 %132, %2549
  %2551 = icmp sgt i32 %2550, 0
  br label %originalBB73

originalBB95alteredBB:                            ; preds = %originalBB95, %312
  %2552 = load i32, i32* %collatzVar
  %_96 = sub i32 0, %132
  %gen97 = add i32 %_96, %2552
  %2553 = add i32 %132, %2552
  %2554 = icmp slt i32 %2553, 4
  br label %originalBB95

originalBB101alteredBB:                           ; preds = %originalBB101, %332
  %2555 = load i8**, i8*** %13, align 8, !dbg !295
  %2556 = getelementptr inbounds i8*, i8** %2555, i64 1, !dbg !295
  %2557 = load i8*, i8** %2556, align 8, !dbg !295
  %2558 = call i32 @strcmp(i8* %2557, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i64 0, i64 0)) #13, !dbg !295
  br label %originalBB101

originalBB105alteredBB:                           ; preds = %originalBB105, %353
  %collatzVar5alteredBB = alloca i32
  br label %originalBB105

originalBB109alteredBB:                           ; preds = %originalBB109, %370
  %2559 = load i32, i32* @inVal0
  %2560 = icmp sgt i32 %2559, 1
  br label %originalBB109

originalBB113alteredBB:                           ; preds = %originalBB113, %389
  store i32 18, i32* %collatzVar5
  br label %originalBB113

originalBB117alteredBB:                           ; preds = %originalBB117, %406
  %2561 = load i8**, i8*** @inVal1
  %2562 = getelementptr inbounds i8*, i8** %2561, i64 1
  %2563 = load i8*, i8** %2562
  %controle6alteredBB = call i32 @controle(i8* %2563, i32 0)
  store i32 %controle6alteredBB, i32* %collatzVar5
  br label %originalBB117

originalBB121alteredBB:                           ; preds = %originalBB121, %426
  %2564 = load i32, i32* %collatzVar5
  %2565 = icmp sgt i32 %2564, 1
  br label %originalBB121

originalBB125alteredBB:                           ; preds = %originalBB125, %445
  %2566 = load i32, i32* %collatzVar5
  %_126 = shl i32 %2566, 2
  %2567 = srem i32 %2566, 2
  %2568 = icmp eq i32 %2567, 0
  br label %originalBB125

originalBB130alteredBB:                           ; preds = %originalBB130, %465
  %2569 = load i32, i32* %collatzVar5
  %_131 = sub i32 0, %2569
  %gen132 = add i32 %_131, 2
  %_133 = sub i32 0, %2569
  %gen134 = add i32 %_133, 2
  %_135 = sub i32 0, %2569
  %gen136 = add i32 %_135, 2
  %2570 = sdiv i32 %2569, 2
  store i32 %2570, i32* %collatzVar5
  br label %originalBB130

originalBB140alteredBB:                           ; preds = %originalBB140, %484
  %2571 = load i32, i32* %collatzVar5
  %_141 = sub i32 0, %2571
  %gen142 = add i32 %_141, 3
  %_143 = shl i32 %2571, 3
  %_144 = shl i32 %2571, 3
  %2572 = mul i32 %2571, 3
  %_145 = sub i32 %2572, 1
  %gen146 = mul i32 %_145, 1
  %_147 = shl i32 %2572, 1
  %_148 = shl i32 %2572, 1
  %_149 = sub i32 0, %2572
  %gen150 = add i32 %_149, 1
  %_151 = sub i32 0, %2572
  %gen152 = add i32 %_151, 1
  %_153 = shl i32 %2572, 1
  %_154 = sub i32 %2572, 1
  %gen155 = mul i32 %_154, 1
  %2573 = add i32 %2572, 1
  store i32 %2573, i32* %collatzVar5
  br label %originalBB140

originalBB159alteredBB:                           ; preds = %originalBB159, %504
  %2574 = load i32, i32* %collatzVar5
  %_160 = sub i32 0, %344
  %gen161 = add i32 %_160, %2574
  %_162 = sub i32 0, %344
  %gen163 = add i32 %_162, %2574
  %2575 = sub i32 %344, %2574
  %2576 = icmp sgt i32 %2575, -2
  br label %originalBB159

originalBB167alteredBB:                           ; preds = %originalBB167, %524
  %2577 = load i32, i32* %collatzVar5
  %_168 = sub i32 0, %344
  %gen169 = add i32 %_168, %2577
  %_170 = shl i32 %344, %2577
  %_171 = sub i32 %344, %2577
  %gen172 = mul i32 %_171, %2577
  %_173 = sub i32 %344, %2577
  %gen174 = mul i32 %_173, %2577
  %2578 = add i32 %344, %2577
  %2579 = icmp slt i32 %2578, 2
  br label %originalBB167

originalBB178alteredBB:                           ; preds = %originalBB178, %544
  call void @usage(i32 0) #14, !dbg !298
  br label %originalBB178

originalBB182alteredBB:                           ; preds = %originalBB182, %561
  %2580 = load i8**, i8*** %13, align 8, !dbg !299
  %2581 = getelementptr inbounds i8*, i8** %2580, i64 1, !dbg !299
  %2582 = load i8*, i8** %2581, align 8, !dbg !299
  %2583 = call i32 @strcmp(i8* %2582, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i64 0, i64 0)) #13, !dbg !299
  br label %originalBB182

originalBB186alteredBB:                           ; preds = %originalBB186, %582
  %collatzVar1alteredBB = alloca i32
  br label %originalBB186

originalBB190alteredBB:                           ; preds = %originalBB190, %599
  %2584 = load i32, i32* @inVal0
  %2585 = icmp sgt i32 %2584, 1
  br label %originalBB190

originalBB194alteredBB:                           ; preds = %originalBB194, %618
  store i32 5, i32* %collatzVar1
  br label %originalBB194

originalBB198alteredBB:                           ; preds = %originalBB198, %635
  %2586 = load i8**, i8*** @inVal1
  %2587 = getelementptr inbounds i8*, i8** %2586, i64 1
  %2588 = load i8*, i8** %2587
  %controle2alteredBB = call i32 @controle(i8* %2588, i32 0)
  store i32 %controle2alteredBB, i32* %collatzVar1
  br label %originalBB198

originalBB202alteredBB:                           ; preds = %originalBB202, %655
  %2589 = load i32, i32* %collatzVar1
  %2590 = icmp sgt i32 %2589, 1
  br label %originalBB202

originalBB206alteredBB:                           ; preds = %originalBB206, %674
  %2591 = load i32, i32* %collatzVar1
  %_207 = sub i32 %2591, 2
  %gen208 = mul i32 %_207, 2
  %_209 = sub i32 %2591, 2
  %gen210 = mul i32 %_209, 2
  %_211 = sub i32 0, %2591
  %gen212 = add i32 %_211, 2
  %_213 = shl i32 %2591, 2
  %_214 = sub i32 0, %2591
  %gen215 = add i32 %_214, 2
  %_216 = shl i32 %2591, 2
  %_217 = sub i32 %2591, 2
  %gen218 = mul i32 %_217, 2
  %_219 = sub i32 %2591, 2
  %gen220 = mul i32 %_219, 2
  %2592 = srem i32 %2591, 2
  %2593 = icmp eq i32 %2592, 0
  br label %originalBB206

originalBB225alteredBB:                           ; preds = %originalBB225, %694
  %2594 = load i32, i32* %collatzVar1
  %2595 = sdiv i32 %2594, 2
  store i32 %2595, i32* %collatzVar1
  br label %originalBB225

originalBB229alteredBB:                           ; preds = %originalBB229, %713
  %2596 = load i32, i32* %collatzVar1
  %_230 = sub i32 0, %2596
  %gen231 = add i32 %_230, 3
  %_232 = shl i32 %2596, 3
  %_233 = shl i32 %2596, 3
  %_234 = shl i32 %2596, 3
  %2597 = mul i32 %2596, 3
  %_235 = sub i32 0, %2597
  %gen236 = add i32 %_235, 1
  %2598 = add i32 %2597, 1
  store i32 %2598, i32* %collatzVar1
  br label %originalBB229

originalBB241alteredBB:                           ; preds = %originalBB241, %733
  %2599 = load i32, i32* %collatzVar1
  %_242 = sub i32 0, %573
  %gen243 = add i32 %_242, %2599
  %_244 = shl i32 %573, %2599
  %_245 = sub i32 0, %573
  %gen246 = add i32 %_245, %2599
  %_247 = sub i32 %573, %2599
  %gen248 = mul i32 %_247, %2599
  %2600 = sub i32 %573, %2599
  %2601 = icmp sgt i32 %2600, -2
  br label %originalBB241

originalBB252alteredBB:                           ; preds = %originalBB252, %753
  %2602 = load i32, i32* %collatzVar1
  %_253 = sub i32 0, %573
  %gen254 = add i32 %_253, %2602
  %_255 = sub i32 %573, %2602
  %gen256 = mul i32 %_255, %2602
  %_257 = shl i32 %573, %2602
  %_258 = sub i32 0, %573
  %gen259 = add i32 %_258, %2602
  %2603 = add i32 %573, %2602
  %2604 = icmp slt i32 %2603, 2
  br label %originalBB252

originalBB263alteredBB:                           ; preds = %originalBB263, %773
  %2605 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !301
  %2606 = load i8*, i8** @Version, align 8, !dbg !303
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %2605, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19, i64 0, i64 0), i8* %2606, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i8* null), !dbg !304
  store i32 0, i32* %11, align 4, !dbg !305
  br label %originalBB263

originalBB267alteredBB:                           ; preds = %originalBB267, %792
  br label %originalBB267

originalBB271alteredBB:                           ; preds = %originalBB271, %809
  %2607 = load i32, i32* %12, align 4, !dbg !307
  %_272 = sub i32 0, %2607
  %gen273 = add i32 %_272, -1
  %_274 = sub i32 0, %2607
  %gen275 = add i32 %_274, -1
  %_276 = sub i32 %2607, -1
  %gen277 = mul i32 %_276, -1
  %_278 = sub i32 0, %2607
  %gen279 = add i32 %_278, -1
  %_280 = sub i32 0, %2607
  %gen281 = add i32 %_280, -1
  %_282 = shl i32 %2607, -1
  %_283 = sub i32 0, %2607
  %gen284 = add i32 %_283, -1
  %2608 = add nsw i32 %2607, -1, !dbg !307
  store i32 %2608, i32* %12, align 4, !dbg !307
  %2609 = load i8**, i8*** %13, align 8, !dbg !308
  %2610 = getelementptr inbounds i8*, i8** %2609, i32 1, !dbg !308
  store i8** %2610, i8*** %13, align 8, !dbg !308
  %2611 = load i8, i8* %16, align 1, !dbg !309
  %2612 = trunc i8 %2611 to i1, !dbg !309
  br label %originalBB271

originalBB288alteredBB:                           ; preds = %originalBB288, %832
  br label %originalBB288

originalBB292alteredBB:                           ; preds = %originalBB292, %849
  %2613 = load i32, i32* %12, align 4, !dbg !313
  %2614 = icmp sgt i32 %2613, 0, !dbg !314
  br label %originalBB292

originalBB296alteredBB:                           ; preds = %originalBB296, %868
  %2615 = load i8**, i8*** %13, align 8, !dbg !316
  %2616 = getelementptr inbounds i8*, i8** %2615, i64 0, !dbg !316
  %2617 = load i8*, i8** %2616, align 8, !dbg !316
  %2618 = load i8, i8* %2617, align 1, !dbg !317
  %2619 = sext i8 %2618 to i32, !dbg !317
  %2620 = icmp eq i32 %2619, 45, !dbg !318
  br label %originalBB296

originalBB300alteredBB:                           ; preds = %originalBB300, %891
  br label %originalBB300

originalBB304alteredBB:                           ; preds = %originalBB304, %909
  %2621 = load i8**, i8*** %13, align 8, !dbg !323
  %2622 = getelementptr inbounds i8*, i8** %2621, i64 0, !dbg !323
  %2623 = load i8*, i8** %2622, align 8, !dbg !323
  %2624 = getelementptr inbounds i8, i8* %2623, i64 1, !dbg !324
  store i8* %2624, i8** %18, align 8, !dbg !322
  call void @llvm.dbg.declare(metadata !4, metadata !551, metadata !DIExpression()), !dbg !326
  store i64 0, i64* %19, align 8, !dbg !327
  br label %originalBB304

originalBB308alteredBB:                           ; preds = %originalBB308, %930
  %2625 = load i8*, i8** %18, align 8, !dbg !330
  %2626 = load i64, i64* %19, align 8, !dbg !332
  %2627 = getelementptr inbounds i8, i8* %2625, i64 %2626, !dbg !330
  %2628 = load i8, i8* %2627, align 1, !dbg !330
  %2629 = icmp ne i8 %2628, 0, !dbg !333
  br label %originalBB308

originalBB312alteredBB:                           ; preds = %originalBB312, %952
  %2630 = load i8*, i8** %18, align 8, !dbg !334
  %2631 = load i64, i64* %19, align 8, !dbg !335
  %2632 = getelementptr inbounds i8, i8* %2630, i64 %2631, !dbg !334
  %2633 = load i8, i8* %2632, align 1, !dbg !334
  %2634 = sext i8 %2633 to i32, !dbg !334
  br label %originalBB312

originalBB316alteredBB:                           ; preds = %originalBB316, %974
  br label %originalBB316

originalBB320alteredBB:                           ; preds = %originalBB320, %991
  br label %originalBB320

originalBB324alteredBB:                           ; preds = %originalBB324, %1008
  br label %originalBB324

originalBB328alteredBB:                           ; preds = %originalBB328, %1025
  %2635 = load i64, i64* %19, align 8, !dbg !341
  %_329 = shl i64 %2635, 1
  %_330 = sub i64 0, %2635
  %gen331 = add i64 %_330, 1
  %_332 = sub i64 0, %2635
  %gen333 = add i64 %_332, 1
  %_334 = sub i64 0, %2635
  %gen335 = add i64 %_334, 1
  %_336 = shl i64 %2635, 1
  %_337 = shl i64 %2635, 1
  %2636 = add i64 %2635, 1, !dbg !341
  store i64 %2636, i64* %19, align 8, !dbg !341
  br label %originalBB328

originalBB341alteredBB:                           ; preds = %originalBB341, %1044
  %2637 = load i64, i64* %19, align 8, !dbg !345
  br label %originalBB341

originalBB345alteredBB:                           ; preds = %originalBB345, %1062
  %collatzVar3alteredBB = alloca i32
  br label %originalBB345

originalBB349alteredBB:                           ; preds = %originalBB349, %1079
  %2638 = load i32, i32* @inVal0
  %2639 = icmp sgt i32 %2638, 1
  br label %originalBB349

originalBB353alteredBB:                           ; preds = %originalBB353, %1098
  store i32 43, i32* %collatzVar3
  br label %originalBB353

originalBB357alteredBB:                           ; preds = %originalBB357, %1115
  %2640 = load i8**, i8*** @inVal1
  %2641 = getelementptr inbounds i8*, i8** %2640, i64 1
  %2642 = load i8*, i8** %2641
  %2643 = trunc i64 0 to i32
  %controle4alteredBB = call i32 @controle(i8* %2642, i32 %2643)
  store i32 %controle4alteredBB, i32* %collatzVar3
  br label %originalBB357

originalBB361alteredBB:                           ; preds = %originalBB361, %1136
  %2644 = load i32, i32* %collatzVar3
  %2645 = icmp sgt i32 %2644, 1
  br label %originalBB361

originalBB365alteredBB:                           ; preds = %originalBB365, %1155
  %2646 = load i32, i32* %collatzVar3
  %_366 = shl i32 %2646, 2
  %_367 = shl i32 %2646, 2
  %_368 = sub i32 0, %2646
  %gen369 = add i32 %_368, 2
  %_370 = sub i32 %2646, 2
  %gen371 = mul i32 %_370, 2
  %2647 = srem i32 %2646, 2
  %2648 = icmp eq i32 %2647, 0
  br label %originalBB365

originalBB375alteredBB:                           ; preds = %originalBB375, %1175
  %2649 = load i32, i32* %collatzVar3
  %_376 = sub i32 %2649, 2
  %gen377 = mul i32 %_376, 2
  %_378 = sub i32 0, %2649
  %gen379 = add i32 %_378, 2
  %_380 = shl i32 %2649, 2
  %_381 = sub i32 0, %2649
  %gen382 = add i32 %_381, 2
  %2650 = sdiv i32 %2649, 2
  store i32 %2650, i32* %collatzVar3
  br label %originalBB375

originalBB386alteredBB:                           ; preds = %originalBB386, %1194
  %2651 = load i32, i32* %collatzVar3
  %_387 = shl i32 %2651, 3
  %2652 = mul i32 %2651, 3
  %_388 = shl i32 %2652, 1
  %_389 = sub i32 %2652, 1
  %gen390 = mul i32 %_389, 1
  %_391 = sub i32 %2652, 1
  %gen392 = mul i32 %_391, 1
  %_393 = sub i32 0, %2652
  %gen394 = add i32 %_393, 1
  %_395 = sub i32 %2652, 1
  %gen396 = mul i32 %_395, 1
  %_397 = shl i32 %2652, 1
  %2653 = add i32 %2652, 1
  store i32 %2653, i32* %collatzVar3
  br label %originalBB386

originalBB401alteredBB:                           ; preds = %originalBB401, %1214
  %2654 = load i32, i32* %collatzVar3
  %2655 = sext i32 %2654 to i64
  %2656 = sext i32 -2 to i64
  %_402 = sub i64 %1053, %2655
  %gen403 = mul i64 %_402, %2655
  %2657 = sub i64 %1053, %2655
  %2658 = icmp sgt i64 %2657, %2656
  br label %originalBB401

originalBB407alteredBB:                           ; preds = %originalBB407, %1236
  %2659 = load i32, i32* %collatzVar3
  %2660 = sext i32 %2659 to i64
  %2661 = sext i32 2 to i64
  %_408 = shl i64 %1053, %2660
  %_409 = sub i64 0, %1053
  %gen410 = add i64 %_409, %2660
  %_411 = sub i64 %1053, %2660
  %gen412 = mul i64 %_411, %2660
  %_413 = sub i64 %1053, %2660
  %gen414 = mul i64 %_413, %2660
  %_415 = sub i64 0, %1053
  %gen416 = add i64 %_415, %2660
  %_417 = sub i64 %1053, %2660
  %gen418 = mul i64 %_417, %2660
  %_419 = sub i64 0, %1053
  %gen420 = add i64 %_419, %2660
  %2662 = add i64 %1053, %2660
  %2663 = icmp slt i64 %2662, %2661
  br label %originalBB407

originalBB424alteredBB:                           ; preds = %originalBB424, %1258
  br label %originalBB424

originalBB428alteredBB:                           ; preds = %originalBB428, %1275
  br label %originalBB428

originalBB432alteredBB:                           ; preds = %originalBB432, %1292
  %2664 = load i8*, i8** %18, align 8, !dbg !350
  %2665 = load i8, i8* %2664, align 1, !dbg !351
  %2666 = icmp ne i8 %2665, 0, !dbg !349
  br label %originalBB432

originalBB436alteredBB:                           ; preds = %originalBB436, %1312
  %2667 = load i8*, i8** %18, align 8, !dbg !352
  %2668 = getelementptr inbounds i8, i8* %2667, i32 1, !dbg !352
  store i8* %2668, i8** %18, align 8, !dbg !352
  %2669 = load i8, i8* %2667, align 1, !dbg !353
  %2670 = sext i8 %2669 to i32, !dbg !353
  br label %originalBB436

originalBB440alteredBB:                           ; preds = %originalBB440, %1333
  store i8 1, i8* %17, align 1, !dbg !355
  br label %originalBB440

originalBB444alteredBB:                           ; preds = %originalBB444, %1350
  store i8 0, i8* %17, align 1, !dbg !358
  br label %originalBB444

originalBB448alteredBB:                           ; preds = %originalBB448, %1367
  store i8 0, i8* %14, align 1, !dbg !360
  br label %originalBB448

originalBB452alteredBB:                           ; preds = %originalBB452, %1384
  br label %originalBB452

originalBB456alteredBB:                           ; preds = %originalBB456, %1401
  %2671 = load i32, i32* %12, align 4, !dbg !364
  %_457 = shl i32 %2671, -1
  %_458 = shl i32 %2671, -1
  %_459 = shl i32 %2671, -1
  %_460 = sub i32 0, %2671
  %gen461 = add i32 %_460, -1
  %_462 = sub i32 0, %2671
  %gen463 = add i32 %_462, -1
  %2672 = add nsw i32 %2671, -1, !dbg !364
  store i32 %2672, i32* %12, align 4, !dbg !364
  %2673 = load i8**, i8*** %13, align 8, !dbg !365
  %2674 = getelementptr inbounds i8*, i8** %2673, i32 1, !dbg !365
  store i8** %2674, i8*** %13, align 8, !dbg !365
  br label %originalBB456

originalBB467alteredBB:                           ; preds = %originalBB467, %1422
  br label %originalBB467

originalBB471alteredBB:                           ; preds = %originalBB471, %1439
  br label %originalBB471

originalBB475alteredBB:                           ; preds = %originalBB475, %1456
  %2675 = load i8, i8* %17, align 1, !dbg !370
  %2676 = trunc i8 %2675 to i1, !dbg !370
  br label %originalBB475

originalBB479alteredBB:                           ; preds = %originalBB479, %1475
  %2677 = load i8, i8* %15, align 1, !dbg !373
  %2678 = trunc i8 %2677 to i1, !dbg !373
  br label %originalBB479

originalBB483alteredBB:                           ; preds = %originalBB483, %1494
  br label %originalBB483

originalBB487alteredBB:                           ; preds = %originalBB487, %1511
  %2679 = load i32, i32* %12, align 4, !dbg !377
  %2680 = icmp sgt i32 %2679, 0, !dbg !378
  br label %originalBB487

originalBB491alteredBB:                           ; preds = %originalBB491, %1530
  %2681 = load i8**, i8*** %13, align 8, !dbg !382
  %2682 = getelementptr inbounds i8*, i8** %2681, i64 0, !dbg !382
  %2683 = load i8*, i8** %2682, align 8, !dbg !382
  store i8* %2683, i8** %20, align 8, !dbg !381
  call void @llvm.dbg.declare(metadata !4, metadata !556, metadata !DIExpression()), !dbg !384
  br label %originalBB491

originalBB495alteredBB:                           ; preds = %originalBB495, %1550
  %2684 = load i8*, i8** %20, align 8, !dbg !386
  %2685 = getelementptr inbounds i8, i8* %2684, i32 1, !dbg !386
  store i8* %2685, i8** %20, align 8, !dbg !386
  %2686 = load i8, i8* %2684, align 1, !dbg !387
  store i8 %2686, i8* %21, align 1, !dbg !388
  %2687 = icmp ne i8 %2686, 0, !dbg !385
  br label %originalBB495

originalBB499alteredBB:                           ; preds = %originalBB499, %1571
  %2688 = load i8, i8* %21, align 1, !dbg !389
  %2689 = zext i8 %2688 to i32, !dbg !389
  %2690 = icmp eq i32 %2689, 92, !dbg !392
  br label %originalBB499

originalBB503alteredBB:                           ; preds = %originalBB503, %1591
  %2691 = load i8*, i8** %20, align 8, !dbg !394
  %2692 = load i8, i8* %2691, align 1, !dbg !395
  %2693 = sext i8 %2692 to i32, !dbg !395
  %2694 = icmp ne i32 %2693, 0, !dbg !395
  br label %originalBB503

originalBB507alteredBB:                           ; preds = %originalBB507, %1612
  %2695 = load i8*, i8** %20, align 8, !dbg !397
  %2696 = getelementptr inbounds i8, i8* %2695, i32 1, !dbg !397
  store i8* %2696, i8** %20, align 8, !dbg !397
  %2697 = load i8, i8* %2695, align 1, !dbg !399
  store i8 %2697, i8* %21, align 1, !dbg !400
  %2698 = zext i8 %2697 to i32, !dbg !401
  br label %originalBB507

originalBB511alteredBB:                           ; preds = %originalBB511, %1633
  store i8 7, i8* %21, align 1, !dbg !403
  br label %originalBB511

originalBB515alteredBB:                           ; preds = %originalBB515, %1650
  store i8 8, i8* %21, align 1, !dbg !406
  br label %originalBB515

originalBB519alteredBB:                           ; preds = %originalBB519, %1667
  store i32 0, i32* %11, align 4, !dbg !408
  br label %originalBB519

originalBB523alteredBB:                           ; preds = %originalBB523, %1684
  store i8 27, i8* %21, align 1, !dbg !409
  br label %originalBB523

originalBB527alteredBB:                           ; preds = %originalBB527, %1701
  store i8 12, i8* %21, align 1, !dbg !411
  br label %originalBB527

originalBB531alteredBB:                           ; preds = %originalBB531, %1718
  store i8 10, i8* %21, align 1, !dbg !413
  br label %originalBB531

originalBB535alteredBB:                           ; preds = %originalBB535, %1735
  store i8 13, i8* %21, align 1, !dbg !415
  br label %originalBB535

originalBB539alteredBB:                           ; preds = %originalBB539, %1752
  store i8 9, i8* %21, align 1, !dbg !417
  br label %originalBB539

originalBB543alteredBB:                           ; preds = %originalBB543, %1769
  store i8 11, i8* %21, align 1, !dbg !419
  br label %originalBB543

originalBB547alteredBB:                           ; preds = %originalBB547, %1786
  %2699 = load i8*, i8** %20, align 8, !dbg !424
  %2700 = load i8, i8* %2699, align 1, !dbg !425
  store i8 %2700, i8* %22, align 1, !dbg !423
  %2701 = call i16** @__ctype_b_loc() #15, !dbg !426
  %2702 = load i16*, i16** %2701, align 8, !dbg !426
  %2703 = load i8, i8* %22, align 1, !dbg !426
  %2704 = zext i8 %2703 to i32, !dbg !426
  %2705 = sext i32 %2704 to i64, !dbg !426
  %2706 = getelementptr inbounds i16, i16* %2702, i64 %2705, !dbg !426
  %2707 = load i16, i16* %2706, align 2, !dbg !426
  %2708 = zext i16 %2707 to i32, !dbg !426
  %_548 = sub i32 0, %2708
  %gen549 = add i32 %_548, 4096
  %_550 = sub i32 0, %2708
  %gen551 = add i32 %_550, 4096
  %_552 = sub i32 0, %2708
  %gen553 = add i32 %_552, 4096
  %_554 = sub i32 0, %2708
  %gen555 = add i32 %_554, 4096
  %_556 = shl i32 %2708, 4096
  %_557 = shl i32 %2708, 4096
  %_558 = sub i32 0, %2708
  %gen559 = add i32 %_558, 4096
  %2709 = and i32 %2708, 4096, !dbg !426
  %2710 = icmp ne i32 %2709, 0, !dbg !426
  br label %originalBB547

originalBB563alteredBB:                           ; preds = %originalBB563, %1815
  br label %originalBB563

originalBB567alteredBB:                           ; preds = %originalBB567, %1832
  %2711 = load i8*, i8** %20, align 8, !dbg !430
  %2712 = getelementptr inbounds i8, i8* %2711, i32 1, !dbg !430
  store i8* %2712, i8** %20, align 8, !dbg !430
  %2713 = load i8, i8* %22, align 1, !dbg !431
  %2714 = call i32 @hextobin(i8 zeroext %2713), !dbg !432
  %2715 = trunc i32 %2714 to i8, !dbg !432
  store i8 %2715, i8* %21, align 1, !dbg !433
  %2716 = load i8*, i8** %20, align 8, !dbg !434
  %2717 = load i8, i8* %2716, align 1, !dbg !435
  store i8 %2717, i8* %22, align 1, !dbg !436
  %2718 = call i16** @__ctype_b_loc() #15, !dbg !437
  %2719 = load i16*, i16** %2718, align 8, !dbg !437
  %2720 = load i8, i8* %22, align 1, !dbg !437
  %2721 = zext i8 %2720 to i32, !dbg !437
  %2722 = sext i32 %2721 to i64, !dbg !437
  %2723 = getelementptr inbounds i16, i16* %2719, i64 %2722, !dbg !437
  %2724 = load i16, i16* %2723, align 2, !dbg !437
  %2725 = zext i16 %2724 to i32, !dbg !437
  %_568 = sub i32 %2725, 4096
  %gen569 = mul i32 %_568, 4096
  %_570 = sub i32 %2725, 4096
  %gen571 = mul i32 %_570, 4096
  %_572 = sub i32 %2725, 4096
  %gen573 = mul i32 %_572, 4096
  %_574 = sub i32 %2725, 4096
  %gen575 = mul i32 %_574, 4096
  %_576 = shl i32 %2725, 4096
  %2726 = and i32 %2725, 4096, !dbg !437
  %2727 = icmp ne i32 %2726, 0, !dbg !437
  br label %originalBB567

originalBB580alteredBB:                           ; preds = %originalBB580, %1866
  %2728 = load i8*, i8** %20, align 8, !dbg !440
  %2729 = getelementptr inbounds i8, i8* %2728, i32 1, !dbg !440
  store i8* %2729, i8** %20, align 8, !dbg !440
  %2730 = load i8, i8* %21, align 1, !dbg !442
  %2731 = zext i8 %2730 to i32, !dbg !442
  %_581 = sub i32 %2731, 16
  %gen582 = mul i32 %_581, 16
  %2732 = mul nsw i32 %2731, 16, !dbg !443
  %2733 = load i8, i8* %22, align 1, !dbg !444
  %2734 = call i32 @hextobin(i8 zeroext %2733), !dbg !445
  %2735 = add nsw i32 %2732, %2734, !dbg !446
  %2736 = trunc i32 %2735 to i8, !dbg !442
  store i8 %2736, i8* %21, align 1, !dbg !447
  br label %originalBB580

originalBB586alteredBB:                           ; preds = %originalBB586, %1892
  br label %originalBB586

originalBB590alteredBB:                           ; preds = %originalBB590, %1909
  store i8 0, i8* %21, align 1, !dbg !450
  %2737 = load i8*, i8** %20, align 8, !dbg !451
  %2738 = load i8, i8* %2737, align 1, !dbg !453
  %2739 = sext i8 %2738 to i32, !dbg !453
  %2740 = icmp sle i32 48, %2739, !dbg !454
  br label %originalBB590

originalBB594alteredBB:                           ; preds = %originalBB594, %1930
  %2741 = load i8*, i8** %20, align 8, !dbg !456
  %2742 = load i8, i8* %2741, align 1, !dbg !457
  %2743 = sext i8 %2742 to i32, !dbg !457
  %2744 = icmp sle i32 %2743, 55, !dbg !458
  br label %originalBB594

originalBB598alteredBB:                           ; preds = %originalBB598, %1951
  br label %originalBB598

originalBB602alteredBB:                           ; preds = %originalBB602, %1968
  %2745 = load i8*, i8** %20, align 8, !dbg !461
  %2746 = getelementptr inbounds i8, i8* %2745, i32 1, !dbg !461
  store i8* %2746, i8** %20, align 8, !dbg !461
  %2747 = load i8, i8* %2745, align 1, !dbg !462
  store i8 %2747, i8* %21, align 1, !dbg !463
  br label %originalBB602

originalBB606alteredBB:                           ; preds = %originalBB606, %1988
  %2748 = load i8, i8* %21, align 1, !dbg !465
  %2749 = zext i8 %2748 to i32, !dbg !465
  %_607 = sub i32 0, %2749
  %gen608 = add i32 %_607, 48
  %_609 = sub i32 %2749, 48
  %gen610 = mul i32 %_609, 48
  %_611 = shl i32 %2749, 48
  %2750 = sub nsw i32 %2749, 48, !dbg !465
  %2751 = trunc i32 %2750 to i8, !dbg !465
  store i8 %2751, i8* %21, align 1, !dbg !465
  %2752 = load i8*, i8** %20, align 8, !dbg !466
  %2753 = load i8, i8* %2752, align 1, !dbg !468
  %2754 = sext i8 %2753 to i32, !dbg !468
  %2755 = icmp sle i32 48, %2754, !dbg !469
  br label %originalBB606

originalBB615alteredBB:                           ; preds = %originalBB615, %2013
  %2756 = load i8*, i8** %20, align 8, !dbg !471
  %2757 = load i8, i8* %2756, align 1, !dbg !472
  %2758 = sext i8 %2757 to i32, !dbg !472
  %2759 = icmp sle i32 %2758, 55, !dbg !473
  br label %originalBB615

originalBB619alteredBB:                           ; preds = %originalBB619, %2034
  %2760 = load i8, i8* %21, align 1, !dbg !475
  %2761 = zext i8 %2760 to i32, !dbg !475
  %_620 = shl i32 %2761, 8
  %_621 = shl i32 %2761, 8
  %_622 = shl i32 %2761, 8
  %2762 = mul nsw i32 %2761, 8, !dbg !476
  %2763 = load i8*, i8** %20, align 8, !dbg !477
  %2764 = getelementptr inbounds i8, i8* %2763, i32 1, !dbg !477
  store i8* %2764, i8** %20, align 8, !dbg !477
  %2765 = load i8, i8* %2763, align 1, !dbg !478
  %2766 = sext i8 %2765 to i32, !dbg !478
  %_623 = sub i32 %2766, 48
  %gen624 = mul i32 %_623, 48
  %_625 = shl i32 %2766, 48
  %_626 = shl i32 %2766, 48
  %_627 = sub i32 0, %2766
  %gen628 = add i32 %_627, 48
  %_629 = shl i32 %2766, 48
  %2767 = sub nsw i32 %2766, 48, !dbg !479
  %_630 = sub i32 %2762, %2767
  %gen631 = mul i32 %_630, %2767
  %_632 = sub i32 0, %2762
  %gen633 = add i32 %_632, %2767
  %_634 = sub i32 0, %2762
  %gen635 = add i32 %_634, %2767
  %_636 = shl i32 %2762, %2767
  %2768 = add nsw i32 %2762, %2767, !dbg !480
  %2769 = trunc i32 %2768 to i8, !dbg !475
  store i8 %2769, i8* %21, align 1, !dbg !481
  br label %originalBB619

originalBB640alteredBB:                           ; preds = %originalBB640, %2061
  %2770 = load i8*, i8** %20, align 8, !dbg !483
  %2771 = load i8, i8* %2770, align 1, !dbg !485
  %2772 = sext i8 %2771 to i32, !dbg !485
  %2773 = icmp sle i32 48, %2772, !dbg !486
  br label %originalBB640

originalBB644alteredBB:                           ; preds = %originalBB644, %2082
  %2774 = load i8*, i8** %20, align 8, !dbg !488
  %2775 = load i8, i8* %2774, align 1, !dbg !489
  %2776 = sext i8 %2775 to i32, !dbg !489
  %2777 = icmp sle i32 %2776, 55, !dbg !490
  br label %originalBB644

originalBB648alteredBB:                           ; preds = %originalBB648, %2103
  %2778 = load i8, i8* %21, align 1, !dbg !492
  %2779 = zext i8 %2778 to i32, !dbg !492
  %_649 = shl i32 %2779, 8
  %_650 = sub i32 %2779, 8
  %gen651 = mul i32 %_650, 8
  %_652 = sub i32 0, %2779
  %gen653 = add i32 %_652, 8
  %_654 = sub i32 %2779, 8
  %gen655 = mul i32 %_654, 8
  %_656 = shl i32 %2779, 8
  %_657 = shl i32 %2779, 8
  %2780 = mul nsw i32 %2779, 8, !dbg !493
  %2781 = load i8*, i8** %20, align 8, !dbg !494
  %2782 = getelementptr inbounds i8, i8* %2781, i32 1, !dbg !494
  store i8* %2782, i8** %20, align 8, !dbg !494
  %2783 = load i8, i8* %2781, align 1, !dbg !495
  %2784 = sext i8 %2783 to i32, !dbg !495
  %_658 = sub i32 0, %2784
  %gen659 = add i32 %_658, 48
  %_660 = shl i32 %2784, 48
  %_661 = shl i32 %2784, 48
  %_662 = sub i32 0, %2784
  %gen663 = add i32 %_662, 48
  %2785 = sub nsw i32 %2784, 48, !dbg !496
  %_664 = shl i32 %2780, %2785
  %_665 = shl i32 %2780, %2785
  %2786 = add nsw i32 %2780, %2785, !dbg !497
  %2787 = trunc i32 %2786 to i8, !dbg !492
  store i8 %2787, i8* %21, align 1, !dbg !498
  br label %originalBB648

originalBB669alteredBB:                           ; preds = %originalBB669, %2130
  br label %originalBB669

originalBB673alteredBB:                           ; preds = %originalBB673, %2147
  br label %originalBB673

originalBB677alteredBB:                           ; preds = %originalBB677, %2164
  br label %originalBB677

originalBB681alteredBB:                           ; preds = %originalBB681, %2181
  %2788 = call i32 @putchar_unlocked(i32 92), !dbg !504
  br label %originalBB681

originalBB685alteredBB:                           ; preds = %originalBB685, %2199
  br label %originalBB685

originalBB689alteredBB:                           ; preds = %originalBB689, %2216
  %2789 = load i8, i8* %21, align 1, !dbg !507
  %2790 = zext i8 %2789 to i32, !dbg !507
  %2791 = call i32 @putchar_unlocked(i32 %2790), !dbg !507
  br label %originalBB689

originalBB693alteredBB:                           ; preds = %originalBB693, %2236
  %2792 = load i32, i32* %12, align 4, !dbg !510
  %_694 = shl i32 %2792, -1
  %2793 = add nsw i32 %2792, -1, !dbg !510
  store i32 %2793, i32* %12, align 4, !dbg !510
  %2794 = load i8**, i8*** %13, align 8, !dbg !511
  %2795 = getelementptr inbounds i8*, i8** %2794, i32 1, !dbg !511
  store i8** %2795, i8*** %13, align 8, !dbg !511
  %2796 = load i32, i32* %12, align 4, !dbg !512
  %2797 = icmp sgt i32 %2796, 0, !dbg !514
  br label %originalBB693

originalBB698alteredBB:                           ; preds = %originalBB698, %2259
  %2798 = call i32 @putchar_unlocked(i32 32), !dbg !516
  br label %originalBB698

originalBB702alteredBB:                           ; preds = %originalBB702, %2277
  br label %originalBB702

originalBB706alteredBB:                           ; preds = %originalBB706, %2294
  br label %originalBB706

originalBB710alteredBB:                           ; preds = %originalBB710, %2311
  br label %originalBB710

originalBB714alteredBB:                           ; preds = %originalBB714, %2328
  %2799 = load i32, i32* %12, align 4, !dbg !522
  %2800 = icmp sgt i32 %2799, 0, !dbg !523
  br label %originalBB714

originalBB718alteredBB:                           ; preds = %originalBB718, %2347
  %2801 = load i8**, i8*** %13, align 8, !dbg !524
  %2802 = getelementptr inbounds i8*, i8** %2801, i64 0, !dbg !524
  %2803 = load i8*, i8** %2802, align 8, !dbg !524
  %2804 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !524
  %2805 = call i32 @fputs_unlocked(i8* %2803, %struct._IO_FILE* %2804), !dbg !524
  %2806 = load i32, i32* %12, align 4, !dbg !526
  %_719 = sub i32 0, %2806
  %gen720 = add i32 %_719, -1
  %_721 = shl i32 %2806, -1
  %_722 = shl i32 %2806, -1
  %_723 = sub i32 %2806, -1
  %gen724 = mul i32 %_723, -1
  %_725 = shl i32 %2806, -1
  %_726 = sub i32 0, %2806
  %gen727 = add i32 %_726, -1
  %_728 = sub i32 %2806, -1
  %gen729 = mul i32 %_728, -1
  %2807 = add nsw i32 %2806, -1, !dbg !526
  store i32 %2807, i32* %12, align 4, !dbg !526
  %2808 = load i8**, i8*** %13, align 8, !dbg !527
  %2809 = getelementptr inbounds i8*, i8** %2808, i32 1, !dbg !527
  store i8** %2809, i8*** %13, align 8, !dbg !527
  %2810 = load i32, i32* %12, align 4, !dbg !528
  %2811 = icmp sgt i32 %2810, 0, !dbg !530
  br label %originalBB718

originalBB733alteredBB:                           ; preds = %originalBB733, %2375
  %2812 = call i32 @putchar_unlocked(i32 32), !dbg !532
  br label %originalBB733

originalBB737alteredBB:                           ; preds = %originalBB737, %2393
  br label %originalBB737

originalBB741alteredBB:                           ; preds = %originalBB741, %2410
  br label %originalBB741

originalBB745alteredBB:                           ; preds = %originalBB745, %2427
  %2813 = load i8, i8* %14, align 1, !dbg !535
  %2814 = trunc i8 %2813 to i1, !dbg !535
  br label %originalBB745

originalBB749alteredBB:                           ; preds = %originalBB749, %2446
  %2815 = call i32 @putchar_unlocked(i32 10), !dbg !538
  br label %originalBB749

originalBB753alteredBB:                           ; preds = %originalBB753, %2464
  store i32 0, i32* %11, align 4, !dbg !539
  br label %originalBB753

originalBB757alteredBB:                           ; preds = %originalBB757, %2481
  %2816 = load i32, i32* %11, align 4, !dbg !540
  br label %originalBB757
}

; Function Attrs: nounwind
declare dso_local i8* @getenv(i8*) #3

; Function Attrs: nounwind
declare dso_local i8* @bindtextdomain(i8*, i8*) #3

; Function Attrs: nounwind
declare dso_local i8* @textdomain(i8*) #3

; Function Attrs: nounwind
declare dso_local i32 @atexit(void ()*) #3

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #8

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @hextobin(i8 zeroext) #5 !dbg !562 {
  %2 = load i32, i32* @x.5
  %3 = load i32, i32* @y.6
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  store i8 %0, i8* %11, align 1
  call void @llvm.dbg.declare(metadata i8* %11, metadata !565, metadata !DIExpression()), !dbg !566
  %12 = load i8, i8* %11, align 1, !dbg !567
  %13 = zext i8 %12 to i32, !dbg !567
  %14 = load i32, i32* @x.5
  %15 = load i32, i32* @y.6
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %13, label %22 [
    i32 97, label %42
    i32 65, label %42
    i32 98, label %59
    i32 66, label %59
    i32 99, label %76
    i32 67, label %76
    i32 100, label %93
    i32 68, label %93
    i32 101, label %110
    i32 69, label %110
    i32 102, label %127
    i32 70, label %127
  ], !dbg !568

22:                                               ; preds = %originalBBpart2
  %23 = load i32, i32* @x.5
  %24 = load i32, i32* @y.6
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load i8, i8* %11, align 1, !dbg !569
  %32 = zext i8 %31 to i32, !dbg !569
  %33 = sub nsw i32 %32, 48, !dbg !571
  store i32 %33, i32* %10, align 4, !dbg !572
  %34 = load i32, i32* @x.5
  %35 = load i32, i32* @y.6
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %144, !dbg !572

42:                                               ; preds = %originalBBpart2, %originalBBpart2
  %43 = load i32, i32* @x.5
  %44 = load i32, i32* @y.6
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  store i32 10, i32* %10, align 4, !dbg !573
  %51 = load i32, i32* @x.5
  %52 = load i32, i32* @y.6
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %144, !dbg !573

59:                                               ; preds = %originalBBpart2, %originalBBpart2
  %60 = load i32, i32* @x.5
  %61 = load i32, i32* @y.6
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %59, %originalBB10alteredBB
  store i32 11, i32* %10, align 4, !dbg !574
  %68 = load i32, i32* @x.5
  %69 = load i32, i32* @y.6
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %144, !dbg !574

76:                                               ; preds = %originalBBpart2, %originalBBpart2
  %77 = load i32, i32* @x.5
  %78 = load i32, i32* @y.6
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %76, %originalBB14alteredBB
  store i32 12, i32* %10, align 4, !dbg !575
  %85 = load i32, i32* @x.5
  %86 = load i32, i32* @y.6
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %144, !dbg !575

93:                                               ; preds = %originalBBpart2, %originalBBpart2
  %94 = load i32, i32* @x.5
  %95 = load i32, i32* @y.6
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %93, %originalBB18alteredBB
  store i32 13, i32* %10, align 4, !dbg !576
  %102 = load i32, i32* @x.5
  %103 = load i32, i32* @y.6
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %144, !dbg !576

110:                                              ; preds = %originalBBpart2, %originalBBpart2
  %111 = load i32, i32* @x.5
  %112 = load i32, i32* @y.6
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %110, %originalBB22alteredBB
  store i32 14, i32* %10, align 4, !dbg !577
  %119 = load i32, i32* @x.5
  %120 = load i32, i32* @y.6
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %144, !dbg !577

127:                                              ; preds = %originalBBpart2, %originalBBpart2
  %128 = load i32, i32* @x.5
  %129 = load i32, i32* @y.6
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %127, %originalBB26alteredBB
  store i32 15, i32* %10, align 4, !dbg !578
  %136 = load i32, i32* @x.5
  %137 = load i32, i32* @y.6
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %144, !dbg !578

144:                                              ; preds = %originalBBpart228, %originalBBpart224, %originalBBpart220, %originalBBpart216, %originalBBpart212, %originalBBpart28, %originalBBpart24
  %145 = load i32, i32* @x.5
  %146 = load i32, i32* @y.6
  %147 = sub i32 %145, 1
  %148 = mul i32 %145, %147
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %150, %151
  br i1 %152, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %144, %originalBB30alteredBB
  %153 = load i32, i32* %10, align 4, !dbg !579
  %154 = load i32, i32* @x.5
  %155 = load i32, i32* @y.6
  %156 = sub i32 %154, 1
  %157 = mul i32 %154, %156
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %159, %160
  br i1 %161, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  ret i32 %153, !dbg !579

originalBBalteredBB:                              ; preds = %originalBB, %1
  %162 = alloca i32, align 4
  %163 = alloca i8, align 1
  store i8 %0, i8* %163, align 1
  call void @llvm.dbg.declare(metadata i8* %163, metadata !580, metadata !DIExpression()), !dbg !566
  %164 = load i8, i8* %163, align 1, !dbg !567
  %165 = zext i8 %164 to i32, !dbg !567
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %166 = load i8, i8* %11, align 1, !dbg !569
  %167 = zext i8 %166 to i32, !dbg !569
  %_ = sub i32 0, %167
  %gen = add i32 %_, 48
  %168 = sub nsw i32 %167, 48, !dbg !571
  store i32 %168, i32* %10, align 4, !dbg !572
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  store i32 10, i32* %10, align 4, !dbg !573
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %59
  store i32 11, i32* %10, align 4, !dbg !574
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %76
  store i32 12, i32* %10, align 4, !dbg !575
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %93
  store i32 13, i32* %10, align 4, !dbg !576
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %110
  store i32 14, i32* %10, align 4, !dbg !577
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %127
  store i32 15, i32* %10, align 4, !dbg !578
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %144
  %169 = load i32, i32* %10, align 4, !dbg !579
  br label %originalBB30
}

declare dso_local i32 @putchar_unlocked(i32) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @close_stdout() #5 !dbg !583 {
  %1 = load i32, i32* @x.7
  %2 = load i32, i32* @y.8
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !586
  %11 = call i32 @close_stream(%struct._IO_FILE* %10), !dbg !588
  %12 = icmp ne i32 %11, 0, !dbg !589
  %13 = load i32, i32* @x.7
  %14 = load i32, i32* @y.8
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %140, !dbg !590

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.7
  %23 = load i32, i32* @y.8
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i8, i8* @ignore_EPIPE, align 1, !dbg !591
  %31 = trunc i8 %30 to i1, !dbg !591
  %32 = load i32, i32* @x.7
  %33 = load i32, i32* @y.8
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %31, label %40, label %60, !dbg !592

40:                                               ; preds = %originalBBpart24
  %41 = load i32, i32* @x.7
  %42 = load i32, i32* @y.8
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %40, %originalBB6alteredBB
  %49 = call i32* @__errno_location() #15, !dbg !593
  %50 = load i32, i32* %49, align 4, !dbg !593
  %51 = icmp eq i32 %50, 32, !dbg !594
  %52 = load i32, i32* @x.7
  %53 = load i32, i32* @y.8
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %51, label %140, label %60, !dbg !595

60:                                               ; preds = %originalBBpart28, %originalBBpart24
  call void @llvm.dbg.declare(metadata i8** %9, metadata !596, metadata !DIExpression()), !dbg !598
  %61 = load i32, i32* @x.7
  %62 = load i32, i32* @y.8
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  %69 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.40, i64 0, i64 0)) #10, !dbg !599
  store i8* %69, i8** %9, align 8, !dbg !598
  %70 = load i8*, i8** @file_name, align 8, !dbg !600
  %71 = icmp ne i8* %70, null, !dbg !600
  %72 = load i32, i32* @x.7
  %73 = load i32, i32* @y.8
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %71, label %80, label %102, !dbg !602

80:                                               ; preds = %originalBBpart212
  %81 = load i32, i32* @x.7
  %82 = load i32, i32* @y.8
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %80, %originalBB14alteredBB
  %89 = call i32* @__errno_location() #15, !dbg !603
  %90 = load i32, i32* %89, align 4, !dbg !603
  %91 = load i8*, i8** @file_name, align 8, !dbg !604
  %92 = call i8* @quotearg_colon(i8* %91), !dbg !605
  %93 = load i8*, i8** %9, align 8, !dbg !606
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %90, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.41, i64 0, i64 0), i8* %92, i8* %93), !dbg !607
  %94 = load i32, i32* @x.7
  %95 = load i32, i32* @y.8
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %122, !dbg !607

102:                                              ; preds = %originalBBpart212
  %103 = load i32, i32* @x.7
  %104 = load i32, i32* @y.8
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %102, %originalBB18alteredBB
  %111 = call i32* @__errno_location() #15, !dbg !608
  %112 = load i32, i32* %111, align 4, !dbg !608
  %113 = load i8*, i8** %9, align 8, !dbg !609
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %112, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.42, i64 0, i64 0), i8* %113), !dbg !610
  %114 = load i32, i32* @x.7
  %115 = load i32, i32* @y.8
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %122

122:                                              ; preds = %originalBBpart220, %originalBBpart216
  %123 = load i32, i32* @x.7
  %124 = load i32, i32* @y.8
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %122, %originalBB22alteredBB
  %131 = load volatile i32, i32* @exit_failure, align 4, !dbg !611
  call void @_exit(i32 %131) #14, !dbg !612
  %132 = load i32, i32* @x.7
  %133 = load i32, i32* @y.8
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  unreachable, !dbg !612

140:                                              ; preds = %originalBBpart28, %originalBBpart2
  %141 = load i32, i32* @x.7
  %142 = load i32, i32* @y.8
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %140, %originalBB26alteredBB
  %149 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !613
  %150 = call i32 @close_stream(%struct._IO_FILE* %149), !dbg !615
  %151 = icmp ne i32 %150, 0, !dbg !616
  %152 = load i32, i32* @x.7
  %153 = load i32, i32* @y.8
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %151, label %160, label %178, !dbg !617

160:                                              ; preds = %originalBBpart228
  %161 = load i32, i32* @x.7
  %162 = load i32, i32* @y.8
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %160, %originalBB30alteredBB
  %169 = load volatile i32, i32* @exit_failure, align 4, !dbg !618
  call void @_exit(i32 %169) #14, !dbg !619
  %170 = load i32, i32* @x.7
  %171 = load i32, i32* @y.8
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  unreachable, !dbg !619

178:                                              ; preds = %originalBBpart228
  %179 = load i32, i32* @x.7
  %180 = load i32, i32* @y.8
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %178, %originalBB34alteredBB
  %187 = load i32, i32* @x.7
  %188 = load i32, i32* @y.8
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  ret void, !dbg !620

originalBBalteredBB:                              ; preds = %originalBB, %0
  %195 = alloca i8*, align 8
  %196 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !586
  %197 = call i32 @close_stream(%struct._IO_FILE* %196), !dbg !588
  %198 = icmp ne i32 %197, 0, !dbg !589
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %199 = load i8, i8* @ignore_EPIPE, align 1, !dbg !591
  %200 = trunc i8 %199 to i1, !dbg !591
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %40
  %201 = call i32* @__errno_location() #15, !dbg !593
  %202 = load i32, i32* %201, align 4, !dbg !593
  %203 = icmp eq i32 %202, 32, !dbg !594
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  %204 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.40, i64 0, i64 0)) #10, !dbg !599
  store i8* %204, i8** %9, align 8, !dbg !598
  %205 = load i8*, i8** @file_name, align 8, !dbg !600
  %206 = icmp ne i8* %205, null, !dbg !600
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %80
  %207 = call i32* @__errno_location() #15, !dbg !603
  %208 = load i32, i32* %207, align 4, !dbg !603
  %209 = load i8*, i8** @file_name, align 8, !dbg !604
  %210 = call i8* @quotearg_colon(i8* %209), !dbg !605
  %211 = load i8*, i8** %9, align 8, !dbg !606
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %208, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.41, i64 0, i64 0), i8* %210, i8* %211), !dbg !607
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %102
  %212 = call i32* @__errno_location() #15, !dbg !608
  %213 = load i32, i32* %212, align 4, !dbg !608
  %214 = load i8*, i8** %9, align 8, !dbg !609
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %213, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.42, i64 0, i64 0), i8* %214), !dbg !610
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %122
  %215 = load volatile i32, i32* @exit_failure, align 4, !dbg !611
  call void @_exit(i32 %215) #14, !dbg !612
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %140
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !613
  %217 = call i32 @close_stream(%struct._IO_FILE* %216), !dbg !615
  %218 = icmp ne i32 %217, 0, !dbg !616
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %160
  %219 = load volatile i32, i32* @exit_failure, align 4, !dbg !618
  call void @_exit(i32 %219) #14, !dbg !619
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %178
  br label %originalBB34
}

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #8

declare dso_local void @error(i32, i32, i8*, ...) #4

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #9

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_program_name(i8*) #5 !dbg !621 {
  %2 = load i32, i32* @x.9
  %3 = load i32, i32* @y.10
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !622, metadata !DIExpression()), !dbg !623
  call void @llvm.dbg.declare(metadata i8** %11, metadata !624, metadata !DIExpression()), !dbg !625
  call void @llvm.dbg.declare(metadata i8** %12, metadata !626, metadata !DIExpression()), !dbg !627
  %13 = load i8*, i8** %10, align 8, !dbg !628
  %14 = icmp eq i8* %13, null, !dbg !630
  %15 = load i32, i32* @x.9
  %16 = load i32, i32* @y.10
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %42, !dbg !631

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.9
  %25 = load i32, i32* @y.10
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !632
  %33 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.47, i64 0, i64 0), %struct._IO_FILE* %32), !dbg !634
  call void @abort() #12, !dbg !635
  %34 = load i32, i32* @x.9
  %35 = load i32, i32* @y.10
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !635

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.9
  %44 = load i32, i32* @y.10
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load i8*, i8** %10, align 8, !dbg !636
  %52 = call i8* @strrchr(i8* %51, i32 47) #13, !dbg !637
  store i8* %52, i8** %11, align 8, !dbg !638
  %53 = load i8*, i8** %11, align 8, !dbg !639
  %54 = icmp ne i8* %53, null, !dbg !640
  %55 = load i32, i32* @x.9
  %56 = load i32, i32* @y.10
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %54, label %63, label %82, !dbg !639

63:                                               ; preds = %originalBBpart28
  %64 = load i32, i32* @x.9
  %65 = load i32, i32* @y.10
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %63, %originalBB10alteredBB
  %72 = load i8*, i8** %11, align 8, !dbg !641
  %73 = getelementptr inbounds i8, i8* %72, i64 1, !dbg !642
  %74 = load i32, i32* @x.9
  %75 = load i32, i32* @y.10
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %100, !dbg !639

82:                                               ; preds = %originalBBpart28
  %83 = load i32, i32* @x.9
  %84 = load i32, i32* @y.10
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %82, %originalBB14alteredBB
  %91 = load i8*, i8** %10, align 8, !dbg !643
  %92 = load i32, i32* @x.9
  %93 = load i32, i32* @y.10
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %100, !dbg !639

100:                                              ; preds = %originalBBpart216, %originalBBpart212
  %101 = phi i8* [ %73, %originalBBpart212 ], [ %91, %originalBBpart216 ], !dbg !639
  %102 = load i32, i32* @x.9
  %103 = load i32, i32* @y.10
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %100, %originalBB18alteredBB
  store i8* %101, i8** %12, align 8, !dbg !644
  %110 = load i8*, i8** %12, align 8, !dbg !645
  %111 = load i8*, i8** %10, align 8, !dbg !647
  %112 = ptrtoint i8* %110 to i64, !dbg !648
  %113 = ptrtoint i8* %111 to i64, !dbg !648
  %114 = sub i64 %112, %113, !dbg !648
  %115 = icmp sge i64 %114, 7, !dbg !649
  %116 = load i32, i32* @x.9
  %117 = load i32, i32* @y.10
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBBpart225, label %originalBB18alteredBB

originalBBpart225:                                ; preds = %originalBB18
  br i1 %115, label %124, label %203, !dbg !650

124:                                              ; preds = %originalBBpart225
  %125 = load i32, i32* @x.9
  %126 = load i32, i32* @y.10
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %124, %originalBB27alteredBB
  %133 = load i8*, i8** %12, align 8, !dbg !651
  %134 = getelementptr inbounds i8, i8* %133, i64 -7, !dbg !652
  %135 = call i32 @strncmp(i8* %134, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.48, i64 0, i64 0), i64 7) #13, !dbg !653
  %136 = icmp eq i32 %135, 0, !dbg !654
  %137 = load i32, i32* @x.9
  %138 = load i32, i32* @y.10
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br i1 %136, label %145, label %203, !dbg !655

145:                                              ; preds = %originalBBpart229
  %146 = load i32, i32* @x.9
  %147 = load i32, i32* @y.10
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %145, %originalBB31alteredBB
  %154 = load i8*, i8** %12, align 8, !dbg !656
  store i8* %154, i8** %10, align 8, !dbg !658
  %155 = load i8*, i8** %12, align 8, !dbg !659
  %156 = call i32 @strncmp(i8* %155, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.49, i64 0, i64 0), i64 3) #13, !dbg !661
  %157 = icmp eq i32 %156, 0, !dbg !662
  %158 = load i32, i32* @x.9
  %159 = load i32, i32* @y.10
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  br i1 %157, label %166, label %186, !dbg !663

166:                                              ; preds = %originalBBpart233
  %167 = load i32, i32* @x.9
  %168 = load i32, i32* @y.10
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %166, %originalBB35alteredBB
  %175 = load i8*, i8** %12, align 8, !dbg !664
  %176 = getelementptr inbounds i8, i8* %175, i64 3, !dbg !666
  store i8* %176, i8** %10, align 8, !dbg !667
  %177 = load i8*, i8** %10, align 8, !dbg !668
  store i8* %177, i8** @program_invocation_short_name, align 8, !dbg !669
  %178 = load i32, i32* @x.9
  %179 = load i32, i32* @y.10
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBBpart237, label %originalBB35alteredBB

originalBBpart237:                                ; preds = %originalBB35
  br label %186, !dbg !670

186:                                              ; preds = %originalBBpart237, %originalBBpart233
  %187 = load i32, i32* @x.9
  %188 = load i32, i32* @y.10
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %186, %originalBB39alteredBB
  %195 = load i32, i32* @x.9
  %196 = load i32, i32* @y.10
  %197 = sub i32 %195, 1
  %198 = mul i32 %195, %197
  %199 = urem i32 %198, 2
  %200 = icmp eq i32 %199, 0
  %201 = icmp slt i32 %196, 10
  %202 = or i1 %200, %201
  br i1 %202, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  br label %203, !dbg !671

203:                                              ; preds = %originalBBpart241, %originalBBpart229, %originalBBpart225
  %204 = load i32, i32* @x.9
  %205 = load i32, i32* @y.10
  %206 = sub i32 %204, 1
  %207 = mul i32 %204, %206
  %208 = urem i32 %207, 2
  %209 = icmp eq i32 %208, 0
  %210 = icmp slt i32 %205, 10
  %211 = or i1 %209, %210
  br i1 %211, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %203, %originalBB43alteredBB
  %212 = load i8*, i8** %10, align 8, !dbg !672
  store i8* %212, i8** @program_name, align 8, !dbg !673
  %213 = load i8*, i8** %10, align 8, !dbg !674
  store i8* %213, i8** @program_invocation_name, align 8, !dbg !675
  %214 = load i32, i32* @x.9
  %215 = load i32, i32* @y.10
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBBpart245, label %originalBB43alteredBB

originalBBpart245:                                ; preds = %originalBB43
  ret void, !dbg !676

originalBBalteredBB:                              ; preds = %originalBB, %1
  %222 = alloca i8*, align 8
  %223 = alloca i8*, align 8
  %224 = alloca i8*, align 8
  store i8* %0, i8** %222, align 8
  call void @llvm.dbg.declare(metadata i8** %222, metadata !677, metadata !DIExpression()), !dbg !623
  call void @llvm.dbg.declare(metadata i8** %223, metadata !683, metadata !DIExpression()), !dbg !625
  call void @llvm.dbg.declare(metadata i8** %224, metadata !684, metadata !DIExpression()), !dbg !627
  %225 = load i8*, i8** %222, align 8, !dbg !628
  %226 = icmp eq i8* %225, null, !dbg !630
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  %227 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !632
  %228 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.47, i64 0, i64 0), %struct._IO_FILE* %227), !dbg !634
  call void @abort() #12, !dbg !635
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %229 = load i8*, i8** %10, align 8, !dbg !636
  %230 = call i8* @strrchr(i8* %229, i32 47) #13, !dbg !637
  store i8* %230, i8** %11, align 8, !dbg !638
  %231 = load i8*, i8** %11, align 8, !dbg !639
  %232 = icmp ne i8* %231, null, !dbg !640
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %63
  %233 = load i8*, i8** %11, align 8, !dbg !641
  %234 = getelementptr inbounds i8, i8* %233, i64 1, !dbg !642
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %82
  %235 = load i8*, i8** %10, align 8, !dbg !643
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %100
  store i8* %101, i8** %12, align 8, !dbg !644
  %236 = load i8*, i8** %12, align 8, !dbg !645
  %237 = load i8*, i8** %10, align 8, !dbg !647
  %238 = ptrtoint i8* %236 to i64, !dbg !648
  %239 = ptrtoint i8* %237 to i64, !dbg !648
  %_ = sub i64 %238, %239
  %gen = mul i64 %_, %239
  %_19 = sub i64 %238, %239
  %gen20 = mul i64 %_19, %239
  %_21 = sub i64 %238, %239
  %gen22 = mul i64 %_21, %239
  %_23 = shl i64 %238, %239
  %240 = sub i64 %238, %239, !dbg !648
  %241 = icmp sge i64 %240, 7, !dbg !649
  br label %originalBB18

originalBB27alteredBB:                            ; preds = %originalBB27, %124
  %242 = load i8*, i8** %12, align 8, !dbg !651
  %243 = getelementptr inbounds i8, i8* %242, i64 -7, !dbg !652
  %244 = call i32 @strncmp(i8* %243, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.48, i64 0, i64 0), i64 7) #13, !dbg !653
  %245 = icmp eq i32 %244, 0, !dbg !654
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %145
  %246 = load i8*, i8** %12, align 8, !dbg !656
  store i8* %246, i8** %10, align 8, !dbg !658
  %247 = load i8*, i8** %12, align 8, !dbg !659
  %248 = call i32 @strncmp(i8* %247, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.49, i64 0, i64 0), i64 3) #13, !dbg !661
  %249 = icmp eq i32 %248, 0, !dbg !662
  br label %originalBB31

originalBB35alteredBB:                            ; preds = %originalBB35, %166
  %250 = load i8*, i8** %12, align 8, !dbg !664
  %251 = getelementptr inbounds i8, i8* %250, i64 3, !dbg !666
  store i8* %251, i8** %10, align 8, !dbg !667
  %252 = load i8*, i8** %10, align 8, !dbg !668
  store i8* %252, i8** @program_invocation_short_name, align 8, !dbg !669
  br label %originalBB35

originalBB39alteredBB:                            ; preds = %originalBB39, %186
  br label %originalBB39

originalBB43alteredBB:                            ; preds = %originalBB43, %203
  %253 = load i8*, i8** %10, align 8, !dbg !672
  store i8* %253, i8** @program_name, align 8, !dbg !673
  %254 = load i8*, i8** %10, align 8, !dbg !674
  store i8* %254, i8** @program_invocation_name, align 8, !dbg !675
  br label %originalBB43
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #4

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #2

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @set_char_quoting(%struct.quoting_options*, i8 signext, i32) #5 !dbg !685 {
  %4 = load i32, i32* @x.11
  %5 = load i32, i32* @y.12
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca %struct.quoting_options*, align 8
  %13 = alloca i8, align 1
  %14 = alloca i32, align 4
  %15 = alloca i8, align 1
  %16 = alloca i32*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %12, metadata !689, metadata !DIExpression()), !dbg !690
  store i8 %1, i8* %13, align 1
  call void @llvm.dbg.declare(metadata i8* %13, metadata !691, metadata !DIExpression()), !dbg !692
  store i32 %2, i32* %14, align 4
  call void @llvm.dbg.declare(metadata i32* %14, metadata !693, metadata !DIExpression()), !dbg !694
  call void @llvm.dbg.declare(metadata i8* %15, metadata !695, metadata !DIExpression()), !dbg !696
  %19 = load i8, i8* %13, align 1, !dbg !697
  store i8 %19, i8* %15, align 1, !dbg !696
  call void @llvm.dbg.declare(metadata i32** %16, metadata !698, metadata !DIExpression()), !dbg !700
  %20 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !701
  %21 = icmp ne %struct.quoting_options* %20, null, !dbg !701
  %22 = load i32, i32* @x.11
  %23 = load i32, i32* @y.12
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %48, !dbg !701

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.11
  %32 = load i32, i32* @y.12
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !702
  %40 = load i32, i32* @x.11
  %41 = load i32, i32* @y.12
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %65, !dbg !701

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.11
  %50 = load i32, i32* @y.12
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.11
  %58 = load i32, i32* @y.12
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !701

65:                                               ; preds = %originalBBpart28, %originalBBpart24
  %66 = phi %struct.quoting_options* [ %39, %originalBBpart24 ], [ @default_quoting_options, %originalBBpart28 ], !dbg !701
  %67 = load i32, i32* @x.11
  %68 = load i32, i32* @y.12
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %75 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %66, i32 0, i32 2, !dbg !703
  %76 = getelementptr inbounds [8 x i32], [8 x i32]* %75, i64 0, i64 0, !dbg !704
  %77 = load i8, i8* %15, align 1, !dbg !705
  %78 = zext i8 %77 to i64, !dbg !705
  %79 = udiv i64 %78, 32, !dbg !706
  %80 = getelementptr inbounds i32, i32* %76, i64 %79, !dbg !707
  store i32* %80, i32** %16, align 8, !dbg !700
  call void @llvm.dbg.declare(metadata i32* %17, metadata !708, metadata !DIExpression()), !dbg !709
  %81 = load i8, i8* %15, align 1, !dbg !710
  %82 = zext i8 %81 to i64, !dbg !710
  %83 = urem i64 %82, 32, !dbg !711
  %84 = trunc i64 %83 to i32, !dbg !710
  store i32 %84, i32* %17, align 4, !dbg !709
  call void @llvm.dbg.declare(metadata i32* %18, metadata !712, metadata !DIExpression()), !dbg !713
  %85 = load i32*, i32** %16, align 8, !dbg !714
  %86 = load i32, i32* %85, align 4, !dbg !715
  %87 = load i32, i32* %17, align 4, !dbg !716
  %88 = lshr i32 %86, %87, !dbg !717
  %89 = and i32 %88, 1, !dbg !718
  store i32 %89, i32* %18, align 4, !dbg !713
  %90 = load i32, i32* %14, align 4, !dbg !719
  %91 = and i32 %90, 1, !dbg !720
  %92 = load i32, i32* %18, align 4, !dbg !721
  %93 = xor i32 %91, %92, !dbg !722
  %94 = load i32, i32* %17, align 4, !dbg !723
  %95 = shl i32 %93, %94, !dbg !724
  %96 = load i32*, i32** %16, align 8, !dbg !725
  %97 = load i32, i32* %96, align 4, !dbg !726
  %98 = xor i32 %97, %95, !dbg !726
  store i32 %98, i32* %96, align 4, !dbg !726
  %99 = load i32, i32* %18, align 4, !dbg !727
  %100 = load i32, i32* @x.11
  %101 = load i32, i32* @y.12
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart284, label %originalBB10alteredBB

originalBBpart284:                                ; preds = %originalBB10
  ret i32 %99, !dbg !728

originalBBalteredBB:                              ; preds = %originalBB, %3
  %108 = alloca %struct.quoting_options*, align 8
  %109 = alloca i8, align 1
  %110 = alloca i32, align 4
  %111 = alloca i8, align 1
  %112 = alloca i32*, align 8
  %113 = alloca i32, align 4
  %114 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %108, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %108, metadata !729, metadata !DIExpression()), !dbg !690
  store i8 %1, i8* %109, align 1
  call void @llvm.dbg.declare(metadata i8* %109, metadata !764, metadata !DIExpression()), !dbg !692
  store i32 %2, i32* %110, align 4
  call void @llvm.dbg.declare(metadata i32* %110, metadata !765, metadata !DIExpression()), !dbg !694
  call void @llvm.dbg.declare(metadata i8* %111, metadata !766, metadata !DIExpression()), !dbg !696
  %115 = load i8, i8* %109, align 1, !dbg !697
  store i8 %115, i8* %111, align 1, !dbg !696
  call void @llvm.dbg.declare(metadata i32** %112, metadata !767, metadata !DIExpression()), !dbg !700
  %116 = load %struct.quoting_options*, %struct.quoting_options** %108, align 8, !dbg !701
  %117 = icmp ne %struct.quoting_options* %116, null, !dbg !701
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %118 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !702
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %119 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %66, i32 0, i32 2, !dbg !703
  %120 = getelementptr inbounds [8 x i32], [8 x i32]* %119, i64 0, i64 0, !dbg !704
  %121 = load i8, i8* %15, align 1, !dbg !705
  %122 = zext i8 %121 to i64, !dbg !705
  %_ = sub i64 %122, 32
  %gen = mul i64 %_, 32
  %_11 = sub i64 %122, 32
  %gen12 = mul i64 %_11, 32
  %_13 = sub i64 %122, 32
  %gen14 = mul i64 %_13, 32
  %123 = udiv i64 %122, 32, !dbg !706
  %124 = getelementptr inbounds i32, i32* %120, i64 %123, !dbg !707
  store i32* %124, i32** %16, align 8, !dbg !700
  call void @llvm.dbg.declare(metadata !4, metadata !768, metadata !DIExpression()), !dbg !709
  %125 = load i8, i8* %15, align 1, !dbg !710
  %126 = zext i8 %125 to i64, !dbg !710
  %_15 = shl i64 %126, 32
  %_16 = shl i64 %126, 32
  %_17 = sub i64 0, %126
  %gen18 = add i64 %_17, 32
  %_19 = sub i64 %126, 32
  %gen20 = mul i64 %_19, 32
  %_21 = sub i64 %126, 32
  %gen22 = mul i64 %_21, 32
  %_23 = sub i64 %126, 32
  %gen24 = mul i64 %_23, 32
  %_25 = sub i64 %126, 32
  %gen26 = mul i64 %_25, 32
  %_27 = sub i64 0, %126
  %gen28 = add i64 %_27, 32
  %127 = urem i64 %126, 32, !dbg !711
  %128 = trunc i64 %127 to i32, !dbg !710
  store i32 %128, i32* %17, align 4, !dbg !709
  call void @llvm.dbg.declare(metadata !4, metadata !803, metadata !DIExpression()), !dbg !713
  %129 = load i32*, i32** %16, align 8, !dbg !714
  %130 = load i32, i32* %129, align 4, !dbg !715
  %131 = load i32, i32* %17, align 4, !dbg !716
  %_29 = shl i32 %130, %131
  %_30 = sub i32 0, %130
  %gen31 = add i32 %_30, %131
  %_32 = shl i32 %130, %131
  %_33 = shl i32 %130, %131
  %_34 = sub i32 0, %130
  %gen35 = add i32 %_34, %131
  %_36 = sub i32 %130, %131
  %gen37 = mul i32 %_36, %131
  %_38 = sub i32 %130, %131
  %gen39 = mul i32 %_38, %131
  %132 = lshr i32 %130, %131, !dbg !717
  %_40 = shl i32 %132, 1
  %_41 = sub i32 0, %132
  %gen42 = add i32 %_41, 1
  %_43 = sub i32 0, %132
  %gen44 = add i32 %_43, 1
  %_45 = sub i32 %132, 1
  %gen46 = mul i32 %_45, 1
  %_47 = sub i32 %132, 1
  %gen48 = mul i32 %_47, 1
  %_49 = shl i32 %132, 1
  %133 = and i32 %132, 1, !dbg !718
  store i32 %133, i32* %18, align 4, !dbg !713
  %134 = load i32, i32* %14, align 4, !dbg !719
  %_50 = sub i32 %134, 1
  %gen51 = mul i32 %_50, 1
  %_52 = shl i32 %134, 1
  %_53 = sub i32 %134, 1
  %gen54 = mul i32 %_53, 1
  %135 = and i32 %134, 1, !dbg !720
  %136 = load i32, i32* %18, align 4, !dbg !721
  %_55 = shl i32 %135, %136
  %_56 = sub i32 0, %135
  %gen57 = add i32 %_56, %136
  %_58 = sub i32 %135, %136
  %gen59 = mul i32 %_58, %136
  %_60 = sub i32 %135, %136
  %gen61 = mul i32 %_60, %136
  %_62 = shl i32 %135, %136
  %_63 = sub i32 %135, %136
  %gen64 = mul i32 %_63, %136
  %137 = xor i32 %135, %136, !dbg !722
  %138 = load i32, i32* %17, align 4, !dbg !723
  %_65 = shl i32 %137, %138
  %_66 = shl i32 %137, %138
  %_67 = sub i32 0, %137
  %gen68 = add i32 %_67, %138
  %_69 = sub i32 %137, %138
  %gen70 = mul i32 %_69, %138
  %_71 = sub i32 0, %137
  %gen72 = add i32 %_71, %138
  %_73 = sub i32 0, %137
  %gen74 = add i32 %_73, %138
  %139 = shl i32 %137, %138, !dbg !724
  %140 = load i32*, i32** %16, align 8, !dbg !725
  %141 = load i32, i32* %140, align 4, !dbg !726
  %_75 = sub i32 %141, %139
  %gen76 = mul i32 %_75, %139
  %_77 = sub i32 0, %141
  %gen78 = add i32 %_77, %139
  %_79 = sub i32 0, %141
  %gen80 = add i32 %_79, %139
  %_81 = sub i32 0, %141
  %gen82 = add i32 %_81, %139
  %142 = xor i32 %141, %139, !dbg !726
  store i32 %142, i32* %140, align 4, !dbg !726
  %143 = load i32, i32* %18, align 4, !dbg !727
  br label %originalBB10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char_mem(i8*, i64, i8 signext) #5 !dbg !804 {
  %4 = load i32, i32* @x.13
  %5 = load i32, i32* @y.14
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8, align 1
  %15 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !807, metadata !DIExpression()), !dbg !808
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !809, metadata !DIExpression()), !dbg !810
  store i8 %2, i8* %14, align 1
  call void @llvm.dbg.declare(metadata i8* %14, metadata !811, metadata !DIExpression()), !dbg !812
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %15, metadata !813, metadata !DIExpression()), !dbg !814
  %16 = bitcast %struct.quoting_options* %15 to i8*, !dbg !815
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !815
  %17 = load i8, i8* %14, align 1, !dbg !816
  %18 = call i32 @set_char_quoting(%struct.quoting_options* %15, i8 signext %17, i32 1), !dbg !817
  %19 = load i8*, i8** %12, align 8, !dbg !818
  %20 = load i64, i64* %13, align 8, !dbg !819
  %21 = call i8* @quotearg_n_options(i32 0, i8* %19, i64 %20, %struct.quoting_options* %15), !dbg !820
  %22 = load i32, i32* @x.13
  %23 = load i32, i32* @y.14
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %21, !dbg !821

originalBBalteredBB:                              ; preds = %originalBB, %3
  %30 = alloca i8*, align 8
  %31 = alloca i64, align 8
  %32 = alloca i8, align 1
  %33 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %30, align 8
  call void @llvm.dbg.declare(metadata i8** %30, metadata !822, metadata !DIExpression()), !dbg !808
  store i64 %1, i64* %31, align 8
  call void @llvm.dbg.declare(metadata i64* %31, metadata !854, metadata !DIExpression()), !dbg !810
  store i8 %2, i8* %32, align 1
  call void @llvm.dbg.declare(metadata i8* %32, metadata !855, metadata !DIExpression()), !dbg !812
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %33, metadata !856, metadata !DIExpression()), !dbg !814
  %34 = bitcast %struct.quoting_options* %33 to i8*, !dbg !815
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !815
  %35 = load i8, i8* %32, align 1, !dbg !816
  %36 = call i32 @set_char_quoting(%struct.quoting_options* %33, i8 signext %35, i32 1), !dbg !817
  %37 = load i8*, i8** %30, align 8, !dbg !818
  %38 = load i64, i64* %31, align 8, !dbg !819
  %39 = call i8* @quotearg_n_options(i32 0, i8* %37, i64 %38, %struct.quoting_options* %33), !dbg !820
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_options(i32, i8*, i64, %struct.quoting_options*) #5 !dbg !857 {
  %5 = load i32, i32* @x.15
  %6 = load i32, i32* @y.16
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca %struct.quoting_options*, align 8
  %17 = alloca i32, align 4
  %18 = alloca %struct.slotvec*, align 8
  %19 = alloca i8, align 1
  %20 = alloca i32, align 4
  %21 = alloca i64, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i32, align 4
  %24 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !862, metadata !DIExpression()), !dbg !863
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !864, metadata !DIExpression()), !dbg !865
  store i64 %2, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !866, metadata !DIExpression()), !dbg !867
  store %struct.quoting_options* %3, %struct.quoting_options** %16, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %16, metadata !868, metadata !DIExpression()), !dbg !869
  call void @llvm.dbg.declare(metadata i32* %17, metadata !870, metadata !DIExpression()), !dbg !871
  %25 = call i32* @__errno_location() #15, !dbg !872
  %26 = load i32, i32* %25, align 4, !dbg !872
  store i32 %26, i32* %17, align 4, !dbg !871
  call void @llvm.dbg.declare(metadata %struct.slotvec** %18, metadata !873, metadata !DIExpression()), !dbg !874
  %27 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !875
  store %struct.slotvec* %27, %struct.slotvec** %18, align 8, !dbg !874
  %28 = load i32, i32* %13, align 4, !dbg !876
  %29 = icmp slt i32 %28, 0, !dbg !878
  %30 = load i32, i32* @x.15
  %31 = load i32, i32* @y.16
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %29, label %38, label %55, !dbg !879

38:                                               ; preds = %originalBBpart2
  %39 = load i32, i32* @x.15
  %40 = load i32, i32* @y.16
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %38, %originalBB1alteredBB
  call void @abort() #12, !dbg !880
  %47 = load i32, i32* @x.15
  %48 = load i32, i32* @y.16
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !880

55:                                               ; preds = %originalBBpart2
  %56 = load i32, i32* @x.15
  %57 = load i32, i32* @y.16
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %55, %originalBB6alteredBB
  %64 = load i32, i32* @nslots, align 4, !dbg !881
  %65 = load i32, i32* %13, align 4, !dbg !883
  %66 = icmp sle i32 %64, %65, !dbg !884
  %67 = load i32, i32* @x.15
  %68 = load i32, i32* @y.16
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %75, label %245, !dbg !885

75:                                               ; preds = %originalBBpart28
  call void @llvm.dbg.declare(metadata i8* %19, metadata !886, metadata !DIExpression()), !dbg !888
  %76 = load i32, i32* @x.15
  %77 = load i32, i32* @y.16
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !889
  %85 = icmp eq %struct.slotvec* %84, @slotvec0, !dbg !890
  %86 = zext i1 %85 to i8, !dbg !888
  store i8 %86, i8* %19, align 1, !dbg !888
  call void @llvm.dbg.declare(metadata i32* %20, metadata !891, metadata !DIExpression()), !dbg !892
  store i32 2147483646, i32* %20, align 4, !dbg !892
  %87 = load i32, i32* %20, align 4, !dbg !893
  %88 = load i32, i32* %13, align 4, !dbg !895
  %89 = icmp slt i32 %87, %88, !dbg !896
  %90 = load i32, i32* @x.15
  %91 = load i32, i32* @y.16
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %89, label %98, label %115, !dbg !897

98:                                               ; preds = %originalBBpart212
  %99 = load i32, i32* @x.15
  %100 = load i32, i32* @y.16
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %98, %originalBB14alteredBB
  call void @xalloc_die() #14, !dbg !898
  %107 = load i32, i32* @x.15
  %108 = load i32, i32* @y.16
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  unreachable, !dbg !898

115:                                              ; preds = %originalBBpart212
  %116 = load i32, i32* @x.15
  %117 = load i32, i32* @y.16
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %115, %originalBB18alteredBB
  %124 = load i8, i8* %19, align 1, !dbg !899
  %125 = trunc i8 %124 to i1, !dbg !899
  %126 = load i32, i32* @x.15
  %127 = load i32, i32* @y.16
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %125, label %134, label %151, !dbg !899

134:                                              ; preds = %originalBBpart220
  %135 = load i32, i32* @x.15
  %136 = load i32, i32* @y.16
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %134, %originalBB22alteredBB
  %143 = load i32, i32* @x.15
  %144 = load i32, i32* @y.16
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %169, !dbg !899

151:                                              ; preds = %originalBBpart220
  %152 = load i32, i32* @x.15
  %153 = load i32, i32* @y.16
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %151, %originalBB26alteredBB
  %160 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !900
  %161 = load i32, i32* @x.15
  %162 = load i32, i32* @y.16
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %169, !dbg !899

169:                                              ; preds = %originalBBpart228, %originalBBpart224
  %170 = phi %struct.slotvec* [ null, %originalBBpart224 ], [ %160, %originalBBpart228 ], !dbg !899
  %171 = load i32, i32* @x.15
  %172 = load i32, i32* @y.16
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %169, %originalBB30alteredBB
  %179 = bitcast %struct.slotvec* %170 to i8*, !dbg !899
  %180 = load i32, i32* %13, align 4, !dbg !901
  %181 = add nsw i32 %180, 1, !dbg !902
  %182 = sext i32 %181 to i64, !dbg !903
  %183 = mul i64 %182, 16, !dbg !904
  %184 = call i8* @xrealloc(i8* %179, i64 %183), !dbg !905
  %185 = bitcast i8* %184 to %struct.slotvec*, !dbg !905
  store %struct.slotvec* %185, %struct.slotvec** %18, align 8, !dbg !906
  store %struct.slotvec* %185, %struct.slotvec** @slotvec, align 8, !dbg !907
  %186 = load i8, i8* %19, align 1, !dbg !908
  %187 = trunc i8 %186 to i1, !dbg !908
  %188 = load i32, i32* @x.15
  %189 = load i32, i32* @y.16
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBBpart242, label %originalBB30alteredBB

originalBBpart242:                                ; preds = %originalBB30
  br i1 %187, label %196, label %215, !dbg !910

196:                                              ; preds = %originalBBpart242
  %197 = load i32, i32* @x.15
  %198 = load i32, i32* @y.16
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBB44, label %originalBB44alteredBB

originalBB44:                                     ; preds = %196, %originalBB44alteredBB
  %205 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !911
  %206 = bitcast %struct.slotvec* %205 to i8*, !dbg !912
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %206, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !912
  %207 = load i32, i32* @x.15
  %208 = load i32, i32* @y.16
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBBpart246, label %originalBB44alteredBB

originalBBpart246:                                ; preds = %originalBB44
  br label %215, !dbg !913

215:                                              ; preds = %originalBBpart246, %originalBBpart242
  %216 = load i32, i32* @x.15
  %217 = load i32, i32* @y.16
  %218 = sub i32 %216, 1
  %219 = mul i32 %216, %218
  %220 = urem i32 %219, 2
  %221 = icmp eq i32 %220, 0
  %222 = icmp slt i32 %217, 10
  %223 = or i1 %221, %222
  br i1 %223, label %originalBB48, label %originalBB48alteredBB

originalBB48:                                     ; preds = %215, %originalBB48alteredBB
  %224 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !914
  %225 = load i32, i32* @nslots, align 4, !dbg !915
  %226 = sext i32 %225 to i64, !dbg !916
  %227 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %224, i64 %226, !dbg !916
  %228 = bitcast %struct.slotvec* %227 to i8*, !dbg !917
  %229 = load i32, i32* %13, align 4, !dbg !918
  %230 = add nsw i32 %229, 1, !dbg !919
  %231 = load i32, i32* @nslots, align 4, !dbg !920
  %232 = sub nsw i32 %230, %231, !dbg !921
  %233 = sext i32 %232 to i64, !dbg !922
  %234 = mul i64 %233, 16, !dbg !923
  call void @llvm.memset.p0i8.i64(i8* align 8 %228, i8 0, i64 %234, i1 false), !dbg !917
  %235 = load i32, i32* %13, align 4, !dbg !924
  %236 = add nsw i32 %235, 1, !dbg !925
  store i32 %236, i32* @nslots, align 4, !dbg !926
  %237 = load i32, i32* @x.15
  %238 = load i32, i32* @y.16
  %239 = sub i32 %237, 1
  %240 = mul i32 %237, %239
  %241 = urem i32 %240, 2
  %242 = icmp eq i32 %241, 0
  %243 = icmp slt i32 %238, 10
  %244 = or i1 %242, %243
  br i1 %244, label %originalBBpart284, label %originalBB48alteredBB

originalBBpart284:                                ; preds = %originalBB48
  br label %245, !dbg !927

245:                                              ; preds = %originalBBpart284, %originalBBpart28
  call void @llvm.dbg.declare(metadata i64* %21, metadata !928, metadata !DIExpression()), !dbg !930
  %246 = load i32, i32* @x.15
  %247 = load i32, i32* @y.16
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %245, %originalBB86alteredBB
  %254 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !931
  %255 = load i32, i32* %13, align 4, !dbg !932
  %256 = sext i32 %255 to i64, !dbg !931
  %257 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %254, i64 %256, !dbg !931
  %258 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %257, i32 0, i32 0, !dbg !933
  %259 = load i64, i64* %258, align 8, !dbg !933
  store i64 %259, i64* %21, align 8, !dbg !930
  call void @llvm.dbg.declare(metadata i8** %22, metadata !934, metadata !DIExpression()), !dbg !935
  %260 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !936
  %261 = load i32, i32* %13, align 4, !dbg !937
  %262 = sext i32 %261 to i64, !dbg !936
  %263 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %260, i64 %262, !dbg !936
  %264 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %263, i32 0, i32 1, !dbg !938
  %265 = load i8*, i8** %264, align 8, !dbg !938
  store i8* %265, i8** %22, align 8, !dbg !935
  call void @llvm.dbg.declare(metadata i32* %23, metadata !939, metadata !DIExpression()), !dbg !940
  %266 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !941
  %267 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %266, i32 0, i32 1, !dbg !942
  %268 = load i32, i32* %267, align 4, !dbg !942
  %269 = or i32 %268, 1, !dbg !943
  store i32 %269, i32* %23, align 4, !dbg !940
  call void @llvm.dbg.declare(metadata i64* %24, metadata !944, metadata !DIExpression()), !dbg !945
  %270 = load i8*, i8** %22, align 8, !dbg !946
  %271 = load i64, i64* %21, align 8, !dbg !947
  %272 = load i8*, i8** %14, align 8, !dbg !948
  %273 = load i64, i64* %15, align 8, !dbg !949
  %274 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !950
  %275 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %274, i32 0, i32 0, !dbg !951
  %276 = load i32, i32* %275, align 8, !dbg !951
  %277 = load i32, i32* %23, align 4, !dbg !952
  %278 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !953
  %279 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %278, i32 0, i32 2, !dbg !954
  %280 = getelementptr inbounds [8 x i32], [8 x i32]* %279, i64 0, i64 0, !dbg !953
  %281 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !955
  %282 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %281, i32 0, i32 3, !dbg !956
  %283 = load i8*, i8** %282, align 8, !dbg !956
  %284 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !957
  %285 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %284, i32 0, i32 4, !dbg !958
  %286 = load i8*, i8** %285, align 8, !dbg !958
  %287 = call i64 @quotearg_buffer_restyled(i8* %270, i64 %271, i8* %272, i64 %273, i32 %276, i32 %277, i32* %280, i8* %283, i8* %286), !dbg !959
  store i64 %287, i64* %24, align 8, !dbg !945
  %288 = load i64, i64* %21, align 8, !dbg !960
  %289 = load i64, i64* %24, align 8, !dbg !962
  %290 = icmp ule i64 %288, %289, !dbg !963
  %291 = load i32, i32* @x.15
  %292 = load i32, i32* @y.16
  %293 = sub i32 %291, 1
  %294 = mul i32 %291, %293
  %295 = urem i32 %294, 2
  %296 = icmp eq i32 %295, 0
  %297 = icmp slt i32 %292, 10
  %298 = or i1 %296, %297
  br i1 %298, label %originalBBpart297, label %originalBB86alteredBB

originalBBpart297:                                ; preds = %originalBB86
  br i1 %290, label %299, label %385, !dbg !964

299:                                              ; preds = %originalBBpart297
  %300 = load i32, i32* @x.15
  %301 = load i32, i32* @y.16
  %302 = sub i32 %300, 1
  %303 = mul i32 %300, %302
  %304 = urem i32 %303, 2
  %305 = icmp eq i32 %304, 0
  %306 = icmp slt i32 %301, 10
  %307 = or i1 %305, %306
  br i1 %307, label %originalBB99, label %originalBB99alteredBB

originalBB99:                                     ; preds = %299, %originalBB99alteredBB
  %308 = load i64, i64* %24, align 8, !dbg !965
  %309 = add i64 %308, 1, !dbg !967
  store i64 %309, i64* %21, align 8, !dbg !968
  %310 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !969
  %311 = load i32, i32* %13, align 4, !dbg !970
  %312 = sext i32 %311 to i64, !dbg !969
  %313 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %310, i64 %312, !dbg !969
  %314 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %313, i32 0, i32 0, !dbg !971
  store i64 %309, i64* %314, align 8, !dbg !972
  %315 = load i8*, i8** %22, align 8, !dbg !973
  %316 = icmp ne i8* %315, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !975
  %317 = load i32, i32* @x.15
  %318 = load i32, i32* @y.16
  %319 = sub i32 %317, 1
  %320 = mul i32 %317, %319
  %321 = urem i32 %320, 2
  %322 = icmp eq i32 %321, 0
  %323 = icmp slt i32 %318, 10
  %324 = or i1 %322, %323
  br i1 %324, label %originalBBpart2103, label %originalBB99alteredBB

originalBBpart2103:                               ; preds = %originalBB99
  br i1 %316, label %325, label %343, !dbg !976

325:                                              ; preds = %originalBBpart2103
  %326 = load i32, i32* @x.15
  %327 = load i32, i32* @y.16
  %328 = sub i32 %326, 1
  %329 = mul i32 %326, %328
  %330 = urem i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %331, %332
  br i1 %333, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %325, %originalBB105alteredBB
  %334 = load i8*, i8** %22, align 8, !dbg !977
  call void @free(i8* %334) #10, !dbg !978
  %335 = load i32, i32* @x.15
  %336 = load i32, i32* @y.16
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBBpart2107, label %originalBB105alteredBB

originalBBpart2107:                               ; preds = %originalBB105
  br label %343, !dbg !978

343:                                              ; preds = %originalBBpart2107, %originalBBpart2103
  %344 = load i32, i32* @x.15
  %345 = load i32, i32* @y.16
  %346 = sub i32 %344, 1
  %347 = mul i32 %344, %346
  %348 = urem i32 %347, 2
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %349, %350
  br i1 %351, label %originalBB109, label %originalBB109alteredBB

originalBB109:                                    ; preds = %343, %originalBB109alteredBB
  %352 = load i64, i64* %21, align 8, !dbg !979
  %353 = call noalias i8* @xcharalloc(i64 %352), !dbg !980
  store i8* %353, i8** %22, align 8, !dbg !981
  %354 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !982
  %355 = load i32, i32* %13, align 4, !dbg !983
  %356 = sext i32 %355 to i64, !dbg !982
  %357 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %354, i64 %356, !dbg !982
  %358 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %357, i32 0, i32 1, !dbg !984
  store i8* %353, i8** %358, align 8, !dbg !985
  %359 = load i8*, i8** %22, align 8, !dbg !986
  %360 = load i64, i64* %21, align 8, !dbg !987
  %361 = load i8*, i8** %14, align 8, !dbg !988
  %362 = load i64, i64* %15, align 8, !dbg !989
  %363 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !990
  %364 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %363, i32 0, i32 0, !dbg !991
  %365 = load i32, i32* %364, align 8, !dbg !991
  %366 = load i32, i32* %23, align 4, !dbg !992
  %367 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !993
  %368 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %367, i32 0, i32 2, !dbg !994
  %369 = getelementptr inbounds [8 x i32], [8 x i32]* %368, i64 0, i64 0, !dbg !993
  %370 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !995
  %371 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %370, i32 0, i32 3, !dbg !996
  %372 = load i8*, i8** %371, align 8, !dbg !996
  %373 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !997
  %374 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %373, i32 0, i32 4, !dbg !998
  %375 = load i8*, i8** %374, align 8, !dbg !998
  %376 = call i64 @quotearg_buffer_restyled(i8* %359, i64 %360, i8* %361, i64 %362, i32 %365, i32 %366, i32* %369, i8* %372, i8* %375), !dbg !999
  %377 = load i32, i32* @x.15
  %378 = load i32, i32* @y.16
  %379 = sub i32 %377, 1
  %380 = mul i32 %377, %379
  %381 = urem i32 %380, 2
  %382 = icmp eq i32 %381, 0
  %383 = icmp slt i32 %378, 10
  %384 = or i1 %382, %383
  br i1 %384, label %originalBBpart2111, label %originalBB109alteredBB

originalBBpart2111:                               ; preds = %originalBB109
  br label %385, !dbg !1000

385:                                              ; preds = %originalBBpart2111, %originalBBpart297
  %386 = load i32, i32* @x.15
  %387 = load i32, i32* @y.16
  %388 = sub i32 %386, 1
  %389 = mul i32 %386, %388
  %390 = urem i32 %389, 2
  %391 = icmp eq i32 %390, 0
  %392 = icmp slt i32 %387, 10
  %393 = or i1 %391, %392
  br i1 %393, label %originalBB113, label %originalBB113alteredBB

originalBB113:                                    ; preds = %385, %originalBB113alteredBB
  %394 = load i32, i32* %17, align 4, !dbg !1001
  %395 = call i32* @__errno_location() #15, !dbg !1002
  store i32 %394, i32* %395, align 4, !dbg !1003
  %396 = load i8*, i8** %22, align 8, !dbg !1004
  %397 = load i32, i32* @x.15
  %398 = load i32, i32* @y.16
  %399 = sub i32 %397, 1
  %400 = mul i32 %397, %399
  %401 = urem i32 %400, 2
  %402 = icmp eq i32 %401, 0
  %403 = icmp slt i32 %398, 10
  %404 = or i1 %402, %403
  br i1 %404, label %originalBBpart2115, label %originalBB113alteredBB

originalBBpart2115:                               ; preds = %originalBB113
  ret i8* %396, !dbg !1005

originalBBalteredBB:                              ; preds = %originalBB, %4
  %405 = alloca i32, align 4
  %406 = alloca i8*, align 8
  %407 = alloca i64, align 8
  %408 = alloca %struct.quoting_options*, align 8
  %409 = alloca i32, align 4
  %410 = alloca %struct.slotvec*, align 8
  %411 = alloca i8, align 1
  %412 = alloca i32, align 4
  %413 = alloca i64, align 8
  %414 = alloca i8*, align 8
  %415 = alloca i32, align 4
  %416 = alloca i64, align 8
  store i32 %0, i32* %405, align 4
  call void @llvm.dbg.declare(metadata i32* %405, metadata !1006, metadata !DIExpression()), !dbg !863
  store i8* %1, i8** %406, align 8
  call void @llvm.dbg.declare(metadata i8** %406, metadata !1042, metadata !DIExpression()), !dbg !865
  store i64 %2, i64* %407, align 8
  call void @llvm.dbg.declare(metadata i64* %407, metadata !1043, metadata !DIExpression()), !dbg !867
  store %struct.quoting_options* %3, %struct.quoting_options** %408, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %408, metadata !1044, metadata !DIExpression()), !dbg !869
  call void @llvm.dbg.declare(metadata i32* %409, metadata !1045, metadata !DIExpression()), !dbg !871
  %417 = call i32* @__errno_location() #15, !dbg !872
  %418 = load i32, i32* %417, align 4, !dbg !872
  store i32 %418, i32* %409, align 4, !dbg !871
  call void @llvm.dbg.declare(metadata %struct.slotvec** %410, metadata !1046, metadata !DIExpression()), !dbg !874
  %419 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !875
  store %struct.slotvec* %419, %struct.slotvec** %410, align 8, !dbg !874
  %420 = load i32, i32* %405, align 4, !dbg !876
  %421 = icmp slt i32 %420, 0, !dbg !878
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %38
  call void @abort() #12, !dbg !880
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %55
  %422 = load i32, i32* @nslots, align 4, !dbg !881
  %423 = load i32, i32* %13, align 4, !dbg !883
  %424 = icmp sle i32 %422, %423, !dbg !884
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %425 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !889
  %426 = icmp eq %struct.slotvec* %425, @slotvec0, !dbg !890
  %427 = zext i1 %426 to i8, !dbg !888
  store i8 %427, i8* %19, align 1, !dbg !888
  call void @llvm.dbg.declare(metadata !4, metadata !1047, metadata !DIExpression()), !dbg !892
  store i32 2147483646, i32* %20, align 4, !dbg !892
  %428 = load i32, i32* %20, align 4, !dbg !893
  %429 = load i32, i32* %13, align 4, !dbg !895
  %430 = icmp slt i32 %428, %429, !dbg !896
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %98
  call void @xalloc_die() #14, !dbg !898
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %115
  %431 = load i8, i8* %19, align 1, !dbg !899
  %432 = trunc i8 %431 to i1, !dbg !899
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %134
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %151
  %433 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !900
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %169
  %434 = bitcast %struct.slotvec* %170 to i8*, !dbg !899
  %435 = load i32, i32* %13, align 4, !dbg !901
  %_ = sub i32 %435, 1
  %gen = mul i32 %_, 1
  %_31 = shl i32 %435, 1
  %436 = add nsw i32 %435, 1, !dbg !902
  %437 = sext i32 %436 to i64, !dbg !903
  %_32 = shl i64 %437, 16
  %_33 = sub i64 %437, 16
  %gen34 = mul i64 %_33, 16
  %_35 = sub i64 0, %437
  %gen36 = add i64 %_35, 16
  %_37 = sub i64 0, %437
  %gen38 = add i64 %_37, 16
  %_39 = sub i64 0, %437
  %gen40 = add i64 %_39, 16
  %438 = mul i64 %437, 16, !dbg !904
  %439 = call i8* @xrealloc(i8* %434, i64 %438), !dbg !905
  %440 = bitcast i8* %439 to %struct.slotvec*, !dbg !905
  store %struct.slotvec* %440, %struct.slotvec** %18, align 8, !dbg !906
  store %struct.slotvec* %440, %struct.slotvec** @slotvec, align 8, !dbg !907
  %441 = load i8, i8* %19, align 1, !dbg !908
  %442 = trunc i8 %441 to i1, !dbg !908
  br label %originalBB30

originalBB44alteredBB:                            ; preds = %originalBB44, %196
  %443 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !911
  %444 = bitcast %struct.slotvec* %443 to i8*, !dbg !912
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %444, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !912
  br label %originalBB44

originalBB48alteredBB:                            ; preds = %originalBB48, %215
  %445 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !914
  %446 = load i32, i32* @nslots, align 4, !dbg !915
  %447 = sext i32 %446 to i64, !dbg !916
  %448 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %445, i64 %447, !dbg !916
  %449 = bitcast %struct.slotvec* %448 to i8*, !dbg !917
  %450 = load i32, i32* %13, align 4, !dbg !918
  %_49 = sub i32 %450, 1
  %gen50 = mul i32 %_49, 1
  %_51 = sub i32 0, %450
  %gen52 = add i32 %_51, 1
  %_53 = sub i32 %450, 1
  %gen54 = mul i32 %_53, 1
  %_55 = sub i32 %450, 1
  %gen56 = mul i32 %_55, 1
  %_57 = sub i32 0, %450
  %gen58 = add i32 %_57, 1
  %_59 = sub i32 %450, 1
  %gen60 = mul i32 %_59, 1
  %451 = add nsw i32 %450, 1, !dbg !919
  %452 = load i32, i32* @nslots, align 4, !dbg !920
  %_61 = sub i32 %451, %452
  %gen62 = mul i32 %_61, %452
  %_63 = shl i32 %451, %452
  %_64 = sub i32 %451, %452
  %gen65 = mul i32 %_64, %452
  %453 = sub nsw i32 %451, %452, !dbg !921
  %454 = sext i32 %453 to i64, !dbg !922
  %_66 = shl i64 %454, 16
  %_67 = sub i64 0, %454
  %gen68 = add i64 %_67, 16
  %_69 = sub i64 0, %454
  %gen70 = add i64 %_69, 16
  %_71 = sub i64 %454, 16
  %gen72 = mul i64 %_71, 16
  %_73 = shl i64 %454, 16
  %455 = mul i64 %454, 16, !dbg !923
  call void @llvm.memset.p0i8.i64(i8* align 8 %449, i8 0, i64 %455, i1 false), !dbg !917
  %456 = load i32, i32* %13, align 4, !dbg !924
  %_74 = sub i32 %456, 1
  %gen75 = mul i32 %_74, 1
  %_76 = sub i32 0, %456
  %gen77 = add i32 %_76, 1
  %_78 = shl i32 %456, 1
  %_79 = sub i32 0, %456
  %gen80 = add i32 %_79, 1
  %_81 = sub i32 %456, 1
  %gen82 = mul i32 %_81, 1
  %457 = add nsw i32 %456, 1, !dbg !925
  store i32 %457, i32* @nslots, align 4, !dbg !926
  br label %originalBB48

originalBB86alteredBB:                            ; preds = %originalBB86, %245
  %458 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !931
  %459 = load i32, i32* %13, align 4, !dbg !932
  %460 = sext i32 %459 to i64, !dbg !931
  %461 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %458, i64 %460, !dbg !931
  %462 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %461, i32 0, i32 0, !dbg !933
  %463 = load i64, i64* %462, align 8, !dbg !933
  store i64 %463, i64* %21, align 8, !dbg !930
  call void @llvm.dbg.declare(metadata !4, metadata !1085, metadata !DIExpression()), !dbg !935
  %464 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !936
  %465 = load i32, i32* %13, align 4, !dbg !937
  %466 = sext i32 %465 to i64, !dbg !936
  %467 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %464, i64 %466, !dbg !936
  %468 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %467, i32 0, i32 1, !dbg !938
  %469 = load i8*, i8** %468, align 8, !dbg !938
  store i8* %469, i8** %22, align 8, !dbg !935
  call void @llvm.dbg.declare(metadata !4, metadata !1122, metadata !DIExpression()), !dbg !940
  %470 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !941
  %471 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %470, i32 0, i32 1, !dbg !942
  %472 = load i32, i32* %471, align 4, !dbg !942
  %_87 = sub i32 %472, 1
  %gen88 = mul i32 %_87, 1
  %_89 = shl i32 %472, 1
  %_90 = shl i32 %472, 1
  %_91 = sub i32 0, %472
  %gen92 = add i32 %_91, 1
  %_93 = shl i32 %472, 1
  %_94 = sub i32 %472, 1
  %gen95 = mul i32 %_94, 1
  %473 = or i32 %472, 1, !dbg !943
  store i32 %473, i32* %23, align 4, !dbg !940
  call void @llvm.dbg.declare(metadata !4, metadata !1123, metadata !DIExpression()), !dbg !945
  %474 = load i8*, i8** %22, align 8, !dbg !946
  %475 = load i64, i64* %21, align 8, !dbg !947
  %476 = load i8*, i8** %14, align 8, !dbg !948
  %477 = load i64, i64* %15, align 8, !dbg !949
  %478 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !950
  %479 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %478, i32 0, i32 0, !dbg !951
  %480 = load i32, i32* %479, align 8, !dbg !951
  %481 = load i32, i32* %23, align 4, !dbg !952
  %482 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !953
  %483 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %482, i32 0, i32 2, !dbg !954
  %484 = getelementptr inbounds [8 x i32], [8 x i32]* %483, i64 0, i64 0, !dbg !953
  %485 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !955
  %486 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %485, i32 0, i32 3, !dbg !956
  %487 = load i8*, i8** %486, align 8, !dbg !956
  %488 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !957
  %489 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %488, i32 0, i32 4, !dbg !958
  %490 = load i8*, i8** %489, align 8, !dbg !958
  %491 = call i64 @quotearg_buffer_restyled(i8* %474, i64 %475, i8* %476, i64 %477, i32 %480, i32 %481, i32* %484, i8* %487, i8* %490), !dbg !959
  store i64 %491, i64* %24, align 8, !dbg !945
  %492 = load i64, i64* %21, align 8, !dbg !960
  %493 = load i64, i64* %24, align 8, !dbg !962
  %494 = icmp ule i64 %492, %493, !dbg !963
  br label %originalBB86

originalBB99alteredBB:                            ; preds = %originalBB99, %299
  %495 = load i64, i64* %24, align 8, !dbg !965
  %_100 = shl i64 %495, 1
  %_101 = shl i64 %495, 1
  %496 = add i64 %495, 1, !dbg !967
  store i64 %496, i64* %21, align 8, !dbg !968
  %497 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !969
  %498 = load i32, i32* %13, align 4, !dbg !970
  %499 = sext i32 %498 to i64, !dbg !969
  %500 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %497, i64 %499, !dbg !969
  %501 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %500, i32 0, i32 0, !dbg !971
  store i64 %496, i64* %501, align 8, !dbg !972
  %502 = load i8*, i8** %22, align 8, !dbg !973
  %503 = icmp ne i8* %502, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !975
  br label %originalBB99

originalBB105alteredBB:                           ; preds = %originalBB105, %325
  %504 = load i8*, i8** %22, align 8, !dbg !977
  call void @free(i8* %504) #10, !dbg !978
  br label %originalBB105

originalBB109alteredBB:                           ; preds = %originalBB109, %343
  %505 = load i64, i64* %21, align 8, !dbg !979
  %506 = call noalias i8* @xcharalloc(i64 %505), !dbg !980
  store i8* %506, i8** %22, align 8, !dbg !981
  %507 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !982
  %508 = load i32, i32* %13, align 4, !dbg !983
  %509 = sext i32 %508 to i64, !dbg !982
  %510 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %507, i64 %509, !dbg !982
  %511 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %510, i32 0, i32 1, !dbg !984
  store i8* %506, i8** %511, align 8, !dbg !985
  %512 = load i8*, i8** %22, align 8, !dbg !986
  %513 = load i64, i64* %21, align 8, !dbg !987
  %514 = load i8*, i8** %14, align 8, !dbg !988
  %515 = load i64, i64* %15, align 8, !dbg !989
  %516 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !990
  %517 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %516, i32 0, i32 0, !dbg !991
  %518 = load i32, i32* %517, align 8, !dbg !991
  %519 = load i32, i32* %23, align 4, !dbg !992
  %520 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !993
  %521 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %520, i32 0, i32 2, !dbg !994
  %522 = getelementptr inbounds [8 x i32], [8 x i32]* %521, i64 0, i64 0, !dbg !993
  %523 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !995
  %524 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %523, i32 0, i32 3, !dbg !996
  %525 = load i8*, i8** %524, align 8, !dbg !996
  %526 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !997
  %527 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %526, i32 0, i32 4, !dbg !998
  %528 = load i8*, i8** %527, align 8, !dbg !998
  %529 = call i64 @quotearg_buffer_restyled(i8* %512, i64 %513, i8* %514, i64 %515, i32 %518, i32 %519, i32* %522, i8* %525, i8* %528), !dbg !999
  br label %originalBB109

originalBB113alteredBB:                           ; preds = %originalBB113, %385
  %530 = load i32, i32* %17, align 4, !dbg !1001
  %531 = call i32* @__errno_location() #15, !dbg !1002
  store i32 %530, i32* %531, align 4, !dbg !1003
  %532 = load i8*, i8** %22, align 8, !dbg !1004
  br label %originalBB113
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(i8*, i64, i8*, i64, i32, i32, i32*, i8*, i8*) #5 !dbg !1124 {
  %10 = load i32, i32* @x.17
  %11 = load i32, i32* @y.18
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  %18 = alloca i64, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i64, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i8*, align 8
  %32 = alloca i64, align 8
  %33 = alloca i8, align 1
  %34 = alloca i8, align 1
  %35 = alloca i8, align 1
  %36 = alloca i8, align 1
  %37 = alloca i8, align 1
  %38 = alloca i8, align 1
  %39 = alloca i8, align 1
  %40 = alloca i8, align 1
  %41 = alloca i8, align 1
  %42 = alloca i8, align 1
  %43 = alloca i8, align 1
  %44 = alloca i64, align 8
  %45 = alloca i8, align 1
  %46 = alloca %struct.__mbstate_t, align 4
  %47 = alloca i32, align 4
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  store i8* %0, i8** %19, align 8
  call void @llvm.dbg.declare(metadata i8** %19, metadata !1129, metadata !DIExpression()), !dbg !1130
  store i64 %1, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !1131, metadata !DIExpression()), !dbg !1132
  store i8* %2, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !1133, metadata !DIExpression()), !dbg !1134
  store i64 %3, i64* %22, align 8
  call void @llvm.dbg.declare(metadata i64* %22, metadata !1135, metadata !DIExpression()), !dbg !1136
  store i32 %4, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !1137, metadata !DIExpression()), !dbg !1138
  store i32 %5, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !1139, metadata !DIExpression()), !dbg !1140
  store i32* %6, i32** %25, align 8
  call void @llvm.dbg.declare(metadata i32** %25, metadata !1141, metadata !DIExpression()), !dbg !1142
  store i8* %7, i8** %26, align 8
  call void @llvm.dbg.declare(metadata i8** %26, metadata !1143, metadata !DIExpression()), !dbg !1144
  store i8* %8, i8** %27, align 8
  call void @llvm.dbg.declare(metadata i8** %27, metadata !1145, metadata !DIExpression()), !dbg !1146
  call void @llvm.dbg.declare(metadata i64* %28, metadata !1147, metadata !DIExpression()), !dbg !1148
  call void @llvm.dbg.declare(metadata i64* %29, metadata !1149, metadata !DIExpression()), !dbg !1150
  store i64 0, i64* %29, align 8, !dbg !1150
  call void @llvm.dbg.declare(metadata i64* %30, metadata !1151, metadata !DIExpression()), !dbg !1152
  store i64 0, i64* %30, align 8, !dbg !1152
  call void @llvm.dbg.declare(metadata i8** %31, metadata !1153, metadata !DIExpression()), !dbg !1154
  store i8* null, i8** %31, align 8, !dbg !1154
  call void @llvm.dbg.declare(metadata i64* %32, metadata !1155, metadata !DIExpression()), !dbg !1156
  store i64 0, i64* %32, align 8, !dbg !1156
  call void @llvm.dbg.declare(metadata i8* %33, metadata !1157, metadata !DIExpression()), !dbg !1158
  store i8 0, i8* %33, align 1, !dbg !1158
  call void @llvm.dbg.declare(metadata i8* %34, metadata !1159, metadata !DIExpression()), !dbg !1160
  %51 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1161
  %52 = icmp eq i64 %51, 1, !dbg !1162
  %53 = zext i1 %52 to i8, !dbg !1160
  store i8 %53, i8* %34, align 1, !dbg !1160
  call void @llvm.dbg.declare(metadata i8* %35, metadata !1163, metadata !DIExpression()), !dbg !1164
  %54 = load i32, i32* %24, align 4, !dbg !1165
  %55 = and i32 %54, 2, !dbg !1166
  %56 = icmp ne i32 %55, 0, !dbg !1167
  %57 = zext i1 %56 to i8, !dbg !1164
  store i8 %57, i8* %35, align 1, !dbg !1164
  call void @llvm.dbg.declare(metadata i8* %36, metadata !1168, metadata !DIExpression()), !dbg !1169
  store i8 0, i8* %36, align 1, !dbg !1169
  call void @llvm.dbg.declare(metadata i8* %37, metadata !1170, metadata !DIExpression()), !dbg !1171
  store i8 0, i8* %37, align 1, !dbg !1171
  call void @llvm.dbg.declare(metadata i8* %38, metadata !1172, metadata !DIExpression()), !dbg !1173
  store i8 1, i8* %38, align 1, !dbg !1173
  %58 = load i32, i32* @x.17
  %59 = load i32, i32* @y.18
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %66, !dbg !1174

66:                                               ; preds = %originalBBpart21889, %originalBBpart2
  call void @llvm.dbg.label(metadata !1175), !dbg !1176
  %67 = load i32, i32* @x.17
  %68 = load i32, i32* @y.18
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB7, label %originalBB7alteredBB

originalBB7:                                      ; preds = %66, %originalBB7alteredBB
  %75 = load i32, i32* %23, align 4, !dbg !1177
  %76 = load i32, i32* @x.17
  %77 = load i32, i32* @y.18
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart29, label %originalBB7alteredBB

originalBBpart29:                                 ; preds = %originalBB7
  switch i32 %75, label %728 [
    i32 6, label %84
    i32 5, label %101
    i32 7, label %230
    i32 8, label %247
    i32 9, label %247
    i32 10, label %247
    i32 3, label %495
    i32 1, label %512
    i32 4, label %529
    i32 2, label %582
    i32 0, label %711
  ], !dbg !1178

84:                                               ; preds = %originalBBpart29
  %85 = load i32, i32* @x.17
  %86 = load i32, i32* @y.18
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %84, %originalBB11alteredBB
  store i32 5, i32* %23, align 4, !dbg !1179
  store i8 1, i8* %35, align 1, !dbg !1181
  %93 = load i32, i32* @x.17
  %94 = load i32, i32* @y.18
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  br label %101, !dbg !1182

101:                                              ; preds = %originalBBpart213, %originalBBpart29
  %102 = load i32, i32* @x.17
  %103 = load i32, i32* @y.18
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %101, %originalBB15alteredBB
  %110 = load i8, i8* %35, align 1, !dbg !1183
  %111 = trunc i8 %110 to i1, !dbg !1183
  %112 = load i32, i32* @x.17
  %113 = load i32, i32* @y.18
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  br i1 %111, label %213, label %120, !dbg !1185

120:                                              ; preds = %originalBBpart217
  %121 = load i32, i32* @x.17
  %122 = load i32, i32* @y.18
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %120, %originalBB19alteredBB
  %129 = load i32, i32* @x.17
  %130 = load i32, i32* @y.18
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br label %137, !dbg !1186

137:                                              ; preds = %originalBBpart221
  %138 = load i32, i32* @x.17
  %139 = load i32, i32* @y.18
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %137, %originalBB23alteredBB
  %146 = load i64, i64* %29, align 8, !dbg !1187
  %147 = load i64, i64* %20, align 8, !dbg !1187
  %148 = icmp ult i64 %146, %147, !dbg !1187
  %149 = load i32, i32* @x.17
  %150 = load i32, i32* @y.18
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br i1 %148, label %157, label %177, !dbg !1190

157:                                              ; preds = %originalBBpart225
  %158 = load i32, i32* @x.17
  %159 = load i32, i32* @y.18
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %157, %originalBB27alteredBB
  %166 = load i8*, i8** %19, align 8, !dbg !1187
  %167 = load i64, i64* %29, align 8, !dbg !1187
  %168 = getelementptr inbounds i8, i8* %166, i64 %167, !dbg !1187
  store i8 34, i8* %168, align 1, !dbg !1187
  %169 = load i32, i32* @x.17
  %170 = load i32, i32* @y.18
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br label %177, !dbg !1187

177:                                              ; preds = %originalBBpart229, %originalBBpart225
  %178 = load i32, i32* @x.17
  %179 = load i32, i32* @y.18
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %177, %originalBB31alteredBB
  %186 = load i64, i64* %29, align 8, !dbg !1190
  %187 = add i64 %186, 1, !dbg !1190
  store i64 %187, i64* %29, align 8, !dbg !1190
  %188 = load i32, i32* @x.17
  %189 = load i32, i32* @y.18
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBBpart240, label %originalBB31alteredBB

originalBBpart240:                                ; preds = %originalBB31
  br label %196, !dbg !1190

196:                                              ; preds = %originalBBpart240
  %197 = load i32, i32* @x.17
  %198 = load i32, i32* @y.18
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %196, %originalBB42alteredBB
  %205 = load i32, i32* @x.17
  %206 = load i32, i32* @y.18
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %213, !dbg !1190

213:                                              ; preds = %originalBBpart244, %originalBBpart217
  %214 = load i32, i32* @x.17
  %215 = load i32, i32* @y.18
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %213, %originalBB46alteredBB
  store i8 1, i8* %33, align 1, !dbg !1191
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.52, i64 0, i64 0), i8** %31, align 8, !dbg !1192
  store i64 1, i64* %32, align 8, !dbg !1193
  %222 = load i32, i32* @x.17
  %223 = load i32, i32* @y.18
  %224 = sub i32 %222, 1
  %225 = mul i32 %222, %224
  %226 = urem i32 %225, 2
  %227 = icmp eq i32 %226, 0
  %228 = icmp slt i32 %223, 10
  %229 = or i1 %227, %228
  br i1 %229, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %745, !dbg !1194

230:                                              ; preds = %originalBBpart29
  %231 = load i32, i32* @x.17
  %232 = load i32, i32* @y.18
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %230, %originalBB50alteredBB
  store i8 1, i8* %33, align 1, !dbg !1195
  store i8 0, i8* %35, align 1, !dbg !1196
  %239 = load i32, i32* @x.17
  %240 = load i32, i32* @y.18
  %241 = sub i32 %239, 1
  %242 = mul i32 %239, %241
  %243 = urem i32 %242, 2
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %244, %245
  br i1 %246, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br label %745, !dbg !1197

247:                                              ; preds = %originalBBpart29, %originalBBpart29, %originalBBpart29
  %248 = load i32, i32* @x.17
  %249 = load i32, i32* @y.18
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %247, %originalBB54alteredBB
  %256 = load i32, i32* %23, align 4, !dbg !1198
  %257 = icmp ne i32 %256, 10, !dbg !1201
  %258 = load i32, i32* @x.17
  %259 = load i32, i32* @y.18
  %260 = sub i32 %258, 1
  %261 = mul i32 %258, %260
  %262 = urem i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %263, %264
  br i1 %265, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br i1 %257, label %266, label %287, !dbg !1202

266:                                              ; preds = %originalBBpart256
  %267 = load i32, i32* @x.17
  %268 = load i32, i32* @y.18
  %269 = sub i32 %267, 1
  %270 = mul i32 %267, %269
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %272, %273
  br i1 %274, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %266, %originalBB58alteredBB
  %275 = load i32, i32* %23, align 4, !dbg !1203
  %276 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.53, i64 0, i64 0), i32 %275), !dbg !1205
  store i8* %276, i8** %26, align 8, !dbg !1206
  %277 = load i32, i32* %23, align 4, !dbg !1207
  %278 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.54, i64 0, i64 0), i32 %277), !dbg !1208
  store i8* %278, i8** %27, align 8, !dbg !1209
  %279 = load i32, i32* @x.17
  %280 = load i32, i32* @y.18
  %281 = sub i32 %279, 1
  %282 = mul i32 %279, %281
  %283 = urem i32 %282, 2
  %284 = icmp eq i32 %283, 0
  %285 = icmp slt i32 %280, 10
  %286 = or i1 %284, %285
  br i1 %286, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br label %287, !dbg !1210

287:                                              ; preds = %originalBBpart260, %originalBBpart256
  %288 = load i32, i32* @x.17
  %289 = load i32, i32* @y.18
  %290 = sub i32 %288, 1
  %291 = mul i32 %288, %290
  %292 = urem i32 %291, 2
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %293, %294
  br i1 %295, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %287, %originalBB62alteredBB
  %296 = load i8, i8* %35, align 1, !dbg !1211
  %297 = trunc i8 %296 to i1, !dbg !1211
  %298 = load i32, i32* @x.17
  %299 = load i32, i32* @y.18
  %300 = sub i32 %298, 1
  %301 = mul i32 %298, %300
  %302 = urem i32 %301, 2
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %303, %304
  br i1 %305, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br i1 %297, label %475, label %306, !dbg !1213

306:                                              ; preds = %originalBBpart264
  %307 = load i32, i32* @x.17
  %308 = load i32, i32* @y.18
  %309 = sub i32 %307, 1
  %310 = mul i32 %307, %309
  %311 = urem i32 %310, 2
  %312 = icmp eq i32 %311, 0
  %313 = icmp slt i32 %308, 10
  %314 = or i1 %312, %313
  br i1 %314, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %306, %originalBB66alteredBB
  %315 = load i8*, i8** %26, align 8, !dbg !1214
  store i8* %315, i8** %31, align 8, !dbg !1216
  %316 = load i32, i32* @x.17
  %317 = load i32, i32* @y.18
  %318 = sub i32 %316, 1
  %319 = mul i32 %316, %318
  %320 = urem i32 %319, 2
  %321 = icmp eq i32 %320, 0
  %322 = icmp slt i32 %317, 10
  %323 = or i1 %321, %322
  br i1 %323, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br label %324, !dbg !1217

324:                                              ; preds = %originalBBpart2102, %originalBBpart268
  %325 = load i32, i32* @x.17
  %326 = load i32, i32* @y.18
  %327 = sub i32 %325, 1
  %328 = mul i32 %325, %327
  %329 = urem i32 %328, 2
  %330 = icmp eq i32 %329, 0
  %331 = icmp slt i32 %326, 10
  %332 = or i1 %330, %331
  br i1 %332, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %324, %originalBB70alteredBB
  %333 = load i8*, i8** %31, align 8, !dbg !1218
  %334 = load i8, i8* %333, align 1, !dbg !1220
  %335 = icmp ne i8 %334, 0, !dbg !1221
  %336 = load i32, i32* @x.17
  %337 = load i32, i32* @y.18
  %338 = sub i32 %336, 1
  %339 = mul i32 %336, %338
  %340 = urem i32 %339, 2
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %341, %342
  br i1 %343, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br i1 %335, label %344, label %458, !dbg !1221

344:                                              ; preds = %originalBBpart272
  %345 = load i32, i32* @x.17
  %346 = load i32, i32* @y.18
  %347 = sub i32 %345, 1
  %348 = mul i32 %345, %347
  %349 = urem i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = icmp slt i32 %346, 10
  %352 = or i1 %350, %351
  br i1 %352, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %344, %originalBB74alteredBB
  %353 = load i32, i32* @x.17
  %354 = load i32, i32* @y.18
  %355 = sub i32 %353, 1
  %356 = mul i32 %353, %355
  %357 = urem i32 %356, 2
  %358 = icmp eq i32 %357, 0
  %359 = icmp slt i32 %354, 10
  %360 = or i1 %358, %359
  br i1 %360, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br label %361, !dbg !1222

361:                                              ; preds = %originalBBpart276
  %362 = load i32, i32* @x.17
  %363 = load i32, i32* @y.18
  %364 = sub i32 %362, 1
  %365 = mul i32 %362, %364
  %366 = urem i32 %365, 2
  %367 = icmp eq i32 %366, 0
  %368 = icmp slt i32 %363, 10
  %369 = or i1 %367, %368
  br i1 %369, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %361, %originalBB78alteredBB
  %370 = load i64, i64* %29, align 8, !dbg !1223
  %371 = load i64, i64* %20, align 8, !dbg !1223
  %372 = icmp ult i64 %370, %371, !dbg !1223
  %373 = load i32, i32* @x.17
  %374 = load i32, i32* @y.18
  %375 = sub i32 %373, 1
  %376 = mul i32 %373, %375
  %377 = urem i32 %376, 2
  %378 = icmp eq i32 %377, 0
  %379 = icmp slt i32 %374, 10
  %380 = or i1 %378, %379
  br i1 %380, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br i1 %372, label %381, label %403, !dbg !1226

381:                                              ; preds = %originalBBpart280
  %382 = load i32, i32* @x.17
  %383 = load i32, i32* @y.18
  %384 = sub i32 %382, 1
  %385 = mul i32 %382, %384
  %386 = urem i32 %385, 2
  %387 = icmp eq i32 %386, 0
  %388 = icmp slt i32 %383, 10
  %389 = or i1 %387, %388
  br i1 %389, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %381, %originalBB82alteredBB
  %390 = load i8*, i8** %31, align 8, !dbg !1223
  %391 = load i8, i8* %390, align 1, !dbg !1223
  %392 = load i8*, i8** %19, align 8, !dbg !1223
  %393 = load i64, i64* %29, align 8, !dbg !1223
  %394 = getelementptr inbounds i8, i8* %392, i64 %393, !dbg !1223
  store i8 %391, i8* %394, align 1, !dbg !1223
  %395 = load i32, i32* @x.17
  %396 = load i32, i32* @y.18
  %397 = sub i32 %395, 1
  %398 = mul i32 %395, %397
  %399 = urem i32 %398, 2
  %400 = icmp eq i32 %399, 0
  %401 = icmp slt i32 %396, 10
  %402 = or i1 %400, %401
  br i1 %402, label %originalBBpart284, label %originalBB82alteredBB

originalBBpart284:                                ; preds = %originalBB82
  br label %403, !dbg !1223

403:                                              ; preds = %originalBBpart284, %originalBBpart280
  %404 = load i32, i32* @x.17
  %405 = load i32, i32* @y.18
  %406 = sub i32 %404, 1
  %407 = mul i32 %404, %406
  %408 = urem i32 %407, 2
  %409 = icmp eq i32 %408, 0
  %410 = icmp slt i32 %405, 10
  %411 = or i1 %409, %410
  br i1 %411, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %403, %originalBB86alteredBB
  %412 = load i64, i64* %29, align 8, !dbg !1226
  %413 = add i64 %412, 1, !dbg !1226
  store i64 %413, i64* %29, align 8, !dbg !1226
  %414 = load i32, i32* @x.17
  %415 = load i32, i32* @y.18
  %416 = sub i32 %414, 1
  %417 = mul i32 %414, %416
  %418 = urem i32 %417, 2
  %419 = icmp eq i32 %418, 0
  %420 = icmp slt i32 %415, 10
  %421 = or i1 %419, %420
  br i1 %421, label %originalBBpart294, label %originalBB86alteredBB

originalBBpart294:                                ; preds = %originalBB86
  br label %422, !dbg !1226

422:                                              ; preds = %originalBBpart294
  %423 = load i32, i32* @x.17
  %424 = load i32, i32* @y.18
  %425 = sub i32 %423, 1
  %426 = mul i32 %423, %425
  %427 = urem i32 %426, 2
  %428 = icmp eq i32 %427, 0
  %429 = icmp slt i32 %424, 10
  %430 = or i1 %428, %429
  br i1 %430, label %originalBB96, label %originalBB96alteredBB

originalBB96:                                     ; preds = %422, %originalBB96alteredBB
  %431 = load i32, i32* @x.17
  %432 = load i32, i32* @y.18
  %433 = sub i32 %431, 1
  %434 = mul i32 %431, %433
  %435 = urem i32 %434, 2
  %436 = icmp eq i32 %435, 0
  %437 = icmp slt i32 %432, 10
  %438 = or i1 %436, %437
  br i1 %438, label %originalBBpart298, label %originalBB96alteredBB

originalBBpart298:                                ; preds = %originalBB96
  br label %439, !dbg !1226

439:                                              ; preds = %originalBBpart298
  %440 = load i32, i32* @x.17
  %441 = load i32, i32* @y.18
  %442 = sub i32 %440, 1
  %443 = mul i32 %440, %442
  %444 = urem i32 %443, 2
  %445 = icmp eq i32 %444, 0
  %446 = icmp slt i32 %441, 10
  %447 = or i1 %445, %446
  br i1 %447, label %originalBB100, label %originalBB100alteredBB

originalBB100:                                    ; preds = %439, %originalBB100alteredBB
  %448 = load i8*, i8** %31, align 8, !dbg !1227
  %449 = getelementptr inbounds i8, i8* %448, i32 1, !dbg !1227
  store i8* %449, i8** %31, align 8, !dbg !1227
  %450 = load i32, i32* @x.17
  %451 = load i32, i32* @y.18
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBBpart2102, label %originalBB100alteredBB

originalBBpart2102:                               ; preds = %originalBB100
  br label %324, !dbg !1228, !llvm.loop !1229

458:                                              ; preds = %originalBBpart272
  %459 = load i32, i32* @x.17
  %460 = load i32, i32* @y.18
  %461 = sub i32 %459, 1
  %462 = mul i32 %459, %461
  %463 = urem i32 %462, 2
  %464 = icmp eq i32 %463, 0
  %465 = icmp slt i32 %460, 10
  %466 = or i1 %464, %465
  br i1 %466, label %originalBB104, label %originalBB104alteredBB

originalBB104:                                    ; preds = %458, %originalBB104alteredBB
  %467 = load i32, i32* @x.17
  %468 = load i32, i32* @y.18
  %469 = sub i32 %467, 1
  %470 = mul i32 %467, %469
  %471 = urem i32 %470, 2
  %472 = icmp eq i32 %471, 0
  %473 = icmp slt i32 %468, 10
  %474 = or i1 %472, %473
  br i1 %474, label %originalBBpart2106, label %originalBB104alteredBB

originalBBpart2106:                               ; preds = %originalBB104
  br label %475, !dbg !1230

475:                                              ; preds = %originalBBpart2106, %originalBBpart264
  %476 = load i32, i32* @x.17
  %477 = load i32, i32* @y.18
  %478 = sub i32 %476, 1
  %479 = mul i32 %476, %478
  %480 = urem i32 %479, 2
  %481 = icmp eq i32 %480, 0
  %482 = icmp slt i32 %477, 10
  %483 = or i1 %481, %482
  br i1 %483, label %originalBB108, label %originalBB108alteredBB

originalBB108:                                    ; preds = %475, %originalBB108alteredBB
  store i8 1, i8* %33, align 1, !dbg !1231
  %484 = load i8*, i8** %27, align 8, !dbg !1232
  store i8* %484, i8** %31, align 8, !dbg !1233
  %485 = load i8*, i8** %31, align 8, !dbg !1234
  %486 = call i64 @strlen(i8* %485) #13, !dbg !1235
  store i64 %486, i64* %32, align 8, !dbg !1236
  %487 = load i32, i32* @x.17
  %488 = load i32, i32* @y.18
  %489 = sub i32 %487, 1
  %490 = mul i32 %487, %489
  %491 = urem i32 %490, 2
  %492 = icmp eq i32 %491, 0
  %493 = icmp slt i32 %488, 10
  %494 = or i1 %492, %493
  br i1 %494, label %originalBBpart2110, label %originalBB108alteredBB

originalBBpart2110:                               ; preds = %originalBB108
  br label %745, !dbg !1237

495:                                              ; preds = %originalBBpart29
  %496 = load i32, i32* @x.17
  %497 = load i32, i32* @y.18
  %498 = sub i32 %496, 1
  %499 = mul i32 %496, %498
  %500 = urem i32 %499, 2
  %501 = icmp eq i32 %500, 0
  %502 = icmp slt i32 %497, 10
  %503 = or i1 %501, %502
  br i1 %503, label %originalBB112, label %originalBB112alteredBB

originalBB112:                                    ; preds = %495, %originalBB112alteredBB
  store i8 1, i8* %33, align 1, !dbg !1238
  %504 = load i32, i32* @x.17
  %505 = load i32, i32* @y.18
  %506 = sub i32 %504, 1
  %507 = mul i32 %504, %506
  %508 = urem i32 %507, 2
  %509 = icmp eq i32 %508, 0
  %510 = icmp slt i32 %505, 10
  %511 = or i1 %509, %510
  br i1 %511, label %originalBBpart2114, label %originalBB112alteredBB

originalBBpart2114:                               ; preds = %originalBB112
  br label %512, !dbg !1239

512:                                              ; preds = %originalBBpart2114, %originalBBpart29
  %513 = load i32, i32* @x.17
  %514 = load i32, i32* @y.18
  %515 = sub i32 %513, 1
  %516 = mul i32 %513, %515
  %517 = urem i32 %516, 2
  %518 = icmp eq i32 %517, 0
  %519 = icmp slt i32 %514, 10
  %520 = or i1 %518, %519
  br i1 %520, label %originalBB116, label %originalBB116alteredBB

originalBB116:                                    ; preds = %512, %originalBB116alteredBB
  store i8 1, i8* %35, align 1, !dbg !1240
  %521 = load i32, i32* @x.17
  %522 = load i32, i32* @y.18
  %523 = sub i32 %521, 1
  %524 = mul i32 %521, %523
  %525 = urem i32 %524, 2
  %526 = icmp eq i32 %525, 0
  %527 = icmp slt i32 %522, 10
  %528 = or i1 %526, %527
  br i1 %528, label %originalBBpart2118, label %originalBB116alteredBB

originalBBpart2118:                               ; preds = %originalBB116
  br label %529, !dbg !1241

529:                                              ; preds = %originalBBpart2118, %originalBBpart29
  %530 = load i32, i32* @x.17
  %531 = load i32, i32* @y.18
  %532 = sub i32 %530, 1
  %533 = mul i32 %530, %532
  %534 = urem i32 %533, 2
  %535 = icmp eq i32 %534, 0
  %536 = icmp slt i32 %531, 10
  %537 = or i1 %535, %536
  br i1 %537, label %originalBB120, label %originalBB120alteredBB

originalBB120:                                    ; preds = %529, %originalBB120alteredBB
  %538 = load i8, i8* %35, align 1, !dbg !1242
  %539 = trunc i8 %538 to i1, !dbg !1242
  %540 = load i32, i32* @x.17
  %541 = load i32, i32* @y.18
  %542 = sub i32 %540, 1
  %543 = mul i32 %540, %542
  %544 = urem i32 %543, 2
  %545 = icmp eq i32 %544, 0
  %546 = icmp slt i32 %541, 10
  %547 = or i1 %545, %546
  br i1 %547, label %originalBBpart2122, label %originalBB120alteredBB

originalBBpart2122:                               ; preds = %originalBB120
  br i1 %539, label %565, label %548, !dbg !1244

548:                                              ; preds = %originalBBpart2122
  %549 = load i32, i32* @x.17
  %550 = load i32, i32* @y.18
  %551 = sub i32 %549, 1
  %552 = mul i32 %549, %551
  %553 = urem i32 %552, 2
  %554 = icmp eq i32 %553, 0
  %555 = icmp slt i32 %550, 10
  %556 = or i1 %554, %555
  br i1 %556, label %originalBB124, label %originalBB124alteredBB

originalBB124:                                    ; preds = %548, %originalBB124alteredBB
  store i8 1, i8* %33, align 1, !dbg !1245
  %557 = load i32, i32* @x.17
  %558 = load i32, i32* @y.18
  %559 = sub i32 %557, 1
  %560 = mul i32 %557, %559
  %561 = urem i32 %560, 2
  %562 = icmp eq i32 %561, 0
  %563 = icmp slt i32 %558, 10
  %564 = or i1 %562, %563
  br i1 %564, label %originalBBpart2126, label %originalBB124alteredBB

originalBBpart2126:                               ; preds = %originalBB124
  br label %565, !dbg !1246

565:                                              ; preds = %originalBBpart2126, %originalBBpart2122
  %566 = load i32, i32* @x.17
  %567 = load i32, i32* @y.18
  %568 = sub i32 %566, 1
  %569 = mul i32 %566, %568
  %570 = urem i32 %569, 2
  %571 = icmp eq i32 %570, 0
  %572 = icmp slt i32 %567, 10
  %573 = or i1 %571, %572
  br i1 %573, label %originalBB128, label %originalBB128alteredBB

originalBB128:                                    ; preds = %565, %originalBB128alteredBB
  %574 = load i32, i32* @x.17
  %575 = load i32, i32* @y.18
  %576 = sub i32 %574, 1
  %577 = mul i32 %574, %576
  %578 = urem i32 %577, 2
  %579 = icmp eq i32 %578, 0
  %580 = icmp slt i32 %575, 10
  %581 = or i1 %579, %580
  br i1 %581, label %originalBBpart2130, label %originalBB128alteredBB

originalBBpart2130:                               ; preds = %originalBB128
  br label %582, !dbg !1247

582:                                              ; preds = %originalBBpart2130, %originalBBpart29
  %583 = load i32, i32* @x.17
  %584 = load i32, i32* @y.18
  %585 = sub i32 %583, 1
  %586 = mul i32 %583, %585
  %587 = urem i32 %586, 2
  %588 = icmp eq i32 %587, 0
  %589 = icmp slt i32 %584, 10
  %590 = or i1 %588, %589
  br i1 %590, label %originalBB132, label %originalBB132alteredBB

originalBB132:                                    ; preds = %582, %originalBB132alteredBB
  store i32 2, i32* %23, align 4, !dbg !1248
  %591 = load i8, i8* %35, align 1, !dbg !1249
  %592 = trunc i8 %591 to i1, !dbg !1249
  %593 = load i32, i32* @x.17
  %594 = load i32, i32* @y.18
  %595 = sub i32 %593, 1
  %596 = mul i32 %593, %595
  %597 = urem i32 %596, 2
  %598 = icmp eq i32 %597, 0
  %599 = icmp slt i32 %594, 10
  %600 = or i1 %598, %599
  br i1 %600, label %originalBBpart2134, label %originalBB132alteredBB

originalBBpart2134:                               ; preds = %originalBB132
  br i1 %592, label %694, label %601, !dbg !1251

601:                                              ; preds = %originalBBpart2134
  %602 = load i32, i32* @x.17
  %603 = load i32, i32* @y.18
  %604 = sub i32 %602, 1
  %605 = mul i32 %602, %604
  %606 = urem i32 %605, 2
  %607 = icmp eq i32 %606, 0
  %608 = icmp slt i32 %603, 10
  %609 = or i1 %607, %608
  br i1 %609, label %originalBB136, label %originalBB136alteredBB

originalBB136:                                    ; preds = %601, %originalBB136alteredBB
  %610 = load i32, i32* @x.17
  %611 = load i32, i32* @y.18
  %612 = sub i32 %610, 1
  %613 = mul i32 %610, %612
  %614 = urem i32 %613, 2
  %615 = icmp eq i32 %614, 0
  %616 = icmp slt i32 %611, 10
  %617 = or i1 %615, %616
  br i1 %617, label %originalBBpart2138, label %originalBB136alteredBB

originalBBpart2138:                               ; preds = %originalBB136
  br label %618, !dbg !1252

618:                                              ; preds = %originalBBpart2138
  %619 = load i32, i32* @x.17
  %620 = load i32, i32* @y.18
  %621 = sub i32 %619, 1
  %622 = mul i32 %619, %621
  %623 = urem i32 %622, 2
  %624 = icmp eq i32 %623, 0
  %625 = icmp slt i32 %620, 10
  %626 = or i1 %624, %625
  br i1 %626, label %originalBB140, label %originalBB140alteredBB

originalBB140:                                    ; preds = %618, %originalBB140alteredBB
  %627 = load i64, i64* %29, align 8, !dbg !1253
  %628 = load i64, i64* %20, align 8, !dbg !1253
  %629 = icmp ult i64 %627, %628, !dbg !1253
  %630 = load i32, i32* @x.17
  %631 = load i32, i32* @y.18
  %632 = sub i32 %630, 1
  %633 = mul i32 %630, %632
  %634 = urem i32 %633, 2
  %635 = icmp eq i32 %634, 0
  %636 = icmp slt i32 %631, 10
  %637 = or i1 %635, %636
  br i1 %637, label %originalBBpart2142, label %originalBB140alteredBB

originalBBpart2142:                               ; preds = %originalBB140
  br i1 %629, label %638, label %658, !dbg !1256

638:                                              ; preds = %originalBBpart2142
  %639 = load i32, i32* @x.17
  %640 = load i32, i32* @y.18
  %641 = sub i32 %639, 1
  %642 = mul i32 %639, %641
  %643 = urem i32 %642, 2
  %644 = icmp eq i32 %643, 0
  %645 = icmp slt i32 %640, 10
  %646 = or i1 %644, %645
  br i1 %646, label %originalBB144, label %originalBB144alteredBB

originalBB144:                                    ; preds = %638, %originalBB144alteredBB
  %647 = load i8*, i8** %19, align 8, !dbg !1253
  %648 = load i64, i64* %29, align 8, !dbg !1253
  %649 = getelementptr inbounds i8, i8* %647, i64 %648, !dbg !1253
  store i8 39, i8* %649, align 1, !dbg !1253
  %650 = load i32, i32* @x.17
  %651 = load i32, i32* @y.18
  %652 = sub i32 %650, 1
  %653 = mul i32 %650, %652
  %654 = urem i32 %653, 2
  %655 = icmp eq i32 %654, 0
  %656 = icmp slt i32 %651, 10
  %657 = or i1 %655, %656
  br i1 %657, label %originalBBpart2146, label %originalBB144alteredBB

originalBBpart2146:                               ; preds = %originalBB144
  br label %658, !dbg !1253

658:                                              ; preds = %originalBBpart2146, %originalBBpart2142
  %659 = load i32, i32* @x.17
  %660 = load i32, i32* @y.18
  %661 = sub i32 %659, 1
  %662 = mul i32 %659, %661
  %663 = urem i32 %662, 2
  %664 = icmp eq i32 %663, 0
  %665 = icmp slt i32 %660, 10
  %666 = or i1 %664, %665
  br i1 %666, label %originalBB148, label %originalBB148alteredBB

originalBB148:                                    ; preds = %658, %originalBB148alteredBB
  %667 = load i64, i64* %29, align 8, !dbg !1256
  %668 = add i64 %667, 1, !dbg !1256
  store i64 %668, i64* %29, align 8, !dbg !1256
  %669 = load i32, i32* @x.17
  %670 = load i32, i32* @y.18
  %671 = sub i32 %669, 1
  %672 = mul i32 %669, %671
  %673 = urem i32 %672, 2
  %674 = icmp eq i32 %673, 0
  %675 = icmp slt i32 %670, 10
  %676 = or i1 %674, %675
  br i1 %676, label %originalBBpart2158, label %originalBB148alteredBB

originalBBpart2158:                               ; preds = %originalBB148
  br label %677, !dbg !1256

677:                                              ; preds = %originalBBpart2158
  %678 = load i32, i32* @x.17
  %679 = load i32, i32* @y.18
  %680 = sub i32 %678, 1
  %681 = mul i32 %678, %680
  %682 = urem i32 %681, 2
  %683 = icmp eq i32 %682, 0
  %684 = icmp slt i32 %679, 10
  %685 = or i1 %683, %684
  br i1 %685, label %originalBB160, label %originalBB160alteredBB

originalBB160:                                    ; preds = %677, %originalBB160alteredBB
  %686 = load i32, i32* @x.17
  %687 = load i32, i32* @y.18
  %688 = sub i32 %686, 1
  %689 = mul i32 %686, %688
  %690 = urem i32 %689, 2
  %691 = icmp eq i32 %690, 0
  %692 = icmp slt i32 %687, 10
  %693 = or i1 %691, %692
  br i1 %693, label %originalBBpart2162, label %originalBB160alteredBB

originalBBpart2162:                               ; preds = %originalBB160
  br label %694, !dbg !1256

694:                                              ; preds = %originalBBpart2162, %originalBBpart2134
  %695 = load i32, i32* @x.17
  %696 = load i32, i32* @y.18
  %697 = sub i32 %695, 1
  %698 = mul i32 %695, %697
  %699 = urem i32 %698, 2
  %700 = icmp eq i32 %699, 0
  %701 = icmp slt i32 %696, 10
  %702 = or i1 %700, %701
  br i1 %702, label %originalBB164, label %originalBB164alteredBB

originalBB164:                                    ; preds = %694, %originalBB164alteredBB
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.54, i64 0, i64 0), i8** %31, align 8, !dbg !1257
  store i64 1, i64* %32, align 8, !dbg !1258
  %703 = load i32, i32* @x.17
  %704 = load i32, i32* @y.18
  %705 = sub i32 %703, 1
  %706 = mul i32 %703, %705
  %707 = urem i32 %706, 2
  %708 = icmp eq i32 %707, 0
  %709 = icmp slt i32 %704, 10
  %710 = or i1 %708, %709
  br i1 %710, label %originalBBpart2166, label %originalBB164alteredBB

originalBBpart2166:                               ; preds = %originalBB164
  br label %745, !dbg !1259

711:                                              ; preds = %originalBBpart29
  %712 = load i32, i32* @x.17
  %713 = load i32, i32* @y.18
  %714 = sub i32 %712, 1
  %715 = mul i32 %712, %714
  %716 = urem i32 %715, 2
  %717 = icmp eq i32 %716, 0
  %718 = icmp slt i32 %713, 10
  %719 = or i1 %717, %718
  br i1 %719, label %originalBB168, label %originalBB168alteredBB

originalBB168:                                    ; preds = %711, %originalBB168alteredBB
  store i8 0, i8* %35, align 1, !dbg !1260
  %720 = load i32, i32* @x.17
  %721 = load i32, i32* @y.18
  %722 = sub i32 %720, 1
  %723 = mul i32 %720, %722
  %724 = urem i32 %723, 2
  %725 = icmp eq i32 %724, 0
  %726 = icmp slt i32 %721, 10
  %727 = or i1 %725, %726
  br i1 %727, label %originalBBpart2170, label %originalBB168alteredBB

originalBBpart2170:                               ; preds = %originalBB168
  br label %745, !dbg !1261

728:                                              ; preds = %originalBBpart29
  %729 = load i32, i32* @x.17
  %730 = load i32, i32* @y.18
  %731 = sub i32 %729, 1
  %732 = mul i32 %729, %731
  %733 = urem i32 %732, 2
  %734 = icmp eq i32 %733, 0
  %735 = icmp slt i32 %730, 10
  %736 = or i1 %734, %735
  br i1 %736, label %originalBB172, label %originalBB172alteredBB

originalBB172:                                    ; preds = %728, %originalBB172alteredBB
  call void @abort() #12, !dbg !1262
  %737 = load i32, i32* @x.17
  %738 = load i32, i32* @y.18
  %739 = sub i32 %737, 1
  %740 = mul i32 %737, %739
  %741 = urem i32 %740, 2
  %742 = icmp eq i32 %741, 0
  %743 = icmp slt i32 %738, 10
  %744 = or i1 %742, %743
  br i1 %744, label %originalBBpart2174, label %originalBB172alteredBB

originalBBpart2174:                               ; preds = %originalBB172
  unreachable, !dbg !1262

745:                                              ; preds = %originalBBpart2170, %originalBBpart2166, %originalBBpart2110, %originalBBpart252, %originalBBpart248
  %746 = load i32, i32* @x.17
  %747 = load i32, i32* @y.18
  %748 = sub i32 %746, 1
  %749 = mul i32 %746, %748
  %750 = urem i32 %749, 2
  %751 = icmp eq i32 %750, 0
  %752 = icmp slt i32 %747, 10
  %753 = or i1 %751, %752
  br i1 %753, label %originalBB176, label %originalBB176alteredBB

originalBB176:                                    ; preds = %745, %originalBB176alteredBB
  store i64 0, i64* %28, align 8, !dbg !1263
  %754 = load i32, i32* @x.17
  %755 = load i32, i32* @y.18
  %756 = sub i32 %754, 1
  %757 = mul i32 %754, %756
  %758 = urem i32 %757, 2
  %759 = icmp eq i32 %758, 0
  %760 = icmp slt i32 %755, 10
  %761 = or i1 %759, %760
  br i1 %761, label %originalBBpart2178, label %originalBB176alteredBB

originalBBpart2178:                               ; preds = %originalBB176
  br label %762, !dbg !1265

762:                                              ; preds = %originalBBpart21841, %originalBBpart2178
  %763 = load i32, i32* @x.17
  %764 = load i32, i32* @y.18
  %765 = sub i32 %763, 1
  %766 = mul i32 %763, %765
  %767 = urem i32 %766, 2
  %768 = icmp eq i32 %767, 0
  %769 = icmp slt i32 %764, 10
  %770 = or i1 %768, %769
  br i1 %770, label %originalBB180, label %originalBB180alteredBB

originalBB180:                                    ; preds = %762, %originalBB180alteredBB
  %771 = load i64, i64* %22, align 8, !dbg !1266
  %772 = icmp eq i64 %771, -1, !dbg !1268
  %773 = load i32, i32* @x.17
  %774 = load i32, i32* @y.18
  %775 = sub i32 %773, 1
  %776 = mul i32 %773, %775
  %777 = urem i32 %776, 2
  %778 = icmp eq i32 %777, 0
  %779 = icmp slt i32 %774, 10
  %780 = or i1 %778, %779
  br i1 %780, label %originalBBpart2182, label %originalBB180alteredBB

originalBBpart2182:                               ; preds = %originalBB180
  br i1 %772, label %781, label %805, !dbg !1266

781:                                              ; preds = %originalBBpart2182
  %782 = load i32, i32* @x.17
  %783 = load i32, i32* @y.18
  %784 = sub i32 %782, 1
  %785 = mul i32 %782, %784
  %786 = urem i32 %785, 2
  %787 = icmp eq i32 %786, 0
  %788 = icmp slt i32 %783, 10
  %789 = or i1 %787, %788
  br i1 %789, label %originalBB184, label %originalBB184alteredBB

originalBB184:                                    ; preds = %781, %originalBB184alteredBB
  %790 = load i8*, i8** %21, align 8, !dbg !1269
  %791 = load i64, i64* %28, align 8, !dbg !1270
  %792 = getelementptr inbounds i8, i8* %790, i64 %791, !dbg !1269
  %793 = load i8, i8* %792, align 1, !dbg !1269
  %794 = sext i8 %793 to i32, !dbg !1269
  %795 = icmp eq i32 %794, 0, !dbg !1271
  %796 = zext i1 %795 to i32, !dbg !1271
  %797 = load i32, i32* @x.17
  %798 = load i32, i32* @y.18
  %799 = sub i32 %797, 1
  %800 = mul i32 %797, %799
  %801 = urem i32 %800, 2
  %802 = icmp eq i32 %801, 0
  %803 = icmp slt i32 %798, 10
  %804 = or i1 %802, %803
  br i1 %804, label %originalBBpart2186, label %originalBB184alteredBB

originalBBpart2186:                               ; preds = %originalBB184
  br label %826, !dbg !1266

805:                                              ; preds = %originalBBpart2182
  %806 = load i32, i32* @x.17
  %807 = load i32, i32* @y.18
  %808 = sub i32 %806, 1
  %809 = mul i32 %806, %808
  %810 = urem i32 %809, 2
  %811 = icmp eq i32 %810, 0
  %812 = icmp slt i32 %807, 10
  %813 = or i1 %811, %812
  br i1 %813, label %originalBB188, label %originalBB188alteredBB

originalBB188:                                    ; preds = %805, %originalBB188alteredBB
  %814 = load i64, i64* %28, align 8, !dbg !1272
  %815 = load i64, i64* %22, align 8, !dbg !1273
  %816 = icmp eq i64 %814, %815, !dbg !1274
  %817 = zext i1 %816 to i32, !dbg !1274
  %818 = load i32, i32* @x.17
  %819 = load i32, i32* @y.18
  %820 = sub i32 %818, 1
  %821 = mul i32 %818, %820
  %822 = urem i32 %821, 2
  %823 = icmp eq i32 %822, 0
  %824 = icmp slt i32 %819, 10
  %825 = or i1 %823, %824
  br i1 %825, label %originalBBpart2190, label %originalBB188alteredBB

originalBBpart2190:                               ; preds = %originalBB188
  br label %826, !dbg !1266

826:                                              ; preds = %originalBBpart2190, %originalBBpart2186
  %827 = phi i32 [ %796, %originalBBpart2186 ], [ %817, %originalBBpart2190 ], !dbg !1266
  %828 = load i32, i32* @x.17
  %829 = load i32, i32* @y.18
  %830 = sub i32 %828, 1
  %831 = mul i32 %828, %830
  %832 = urem i32 %831, 2
  %833 = icmp eq i32 %832, 0
  %834 = icmp slt i32 %829, 10
  %835 = or i1 %833, %834
  br i1 %835, label %originalBB192, label %originalBB192alteredBB

originalBB192:                                    ; preds = %826, %originalBB192alteredBB
  %836 = icmp ne i32 %827, 0, !dbg !1275
  %837 = xor i1 %836, true, !dbg !1275
  %838 = load i32, i32* @x.17
  %839 = load i32, i32* @y.18
  %840 = sub i32 %838, 1
  %841 = mul i32 %838, %840
  %842 = urem i32 %841, 2
  %843 = icmp eq i32 %842, 0
  %844 = icmp slt i32 %839, 10
  %845 = or i1 %843, %844
  br i1 %845, label %originalBBpart2209, label %originalBB192alteredBB

originalBBpart2209:                               ; preds = %originalBB192
  br i1 %837, label %846, label %6460, !dbg !1276

846:                                              ; preds = %originalBBpart2209
  call void @llvm.dbg.declare(metadata i8* %39, metadata !1277, metadata !DIExpression()), !dbg !1279
  call void @llvm.dbg.declare(metadata i8* %40, metadata !1280, metadata !DIExpression()), !dbg !1281
  call void @llvm.dbg.declare(metadata i8* %41, metadata !1282, metadata !DIExpression()), !dbg !1283
  %847 = load i32, i32* @x.17
  %848 = load i32, i32* @y.18
  %849 = sub i32 %847, 1
  %850 = mul i32 %847, %849
  %851 = urem i32 %850, 2
  %852 = icmp eq i32 %851, 0
  %853 = icmp slt i32 %848, 10
  %854 = or i1 %852, %853
  br i1 %854, label %originalBB211, label %originalBB211alteredBB

originalBB211:                                    ; preds = %846, %originalBB211alteredBB
  store i8 0, i8* %41, align 1, !dbg !1283
  call void @llvm.dbg.declare(metadata i8* %42, metadata !1284, metadata !DIExpression()), !dbg !1285
  store i8 0, i8* %42, align 1, !dbg !1285
  call void @llvm.dbg.declare(metadata i8* %43, metadata !1286, metadata !DIExpression()), !dbg !1287
  store i8 0, i8* %43, align 1, !dbg !1287
  %855 = load i8, i8* %33, align 1, !dbg !1288
  %856 = trunc i8 %855 to i1, !dbg !1288
  %857 = load i32, i32* @x.17
  %858 = load i32, i32* @y.18
  %859 = sub i32 %857, 1
  %860 = mul i32 %857, %859
  %861 = urem i32 %860, 2
  %862 = icmp eq i32 %861, 0
  %863 = icmp slt i32 %858, 10
  %864 = or i1 %862, %863
  br i1 %864, label %originalBBpart2213, label %originalBB211alteredBB

originalBBpart2213:                               ; preds = %originalBB211
  br i1 %856, label %865, label %1077, !dbg !1290

865:                                              ; preds = %originalBBpart2213
  %866 = load i32, i32* @x.17
  %867 = load i32, i32* @y.18
  %868 = sub i32 %866, 1
  %869 = mul i32 %866, %868
  %870 = urem i32 %869, 2
  %871 = icmp eq i32 %870, 0
  %872 = icmp slt i32 %867, 10
  %873 = or i1 %871, %872
  br i1 %873, label %originalBB215, label %originalBB215alteredBB

originalBB215:                                    ; preds = %865, %originalBB215alteredBB
  %874 = load i32, i32* %23, align 4, !dbg !1291
  %875 = icmp ne i32 %874, 2, !dbg !1292
  %876 = load i32, i32* @x.17
  %877 = load i32, i32* @y.18
  %878 = sub i32 %876, 1
  %879 = mul i32 %876, %878
  %880 = urem i32 %879, 2
  %881 = icmp eq i32 %880, 0
  %882 = icmp slt i32 %877, 10
  %883 = or i1 %881, %882
  br i1 %883, label %originalBBpart2217, label %originalBB215alteredBB

originalBBpart2217:                               ; preds = %originalBB215
  br i1 %875, label %884, label %1077, !dbg !1293

884:                                              ; preds = %originalBBpart2217
  %885 = load i32, i32* @x.17
  %886 = load i32, i32* @y.18
  %887 = sub i32 %885, 1
  %888 = mul i32 %885, %887
  %889 = urem i32 %888, 2
  %890 = icmp eq i32 %889, 0
  %891 = icmp slt i32 %886, 10
  %892 = or i1 %890, %891
  br i1 %892, label %originalBB219, label %originalBB219alteredBB

originalBB219:                                    ; preds = %884, %originalBB219alteredBB
  %893 = load i64, i64* %32, align 8, !dbg !1294
  %894 = icmp ne i64 %893, 0, !dbg !1294
  %895 = load i32, i32* @x.17
  %896 = load i32, i32* @y.18
  %897 = sub i32 %895, 1
  %898 = mul i32 %895, %897
  %899 = urem i32 %898, 2
  %900 = icmp eq i32 %899, 0
  %901 = icmp slt i32 %896, 10
  %902 = or i1 %900, %901
  br i1 %902, label %originalBBpart2221, label %originalBB219alteredBB

originalBBpart2221:                               ; preds = %originalBB219
  br i1 %894, label %903, label %1077, !dbg !1295

903:                                              ; preds = %originalBBpart2221
  %904 = load i32, i32* @x.17
  %905 = load i32, i32* @y.18
  %906 = sub i32 %904, 1
  %907 = mul i32 %904, %906
  %908 = urem i32 %907, 2
  %909 = icmp eq i32 %908, 0
  %910 = icmp slt i32 %905, 10
  %911 = or i1 %909, %910
  br i1 %911, label %originalBB223, label %originalBB223alteredBB

originalBB223:                                    ; preds = %903, %originalBB223alteredBB
  %912 = load i64, i64* %28, align 8, !dbg !1296
  %913 = load i64, i64* %32, align 8, !dbg !1297
  %914 = add i64 %912, %913, !dbg !1298
  %915 = load i64, i64* %22, align 8, !dbg !1299
  %916 = icmp eq i64 %915, -1, !dbg !1300
  %917 = load i32, i32* @x.17
  %918 = load i32, i32* @y.18
  %919 = sub i32 %917, 1
  %920 = mul i32 %917, %919
  %921 = urem i32 %920, 2
  %922 = icmp eq i32 %921, 0
  %923 = icmp slt i32 %918, 10
  %924 = or i1 %922, %923
  br i1 %924, label %originalBBpart2232, label %originalBB223alteredBB

originalBBpart2232:                               ; preds = %originalBB223
  br i1 %916, label %925, label %963, !dbg !1301

925:                                              ; preds = %originalBBpart2232
  %926 = load i32, i32* @x.17
  %927 = load i32, i32* @y.18
  %928 = sub i32 %926, 1
  %929 = mul i32 %926, %928
  %930 = urem i32 %929, 2
  %931 = icmp eq i32 %930, 0
  %932 = icmp slt i32 %927, 10
  %933 = or i1 %931, %932
  br i1 %933, label %originalBB234, label %originalBB234alteredBB

originalBB234:                                    ; preds = %925, %originalBB234alteredBB
  %934 = load i64, i64* %32, align 8, !dbg !1302
  %935 = icmp ult i64 1, %934, !dbg !1303
  %936 = load i32, i32* @x.17
  %937 = load i32, i32* @y.18
  %938 = sub i32 %936, 1
  %939 = mul i32 %936, %938
  %940 = urem i32 %939, 2
  %941 = icmp eq i32 %940, 0
  %942 = icmp slt i32 %937, 10
  %943 = or i1 %941, %942
  br i1 %943, label %originalBBpart2236, label %originalBB234alteredBB

originalBBpart2236:                               ; preds = %originalBB234
  br i1 %935, label %944, label %963, !dbg !1299

944:                                              ; preds = %originalBBpart2236
  %945 = load i32, i32* @x.17
  %946 = load i32, i32* @y.18
  %947 = sub i32 %945, 1
  %948 = mul i32 %945, %947
  %949 = urem i32 %948, 2
  %950 = icmp eq i32 %949, 0
  %951 = icmp slt i32 %946, 10
  %952 = or i1 %950, %951
  br i1 %952, label %originalBB238, label %originalBB238alteredBB

originalBB238:                                    ; preds = %944, %originalBB238alteredBB
  %953 = load i8*, i8** %21, align 8, !dbg !1304
  %954 = call i64 @strlen(i8* %953) #13, !dbg !1305
  store i64 %954, i64* %22, align 8, !dbg !1306
  %955 = load i32, i32* @x.17
  %956 = load i32, i32* @y.18
  %957 = sub i32 %955, 1
  %958 = mul i32 %955, %957
  %959 = urem i32 %958, 2
  %960 = icmp eq i32 %959, 0
  %961 = icmp slt i32 %956, 10
  %962 = or i1 %960, %961
  br i1 %962, label %originalBBpart2240, label %originalBB238alteredBB

originalBBpart2240:                               ; preds = %originalBB238
  br label %981, !dbg !1299

963:                                              ; preds = %originalBBpart2236, %originalBBpart2232
  %964 = load i32, i32* @x.17
  %965 = load i32, i32* @y.18
  %966 = sub i32 %964, 1
  %967 = mul i32 %964, %966
  %968 = urem i32 %967, 2
  %969 = icmp eq i32 %968, 0
  %970 = icmp slt i32 %965, 10
  %971 = or i1 %969, %970
  br i1 %971, label %originalBB242, label %originalBB242alteredBB

originalBB242:                                    ; preds = %963, %originalBB242alteredBB
  %972 = load i64, i64* %22, align 8, !dbg !1307
  %973 = load i32, i32* @x.17
  %974 = load i32, i32* @y.18
  %975 = sub i32 %973, 1
  %976 = mul i32 %973, %975
  %977 = urem i32 %976, 2
  %978 = icmp eq i32 %977, 0
  %979 = icmp slt i32 %974, 10
  %980 = or i1 %978, %979
  br i1 %980, label %originalBBpart2244, label %originalBB242alteredBB

originalBBpart2244:                               ; preds = %originalBB242
  br label %981, !dbg !1299

981:                                              ; preds = %originalBBpart2244, %originalBBpart2240
  %982 = phi i64 [ %954, %originalBBpart2240 ], [ %972, %originalBBpart2244 ], !dbg !1299
  %983 = load i32, i32* @x.17
  %984 = load i32, i32* @y.18
  %985 = sub i32 %983, 1
  %986 = mul i32 %983, %985
  %987 = urem i32 %986, 2
  %988 = icmp eq i32 %987, 0
  %989 = icmp slt i32 %984, 10
  %990 = or i1 %988, %989
  br i1 %990, label %originalBB246, label %originalBB246alteredBB

originalBB246:                                    ; preds = %981, %originalBB246alteredBB
  %991 = icmp ule i64 %914, %982, !dbg !1308
  %992 = load i32, i32* @x.17
  %993 = load i32, i32* @y.18
  %994 = sub i32 %992, 1
  %995 = mul i32 %992, %994
  %996 = urem i32 %995, 2
  %997 = icmp eq i32 %996, 0
  %998 = icmp slt i32 %993, 10
  %999 = or i1 %997, %998
  br i1 %999, label %originalBBpart2248, label %originalBB246alteredBB

originalBBpart2248:                               ; preds = %originalBB246
  br i1 %991, label %1000, label %1077, !dbg !1309

1000:                                             ; preds = %originalBBpart2248
  %1001 = load i32, i32* @x.17
  %1002 = load i32, i32* @y.18
  %1003 = sub i32 %1001, 1
  %1004 = mul i32 %1001, %1003
  %1005 = urem i32 %1004, 2
  %1006 = icmp eq i32 %1005, 0
  %1007 = icmp slt i32 %1002, 10
  %1008 = or i1 %1006, %1007
  br i1 %1008, label %originalBB250, label %originalBB250alteredBB

originalBB250:                                    ; preds = %1000, %originalBB250alteredBB
  %1009 = load i8*, i8** %21, align 8, !dbg !1310
  %1010 = load i64, i64* %28, align 8, !dbg !1311
  %1011 = getelementptr inbounds i8, i8* %1009, i64 %1010, !dbg !1312
  %1012 = load i8*, i8** %31, align 8, !dbg !1313
  %1013 = load i64, i64* %32, align 8, !dbg !1314
  %1014 = call i32 @memcmp(i8* %1011, i8* %1012, i64 %1013) #13, !dbg !1315
  %1015 = icmp eq i32 %1014, 0, !dbg !1316
  %1016 = load i32, i32* @x.17
  %1017 = load i32, i32* @y.18
  %1018 = sub i32 %1016, 1
  %1019 = mul i32 %1016, %1018
  %1020 = urem i32 %1019, 2
  %1021 = icmp eq i32 %1020, 0
  %1022 = icmp slt i32 %1017, 10
  %1023 = or i1 %1021, %1022
  br i1 %1023, label %originalBBpart2252, label %originalBB250alteredBB

originalBBpart2252:                               ; preds = %originalBB250
  br i1 %1015, label %1024, label %1077, !dbg !1317

1024:                                             ; preds = %originalBBpart2252
  %1025 = load i32, i32* @x.17
  %1026 = load i32, i32* @y.18
  %1027 = sub i32 %1025, 1
  %1028 = mul i32 %1025, %1027
  %1029 = urem i32 %1028, 2
  %1030 = icmp eq i32 %1029, 0
  %1031 = icmp slt i32 %1026, 10
  %1032 = or i1 %1030, %1031
  br i1 %1032, label %originalBB254, label %originalBB254alteredBB

originalBB254:                                    ; preds = %1024, %originalBB254alteredBB
  %1033 = load i8, i8* %35, align 1, !dbg !1318
  %1034 = trunc i8 %1033 to i1, !dbg !1318
  %1035 = load i32, i32* @x.17
  %1036 = load i32, i32* @y.18
  %1037 = sub i32 %1035, 1
  %1038 = mul i32 %1035, %1037
  %1039 = urem i32 %1038, 2
  %1040 = icmp eq i32 %1039, 0
  %1041 = icmp slt i32 %1036, 10
  %1042 = or i1 %1040, %1041
  br i1 %1042, label %originalBBpart2256, label %originalBB254alteredBB

originalBBpart2256:                               ; preds = %originalBB254
  br i1 %1034, label %1043, label %1060, !dbg !1321

1043:                                             ; preds = %originalBBpart2256
  %1044 = load i32, i32* @x.17
  %1045 = load i32, i32* @y.18
  %1046 = sub i32 %1044, 1
  %1047 = mul i32 %1044, %1046
  %1048 = urem i32 %1047, 2
  %1049 = icmp eq i32 %1048, 0
  %1050 = icmp slt i32 %1045, 10
  %1051 = or i1 %1049, %1050
  br i1 %1051, label %originalBB258, label %originalBB258alteredBB

originalBB258:                                    ; preds = %1043, %originalBB258alteredBB
  %1052 = load i32, i32* @x.17
  %1053 = load i32, i32* @y.18
  %1054 = sub i32 %1052, 1
  %1055 = mul i32 %1052, %1054
  %1056 = urem i32 %1055, 2
  %1057 = icmp eq i32 %1056, 0
  %1058 = icmp slt i32 %1053, 10
  %1059 = or i1 %1057, %1058
  br i1 %1059, label %originalBBpart2260, label %originalBB258alteredBB

originalBBpart2260:                               ; preds = %originalBB258
  br label %6990, !dbg !1322

1060:                                             ; preds = %originalBBpart2256
  %1061 = load i32, i32* @x.17
  %1062 = load i32, i32* @y.18
  %1063 = sub i32 %1061, 1
  %1064 = mul i32 %1061, %1063
  %1065 = urem i32 %1064, 2
  %1066 = icmp eq i32 %1065, 0
  %1067 = icmp slt i32 %1062, 10
  %1068 = or i1 %1066, %1067
  br i1 %1068, label %originalBB262, label %originalBB262alteredBB

originalBB262:                                    ; preds = %1060, %originalBB262alteredBB
  store i8 1, i8* %41, align 1, !dbg !1323
  %1069 = load i32, i32* @x.17
  %1070 = load i32, i32* @y.18
  %1071 = sub i32 %1069, 1
  %1072 = mul i32 %1069, %1071
  %1073 = urem i32 %1072, 2
  %1074 = icmp eq i32 %1073, 0
  %1075 = icmp slt i32 %1070, 10
  %1076 = or i1 %1074, %1075
  br i1 %1076, label %originalBBpart2264, label %originalBB262alteredBB

originalBBpart2264:                               ; preds = %originalBB262
  br label %1077, !dbg !1324

1077:                                             ; preds = %originalBBpart2264, %originalBBpart2252, %originalBBpart2248, %originalBBpart2221, %originalBBpart2217, %originalBBpart2213
  %1078 = load i32, i32* @x.17
  %1079 = load i32, i32* @y.18
  %1080 = sub i32 %1078, 1
  %1081 = mul i32 %1078, %1080
  %1082 = urem i32 %1081, 2
  %1083 = icmp eq i32 %1082, 0
  %1084 = icmp slt i32 %1079, 10
  %1085 = or i1 %1083, %1084
  br i1 %1085, label %originalBB266, label %originalBB266alteredBB

originalBB266:                                    ; preds = %1077, %originalBB266alteredBB
  %1086 = load i8*, i8** %21, align 8, !dbg !1325
  %1087 = load i64, i64* %28, align 8, !dbg !1326
  %1088 = getelementptr inbounds i8, i8* %1086, i64 %1087, !dbg !1325
  %1089 = load i8, i8* %1088, align 1, !dbg !1325
  store i8 %1089, i8* %39, align 1, !dbg !1327
  %1090 = load i8, i8* %39, align 1, !dbg !1328
  %1091 = zext i8 %1090 to i32, !dbg !1328
  %1092 = load i32, i32* @x.17
  %1093 = load i32, i32* @y.18
  %1094 = sub i32 %1092, 1
  %1095 = mul i32 %1092, %1094
  %1096 = urem i32 %1095, 2
  %1097 = icmp eq i32 %1096, 0
  %1098 = icmp slt i32 %1093, 10
  %1099 = or i1 %1097, %1098
  br i1 %1099, label %originalBBpart2268, label %originalBB266alteredBB

originalBBpart2268:                               ; preds = %originalBB266
  switch i32 %1091, label %3536 [
    i32 0, label %1100
    i32 63, label %1893
    i32 7, label %2501
    i32 8, label %2518
    i32 12, label %2535
    i32 10, label %2552
    i32 13, label %2569
    i32 9, label %2586
    i32 11, label %2603
    i32 92, label %2620
    i32 123, label %2910
    i32 125, label %2910
    i32 35, label %3004
    i32 126, label %3004
    i32 32, label %3057
    i32 33, label %3074
    i32 34, label %3074
    i32 36, label %3074
    i32 38, label %3074
    i32 40, label %3074
    i32 41, label %3074
    i32 42, label %3074
    i32 59, label %3074
    i32 60, label %3074
    i32 61, label %3074
    i32 62, label %3074
    i32 91, label %3074
    i32 94, label %3074
    i32 96, label %3074
    i32 124, label %3074
    i32 39, label %3146
    i32 37, label %3519
    i32 43, label %3519
    i32 44, label %3519
    i32 45, label %3519
    i32 46, label %3519
    i32 47, label %3519
    i32 48, label %3519
    i32 49, label %3519
    i32 50, label %3519
    i32 51, label %3519
    i32 52, label %3519
    i32 53, label %3519
    i32 54, label %3519
    i32 55, label %3519
    i32 56, label %3519
    i32 57, label %3519
    i32 58, label %3519
    i32 65, label %3519
    i32 66, label %3519
    i32 67, label %3519
    i32 68, label %3519
    i32 69, label %3519
    i32 70, label %3519
    i32 71, label %3519
    i32 72, label %3519
    i32 73, label %3519
    i32 74, label %3519
    i32 75, label %3519
    i32 76, label %3519
    i32 77, label %3519
    i32 78, label %3519
    i32 79, label %3519
    i32 80, label %3519
    i32 81, label %3519
    i32 82, label %3519
    i32 83, label %3519
    i32 84, label %3519
    i32 85, label %3519
    i32 86, label %3519
    i32 87, label %3519
    i32 88, label %3519
    i32 89, label %3519
    i32 90, label %3519
    i32 93, label %3519
    i32 95, label %3519
    i32 97, label %3519
    i32 98, label %3519
    i32 99, label %3519
    i32 100, label %3519
    i32 101, label %3519
    i32 102, label %3519
    i32 103, label %3519
    i32 104, label %3519
    i32 105, label %3519
    i32 106, label %3519
    i32 107, label %3519
    i32 108, label %3519
    i32 109, label %3519
    i32 110, label %3519
    i32 111, label %3519
    i32 112, label %3519
    i32 113, label %3519
    i32 114, label %3519
    i32 115, label %3519
    i32 116, label %3519
    i32 117, label %3519
    i32 118, label %3519
    i32 119, label %3519
    i32 120, label %3519
    i32 121, label %3519
    i32 122, label %3519
  ], !dbg !1329

1100:                                             ; preds = %originalBBpart2268
  %1101 = load i32, i32* @x.17
  %1102 = load i32, i32* @y.18
  %1103 = sub i32 %1101, 1
  %1104 = mul i32 %1101, %1103
  %1105 = urem i32 %1104, 2
  %1106 = icmp eq i32 %1105, 0
  %1107 = icmp slt i32 %1102, 10
  %1108 = or i1 %1106, %1107
  br i1 %1108, label %originalBB270, label %originalBB270alteredBB

originalBB270:                                    ; preds = %1100, %originalBB270alteredBB
  %1109 = load i8, i8* %33, align 1, !dbg !1330
  %1110 = trunc i8 %1109 to i1, !dbg !1330
  %1111 = load i32, i32* @x.17
  %1112 = load i32, i32* @y.18
  %1113 = sub i32 %1111, 1
  %1114 = mul i32 %1111, %1113
  %1115 = urem i32 %1114, 2
  %1116 = icmp eq i32 %1115, 0
  %1117 = icmp slt i32 %1112, 10
  %1118 = or i1 %1116, %1117
  br i1 %1118, label %originalBBpart2272, label %originalBB270alteredBB

originalBBpart2272:                               ; preds = %originalBB270
  br i1 %1110, label %1119, label %1822, !dbg !1333

1119:                                             ; preds = %originalBBpart2272
  %1120 = load i32, i32* @x.17
  %1121 = load i32, i32* @y.18
  %1122 = sub i32 %1120, 1
  %1123 = mul i32 %1120, %1122
  %1124 = urem i32 %1123, 2
  %1125 = icmp eq i32 %1124, 0
  %1126 = icmp slt i32 %1121, 10
  %1127 = or i1 %1125, %1126
  br i1 %1127, label %originalBB274, label %originalBB274alteredBB

originalBB274:                                    ; preds = %1119, %originalBB274alteredBB
  %1128 = load i32, i32* @x.17
  %1129 = load i32, i32* @y.18
  %1130 = sub i32 %1128, 1
  %1131 = mul i32 %1128, %1130
  %1132 = urem i32 %1131, 2
  %1133 = icmp eq i32 %1132, 0
  %1134 = icmp slt i32 %1129, 10
  %1135 = or i1 %1133, %1134
  br i1 %1135, label %originalBBpart2276, label %originalBB274alteredBB

originalBBpart2276:                               ; preds = %originalBB274
  br label %1136, !dbg !1334

1136:                                             ; preds = %originalBBpart2276
  %1137 = load i32, i32* @x.17
  %1138 = load i32, i32* @y.18
  %1139 = sub i32 %1137, 1
  %1140 = mul i32 %1137, %1139
  %1141 = urem i32 %1140, 2
  %1142 = icmp eq i32 %1141, 0
  %1143 = icmp slt i32 %1138, 10
  %1144 = or i1 %1142, %1143
  br i1 %1144, label %originalBB278, label %originalBB278alteredBB

originalBB278:                                    ; preds = %1136, %originalBB278alteredBB
  %1145 = load i8, i8* %35, align 1, !dbg !1336
  %1146 = trunc i8 %1145 to i1, !dbg !1336
  %1147 = load i32, i32* @x.17
  %1148 = load i32, i32* @y.18
  %1149 = sub i32 %1147, 1
  %1150 = mul i32 %1147, %1149
  %1151 = urem i32 %1150, 2
  %1152 = icmp eq i32 %1151, 0
  %1153 = icmp slt i32 %1148, 10
  %1154 = or i1 %1152, %1153
  br i1 %1154, label %originalBBpart2280, label %originalBB278alteredBB

originalBBpart2280:                               ; preds = %originalBB278
  br i1 %1146, label %1155, label %1172, !dbg !1339

1155:                                             ; preds = %originalBBpart2280
  %1156 = load i32, i32* @x.17
  %1157 = load i32, i32* @y.18
  %1158 = sub i32 %1156, 1
  %1159 = mul i32 %1156, %1158
  %1160 = urem i32 %1159, 2
  %1161 = icmp eq i32 %1160, 0
  %1162 = icmp slt i32 %1157, 10
  %1163 = or i1 %1161, %1162
  br i1 %1163, label %originalBB282, label %originalBB282alteredBB

originalBB282:                                    ; preds = %1155, %originalBB282alteredBB
  %1164 = load i32, i32* @x.17
  %1165 = load i32, i32* @y.18
  %1166 = sub i32 %1164, 1
  %1167 = mul i32 %1164, %1166
  %1168 = urem i32 %1167, 2
  %1169 = icmp eq i32 %1168, 0
  %1170 = icmp slt i32 %1165, 10
  %1171 = or i1 %1169, %1170
  br i1 %1171, label %originalBBpart2284, label %originalBB282alteredBB

originalBBpart2284:                               ; preds = %originalBB282
  br label %6990, !dbg !1336

1172:                                             ; preds = %originalBBpart2280
  %1173 = load i32, i32* @x.17
  %1174 = load i32, i32* @y.18
  %1175 = sub i32 %1173, 1
  %1176 = mul i32 %1173, %1175
  %1177 = urem i32 %1176, 2
  %1178 = icmp eq i32 %1177, 0
  %1179 = icmp slt i32 %1174, 10
  %1180 = or i1 %1178, %1179
  br i1 %1180, label %originalBB286, label %originalBB286alteredBB

originalBB286:                                    ; preds = %1172, %originalBB286alteredBB
  store i8 1, i8* %42, align 1, !dbg !1339
  %1181 = load i32, i32* %23, align 4, !dbg !1340
  %1182 = icmp eq i32 %1181, 2, !dbg !1340
  %1183 = load i32, i32* @x.17
  %1184 = load i32, i32* @y.18
  %1185 = sub i32 %1183, 1
  %1186 = mul i32 %1183, %1185
  %1187 = urem i32 %1186, 2
  %1188 = icmp eq i32 %1187, 0
  %1189 = icmp slt i32 %1184, 10
  %1190 = or i1 %1188, %1189
  br i1 %1190, label %originalBBpart2288, label %originalBB286alteredBB

originalBBpart2288:                               ; preds = %originalBB286
  br i1 %1182, label %1191, label %1455, !dbg !1340

1191:                                             ; preds = %originalBBpart2288
  %1192 = load i32, i32* @x.17
  %1193 = load i32, i32* @y.18
  %1194 = sub i32 %1192, 1
  %1195 = mul i32 %1192, %1194
  %1196 = urem i32 %1195, 2
  %1197 = icmp eq i32 %1196, 0
  %1198 = icmp slt i32 %1193, 10
  %1199 = or i1 %1197, %1198
  br i1 %1199, label %originalBB290, label %originalBB290alteredBB

originalBB290:                                    ; preds = %1191, %originalBB290alteredBB
  %1200 = load i8, i8* %36, align 1, !dbg !1340
  %1201 = trunc i8 %1200 to i1, !dbg !1340
  %1202 = load i32, i32* @x.17
  %1203 = load i32, i32* @y.18
  %1204 = sub i32 %1202, 1
  %1205 = mul i32 %1202, %1204
  %1206 = urem i32 %1205, 2
  %1207 = icmp eq i32 %1206, 0
  %1208 = icmp slt i32 %1203, 10
  %1209 = or i1 %1207, %1208
  br i1 %1209, label %originalBBpart2292, label %originalBB290alteredBB

originalBBpart2292:                               ; preds = %originalBB290
  br i1 %1201, label %1455, label %1210, !dbg !1339

1210:                                             ; preds = %originalBBpart2292
  %1211 = load i32, i32* @x.17
  %1212 = load i32, i32* @y.18
  %1213 = sub i32 %1211, 1
  %1214 = mul i32 %1211, %1213
  %1215 = urem i32 %1214, 2
  %1216 = icmp eq i32 %1215, 0
  %1217 = icmp slt i32 %1212, 10
  %1218 = or i1 %1216, %1217
  br i1 %1218, label %originalBB294, label %originalBB294alteredBB

originalBB294:                                    ; preds = %1210, %originalBB294alteredBB
  %1219 = load i32, i32* @x.17
  %1220 = load i32, i32* @y.18
  %1221 = sub i32 %1219, 1
  %1222 = mul i32 %1219, %1221
  %1223 = urem i32 %1222, 2
  %1224 = icmp eq i32 %1223, 0
  %1225 = icmp slt i32 %1220, 10
  %1226 = or i1 %1224, %1225
  br i1 %1226, label %originalBBpart2297, label %originalBB294alteredBB

originalBBpart2297:                               ; preds = %originalBB294
  br label %1227, !dbg !1342

1227:                                             ; preds = %originalBBpart2297
  %1228 = load i32, i32* @x.17
  %1229 = load i32, i32* @y.18
  %1230 = sub i32 %1228, 1
  %1231 = mul i32 %1228, %1230
  %1232 = urem i32 %1231, 2
  %1233 = icmp eq i32 %1232, 0
  %1234 = icmp slt i32 %1229, 10
  %1235 = or i1 %1233, %1234
  br i1 %1235, label %originalBB299, label %originalBB299alteredBB

originalBB299:                                    ; preds = %1227, %originalBB299alteredBB
  %1236 = load i64, i64* %29, align 8, !dbg !1344
  %1237 = load i64, i64* %20, align 8, !dbg !1344
  %1238 = icmp ult i64 %1236, %1237, !dbg !1344
  %1239 = load i32, i32* @x.17
  %1240 = load i32, i32* @y.18
  %1241 = sub i32 %1239, 1
  %1242 = mul i32 %1239, %1241
  %1243 = urem i32 %1242, 2
  %1244 = icmp eq i32 %1243, 0
  %1245 = icmp slt i32 %1240, 10
  %1246 = or i1 %1244, %1245
  br i1 %1246, label %originalBBpart2301, label %originalBB299alteredBB

originalBBpart2301:                               ; preds = %originalBB299
  br i1 %1238, label %1247, label %1267, !dbg !1347

1247:                                             ; preds = %originalBBpart2301
  %1248 = load i32, i32* @x.17
  %1249 = load i32, i32* @y.18
  %1250 = sub i32 %1248, 1
  %1251 = mul i32 %1248, %1250
  %1252 = urem i32 %1251, 2
  %1253 = icmp eq i32 %1252, 0
  %1254 = icmp slt i32 %1249, 10
  %1255 = or i1 %1253, %1254
  br i1 %1255, label %originalBB303, label %originalBB303alteredBB

originalBB303:                                    ; preds = %1247, %originalBB303alteredBB
  %1256 = load i8*, i8** %19, align 8, !dbg !1344
  %1257 = load i64, i64* %29, align 8, !dbg !1344
  %1258 = getelementptr inbounds i8, i8* %1256, i64 %1257, !dbg !1344
  store i8 39, i8* %1258, align 1, !dbg !1344
  %1259 = load i32, i32* @x.17
  %1260 = load i32, i32* @y.18
  %1261 = sub i32 %1259, 1
  %1262 = mul i32 %1259, %1261
  %1263 = urem i32 %1262, 2
  %1264 = icmp eq i32 %1263, 0
  %1265 = icmp slt i32 %1260, 10
  %1266 = or i1 %1264, %1265
  br i1 %1266, label %originalBBpart2305, label %originalBB303alteredBB

originalBBpart2305:                               ; preds = %originalBB303
  br label %1267, !dbg !1344

1267:                                             ; preds = %originalBBpart2305, %originalBBpart2301
  %1268 = load i32, i32* @x.17
  %1269 = load i32, i32* @y.18
  %1270 = sub i32 %1268, 1
  %1271 = mul i32 %1268, %1270
  %1272 = urem i32 %1271, 2
  %1273 = icmp eq i32 %1272, 0
  %1274 = icmp slt i32 %1269, 10
  %1275 = or i1 %1273, %1274
  br i1 %1275, label %originalBB307, label %originalBB307alteredBB

originalBB307:                                    ; preds = %1267, %originalBB307alteredBB
  %1276 = load i64, i64* %29, align 8, !dbg !1347
  %1277 = add i64 %1276, 1, !dbg !1347
  store i64 %1277, i64* %29, align 8, !dbg !1347
  %1278 = load i32, i32* @x.17
  %1279 = load i32, i32* @y.18
  %1280 = sub i32 %1278, 1
  %1281 = mul i32 %1278, %1280
  %1282 = urem i32 %1281, 2
  %1283 = icmp eq i32 %1282, 0
  %1284 = icmp slt i32 %1279, 10
  %1285 = or i1 %1283, %1284
  br i1 %1285, label %originalBBpart2319, label %originalBB307alteredBB

originalBBpart2319:                               ; preds = %originalBB307
  br label %1286, !dbg !1347

1286:                                             ; preds = %originalBBpart2319
  %1287 = load i32, i32* @x.17
  %1288 = load i32, i32* @y.18
  %1289 = sub i32 %1287, 1
  %1290 = mul i32 %1287, %1289
  %1291 = urem i32 %1290, 2
  %1292 = icmp eq i32 %1291, 0
  %1293 = icmp slt i32 %1288, 10
  %1294 = or i1 %1292, %1293
  br i1 %1294, label %originalBB321, label %originalBB321alteredBB

originalBB321:                                    ; preds = %1286, %originalBB321alteredBB
  %1295 = load i32, i32* @x.17
  %1296 = load i32, i32* @y.18
  %1297 = sub i32 %1295, 1
  %1298 = mul i32 %1295, %1297
  %1299 = urem i32 %1298, 2
  %1300 = icmp eq i32 %1299, 0
  %1301 = icmp slt i32 %1296, 10
  %1302 = or i1 %1300, %1301
  br i1 %1302, label %originalBBpart2323, label %originalBB321alteredBB

originalBBpart2323:                               ; preds = %originalBB321
  br label %1303, !dbg !1342

1303:                                             ; preds = %originalBBpart2323
  %1304 = load i32, i32* @x.17
  %1305 = load i32, i32* @y.18
  %1306 = sub i32 %1304, 1
  %1307 = mul i32 %1304, %1306
  %1308 = urem i32 %1307, 2
  %1309 = icmp eq i32 %1308, 0
  %1310 = icmp slt i32 %1305, 10
  %1311 = or i1 %1309, %1310
  br i1 %1311, label %originalBB325, label %originalBB325alteredBB

originalBB325:                                    ; preds = %1303, %originalBB325alteredBB
  %1312 = load i64, i64* %29, align 8, !dbg !1348
  %1313 = load i64, i64* %20, align 8, !dbg !1348
  %1314 = icmp ult i64 %1312, %1313, !dbg !1348
  %1315 = load i32, i32* @x.17
  %1316 = load i32, i32* @y.18
  %1317 = sub i32 %1315, 1
  %1318 = mul i32 %1315, %1317
  %1319 = urem i32 %1318, 2
  %1320 = icmp eq i32 %1319, 0
  %1321 = icmp slt i32 %1316, 10
  %1322 = or i1 %1320, %1321
  br i1 %1322, label %originalBBpart2327, label %originalBB325alteredBB

originalBBpart2327:                               ; preds = %originalBB325
  br i1 %1314, label %1323, label %1343, !dbg !1351

1323:                                             ; preds = %originalBBpart2327
  %1324 = load i32, i32* @x.17
  %1325 = load i32, i32* @y.18
  %1326 = sub i32 %1324, 1
  %1327 = mul i32 %1324, %1326
  %1328 = urem i32 %1327, 2
  %1329 = icmp eq i32 %1328, 0
  %1330 = icmp slt i32 %1325, 10
  %1331 = or i1 %1329, %1330
  br i1 %1331, label %originalBB329, label %originalBB329alteredBB

originalBB329:                                    ; preds = %1323, %originalBB329alteredBB
  %1332 = load i8*, i8** %19, align 8, !dbg !1348
  %1333 = load i64, i64* %29, align 8, !dbg !1348
  %1334 = getelementptr inbounds i8, i8* %1332, i64 %1333, !dbg !1348
  store i8 36, i8* %1334, align 1, !dbg !1348
  %1335 = load i32, i32* @x.17
  %1336 = load i32, i32* @y.18
  %1337 = sub i32 %1335, 1
  %1338 = mul i32 %1335, %1337
  %1339 = urem i32 %1338, 2
  %1340 = icmp eq i32 %1339, 0
  %1341 = icmp slt i32 %1336, 10
  %1342 = or i1 %1340, %1341
  br i1 %1342, label %originalBBpart2331, label %originalBB329alteredBB

originalBBpart2331:                               ; preds = %originalBB329
  br label %1343, !dbg !1348

1343:                                             ; preds = %originalBBpart2331, %originalBBpart2327
  %1344 = load i32, i32* @x.17
  %1345 = load i32, i32* @y.18
  %1346 = sub i32 %1344, 1
  %1347 = mul i32 %1344, %1346
  %1348 = urem i32 %1347, 2
  %1349 = icmp eq i32 %1348, 0
  %1350 = icmp slt i32 %1345, 10
  %1351 = or i1 %1349, %1350
  br i1 %1351, label %originalBB333, label %originalBB333alteredBB

originalBB333:                                    ; preds = %1343, %originalBB333alteredBB
  %1352 = load i64, i64* %29, align 8, !dbg !1351
  %1353 = add i64 %1352, 1, !dbg !1351
  store i64 %1353, i64* %29, align 8, !dbg !1351
  %1354 = load i32, i32* @x.17
  %1355 = load i32, i32* @y.18
  %1356 = sub i32 %1354, 1
  %1357 = mul i32 %1354, %1356
  %1358 = urem i32 %1357, 2
  %1359 = icmp eq i32 %1358, 0
  %1360 = icmp slt i32 %1355, 10
  %1361 = or i1 %1359, %1360
  br i1 %1361, label %originalBBpart2341, label %originalBB333alteredBB

originalBBpart2341:                               ; preds = %originalBB333
  br label %1362, !dbg !1351

1362:                                             ; preds = %originalBBpart2341
  %1363 = load i32, i32* @x.17
  %1364 = load i32, i32* @y.18
  %1365 = sub i32 %1363, 1
  %1366 = mul i32 %1363, %1365
  %1367 = urem i32 %1366, 2
  %1368 = icmp eq i32 %1367, 0
  %1369 = icmp slt i32 %1364, 10
  %1370 = or i1 %1368, %1369
  br i1 %1370, label %originalBB343, label %originalBB343alteredBB

originalBB343:                                    ; preds = %1362, %originalBB343alteredBB
  %1371 = load i32, i32* @x.17
  %1372 = load i32, i32* @y.18
  %1373 = sub i32 %1371, 1
  %1374 = mul i32 %1371, %1373
  %1375 = urem i32 %1374, 2
  %1376 = icmp eq i32 %1375, 0
  %1377 = icmp slt i32 %1372, 10
  %1378 = or i1 %1376, %1377
  br i1 %1378, label %originalBBpart2345, label %originalBB343alteredBB

originalBBpart2345:                               ; preds = %originalBB343
  br label %1379, !dbg !1342

1379:                                             ; preds = %originalBBpart2345
  %1380 = load i32, i32* @x.17
  %1381 = load i32, i32* @y.18
  %1382 = sub i32 %1380, 1
  %1383 = mul i32 %1380, %1382
  %1384 = urem i32 %1383, 2
  %1385 = icmp eq i32 %1384, 0
  %1386 = icmp slt i32 %1381, 10
  %1387 = or i1 %1385, %1386
  br i1 %1387, label %originalBB347, label %originalBB347alteredBB

originalBB347:                                    ; preds = %1379, %originalBB347alteredBB
  %1388 = load i64, i64* %29, align 8, !dbg !1352
  %1389 = load i64, i64* %20, align 8, !dbg !1352
  %1390 = icmp ult i64 %1388, %1389, !dbg !1352
  %1391 = load i32, i32* @x.17
  %1392 = load i32, i32* @y.18
  %1393 = sub i32 %1391, 1
  %1394 = mul i32 %1391, %1393
  %1395 = urem i32 %1394, 2
  %1396 = icmp eq i32 %1395, 0
  %1397 = icmp slt i32 %1392, 10
  %1398 = or i1 %1396, %1397
  br i1 %1398, label %originalBBpart2349, label %originalBB347alteredBB

originalBBpart2349:                               ; preds = %originalBB347
  br i1 %1390, label %1399, label %1419, !dbg !1355

1399:                                             ; preds = %originalBBpart2349
  %1400 = load i32, i32* @x.17
  %1401 = load i32, i32* @y.18
  %1402 = sub i32 %1400, 1
  %1403 = mul i32 %1400, %1402
  %1404 = urem i32 %1403, 2
  %1405 = icmp eq i32 %1404, 0
  %1406 = icmp slt i32 %1401, 10
  %1407 = or i1 %1405, %1406
  br i1 %1407, label %originalBB351, label %originalBB351alteredBB

originalBB351:                                    ; preds = %1399, %originalBB351alteredBB
  %1408 = load i8*, i8** %19, align 8, !dbg !1352
  %1409 = load i64, i64* %29, align 8, !dbg !1352
  %1410 = getelementptr inbounds i8, i8* %1408, i64 %1409, !dbg !1352
  store i8 39, i8* %1410, align 1, !dbg !1352
  %1411 = load i32, i32* @x.17
  %1412 = load i32, i32* @y.18
  %1413 = sub i32 %1411, 1
  %1414 = mul i32 %1411, %1413
  %1415 = urem i32 %1414, 2
  %1416 = icmp eq i32 %1415, 0
  %1417 = icmp slt i32 %1412, 10
  %1418 = or i1 %1416, %1417
  br i1 %1418, label %originalBBpart2353, label %originalBB351alteredBB

originalBBpart2353:                               ; preds = %originalBB351
  br label %1419, !dbg !1352

1419:                                             ; preds = %originalBBpart2353, %originalBBpart2349
  %1420 = load i32, i32* @x.17
  %1421 = load i32, i32* @y.18
  %1422 = sub i32 %1420, 1
  %1423 = mul i32 %1420, %1422
  %1424 = urem i32 %1423, 2
  %1425 = icmp eq i32 %1424, 0
  %1426 = icmp slt i32 %1421, 10
  %1427 = or i1 %1425, %1426
  br i1 %1427, label %originalBB355, label %originalBB355alteredBB

originalBB355:                                    ; preds = %1419, %originalBB355alteredBB
  %1428 = load i64, i64* %29, align 8, !dbg !1355
  %1429 = add i64 %1428, 1, !dbg !1355
  store i64 %1429, i64* %29, align 8, !dbg !1355
  %1430 = load i32, i32* @x.17
  %1431 = load i32, i32* @y.18
  %1432 = sub i32 %1430, 1
  %1433 = mul i32 %1430, %1432
  %1434 = urem i32 %1433, 2
  %1435 = icmp eq i32 %1434, 0
  %1436 = icmp slt i32 %1431, 10
  %1437 = or i1 %1435, %1436
  br i1 %1437, label %originalBBpart2363, label %originalBB355alteredBB

originalBBpart2363:                               ; preds = %originalBB355
  br label %1438, !dbg !1355

1438:                                             ; preds = %originalBBpart2363
  %1439 = load i32, i32* @x.17
  %1440 = load i32, i32* @y.18
  %1441 = sub i32 %1439, 1
  %1442 = mul i32 %1439, %1441
  %1443 = urem i32 %1442, 2
  %1444 = icmp eq i32 %1443, 0
  %1445 = icmp slt i32 %1440, 10
  %1446 = or i1 %1444, %1445
  br i1 %1446, label %originalBB365, label %originalBB365alteredBB

originalBB365:                                    ; preds = %1438, %originalBB365alteredBB
  store i8 1, i8* %36, align 1, !dbg !1342
  %1447 = load i32, i32* @x.17
  %1448 = load i32, i32* @y.18
  %1449 = sub i32 %1447, 1
  %1450 = mul i32 %1447, %1449
  %1451 = urem i32 %1450, 2
  %1452 = icmp eq i32 %1451, 0
  %1453 = icmp slt i32 %1448, 10
  %1454 = or i1 %1452, %1453
  br i1 %1454, label %originalBBpart2367, label %originalBB365alteredBB

originalBBpart2367:                               ; preds = %originalBB365
  br label %1455, !dbg !1342

1455:                                             ; preds = %originalBBpart2367, %originalBBpart2292, %originalBBpart2288
  %1456 = load i32, i32* @x.17
  %1457 = load i32, i32* @y.18
  %1458 = sub i32 %1456, 1
  %1459 = mul i32 %1456, %1458
  %1460 = urem i32 %1459, 2
  %1461 = icmp eq i32 %1460, 0
  %1462 = icmp slt i32 %1457, 10
  %1463 = or i1 %1461, %1462
  br i1 %1463, label %originalBB369, label %originalBB369alteredBB

originalBB369:                                    ; preds = %1455, %originalBB369alteredBB
  %1464 = load i32, i32* @x.17
  %1465 = load i32, i32* @y.18
  %1466 = sub i32 %1464, 1
  %1467 = mul i32 %1464, %1466
  %1468 = urem i32 %1467, 2
  %1469 = icmp eq i32 %1468, 0
  %1470 = icmp slt i32 %1465, 10
  %1471 = or i1 %1469, %1470
  br i1 %1471, label %originalBBpart2371, label %originalBB369alteredBB

originalBBpart2371:                               ; preds = %originalBB369
  br label %1472, !dbg !1339

1472:                                             ; preds = %originalBBpart2371
  %1473 = load i32, i32* @x.17
  %1474 = load i32, i32* @y.18
  %1475 = sub i32 %1473, 1
  %1476 = mul i32 %1473, %1475
  %1477 = urem i32 %1476, 2
  %1478 = icmp eq i32 %1477, 0
  %1479 = icmp slt i32 %1474, 10
  %1480 = or i1 %1478, %1479
  br i1 %1480, label %originalBB373, label %originalBB373alteredBB

originalBB373:                                    ; preds = %1472, %originalBB373alteredBB
  %1481 = load i64, i64* %29, align 8, !dbg !1356
  %1482 = load i64, i64* %20, align 8, !dbg !1356
  %1483 = icmp ult i64 %1481, %1482, !dbg !1356
  %1484 = load i32, i32* @x.17
  %1485 = load i32, i32* @y.18
  %1486 = sub i32 %1484, 1
  %1487 = mul i32 %1484, %1486
  %1488 = urem i32 %1487, 2
  %1489 = icmp eq i32 %1488, 0
  %1490 = icmp slt i32 %1485, 10
  %1491 = or i1 %1489, %1490
  br i1 %1491, label %originalBBpart2375, label %originalBB373alteredBB

originalBBpart2375:                               ; preds = %originalBB373
  br i1 %1483, label %1492, label %1512, !dbg !1359

1492:                                             ; preds = %originalBBpart2375
  %1493 = load i32, i32* @x.17
  %1494 = load i32, i32* @y.18
  %1495 = sub i32 %1493, 1
  %1496 = mul i32 %1493, %1495
  %1497 = urem i32 %1496, 2
  %1498 = icmp eq i32 %1497, 0
  %1499 = icmp slt i32 %1494, 10
  %1500 = or i1 %1498, %1499
  br i1 %1500, label %originalBB377, label %originalBB377alteredBB

originalBB377:                                    ; preds = %1492, %originalBB377alteredBB
  %1501 = load i8*, i8** %19, align 8, !dbg !1356
  %1502 = load i64, i64* %29, align 8, !dbg !1356
  %1503 = getelementptr inbounds i8, i8* %1501, i64 %1502, !dbg !1356
  store i8 92, i8* %1503, align 1, !dbg !1356
  %1504 = load i32, i32* @x.17
  %1505 = load i32, i32* @y.18
  %1506 = sub i32 %1504, 1
  %1507 = mul i32 %1504, %1506
  %1508 = urem i32 %1507, 2
  %1509 = icmp eq i32 %1508, 0
  %1510 = icmp slt i32 %1505, 10
  %1511 = or i1 %1509, %1510
  br i1 %1511, label %originalBBpart2379, label %originalBB377alteredBB

originalBBpart2379:                               ; preds = %originalBB377
  br label %1512, !dbg !1356

1512:                                             ; preds = %originalBBpart2379, %originalBBpart2375
  %1513 = load i32, i32* @x.17
  %1514 = load i32, i32* @y.18
  %1515 = sub i32 %1513, 1
  %1516 = mul i32 %1513, %1515
  %1517 = urem i32 %1516, 2
  %1518 = icmp eq i32 %1517, 0
  %1519 = icmp slt i32 %1514, 10
  %1520 = or i1 %1518, %1519
  br i1 %1520, label %originalBB381, label %originalBB381alteredBB

originalBB381:                                    ; preds = %1512, %originalBB381alteredBB
  %1521 = load i64, i64* %29, align 8, !dbg !1359
  %1522 = add i64 %1521, 1, !dbg !1359
  store i64 %1522, i64* %29, align 8, !dbg !1359
  %1523 = load i32, i32* @x.17
  %1524 = load i32, i32* @y.18
  %1525 = sub i32 %1523, 1
  %1526 = mul i32 %1523, %1525
  %1527 = urem i32 %1526, 2
  %1528 = icmp eq i32 %1527, 0
  %1529 = icmp slt i32 %1524, 10
  %1530 = or i1 %1528, %1529
  br i1 %1530, label %originalBBpart2394, label %originalBB381alteredBB

originalBBpart2394:                               ; preds = %originalBB381
  br label %1531, !dbg !1359

1531:                                             ; preds = %originalBBpart2394
  %1532 = load i32, i32* @x.17
  %1533 = load i32, i32* @y.18
  %1534 = sub i32 %1532, 1
  %1535 = mul i32 %1532, %1534
  %1536 = urem i32 %1535, 2
  %1537 = icmp eq i32 %1536, 0
  %1538 = icmp slt i32 %1533, 10
  %1539 = or i1 %1537, %1538
  br i1 %1539, label %originalBB396, label %originalBB396alteredBB

originalBB396:                                    ; preds = %1531, %originalBB396alteredBB
  %1540 = load i32, i32* @x.17
  %1541 = load i32, i32* @y.18
  %1542 = sub i32 %1540, 1
  %1543 = mul i32 %1540, %1542
  %1544 = urem i32 %1543, 2
  %1545 = icmp eq i32 %1544, 0
  %1546 = icmp slt i32 %1541, 10
  %1547 = or i1 %1545, %1546
  br i1 %1547, label %originalBBpart2398, label %originalBB396alteredBB

originalBBpart2398:                               ; preds = %originalBB396
  br label %1548, !dbg !1339

1548:                                             ; preds = %originalBBpart2398
  %1549 = load i32, i32* @x.17
  %1550 = load i32, i32* @y.18
  %1551 = sub i32 %1549, 1
  %1552 = mul i32 %1549, %1551
  %1553 = urem i32 %1552, 2
  %1554 = icmp eq i32 %1553, 0
  %1555 = icmp slt i32 %1550, 10
  %1556 = or i1 %1554, %1555
  br i1 %1556, label %originalBB400, label %originalBB400alteredBB

originalBB400:                                    ; preds = %1548, %originalBB400alteredBB
  %1557 = load i32, i32* %23, align 4, !dbg !1360
  %1558 = icmp ne i32 %1557, 2, !dbg !1362
  %1559 = load i32, i32* @x.17
  %1560 = load i32, i32* @y.18
  %1561 = sub i32 %1559, 1
  %1562 = mul i32 %1559, %1561
  %1563 = urem i32 %1562, 2
  %1564 = icmp eq i32 %1563, 0
  %1565 = icmp slt i32 %1560, 10
  %1566 = or i1 %1564, %1565
  br i1 %1566, label %originalBBpart2402, label %originalBB400alteredBB

originalBBpart2402:                               ; preds = %originalBB400
  br i1 %1558, label %1567, label %1805, !dbg !1363

1567:                                             ; preds = %originalBBpart2402
  %1568 = load i32, i32* @x.17
  %1569 = load i32, i32* @y.18
  %1570 = sub i32 %1568, 1
  %1571 = mul i32 %1568, %1570
  %1572 = urem i32 %1571, 2
  %1573 = icmp eq i32 %1572, 0
  %1574 = icmp slt i32 %1569, 10
  %1575 = or i1 %1573, %1574
  br i1 %1575, label %originalBB404, label %originalBB404alteredBB

originalBB404:                                    ; preds = %1567, %originalBB404alteredBB
  %1576 = load i64, i64* %28, align 8, !dbg !1364
  %1577 = add i64 %1576, 1, !dbg !1365
  %1578 = load i64, i64* %22, align 8, !dbg !1366
  %1579 = icmp ult i64 %1577, %1578, !dbg !1367
  %1580 = load i32, i32* @x.17
  %1581 = load i32, i32* @y.18
  %1582 = sub i32 %1580, 1
  %1583 = mul i32 %1580, %1582
  %1584 = urem i32 %1583, 2
  %1585 = icmp eq i32 %1584, 0
  %1586 = icmp slt i32 %1581, 10
  %1587 = or i1 %1585, %1586
  br i1 %1587, label %originalBBpart2407, label %originalBB404alteredBB

originalBBpart2407:                               ; preds = %originalBB404
  br i1 %1579, label %1588, label %1805, !dbg !1368

1588:                                             ; preds = %originalBBpart2407
  %1589 = load i32, i32* @x.17
  %1590 = load i32, i32* @y.18
  %1591 = sub i32 %1589, 1
  %1592 = mul i32 %1589, %1591
  %1593 = urem i32 %1592, 2
  %1594 = icmp eq i32 %1593, 0
  %1595 = icmp slt i32 %1590, 10
  %1596 = or i1 %1594, %1595
  br i1 %1596, label %originalBB409, label %originalBB409alteredBB

originalBB409:                                    ; preds = %1588, %originalBB409alteredBB
  %1597 = load i8*, i8** %21, align 8, !dbg !1369
  %1598 = load i64, i64* %28, align 8, !dbg !1370
  %1599 = add i64 %1598, 1, !dbg !1371
  %1600 = getelementptr inbounds i8, i8* %1597, i64 %1599, !dbg !1369
  %1601 = load i8, i8* %1600, align 1, !dbg !1369
  %1602 = sext i8 %1601 to i32, !dbg !1369
  %1603 = icmp sle i32 48, %1602, !dbg !1372
  %1604 = load i32, i32* @x.17
  %1605 = load i32, i32* @y.18
  %1606 = sub i32 %1604, 1
  %1607 = mul i32 %1604, %1606
  %1608 = urem i32 %1607, 2
  %1609 = icmp eq i32 %1608, 0
  %1610 = icmp slt i32 %1605, 10
  %1611 = or i1 %1609, %1610
  br i1 %1611, label %originalBBpart2413, label %originalBB409alteredBB

originalBBpart2413:                               ; preds = %originalBB409
  br i1 %1603, label %1612, label %1805, !dbg !1373

1612:                                             ; preds = %originalBBpart2413
  %1613 = load i32, i32* @x.17
  %1614 = load i32, i32* @y.18
  %1615 = sub i32 %1613, 1
  %1616 = mul i32 %1613, %1615
  %1617 = urem i32 %1616, 2
  %1618 = icmp eq i32 %1617, 0
  %1619 = icmp slt i32 %1614, 10
  %1620 = or i1 %1618, %1619
  br i1 %1620, label %originalBB415, label %originalBB415alteredBB

originalBB415:                                    ; preds = %1612, %originalBB415alteredBB
  %1621 = load i8*, i8** %21, align 8, !dbg !1374
  %1622 = load i64, i64* %28, align 8, !dbg !1375
  %1623 = add i64 %1622, 1, !dbg !1376
  %1624 = getelementptr inbounds i8, i8* %1621, i64 %1623, !dbg !1374
  %1625 = load i8, i8* %1624, align 1, !dbg !1374
  %1626 = sext i8 %1625 to i32, !dbg !1374
  %1627 = icmp sle i32 %1626, 57, !dbg !1377
  %1628 = load i32, i32* @x.17
  %1629 = load i32, i32* @y.18
  %1630 = sub i32 %1628, 1
  %1631 = mul i32 %1628, %1630
  %1632 = urem i32 %1631, 2
  %1633 = icmp eq i32 %1632, 0
  %1634 = icmp slt i32 %1629, 10
  %1635 = or i1 %1633, %1634
  br i1 %1635, label %originalBBpart2418, label %originalBB415alteredBB

originalBBpart2418:                               ; preds = %originalBB415
  br i1 %1627, label %1636, label %1805, !dbg !1378

1636:                                             ; preds = %originalBBpart2418
  %1637 = load i32, i32* @x.17
  %1638 = load i32, i32* @y.18
  %1639 = sub i32 %1637, 1
  %1640 = mul i32 %1637, %1639
  %1641 = urem i32 %1640, 2
  %1642 = icmp eq i32 %1641, 0
  %1643 = icmp slt i32 %1638, 10
  %1644 = or i1 %1642, %1643
  br i1 %1644, label %originalBB420, label %originalBB420alteredBB

originalBB420:                                    ; preds = %1636, %originalBB420alteredBB
  %1645 = load i32, i32* @x.17
  %1646 = load i32, i32* @y.18
  %1647 = sub i32 %1645, 1
  %1648 = mul i32 %1645, %1647
  %1649 = urem i32 %1648, 2
  %1650 = icmp eq i32 %1649, 0
  %1651 = icmp slt i32 %1646, 10
  %1652 = or i1 %1650, %1651
  br i1 %1652, label %originalBBpart2422, label %originalBB420alteredBB

originalBBpart2422:                               ; preds = %originalBB420
  br label %1653, !dbg !1379

1653:                                             ; preds = %originalBBpart2422
  %1654 = load i32, i32* @x.17
  %1655 = load i32, i32* @y.18
  %1656 = sub i32 %1654, 1
  %1657 = mul i32 %1654, %1656
  %1658 = urem i32 %1657, 2
  %1659 = icmp eq i32 %1658, 0
  %1660 = icmp slt i32 %1655, 10
  %1661 = or i1 %1659, %1660
  br i1 %1661, label %originalBB424, label %originalBB424alteredBB

originalBB424:                                    ; preds = %1653, %originalBB424alteredBB
  %1662 = load i64, i64* %29, align 8, !dbg !1381
  %1663 = load i64, i64* %20, align 8, !dbg !1381
  %1664 = icmp ult i64 %1662, %1663, !dbg !1381
  %1665 = load i32, i32* @x.17
  %1666 = load i32, i32* @y.18
  %1667 = sub i32 %1665, 1
  %1668 = mul i32 %1665, %1667
  %1669 = urem i32 %1668, 2
  %1670 = icmp eq i32 %1669, 0
  %1671 = icmp slt i32 %1666, 10
  %1672 = or i1 %1670, %1671
  br i1 %1672, label %originalBBpart2426, label %originalBB424alteredBB

originalBBpart2426:                               ; preds = %originalBB424
  br i1 %1664, label %1673, label %1693, !dbg !1384

1673:                                             ; preds = %originalBBpart2426
  %1674 = load i32, i32* @x.17
  %1675 = load i32, i32* @y.18
  %1676 = sub i32 %1674, 1
  %1677 = mul i32 %1674, %1676
  %1678 = urem i32 %1677, 2
  %1679 = icmp eq i32 %1678, 0
  %1680 = icmp slt i32 %1675, 10
  %1681 = or i1 %1679, %1680
  br i1 %1681, label %originalBB428, label %originalBB428alteredBB

originalBB428:                                    ; preds = %1673, %originalBB428alteredBB
  %1682 = load i8*, i8** %19, align 8, !dbg !1381
  %1683 = load i64, i64* %29, align 8, !dbg !1381
  %1684 = getelementptr inbounds i8, i8* %1682, i64 %1683, !dbg !1381
  store i8 48, i8* %1684, align 1, !dbg !1381
  %1685 = load i32, i32* @x.17
  %1686 = load i32, i32* @y.18
  %1687 = sub i32 %1685, 1
  %1688 = mul i32 %1685, %1687
  %1689 = urem i32 %1688, 2
  %1690 = icmp eq i32 %1689, 0
  %1691 = icmp slt i32 %1686, 10
  %1692 = or i1 %1690, %1691
  br i1 %1692, label %originalBBpart2430, label %originalBB428alteredBB

originalBBpart2430:                               ; preds = %originalBB428
  br label %1693, !dbg !1381

1693:                                             ; preds = %originalBBpart2430, %originalBBpart2426
  %1694 = load i32, i32* @x.17
  %1695 = load i32, i32* @y.18
  %1696 = sub i32 %1694, 1
  %1697 = mul i32 %1694, %1696
  %1698 = urem i32 %1697, 2
  %1699 = icmp eq i32 %1698, 0
  %1700 = icmp slt i32 %1695, 10
  %1701 = or i1 %1699, %1700
  br i1 %1701, label %originalBB432, label %originalBB432alteredBB

originalBB432:                                    ; preds = %1693, %originalBB432alteredBB
  %1702 = load i64, i64* %29, align 8, !dbg !1384
  %1703 = add i64 %1702, 1, !dbg !1384
  store i64 %1703, i64* %29, align 8, !dbg !1384
  %1704 = load i32, i32* @x.17
  %1705 = load i32, i32* @y.18
  %1706 = sub i32 %1704, 1
  %1707 = mul i32 %1704, %1706
  %1708 = urem i32 %1707, 2
  %1709 = icmp eq i32 %1708, 0
  %1710 = icmp slt i32 %1705, 10
  %1711 = or i1 %1709, %1710
  br i1 %1711, label %originalBBpart2442, label %originalBB432alteredBB

originalBBpart2442:                               ; preds = %originalBB432
  br label %1712, !dbg !1384

1712:                                             ; preds = %originalBBpart2442
  %1713 = load i32, i32* @x.17
  %1714 = load i32, i32* @y.18
  %1715 = sub i32 %1713, 1
  %1716 = mul i32 %1713, %1715
  %1717 = urem i32 %1716, 2
  %1718 = icmp eq i32 %1717, 0
  %1719 = icmp slt i32 %1714, 10
  %1720 = or i1 %1718, %1719
  br i1 %1720, label %originalBB444, label %originalBB444alteredBB

originalBB444:                                    ; preds = %1712, %originalBB444alteredBB
  %1721 = load i32, i32* @x.17
  %1722 = load i32, i32* @y.18
  %1723 = sub i32 %1721, 1
  %1724 = mul i32 %1721, %1723
  %1725 = urem i32 %1724, 2
  %1726 = icmp eq i32 %1725, 0
  %1727 = icmp slt i32 %1722, 10
  %1728 = or i1 %1726, %1727
  br i1 %1728, label %originalBBpart2446, label %originalBB444alteredBB

originalBBpart2446:                               ; preds = %originalBB444
  br label %1729, !dbg !1385

1729:                                             ; preds = %originalBBpart2446
  %1730 = load i32, i32* @x.17
  %1731 = load i32, i32* @y.18
  %1732 = sub i32 %1730, 1
  %1733 = mul i32 %1730, %1732
  %1734 = urem i32 %1733, 2
  %1735 = icmp eq i32 %1734, 0
  %1736 = icmp slt i32 %1731, 10
  %1737 = or i1 %1735, %1736
  br i1 %1737, label %originalBB448, label %originalBB448alteredBB

originalBB448:                                    ; preds = %1729, %originalBB448alteredBB
  %1738 = load i64, i64* %29, align 8, !dbg !1386
  %1739 = load i64, i64* %20, align 8, !dbg !1386
  %1740 = icmp ult i64 %1738, %1739, !dbg !1386
  %1741 = load i32, i32* @x.17
  %1742 = load i32, i32* @y.18
  %1743 = sub i32 %1741, 1
  %1744 = mul i32 %1741, %1743
  %1745 = urem i32 %1744, 2
  %1746 = icmp eq i32 %1745, 0
  %1747 = icmp slt i32 %1742, 10
  %1748 = or i1 %1746, %1747
  br i1 %1748, label %originalBBpart2450, label %originalBB448alteredBB

originalBBpart2450:                               ; preds = %originalBB448
  br i1 %1740, label %1749, label %1769, !dbg !1389

1749:                                             ; preds = %originalBBpart2450
  %1750 = load i32, i32* @x.17
  %1751 = load i32, i32* @y.18
  %1752 = sub i32 %1750, 1
  %1753 = mul i32 %1750, %1752
  %1754 = urem i32 %1753, 2
  %1755 = icmp eq i32 %1754, 0
  %1756 = icmp slt i32 %1751, 10
  %1757 = or i1 %1755, %1756
  br i1 %1757, label %originalBB452, label %originalBB452alteredBB

originalBB452:                                    ; preds = %1749, %originalBB452alteredBB
  %1758 = load i8*, i8** %19, align 8, !dbg !1386
  %1759 = load i64, i64* %29, align 8, !dbg !1386
  %1760 = getelementptr inbounds i8, i8* %1758, i64 %1759, !dbg !1386
  store i8 48, i8* %1760, align 1, !dbg !1386
  %1761 = load i32, i32* @x.17
  %1762 = load i32, i32* @y.18
  %1763 = sub i32 %1761, 1
  %1764 = mul i32 %1761, %1763
  %1765 = urem i32 %1764, 2
  %1766 = icmp eq i32 %1765, 0
  %1767 = icmp slt i32 %1762, 10
  %1768 = or i1 %1766, %1767
  br i1 %1768, label %originalBBpart2454, label %originalBB452alteredBB

originalBBpart2454:                               ; preds = %originalBB452
  br label %1769, !dbg !1386

1769:                                             ; preds = %originalBBpart2454, %originalBBpart2450
  %1770 = load i32, i32* @x.17
  %1771 = load i32, i32* @y.18
  %1772 = sub i32 %1770, 1
  %1773 = mul i32 %1770, %1772
  %1774 = urem i32 %1773, 2
  %1775 = icmp eq i32 %1774, 0
  %1776 = icmp slt i32 %1771, 10
  %1777 = or i1 %1775, %1776
  br i1 %1777, label %originalBB456, label %originalBB456alteredBB

originalBB456:                                    ; preds = %1769, %originalBB456alteredBB
  %1778 = load i64, i64* %29, align 8, !dbg !1389
  %1779 = add i64 %1778, 1, !dbg !1389
  store i64 %1779, i64* %29, align 8, !dbg !1389
  %1780 = load i32, i32* @x.17
  %1781 = load i32, i32* @y.18
  %1782 = sub i32 %1780, 1
  %1783 = mul i32 %1780, %1782
  %1784 = urem i32 %1783, 2
  %1785 = icmp eq i32 %1784, 0
  %1786 = icmp slt i32 %1781, 10
  %1787 = or i1 %1785, %1786
  br i1 %1787, label %originalBBpart2462, label %originalBB456alteredBB

originalBBpart2462:                               ; preds = %originalBB456
  br label %1788, !dbg !1389

1788:                                             ; preds = %originalBBpart2462
  %1789 = load i32, i32* @x.17
  %1790 = load i32, i32* @y.18
  %1791 = sub i32 %1789, 1
  %1792 = mul i32 %1789, %1791
  %1793 = urem i32 %1792, 2
  %1794 = icmp eq i32 %1793, 0
  %1795 = icmp slt i32 %1790, 10
  %1796 = or i1 %1794, %1795
  br i1 %1796, label %originalBB464, label %originalBB464alteredBB

originalBB464:                                    ; preds = %1788, %originalBB464alteredBB
  %1797 = load i32, i32* @x.17
  %1798 = load i32, i32* @y.18
  %1799 = sub i32 %1797, 1
  %1800 = mul i32 %1797, %1799
  %1801 = urem i32 %1800, 2
  %1802 = icmp eq i32 %1801, 0
  %1803 = icmp slt i32 %1798, 10
  %1804 = or i1 %1802, %1803
  br i1 %1804, label %originalBBpart2466, label %originalBB464alteredBB

originalBBpart2466:                               ; preds = %originalBB464
  br label %1805, !dbg !1390

1805:                                             ; preds = %originalBBpart2466, %originalBBpart2418, %originalBBpart2413, %originalBBpart2407, %originalBBpart2402
  %1806 = load i32, i32* @x.17
  %1807 = load i32, i32* @y.18
  %1808 = sub i32 %1806, 1
  %1809 = mul i32 %1806, %1808
  %1810 = urem i32 %1809, 2
  %1811 = icmp eq i32 %1810, 0
  %1812 = icmp slt i32 %1807, 10
  %1813 = or i1 %1811, %1812
  br i1 %1813, label %originalBB468, label %originalBB468alteredBB

originalBB468:                                    ; preds = %1805, %originalBB468alteredBB
  store i8 48, i8* %39, align 1, !dbg !1391
  %1814 = load i32, i32* @x.17
  %1815 = load i32, i32* @y.18
  %1816 = sub i32 %1814, 1
  %1817 = mul i32 %1814, %1816
  %1818 = urem i32 %1817, 2
  %1819 = icmp eq i32 %1818, 0
  %1820 = icmp slt i32 %1815, 10
  %1821 = or i1 %1819, %1820
  br i1 %1821, label %originalBBpart2470, label %originalBB468alteredBB

originalBBpart2470:                               ; preds = %originalBB468
  br label %1876, !dbg !1392

1822:                                             ; preds = %originalBBpart2272
  %1823 = load i32, i32* @x.17
  %1824 = load i32, i32* @y.18
  %1825 = sub i32 %1823, 1
  %1826 = mul i32 %1823, %1825
  %1827 = urem i32 %1826, 2
  %1828 = icmp eq i32 %1827, 0
  %1829 = icmp slt i32 %1824, 10
  %1830 = or i1 %1828, %1829
  br i1 %1830, label %originalBB472, label %originalBB472alteredBB

originalBB472:                                    ; preds = %1822, %originalBB472alteredBB
  %1831 = load i32, i32* %24, align 4, !dbg !1393
  %1832 = and i32 %1831, 1, !dbg !1395
  %1833 = icmp ne i32 %1832, 0, !dbg !1395
  %1834 = load i32, i32* @x.17
  %1835 = load i32, i32* @y.18
  %1836 = sub i32 %1834, 1
  %1837 = mul i32 %1834, %1836
  %1838 = urem i32 %1837, 2
  %1839 = icmp eq i32 %1838, 0
  %1840 = icmp slt i32 %1835, 10
  %1841 = or i1 %1839, %1840
  br i1 %1841, label %originalBBpart2480, label %originalBB472alteredBB

originalBBpart2480:                               ; preds = %originalBB472
  br i1 %1833, label %1842, label %1859, !dbg !1396

1842:                                             ; preds = %originalBBpart2480
  %1843 = load i32, i32* @x.17
  %1844 = load i32, i32* @y.18
  %1845 = sub i32 %1843, 1
  %1846 = mul i32 %1843, %1845
  %1847 = urem i32 %1846, 2
  %1848 = icmp eq i32 %1847, 0
  %1849 = icmp slt i32 %1844, 10
  %1850 = or i1 %1848, %1849
  br i1 %1850, label %originalBB482, label %originalBB482alteredBB

originalBB482:                                    ; preds = %1842, %originalBB482alteredBB
  %1851 = load i32, i32* @x.17
  %1852 = load i32, i32* @y.18
  %1853 = sub i32 %1851, 1
  %1854 = mul i32 %1851, %1853
  %1855 = urem i32 %1854, 2
  %1856 = icmp eq i32 %1855, 0
  %1857 = icmp slt i32 %1852, 10
  %1858 = or i1 %1856, %1857
  br i1 %1858, label %originalBBpart2484, label %originalBB482alteredBB

originalBBpart2484:                               ; preds = %originalBB482
  br label %6441, !dbg !1397

1859:                                             ; preds = %originalBBpart2480
  %1860 = load i32, i32* @x.17
  %1861 = load i32, i32* @y.18
  %1862 = sub i32 %1860, 1
  %1863 = mul i32 %1860, %1862
  %1864 = urem i32 %1863, 2
  %1865 = icmp eq i32 %1864, 0
  %1866 = icmp slt i32 %1861, 10
  %1867 = or i1 %1865, %1866
  br i1 %1867, label %originalBB486, label %originalBB486alteredBB

originalBB486:                                    ; preds = %1859, %originalBB486alteredBB
  %1868 = load i32, i32* @x.17
  %1869 = load i32, i32* @y.18
  %1870 = sub i32 %1868, 1
  %1871 = mul i32 %1868, %1870
  %1872 = urem i32 %1871, 2
  %1873 = icmp eq i32 %1872, 0
  %1874 = icmp slt i32 %1869, 10
  %1875 = or i1 %1873, %1874
  br i1 %1875, label %originalBBpart2488, label %originalBB486alteredBB

originalBBpart2488:                               ; preds = %originalBB486
  br label %1876

1876:                                             ; preds = %originalBBpart2488, %originalBBpart2470
  %1877 = load i32, i32* @x.17
  %1878 = load i32, i32* @y.18
  %1879 = sub i32 %1877, 1
  %1880 = mul i32 %1877, %1879
  %1881 = urem i32 %1880, 2
  %1882 = icmp eq i32 %1881, 0
  %1883 = icmp slt i32 %1878, 10
  %1884 = or i1 %1882, %1883
  br i1 %1884, label %originalBB490, label %originalBB490alteredBB

originalBB490:                                    ; preds = %1876, %originalBB490alteredBB
  %1885 = load i32, i32* @x.17
  %1886 = load i32, i32* @y.18
  %1887 = sub i32 %1885, 1
  %1888 = mul i32 %1885, %1887
  %1889 = urem i32 %1888, 2
  %1890 = icmp eq i32 %1889, 0
  %1891 = icmp slt i32 %1886, 10
  %1892 = or i1 %1890, %1891
  br i1 %1892, label %originalBBpart2492, label %originalBB490alteredBB

originalBBpart2492:                               ; preds = %originalBB490
  br label %5465, !dbg !1398

1893:                                             ; preds = %originalBBpart2268
  %1894 = load i32, i32* @x.17
  %1895 = load i32, i32* @y.18
  %1896 = sub i32 %1894, 1
  %1897 = mul i32 %1894, %1896
  %1898 = urem i32 %1897, 2
  %1899 = icmp eq i32 %1898, 0
  %1900 = icmp slt i32 %1895, 10
  %1901 = or i1 %1899, %1900
  br i1 %1901, label %originalBB494, label %originalBB494alteredBB

originalBB494:                                    ; preds = %1893, %originalBB494alteredBB
  %1902 = load i32, i32* %23, align 4, !dbg !1399
  %1903 = load i32, i32* @x.17
  %1904 = load i32, i32* @y.18
  %1905 = sub i32 %1903, 1
  %1906 = mul i32 %1903, %1905
  %1907 = urem i32 %1906, 2
  %1908 = icmp eq i32 %1907, 0
  %1909 = icmp slt i32 %1904, 10
  %1910 = or i1 %1908, %1909
  br i1 %1910, label %originalBBpart2496, label %originalBB494alteredBB

originalBBpart2496:                               ; preds = %originalBB494
  switch i32 %1902, label %2467 [
    i32 2, label %1911
    i32 5, label %1964
  ], !dbg !1400

1911:                                             ; preds = %originalBBpart2496
  %1912 = load i32, i32* @x.17
  %1913 = load i32, i32* @y.18
  %1914 = sub i32 %1912, 1
  %1915 = mul i32 %1912, %1914
  %1916 = urem i32 %1915, 2
  %1917 = icmp eq i32 %1916, 0
  %1918 = icmp slt i32 %1913, 10
  %1919 = or i1 %1917, %1918
  br i1 %1919, label %originalBB498, label %originalBB498alteredBB

originalBB498:                                    ; preds = %1911, %originalBB498alteredBB
  %1920 = load i8, i8* %35, align 1, !dbg !1401
  %1921 = trunc i8 %1920 to i1, !dbg !1401
  %1922 = load i32, i32* @x.17
  %1923 = load i32, i32* @y.18
  %1924 = sub i32 %1922, 1
  %1925 = mul i32 %1922, %1924
  %1926 = urem i32 %1925, 2
  %1927 = icmp eq i32 %1926, 0
  %1928 = icmp slt i32 %1923, 10
  %1929 = or i1 %1927, %1928
  br i1 %1929, label %originalBBpart2500, label %originalBB498alteredBB

originalBBpart2500:                               ; preds = %originalBB498
  br i1 %1921, label %1930, label %1947, !dbg !1404

1930:                                             ; preds = %originalBBpart2500
  %1931 = load i32, i32* @x.17
  %1932 = load i32, i32* @y.18
  %1933 = sub i32 %1931, 1
  %1934 = mul i32 %1931, %1933
  %1935 = urem i32 %1934, 2
  %1936 = icmp eq i32 %1935, 0
  %1937 = icmp slt i32 %1932, 10
  %1938 = or i1 %1936, %1937
  br i1 %1938, label %originalBB502, label %originalBB502alteredBB

originalBB502:                                    ; preds = %1930, %originalBB502alteredBB
  %1939 = load i32, i32* @x.17
  %1940 = load i32, i32* @y.18
  %1941 = sub i32 %1939, 1
  %1942 = mul i32 %1939, %1941
  %1943 = urem i32 %1942, 2
  %1944 = icmp eq i32 %1943, 0
  %1945 = icmp slt i32 %1940, 10
  %1946 = or i1 %1944, %1945
  br i1 %1946, label %originalBBpart2504, label %originalBB502alteredBB

originalBBpart2504:                               ; preds = %originalBB502
  br label %6990, !dbg !1405

1947:                                             ; preds = %originalBBpart2500
  %1948 = load i32, i32* @x.17
  %1949 = load i32, i32* @y.18
  %1950 = sub i32 %1948, 1
  %1951 = mul i32 %1948, %1950
  %1952 = urem i32 %1951, 2
  %1953 = icmp eq i32 %1952, 0
  %1954 = icmp slt i32 %1949, 10
  %1955 = or i1 %1953, %1954
  br i1 %1955, label %originalBB506, label %originalBB506alteredBB

originalBB506:                                    ; preds = %1947, %originalBB506alteredBB
  %1956 = load i32, i32* @x.17
  %1957 = load i32, i32* @y.18
  %1958 = sub i32 %1956, 1
  %1959 = mul i32 %1956, %1958
  %1960 = urem i32 %1959, 2
  %1961 = icmp eq i32 %1960, 0
  %1962 = icmp slt i32 %1957, 10
  %1963 = or i1 %1961, %1962
  br i1 %1963, label %originalBBpart2508, label %originalBB506alteredBB

originalBBpart2508:                               ; preds = %originalBB506
  br label %2484, !dbg !1406

1964:                                             ; preds = %originalBBpart2496
  %1965 = load i32, i32* @x.17
  %1966 = load i32, i32* @y.18
  %1967 = sub i32 %1965, 1
  %1968 = mul i32 %1965, %1967
  %1969 = urem i32 %1968, 2
  %1970 = icmp eq i32 %1969, 0
  %1971 = icmp slt i32 %1966, 10
  %1972 = or i1 %1970, %1971
  br i1 %1972, label %originalBB510, label %originalBB510alteredBB

originalBB510:                                    ; preds = %1964, %originalBB510alteredBB
  %1973 = load i32, i32* %24, align 4, !dbg !1407
  %1974 = and i32 %1973, 4, !dbg !1409
  %1975 = icmp ne i32 %1974, 0, !dbg !1409
  %1976 = load i32, i32* @x.17
  %1977 = load i32, i32* @y.18
  %1978 = sub i32 %1976, 1
  %1979 = mul i32 %1976, %1978
  %1980 = urem i32 %1979, 2
  %1981 = icmp eq i32 %1980, 0
  %1982 = icmp slt i32 %1977, 10
  %1983 = or i1 %1981, %1982
  br i1 %1983, label %originalBBpart2518, label %originalBB510alteredBB

originalBBpart2518:                               ; preds = %originalBB510
  br i1 %1975, label %1984, label %2450, !dbg !1410

1984:                                             ; preds = %originalBBpart2518
  %1985 = load i32, i32* @x.17
  %1986 = load i32, i32* @y.18
  %1987 = sub i32 %1985, 1
  %1988 = mul i32 %1985, %1987
  %1989 = urem i32 %1988, 2
  %1990 = icmp eq i32 %1989, 0
  %1991 = icmp slt i32 %1986, 10
  %1992 = or i1 %1990, %1991
  br i1 %1992, label %originalBB520, label %originalBB520alteredBB

originalBB520:                                    ; preds = %1984, %originalBB520alteredBB
  %1993 = load i64, i64* %28, align 8, !dbg !1411
  %1994 = add i64 %1993, 2, !dbg !1412
  %1995 = load i64, i64* %22, align 8, !dbg !1413
  %1996 = icmp ult i64 %1994, %1995, !dbg !1414
  %1997 = load i32, i32* @x.17
  %1998 = load i32, i32* @y.18
  %1999 = sub i32 %1997, 1
  %2000 = mul i32 %1997, %1999
  %2001 = urem i32 %2000, 2
  %2002 = icmp eq i32 %2001, 0
  %2003 = icmp slt i32 %1998, 10
  %2004 = or i1 %2002, %2003
  br i1 %2004, label %originalBBpart2528, label %originalBB520alteredBB

originalBBpart2528:                               ; preds = %originalBB520
  br i1 %1996, label %2005, label %2450, !dbg !1415

2005:                                             ; preds = %originalBBpart2528
  %2006 = load i32, i32* @x.17
  %2007 = load i32, i32* @y.18
  %2008 = sub i32 %2006, 1
  %2009 = mul i32 %2006, %2008
  %2010 = urem i32 %2009, 2
  %2011 = icmp eq i32 %2010, 0
  %2012 = icmp slt i32 %2007, 10
  %2013 = or i1 %2011, %2012
  br i1 %2013, label %originalBB530, label %originalBB530alteredBB

originalBB530:                                    ; preds = %2005, %originalBB530alteredBB
  %2014 = load i8*, i8** %21, align 8, !dbg !1416
  %2015 = load i64, i64* %28, align 8, !dbg !1417
  %2016 = add i64 %2015, 1, !dbg !1418
  %2017 = getelementptr inbounds i8, i8* %2014, i64 %2016, !dbg !1416
  %2018 = load i8, i8* %2017, align 1, !dbg !1416
  %2019 = sext i8 %2018 to i32, !dbg !1416
  %2020 = icmp eq i32 %2019, 63, !dbg !1419
  %2021 = load i32, i32* @x.17
  %2022 = load i32, i32* @y.18
  %2023 = sub i32 %2021, 1
  %2024 = mul i32 %2021, %2023
  %2025 = urem i32 %2024, 2
  %2026 = icmp eq i32 %2025, 0
  %2027 = icmp slt i32 %2022, 10
  %2028 = or i1 %2026, %2027
  br i1 %2028, label %originalBBpart2536, label %originalBB530alteredBB

originalBBpart2536:                               ; preds = %originalBB530
  br i1 %2020, label %2029, label %2450, !dbg !1420

2029:                                             ; preds = %originalBBpart2536
  %2030 = load i32, i32* @x.17
  %2031 = load i32, i32* @y.18
  %2032 = sub i32 %2030, 1
  %2033 = mul i32 %2030, %2032
  %2034 = urem i32 %2033, 2
  %2035 = icmp eq i32 %2034, 0
  %2036 = icmp slt i32 %2031, 10
  %2037 = or i1 %2035, %2036
  br i1 %2037, label %originalBB538, label %originalBB538alteredBB

originalBB538:                                    ; preds = %2029, %originalBB538alteredBB
  %2038 = load i8*, i8** %21, align 8, !dbg !1421
  %2039 = load i64, i64* %28, align 8, !dbg !1422
  %2040 = add i64 %2039, 2, !dbg !1423
  %2041 = getelementptr inbounds i8, i8* %2038, i64 %2040, !dbg !1421
  %2042 = load i8, i8* %2041, align 1, !dbg !1421
  %2043 = sext i8 %2042 to i32, !dbg !1421
  %2044 = load i32, i32* @x.17
  %2045 = load i32, i32* @y.18
  %2046 = sub i32 %2044, 1
  %2047 = mul i32 %2044, %2046
  %2048 = urem i32 %2047, 2
  %2049 = icmp eq i32 %2048, 0
  %2050 = icmp slt i32 %2045, 10
  %2051 = or i1 %2049, %2050
  br i1 %2051, label %originalBBpart2547, label %originalBB538alteredBB

originalBBpart2547:                               ; preds = %originalBB538
  switch i32 %2043, label %2416 [
    i32 33, label %2052
    i32 39, label %2052
    i32 40, label %2052
    i32 41, label %2052
    i32 45, label %2052
    i32 47, label %2052
    i32 60, label %2052
    i32 61, label %2052
    i32 62, label %2052
  ], !dbg !1424

2052:                                             ; preds = %originalBBpart2547, %originalBBpart2547, %originalBBpart2547, %originalBBpart2547, %originalBBpart2547, %originalBBpart2547, %originalBBpart2547, %originalBBpart2547, %originalBBpart2547
  %2053 = load i32, i32* @x.17
  %2054 = load i32, i32* @y.18
  %2055 = sub i32 %2053, 1
  %2056 = mul i32 %2053, %2055
  %2057 = urem i32 %2056, 2
  %2058 = icmp eq i32 %2057, 0
  %2059 = icmp slt i32 %2054, 10
  %2060 = or i1 %2058, %2059
  br i1 %2060, label %originalBB549, label %originalBB549alteredBB

originalBB549:                                    ; preds = %2052, %originalBB549alteredBB
  %2061 = load i8, i8* %35, align 1, !dbg !1425
  %2062 = trunc i8 %2061 to i1, !dbg !1425
  %2063 = load i32, i32* @x.17
  %2064 = load i32, i32* @y.18
  %2065 = sub i32 %2063, 1
  %2066 = mul i32 %2063, %2065
  %2067 = urem i32 %2066, 2
  %2068 = icmp eq i32 %2067, 0
  %2069 = icmp slt i32 %2064, 10
  %2070 = or i1 %2068, %2069
  br i1 %2070, label %originalBBpart2551, label %originalBB549alteredBB

originalBBpart2551:                               ; preds = %originalBB549
  br i1 %2062, label %2071, label %2088, !dbg !1428

2071:                                             ; preds = %originalBBpart2551
  %2072 = load i32, i32* @x.17
  %2073 = load i32, i32* @y.18
  %2074 = sub i32 %2072, 1
  %2075 = mul i32 %2072, %2074
  %2076 = urem i32 %2075, 2
  %2077 = icmp eq i32 %2076, 0
  %2078 = icmp slt i32 %2073, 10
  %2079 = or i1 %2077, %2078
  br i1 %2079, label %originalBB553, label %originalBB553alteredBB

originalBB553:                                    ; preds = %2071, %originalBB553alteredBB
  %2080 = load i32, i32* @x.17
  %2081 = load i32, i32* @y.18
  %2082 = sub i32 %2080, 1
  %2083 = mul i32 %2080, %2082
  %2084 = urem i32 %2083, 2
  %2085 = icmp eq i32 %2084, 0
  %2086 = icmp slt i32 %2081, 10
  %2087 = or i1 %2085, %2086
  br i1 %2087, label %originalBBpart2555, label %originalBB553alteredBB

originalBBpart2555:                               ; preds = %originalBB553
  br label %6990, !dbg !1429

2088:                                             ; preds = %originalBBpart2551
  %2089 = load i32, i32* @x.17
  %2090 = load i32, i32* @y.18
  %2091 = sub i32 %2089, 1
  %2092 = mul i32 %2089, %2091
  %2093 = urem i32 %2092, 2
  %2094 = icmp eq i32 %2093, 0
  %2095 = icmp slt i32 %2090, 10
  %2096 = or i1 %2094, %2095
  br i1 %2096, label %originalBB557, label %originalBB557alteredBB

originalBB557:                                    ; preds = %2088, %originalBB557alteredBB
  %2097 = load i8*, i8** %21, align 8, !dbg !1430
  %2098 = load i64, i64* %28, align 8, !dbg !1431
  %2099 = add i64 %2098, 2, !dbg !1432
  %2100 = getelementptr inbounds i8, i8* %2097, i64 %2099, !dbg !1430
  %2101 = load i8, i8* %2100, align 1, !dbg !1430
  store i8 %2101, i8* %39, align 1, !dbg !1433
  %2102 = load i64, i64* %28, align 8, !dbg !1434
  %2103 = add i64 %2102, 2, !dbg !1434
  store i64 %2103, i64* %28, align 8, !dbg !1434
  %2104 = load i32, i32* @x.17
  %2105 = load i32, i32* @y.18
  %2106 = sub i32 %2104, 1
  %2107 = mul i32 %2104, %2106
  %2108 = urem i32 %2107, 2
  %2109 = icmp eq i32 %2108, 0
  %2110 = icmp slt i32 %2105, 10
  %2111 = or i1 %2109, %2110
  br i1 %2111, label %originalBBpart2570, label %originalBB557alteredBB

originalBBpart2570:                               ; preds = %originalBB557
  br label %2112, !dbg !1435

2112:                                             ; preds = %originalBBpart2570
  %2113 = load i32, i32* @x.17
  %2114 = load i32, i32* @y.18
  %2115 = sub i32 %2113, 1
  %2116 = mul i32 %2113, %2115
  %2117 = urem i32 %2116, 2
  %2118 = icmp eq i32 %2117, 0
  %2119 = icmp slt i32 %2114, 10
  %2120 = or i1 %2118, %2119
  br i1 %2120, label %originalBB572, label %originalBB572alteredBB

originalBB572:                                    ; preds = %2112, %originalBB572alteredBB
  %2121 = load i64, i64* %29, align 8, !dbg !1436
  %2122 = load i64, i64* %20, align 8, !dbg !1436
  %2123 = icmp ult i64 %2121, %2122, !dbg !1436
  %2124 = load i32, i32* @x.17
  %2125 = load i32, i32* @y.18
  %2126 = sub i32 %2124, 1
  %2127 = mul i32 %2124, %2126
  %2128 = urem i32 %2127, 2
  %2129 = icmp eq i32 %2128, 0
  %2130 = icmp slt i32 %2125, 10
  %2131 = or i1 %2129, %2130
  br i1 %2131, label %originalBBpart2574, label %originalBB572alteredBB

originalBBpart2574:                               ; preds = %originalBB572
  br i1 %2123, label %2132, label %2152, !dbg !1439

2132:                                             ; preds = %originalBBpart2574
  %2133 = load i32, i32* @x.17
  %2134 = load i32, i32* @y.18
  %2135 = sub i32 %2133, 1
  %2136 = mul i32 %2133, %2135
  %2137 = urem i32 %2136, 2
  %2138 = icmp eq i32 %2137, 0
  %2139 = icmp slt i32 %2134, 10
  %2140 = or i1 %2138, %2139
  br i1 %2140, label %originalBB576, label %originalBB576alteredBB

originalBB576:                                    ; preds = %2132, %originalBB576alteredBB
  %2141 = load i8*, i8** %19, align 8, !dbg !1436
  %2142 = load i64, i64* %29, align 8, !dbg !1436
  %2143 = getelementptr inbounds i8, i8* %2141, i64 %2142, !dbg !1436
  store i8 63, i8* %2143, align 1, !dbg !1436
  %2144 = load i32, i32* @x.17
  %2145 = load i32, i32* @y.18
  %2146 = sub i32 %2144, 1
  %2147 = mul i32 %2144, %2146
  %2148 = urem i32 %2147, 2
  %2149 = icmp eq i32 %2148, 0
  %2150 = icmp slt i32 %2145, 10
  %2151 = or i1 %2149, %2150
  br i1 %2151, label %originalBBpart2578, label %originalBB576alteredBB

originalBBpart2578:                               ; preds = %originalBB576
  br label %2152, !dbg !1436

2152:                                             ; preds = %originalBBpart2578, %originalBBpart2574
  %2153 = load i32, i32* @x.17
  %2154 = load i32, i32* @y.18
  %2155 = sub i32 %2153, 1
  %2156 = mul i32 %2153, %2155
  %2157 = urem i32 %2156, 2
  %2158 = icmp eq i32 %2157, 0
  %2159 = icmp slt i32 %2154, 10
  %2160 = or i1 %2158, %2159
  br i1 %2160, label %originalBB580, label %originalBB580alteredBB

originalBB580:                                    ; preds = %2152, %originalBB580alteredBB
  %2161 = load i64, i64* %29, align 8, !dbg !1439
  %2162 = add i64 %2161, 1, !dbg !1439
  store i64 %2162, i64* %29, align 8, !dbg !1439
  %2163 = load i32, i32* @x.17
  %2164 = load i32, i32* @y.18
  %2165 = sub i32 %2163, 1
  %2166 = mul i32 %2163, %2165
  %2167 = urem i32 %2166, 2
  %2168 = icmp eq i32 %2167, 0
  %2169 = icmp slt i32 %2164, 10
  %2170 = or i1 %2168, %2169
  br i1 %2170, label %originalBBpart2584, label %originalBB580alteredBB

originalBBpart2584:                               ; preds = %originalBB580
  br label %2171, !dbg !1439

2171:                                             ; preds = %originalBBpart2584
  %2172 = load i32, i32* @x.17
  %2173 = load i32, i32* @y.18
  %2174 = sub i32 %2172, 1
  %2175 = mul i32 %2172, %2174
  %2176 = urem i32 %2175, 2
  %2177 = icmp eq i32 %2176, 0
  %2178 = icmp slt i32 %2173, 10
  %2179 = or i1 %2177, %2178
  br i1 %2179, label %originalBB586, label %originalBB586alteredBB

originalBB586:                                    ; preds = %2171, %originalBB586alteredBB
  %2180 = load i32, i32* @x.17
  %2181 = load i32, i32* @y.18
  %2182 = sub i32 %2180, 1
  %2183 = mul i32 %2180, %2182
  %2184 = urem i32 %2183, 2
  %2185 = icmp eq i32 %2184, 0
  %2186 = icmp slt i32 %2181, 10
  %2187 = or i1 %2185, %2186
  br i1 %2187, label %originalBBpart2588, label %originalBB586alteredBB

originalBBpart2588:                               ; preds = %originalBB586
  br label %2188, !dbg !1440

2188:                                             ; preds = %originalBBpart2588
  %2189 = load i32, i32* @x.17
  %2190 = load i32, i32* @y.18
  %2191 = sub i32 %2189, 1
  %2192 = mul i32 %2189, %2191
  %2193 = urem i32 %2192, 2
  %2194 = icmp eq i32 %2193, 0
  %2195 = icmp slt i32 %2190, 10
  %2196 = or i1 %2194, %2195
  br i1 %2196, label %originalBB590, label %originalBB590alteredBB

originalBB590:                                    ; preds = %2188, %originalBB590alteredBB
  %2197 = load i64, i64* %29, align 8, !dbg !1441
  %2198 = load i64, i64* %20, align 8, !dbg !1441
  %2199 = icmp ult i64 %2197, %2198, !dbg !1441
  %2200 = load i32, i32* @x.17
  %2201 = load i32, i32* @y.18
  %2202 = sub i32 %2200, 1
  %2203 = mul i32 %2200, %2202
  %2204 = urem i32 %2203, 2
  %2205 = icmp eq i32 %2204, 0
  %2206 = icmp slt i32 %2201, 10
  %2207 = or i1 %2205, %2206
  br i1 %2207, label %originalBBpart2592, label %originalBB590alteredBB

originalBBpart2592:                               ; preds = %originalBB590
  br i1 %2199, label %2208, label %2228, !dbg !1444

2208:                                             ; preds = %originalBBpart2592
  %2209 = load i32, i32* @x.17
  %2210 = load i32, i32* @y.18
  %2211 = sub i32 %2209, 1
  %2212 = mul i32 %2209, %2211
  %2213 = urem i32 %2212, 2
  %2214 = icmp eq i32 %2213, 0
  %2215 = icmp slt i32 %2210, 10
  %2216 = or i1 %2214, %2215
  br i1 %2216, label %originalBB594, label %originalBB594alteredBB

originalBB594:                                    ; preds = %2208, %originalBB594alteredBB
  %2217 = load i8*, i8** %19, align 8, !dbg !1441
  %2218 = load i64, i64* %29, align 8, !dbg !1441
  %2219 = getelementptr inbounds i8, i8* %2217, i64 %2218, !dbg !1441
  store i8 34, i8* %2219, align 1, !dbg !1441
  %2220 = load i32, i32* @x.17
  %2221 = load i32, i32* @y.18
  %2222 = sub i32 %2220, 1
  %2223 = mul i32 %2220, %2222
  %2224 = urem i32 %2223, 2
  %2225 = icmp eq i32 %2224, 0
  %2226 = icmp slt i32 %2221, 10
  %2227 = or i1 %2225, %2226
  br i1 %2227, label %originalBBpart2596, label %originalBB594alteredBB

originalBBpart2596:                               ; preds = %originalBB594
  br label %2228, !dbg !1441

2228:                                             ; preds = %originalBBpart2596, %originalBBpart2592
  %2229 = load i32, i32* @x.17
  %2230 = load i32, i32* @y.18
  %2231 = sub i32 %2229, 1
  %2232 = mul i32 %2229, %2231
  %2233 = urem i32 %2232, 2
  %2234 = icmp eq i32 %2233, 0
  %2235 = icmp slt i32 %2230, 10
  %2236 = or i1 %2234, %2235
  br i1 %2236, label %originalBB598, label %originalBB598alteredBB

originalBB598:                                    ; preds = %2228, %originalBB598alteredBB
  %2237 = load i64, i64* %29, align 8, !dbg !1444
  %2238 = add i64 %2237, 1, !dbg !1444
  store i64 %2238, i64* %29, align 8, !dbg !1444
  %2239 = load i32, i32* @x.17
  %2240 = load i32, i32* @y.18
  %2241 = sub i32 %2239, 1
  %2242 = mul i32 %2239, %2241
  %2243 = urem i32 %2242, 2
  %2244 = icmp eq i32 %2243, 0
  %2245 = icmp slt i32 %2240, 10
  %2246 = or i1 %2244, %2245
  br i1 %2246, label %originalBBpart2604, label %originalBB598alteredBB

originalBBpart2604:                               ; preds = %originalBB598
  br label %2247, !dbg !1444

2247:                                             ; preds = %originalBBpart2604
  %2248 = load i32, i32* @x.17
  %2249 = load i32, i32* @y.18
  %2250 = sub i32 %2248, 1
  %2251 = mul i32 %2248, %2250
  %2252 = urem i32 %2251, 2
  %2253 = icmp eq i32 %2252, 0
  %2254 = icmp slt i32 %2249, 10
  %2255 = or i1 %2253, %2254
  br i1 %2255, label %originalBB606, label %originalBB606alteredBB

originalBB606:                                    ; preds = %2247, %originalBB606alteredBB
  %2256 = load i32, i32* @x.17
  %2257 = load i32, i32* @y.18
  %2258 = sub i32 %2256, 1
  %2259 = mul i32 %2256, %2258
  %2260 = urem i32 %2259, 2
  %2261 = icmp eq i32 %2260, 0
  %2262 = icmp slt i32 %2257, 10
  %2263 = or i1 %2261, %2262
  br i1 %2263, label %originalBBpart2608, label %originalBB606alteredBB

originalBBpart2608:                               ; preds = %originalBB606
  br label %2264, !dbg !1445

2264:                                             ; preds = %originalBBpart2608
  %2265 = load i32, i32* @x.17
  %2266 = load i32, i32* @y.18
  %2267 = sub i32 %2265, 1
  %2268 = mul i32 %2265, %2267
  %2269 = urem i32 %2268, 2
  %2270 = icmp eq i32 %2269, 0
  %2271 = icmp slt i32 %2266, 10
  %2272 = or i1 %2270, %2271
  br i1 %2272, label %originalBB610, label %originalBB610alteredBB

originalBB610:                                    ; preds = %2264, %originalBB610alteredBB
  %2273 = load i64, i64* %29, align 8, !dbg !1446
  %2274 = load i64, i64* %20, align 8, !dbg !1446
  %2275 = icmp ult i64 %2273, %2274, !dbg !1446
  %2276 = load i32, i32* @x.17
  %2277 = load i32, i32* @y.18
  %2278 = sub i32 %2276, 1
  %2279 = mul i32 %2276, %2278
  %2280 = urem i32 %2279, 2
  %2281 = icmp eq i32 %2280, 0
  %2282 = icmp slt i32 %2277, 10
  %2283 = or i1 %2281, %2282
  br i1 %2283, label %originalBBpart2612, label %originalBB610alteredBB

originalBBpart2612:                               ; preds = %originalBB610
  br i1 %2275, label %2284, label %2304, !dbg !1449

2284:                                             ; preds = %originalBBpart2612
  %2285 = load i32, i32* @x.17
  %2286 = load i32, i32* @y.18
  %2287 = sub i32 %2285, 1
  %2288 = mul i32 %2285, %2287
  %2289 = urem i32 %2288, 2
  %2290 = icmp eq i32 %2289, 0
  %2291 = icmp slt i32 %2286, 10
  %2292 = or i1 %2290, %2291
  br i1 %2292, label %originalBB614, label %originalBB614alteredBB

originalBB614:                                    ; preds = %2284, %originalBB614alteredBB
  %2293 = load i8*, i8** %19, align 8, !dbg !1446
  %2294 = load i64, i64* %29, align 8, !dbg !1446
  %2295 = getelementptr inbounds i8, i8* %2293, i64 %2294, !dbg !1446
  store i8 34, i8* %2295, align 1, !dbg !1446
  %2296 = load i32, i32* @x.17
  %2297 = load i32, i32* @y.18
  %2298 = sub i32 %2296, 1
  %2299 = mul i32 %2296, %2298
  %2300 = urem i32 %2299, 2
  %2301 = icmp eq i32 %2300, 0
  %2302 = icmp slt i32 %2297, 10
  %2303 = or i1 %2301, %2302
  br i1 %2303, label %originalBBpart2616, label %originalBB614alteredBB

originalBBpart2616:                               ; preds = %originalBB614
  br label %2304, !dbg !1446

2304:                                             ; preds = %originalBBpart2616, %originalBBpart2612
  %2305 = load i32, i32* @x.17
  %2306 = load i32, i32* @y.18
  %2307 = sub i32 %2305, 1
  %2308 = mul i32 %2305, %2307
  %2309 = urem i32 %2308, 2
  %2310 = icmp eq i32 %2309, 0
  %2311 = icmp slt i32 %2306, 10
  %2312 = or i1 %2310, %2311
  br i1 %2312, label %originalBB618, label %originalBB618alteredBB

originalBB618:                                    ; preds = %2304, %originalBB618alteredBB
  %2313 = load i64, i64* %29, align 8, !dbg !1449
  %2314 = add i64 %2313, 1, !dbg !1449
  store i64 %2314, i64* %29, align 8, !dbg !1449
  %2315 = load i32, i32* @x.17
  %2316 = load i32, i32* @y.18
  %2317 = sub i32 %2315, 1
  %2318 = mul i32 %2315, %2317
  %2319 = urem i32 %2318, 2
  %2320 = icmp eq i32 %2319, 0
  %2321 = icmp slt i32 %2316, 10
  %2322 = or i1 %2320, %2321
  br i1 %2322, label %originalBBpart2630, label %originalBB618alteredBB

originalBBpart2630:                               ; preds = %originalBB618
  br label %2323, !dbg !1449

2323:                                             ; preds = %originalBBpart2630
  %2324 = load i32, i32* @x.17
  %2325 = load i32, i32* @y.18
  %2326 = sub i32 %2324, 1
  %2327 = mul i32 %2324, %2326
  %2328 = urem i32 %2327, 2
  %2329 = icmp eq i32 %2328, 0
  %2330 = icmp slt i32 %2325, 10
  %2331 = or i1 %2329, %2330
  br i1 %2331, label %originalBB632, label %originalBB632alteredBB

originalBB632:                                    ; preds = %2323, %originalBB632alteredBB
  %2332 = load i32, i32* @x.17
  %2333 = load i32, i32* @y.18
  %2334 = sub i32 %2332, 1
  %2335 = mul i32 %2332, %2334
  %2336 = urem i32 %2335, 2
  %2337 = icmp eq i32 %2336, 0
  %2338 = icmp slt i32 %2333, 10
  %2339 = or i1 %2337, %2338
  br i1 %2339, label %originalBBpart2634, label %originalBB632alteredBB

originalBBpart2634:                               ; preds = %originalBB632
  br label %2340, !dbg !1450

2340:                                             ; preds = %originalBBpart2634
  %2341 = load i32, i32* @x.17
  %2342 = load i32, i32* @y.18
  %2343 = sub i32 %2341, 1
  %2344 = mul i32 %2341, %2343
  %2345 = urem i32 %2344, 2
  %2346 = icmp eq i32 %2345, 0
  %2347 = icmp slt i32 %2342, 10
  %2348 = or i1 %2346, %2347
  br i1 %2348, label %originalBB636, label %originalBB636alteredBB

originalBB636:                                    ; preds = %2340, %originalBB636alteredBB
  %2349 = load i64, i64* %29, align 8, !dbg !1451
  %2350 = load i64, i64* %20, align 8, !dbg !1451
  %2351 = icmp ult i64 %2349, %2350, !dbg !1451
  %2352 = load i32, i32* @x.17
  %2353 = load i32, i32* @y.18
  %2354 = sub i32 %2352, 1
  %2355 = mul i32 %2352, %2354
  %2356 = urem i32 %2355, 2
  %2357 = icmp eq i32 %2356, 0
  %2358 = icmp slt i32 %2353, 10
  %2359 = or i1 %2357, %2358
  br i1 %2359, label %originalBBpart2638, label %originalBB636alteredBB

originalBBpart2638:                               ; preds = %originalBB636
  br i1 %2351, label %2360, label %2380, !dbg !1454

2360:                                             ; preds = %originalBBpart2638
  %2361 = load i32, i32* @x.17
  %2362 = load i32, i32* @y.18
  %2363 = sub i32 %2361, 1
  %2364 = mul i32 %2361, %2363
  %2365 = urem i32 %2364, 2
  %2366 = icmp eq i32 %2365, 0
  %2367 = icmp slt i32 %2362, 10
  %2368 = or i1 %2366, %2367
  br i1 %2368, label %originalBB640, label %originalBB640alteredBB

originalBB640:                                    ; preds = %2360, %originalBB640alteredBB
  %2369 = load i8*, i8** %19, align 8, !dbg !1451
  %2370 = load i64, i64* %29, align 8, !dbg !1451
  %2371 = getelementptr inbounds i8, i8* %2369, i64 %2370, !dbg !1451
  store i8 63, i8* %2371, align 1, !dbg !1451
  %2372 = load i32, i32* @x.17
  %2373 = load i32, i32* @y.18
  %2374 = sub i32 %2372, 1
  %2375 = mul i32 %2372, %2374
  %2376 = urem i32 %2375, 2
  %2377 = icmp eq i32 %2376, 0
  %2378 = icmp slt i32 %2373, 10
  %2379 = or i1 %2377, %2378
  br i1 %2379, label %originalBBpart2642, label %originalBB640alteredBB

originalBBpart2642:                               ; preds = %originalBB640
  br label %2380, !dbg !1451

2380:                                             ; preds = %originalBBpart2642, %originalBBpart2638
  %2381 = load i32, i32* @x.17
  %2382 = load i32, i32* @y.18
  %2383 = sub i32 %2381, 1
  %2384 = mul i32 %2381, %2383
  %2385 = urem i32 %2384, 2
  %2386 = icmp eq i32 %2385, 0
  %2387 = icmp slt i32 %2382, 10
  %2388 = or i1 %2386, %2387
  br i1 %2388, label %originalBB644, label %originalBB644alteredBB

originalBB644:                                    ; preds = %2380, %originalBB644alteredBB
  %2389 = load i64, i64* %29, align 8, !dbg !1454
  %2390 = add i64 %2389, 1, !dbg !1454
  store i64 %2390, i64* %29, align 8, !dbg !1454
  %2391 = load i32, i32* @x.17
  %2392 = load i32, i32* @y.18
  %2393 = sub i32 %2391, 1
  %2394 = mul i32 %2391, %2393
  %2395 = urem i32 %2394, 2
  %2396 = icmp eq i32 %2395, 0
  %2397 = icmp slt i32 %2392, 10
  %2398 = or i1 %2396, %2397
  br i1 %2398, label %originalBBpart2649, label %originalBB644alteredBB

originalBBpart2649:                               ; preds = %originalBB644
  br label %2399, !dbg !1454

2399:                                             ; preds = %originalBBpart2649
  %2400 = load i32, i32* @x.17
  %2401 = load i32, i32* @y.18
  %2402 = sub i32 %2400, 1
  %2403 = mul i32 %2400, %2402
  %2404 = urem i32 %2403, 2
  %2405 = icmp eq i32 %2404, 0
  %2406 = icmp slt i32 %2401, 10
  %2407 = or i1 %2405, %2406
  br i1 %2407, label %originalBB651, label %originalBB651alteredBB

originalBB651:                                    ; preds = %2399, %originalBB651alteredBB
  %2408 = load i32, i32* @x.17
  %2409 = load i32, i32* @y.18
  %2410 = sub i32 %2408, 1
  %2411 = mul i32 %2408, %2410
  %2412 = urem i32 %2411, 2
  %2413 = icmp eq i32 %2412, 0
  %2414 = icmp slt i32 %2409, 10
  %2415 = or i1 %2413, %2414
  br i1 %2415, label %originalBBpart2653, label %originalBB651alteredBB

originalBBpart2653:                               ; preds = %originalBB651
  br label %2433, !dbg !1455

2416:                                             ; preds = %originalBBpart2547
  %2417 = load i32, i32* @x.17
  %2418 = load i32, i32* @y.18
  %2419 = sub i32 %2417, 1
  %2420 = mul i32 %2417, %2419
  %2421 = urem i32 %2420, 2
  %2422 = icmp eq i32 %2421, 0
  %2423 = icmp slt i32 %2418, 10
  %2424 = or i1 %2422, %2423
  br i1 %2424, label %originalBB655, label %originalBB655alteredBB

originalBB655:                                    ; preds = %2416, %originalBB655alteredBB
  %2425 = load i32, i32* @x.17
  %2426 = load i32, i32* @y.18
  %2427 = sub i32 %2425, 1
  %2428 = mul i32 %2425, %2427
  %2429 = urem i32 %2428, 2
  %2430 = icmp eq i32 %2429, 0
  %2431 = icmp slt i32 %2426, 10
  %2432 = or i1 %2430, %2431
  br i1 %2432, label %originalBBpart2657, label %originalBB655alteredBB

originalBBpart2657:                               ; preds = %originalBB655
  br label %2433, !dbg !1456

2433:                                             ; preds = %originalBBpart2657, %originalBBpart2653
  %2434 = load i32, i32* @x.17
  %2435 = load i32, i32* @y.18
  %2436 = sub i32 %2434, 1
  %2437 = mul i32 %2434, %2436
  %2438 = urem i32 %2437, 2
  %2439 = icmp eq i32 %2438, 0
  %2440 = icmp slt i32 %2435, 10
  %2441 = or i1 %2439, %2440
  br i1 %2441, label %originalBB659, label %originalBB659alteredBB

originalBB659:                                    ; preds = %2433, %originalBB659alteredBB
  %2442 = load i32, i32* @x.17
  %2443 = load i32, i32* @y.18
  %2444 = sub i32 %2442, 1
  %2445 = mul i32 %2442, %2444
  %2446 = urem i32 %2445, 2
  %2447 = icmp eq i32 %2446, 0
  %2448 = icmp slt i32 %2443, 10
  %2449 = or i1 %2447, %2448
  br i1 %2449, label %originalBBpart2661, label %originalBB659alteredBB

originalBBpart2661:                               ; preds = %originalBB659
  br label %2450, !dbg !1457

2450:                                             ; preds = %originalBBpart2661, %originalBBpart2536, %originalBBpart2528, %originalBBpart2518
  %2451 = load i32, i32* @x.17
  %2452 = load i32, i32* @y.18
  %2453 = sub i32 %2451, 1
  %2454 = mul i32 %2451, %2453
  %2455 = urem i32 %2454, 2
  %2456 = icmp eq i32 %2455, 0
  %2457 = icmp slt i32 %2452, 10
  %2458 = or i1 %2456, %2457
  br i1 %2458, label %originalBB663, label %originalBB663alteredBB

originalBB663:                                    ; preds = %2450, %originalBB663alteredBB
  %2459 = load i32, i32* @x.17
  %2460 = load i32, i32* @y.18
  %2461 = sub i32 %2459, 1
  %2462 = mul i32 %2459, %2461
  %2463 = urem i32 %2462, 2
  %2464 = icmp eq i32 %2463, 0
  %2465 = icmp slt i32 %2460, 10
  %2466 = or i1 %2464, %2465
  br i1 %2466, label %originalBBpart2665, label %originalBB663alteredBB

originalBBpart2665:                               ; preds = %originalBB663
  br label %2484, !dbg !1458

2467:                                             ; preds = %originalBBpart2496
  %2468 = load i32, i32* @x.17
  %2469 = load i32, i32* @y.18
  %2470 = sub i32 %2468, 1
  %2471 = mul i32 %2468, %2470
  %2472 = urem i32 %2471, 2
  %2473 = icmp eq i32 %2472, 0
  %2474 = icmp slt i32 %2469, 10
  %2475 = or i1 %2473, %2474
  br i1 %2475, label %originalBB667, label %originalBB667alteredBB

originalBB667:                                    ; preds = %2467, %originalBB667alteredBB
  %2476 = load i32, i32* @x.17
  %2477 = load i32, i32* @y.18
  %2478 = sub i32 %2476, 1
  %2479 = mul i32 %2476, %2478
  %2480 = urem i32 %2479, 2
  %2481 = icmp eq i32 %2480, 0
  %2482 = icmp slt i32 %2477, 10
  %2483 = or i1 %2481, %2482
  br i1 %2483, label %originalBBpart2669, label %originalBB667alteredBB

originalBBpart2669:                               ; preds = %originalBB667
  br label %2484, !dbg !1459

2484:                                             ; preds = %originalBBpart2669, %originalBBpart2665, %originalBBpart2508
  %2485 = load i32, i32* @x.17
  %2486 = load i32, i32* @y.18
  %2487 = sub i32 %2485, 1
  %2488 = mul i32 %2485, %2487
  %2489 = urem i32 %2488, 2
  %2490 = icmp eq i32 %2489, 0
  %2491 = icmp slt i32 %2486, 10
  %2492 = or i1 %2490, %2491
  br i1 %2492, label %originalBB671, label %originalBB671alteredBB

originalBB671:                                    ; preds = %2484, %originalBB671alteredBB
  %2493 = load i32, i32* @x.17
  %2494 = load i32, i32* @y.18
  %2495 = sub i32 %2493, 1
  %2496 = mul i32 %2493, %2495
  %2497 = urem i32 %2496, 2
  %2498 = icmp eq i32 %2497, 0
  %2499 = icmp slt i32 %2494, 10
  %2500 = or i1 %2498, %2499
  br i1 %2500, label %originalBBpart2673, label %originalBB671alteredBB

originalBBpart2673:                               ; preds = %originalBB671
  br label %5465, !dbg !1460

2501:                                             ; preds = %originalBBpart2268
  %2502 = load i32, i32* @x.17
  %2503 = load i32, i32* @y.18
  %2504 = sub i32 %2502, 1
  %2505 = mul i32 %2502, %2504
  %2506 = urem i32 %2505, 2
  %2507 = icmp eq i32 %2506, 0
  %2508 = icmp slt i32 %2503, 10
  %2509 = or i1 %2507, %2508
  br i1 %2509, label %originalBB675, label %originalBB675alteredBB

originalBB675:                                    ; preds = %2501, %originalBB675alteredBB
  store i8 97, i8* %40, align 1, !dbg !1461
  %2510 = load i32, i32* @x.17
  %2511 = load i32, i32* @y.18
  %2512 = sub i32 %2510, 1
  %2513 = mul i32 %2510, %2512
  %2514 = urem i32 %2513, 2
  %2515 = icmp eq i32 %2514, 0
  %2516 = icmp slt i32 %2511, 10
  %2517 = or i1 %2515, %2516
  br i1 %2517, label %originalBBpart2677, label %originalBB675alteredBB

originalBBpart2677:                               ; preds = %originalBB675
  br label %2856, !dbg !1462

2518:                                             ; preds = %originalBBpart2268
  %2519 = load i32, i32* @x.17
  %2520 = load i32, i32* @y.18
  %2521 = sub i32 %2519, 1
  %2522 = mul i32 %2519, %2521
  %2523 = urem i32 %2522, 2
  %2524 = icmp eq i32 %2523, 0
  %2525 = icmp slt i32 %2520, 10
  %2526 = or i1 %2524, %2525
  br i1 %2526, label %originalBB679, label %originalBB679alteredBB

originalBB679:                                    ; preds = %2518, %originalBB679alteredBB
  store i8 98, i8* %40, align 1, !dbg !1463
  %2527 = load i32, i32* @x.17
  %2528 = load i32, i32* @y.18
  %2529 = sub i32 %2527, 1
  %2530 = mul i32 %2527, %2529
  %2531 = urem i32 %2530, 2
  %2532 = icmp eq i32 %2531, 0
  %2533 = icmp slt i32 %2528, 10
  %2534 = or i1 %2532, %2533
  br i1 %2534, label %originalBBpart2681, label %originalBB679alteredBB

originalBBpart2681:                               ; preds = %originalBB679
  br label %2856, !dbg !1464

2535:                                             ; preds = %originalBBpart2268
  %2536 = load i32, i32* @x.17
  %2537 = load i32, i32* @y.18
  %2538 = sub i32 %2536, 1
  %2539 = mul i32 %2536, %2538
  %2540 = urem i32 %2539, 2
  %2541 = icmp eq i32 %2540, 0
  %2542 = icmp slt i32 %2537, 10
  %2543 = or i1 %2541, %2542
  br i1 %2543, label %originalBB683, label %originalBB683alteredBB

originalBB683:                                    ; preds = %2535, %originalBB683alteredBB
  store i8 102, i8* %40, align 1, !dbg !1465
  %2544 = load i32, i32* @x.17
  %2545 = load i32, i32* @y.18
  %2546 = sub i32 %2544, 1
  %2547 = mul i32 %2544, %2546
  %2548 = urem i32 %2547, 2
  %2549 = icmp eq i32 %2548, 0
  %2550 = icmp slt i32 %2545, 10
  %2551 = or i1 %2549, %2550
  br i1 %2551, label %originalBBpart2685, label %originalBB683alteredBB

originalBBpart2685:                               ; preds = %originalBB683
  br label %2856, !dbg !1466

2552:                                             ; preds = %originalBBpart2268
  %2553 = load i32, i32* @x.17
  %2554 = load i32, i32* @y.18
  %2555 = sub i32 %2553, 1
  %2556 = mul i32 %2553, %2555
  %2557 = urem i32 %2556, 2
  %2558 = icmp eq i32 %2557, 0
  %2559 = icmp slt i32 %2554, 10
  %2560 = or i1 %2558, %2559
  br i1 %2560, label %originalBB687, label %originalBB687alteredBB

originalBB687:                                    ; preds = %2552, %originalBB687alteredBB
  store i8 110, i8* %40, align 1, !dbg !1467
  %2561 = load i32, i32* @x.17
  %2562 = load i32, i32* @y.18
  %2563 = sub i32 %2561, 1
  %2564 = mul i32 %2561, %2563
  %2565 = urem i32 %2564, 2
  %2566 = icmp eq i32 %2565, 0
  %2567 = icmp slt i32 %2562, 10
  %2568 = or i1 %2566, %2567
  br i1 %2568, label %originalBBpart2689, label %originalBB687alteredBB

originalBBpart2689:                               ; preds = %originalBB687
  br label %2784, !dbg !1468

2569:                                             ; preds = %originalBBpart2268
  %2570 = load i32, i32* @x.17
  %2571 = load i32, i32* @y.18
  %2572 = sub i32 %2570, 1
  %2573 = mul i32 %2570, %2572
  %2574 = urem i32 %2573, 2
  %2575 = icmp eq i32 %2574, 0
  %2576 = icmp slt i32 %2571, 10
  %2577 = or i1 %2575, %2576
  br i1 %2577, label %originalBB691, label %originalBB691alteredBB

originalBB691:                                    ; preds = %2569, %originalBB691alteredBB
  store i8 114, i8* %40, align 1, !dbg !1469
  %2578 = load i32, i32* @x.17
  %2579 = load i32, i32* @y.18
  %2580 = sub i32 %2578, 1
  %2581 = mul i32 %2578, %2580
  %2582 = urem i32 %2581, 2
  %2583 = icmp eq i32 %2582, 0
  %2584 = icmp slt i32 %2579, 10
  %2585 = or i1 %2583, %2584
  br i1 %2585, label %originalBBpart2693, label %originalBB691alteredBB

originalBBpart2693:                               ; preds = %originalBB691
  br label %2784, !dbg !1470

2586:                                             ; preds = %originalBBpart2268
  %2587 = load i32, i32* @x.17
  %2588 = load i32, i32* @y.18
  %2589 = sub i32 %2587, 1
  %2590 = mul i32 %2587, %2589
  %2591 = urem i32 %2590, 2
  %2592 = icmp eq i32 %2591, 0
  %2593 = icmp slt i32 %2588, 10
  %2594 = or i1 %2592, %2593
  br i1 %2594, label %originalBB695, label %originalBB695alteredBB

originalBB695:                                    ; preds = %2586, %originalBB695alteredBB
  store i8 116, i8* %40, align 1, !dbg !1471
  %2595 = load i32, i32* @x.17
  %2596 = load i32, i32* @y.18
  %2597 = sub i32 %2595, 1
  %2598 = mul i32 %2595, %2597
  %2599 = urem i32 %2598, 2
  %2600 = icmp eq i32 %2599, 0
  %2601 = icmp slt i32 %2596, 10
  %2602 = or i1 %2600, %2601
  br i1 %2602, label %originalBBpart2697, label %originalBB695alteredBB

originalBBpart2697:                               ; preds = %originalBB695
  br label %2784, !dbg !1472

2603:                                             ; preds = %originalBBpart2268
  %2604 = load i32, i32* @x.17
  %2605 = load i32, i32* @y.18
  %2606 = sub i32 %2604, 1
  %2607 = mul i32 %2604, %2606
  %2608 = urem i32 %2607, 2
  %2609 = icmp eq i32 %2608, 0
  %2610 = icmp slt i32 %2605, 10
  %2611 = or i1 %2609, %2610
  br i1 %2611, label %originalBB699, label %originalBB699alteredBB

originalBB699:                                    ; preds = %2603, %originalBB699alteredBB
  store i8 118, i8* %40, align 1, !dbg !1473
  %2612 = load i32, i32* @x.17
  %2613 = load i32, i32* @y.18
  %2614 = sub i32 %2612, 1
  %2615 = mul i32 %2612, %2614
  %2616 = urem i32 %2615, 2
  %2617 = icmp eq i32 %2616, 0
  %2618 = icmp slt i32 %2613, 10
  %2619 = or i1 %2617, %2618
  br i1 %2619, label %originalBBpart2701, label %originalBB699alteredBB

originalBBpart2701:                               ; preds = %originalBB699
  br label %2856, !dbg !1474

2620:                                             ; preds = %originalBBpart2268
  %2621 = load i32, i32* @x.17
  %2622 = load i32, i32* @y.18
  %2623 = sub i32 %2621, 1
  %2624 = mul i32 %2621, %2623
  %2625 = urem i32 %2624, 2
  %2626 = icmp eq i32 %2625, 0
  %2627 = icmp slt i32 %2622, 10
  %2628 = or i1 %2626, %2627
  br i1 %2628, label %originalBB703, label %originalBB703alteredBB

originalBB703:                                    ; preds = %2620, %originalBB703alteredBB
  %2629 = load i8, i8* %39, align 1, !dbg !1475
  store i8 %2629, i8* %40, align 1, !dbg !1476
  %2630 = load i32, i32* %23, align 4, !dbg !1477
  %2631 = icmp eq i32 %2630, 2, !dbg !1479
  %2632 = load i32, i32* @x.17
  %2633 = load i32, i32* @y.18
  %2634 = sub i32 %2632, 1
  %2635 = mul i32 %2632, %2634
  %2636 = urem i32 %2635, 2
  %2637 = icmp eq i32 %2636, 0
  %2638 = icmp slt i32 %2633, 10
  %2639 = or i1 %2637, %2638
  br i1 %2639, label %originalBBpart2705, label %originalBB703alteredBB

originalBBpart2705:                               ; preds = %originalBB703
  br i1 %2631, label %2640, label %2693, !dbg !1480

2640:                                             ; preds = %originalBBpart2705
  %2641 = load i32, i32* @x.17
  %2642 = load i32, i32* @y.18
  %2643 = sub i32 %2641, 1
  %2644 = mul i32 %2641, %2643
  %2645 = urem i32 %2644, 2
  %2646 = icmp eq i32 %2645, 0
  %2647 = icmp slt i32 %2642, 10
  %2648 = or i1 %2646, %2647
  br i1 %2648, label %originalBB707, label %originalBB707alteredBB

originalBB707:                                    ; preds = %2640, %originalBB707alteredBB
  %2649 = load i8, i8* %35, align 1, !dbg !1481
  %2650 = trunc i8 %2649 to i1, !dbg !1481
  %2651 = load i32, i32* @x.17
  %2652 = load i32, i32* @y.18
  %2653 = sub i32 %2651, 1
  %2654 = mul i32 %2651, %2653
  %2655 = urem i32 %2654, 2
  %2656 = icmp eq i32 %2655, 0
  %2657 = icmp slt i32 %2652, 10
  %2658 = or i1 %2656, %2657
  br i1 %2658, label %originalBBpart2709, label %originalBB707alteredBB

originalBBpart2709:                               ; preds = %originalBB707
  br i1 %2650, label %2659, label %2676, !dbg !1484

2659:                                             ; preds = %originalBBpart2709
  %2660 = load i32, i32* @x.17
  %2661 = load i32, i32* @y.18
  %2662 = sub i32 %2660, 1
  %2663 = mul i32 %2660, %2662
  %2664 = urem i32 %2663, 2
  %2665 = icmp eq i32 %2664, 0
  %2666 = icmp slt i32 %2661, 10
  %2667 = or i1 %2665, %2666
  br i1 %2667, label %originalBB711, label %originalBB711alteredBB

originalBB711:                                    ; preds = %2659, %originalBB711alteredBB
  %2668 = load i32, i32* @x.17
  %2669 = load i32, i32* @y.18
  %2670 = sub i32 %2668, 1
  %2671 = mul i32 %2668, %2670
  %2672 = urem i32 %2671, 2
  %2673 = icmp eq i32 %2672, 0
  %2674 = icmp slt i32 %2669, 10
  %2675 = or i1 %2673, %2674
  br i1 %2675, label %originalBBpart2713, label %originalBB711alteredBB

originalBBpart2713:                               ; preds = %originalBB711
  br label %6990, !dbg !1485

2676:                                             ; preds = %originalBBpart2709
  %2677 = load i32, i32* @x.17
  %2678 = load i32, i32* @y.18
  %2679 = sub i32 %2677, 1
  %2680 = mul i32 %2677, %2679
  %2681 = urem i32 %2680, 2
  %2682 = icmp eq i32 %2681, 0
  %2683 = icmp slt i32 %2678, 10
  %2684 = or i1 %2682, %2683
  br i1 %2684, label %originalBB715, label %originalBB715alteredBB

originalBB715:                                    ; preds = %2676, %originalBB715alteredBB
  %2685 = load i32, i32* @x.17
  %2686 = load i32, i32* @y.18
  %2687 = sub i32 %2685, 1
  %2688 = mul i32 %2685, %2687
  %2689 = urem i32 %2688, 2
  %2690 = icmp eq i32 %2689, 0
  %2691 = icmp slt i32 %2686, 10
  %2692 = or i1 %2690, %2691
  br i1 %2692, label %originalBBpart2717, label %originalBB715alteredBB

originalBBpart2717:                               ; preds = %originalBB715
  br label %6070, !dbg !1486

2693:                                             ; preds = %originalBBpart2705
  %2694 = load i32, i32* @x.17
  %2695 = load i32, i32* @y.18
  %2696 = sub i32 %2694, 1
  %2697 = mul i32 %2694, %2696
  %2698 = urem i32 %2697, 2
  %2699 = icmp eq i32 %2698, 0
  %2700 = icmp slt i32 %2695, 10
  %2701 = or i1 %2699, %2700
  br i1 %2701, label %originalBB719, label %originalBB719alteredBB

originalBB719:                                    ; preds = %2693, %originalBB719alteredBB
  %2702 = load i8, i8* %33, align 1, !dbg !1487
  %2703 = trunc i8 %2702 to i1, !dbg !1487
  %2704 = load i32, i32* @x.17
  %2705 = load i32, i32* @y.18
  %2706 = sub i32 %2704, 1
  %2707 = mul i32 %2704, %2706
  %2708 = urem i32 %2707, 2
  %2709 = icmp eq i32 %2708, 0
  %2710 = icmp slt i32 %2705, 10
  %2711 = or i1 %2709, %2710
  br i1 %2711, label %originalBBpart2721, label %originalBB719alteredBB

originalBBpart2721:                               ; preds = %originalBB719
  br i1 %2703, label %2712, label %2767, !dbg !1489

2712:                                             ; preds = %originalBBpart2721
  %2713 = load i32, i32* @x.17
  %2714 = load i32, i32* @y.18
  %2715 = sub i32 %2713, 1
  %2716 = mul i32 %2713, %2715
  %2717 = urem i32 %2716, 2
  %2718 = icmp eq i32 %2717, 0
  %2719 = icmp slt i32 %2714, 10
  %2720 = or i1 %2718, %2719
  br i1 %2720, label %originalBB723, label %originalBB723alteredBB

originalBB723:                                    ; preds = %2712, %originalBB723alteredBB
  %2721 = load i8, i8* %35, align 1, !dbg !1490
  %2722 = trunc i8 %2721 to i1, !dbg !1490
  %2723 = load i32, i32* @x.17
  %2724 = load i32, i32* @y.18
  %2725 = sub i32 %2723, 1
  %2726 = mul i32 %2723, %2725
  %2727 = urem i32 %2726, 2
  %2728 = icmp eq i32 %2727, 0
  %2729 = icmp slt i32 %2724, 10
  %2730 = or i1 %2728, %2729
  br i1 %2730, label %originalBBpart2725, label %originalBB723alteredBB

originalBBpart2725:                               ; preds = %originalBB723
  br i1 %2722, label %2731, label %2767, !dbg !1491

2731:                                             ; preds = %originalBBpart2725
  %2732 = load i32, i32* @x.17
  %2733 = load i32, i32* @y.18
  %2734 = sub i32 %2732, 1
  %2735 = mul i32 %2732, %2734
  %2736 = urem i32 %2735, 2
  %2737 = icmp eq i32 %2736, 0
  %2738 = icmp slt i32 %2733, 10
  %2739 = or i1 %2737, %2738
  br i1 %2739, label %originalBB727, label %originalBB727alteredBB

originalBB727:                                    ; preds = %2731, %originalBB727alteredBB
  %2740 = load i64, i64* %32, align 8, !dbg !1492
  %2741 = icmp ne i64 %2740, 0, !dbg !1492
  %2742 = load i32, i32* @x.17
  %2743 = load i32, i32* @y.18
  %2744 = sub i32 %2742, 1
  %2745 = mul i32 %2742, %2744
  %2746 = urem i32 %2745, 2
  %2747 = icmp eq i32 %2746, 0
  %2748 = icmp slt i32 %2743, 10
  %2749 = or i1 %2747, %2748
  br i1 %2749, label %originalBBpart2729, label %originalBB727alteredBB

originalBBpart2729:                               ; preds = %originalBB727
  br i1 %2741, label %2750, label %2767, !dbg !1493

2750:                                             ; preds = %originalBBpart2729
  %2751 = load i32, i32* @x.17
  %2752 = load i32, i32* @y.18
  %2753 = sub i32 %2751, 1
  %2754 = mul i32 %2751, %2753
  %2755 = urem i32 %2754, 2
  %2756 = icmp eq i32 %2755, 0
  %2757 = icmp slt i32 %2752, 10
  %2758 = or i1 %2756, %2757
  br i1 %2758, label %originalBB731, label %originalBB731alteredBB

originalBB731:                                    ; preds = %2750, %originalBB731alteredBB
  %2759 = load i32, i32* @x.17
  %2760 = load i32, i32* @y.18
  %2761 = sub i32 %2759, 1
  %2762 = mul i32 %2759, %2761
  %2763 = urem i32 %2762, 2
  %2764 = icmp eq i32 %2763, 0
  %2765 = icmp slt i32 %2760, 10
  %2766 = or i1 %2764, %2765
  br i1 %2766, label %originalBBpart2733, label %originalBB731alteredBB

originalBBpart2733:                               ; preds = %originalBB731
  br label %6070, !dbg !1494

2767:                                             ; preds = %originalBBpart2729, %originalBBpart2725, %originalBBpart2721
  %2768 = load i32, i32* @x.17
  %2769 = load i32, i32* @y.18
  %2770 = sub i32 %2768, 1
  %2771 = mul i32 %2768, %2770
  %2772 = urem i32 %2771, 2
  %2773 = icmp eq i32 %2772, 0
  %2774 = icmp slt i32 %2769, 10
  %2775 = or i1 %2773, %2774
  br i1 %2775, label %originalBB735, label %originalBB735alteredBB

originalBB735:                                    ; preds = %2767, %originalBB735alteredBB
  %2776 = load i32, i32* @x.17
  %2777 = load i32, i32* @y.18
  %2778 = sub i32 %2776, 1
  %2779 = mul i32 %2776, %2778
  %2780 = urem i32 %2779, 2
  %2781 = icmp eq i32 %2780, 0
  %2782 = icmp slt i32 %2777, 10
  %2783 = or i1 %2781, %2782
  br i1 %2783, label %originalBBpart2737, label %originalBB735alteredBB

originalBBpart2737:                               ; preds = %originalBB735
  br label %2784, !dbg !1492

2784:                                             ; preds = %originalBBpart2737, %originalBBpart2697, %originalBBpart2693, %originalBBpart2689
  call void @llvm.dbg.label(metadata !1495), !dbg !1496
  %2785 = load i32, i32* @x.17
  %2786 = load i32, i32* @y.18
  %2787 = sub i32 %2785, 1
  %2788 = mul i32 %2785, %2787
  %2789 = urem i32 %2788, 2
  %2790 = icmp eq i32 %2789, 0
  %2791 = icmp slt i32 %2786, 10
  %2792 = or i1 %2790, %2791
  br i1 %2792, label %originalBB739, label %originalBB739alteredBB

originalBB739:                                    ; preds = %2784, %originalBB739alteredBB
  %2793 = load i32, i32* %23, align 4, !dbg !1497
  %2794 = icmp eq i32 %2793, 2, !dbg !1499
  %2795 = load i32, i32* @x.17
  %2796 = load i32, i32* @y.18
  %2797 = sub i32 %2795, 1
  %2798 = mul i32 %2795, %2797
  %2799 = urem i32 %2798, 2
  %2800 = icmp eq i32 %2799, 0
  %2801 = icmp slt i32 %2796, 10
  %2802 = or i1 %2800, %2801
  br i1 %2802, label %originalBBpart2741, label %originalBB739alteredBB

originalBBpart2741:                               ; preds = %originalBB739
  br i1 %2794, label %2803, label %2839, !dbg !1500

2803:                                             ; preds = %originalBBpart2741
  %2804 = load i32, i32* @x.17
  %2805 = load i32, i32* @y.18
  %2806 = sub i32 %2804, 1
  %2807 = mul i32 %2804, %2806
  %2808 = urem i32 %2807, 2
  %2809 = icmp eq i32 %2808, 0
  %2810 = icmp slt i32 %2805, 10
  %2811 = or i1 %2809, %2810
  br i1 %2811, label %originalBB743, label %originalBB743alteredBB

originalBB743:                                    ; preds = %2803, %originalBB743alteredBB
  %2812 = load i8, i8* %35, align 1, !dbg !1501
  %2813 = trunc i8 %2812 to i1, !dbg !1501
  %2814 = load i32, i32* @x.17
  %2815 = load i32, i32* @y.18
  %2816 = sub i32 %2814, 1
  %2817 = mul i32 %2814, %2816
  %2818 = urem i32 %2817, 2
  %2819 = icmp eq i32 %2818, 0
  %2820 = icmp slt i32 %2815, 10
  %2821 = or i1 %2819, %2820
  br i1 %2821, label %originalBBpart2745, label %originalBB743alteredBB

originalBBpart2745:                               ; preds = %originalBB743
  br i1 %2813, label %2822, label %2839, !dbg !1502

2822:                                             ; preds = %originalBBpart2745
  %2823 = load i32, i32* @x.17
  %2824 = load i32, i32* @y.18
  %2825 = sub i32 %2823, 1
  %2826 = mul i32 %2823, %2825
  %2827 = urem i32 %2826, 2
  %2828 = icmp eq i32 %2827, 0
  %2829 = icmp slt i32 %2824, 10
  %2830 = or i1 %2828, %2829
  br i1 %2830, label %originalBB747, label %originalBB747alteredBB

originalBB747:                                    ; preds = %2822, %originalBB747alteredBB
  %2831 = load i32, i32* @x.17
  %2832 = load i32, i32* @y.18
  %2833 = sub i32 %2831, 1
  %2834 = mul i32 %2831, %2833
  %2835 = urem i32 %2834, 2
  %2836 = icmp eq i32 %2835, 0
  %2837 = icmp slt i32 %2832, 10
  %2838 = or i1 %2836, %2837
  br i1 %2838, label %originalBBpart2749, label %originalBB747alteredBB

originalBBpart2749:                               ; preds = %originalBB747
  br label %6990, !dbg !1503

2839:                                             ; preds = %originalBBpart2745, %originalBBpart2741
  %2840 = load i32, i32* @x.17
  %2841 = load i32, i32* @y.18
  %2842 = sub i32 %2840, 1
  %2843 = mul i32 %2840, %2842
  %2844 = urem i32 %2843, 2
  %2845 = icmp eq i32 %2844, 0
  %2846 = icmp slt i32 %2841, 10
  %2847 = or i1 %2845, %2846
  br i1 %2847, label %originalBB751, label %originalBB751alteredBB

originalBB751:                                    ; preds = %2839, %originalBB751alteredBB
  %2848 = load i32, i32* @x.17
  %2849 = load i32, i32* @y.18
  %2850 = sub i32 %2848, 1
  %2851 = mul i32 %2848, %2850
  %2852 = urem i32 %2851, 2
  %2853 = icmp eq i32 %2852, 0
  %2854 = icmp slt i32 %2849, 10
  %2855 = or i1 %2853, %2854
  br i1 %2855, label %originalBBpart2753, label %originalBB751alteredBB

originalBBpart2753:                               ; preds = %originalBB751
  br label %2856, !dbg !1501

2856:                                             ; preds = %originalBBpart2753, %originalBBpart2701, %originalBBpart2685, %originalBBpart2681, %originalBBpart2677
  call void @llvm.dbg.label(metadata !1504), !dbg !1505
  %2857 = load i32, i32* @x.17
  %2858 = load i32, i32* @y.18
  %2859 = sub i32 %2857, 1
  %2860 = mul i32 %2857, %2859
  %2861 = urem i32 %2860, 2
  %2862 = icmp eq i32 %2861, 0
  %2863 = icmp slt i32 %2858, 10
  %2864 = or i1 %2862, %2863
  br i1 %2864, label %originalBB755, label %originalBB755alteredBB

originalBB755:                                    ; preds = %2856, %originalBB755alteredBB
  %2865 = load i8, i8* %33, align 1, !dbg !1506
  %2866 = trunc i8 %2865 to i1, !dbg !1506
  %2867 = load i32, i32* @x.17
  %2868 = load i32, i32* @y.18
  %2869 = sub i32 %2867, 1
  %2870 = mul i32 %2867, %2869
  %2871 = urem i32 %2870, 2
  %2872 = icmp eq i32 %2871, 0
  %2873 = icmp slt i32 %2868, 10
  %2874 = or i1 %2872, %2873
  br i1 %2874, label %originalBBpart2757, label %originalBB755alteredBB

originalBBpart2757:                               ; preds = %originalBB755
  br i1 %2866, label %2875, label %2893, !dbg !1508

2875:                                             ; preds = %originalBBpart2757
  %2876 = load i32, i32* @x.17
  %2877 = load i32, i32* @y.18
  %2878 = sub i32 %2876, 1
  %2879 = mul i32 %2876, %2878
  %2880 = urem i32 %2879, 2
  %2881 = icmp eq i32 %2880, 0
  %2882 = icmp slt i32 %2877, 10
  %2883 = or i1 %2881, %2882
  br i1 %2883, label %originalBB759, label %originalBB759alteredBB

originalBB759:                                    ; preds = %2875, %originalBB759alteredBB
  %2884 = load i8, i8* %40, align 1, !dbg !1509
  store i8 %2884, i8* %39, align 1, !dbg !1511
  %2885 = load i32, i32* @x.17
  %2886 = load i32, i32* @y.18
  %2887 = sub i32 %2885, 1
  %2888 = mul i32 %2885, %2887
  %2889 = urem i32 %2888, 2
  %2890 = icmp eq i32 %2889, 0
  %2891 = icmp slt i32 %2886, 10
  %2892 = or i1 %2890, %2891
  br i1 %2892, label %originalBBpart2761, label %originalBB759alteredBB

originalBBpart2761:                               ; preds = %originalBB759
  br label %5624, !dbg !1512

2893:                                             ; preds = %originalBBpart2757
  %2894 = load i32, i32* @x.17
  %2895 = load i32, i32* @y.18
  %2896 = sub i32 %2894, 1
  %2897 = mul i32 %2894, %2896
  %2898 = urem i32 %2897, 2
  %2899 = icmp eq i32 %2898, 0
  %2900 = icmp slt i32 %2895, 10
  %2901 = or i1 %2899, %2900
  br i1 %2901, label %originalBB763, label %originalBB763alteredBB

originalBB763:                                    ; preds = %2893, %originalBB763alteredBB
  %2902 = load i32, i32* @x.17
  %2903 = load i32, i32* @y.18
  %2904 = sub i32 %2902, 1
  %2905 = mul i32 %2902, %2904
  %2906 = urem i32 %2905, 2
  %2907 = icmp eq i32 %2906, 0
  %2908 = icmp slt i32 %2903, 10
  %2909 = or i1 %2907, %2908
  br i1 %2909, label %originalBBpart2765, label %originalBB763alteredBB

originalBBpart2765:                               ; preds = %originalBB763
  br label %5465, !dbg !1513

2910:                                             ; preds = %originalBBpart2268, %originalBBpart2268
  %2911 = load i32, i32* @x.17
  %2912 = load i32, i32* @y.18
  %2913 = sub i32 %2911, 1
  %2914 = mul i32 %2911, %2913
  %2915 = urem i32 %2914, 2
  %2916 = icmp eq i32 %2915, 0
  %2917 = icmp slt i32 %2912, 10
  %2918 = or i1 %2916, %2917
  br i1 %2918, label %originalBB767, label %originalBB767alteredBB

originalBB767:                                    ; preds = %2910, %originalBB767alteredBB
  %2919 = load i64, i64* %22, align 8, !dbg !1514
  %2920 = icmp eq i64 %2919, -1, !dbg !1516
  %2921 = load i32, i32* @x.17
  %2922 = load i32, i32* @y.18
  %2923 = sub i32 %2921, 1
  %2924 = mul i32 %2921, %2923
  %2925 = urem i32 %2924, 2
  %2926 = icmp eq i32 %2925, 0
  %2927 = icmp slt i32 %2922, 10
  %2928 = or i1 %2926, %2927
  br i1 %2928, label %originalBBpart2769, label %originalBB767alteredBB

originalBBpart2769:                               ; preds = %originalBB767
  br i1 %2920, label %2929, label %2951, !dbg !1517

2929:                                             ; preds = %originalBBpart2769
  %2930 = load i32, i32* @x.17
  %2931 = load i32, i32* @y.18
  %2932 = sub i32 %2930, 1
  %2933 = mul i32 %2930, %2932
  %2934 = urem i32 %2933, 2
  %2935 = icmp eq i32 %2934, 0
  %2936 = icmp slt i32 %2931, 10
  %2937 = or i1 %2935, %2936
  br i1 %2937, label %originalBB771, label %originalBB771alteredBB

originalBB771:                                    ; preds = %2929, %originalBB771alteredBB
  %2938 = load i8*, i8** %21, align 8, !dbg !1518
  %2939 = getelementptr inbounds i8, i8* %2938, i64 1, !dbg !1518
  %2940 = load i8, i8* %2939, align 1, !dbg !1518
  %2941 = sext i8 %2940 to i32, !dbg !1518
  %2942 = icmp eq i32 %2941, 0, !dbg !1519
  %2943 = load i32, i32* @x.17
  %2944 = load i32, i32* @y.18
  %2945 = sub i32 %2943, 1
  %2946 = mul i32 %2943, %2945
  %2947 = urem i32 %2946, 2
  %2948 = icmp eq i32 %2947, 0
  %2949 = icmp slt i32 %2944, 10
  %2950 = or i1 %2948, %2949
  br i1 %2950, label %originalBBpart2773, label %originalBB771alteredBB

originalBBpart2773:                               ; preds = %originalBB771
  br i1 %2942, label %2987, label %2970, !dbg !1514

2951:                                             ; preds = %originalBBpart2769
  %2952 = load i32, i32* @x.17
  %2953 = load i32, i32* @y.18
  %2954 = sub i32 %2952, 1
  %2955 = mul i32 %2952, %2954
  %2956 = urem i32 %2955, 2
  %2957 = icmp eq i32 %2956, 0
  %2958 = icmp slt i32 %2953, 10
  %2959 = or i1 %2957, %2958
  br i1 %2959, label %originalBB775, label %originalBB775alteredBB

originalBB775:                                    ; preds = %2951, %originalBB775alteredBB
  %2960 = load i64, i64* %22, align 8, !dbg !1520
  %2961 = icmp eq i64 %2960, 1, !dbg !1521
  %2962 = load i32, i32* @x.17
  %2963 = load i32, i32* @y.18
  %2964 = sub i32 %2962, 1
  %2965 = mul i32 %2962, %2964
  %2966 = urem i32 %2965, 2
  %2967 = icmp eq i32 %2966, 0
  %2968 = icmp slt i32 %2963, 10
  %2969 = or i1 %2967, %2968
  br i1 %2969, label %originalBBpart2777, label %originalBB775alteredBB

originalBBpart2777:                               ; preds = %originalBB775
  br i1 %2961, label %2987, label %2970, !dbg !1517

2970:                                             ; preds = %originalBBpart2777, %originalBBpart2773
  %2971 = load i32, i32* @x.17
  %2972 = load i32, i32* @y.18
  %2973 = sub i32 %2971, 1
  %2974 = mul i32 %2971, %2973
  %2975 = urem i32 %2974, 2
  %2976 = icmp eq i32 %2975, 0
  %2977 = icmp slt i32 %2972, 10
  %2978 = or i1 %2976, %2977
  br i1 %2978, label %originalBB779, label %originalBB779alteredBB

originalBB779:                                    ; preds = %2970, %originalBB779alteredBB
  %2979 = load i32, i32* @x.17
  %2980 = load i32, i32* @y.18
  %2981 = sub i32 %2979, 1
  %2982 = mul i32 %2979, %2981
  %2983 = urem i32 %2982, 2
  %2984 = icmp eq i32 %2983, 0
  %2985 = icmp slt i32 %2980, 10
  %2986 = or i1 %2984, %2985
  br i1 %2986, label %originalBBpart2781, label %originalBB779alteredBB

originalBBpart2781:                               ; preds = %originalBB779
  br label %5465, !dbg !1522

2987:                                             ; preds = %originalBBpart2777, %originalBBpart2773
  %2988 = load i32, i32* @x.17
  %2989 = load i32, i32* @y.18
  %2990 = sub i32 %2988, 1
  %2991 = mul i32 %2988, %2990
  %2992 = urem i32 %2991, 2
  %2993 = icmp eq i32 %2992, 0
  %2994 = icmp slt i32 %2989, 10
  %2995 = or i1 %2993, %2994
  br i1 %2995, label %originalBB783, label %originalBB783alteredBB

originalBB783:                                    ; preds = %2987, %originalBB783alteredBB
  %2996 = load i32, i32* @x.17
  %2997 = load i32, i32* @y.18
  %2998 = sub i32 %2996, 1
  %2999 = mul i32 %2996, %2998
  %3000 = urem i32 %2999, 2
  %3001 = icmp eq i32 %3000, 0
  %3002 = icmp slt i32 %2997, 10
  %3003 = or i1 %3001, %3002
  br i1 %3003, label %originalBBpart2785, label %originalBB783alteredBB

originalBBpart2785:                               ; preds = %originalBB783
  br label %3004, !dbg !1523

3004:                                             ; preds = %originalBBpart2785, %originalBBpart2268, %originalBBpart2268
  %3005 = load i32, i32* @x.17
  %3006 = load i32, i32* @y.18
  %3007 = sub i32 %3005, 1
  %3008 = mul i32 %3005, %3007
  %3009 = urem i32 %3008, 2
  %3010 = icmp eq i32 %3009, 0
  %3011 = icmp slt i32 %3006, 10
  %3012 = or i1 %3010, %3011
  br i1 %3012, label %originalBB787, label %originalBB787alteredBB

originalBB787:                                    ; preds = %3004, %originalBB787alteredBB
  %3013 = load i64, i64* %28, align 8, !dbg !1524
  %3014 = icmp ne i64 %3013, 0, !dbg !1526
  %3015 = load i32, i32* @x.17
  %3016 = load i32, i32* @y.18
  %3017 = sub i32 %3015, 1
  %3018 = mul i32 %3015, %3017
  %3019 = urem i32 %3018, 2
  %3020 = icmp eq i32 %3019, 0
  %3021 = icmp slt i32 %3016, 10
  %3022 = or i1 %3020, %3021
  br i1 %3022, label %originalBBpart2789, label %originalBB787alteredBB

originalBBpart2789:                               ; preds = %originalBB787
  br i1 %3014, label %3023, label %3040, !dbg !1527

3023:                                             ; preds = %originalBBpart2789
  %3024 = load i32, i32* @x.17
  %3025 = load i32, i32* @y.18
  %3026 = sub i32 %3024, 1
  %3027 = mul i32 %3024, %3026
  %3028 = urem i32 %3027, 2
  %3029 = icmp eq i32 %3028, 0
  %3030 = icmp slt i32 %3025, 10
  %3031 = or i1 %3029, %3030
  br i1 %3031, label %originalBB791, label %originalBB791alteredBB

originalBB791:                                    ; preds = %3023, %originalBB791alteredBB
  %3032 = load i32, i32* @x.17
  %3033 = load i32, i32* @y.18
  %3034 = sub i32 %3032, 1
  %3035 = mul i32 %3032, %3034
  %3036 = urem i32 %3035, 2
  %3037 = icmp eq i32 %3036, 0
  %3038 = icmp slt i32 %3033, 10
  %3039 = or i1 %3037, %3038
  br i1 %3039, label %originalBBpart2793, label %originalBB791alteredBB

originalBBpart2793:                               ; preds = %originalBB791
  br label %5465, !dbg !1528

3040:                                             ; preds = %originalBBpart2789
  %3041 = load i32, i32* @x.17
  %3042 = load i32, i32* @y.18
  %3043 = sub i32 %3041, 1
  %3044 = mul i32 %3041, %3043
  %3045 = urem i32 %3044, 2
  %3046 = icmp eq i32 %3045, 0
  %3047 = icmp slt i32 %3042, 10
  %3048 = or i1 %3046, %3047
  br i1 %3048, label %originalBB795, label %originalBB795alteredBB

originalBB795:                                    ; preds = %3040, %originalBB795alteredBB
  %3049 = load i32, i32* @x.17
  %3050 = load i32, i32* @y.18
  %3051 = sub i32 %3049, 1
  %3052 = mul i32 %3049, %3051
  %3053 = urem i32 %3052, 2
  %3054 = icmp eq i32 %3053, 0
  %3055 = icmp slt i32 %3050, 10
  %3056 = or i1 %3054, %3055
  br i1 %3056, label %originalBBpart2797, label %originalBB795alteredBB

originalBBpart2797:                               ; preds = %originalBB795
  br label %3057, !dbg !1529

3057:                                             ; preds = %originalBBpart2797, %originalBBpart2268
  %3058 = load i32, i32* @x.17
  %3059 = load i32, i32* @y.18
  %3060 = sub i32 %3058, 1
  %3061 = mul i32 %3058, %3060
  %3062 = urem i32 %3061, 2
  %3063 = icmp eq i32 %3062, 0
  %3064 = icmp slt i32 %3059, 10
  %3065 = or i1 %3063, %3064
  br i1 %3065, label %originalBB799, label %originalBB799alteredBB

originalBB799:                                    ; preds = %3057, %originalBB799alteredBB
  store i8 1, i8* %43, align 1, !dbg !1530
  %3066 = load i32, i32* @x.17
  %3067 = load i32, i32* @y.18
  %3068 = sub i32 %3066, 1
  %3069 = mul i32 %3066, %3068
  %3070 = urem i32 %3069, 2
  %3071 = icmp eq i32 %3070, 0
  %3072 = icmp slt i32 %3067, 10
  %3073 = or i1 %3071, %3072
  br i1 %3073, label %originalBBpart2801, label %originalBB799alteredBB

originalBBpart2801:                               ; preds = %originalBB799
  br label %3074, !dbg !1531

3074:                                             ; preds = %originalBBpart2801, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268
  %3075 = load i32, i32* @x.17
  %3076 = load i32, i32* @y.18
  %3077 = sub i32 %3075, 1
  %3078 = mul i32 %3075, %3077
  %3079 = urem i32 %3078, 2
  %3080 = icmp eq i32 %3079, 0
  %3081 = icmp slt i32 %3076, 10
  %3082 = or i1 %3080, %3081
  br i1 %3082, label %originalBB803, label %originalBB803alteredBB

originalBB803:                                    ; preds = %3074, %originalBB803alteredBB
  %3083 = load i32, i32* %23, align 4, !dbg !1532
  %3084 = icmp eq i32 %3083, 2, !dbg !1534
  %3085 = load i32, i32* @x.17
  %3086 = load i32, i32* @y.18
  %3087 = sub i32 %3085, 1
  %3088 = mul i32 %3085, %3087
  %3089 = urem i32 %3088, 2
  %3090 = icmp eq i32 %3089, 0
  %3091 = icmp slt i32 %3086, 10
  %3092 = or i1 %3090, %3091
  br i1 %3092, label %originalBBpart2805, label %originalBB803alteredBB

originalBBpart2805:                               ; preds = %originalBB803
  br i1 %3084, label %3093, label %3129, !dbg !1535

3093:                                             ; preds = %originalBBpart2805
  %3094 = load i32, i32* @x.17
  %3095 = load i32, i32* @y.18
  %3096 = sub i32 %3094, 1
  %3097 = mul i32 %3094, %3096
  %3098 = urem i32 %3097, 2
  %3099 = icmp eq i32 %3098, 0
  %3100 = icmp slt i32 %3095, 10
  %3101 = or i1 %3099, %3100
  br i1 %3101, label %originalBB807, label %originalBB807alteredBB

originalBB807:                                    ; preds = %3093, %originalBB807alteredBB
  %3102 = load i8, i8* %35, align 1, !dbg !1536
  %3103 = trunc i8 %3102 to i1, !dbg !1536
  %3104 = load i32, i32* @x.17
  %3105 = load i32, i32* @y.18
  %3106 = sub i32 %3104, 1
  %3107 = mul i32 %3104, %3106
  %3108 = urem i32 %3107, 2
  %3109 = icmp eq i32 %3108, 0
  %3110 = icmp slt i32 %3105, 10
  %3111 = or i1 %3109, %3110
  br i1 %3111, label %originalBBpart2809, label %originalBB807alteredBB

originalBBpart2809:                               ; preds = %originalBB807
  br i1 %3103, label %3112, label %3129, !dbg !1537

3112:                                             ; preds = %originalBBpart2809
  %3113 = load i32, i32* @x.17
  %3114 = load i32, i32* @y.18
  %3115 = sub i32 %3113, 1
  %3116 = mul i32 %3113, %3115
  %3117 = urem i32 %3116, 2
  %3118 = icmp eq i32 %3117, 0
  %3119 = icmp slt i32 %3114, 10
  %3120 = or i1 %3118, %3119
  br i1 %3120, label %originalBB811, label %originalBB811alteredBB

originalBB811:                                    ; preds = %3112, %originalBB811alteredBB
  %3121 = load i32, i32* @x.17
  %3122 = load i32, i32* @y.18
  %3123 = sub i32 %3121, 1
  %3124 = mul i32 %3121, %3123
  %3125 = urem i32 %3124, 2
  %3126 = icmp eq i32 %3125, 0
  %3127 = icmp slt i32 %3122, 10
  %3128 = or i1 %3126, %3127
  br i1 %3128, label %originalBBpart2813, label %originalBB811alteredBB

originalBBpart2813:                               ; preds = %originalBB811
  br label %6990, !dbg !1538

3129:                                             ; preds = %originalBBpart2809, %originalBBpart2805
  %3130 = load i32, i32* @x.17
  %3131 = load i32, i32* @y.18
  %3132 = sub i32 %3130, 1
  %3133 = mul i32 %3130, %3132
  %3134 = urem i32 %3133, 2
  %3135 = icmp eq i32 %3134, 0
  %3136 = icmp slt i32 %3131, 10
  %3137 = or i1 %3135, %3136
  br i1 %3137, label %originalBB815, label %originalBB815alteredBB

originalBB815:                                    ; preds = %3129, %originalBB815alteredBB
  %3138 = load i32, i32* @x.17
  %3139 = load i32, i32* @y.18
  %3140 = sub i32 %3138, 1
  %3141 = mul i32 %3138, %3140
  %3142 = urem i32 %3141, 2
  %3143 = icmp eq i32 %3142, 0
  %3144 = icmp slt i32 %3139, 10
  %3145 = or i1 %3143, %3144
  br i1 %3145, label %originalBBpart2817, label %originalBB815alteredBB

originalBBpart2817:                               ; preds = %originalBB815
  br label %5465, !dbg !1539

3146:                                             ; preds = %originalBBpart2268
  %3147 = load i32, i32* @x.17
  %3148 = load i32, i32* @y.18
  %3149 = sub i32 %3147, 1
  %3150 = mul i32 %3147, %3149
  %3151 = urem i32 %3150, 2
  %3152 = icmp eq i32 %3151, 0
  %3153 = icmp slt i32 %3148, 10
  %3154 = or i1 %3152, %3153
  br i1 %3154, label %originalBB819, label %originalBB819alteredBB

originalBB819:                                    ; preds = %3146, %originalBB819alteredBB
  store i8 1, i8* %37, align 1, !dbg !1540
  store i8 1, i8* %43, align 1, !dbg !1541
  %3155 = load i32, i32* %23, align 4, !dbg !1542
  %3156 = icmp eq i32 %3155, 2, !dbg !1544
  %3157 = load i32, i32* @x.17
  %3158 = load i32, i32* @y.18
  %3159 = sub i32 %3157, 1
  %3160 = mul i32 %3157, %3159
  %3161 = urem i32 %3160, 2
  %3162 = icmp eq i32 %3161, 0
  %3163 = icmp slt i32 %3158, 10
  %3164 = or i1 %3162, %3163
  br i1 %3164, label %originalBBpart2821, label %originalBB819alteredBB

originalBBpart2821:                               ; preds = %originalBB819
  br i1 %3156, label %3165, label %3502, !dbg !1545

3165:                                             ; preds = %originalBBpart2821
  %3166 = load i32, i32* @x.17
  %3167 = load i32, i32* @y.18
  %3168 = sub i32 %3166, 1
  %3169 = mul i32 %3166, %3168
  %3170 = urem i32 %3169, 2
  %3171 = icmp eq i32 %3170, 0
  %3172 = icmp slt i32 %3167, 10
  %3173 = or i1 %3171, %3172
  br i1 %3173, label %originalBB823, label %originalBB823alteredBB

originalBB823:                                    ; preds = %3165, %originalBB823alteredBB
  %3174 = load i8, i8* %35, align 1, !dbg !1546
  %3175 = trunc i8 %3174 to i1, !dbg !1546
  %3176 = load i32, i32* @x.17
  %3177 = load i32, i32* @y.18
  %3178 = sub i32 %3176, 1
  %3179 = mul i32 %3176, %3178
  %3180 = urem i32 %3179, 2
  %3181 = icmp eq i32 %3180, 0
  %3182 = icmp slt i32 %3177, 10
  %3183 = or i1 %3181, %3182
  br i1 %3183, label %originalBBpart2825, label %originalBB823alteredBB

originalBBpart2825:                               ; preds = %originalBB823
  br i1 %3175, label %3184, label %3201, !dbg !1549

3184:                                             ; preds = %originalBBpart2825
  %3185 = load i32, i32* @x.17
  %3186 = load i32, i32* @y.18
  %3187 = sub i32 %3185, 1
  %3188 = mul i32 %3185, %3187
  %3189 = urem i32 %3188, 2
  %3190 = icmp eq i32 %3189, 0
  %3191 = icmp slt i32 %3186, 10
  %3192 = or i1 %3190, %3191
  br i1 %3192, label %originalBB827, label %originalBB827alteredBB

originalBB827:                                    ; preds = %3184, %originalBB827alteredBB
  %3193 = load i32, i32* @x.17
  %3194 = load i32, i32* @y.18
  %3195 = sub i32 %3193, 1
  %3196 = mul i32 %3193, %3195
  %3197 = urem i32 %3196, 2
  %3198 = icmp eq i32 %3197, 0
  %3199 = icmp slt i32 %3194, 10
  %3200 = or i1 %3198, %3199
  br i1 %3200, label %originalBBpart2829, label %originalBB827alteredBB

originalBBpart2829:                               ; preds = %originalBB827
  br label %6990, !dbg !1550

3201:                                             ; preds = %originalBBpart2825
  %3202 = load i32, i32* @x.17
  %3203 = load i32, i32* @y.18
  %3204 = sub i32 %3202, 1
  %3205 = mul i32 %3202, %3204
  %3206 = urem i32 %3205, 2
  %3207 = icmp eq i32 %3206, 0
  %3208 = icmp slt i32 %3203, 10
  %3209 = or i1 %3207, %3208
  br i1 %3209, label %originalBB831, label %originalBB831alteredBB

originalBB831:                                    ; preds = %3201, %originalBB831alteredBB
  %3210 = load i64, i64* %20, align 8, !dbg !1551
  %3211 = icmp ne i64 %3210, 0, !dbg !1551
  %3212 = load i32, i32* @x.17
  %3213 = load i32, i32* @y.18
  %3214 = sub i32 %3212, 1
  %3215 = mul i32 %3212, %3214
  %3216 = urem i32 %3215, 2
  %3217 = icmp eq i32 %3216, 0
  %3218 = icmp slt i32 %3213, 10
  %3219 = or i1 %3217, %3218
  br i1 %3219, label %originalBBpart2833, label %originalBB831alteredBB

originalBBpart2833:                               ; preds = %originalBB831
  br i1 %3211, label %3220, label %3257, !dbg !1553

3220:                                             ; preds = %originalBBpart2833
  %3221 = load i32, i32* @x.17
  %3222 = load i32, i32* @y.18
  %3223 = sub i32 %3221, 1
  %3224 = mul i32 %3221, %3223
  %3225 = urem i32 %3224, 2
  %3226 = icmp eq i32 %3225, 0
  %3227 = icmp slt i32 %3222, 10
  %3228 = or i1 %3226, %3227
  br i1 %3228, label %originalBB835, label %originalBB835alteredBB

originalBB835:                                    ; preds = %3220, %originalBB835alteredBB
  %3229 = load i64, i64* %30, align 8, !dbg !1554
  %3230 = icmp ne i64 %3229, 0, !dbg !1554
  %3231 = load i32, i32* @x.17
  %3232 = load i32, i32* @y.18
  %3233 = sub i32 %3231, 1
  %3234 = mul i32 %3231, %3233
  %3235 = urem i32 %3234, 2
  %3236 = icmp eq i32 %3235, 0
  %3237 = icmp slt i32 %3232, 10
  %3238 = or i1 %3236, %3237
  br i1 %3238, label %originalBBpart2837, label %originalBB835alteredBB

originalBBpart2837:                               ; preds = %originalBB835
  br i1 %3230, label %3257, label %3239, !dbg !1555

3239:                                             ; preds = %originalBBpart2837
  %3240 = load i32, i32* @x.17
  %3241 = load i32, i32* @y.18
  %3242 = sub i32 %3240, 1
  %3243 = mul i32 %3240, %3242
  %3244 = urem i32 %3243, 2
  %3245 = icmp eq i32 %3244, 0
  %3246 = icmp slt i32 %3241, 10
  %3247 = or i1 %3245, %3246
  br i1 %3247, label %originalBB839, label %originalBB839alteredBB

originalBB839:                                    ; preds = %3239, %originalBB839alteredBB
  %3248 = load i64, i64* %20, align 8, !dbg !1556
  store i64 %3248, i64* %30, align 8, !dbg !1558
  store i64 0, i64* %20, align 8, !dbg !1559
  %3249 = load i32, i32* @x.17
  %3250 = load i32, i32* @y.18
  %3251 = sub i32 %3249, 1
  %3252 = mul i32 %3249, %3251
  %3253 = urem i32 %3252, 2
  %3254 = icmp eq i32 %3253, 0
  %3255 = icmp slt i32 %3250, 10
  %3256 = or i1 %3254, %3255
  br i1 %3256, label %originalBBpart2841, label %originalBB839alteredBB

originalBBpart2841:                               ; preds = %originalBB839
  br label %3257, !dbg !1560

3257:                                             ; preds = %originalBBpart2841, %originalBBpart2837, %originalBBpart2833
  %3258 = load i32, i32* @x.17
  %3259 = load i32, i32* @y.18
  %3260 = sub i32 %3258, 1
  %3261 = mul i32 %3258, %3260
  %3262 = urem i32 %3261, 2
  %3263 = icmp eq i32 %3262, 0
  %3264 = icmp slt i32 %3259, 10
  %3265 = or i1 %3263, %3264
  br i1 %3265, label %originalBB843, label %originalBB843alteredBB

originalBB843:                                    ; preds = %3257, %originalBB843alteredBB
  %3266 = load i32, i32* @x.17
  %3267 = load i32, i32* @y.18
  %3268 = sub i32 %3266, 1
  %3269 = mul i32 %3266, %3268
  %3270 = urem i32 %3269, 2
  %3271 = icmp eq i32 %3270, 0
  %3272 = icmp slt i32 %3267, 10
  %3273 = or i1 %3271, %3272
  br i1 %3273, label %originalBBpart2845, label %originalBB843alteredBB

originalBBpart2845:                               ; preds = %originalBB843
  br label %3274, !dbg !1561

3274:                                             ; preds = %originalBBpart2845
  %3275 = load i32, i32* @x.17
  %3276 = load i32, i32* @y.18
  %3277 = sub i32 %3275, 1
  %3278 = mul i32 %3275, %3277
  %3279 = urem i32 %3278, 2
  %3280 = icmp eq i32 %3279, 0
  %3281 = icmp slt i32 %3276, 10
  %3282 = or i1 %3280, %3281
  br i1 %3282, label %originalBB847, label %originalBB847alteredBB

originalBB847:                                    ; preds = %3274, %originalBB847alteredBB
  %3283 = load i64, i64* %29, align 8, !dbg !1562
  %3284 = load i64, i64* %20, align 8, !dbg !1562
  %3285 = icmp ult i64 %3283, %3284, !dbg !1562
  %3286 = load i32, i32* @x.17
  %3287 = load i32, i32* @y.18
  %3288 = sub i32 %3286, 1
  %3289 = mul i32 %3286, %3288
  %3290 = urem i32 %3289, 2
  %3291 = icmp eq i32 %3290, 0
  %3292 = icmp slt i32 %3287, 10
  %3293 = or i1 %3291, %3292
  br i1 %3293, label %originalBBpart2849, label %originalBB847alteredBB

originalBBpart2849:                               ; preds = %originalBB847
  br i1 %3285, label %3294, label %3314, !dbg !1565

3294:                                             ; preds = %originalBBpart2849
  %3295 = load i32, i32* @x.17
  %3296 = load i32, i32* @y.18
  %3297 = sub i32 %3295, 1
  %3298 = mul i32 %3295, %3297
  %3299 = urem i32 %3298, 2
  %3300 = icmp eq i32 %3299, 0
  %3301 = icmp slt i32 %3296, 10
  %3302 = or i1 %3300, %3301
  br i1 %3302, label %originalBB851, label %originalBB851alteredBB

originalBB851:                                    ; preds = %3294, %originalBB851alteredBB
  %3303 = load i8*, i8** %19, align 8, !dbg !1562
  %3304 = load i64, i64* %29, align 8, !dbg !1562
  %3305 = getelementptr inbounds i8, i8* %3303, i64 %3304, !dbg !1562
  store i8 39, i8* %3305, align 1, !dbg !1562
  %3306 = load i32, i32* @x.17
  %3307 = load i32, i32* @y.18
  %3308 = sub i32 %3306, 1
  %3309 = mul i32 %3306, %3308
  %3310 = urem i32 %3309, 2
  %3311 = icmp eq i32 %3310, 0
  %3312 = icmp slt i32 %3307, 10
  %3313 = or i1 %3311, %3312
  br i1 %3313, label %originalBBpart2853, label %originalBB851alteredBB

originalBBpart2853:                               ; preds = %originalBB851
  br label %3314, !dbg !1562

3314:                                             ; preds = %originalBBpart2853, %originalBBpart2849
  %3315 = load i32, i32* @x.17
  %3316 = load i32, i32* @y.18
  %3317 = sub i32 %3315, 1
  %3318 = mul i32 %3315, %3317
  %3319 = urem i32 %3318, 2
  %3320 = icmp eq i32 %3319, 0
  %3321 = icmp slt i32 %3316, 10
  %3322 = or i1 %3320, %3321
  br i1 %3322, label %originalBB855, label %originalBB855alteredBB

originalBB855:                                    ; preds = %3314, %originalBB855alteredBB
  %3323 = load i64, i64* %29, align 8, !dbg !1565
  %3324 = add i64 %3323, 1, !dbg !1565
  store i64 %3324, i64* %29, align 8, !dbg !1565
  %3325 = load i32, i32* @x.17
  %3326 = load i32, i32* @y.18
  %3327 = sub i32 %3325, 1
  %3328 = mul i32 %3325, %3327
  %3329 = urem i32 %3328, 2
  %3330 = icmp eq i32 %3329, 0
  %3331 = icmp slt i32 %3326, 10
  %3332 = or i1 %3330, %3331
  br i1 %3332, label %originalBBpart2863, label %originalBB855alteredBB

originalBBpart2863:                               ; preds = %originalBB855
  br label %3333, !dbg !1565

3333:                                             ; preds = %originalBBpart2863
  %3334 = load i32, i32* @x.17
  %3335 = load i32, i32* @y.18
  %3336 = sub i32 %3334, 1
  %3337 = mul i32 %3334, %3336
  %3338 = urem i32 %3337, 2
  %3339 = icmp eq i32 %3338, 0
  %3340 = icmp slt i32 %3335, 10
  %3341 = or i1 %3339, %3340
  br i1 %3341, label %originalBB865, label %originalBB865alteredBB

originalBB865:                                    ; preds = %3333, %originalBB865alteredBB
  %3342 = load i32, i32* @x.17
  %3343 = load i32, i32* @y.18
  %3344 = sub i32 %3342, 1
  %3345 = mul i32 %3342, %3344
  %3346 = urem i32 %3345, 2
  %3347 = icmp eq i32 %3346, 0
  %3348 = icmp slt i32 %3343, 10
  %3349 = or i1 %3347, %3348
  br i1 %3349, label %originalBBpart2867, label %originalBB865alteredBB

originalBBpart2867:                               ; preds = %originalBB865
  br label %3350, !dbg !1566

3350:                                             ; preds = %originalBBpart2867
  %3351 = load i32, i32* @x.17
  %3352 = load i32, i32* @y.18
  %3353 = sub i32 %3351, 1
  %3354 = mul i32 %3351, %3353
  %3355 = urem i32 %3354, 2
  %3356 = icmp eq i32 %3355, 0
  %3357 = icmp slt i32 %3352, 10
  %3358 = or i1 %3356, %3357
  br i1 %3358, label %originalBB869, label %originalBB869alteredBB

originalBB869:                                    ; preds = %3350, %originalBB869alteredBB
  %3359 = load i64, i64* %29, align 8, !dbg !1567
  %3360 = load i64, i64* %20, align 8, !dbg !1567
  %3361 = icmp ult i64 %3359, %3360, !dbg !1567
  %3362 = load i32, i32* @x.17
  %3363 = load i32, i32* @y.18
  %3364 = sub i32 %3362, 1
  %3365 = mul i32 %3362, %3364
  %3366 = urem i32 %3365, 2
  %3367 = icmp eq i32 %3366, 0
  %3368 = icmp slt i32 %3363, 10
  %3369 = or i1 %3367, %3368
  br i1 %3369, label %originalBBpart2871, label %originalBB869alteredBB

originalBBpart2871:                               ; preds = %originalBB869
  br i1 %3361, label %3370, label %3390, !dbg !1570

3370:                                             ; preds = %originalBBpart2871
  %3371 = load i32, i32* @x.17
  %3372 = load i32, i32* @y.18
  %3373 = sub i32 %3371, 1
  %3374 = mul i32 %3371, %3373
  %3375 = urem i32 %3374, 2
  %3376 = icmp eq i32 %3375, 0
  %3377 = icmp slt i32 %3372, 10
  %3378 = or i1 %3376, %3377
  br i1 %3378, label %originalBB873, label %originalBB873alteredBB

originalBB873:                                    ; preds = %3370, %originalBB873alteredBB
  %3379 = load i8*, i8** %19, align 8, !dbg !1567
  %3380 = load i64, i64* %29, align 8, !dbg !1567
  %3381 = getelementptr inbounds i8, i8* %3379, i64 %3380, !dbg !1567
  store i8 92, i8* %3381, align 1, !dbg !1567
  %3382 = load i32, i32* @x.17
  %3383 = load i32, i32* @y.18
  %3384 = sub i32 %3382, 1
  %3385 = mul i32 %3382, %3384
  %3386 = urem i32 %3385, 2
  %3387 = icmp eq i32 %3386, 0
  %3388 = icmp slt i32 %3383, 10
  %3389 = or i1 %3387, %3388
  br i1 %3389, label %originalBBpart2875, label %originalBB873alteredBB

originalBBpart2875:                               ; preds = %originalBB873
  br label %3390, !dbg !1567

3390:                                             ; preds = %originalBBpart2875, %originalBBpart2871
  %3391 = load i32, i32* @x.17
  %3392 = load i32, i32* @y.18
  %3393 = sub i32 %3391, 1
  %3394 = mul i32 %3391, %3393
  %3395 = urem i32 %3394, 2
  %3396 = icmp eq i32 %3395, 0
  %3397 = icmp slt i32 %3392, 10
  %3398 = or i1 %3396, %3397
  br i1 %3398, label %originalBB877, label %originalBB877alteredBB

originalBB877:                                    ; preds = %3390, %originalBB877alteredBB
  %3399 = load i64, i64* %29, align 8, !dbg !1570
  %3400 = add i64 %3399, 1, !dbg !1570
  store i64 %3400, i64* %29, align 8, !dbg !1570
  %3401 = load i32, i32* @x.17
  %3402 = load i32, i32* @y.18
  %3403 = sub i32 %3401, 1
  %3404 = mul i32 %3401, %3403
  %3405 = urem i32 %3404, 2
  %3406 = icmp eq i32 %3405, 0
  %3407 = icmp slt i32 %3402, 10
  %3408 = or i1 %3406, %3407
  br i1 %3408, label %originalBBpart2881, label %originalBB877alteredBB

originalBBpart2881:                               ; preds = %originalBB877
  br label %3409, !dbg !1570

3409:                                             ; preds = %originalBBpart2881
  %3410 = load i32, i32* @x.17
  %3411 = load i32, i32* @y.18
  %3412 = sub i32 %3410, 1
  %3413 = mul i32 %3410, %3412
  %3414 = urem i32 %3413, 2
  %3415 = icmp eq i32 %3414, 0
  %3416 = icmp slt i32 %3411, 10
  %3417 = or i1 %3415, %3416
  br i1 %3417, label %originalBB883, label %originalBB883alteredBB

originalBB883:                                    ; preds = %3409, %originalBB883alteredBB
  %3418 = load i32, i32* @x.17
  %3419 = load i32, i32* @y.18
  %3420 = sub i32 %3418, 1
  %3421 = mul i32 %3418, %3420
  %3422 = urem i32 %3421, 2
  %3423 = icmp eq i32 %3422, 0
  %3424 = icmp slt i32 %3419, 10
  %3425 = or i1 %3423, %3424
  br i1 %3425, label %originalBBpart2885, label %originalBB883alteredBB

originalBBpart2885:                               ; preds = %originalBB883
  br label %3426, !dbg !1571

3426:                                             ; preds = %originalBBpart2885
  %3427 = load i32, i32* @x.17
  %3428 = load i32, i32* @y.18
  %3429 = sub i32 %3427, 1
  %3430 = mul i32 %3427, %3429
  %3431 = urem i32 %3430, 2
  %3432 = icmp eq i32 %3431, 0
  %3433 = icmp slt i32 %3428, 10
  %3434 = or i1 %3432, %3433
  br i1 %3434, label %originalBB887, label %originalBB887alteredBB

originalBB887:                                    ; preds = %3426, %originalBB887alteredBB
  %3435 = load i64, i64* %29, align 8, !dbg !1572
  %3436 = load i64, i64* %20, align 8, !dbg !1572
  %3437 = icmp ult i64 %3435, %3436, !dbg !1572
  %3438 = load i32, i32* @x.17
  %3439 = load i32, i32* @y.18
  %3440 = sub i32 %3438, 1
  %3441 = mul i32 %3438, %3440
  %3442 = urem i32 %3441, 2
  %3443 = icmp eq i32 %3442, 0
  %3444 = icmp slt i32 %3439, 10
  %3445 = or i1 %3443, %3444
  br i1 %3445, label %originalBBpart2889, label %originalBB887alteredBB

originalBBpart2889:                               ; preds = %originalBB887
  br i1 %3437, label %3446, label %3466, !dbg !1575

3446:                                             ; preds = %originalBBpart2889
  %3447 = load i32, i32* @x.17
  %3448 = load i32, i32* @y.18
  %3449 = sub i32 %3447, 1
  %3450 = mul i32 %3447, %3449
  %3451 = urem i32 %3450, 2
  %3452 = icmp eq i32 %3451, 0
  %3453 = icmp slt i32 %3448, 10
  %3454 = or i1 %3452, %3453
  br i1 %3454, label %originalBB891, label %originalBB891alteredBB

originalBB891:                                    ; preds = %3446, %originalBB891alteredBB
  %3455 = load i8*, i8** %19, align 8, !dbg !1572
  %3456 = load i64, i64* %29, align 8, !dbg !1572
  %3457 = getelementptr inbounds i8, i8* %3455, i64 %3456, !dbg !1572
  store i8 39, i8* %3457, align 1, !dbg !1572
  %3458 = load i32, i32* @x.17
  %3459 = load i32, i32* @y.18
  %3460 = sub i32 %3458, 1
  %3461 = mul i32 %3458, %3460
  %3462 = urem i32 %3461, 2
  %3463 = icmp eq i32 %3462, 0
  %3464 = icmp slt i32 %3459, 10
  %3465 = or i1 %3463, %3464
  br i1 %3465, label %originalBBpart2893, label %originalBB891alteredBB

originalBBpart2893:                               ; preds = %originalBB891
  br label %3466, !dbg !1572

3466:                                             ; preds = %originalBBpart2893, %originalBBpart2889
  %3467 = load i32, i32* @x.17
  %3468 = load i32, i32* @y.18
  %3469 = sub i32 %3467, 1
  %3470 = mul i32 %3467, %3469
  %3471 = urem i32 %3470, 2
  %3472 = icmp eq i32 %3471, 0
  %3473 = icmp slt i32 %3468, 10
  %3474 = or i1 %3472, %3473
  br i1 %3474, label %originalBB895, label %originalBB895alteredBB

originalBB895:                                    ; preds = %3466, %originalBB895alteredBB
  %3475 = load i64, i64* %29, align 8, !dbg !1575
  %3476 = add i64 %3475, 1, !dbg !1575
  store i64 %3476, i64* %29, align 8, !dbg !1575
  %3477 = load i32, i32* @x.17
  %3478 = load i32, i32* @y.18
  %3479 = sub i32 %3477, 1
  %3480 = mul i32 %3477, %3479
  %3481 = urem i32 %3480, 2
  %3482 = icmp eq i32 %3481, 0
  %3483 = icmp slt i32 %3478, 10
  %3484 = or i1 %3482, %3483
  br i1 %3484, label %originalBBpart2906, label %originalBB895alteredBB

originalBBpart2906:                               ; preds = %originalBB895
  br label %3485, !dbg !1575

3485:                                             ; preds = %originalBBpart2906
  %3486 = load i32, i32* @x.17
  %3487 = load i32, i32* @y.18
  %3488 = sub i32 %3486, 1
  %3489 = mul i32 %3486, %3488
  %3490 = urem i32 %3489, 2
  %3491 = icmp eq i32 %3490, 0
  %3492 = icmp slt i32 %3487, 10
  %3493 = or i1 %3491, %3492
  br i1 %3493, label %originalBB908, label %originalBB908alteredBB

originalBB908:                                    ; preds = %3485, %originalBB908alteredBB
  store i8 0, i8* %36, align 1, !dbg !1576
  %3494 = load i32, i32* @x.17
  %3495 = load i32, i32* @y.18
  %3496 = sub i32 %3494, 1
  %3497 = mul i32 %3494, %3496
  %3498 = urem i32 %3497, 2
  %3499 = icmp eq i32 %3498, 0
  %3500 = icmp slt i32 %3495, 10
  %3501 = or i1 %3499, %3500
  br i1 %3501, label %originalBBpart2910, label %originalBB908alteredBB

originalBBpart2910:                               ; preds = %originalBB908
  br label %3502, !dbg !1577

3502:                                             ; preds = %originalBBpart2910, %originalBBpart2821
  %3503 = load i32, i32* @x.17
  %3504 = load i32, i32* @y.18
  %3505 = sub i32 %3503, 1
  %3506 = mul i32 %3503, %3505
  %3507 = urem i32 %3506, 2
  %3508 = icmp eq i32 %3507, 0
  %3509 = icmp slt i32 %3504, 10
  %3510 = or i1 %3508, %3509
  br i1 %3510, label %originalBB912, label %originalBB912alteredBB

originalBB912:                                    ; preds = %3502, %originalBB912alteredBB
  %3511 = load i32, i32* @x.17
  %3512 = load i32, i32* @y.18
  %3513 = sub i32 %3511, 1
  %3514 = mul i32 %3511, %3513
  %3515 = urem i32 %3514, 2
  %3516 = icmp eq i32 %3515, 0
  %3517 = icmp slt i32 %3512, 10
  %3518 = or i1 %3516, %3517
  br i1 %3518, label %originalBBpart2914, label %originalBB912alteredBB

originalBBpart2914:                               ; preds = %originalBB912
  br label %5465, !dbg !1578

3519:                                             ; preds = %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268, %originalBBpart2268
  %3520 = load i32, i32* @x.17
  %3521 = load i32, i32* @y.18
  %3522 = sub i32 %3520, 1
  %3523 = mul i32 %3520, %3522
  %3524 = urem i32 %3523, 2
  %3525 = icmp eq i32 %3524, 0
  %3526 = icmp slt i32 %3521, 10
  %3527 = or i1 %3525, %3526
  br i1 %3527, label %originalBB916, label %originalBB916alteredBB

originalBB916:                                    ; preds = %3519, %originalBB916alteredBB
  store i8 1, i8* %43, align 1, !dbg !1579
  %3528 = load i32, i32* @x.17
  %3529 = load i32, i32* @y.18
  %3530 = sub i32 %3528, 1
  %3531 = mul i32 %3528, %3530
  %3532 = urem i32 %3531, 2
  %3533 = icmp eq i32 %3532, 0
  %3534 = icmp slt i32 %3529, 10
  %3535 = or i1 %3533, %3534
  br i1 %3535, label %originalBBpart2918, label %originalBB916alteredBB

originalBBpart2918:                               ; preds = %originalBB916
  br label %5465, !dbg !1580

3536:                                             ; preds = %originalBBpart2268
  call void @llvm.dbg.declare(metadata i64* %44, metadata !1581, metadata !DIExpression()), !dbg !1583
  call void @llvm.dbg.declare(metadata i8* %45, metadata !1584, metadata !DIExpression()), !dbg !1585
  %3537 = load i32, i32* @x.17
  %3538 = load i32, i32* @y.18
  %3539 = sub i32 %3537, 1
  %3540 = mul i32 %3537, %3539
  %3541 = urem i32 %3540, 2
  %3542 = icmp eq i32 %3541, 0
  %3543 = icmp slt i32 %3538, 10
  %3544 = or i1 %3542, %3543
  br i1 %3544, label %originalBB920, label %originalBB920alteredBB

originalBB920:                                    ; preds = %3536, %originalBB920alteredBB
  %3545 = load i8, i8* %34, align 1, !dbg !1586
  %3546 = trunc i8 %3545 to i1, !dbg !1586
  %3547 = load i32, i32* @x.17
  %3548 = load i32, i32* @y.18
  %3549 = sub i32 %3547, 1
  %3550 = mul i32 %3547, %3549
  %3551 = urem i32 %3550, 2
  %3552 = icmp eq i32 %3551, 0
  %3553 = icmp slt i32 %3548, 10
  %3554 = or i1 %3552, %3553
  br i1 %3554, label %originalBBpart2922, label %originalBB920alteredBB

originalBBpart2922:                               ; preds = %originalBB920
  br i1 %3546, label %3555, label %3583, !dbg !1588

3555:                                             ; preds = %originalBBpart2922
  %3556 = load i32, i32* @x.17
  %3557 = load i32, i32* @y.18
  %3558 = sub i32 %3556, 1
  %3559 = mul i32 %3556, %3558
  %3560 = urem i32 %3559, 2
  %3561 = icmp eq i32 %3560, 0
  %3562 = icmp slt i32 %3557, 10
  %3563 = or i1 %3561, %3562
  br i1 %3563, label %originalBB924, label %originalBB924alteredBB

originalBB924:                                    ; preds = %3555, %originalBB924alteredBB
  store i64 1, i64* %44, align 8, !dbg !1589
  %3564 = call i16** @__ctype_b_loc() #15, !dbg !1591
  %3565 = load i16*, i16** %3564, align 8, !dbg !1591
  %3566 = load i8, i8* %39, align 1, !dbg !1591
  %3567 = zext i8 %3566 to i32, !dbg !1591
  %3568 = sext i32 %3567 to i64, !dbg !1591
  %3569 = getelementptr inbounds i16, i16* %3565, i64 %3568, !dbg !1591
  %3570 = load i16, i16* %3569, align 2, !dbg !1591
  %3571 = zext i16 %3570 to i32, !dbg !1591
  %3572 = and i32 %3571, 16384, !dbg !1591
  %3573 = icmp ne i32 %3572, 0, !dbg !1592
  %3574 = zext i1 %3573 to i8, !dbg !1593
  store i8 %3574, i8* %45, align 1, !dbg !1593
  %3575 = load i32, i32* @x.17
  %3576 = load i32, i32* @y.18
  %3577 = sub i32 %3575, 1
  %3578 = mul i32 %3575, %3577
  %3579 = urem i32 %3578, 2
  %3580 = icmp eq i32 %3579, 0
  %3581 = icmp slt i32 %3576, 10
  %3582 = or i1 %3580, %3581
  br i1 %3582, label %originalBBpart2927, label %originalBB924alteredBB

originalBBpart2927:                               ; preds = %originalBB924
  br label %4192, !dbg !1594

3583:                                             ; preds = %originalBBpart2922
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %46, metadata !1595, metadata !DIExpression()), !dbg !1612
  %3584 = load i32, i32* @x.17
  %3585 = load i32, i32* @y.18
  %3586 = sub i32 %3584, 1
  %3587 = mul i32 %3584, %3586
  %3588 = urem i32 %3587, 2
  %3589 = icmp eq i32 %3588, 0
  %3590 = icmp slt i32 %3585, 10
  %3591 = or i1 %3589, %3590
  br i1 %3591, label %originalBB929, label %originalBB929alteredBB

originalBB929:                                    ; preds = %3583, %originalBB929alteredBB
  %3592 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !1613
  call void @llvm.memset.p0i8.i64(i8* align 4 %3592, i8 0, i64 8, i1 false), !dbg !1613
  store i64 0, i64* %44, align 8, !dbg !1614
  store i8 1, i8* %45, align 1, !dbg !1615
  %3593 = load i64, i64* %22, align 8, !dbg !1616
  %3594 = icmp eq i64 %3593, -1, !dbg !1618
  %3595 = load i32, i32* @x.17
  %3596 = load i32, i32* @y.18
  %3597 = sub i32 %3595, 1
  %3598 = mul i32 %3595, %3597
  %3599 = urem i32 %3598, 2
  %3600 = icmp eq i32 %3599, 0
  %3601 = icmp slt i32 %3596, 10
  %3602 = or i1 %3600, %3601
  br i1 %3602, label %originalBBpart2931, label %originalBB929alteredBB

originalBBpart2931:                               ; preds = %originalBB929
  br i1 %3594, label %3603, label %3622, !dbg !1619

3603:                                             ; preds = %originalBBpart2931
  %3604 = load i32, i32* @x.17
  %3605 = load i32, i32* @y.18
  %3606 = sub i32 %3604, 1
  %3607 = mul i32 %3604, %3606
  %3608 = urem i32 %3607, 2
  %3609 = icmp eq i32 %3608, 0
  %3610 = icmp slt i32 %3605, 10
  %3611 = or i1 %3609, %3610
  br i1 %3611, label %originalBB933, label %originalBB933alteredBB

originalBB933:                                    ; preds = %3603, %originalBB933alteredBB
  %3612 = load i8*, i8** %21, align 8, !dbg !1620
  %3613 = call i64 @strlen(i8* %3612) #13, !dbg !1621
  store i64 %3613, i64* %22, align 8, !dbg !1622
  %3614 = load i32, i32* @x.17
  %3615 = load i32, i32* @y.18
  %3616 = sub i32 %3614, 1
  %3617 = mul i32 %3614, %3616
  %3618 = urem i32 %3617, 2
  %3619 = icmp eq i32 %3618, 0
  %3620 = icmp slt i32 %3615, 10
  %3621 = or i1 %3619, %3620
  br i1 %3621, label %originalBBpart2935, label %originalBB933alteredBB

originalBBpart2935:                               ; preds = %originalBB933
  br label %3622, !dbg !1623

3622:                                             ; preds = %originalBBpart2935, %originalBBpart2931
  %3623 = load i32, i32* @x.17
  %3624 = load i32, i32* @y.18
  %3625 = sub i32 %3623, 1
  %3626 = mul i32 %3623, %3625
  %3627 = urem i32 %3626, 2
  %3628 = icmp eq i32 %3627, 0
  %3629 = icmp slt i32 %3624, 10
  %3630 = or i1 %3628, %3629
  br i1 %3630, label %originalBB937, label %originalBB937alteredBB

originalBB937:                                    ; preds = %3622, %originalBB937alteredBB
  %3631 = load i32, i32* @x.17
  %3632 = load i32, i32* @y.18
  %3633 = sub i32 %3631, 1
  %3634 = mul i32 %3631, %3633
  %3635 = urem i32 %3634, 2
  %3636 = icmp eq i32 %3635, 0
  %3637 = icmp slt i32 %3632, 10
  %3638 = or i1 %3636, %3637
  br i1 %3638, label %originalBBpart2939, label %originalBB937alteredBB

originalBBpart2939:                               ; preds = %originalBB937
  br label %3639, !dbg !1624

3639:                                             ; preds = %originalBBpart21112, %originalBBpart2939
  call void @llvm.dbg.declare(metadata i32* %47, metadata !1625, metadata !DIExpression()), !dbg !1628
  call void @llvm.dbg.declare(metadata i64* %48, metadata !1629, metadata !DIExpression()), !dbg !1630
  %3640 = load i32, i32* @x.17
  %3641 = load i32, i32* @y.18
  %3642 = sub i32 %3640, 1
  %3643 = mul i32 %3640, %3642
  %3644 = urem i32 %3643, 2
  %3645 = icmp eq i32 %3644, 0
  %3646 = icmp slt i32 %3641, 10
  %3647 = or i1 %3645, %3646
  br i1 %3647, label %originalBB941, label %originalBB941alteredBB

originalBB941:                                    ; preds = %3639, %originalBB941alteredBB
  %3648 = load i8*, i8** %21, align 8, !dbg !1631
  %3649 = load i64, i64* %28, align 8, !dbg !1632
  %3650 = load i64, i64* %44, align 8, !dbg !1633
  %3651 = add i64 %3649, %3650, !dbg !1634
  %3652 = getelementptr inbounds i8, i8* %3648, i64 %3651, !dbg !1631
  %3653 = load i64, i64* %22, align 8, !dbg !1635
  %3654 = load i64, i64* %28, align 8, !dbg !1636
  %3655 = load i64, i64* %44, align 8, !dbg !1637
  %3656 = add i64 %3654, %3655, !dbg !1638
  %3657 = sub i64 %3653, %3656, !dbg !1639
  %3658 = call i64 @rpl_mbrtowc(i32* %47, i8* %3652, i64 %3657, %struct.__mbstate_t* %46), !dbg !1640
  store i64 %3658, i64* %48, align 8, !dbg !1630
  %3659 = load i64, i64* %48, align 8, !dbg !1641
  %3660 = icmp eq i64 %3659, 0, !dbg !1643
  %3661 = load i32, i32* @x.17
  %3662 = load i32, i32* @y.18
  %3663 = sub i32 %3661, 1
  %3664 = mul i32 %3661, %3663
  %3665 = urem i32 %3664, 2
  %3666 = icmp eq i32 %3665, 0
  %3667 = icmp slt i32 %3662, 10
  %3668 = or i1 %3666, %3667
  br i1 %3668, label %originalBBpart2952, label %originalBB941alteredBB

originalBBpart2952:                               ; preds = %originalBB941
  br i1 %3660, label %3669, label %3686, !dbg !1644

3669:                                             ; preds = %originalBBpart2952
  %3670 = load i32, i32* @x.17
  %3671 = load i32, i32* @y.18
  %3672 = sub i32 %3670, 1
  %3673 = mul i32 %3670, %3672
  %3674 = urem i32 %3673, 2
  %3675 = icmp eq i32 %3674, 0
  %3676 = icmp slt i32 %3671, 10
  %3677 = or i1 %3675, %3676
  br i1 %3677, label %originalBB954, label %originalBB954alteredBB

originalBB954:                                    ; preds = %3669, %originalBB954alteredBB
  %3678 = load i32, i32* @x.17
  %3679 = load i32, i32* @y.18
  %3680 = sub i32 %3678, 1
  %3681 = mul i32 %3678, %3680
  %3682 = urem i32 %3681, 2
  %3683 = icmp eq i32 %3682, 0
  %3684 = icmp slt i32 %3679, 10
  %3685 = or i1 %3683, %3684
  br i1 %3685, label %originalBBpart2956, label %originalBB954alteredBB

originalBBpart2956:                               ; preds = %originalBB954
  br label %4175, !dbg !1645

3686:                                             ; preds = %originalBBpart2952
  %3687 = load i32, i32* @x.17
  %3688 = load i32, i32* @y.18
  %3689 = sub i32 %3687, 1
  %3690 = mul i32 %3687, %3689
  %3691 = urem i32 %3690, 2
  %3692 = icmp eq i32 %3691, 0
  %3693 = icmp slt i32 %3688, 10
  %3694 = or i1 %3692, %3693
  br i1 %3694, label %originalBB958, label %originalBB958alteredBB

originalBB958:                                    ; preds = %3686, %originalBB958alteredBB
  %3695 = load i64, i64* %48, align 8, !dbg !1646
  %3696 = icmp eq i64 %3695, -1, !dbg !1648
  %3697 = load i32, i32* @x.17
  %3698 = load i32, i32* @y.18
  %3699 = sub i32 %3697, 1
  %3700 = mul i32 %3697, %3699
  %3701 = urem i32 %3700, 2
  %3702 = icmp eq i32 %3701, 0
  %3703 = icmp slt i32 %3698, 10
  %3704 = or i1 %3702, %3703
  br i1 %3704, label %originalBBpart2960, label %originalBB958alteredBB

originalBBpart2960:                               ; preds = %originalBB958
  br i1 %3696, label %3705, label %3722, !dbg !1649

3705:                                             ; preds = %originalBBpart2960
  %3706 = load i32, i32* @x.17
  %3707 = load i32, i32* @y.18
  %3708 = sub i32 %3706, 1
  %3709 = mul i32 %3706, %3708
  %3710 = urem i32 %3709, 2
  %3711 = icmp eq i32 %3710, 0
  %3712 = icmp slt i32 %3707, 10
  %3713 = or i1 %3711, %3712
  br i1 %3713, label %originalBB962, label %originalBB962alteredBB

originalBB962:                                    ; preds = %3705, %originalBB962alteredBB
  store i8 0, i8* %45, align 1, !dbg !1650
  %3714 = load i32, i32* @x.17
  %3715 = load i32, i32* @y.18
  %3716 = sub i32 %3714, 1
  %3717 = mul i32 %3714, %3716
  %3718 = urem i32 %3717, 2
  %3719 = icmp eq i32 %3718, 0
  %3720 = icmp slt i32 %3715, 10
  %3721 = or i1 %3719, %3720
  br i1 %3721, label %originalBBpart2964, label %originalBB962alteredBB

originalBBpart2964:                               ; preds = %originalBB962
  br label %4175, !dbg !1652

3722:                                             ; preds = %originalBBpart2960
  %3723 = load i32, i32* @x.17
  %3724 = load i32, i32* @y.18
  %3725 = sub i32 %3723, 1
  %3726 = mul i32 %3723, %3725
  %3727 = urem i32 %3726, 2
  %3728 = icmp eq i32 %3727, 0
  %3729 = icmp slt i32 %3724, 10
  %3730 = or i1 %3728, %3729
  br i1 %3730, label %originalBB966, label %originalBB966alteredBB

originalBB966:                                    ; preds = %3722, %originalBB966alteredBB
  %3731 = load i64, i64* %48, align 8, !dbg !1653
  %3732 = icmp eq i64 %3731, -2, !dbg !1655
  %3733 = load i32, i32* @x.17
  %3734 = load i32, i32* @y.18
  %3735 = sub i32 %3733, 1
  %3736 = mul i32 %3733, %3735
  %3737 = urem i32 %3736, 2
  %3738 = icmp eq i32 %3737, 0
  %3739 = icmp slt i32 %3734, 10
  %3740 = or i1 %3738, %3739
  br i1 %3740, label %originalBBpart2968, label %originalBB966alteredBB

originalBBpart2968:                               ; preds = %originalBB966
  br i1 %3732, label %3741, label %3859, !dbg !1656

3741:                                             ; preds = %originalBBpart2968
  %3742 = load i32, i32* @x.17
  %3743 = load i32, i32* @y.18
  %3744 = sub i32 %3742, 1
  %3745 = mul i32 %3742, %3744
  %3746 = urem i32 %3745, 2
  %3747 = icmp eq i32 %3746, 0
  %3748 = icmp slt i32 %3743, 10
  %3749 = or i1 %3747, %3748
  br i1 %3749, label %originalBB970, label %originalBB970alteredBB

originalBB970:                                    ; preds = %3741, %originalBB970alteredBB
  store i8 0, i8* %45, align 1, !dbg !1657
  %3750 = load i32, i32* @x.17
  %3751 = load i32, i32* @y.18
  %3752 = sub i32 %3750, 1
  %3753 = mul i32 %3750, %3752
  %3754 = urem i32 %3753, 2
  %3755 = icmp eq i32 %3754, 0
  %3756 = icmp slt i32 %3751, 10
  %3757 = or i1 %3755, %3756
  br i1 %3757, label %originalBBpart2972, label %originalBB970alteredBB

originalBBpart2972:                               ; preds = %originalBB970
  br label %3758, !dbg !1659

3758:                                             ; preds = %originalBBpart21017, %originalBBpart2972
  %3759 = load i32, i32* @x.17
  %3760 = load i32, i32* @y.18
  %3761 = sub i32 %3759, 1
  %3762 = mul i32 %3759, %3761
  %3763 = urem i32 %3762, 2
  %3764 = icmp eq i32 %3763, 0
  %3765 = icmp slt i32 %3760, 10
  %3766 = or i1 %3764, %3765
  br i1 %3766, label %originalBB974, label %originalBB974alteredBB

originalBB974:                                    ; preds = %3758, %originalBB974alteredBB
  %3767 = load i64, i64* %28, align 8, !dbg !1660
  %3768 = load i64, i64* %44, align 8, !dbg !1661
  %3769 = add i64 %3767, %3768, !dbg !1662
  %3770 = load i64, i64* %22, align 8, !dbg !1663
  %3771 = icmp ult i64 %3769, %3770, !dbg !1664
  %3772 = load i32, i32* @x.17
  %3773 = load i32, i32* @y.18
  %3774 = sub i32 %3772, 1
  %3775 = mul i32 %3772, %3774
  %3776 = urem i32 %3775, 2
  %3777 = icmp eq i32 %3776, 0
  %3778 = icmp slt i32 %3773, 10
  %3779 = or i1 %3777, %3778
  br i1 %3779, label %originalBBpart2987, label %originalBB974alteredBB

originalBBpart2987:                               ; preds = %originalBB974
  br i1 %3771, label %3780, label %3805, !dbg !1665

3780:                                             ; preds = %originalBBpart2987
  %3781 = load i32, i32* @x.17
  %3782 = load i32, i32* @y.18
  %3783 = sub i32 %3781, 1
  %3784 = mul i32 %3781, %3783
  %3785 = urem i32 %3784, 2
  %3786 = icmp eq i32 %3785, 0
  %3787 = icmp slt i32 %3782, 10
  %3788 = or i1 %3786, %3787
  br i1 %3788, label %originalBB989, label %originalBB989alteredBB

originalBB989:                                    ; preds = %3780, %originalBB989alteredBB
  %3789 = load i8*, i8** %21, align 8, !dbg !1666
  %3790 = load i64, i64* %28, align 8, !dbg !1667
  %3791 = load i64, i64* %44, align 8, !dbg !1668
  %3792 = add i64 %3790, %3791, !dbg !1669
  %3793 = getelementptr inbounds i8, i8* %3789, i64 %3792, !dbg !1666
  %3794 = load i8, i8* %3793, align 1, !dbg !1666
  %3795 = sext i8 %3794 to i32, !dbg !1666
  %3796 = icmp ne i32 %3795, 0, !dbg !1665
  %3797 = load i32, i32* @x.17
  %3798 = load i32, i32* @y.18
  %3799 = sub i32 %3797, 1
  %3800 = mul i32 %3797, %3799
  %3801 = urem i32 %3800, 2
  %3802 = icmp eq i32 %3801, 0
  %3803 = icmp slt i32 %3798, 10
  %3804 = or i1 %3802, %3803
  br i1 %3804, label %originalBBpart21003, label %originalBB989alteredBB

originalBBpart21003:                              ; preds = %originalBB989
  br label %3805

3805:                                             ; preds = %originalBBpart21003, %originalBBpart2987
  %3806 = phi i1 [ false, %originalBBpart2987 ], [ %3796, %originalBBpart21003 ], !dbg !1670
  %3807 = load i32, i32* @x.17
  %3808 = load i32, i32* @y.18
  %3809 = sub i32 %3807, 1
  %3810 = mul i32 %3807, %3809
  %3811 = urem i32 %3810, 2
  %3812 = icmp eq i32 %3811, 0
  %3813 = icmp slt i32 %3808, 10
  %3814 = or i1 %3812, %3813
  br i1 %3814, label %originalBB1005, label %originalBB1005alteredBB

originalBB1005:                                   ; preds = %3805, %originalBB1005alteredBB
  %3815 = load i32, i32* @x.17
  %3816 = load i32, i32* @y.18
  %3817 = sub i32 %3815, 1
  %3818 = mul i32 %3815, %3817
  %3819 = urem i32 %3818, 2
  %3820 = icmp eq i32 %3819, 0
  %3821 = icmp slt i32 %3816, 10
  %3822 = or i1 %3820, %3821
  br i1 %3822, label %originalBBpart21007, label %originalBB1005alteredBB

originalBBpart21007:                              ; preds = %originalBB1005
  br i1 %3806, label %3823, label %3842, !dbg !1659

3823:                                             ; preds = %originalBBpart21007
  %3824 = load i32, i32* @x.17
  %3825 = load i32, i32* @y.18
  %3826 = sub i32 %3824, 1
  %3827 = mul i32 %3824, %3826
  %3828 = urem i32 %3827, 2
  %3829 = icmp eq i32 %3828, 0
  %3830 = icmp slt i32 %3825, 10
  %3831 = or i1 %3829, %3830
  br i1 %3831, label %originalBB1009, label %originalBB1009alteredBB

originalBB1009:                                   ; preds = %3823, %originalBB1009alteredBB
  %3832 = load i64, i64* %44, align 8, !dbg !1671
  %3833 = add i64 %3832, 1, !dbg !1671
  store i64 %3833, i64* %44, align 8, !dbg !1671
  %3834 = load i32, i32* @x.17
  %3835 = load i32, i32* @y.18
  %3836 = sub i32 %3834, 1
  %3837 = mul i32 %3834, %3836
  %3838 = urem i32 %3837, 2
  %3839 = icmp eq i32 %3838, 0
  %3840 = icmp slt i32 %3835, 10
  %3841 = or i1 %3839, %3840
  br i1 %3841, label %originalBBpart21017, label %originalBB1009alteredBB

originalBBpart21017:                              ; preds = %originalBB1009
  br label %3758, !dbg !1659, !llvm.loop !1672

3842:                                             ; preds = %originalBBpart21007
  %3843 = load i32, i32* @x.17
  %3844 = load i32, i32* @y.18
  %3845 = sub i32 %3843, 1
  %3846 = mul i32 %3843, %3845
  %3847 = urem i32 %3846, 2
  %3848 = icmp eq i32 %3847, 0
  %3849 = icmp slt i32 %3844, 10
  %3850 = or i1 %3848, %3849
  br i1 %3850, label %originalBB1019, label %originalBB1019alteredBB

originalBB1019:                                   ; preds = %3842, %originalBB1019alteredBB
  %3851 = load i32, i32* @x.17
  %3852 = load i32, i32* @y.18
  %3853 = sub i32 %3851, 1
  %3854 = mul i32 %3851, %3853
  %3855 = urem i32 %3854, 2
  %3856 = icmp eq i32 %3855, 0
  %3857 = icmp slt i32 %3852, 10
  %3858 = or i1 %3856, %3857
  br i1 %3858, label %originalBBpart21021, label %originalBB1019alteredBB

originalBBpart21021:                              ; preds = %originalBB1019
  br label %4175, !dbg !1673

3859:                                             ; preds = %originalBBpart2968
  %3860 = load i32, i32* @x.17
  %3861 = load i32, i32* @y.18
  %3862 = sub i32 %3860, 1
  %3863 = mul i32 %3860, %3862
  %3864 = urem i32 %3863, 2
  %3865 = icmp eq i32 %3864, 0
  %3866 = icmp slt i32 %3861, 10
  %3867 = or i1 %3865, %3866
  br i1 %3867, label %originalBB1023, label %originalBB1023alteredBB

originalBB1023:                                   ; preds = %3859, %originalBB1023alteredBB
  %3868 = load i8, i8* %35, align 1, !dbg !1674
  %3869 = trunc i8 %3868 to i1, !dbg !1674
  %3870 = load i32, i32* @x.17
  %3871 = load i32, i32* @y.18
  %3872 = sub i32 %3870, 1
  %3873 = mul i32 %3870, %3872
  %3874 = urem i32 %3873, 2
  %3875 = icmp eq i32 %3874, 0
  %3876 = icmp slt i32 %3871, 10
  %3877 = or i1 %3875, %3876
  br i1 %3877, label %originalBBpart21025, label %originalBB1023alteredBB

originalBBpart21025:                              ; preds = %originalBB1023
  br i1 %3869, label %3878, label %4047, !dbg !1677

3878:                                             ; preds = %originalBBpart21025
  %3879 = load i32, i32* @x.17
  %3880 = load i32, i32* @y.18
  %3881 = sub i32 %3879, 1
  %3882 = mul i32 %3879, %3881
  %3883 = urem i32 %3882, 2
  %3884 = icmp eq i32 %3883, 0
  %3885 = icmp slt i32 %3880, 10
  %3886 = or i1 %3884, %3885
  br i1 %3886, label %originalBB1027, label %originalBB1027alteredBB

originalBB1027:                                   ; preds = %3878, %originalBB1027alteredBB
  %3887 = load i32, i32* %23, align 4, !dbg !1678
  %3888 = icmp eq i32 %3887, 2, !dbg !1679
  %3889 = load i32, i32* @x.17
  %3890 = load i32, i32* @y.18
  %3891 = sub i32 %3889, 1
  %3892 = mul i32 %3889, %3891
  %3893 = urem i32 %3892, 2
  %3894 = icmp eq i32 %3893, 0
  %3895 = icmp slt i32 %3890, 10
  %3896 = or i1 %3894, %3895
  br i1 %3896, label %originalBBpart21029, label %originalBB1027alteredBB

originalBBpart21029:                              ; preds = %originalBB1027
  br i1 %3888, label %3897, label %4047, !dbg !1680

3897:                                             ; preds = %originalBBpart21029
  call void @llvm.dbg.declare(metadata i64* %49, metadata !1681, metadata !DIExpression()), !dbg !1683
  %3898 = load i32, i32* @x.17
  %3899 = load i32, i32* @y.18
  %3900 = sub i32 %3898, 1
  %3901 = mul i32 %3898, %3900
  %3902 = urem i32 %3901, 2
  %3903 = icmp eq i32 %3902, 0
  %3904 = icmp slt i32 %3899, 10
  %3905 = or i1 %3903, %3904
  br i1 %3905, label %originalBB1031, label %originalBB1031alteredBB

originalBB1031:                                   ; preds = %3897, %originalBB1031alteredBB
  store i64 1, i64* %49, align 8, !dbg !1684
  %3906 = load i32, i32* @x.17
  %3907 = load i32, i32* @y.18
  %3908 = sub i32 %3906, 1
  %3909 = mul i32 %3906, %3908
  %3910 = urem i32 %3909, 2
  %3911 = icmp eq i32 %3910, 0
  %3912 = icmp slt i32 %3907, 10
  %3913 = or i1 %3911, %3912
  br i1 %3913, label %originalBBpart21033, label %originalBB1031alteredBB

originalBBpart21033:                              ; preds = %originalBB1031
  br label %3914, !dbg !1686

3914:                                             ; preds = %originalBBpart21071, %originalBBpart21033
  %3915 = load i32, i32* @x.17
  %3916 = load i32, i32* @y.18
  %3917 = sub i32 %3915, 1
  %3918 = mul i32 %3915, %3917
  %3919 = urem i32 %3918, 2
  %3920 = icmp eq i32 %3919, 0
  %3921 = icmp slt i32 %3916, 10
  %3922 = or i1 %3920, %3921
  br i1 %3922, label %originalBB1035, label %originalBB1035alteredBB

originalBB1035:                                   ; preds = %3914, %originalBB1035alteredBB
  %3923 = load i64, i64* %49, align 8, !dbg !1687
  %3924 = load i64, i64* %48, align 8, !dbg !1689
  %3925 = icmp ult i64 %3923, %3924, !dbg !1690
  %3926 = load i32, i32* @x.17
  %3927 = load i32, i32* @y.18
  %3928 = sub i32 %3926, 1
  %3929 = mul i32 %3926, %3928
  %3930 = urem i32 %3929, 2
  %3931 = icmp eq i32 %3930, 0
  %3932 = icmp slt i32 %3927, 10
  %3933 = or i1 %3931, %3932
  br i1 %3933, label %originalBBpart21037, label %originalBB1035alteredBB

originalBBpart21037:                              ; preds = %originalBB1035
  br i1 %3925, label %3934, label %4030, !dbg !1691

3934:                                             ; preds = %originalBBpart21037
  %3935 = load i32, i32* @x.17
  %3936 = load i32, i32* @y.18
  %3937 = sub i32 %3935, 1
  %3938 = mul i32 %3935, %3937
  %3939 = urem i32 %3938, 2
  %3940 = icmp eq i32 %3939, 0
  %3941 = icmp slt i32 %3936, 10
  %3942 = or i1 %3940, %3941
  br i1 %3942, label %originalBB1039, label %originalBB1039alteredBB

originalBB1039:                                   ; preds = %3934, %originalBB1039alteredBB
  %3943 = load i8*, i8** %21, align 8, !dbg !1692
  %3944 = load i64, i64* %28, align 8, !dbg !1693
  %3945 = load i64, i64* %44, align 8, !dbg !1694
  %3946 = add i64 %3944, %3945, !dbg !1695
  %3947 = load i64, i64* %49, align 8, !dbg !1696
  %3948 = add i64 %3946, %3947, !dbg !1697
  %3949 = getelementptr inbounds i8, i8* %3943, i64 %3948, !dbg !1692
  %3950 = load i8, i8* %3949, align 1, !dbg !1692
  %3951 = sext i8 %3950 to i32, !dbg !1692
  %3952 = load i32, i32* @x.17
  %3953 = load i32, i32* @y.18
  %3954 = sub i32 %3952, 1
  %3955 = mul i32 %3952, %3954
  %3956 = urem i32 %3955, 2
  %3957 = icmp eq i32 %3956, 0
  %3958 = icmp slt i32 %3953, 10
  %3959 = or i1 %3957, %3958
  br i1 %3959, label %originalBBpart21053, label %originalBB1039alteredBB

originalBBpart21053:                              ; preds = %originalBB1039
  switch i32 %3951, label %3977 [
    i32 91, label %3960
    i32 92, label %3960
    i32 94, label %3960
    i32 96, label %3960
    i32 124, label %3960
  ], !dbg !1698

3960:                                             ; preds = %originalBBpart21053, %originalBBpart21053, %originalBBpart21053, %originalBBpart21053, %originalBBpart21053
  %3961 = load i32, i32* @x.17
  %3962 = load i32, i32* @y.18
  %3963 = sub i32 %3961, 1
  %3964 = mul i32 %3961, %3963
  %3965 = urem i32 %3964, 2
  %3966 = icmp eq i32 %3965, 0
  %3967 = icmp slt i32 %3962, 10
  %3968 = or i1 %3966, %3967
  br i1 %3968, label %originalBB1055, label %originalBB1055alteredBB

originalBB1055:                                   ; preds = %3960, %originalBB1055alteredBB
  %3969 = load i32, i32* @x.17
  %3970 = load i32, i32* @y.18
  %3971 = sub i32 %3969, 1
  %3972 = mul i32 %3969, %3971
  %3973 = urem i32 %3972, 2
  %3974 = icmp eq i32 %3973, 0
  %3975 = icmp slt i32 %3970, 10
  %3976 = or i1 %3974, %3975
  br i1 %3976, label %originalBBpart21057, label %originalBB1055alteredBB

originalBBpart21057:                              ; preds = %originalBB1055
  br label %6990, !dbg !1699

3977:                                             ; preds = %originalBBpart21053
  %3978 = load i32, i32* @x.17
  %3979 = load i32, i32* @y.18
  %3980 = sub i32 %3978, 1
  %3981 = mul i32 %3978, %3980
  %3982 = urem i32 %3981, 2
  %3983 = icmp eq i32 %3982, 0
  %3984 = icmp slt i32 %3979, 10
  %3985 = or i1 %3983, %3984
  br i1 %3985, label %originalBB1059, label %originalBB1059alteredBB

originalBB1059:                                   ; preds = %3977, %originalBB1059alteredBB
  %3986 = load i32, i32* @x.17
  %3987 = load i32, i32* @y.18
  %3988 = sub i32 %3986, 1
  %3989 = mul i32 %3986, %3988
  %3990 = urem i32 %3989, 2
  %3991 = icmp eq i32 %3990, 0
  %3992 = icmp slt i32 %3987, 10
  %3993 = or i1 %3991, %3992
  br i1 %3993, label %originalBBpart21061, label %originalBB1059alteredBB

originalBBpart21061:                              ; preds = %originalBB1059
  br label %3994, !dbg !1701

3994:                                             ; preds = %originalBBpart21061
  %3995 = load i32, i32* @x.17
  %3996 = load i32, i32* @y.18
  %3997 = sub i32 %3995, 1
  %3998 = mul i32 %3995, %3997
  %3999 = urem i32 %3998, 2
  %4000 = icmp eq i32 %3999, 0
  %4001 = icmp slt i32 %3996, 10
  %4002 = or i1 %4000, %4001
  br i1 %4002, label %originalBB1063, label %originalBB1063alteredBB

originalBB1063:                                   ; preds = %3994, %originalBB1063alteredBB
  %4003 = load i32, i32* @x.17
  %4004 = load i32, i32* @y.18
  %4005 = sub i32 %4003, 1
  %4006 = mul i32 %4003, %4005
  %4007 = urem i32 %4006, 2
  %4008 = icmp eq i32 %4007, 0
  %4009 = icmp slt i32 %4004, 10
  %4010 = or i1 %4008, %4009
  br i1 %4010, label %originalBBpart21065, label %originalBB1063alteredBB

originalBBpart21065:                              ; preds = %originalBB1063
  br label %4011, !dbg !1702

4011:                                             ; preds = %originalBBpart21065
  %4012 = load i32, i32* @x.17
  %4013 = load i32, i32* @y.18
  %4014 = sub i32 %4012, 1
  %4015 = mul i32 %4012, %4014
  %4016 = urem i32 %4015, 2
  %4017 = icmp eq i32 %4016, 0
  %4018 = icmp slt i32 %4013, 10
  %4019 = or i1 %4017, %4018
  br i1 %4019, label %originalBB1067, label %originalBB1067alteredBB

originalBB1067:                                   ; preds = %4011, %originalBB1067alteredBB
  %4020 = load i64, i64* %49, align 8, !dbg !1703
  %4021 = add i64 %4020, 1, !dbg !1703
  store i64 %4021, i64* %49, align 8, !dbg !1703
  %4022 = load i32, i32* @x.17
  %4023 = load i32, i32* @y.18
  %4024 = sub i32 %4022, 1
  %4025 = mul i32 %4022, %4024
  %4026 = urem i32 %4025, 2
  %4027 = icmp eq i32 %4026, 0
  %4028 = icmp slt i32 %4023, 10
  %4029 = or i1 %4027, %4028
  br i1 %4029, label %originalBBpart21071, label %originalBB1067alteredBB

originalBBpart21071:                              ; preds = %originalBB1067
  br label %3914, !dbg !1704, !llvm.loop !1705

4030:                                             ; preds = %originalBBpart21037
  %4031 = load i32, i32* @x.17
  %4032 = load i32, i32* @y.18
  %4033 = sub i32 %4031, 1
  %4034 = mul i32 %4031, %4033
  %4035 = urem i32 %4034, 2
  %4036 = icmp eq i32 %4035, 0
  %4037 = icmp slt i32 %4032, 10
  %4038 = or i1 %4036, %4037
  br i1 %4038, label %originalBB1073, label %originalBB1073alteredBB

originalBB1073:                                   ; preds = %4030, %originalBB1073alteredBB
  %4039 = load i32, i32* @x.17
  %4040 = load i32, i32* @y.18
  %4041 = sub i32 %4039, 1
  %4042 = mul i32 %4039, %4041
  %4043 = urem i32 %4042, 2
  %4044 = icmp eq i32 %4043, 0
  %4045 = icmp slt i32 %4040, 10
  %4046 = or i1 %4044, %4045
  br i1 %4046, label %originalBBpart21075, label %originalBB1073alteredBB

originalBBpart21075:                              ; preds = %originalBB1073
  br label %4047, !dbg !1707

4047:                                             ; preds = %originalBBpart21075, %originalBBpart21029, %originalBBpart21025
  %4048 = load i32, i32* @x.17
  %4049 = load i32, i32* @y.18
  %4050 = sub i32 %4048, 1
  %4051 = mul i32 %4048, %4050
  %4052 = urem i32 %4051, 2
  %4053 = icmp eq i32 %4052, 0
  %4054 = icmp slt i32 %4049, 10
  %4055 = or i1 %4053, %4054
  br i1 %4055, label %originalBB1077, label %originalBB1077alteredBB

originalBB1077:                                   ; preds = %4047, %originalBB1077alteredBB
  %4056 = load i32, i32* %47, align 4, !dbg !1708
  %4057 = call i32 @iswprint(i32 %4056) #10, !dbg !1710
  %4058 = icmp ne i32 %4057, 0, !dbg !1710
  %4059 = load i32, i32* @x.17
  %4060 = load i32, i32* @y.18
  %4061 = sub i32 %4059, 1
  %4062 = mul i32 %4059, %4061
  %4063 = urem i32 %4062, 2
  %4064 = icmp eq i32 %4063, 0
  %4065 = icmp slt i32 %4060, 10
  %4066 = or i1 %4064, %4065
  br i1 %4066, label %originalBBpart21079, label %originalBB1077alteredBB

originalBBpart21079:                              ; preds = %originalBB1077
  br i1 %4058, label %4084, label %4067, !dbg !1711

4067:                                             ; preds = %originalBBpart21079
  %4068 = load i32, i32* @x.17
  %4069 = load i32, i32* @y.18
  %4070 = sub i32 %4068, 1
  %4071 = mul i32 %4068, %4070
  %4072 = urem i32 %4071, 2
  %4073 = icmp eq i32 %4072, 0
  %4074 = icmp slt i32 %4069, 10
  %4075 = or i1 %4073, %4074
  br i1 %4075, label %originalBB1081, label %originalBB1081alteredBB

originalBB1081:                                   ; preds = %4067, %originalBB1081alteredBB
  store i8 0, i8* %45, align 1, !dbg !1712
  %4076 = load i32, i32* @x.17
  %4077 = load i32, i32* @y.18
  %4078 = sub i32 %4076, 1
  %4079 = mul i32 %4076, %4078
  %4080 = urem i32 %4079, 2
  %4081 = icmp eq i32 %4080, 0
  %4082 = icmp slt i32 %4077, 10
  %4083 = or i1 %4081, %4082
  br i1 %4083, label %originalBBpart21083, label %originalBB1081alteredBB

originalBBpart21083:                              ; preds = %originalBB1081
  br label %4084, !dbg !1713

4084:                                             ; preds = %originalBBpart21083, %originalBBpart21079
  %4085 = load i32, i32* @x.17
  %4086 = load i32, i32* @y.18
  %4087 = sub i32 %4085, 1
  %4088 = mul i32 %4085, %4087
  %4089 = urem i32 %4088, 2
  %4090 = icmp eq i32 %4089, 0
  %4091 = icmp slt i32 %4086, 10
  %4092 = or i1 %4090, %4091
  br i1 %4092, label %originalBB1085, label %originalBB1085alteredBB

originalBB1085:                                   ; preds = %4084, %originalBB1085alteredBB
  %4093 = load i64, i64* %48, align 8, !dbg !1714
  %4094 = load i64, i64* %44, align 8, !dbg !1715
  %4095 = add i64 %4094, %4093, !dbg !1715
  store i64 %4095, i64* %44, align 8, !dbg !1715
  %4096 = load i32, i32* @x.17
  %4097 = load i32, i32* @y.18
  %4098 = sub i32 %4096, 1
  %4099 = mul i32 %4096, %4098
  %4100 = urem i32 %4099, 2
  %4101 = icmp eq i32 %4100, 0
  %4102 = icmp slt i32 %4097, 10
  %4103 = or i1 %4101, %4102
  br i1 %4103, label %originalBBpart21091, label %originalBB1085alteredBB

originalBBpart21091:                              ; preds = %originalBB1085
  br label %4104

4104:                                             ; preds = %originalBBpart21091
  %4105 = load i32, i32* @x.17
  %4106 = load i32, i32* @y.18
  %4107 = sub i32 %4105, 1
  %4108 = mul i32 %4105, %4107
  %4109 = urem i32 %4108, 2
  %4110 = icmp eq i32 %4109, 0
  %4111 = icmp slt i32 %4106, 10
  %4112 = or i1 %4110, %4111
  br i1 %4112, label %originalBB1093, label %originalBB1093alteredBB

originalBB1093:                                   ; preds = %4104, %originalBB1093alteredBB
  %4113 = load i32, i32* @x.17
  %4114 = load i32, i32* @y.18
  %4115 = sub i32 %4113, 1
  %4116 = mul i32 %4113, %4115
  %4117 = urem i32 %4116, 2
  %4118 = icmp eq i32 %4117, 0
  %4119 = icmp slt i32 %4114, 10
  %4120 = or i1 %4118, %4119
  br i1 %4120, label %originalBBpart21095, label %originalBB1093alteredBB

originalBBpart21095:                              ; preds = %originalBB1093
  br label %4121

4121:                                             ; preds = %originalBBpart21095
  %4122 = load i32, i32* @x.17
  %4123 = load i32, i32* @y.18
  %4124 = sub i32 %4122, 1
  %4125 = mul i32 %4122, %4124
  %4126 = urem i32 %4125, 2
  %4127 = icmp eq i32 %4126, 0
  %4128 = icmp slt i32 %4123, 10
  %4129 = or i1 %4127, %4128
  br i1 %4129, label %originalBB1097, label %originalBB1097alteredBB

originalBB1097:                                   ; preds = %4121, %originalBB1097alteredBB
  %4130 = load i32, i32* @x.17
  %4131 = load i32, i32* @y.18
  %4132 = sub i32 %4130, 1
  %4133 = mul i32 %4130, %4132
  %4134 = urem i32 %4133, 2
  %4135 = icmp eq i32 %4134, 0
  %4136 = icmp slt i32 %4131, 10
  %4137 = or i1 %4135, %4136
  br i1 %4137, label %originalBBpart21099, label %originalBB1097alteredBB

originalBBpart21099:                              ; preds = %originalBB1097
  br label %4138

4138:                                             ; preds = %originalBBpart21099
  %4139 = load i32, i32* @x.17
  %4140 = load i32, i32* @y.18
  %4141 = sub i32 %4139, 1
  %4142 = mul i32 %4139, %4141
  %4143 = urem i32 %4142, 2
  %4144 = icmp eq i32 %4143, 0
  %4145 = icmp slt i32 %4140, 10
  %4146 = or i1 %4144, %4145
  br i1 %4146, label %originalBB1101, label %originalBB1101alteredBB

originalBB1101:                                   ; preds = %4138, %originalBB1101alteredBB
  %4147 = load i32, i32* @x.17
  %4148 = load i32, i32* @y.18
  %4149 = sub i32 %4147, 1
  %4150 = mul i32 %4147, %4149
  %4151 = urem i32 %4150, 2
  %4152 = icmp eq i32 %4151, 0
  %4153 = icmp slt i32 %4148, 10
  %4154 = or i1 %4152, %4153
  br i1 %4154, label %originalBBpart21103, label %originalBB1101alteredBB

originalBBpart21103:                              ; preds = %originalBB1101
  br label %4155, !dbg !1716

4155:                                             ; preds = %originalBBpart21103
  %4156 = load i32, i32* @x.17
  %4157 = load i32, i32* @y.18
  %4158 = sub i32 %4156, 1
  %4159 = mul i32 %4156, %4158
  %4160 = urem i32 %4159, 2
  %4161 = icmp eq i32 %4160, 0
  %4162 = icmp slt i32 %4157, 10
  %4163 = or i1 %4161, %4162
  br i1 %4163, label %originalBB1105, label %originalBB1105alteredBB

originalBB1105:                                   ; preds = %4155, %originalBB1105alteredBB
  %4164 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !1717
  %4165 = icmp ne i32 %4164, 0, !dbg !1718
  %4166 = xor i1 %4165, true, !dbg !1718
  %4167 = load i32, i32* @x.17
  %4168 = load i32, i32* @y.18
  %4169 = sub i32 %4167, 1
  %4170 = mul i32 %4167, %4169
  %4171 = urem i32 %4170, 2
  %4172 = icmp eq i32 %4171, 0
  %4173 = icmp slt i32 %4168, 10
  %4174 = or i1 %4172, %4173
  br i1 %4174, label %originalBBpart21112, label %originalBB1105alteredBB

originalBBpart21112:                              ; preds = %originalBB1105
  br i1 %4166, label %3639, label %4175, !dbg !1716, !llvm.loop !1719

4175:                                             ; preds = %originalBBpart21112, %originalBBpart21021, %originalBBpart2964, %originalBBpart2956
  %4176 = load i32, i32* @x.17
  %4177 = load i32, i32* @y.18
  %4178 = sub i32 %4176, 1
  %4179 = mul i32 %4176, %4178
  %4180 = urem i32 %4179, 2
  %4181 = icmp eq i32 %4180, 0
  %4182 = icmp slt i32 %4177, 10
  %4183 = or i1 %4181, %4182
  br i1 %4183, label %originalBB1114, label %originalBB1114alteredBB

originalBB1114:                                   ; preds = %4175, %originalBB1114alteredBB
  %4184 = load i32, i32* @x.17
  %4185 = load i32, i32* @y.18
  %4186 = sub i32 %4184, 1
  %4187 = mul i32 %4184, %4186
  %4188 = urem i32 %4187, 2
  %4189 = icmp eq i32 %4188, 0
  %4190 = icmp slt i32 %4185, 10
  %4191 = or i1 %4189, %4190
  br i1 %4191, label %originalBBpart21116, label %originalBB1114alteredBB

originalBBpart21116:                              ; preds = %originalBB1114
  br label %4192

4192:                                             ; preds = %originalBBpart21116, %originalBBpart2927
  %4193 = load i32, i32* @x.17
  %4194 = load i32, i32* @y.18
  %4195 = sub i32 %4193, 1
  %4196 = mul i32 %4193, %4195
  %4197 = urem i32 %4196, 2
  %4198 = icmp eq i32 %4197, 0
  %4199 = icmp slt i32 %4194, 10
  %4200 = or i1 %4198, %4199
  br i1 %4200, label %originalBB1118, label %originalBB1118alteredBB

originalBB1118:                                   ; preds = %4192, %originalBB1118alteredBB
  %4201 = load i8, i8* %45, align 1, !dbg !1721
  %4202 = trunc i8 %4201 to i1, !dbg !1721
  %4203 = zext i1 %4202 to i8, !dbg !1722
  store i8 %4203, i8* %43, align 1, !dbg !1722
  %4204 = load i64, i64* %44, align 8, !dbg !1723
  %4205 = icmp ult i64 1, %4204, !dbg !1725
  %4206 = load i32, i32* @x.17
  %4207 = load i32, i32* @y.18
  %4208 = sub i32 %4206, 1
  %4209 = mul i32 %4206, %4208
  %4210 = urem i32 %4209, 2
  %4211 = icmp eq i32 %4210, 0
  %4212 = icmp slt i32 %4207, 10
  %4213 = or i1 %4211, %4212
  br i1 %4213, label %originalBBpart21120, label %originalBB1118alteredBB

originalBBpart21120:                              ; preds = %originalBB1118
  br i1 %4205, label %4252, label %4214, !dbg !1726

4214:                                             ; preds = %originalBBpart21120
  %4215 = load i32, i32* @x.17
  %4216 = load i32, i32* @y.18
  %4217 = sub i32 %4215, 1
  %4218 = mul i32 %4215, %4217
  %4219 = urem i32 %4218, 2
  %4220 = icmp eq i32 %4219, 0
  %4221 = icmp slt i32 %4216, 10
  %4222 = or i1 %4220, %4221
  br i1 %4222, label %originalBB1122, label %originalBB1122alteredBB

originalBB1122:                                   ; preds = %4214, %originalBB1122alteredBB
  %4223 = load i8, i8* %33, align 1, !dbg !1727
  %4224 = trunc i8 %4223 to i1, !dbg !1727
  %4225 = load i32, i32* @x.17
  %4226 = load i32, i32* @y.18
  %4227 = sub i32 %4225, 1
  %4228 = mul i32 %4225, %4227
  %4229 = urem i32 %4228, 2
  %4230 = icmp eq i32 %4229, 0
  %4231 = icmp slt i32 %4226, 10
  %4232 = or i1 %4230, %4231
  br i1 %4232, label %originalBBpart21124, label %originalBB1122alteredBB

originalBBpart21124:                              ; preds = %originalBB1122
  br i1 %4224, label %4233, label %5448, !dbg !1728

4233:                                             ; preds = %originalBBpart21124
  %4234 = load i32, i32* @x.17
  %4235 = load i32, i32* @y.18
  %4236 = sub i32 %4234, 1
  %4237 = mul i32 %4234, %4236
  %4238 = urem i32 %4237, 2
  %4239 = icmp eq i32 %4238, 0
  %4240 = icmp slt i32 %4235, 10
  %4241 = or i1 %4239, %4240
  br i1 %4241, label %originalBB1126, label %originalBB1126alteredBB

originalBB1126:                                   ; preds = %4233, %originalBB1126alteredBB
  %4242 = load i8, i8* %45, align 1, !dbg !1729
  %4243 = trunc i8 %4242 to i1, !dbg !1729
  %4244 = load i32, i32* @x.17
  %4245 = load i32, i32* @y.18
  %4246 = sub i32 %4244, 1
  %4247 = mul i32 %4244, %4246
  %4248 = urem i32 %4247, 2
  %4249 = icmp eq i32 %4248, 0
  %4250 = icmp slt i32 %4245, 10
  %4251 = or i1 %4249, %4250
  br i1 %4251, label %originalBBpart21128, label %originalBB1126alteredBB

originalBBpart21128:                              ; preds = %originalBB1126
  br i1 %4243, label %5448, label %4252, !dbg !1730

4252:                                             ; preds = %originalBBpart21128, %originalBBpart21120
  call void @llvm.dbg.declare(metadata i64* %50, metadata !1731, metadata !DIExpression()), !dbg !1733
  %4253 = load i32, i32* @x.17
  %4254 = load i32, i32* @y.18
  %4255 = sub i32 %4253, 1
  %4256 = mul i32 %4253, %4255
  %4257 = urem i32 %4256, 2
  %4258 = icmp eq i32 %4257, 0
  %4259 = icmp slt i32 %4254, 10
  %4260 = or i1 %4258, %4259
  br i1 %4260, label %originalBB1130, label %originalBB1130alteredBB

originalBB1130:                                   ; preds = %4252, %originalBB1130alteredBB
  %4261 = load i64, i64* %28, align 8, !dbg !1734
  %4262 = load i64, i64* %44, align 8, !dbg !1735
  %4263 = add i64 %4261, %4262, !dbg !1736
  store i64 %4263, i64* %50, align 8, !dbg !1733
  %4264 = load i32, i32* @x.17
  %4265 = load i32, i32* @y.18
  %4266 = sub i32 %4264, 1
  %4267 = mul i32 %4264, %4266
  %4268 = urem i32 %4267, 2
  %4269 = icmp eq i32 %4268, 0
  %4270 = icmp slt i32 %4265, 10
  %4271 = or i1 %4269, %4270
  br i1 %4271, label %originalBBpart21139, label %originalBB1130alteredBB

originalBBpart21139:                              ; preds = %originalBB1130
  br label %4272, !dbg !1737

4272:                                             ; preds = %originalBBpart21545, %originalBBpart21139
  %4273 = load i32, i32* @x.17
  %4274 = load i32, i32* @y.18
  %4275 = sub i32 %4273, 1
  %4276 = mul i32 %4273, %4275
  %4277 = urem i32 %4276, 2
  %4278 = icmp eq i32 %4277, 0
  %4279 = icmp slt i32 %4274, 10
  %4280 = or i1 %4278, %4279
  br i1 %4280, label %originalBB1141, label %originalBB1141alteredBB

originalBB1141:                                   ; preds = %4272, %originalBB1141alteredBB
  %4281 = load i8, i8* %33, align 1, !dbg !1738
  %4282 = trunc i8 %4281 to i1, !dbg !1738
  %4283 = load i32, i32* @x.17
  %4284 = load i32, i32* @y.18
  %4285 = sub i32 %4283, 1
  %4286 = mul i32 %4283, %4285
  %4287 = urem i32 %4286, 2
  %4288 = icmp eq i32 %4287, 0
  %4289 = icmp slt i32 %4284, 10
  %4290 = or i1 %4288, %4289
  br i1 %4290, label %originalBBpart21143, label %originalBB1141alteredBB

originalBBpart21143:                              ; preds = %originalBB1141
  br i1 %4282, label %4291, label %4924, !dbg !1743

4291:                                             ; preds = %originalBBpart21143
  %4292 = load i32, i32* @x.17
  %4293 = load i32, i32* @y.18
  %4294 = sub i32 %4292, 1
  %4295 = mul i32 %4292, %4294
  %4296 = urem i32 %4295, 2
  %4297 = icmp eq i32 %4296, 0
  %4298 = icmp slt i32 %4293, 10
  %4299 = or i1 %4297, %4298
  br i1 %4299, label %originalBB1145, label %originalBB1145alteredBB

originalBB1145:                                   ; preds = %4291, %originalBB1145alteredBB
  %4300 = load i8, i8* %45, align 1, !dbg !1744
  %4301 = trunc i8 %4300 to i1, !dbg !1744
  %4302 = load i32, i32* @x.17
  %4303 = load i32, i32* @y.18
  %4304 = sub i32 %4302, 1
  %4305 = mul i32 %4302, %4304
  %4306 = urem i32 %4305, 2
  %4307 = icmp eq i32 %4306, 0
  %4308 = icmp slt i32 %4303, 10
  %4309 = or i1 %4307, %4308
  br i1 %4309, label %originalBBpart21147, label %originalBB1145alteredBB

originalBBpart21147:                              ; preds = %originalBB1145
  br i1 %4301, label %4924, label %4310, !dbg !1745

4310:                                             ; preds = %originalBBpart21147
  %4311 = load i32, i32* @x.17
  %4312 = load i32, i32* @y.18
  %4313 = sub i32 %4311, 1
  %4314 = mul i32 %4311, %4313
  %4315 = urem i32 %4314, 2
  %4316 = icmp eq i32 %4315, 0
  %4317 = icmp slt i32 %4312, 10
  %4318 = or i1 %4316, %4317
  br i1 %4318, label %originalBB1149, label %originalBB1149alteredBB

originalBB1149:                                   ; preds = %4310, %originalBB1149alteredBB
  %4319 = load i32, i32* @x.17
  %4320 = load i32, i32* @y.18
  %4321 = sub i32 %4319, 1
  %4322 = mul i32 %4319, %4321
  %4323 = urem i32 %4322, 2
  %4324 = icmp eq i32 %4323, 0
  %4325 = icmp slt i32 %4320, 10
  %4326 = or i1 %4324, %4325
  br i1 %4326, label %originalBBpart21151, label %originalBB1149alteredBB

originalBBpart21151:                              ; preds = %originalBB1149
  br label %4327, !dbg !1746

4327:                                             ; preds = %originalBBpart21151
  %4328 = load i32, i32* @x.17
  %4329 = load i32, i32* @y.18
  %4330 = sub i32 %4328, 1
  %4331 = mul i32 %4328, %4330
  %4332 = urem i32 %4331, 2
  %4333 = icmp eq i32 %4332, 0
  %4334 = icmp slt i32 %4329, 10
  %4335 = or i1 %4333, %4334
  br i1 %4335, label %originalBB1153, label %originalBB1153alteredBB

originalBB1153:                                   ; preds = %4327, %originalBB1153alteredBB
  %4336 = load i8, i8* %35, align 1, !dbg !1748
  %4337 = trunc i8 %4336 to i1, !dbg !1748
  %4338 = load i32, i32* @x.17
  %4339 = load i32, i32* @y.18
  %4340 = sub i32 %4338, 1
  %4341 = mul i32 %4338, %4340
  %4342 = urem i32 %4341, 2
  %4343 = icmp eq i32 %4342, 0
  %4344 = icmp slt i32 %4339, 10
  %4345 = or i1 %4343, %4344
  br i1 %4345, label %originalBBpart21155, label %originalBB1153alteredBB

originalBBpart21155:                              ; preds = %originalBB1153
  br i1 %4337, label %4346, label %4363, !dbg !1751

4346:                                             ; preds = %originalBBpart21155
  %4347 = load i32, i32* @x.17
  %4348 = load i32, i32* @y.18
  %4349 = sub i32 %4347, 1
  %4350 = mul i32 %4347, %4349
  %4351 = urem i32 %4350, 2
  %4352 = icmp eq i32 %4351, 0
  %4353 = icmp slt i32 %4348, 10
  %4354 = or i1 %4352, %4353
  br i1 %4354, label %originalBB1157, label %originalBB1157alteredBB

originalBB1157:                                   ; preds = %4346, %originalBB1157alteredBB
  %4355 = load i32, i32* @x.17
  %4356 = load i32, i32* @y.18
  %4357 = sub i32 %4355, 1
  %4358 = mul i32 %4355, %4357
  %4359 = urem i32 %4358, 2
  %4360 = icmp eq i32 %4359, 0
  %4361 = icmp slt i32 %4356, 10
  %4362 = or i1 %4360, %4361
  br i1 %4362, label %originalBBpart21159, label %originalBB1157alteredBB

originalBBpart21159:                              ; preds = %originalBB1157
  br label %6990, !dbg !1748

4363:                                             ; preds = %originalBBpart21155
  %4364 = load i32, i32* @x.17
  %4365 = load i32, i32* @y.18
  %4366 = sub i32 %4364, 1
  %4367 = mul i32 %4364, %4366
  %4368 = urem i32 %4367, 2
  %4369 = icmp eq i32 %4368, 0
  %4370 = icmp slt i32 %4365, 10
  %4371 = or i1 %4369, %4370
  br i1 %4371, label %originalBB1161, label %originalBB1161alteredBB

originalBB1161:                                   ; preds = %4363, %originalBB1161alteredBB
  store i8 1, i8* %42, align 1, !dbg !1751
  %4372 = load i32, i32* %23, align 4, !dbg !1752
  %4373 = icmp eq i32 %4372, 2, !dbg !1752
  %4374 = load i32, i32* @x.17
  %4375 = load i32, i32* @y.18
  %4376 = sub i32 %4374, 1
  %4377 = mul i32 %4374, %4376
  %4378 = urem i32 %4377, 2
  %4379 = icmp eq i32 %4378, 0
  %4380 = icmp slt i32 %4375, 10
  %4381 = or i1 %4379, %4380
  br i1 %4381, label %originalBBpart21163, label %originalBB1161alteredBB

originalBBpart21163:                              ; preds = %originalBB1161
  br i1 %4373, label %4382, label %4646, !dbg !1752

4382:                                             ; preds = %originalBBpart21163
  %4383 = load i32, i32* @x.17
  %4384 = load i32, i32* @y.18
  %4385 = sub i32 %4383, 1
  %4386 = mul i32 %4383, %4385
  %4387 = urem i32 %4386, 2
  %4388 = icmp eq i32 %4387, 0
  %4389 = icmp slt i32 %4384, 10
  %4390 = or i1 %4388, %4389
  br i1 %4390, label %originalBB1165, label %originalBB1165alteredBB

originalBB1165:                                   ; preds = %4382, %originalBB1165alteredBB
  %4391 = load i8, i8* %36, align 1, !dbg !1752
  %4392 = trunc i8 %4391 to i1, !dbg !1752
  %4393 = load i32, i32* @x.17
  %4394 = load i32, i32* @y.18
  %4395 = sub i32 %4393, 1
  %4396 = mul i32 %4393, %4395
  %4397 = urem i32 %4396, 2
  %4398 = icmp eq i32 %4397, 0
  %4399 = icmp slt i32 %4394, 10
  %4400 = or i1 %4398, %4399
  br i1 %4400, label %originalBBpart21167, label %originalBB1165alteredBB

originalBBpart21167:                              ; preds = %originalBB1165
  br i1 %4392, label %4646, label %4401, !dbg !1751

4401:                                             ; preds = %originalBBpart21167
  %4402 = load i32, i32* @x.17
  %4403 = load i32, i32* @y.18
  %4404 = sub i32 %4402, 1
  %4405 = mul i32 %4402, %4404
  %4406 = urem i32 %4405, 2
  %4407 = icmp eq i32 %4406, 0
  %4408 = icmp slt i32 %4403, 10
  %4409 = or i1 %4407, %4408
  br i1 %4409, label %originalBB1169, label %originalBB1169alteredBB

originalBB1169:                                   ; preds = %4401, %originalBB1169alteredBB
  %4410 = load i32, i32* @x.17
  %4411 = load i32, i32* @y.18
  %4412 = sub i32 %4410, 1
  %4413 = mul i32 %4410, %4412
  %4414 = urem i32 %4413, 2
  %4415 = icmp eq i32 %4414, 0
  %4416 = icmp slt i32 %4411, 10
  %4417 = or i1 %4415, %4416
  br i1 %4417, label %originalBBpart21171, label %originalBB1169alteredBB

originalBBpart21171:                              ; preds = %originalBB1169
  br label %4418, !dbg !1754

4418:                                             ; preds = %originalBBpart21171
  %4419 = load i32, i32* @x.17
  %4420 = load i32, i32* @y.18
  %4421 = sub i32 %4419, 1
  %4422 = mul i32 %4419, %4421
  %4423 = urem i32 %4422, 2
  %4424 = icmp eq i32 %4423, 0
  %4425 = icmp slt i32 %4420, 10
  %4426 = or i1 %4424, %4425
  br i1 %4426, label %originalBB1173, label %originalBB1173alteredBB

originalBB1173:                                   ; preds = %4418, %originalBB1173alteredBB
  %4427 = load i64, i64* %29, align 8, !dbg !1756
  %4428 = load i64, i64* %20, align 8, !dbg !1756
  %4429 = icmp ult i64 %4427, %4428, !dbg !1756
  %4430 = load i32, i32* @x.17
  %4431 = load i32, i32* @y.18
  %4432 = sub i32 %4430, 1
  %4433 = mul i32 %4430, %4432
  %4434 = urem i32 %4433, 2
  %4435 = icmp eq i32 %4434, 0
  %4436 = icmp slt i32 %4431, 10
  %4437 = or i1 %4435, %4436
  br i1 %4437, label %originalBBpart21175, label %originalBB1173alteredBB

originalBBpart21175:                              ; preds = %originalBB1173
  br i1 %4429, label %4438, label %4458, !dbg !1759

4438:                                             ; preds = %originalBBpart21175
  %4439 = load i32, i32* @x.17
  %4440 = load i32, i32* @y.18
  %4441 = sub i32 %4439, 1
  %4442 = mul i32 %4439, %4441
  %4443 = urem i32 %4442, 2
  %4444 = icmp eq i32 %4443, 0
  %4445 = icmp slt i32 %4440, 10
  %4446 = or i1 %4444, %4445
  br i1 %4446, label %originalBB1177, label %originalBB1177alteredBB

originalBB1177:                                   ; preds = %4438, %originalBB1177alteredBB
  %4447 = load i8*, i8** %19, align 8, !dbg !1756
  %4448 = load i64, i64* %29, align 8, !dbg !1756
  %4449 = getelementptr inbounds i8, i8* %4447, i64 %4448, !dbg !1756
  store i8 39, i8* %4449, align 1, !dbg !1756
  %4450 = load i32, i32* @x.17
  %4451 = load i32, i32* @y.18
  %4452 = sub i32 %4450, 1
  %4453 = mul i32 %4450, %4452
  %4454 = urem i32 %4453, 2
  %4455 = icmp eq i32 %4454, 0
  %4456 = icmp slt i32 %4451, 10
  %4457 = or i1 %4455, %4456
  br i1 %4457, label %originalBBpart21179, label %originalBB1177alteredBB

originalBBpart21179:                              ; preds = %originalBB1177
  br label %4458, !dbg !1756

4458:                                             ; preds = %originalBBpart21179, %originalBBpart21175
  %4459 = load i32, i32* @x.17
  %4460 = load i32, i32* @y.18
  %4461 = sub i32 %4459, 1
  %4462 = mul i32 %4459, %4461
  %4463 = urem i32 %4462, 2
  %4464 = icmp eq i32 %4463, 0
  %4465 = icmp slt i32 %4460, 10
  %4466 = or i1 %4464, %4465
  br i1 %4466, label %originalBB1181, label %originalBB1181alteredBB

originalBB1181:                                   ; preds = %4458, %originalBB1181alteredBB
  %4467 = load i64, i64* %29, align 8, !dbg !1759
  %4468 = add i64 %4467, 1, !dbg !1759
  store i64 %4468, i64* %29, align 8, !dbg !1759
  %4469 = load i32, i32* @x.17
  %4470 = load i32, i32* @y.18
  %4471 = sub i32 %4469, 1
  %4472 = mul i32 %4469, %4471
  %4473 = urem i32 %4472, 2
  %4474 = icmp eq i32 %4473, 0
  %4475 = icmp slt i32 %4470, 10
  %4476 = or i1 %4474, %4475
  br i1 %4476, label %originalBBpart21185, label %originalBB1181alteredBB

originalBBpart21185:                              ; preds = %originalBB1181
  br label %4477, !dbg !1759

4477:                                             ; preds = %originalBBpart21185
  %4478 = load i32, i32* @x.17
  %4479 = load i32, i32* @y.18
  %4480 = sub i32 %4478, 1
  %4481 = mul i32 %4478, %4480
  %4482 = urem i32 %4481, 2
  %4483 = icmp eq i32 %4482, 0
  %4484 = icmp slt i32 %4479, 10
  %4485 = or i1 %4483, %4484
  br i1 %4485, label %originalBB1187, label %originalBB1187alteredBB

originalBB1187:                                   ; preds = %4477, %originalBB1187alteredBB
  %4486 = load i32, i32* @x.17
  %4487 = load i32, i32* @y.18
  %4488 = sub i32 %4486, 1
  %4489 = mul i32 %4486, %4488
  %4490 = urem i32 %4489, 2
  %4491 = icmp eq i32 %4490, 0
  %4492 = icmp slt i32 %4487, 10
  %4493 = or i1 %4491, %4492
  br i1 %4493, label %originalBBpart21189, label %originalBB1187alteredBB

originalBBpart21189:                              ; preds = %originalBB1187
  br label %4494, !dbg !1754

4494:                                             ; preds = %originalBBpart21189
  %4495 = load i32, i32* @x.17
  %4496 = load i32, i32* @y.18
  %4497 = sub i32 %4495, 1
  %4498 = mul i32 %4495, %4497
  %4499 = urem i32 %4498, 2
  %4500 = icmp eq i32 %4499, 0
  %4501 = icmp slt i32 %4496, 10
  %4502 = or i1 %4500, %4501
  br i1 %4502, label %originalBB1191, label %originalBB1191alteredBB

originalBB1191:                                   ; preds = %4494, %originalBB1191alteredBB
  %4503 = load i64, i64* %29, align 8, !dbg !1760
  %4504 = load i64, i64* %20, align 8, !dbg !1760
  %4505 = icmp ult i64 %4503, %4504, !dbg !1760
  %4506 = load i32, i32* @x.17
  %4507 = load i32, i32* @y.18
  %4508 = sub i32 %4506, 1
  %4509 = mul i32 %4506, %4508
  %4510 = urem i32 %4509, 2
  %4511 = icmp eq i32 %4510, 0
  %4512 = icmp slt i32 %4507, 10
  %4513 = or i1 %4511, %4512
  br i1 %4513, label %originalBBpart21193, label %originalBB1191alteredBB

originalBBpart21193:                              ; preds = %originalBB1191
  br i1 %4505, label %4514, label %4534, !dbg !1763

4514:                                             ; preds = %originalBBpart21193
  %4515 = load i32, i32* @x.17
  %4516 = load i32, i32* @y.18
  %4517 = sub i32 %4515, 1
  %4518 = mul i32 %4515, %4517
  %4519 = urem i32 %4518, 2
  %4520 = icmp eq i32 %4519, 0
  %4521 = icmp slt i32 %4516, 10
  %4522 = or i1 %4520, %4521
  br i1 %4522, label %originalBB1195, label %originalBB1195alteredBB

originalBB1195:                                   ; preds = %4514, %originalBB1195alteredBB
  %4523 = load i8*, i8** %19, align 8, !dbg !1760
  %4524 = load i64, i64* %29, align 8, !dbg !1760
  %4525 = getelementptr inbounds i8, i8* %4523, i64 %4524, !dbg !1760
  store i8 36, i8* %4525, align 1, !dbg !1760
  %4526 = load i32, i32* @x.17
  %4527 = load i32, i32* @y.18
  %4528 = sub i32 %4526, 1
  %4529 = mul i32 %4526, %4528
  %4530 = urem i32 %4529, 2
  %4531 = icmp eq i32 %4530, 0
  %4532 = icmp slt i32 %4527, 10
  %4533 = or i1 %4531, %4532
  br i1 %4533, label %originalBBpart21197, label %originalBB1195alteredBB

originalBBpart21197:                              ; preds = %originalBB1195
  br label %4534, !dbg !1760

4534:                                             ; preds = %originalBBpart21197, %originalBBpart21193
  %4535 = load i32, i32* @x.17
  %4536 = load i32, i32* @y.18
  %4537 = sub i32 %4535, 1
  %4538 = mul i32 %4535, %4537
  %4539 = urem i32 %4538, 2
  %4540 = icmp eq i32 %4539, 0
  %4541 = icmp slt i32 %4536, 10
  %4542 = or i1 %4540, %4541
  br i1 %4542, label %originalBB1199, label %originalBB1199alteredBB

originalBB1199:                                   ; preds = %4534, %originalBB1199alteredBB
  %4543 = load i64, i64* %29, align 8, !dbg !1763
  %4544 = add i64 %4543, 1, !dbg !1763
  store i64 %4544, i64* %29, align 8, !dbg !1763
  %4545 = load i32, i32* @x.17
  %4546 = load i32, i32* @y.18
  %4547 = sub i32 %4545, 1
  %4548 = mul i32 %4545, %4547
  %4549 = urem i32 %4548, 2
  %4550 = icmp eq i32 %4549, 0
  %4551 = icmp slt i32 %4546, 10
  %4552 = or i1 %4550, %4551
  br i1 %4552, label %originalBBpart21211, label %originalBB1199alteredBB

originalBBpart21211:                              ; preds = %originalBB1199
  br label %4553, !dbg !1763

4553:                                             ; preds = %originalBBpart21211
  %4554 = load i32, i32* @x.17
  %4555 = load i32, i32* @y.18
  %4556 = sub i32 %4554, 1
  %4557 = mul i32 %4554, %4556
  %4558 = urem i32 %4557, 2
  %4559 = icmp eq i32 %4558, 0
  %4560 = icmp slt i32 %4555, 10
  %4561 = or i1 %4559, %4560
  br i1 %4561, label %originalBB1213, label %originalBB1213alteredBB

originalBB1213:                                   ; preds = %4553, %originalBB1213alteredBB
  %4562 = load i32, i32* @x.17
  %4563 = load i32, i32* @y.18
  %4564 = sub i32 %4562, 1
  %4565 = mul i32 %4562, %4564
  %4566 = urem i32 %4565, 2
  %4567 = icmp eq i32 %4566, 0
  %4568 = icmp slt i32 %4563, 10
  %4569 = or i1 %4567, %4568
  br i1 %4569, label %originalBBpart21215, label %originalBB1213alteredBB

originalBBpart21215:                              ; preds = %originalBB1213
  br label %4570, !dbg !1754

4570:                                             ; preds = %originalBBpart21215
  %4571 = load i32, i32* @x.17
  %4572 = load i32, i32* @y.18
  %4573 = sub i32 %4571, 1
  %4574 = mul i32 %4571, %4573
  %4575 = urem i32 %4574, 2
  %4576 = icmp eq i32 %4575, 0
  %4577 = icmp slt i32 %4572, 10
  %4578 = or i1 %4576, %4577
  br i1 %4578, label %originalBB1217, label %originalBB1217alteredBB

originalBB1217:                                   ; preds = %4570, %originalBB1217alteredBB
  %4579 = load i64, i64* %29, align 8, !dbg !1764
  %4580 = load i64, i64* %20, align 8, !dbg !1764
  %4581 = icmp ult i64 %4579, %4580, !dbg !1764
  %4582 = load i32, i32* @x.17
  %4583 = load i32, i32* @y.18
  %4584 = sub i32 %4582, 1
  %4585 = mul i32 %4582, %4584
  %4586 = urem i32 %4585, 2
  %4587 = icmp eq i32 %4586, 0
  %4588 = icmp slt i32 %4583, 10
  %4589 = or i1 %4587, %4588
  br i1 %4589, label %originalBBpart21219, label %originalBB1217alteredBB

originalBBpart21219:                              ; preds = %originalBB1217
  br i1 %4581, label %4590, label %4610, !dbg !1767

4590:                                             ; preds = %originalBBpart21219
  %4591 = load i32, i32* @x.17
  %4592 = load i32, i32* @y.18
  %4593 = sub i32 %4591, 1
  %4594 = mul i32 %4591, %4593
  %4595 = urem i32 %4594, 2
  %4596 = icmp eq i32 %4595, 0
  %4597 = icmp slt i32 %4592, 10
  %4598 = or i1 %4596, %4597
  br i1 %4598, label %originalBB1221, label %originalBB1221alteredBB

originalBB1221:                                   ; preds = %4590, %originalBB1221alteredBB
  %4599 = load i8*, i8** %19, align 8, !dbg !1764
  %4600 = load i64, i64* %29, align 8, !dbg !1764
  %4601 = getelementptr inbounds i8, i8* %4599, i64 %4600, !dbg !1764
  store i8 39, i8* %4601, align 1, !dbg !1764
  %4602 = load i32, i32* @x.17
  %4603 = load i32, i32* @y.18
  %4604 = sub i32 %4602, 1
  %4605 = mul i32 %4602, %4604
  %4606 = urem i32 %4605, 2
  %4607 = icmp eq i32 %4606, 0
  %4608 = icmp slt i32 %4603, 10
  %4609 = or i1 %4607, %4608
  br i1 %4609, label %originalBBpart21223, label %originalBB1221alteredBB

originalBBpart21223:                              ; preds = %originalBB1221
  br label %4610, !dbg !1764

4610:                                             ; preds = %originalBBpart21223, %originalBBpart21219
  %4611 = load i32, i32* @x.17
  %4612 = load i32, i32* @y.18
  %4613 = sub i32 %4611, 1
  %4614 = mul i32 %4611, %4613
  %4615 = urem i32 %4614, 2
  %4616 = icmp eq i32 %4615, 0
  %4617 = icmp slt i32 %4612, 10
  %4618 = or i1 %4616, %4617
  br i1 %4618, label %originalBB1225, label %originalBB1225alteredBB

originalBB1225:                                   ; preds = %4610, %originalBB1225alteredBB
  %4619 = load i64, i64* %29, align 8, !dbg !1767
  %4620 = add i64 %4619, 1, !dbg !1767
  store i64 %4620, i64* %29, align 8, !dbg !1767
  %4621 = load i32, i32* @x.17
  %4622 = load i32, i32* @y.18
  %4623 = sub i32 %4621, 1
  %4624 = mul i32 %4621, %4623
  %4625 = urem i32 %4624, 2
  %4626 = icmp eq i32 %4625, 0
  %4627 = icmp slt i32 %4622, 10
  %4628 = or i1 %4626, %4627
  br i1 %4628, label %originalBBpart21229, label %originalBB1225alteredBB

originalBBpart21229:                              ; preds = %originalBB1225
  br label %4629, !dbg !1767

4629:                                             ; preds = %originalBBpart21229
  %4630 = load i32, i32* @x.17
  %4631 = load i32, i32* @y.18
  %4632 = sub i32 %4630, 1
  %4633 = mul i32 %4630, %4632
  %4634 = urem i32 %4633, 2
  %4635 = icmp eq i32 %4634, 0
  %4636 = icmp slt i32 %4631, 10
  %4637 = or i1 %4635, %4636
  br i1 %4637, label %originalBB1231, label %originalBB1231alteredBB

originalBB1231:                                   ; preds = %4629, %originalBB1231alteredBB
  store i8 1, i8* %36, align 1, !dbg !1754
  %4638 = load i32, i32* @x.17
  %4639 = load i32, i32* @y.18
  %4640 = sub i32 %4638, 1
  %4641 = mul i32 %4638, %4640
  %4642 = urem i32 %4641, 2
  %4643 = icmp eq i32 %4642, 0
  %4644 = icmp slt i32 %4639, 10
  %4645 = or i1 %4643, %4644
  br i1 %4645, label %originalBBpart21233, label %originalBB1231alteredBB

originalBBpart21233:                              ; preds = %originalBB1231
  br label %4646, !dbg !1754

4646:                                             ; preds = %originalBBpart21233, %originalBBpart21167, %originalBBpart21163
  %4647 = load i32, i32* @x.17
  %4648 = load i32, i32* @y.18
  %4649 = sub i32 %4647, 1
  %4650 = mul i32 %4647, %4649
  %4651 = urem i32 %4650, 2
  %4652 = icmp eq i32 %4651, 0
  %4653 = icmp slt i32 %4648, 10
  %4654 = or i1 %4652, %4653
  br i1 %4654, label %originalBB1235, label %originalBB1235alteredBB

originalBB1235:                                   ; preds = %4646, %originalBB1235alteredBB
  %4655 = load i32, i32* @x.17
  %4656 = load i32, i32* @y.18
  %4657 = sub i32 %4655, 1
  %4658 = mul i32 %4655, %4657
  %4659 = urem i32 %4658, 2
  %4660 = icmp eq i32 %4659, 0
  %4661 = icmp slt i32 %4656, 10
  %4662 = or i1 %4660, %4661
  br i1 %4662, label %originalBBpart21237, label %originalBB1235alteredBB

originalBBpart21237:                              ; preds = %originalBB1235
  br label %4663, !dbg !1751

4663:                                             ; preds = %originalBBpart21237
  %4664 = load i32, i32* @x.17
  %4665 = load i32, i32* @y.18
  %4666 = sub i32 %4664, 1
  %4667 = mul i32 %4664, %4666
  %4668 = urem i32 %4667, 2
  %4669 = icmp eq i32 %4668, 0
  %4670 = icmp slt i32 %4665, 10
  %4671 = or i1 %4669, %4670
  br i1 %4671, label %originalBB1239, label %originalBB1239alteredBB

originalBB1239:                                   ; preds = %4663, %originalBB1239alteredBB
  %4672 = load i64, i64* %29, align 8, !dbg !1768
  %4673 = load i64, i64* %20, align 8, !dbg !1768
  %4674 = icmp ult i64 %4672, %4673, !dbg !1768
  %4675 = load i32, i32* @x.17
  %4676 = load i32, i32* @y.18
  %4677 = sub i32 %4675, 1
  %4678 = mul i32 %4675, %4677
  %4679 = urem i32 %4678, 2
  %4680 = icmp eq i32 %4679, 0
  %4681 = icmp slt i32 %4676, 10
  %4682 = or i1 %4680, %4681
  br i1 %4682, label %originalBBpart21241, label %originalBB1239alteredBB

originalBBpart21241:                              ; preds = %originalBB1239
  br i1 %4674, label %4683, label %4703, !dbg !1771

4683:                                             ; preds = %originalBBpart21241
  %4684 = load i32, i32* @x.17
  %4685 = load i32, i32* @y.18
  %4686 = sub i32 %4684, 1
  %4687 = mul i32 %4684, %4686
  %4688 = urem i32 %4687, 2
  %4689 = icmp eq i32 %4688, 0
  %4690 = icmp slt i32 %4685, 10
  %4691 = or i1 %4689, %4690
  br i1 %4691, label %originalBB1243, label %originalBB1243alteredBB

originalBB1243:                                   ; preds = %4683, %originalBB1243alteredBB
  %4692 = load i8*, i8** %19, align 8, !dbg !1768
  %4693 = load i64, i64* %29, align 8, !dbg !1768
  %4694 = getelementptr inbounds i8, i8* %4692, i64 %4693, !dbg !1768
  store i8 92, i8* %4694, align 1, !dbg !1768
  %4695 = load i32, i32* @x.17
  %4696 = load i32, i32* @y.18
  %4697 = sub i32 %4695, 1
  %4698 = mul i32 %4695, %4697
  %4699 = urem i32 %4698, 2
  %4700 = icmp eq i32 %4699, 0
  %4701 = icmp slt i32 %4696, 10
  %4702 = or i1 %4700, %4701
  br i1 %4702, label %originalBBpart21245, label %originalBB1243alteredBB

originalBBpart21245:                              ; preds = %originalBB1243
  br label %4703, !dbg !1768

4703:                                             ; preds = %originalBBpart21245, %originalBBpart21241
  %4704 = load i32, i32* @x.17
  %4705 = load i32, i32* @y.18
  %4706 = sub i32 %4704, 1
  %4707 = mul i32 %4704, %4706
  %4708 = urem i32 %4707, 2
  %4709 = icmp eq i32 %4708, 0
  %4710 = icmp slt i32 %4705, 10
  %4711 = or i1 %4709, %4710
  br i1 %4711, label %originalBB1247, label %originalBB1247alteredBB

originalBB1247:                                   ; preds = %4703, %originalBB1247alteredBB
  %4712 = load i64, i64* %29, align 8, !dbg !1771
  %4713 = add i64 %4712, 1, !dbg !1771
  store i64 %4713, i64* %29, align 8, !dbg !1771
  %4714 = load i32, i32* @x.17
  %4715 = load i32, i32* @y.18
  %4716 = sub i32 %4714, 1
  %4717 = mul i32 %4714, %4716
  %4718 = urem i32 %4717, 2
  %4719 = icmp eq i32 %4718, 0
  %4720 = icmp slt i32 %4715, 10
  %4721 = or i1 %4719, %4720
  br i1 %4721, label %originalBBpart21258, label %originalBB1247alteredBB

originalBBpart21258:                              ; preds = %originalBB1247
  br label %4722, !dbg !1771

4722:                                             ; preds = %originalBBpart21258
  %4723 = load i32, i32* @x.17
  %4724 = load i32, i32* @y.18
  %4725 = sub i32 %4723, 1
  %4726 = mul i32 %4723, %4725
  %4727 = urem i32 %4726, 2
  %4728 = icmp eq i32 %4727, 0
  %4729 = icmp slt i32 %4724, 10
  %4730 = or i1 %4728, %4729
  br i1 %4730, label %originalBB1260, label %originalBB1260alteredBB

originalBB1260:                                   ; preds = %4722, %originalBB1260alteredBB
  %4731 = load i32, i32* @x.17
  %4732 = load i32, i32* @y.18
  %4733 = sub i32 %4731, 1
  %4734 = mul i32 %4731, %4733
  %4735 = urem i32 %4734, 2
  %4736 = icmp eq i32 %4735, 0
  %4737 = icmp slt i32 %4732, 10
  %4738 = or i1 %4736, %4737
  br i1 %4738, label %originalBBpart21262, label %originalBB1260alteredBB

originalBBpart21262:                              ; preds = %originalBB1260
  br label %4739, !dbg !1751

4739:                                             ; preds = %originalBBpart21262
  %4740 = load i32, i32* @x.17
  %4741 = load i32, i32* @y.18
  %4742 = sub i32 %4740, 1
  %4743 = mul i32 %4740, %4742
  %4744 = urem i32 %4743, 2
  %4745 = icmp eq i32 %4744, 0
  %4746 = icmp slt i32 %4741, 10
  %4747 = or i1 %4745, %4746
  br i1 %4747, label %originalBB1264, label %originalBB1264alteredBB

originalBB1264:                                   ; preds = %4739, %originalBB1264alteredBB
  %4748 = load i32, i32* @x.17
  %4749 = load i32, i32* @y.18
  %4750 = sub i32 %4748, 1
  %4751 = mul i32 %4748, %4750
  %4752 = urem i32 %4751, 2
  %4753 = icmp eq i32 %4752, 0
  %4754 = icmp slt i32 %4749, 10
  %4755 = or i1 %4753, %4754
  br i1 %4755, label %originalBBpart21266, label %originalBB1264alteredBB

originalBBpart21266:                              ; preds = %originalBB1264
  br label %4756, !dbg !1772

4756:                                             ; preds = %originalBBpart21266
  %4757 = load i32, i32* @x.17
  %4758 = load i32, i32* @y.18
  %4759 = sub i32 %4757, 1
  %4760 = mul i32 %4757, %4759
  %4761 = urem i32 %4760, 2
  %4762 = icmp eq i32 %4761, 0
  %4763 = icmp slt i32 %4758, 10
  %4764 = or i1 %4762, %4763
  br i1 %4764, label %originalBB1268, label %originalBB1268alteredBB

originalBB1268:                                   ; preds = %4756, %originalBB1268alteredBB
  %4765 = load i64, i64* %29, align 8, !dbg !1773
  %4766 = load i64, i64* %20, align 8, !dbg !1773
  %4767 = icmp ult i64 %4765, %4766, !dbg !1773
  %4768 = load i32, i32* @x.17
  %4769 = load i32, i32* @y.18
  %4770 = sub i32 %4768, 1
  %4771 = mul i32 %4768, %4770
  %4772 = urem i32 %4771, 2
  %4773 = icmp eq i32 %4772, 0
  %4774 = icmp slt i32 %4769, 10
  %4775 = or i1 %4773, %4774
  br i1 %4775, label %originalBBpart21270, label %originalBB1268alteredBB

originalBBpart21270:                              ; preds = %originalBB1268
  br i1 %4767, label %4776, label %4801, !dbg !1776

4776:                                             ; preds = %originalBBpart21270
  %4777 = load i32, i32* @x.17
  %4778 = load i32, i32* @y.18
  %4779 = sub i32 %4777, 1
  %4780 = mul i32 %4777, %4779
  %4781 = urem i32 %4780, 2
  %4782 = icmp eq i32 %4781, 0
  %4783 = icmp slt i32 %4778, 10
  %4784 = or i1 %4782, %4783
  br i1 %4784, label %originalBB1272, label %originalBB1272alteredBB

originalBB1272:                                   ; preds = %4776, %originalBB1272alteredBB
  %4785 = load i8, i8* %39, align 1, !dbg !1773
  %4786 = zext i8 %4785 to i32, !dbg !1773
  %4787 = ashr i32 %4786, 6, !dbg !1773
  %4788 = add nsw i32 48, %4787, !dbg !1773
  %4789 = trunc i32 %4788 to i8, !dbg !1773
  %4790 = load i8*, i8** %19, align 8, !dbg !1773
  %4791 = load i64, i64* %29, align 8, !dbg !1773
  %4792 = getelementptr inbounds i8, i8* %4790, i64 %4791, !dbg !1773
  store i8 %4789, i8* %4792, align 1, !dbg !1773
  %4793 = load i32, i32* @x.17
  %4794 = load i32, i32* @y.18
  %4795 = sub i32 %4793, 1
  %4796 = mul i32 %4793, %4795
  %4797 = urem i32 %4796, 2
  %4798 = icmp eq i32 %4797, 0
  %4799 = icmp slt i32 %4794, 10
  %4800 = or i1 %4798, %4799
  br i1 %4800, label %originalBBpart21285, label %originalBB1272alteredBB

originalBBpart21285:                              ; preds = %originalBB1272
  br label %4801, !dbg !1773

4801:                                             ; preds = %originalBBpart21285, %originalBBpart21270
  %4802 = load i32, i32* @x.17
  %4803 = load i32, i32* @y.18
  %4804 = sub i32 %4802, 1
  %4805 = mul i32 %4802, %4804
  %4806 = urem i32 %4805, 2
  %4807 = icmp eq i32 %4806, 0
  %4808 = icmp slt i32 %4803, 10
  %4809 = or i1 %4807, %4808
  br i1 %4809, label %originalBB1287, label %originalBB1287alteredBB

originalBB1287:                                   ; preds = %4801, %originalBB1287alteredBB
  %4810 = load i64, i64* %29, align 8, !dbg !1776
  %4811 = add i64 %4810, 1, !dbg !1776
  store i64 %4811, i64* %29, align 8, !dbg !1776
  %4812 = load i32, i32* @x.17
  %4813 = load i32, i32* @y.18
  %4814 = sub i32 %4812, 1
  %4815 = mul i32 %4812, %4814
  %4816 = urem i32 %4815, 2
  %4817 = icmp eq i32 %4816, 0
  %4818 = icmp slt i32 %4813, 10
  %4819 = or i1 %4817, %4818
  br i1 %4819, label %originalBBpart21295, label %originalBB1287alteredBB

originalBBpart21295:                              ; preds = %originalBB1287
  br label %4820, !dbg !1776

4820:                                             ; preds = %originalBBpart21295
  %4821 = load i32, i32* @x.17
  %4822 = load i32, i32* @y.18
  %4823 = sub i32 %4821, 1
  %4824 = mul i32 %4821, %4823
  %4825 = urem i32 %4824, 2
  %4826 = icmp eq i32 %4825, 0
  %4827 = icmp slt i32 %4822, 10
  %4828 = or i1 %4826, %4827
  br i1 %4828, label %originalBB1297, label %originalBB1297alteredBB

originalBB1297:                                   ; preds = %4820, %originalBB1297alteredBB
  %4829 = load i32, i32* @x.17
  %4830 = load i32, i32* @y.18
  %4831 = sub i32 %4829, 1
  %4832 = mul i32 %4829, %4831
  %4833 = urem i32 %4832, 2
  %4834 = icmp eq i32 %4833, 0
  %4835 = icmp slt i32 %4830, 10
  %4836 = or i1 %4834, %4835
  br i1 %4836, label %originalBBpart21299, label %originalBB1297alteredBB

originalBBpart21299:                              ; preds = %originalBB1297
  br label %4837, !dbg !1777

4837:                                             ; preds = %originalBBpart21299
  %4838 = load i32, i32* @x.17
  %4839 = load i32, i32* @y.18
  %4840 = sub i32 %4838, 1
  %4841 = mul i32 %4838, %4840
  %4842 = urem i32 %4841, 2
  %4843 = icmp eq i32 %4842, 0
  %4844 = icmp slt i32 %4839, 10
  %4845 = or i1 %4843, %4844
  br i1 %4845, label %originalBB1301, label %originalBB1301alteredBB

originalBB1301:                                   ; preds = %4837, %originalBB1301alteredBB
  %4846 = load i64, i64* %29, align 8, !dbg !1778
  %4847 = load i64, i64* %20, align 8, !dbg !1778
  %4848 = icmp ult i64 %4846, %4847, !dbg !1778
  %4849 = load i32, i32* @x.17
  %4850 = load i32, i32* @y.18
  %4851 = sub i32 %4849, 1
  %4852 = mul i32 %4849, %4851
  %4853 = urem i32 %4852, 2
  %4854 = icmp eq i32 %4853, 0
  %4855 = icmp slt i32 %4850, 10
  %4856 = or i1 %4854, %4855
  br i1 %4856, label %originalBBpart21303, label %originalBB1301alteredBB

originalBBpart21303:                              ; preds = %originalBB1301
  br i1 %4848, label %4857, label %4883, !dbg !1781

4857:                                             ; preds = %originalBBpart21303
  %4858 = load i32, i32* @x.17
  %4859 = load i32, i32* @y.18
  %4860 = sub i32 %4858, 1
  %4861 = mul i32 %4858, %4860
  %4862 = urem i32 %4861, 2
  %4863 = icmp eq i32 %4862, 0
  %4864 = icmp slt i32 %4859, 10
  %4865 = or i1 %4863, %4864
  br i1 %4865, label %originalBB1305, label %originalBB1305alteredBB

originalBB1305:                                   ; preds = %4857, %originalBB1305alteredBB
  %4866 = load i8, i8* %39, align 1, !dbg !1778
  %4867 = zext i8 %4866 to i32, !dbg !1778
  %4868 = ashr i32 %4867, 3, !dbg !1778
  %4869 = and i32 %4868, 7, !dbg !1778
  %4870 = add nsw i32 48, %4869, !dbg !1778
  %4871 = trunc i32 %4870 to i8, !dbg !1778
  %4872 = load i8*, i8** %19, align 8, !dbg !1778
  %4873 = load i64, i64* %29, align 8, !dbg !1778
  %4874 = getelementptr inbounds i8, i8* %4872, i64 %4873, !dbg !1778
  store i8 %4871, i8* %4874, align 1, !dbg !1778
  %4875 = load i32, i32* @x.17
  %4876 = load i32, i32* @y.18
  %4877 = sub i32 %4875, 1
  %4878 = mul i32 %4875, %4877
  %4879 = urem i32 %4878, 2
  %4880 = icmp eq i32 %4879, 0
  %4881 = icmp slt i32 %4876, 10
  %4882 = or i1 %4880, %4881
  br i1 %4882, label %originalBBpart21343, label %originalBB1305alteredBB

originalBBpart21343:                              ; preds = %originalBB1305
  br label %4883, !dbg !1778

4883:                                             ; preds = %originalBBpart21343, %originalBBpart21303
  %4884 = load i32, i32* @x.17
  %4885 = load i32, i32* @y.18
  %4886 = sub i32 %4884, 1
  %4887 = mul i32 %4884, %4886
  %4888 = urem i32 %4887, 2
  %4889 = icmp eq i32 %4888, 0
  %4890 = icmp slt i32 %4885, 10
  %4891 = or i1 %4889, %4890
  br i1 %4891, label %originalBB1345, label %originalBB1345alteredBB

originalBB1345:                                   ; preds = %4883, %originalBB1345alteredBB
  %4892 = load i64, i64* %29, align 8, !dbg !1781
  %4893 = add i64 %4892, 1, !dbg !1781
  store i64 %4893, i64* %29, align 8, !dbg !1781
  %4894 = load i32, i32* @x.17
  %4895 = load i32, i32* @y.18
  %4896 = sub i32 %4894, 1
  %4897 = mul i32 %4894, %4896
  %4898 = urem i32 %4897, 2
  %4899 = icmp eq i32 %4898, 0
  %4900 = icmp slt i32 %4895, 10
  %4901 = or i1 %4899, %4900
  br i1 %4901, label %originalBBpart21356, label %originalBB1345alteredBB

originalBBpart21356:                              ; preds = %originalBB1345
  br label %4902, !dbg !1781

4902:                                             ; preds = %originalBBpart21356
  %4903 = load i32, i32* @x.17
  %4904 = load i32, i32* @y.18
  %4905 = sub i32 %4903, 1
  %4906 = mul i32 %4903, %4905
  %4907 = urem i32 %4906, 2
  %4908 = icmp eq i32 %4907, 0
  %4909 = icmp slt i32 %4904, 10
  %4910 = or i1 %4908, %4909
  br i1 %4910, label %originalBB1358, label %originalBB1358alteredBB

originalBB1358:                                   ; preds = %4902, %originalBB1358alteredBB
  %4911 = load i8, i8* %39, align 1, !dbg !1782
  %4912 = zext i8 %4911 to i32, !dbg !1782
  %4913 = and i32 %4912, 7, !dbg !1783
  %4914 = add nsw i32 48, %4913, !dbg !1784
  %4915 = trunc i32 %4914 to i8, !dbg !1785
  store i8 %4915, i8* %39, align 1, !dbg !1786
  %4916 = load i32, i32* @x.17
  %4917 = load i32, i32* @y.18
  %4918 = sub i32 %4916, 1
  %4919 = mul i32 %4916, %4918
  %4920 = urem i32 %4919, 2
  %4921 = icmp eq i32 %4920, 0
  %4922 = icmp slt i32 %4917, 10
  %4923 = or i1 %4921, %4922
  br i1 %4923, label %originalBBpart21379, label %originalBB1358alteredBB

originalBBpart21379:                              ; preds = %originalBB1358
  br label %5053, !dbg !1787

4924:                                             ; preds = %originalBBpart21147, %originalBBpart21143
  %4925 = load i32, i32* @x.17
  %4926 = load i32, i32* @y.18
  %4927 = sub i32 %4925, 1
  %4928 = mul i32 %4925, %4927
  %4929 = urem i32 %4928, 2
  %4930 = icmp eq i32 %4929, 0
  %4931 = icmp slt i32 %4926, 10
  %4932 = or i1 %4930, %4931
  br i1 %4932, label %originalBB1381, label %originalBB1381alteredBB

originalBB1381:                                   ; preds = %4924, %originalBB1381alteredBB
  %4933 = load i8, i8* %41, align 1, !dbg !1788
  %4934 = trunc i8 %4933 to i1, !dbg !1788
  %4935 = load i32, i32* @x.17
  %4936 = load i32, i32* @y.18
  %4937 = sub i32 %4935, 1
  %4938 = mul i32 %4935, %4937
  %4939 = urem i32 %4938, 2
  %4940 = icmp eq i32 %4939, 0
  %4941 = icmp slt i32 %4936, 10
  %4942 = or i1 %4940, %4941
  br i1 %4942, label %originalBBpart21383, label %originalBB1381alteredBB

originalBBpart21383:                              ; preds = %originalBB1381
  br i1 %4934, label %4943, label %5036, !dbg !1790

4943:                                             ; preds = %originalBBpart21383
  %4944 = load i32, i32* @x.17
  %4945 = load i32, i32* @y.18
  %4946 = sub i32 %4944, 1
  %4947 = mul i32 %4944, %4946
  %4948 = urem i32 %4947, 2
  %4949 = icmp eq i32 %4948, 0
  %4950 = icmp slt i32 %4945, 10
  %4951 = or i1 %4949, %4950
  br i1 %4951, label %originalBB1385, label %originalBB1385alteredBB

originalBB1385:                                   ; preds = %4943, %originalBB1385alteredBB
  %4952 = load i32, i32* @x.17
  %4953 = load i32, i32* @y.18
  %4954 = sub i32 %4952, 1
  %4955 = mul i32 %4952, %4954
  %4956 = urem i32 %4955, 2
  %4957 = icmp eq i32 %4956, 0
  %4958 = icmp slt i32 %4953, 10
  %4959 = or i1 %4957, %4958
  br i1 %4959, label %originalBBpart21387, label %originalBB1385alteredBB

originalBBpart21387:                              ; preds = %originalBB1385
  br label %4960, !dbg !1791

4960:                                             ; preds = %originalBBpart21387
  %4961 = load i32, i32* @x.17
  %4962 = load i32, i32* @y.18
  %4963 = sub i32 %4961, 1
  %4964 = mul i32 %4961, %4963
  %4965 = urem i32 %4964, 2
  %4966 = icmp eq i32 %4965, 0
  %4967 = icmp slt i32 %4962, 10
  %4968 = or i1 %4966, %4967
  br i1 %4968, label %originalBB1389, label %originalBB1389alteredBB

originalBB1389:                                   ; preds = %4960, %originalBB1389alteredBB
  %4969 = load i64, i64* %29, align 8, !dbg !1793
  %4970 = load i64, i64* %20, align 8, !dbg !1793
  %4971 = icmp ult i64 %4969, %4970, !dbg !1793
  %4972 = load i32, i32* @x.17
  %4973 = load i32, i32* @y.18
  %4974 = sub i32 %4972, 1
  %4975 = mul i32 %4972, %4974
  %4976 = urem i32 %4975, 2
  %4977 = icmp eq i32 %4976, 0
  %4978 = icmp slt i32 %4973, 10
  %4979 = or i1 %4977, %4978
  br i1 %4979, label %originalBBpart21391, label %originalBB1389alteredBB

originalBBpart21391:                              ; preds = %originalBB1389
  br i1 %4971, label %4980, label %5000, !dbg !1796

4980:                                             ; preds = %originalBBpart21391
  %4981 = load i32, i32* @x.17
  %4982 = load i32, i32* @y.18
  %4983 = sub i32 %4981, 1
  %4984 = mul i32 %4981, %4983
  %4985 = urem i32 %4984, 2
  %4986 = icmp eq i32 %4985, 0
  %4987 = icmp slt i32 %4982, 10
  %4988 = or i1 %4986, %4987
  br i1 %4988, label %originalBB1393, label %originalBB1393alteredBB

originalBB1393:                                   ; preds = %4980, %originalBB1393alteredBB
  %4989 = load i8*, i8** %19, align 8, !dbg !1793
  %4990 = load i64, i64* %29, align 8, !dbg !1793
  %4991 = getelementptr inbounds i8, i8* %4989, i64 %4990, !dbg !1793
  store i8 92, i8* %4991, align 1, !dbg !1793
  %4992 = load i32, i32* @x.17
  %4993 = load i32, i32* @y.18
  %4994 = sub i32 %4992, 1
  %4995 = mul i32 %4992, %4994
  %4996 = urem i32 %4995, 2
  %4997 = icmp eq i32 %4996, 0
  %4998 = icmp slt i32 %4993, 10
  %4999 = or i1 %4997, %4998
  br i1 %4999, label %originalBBpart21395, label %originalBB1393alteredBB

originalBBpart21395:                              ; preds = %originalBB1393
  br label %5000, !dbg !1793

5000:                                             ; preds = %originalBBpart21395, %originalBBpart21391
  %5001 = load i32, i32* @x.17
  %5002 = load i32, i32* @y.18
  %5003 = sub i32 %5001, 1
  %5004 = mul i32 %5001, %5003
  %5005 = urem i32 %5004, 2
  %5006 = icmp eq i32 %5005, 0
  %5007 = icmp slt i32 %5002, 10
  %5008 = or i1 %5006, %5007
  br i1 %5008, label %originalBB1397, label %originalBB1397alteredBB

originalBB1397:                                   ; preds = %5000, %originalBB1397alteredBB
  %5009 = load i64, i64* %29, align 8, !dbg !1796
  %5010 = add i64 %5009, 1, !dbg !1796
  store i64 %5010, i64* %29, align 8, !dbg !1796
  %5011 = load i32, i32* @x.17
  %5012 = load i32, i32* @y.18
  %5013 = sub i32 %5011, 1
  %5014 = mul i32 %5011, %5013
  %5015 = urem i32 %5014, 2
  %5016 = icmp eq i32 %5015, 0
  %5017 = icmp slt i32 %5012, 10
  %5018 = or i1 %5016, %5017
  br i1 %5018, label %originalBBpart21408, label %originalBB1397alteredBB

originalBBpart21408:                              ; preds = %originalBB1397
  br label %5019, !dbg !1796

5019:                                             ; preds = %originalBBpart21408
  %5020 = load i32, i32* @x.17
  %5021 = load i32, i32* @y.18
  %5022 = sub i32 %5020, 1
  %5023 = mul i32 %5020, %5022
  %5024 = urem i32 %5023, 2
  %5025 = icmp eq i32 %5024, 0
  %5026 = icmp slt i32 %5021, 10
  %5027 = or i1 %5025, %5026
  br i1 %5027, label %originalBB1410, label %originalBB1410alteredBB

originalBB1410:                                   ; preds = %5019, %originalBB1410alteredBB
  store i8 0, i8* %41, align 1, !dbg !1797
  %5028 = load i32, i32* @x.17
  %5029 = load i32, i32* @y.18
  %5030 = sub i32 %5028, 1
  %5031 = mul i32 %5028, %5030
  %5032 = urem i32 %5031, 2
  %5033 = icmp eq i32 %5032, 0
  %5034 = icmp slt i32 %5029, 10
  %5035 = or i1 %5033, %5034
  br i1 %5035, label %originalBBpart21412, label %originalBB1410alteredBB

originalBBpart21412:                              ; preds = %originalBB1410
  br label %5036, !dbg !1798

5036:                                             ; preds = %originalBBpart21412, %originalBBpart21383
  %5037 = load i32, i32* @x.17
  %5038 = load i32, i32* @y.18
  %5039 = sub i32 %5037, 1
  %5040 = mul i32 %5037, %5039
  %5041 = urem i32 %5040, 2
  %5042 = icmp eq i32 %5041, 0
  %5043 = icmp slt i32 %5038, 10
  %5044 = or i1 %5042, %5043
  br i1 %5044, label %originalBB1414, label %originalBB1414alteredBB

originalBB1414:                                   ; preds = %5036, %originalBB1414alteredBB
  %5045 = load i32, i32* @x.17
  %5046 = load i32, i32* @y.18
  %5047 = sub i32 %5045, 1
  %5048 = mul i32 %5045, %5047
  %5049 = urem i32 %5048, 2
  %5050 = icmp eq i32 %5049, 0
  %5051 = icmp slt i32 %5046, 10
  %5052 = or i1 %5050, %5051
  br i1 %5052, label %originalBBpart21416, label %originalBB1414alteredBB

originalBBpart21416:                              ; preds = %originalBB1414
  br label %5053

5053:                                             ; preds = %originalBBpart21416, %originalBBpart21379
  %5054 = load i32, i32* @x.17
  %5055 = load i32, i32* @y.18
  %5056 = sub i32 %5054, 1
  %5057 = mul i32 %5054, %5056
  %5058 = urem i32 %5057, 2
  %5059 = icmp eq i32 %5058, 0
  %5060 = icmp slt i32 %5055, 10
  %5061 = or i1 %5059, %5060
  br i1 %5061, label %originalBB1418, label %originalBB1418alteredBB

originalBB1418:                                   ; preds = %5053, %originalBB1418alteredBB
  %5062 = load i64, i64* %50, align 8, !dbg !1799
  %5063 = load i64, i64* %28, align 8, !dbg !1801
  %5064 = add i64 %5063, 1, !dbg !1802
  %5065 = icmp ule i64 %5062, %5064, !dbg !1803
  %5066 = load i32, i32* @x.17
  %5067 = load i32, i32* @y.18
  %5068 = sub i32 %5066, 1
  %5069 = mul i32 %5066, %5068
  %5070 = urem i32 %5069, 2
  %5071 = icmp eq i32 %5070, 0
  %5072 = icmp slt i32 %5067, 10
  %5073 = or i1 %5071, %5072
  br i1 %5073, label %originalBBpart21430, label %originalBB1418alteredBB

originalBBpart21430:                              ; preds = %originalBB1418
  br i1 %5065, label %5074, label %5091, !dbg !1804

5074:                                             ; preds = %originalBBpart21430
  %5075 = load i32, i32* @x.17
  %5076 = load i32, i32* @y.18
  %5077 = sub i32 %5075, 1
  %5078 = mul i32 %5075, %5077
  %5079 = urem i32 %5078, 2
  %5080 = icmp eq i32 %5079, 0
  %5081 = icmp slt i32 %5076, 10
  %5082 = or i1 %5080, %5081
  br i1 %5082, label %originalBB1432, label %originalBB1432alteredBB

originalBB1432:                                   ; preds = %5074, %originalBB1432alteredBB
  %5083 = load i32, i32* @x.17
  %5084 = load i32, i32* @y.18
  %5085 = sub i32 %5083, 1
  %5086 = mul i32 %5083, %5085
  %5087 = urem i32 %5086, 2
  %5088 = icmp eq i32 %5087, 0
  %5089 = icmp slt i32 %5084, 10
  %5090 = or i1 %5088, %5089
  br i1 %5090, label %originalBBpart21434, label %originalBB1432alteredBB

originalBBpart21434:                              ; preds = %originalBB1432
  br label %5431, !dbg !1805

5091:                                             ; preds = %originalBBpart21430
  %5092 = load i32, i32* @x.17
  %5093 = load i32, i32* @y.18
  %5094 = sub i32 %5092, 1
  %5095 = mul i32 %5092, %5094
  %5096 = urem i32 %5095, 2
  %5097 = icmp eq i32 %5096, 0
  %5098 = icmp slt i32 %5093, 10
  %5099 = or i1 %5097, %5098
  br i1 %5099, label %originalBB1436, label %originalBB1436alteredBB

originalBB1436:                                   ; preds = %5091, %originalBB1436alteredBB
  %5100 = load i32, i32* @x.17
  %5101 = load i32, i32* @y.18
  %5102 = sub i32 %5100, 1
  %5103 = mul i32 %5100, %5102
  %5104 = urem i32 %5103, 2
  %5105 = icmp eq i32 %5104, 0
  %5106 = icmp slt i32 %5101, 10
  %5107 = or i1 %5105, %5106
  br i1 %5107, label %originalBBpart21438, label %originalBB1436alteredBB

originalBBpart21438:                              ; preds = %originalBB1436
  br label %5108, !dbg !1806

5108:                                             ; preds = %originalBBpart21438
  %5109 = load i32, i32* @x.17
  %5110 = load i32, i32* @y.18
  %5111 = sub i32 %5109, 1
  %5112 = mul i32 %5109, %5111
  %5113 = urem i32 %5112, 2
  %5114 = icmp eq i32 %5113, 0
  %5115 = icmp slt i32 %5110, 10
  %5116 = or i1 %5114, %5115
  br i1 %5116, label %originalBB1440, label %originalBB1440alteredBB

originalBB1440:                                   ; preds = %5108, %originalBB1440alteredBB
  %5117 = load i8, i8* %36, align 1, !dbg !1807
  %5118 = trunc i8 %5117 to i1, !dbg !1807
  %5119 = load i32, i32* @x.17
  %5120 = load i32, i32* @y.18
  %5121 = sub i32 %5119, 1
  %5122 = mul i32 %5119, %5121
  %5123 = urem i32 %5122, 2
  %5124 = icmp eq i32 %5123, 0
  %5125 = icmp slt i32 %5120, 10
  %5126 = or i1 %5124, %5125
  br i1 %5126, label %originalBBpart21442, label %originalBB1440alteredBB

originalBBpart21442:                              ; preds = %originalBB1440
  br i1 %5118, label %5127, label %5315, !dbg !1807

5127:                                             ; preds = %originalBBpart21442
  %5128 = load i32, i32* @x.17
  %5129 = load i32, i32* @y.18
  %5130 = sub i32 %5128, 1
  %5131 = mul i32 %5128, %5130
  %5132 = urem i32 %5131, 2
  %5133 = icmp eq i32 %5132, 0
  %5134 = icmp slt i32 %5129, 10
  %5135 = or i1 %5133, %5134
  br i1 %5135, label %originalBB1444, label %originalBB1444alteredBB

originalBB1444:                                   ; preds = %5127, %originalBB1444alteredBB
  %5136 = load i8, i8* %42, align 1, !dbg !1807
  %5137 = trunc i8 %5136 to i1, !dbg !1807
  %5138 = load i32, i32* @x.17
  %5139 = load i32, i32* @y.18
  %5140 = sub i32 %5138, 1
  %5141 = mul i32 %5138, %5140
  %5142 = urem i32 %5141, 2
  %5143 = icmp eq i32 %5142, 0
  %5144 = icmp slt i32 %5139, 10
  %5145 = or i1 %5143, %5144
  br i1 %5145, label %originalBBpart21446, label %originalBB1444alteredBB

originalBBpart21446:                              ; preds = %originalBB1444
  br i1 %5137, label %5315, label %5146, !dbg !1810

5146:                                             ; preds = %originalBBpart21446
  %5147 = load i32, i32* @x.17
  %5148 = load i32, i32* @y.18
  %5149 = sub i32 %5147, 1
  %5150 = mul i32 %5147, %5149
  %5151 = urem i32 %5150, 2
  %5152 = icmp eq i32 %5151, 0
  %5153 = icmp slt i32 %5148, 10
  %5154 = or i1 %5152, %5153
  br i1 %5154, label %originalBB1448, label %originalBB1448alteredBB

originalBB1448:                                   ; preds = %5146, %originalBB1448alteredBB
  %5155 = load i32, i32* @x.17
  %5156 = load i32, i32* @y.18
  %5157 = sub i32 %5155, 1
  %5158 = mul i32 %5155, %5157
  %5159 = urem i32 %5158, 2
  %5160 = icmp eq i32 %5159, 0
  %5161 = icmp slt i32 %5156, 10
  %5162 = or i1 %5160, %5161
  br i1 %5162, label %originalBBpart21450, label %originalBB1448alteredBB

originalBBpart21450:                              ; preds = %originalBB1448
  br label %5163, !dbg !1811

5163:                                             ; preds = %originalBBpart21450
  %5164 = load i32, i32* @x.17
  %5165 = load i32, i32* @y.18
  %5166 = sub i32 %5164, 1
  %5167 = mul i32 %5164, %5166
  %5168 = urem i32 %5167, 2
  %5169 = icmp eq i32 %5168, 0
  %5170 = icmp slt i32 %5165, 10
  %5171 = or i1 %5169, %5170
  br i1 %5171, label %originalBB1452, label %originalBB1452alteredBB

originalBB1452:                                   ; preds = %5163, %originalBB1452alteredBB
  %5172 = load i64, i64* %29, align 8, !dbg !1813
  %5173 = load i64, i64* %20, align 8, !dbg !1813
  %5174 = icmp ult i64 %5172, %5173, !dbg !1813
  %5175 = load i32, i32* @x.17
  %5176 = load i32, i32* @y.18
  %5177 = sub i32 %5175, 1
  %5178 = mul i32 %5175, %5177
  %5179 = urem i32 %5178, 2
  %5180 = icmp eq i32 %5179, 0
  %5181 = icmp slt i32 %5176, 10
  %5182 = or i1 %5180, %5181
  br i1 %5182, label %originalBBpart21454, label %originalBB1452alteredBB

originalBBpart21454:                              ; preds = %originalBB1452
  br i1 %5174, label %5183, label %5203, !dbg !1816

5183:                                             ; preds = %originalBBpart21454
  %5184 = load i32, i32* @x.17
  %5185 = load i32, i32* @y.18
  %5186 = sub i32 %5184, 1
  %5187 = mul i32 %5184, %5186
  %5188 = urem i32 %5187, 2
  %5189 = icmp eq i32 %5188, 0
  %5190 = icmp slt i32 %5185, 10
  %5191 = or i1 %5189, %5190
  br i1 %5191, label %originalBB1456, label %originalBB1456alteredBB

originalBB1456:                                   ; preds = %5183, %originalBB1456alteredBB
  %5192 = load i8*, i8** %19, align 8, !dbg !1813
  %5193 = load i64, i64* %29, align 8, !dbg !1813
  %5194 = getelementptr inbounds i8, i8* %5192, i64 %5193, !dbg !1813
  store i8 39, i8* %5194, align 1, !dbg !1813
  %5195 = load i32, i32* @x.17
  %5196 = load i32, i32* @y.18
  %5197 = sub i32 %5195, 1
  %5198 = mul i32 %5195, %5197
  %5199 = urem i32 %5198, 2
  %5200 = icmp eq i32 %5199, 0
  %5201 = icmp slt i32 %5196, 10
  %5202 = or i1 %5200, %5201
  br i1 %5202, label %originalBBpart21458, label %originalBB1456alteredBB

originalBBpart21458:                              ; preds = %originalBB1456
  br label %5203, !dbg !1813

5203:                                             ; preds = %originalBBpart21458, %originalBBpart21454
  %5204 = load i32, i32* @x.17
  %5205 = load i32, i32* @y.18
  %5206 = sub i32 %5204, 1
  %5207 = mul i32 %5204, %5206
  %5208 = urem i32 %5207, 2
  %5209 = icmp eq i32 %5208, 0
  %5210 = icmp slt i32 %5205, 10
  %5211 = or i1 %5209, %5210
  br i1 %5211, label %originalBB1460, label %originalBB1460alteredBB

originalBB1460:                                   ; preds = %5203, %originalBB1460alteredBB
  %5212 = load i64, i64* %29, align 8, !dbg !1816
  %5213 = add i64 %5212, 1, !dbg !1816
  store i64 %5213, i64* %29, align 8, !dbg !1816
  %5214 = load i32, i32* @x.17
  %5215 = load i32, i32* @y.18
  %5216 = sub i32 %5214, 1
  %5217 = mul i32 %5214, %5216
  %5218 = urem i32 %5217, 2
  %5219 = icmp eq i32 %5218, 0
  %5220 = icmp slt i32 %5215, 10
  %5221 = or i1 %5219, %5220
  br i1 %5221, label %originalBBpart21478, label %originalBB1460alteredBB

originalBBpart21478:                              ; preds = %originalBB1460
  br label %5222, !dbg !1816

5222:                                             ; preds = %originalBBpart21478
  %5223 = load i32, i32* @x.17
  %5224 = load i32, i32* @y.18
  %5225 = sub i32 %5223, 1
  %5226 = mul i32 %5223, %5225
  %5227 = urem i32 %5226, 2
  %5228 = icmp eq i32 %5227, 0
  %5229 = icmp slt i32 %5224, 10
  %5230 = or i1 %5228, %5229
  br i1 %5230, label %originalBB1480, label %originalBB1480alteredBB

originalBB1480:                                   ; preds = %5222, %originalBB1480alteredBB
  %5231 = load i32, i32* @x.17
  %5232 = load i32, i32* @y.18
  %5233 = sub i32 %5231, 1
  %5234 = mul i32 %5231, %5233
  %5235 = urem i32 %5234, 2
  %5236 = icmp eq i32 %5235, 0
  %5237 = icmp slt i32 %5232, 10
  %5238 = or i1 %5236, %5237
  br i1 %5238, label %originalBBpart21482, label %originalBB1480alteredBB

originalBBpart21482:                              ; preds = %originalBB1480
  br label %5239, !dbg !1811

5239:                                             ; preds = %originalBBpart21482
  %5240 = load i32, i32* @x.17
  %5241 = load i32, i32* @y.18
  %5242 = sub i32 %5240, 1
  %5243 = mul i32 %5240, %5242
  %5244 = urem i32 %5243, 2
  %5245 = icmp eq i32 %5244, 0
  %5246 = icmp slt i32 %5241, 10
  %5247 = or i1 %5245, %5246
  br i1 %5247, label %originalBB1484, label %originalBB1484alteredBB

originalBB1484:                                   ; preds = %5239, %originalBB1484alteredBB
  %5248 = load i64, i64* %29, align 8, !dbg !1817
  %5249 = load i64, i64* %20, align 8, !dbg !1817
  %5250 = icmp ult i64 %5248, %5249, !dbg !1817
  %5251 = load i32, i32* @x.17
  %5252 = load i32, i32* @y.18
  %5253 = sub i32 %5251, 1
  %5254 = mul i32 %5251, %5253
  %5255 = urem i32 %5254, 2
  %5256 = icmp eq i32 %5255, 0
  %5257 = icmp slt i32 %5252, 10
  %5258 = or i1 %5256, %5257
  br i1 %5258, label %originalBBpart21486, label %originalBB1484alteredBB

originalBBpart21486:                              ; preds = %originalBB1484
  br i1 %5250, label %5259, label %5279, !dbg !1820

5259:                                             ; preds = %originalBBpart21486
  %5260 = load i32, i32* @x.17
  %5261 = load i32, i32* @y.18
  %5262 = sub i32 %5260, 1
  %5263 = mul i32 %5260, %5262
  %5264 = urem i32 %5263, 2
  %5265 = icmp eq i32 %5264, 0
  %5266 = icmp slt i32 %5261, 10
  %5267 = or i1 %5265, %5266
  br i1 %5267, label %originalBB1488, label %originalBB1488alteredBB

originalBB1488:                                   ; preds = %5259, %originalBB1488alteredBB
  %5268 = load i8*, i8** %19, align 8, !dbg !1817
  %5269 = load i64, i64* %29, align 8, !dbg !1817
  %5270 = getelementptr inbounds i8, i8* %5268, i64 %5269, !dbg !1817
  store i8 39, i8* %5270, align 1, !dbg !1817
  %5271 = load i32, i32* @x.17
  %5272 = load i32, i32* @y.18
  %5273 = sub i32 %5271, 1
  %5274 = mul i32 %5271, %5273
  %5275 = urem i32 %5274, 2
  %5276 = icmp eq i32 %5275, 0
  %5277 = icmp slt i32 %5272, 10
  %5278 = or i1 %5276, %5277
  br i1 %5278, label %originalBBpart21490, label %originalBB1488alteredBB

originalBBpart21490:                              ; preds = %originalBB1488
  br label %5279, !dbg !1817

5279:                                             ; preds = %originalBBpart21490, %originalBBpart21486
  %5280 = load i32, i32* @x.17
  %5281 = load i32, i32* @y.18
  %5282 = sub i32 %5280, 1
  %5283 = mul i32 %5280, %5282
  %5284 = urem i32 %5283, 2
  %5285 = icmp eq i32 %5284, 0
  %5286 = icmp slt i32 %5281, 10
  %5287 = or i1 %5285, %5286
  br i1 %5287, label %originalBB1492, label %originalBB1492alteredBB

originalBB1492:                                   ; preds = %5279, %originalBB1492alteredBB
  %5288 = load i64, i64* %29, align 8, !dbg !1820
  %5289 = add i64 %5288, 1, !dbg !1820
  store i64 %5289, i64* %29, align 8, !dbg !1820
  %5290 = load i32, i32* @x.17
  %5291 = load i32, i32* @y.18
  %5292 = sub i32 %5290, 1
  %5293 = mul i32 %5290, %5292
  %5294 = urem i32 %5293, 2
  %5295 = icmp eq i32 %5294, 0
  %5296 = icmp slt i32 %5291, 10
  %5297 = or i1 %5295, %5296
  br i1 %5297, label %originalBBpart21504, label %originalBB1492alteredBB

originalBBpart21504:                              ; preds = %originalBB1492
  br label %5298, !dbg !1820

5298:                                             ; preds = %originalBBpart21504
  %5299 = load i32, i32* @x.17
  %5300 = load i32, i32* @y.18
  %5301 = sub i32 %5299, 1
  %5302 = mul i32 %5299, %5301
  %5303 = urem i32 %5302, 2
  %5304 = icmp eq i32 %5303, 0
  %5305 = icmp slt i32 %5300, 10
  %5306 = or i1 %5304, %5305
  br i1 %5306, label %originalBB1506, label %originalBB1506alteredBB

originalBB1506:                                   ; preds = %5298, %originalBB1506alteredBB
  store i8 0, i8* %36, align 1, !dbg !1811
  %5307 = load i32, i32* @x.17
  %5308 = load i32, i32* @y.18
  %5309 = sub i32 %5307, 1
  %5310 = mul i32 %5307, %5309
  %5311 = urem i32 %5310, 2
  %5312 = icmp eq i32 %5311, 0
  %5313 = icmp slt i32 %5308, 10
  %5314 = or i1 %5312, %5313
  br i1 %5314, label %originalBBpart21508, label %originalBB1506alteredBB

originalBBpart21508:                              ; preds = %originalBB1506
  br label %5315, !dbg !1811

5315:                                             ; preds = %originalBBpart21508, %originalBBpart21446, %originalBBpart21442
  %5316 = load i32, i32* @x.17
  %5317 = load i32, i32* @y.18
  %5318 = sub i32 %5316, 1
  %5319 = mul i32 %5316, %5318
  %5320 = urem i32 %5319, 2
  %5321 = icmp eq i32 %5320, 0
  %5322 = icmp slt i32 %5317, 10
  %5323 = or i1 %5321, %5322
  br i1 %5323, label %originalBB1510, label %originalBB1510alteredBB

originalBB1510:                                   ; preds = %5315, %originalBB1510alteredBB
  %5324 = load i32, i32* @x.17
  %5325 = load i32, i32* @y.18
  %5326 = sub i32 %5324, 1
  %5327 = mul i32 %5324, %5326
  %5328 = urem i32 %5327, 2
  %5329 = icmp eq i32 %5328, 0
  %5330 = icmp slt i32 %5325, 10
  %5331 = or i1 %5329, %5330
  br i1 %5331, label %originalBBpart21512, label %originalBB1510alteredBB

originalBBpart21512:                              ; preds = %originalBB1510
  br label %5332, !dbg !1810

5332:                                             ; preds = %originalBBpart21512
  %5333 = load i32, i32* @x.17
  %5334 = load i32, i32* @y.18
  %5335 = sub i32 %5333, 1
  %5336 = mul i32 %5333, %5335
  %5337 = urem i32 %5336, 2
  %5338 = icmp eq i32 %5337, 0
  %5339 = icmp slt i32 %5334, 10
  %5340 = or i1 %5338, %5339
  br i1 %5340, label %originalBB1514, label %originalBB1514alteredBB

originalBB1514:                                   ; preds = %5332, %originalBB1514alteredBB
  %5341 = load i32, i32* @x.17
  %5342 = load i32, i32* @y.18
  %5343 = sub i32 %5341, 1
  %5344 = mul i32 %5341, %5343
  %5345 = urem i32 %5344, 2
  %5346 = icmp eq i32 %5345, 0
  %5347 = icmp slt i32 %5342, 10
  %5348 = or i1 %5346, %5347
  br i1 %5348, label %originalBBpart21516, label %originalBB1514alteredBB

originalBBpart21516:                              ; preds = %originalBB1514
  br label %5349, !dbg !1821

5349:                                             ; preds = %originalBBpart21516
  %5350 = load i32, i32* @x.17
  %5351 = load i32, i32* @y.18
  %5352 = sub i32 %5350, 1
  %5353 = mul i32 %5350, %5352
  %5354 = urem i32 %5353, 2
  %5355 = icmp eq i32 %5354, 0
  %5356 = icmp slt i32 %5351, 10
  %5357 = or i1 %5355, %5356
  br i1 %5357, label %originalBB1518, label %originalBB1518alteredBB

originalBB1518:                                   ; preds = %5349, %originalBB1518alteredBB
  %5358 = load i64, i64* %29, align 8, !dbg !1822
  %5359 = load i64, i64* %20, align 8, !dbg !1822
  %5360 = icmp ult i64 %5358, %5359, !dbg !1822
  %5361 = load i32, i32* @x.17
  %5362 = load i32, i32* @y.18
  %5363 = sub i32 %5361, 1
  %5364 = mul i32 %5361, %5363
  %5365 = urem i32 %5364, 2
  %5366 = icmp eq i32 %5365, 0
  %5367 = icmp slt i32 %5362, 10
  %5368 = or i1 %5366, %5367
  br i1 %5368, label %originalBBpart21520, label %originalBB1518alteredBB

originalBBpart21520:                              ; preds = %originalBB1518
  br i1 %5360, label %5369, label %5390, !dbg !1825

5369:                                             ; preds = %originalBBpart21520
  %5370 = load i32, i32* @x.17
  %5371 = load i32, i32* @y.18
  %5372 = sub i32 %5370, 1
  %5373 = mul i32 %5370, %5372
  %5374 = urem i32 %5373, 2
  %5375 = icmp eq i32 %5374, 0
  %5376 = icmp slt i32 %5371, 10
  %5377 = or i1 %5375, %5376
  br i1 %5377, label %originalBB1522, label %originalBB1522alteredBB

originalBB1522:                                   ; preds = %5369, %originalBB1522alteredBB
  %5378 = load i8, i8* %39, align 1, !dbg !1822
  %5379 = load i8*, i8** %19, align 8, !dbg !1822
  %5380 = load i64, i64* %29, align 8, !dbg !1822
  %5381 = getelementptr inbounds i8, i8* %5379, i64 %5380, !dbg !1822
  store i8 %5378, i8* %5381, align 1, !dbg !1822
  %5382 = load i32, i32* @x.17
  %5383 = load i32, i32* @y.18
  %5384 = sub i32 %5382, 1
  %5385 = mul i32 %5382, %5384
  %5386 = urem i32 %5385, 2
  %5387 = icmp eq i32 %5386, 0
  %5388 = icmp slt i32 %5383, 10
  %5389 = or i1 %5387, %5388
  br i1 %5389, label %originalBBpart21524, label %originalBB1522alteredBB

originalBBpart21524:                              ; preds = %originalBB1522
  br label %5390, !dbg !1822

5390:                                             ; preds = %originalBBpart21524, %originalBBpart21520
  %5391 = load i32, i32* @x.17
  %5392 = load i32, i32* @y.18
  %5393 = sub i32 %5391, 1
  %5394 = mul i32 %5391, %5393
  %5395 = urem i32 %5394, 2
  %5396 = icmp eq i32 %5395, 0
  %5397 = icmp slt i32 %5392, 10
  %5398 = or i1 %5396, %5397
  br i1 %5398, label %originalBB1526, label %originalBB1526alteredBB

originalBB1526:                                   ; preds = %5390, %originalBB1526alteredBB
  %5399 = load i64, i64* %29, align 8, !dbg !1825
  %5400 = add i64 %5399, 1, !dbg !1825
  store i64 %5400, i64* %29, align 8, !dbg !1825
  %5401 = load i32, i32* @x.17
  %5402 = load i32, i32* @y.18
  %5403 = sub i32 %5401, 1
  %5404 = mul i32 %5401, %5403
  %5405 = urem i32 %5404, 2
  %5406 = icmp eq i32 %5405, 0
  %5407 = icmp slt i32 %5402, 10
  %5408 = or i1 %5406, %5407
  br i1 %5408, label %originalBBpart21536, label %originalBB1526alteredBB

originalBBpart21536:                              ; preds = %originalBB1526
  br label %5409, !dbg !1825

5409:                                             ; preds = %originalBBpart21536
  %5410 = load i32, i32* @x.17
  %5411 = load i32, i32* @y.18
  %5412 = sub i32 %5410, 1
  %5413 = mul i32 %5410, %5412
  %5414 = urem i32 %5413, 2
  %5415 = icmp eq i32 %5414, 0
  %5416 = icmp slt i32 %5411, 10
  %5417 = or i1 %5415, %5416
  br i1 %5417, label %originalBB1538, label %originalBB1538alteredBB

originalBB1538:                                   ; preds = %5409, %originalBB1538alteredBB
  %5418 = load i8*, i8** %21, align 8, !dbg !1826
  %5419 = load i64, i64* %28, align 8, !dbg !1827
  %5420 = add i64 %5419, 1, !dbg !1827
  store i64 %5420, i64* %28, align 8, !dbg !1827
  %5421 = getelementptr inbounds i8, i8* %5418, i64 %5420, !dbg !1826
  %5422 = load i8, i8* %5421, align 1, !dbg !1826
  store i8 %5422, i8* %39, align 1, !dbg !1828
  %5423 = load i32, i32* @x.17
  %5424 = load i32, i32* @y.18
  %5425 = sub i32 %5423, 1
  %5426 = mul i32 %5423, %5425
  %5427 = urem i32 %5426, 2
  %5428 = icmp eq i32 %5427, 0
  %5429 = icmp slt i32 %5424, 10
  %5430 = or i1 %5428, %5429
  br i1 %5430, label %originalBBpart21545, label %originalBB1538alteredBB

originalBBpart21545:                              ; preds = %originalBB1538
  br label %4272, !dbg !1829, !llvm.loop !1830

5431:                                             ; preds = %originalBBpart21434
  %5432 = load i32, i32* @x.17
  %5433 = load i32, i32* @y.18
  %5434 = sub i32 %5432, 1
  %5435 = mul i32 %5432, %5434
  %5436 = urem i32 %5435, 2
  %5437 = icmp eq i32 %5436, 0
  %5438 = icmp slt i32 %5433, 10
  %5439 = or i1 %5437, %5438
  br i1 %5439, label %originalBB1547, label %originalBB1547alteredBB

originalBB1547:                                   ; preds = %5431, %originalBB1547alteredBB
  %5440 = load i32, i32* @x.17
  %5441 = load i32, i32* @y.18
  %5442 = sub i32 %5440, 1
  %5443 = mul i32 %5440, %5442
  %5444 = urem i32 %5443, 2
  %5445 = icmp eq i32 %5444, 0
  %5446 = icmp slt i32 %5441, 10
  %5447 = or i1 %5445, %5446
  br i1 %5447, label %originalBBpart21549, label %originalBB1547alteredBB

originalBBpart21549:                              ; preds = %originalBB1547
  br label %6070, !dbg !1833

5448:                                             ; preds = %originalBBpart21128, %originalBBpart21124
  %5449 = load i32, i32* @x.17
  %5450 = load i32, i32* @y.18
  %5451 = sub i32 %5449, 1
  %5452 = mul i32 %5449, %5451
  %5453 = urem i32 %5452, 2
  %5454 = icmp eq i32 %5453, 0
  %5455 = icmp slt i32 %5450, 10
  %5456 = or i1 %5454, %5455
  br i1 %5456, label %originalBB1551, label %originalBB1551alteredBB

originalBB1551:                                   ; preds = %5448, %originalBB1551alteredBB
  %5457 = load i32, i32* @x.17
  %5458 = load i32, i32* @y.18
  %5459 = sub i32 %5457, 1
  %5460 = mul i32 %5457, %5459
  %5461 = urem i32 %5460, 2
  %5462 = icmp eq i32 %5461, 0
  %5463 = icmp slt i32 %5458, 10
  %5464 = or i1 %5462, %5463
  br i1 %5464, label %originalBBpart21553, label %originalBB1551alteredBB

originalBBpart21553:                              ; preds = %originalBB1551
  br label %5465, !dbg !1834

5465:                                             ; preds = %originalBBpart21553, %originalBBpart2918, %originalBBpart2914, %originalBBpart2817, %originalBBpart2793, %originalBBpart2781, %originalBBpart2765, %originalBBpart2673, %originalBBpart2492
  %5466 = load i32, i32* @x.17
  %5467 = load i32, i32* @y.18
  %5468 = sub i32 %5466, 1
  %5469 = mul i32 %5466, %5468
  %5470 = urem i32 %5469, 2
  %5471 = icmp eq i32 %5470, 0
  %5472 = icmp slt i32 %5467, 10
  %5473 = or i1 %5471, %5472
  br i1 %5473, label %originalBB1555, label %originalBB1555alteredBB

originalBB1555:                                   ; preds = %5465, %originalBB1555alteredBB
  %5474 = load i8, i8* %33, align 1, !dbg !1835
  %5475 = trunc i8 %5474 to i1, !dbg !1835
  %5476 = load i32, i32* @x.17
  %5477 = load i32, i32* @y.18
  %5478 = sub i32 %5476, 1
  %5479 = mul i32 %5476, %5478
  %5480 = urem i32 %5479, 2
  %5481 = icmp eq i32 %5480, 0
  %5482 = icmp slt i32 %5477, 10
  %5483 = or i1 %5481, %5482
  br i1 %5483, label %originalBBpart21557, label %originalBB1555alteredBB

originalBBpart21557:                              ; preds = %originalBB1555
  br i1 %5475, label %5484, label %5503, !dbg !1837

5484:                                             ; preds = %originalBBpart21557
  %5485 = load i32, i32* @x.17
  %5486 = load i32, i32* @y.18
  %5487 = sub i32 %5485, 1
  %5488 = mul i32 %5485, %5487
  %5489 = urem i32 %5488, 2
  %5490 = icmp eq i32 %5489, 0
  %5491 = icmp slt i32 %5486, 10
  %5492 = or i1 %5490, %5491
  br i1 %5492, label %originalBB1559, label %originalBB1559alteredBB

originalBB1559:                                   ; preds = %5484, %originalBB1559alteredBB
  %5493 = load i32, i32* %23, align 4, !dbg !1838
  %5494 = icmp ne i32 %5493, 2, !dbg !1839
  %5495 = load i32, i32* @x.17
  %5496 = load i32, i32* @y.18
  %5497 = sub i32 %5495, 1
  %5498 = mul i32 %5495, %5497
  %5499 = urem i32 %5498, 2
  %5500 = icmp eq i32 %5499, 0
  %5501 = icmp slt i32 %5496, 10
  %5502 = or i1 %5500, %5501
  br i1 %5502, label %originalBBpart21561, label %originalBB1559alteredBB

originalBBpart21561:                              ; preds = %originalBB1559
  br i1 %5494, label %5522, label %5503, !dbg !1840

5503:                                             ; preds = %originalBBpart21561, %originalBBpart21557
  %5504 = load i32, i32* @x.17
  %5505 = load i32, i32* @y.18
  %5506 = sub i32 %5504, 1
  %5507 = mul i32 %5504, %5506
  %5508 = urem i32 %5507, 2
  %5509 = icmp eq i32 %5508, 0
  %5510 = icmp slt i32 %5505, 10
  %5511 = or i1 %5509, %5510
  br i1 %5511, label %originalBB1563, label %originalBB1563alteredBB

originalBB1563:                                   ; preds = %5503, %originalBB1563alteredBB
  %5512 = load i8, i8* %35, align 1, !dbg !1841
  %5513 = trunc i8 %5512 to i1, !dbg !1841
  %5514 = load i32, i32* @x.17
  %5515 = load i32, i32* @y.18
  %5516 = sub i32 %5514, 1
  %5517 = mul i32 %5514, %5516
  %5518 = urem i32 %5517, 2
  %5519 = icmp eq i32 %5518, 0
  %5520 = icmp slt i32 %5515, 10
  %5521 = or i1 %5519, %5520
  br i1 %5521, label %originalBBpart21565, label %originalBB1563alteredBB

originalBBpart21565:                              ; preds = %originalBB1563
  br i1 %5513, label %5522, label %5571, !dbg !1842

5522:                                             ; preds = %originalBBpart21565, %originalBBpart21561
  %5523 = load i32, i32* @x.17
  %5524 = load i32, i32* @y.18
  %5525 = sub i32 %5523, 1
  %5526 = mul i32 %5523, %5525
  %5527 = urem i32 %5526, 2
  %5528 = icmp eq i32 %5527, 0
  %5529 = icmp slt i32 %5524, 10
  %5530 = or i1 %5528, %5529
  br i1 %5530, label %originalBB1567, label %originalBB1567alteredBB

originalBB1567:                                   ; preds = %5522, %originalBB1567alteredBB
  %5531 = load i32*, i32** %25, align 8, !dbg !1843
  %5532 = icmp ne i32* %5531, null, !dbg !1843
  %5533 = load i32, i32* @x.17
  %5534 = load i32, i32* @y.18
  %5535 = sub i32 %5533, 1
  %5536 = mul i32 %5533, %5535
  %5537 = urem i32 %5536, 2
  %5538 = icmp eq i32 %5537, 0
  %5539 = icmp slt i32 %5534, 10
  %5540 = or i1 %5538, %5539
  br i1 %5540, label %originalBBpart21569, label %originalBB1567alteredBB

originalBBpart21569:                              ; preds = %originalBB1567
  br i1 %5532, label %5541, label %5571, !dbg !1844

5541:                                             ; preds = %originalBBpart21569
  %5542 = load i32, i32* @x.17
  %5543 = load i32, i32* @y.18
  %5544 = sub i32 %5542, 1
  %5545 = mul i32 %5542, %5544
  %5546 = urem i32 %5545, 2
  %5547 = icmp eq i32 %5546, 0
  %5548 = icmp slt i32 %5543, 10
  %5549 = or i1 %5547, %5548
  br i1 %5549, label %originalBB1571, label %originalBB1571alteredBB

originalBB1571:                                   ; preds = %5541, %originalBB1571alteredBB
  %5550 = load i32*, i32** %25, align 8, !dbg !1845
  %5551 = load i8, i8* %39, align 1, !dbg !1846
  %5552 = zext i8 %5551 to i64, !dbg !1846
  %5553 = udiv i64 %5552, 32, !dbg !1847
  %5554 = getelementptr inbounds i32, i32* %5550, i64 %5553, !dbg !1845
  %5555 = load i32, i32* %5554, align 4, !dbg !1845
  %5556 = load i8, i8* %39, align 1, !dbg !1848
  %5557 = zext i8 %5556 to i64, !dbg !1848
  %5558 = urem i64 %5557, 32, !dbg !1849
  %5559 = trunc i64 %5558 to i32, !dbg !1850
  %5560 = lshr i32 %5555, %5559, !dbg !1850
  %5561 = and i32 %5560, 1, !dbg !1851
  %5562 = icmp ne i32 %5561, 0, !dbg !1851
  %5563 = load i32, i32* @x.17
  %5564 = load i32, i32* @y.18
  %5565 = sub i32 %5563, 1
  %5566 = mul i32 %5563, %5565
  %5567 = urem i32 %5566, 2
  %5568 = icmp eq i32 %5567, 0
  %5569 = icmp slt i32 %5564, 10
  %5570 = or i1 %5568, %5569
  br i1 %5570, label %originalBBpart21607, label %originalBB1571alteredBB

originalBBpart21607:                              ; preds = %originalBB1571
  br i1 %5562, label %5607, label %5571, !dbg !1852

5571:                                             ; preds = %originalBBpart21607, %originalBBpart21569, %originalBBpart21565
  %5572 = load i32, i32* @x.17
  %5573 = load i32, i32* @y.18
  %5574 = sub i32 %5572, 1
  %5575 = mul i32 %5572, %5574
  %5576 = urem i32 %5575, 2
  %5577 = icmp eq i32 %5576, 0
  %5578 = icmp slt i32 %5573, 10
  %5579 = or i1 %5577, %5578
  br i1 %5579, label %originalBB1609, label %originalBB1609alteredBB

originalBB1609:                                   ; preds = %5571, %originalBB1609alteredBB
  %5580 = load i8, i8* %41, align 1, !dbg !1853
  %5581 = trunc i8 %5580 to i1, !dbg !1853
  %5582 = load i32, i32* @x.17
  %5583 = load i32, i32* @y.18
  %5584 = sub i32 %5582, 1
  %5585 = mul i32 %5582, %5584
  %5586 = urem i32 %5585, 2
  %5587 = icmp eq i32 %5586, 0
  %5588 = icmp slt i32 %5583, 10
  %5589 = or i1 %5587, %5588
  br i1 %5589, label %originalBBpart21611, label %originalBB1609alteredBB

originalBBpart21611:                              ; preds = %originalBB1609
  br i1 %5581, label %5607, label %5590, !dbg !1854

5590:                                             ; preds = %originalBBpart21611
  %5591 = load i32, i32* @x.17
  %5592 = load i32, i32* @y.18
  %5593 = sub i32 %5591, 1
  %5594 = mul i32 %5591, %5593
  %5595 = urem i32 %5594, 2
  %5596 = icmp eq i32 %5595, 0
  %5597 = icmp slt i32 %5592, 10
  %5598 = or i1 %5596, %5597
  br i1 %5598, label %originalBB1613, label %originalBB1613alteredBB

originalBB1613:                                   ; preds = %5590, %originalBB1613alteredBB
  %5599 = load i32, i32* @x.17
  %5600 = load i32, i32* @y.18
  %5601 = sub i32 %5599, 1
  %5602 = mul i32 %5599, %5601
  %5603 = urem i32 %5602, 2
  %5604 = icmp eq i32 %5603, 0
  %5605 = icmp slt i32 %5600, 10
  %5606 = or i1 %5604, %5605
  br i1 %5606, label %originalBBpart21615, label %originalBB1613alteredBB

originalBBpart21615:                              ; preds = %originalBB1613
  br label %6070, !dbg !1855

5607:                                             ; preds = %originalBBpart21611, %originalBBpart21607
  %5608 = load i32, i32* @x.17
  %5609 = load i32, i32* @y.18
  %5610 = sub i32 %5608, 1
  %5611 = mul i32 %5608, %5610
  %5612 = urem i32 %5611, 2
  %5613 = icmp eq i32 %5612, 0
  %5614 = icmp slt i32 %5609, 10
  %5615 = or i1 %5613, %5614
  br i1 %5615, label %originalBB1617, label %originalBB1617alteredBB

originalBB1617:                                   ; preds = %5607, %originalBB1617alteredBB
  %5616 = load i32, i32* @x.17
  %5617 = load i32, i32* @y.18
  %5618 = sub i32 %5616, 1
  %5619 = mul i32 %5616, %5618
  %5620 = urem i32 %5619, 2
  %5621 = icmp eq i32 %5620, 0
  %5622 = icmp slt i32 %5617, 10
  %5623 = or i1 %5621, %5622
  br i1 %5623, label %originalBBpart21619, label %originalBB1617alteredBB

originalBBpart21619:                              ; preds = %originalBB1617
  br label %5624, !dbg !1853

5624:                                             ; preds = %originalBBpart21619, %originalBBpart2761
  call void @llvm.dbg.label(metadata !1856), !dbg !1857
  %5625 = load i32, i32* @x.17
  %5626 = load i32, i32* @y.18
  %5627 = sub i32 %5625, 1
  %5628 = mul i32 %5625, %5627
  %5629 = urem i32 %5628, 2
  %5630 = icmp eq i32 %5629, 0
  %5631 = icmp slt i32 %5626, 10
  %5632 = or i1 %5630, %5631
  br i1 %5632, label %originalBB1621, label %originalBB1621alteredBB

originalBB1621:                                   ; preds = %5624, %originalBB1621alteredBB
  %5633 = load i32, i32* @x.17
  %5634 = load i32, i32* @y.18
  %5635 = sub i32 %5633, 1
  %5636 = mul i32 %5633, %5635
  %5637 = urem i32 %5636, 2
  %5638 = icmp eq i32 %5637, 0
  %5639 = icmp slt i32 %5634, 10
  %5640 = or i1 %5638, %5639
  br i1 %5640, label %originalBBpart21623, label %originalBB1621alteredBB

originalBBpart21623:                              ; preds = %originalBB1621
  br label %5641, !dbg !1858

5641:                                             ; preds = %originalBBpart21623
  %5642 = load i32, i32* @x.17
  %5643 = load i32, i32* @y.18
  %5644 = sub i32 %5642, 1
  %5645 = mul i32 %5642, %5644
  %5646 = urem i32 %5645, 2
  %5647 = icmp eq i32 %5646, 0
  %5648 = icmp slt i32 %5643, 10
  %5649 = or i1 %5647, %5648
  br i1 %5649, label %originalBB1625, label %originalBB1625alteredBB

originalBB1625:                                   ; preds = %5641, %originalBB1625alteredBB
  %5650 = load i8, i8* %35, align 1, !dbg !1859
  %5651 = trunc i8 %5650 to i1, !dbg !1859
  %5652 = load i32, i32* @x.17
  %5653 = load i32, i32* @y.18
  %5654 = sub i32 %5652, 1
  %5655 = mul i32 %5652, %5654
  %5656 = urem i32 %5655, 2
  %5657 = icmp eq i32 %5656, 0
  %5658 = icmp slt i32 %5653, 10
  %5659 = or i1 %5657, %5658
  br i1 %5659, label %originalBBpart21627, label %originalBB1625alteredBB

originalBBpart21627:                              ; preds = %originalBB1625
  br i1 %5651, label %5660, label %5677, !dbg !1862

5660:                                             ; preds = %originalBBpart21627
  %5661 = load i32, i32* @x.17
  %5662 = load i32, i32* @y.18
  %5663 = sub i32 %5661, 1
  %5664 = mul i32 %5661, %5663
  %5665 = urem i32 %5664, 2
  %5666 = icmp eq i32 %5665, 0
  %5667 = icmp slt i32 %5662, 10
  %5668 = or i1 %5666, %5667
  br i1 %5668, label %originalBB1629, label %originalBB1629alteredBB

originalBB1629:                                   ; preds = %5660, %originalBB1629alteredBB
  %5669 = load i32, i32* @x.17
  %5670 = load i32, i32* @y.18
  %5671 = sub i32 %5669, 1
  %5672 = mul i32 %5669, %5671
  %5673 = urem i32 %5672, 2
  %5674 = icmp eq i32 %5673, 0
  %5675 = icmp slt i32 %5670, 10
  %5676 = or i1 %5674, %5675
  br i1 %5676, label %originalBBpart21631, label %originalBB1629alteredBB

originalBBpart21631:                              ; preds = %originalBB1629
  br label %6990, !dbg !1859

5677:                                             ; preds = %originalBBpart21627
  %5678 = load i32, i32* @x.17
  %5679 = load i32, i32* @y.18
  %5680 = sub i32 %5678, 1
  %5681 = mul i32 %5678, %5680
  %5682 = urem i32 %5681, 2
  %5683 = icmp eq i32 %5682, 0
  %5684 = icmp slt i32 %5679, 10
  %5685 = or i1 %5683, %5684
  br i1 %5685, label %originalBB1633, label %originalBB1633alteredBB

originalBB1633:                                   ; preds = %5677, %originalBB1633alteredBB
  store i8 1, i8* %42, align 1, !dbg !1862
  %5686 = load i32, i32* %23, align 4, !dbg !1863
  %5687 = icmp eq i32 %5686, 2, !dbg !1863
  %5688 = load i32, i32* @x.17
  %5689 = load i32, i32* @y.18
  %5690 = sub i32 %5688, 1
  %5691 = mul i32 %5688, %5690
  %5692 = urem i32 %5691, 2
  %5693 = icmp eq i32 %5692, 0
  %5694 = icmp slt i32 %5689, 10
  %5695 = or i1 %5693, %5694
  br i1 %5695, label %originalBBpart21635, label %originalBB1633alteredBB

originalBBpart21635:                              ; preds = %originalBB1633
  br i1 %5687, label %5696, label %5960, !dbg !1863

5696:                                             ; preds = %originalBBpart21635
  %5697 = load i32, i32* @x.17
  %5698 = load i32, i32* @y.18
  %5699 = sub i32 %5697, 1
  %5700 = mul i32 %5697, %5699
  %5701 = urem i32 %5700, 2
  %5702 = icmp eq i32 %5701, 0
  %5703 = icmp slt i32 %5698, 10
  %5704 = or i1 %5702, %5703
  br i1 %5704, label %originalBB1637, label %originalBB1637alteredBB

originalBB1637:                                   ; preds = %5696, %originalBB1637alteredBB
  %5705 = load i8, i8* %36, align 1, !dbg !1863
  %5706 = trunc i8 %5705 to i1, !dbg !1863
  %5707 = load i32, i32* @x.17
  %5708 = load i32, i32* @y.18
  %5709 = sub i32 %5707, 1
  %5710 = mul i32 %5707, %5709
  %5711 = urem i32 %5710, 2
  %5712 = icmp eq i32 %5711, 0
  %5713 = icmp slt i32 %5708, 10
  %5714 = or i1 %5712, %5713
  br i1 %5714, label %originalBBpart21639, label %originalBB1637alteredBB

originalBBpart21639:                              ; preds = %originalBB1637
  br i1 %5706, label %5960, label %5715, !dbg !1862

5715:                                             ; preds = %originalBBpart21639
  %5716 = load i32, i32* @x.17
  %5717 = load i32, i32* @y.18
  %5718 = sub i32 %5716, 1
  %5719 = mul i32 %5716, %5718
  %5720 = urem i32 %5719, 2
  %5721 = icmp eq i32 %5720, 0
  %5722 = icmp slt i32 %5717, 10
  %5723 = or i1 %5721, %5722
  br i1 %5723, label %originalBB1641, label %originalBB1641alteredBB

originalBB1641:                                   ; preds = %5715, %originalBB1641alteredBB
  %5724 = load i32, i32* @x.17
  %5725 = load i32, i32* @y.18
  %5726 = sub i32 %5724, 1
  %5727 = mul i32 %5724, %5726
  %5728 = urem i32 %5727, 2
  %5729 = icmp eq i32 %5728, 0
  %5730 = icmp slt i32 %5725, 10
  %5731 = or i1 %5729, %5730
  br i1 %5731, label %originalBBpart21643, label %originalBB1641alteredBB

originalBBpart21643:                              ; preds = %originalBB1641
  br label %5732, !dbg !1865

5732:                                             ; preds = %originalBBpart21643
  %5733 = load i32, i32* @x.17
  %5734 = load i32, i32* @y.18
  %5735 = sub i32 %5733, 1
  %5736 = mul i32 %5733, %5735
  %5737 = urem i32 %5736, 2
  %5738 = icmp eq i32 %5737, 0
  %5739 = icmp slt i32 %5734, 10
  %5740 = or i1 %5738, %5739
  br i1 %5740, label %originalBB1645, label %originalBB1645alteredBB

originalBB1645:                                   ; preds = %5732, %originalBB1645alteredBB
  %5741 = load i64, i64* %29, align 8, !dbg !1867
  %5742 = load i64, i64* %20, align 8, !dbg !1867
  %5743 = icmp ult i64 %5741, %5742, !dbg !1867
  %5744 = load i32, i32* @x.17
  %5745 = load i32, i32* @y.18
  %5746 = sub i32 %5744, 1
  %5747 = mul i32 %5744, %5746
  %5748 = urem i32 %5747, 2
  %5749 = icmp eq i32 %5748, 0
  %5750 = icmp slt i32 %5745, 10
  %5751 = or i1 %5749, %5750
  br i1 %5751, label %originalBBpart21647, label %originalBB1645alteredBB

originalBBpart21647:                              ; preds = %originalBB1645
  br i1 %5743, label %5752, label %5772, !dbg !1870

5752:                                             ; preds = %originalBBpart21647
  %5753 = load i32, i32* @x.17
  %5754 = load i32, i32* @y.18
  %5755 = sub i32 %5753, 1
  %5756 = mul i32 %5753, %5755
  %5757 = urem i32 %5756, 2
  %5758 = icmp eq i32 %5757, 0
  %5759 = icmp slt i32 %5754, 10
  %5760 = or i1 %5758, %5759
  br i1 %5760, label %originalBB1649, label %originalBB1649alteredBB

originalBB1649:                                   ; preds = %5752, %originalBB1649alteredBB
  %5761 = load i8*, i8** %19, align 8, !dbg !1867
  %5762 = load i64, i64* %29, align 8, !dbg !1867
  %5763 = getelementptr inbounds i8, i8* %5761, i64 %5762, !dbg !1867
  store i8 39, i8* %5763, align 1, !dbg !1867
  %5764 = load i32, i32* @x.17
  %5765 = load i32, i32* @y.18
  %5766 = sub i32 %5764, 1
  %5767 = mul i32 %5764, %5766
  %5768 = urem i32 %5767, 2
  %5769 = icmp eq i32 %5768, 0
  %5770 = icmp slt i32 %5765, 10
  %5771 = or i1 %5769, %5770
  br i1 %5771, label %originalBBpart21651, label %originalBB1649alteredBB

originalBBpart21651:                              ; preds = %originalBB1649
  br label %5772, !dbg !1867

5772:                                             ; preds = %originalBBpart21651, %originalBBpart21647
  %5773 = load i32, i32* @x.17
  %5774 = load i32, i32* @y.18
  %5775 = sub i32 %5773, 1
  %5776 = mul i32 %5773, %5775
  %5777 = urem i32 %5776, 2
  %5778 = icmp eq i32 %5777, 0
  %5779 = icmp slt i32 %5774, 10
  %5780 = or i1 %5778, %5779
  br i1 %5780, label %originalBB1653, label %originalBB1653alteredBB

originalBB1653:                                   ; preds = %5772, %originalBB1653alteredBB
  %5781 = load i64, i64* %29, align 8, !dbg !1870
  %5782 = add i64 %5781, 1, !dbg !1870
  store i64 %5782, i64* %29, align 8, !dbg !1870
  %5783 = load i32, i32* @x.17
  %5784 = load i32, i32* @y.18
  %5785 = sub i32 %5783, 1
  %5786 = mul i32 %5783, %5785
  %5787 = urem i32 %5786, 2
  %5788 = icmp eq i32 %5787, 0
  %5789 = icmp slt i32 %5784, 10
  %5790 = or i1 %5788, %5789
  br i1 %5790, label %originalBBpart21663, label %originalBB1653alteredBB

originalBBpart21663:                              ; preds = %originalBB1653
  br label %5791, !dbg !1870

5791:                                             ; preds = %originalBBpart21663
  %5792 = load i32, i32* @x.17
  %5793 = load i32, i32* @y.18
  %5794 = sub i32 %5792, 1
  %5795 = mul i32 %5792, %5794
  %5796 = urem i32 %5795, 2
  %5797 = icmp eq i32 %5796, 0
  %5798 = icmp slt i32 %5793, 10
  %5799 = or i1 %5797, %5798
  br i1 %5799, label %originalBB1665, label %originalBB1665alteredBB

originalBB1665:                                   ; preds = %5791, %originalBB1665alteredBB
  %5800 = load i32, i32* @x.17
  %5801 = load i32, i32* @y.18
  %5802 = sub i32 %5800, 1
  %5803 = mul i32 %5800, %5802
  %5804 = urem i32 %5803, 2
  %5805 = icmp eq i32 %5804, 0
  %5806 = icmp slt i32 %5801, 10
  %5807 = or i1 %5805, %5806
  br i1 %5807, label %originalBBpart21667, label %originalBB1665alteredBB

originalBBpart21667:                              ; preds = %originalBB1665
  br label %5808, !dbg !1865

5808:                                             ; preds = %originalBBpart21667
  %5809 = load i32, i32* @x.17
  %5810 = load i32, i32* @y.18
  %5811 = sub i32 %5809, 1
  %5812 = mul i32 %5809, %5811
  %5813 = urem i32 %5812, 2
  %5814 = icmp eq i32 %5813, 0
  %5815 = icmp slt i32 %5810, 10
  %5816 = or i1 %5814, %5815
  br i1 %5816, label %originalBB1669, label %originalBB1669alteredBB

originalBB1669:                                   ; preds = %5808, %originalBB1669alteredBB
  %5817 = load i64, i64* %29, align 8, !dbg !1871
  %5818 = load i64, i64* %20, align 8, !dbg !1871
  %5819 = icmp ult i64 %5817, %5818, !dbg !1871
  %5820 = load i32, i32* @x.17
  %5821 = load i32, i32* @y.18
  %5822 = sub i32 %5820, 1
  %5823 = mul i32 %5820, %5822
  %5824 = urem i32 %5823, 2
  %5825 = icmp eq i32 %5824, 0
  %5826 = icmp slt i32 %5821, 10
  %5827 = or i1 %5825, %5826
  br i1 %5827, label %originalBBpart21671, label %originalBB1669alteredBB

originalBBpart21671:                              ; preds = %originalBB1669
  br i1 %5819, label %5828, label %5848, !dbg !1874

5828:                                             ; preds = %originalBBpart21671
  %5829 = load i32, i32* @x.17
  %5830 = load i32, i32* @y.18
  %5831 = sub i32 %5829, 1
  %5832 = mul i32 %5829, %5831
  %5833 = urem i32 %5832, 2
  %5834 = icmp eq i32 %5833, 0
  %5835 = icmp slt i32 %5830, 10
  %5836 = or i1 %5834, %5835
  br i1 %5836, label %originalBB1673, label %originalBB1673alteredBB

originalBB1673:                                   ; preds = %5828, %originalBB1673alteredBB
  %5837 = load i8*, i8** %19, align 8, !dbg !1871
  %5838 = load i64, i64* %29, align 8, !dbg !1871
  %5839 = getelementptr inbounds i8, i8* %5837, i64 %5838, !dbg !1871
  store i8 36, i8* %5839, align 1, !dbg !1871
  %5840 = load i32, i32* @x.17
  %5841 = load i32, i32* @y.18
  %5842 = sub i32 %5840, 1
  %5843 = mul i32 %5840, %5842
  %5844 = urem i32 %5843, 2
  %5845 = icmp eq i32 %5844, 0
  %5846 = icmp slt i32 %5841, 10
  %5847 = or i1 %5845, %5846
  br i1 %5847, label %originalBBpart21675, label %originalBB1673alteredBB

originalBBpart21675:                              ; preds = %originalBB1673
  br label %5848, !dbg !1871

5848:                                             ; preds = %originalBBpart21675, %originalBBpart21671
  %5849 = load i32, i32* @x.17
  %5850 = load i32, i32* @y.18
  %5851 = sub i32 %5849, 1
  %5852 = mul i32 %5849, %5851
  %5853 = urem i32 %5852, 2
  %5854 = icmp eq i32 %5853, 0
  %5855 = icmp slt i32 %5850, 10
  %5856 = or i1 %5854, %5855
  br i1 %5856, label %originalBB1677, label %originalBB1677alteredBB

originalBB1677:                                   ; preds = %5848, %originalBB1677alteredBB
  %5857 = load i64, i64* %29, align 8, !dbg !1874
  %5858 = add i64 %5857, 1, !dbg !1874
  store i64 %5858, i64* %29, align 8, !dbg !1874
  %5859 = load i32, i32* @x.17
  %5860 = load i32, i32* @y.18
  %5861 = sub i32 %5859, 1
  %5862 = mul i32 %5859, %5861
  %5863 = urem i32 %5862, 2
  %5864 = icmp eq i32 %5863, 0
  %5865 = icmp slt i32 %5860, 10
  %5866 = or i1 %5864, %5865
  br i1 %5866, label %originalBBpart21682, label %originalBB1677alteredBB

originalBBpart21682:                              ; preds = %originalBB1677
  br label %5867, !dbg !1874

5867:                                             ; preds = %originalBBpart21682
  %5868 = load i32, i32* @x.17
  %5869 = load i32, i32* @y.18
  %5870 = sub i32 %5868, 1
  %5871 = mul i32 %5868, %5870
  %5872 = urem i32 %5871, 2
  %5873 = icmp eq i32 %5872, 0
  %5874 = icmp slt i32 %5869, 10
  %5875 = or i1 %5873, %5874
  br i1 %5875, label %originalBB1684, label %originalBB1684alteredBB

originalBB1684:                                   ; preds = %5867, %originalBB1684alteredBB
  %5876 = load i32, i32* @x.17
  %5877 = load i32, i32* @y.18
  %5878 = sub i32 %5876, 1
  %5879 = mul i32 %5876, %5878
  %5880 = urem i32 %5879, 2
  %5881 = icmp eq i32 %5880, 0
  %5882 = icmp slt i32 %5877, 10
  %5883 = or i1 %5881, %5882
  br i1 %5883, label %originalBBpart21686, label %originalBB1684alteredBB

originalBBpart21686:                              ; preds = %originalBB1684
  br label %5884, !dbg !1865

5884:                                             ; preds = %originalBBpart21686
  %5885 = load i32, i32* @x.17
  %5886 = load i32, i32* @y.18
  %5887 = sub i32 %5885, 1
  %5888 = mul i32 %5885, %5887
  %5889 = urem i32 %5888, 2
  %5890 = icmp eq i32 %5889, 0
  %5891 = icmp slt i32 %5886, 10
  %5892 = or i1 %5890, %5891
  br i1 %5892, label %originalBB1688, label %originalBB1688alteredBB

originalBB1688:                                   ; preds = %5884, %originalBB1688alteredBB
  %5893 = load i64, i64* %29, align 8, !dbg !1875
  %5894 = load i64, i64* %20, align 8, !dbg !1875
  %5895 = icmp ult i64 %5893, %5894, !dbg !1875
  %5896 = load i32, i32* @x.17
  %5897 = load i32, i32* @y.18
  %5898 = sub i32 %5896, 1
  %5899 = mul i32 %5896, %5898
  %5900 = urem i32 %5899, 2
  %5901 = icmp eq i32 %5900, 0
  %5902 = icmp slt i32 %5897, 10
  %5903 = or i1 %5901, %5902
  br i1 %5903, label %originalBBpart21690, label %originalBB1688alteredBB

originalBBpart21690:                              ; preds = %originalBB1688
  br i1 %5895, label %5904, label %5924, !dbg !1878

5904:                                             ; preds = %originalBBpart21690
  %5905 = load i32, i32* @x.17
  %5906 = load i32, i32* @y.18
  %5907 = sub i32 %5905, 1
  %5908 = mul i32 %5905, %5907
  %5909 = urem i32 %5908, 2
  %5910 = icmp eq i32 %5909, 0
  %5911 = icmp slt i32 %5906, 10
  %5912 = or i1 %5910, %5911
  br i1 %5912, label %originalBB1692, label %originalBB1692alteredBB

originalBB1692:                                   ; preds = %5904, %originalBB1692alteredBB
  %5913 = load i8*, i8** %19, align 8, !dbg !1875
  %5914 = load i64, i64* %29, align 8, !dbg !1875
  %5915 = getelementptr inbounds i8, i8* %5913, i64 %5914, !dbg !1875
  store i8 39, i8* %5915, align 1, !dbg !1875
  %5916 = load i32, i32* @x.17
  %5917 = load i32, i32* @y.18
  %5918 = sub i32 %5916, 1
  %5919 = mul i32 %5916, %5918
  %5920 = urem i32 %5919, 2
  %5921 = icmp eq i32 %5920, 0
  %5922 = icmp slt i32 %5917, 10
  %5923 = or i1 %5921, %5922
  br i1 %5923, label %originalBBpart21694, label %originalBB1692alteredBB

originalBBpart21694:                              ; preds = %originalBB1692
  br label %5924, !dbg !1875

5924:                                             ; preds = %originalBBpart21694, %originalBBpart21690
  %5925 = load i32, i32* @x.17
  %5926 = load i32, i32* @y.18
  %5927 = sub i32 %5925, 1
  %5928 = mul i32 %5925, %5927
  %5929 = urem i32 %5928, 2
  %5930 = icmp eq i32 %5929, 0
  %5931 = icmp slt i32 %5926, 10
  %5932 = or i1 %5930, %5931
  br i1 %5932, label %originalBB1696, label %originalBB1696alteredBB

originalBB1696:                                   ; preds = %5924, %originalBB1696alteredBB
  %5933 = load i64, i64* %29, align 8, !dbg !1878
  %5934 = add i64 %5933, 1, !dbg !1878
  store i64 %5934, i64* %29, align 8, !dbg !1878
  %5935 = load i32, i32* @x.17
  %5936 = load i32, i32* @y.18
  %5937 = sub i32 %5935, 1
  %5938 = mul i32 %5935, %5937
  %5939 = urem i32 %5938, 2
  %5940 = icmp eq i32 %5939, 0
  %5941 = icmp slt i32 %5936, 10
  %5942 = or i1 %5940, %5941
  br i1 %5942, label %originalBBpart21704, label %originalBB1696alteredBB

originalBBpart21704:                              ; preds = %originalBB1696
  br label %5943, !dbg !1878

5943:                                             ; preds = %originalBBpart21704
  %5944 = load i32, i32* @x.17
  %5945 = load i32, i32* @y.18
  %5946 = sub i32 %5944, 1
  %5947 = mul i32 %5944, %5946
  %5948 = urem i32 %5947, 2
  %5949 = icmp eq i32 %5948, 0
  %5950 = icmp slt i32 %5945, 10
  %5951 = or i1 %5949, %5950
  br i1 %5951, label %originalBB1706, label %originalBB1706alteredBB

originalBB1706:                                   ; preds = %5943, %originalBB1706alteredBB
  store i8 1, i8* %36, align 1, !dbg !1865
  %5952 = load i32, i32* @x.17
  %5953 = load i32, i32* @y.18
  %5954 = sub i32 %5952, 1
  %5955 = mul i32 %5952, %5954
  %5956 = urem i32 %5955, 2
  %5957 = icmp eq i32 %5956, 0
  %5958 = icmp slt i32 %5953, 10
  %5959 = or i1 %5957, %5958
  br i1 %5959, label %originalBBpart21708, label %originalBB1706alteredBB

originalBBpart21708:                              ; preds = %originalBB1706
  br label %5960, !dbg !1865

5960:                                             ; preds = %originalBBpart21708, %originalBBpart21639, %originalBBpart21635
  %5961 = load i32, i32* @x.17
  %5962 = load i32, i32* @y.18
  %5963 = sub i32 %5961, 1
  %5964 = mul i32 %5961, %5963
  %5965 = urem i32 %5964, 2
  %5966 = icmp eq i32 %5965, 0
  %5967 = icmp slt i32 %5962, 10
  %5968 = or i1 %5966, %5967
  br i1 %5968, label %originalBB1710, label %originalBB1710alteredBB

originalBB1710:                                   ; preds = %5960, %originalBB1710alteredBB
  %5969 = load i32, i32* @x.17
  %5970 = load i32, i32* @y.18
  %5971 = sub i32 %5969, 1
  %5972 = mul i32 %5969, %5971
  %5973 = urem i32 %5972, 2
  %5974 = icmp eq i32 %5973, 0
  %5975 = icmp slt i32 %5970, 10
  %5976 = or i1 %5974, %5975
  br i1 %5976, label %originalBBpart21712, label %originalBB1710alteredBB

originalBBpart21712:                              ; preds = %originalBB1710
  br label %5977, !dbg !1862

5977:                                             ; preds = %originalBBpart21712
  %5978 = load i32, i32* @x.17
  %5979 = load i32, i32* @y.18
  %5980 = sub i32 %5978, 1
  %5981 = mul i32 %5978, %5980
  %5982 = urem i32 %5981, 2
  %5983 = icmp eq i32 %5982, 0
  %5984 = icmp slt i32 %5979, 10
  %5985 = or i1 %5983, %5984
  br i1 %5985, label %originalBB1714, label %originalBB1714alteredBB

originalBB1714:                                   ; preds = %5977, %originalBB1714alteredBB
  %5986 = load i64, i64* %29, align 8, !dbg !1879
  %5987 = load i64, i64* %20, align 8, !dbg !1879
  %5988 = icmp ult i64 %5986, %5987, !dbg !1879
  %5989 = load i32, i32* @x.17
  %5990 = load i32, i32* @y.18
  %5991 = sub i32 %5989, 1
  %5992 = mul i32 %5989, %5991
  %5993 = urem i32 %5992, 2
  %5994 = icmp eq i32 %5993, 0
  %5995 = icmp slt i32 %5990, 10
  %5996 = or i1 %5994, %5995
  br i1 %5996, label %originalBBpart21716, label %originalBB1714alteredBB

originalBBpart21716:                              ; preds = %originalBB1714
  br i1 %5988, label %5997, label %6017, !dbg !1882

5997:                                             ; preds = %originalBBpart21716
  %5998 = load i32, i32* @x.17
  %5999 = load i32, i32* @y.18
  %6000 = sub i32 %5998, 1
  %6001 = mul i32 %5998, %6000
  %6002 = urem i32 %6001, 2
  %6003 = icmp eq i32 %6002, 0
  %6004 = icmp slt i32 %5999, 10
  %6005 = or i1 %6003, %6004
  br i1 %6005, label %originalBB1718, label %originalBB1718alteredBB

originalBB1718:                                   ; preds = %5997, %originalBB1718alteredBB
  %6006 = load i8*, i8** %19, align 8, !dbg !1879
  %6007 = load i64, i64* %29, align 8, !dbg !1879
  %6008 = getelementptr inbounds i8, i8* %6006, i64 %6007, !dbg !1879
  store i8 92, i8* %6008, align 1, !dbg !1879
  %6009 = load i32, i32* @x.17
  %6010 = load i32, i32* @y.18
  %6011 = sub i32 %6009, 1
  %6012 = mul i32 %6009, %6011
  %6013 = urem i32 %6012, 2
  %6014 = icmp eq i32 %6013, 0
  %6015 = icmp slt i32 %6010, 10
  %6016 = or i1 %6014, %6015
  br i1 %6016, label %originalBBpart21720, label %originalBB1718alteredBB

originalBBpart21720:                              ; preds = %originalBB1718
  br label %6017, !dbg !1879

6017:                                             ; preds = %originalBBpart21720, %originalBBpart21716
  %6018 = load i32, i32* @x.17
  %6019 = load i32, i32* @y.18
  %6020 = sub i32 %6018, 1
  %6021 = mul i32 %6018, %6020
  %6022 = urem i32 %6021, 2
  %6023 = icmp eq i32 %6022, 0
  %6024 = icmp slt i32 %6019, 10
  %6025 = or i1 %6023, %6024
  br i1 %6025, label %originalBB1722, label %originalBB1722alteredBB

originalBB1722:                                   ; preds = %6017, %originalBB1722alteredBB
  %6026 = load i64, i64* %29, align 8, !dbg !1882
  %6027 = add i64 %6026, 1, !dbg !1882
  store i64 %6027, i64* %29, align 8, !dbg !1882
  %6028 = load i32, i32* @x.17
  %6029 = load i32, i32* @y.18
  %6030 = sub i32 %6028, 1
  %6031 = mul i32 %6028, %6030
  %6032 = urem i32 %6031, 2
  %6033 = icmp eq i32 %6032, 0
  %6034 = icmp slt i32 %6029, 10
  %6035 = or i1 %6033, %6034
  br i1 %6035, label %originalBBpart21730, label %originalBB1722alteredBB

originalBBpart21730:                              ; preds = %originalBB1722
  br label %6036, !dbg !1882

6036:                                             ; preds = %originalBBpart21730
  %6037 = load i32, i32* @x.17
  %6038 = load i32, i32* @y.18
  %6039 = sub i32 %6037, 1
  %6040 = mul i32 %6037, %6039
  %6041 = urem i32 %6040, 2
  %6042 = icmp eq i32 %6041, 0
  %6043 = icmp slt i32 %6038, 10
  %6044 = or i1 %6042, %6043
  br i1 %6044, label %originalBB1732, label %originalBB1732alteredBB

originalBB1732:                                   ; preds = %6036, %originalBB1732alteredBB
  %6045 = load i32, i32* @x.17
  %6046 = load i32, i32* @y.18
  %6047 = sub i32 %6045, 1
  %6048 = mul i32 %6045, %6047
  %6049 = urem i32 %6048, 2
  %6050 = icmp eq i32 %6049, 0
  %6051 = icmp slt i32 %6046, 10
  %6052 = or i1 %6050, %6051
  br i1 %6052, label %originalBBpart21734, label %originalBB1732alteredBB

originalBBpart21734:                              ; preds = %originalBB1732
  br label %6053, !dbg !1862

6053:                                             ; preds = %originalBBpart21734
  %6054 = load i32, i32* @x.17
  %6055 = load i32, i32* @y.18
  %6056 = sub i32 %6054, 1
  %6057 = mul i32 %6054, %6056
  %6058 = urem i32 %6057, 2
  %6059 = icmp eq i32 %6058, 0
  %6060 = icmp slt i32 %6055, 10
  %6061 = or i1 %6059, %6060
  br i1 %6061, label %originalBB1736, label %originalBB1736alteredBB

originalBB1736:                                   ; preds = %6053, %originalBB1736alteredBB
  %6062 = load i32, i32* @x.17
  %6063 = load i32, i32* @y.18
  %6064 = sub i32 %6062, 1
  %6065 = mul i32 %6062, %6064
  %6066 = urem i32 %6065, 2
  %6067 = icmp eq i32 %6066, 0
  %6068 = icmp slt i32 %6063, 10
  %6069 = or i1 %6067, %6068
  br i1 %6069, label %originalBBpart21738, label %originalBB1736alteredBB

originalBBpart21738:                              ; preds = %originalBB1736
  br label %6070, !dbg !1862

6070:                                             ; preds = %originalBBpart21738, %originalBBpart21615, %originalBBpart21549, %originalBBpart2733, %originalBBpart2717
  call void @llvm.dbg.label(metadata !1883), !dbg !1884
  %6071 = load i32, i32* @x.17
  %6072 = load i32, i32* @y.18
  %6073 = sub i32 %6071, 1
  %6074 = mul i32 %6071, %6073
  %6075 = urem i32 %6074, 2
  %6076 = icmp eq i32 %6075, 0
  %6077 = icmp slt i32 %6072, 10
  %6078 = or i1 %6076, %6077
  br i1 %6078, label %originalBB1740, label %originalBB1740alteredBB

originalBB1740:                                   ; preds = %6070, %originalBB1740alteredBB
  %6079 = load i32, i32* @x.17
  %6080 = load i32, i32* @y.18
  %6081 = sub i32 %6079, 1
  %6082 = mul i32 %6079, %6081
  %6083 = urem i32 %6082, 2
  %6084 = icmp eq i32 %6083, 0
  %6085 = icmp slt i32 %6080, 10
  %6086 = or i1 %6084, %6085
  br i1 %6086, label %originalBBpart21742, label %originalBB1740alteredBB

originalBBpart21742:                              ; preds = %originalBB1740
  br label %6087, !dbg !1885

6087:                                             ; preds = %originalBBpart21742
  %6088 = load i32, i32* @x.17
  %6089 = load i32, i32* @y.18
  %6090 = sub i32 %6088, 1
  %6091 = mul i32 %6088, %6090
  %6092 = urem i32 %6091, 2
  %6093 = icmp eq i32 %6092, 0
  %6094 = icmp slt i32 %6089, 10
  %6095 = or i1 %6093, %6094
  br i1 %6095, label %originalBB1744, label %originalBB1744alteredBB

originalBB1744:                                   ; preds = %6087, %originalBB1744alteredBB
  %6096 = load i8, i8* %36, align 1, !dbg !1886
  %6097 = trunc i8 %6096 to i1, !dbg !1886
  %6098 = load i32, i32* @x.17
  %6099 = load i32, i32* @y.18
  %6100 = sub i32 %6098, 1
  %6101 = mul i32 %6098, %6100
  %6102 = urem i32 %6101, 2
  %6103 = icmp eq i32 %6102, 0
  %6104 = icmp slt i32 %6099, 10
  %6105 = or i1 %6103, %6104
  br i1 %6105, label %originalBBpart21746, label %originalBB1744alteredBB

originalBBpart21746:                              ; preds = %originalBB1744
  br i1 %6097, label %6106, label %6294, !dbg !1886

6106:                                             ; preds = %originalBBpart21746
  %6107 = load i32, i32* @x.17
  %6108 = load i32, i32* @y.18
  %6109 = sub i32 %6107, 1
  %6110 = mul i32 %6107, %6109
  %6111 = urem i32 %6110, 2
  %6112 = icmp eq i32 %6111, 0
  %6113 = icmp slt i32 %6108, 10
  %6114 = or i1 %6112, %6113
  br i1 %6114, label %originalBB1748, label %originalBB1748alteredBB

originalBB1748:                                   ; preds = %6106, %originalBB1748alteredBB
  %6115 = load i8, i8* %42, align 1, !dbg !1886
  %6116 = trunc i8 %6115 to i1, !dbg !1886
  %6117 = load i32, i32* @x.17
  %6118 = load i32, i32* @y.18
  %6119 = sub i32 %6117, 1
  %6120 = mul i32 %6117, %6119
  %6121 = urem i32 %6120, 2
  %6122 = icmp eq i32 %6121, 0
  %6123 = icmp slt i32 %6118, 10
  %6124 = or i1 %6122, %6123
  br i1 %6124, label %originalBBpart21750, label %originalBB1748alteredBB

originalBBpart21750:                              ; preds = %originalBB1748
  br i1 %6116, label %6294, label %6125, !dbg !1889

6125:                                             ; preds = %originalBBpart21750
  %6126 = load i32, i32* @x.17
  %6127 = load i32, i32* @y.18
  %6128 = sub i32 %6126, 1
  %6129 = mul i32 %6126, %6128
  %6130 = urem i32 %6129, 2
  %6131 = icmp eq i32 %6130, 0
  %6132 = icmp slt i32 %6127, 10
  %6133 = or i1 %6131, %6132
  br i1 %6133, label %originalBB1752, label %originalBB1752alteredBB

originalBB1752:                                   ; preds = %6125, %originalBB1752alteredBB
  %6134 = load i32, i32* @x.17
  %6135 = load i32, i32* @y.18
  %6136 = sub i32 %6134, 1
  %6137 = mul i32 %6134, %6136
  %6138 = urem i32 %6137, 2
  %6139 = icmp eq i32 %6138, 0
  %6140 = icmp slt i32 %6135, 10
  %6141 = or i1 %6139, %6140
  br i1 %6141, label %originalBBpart21754, label %originalBB1752alteredBB

originalBBpart21754:                              ; preds = %originalBB1752
  br label %6142, !dbg !1890

6142:                                             ; preds = %originalBBpart21754
  %6143 = load i32, i32* @x.17
  %6144 = load i32, i32* @y.18
  %6145 = sub i32 %6143, 1
  %6146 = mul i32 %6143, %6145
  %6147 = urem i32 %6146, 2
  %6148 = icmp eq i32 %6147, 0
  %6149 = icmp slt i32 %6144, 10
  %6150 = or i1 %6148, %6149
  br i1 %6150, label %originalBB1756, label %originalBB1756alteredBB

originalBB1756:                                   ; preds = %6142, %originalBB1756alteredBB
  %6151 = load i64, i64* %29, align 8, !dbg !1892
  %6152 = load i64, i64* %20, align 8, !dbg !1892
  %6153 = icmp ult i64 %6151, %6152, !dbg !1892
  %6154 = load i32, i32* @x.17
  %6155 = load i32, i32* @y.18
  %6156 = sub i32 %6154, 1
  %6157 = mul i32 %6154, %6156
  %6158 = urem i32 %6157, 2
  %6159 = icmp eq i32 %6158, 0
  %6160 = icmp slt i32 %6155, 10
  %6161 = or i1 %6159, %6160
  br i1 %6161, label %originalBBpart21758, label %originalBB1756alteredBB

originalBBpart21758:                              ; preds = %originalBB1756
  br i1 %6153, label %6162, label %6182, !dbg !1895

6162:                                             ; preds = %originalBBpart21758
  %6163 = load i32, i32* @x.17
  %6164 = load i32, i32* @y.18
  %6165 = sub i32 %6163, 1
  %6166 = mul i32 %6163, %6165
  %6167 = urem i32 %6166, 2
  %6168 = icmp eq i32 %6167, 0
  %6169 = icmp slt i32 %6164, 10
  %6170 = or i1 %6168, %6169
  br i1 %6170, label %originalBB1760, label %originalBB1760alteredBB

originalBB1760:                                   ; preds = %6162, %originalBB1760alteredBB
  %6171 = load i8*, i8** %19, align 8, !dbg !1892
  %6172 = load i64, i64* %29, align 8, !dbg !1892
  %6173 = getelementptr inbounds i8, i8* %6171, i64 %6172, !dbg !1892
  store i8 39, i8* %6173, align 1, !dbg !1892
  %6174 = load i32, i32* @x.17
  %6175 = load i32, i32* @y.18
  %6176 = sub i32 %6174, 1
  %6177 = mul i32 %6174, %6176
  %6178 = urem i32 %6177, 2
  %6179 = icmp eq i32 %6178, 0
  %6180 = icmp slt i32 %6175, 10
  %6181 = or i1 %6179, %6180
  br i1 %6181, label %originalBBpart21762, label %originalBB1760alteredBB

originalBBpart21762:                              ; preds = %originalBB1760
  br label %6182, !dbg !1892

6182:                                             ; preds = %originalBBpart21762, %originalBBpart21758
  %6183 = load i32, i32* @x.17
  %6184 = load i32, i32* @y.18
  %6185 = sub i32 %6183, 1
  %6186 = mul i32 %6183, %6185
  %6187 = urem i32 %6186, 2
  %6188 = icmp eq i32 %6187, 0
  %6189 = icmp slt i32 %6184, 10
  %6190 = or i1 %6188, %6189
  br i1 %6190, label %originalBB1764, label %originalBB1764alteredBB

originalBB1764:                                   ; preds = %6182, %originalBB1764alteredBB
  %6191 = load i64, i64* %29, align 8, !dbg !1895
  %6192 = add i64 %6191, 1, !dbg !1895
  store i64 %6192, i64* %29, align 8, !dbg !1895
  %6193 = load i32, i32* @x.17
  %6194 = load i32, i32* @y.18
  %6195 = sub i32 %6193, 1
  %6196 = mul i32 %6193, %6195
  %6197 = urem i32 %6196, 2
  %6198 = icmp eq i32 %6197, 0
  %6199 = icmp slt i32 %6194, 10
  %6200 = or i1 %6198, %6199
  br i1 %6200, label %originalBBpart21768, label %originalBB1764alteredBB

originalBBpart21768:                              ; preds = %originalBB1764
  br label %6201, !dbg !1895

6201:                                             ; preds = %originalBBpart21768
  %6202 = load i32, i32* @x.17
  %6203 = load i32, i32* @y.18
  %6204 = sub i32 %6202, 1
  %6205 = mul i32 %6202, %6204
  %6206 = urem i32 %6205, 2
  %6207 = icmp eq i32 %6206, 0
  %6208 = icmp slt i32 %6203, 10
  %6209 = or i1 %6207, %6208
  br i1 %6209, label %originalBB1770, label %originalBB1770alteredBB

originalBB1770:                                   ; preds = %6201, %originalBB1770alteredBB
  %6210 = load i32, i32* @x.17
  %6211 = load i32, i32* @y.18
  %6212 = sub i32 %6210, 1
  %6213 = mul i32 %6210, %6212
  %6214 = urem i32 %6213, 2
  %6215 = icmp eq i32 %6214, 0
  %6216 = icmp slt i32 %6211, 10
  %6217 = or i1 %6215, %6216
  br i1 %6217, label %originalBBpart21772, label %originalBB1770alteredBB

originalBBpart21772:                              ; preds = %originalBB1770
  br label %6218, !dbg !1890

6218:                                             ; preds = %originalBBpart21772
  %6219 = load i32, i32* @x.17
  %6220 = load i32, i32* @y.18
  %6221 = sub i32 %6219, 1
  %6222 = mul i32 %6219, %6221
  %6223 = urem i32 %6222, 2
  %6224 = icmp eq i32 %6223, 0
  %6225 = icmp slt i32 %6220, 10
  %6226 = or i1 %6224, %6225
  br i1 %6226, label %originalBB1774, label %originalBB1774alteredBB

originalBB1774:                                   ; preds = %6218, %originalBB1774alteredBB
  %6227 = load i64, i64* %29, align 8, !dbg !1896
  %6228 = load i64, i64* %20, align 8, !dbg !1896
  %6229 = icmp ult i64 %6227, %6228, !dbg !1896
  %6230 = load i32, i32* @x.17
  %6231 = load i32, i32* @y.18
  %6232 = sub i32 %6230, 1
  %6233 = mul i32 %6230, %6232
  %6234 = urem i32 %6233, 2
  %6235 = icmp eq i32 %6234, 0
  %6236 = icmp slt i32 %6231, 10
  %6237 = or i1 %6235, %6236
  br i1 %6237, label %originalBBpart21776, label %originalBB1774alteredBB

originalBBpart21776:                              ; preds = %originalBB1774
  br i1 %6229, label %6238, label %6258, !dbg !1899

6238:                                             ; preds = %originalBBpart21776
  %6239 = load i32, i32* @x.17
  %6240 = load i32, i32* @y.18
  %6241 = sub i32 %6239, 1
  %6242 = mul i32 %6239, %6241
  %6243 = urem i32 %6242, 2
  %6244 = icmp eq i32 %6243, 0
  %6245 = icmp slt i32 %6240, 10
  %6246 = or i1 %6244, %6245
  br i1 %6246, label %originalBB1778, label %originalBB1778alteredBB

originalBB1778:                                   ; preds = %6238, %originalBB1778alteredBB
  %6247 = load i8*, i8** %19, align 8, !dbg !1896
  %6248 = load i64, i64* %29, align 8, !dbg !1896
  %6249 = getelementptr inbounds i8, i8* %6247, i64 %6248, !dbg !1896
  store i8 39, i8* %6249, align 1, !dbg !1896
  %6250 = load i32, i32* @x.17
  %6251 = load i32, i32* @y.18
  %6252 = sub i32 %6250, 1
  %6253 = mul i32 %6250, %6252
  %6254 = urem i32 %6253, 2
  %6255 = icmp eq i32 %6254, 0
  %6256 = icmp slt i32 %6251, 10
  %6257 = or i1 %6255, %6256
  br i1 %6257, label %originalBBpart21780, label %originalBB1778alteredBB

originalBBpart21780:                              ; preds = %originalBB1778
  br label %6258, !dbg !1896

6258:                                             ; preds = %originalBBpart21780, %originalBBpart21776
  %6259 = load i32, i32* @x.17
  %6260 = load i32, i32* @y.18
  %6261 = sub i32 %6259, 1
  %6262 = mul i32 %6259, %6261
  %6263 = urem i32 %6262, 2
  %6264 = icmp eq i32 %6263, 0
  %6265 = icmp slt i32 %6260, 10
  %6266 = or i1 %6264, %6265
  br i1 %6266, label %originalBB1782, label %originalBB1782alteredBB

originalBB1782:                                   ; preds = %6258, %originalBB1782alteredBB
  %6267 = load i64, i64* %29, align 8, !dbg !1899
  %6268 = add i64 %6267, 1, !dbg !1899
  store i64 %6268, i64* %29, align 8, !dbg !1899
  %6269 = load i32, i32* @x.17
  %6270 = load i32, i32* @y.18
  %6271 = sub i32 %6269, 1
  %6272 = mul i32 %6269, %6271
  %6273 = urem i32 %6272, 2
  %6274 = icmp eq i32 %6273, 0
  %6275 = icmp slt i32 %6270, 10
  %6276 = or i1 %6274, %6275
  br i1 %6276, label %originalBBpart21793, label %originalBB1782alteredBB

originalBBpart21793:                              ; preds = %originalBB1782
  br label %6277, !dbg !1899

6277:                                             ; preds = %originalBBpart21793
  %6278 = load i32, i32* @x.17
  %6279 = load i32, i32* @y.18
  %6280 = sub i32 %6278, 1
  %6281 = mul i32 %6278, %6280
  %6282 = urem i32 %6281, 2
  %6283 = icmp eq i32 %6282, 0
  %6284 = icmp slt i32 %6279, 10
  %6285 = or i1 %6283, %6284
  br i1 %6285, label %originalBB1795, label %originalBB1795alteredBB

originalBB1795:                                   ; preds = %6277, %originalBB1795alteredBB
  store i8 0, i8* %36, align 1, !dbg !1890
  %6286 = load i32, i32* @x.17
  %6287 = load i32, i32* @y.18
  %6288 = sub i32 %6286, 1
  %6289 = mul i32 %6286, %6288
  %6290 = urem i32 %6289, 2
  %6291 = icmp eq i32 %6290, 0
  %6292 = icmp slt i32 %6287, 10
  %6293 = or i1 %6291, %6292
  br i1 %6293, label %originalBBpart21797, label %originalBB1795alteredBB

originalBBpart21797:                              ; preds = %originalBB1795
  br label %6294, !dbg !1890

6294:                                             ; preds = %originalBBpart21797, %originalBBpart21750, %originalBBpart21746
  %6295 = load i32, i32* @x.17
  %6296 = load i32, i32* @y.18
  %6297 = sub i32 %6295, 1
  %6298 = mul i32 %6295, %6297
  %6299 = urem i32 %6298, 2
  %6300 = icmp eq i32 %6299, 0
  %6301 = icmp slt i32 %6296, 10
  %6302 = or i1 %6300, %6301
  br i1 %6302, label %originalBB1799, label %originalBB1799alteredBB

originalBB1799:                                   ; preds = %6294, %originalBB1799alteredBB
  %6303 = load i32, i32* @x.17
  %6304 = load i32, i32* @y.18
  %6305 = sub i32 %6303, 1
  %6306 = mul i32 %6303, %6305
  %6307 = urem i32 %6306, 2
  %6308 = icmp eq i32 %6307, 0
  %6309 = icmp slt i32 %6304, 10
  %6310 = or i1 %6308, %6309
  br i1 %6310, label %originalBBpart21801, label %originalBB1799alteredBB

originalBBpart21801:                              ; preds = %originalBB1799
  br label %6311, !dbg !1889

6311:                                             ; preds = %originalBBpart21801
  %6312 = load i32, i32* @x.17
  %6313 = load i32, i32* @y.18
  %6314 = sub i32 %6312, 1
  %6315 = mul i32 %6312, %6314
  %6316 = urem i32 %6315, 2
  %6317 = icmp eq i32 %6316, 0
  %6318 = icmp slt i32 %6313, 10
  %6319 = or i1 %6317, %6318
  br i1 %6319, label %originalBB1803, label %originalBB1803alteredBB

originalBB1803:                                   ; preds = %6311, %originalBB1803alteredBB
  %6320 = load i32, i32* @x.17
  %6321 = load i32, i32* @y.18
  %6322 = sub i32 %6320, 1
  %6323 = mul i32 %6320, %6322
  %6324 = urem i32 %6323, 2
  %6325 = icmp eq i32 %6324, 0
  %6326 = icmp slt i32 %6321, 10
  %6327 = or i1 %6325, %6326
  br i1 %6327, label %originalBBpart21805, label %originalBB1803alteredBB

originalBBpart21805:                              ; preds = %originalBB1803
  br label %6328, !dbg !1900

6328:                                             ; preds = %originalBBpart21805
  %6329 = load i32, i32* @x.17
  %6330 = load i32, i32* @y.18
  %6331 = sub i32 %6329, 1
  %6332 = mul i32 %6329, %6331
  %6333 = urem i32 %6332, 2
  %6334 = icmp eq i32 %6333, 0
  %6335 = icmp slt i32 %6330, 10
  %6336 = or i1 %6334, %6335
  br i1 %6336, label %originalBB1807, label %originalBB1807alteredBB

originalBB1807:                                   ; preds = %6328, %originalBB1807alteredBB
  %6337 = load i64, i64* %29, align 8, !dbg !1901
  %6338 = load i64, i64* %20, align 8, !dbg !1901
  %6339 = icmp ult i64 %6337, %6338, !dbg !1901
  %6340 = load i32, i32* @x.17
  %6341 = load i32, i32* @y.18
  %6342 = sub i32 %6340, 1
  %6343 = mul i32 %6340, %6342
  %6344 = urem i32 %6343, 2
  %6345 = icmp eq i32 %6344, 0
  %6346 = icmp slt i32 %6341, 10
  %6347 = or i1 %6345, %6346
  br i1 %6347, label %originalBBpart21809, label %originalBB1807alteredBB

originalBBpart21809:                              ; preds = %originalBB1807
  br i1 %6339, label %6348, label %6369, !dbg !1904

6348:                                             ; preds = %originalBBpart21809
  %6349 = load i32, i32* @x.17
  %6350 = load i32, i32* @y.18
  %6351 = sub i32 %6349, 1
  %6352 = mul i32 %6349, %6351
  %6353 = urem i32 %6352, 2
  %6354 = icmp eq i32 %6353, 0
  %6355 = icmp slt i32 %6350, 10
  %6356 = or i1 %6354, %6355
  br i1 %6356, label %originalBB1811, label %originalBB1811alteredBB

originalBB1811:                                   ; preds = %6348, %originalBB1811alteredBB
  %6357 = load i8, i8* %39, align 1, !dbg !1901
  %6358 = load i8*, i8** %19, align 8, !dbg !1901
  %6359 = load i64, i64* %29, align 8, !dbg !1901
  %6360 = getelementptr inbounds i8, i8* %6358, i64 %6359, !dbg !1901
  store i8 %6357, i8* %6360, align 1, !dbg !1901
  %6361 = load i32, i32* @x.17
  %6362 = load i32, i32* @y.18
  %6363 = sub i32 %6361, 1
  %6364 = mul i32 %6361, %6363
  %6365 = urem i32 %6364, 2
  %6366 = icmp eq i32 %6365, 0
  %6367 = icmp slt i32 %6362, 10
  %6368 = or i1 %6366, %6367
  br i1 %6368, label %originalBBpart21813, label %originalBB1811alteredBB

originalBBpart21813:                              ; preds = %originalBB1811
  br label %6369, !dbg !1901

6369:                                             ; preds = %originalBBpart21813, %originalBBpart21809
  %6370 = load i32, i32* @x.17
  %6371 = load i32, i32* @y.18
  %6372 = sub i32 %6370, 1
  %6373 = mul i32 %6370, %6372
  %6374 = urem i32 %6373, 2
  %6375 = icmp eq i32 %6374, 0
  %6376 = icmp slt i32 %6371, 10
  %6377 = or i1 %6375, %6376
  br i1 %6377, label %originalBB1815, label %originalBB1815alteredBB

originalBB1815:                                   ; preds = %6369, %originalBB1815alteredBB
  %6378 = load i64, i64* %29, align 8, !dbg !1904
  %6379 = add i64 %6378, 1, !dbg !1904
  store i64 %6379, i64* %29, align 8, !dbg !1904
  %6380 = load i32, i32* @x.17
  %6381 = load i32, i32* @y.18
  %6382 = sub i32 %6380, 1
  %6383 = mul i32 %6380, %6382
  %6384 = urem i32 %6383, 2
  %6385 = icmp eq i32 %6384, 0
  %6386 = icmp slt i32 %6381, 10
  %6387 = or i1 %6385, %6386
  br i1 %6387, label %originalBBpart21818, label %originalBB1815alteredBB

originalBBpart21818:                              ; preds = %originalBB1815
  br label %6388, !dbg !1904

6388:                                             ; preds = %originalBBpart21818
  %6389 = load i32, i32* @x.17
  %6390 = load i32, i32* @y.18
  %6391 = sub i32 %6389, 1
  %6392 = mul i32 %6389, %6391
  %6393 = urem i32 %6392, 2
  %6394 = icmp eq i32 %6393, 0
  %6395 = icmp slt i32 %6390, 10
  %6396 = or i1 %6394, %6395
  br i1 %6396, label %originalBB1820, label %originalBB1820alteredBB

originalBB1820:                                   ; preds = %6388, %originalBB1820alteredBB
  %6397 = load i8, i8* %43, align 1, !dbg !1905
  %6398 = trunc i8 %6397 to i1, !dbg !1905
  %6399 = load i32, i32* @x.17
  %6400 = load i32, i32* @y.18
  %6401 = sub i32 %6399, 1
  %6402 = mul i32 %6399, %6401
  %6403 = urem i32 %6402, 2
  %6404 = icmp eq i32 %6403, 0
  %6405 = icmp slt i32 %6400, 10
  %6406 = or i1 %6404, %6405
  br i1 %6406, label %originalBBpart21822, label %originalBB1820alteredBB

originalBBpart21822:                              ; preds = %originalBB1820
  br i1 %6398, label %6424, label %6407, !dbg !1907

6407:                                             ; preds = %originalBBpart21822
  %6408 = load i32, i32* @x.17
  %6409 = load i32, i32* @y.18
  %6410 = sub i32 %6408, 1
  %6411 = mul i32 %6408, %6410
  %6412 = urem i32 %6411, 2
  %6413 = icmp eq i32 %6412, 0
  %6414 = icmp slt i32 %6409, 10
  %6415 = or i1 %6413, %6414
  br i1 %6415, label %originalBB1824, label %originalBB1824alteredBB

originalBB1824:                                   ; preds = %6407, %originalBB1824alteredBB
  store i8 0, i8* %38, align 1, !dbg !1908
  %6416 = load i32, i32* @x.17
  %6417 = load i32, i32* @y.18
  %6418 = sub i32 %6416, 1
  %6419 = mul i32 %6416, %6418
  %6420 = urem i32 %6419, 2
  %6421 = icmp eq i32 %6420, 0
  %6422 = icmp slt i32 %6417, 10
  %6423 = or i1 %6421, %6422
  br i1 %6423, label %originalBBpart21826, label %originalBB1824alteredBB

originalBBpart21826:                              ; preds = %originalBB1824
  br label %6424, !dbg !1909

6424:                                             ; preds = %originalBBpart21826, %originalBBpart21822
  %6425 = load i32, i32* @x.17
  %6426 = load i32, i32* @y.18
  %6427 = sub i32 %6425, 1
  %6428 = mul i32 %6425, %6427
  %6429 = urem i32 %6428, 2
  %6430 = icmp eq i32 %6429, 0
  %6431 = icmp slt i32 %6426, 10
  %6432 = or i1 %6430, %6431
  br i1 %6432, label %originalBB1828, label %originalBB1828alteredBB

originalBB1828:                                   ; preds = %6424, %originalBB1828alteredBB
  %6433 = load i32, i32* @x.17
  %6434 = load i32, i32* @y.18
  %6435 = sub i32 %6433, 1
  %6436 = mul i32 %6433, %6435
  %6437 = urem i32 %6436, 2
  %6438 = icmp eq i32 %6437, 0
  %6439 = icmp slt i32 %6434, 10
  %6440 = or i1 %6438, %6439
  br i1 %6440, label %originalBBpart21830, label %originalBB1828alteredBB

originalBBpart21830:                              ; preds = %originalBB1828
  br label %6441, !dbg !1910

6441:                                             ; preds = %originalBBpart21830, %originalBBpart2484
  %6442 = load i32, i32* @x.17
  %6443 = load i32, i32* @y.18
  %6444 = sub i32 %6442, 1
  %6445 = mul i32 %6442, %6444
  %6446 = urem i32 %6445, 2
  %6447 = icmp eq i32 %6446, 0
  %6448 = icmp slt i32 %6443, 10
  %6449 = or i1 %6447, %6448
  br i1 %6449, label %originalBB1832, label %originalBB1832alteredBB

originalBB1832:                                   ; preds = %6441, %originalBB1832alteredBB
  %6450 = load i64, i64* %28, align 8, !dbg !1911
  %6451 = add i64 %6450, 1, !dbg !1911
  store i64 %6451, i64* %28, align 8, !dbg !1911
  %6452 = load i32, i32* @x.17
  %6453 = load i32, i32* @y.18
  %6454 = sub i32 %6452, 1
  %6455 = mul i32 %6452, %6454
  %6456 = urem i32 %6455, 2
  %6457 = icmp eq i32 %6456, 0
  %6458 = icmp slt i32 %6453, 10
  %6459 = or i1 %6457, %6458
  br i1 %6459, label %originalBBpart21841, label %originalBB1832alteredBB

originalBBpart21841:                              ; preds = %originalBB1832
  br label %762, !dbg !1912, !llvm.loop !1913

6460:                                             ; preds = %originalBBpart2209
  %6461 = load i32, i32* @x.17
  %6462 = load i32, i32* @y.18
  %6463 = sub i32 %6461, 1
  %6464 = mul i32 %6461, %6463
  %6465 = urem i32 %6464, 2
  %6466 = icmp eq i32 %6465, 0
  %6467 = icmp slt i32 %6462, 10
  %6468 = or i1 %6466, %6467
  br i1 %6468, label %originalBB1843, label %originalBB1843alteredBB

originalBB1843:                                   ; preds = %6460, %originalBB1843alteredBB
  %6469 = load i64, i64* %29, align 8, !dbg !1915
  %6470 = icmp eq i64 %6469, 0, !dbg !1917
  %6471 = load i32, i32* @x.17
  %6472 = load i32, i32* @y.18
  %6473 = sub i32 %6471, 1
  %6474 = mul i32 %6471, %6473
  %6475 = urem i32 %6474, 2
  %6476 = icmp eq i32 %6475, 0
  %6477 = icmp slt i32 %6472, 10
  %6478 = or i1 %6476, %6477
  br i1 %6478, label %originalBBpart21845, label %originalBB1843alteredBB

originalBBpart21845:                              ; preds = %originalBB1843
  br i1 %6470, label %6479, label %6534, !dbg !1918

6479:                                             ; preds = %originalBBpart21845
  %6480 = load i32, i32* @x.17
  %6481 = load i32, i32* @y.18
  %6482 = sub i32 %6480, 1
  %6483 = mul i32 %6480, %6482
  %6484 = urem i32 %6483, 2
  %6485 = icmp eq i32 %6484, 0
  %6486 = icmp slt i32 %6481, 10
  %6487 = or i1 %6485, %6486
  br i1 %6487, label %originalBB1847, label %originalBB1847alteredBB

originalBB1847:                                   ; preds = %6479, %originalBB1847alteredBB
  %6488 = load i32, i32* %23, align 4, !dbg !1919
  %6489 = icmp eq i32 %6488, 2, !dbg !1920
  %6490 = load i32, i32* @x.17
  %6491 = load i32, i32* @y.18
  %6492 = sub i32 %6490, 1
  %6493 = mul i32 %6490, %6492
  %6494 = urem i32 %6493, 2
  %6495 = icmp eq i32 %6494, 0
  %6496 = icmp slt i32 %6491, 10
  %6497 = or i1 %6495, %6496
  br i1 %6497, label %originalBBpart21849, label %originalBB1847alteredBB

originalBBpart21849:                              ; preds = %originalBB1847
  br i1 %6489, label %6498, label %6534, !dbg !1921

6498:                                             ; preds = %originalBBpart21849
  %6499 = load i32, i32* @x.17
  %6500 = load i32, i32* @y.18
  %6501 = sub i32 %6499, 1
  %6502 = mul i32 %6499, %6501
  %6503 = urem i32 %6502, 2
  %6504 = icmp eq i32 %6503, 0
  %6505 = icmp slt i32 %6500, 10
  %6506 = or i1 %6504, %6505
  br i1 %6506, label %originalBB1851, label %originalBB1851alteredBB

originalBB1851:                                   ; preds = %6498, %originalBB1851alteredBB
  %6507 = load i8, i8* %35, align 1, !dbg !1922
  %6508 = trunc i8 %6507 to i1, !dbg !1922
  %6509 = load i32, i32* @x.17
  %6510 = load i32, i32* @y.18
  %6511 = sub i32 %6509, 1
  %6512 = mul i32 %6509, %6511
  %6513 = urem i32 %6512, 2
  %6514 = icmp eq i32 %6513, 0
  %6515 = icmp slt i32 %6510, 10
  %6516 = or i1 %6514, %6515
  br i1 %6516, label %originalBBpart21853, label %originalBB1851alteredBB

originalBBpart21853:                              ; preds = %originalBB1851
  br i1 %6508, label %6517, label %6534, !dbg !1923

6517:                                             ; preds = %originalBBpart21853
  %6518 = load i32, i32* @x.17
  %6519 = load i32, i32* @y.18
  %6520 = sub i32 %6518, 1
  %6521 = mul i32 %6518, %6520
  %6522 = urem i32 %6521, 2
  %6523 = icmp eq i32 %6522, 0
  %6524 = icmp slt i32 %6519, 10
  %6525 = or i1 %6523, %6524
  br i1 %6525, label %originalBB1855, label %originalBB1855alteredBB

originalBB1855:                                   ; preds = %6517, %originalBB1855alteredBB
  %6526 = load i32, i32* @x.17
  %6527 = load i32, i32* @y.18
  %6528 = sub i32 %6526, 1
  %6529 = mul i32 %6526, %6528
  %6530 = urem i32 %6529, 2
  %6531 = icmp eq i32 %6530, 0
  %6532 = icmp slt i32 %6527, 10
  %6533 = or i1 %6531, %6532
  br i1 %6533, label %originalBBpart21857, label %originalBB1855alteredBB

originalBBpart21857:                              ; preds = %originalBB1855
  br label %6990, !dbg !1924

6534:                                             ; preds = %originalBBpart21853, %originalBBpart21849, %originalBBpart21845
  %6535 = load i32, i32* @x.17
  %6536 = load i32, i32* @y.18
  %6537 = sub i32 %6535, 1
  %6538 = mul i32 %6535, %6537
  %6539 = urem i32 %6538, 2
  %6540 = icmp eq i32 %6539, 0
  %6541 = icmp slt i32 %6536, 10
  %6542 = or i1 %6540, %6541
  br i1 %6542, label %originalBB1859, label %originalBB1859alteredBB

originalBB1859:                                   ; preds = %6534, %originalBB1859alteredBB
  %6543 = load i32, i32* %23, align 4, !dbg !1925
  %6544 = icmp eq i32 %6543, 2, !dbg !1927
  %6545 = load i32, i32* @x.17
  %6546 = load i32, i32* @y.18
  %6547 = sub i32 %6545, 1
  %6548 = mul i32 %6545, %6547
  %6549 = urem i32 %6548, 2
  %6550 = icmp eq i32 %6549, 0
  %6551 = icmp slt i32 %6546, 10
  %6552 = or i1 %6550, %6551
  br i1 %6552, label %originalBBpart21861, label %originalBB1859alteredBB

originalBBpart21861:                              ; preds = %originalBB1859
  br i1 %6544, label %6553, label %6726, !dbg !1928

6553:                                             ; preds = %originalBBpart21861
  %6554 = load i32, i32* @x.17
  %6555 = load i32, i32* @y.18
  %6556 = sub i32 %6554, 1
  %6557 = mul i32 %6554, %6556
  %6558 = urem i32 %6557, 2
  %6559 = icmp eq i32 %6558, 0
  %6560 = icmp slt i32 %6555, 10
  %6561 = or i1 %6559, %6560
  br i1 %6561, label %originalBB1863, label %originalBB1863alteredBB

originalBB1863:                                   ; preds = %6553, %originalBB1863alteredBB
  %6562 = load i8, i8* %35, align 1, !dbg !1929
  %6563 = trunc i8 %6562 to i1, !dbg !1929
  %6564 = load i32, i32* @x.17
  %6565 = load i32, i32* @y.18
  %6566 = sub i32 %6564, 1
  %6567 = mul i32 %6564, %6566
  %6568 = urem i32 %6567, 2
  %6569 = icmp eq i32 %6568, 0
  %6570 = icmp slt i32 %6565, 10
  %6571 = or i1 %6569, %6570
  br i1 %6571, label %originalBBpart21865, label %originalBB1863alteredBB

originalBBpart21865:                              ; preds = %originalBB1863
  br i1 %6563, label %6726, label %6572, !dbg !1930

6572:                                             ; preds = %originalBBpart21865
  %6573 = load i32, i32* @x.17
  %6574 = load i32, i32* @y.18
  %6575 = sub i32 %6573, 1
  %6576 = mul i32 %6573, %6575
  %6577 = urem i32 %6576, 2
  %6578 = icmp eq i32 %6577, 0
  %6579 = icmp slt i32 %6574, 10
  %6580 = or i1 %6578, %6579
  br i1 %6580, label %originalBB1867, label %originalBB1867alteredBB

originalBB1867:                                   ; preds = %6572, %originalBB1867alteredBB
  %6581 = load i8, i8* %37, align 1, !dbg !1931
  %6582 = trunc i8 %6581 to i1, !dbg !1931
  %6583 = load i32, i32* @x.17
  %6584 = load i32, i32* @y.18
  %6585 = sub i32 %6583, 1
  %6586 = mul i32 %6583, %6585
  %6587 = urem i32 %6586, 2
  %6588 = icmp eq i32 %6587, 0
  %6589 = icmp slt i32 %6584, 10
  %6590 = or i1 %6588, %6589
  br i1 %6590, label %originalBBpart21869, label %originalBB1867alteredBB

originalBBpart21869:                              ; preds = %originalBB1867
  br i1 %6582, label %6591, label %6726, !dbg !1932

6591:                                             ; preds = %originalBBpart21869
  %6592 = load i32, i32* @x.17
  %6593 = load i32, i32* @y.18
  %6594 = sub i32 %6592, 1
  %6595 = mul i32 %6592, %6594
  %6596 = urem i32 %6595, 2
  %6597 = icmp eq i32 %6596, 0
  %6598 = icmp slt i32 %6593, 10
  %6599 = or i1 %6597, %6598
  br i1 %6599, label %originalBB1871, label %originalBB1871alteredBB

originalBB1871:                                   ; preds = %6591, %originalBB1871alteredBB
  %6600 = load i8, i8* %38, align 1, !dbg !1933
  %6601 = trunc i8 %6600 to i1, !dbg !1933
  %6602 = load i32, i32* @x.17
  %6603 = load i32, i32* @y.18
  %6604 = sub i32 %6602, 1
  %6605 = mul i32 %6602, %6604
  %6606 = urem i32 %6605, 2
  %6607 = icmp eq i32 %6606, 0
  %6608 = icmp slt i32 %6603, 10
  %6609 = or i1 %6607, %6608
  br i1 %6609, label %originalBBpart21873, label %originalBB1871alteredBB

originalBBpart21873:                              ; preds = %originalBB1871
  br i1 %6601, label %6610, label %6636, !dbg !1936

6610:                                             ; preds = %originalBBpart21873
  %6611 = load i32, i32* @x.17
  %6612 = load i32, i32* @y.18
  %6613 = sub i32 %6611, 1
  %6614 = mul i32 %6611, %6613
  %6615 = urem i32 %6614, 2
  %6616 = icmp eq i32 %6615, 0
  %6617 = icmp slt i32 %6612, 10
  %6618 = or i1 %6616, %6617
  br i1 %6618, label %originalBB1875, label %originalBB1875alteredBB

originalBB1875:                                   ; preds = %6610, %originalBB1875alteredBB
  %6619 = load i8*, i8** %19, align 8, !dbg !1937
  %6620 = load i64, i64* %30, align 8, !dbg !1938
  %6621 = load i8*, i8** %21, align 8, !dbg !1939
  %6622 = load i64, i64* %22, align 8, !dbg !1940
  %6623 = load i32, i32* %24, align 4, !dbg !1941
  %6624 = load i32*, i32** %25, align 8, !dbg !1942
  %6625 = load i8*, i8** %26, align 8, !dbg !1943
  %6626 = load i8*, i8** %27, align 8, !dbg !1944
  %6627 = call i64 @quotearg_buffer_restyled(i8* %6619, i64 %6620, i8* %6621, i64 %6622, i32 5, i32 %6623, i32* %6624, i8* %6625, i8* %6626), !dbg !1945
  store i64 %6627, i64* %18, align 8, !dbg !1946
  %6628 = load i32, i32* @x.17
  %6629 = load i32, i32* @y.18
  %6630 = sub i32 %6628, 1
  %6631 = mul i32 %6628, %6630
  %6632 = urem i32 %6631, 2
  %6633 = icmp eq i32 %6632, 0
  %6634 = icmp slt i32 %6629, 10
  %6635 = or i1 %6633, %6634
  br i1 %6635, label %originalBBpart21877, label %originalBB1875alteredBB

originalBBpart21877:                              ; preds = %originalBB1875
  br label %7072, !dbg !1946

6636:                                             ; preds = %originalBBpart21873
  %6637 = load i32, i32* @x.17
  %6638 = load i32, i32* @y.18
  %6639 = sub i32 %6637, 1
  %6640 = mul i32 %6637, %6639
  %6641 = urem i32 %6640, 2
  %6642 = icmp eq i32 %6641, 0
  %6643 = icmp slt i32 %6638, 10
  %6644 = or i1 %6642, %6643
  br i1 %6644, label %originalBB1879, label %originalBB1879alteredBB

originalBB1879:                                   ; preds = %6636, %originalBB1879alteredBB
  %6645 = load i64, i64* %20, align 8, !dbg !1947
  %6646 = icmp ne i64 %6645, 0, !dbg !1947
  %6647 = load i32, i32* @x.17
  %6648 = load i32, i32* @y.18
  %6649 = sub i32 %6647, 1
  %6650 = mul i32 %6647, %6649
  %6651 = urem i32 %6650, 2
  %6652 = icmp eq i32 %6651, 0
  %6653 = icmp slt i32 %6648, 10
  %6654 = or i1 %6652, %6653
  br i1 %6654, label %originalBBpart21881, label %originalBB1879alteredBB

originalBBpart21881:                              ; preds = %originalBB1879
  br i1 %6646, label %6692, label %6655, !dbg !1949

6655:                                             ; preds = %originalBBpart21881
  %6656 = load i32, i32* @x.17
  %6657 = load i32, i32* @y.18
  %6658 = sub i32 %6656, 1
  %6659 = mul i32 %6656, %6658
  %6660 = urem i32 %6659, 2
  %6661 = icmp eq i32 %6660, 0
  %6662 = icmp slt i32 %6657, 10
  %6663 = or i1 %6661, %6662
  br i1 %6663, label %originalBB1883, label %originalBB1883alteredBB

originalBB1883:                                   ; preds = %6655, %originalBB1883alteredBB
  %6664 = load i64, i64* %30, align 8, !dbg !1950
  %6665 = icmp ne i64 %6664, 0, !dbg !1950
  %6666 = load i32, i32* @x.17
  %6667 = load i32, i32* @y.18
  %6668 = sub i32 %6666, 1
  %6669 = mul i32 %6666, %6668
  %6670 = urem i32 %6669, 2
  %6671 = icmp eq i32 %6670, 0
  %6672 = icmp slt i32 %6667, 10
  %6673 = or i1 %6671, %6672
  br i1 %6673, label %originalBBpart21885, label %originalBB1883alteredBB

originalBBpart21885:                              ; preds = %originalBB1883
  br i1 %6665, label %6674, label %6692, !dbg !1951

6674:                                             ; preds = %originalBBpart21885
  %6675 = load i32, i32* @x.17
  %6676 = load i32, i32* @y.18
  %6677 = sub i32 %6675, 1
  %6678 = mul i32 %6675, %6677
  %6679 = urem i32 %6678, 2
  %6680 = icmp eq i32 %6679, 0
  %6681 = icmp slt i32 %6676, 10
  %6682 = or i1 %6680, %6681
  br i1 %6682, label %originalBB1887, label %originalBB1887alteredBB

originalBB1887:                                   ; preds = %6674, %originalBB1887alteredBB
  %6683 = load i64, i64* %30, align 8, !dbg !1952
  store i64 %6683, i64* %20, align 8, !dbg !1954
  store i64 0, i64* %29, align 8, !dbg !1955
  %6684 = load i32, i32* @x.17
  %6685 = load i32, i32* @y.18
  %6686 = sub i32 %6684, 1
  %6687 = mul i32 %6684, %6686
  %6688 = urem i32 %6687, 2
  %6689 = icmp eq i32 %6688, 0
  %6690 = icmp slt i32 %6685, 10
  %6691 = or i1 %6689, %6690
  br i1 %6691, label %originalBBpart21889, label %originalBB1887alteredBB

originalBBpart21889:                              ; preds = %originalBB1887
  br label %66, !dbg !1956

6692:                                             ; preds = %originalBBpart21885, %originalBBpart21881
  %6693 = load i32, i32* @x.17
  %6694 = load i32, i32* @y.18
  %6695 = sub i32 %6693, 1
  %6696 = mul i32 %6693, %6695
  %6697 = urem i32 %6696, 2
  %6698 = icmp eq i32 %6697, 0
  %6699 = icmp slt i32 %6694, 10
  %6700 = or i1 %6698, %6699
  br i1 %6700, label %originalBB1891, label %originalBB1891alteredBB

originalBB1891:                                   ; preds = %6692, %originalBB1891alteredBB
  %6701 = load i32, i32* @x.17
  %6702 = load i32, i32* @y.18
  %6703 = sub i32 %6701, 1
  %6704 = mul i32 %6701, %6703
  %6705 = urem i32 %6704, 2
  %6706 = icmp eq i32 %6705, 0
  %6707 = icmp slt i32 %6702, 10
  %6708 = or i1 %6706, %6707
  br i1 %6708, label %originalBBpart21893, label %originalBB1891alteredBB

originalBBpart21893:                              ; preds = %originalBB1891
  br label %6709

6709:                                             ; preds = %originalBBpart21893
  %6710 = load i32, i32* @x.17
  %6711 = load i32, i32* @y.18
  %6712 = sub i32 %6710, 1
  %6713 = mul i32 %6710, %6712
  %6714 = urem i32 %6713, 2
  %6715 = icmp eq i32 %6714, 0
  %6716 = icmp slt i32 %6711, 10
  %6717 = or i1 %6715, %6716
  br i1 %6717, label %originalBB1895, label %originalBB1895alteredBB

originalBB1895:                                   ; preds = %6709, %originalBB1895alteredBB
  %6718 = load i32, i32* @x.17
  %6719 = load i32, i32* @y.18
  %6720 = sub i32 %6718, 1
  %6721 = mul i32 %6718, %6720
  %6722 = urem i32 %6721, 2
  %6723 = icmp eq i32 %6722, 0
  %6724 = icmp slt i32 %6719, 10
  %6725 = or i1 %6723, %6724
  br i1 %6725, label %originalBBpart21897, label %originalBB1895alteredBB

originalBBpart21897:                              ; preds = %originalBB1895
  br label %6726, !dbg !1957

6726:                                             ; preds = %originalBBpart21897, %originalBBpart21869, %originalBBpart21865, %originalBBpart21861
  %6727 = load i32, i32* @x.17
  %6728 = load i32, i32* @y.18
  %6729 = sub i32 %6727, 1
  %6730 = mul i32 %6727, %6729
  %6731 = urem i32 %6730, 2
  %6732 = icmp eq i32 %6731, 0
  %6733 = icmp slt i32 %6728, 10
  %6734 = or i1 %6732, %6733
  br i1 %6734, label %originalBB1899, label %originalBB1899alteredBB

originalBB1899:                                   ; preds = %6726, %originalBB1899alteredBB
  %6735 = load i8*, i8** %31, align 8, !dbg !1958
  %6736 = icmp ne i8* %6735, null, !dbg !1958
  %6737 = load i32, i32* @x.17
  %6738 = load i32, i32* @y.18
  %6739 = sub i32 %6737, 1
  %6740 = mul i32 %6737, %6739
  %6741 = urem i32 %6740, 2
  %6742 = icmp eq i32 %6741, 0
  %6743 = icmp slt i32 %6738, 10
  %6744 = or i1 %6742, %6743
  br i1 %6744, label %originalBBpart21901, label %originalBB1899alteredBB

originalBBpart21901:                              ; preds = %originalBB1899
  br i1 %6736, label %6745, label %6932, !dbg !1960

6745:                                             ; preds = %originalBBpart21901
  %6746 = load i32, i32* @x.17
  %6747 = load i32, i32* @y.18
  %6748 = sub i32 %6746, 1
  %6749 = mul i32 %6746, %6748
  %6750 = urem i32 %6749, 2
  %6751 = icmp eq i32 %6750, 0
  %6752 = icmp slt i32 %6747, 10
  %6753 = or i1 %6751, %6752
  br i1 %6753, label %originalBB1903, label %originalBB1903alteredBB

originalBB1903:                                   ; preds = %6745, %originalBB1903alteredBB
  %6754 = load i8, i8* %35, align 1, !dbg !1961
  %6755 = trunc i8 %6754 to i1, !dbg !1961
  %6756 = load i32, i32* @x.17
  %6757 = load i32, i32* @y.18
  %6758 = sub i32 %6756, 1
  %6759 = mul i32 %6756, %6758
  %6760 = urem i32 %6759, 2
  %6761 = icmp eq i32 %6760, 0
  %6762 = icmp slt i32 %6757, 10
  %6763 = or i1 %6761, %6762
  br i1 %6763, label %originalBBpart21905, label %originalBB1903alteredBB

originalBBpart21905:                              ; preds = %originalBB1903
  br i1 %6755, label %6932, label %6764, !dbg !1962

6764:                                             ; preds = %originalBBpart21905
  %6765 = load i32, i32* @x.17
  %6766 = load i32, i32* @y.18
  %6767 = sub i32 %6765, 1
  %6768 = mul i32 %6765, %6767
  %6769 = urem i32 %6768, 2
  %6770 = icmp eq i32 %6769, 0
  %6771 = icmp slt i32 %6766, 10
  %6772 = or i1 %6770, %6771
  br i1 %6772, label %originalBB1907, label %originalBB1907alteredBB

originalBB1907:                                   ; preds = %6764, %originalBB1907alteredBB
  %6773 = load i32, i32* @x.17
  %6774 = load i32, i32* @y.18
  %6775 = sub i32 %6773, 1
  %6776 = mul i32 %6773, %6775
  %6777 = urem i32 %6776, 2
  %6778 = icmp eq i32 %6777, 0
  %6779 = icmp slt i32 %6774, 10
  %6780 = or i1 %6778, %6779
  br i1 %6780, label %originalBBpart21909, label %originalBB1907alteredBB

originalBBpart21909:                              ; preds = %originalBB1907
  br label %6781, !dbg !1963

6781:                                             ; preds = %originalBBpart21947, %originalBBpart21909
  %6782 = load i32, i32* @x.17
  %6783 = load i32, i32* @y.18
  %6784 = sub i32 %6782, 1
  %6785 = mul i32 %6782, %6784
  %6786 = urem i32 %6785, 2
  %6787 = icmp eq i32 %6786, 0
  %6788 = icmp slt i32 %6783, 10
  %6789 = or i1 %6787, %6788
  br i1 %6789, label %originalBB1911, label %originalBB1911alteredBB

originalBB1911:                                   ; preds = %6781, %originalBB1911alteredBB
  %6790 = load i8*, i8** %31, align 8, !dbg !1964
  %6791 = load i8, i8* %6790, align 1, !dbg !1967
  %6792 = icmp ne i8 %6791, 0, !dbg !1968
  %6793 = load i32, i32* @x.17
  %6794 = load i32, i32* @y.18
  %6795 = sub i32 %6793, 1
  %6796 = mul i32 %6793, %6795
  %6797 = urem i32 %6796, 2
  %6798 = icmp eq i32 %6797, 0
  %6799 = icmp slt i32 %6794, 10
  %6800 = or i1 %6798, %6799
  br i1 %6800, label %originalBBpart21913, label %originalBB1911alteredBB

originalBBpart21913:                              ; preds = %originalBB1911
  br i1 %6792, label %6801, label %6915, !dbg !1968

6801:                                             ; preds = %originalBBpart21913
  %6802 = load i32, i32* @x.17
  %6803 = load i32, i32* @y.18
  %6804 = sub i32 %6802, 1
  %6805 = mul i32 %6802, %6804
  %6806 = urem i32 %6805, 2
  %6807 = icmp eq i32 %6806, 0
  %6808 = icmp slt i32 %6803, 10
  %6809 = or i1 %6807, %6808
  br i1 %6809, label %originalBB1915, label %originalBB1915alteredBB

originalBB1915:                                   ; preds = %6801, %originalBB1915alteredBB
  %6810 = load i32, i32* @x.17
  %6811 = load i32, i32* @y.18
  %6812 = sub i32 %6810, 1
  %6813 = mul i32 %6810, %6812
  %6814 = urem i32 %6813, 2
  %6815 = icmp eq i32 %6814, 0
  %6816 = icmp slt i32 %6811, 10
  %6817 = or i1 %6815, %6816
  br i1 %6817, label %originalBBpart21917, label %originalBB1915alteredBB

originalBBpart21917:                              ; preds = %originalBB1915
  br label %6818, !dbg !1969

6818:                                             ; preds = %originalBBpart21917
  %6819 = load i32, i32* @x.17
  %6820 = load i32, i32* @y.18
  %6821 = sub i32 %6819, 1
  %6822 = mul i32 %6819, %6821
  %6823 = urem i32 %6822, 2
  %6824 = icmp eq i32 %6823, 0
  %6825 = icmp slt i32 %6820, 10
  %6826 = or i1 %6824, %6825
  br i1 %6826, label %originalBB1919, label %originalBB1919alteredBB

originalBB1919:                                   ; preds = %6818, %originalBB1919alteredBB
  %6827 = load i64, i64* %29, align 8, !dbg !1970
  %6828 = load i64, i64* %20, align 8, !dbg !1970
  %6829 = icmp ult i64 %6827, %6828, !dbg !1970
  %6830 = load i32, i32* @x.17
  %6831 = load i32, i32* @y.18
  %6832 = sub i32 %6830, 1
  %6833 = mul i32 %6830, %6832
  %6834 = urem i32 %6833, 2
  %6835 = icmp eq i32 %6834, 0
  %6836 = icmp slt i32 %6831, 10
  %6837 = or i1 %6835, %6836
  br i1 %6837, label %originalBBpart21921, label %originalBB1919alteredBB

originalBBpart21921:                              ; preds = %originalBB1919
  br i1 %6829, label %6838, label %6860, !dbg !1973

6838:                                             ; preds = %originalBBpart21921
  %6839 = load i32, i32* @x.17
  %6840 = load i32, i32* @y.18
  %6841 = sub i32 %6839, 1
  %6842 = mul i32 %6839, %6841
  %6843 = urem i32 %6842, 2
  %6844 = icmp eq i32 %6843, 0
  %6845 = icmp slt i32 %6840, 10
  %6846 = or i1 %6844, %6845
  br i1 %6846, label %originalBB1923, label %originalBB1923alteredBB

originalBB1923:                                   ; preds = %6838, %originalBB1923alteredBB
  %6847 = load i8*, i8** %31, align 8, !dbg !1970
  %6848 = load i8, i8* %6847, align 1, !dbg !1970
  %6849 = load i8*, i8** %19, align 8, !dbg !1970
  %6850 = load i64, i64* %29, align 8, !dbg !1970
  %6851 = getelementptr inbounds i8, i8* %6849, i64 %6850, !dbg !1970
  store i8 %6848, i8* %6851, align 1, !dbg !1970
  %6852 = load i32, i32* @x.17
  %6853 = load i32, i32* @y.18
  %6854 = sub i32 %6852, 1
  %6855 = mul i32 %6852, %6854
  %6856 = urem i32 %6855, 2
  %6857 = icmp eq i32 %6856, 0
  %6858 = icmp slt i32 %6853, 10
  %6859 = or i1 %6857, %6858
  br i1 %6859, label %originalBBpart21925, label %originalBB1923alteredBB

originalBBpart21925:                              ; preds = %originalBB1923
  br label %6860, !dbg !1970

6860:                                             ; preds = %originalBBpart21925, %originalBBpart21921
  %6861 = load i32, i32* @x.17
  %6862 = load i32, i32* @y.18
  %6863 = sub i32 %6861, 1
  %6864 = mul i32 %6861, %6863
  %6865 = urem i32 %6864, 2
  %6866 = icmp eq i32 %6865, 0
  %6867 = icmp slt i32 %6862, 10
  %6868 = or i1 %6866, %6867
  br i1 %6868, label %originalBB1927, label %originalBB1927alteredBB

originalBB1927:                                   ; preds = %6860, %originalBB1927alteredBB
  %6869 = load i64, i64* %29, align 8, !dbg !1973
  %6870 = add i64 %6869, 1, !dbg !1973
  store i64 %6870, i64* %29, align 8, !dbg !1973
  %6871 = load i32, i32* @x.17
  %6872 = load i32, i32* @y.18
  %6873 = sub i32 %6871, 1
  %6874 = mul i32 %6871, %6873
  %6875 = urem i32 %6874, 2
  %6876 = icmp eq i32 %6875, 0
  %6877 = icmp slt i32 %6872, 10
  %6878 = or i1 %6876, %6877
  br i1 %6878, label %originalBBpart21939, label %originalBB1927alteredBB

originalBBpart21939:                              ; preds = %originalBB1927
  br label %6879, !dbg !1973

6879:                                             ; preds = %originalBBpart21939
  %6880 = load i32, i32* @x.17
  %6881 = load i32, i32* @y.18
  %6882 = sub i32 %6880, 1
  %6883 = mul i32 %6880, %6882
  %6884 = urem i32 %6883, 2
  %6885 = icmp eq i32 %6884, 0
  %6886 = icmp slt i32 %6881, 10
  %6887 = or i1 %6885, %6886
  br i1 %6887, label %originalBB1941, label %originalBB1941alteredBB

originalBB1941:                                   ; preds = %6879, %originalBB1941alteredBB
  %6888 = load i32, i32* @x.17
  %6889 = load i32, i32* @y.18
  %6890 = sub i32 %6888, 1
  %6891 = mul i32 %6888, %6890
  %6892 = urem i32 %6891, 2
  %6893 = icmp eq i32 %6892, 0
  %6894 = icmp slt i32 %6889, 10
  %6895 = or i1 %6893, %6894
  br i1 %6895, label %originalBBpart21943, label %originalBB1941alteredBB

originalBBpart21943:                              ; preds = %originalBB1941
  br label %6896, !dbg !1973

6896:                                             ; preds = %originalBBpart21943
  %6897 = load i32, i32* @x.17
  %6898 = load i32, i32* @y.18
  %6899 = sub i32 %6897, 1
  %6900 = mul i32 %6897, %6899
  %6901 = urem i32 %6900, 2
  %6902 = icmp eq i32 %6901, 0
  %6903 = icmp slt i32 %6898, 10
  %6904 = or i1 %6902, %6903
  br i1 %6904, label %originalBB1945, label %originalBB1945alteredBB

originalBB1945:                                   ; preds = %6896, %originalBB1945alteredBB
  %6905 = load i8*, i8** %31, align 8, !dbg !1974
  %6906 = getelementptr inbounds i8, i8* %6905, i32 1, !dbg !1974
  store i8* %6906, i8** %31, align 8, !dbg !1974
  %6907 = load i32, i32* @x.17
  %6908 = load i32, i32* @y.18
  %6909 = sub i32 %6907, 1
  %6910 = mul i32 %6907, %6909
  %6911 = urem i32 %6910, 2
  %6912 = icmp eq i32 %6911, 0
  %6913 = icmp slt i32 %6908, 10
  %6914 = or i1 %6912, %6913
  br i1 %6914, label %originalBBpart21947, label %originalBB1945alteredBB

originalBBpart21947:                              ; preds = %originalBB1945
  br label %6781, !dbg !1975, !llvm.loop !1976

6915:                                             ; preds = %originalBBpart21913
  %6916 = load i32, i32* @x.17
  %6917 = load i32, i32* @y.18
  %6918 = sub i32 %6916, 1
  %6919 = mul i32 %6916, %6918
  %6920 = urem i32 %6919, 2
  %6921 = icmp eq i32 %6920, 0
  %6922 = icmp slt i32 %6917, 10
  %6923 = or i1 %6921, %6922
  br i1 %6923, label %originalBB1949, label %originalBB1949alteredBB

originalBB1949:                                   ; preds = %6915, %originalBB1949alteredBB
  %6924 = load i32, i32* @x.17
  %6925 = load i32, i32* @y.18
  %6926 = sub i32 %6924, 1
  %6927 = mul i32 %6924, %6926
  %6928 = urem i32 %6927, 2
  %6929 = icmp eq i32 %6928, 0
  %6930 = icmp slt i32 %6925, 10
  %6931 = or i1 %6929, %6930
  br i1 %6931, label %originalBBpart21951, label %originalBB1949alteredBB

originalBBpart21951:                              ; preds = %originalBB1949
  br label %6932, !dbg !1977

6932:                                             ; preds = %originalBBpart21951, %originalBBpart21905, %originalBBpart21901
  %6933 = load i32, i32* @x.17
  %6934 = load i32, i32* @y.18
  %6935 = sub i32 %6933, 1
  %6936 = mul i32 %6933, %6935
  %6937 = urem i32 %6936, 2
  %6938 = icmp eq i32 %6937, 0
  %6939 = icmp slt i32 %6934, 10
  %6940 = or i1 %6938, %6939
  br i1 %6940, label %originalBB1953, label %originalBB1953alteredBB

originalBB1953:                                   ; preds = %6932, %originalBB1953alteredBB
  %6941 = load i64, i64* %29, align 8, !dbg !1978
  %6942 = load i64, i64* %20, align 8, !dbg !1980
  %6943 = icmp ult i64 %6941, %6942, !dbg !1981
  %6944 = load i32, i32* @x.17
  %6945 = load i32, i32* @y.18
  %6946 = sub i32 %6944, 1
  %6947 = mul i32 %6944, %6946
  %6948 = urem i32 %6947, 2
  %6949 = icmp eq i32 %6948, 0
  %6950 = icmp slt i32 %6945, 10
  %6951 = or i1 %6949, %6950
  br i1 %6951, label %originalBBpart21955, label %originalBB1953alteredBB

originalBBpart21955:                              ; preds = %originalBB1953
  br i1 %6943, label %6952, label %6972, !dbg !1982

6952:                                             ; preds = %originalBBpart21955
  %6953 = load i32, i32* @x.17
  %6954 = load i32, i32* @y.18
  %6955 = sub i32 %6953, 1
  %6956 = mul i32 %6953, %6955
  %6957 = urem i32 %6956, 2
  %6958 = icmp eq i32 %6957, 0
  %6959 = icmp slt i32 %6954, 10
  %6960 = or i1 %6958, %6959
  br i1 %6960, label %originalBB1957, label %originalBB1957alteredBB

originalBB1957:                                   ; preds = %6952, %originalBB1957alteredBB
  %6961 = load i8*, i8** %19, align 8, !dbg !1983
  %6962 = load i64, i64* %29, align 8, !dbg !1984
  %6963 = getelementptr inbounds i8, i8* %6961, i64 %6962, !dbg !1983
  store i8 0, i8* %6963, align 1, !dbg !1985
  %6964 = load i32, i32* @x.17
  %6965 = load i32, i32* @y.18
  %6966 = sub i32 %6964, 1
  %6967 = mul i32 %6964, %6966
  %6968 = urem i32 %6967, 2
  %6969 = icmp eq i32 %6968, 0
  %6970 = icmp slt i32 %6965, 10
  %6971 = or i1 %6969, %6970
  br i1 %6971, label %originalBBpart21959, label %originalBB1957alteredBB

originalBBpart21959:                              ; preds = %originalBB1957
  br label %6972, !dbg !1983

6972:                                             ; preds = %originalBBpart21959, %originalBBpart21955
  %6973 = load i32, i32* @x.17
  %6974 = load i32, i32* @y.18
  %6975 = sub i32 %6973, 1
  %6976 = mul i32 %6973, %6975
  %6977 = urem i32 %6976, 2
  %6978 = icmp eq i32 %6977, 0
  %6979 = icmp slt i32 %6974, 10
  %6980 = or i1 %6978, %6979
  br i1 %6980, label %originalBB1961, label %originalBB1961alteredBB

originalBB1961:                                   ; preds = %6972, %originalBB1961alteredBB
  %6981 = load i64, i64* %29, align 8, !dbg !1986
  store i64 %6981, i64* %18, align 8, !dbg !1987
  %6982 = load i32, i32* @x.17
  %6983 = load i32, i32* @y.18
  %6984 = sub i32 %6982, 1
  %6985 = mul i32 %6982, %6984
  %6986 = urem i32 %6985, 2
  %6987 = icmp eq i32 %6986, 0
  %6988 = icmp slt i32 %6983, 10
  %6989 = or i1 %6987, %6988
  br i1 %6989, label %originalBBpart21963, label %originalBB1961alteredBB

originalBBpart21963:                              ; preds = %originalBB1961
  br label %7072, !dbg !1987

6990:                                             ; preds = %originalBBpart21857, %originalBBpart21631, %originalBBpart21159, %originalBBpart21057, %originalBBpart2829, %originalBBpart2813, %originalBBpart2749, %originalBBpart2713, %originalBBpart2555, %originalBBpart2504, %originalBBpart2284, %originalBBpart2260
  call void @llvm.dbg.label(metadata !1988), !dbg !1989
  %6991 = load i32, i32* @x.17
  %6992 = load i32, i32* @y.18
  %6993 = sub i32 %6991, 1
  %6994 = mul i32 %6991, %6993
  %6995 = urem i32 %6994, 2
  %6996 = icmp eq i32 %6995, 0
  %6997 = icmp slt i32 %6992, 10
  %6998 = or i1 %6996, %6997
  br i1 %6998, label %originalBB1965, label %originalBB1965alteredBB

originalBB1965:                                   ; preds = %6990, %originalBB1965alteredBB
  %6999 = load i32, i32* %23, align 4, !dbg !1990
  %7000 = icmp eq i32 %6999, 2, !dbg !1992
  %7001 = load i32, i32* @x.17
  %7002 = load i32, i32* @y.18
  %7003 = sub i32 %7001, 1
  %7004 = mul i32 %7001, %7003
  %7005 = urem i32 %7004, 2
  %7006 = icmp eq i32 %7005, 0
  %7007 = icmp slt i32 %7002, 10
  %7008 = or i1 %7006, %7007
  br i1 %7008, label %originalBBpart21967, label %originalBB1965alteredBB

originalBBpart21967:                              ; preds = %originalBB1965
  br i1 %7000, label %7009, label %7045, !dbg !1993

7009:                                             ; preds = %originalBBpart21967
  %7010 = load i32, i32* @x.17
  %7011 = load i32, i32* @y.18
  %7012 = sub i32 %7010, 1
  %7013 = mul i32 %7010, %7012
  %7014 = urem i32 %7013, 2
  %7015 = icmp eq i32 %7014, 0
  %7016 = icmp slt i32 %7011, 10
  %7017 = or i1 %7015, %7016
  br i1 %7017, label %originalBB1969, label %originalBB1969alteredBB

originalBB1969:                                   ; preds = %7009, %originalBB1969alteredBB
  %7018 = load i8, i8* %33, align 1, !dbg !1994
  %7019 = trunc i8 %7018 to i1, !dbg !1994
  %7020 = load i32, i32* @x.17
  %7021 = load i32, i32* @y.18
  %7022 = sub i32 %7020, 1
  %7023 = mul i32 %7020, %7022
  %7024 = urem i32 %7023, 2
  %7025 = icmp eq i32 %7024, 0
  %7026 = icmp slt i32 %7021, 10
  %7027 = or i1 %7025, %7026
  br i1 %7027, label %originalBBpart21971, label %originalBB1969alteredBB

originalBBpart21971:                              ; preds = %originalBB1969
  br i1 %7019, label %7028, label %7045, !dbg !1995

7028:                                             ; preds = %originalBBpart21971
  %7029 = load i32, i32* @x.17
  %7030 = load i32, i32* @y.18
  %7031 = sub i32 %7029, 1
  %7032 = mul i32 %7029, %7031
  %7033 = urem i32 %7032, 2
  %7034 = icmp eq i32 %7033, 0
  %7035 = icmp slt i32 %7030, 10
  %7036 = or i1 %7034, %7035
  br i1 %7036, label %originalBB1973, label %originalBB1973alteredBB

originalBB1973:                                   ; preds = %7028, %originalBB1973alteredBB
  store i32 4, i32* %23, align 4, !dbg !1996
  %7037 = load i32, i32* @x.17
  %7038 = load i32, i32* @y.18
  %7039 = sub i32 %7037, 1
  %7040 = mul i32 %7037, %7039
  %7041 = urem i32 %7040, 2
  %7042 = icmp eq i32 %7041, 0
  %7043 = icmp slt i32 %7038, 10
  %7044 = or i1 %7042, %7043
  br i1 %7044, label %originalBBpart21975, label %originalBB1973alteredBB

originalBBpart21975:                              ; preds = %originalBB1973
  br label %7045, !dbg !1997

7045:                                             ; preds = %originalBBpart21975, %originalBBpart21971, %originalBBpart21967
  %7046 = load i32, i32* @x.17
  %7047 = load i32, i32* @y.18
  %7048 = sub i32 %7046, 1
  %7049 = mul i32 %7046, %7048
  %7050 = urem i32 %7049, 2
  %7051 = icmp eq i32 %7050, 0
  %7052 = icmp slt i32 %7047, 10
  %7053 = or i1 %7051, %7052
  br i1 %7053, label %originalBB1977, label %originalBB1977alteredBB

originalBB1977:                                   ; preds = %7045, %originalBB1977alteredBB
  %7054 = load i8*, i8** %19, align 8, !dbg !1998
  %7055 = load i64, i64* %20, align 8, !dbg !1999
  %7056 = load i8*, i8** %21, align 8, !dbg !2000
  %7057 = load i64, i64* %22, align 8, !dbg !2001
  %7058 = load i32, i32* %23, align 4, !dbg !2002
  %7059 = load i32, i32* %24, align 4, !dbg !2003
  %7060 = and i32 %7059, -3, !dbg !2004
  %7061 = load i8*, i8** %26, align 8, !dbg !2005
  %7062 = load i8*, i8** %27, align 8, !dbg !2006
  %7063 = call i64 @quotearg_buffer_restyled(i8* %7054, i64 %7055, i8* %7056, i64 %7057, i32 %7058, i32 %7060, i32* null, i8* %7061, i8* %7062), !dbg !2007
  store i64 %7063, i64* %18, align 8, !dbg !2008
  %7064 = load i32, i32* @x.17
  %7065 = load i32, i32* @y.18
  %7066 = sub i32 %7064, 1
  %7067 = mul i32 %7064, %7066
  %7068 = urem i32 %7067, 2
  %7069 = icmp eq i32 %7068, 0
  %7070 = icmp slt i32 %7065, 10
  %7071 = or i1 %7069, %7070
  br i1 %7071, label %originalBBpart21981, label %originalBB1977alteredBB

originalBBpart21981:                              ; preds = %originalBB1977
  br label %7072, !dbg !2008

7072:                                             ; preds = %originalBBpart21981, %originalBBpart21963, %originalBBpart21877
  %7073 = load i32, i32* @x.17
  %7074 = load i32, i32* @y.18
  %7075 = sub i32 %7073, 1
  %7076 = mul i32 %7073, %7075
  %7077 = urem i32 %7076, 2
  %7078 = icmp eq i32 %7077, 0
  %7079 = icmp slt i32 %7074, 10
  %7080 = or i1 %7078, %7079
  br i1 %7080, label %originalBB1983, label %originalBB1983alteredBB

originalBB1983:                                   ; preds = %7072, %originalBB1983alteredBB
  %7081 = load i64, i64* %18, align 8, !dbg !2009
  %7082 = load i32, i32* @x.17
  %7083 = load i32, i32* @y.18
  %7084 = sub i32 %7082, 1
  %7085 = mul i32 %7082, %7084
  %7086 = urem i32 %7085, 2
  %7087 = icmp eq i32 %7086, 0
  %7088 = icmp slt i32 %7083, 10
  %7089 = or i1 %7087, %7088
  br i1 %7089, label %originalBBpart21985, label %originalBB1983alteredBB

originalBBpart21985:                              ; preds = %originalBB1983
  ret i64 %7081, !dbg !2009

originalBBalteredBB:                              ; preds = %originalBB, %9
  %7090 = alloca i64, align 8
  %7091 = alloca i8*, align 8
  %7092 = alloca i64, align 8
  %7093 = alloca i8*, align 8
  %7094 = alloca i64, align 8
  %7095 = alloca i32, align 4
  %7096 = alloca i32, align 4
  %7097 = alloca i32*, align 8
  %7098 = alloca i8*, align 8
  %7099 = alloca i8*, align 8
  %7100 = alloca i64, align 8
  %7101 = alloca i64, align 8
  %7102 = alloca i64, align 8
  %7103 = alloca i8*, align 8
  %7104 = alloca i64, align 8
  %7105 = alloca i8, align 1
  %7106 = alloca i8, align 1
  %7107 = alloca i8, align 1
  %7108 = alloca i8, align 1
  %7109 = alloca i8, align 1
  %7110 = alloca i8, align 1
  %7111 = alloca i8, align 1
  %7112 = alloca i8, align 1
  %7113 = alloca i8, align 1
  %7114 = alloca i8, align 1
  %7115 = alloca i8, align 1
  %7116 = alloca i64, align 8
  %7117 = alloca i8, align 1
  %7118 = alloca %struct.__mbstate_t, align 4
  %7119 = alloca i32, align 4
  %7120 = alloca i64, align 8
  %7121 = alloca i64, align 8
  %7122 = alloca i64, align 8
  store i8* %0, i8** %7091, align 8
  call void @llvm.dbg.declare(metadata i8** %7091, metadata !2010, metadata !DIExpression()), !dbg !1130
  store i64 %1, i64* %7092, align 8
  call void @llvm.dbg.declare(metadata i64* %7092, metadata !2042, metadata !DIExpression()), !dbg !1132
  store i8* %2, i8** %7093, align 8
  call void @llvm.dbg.declare(metadata i8** %7093, metadata !2043, metadata !DIExpression()), !dbg !1134
  store i64 %3, i64* %7094, align 8
  call void @llvm.dbg.declare(metadata i64* %7094, metadata !2044, metadata !DIExpression()), !dbg !1136
  store i32 %4, i32* %7095, align 4
  call void @llvm.dbg.declare(metadata i32* %7095, metadata !2045, metadata !DIExpression()), !dbg !1138
  store i32 %5, i32* %7096, align 4
  call void @llvm.dbg.declare(metadata i32* %7096, metadata !2046, metadata !DIExpression()), !dbg !1140
  store i32* %6, i32** %7097, align 8
  call void @llvm.dbg.declare(metadata i32** %7097, metadata !2047, metadata !DIExpression()), !dbg !1142
  store i8* %7, i8** %7098, align 8
  call void @llvm.dbg.declare(metadata i8** %7098, metadata !2048, metadata !DIExpression()), !dbg !1144
  store i8* %8, i8** %7099, align 8
  call void @llvm.dbg.declare(metadata i8** %7099, metadata !2049, metadata !DIExpression()), !dbg !1146
  call void @llvm.dbg.declare(metadata i64* %7100, metadata !2050, metadata !DIExpression()), !dbg !1148
  call void @llvm.dbg.declare(metadata i64* %7101, metadata !2051, metadata !DIExpression()), !dbg !1150
  store i64 0, i64* %7101, align 8, !dbg !1150
  call void @llvm.dbg.declare(metadata i64* %7102, metadata !2052, metadata !DIExpression()), !dbg !1152
  store i64 0, i64* %7102, align 8, !dbg !1152
  call void @llvm.dbg.declare(metadata i8** %7103, metadata !2053, metadata !DIExpression()), !dbg !1154
  store i8* null, i8** %7103, align 8, !dbg !1154
  call void @llvm.dbg.declare(metadata i64* %7104, metadata !2054, metadata !DIExpression()), !dbg !1156
  store i64 0, i64* %7104, align 8, !dbg !1156
  call void @llvm.dbg.declare(metadata i8* %7105, metadata !2055, metadata !DIExpression()), !dbg !1158
  store i8 0, i8* %7105, align 1, !dbg !1158
  call void @llvm.dbg.declare(metadata i8* %7106, metadata !2056, metadata !DIExpression()), !dbg !1160
  %7123 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1161
  %7124 = icmp eq i64 %7123, 1, !dbg !1162
  %7125 = zext i1 %7124 to i8, !dbg !1160
  store i8 %7125, i8* %7106, align 1, !dbg !1160
  call void @llvm.dbg.declare(metadata i8* %7107, metadata !2057, metadata !DIExpression()), !dbg !1164
  %7126 = load i32, i32* %7096, align 4, !dbg !1165
  %_ = sub i32 %7126, 2
  %gen = mul i32 %_, 2
  %_1 = sub i32 %7126, 2
  %gen2 = mul i32 %_1, 2
  %_3 = shl i32 %7126, 2
  %_4 = shl i32 %7126, 2
  %_5 = shl i32 %7126, 2
  %_6 = shl i32 %7126, 2
  %7127 = and i32 %7126, 2, !dbg !1166
  %7128 = icmp ne i32 %7127, 0, !dbg !1167
  %7129 = zext i1 %7128 to i8, !dbg !1164
  store i8 %7129, i8* %7107, align 1, !dbg !1164
  call void @llvm.dbg.declare(metadata i8* %7108, metadata !2058, metadata !DIExpression()), !dbg !1169
  store i8 0, i8* %7108, align 1, !dbg !1169
  call void @llvm.dbg.declare(metadata i8* %7109, metadata !2059, metadata !DIExpression()), !dbg !1171
  store i8 0, i8* %7109, align 1, !dbg !1171
  call void @llvm.dbg.declare(metadata i8* %7110, metadata !2060, metadata !DIExpression()), !dbg !1173
  store i8 1, i8* %7110, align 1, !dbg !1173
  br label %originalBB

originalBB7alteredBB:                             ; preds = %originalBB7, %66
  %7130 = load i32, i32* %23, align 4, !dbg !1177
  br label %originalBB7

originalBB11alteredBB:                            ; preds = %originalBB11, %84
  store i32 5, i32* %23, align 4, !dbg !1179
  store i8 1, i8* %35, align 1, !dbg !1181
  br label %originalBB11

originalBB15alteredBB:                            ; preds = %originalBB15, %101
  %7131 = load i8, i8* %35, align 1, !dbg !1183
  %7132 = trunc i8 %7131 to i1, !dbg !1183
  br label %originalBB15

originalBB19alteredBB:                            ; preds = %originalBB19, %120
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %137
  %7133 = load i64, i64* %29, align 8, !dbg !1187
  %7134 = load i64, i64* %20, align 8, !dbg !1187
  %7135 = icmp ult i64 %7133, %7134, !dbg !1187
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %157
  %7136 = load i8*, i8** %19, align 8, !dbg !1187
  %7137 = load i64, i64* %29, align 8, !dbg !1187
  %7138 = getelementptr inbounds i8, i8* %7136, i64 %7137, !dbg !1187
  store i8 34, i8* %7138, align 1, !dbg !1187
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %177
  %7139 = load i64, i64* %29, align 8, !dbg !1190
  %_32 = sub i64 %7139, 1
  %gen33 = mul i64 %_32, 1
  %_34 = shl i64 %7139, 1
  %_35 = shl i64 %7139, 1
  %_36 = sub i64 0, %7139
  %gen37 = add i64 %_36, 1
  %_38 = shl i64 %7139, 1
  %7140 = add i64 %7139, 1, !dbg !1190
  store i64 %7140, i64* %29, align 8, !dbg !1190
  br label %originalBB31

originalBB42alteredBB:                            ; preds = %originalBB42, %196
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %213
  store i8 1, i8* %33, align 1, !dbg !1191
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.52, i64 0, i64 0), i8** %31, align 8, !dbg !1192
  store i64 1, i64* %32, align 8, !dbg !1193
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %230
  store i8 1, i8* %33, align 1, !dbg !1195
  store i8 0, i8* %35, align 1, !dbg !1196
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %247
  %7141 = load i32, i32* %23, align 4, !dbg !1198
  %7142 = icmp ne i32 %7141, 10, !dbg !1201
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %266
  %7143 = load i32, i32* %23, align 4, !dbg !1203
  %7144 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.53, i64 0, i64 0), i32 %7143), !dbg !1205
  store i8* %7144, i8** %26, align 8, !dbg !1206
  %7145 = load i32, i32* %23, align 4, !dbg !1207
  %7146 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.54, i64 0, i64 0), i32 %7145), !dbg !1208
  store i8* %7146, i8** %27, align 8, !dbg !1209
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %287
  %7147 = load i8, i8* %35, align 1, !dbg !1211
  %7148 = trunc i8 %7147 to i1, !dbg !1211
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %306
  %7149 = load i8*, i8** %26, align 8, !dbg !1214
  store i8* %7149, i8** %31, align 8, !dbg !1216
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %324
  %7150 = load i8*, i8** %31, align 8, !dbg !1218
  %7151 = load i8, i8* %7150, align 1, !dbg !1220
  %7152 = icmp ne i8 %7151, 0, !dbg !1221
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %344
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %361
  %7153 = load i64, i64* %29, align 8, !dbg !1223
  %7154 = load i64, i64* %20, align 8, !dbg !1223
  %7155 = icmp ult i64 %7153, %7154, !dbg !1223
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %381
  %7156 = load i8*, i8** %31, align 8, !dbg !1223
  %7157 = load i8, i8* %7156, align 1, !dbg !1223
  %7158 = load i8*, i8** %19, align 8, !dbg !1223
  %7159 = load i64, i64* %29, align 8, !dbg !1223
  %7160 = getelementptr inbounds i8, i8* %7158, i64 %7159, !dbg !1223
  store i8 %7157, i8* %7160, align 1, !dbg !1223
  br label %originalBB82

originalBB86alteredBB:                            ; preds = %originalBB86, %403
  %7161 = load i64, i64* %29, align 8, !dbg !1226
  %_87 = sub i64 %7161, 1
  %gen88 = mul i64 %_87, 1
  %_89 = sub i64 %7161, 1
  %gen90 = mul i64 %_89, 1
  %_91 = sub i64 0, %7161
  %gen92 = add i64 %_91, 1
  %7162 = add i64 %7161, 1, !dbg !1226
  store i64 %7162, i64* %29, align 8, !dbg !1226
  br label %originalBB86

originalBB96alteredBB:                            ; preds = %originalBB96, %422
  br label %originalBB96

originalBB100alteredBB:                           ; preds = %originalBB100, %439
  %7163 = load i8*, i8** %31, align 8, !dbg !1227
  %7164 = getelementptr inbounds i8, i8* %7163, i32 1, !dbg !1227
  store i8* %7164, i8** %31, align 8, !dbg !1227
  br label %originalBB100

originalBB104alteredBB:                           ; preds = %originalBB104, %458
  br label %originalBB104

originalBB108alteredBB:                           ; preds = %originalBB108, %475
  store i8 1, i8* %33, align 1, !dbg !1231
  %7165 = load i8*, i8** %27, align 8, !dbg !1232
  store i8* %7165, i8** %31, align 8, !dbg !1233
  %7166 = load i8*, i8** %31, align 8, !dbg !1234
  %7167 = call i64 @strlen(i8* %7166) #13, !dbg !1235
  store i64 %7167, i64* %32, align 8, !dbg !1236
  br label %originalBB108

originalBB112alteredBB:                           ; preds = %originalBB112, %495
  store i8 1, i8* %33, align 1, !dbg !1238
  br label %originalBB112

originalBB116alteredBB:                           ; preds = %originalBB116, %512
  store i8 1, i8* %35, align 1, !dbg !1240
  br label %originalBB116

originalBB120alteredBB:                           ; preds = %originalBB120, %529
  %7168 = load i8, i8* %35, align 1, !dbg !1242
  %7169 = trunc i8 %7168 to i1, !dbg !1242
  br label %originalBB120

originalBB124alteredBB:                           ; preds = %originalBB124, %548
  store i8 1, i8* %33, align 1, !dbg !1245
  br label %originalBB124

originalBB128alteredBB:                           ; preds = %originalBB128, %565
  br label %originalBB128

originalBB132alteredBB:                           ; preds = %originalBB132, %582
  store i32 2, i32* %23, align 4, !dbg !1248
  %7170 = load i8, i8* %35, align 1, !dbg !1249
  %7171 = trunc i8 %7170 to i1, !dbg !1249
  br label %originalBB132

originalBB136alteredBB:                           ; preds = %originalBB136, %601
  br label %originalBB136

originalBB140alteredBB:                           ; preds = %originalBB140, %618
  %7172 = load i64, i64* %29, align 8, !dbg !1253
  %7173 = load i64, i64* %20, align 8, !dbg !1253
  %7174 = icmp ult i64 %7172, %7173, !dbg !1253
  br label %originalBB140

originalBB144alteredBB:                           ; preds = %originalBB144, %638
  %7175 = load i8*, i8** %19, align 8, !dbg !1253
  %7176 = load i64, i64* %29, align 8, !dbg !1253
  %7177 = getelementptr inbounds i8, i8* %7175, i64 %7176, !dbg !1253
  store i8 39, i8* %7177, align 1, !dbg !1253
  br label %originalBB144

originalBB148alteredBB:                           ; preds = %originalBB148, %658
  %7178 = load i64, i64* %29, align 8, !dbg !1256
  %_149 = sub i64 %7178, 1
  %gen150 = mul i64 %_149, 1
  %_151 = sub i64 0, %7178
  %gen152 = add i64 %_151, 1
  %_153 = sub i64 %7178, 1
  %gen154 = mul i64 %_153, 1
  %_155 = sub i64 0, %7178
  %gen156 = add i64 %_155, 1
  %7179 = add i64 %7178, 1, !dbg !1256
  store i64 %7179, i64* %29, align 8, !dbg !1256
  br label %originalBB148

originalBB160alteredBB:                           ; preds = %originalBB160, %677
  br label %originalBB160

originalBB164alteredBB:                           ; preds = %originalBB164, %694
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.54, i64 0, i64 0), i8** %31, align 8, !dbg !1257
  store i64 1, i64* %32, align 8, !dbg !1258
  br label %originalBB164

originalBB168alteredBB:                           ; preds = %originalBB168, %711
  store i8 0, i8* %35, align 1, !dbg !1260
  br label %originalBB168

originalBB172alteredBB:                           ; preds = %originalBB172, %728
  call void @abort() #12, !dbg !1262
  br label %originalBB172

originalBB176alteredBB:                           ; preds = %originalBB176, %745
  store i64 0, i64* %28, align 8, !dbg !1263
  br label %originalBB176

originalBB180alteredBB:                           ; preds = %originalBB180, %762
  %7180 = load i64, i64* %22, align 8, !dbg !1266
  %7181 = icmp eq i64 %7180, -1, !dbg !1268
  br label %originalBB180

originalBB184alteredBB:                           ; preds = %originalBB184, %781
  %7182 = load i8*, i8** %21, align 8, !dbg !1269
  %7183 = load i64, i64* %28, align 8, !dbg !1270
  %7184 = getelementptr inbounds i8, i8* %7182, i64 %7183, !dbg !1269
  %7185 = load i8, i8* %7184, align 1, !dbg !1269
  %7186 = sext i8 %7185 to i32, !dbg !1269
  %7187 = icmp eq i32 %7186, 0, !dbg !1271
  %7188 = zext i1 %7187 to i32, !dbg !1271
  br label %originalBB184

originalBB188alteredBB:                           ; preds = %originalBB188, %805
  %7189 = load i64, i64* %28, align 8, !dbg !1272
  %7190 = load i64, i64* %22, align 8, !dbg !1273
  %7191 = icmp eq i64 %7189, %7190, !dbg !1274
  %7192 = zext i1 %7191 to i32, !dbg !1274
  br label %originalBB188

originalBB192alteredBB:                           ; preds = %originalBB192, %826
  %7193 = icmp ne i32 %827, 0, !dbg !1275
  %_193 = shl i1 %7193, true
  %_194 = sub i1 %7193, true
  %gen195 = mul i1 %_194, true
  %_196 = sub i1 false, %7193
  %gen197 = add i1 %_196, true
  %_198 = sub i1 false, %7193
  %gen199 = add i1 %_198, true
  %_200 = shl i1 %7193, true
  %_201 = shl i1 %7193, true
  %_202 = sub i1 false, %7193
  %gen203 = add i1 %_202, true
  %_204 = sub i1 %7193, true
  %gen205 = mul i1 %_204, true
  %_206 = sub i1 %7193, true
  %gen207 = mul i1 %_206, true
  %7194 = xor i1 %7193, true, !dbg !1275
  br label %originalBB192

originalBB211alteredBB:                           ; preds = %originalBB211, %846
  store i8 0, i8* %41, align 1, !dbg !1283
  call void @llvm.dbg.declare(metadata !4, metadata !2061, metadata !DIExpression()), !dbg !1285
  store i8 0, i8* %42, align 1, !dbg !1285
  call void @llvm.dbg.declare(metadata !4, metadata !2096, metadata !DIExpression()), !dbg !1287
  store i8 0, i8* %43, align 1, !dbg !1287
  %7195 = load i8, i8* %33, align 1, !dbg !1288
  %7196 = trunc i8 %7195 to i1, !dbg !1288
  br label %originalBB211

originalBB215alteredBB:                           ; preds = %originalBB215, %865
  %7197 = load i32, i32* %23, align 4, !dbg !1291
  %7198 = icmp ne i32 %7197, 2, !dbg !1292
  br label %originalBB215

originalBB219alteredBB:                           ; preds = %originalBB219, %884
  %7199 = load i64, i64* %32, align 8, !dbg !1294
  %7200 = icmp ne i64 %7199, 0, !dbg !1294
  br label %originalBB219

originalBB223alteredBB:                           ; preds = %originalBB223, %903
  %7201 = load i64, i64* %28, align 8, !dbg !1296
  %7202 = load i64, i64* %32, align 8, !dbg !1297
  %_224 = sub i64 0, %7201
  %gen225 = add i64 %_224, %7202
  %_226 = shl i64 %7201, %7202
  %_227 = sub i64 %7201, %7202
  %gen228 = mul i64 %_227, %7202
  %_229 = sub i64 0, %7201
  %gen230 = add i64 %_229, %7202
  %7203 = add i64 %7201, %7202, !dbg !1298
  %7204 = load i64, i64* %22, align 8, !dbg !1299
  %7205 = icmp eq i64 %7204, -1, !dbg !1300
  br label %originalBB223

originalBB234alteredBB:                           ; preds = %originalBB234, %925
  %7206 = load i64, i64* %32, align 8, !dbg !1302
  %7207 = icmp ult i64 1, %7206, !dbg !1303
  br label %originalBB234

originalBB238alteredBB:                           ; preds = %originalBB238, %944
  %7208 = load i8*, i8** %21, align 8, !dbg !1304
  %7209 = call i64 @strlen(i8* %7208) #13, !dbg !1305
  store i64 %7209, i64* %22, align 8, !dbg !1306
  br label %originalBB238

originalBB242alteredBB:                           ; preds = %originalBB242, %963
  %7210 = load i64, i64* %22, align 8, !dbg !1307
  br label %originalBB242

originalBB246alteredBB:                           ; preds = %originalBB246, %981
  %7211 = icmp ule i64 %914, %982, !dbg !1308
  br label %originalBB246

originalBB250alteredBB:                           ; preds = %originalBB250, %1000
  %7212 = load i8*, i8** %21, align 8, !dbg !1310
  %7213 = load i64, i64* %28, align 8, !dbg !1311
  %7214 = getelementptr inbounds i8, i8* %7212, i64 %7213, !dbg !1312
  %7215 = load i8*, i8** %31, align 8, !dbg !1313
  %7216 = load i64, i64* %32, align 8, !dbg !1314
  %7217 = call i32 @memcmp(i8* %7214, i8* %7215, i64 %7216) #13, !dbg !1315
  %7218 = icmp eq i32 %7217, 0, !dbg !1316
  br label %originalBB250

originalBB254alteredBB:                           ; preds = %originalBB254, %1024
  %7219 = load i8, i8* %35, align 1, !dbg !1318
  %7220 = trunc i8 %7219 to i1, !dbg !1318
  br label %originalBB254

originalBB258alteredBB:                           ; preds = %originalBB258, %1043
  br label %originalBB258

originalBB262alteredBB:                           ; preds = %originalBB262, %1060
  store i8 1, i8* %41, align 1, !dbg !1323
  br label %originalBB262

originalBB266alteredBB:                           ; preds = %originalBB266, %1077
  %7221 = load i8*, i8** %21, align 8, !dbg !1325
  %7222 = load i64, i64* %28, align 8, !dbg !1326
  %7223 = getelementptr inbounds i8, i8* %7221, i64 %7222, !dbg !1325
  %7224 = load i8, i8* %7223, align 1, !dbg !1325
  store i8 %7224, i8* %39, align 1, !dbg !1327
  %7225 = load i8, i8* %39, align 1, !dbg !1328
  %7226 = zext i8 %7225 to i32, !dbg !1328
  br label %originalBB266

originalBB270alteredBB:                           ; preds = %originalBB270, %1100
  %7227 = load i8, i8* %33, align 1, !dbg !1330
  %7228 = trunc i8 %7227 to i1, !dbg !1330
  br label %originalBB270

originalBB274alteredBB:                           ; preds = %originalBB274, %1119
  br label %originalBB274

originalBB278alteredBB:                           ; preds = %originalBB278, %1136
  %7229 = load i8, i8* %35, align 1, !dbg !1336
  %7230 = trunc i8 %7229 to i1, !dbg !1336
  br label %originalBB278

originalBB282alteredBB:                           ; preds = %originalBB282, %1155
  br label %originalBB282

originalBB286alteredBB:                           ; preds = %originalBB286, %1172
  store i8 1, i8* %42, align 1, !dbg !1339
  %7231 = load i32, i32* %23, align 4, !dbg !1340
  %7232 = icmp eq i32 %7231, 2, !dbg !1340
  br label %originalBB286

originalBB290alteredBB:                           ; preds = %originalBB290, %1191
  %7233 = load i8, i8* %36, align 1, !dbg !1340
  %7234 = trunc i8 %7233 to i1, !dbg !1340
  br label %originalBB290

originalBB294alteredBB:                           ; preds = %originalBB294, %1210
  br label %originalBB294

originalBB299alteredBB:                           ; preds = %originalBB299, %1227
  %7235 = load i64, i64* %29, align 8, !dbg !1344
  %7236 = load i64, i64* %20, align 8, !dbg !1344
  %7237 = icmp ult i64 %7235, %7236, !dbg !1344
  br label %originalBB299

originalBB303alteredBB:                           ; preds = %originalBB303, %1247
  %7238 = load i8*, i8** %19, align 8, !dbg !1344
  %7239 = load i64, i64* %29, align 8, !dbg !1344
  %7240 = getelementptr inbounds i8, i8* %7238, i64 %7239, !dbg !1344
  store i8 39, i8* %7240, align 1, !dbg !1344
  br label %originalBB303

originalBB307alteredBB:                           ; preds = %originalBB307, %1267
  %7241 = load i64, i64* %29, align 8, !dbg !1347
  %_308 = sub i64 0, %7241
  %gen309 = add i64 %_308, 1
  %_310 = shl i64 %7241, 1
  %_311 = sub i64 %7241, 1
  %gen312 = mul i64 %_311, 1
  %_313 = sub i64 0, %7241
  %gen314 = add i64 %_313, 1
  %_315 = shl i64 %7241, 1
  %_316 = sub i64 %7241, 1
  %gen317 = mul i64 %_316, 1
  %7242 = add i64 %7241, 1, !dbg !1347
  store i64 %7242, i64* %29, align 8, !dbg !1347
  br label %originalBB307

originalBB321alteredBB:                           ; preds = %originalBB321, %1286
  br label %originalBB321

originalBB325alteredBB:                           ; preds = %originalBB325, %1303
  %7243 = load i64, i64* %29, align 8, !dbg !1348
  %7244 = load i64, i64* %20, align 8, !dbg !1348
  %7245 = icmp ult i64 %7243, %7244, !dbg !1348
  br label %originalBB325

originalBB329alteredBB:                           ; preds = %originalBB329, %1323
  %7246 = load i8*, i8** %19, align 8, !dbg !1348
  %7247 = load i64, i64* %29, align 8, !dbg !1348
  %7248 = getelementptr inbounds i8, i8* %7246, i64 %7247, !dbg !1348
  store i8 36, i8* %7248, align 1, !dbg !1348
  br label %originalBB329

originalBB333alteredBB:                           ; preds = %originalBB333, %1343
  %7249 = load i64, i64* %29, align 8, !dbg !1351
  %_334 = shl i64 %7249, 1
  %_335 = sub i64 0, %7249
  %gen336 = add i64 %_335, 1
  %_337 = sub i64 %7249, 1
  %gen338 = mul i64 %_337, 1
  %_339 = shl i64 %7249, 1
  %7250 = add i64 %7249, 1, !dbg !1351
  store i64 %7250, i64* %29, align 8, !dbg !1351
  br label %originalBB333

originalBB343alteredBB:                           ; preds = %originalBB343, %1362
  br label %originalBB343

originalBB347alteredBB:                           ; preds = %originalBB347, %1379
  %7251 = load i64, i64* %29, align 8, !dbg !1352
  %7252 = load i64, i64* %20, align 8, !dbg !1352
  %7253 = icmp ult i64 %7251, %7252, !dbg !1352
  br label %originalBB347

originalBB351alteredBB:                           ; preds = %originalBB351, %1399
  %7254 = load i8*, i8** %19, align 8, !dbg !1352
  %7255 = load i64, i64* %29, align 8, !dbg !1352
  %7256 = getelementptr inbounds i8, i8* %7254, i64 %7255, !dbg !1352
  store i8 39, i8* %7256, align 1, !dbg !1352
  br label %originalBB351

originalBB355alteredBB:                           ; preds = %originalBB355, %1419
  %7257 = load i64, i64* %29, align 8, !dbg !1355
  %_356 = sub i64 %7257, 1
  %gen357 = mul i64 %_356, 1
  %_358 = sub i64 0, %7257
  %gen359 = add i64 %_358, 1
  %_360 = sub i64 0, %7257
  %gen361 = add i64 %_360, 1
  %7258 = add i64 %7257, 1, !dbg !1355
  store i64 %7258, i64* %29, align 8, !dbg !1355
  br label %originalBB355

originalBB365alteredBB:                           ; preds = %originalBB365, %1438
  store i8 1, i8* %36, align 1, !dbg !1342
  br label %originalBB365

originalBB369alteredBB:                           ; preds = %originalBB369, %1455
  br label %originalBB369

originalBB373alteredBB:                           ; preds = %originalBB373, %1472
  %7259 = load i64, i64* %29, align 8, !dbg !1356
  %7260 = load i64, i64* %20, align 8, !dbg !1356
  %7261 = icmp ult i64 %7259, %7260, !dbg !1356
  br label %originalBB373

originalBB377alteredBB:                           ; preds = %originalBB377, %1492
  %7262 = load i8*, i8** %19, align 8, !dbg !1356
  %7263 = load i64, i64* %29, align 8, !dbg !1356
  %7264 = getelementptr inbounds i8, i8* %7262, i64 %7263, !dbg !1356
  store i8 92, i8* %7264, align 1, !dbg !1356
  br label %originalBB377

originalBB381alteredBB:                           ; preds = %originalBB381, %1512
  %7265 = load i64, i64* %29, align 8, !dbg !1359
  %_382 = sub i64 0, %7265
  %gen383 = add i64 %_382, 1
  %_384 = sub i64 0, %7265
  %gen385 = add i64 %_384, 1
  %_386 = shl i64 %7265, 1
  %_387 = sub i64 0, %7265
  %gen388 = add i64 %_387, 1
  %_389 = shl i64 %7265, 1
  %_390 = sub i64 %7265, 1
  %gen391 = mul i64 %_390, 1
  %_392 = shl i64 %7265, 1
  %7266 = add i64 %7265, 1, !dbg !1359
  store i64 %7266, i64* %29, align 8, !dbg !1359
  br label %originalBB381

originalBB396alteredBB:                           ; preds = %originalBB396, %1531
  br label %originalBB396

originalBB400alteredBB:                           ; preds = %originalBB400, %1548
  %7267 = load i32, i32* %23, align 4, !dbg !1360
  %7268 = icmp ne i32 %7267, 2, !dbg !1362
  br label %originalBB400

originalBB404alteredBB:                           ; preds = %originalBB404, %1567
  %7269 = load i64, i64* %28, align 8, !dbg !1364
  %_405 = shl i64 %7269, 1
  %7270 = add i64 %7269, 1, !dbg !1365
  %7271 = load i64, i64* %22, align 8, !dbg !1366
  %7272 = icmp ult i64 %7270, %7271, !dbg !1367
  br label %originalBB404

originalBB409alteredBB:                           ; preds = %originalBB409, %1588
  %7273 = load i8*, i8** %21, align 8, !dbg !1369
  %7274 = load i64, i64* %28, align 8, !dbg !1370
  %_410 = sub i64 0, %7274
  %gen411 = add i64 %_410, 1
  %7275 = add i64 %7274, 1, !dbg !1371
  %7276 = getelementptr inbounds i8, i8* %7273, i64 %7275, !dbg !1369
  %7277 = load i8, i8* %7276, align 1, !dbg !1369
  %7278 = sext i8 %7277 to i32, !dbg !1369
  %7279 = icmp sle i32 48, %7278, !dbg !1372
  br label %originalBB409

originalBB415alteredBB:                           ; preds = %originalBB415, %1612
  %7280 = load i8*, i8** %21, align 8, !dbg !1374
  %7281 = load i64, i64* %28, align 8, !dbg !1375
  %_416 = shl i64 %7281, 1
  %7282 = add i64 %7281, 1, !dbg !1376
  %7283 = getelementptr inbounds i8, i8* %7280, i64 %7282, !dbg !1374
  %7284 = load i8, i8* %7283, align 1, !dbg !1374
  %7285 = sext i8 %7284 to i32, !dbg !1374
  %7286 = icmp sle i32 %7285, 57, !dbg !1377
  br label %originalBB415

originalBB420alteredBB:                           ; preds = %originalBB420, %1636
  br label %originalBB420

originalBB424alteredBB:                           ; preds = %originalBB424, %1653
  %7287 = load i64, i64* %29, align 8, !dbg !1381
  %7288 = load i64, i64* %20, align 8, !dbg !1381
  %7289 = icmp ult i64 %7287, %7288, !dbg !1381
  br label %originalBB424

originalBB428alteredBB:                           ; preds = %originalBB428, %1673
  %7290 = load i8*, i8** %19, align 8, !dbg !1381
  %7291 = load i64, i64* %29, align 8, !dbg !1381
  %7292 = getelementptr inbounds i8, i8* %7290, i64 %7291, !dbg !1381
  store i8 48, i8* %7292, align 1, !dbg !1381
  br label %originalBB428

originalBB432alteredBB:                           ; preds = %originalBB432, %1693
  %7293 = load i64, i64* %29, align 8, !dbg !1384
  %_433 = sub i64 %7293, 1
  %gen434 = mul i64 %_433, 1
  %_435 = sub i64 0, %7293
  %gen436 = add i64 %_435, 1
  %_437 = sub i64 %7293, 1
  %gen438 = mul i64 %_437, 1
  %_439 = sub i64 %7293, 1
  %gen440 = mul i64 %_439, 1
  %7294 = add i64 %7293, 1, !dbg !1384
  store i64 %7294, i64* %29, align 8, !dbg !1384
  br label %originalBB432

originalBB444alteredBB:                           ; preds = %originalBB444, %1712
  br label %originalBB444

originalBB448alteredBB:                           ; preds = %originalBB448, %1729
  %7295 = load i64, i64* %29, align 8, !dbg !1386
  %7296 = load i64, i64* %20, align 8, !dbg !1386
  %7297 = icmp ult i64 %7295, %7296, !dbg !1386
  br label %originalBB448

originalBB452alteredBB:                           ; preds = %originalBB452, %1749
  %7298 = load i8*, i8** %19, align 8, !dbg !1386
  %7299 = load i64, i64* %29, align 8, !dbg !1386
  %7300 = getelementptr inbounds i8, i8* %7298, i64 %7299, !dbg !1386
  store i8 48, i8* %7300, align 1, !dbg !1386
  br label %originalBB452

originalBB456alteredBB:                           ; preds = %originalBB456, %1769
  %7301 = load i64, i64* %29, align 8, !dbg !1389
  %_457 = sub i64 0, %7301
  %gen458 = add i64 %_457, 1
  %_459 = sub i64 0, %7301
  %gen460 = add i64 %_459, 1
  %7302 = add i64 %7301, 1, !dbg !1389
  store i64 %7302, i64* %29, align 8, !dbg !1389
  br label %originalBB456

originalBB464alteredBB:                           ; preds = %originalBB464, %1788
  br label %originalBB464

originalBB468alteredBB:                           ; preds = %originalBB468, %1805
  store i8 48, i8* %39, align 1, !dbg !1391
  br label %originalBB468

originalBB472alteredBB:                           ; preds = %originalBB472, %1822
  %7303 = load i32, i32* %24, align 4, !dbg !1393
  %_473 = sub i32 0, %7303
  %gen474 = add i32 %_473, 1
  %_475 = sub i32 0, %7303
  %gen476 = add i32 %_475, 1
  %_477 = sub i32 %7303, 1
  %gen478 = mul i32 %_477, 1
  %7304 = and i32 %7303, 1, !dbg !1395
  %7305 = icmp ne i32 %7304, 0, !dbg !1395
  br label %originalBB472

originalBB482alteredBB:                           ; preds = %originalBB482, %1842
  br label %originalBB482

originalBB486alteredBB:                           ; preds = %originalBB486, %1859
  br label %originalBB486

originalBB490alteredBB:                           ; preds = %originalBB490, %1876
  br label %originalBB490

originalBB494alteredBB:                           ; preds = %originalBB494, %1893
  %7306 = load i32, i32* %23, align 4, !dbg !1399
  br label %originalBB494

originalBB498alteredBB:                           ; preds = %originalBB498, %1911
  %7307 = load i8, i8* %35, align 1, !dbg !1401
  %7308 = trunc i8 %7307 to i1, !dbg !1401
  br label %originalBB498

originalBB502alteredBB:                           ; preds = %originalBB502, %1930
  br label %originalBB502

originalBB506alteredBB:                           ; preds = %originalBB506, %1947
  br label %originalBB506

originalBB510alteredBB:                           ; preds = %originalBB510, %1964
  %7309 = load i32, i32* %24, align 4, !dbg !1407
  %_511 = sub i32 %7309, 4
  %gen512 = mul i32 %_511, 4
  %_513 = shl i32 %7309, 4
  %_514 = sub i32 %7309, 4
  %gen515 = mul i32 %_514, 4
  %_516 = shl i32 %7309, 4
  %7310 = and i32 %7309, 4, !dbg !1409
  %7311 = icmp ne i32 %7310, 0, !dbg !1409
  br label %originalBB510

originalBB520alteredBB:                           ; preds = %originalBB520, %1984
  %7312 = load i64, i64* %28, align 8, !dbg !1411
  %_521 = sub i64 0, %7312
  %gen522 = add i64 %_521, 2
  %_523 = shl i64 %7312, 2
  %_524 = shl i64 %7312, 2
  %_525 = sub i64 0, %7312
  %gen526 = add i64 %_525, 2
  %7313 = add i64 %7312, 2, !dbg !1412
  %7314 = load i64, i64* %22, align 8, !dbg !1413
  %7315 = icmp ult i64 %7313, %7314, !dbg !1414
  br label %originalBB520

originalBB530alteredBB:                           ; preds = %originalBB530, %2005
  %7316 = load i8*, i8** %21, align 8, !dbg !1416
  %7317 = load i64, i64* %28, align 8, !dbg !1417
  %_531 = sub i64 0, %7317
  %gen532 = add i64 %_531, 1
  %_533 = sub i64 %7317, 1
  %gen534 = mul i64 %_533, 1
  %7318 = add i64 %7317, 1, !dbg !1418
  %7319 = getelementptr inbounds i8, i8* %7316, i64 %7318, !dbg !1416
  %7320 = load i8, i8* %7319, align 1, !dbg !1416
  %7321 = sext i8 %7320 to i32, !dbg !1416
  %7322 = icmp eq i32 %7321, 63, !dbg !1419
  br label %originalBB530

originalBB538alteredBB:                           ; preds = %originalBB538, %2029
  %7323 = load i8*, i8** %21, align 8, !dbg !1421
  %7324 = load i64, i64* %28, align 8, !dbg !1422
  %_539 = shl i64 %7324, 2
  %_540 = sub i64 0, %7324
  %gen541 = add i64 %_540, 2
  %_542 = sub i64 0, %7324
  %gen543 = add i64 %_542, 2
  %_544 = sub i64 0, %7324
  %gen545 = add i64 %_544, 2
  %7325 = add i64 %7324, 2, !dbg !1423
  %7326 = getelementptr inbounds i8, i8* %7323, i64 %7325, !dbg !1421
  %7327 = load i8, i8* %7326, align 1, !dbg !1421
  %7328 = sext i8 %7327 to i32, !dbg !1421
  br label %originalBB538

originalBB549alteredBB:                           ; preds = %originalBB549, %2052
  %7329 = load i8, i8* %35, align 1, !dbg !1425
  %7330 = trunc i8 %7329 to i1, !dbg !1425
  br label %originalBB549

originalBB553alteredBB:                           ; preds = %originalBB553, %2071
  br label %originalBB553

originalBB557alteredBB:                           ; preds = %originalBB557, %2088
  %7331 = load i8*, i8** %21, align 8, !dbg !1430
  %7332 = load i64, i64* %28, align 8, !dbg !1431
  %_558 = sub i64 %7332, 2
  %gen559 = mul i64 %_558, 2
  %_560 = shl i64 %7332, 2
  %_561 = shl i64 %7332, 2
  %7333 = add i64 %7332, 2, !dbg !1432
  %7334 = getelementptr inbounds i8, i8* %7331, i64 %7333, !dbg !1430
  %7335 = load i8, i8* %7334, align 1, !dbg !1430
  store i8 %7335, i8* %39, align 1, !dbg !1433
  %7336 = load i64, i64* %28, align 8, !dbg !1434
  %_562 = shl i64 %7336, 2
  %_563 = sub i64 0, %7336
  %gen564 = add i64 %_563, 2
  %_565 = sub i64 %7336, 2
  %gen566 = mul i64 %_565, 2
  %_567 = sub i64 0, %7336
  %gen568 = add i64 %_567, 2
  %7337 = add i64 %7336, 2, !dbg !1434
  store i64 %7337, i64* %28, align 8, !dbg !1434
  br label %originalBB557

originalBB572alteredBB:                           ; preds = %originalBB572, %2112
  %7338 = load i64, i64* %29, align 8, !dbg !1436
  %7339 = load i64, i64* %20, align 8, !dbg !1436
  %7340 = icmp ult i64 %7338, %7339, !dbg !1436
  br label %originalBB572

originalBB576alteredBB:                           ; preds = %originalBB576, %2132
  %7341 = load i8*, i8** %19, align 8, !dbg !1436
  %7342 = load i64, i64* %29, align 8, !dbg !1436
  %7343 = getelementptr inbounds i8, i8* %7341, i64 %7342, !dbg !1436
  store i8 63, i8* %7343, align 1, !dbg !1436
  br label %originalBB576

originalBB580alteredBB:                           ; preds = %originalBB580, %2152
  %7344 = load i64, i64* %29, align 8, !dbg !1439
  %_581 = sub i64 %7344, 1
  %gen582 = mul i64 %_581, 1
  %7345 = add i64 %7344, 1, !dbg !1439
  store i64 %7345, i64* %29, align 8, !dbg !1439
  br label %originalBB580

originalBB586alteredBB:                           ; preds = %originalBB586, %2171
  br label %originalBB586

originalBB590alteredBB:                           ; preds = %originalBB590, %2188
  %7346 = load i64, i64* %29, align 8, !dbg !1441
  %7347 = load i64, i64* %20, align 8, !dbg !1441
  %7348 = icmp ult i64 %7346, %7347, !dbg !1441
  br label %originalBB590

originalBB594alteredBB:                           ; preds = %originalBB594, %2208
  %7349 = load i8*, i8** %19, align 8, !dbg !1441
  %7350 = load i64, i64* %29, align 8, !dbg !1441
  %7351 = getelementptr inbounds i8, i8* %7349, i64 %7350, !dbg !1441
  store i8 34, i8* %7351, align 1, !dbg !1441
  br label %originalBB594

originalBB598alteredBB:                           ; preds = %originalBB598, %2228
  %7352 = load i64, i64* %29, align 8, !dbg !1444
  %_599 = sub i64 0, %7352
  %gen600 = add i64 %_599, 1
  %_601 = sub i64 %7352, 1
  %gen602 = mul i64 %_601, 1
  %7353 = add i64 %7352, 1, !dbg !1444
  store i64 %7353, i64* %29, align 8, !dbg !1444
  br label %originalBB598

originalBB606alteredBB:                           ; preds = %originalBB606, %2247
  br label %originalBB606

originalBB610alteredBB:                           ; preds = %originalBB610, %2264
  %7354 = load i64, i64* %29, align 8, !dbg !1446
  %7355 = load i64, i64* %20, align 8, !dbg !1446
  %7356 = icmp ult i64 %7354, %7355, !dbg !1446
  br label %originalBB610

originalBB614alteredBB:                           ; preds = %originalBB614, %2284
  %7357 = load i8*, i8** %19, align 8, !dbg !1446
  %7358 = load i64, i64* %29, align 8, !dbg !1446
  %7359 = getelementptr inbounds i8, i8* %7357, i64 %7358, !dbg !1446
  store i8 34, i8* %7359, align 1, !dbg !1446
  br label %originalBB614

originalBB618alteredBB:                           ; preds = %originalBB618, %2304
  %7360 = load i64, i64* %29, align 8, !dbg !1449
  %_619 = shl i64 %7360, 1
  %_620 = shl i64 %7360, 1
  %_621 = shl i64 %7360, 1
  %_622 = sub i64 %7360, 1
  %gen623 = mul i64 %_622, 1
  %_624 = sub i64 %7360, 1
  %gen625 = mul i64 %_624, 1
  %_626 = sub i64 %7360, 1
  %gen627 = mul i64 %_626, 1
  %_628 = shl i64 %7360, 1
  %7361 = add i64 %7360, 1, !dbg !1449
  store i64 %7361, i64* %29, align 8, !dbg !1449
  br label %originalBB618

originalBB632alteredBB:                           ; preds = %originalBB632, %2323
  br label %originalBB632

originalBB636alteredBB:                           ; preds = %originalBB636, %2340
  %7362 = load i64, i64* %29, align 8, !dbg !1451
  %7363 = load i64, i64* %20, align 8, !dbg !1451
  %7364 = icmp ult i64 %7362, %7363, !dbg !1451
  br label %originalBB636

originalBB640alteredBB:                           ; preds = %originalBB640, %2360
  %7365 = load i8*, i8** %19, align 8, !dbg !1451
  %7366 = load i64, i64* %29, align 8, !dbg !1451
  %7367 = getelementptr inbounds i8, i8* %7365, i64 %7366, !dbg !1451
  store i8 63, i8* %7367, align 1, !dbg !1451
  br label %originalBB640

originalBB644alteredBB:                           ; preds = %originalBB644, %2380
  %7368 = load i64, i64* %29, align 8, !dbg !1454
  %_645 = shl i64 %7368, 1
  %_646 = sub i64 0, %7368
  %gen647 = add i64 %_646, 1
  %7369 = add i64 %7368, 1, !dbg !1454
  store i64 %7369, i64* %29, align 8, !dbg !1454
  br label %originalBB644

originalBB651alteredBB:                           ; preds = %originalBB651, %2399
  br label %originalBB651

originalBB655alteredBB:                           ; preds = %originalBB655, %2416
  br label %originalBB655

originalBB659alteredBB:                           ; preds = %originalBB659, %2433
  br label %originalBB659

originalBB663alteredBB:                           ; preds = %originalBB663, %2450
  br label %originalBB663

originalBB667alteredBB:                           ; preds = %originalBB667, %2467
  br label %originalBB667

originalBB671alteredBB:                           ; preds = %originalBB671, %2484
  br label %originalBB671

originalBB675alteredBB:                           ; preds = %originalBB675, %2501
  store i8 97, i8* %40, align 1, !dbg !1461
  br label %originalBB675

originalBB679alteredBB:                           ; preds = %originalBB679, %2518
  store i8 98, i8* %40, align 1, !dbg !1463
  br label %originalBB679

originalBB683alteredBB:                           ; preds = %originalBB683, %2535
  store i8 102, i8* %40, align 1, !dbg !1465
  br label %originalBB683

originalBB687alteredBB:                           ; preds = %originalBB687, %2552
  store i8 110, i8* %40, align 1, !dbg !1467
  br label %originalBB687

originalBB691alteredBB:                           ; preds = %originalBB691, %2569
  store i8 114, i8* %40, align 1, !dbg !1469
  br label %originalBB691

originalBB695alteredBB:                           ; preds = %originalBB695, %2586
  store i8 116, i8* %40, align 1, !dbg !1471
  br label %originalBB695

originalBB699alteredBB:                           ; preds = %originalBB699, %2603
  store i8 118, i8* %40, align 1, !dbg !1473
  br label %originalBB699

originalBB703alteredBB:                           ; preds = %originalBB703, %2620
  %7370 = load i8, i8* %39, align 1, !dbg !1475
  store i8 %7370, i8* %40, align 1, !dbg !1476
  %7371 = load i32, i32* %23, align 4, !dbg !1477
  %7372 = icmp eq i32 %7371, 2, !dbg !1479
  br label %originalBB703

originalBB707alteredBB:                           ; preds = %originalBB707, %2640
  %7373 = load i8, i8* %35, align 1, !dbg !1481
  %7374 = trunc i8 %7373 to i1, !dbg !1481
  br label %originalBB707

originalBB711alteredBB:                           ; preds = %originalBB711, %2659
  br label %originalBB711

originalBB715alteredBB:                           ; preds = %originalBB715, %2676
  br label %originalBB715

originalBB719alteredBB:                           ; preds = %originalBB719, %2693
  %7375 = load i8, i8* %33, align 1, !dbg !1487
  %7376 = trunc i8 %7375 to i1, !dbg !1487
  br label %originalBB719

originalBB723alteredBB:                           ; preds = %originalBB723, %2712
  %7377 = load i8, i8* %35, align 1, !dbg !1490
  %7378 = trunc i8 %7377 to i1, !dbg !1490
  br label %originalBB723

originalBB727alteredBB:                           ; preds = %originalBB727, %2731
  %7379 = load i64, i64* %32, align 8, !dbg !1492
  %7380 = icmp ne i64 %7379, 0, !dbg !1492
  br label %originalBB727

originalBB731alteredBB:                           ; preds = %originalBB731, %2750
  br label %originalBB731

originalBB735alteredBB:                           ; preds = %originalBB735, %2767
  br label %originalBB735

originalBB739alteredBB:                           ; preds = %originalBB739, %2784
  %7381 = load i32, i32* %23, align 4, !dbg !1497
  %7382 = icmp eq i32 %7381, 2, !dbg !1499
  br label %originalBB739

originalBB743alteredBB:                           ; preds = %originalBB743, %2803
  %7383 = load i8, i8* %35, align 1, !dbg !1501
  %7384 = trunc i8 %7383 to i1, !dbg !1501
  br label %originalBB743

originalBB747alteredBB:                           ; preds = %originalBB747, %2822
  br label %originalBB747

originalBB751alteredBB:                           ; preds = %originalBB751, %2839
  br label %originalBB751

originalBB755alteredBB:                           ; preds = %originalBB755, %2856
  %7385 = load i8, i8* %33, align 1, !dbg !1506
  %7386 = trunc i8 %7385 to i1, !dbg !1506
  br label %originalBB755

originalBB759alteredBB:                           ; preds = %originalBB759, %2875
  %7387 = load i8, i8* %40, align 1, !dbg !1509
  store i8 %7387, i8* %39, align 1, !dbg !1511
  br label %originalBB759

originalBB763alteredBB:                           ; preds = %originalBB763, %2893
  br label %originalBB763

originalBB767alteredBB:                           ; preds = %originalBB767, %2910
  %7388 = load i64, i64* %22, align 8, !dbg !1514
  %7389 = icmp eq i64 %7388, -1, !dbg !1516
  br label %originalBB767

originalBB771alteredBB:                           ; preds = %originalBB771, %2929
  %7390 = load i8*, i8** %21, align 8, !dbg !1518
  %7391 = getelementptr inbounds i8, i8* %7390, i64 1, !dbg !1518
  %7392 = load i8, i8* %7391, align 1, !dbg !1518
  %7393 = sext i8 %7392 to i32, !dbg !1518
  %7394 = icmp eq i32 %7393, 0, !dbg !1519
  br label %originalBB771

originalBB775alteredBB:                           ; preds = %originalBB775, %2951
  %7395 = load i64, i64* %22, align 8, !dbg !1520
  %7396 = icmp eq i64 %7395, 1, !dbg !1521
  br label %originalBB775

originalBB779alteredBB:                           ; preds = %originalBB779, %2970
  br label %originalBB779

originalBB783alteredBB:                           ; preds = %originalBB783, %2987
  br label %originalBB783

originalBB787alteredBB:                           ; preds = %originalBB787, %3004
  %7397 = load i64, i64* %28, align 8, !dbg !1524
  %7398 = icmp ne i64 %7397, 0, !dbg !1526
  br label %originalBB787

originalBB791alteredBB:                           ; preds = %originalBB791, %3023
  br label %originalBB791

originalBB795alteredBB:                           ; preds = %originalBB795, %3040
  br label %originalBB795

originalBB799alteredBB:                           ; preds = %originalBB799, %3057
  store i8 1, i8* %43, align 1, !dbg !1530
  br label %originalBB799

originalBB803alteredBB:                           ; preds = %originalBB803, %3074
  %7399 = load i32, i32* %23, align 4, !dbg !1532
  %7400 = icmp eq i32 %7399, 2, !dbg !1534
  br label %originalBB803

originalBB807alteredBB:                           ; preds = %originalBB807, %3093
  %7401 = load i8, i8* %35, align 1, !dbg !1536
  %7402 = trunc i8 %7401 to i1, !dbg !1536
  br label %originalBB807

originalBB811alteredBB:                           ; preds = %originalBB811, %3112
  br label %originalBB811

originalBB815alteredBB:                           ; preds = %originalBB815, %3129
  br label %originalBB815

originalBB819alteredBB:                           ; preds = %originalBB819, %3146
  store i8 1, i8* %37, align 1, !dbg !1540
  store i8 1, i8* %43, align 1, !dbg !1541
  %7403 = load i32, i32* %23, align 4, !dbg !1542
  %7404 = icmp eq i32 %7403, 2, !dbg !1544
  br label %originalBB819

originalBB823alteredBB:                           ; preds = %originalBB823, %3165
  %7405 = load i8, i8* %35, align 1, !dbg !1546
  %7406 = trunc i8 %7405 to i1, !dbg !1546
  br label %originalBB823

originalBB827alteredBB:                           ; preds = %originalBB827, %3184
  br label %originalBB827

originalBB831alteredBB:                           ; preds = %originalBB831, %3201
  %7407 = load i64, i64* %20, align 8, !dbg !1551
  %7408 = icmp ne i64 %7407, 0, !dbg !1551
  br label %originalBB831

originalBB835alteredBB:                           ; preds = %originalBB835, %3220
  %7409 = load i64, i64* %30, align 8, !dbg !1554
  %7410 = icmp ne i64 %7409, 0, !dbg !1554
  br label %originalBB835

originalBB839alteredBB:                           ; preds = %originalBB839, %3239
  %7411 = load i64, i64* %20, align 8, !dbg !1556
  store i64 %7411, i64* %30, align 8, !dbg !1558
  store i64 0, i64* %20, align 8, !dbg !1559
  br label %originalBB839

originalBB843alteredBB:                           ; preds = %originalBB843, %3257
  br label %originalBB843

originalBB847alteredBB:                           ; preds = %originalBB847, %3274
  %7412 = load i64, i64* %29, align 8, !dbg !1562
  %7413 = load i64, i64* %20, align 8, !dbg !1562
  %7414 = icmp ult i64 %7412, %7413, !dbg !1562
  br label %originalBB847

originalBB851alteredBB:                           ; preds = %originalBB851, %3294
  %7415 = load i8*, i8** %19, align 8, !dbg !1562
  %7416 = load i64, i64* %29, align 8, !dbg !1562
  %7417 = getelementptr inbounds i8, i8* %7415, i64 %7416, !dbg !1562
  store i8 39, i8* %7417, align 1, !dbg !1562
  br label %originalBB851

originalBB855alteredBB:                           ; preds = %originalBB855, %3314
  %7418 = load i64, i64* %29, align 8, !dbg !1565
  %_856 = sub i64 0, %7418
  %gen857 = add i64 %_856, 1
  %_858 = shl i64 %7418, 1
  %_859 = shl i64 %7418, 1
  %_860 = sub i64 %7418, 1
  %gen861 = mul i64 %_860, 1
  %7419 = add i64 %7418, 1, !dbg !1565
  store i64 %7419, i64* %29, align 8, !dbg !1565
  br label %originalBB855

originalBB865alteredBB:                           ; preds = %originalBB865, %3333
  br label %originalBB865

originalBB869alteredBB:                           ; preds = %originalBB869, %3350
  %7420 = load i64, i64* %29, align 8, !dbg !1567
  %7421 = load i64, i64* %20, align 8, !dbg !1567
  %7422 = icmp ult i64 %7420, %7421, !dbg !1567
  br label %originalBB869

originalBB873alteredBB:                           ; preds = %originalBB873, %3370
  %7423 = load i8*, i8** %19, align 8, !dbg !1567
  %7424 = load i64, i64* %29, align 8, !dbg !1567
  %7425 = getelementptr inbounds i8, i8* %7423, i64 %7424, !dbg !1567
  store i8 92, i8* %7425, align 1, !dbg !1567
  br label %originalBB873

originalBB877alteredBB:                           ; preds = %originalBB877, %3390
  %7426 = load i64, i64* %29, align 8, !dbg !1570
  %_878 = sub i64 %7426, 1
  %gen879 = mul i64 %_878, 1
  %7427 = add i64 %7426, 1, !dbg !1570
  store i64 %7427, i64* %29, align 8, !dbg !1570
  br label %originalBB877

originalBB883alteredBB:                           ; preds = %originalBB883, %3409
  br label %originalBB883

originalBB887alteredBB:                           ; preds = %originalBB887, %3426
  %7428 = load i64, i64* %29, align 8, !dbg !1572
  %7429 = load i64, i64* %20, align 8, !dbg !1572
  %7430 = icmp ult i64 %7428, %7429, !dbg !1572
  br label %originalBB887

originalBB891alteredBB:                           ; preds = %originalBB891, %3446
  %7431 = load i8*, i8** %19, align 8, !dbg !1572
  %7432 = load i64, i64* %29, align 8, !dbg !1572
  %7433 = getelementptr inbounds i8, i8* %7431, i64 %7432, !dbg !1572
  store i8 39, i8* %7433, align 1, !dbg !1572
  br label %originalBB891

originalBB895alteredBB:                           ; preds = %originalBB895, %3466
  %7434 = load i64, i64* %29, align 8, !dbg !1575
  %_896 = shl i64 %7434, 1
  %_897 = sub i64 %7434, 1
  %gen898 = mul i64 %_897, 1
  %_899 = shl i64 %7434, 1
  %_900 = sub i64 %7434, 1
  %gen901 = mul i64 %_900, 1
  %_902 = shl i64 %7434, 1
  %_903 = sub i64 %7434, 1
  %gen904 = mul i64 %_903, 1
  %7435 = add i64 %7434, 1, !dbg !1575
  store i64 %7435, i64* %29, align 8, !dbg !1575
  br label %originalBB895

originalBB908alteredBB:                           ; preds = %originalBB908, %3485
  store i8 0, i8* %36, align 1, !dbg !1576
  br label %originalBB908

originalBB912alteredBB:                           ; preds = %originalBB912, %3502
  br label %originalBB912

originalBB916alteredBB:                           ; preds = %originalBB916, %3519
  store i8 1, i8* %43, align 1, !dbg !1579
  br label %originalBB916

originalBB920alteredBB:                           ; preds = %originalBB920, %3536
  %7436 = load i8, i8* %34, align 1, !dbg !1586
  %7437 = trunc i8 %7436 to i1, !dbg !1586
  br label %originalBB920

originalBB924alteredBB:                           ; preds = %originalBB924, %3555
  store i64 1, i64* %44, align 8, !dbg !1589
  %7438 = call i16** @__ctype_b_loc() #15, !dbg !1591
  %7439 = load i16*, i16** %7438, align 8, !dbg !1591
  %7440 = load i8, i8* %39, align 1, !dbg !1591
  %7441 = zext i8 %7440 to i32, !dbg !1591
  %7442 = sext i32 %7441 to i64, !dbg !1591
  %7443 = getelementptr inbounds i16, i16* %7439, i64 %7442, !dbg !1591
  %7444 = load i16, i16* %7443, align 2, !dbg !1591
  %7445 = zext i16 %7444 to i32, !dbg !1591
  %_925 = shl i32 %7445, 16384
  %7446 = and i32 %7445, 16384, !dbg !1591
  %7447 = icmp ne i32 %7446, 0, !dbg !1592
  %7448 = zext i1 %7447 to i8, !dbg !1593
  store i8 %7448, i8* %45, align 1, !dbg !1593
  br label %originalBB924

originalBB929alteredBB:                           ; preds = %originalBB929, %3583
  %7449 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !1613
  call void @llvm.memset.p0i8.i64(i8* align 4 %7449, i8 0, i64 8, i1 false), !dbg !1613
  store i64 0, i64* %44, align 8, !dbg !1614
  store i8 1, i8* %45, align 1, !dbg !1615
  %7450 = load i64, i64* %22, align 8, !dbg !1616
  %7451 = icmp eq i64 %7450, -1, !dbg !1618
  br label %originalBB929

originalBB933alteredBB:                           ; preds = %originalBB933, %3603
  %7452 = load i8*, i8** %21, align 8, !dbg !1620
  %7453 = call i64 @strlen(i8* %7452) #13, !dbg !1621
  store i64 %7453, i64* %22, align 8, !dbg !1622
  br label %originalBB933

originalBB937alteredBB:                           ; preds = %originalBB937, %3622
  br label %originalBB937

originalBB941alteredBB:                           ; preds = %originalBB941, %3639
  %7454 = load i8*, i8** %21, align 8, !dbg !1631
  %7455 = load i64, i64* %28, align 8, !dbg !1632
  %7456 = load i64, i64* %44, align 8, !dbg !1633
  %_942 = sub i64 %7455, %7456
  %gen943 = mul i64 %_942, %7456
  %7457 = add i64 %7455, %7456, !dbg !1634
  %7458 = getelementptr inbounds i8, i8* %7454, i64 %7457, !dbg !1631
  %7459 = load i64, i64* %22, align 8, !dbg !1635
  %7460 = load i64, i64* %28, align 8, !dbg !1636
  %7461 = load i64, i64* %44, align 8, !dbg !1637
  %_944 = sub i64 %7460, %7461
  %gen945 = mul i64 %_944, %7461
  %_946 = sub i64 0, %7460
  %gen947 = add i64 %_946, %7461
  %7462 = add i64 %7460, %7461, !dbg !1638
  %_948 = shl i64 %7459, %7462
  %_949 = sub i64 0, %7459
  %gen950 = add i64 %_949, %7462
  %7463 = sub i64 %7459, %7462, !dbg !1639
  %7464 = call i64 @rpl_mbrtowc(i32* %47, i8* %7458, i64 %7463, %struct.__mbstate_t* %46), !dbg !1640
  store i64 %7464, i64* %48, align 8, !dbg !1630
  %7465 = load i64, i64* %48, align 8, !dbg !1641
  %7466 = icmp eq i64 %7465, 0, !dbg !1643
  br label %originalBB941

originalBB954alteredBB:                           ; preds = %originalBB954, %3669
  br label %originalBB954

originalBB958alteredBB:                           ; preds = %originalBB958, %3686
  %7467 = load i64, i64* %48, align 8, !dbg !1646
  %7468 = icmp eq i64 %7467, -1, !dbg !1648
  br label %originalBB958

originalBB962alteredBB:                           ; preds = %originalBB962, %3705
  store i8 0, i8* %45, align 1, !dbg !1650
  br label %originalBB962

originalBB966alteredBB:                           ; preds = %originalBB966, %3722
  %7469 = load i64, i64* %48, align 8, !dbg !1653
  %7470 = icmp eq i64 %7469, -2, !dbg !1655
  br label %originalBB966

originalBB970alteredBB:                           ; preds = %originalBB970, %3741
  store i8 0, i8* %45, align 1, !dbg !1657
  br label %originalBB970

originalBB974alteredBB:                           ; preds = %originalBB974, %3758
  %7471 = load i64, i64* %28, align 8, !dbg !1660
  %7472 = load i64, i64* %44, align 8, !dbg !1661
  %_975 = sub i64 0, %7471
  %gen976 = add i64 %_975, %7472
  %_977 = sub i64 %7471, %7472
  %gen978 = mul i64 %_977, %7472
  %_979 = shl i64 %7471, %7472
  %_980 = sub i64 %7471, %7472
  %gen981 = mul i64 %_980, %7472
  %_982 = sub i64 %7471, %7472
  %gen983 = mul i64 %_982, %7472
  %_984 = sub i64 0, %7471
  %gen985 = add i64 %_984, %7472
  %7473 = add i64 %7471, %7472, !dbg !1662
  %7474 = load i64, i64* %22, align 8, !dbg !1663
  %7475 = icmp ult i64 %7473, %7474, !dbg !1664
  br label %originalBB974

originalBB989alteredBB:                           ; preds = %originalBB989, %3780
  %7476 = load i8*, i8** %21, align 8, !dbg !1666
  %7477 = load i64, i64* %28, align 8, !dbg !1667
  %7478 = load i64, i64* %44, align 8, !dbg !1668
  %_990 = sub i64 %7477, %7478
  %gen991 = mul i64 %_990, %7478
  %_992 = shl i64 %7477, %7478
  %_993 = sub i64 0, %7477
  %gen994 = add i64 %_993, %7478
  %_995 = sub i64 %7477, %7478
  %gen996 = mul i64 %_995, %7478
  %_997 = sub i64 %7477, %7478
  %gen998 = mul i64 %_997, %7478
  %_999 = sub i64 %7477, %7478
  %gen1000 = mul i64 %_999, %7478
  %_1001 = shl i64 %7477, %7478
  %7479 = add i64 %7477, %7478, !dbg !1669
  %7480 = getelementptr inbounds i8, i8* %7476, i64 %7479, !dbg !1666
  %7481 = load i8, i8* %7480, align 1, !dbg !1666
  %7482 = sext i8 %7481 to i32, !dbg !1666
  %7483 = icmp ne i32 %7482, 0, !dbg !1665
  br label %originalBB989

originalBB1005alteredBB:                          ; preds = %originalBB1005, %3805
  br label %originalBB1005

originalBB1009alteredBB:                          ; preds = %originalBB1009, %3823
  %7484 = load i64, i64* %44, align 8, !dbg !1671
  %_1010 = sub i64 0, %7484
  %gen1011 = add i64 %_1010, 1
  %_1012 = sub i64 0, %7484
  %gen1013 = add i64 %_1012, 1
  %_1014 = sub i64 %7484, 1
  %gen1015 = mul i64 %_1014, 1
  %7485 = add i64 %7484, 1, !dbg !1671
  store i64 %7485, i64* %44, align 8, !dbg !1671
  br label %originalBB1009

originalBB1019alteredBB:                          ; preds = %originalBB1019, %3842
  br label %originalBB1019

originalBB1023alteredBB:                          ; preds = %originalBB1023, %3859
  %7486 = load i8, i8* %35, align 1, !dbg !1674
  %7487 = trunc i8 %7486 to i1, !dbg !1674
  br label %originalBB1023

originalBB1027alteredBB:                          ; preds = %originalBB1027, %3878
  %7488 = load i32, i32* %23, align 4, !dbg !1678
  %7489 = icmp eq i32 %7488, 2, !dbg !1679
  br label %originalBB1027

originalBB1031alteredBB:                          ; preds = %originalBB1031, %3897
  store i64 1, i64* %49, align 8, !dbg !1684
  br label %originalBB1031

originalBB1035alteredBB:                          ; preds = %originalBB1035, %3914
  %7490 = load i64, i64* %49, align 8, !dbg !1687
  %7491 = load i64, i64* %48, align 8, !dbg !1689
  %7492 = icmp ult i64 %7490, %7491, !dbg !1690
  br label %originalBB1035

originalBB1039alteredBB:                          ; preds = %originalBB1039, %3934
  %7493 = load i8*, i8** %21, align 8, !dbg !1692
  %7494 = load i64, i64* %28, align 8, !dbg !1693
  %7495 = load i64, i64* %44, align 8, !dbg !1694
  %_1040 = sub i64 0, %7494
  %gen1041 = add i64 %_1040, %7495
  %_1042 = shl i64 %7494, %7495
  %7496 = add i64 %7494, %7495, !dbg !1695
  %7497 = load i64, i64* %49, align 8, !dbg !1696
  %_1043 = sub i64 %7496, %7497
  %gen1044 = mul i64 %_1043, %7497
  %_1045 = sub i64 0, %7496
  %gen1046 = add i64 %_1045, %7497
  %_1047 = sub i64 %7496, %7497
  %gen1048 = mul i64 %_1047, %7497
  %_1049 = shl i64 %7496, %7497
  %_1050 = sub i64 %7496, %7497
  %gen1051 = mul i64 %_1050, %7497
  %7498 = add i64 %7496, %7497, !dbg !1697
  %7499 = getelementptr inbounds i8, i8* %7493, i64 %7498, !dbg !1692
  %7500 = load i8, i8* %7499, align 1, !dbg !1692
  %7501 = sext i8 %7500 to i32, !dbg !1692
  br label %originalBB1039

originalBB1055alteredBB:                          ; preds = %originalBB1055, %3960
  br label %originalBB1055

originalBB1059alteredBB:                          ; preds = %originalBB1059, %3977
  br label %originalBB1059

originalBB1063alteredBB:                          ; preds = %originalBB1063, %3994
  br label %originalBB1063

originalBB1067alteredBB:                          ; preds = %originalBB1067, %4011
  %7502 = load i64, i64* %49, align 8, !dbg !1703
  %_1068 = sub i64 %7502, 1
  %gen1069 = mul i64 %_1068, 1
  %7503 = add i64 %7502, 1, !dbg !1703
  store i64 %7503, i64* %49, align 8, !dbg !1703
  br label %originalBB1067

originalBB1073alteredBB:                          ; preds = %originalBB1073, %4030
  br label %originalBB1073

originalBB1077alteredBB:                          ; preds = %originalBB1077, %4047
  %7504 = load i32, i32* %47, align 4, !dbg !1708
  %7505 = call i32 @iswprint(i32 %7504) #10, !dbg !1710
  %7506 = icmp ne i32 %7505, 0, !dbg !1710
  br label %originalBB1077

originalBB1081alteredBB:                          ; preds = %originalBB1081, %4067
  store i8 0, i8* %45, align 1, !dbg !1712
  br label %originalBB1081

originalBB1085alteredBB:                          ; preds = %originalBB1085, %4084
  %7507 = load i64, i64* %48, align 8, !dbg !1714
  %7508 = load i64, i64* %44, align 8, !dbg !1715
  %_1086 = sub i64 0, %7508
  %gen1087 = add i64 %_1086, %7507
  %_1088 = sub i64 %7508, %7507
  %gen1089 = mul i64 %_1088, %7507
  %7509 = add i64 %7508, %7507, !dbg !1715
  store i64 %7509, i64* %44, align 8, !dbg !1715
  br label %originalBB1085

originalBB1093alteredBB:                          ; preds = %originalBB1093, %4104
  br label %originalBB1093

originalBB1097alteredBB:                          ; preds = %originalBB1097, %4121
  br label %originalBB1097

originalBB1101alteredBB:                          ; preds = %originalBB1101, %4138
  br label %originalBB1101

originalBB1105alteredBB:                          ; preds = %originalBB1105, %4155
  %7510 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !1717
  %7511 = icmp ne i32 %7510, 0, !dbg !1718
  %_1106 = sub i1 false, %7511
  %gen1107 = add i1 %_1106, true
  %_1108 = shl i1 %7511, true
  %_1109 = sub i1 false, %7511
  %gen1110 = add i1 %_1109, true
  %7512 = xor i1 %7511, true, !dbg !1718
  br label %originalBB1105

originalBB1114alteredBB:                          ; preds = %originalBB1114, %4175
  br label %originalBB1114

originalBB1118alteredBB:                          ; preds = %originalBB1118, %4192
  %7513 = load i8, i8* %45, align 1, !dbg !1721
  %7514 = trunc i8 %7513 to i1, !dbg !1721
  %7515 = zext i1 %7514 to i8, !dbg !1722
  store i8 %7515, i8* %43, align 1, !dbg !1722
  %7516 = load i64, i64* %44, align 8, !dbg !1723
  %7517 = icmp ult i64 1, %7516, !dbg !1725
  br label %originalBB1118

originalBB1122alteredBB:                          ; preds = %originalBB1122, %4214
  %7518 = load i8, i8* %33, align 1, !dbg !1727
  %7519 = trunc i8 %7518 to i1, !dbg !1727
  br label %originalBB1122

originalBB1126alteredBB:                          ; preds = %originalBB1126, %4233
  %7520 = load i8, i8* %45, align 1, !dbg !1729
  %7521 = trunc i8 %7520 to i1, !dbg !1729
  br label %originalBB1126

originalBB1130alteredBB:                          ; preds = %originalBB1130, %4252
  %7522 = load i64, i64* %28, align 8, !dbg !1734
  %7523 = load i64, i64* %44, align 8, !dbg !1735
  %_1131 = sub i64 %7522, %7523
  %gen1132 = mul i64 %_1131, %7523
  %_1133 = shl i64 %7522, %7523
  %_1134 = sub i64 %7522, %7523
  %gen1135 = mul i64 %_1134, %7523
  %_1136 = sub i64 0, %7522
  %gen1137 = add i64 %_1136, %7523
  %7524 = add i64 %7522, %7523, !dbg !1736
  store i64 %7524, i64* %50, align 8, !dbg !1733
  br label %originalBB1130

originalBB1141alteredBB:                          ; preds = %originalBB1141, %4272
  %7525 = load i8, i8* %33, align 1, !dbg !1738
  %7526 = trunc i8 %7525 to i1, !dbg !1738
  br label %originalBB1141

originalBB1145alteredBB:                          ; preds = %originalBB1145, %4291
  %7527 = load i8, i8* %45, align 1, !dbg !1744
  %7528 = trunc i8 %7527 to i1, !dbg !1744
  br label %originalBB1145

originalBB1149alteredBB:                          ; preds = %originalBB1149, %4310
  br label %originalBB1149

originalBB1153alteredBB:                          ; preds = %originalBB1153, %4327
  %7529 = load i8, i8* %35, align 1, !dbg !1748
  %7530 = trunc i8 %7529 to i1, !dbg !1748
  br label %originalBB1153

originalBB1157alteredBB:                          ; preds = %originalBB1157, %4346
  br label %originalBB1157

originalBB1161alteredBB:                          ; preds = %originalBB1161, %4363
  store i8 1, i8* %42, align 1, !dbg !1751
  %7531 = load i32, i32* %23, align 4, !dbg !1752
  %7532 = icmp eq i32 %7531, 2, !dbg !1752
  br label %originalBB1161

originalBB1165alteredBB:                          ; preds = %originalBB1165, %4382
  %7533 = load i8, i8* %36, align 1, !dbg !1752
  %7534 = trunc i8 %7533 to i1, !dbg !1752
  br label %originalBB1165

originalBB1169alteredBB:                          ; preds = %originalBB1169, %4401
  br label %originalBB1169

originalBB1173alteredBB:                          ; preds = %originalBB1173, %4418
  %7535 = load i64, i64* %29, align 8, !dbg !1756
  %7536 = load i64, i64* %20, align 8, !dbg !1756
  %7537 = icmp ult i64 %7535, %7536, !dbg !1756
  br label %originalBB1173

originalBB1177alteredBB:                          ; preds = %originalBB1177, %4438
  %7538 = load i8*, i8** %19, align 8, !dbg !1756
  %7539 = load i64, i64* %29, align 8, !dbg !1756
  %7540 = getelementptr inbounds i8, i8* %7538, i64 %7539, !dbg !1756
  store i8 39, i8* %7540, align 1, !dbg !1756
  br label %originalBB1177

originalBB1181alteredBB:                          ; preds = %originalBB1181, %4458
  %7541 = load i64, i64* %29, align 8, !dbg !1759
  %_1182 = shl i64 %7541, 1
  %_1183 = shl i64 %7541, 1
  %7542 = add i64 %7541, 1, !dbg !1759
  store i64 %7542, i64* %29, align 8, !dbg !1759
  br label %originalBB1181

originalBB1187alteredBB:                          ; preds = %originalBB1187, %4477
  br label %originalBB1187

originalBB1191alteredBB:                          ; preds = %originalBB1191, %4494
  %7543 = load i64, i64* %29, align 8, !dbg !1760
  %7544 = load i64, i64* %20, align 8, !dbg !1760
  %7545 = icmp ult i64 %7543, %7544, !dbg !1760
  br label %originalBB1191

originalBB1195alteredBB:                          ; preds = %originalBB1195, %4514
  %7546 = load i8*, i8** %19, align 8, !dbg !1760
  %7547 = load i64, i64* %29, align 8, !dbg !1760
  %7548 = getelementptr inbounds i8, i8* %7546, i64 %7547, !dbg !1760
  store i8 36, i8* %7548, align 1, !dbg !1760
  br label %originalBB1195

originalBB1199alteredBB:                          ; preds = %originalBB1199, %4534
  %7549 = load i64, i64* %29, align 8, !dbg !1763
  %_1200 = sub i64 0, %7549
  %gen1201 = add i64 %_1200, 1
  %_1202 = shl i64 %7549, 1
  %_1203 = shl i64 %7549, 1
  %_1204 = sub i64 0, %7549
  %gen1205 = add i64 %_1204, 1
  %_1206 = sub i64 %7549, 1
  %gen1207 = mul i64 %_1206, 1
  %_1208 = sub i64 %7549, 1
  %gen1209 = mul i64 %_1208, 1
  %7550 = add i64 %7549, 1, !dbg !1763
  store i64 %7550, i64* %29, align 8, !dbg !1763
  br label %originalBB1199

originalBB1213alteredBB:                          ; preds = %originalBB1213, %4553
  br label %originalBB1213

originalBB1217alteredBB:                          ; preds = %originalBB1217, %4570
  %7551 = load i64, i64* %29, align 8, !dbg !1764
  %7552 = load i64, i64* %20, align 8, !dbg !1764
  %7553 = icmp ult i64 %7551, %7552, !dbg !1764
  br label %originalBB1217

originalBB1221alteredBB:                          ; preds = %originalBB1221, %4590
  %7554 = load i8*, i8** %19, align 8, !dbg !1764
  %7555 = load i64, i64* %29, align 8, !dbg !1764
  %7556 = getelementptr inbounds i8, i8* %7554, i64 %7555, !dbg !1764
  store i8 39, i8* %7556, align 1, !dbg !1764
  br label %originalBB1221

originalBB1225alteredBB:                          ; preds = %originalBB1225, %4610
  %7557 = load i64, i64* %29, align 8, !dbg !1767
  %_1226 = sub i64 %7557, 1
  %gen1227 = mul i64 %_1226, 1
  %7558 = add i64 %7557, 1, !dbg !1767
  store i64 %7558, i64* %29, align 8, !dbg !1767
  br label %originalBB1225

originalBB1231alteredBB:                          ; preds = %originalBB1231, %4629
  store i8 1, i8* %36, align 1, !dbg !1754
  br label %originalBB1231

originalBB1235alteredBB:                          ; preds = %originalBB1235, %4646
  br label %originalBB1235

originalBB1239alteredBB:                          ; preds = %originalBB1239, %4663
  %7559 = load i64, i64* %29, align 8, !dbg !1768
  %7560 = load i64, i64* %20, align 8, !dbg !1768
  %7561 = icmp ult i64 %7559, %7560, !dbg !1768
  br label %originalBB1239

originalBB1243alteredBB:                          ; preds = %originalBB1243, %4683
  %7562 = load i8*, i8** %19, align 8, !dbg !1768
  %7563 = load i64, i64* %29, align 8, !dbg !1768
  %7564 = getelementptr inbounds i8, i8* %7562, i64 %7563, !dbg !1768
  store i8 92, i8* %7564, align 1, !dbg !1768
  br label %originalBB1243

originalBB1247alteredBB:                          ; preds = %originalBB1247, %4703
  %7565 = load i64, i64* %29, align 8, !dbg !1771
  %_1248 = sub i64 0, %7565
  %gen1249 = add i64 %_1248, 1
  %_1250 = sub i64 %7565, 1
  %gen1251 = mul i64 %_1250, 1
  %_1252 = sub i64 0, %7565
  %gen1253 = add i64 %_1252, 1
  %_1254 = shl i64 %7565, 1
  %_1255 = sub i64 %7565, 1
  %gen1256 = mul i64 %_1255, 1
  %7566 = add i64 %7565, 1, !dbg !1771
  store i64 %7566, i64* %29, align 8, !dbg !1771
  br label %originalBB1247

originalBB1260alteredBB:                          ; preds = %originalBB1260, %4722
  br label %originalBB1260

originalBB1264alteredBB:                          ; preds = %originalBB1264, %4739
  br label %originalBB1264

originalBB1268alteredBB:                          ; preds = %originalBB1268, %4756
  %7567 = load i64, i64* %29, align 8, !dbg !1773
  %7568 = load i64, i64* %20, align 8, !dbg !1773
  %7569 = icmp ult i64 %7567, %7568, !dbg !1773
  br label %originalBB1268

originalBB1272alteredBB:                          ; preds = %originalBB1272, %4776
  %7570 = load i8, i8* %39, align 1, !dbg !1773
  %7571 = zext i8 %7570 to i32, !dbg !1773
  %_1273 = sub i32 0, %7571
  %gen1274 = add i32 %_1273, 6
  %7572 = ashr i32 %7571, 6, !dbg !1773
  %_1275 = shl i32 48, %7572
  %_1276 = sub i32 48, %7572
  %gen1277 = mul i32 %_1276, %7572
  %_1278 = sub i32 48, %7572
  %gen1279 = mul i32 %_1278, %7572
  %_1280 = sub i32 0, 48
  %gen1281 = add i32 %_1280, %7572
  %_1282 = sub i32 48, %7572
  %gen1283 = mul i32 %_1282, %7572
  %7573 = add nsw i32 48, %7572, !dbg !1773
  %7574 = trunc i32 %7573 to i8, !dbg !1773
  %7575 = load i8*, i8** %19, align 8, !dbg !1773
  %7576 = load i64, i64* %29, align 8, !dbg !1773
  %7577 = getelementptr inbounds i8, i8* %7575, i64 %7576, !dbg !1773
  store i8 %7574, i8* %7577, align 1, !dbg !1773
  br label %originalBB1272

originalBB1287alteredBB:                          ; preds = %originalBB1287, %4801
  %7578 = load i64, i64* %29, align 8, !dbg !1776
  %_1288 = sub i64 %7578, 1
  %gen1289 = mul i64 %_1288, 1
  %_1290 = sub i64 %7578, 1
  %gen1291 = mul i64 %_1290, 1
  %_1292 = sub i64 %7578, 1
  %gen1293 = mul i64 %_1292, 1
  %7579 = add i64 %7578, 1, !dbg !1776
  store i64 %7579, i64* %29, align 8, !dbg !1776
  br label %originalBB1287

originalBB1297alteredBB:                          ; preds = %originalBB1297, %4820
  br label %originalBB1297

originalBB1301alteredBB:                          ; preds = %originalBB1301, %4837
  %7580 = load i64, i64* %29, align 8, !dbg !1778
  %7581 = load i64, i64* %20, align 8, !dbg !1778
  %7582 = icmp ult i64 %7580, %7581, !dbg !1778
  br label %originalBB1301

originalBB1305alteredBB:                          ; preds = %originalBB1305, %4857
  %7583 = load i8, i8* %39, align 1, !dbg !1778
  %7584 = zext i8 %7583 to i32, !dbg !1778
  %_1306 = sub i32 %7584, 3
  %gen1307 = mul i32 %_1306, 3
  %_1308 = shl i32 %7584, 3
  %_1309 = sub i32 %7584, 3
  %gen1310 = mul i32 %_1309, 3
  %_1311 = sub i32 0, %7584
  %gen1312 = add i32 %_1311, 3
  %_1313 = shl i32 %7584, 3
  %_1314 = sub i32 %7584, 3
  %gen1315 = mul i32 %_1314, 3
  %_1316 = sub i32 0, %7584
  %gen1317 = add i32 %_1316, 3
  %_1318 = shl i32 %7584, 3
  %_1319 = sub i32 %7584, 3
  %gen1320 = mul i32 %_1319, 3
  %7585 = ashr i32 %7584, 3, !dbg !1778
  %_1321 = sub i32 0, %7585
  %gen1322 = add i32 %_1321, 7
  %_1323 = sub i32 %7585, 7
  %gen1324 = mul i32 %_1323, 7
  %_1325 = sub i32 %7585, 7
  %gen1326 = mul i32 %_1325, 7
  %_1327 = sub i32 %7585, 7
  %gen1328 = mul i32 %_1327, 7
  %_1329 = sub i32 0, %7585
  %gen1330 = add i32 %_1329, 7
  %7586 = and i32 %7585, 7, !dbg !1778
  %_1331 = shl i32 48, %7586
  %_1332 = shl i32 48, %7586
  %_1333 = sub i32 48, %7586
  %gen1334 = mul i32 %_1333, %7586
  %_1335 = shl i32 48, %7586
  %_1336 = shl i32 48, %7586
  %_1337 = sub i32 0, 48
  %gen1338 = add i32 %_1337, %7586
  %_1339 = shl i32 48, %7586
  %_1340 = sub i32 0, 48
  %gen1341 = add i32 %_1340, %7586
  %7587 = add nsw i32 48, %7586, !dbg !1778
  %7588 = trunc i32 %7587 to i8, !dbg !1778
  %7589 = load i8*, i8** %19, align 8, !dbg !1778
  %7590 = load i64, i64* %29, align 8, !dbg !1778
  %7591 = getelementptr inbounds i8, i8* %7589, i64 %7590, !dbg !1778
  store i8 %7588, i8* %7591, align 1, !dbg !1778
  br label %originalBB1305

originalBB1345alteredBB:                          ; preds = %originalBB1345, %4883
  %7592 = load i64, i64* %29, align 8, !dbg !1781
  %_1346 = sub i64 %7592, 1
  %gen1347 = mul i64 %_1346, 1
  %_1348 = sub i64 %7592, 1
  %gen1349 = mul i64 %_1348, 1
  %_1350 = shl i64 %7592, 1
  %_1351 = shl i64 %7592, 1
  %_1352 = sub i64 0, %7592
  %gen1353 = add i64 %_1352, 1
  %_1354 = shl i64 %7592, 1
  %7593 = add i64 %7592, 1, !dbg !1781
  store i64 %7593, i64* %29, align 8, !dbg !1781
  br label %originalBB1345

originalBB1358alteredBB:                          ; preds = %originalBB1358, %4902
  %7594 = load i8, i8* %39, align 1, !dbg !1782
  %7595 = zext i8 %7594 to i32, !dbg !1782
  %_1359 = sub i32 0, %7595
  %gen1360 = add i32 %_1359, 7
  %_1361 = sub i32 0, %7595
  %gen1362 = add i32 %_1361, 7
  %_1363 = sub i32 0, %7595
  %gen1364 = add i32 %_1363, 7
  %_1365 = sub i32 %7595, 7
  %gen1366 = mul i32 %_1365, 7
  %_1367 = sub i32 %7595, 7
  %gen1368 = mul i32 %_1367, 7
  %7596 = and i32 %7595, 7, !dbg !1783
  %_1369 = shl i32 48, %7596
  %_1370 = sub i32 48, %7596
  %gen1371 = mul i32 %_1370, %7596
  %_1372 = shl i32 48, %7596
  %_1373 = sub i32 0, 48
  %gen1374 = add i32 %_1373, %7596
  %_1375 = shl i32 48, %7596
  %_1376 = sub i32 0, 48
  %gen1377 = add i32 %_1376, %7596
  %7597 = add nsw i32 48, %7596, !dbg !1784
  %7598 = trunc i32 %7597 to i8, !dbg !1785
  store i8 %7598, i8* %39, align 1, !dbg !1786
  br label %originalBB1358

originalBB1381alteredBB:                          ; preds = %originalBB1381, %4924
  %7599 = load i8, i8* %41, align 1, !dbg !1788
  %7600 = trunc i8 %7599 to i1, !dbg !1788
  br label %originalBB1381

originalBB1385alteredBB:                          ; preds = %originalBB1385, %4943
  br label %originalBB1385

originalBB1389alteredBB:                          ; preds = %originalBB1389, %4960
  %7601 = load i64, i64* %29, align 8, !dbg !1793
  %7602 = load i64, i64* %20, align 8, !dbg !1793
  %7603 = icmp ult i64 %7601, %7602, !dbg !1793
  br label %originalBB1389

originalBB1393alteredBB:                          ; preds = %originalBB1393, %4980
  %7604 = load i8*, i8** %19, align 8, !dbg !1793
  %7605 = load i64, i64* %29, align 8, !dbg !1793
  %7606 = getelementptr inbounds i8, i8* %7604, i64 %7605, !dbg !1793
  store i8 92, i8* %7606, align 1, !dbg !1793
  br label %originalBB1393

originalBB1397alteredBB:                          ; preds = %originalBB1397, %5000
  %7607 = load i64, i64* %29, align 8, !dbg !1796
  %_1398 = shl i64 %7607, 1
  %_1399 = sub i64 %7607, 1
  %gen1400 = mul i64 %_1399, 1
  %_1401 = sub i64 %7607, 1
  %gen1402 = mul i64 %_1401, 1
  %_1403 = sub i64 %7607, 1
  %gen1404 = mul i64 %_1403, 1
  %_1405 = sub i64 %7607, 1
  %gen1406 = mul i64 %_1405, 1
  %7608 = add i64 %7607, 1, !dbg !1796
  store i64 %7608, i64* %29, align 8, !dbg !1796
  br label %originalBB1397

originalBB1410alteredBB:                          ; preds = %originalBB1410, %5019
  store i8 0, i8* %41, align 1, !dbg !1797
  br label %originalBB1410

originalBB1414alteredBB:                          ; preds = %originalBB1414, %5036
  br label %originalBB1414

originalBB1418alteredBB:                          ; preds = %originalBB1418, %5053
  %7609 = load i64, i64* %50, align 8, !dbg !1799
  %7610 = load i64, i64* %28, align 8, !dbg !1801
  %_1419 = sub i64 %7610, 1
  %gen1420 = mul i64 %_1419, 1
  %_1421 = sub i64 0, %7610
  %gen1422 = add i64 %_1421, 1
  %_1423 = shl i64 %7610, 1
  %_1424 = sub i64 %7610, 1
  %gen1425 = mul i64 %_1424, 1
  %_1426 = sub i64 %7610, 1
  %gen1427 = mul i64 %_1426, 1
  %_1428 = shl i64 %7610, 1
  %7611 = add i64 %7610, 1, !dbg !1802
  %7612 = icmp ule i64 %7609, %7611, !dbg !1803
  br label %originalBB1418

originalBB1432alteredBB:                          ; preds = %originalBB1432, %5074
  br label %originalBB1432

originalBB1436alteredBB:                          ; preds = %originalBB1436, %5091
  br label %originalBB1436

originalBB1440alteredBB:                          ; preds = %originalBB1440, %5108
  %7613 = load i8, i8* %36, align 1, !dbg !1807
  %7614 = trunc i8 %7613 to i1, !dbg !1807
  br label %originalBB1440

originalBB1444alteredBB:                          ; preds = %originalBB1444, %5127
  %7615 = load i8, i8* %42, align 1, !dbg !1807
  %7616 = trunc i8 %7615 to i1, !dbg !1807
  br label %originalBB1444

originalBB1448alteredBB:                          ; preds = %originalBB1448, %5146
  br label %originalBB1448

originalBB1452alteredBB:                          ; preds = %originalBB1452, %5163
  %7617 = load i64, i64* %29, align 8, !dbg !1813
  %7618 = load i64, i64* %20, align 8, !dbg !1813
  %7619 = icmp ult i64 %7617, %7618, !dbg !1813
  br label %originalBB1452

originalBB1456alteredBB:                          ; preds = %originalBB1456, %5183
  %7620 = load i8*, i8** %19, align 8, !dbg !1813
  %7621 = load i64, i64* %29, align 8, !dbg !1813
  %7622 = getelementptr inbounds i8, i8* %7620, i64 %7621, !dbg !1813
  store i8 39, i8* %7622, align 1, !dbg !1813
  br label %originalBB1456

originalBB1460alteredBB:                          ; preds = %originalBB1460, %5203
  %7623 = load i64, i64* %29, align 8, !dbg !1816
  %_1461 = sub i64 0, %7623
  %gen1462 = add i64 %_1461, 1
  %_1463 = sub i64 0, %7623
  %gen1464 = add i64 %_1463, 1
  %_1465 = sub i64 %7623, 1
  %gen1466 = mul i64 %_1465, 1
  %_1467 = sub i64 %7623, 1
  %gen1468 = mul i64 %_1467, 1
  %_1469 = shl i64 %7623, 1
  %_1470 = shl i64 %7623, 1
  %_1471 = sub i64 %7623, 1
  %gen1472 = mul i64 %_1471, 1
  %_1473 = sub i64 0, %7623
  %gen1474 = add i64 %_1473, 1
  %_1475 = sub i64 %7623, 1
  %gen1476 = mul i64 %_1475, 1
  %7624 = add i64 %7623, 1, !dbg !1816
  store i64 %7624, i64* %29, align 8, !dbg !1816
  br label %originalBB1460

originalBB1480alteredBB:                          ; preds = %originalBB1480, %5222
  br label %originalBB1480

originalBB1484alteredBB:                          ; preds = %originalBB1484, %5239
  %7625 = load i64, i64* %29, align 8, !dbg !1817
  %7626 = load i64, i64* %20, align 8, !dbg !1817
  %7627 = icmp ult i64 %7625, %7626, !dbg !1817
  br label %originalBB1484

originalBB1488alteredBB:                          ; preds = %originalBB1488, %5259
  %7628 = load i8*, i8** %19, align 8, !dbg !1817
  %7629 = load i64, i64* %29, align 8, !dbg !1817
  %7630 = getelementptr inbounds i8, i8* %7628, i64 %7629, !dbg !1817
  store i8 39, i8* %7630, align 1, !dbg !1817
  br label %originalBB1488

originalBB1492alteredBB:                          ; preds = %originalBB1492, %5279
  %7631 = load i64, i64* %29, align 8, !dbg !1820
  %_1493 = shl i64 %7631, 1
  %_1494 = shl i64 %7631, 1
  %_1495 = sub i64 %7631, 1
  %gen1496 = mul i64 %_1495, 1
  %_1497 = sub i64 %7631, 1
  %gen1498 = mul i64 %_1497, 1
  %_1499 = shl i64 %7631, 1
  %_1500 = sub i64 %7631, 1
  %gen1501 = mul i64 %_1500, 1
  %_1502 = shl i64 %7631, 1
  %7632 = add i64 %7631, 1, !dbg !1820
  store i64 %7632, i64* %29, align 8, !dbg !1820
  br label %originalBB1492

originalBB1506alteredBB:                          ; preds = %originalBB1506, %5298
  store i8 0, i8* %36, align 1, !dbg !1811
  br label %originalBB1506

originalBB1510alteredBB:                          ; preds = %originalBB1510, %5315
  br label %originalBB1510

originalBB1514alteredBB:                          ; preds = %originalBB1514, %5332
  br label %originalBB1514

originalBB1518alteredBB:                          ; preds = %originalBB1518, %5349
  %7633 = load i64, i64* %29, align 8, !dbg !1822
  %7634 = load i64, i64* %20, align 8, !dbg !1822
  %7635 = icmp ult i64 %7633, %7634, !dbg !1822
  br label %originalBB1518

originalBB1522alteredBB:                          ; preds = %originalBB1522, %5369
  %7636 = load i8, i8* %39, align 1, !dbg !1822
  %7637 = load i8*, i8** %19, align 8, !dbg !1822
  %7638 = load i64, i64* %29, align 8, !dbg !1822
  %7639 = getelementptr inbounds i8, i8* %7637, i64 %7638, !dbg !1822
  store i8 %7636, i8* %7639, align 1, !dbg !1822
  br label %originalBB1522

originalBB1526alteredBB:                          ; preds = %originalBB1526, %5390
  %7640 = load i64, i64* %29, align 8, !dbg !1825
  %_1527 = shl i64 %7640, 1
  %_1528 = shl i64 %7640, 1
  %_1529 = shl i64 %7640, 1
  %_1530 = sub i64 0, %7640
  %gen1531 = add i64 %_1530, 1
  %_1532 = sub i64 %7640, 1
  %gen1533 = mul i64 %_1532, 1
  %_1534 = shl i64 %7640, 1
  %7641 = add i64 %7640, 1, !dbg !1825
  store i64 %7641, i64* %29, align 8, !dbg !1825
  br label %originalBB1526

originalBB1538alteredBB:                          ; preds = %originalBB1538, %5409
  %7642 = load i8*, i8** %21, align 8, !dbg !1826
  %7643 = load i64, i64* %28, align 8, !dbg !1827
  %_1539 = shl i64 %7643, 1
  %_1540 = sub i64 0, %7643
  %gen1541 = add i64 %_1540, 1
  %_1542 = sub i64 0, %7643
  %gen1543 = add i64 %_1542, 1
  %7644 = add i64 %7643, 1, !dbg !1827
  store i64 %7644, i64* %28, align 8, !dbg !1827
  %7645 = getelementptr inbounds i8, i8* %7642, i64 %7644, !dbg !1826
  %7646 = load i8, i8* %7645, align 1, !dbg !1826
  store i8 %7646, i8* %39, align 1, !dbg !1828
  br label %originalBB1538

originalBB1547alteredBB:                          ; preds = %originalBB1547, %5431
  br label %originalBB1547

originalBB1551alteredBB:                          ; preds = %originalBB1551, %5448
  br label %originalBB1551

originalBB1555alteredBB:                          ; preds = %originalBB1555, %5465
  %7647 = load i8, i8* %33, align 1, !dbg !1835
  %7648 = trunc i8 %7647 to i1, !dbg !1835
  br label %originalBB1555

originalBB1559alteredBB:                          ; preds = %originalBB1559, %5484
  %7649 = load i32, i32* %23, align 4, !dbg !1838
  %7650 = icmp ne i32 %7649, 2, !dbg !1839
  br label %originalBB1559

originalBB1563alteredBB:                          ; preds = %originalBB1563, %5503
  %7651 = load i8, i8* %35, align 1, !dbg !1841
  %7652 = trunc i8 %7651 to i1, !dbg !1841
  br label %originalBB1563

originalBB1567alteredBB:                          ; preds = %originalBB1567, %5522
  %7653 = load i32*, i32** %25, align 8, !dbg !1843
  %7654 = icmp ne i32* %7653, null, !dbg !1843
  br label %originalBB1567

originalBB1571alteredBB:                          ; preds = %originalBB1571, %5541
  %7655 = load i32*, i32** %25, align 8, !dbg !1845
  %7656 = load i8, i8* %39, align 1, !dbg !1846
  %7657 = zext i8 %7656 to i64, !dbg !1846
  %_1572 = sub i64 0, %7657
  %gen1573 = add i64 %_1572, 32
  %_1574 = sub i64 0, %7657
  %gen1575 = add i64 %_1574, 32
  %_1576 = shl i64 %7657, 32
  %_1577 = shl i64 %7657, 32
  %_1578 = sub i64 %7657, 32
  %gen1579 = mul i64 %_1578, 32
  %_1580 = sub i64 %7657, 32
  %gen1581 = mul i64 %_1580, 32
  %_1582 = shl i64 %7657, 32
  %_1583 = sub i64 %7657, 32
  %gen1584 = mul i64 %_1583, 32
  %_1585 = sub i64 0, %7657
  %gen1586 = add i64 %_1585, 32
  %7658 = udiv i64 %7657, 32, !dbg !1847
  %7659 = getelementptr inbounds i32, i32* %7655, i64 %7658, !dbg !1845
  %7660 = load i32, i32* %7659, align 4, !dbg !1845
  %7661 = load i8, i8* %39, align 1, !dbg !1848
  %7662 = zext i8 %7661 to i64, !dbg !1848
  %_1587 = sub i64 0, %7662
  %gen1588 = add i64 %_1587, 32
  %7663 = urem i64 %7662, 32, !dbg !1849
  %7664 = trunc i64 %7663 to i32, !dbg !1850
  %_1589 = sub i32 %7660, %7664
  %gen1590 = mul i32 %_1589, %7664
  %_1591 = shl i32 %7660, %7664
  %_1592 = sub i32 0, %7660
  %gen1593 = add i32 %_1592, %7664
  %7665 = lshr i32 %7660, %7664, !dbg !1850
  %_1594 = sub i32 0, %7665
  %gen1595 = add i32 %_1594, 1
  %_1596 = sub i32 %7665, 1
  %gen1597 = mul i32 %_1596, 1
  %_1598 = sub i32 %7665, 1
  %gen1599 = mul i32 %_1598, 1
  %_1600 = shl i32 %7665, 1
  %_1601 = shl i32 %7665, 1
  %_1602 = sub i32 0, %7665
  %gen1603 = add i32 %_1602, 1
  %_1604 = sub i32 0, %7665
  %gen1605 = add i32 %_1604, 1
  %7666 = and i32 %7665, 1, !dbg !1851
  %7667 = icmp ne i32 %7666, 0, !dbg !1851
  br label %originalBB1571

originalBB1609alteredBB:                          ; preds = %originalBB1609, %5571
  %7668 = load i8, i8* %41, align 1, !dbg !1853
  %7669 = trunc i8 %7668 to i1, !dbg !1853
  br label %originalBB1609

originalBB1613alteredBB:                          ; preds = %originalBB1613, %5590
  br label %originalBB1613

originalBB1617alteredBB:                          ; preds = %originalBB1617, %5607
  br label %originalBB1617

originalBB1621alteredBB:                          ; preds = %originalBB1621, %5624
  br label %originalBB1621

originalBB1625alteredBB:                          ; preds = %originalBB1625, %5641
  %7670 = load i8, i8* %35, align 1, !dbg !1859
  %7671 = trunc i8 %7670 to i1, !dbg !1859
  br label %originalBB1625

originalBB1629alteredBB:                          ; preds = %originalBB1629, %5660
  br label %originalBB1629

originalBB1633alteredBB:                          ; preds = %originalBB1633, %5677
  store i8 1, i8* %42, align 1, !dbg !1862
  %7672 = load i32, i32* %23, align 4, !dbg !1863
  %7673 = icmp eq i32 %7672, 2, !dbg !1863
  br label %originalBB1633

originalBB1637alteredBB:                          ; preds = %originalBB1637, %5696
  %7674 = load i8, i8* %36, align 1, !dbg !1863
  %7675 = trunc i8 %7674 to i1, !dbg !1863
  br label %originalBB1637

originalBB1641alteredBB:                          ; preds = %originalBB1641, %5715
  br label %originalBB1641

originalBB1645alteredBB:                          ; preds = %originalBB1645, %5732
  %7676 = load i64, i64* %29, align 8, !dbg !1867
  %7677 = load i64, i64* %20, align 8, !dbg !1867
  %7678 = icmp ult i64 %7676, %7677, !dbg !1867
  br label %originalBB1645

originalBB1649alteredBB:                          ; preds = %originalBB1649, %5752
  %7679 = load i8*, i8** %19, align 8, !dbg !1867
  %7680 = load i64, i64* %29, align 8, !dbg !1867
  %7681 = getelementptr inbounds i8, i8* %7679, i64 %7680, !dbg !1867
  store i8 39, i8* %7681, align 1, !dbg !1867
  br label %originalBB1649

originalBB1653alteredBB:                          ; preds = %originalBB1653, %5772
  %7682 = load i64, i64* %29, align 8, !dbg !1870
  %_1654 = sub i64 %7682, 1
  %gen1655 = mul i64 %_1654, 1
  %_1656 = sub i64 %7682, 1
  %gen1657 = mul i64 %_1656, 1
  %_1658 = sub i64 %7682, 1
  %gen1659 = mul i64 %_1658, 1
  %_1660 = sub i64 %7682, 1
  %gen1661 = mul i64 %_1660, 1
  %7683 = add i64 %7682, 1, !dbg !1870
  store i64 %7683, i64* %29, align 8, !dbg !1870
  br label %originalBB1653

originalBB1665alteredBB:                          ; preds = %originalBB1665, %5791
  br label %originalBB1665

originalBB1669alteredBB:                          ; preds = %originalBB1669, %5808
  %7684 = load i64, i64* %29, align 8, !dbg !1871
  %7685 = load i64, i64* %20, align 8, !dbg !1871
  %7686 = icmp ult i64 %7684, %7685, !dbg !1871
  br label %originalBB1669

originalBB1673alteredBB:                          ; preds = %originalBB1673, %5828
  %7687 = load i8*, i8** %19, align 8, !dbg !1871
  %7688 = load i64, i64* %29, align 8, !dbg !1871
  %7689 = getelementptr inbounds i8, i8* %7687, i64 %7688, !dbg !1871
  store i8 36, i8* %7689, align 1, !dbg !1871
  br label %originalBB1673

originalBB1677alteredBB:                          ; preds = %originalBB1677, %5848
  %7690 = load i64, i64* %29, align 8, !dbg !1874
  %_1678 = shl i64 %7690, 1
  %_1679 = sub i64 %7690, 1
  %gen1680 = mul i64 %_1679, 1
  %7691 = add i64 %7690, 1, !dbg !1874
  store i64 %7691, i64* %29, align 8, !dbg !1874
  br label %originalBB1677

originalBB1684alteredBB:                          ; preds = %originalBB1684, %5867
  br label %originalBB1684

originalBB1688alteredBB:                          ; preds = %originalBB1688, %5884
  %7692 = load i64, i64* %29, align 8, !dbg !1875
  %7693 = load i64, i64* %20, align 8, !dbg !1875
  %7694 = icmp ult i64 %7692, %7693, !dbg !1875
  br label %originalBB1688

originalBB1692alteredBB:                          ; preds = %originalBB1692, %5904
  %7695 = load i8*, i8** %19, align 8, !dbg !1875
  %7696 = load i64, i64* %29, align 8, !dbg !1875
  %7697 = getelementptr inbounds i8, i8* %7695, i64 %7696, !dbg !1875
  store i8 39, i8* %7697, align 1, !dbg !1875
  br label %originalBB1692

originalBB1696alteredBB:                          ; preds = %originalBB1696, %5924
  %7698 = load i64, i64* %29, align 8, !dbg !1878
  %_1697 = sub i64 %7698, 1
  %gen1698 = mul i64 %_1697, 1
  %_1699 = sub i64 0, %7698
  %gen1700 = add i64 %_1699, 1
  %_1701 = sub i64 %7698, 1
  %gen1702 = mul i64 %_1701, 1
  %7699 = add i64 %7698, 1, !dbg !1878
  store i64 %7699, i64* %29, align 8, !dbg !1878
  br label %originalBB1696

originalBB1706alteredBB:                          ; preds = %originalBB1706, %5943
  store i8 1, i8* %36, align 1, !dbg !1865
  br label %originalBB1706

originalBB1710alteredBB:                          ; preds = %originalBB1710, %5960
  br label %originalBB1710

originalBB1714alteredBB:                          ; preds = %originalBB1714, %5977
  %7700 = load i64, i64* %29, align 8, !dbg !1879
  %7701 = load i64, i64* %20, align 8, !dbg !1879
  %7702 = icmp ult i64 %7700, %7701, !dbg !1879
  br label %originalBB1714

originalBB1718alteredBB:                          ; preds = %originalBB1718, %5997
  %7703 = load i8*, i8** %19, align 8, !dbg !1879
  %7704 = load i64, i64* %29, align 8, !dbg !1879
  %7705 = getelementptr inbounds i8, i8* %7703, i64 %7704, !dbg !1879
  store i8 92, i8* %7705, align 1, !dbg !1879
  br label %originalBB1718

originalBB1722alteredBB:                          ; preds = %originalBB1722, %6017
  %7706 = load i64, i64* %29, align 8, !dbg !1882
  %_1723 = sub i64 0, %7706
  %gen1724 = add i64 %_1723, 1
  %_1725 = sub i64 %7706, 1
  %gen1726 = mul i64 %_1725, 1
  %_1727 = sub i64 %7706, 1
  %gen1728 = mul i64 %_1727, 1
  %7707 = add i64 %7706, 1, !dbg !1882
  store i64 %7707, i64* %29, align 8, !dbg !1882
  br label %originalBB1722

originalBB1732alteredBB:                          ; preds = %originalBB1732, %6036
  br label %originalBB1732

originalBB1736alteredBB:                          ; preds = %originalBB1736, %6053
  br label %originalBB1736

originalBB1740alteredBB:                          ; preds = %originalBB1740, %6070
  br label %originalBB1740

originalBB1744alteredBB:                          ; preds = %originalBB1744, %6087
  %7708 = load i8, i8* %36, align 1, !dbg !1886
  %7709 = trunc i8 %7708 to i1, !dbg !1886
  br label %originalBB1744

originalBB1748alteredBB:                          ; preds = %originalBB1748, %6106
  %7710 = load i8, i8* %42, align 1, !dbg !1886
  %7711 = trunc i8 %7710 to i1, !dbg !1886
  br label %originalBB1748

originalBB1752alteredBB:                          ; preds = %originalBB1752, %6125
  br label %originalBB1752

originalBB1756alteredBB:                          ; preds = %originalBB1756, %6142
  %7712 = load i64, i64* %29, align 8, !dbg !1892
  %7713 = load i64, i64* %20, align 8, !dbg !1892
  %7714 = icmp ult i64 %7712, %7713, !dbg !1892
  br label %originalBB1756

originalBB1760alteredBB:                          ; preds = %originalBB1760, %6162
  %7715 = load i8*, i8** %19, align 8, !dbg !1892
  %7716 = load i64, i64* %29, align 8, !dbg !1892
  %7717 = getelementptr inbounds i8, i8* %7715, i64 %7716, !dbg !1892
  store i8 39, i8* %7717, align 1, !dbg !1892
  br label %originalBB1760

originalBB1764alteredBB:                          ; preds = %originalBB1764, %6182
  %7718 = load i64, i64* %29, align 8, !dbg !1895
  %_1765 = sub i64 %7718, 1
  %gen1766 = mul i64 %_1765, 1
  %7719 = add i64 %7718, 1, !dbg !1895
  store i64 %7719, i64* %29, align 8, !dbg !1895
  br label %originalBB1764

originalBB1770alteredBB:                          ; preds = %originalBB1770, %6201
  br label %originalBB1770

originalBB1774alteredBB:                          ; preds = %originalBB1774, %6218
  %7720 = load i64, i64* %29, align 8, !dbg !1896
  %7721 = load i64, i64* %20, align 8, !dbg !1896
  %7722 = icmp ult i64 %7720, %7721, !dbg !1896
  br label %originalBB1774

originalBB1778alteredBB:                          ; preds = %originalBB1778, %6238
  %7723 = load i8*, i8** %19, align 8, !dbg !1896
  %7724 = load i64, i64* %29, align 8, !dbg !1896
  %7725 = getelementptr inbounds i8, i8* %7723, i64 %7724, !dbg !1896
  store i8 39, i8* %7725, align 1, !dbg !1896
  br label %originalBB1778

originalBB1782alteredBB:                          ; preds = %originalBB1782, %6258
  %7726 = load i64, i64* %29, align 8, !dbg !1899
  %_1783 = shl i64 %7726, 1
  %_1784 = sub i64 %7726, 1
  %gen1785 = mul i64 %_1784, 1
  %_1786 = shl i64 %7726, 1
  %_1787 = shl i64 %7726, 1
  %_1788 = sub i64 0, %7726
  %gen1789 = add i64 %_1788, 1
  %_1790 = sub i64 %7726, 1
  %gen1791 = mul i64 %_1790, 1
  %7727 = add i64 %7726, 1, !dbg !1899
  store i64 %7727, i64* %29, align 8, !dbg !1899
  br label %originalBB1782

originalBB1795alteredBB:                          ; preds = %originalBB1795, %6277
  store i8 0, i8* %36, align 1, !dbg !1890
  br label %originalBB1795

originalBB1799alteredBB:                          ; preds = %originalBB1799, %6294
  br label %originalBB1799

originalBB1803alteredBB:                          ; preds = %originalBB1803, %6311
  br label %originalBB1803

originalBB1807alteredBB:                          ; preds = %originalBB1807, %6328
  %7728 = load i64, i64* %29, align 8, !dbg !1901
  %7729 = load i64, i64* %20, align 8, !dbg !1901
  %7730 = icmp ult i64 %7728, %7729, !dbg !1901
  br label %originalBB1807

originalBB1811alteredBB:                          ; preds = %originalBB1811, %6348
  %7731 = load i8, i8* %39, align 1, !dbg !1901
  %7732 = load i8*, i8** %19, align 8, !dbg !1901
  %7733 = load i64, i64* %29, align 8, !dbg !1901
  %7734 = getelementptr inbounds i8, i8* %7732, i64 %7733, !dbg !1901
  store i8 %7731, i8* %7734, align 1, !dbg !1901
  br label %originalBB1811

originalBB1815alteredBB:                          ; preds = %originalBB1815, %6369
  %7735 = load i64, i64* %29, align 8, !dbg !1904
  %_1816 = shl i64 %7735, 1
  %7736 = add i64 %7735, 1, !dbg !1904
  store i64 %7736, i64* %29, align 8, !dbg !1904
  br label %originalBB1815

originalBB1820alteredBB:                          ; preds = %originalBB1820, %6388
  %7737 = load i8, i8* %43, align 1, !dbg !1905
  %7738 = trunc i8 %7737 to i1, !dbg !1905
  br label %originalBB1820

originalBB1824alteredBB:                          ; preds = %originalBB1824, %6407
  store i8 0, i8* %38, align 1, !dbg !1908
  br label %originalBB1824

originalBB1828alteredBB:                          ; preds = %originalBB1828, %6424
  br label %originalBB1828

originalBB1832alteredBB:                          ; preds = %originalBB1832, %6441
  %7739 = load i64, i64* %28, align 8, !dbg !1911
  %_1833 = shl i64 %7739, 1
  %_1834 = sub i64 0, %7739
  %gen1835 = add i64 %_1834, 1
  %_1836 = sub i64 %7739, 1
  %gen1837 = mul i64 %_1836, 1
  %_1838 = sub i64 0, %7739
  %gen1839 = add i64 %_1838, 1
  %7740 = add i64 %7739, 1, !dbg !1911
  store i64 %7740, i64* %28, align 8, !dbg !1911
  br label %originalBB1832

originalBB1843alteredBB:                          ; preds = %originalBB1843, %6460
  %7741 = load i64, i64* %29, align 8, !dbg !1915
  %7742 = icmp eq i64 %7741, 0, !dbg !1917
  br label %originalBB1843

originalBB1847alteredBB:                          ; preds = %originalBB1847, %6479
  %7743 = load i32, i32* %23, align 4, !dbg !1919
  %7744 = icmp eq i32 %7743, 2, !dbg !1920
  br label %originalBB1847

originalBB1851alteredBB:                          ; preds = %originalBB1851, %6498
  %7745 = load i8, i8* %35, align 1, !dbg !1922
  %7746 = trunc i8 %7745 to i1, !dbg !1922
  br label %originalBB1851

originalBB1855alteredBB:                          ; preds = %originalBB1855, %6517
  br label %originalBB1855

originalBB1859alteredBB:                          ; preds = %originalBB1859, %6534
  %7747 = load i32, i32* %23, align 4, !dbg !1925
  %7748 = icmp eq i32 %7747, 2, !dbg !1927
  br label %originalBB1859

originalBB1863alteredBB:                          ; preds = %originalBB1863, %6553
  %7749 = load i8, i8* %35, align 1, !dbg !1929
  %7750 = trunc i8 %7749 to i1, !dbg !1929
  br label %originalBB1863

originalBB1867alteredBB:                          ; preds = %originalBB1867, %6572
  %7751 = load i8, i8* %37, align 1, !dbg !1931
  %7752 = trunc i8 %7751 to i1, !dbg !1931
  br label %originalBB1867

originalBB1871alteredBB:                          ; preds = %originalBB1871, %6591
  %7753 = load i8, i8* %38, align 1, !dbg !1933
  %7754 = trunc i8 %7753 to i1, !dbg !1933
  br label %originalBB1871

originalBB1875alteredBB:                          ; preds = %originalBB1875, %6610
  %7755 = load i8*, i8** %19, align 8, !dbg !1937
  %7756 = load i64, i64* %30, align 8, !dbg !1938
  %7757 = load i8*, i8** %21, align 8, !dbg !1939
  %7758 = load i64, i64* %22, align 8, !dbg !1940
  %7759 = load i32, i32* %24, align 4, !dbg !1941
  %7760 = load i32*, i32** %25, align 8, !dbg !1942
  %7761 = load i8*, i8** %26, align 8, !dbg !1943
  %7762 = load i8*, i8** %27, align 8, !dbg !1944
  %7763 = call i64 @quotearg_buffer_restyled(i8* %7755, i64 %7756, i8* %7757, i64 %7758, i32 5, i32 %7759, i32* %7760, i8* %7761, i8* %7762), !dbg !1945
  store i64 %7763, i64* %18, align 8, !dbg !1946
  br label %originalBB1875

originalBB1879alteredBB:                          ; preds = %originalBB1879, %6636
  %7764 = load i64, i64* %20, align 8, !dbg !1947
  %7765 = icmp ne i64 %7764, 0, !dbg !1947
  br label %originalBB1879

originalBB1883alteredBB:                          ; preds = %originalBB1883, %6655
  %7766 = load i64, i64* %30, align 8, !dbg !1950
  %7767 = icmp ne i64 %7766, 0, !dbg !1950
  br label %originalBB1883

originalBB1887alteredBB:                          ; preds = %originalBB1887, %6674
  %7768 = load i64, i64* %30, align 8, !dbg !1952
  store i64 %7768, i64* %20, align 8, !dbg !1954
  store i64 0, i64* %29, align 8, !dbg !1955
  br label %originalBB1887

originalBB1891alteredBB:                          ; preds = %originalBB1891, %6692
  br label %originalBB1891

originalBB1895alteredBB:                          ; preds = %originalBB1895, %6709
  br label %originalBB1895

originalBB1899alteredBB:                          ; preds = %originalBB1899, %6726
  %7769 = load i8*, i8** %31, align 8, !dbg !1958
  %7770 = icmp ne i8* %7769, null, !dbg !1958
  br label %originalBB1899

originalBB1903alteredBB:                          ; preds = %originalBB1903, %6745
  %7771 = load i8, i8* %35, align 1, !dbg !1961
  %7772 = trunc i8 %7771 to i1, !dbg !1961
  br label %originalBB1903

originalBB1907alteredBB:                          ; preds = %originalBB1907, %6764
  br label %originalBB1907

originalBB1911alteredBB:                          ; preds = %originalBB1911, %6781
  %7773 = load i8*, i8** %31, align 8, !dbg !1964
  %7774 = load i8, i8* %7773, align 1, !dbg !1967
  %7775 = icmp ne i8 %7774, 0, !dbg !1968
  br label %originalBB1911

originalBB1915alteredBB:                          ; preds = %originalBB1915, %6801
  br label %originalBB1915

originalBB1919alteredBB:                          ; preds = %originalBB1919, %6818
  %7776 = load i64, i64* %29, align 8, !dbg !1970
  %7777 = load i64, i64* %20, align 8, !dbg !1970
  %7778 = icmp ult i64 %7776, %7777, !dbg !1970
  br label %originalBB1919

originalBB1923alteredBB:                          ; preds = %originalBB1923, %6838
  %7779 = load i8*, i8** %31, align 8, !dbg !1970
  %7780 = load i8, i8* %7779, align 1, !dbg !1970
  %7781 = load i8*, i8** %19, align 8, !dbg !1970
  %7782 = load i64, i64* %29, align 8, !dbg !1970
  %7783 = getelementptr inbounds i8, i8* %7781, i64 %7782, !dbg !1970
  store i8 %7780, i8* %7783, align 1, !dbg !1970
  br label %originalBB1923

originalBB1927alteredBB:                          ; preds = %originalBB1927, %6860
  %7784 = load i64, i64* %29, align 8, !dbg !1973
  %_1928 = shl i64 %7784, 1
  %_1929 = sub i64 %7784, 1
  %gen1930 = mul i64 %_1929, 1
  %_1931 = sub i64 0, %7784
  %gen1932 = add i64 %_1931, 1
  %_1933 = sub i64 %7784, 1
  %gen1934 = mul i64 %_1933, 1
  %_1935 = shl i64 %7784, 1
  %_1936 = shl i64 %7784, 1
  %_1937 = shl i64 %7784, 1
  %7785 = add i64 %7784, 1, !dbg !1973
  store i64 %7785, i64* %29, align 8, !dbg !1973
  br label %originalBB1927

originalBB1941alteredBB:                          ; preds = %originalBB1941, %6879
  br label %originalBB1941

originalBB1945alteredBB:                          ; preds = %originalBB1945, %6896
  %7786 = load i8*, i8** %31, align 8, !dbg !1974
  %7787 = getelementptr inbounds i8, i8* %7786, i32 1, !dbg !1974
  store i8* %7787, i8** %31, align 8, !dbg !1974
  br label %originalBB1945

originalBB1949alteredBB:                          ; preds = %originalBB1949, %6915
  br label %originalBB1949

originalBB1953alteredBB:                          ; preds = %originalBB1953, %6932
  %7788 = load i64, i64* %29, align 8, !dbg !1978
  %7789 = load i64, i64* %20, align 8, !dbg !1980
  %7790 = icmp ult i64 %7788, %7789, !dbg !1981
  br label %originalBB1953

originalBB1957alteredBB:                          ; preds = %originalBB1957, %6952
  %7791 = load i8*, i8** %19, align 8, !dbg !1983
  %7792 = load i64, i64* %29, align 8, !dbg !1984
  %7793 = getelementptr inbounds i8, i8* %7791, i64 %7792, !dbg !1983
  store i8 0, i8* %7793, align 1, !dbg !1985
  br label %originalBB1957

originalBB1961alteredBB:                          ; preds = %originalBB1961, %6972
  %7794 = load i64, i64* %29, align 8, !dbg !1986
  store i64 %7794, i64* %18, align 8, !dbg !1987
  br label %originalBB1961

originalBB1965alteredBB:                          ; preds = %originalBB1965, %6990
  %7795 = load i32, i32* %23, align 4, !dbg !1990
  %7796 = icmp eq i32 %7795, 2, !dbg !1992
  br label %originalBB1965

originalBB1969alteredBB:                          ; preds = %originalBB1969, %7009
  %7797 = load i8, i8* %33, align 1, !dbg !1994
  %7798 = trunc i8 %7797 to i1, !dbg !1994
  br label %originalBB1969

originalBB1973alteredBB:                          ; preds = %originalBB1973, %7028
  store i32 4, i32* %23, align 4, !dbg !1996
  br label %originalBB1973

originalBB1977alteredBB:                          ; preds = %originalBB1977, %7045
  %7799 = load i8*, i8** %19, align 8, !dbg !1998
  %7800 = load i64, i64* %20, align 8, !dbg !1999
  %7801 = load i8*, i8** %21, align 8, !dbg !2000
  %7802 = load i64, i64* %22, align 8, !dbg !2001
  %7803 = load i32, i32* %23, align 4, !dbg !2002
  %7804 = load i32, i32* %24, align 4, !dbg !2003
  %_1978 = shl i32 %7804, -3
  %_1979 = shl i32 %7804, -3
  %7805 = and i32 %7804, -3, !dbg !2004
  %7806 = load i8*, i8** %26, align 8, !dbg !2005
  %7807 = load i8*, i8** %27, align 8, !dbg !2006
  %7808 = call i64 @quotearg_buffer_restyled(i8* %7799, i64 %7800, i8* %7801, i64 %7802, i32 %7803, i32 %7805, i32* null, i8* %7806, i8* %7807), !dbg !2007
  store i64 %7808, i64* %18, align 8, !dbg !2008
  br label %originalBB1977

originalBB1983alteredBB:                          ; preds = %originalBB1983, %7072
  %7809 = load i64, i64* %18, align 8, !dbg !2009
  br label %originalBB1983
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #3

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gettext_quote(i8*, i32) #5 !dbg !2097 {
  %3 = load i32, i32* @x.19
  %4 = load i32, i32* @y.20
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2100, metadata !DIExpression()), !dbg !2101
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !2102, metadata !DIExpression()), !dbg !2103
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2104, metadata !DIExpression()), !dbg !2105
  %16 = load i8*, i8** %12, align 8, !dbg !2106
  %17 = call i8* @gettext(i8* %16) #10, !dbg !2106
  store i8* %17, i8** %14, align 8, !dbg !2105
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2107, metadata !DIExpression()), !dbg !2108
  %18 = load i8*, i8** %14, align 8, !dbg !2109
  %19 = load i8*, i8** %12, align 8, !dbg !2111
  %20 = icmp ne i8* %18, %19, !dbg !2112
  %21 = load i32, i32* @x.19
  %22 = load i32, i32* @y.20
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %20, label %29, label %47, !dbg !2113

29:                                               ; preds = %originalBBpart2
  %30 = load i32, i32* @x.19
  %31 = load i32, i32* @y.20
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i8*, i8** %14, align 8, !dbg !2114
  store i8* %38, i8** %11, align 8, !dbg !2115
  %39 = load i32, i32* @x.19
  %40 = load i32, i32* @y.20
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %157, !dbg !2115

47:                                               ; preds = %originalBBpart2
  %48 = load i32, i32* @x.19
  %49 = load i32, i32* @y.20
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = call i8* @locale_charset(), !dbg !2116
  store i8* %56, i8** %15, align 8, !dbg !2117
  %57 = load i8*, i8** %15, align 8, !dbg !2118
  %58 = call i32 @c_strcasecmp(i8* %57, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.55, i64 0, i64 0)) #13, !dbg !2118
  %59 = icmp eq i32 %58, 0, !dbg !2118
  %60 = load i32, i32* @x.19
  %61 = load i32, i32* @y.20
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %59, label %68, label %92, !dbg !2120

68:                                               ; preds = %originalBBpart28
  %69 = load i32, i32* @x.19
  %70 = load i32, i32* @y.20
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %68, %originalBB10alteredBB
  %77 = load i8*, i8** %12, align 8, !dbg !2121
  %78 = getelementptr inbounds i8, i8* %77, i64 0, !dbg !2121
  %79 = load i8, i8* %78, align 1, !dbg !2121
  %80 = sext i8 %79 to i32, !dbg !2121
  %81 = icmp eq i32 %80, 96, !dbg !2122
  %82 = zext i1 %81 to i64, !dbg !2121
  %83 = select i1 %81, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.56, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.57, i64 0, i64 0), !dbg !2121
  store i8* %83, i8** %11, align 8, !dbg !2123
  %84 = load i32, i32* @x.19
  %85 = load i32, i32* @y.20
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %157, !dbg !2123

92:                                               ; preds = %originalBBpart28
  %93 = load i32, i32* @x.19
  %94 = load i32, i32* @y.20
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %92, %originalBB14alteredBB
  %101 = load i8*, i8** %15, align 8, !dbg !2124
  %102 = call i32 @c_strcasecmp(i8* %101, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.58, i64 0, i64 0)) #13, !dbg !2124
  %103 = icmp eq i32 %102, 0, !dbg !2124
  %104 = load i32, i32* @x.19
  %105 = load i32, i32* @y.20
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %103, label %112, label %136, !dbg !2126

112:                                              ; preds = %originalBBpart216
  %113 = load i32, i32* @x.19
  %114 = load i32, i32* @y.20
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %112, %originalBB18alteredBB
  %121 = load i8*, i8** %12, align 8, !dbg !2127
  %122 = getelementptr inbounds i8, i8* %121, i64 0, !dbg !2127
  %123 = load i8, i8* %122, align 1, !dbg !2127
  %124 = sext i8 %123 to i32, !dbg !2127
  %125 = icmp eq i32 %124, 96, !dbg !2128
  %126 = zext i1 %125 to i64, !dbg !2127
  %127 = select i1 %125, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.59, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.60, i64 0, i64 0), !dbg !2127
  store i8* %127, i8** %11, align 8, !dbg !2129
  %128 = load i32, i32* @x.19
  %129 = load i32, i32* @y.20
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %157, !dbg !2129

136:                                              ; preds = %originalBBpart216
  %137 = load i32, i32* @x.19
  %138 = load i32, i32* @y.20
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %136, %originalBB22alteredBB
  %145 = load i32, i32* %13, align 4, !dbg !2130
  %146 = icmp eq i32 %145, 9, !dbg !2131
  %147 = zext i1 %146 to i64, !dbg !2130
  %148 = select i1 %146, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.52, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.54, i64 0, i64 0), !dbg !2130
  store i8* %148, i8** %11, align 8, !dbg !2132
  %149 = load i32, i32* @x.19
  %150 = load i32, i32* @y.20
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %157, !dbg !2132

157:                                              ; preds = %originalBBpart224, %originalBBpart220, %originalBBpart212, %originalBBpart24
  %158 = load i32, i32* @x.19
  %159 = load i32, i32* @y.20
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %157, %originalBB26alteredBB
  %166 = load i8*, i8** %11, align 8, !dbg !2133
  %167 = load i32, i32* @x.19
  %168 = load i32, i32* @y.20
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i8* %166, !dbg !2133

originalBBalteredBB:                              ; preds = %originalBB, %2
  %175 = alloca i8*, align 8
  %176 = alloca i8*, align 8
  %177 = alloca i32, align 4
  %178 = alloca i8*, align 8
  %179 = alloca i8*, align 8
  store i8* %0, i8** %176, align 8
  call void @llvm.dbg.declare(metadata i8** %176, metadata !2134, metadata !DIExpression()), !dbg !2101
  store i32 %1, i32* %177, align 4
  call void @llvm.dbg.declare(metadata i32* %177, metadata !2166, metadata !DIExpression()), !dbg !2103
  call void @llvm.dbg.declare(metadata i8** %178, metadata !2167, metadata !DIExpression()), !dbg !2105
  %180 = load i8*, i8** %176, align 8, !dbg !2106
  %181 = call i8* @gettext(i8* %180) #10, !dbg !2106
  store i8* %181, i8** %178, align 8, !dbg !2105
  call void @llvm.dbg.declare(metadata i8** %179, metadata !2168, metadata !DIExpression()), !dbg !2108
  %182 = load i8*, i8** %178, align 8, !dbg !2109
  %183 = load i8*, i8** %176, align 8, !dbg !2111
  %184 = icmp ne i8* %182, %183, !dbg !2112
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %185 = load i8*, i8** %14, align 8, !dbg !2114
  store i8* %185, i8** %11, align 8, !dbg !2115
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %186 = call i8* @locale_charset(), !dbg !2116
  store i8* %186, i8** %15, align 8, !dbg !2117
  %187 = load i8*, i8** %15, align 8, !dbg !2118
  %188 = call i32 @c_strcasecmp(i8* %187, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.55, i64 0, i64 0)) #13, !dbg !2118
  %189 = icmp eq i32 %188, 0, !dbg !2118
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %68
  %190 = load i8*, i8** %12, align 8, !dbg !2121
  %191 = getelementptr inbounds i8, i8* %190, i64 0, !dbg !2121
  %192 = load i8, i8* %191, align 1, !dbg !2121
  %193 = sext i8 %192 to i32, !dbg !2121
  %194 = icmp eq i32 %193, 96, !dbg !2122
  %195 = zext i1 %194 to i64, !dbg !2121
  %196 = select i1 %194, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.56, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.57, i64 0, i64 0), !dbg !2121
  store i8* %196, i8** %11, align 8, !dbg !2123
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %92
  %197 = load i8*, i8** %15, align 8, !dbg !2124
  %198 = call i32 @c_strcasecmp(i8* %197, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.58, i64 0, i64 0)) #13, !dbg !2124
  %199 = icmp eq i32 %198, 0, !dbg !2124
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %112
  %200 = load i8*, i8** %12, align 8, !dbg !2127
  %201 = getelementptr inbounds i8, i8* %200, i64 0, !dbg !2127
  %202 = load i8, i8* %201, align 1, !dbg !2127
  %203 = sext i8 %202 to i32, !dbg !2127
  %204 = icmp eq i32 %203, 96, !dbg !2128
  %205 = zext i1 %204 to i64, !dbg !2127
  %206 = select i1 %204, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.59, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.60, i64 0, i64 0), !dbg !2127
  store i8* %206, i8** %11, align 8, !dbg !2129
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %136
  %207 = load i32, i32* %13, align 4, !dbg !2130
  %208 = icmp eq i32 %207, 9, !dbg !2131
  %209 = zext i1 %208 to i64, !dbg !2130
  %210 = select i1 %208, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.52, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.54, i64 0, i64 0), !dbg !2130
  store i8* %210, i8** %11, align 8, !dbg !2132
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %157
  %211 = load i8*, i8** %11, align 8, !dbg !2133
  br label %originalBB26
}

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #7

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #7

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #3

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char(i8*, i8 signext) #5 !dbg !2169 {
  %3 = load i32, i32* @x.21
  %4 = load i32, i32* @y.22
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8, align 1
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2172, metadata !DIExpression()), !dbg !2173
  store i8 %1, i8* %12, align 1
  call void @llvm.dbg.declare(metadata i8* %12, metadata !2174, metadata !DIExpression()), !dbg !2175
  %13 = load i8*, i8** %11, align 8, !dbg !2176
  %14 = load i8, i8* %12, align 1, !dbg !2177
  %15 = call i8* @quotearg_char_mem(i8* %13, i64 -1, i8 signext %14), !dbg !2178
  %16 = load i32, i32* @x.21
  %17 = load i32, i32* @y.22
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !2179

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i8*, align 8
  %25 = alloca i8, align 1
  store i8* %0, i8** %24, align 8
  call void @llvm.dbg.declare(metadata i8** %24, metadata !2180, metadata !DIExpression()), !dbg !2173
  store i8 %1, i8* %25, align 1
  call void @llvm.dbg.declare(metadata i8* %25, metadata !2212, metadata !DIExpression()), !dbg !2175
  %26 = load i8*, i8** %24, align 8, !dbg !2176
  %27 = load i8, i8* %25, align 1, !dbg !2177
  %28 = call i8* @quotearg_char_mem(i8* %26, i64 -1, i8 signext %27), !dbg !2178
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_colon(i8*) #5 !dbg !2213 {
  %2 = load i32, i32* @x.23
  %3 = load i32, i32* @y.24
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !2216, metadata !DIExpression()), !dbg !2217
  %11 = load i8*, i8** %10, align 8, !dbg !2218
  %12 = call i8* @quotearg_char(i8* %11, i8 signext 58), !dbg !2219
  %13 = load i32, i32* @x.23
  %14 = load i32, i32* @y.24
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !2220

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !2221, metadata !DIExpression()), !dbg !2217
  %22 = load i8*, i8** %21, align 8, !dbg !2218
  %23 = call i8* @quotearg_char(i8* %22, i8 signext 58), !dbg !2219
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_arn(%struct._IO_FILE*, i8*, i8*, i8*, i8**, i64) #5 !dbg !2253 {
  %7 = load i32, i32* @x.25
  %8 = load i32, i32* @y.26
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %6, %originalBBalteredBB
  %15 = alloca %struct._IO_FILE*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8**, align 8
  %20 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %15, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %15, metadata !2313, metadata !DIExpression()), !dbg !2314
  store i8* %1, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !2315, metadata !DIExpression()), !dbg !2316
  store i8* %2, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !2317, metadata !DIExpression()), !dbg !2318
  store i8* %3, i8** %18, align 8
  call void @llvm.dbg.declare(metadata i8** %18, metadata !2319, metadata !DIExpression()), !dbg !2320
  store i8** %4, i8*** %19, align 8
  call void @llvm.dbg.declare(metadata i8*** %19, metadata !2321, metadata !DIExpression()), !dbg !2322
  store i64 %5, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !2323, metadata !DIExpression()), !dbg !2324
  %21 = load i8*, i8** %16, align 8, !dbg !2325
  %22 = icmp ne i8* %21, null, !dbg !2325
  %23 = load i32, i32* @x.25
  %24 = load i32, i32* @y.26
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %53, !dbg !2327

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.25
  %33 = load i32, i32* @y.26
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2328
  %41 = load i8*, i8** %16, align 8, !dbg !2329
  %42 = load i8*, i8** %17, align 8, !dbg !2330
  %43 = load i8*, i8** %18, align 8, !dbg !2331
  %44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.63, i64 0, i64 0), i8* %41, i8* %42, i8* %43), !dbg !2332
  %45 = load i32, i32* @x.25
  %46 = load i32, i32* @y.26
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %74, !dbg !2332

53:                                               ; preds = %originalBBpart2
  %54 = load i32, i32* @x.25
  %55 = load i32, i32* @y.26
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2333
  %63 = load i8*, i8** %17, align 8, !dbg !2334
  %64 = load i8*, i8** %18, align 8, !dbg !2335
  %65 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.64, i64 0, i64 0), i8* %63, i8* %64), !dbg !2336
  %66 = load i32, i32* @x.25
  %67 = load i32, i32* @y.26
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %74

74:                                               ; preds = %originalBBpart28, %originalBBpart24
  %75 = load i32, i32* @x.25
  %76 = load i32, i32* @y.26
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %74, %originalBB10alteredBB
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2337
  %84 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.65, i64 0, i64 0)) #10, !dbg !2338
  %85 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %83, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %84, i32 2020), !dbg !2339
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2340
  %87 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.66, i64 0, i64 0), %struct._IO_FILE* %86), !dbg !2340
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2341
  %89 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.67, i64 0, i64 0)) #10, !dbg !2342
  %90 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %88, i8* %89, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.68, i64 0, i64 0)), !dbg !2343
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2344
  %92 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.66, i64 0, i64 0), %struct._IO_FILE* %91), !dbg !2344
  %93 = load i64, i64* %20, align 8, !dbg !2345
  %94 = load i32, i32* @x.25
  %95 = load i32, i32* @y.26
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  switch i64 %93, label %434 [
    i64 0, label %102
    i64 1, label %119
    i64 2, label %142
    i64 3, label %168
    i64 4, label %197
    i64 5, label %229
    i64 6, label %264
    i64 7, label %302
    i64 8, label %343
    i64 9, label %387
  ], !dbg !2346

102:                                              ; preds = %originalBBpart212
  %103 = load i32, i32* @x.25
  %104 = load i32, i32* @y.26
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %102, %originalBB14alteredBB
  %111 = load i32, i32* @x.25
  %112 = load i32, i32* @y.26
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %481, !dbg !2347

119:                                              ; preds = %originalBBpart212
  %120 = load i32, i32* @x.25
  %121 = load i32, i32* @y.26
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %119, %originalBB18alteredBB
  %128 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2349
  %129 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.69, i64 0, i64 0)) #10, !dbg !2350
  %130 = load i8**, i8*** %19, align 8, !dbg !2351
  %131 = getelementptr inbounds i8*, i8** %130, i64 0, !dbg !2351
  %132 = load i8*, i8** %131, align 8, !dbg !2351
  %133 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %128, i8* %129, i8* %132), !dbg !2352
  %134 = load i32, i32* @x.25
  %135 = load i32, i32* @y.26
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %481, !dbg !2353

142:                                              ; preds = %originalBBpart212
  %143 = load i32, i32* @x.25
  %144 = load i32, i32* @y.26
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %142, %originalBB22alteredBB
  %151 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2354
  %152 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.70, i64 0, i64 0)) #10, !dbg !2355
  %153 = load i8**, i8*** %19, align 8, !dbg !2356
  %154 = getelementptr inbounds i8*, i8** %153, i64 0, !dbg !2356
  %155 = load i8*, i8** %154, align 8, !dbg !2356
  %156 = load i8**, i8*** %19, align 8, !dbg !2357
  %157 = getelementptr inbounds i8*, i8** %156, i64 1, !dbg !2357
  %158 = load i8*, i8** %157, align 8, !dbg !2357
  %159 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %151, i8* %152, i8* %155, i8* %158), !dbg !2358
  %160 = load i32, i32* @x.25
  %161 = load i32, i32* @y.26
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %481, !dbg !2359

168:                                              ; preds = %originalBBpart212
  %169 = load i32, i32* @x.25
  %170 = load i32, i32* @y.26
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %168, %originalBB26alteredBB
  %177 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2360
  %178 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.71, i64 0, i64 0)) #10, !dbg !2361
  %179 = load i8**, i8*** %19, align 8, !dbg !2362
  %180 = getelementptr inbounds i8*, i8** %179, i64 0, !dbg !2362
  %181 = load i8*, i8** %180, align 8, !dbg !2362
  %182 = load i8**, i8*** %19, align 8, !dbg !2363
  %183 = getelementptr inbounds i8*, i8** %182, i64 1, !dbg !2363
  %184 = load i8*, i8** %183, align 8, !dbg !2363
  %185 = load i8**, i8*** %19, align 8, !dbg !2364
  %186 = getelementptr inbounds i8*, i8** %185, i64 2, !dbg !2364
  %187 = load i8*, i8** %186, align 8, !dbg !2364
  %188 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %177, i8* %178, i8* %181, i8* %184, i8* %187), !dbg !2365
  %189 = load i32, i32* @x.25
  %190 = load i32, i32* @y.26
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %481, !dbg !2366

197:                                              ; preds = %originalBBpart212
  %198 = load i32, i32* @x.25
  %199 = load i32, i32* @y.26
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %197, %originalBB30alteredBB
  %206 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2367
  %207 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.72, i64 0, i64 0)) #10, !dbg !2368
  %208 = load i8**, i8*** %19, align 8, !dbg !2369
  %209 = getelementptr inbounds i8*, i8** %208, i64 0, !dbg !2369
  %210 = load i8*, i8** %209, align 8, !dbg !2369
  %211 = load i8**, i8*** %19, align 8, !dbg !2370
  %212 = getelementptr inbounds i8*, i8** %211, i64 1, !dbg !2370
  %213 = load i8*, i8** %212, align 8, !dbg !2370
  %214 = load i8**, i8*** %19, align 8, !dbg !2371
  %215 = getelementptr inbounds i8*, i8** %214, i64 2, !dbg !2371
  %216 = load i8*, i8** %215, align 8, !dbg !2371
  %217 = load i8**, i8*** %19, align 8, !dbg !2372
  %218 = getelementptr inbounds i8*, i8** %217, i64 3, !dbg !2372
  %219 = load i8*, i8** %218, align 8, !dbg !2372
  %220 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %206, i8* %207, i8* %210, i8* %213, i8* %216, i8* %219), !dbg !2373
  %221 = load i32, i32* @x.25
  %222 = load i32, i32* @y.26
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %481, !dbg !2374

229:                                              ; preds = %originalBBpart212
  %230 = load i32, i32* @x.25
  %231 = load i32, i32* @y.26
  %232 = sub i32 %230, 1
  %233 = mul i32 %230, %232
  %234 = urem i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = icmp slt i32 %231, 10
  %237 = or i1 %235, %236
  br i1 %237, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %229, %originalBB34alteredBB
  %238 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2375
  %239 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.73, i64 0, i64 0)) #10, !dbg !2376
  %240 = load i8**, i8*** %19, align 8, !dbg !2377
  %241 = getelementptr inbounds i8*, i8** %240, i64 0, !dbg !2377
  %242 = load i8*, i8** %241, align 8, !dbg !2377
  %243 = load i8**, i8*** %19, align 8, !dbg !2378
  %244 = getelementptr inbounds i8*, i8** %243, i64 1, !dbg !2378
  %245 = load i8*, i8** %244, align 8, !dbg !2378
  %246 = load i8**, i8*** %19, align 8, !dbg !2379
  %247 = getelementptr inbounds i8*, i8** %246, i64 2, !dbg !2379
  %248 = load i8*, i8** %247, align 8, !dbg !2379
  %249 = load i8**, i8*** %19, align 8, !dbg !2380
  %250 = getelementptr inbounds i8*, i8** %249, i64 3, !dbg !2380
  %251 = load i8*, i8** %250, align 8, !dbg !2380
  %252 = load i8**, i8*** %19, align 8, !dbg !2381
  %253 = getelementptr inbounds i8*, i8** %252, i64 4, !dbg !2381
  %254 = load i8*, i8** %253, align 8, !dbg !2381
  %255 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %238, i8* %239, i8* %242, i8* %245, i8* %248, i8* %251, i8* %254), !dbg !2382
  %256 = load i32, i32* @x.25
  %257 = load i32, i32* @y.26
  %258 = sub i32 %256, 1
  %259 = mul i32 %256, %258
  %260 = urem i32 %259, 2
  %261 = icmp eq i32 %260, 0
  %262 = icmp slt i32 %257, 10
  %263 = or i1 %261, %262
  br i1 %263, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %481, !dbg !2383

264:                                              ; preds = %originalBBpart212
  %265 = load i32, i32* @x.25
  %266 = load i32, i32* @y.26
  %267 = sub i32 %265, 1
  %268 = mul i32 %265, %267
  %269 = urem i32 %268, 2
  %270 = icmp eq i32 %269, 0
  %271 = icmp slt i32 %266, 10
  %272 = or i1 %270, %271
  br i1 %272, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %264, %originalBB38alteredBB
  %273 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2384
  %274 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.74, i64 0, i64 0)) #10, !dbg !2385
  %275 = load i8**, i8*** %19, align 8, !dbg !2386
  %276 = getelementptr inbounds i8*, i8** %275, i64 0, !dbg !2386
  %277 = load i8*, i8** %276, align 8, !dbg !2386
  %278 = load i8**, i8*** %19, align 8, !dbg !2387
  %279 = getelementptr inbounds i8*, i8** %278, i64 1, !dbg !2387
  %280 = load i8*, i8** %279, align 8, !dbg !2387
  %281 = load i8**, i8*** %19, align 8, !dbg !2388
  %282 = getelementptr inbounds i8*, i8** %281, i64 2, !dbg !2388
  %283 = load i8*, i8** %282, align 8, !dbg !2388
  %284 = load i8**, i8*** %19, align 8, !dbg !2389
  %285 = getelementptr inbounds i8*, i8** %284, i64 3, !dbg !2389
  %286 = load i8*, i8** %285, align 8, !dbg !2389
  %287 = load i8**, i8*** %19, align 8, !dbg !2390
  %288 = getelementptr inbounds i8*, i8** %287, i64 4, !dbg !2390
  %289 = load i8*, i8** %288, align 8, !dbg !2390
  %290 = load i8**, i8*** %19, align 8, !dbg !2391
  %291 = getelementptr inbounds i8*, i8** %290, i64 5, !dbg !2391
  %292 = load i8*, i8** %291, align 8, !dbg !2391
  %293 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %273, i8* %274, i8* %277, i8* %280, i8* %283, i8* %286, i8* %289, i8* %292), !dbg !2392
  %294 = load i32, i32* @x.25
  %295 = load i32, i32* @y.26
  %296 = sub i32 %294, 1
  %297 = mul i32 %294, %296
  %298 = urem i32 %297, 2
  %299 = icmp eq i32 %298, 0
  %300 = icmp slt i32 %295, 10
  %301 = or i1 %299, %300
  br i1 %301, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %481, !dbg !2393

302:                                              ; preds = %originalBBpart212
  %303 = load i32, i32* @x.25
  %304 = load i32, i32* @y.26
  %305 = sub i32 %303, 1
  %306 = mul i32 %303, %305
  %307 = urem i32 %306, 2
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %308, %309
  br i1 %310, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %302, %originalBB42alteredBB
  %311 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2394
  %312 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.75, i64 0, i64 0)) #10, !dbg !2395
  %313 = load i8**, i8*** %19, align 8, !dbg !2396
  %314 = getelementptr inbounds i8*, i8** %313, i64 0, !dbg !2396
  %315 = load i8*, i8** %314, align 8, !dbg !2396
  %316 = load i8**, i8*** %19, align 8, !dbg !2397
  %317 = getelementptr inbounds i8*, i8** %316, i64 1, !dbg !2397
  %318 = load i8*, i8** %317, align 8, !dbg !2397
  %319 = load i8**, i8*** %19, align 8, !dbg !2398
  %320 = getelementptr inbounds i8*, i8** %319, i64 2, !dbg !2398
  %321 = load i8*, i8** %320, align 8, !dbg !2398
  %322 = load i8**, i8*** %19, align 8, !dbg !2399
  %323 = getelementptr inbounds i8*, i8** %322, i64 3, !dbg !2399
  %324 = load i8*, i8** %323, align 8, !dbg !2399
  %325 = load i8**, i8*** %19, align 8, !dbg !2400
  %326 = getelementptr inbounds i8*, i8** %325, i64 4, !dbg !2400
  %327 = load i8*, i8** %326, align 8, !dbg !2400
  %328 = load i8**, i8*** %19, align 8, !dbg !2401
  %329 = getelementptr inbounds i8*, i8** %328, i64 5, !dbg !2401
  %330 = load i8*, i8** %329, align 8, !dbg !2401
  %331 = load i8**, i8*** %19, align 8, !dbg !2402
  %332 = getelementptr inbounds i8*, i8** %331, i64 6, !dbg !2402
  %333 = load i8*, i8** %332, align 8, !dbg !2402
  %334 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %311, i8* %312, i8* %315, i8* %318, i8* %321, i8* %324, i8* %327, i8* %330, i8* %333), !dbg !2403
  %335 = load i32, i32* @x.25
  %336 = load i32, i32* @y.26
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %481, !dbg !2404

343:                                              ; preds = %originalBBpart212
  %344 = load i32, i32* @x.25
  %345 = load i32, i32* @y.26
  %346 = sub i32 %344, 1
  %347 = mul i32 %344, %346
  %348 = urem i32 %347, 2
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %349, %350
  br i1 %351, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %343, %originalBB46alteredBB
  %352 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2405
  %353 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.76, i64 0, i64 0)) #10, !dbg !2406
  %354 = load i8**, i8*** %19, align 8, !dbg !2407
  %355 = getelementptr inbounds i8*, i8** %354, i64 0, !dbg !2407
  %356 = load i8*, i8** %355, align 8, !dbg !2407
  %357 = load i8**, i8*** %19, align 8, !dbg !2408
  %358 = getelementptr inbounds i8*, i8** %357, i64 1, !dbg !2408
  %359 = load i8*, i8** %358, align 8, !dbg !2408
  %360 = load i8**, i8*** %19, align 8, !dbg !2409
  %361 = getelementptr inbounds i8*, i8** %360, i64 2, !dbg !2409
  %362 = load i8*, i8** %361, align 8, !dbg !2409
  %363 = load i8**, i8*** %19, align 8, !dbg !2410
  %364 = getelementptr inbounds i8*, i8** %363, i64 3, !dbg !2410
  %365 = load i8*, i8** %364, align 8, !dbg !2410
  %366 = load i8**, i8*** %19, align 8, !dbg !2411
  %367 = getelementptr inbounds i8*, i8** %366, i64 4, !dbg !2411
  %368 = load i8*, i8** %367, align 8, !dbg !2411
  %369 = load i8**, i8*** %19, align 8, !dbg !2412
  %370 = getelementptr inbounds i8*, i8** %369, i64 5, !dbg !2412
  %371 = load i8*, i8** %370, align 8, !dbg !2412
  %372 = load i8**, i8*** %19, align 8, !dbg !2413
  %373 = getelementptr inbounds i8*, i8** %372, i64 6, !dbg !2413
  %374 = load i8*, i8** %373, align 8, !dbg !2413
  %375 = load i8**, i8*** %19, align 8, !dbg !2414
  %376 = getelementptr inbounds i8*, i8** %375, i64 7, !dbg !2414
  %377 = load i8*, i8** %376, align 8, !dbg !2414
  %378 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %352, i8* %353, i8* %356, i8* %359, i8* %362, i8* %365, i8* %368, i8* %371, i8* %374, i8* %377), !dbg !2415
  %379 = load i32, i32* @x.25
  %380 = load i32, i32* @y.26
  %381 = sub i32 %379, 1
  %382 = mul i32 %379, %381
  %383 = urem i32 %382, 2
  %384 = icmp eq i32 %383, 0
  %385 = icmp slt i32 %380, 10
  %386 = or i1 %384, %385
  br i1 %386, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %481, !dbg !2416

387:                                              ; preds = %originalBBpart212
  %388 = load i32, i32* @x.25
  %389 = load i32, i32* @y.26
  %390 = sub i32 %388, 1
  %391 = mul i32 %388, %390
  %392 = urem i32 %391, 2
  %393 = icmp eq i32 %392, 0
  %394 = icmp slt i32 %389, 10
  %395 = or i1 %393, %394
  br i1 %395, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %387, %originalBB50alteredBB
  %396 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2417
  %397 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.77, i64 0, i64 0)) #10, !dbg !2418
  %398 = load i8**, i8*** %19, align 8, !dbg !2419
  %399 = getelementptr inbounds i8*, i8** %398, i64 0, !dbg !2419
  %400 = load i8*, i8** %399, align 8, !dbg !2419
  %401 = load i8**, i8*** %19, align 8, !dbg !2420
  %402 = getelementptr inbounds i8*, i8** %401, i64 1, !dbg !2420
  %403 = load i8*, i8** %402, align 8, !dbg !2420
  %404 = load i8**, i8*** %19, align 8, !dbg !2421
  %405 = getelementptr inbounds i8*, i8** %404, i64 2, !dbg !2421
  %406 = load i8*, i8** %405, align 8, !dbg !2421
  %407 = load i8**, i8*** %19, align 8, !dbg !2422
  %408 = getelementptr inbounds i8*, i8** %407, i64 3, !dbg !2422
  %409 = load i8*, i8** %408, align 8, !dbg !2422
  %410 = load i8**, i8*** %19, align 8, !dbg !2423
  %411 = getelementptr inbounds i8*, i8** %410, i64 4, !dbg !2423
  %412 = load i8*, i8** %411, align 8, !dbg !2423
  %413 = load i8**, i8*** %19, align 8, !dbg !2424
  %414 = getelementptr inbounds i8*, i8** %413, i64 5, !dbg !2424
  %415 = load i8*, i8** %414, align 8, !dbg !2424
  %416 = load i8**, i8*** %19, align 8, !dbg !2425
  %417 = getelementptr inbounds i8*, i8** %416, i64 6, !dbg !2425
  %418 = load i8*, i8** %417, align 8, !dbg !2425
  %419 = load i8**, i8*** %19, align 8, !dbg !2426
  %420 = getelementptr inbounds i8*, i8** %419, i64 7, !dbg !2426
  %421 = load i8*, i8** %420, align 8, !dbg !2426
  %422 = load i8**, i8*** %19, align 8, !dbg !2427
  %423 = getelementptr inbounds i8*, i8** %422, i64 8, !dbg !2427
  %424 = load i8*, i8** %423, align 8, !dbg !2427
  %425 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %396, i8* %397, i8* %400, i8* %403, i8* %406, i8* %409, i8* %412, i8* %415, i8* %418, i8* %421, i8* %424), !dbg !2428
  %426 = load i32, i32* @x.25
  %427 = load i32, i32* @y.26
  %428 = sub i32 %426, 1
  %429 = mul i32 %426, %428
  %430 = urem i32 %429, 2
  %431 = icmp eq i32 %430, 0
  %432 = icmp slt i32 %427, 10
  %433 = or i1 %431, %432
  br i1 %433, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br label %481, !dbg !2429

434:                                              ; preds = %originalBBpart212
  %435 = load i32, i32* @x.25
  %436 = load i32, i32* @y.26
  %437 = sub i32 %435, 1
  %438 = mul i32 %435, %437
  %439 = urem i32 %438, 2
  %440 = icmp eq i32 %439, 0
  %441 = icmp slt i32 %436, 10
  %442 = or i1 %440, %441
  br i1 %442, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %434, %originalBB54alteredBB
  %443 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2430
  %444 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.78, i64 0, i64 0)) #10, !dbg !2431
  %445 = load i8**, i8*** %19, align 8, !dbg !2432
  %446 = getelementptr inbounds i8*, i8** %445, i64 0, !dbg !2432
  %447 = load i8*, i8** %446, align 8, !dbg !2432
  %448 = load i8**, i8*** %19, align 8, !dbg !2433
  %449 = getelementptr inbounds i8*, i8** %448, i64 1, !dbg !2433
  %450 = load i8*, i8** %449, align 8, !dbg !2433
  %451 = load i8**, i8*** %19, align 8, !dbg !2434
  %452 = getelementptr inbounds i8*, i8** %451, i64 2, !dbg !2434
  %453 = load i8*, i8** %452, align 8, !dbg !2434
  %454 = load i8**, i8*** %19, align 8, !dbg !2435
  %455 = getelementptr inbounds i8*, i8** %454, i64 3, !dbg !2435
  %456 = load i8*, i8** %455, align 8, !dbg !2435
  %457 = load i8**, i8*** %19, align 8, !dbg !2436
  %458 = getelementptr inbounds i8*, i8** %457, i64 4, !dbg !2436
  %459 = load i8*, i8** %458, align 8, !dbg !2436
  %460 = load i8**, i8*** %19, align 8, !dbg !2437
  %461 = getelementptr inbounds i8*, i8** %460, i64 5, !dbg !2437
  %462 = load i8*, i8** %461, align 8, !dbg !2437
  %463 = load i8**, i8*** %19, align 8, !dbg !2438
  %464 = getelementptr inbounds i8*, i8** %463, i64 6, !dbg !2438
  %465 = load i8*, i8** %464, align 8, !dbg !2438
  %466 = load i8**, i8*** %19, align 8, !dbg !2439
  %467 = getelementptr inbounds i8*, i8** %466, i64 7, !dbg !2439
  %468 = load i8*, i8** %467, align 8, !dbg !2439
  %469 = load i8**, i8*** %19, align 8, !dbg !2440
  %470 = getelementptr inbounds i8*, i8** %469, i64 8, !dbg !2440
  %471 = load i8*, i8** %470, align 8, !dbg !2440
  %472 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %443, i8* %444, i8* %447, i8* %450, i8* %453, i8* %456, i8* %459, i8* %462, i8* %465, i8* %468, i8* %471), !dbg !2441
  %473 = load i32, i32* @x.25
  %474 = load i32, i32* @y.26
  %475 = sub i32 %473, 1
  %476 = mul i32 %473, %475
  %477 = urem i32 %476, 2
  %478 = icmp eq i32 %477, 0
  %479 = icmp slt i32 %474, 10
  %480 = or i1 %478, %479
  br i1 %480, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br label %481, !dbg !2442

481:                                              ; preds = %originalBBpart256, %originalBBpart252, %originalBBpart248, %originalBBpart244, %originalBBpart240, %originalBBpart236, %originalBBpart232, %originalBBpart228, %originalBBpart224, %originalBBpart220, %originalBBpart216
  %482 = load i32, i32* @x.25
  %483 = load i32, i32* @y.26
  %484 = sub i32 %482, 1
  %485 = mul i32 %482, %484
  %486 = urem i32 %485, 2
  %487 = icmp eq i32 %486, 0
  %488 = icmp slt i32 %483, 10
  %489 = or i1 %487, %488
  br i1 %489, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %481, %originalBB58alteredBB
  %490 = load i32, i32* @x.25
  %491 = load i32, i32* @y.26
  %492 = sub i32 %490, 1
  %493 = mul i32 %490, %492
  %494 = urem i32 %493, 2
  %495 = icmp eq i32 %494, 0
  %496 = icmp slt i32 %491, 10
  %497 = or i1 %495, %496
  br i1 %497, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  ret void, !dbg !2443

originalBBalteredBB:                              ; preds = %originalBB, %6
  %498 = alloca %struct._IO_FILE*, align 8
  %499 = alloca i8*, align 8
  %500 = alloca i8*, align 8
  %501 = alloca i8*, align 8
  %502 = alloca i8**, align 8
  %503 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %498, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %498, metadata !2444, metadata !DIExpression()), !dbg !2314
  store i8* %1, i8** %499, align 8
  call void @llvm.dbg.declare(metadata i8** %499, metadata !2483, metadata !DIExpression()), !dbg !2316
  store i8* %2, i8** %500, align 8
  call void @llvm.dbg.declare(metadata i8** %500, metadata !2484, metadata !DIExpression()), !dbg !2318
  store i8* %3, i8** %501, align 8
  call void @llvm.dbg.declare(metadata i8** %501, metadata !2485, metadata !DIExpression()), !dbg !2320
  store i8** %4, i8*** %502, align 8
  call void @llvm.dbg.declare(metadata i8*** %502, metadata !2486, metadata !DIExpression()), !dbg !2322
  store i64 %5, i64* %503, align 8
  call void @llvm.dbg.declare(metadata i64* %503, metadata !2487, metadata !DIExpression()), !dbg !2324
  %504 = load i8*, i8** %499, align 8, !dbg !2325
  %505 = icmp ne i8* %504, null, !dbg !2325
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  %506 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2328
  %507 = load i8*, i8** %16, align 8, !dbg !2329
  %508 = load i8*, i8** %17, align 8, !dbg !2330
  %509 = load i8*, i8** %18, align 8, !dbg !2331
  %510 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %506, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.63, i64 0, i64 0), i8* %507, i8* %508, i8* %509), !dbg !2332
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  %511 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2333
  %512 = load i8*, i8** %17, align 8, !dbg !2334
  %513 = load i8*, i8** %18, align 8, !dbg !2335
  %514 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %511, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.64, i64 0, i64 0), i8* %512, i8* %513), !dbg !2336
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %74
  %515 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2337
  %516 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.65, i64 0, i64 0)) #10, !dbg !2338
  %517 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %515, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %516, i32 2020), !dbg !2339
  %518 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2340
  %519 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.66, i64 0, i64 0), %struct._IO_FILE* %518), !dbg !2340
  %520 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2341
  %521 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.67, i64 0, i64 0)) #10, !dbg !2342
  %522 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %520, i8* %521, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.68, i64 0, i64 0)), !dbg !2343
  %523 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2344
  %524 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.66, i64 0, i64 0), %struct._IO_FILE* %523), !dbg !2344
  %525 = load i64, i64* %20, align 8, !dbg !2345
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %102
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %119
  %526 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2349
  %527 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.69, i64 0, i64 0)) #10, !dbg !2350
  %528 = load i8**, i8*** %19, align 8, !dbg !2351
  %529 = getelementptr inbounds i8*, i8** %528, i64 0, !dbg !2351
  %530 = load i8*, i8** %529, align 8, !dbg !2351
  %531 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %526, i8* %527, i8* %530), !dbg !2352
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %142
  %532 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2354
  %533 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.70, i64 0, i64 0)) #10, !dbg !2355
  %534 = load i8**, i8*** %19, align 8, !dbg !2356
  %535 = getelementptr inbounds i8*, i8** %534, i64 0, !dbg !2356
  %536 = load i8*, i8** %535, align 8, !dbg !2356
  %537 = load i8**, i8*** %19, align 8, !dbg !2357
  %538 = getelementptr inbounds i8*, i8** %537, i64 1, !dbg !2357
  %539 = load i8*, i8** %538, align 8, !dbg !2357
  %540 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %532, i8* %533, i8* %536, i8* %539), !dbg !2358
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %168
  %541 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2360
  %542 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.71, i64 0, i64 0)) #10, !dbg !2361
  %543 = load i8**, i8*** %19, align 8, !dbg !2362
  %544 = getelementptr inbounds i8*, i8** %543, i64 0, !dbg !2362
  %545 = load i8*, i8** %544, align 8, !dbg !2362
  %546 = load i8**, i8*** %19, align 8, !dbg !2363
  %547 = getelementptr inbounds i8*, i8** %546, i64 1, !dbg !2363
  %548 = load i8*, i8** %547, align 8, !dbg !2363
  %549 = load i8**, i8*** %19, align 8, !dbg !2364
  %550 = getelementptr inbounds i8*, i8** %549, i64 2, !dbg !2364
  %551 = load i8*, i8** %550, align 8, !dbg !2364
  %552 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %541, i8* %542, i8* %545, i8* %548, i8* %551), !dbg !2365
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %197
  %553 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2367
  %554 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.72, i64 0, i64 0)) #10, !dbg !2368
  %555 = load i8**, i8*** %19, align 8, !dbg !2369
  %556 = getelementptr inbounds i8*, i8** %555, i64 0, !dbg !2369
  %557 = load i8*, i8** %556, align 8, !dbg !2369
  %558 = load i8**, i8*** %19, align 8, !dbg !2370
  %559 = getelementptr inbounds i8*, i8** %558, i64 1, !dbg !2370
  %560 = load i8*, i8** %559, align 8, !dbg !2370
  %561 = load i8**, i8*** %19, align 8, !dbg !2371
  %562 = getelementptr inbounds i8*, i8** %561, i64 2, !dbg !2371
  %563 = load i8*, i8** %562, align 8, !dbg !2371
  %564 = load i8**, i8*** %19, align 8, !dbg !2372
  %565 = getelementptr inbounds i8*, i8** %564, i64 3, !dbg !2372
  %566 = load i8*, i8** %565, align 8, !dbg !2372
  %567 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %553, i8* %554, i8* %557, i8* %560, i8* %563, i8* %566), !dbg !2373
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %229
  %568 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2375
  %569 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.73, i64 0, i64 0)) #10, !dbg !2376
  %570 = load i8**, i8*** %19, align 8, !dbg !2377
  %571 = getelementptr inbounds i8*, i8** %570, i64 0, !dbg !2377
  %572 = load i8*, i8** %571, align 8, !dbg !2377
  %573 = load i8**, i8*** %19, align 8, !dbg !2378
  %574 = getelementptr inbounds i8*, i8** %573, i64 1, !dbg !2378
  %575 = load i8*, i8** %574, align 8, !dbg !2378
  %576 = load i8**, i8*** %19, align 8, !dbg !2379
  %577 = getelementptr inbounds i8*, i8** %576, i64 2, !dbg !2379
  %578 = load i8*, i8** %577, align 8, !dbg !2379
  %579 = load i8**, i8*** %19, align 8, !dbg !2380
  %580 = getelementptr inbounds i8*, i8** %579, i64 3, !dbg !2380
  %581 = load i8*, i8** %580, align 8, !dbg !2380
  %582 = load i8**, i8*** %19, align 8, !dbg !2381
  %583 = getelementptr inbounds i8*, i8** %582, i64 4, !dbg !2381
  %584 = load i8*, i8** %583, align 8, !dbg !2381
  %585 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %568, i8* %569, i8* %572, i8* %575, i8* %578, i8* %581, i8* %584), !dbg !2382
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %264
  %586 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2384
  %587 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.74, i64 0, i64 0)) #10, !dbg !2385
  %588 = load i8**, i8*** %19, align 8, !dbg !2386
  %589 = getelementptr inbounds i8*, i8** %588, i64 0, !dbg !2386
  %590 = load i8*, i8** %589, align 8, !dbg !2386
  %591 = load i8**, i8*** %19, align 8, !dbg !2387
  %592 = getelementptr inbounds i8*, i8** %591, i64 1, !dbg !2387
  %593 = load i8*, i8** %592, align 8, !dbg !2387
  %594 = load i8**, i8*** %19, align 8, !dbg !2388
  %595 = getelementptr inbounds i8*, i8** %594, i64 2, !dbg !2388
  %596 = load i8*, i8** %595, align 8, !dbg !2388
  %597 = load i8**, i8*** %19, align 8, !dbg !2389
  %598 = getelementptr inbounds i8*, i8** %597, i64 3, !dbg !2389
  %599 = load i8*, i8** %598, align 8, !dbg !2389
  %600 = load i8**, i8*** %19, align 8, !dbg !2390
  %601 = getelementptr inbounds i8*, i8** %600, i64 4, !dbg !2390
  %602 = load i8*, i8** %601, align 8, !dbg !2390
  %603 = load i8**, i8*** %19, align 8, !dbg !2391
  %604 = getelementptr inbounds i8*, i8** %603, i64 5, !dbg !2391
  %605 = load i8*, i8** %604, align 8, !dbg !2391
  %606 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %586, i8* %587, i8* %590, i8* %593, i8* %596, i8* %599, i8* %602, i8* %605), !dbg !2392
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %302
  %607 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2394
  %608 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.75, i64 0, i64 0)) #10, !dbg !2395
  %609 = load i8**, i8*** %19, align 8, !dbg !2396
  %610 = getelementptr inbounds i8*, i8** %609, i64 0, !dbg !2396
  %611 = load i8*, i8** %610, align 8, !dbg !2396
  %612 = load i8**, i8*** %19, align 8, !dbg !2397
  %613 = getelementptr inbounds i8*, i8** %612, i64 1, !dbg !2397
  %614 = load i8*, i8** %613, align 8, !dbg !2397
  %615 = load i8**, i8*** %19, align 8, !dbg !2398
  %616 = getelementptr inbounds i8*, i8** %615, i64 2, !dbg !2398
  %617 = load i8*, i8** %616, align 8, !dbg !2398
  %618 = load i8**, i8*** %19, align 8, !dbg !2399
  %619 = getelementptr inbounds i8*, i8** %618, i64 3, !dbg !2399
  %620 = load i8*, i8** %619, align 8, !dbg !2399
  %621 = load i8**, i8*** %19, align 8, !dbg !2400
  %622 = getelementptr inbounds i8*, i8** %621, i64 4, !dbg !2400
  %623 = load i8*, i8** %622, align 8, !dbg !2400
  %624 = load i8**, i8*** %19, align 8, !dbg !2401
  %625 = getelementptr inbounds i8*, i8** %624, i64 5, !dbg !2401
  %626 = load i8*, i8** %625, align 8, !dbg !2401
  %627 = load i8**, i8*** %19, align 8, !dbg !2402
  %628 = getelementptr inbounds i8*, i8** %627, i64 6, !dbg !2402
  %629 = load i8*, i8** %628, align 8, !dbg !2402
  %630 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %607, i8* %608, i8* %611, i8* %614, i8* %617, i8* %620, i8* %623, i8* %626, i8* %629), !dbg !2403
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %343
  %631 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2405
  %632 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.76, i64 0, i64 0)) #10, !dbg !2406
  %633 = load i8**, i8*** %19, align 8, !dbg !2407
  %634 = getelementptr inbounds i8*, i8** %633, i64 0, !dbg !2407
  %635 = load i8*, i8** %634, align 8, !dbg !2407
  %636 = load i8**, i8*** %19, align 8, !dbg !2408
  %637 = getelementptr inbounds i8*, i8** %636, i64 1, !dbg !2408
  %638 = load i8*, i8** %637, align 8, !dbg !2408
  %639 = load i8**, i8*** %19, align 8, !dbg !2409
  %640 = getelementptr inbounds i8*, i8** %639, i64 2, !dbg !2409
  %641 = load i8*, i8** %640, align 8, !dbg !2409
  %642 = load i8**, i8*** %19, align 8, !dbg !2410
  %643 = getelementptr inbounds i8*, i8** %642, i64 3, !dbg !2410
  %644 = load i8*, i8** %643, align 8, !dbg !2410
  %645 = load i8**, i8*** %19, align 8, !dbg !2411
  %646 = getelementptr inbounds i8*, i8** %645, i64 4, !dbg !2411
  %647 = load i8*, i8** %646, align 8, !dbg !2411
  %648 = load i8**, i8*** %19, align 8, !dbg !2412
  %649 = getelementptr inbounds i8*, i8** %648, i64 5, !dbg !2412
  %650 = load i8*, i8** %649, align 8, !dbg !2412
  %651 = load i8**, i8*** %19, align 8, !dbg !2413
  %652 = getelementptr inbounds i8*, i8** %651, i64 6, !dbg !2413
  %653 = load i8*, i8** %652, align 8, !dbg !2413
  %654 = load i8**, i8*** %19, align 8, !dbg !2414
  %655 = getelementptr inbounds i8*, i8** %654, i64 7, !dbg !2414
  %656 = load i8*, i8** %655, align 8, !dbg !2414
  %657 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %631, i8* %632, i8* %635, i8* %638, i8* %641, i8* %644, i8* %647, i8* %650, i8* %653, i8* %656), !dbg !2415
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %387
  %658 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2417
  %659 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.77, i64 0, i64 0)) #10, !dbg !2418
  %660 = load i8**, i8*** %19, align 8, !dbg !2419
  %661 = getelementptr inbounds i8*, i8** %660, i64 0, !dbg !2419
  %662 = load i8*, i8** %661, align 8, !dbg !2419
  %663 = load i8**, i8*** %19, align 8, !dbg !2420
  %664 = getelementptr inbounds i8*, i8** %663, i64 1, !dbg !2420
  %665 = load i8*, i8** %664, align 8, !dbg !2420
  %666 = load i8**, i8*** %19, align 8, !dbg !2421
  %667 = getelementptr inbounds i8*, i8** %666, i64 2, !dbg !2421
  %668 = load i8*, i8** %667, align 8, !dbg !2421
  %669 = load i8**, i8*** %19, align 8, !dbg !2422
  %670 = getelementptr inbounds i8*, i8** %669, i64 3, !dbg !2422
  %671 = load i8*, i8** %670, align 8, !dbg !2422
  %672 = load i8**, i8*** %19, align 8, !dbg !2423
  %673 = getelementptr inbounds i8*, i8** %672, i64 4, !dbg !2423
  %674 = load i8*, i8** %673, align 8, !dbg !2423
  %675 = load i8**, i8*** %19, align 8, !dbg !2424
  %676 = getelementptr inbounds i8*, i8** %675, i64 5, !dbg !2424
  %677 = load i8*, i8** %676, align 8, !dbg !2424
  %678 = load i8**, i8*** %19, align 8, !dbg !2425
  %679 = getelementptr inbounds i8*, i8** %678, i64 6, !dbg !2425
  %680 = load i8*, i8** %679, align 8, !dbg !2425
  %681 = load i8**, i8*** %19, align 8, !dbg !2426
  %682 = getelementptr inbounds i8*, i8** %681, i64 7, !dbg !2426
  %683 = load i8*, i8** %682, align 8, !dbg !2426
  %684 = load i8**, i8*** %19, align 8, !dbg !2427
  %685 = getelementptr inbounds i8*, i8** %684, i64 8, !dbg !2427
  %686 = load i8*, i8** %685, align 8, !dbg !2427
  %687 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %658, i8* %659, i8* %662, i8* %665, i8* %668, i8* %671, i8* %674, i8* %677, i8* %680, i8* %683, i8* %686), !dbg !2428
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %434
  %688 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2430
  %689 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.78, i64 0, i64 0)) #10, !dbg !2431
  %690 = load i8**, i8*** %19, align 8, !dbg !2432
  %691 = getelementptr inbounds i8*, i8** %690, i64 0, !dbg !2432
  %692 = load i8*, i8** %691, align 8, !dbg !2432
  %693 = load i8**, i8*** %19, align 8, !dbg !2433
  %694 = getelementptr inbounds i8*, i8** %693, i64 1, !dbg !2433
  %695 = load i8*, i8** %694, align 8, !dbg !2433
  %696 = load i8**, i8*** %19, align 8, !dbg !2434
  %697 = getelementptr inbounds i8*, i8** %696, i64 2, !dbg !2434
  %698 = load i8*, i8** %697, align 8, !dbg !2434
  %699 = load i8**, i8*** %19, align 8, !dbg !2435
  %700 = getelementptr inbounds i8*, i8** %699, i64 3, !dbg !2435
  %701 = load i8*, i8** %700, align 8, !dbg !2435
  %702 = load i8**, i8*** %19, align 8, !dbg !2436
  %703 = getelementptr inbounds i8*, i8** %702, i64 4, !dbg !2436
  %704 = load i8*, i8** %703, align 8, !dbg !2436
  %705 = load i8**, i8*** %19, align 8, !dbg !2437
  %706 = getelementptr inbounds i8*, i8** %705, i64 5, !dbg !2437
  %707 = load i8*, i8** %706, align 8, !dbg !2437
  %708 = load i8**, i8*** %19, align 8, !dbg !2438
  %709 = getelementptr inbounds i8*, i8** %708, i64 6, !dbg !2438
  %710 = load i8*, i8** %709, align 8, !dbg !2438
  %711 = load i8**, i8*** %19, align 8, !dbg !2439
  %712 = getelementptr inbounds i8*, i8** %711, i64 7, !dbg !2439
  %713 = load i8*, i8** %712, align 8, !dbg !2439
  %714 = load i8**, i8*** %19, align 8, !dbg !2440
  %715 = getelementptr inbounds i8*, i8** %714, i64 8, !dbg !2440
  %716 = load i8*, i8** %715, align 8, !dbg !2440
  %717 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %688, i8* %689, i8* %692, i8* %695, i8* %698, i8* %701, i8* %704, i8* %707, i8* %710, i8* %713, i8* %716), !dbg !2441
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %481
  br label %originalBB58
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_va(%struct._IO_FILE*, i8*, i8*, i8*, %struct.__va_list_tag*) #5 !dbg !2488 {
  %6 = load i32, i32* @x.27
  %7 = load i32, i32* @y.28
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = alloca %struct._IO_FILE*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca %struct.__va_list_tag*, align 8
  %19 = alloca i64, align 8
  %20 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %14, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %14, metadata !2498, metadata !DIExpression()), !dbg !2499
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2500, metadata !DIExpression()), !dbg !2501
  store i8* %2, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !2502, metadata !DIExpression()), !dbg !2503
  store i8* %3, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !2504, metadata !DIExpression()), !dbg !2505
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %18, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %18, metadata !2506, metadata !DIExpression()), !dbg !2507
  call void @llvm.dbg.declare(metadata i64* %19, metadata !2508, metadata !DIExpression()), !dbg !2509
  call void @llvm.dbg.declare(metadata [10 x i8*]* %20, metadata !2510, metadata !DIExpression()), !dbg !2512
  store i64 0, i64* %19, align 8, !dbg !2513
  %21 = load i32, i32* @x.27
  %22 = load i32, i32* @y.28
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %29, !dbg !2515

29:                                               ; preds = %originalBBpart240, %originalBBpart2
  %30 = load i32, i32* @x.27
  %31 = load i32, i32* @y.28
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i64, i64* %19, align 8, !dbg !2516
  %39 = icmp ult i64 %38, 10, !dbg !2518
  %40 = load i32, i32* @x.27
  %41 = load i32, i32* @y.28
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %39, label %48, label %134, !dbg !2519

48:                                               ; preds = %originalBBpart24
  %49 = load i32, i32* @x.27
  %50 = load i32, i32* @y.28
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !2520
  %58 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 0, !dbg !2520
  %59 = load i32, i32* %58, align 8, !dbg !2520
  %60 = icmp ule i32 %59, 40, !dbg !2520
  %61 = load i32, i32* @x.27
  %62 = load i32, i32* @y.28
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %60, label %69, label %91, !dbg !2520

69:                                               ; preds = %originalBBpart28
  %70 = load i32, i32* @x.27
  %71 = load i32, i32* @y.28
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %69, %originalBB10alteredBB
  %78 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !2520
  %79 = load i8*, i8** %78, align 8, !dbg !2520
  %80 = getelementptr i8, i8* %79, i32 %59, !dbg !2520
  %81 = bitcast i8* %80 to i8**, !dbg !2520
  %82 = add i32 %59, 8, !dbg !2520
  store i32 %82, i32* %58, align 8, !dbg !2520
  %83 = load i32, i32* @x.27
  %84 = load i32, i32* @y.28
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart216, label %originalBB10alteredBB

originalBBpart216:                                ; preds = %originalBB10
  br label %112, !dbg !2520

91:                                               ; preds = %originalBBpart28
  %92 = load i32, i32* @x.27
  %93 = load i32, i32* @y.28
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %91, %originalBB18alteredBB
  %100 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !2520
  %101 = load i8*, i8** %100, align 8, !dbg !2520
  %102 = bitcast i8* %101 to i8**, !dbg !2520
  %103 = getelementptr i8, i8* %101, i32 8, !dbg !2520
  store i8* %103, i8** %100, align 8, !dbg !2520
  %104 = load i32, i32* @x.27
  %105 = load i32, i32* @y.28
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %112, !dbg !2520

112:                                              ; preds = %originalBBpart220, %originalBBpart216
  %113 = phi i8** [ %81, %originalBBpart216 ], [ %102, %originalBBpart220 ], !dbg !2520
  %114 = load i32, i32* @x.27
  %115 = load i32, i32* @y.28
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %112, %originalBB22alteredBB
  %122 = load i8*, i8** %113, align 8, !dbg !2520
  %123 = load i64, i64* %19, align 8, !dbg !2521
  %124 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %123, !dbg !2522
  store i8* %122, i8** %124, align 8, !dbg !2523
  %125 = icmp ne i8* %122, null, !dbg !2524
  %126 = load i32, i32* @x.27
  %127 = load i32, i32* @y.28
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %134

134:                                              ; preds = %originalBBpart224, %originalBBpart24
  %135 = phi i1 [ false, %originalBBpart24 ], [ %125, %originalBBpart224 ], !dbg !2525
  %136 = load i32, i32* @x.27
  %137 = load i32, i32* @y.28
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %134, %originalBB26alteredBB
  %144 = load i32, i32* @x.27
  %145 = load i32, i32* @y.28
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %135, label %152, label %188, !dbg !2526

152:                                              ; preds = %originalBBpart228
  %153 = load i32, i32* @x.27
  %154 = load i32, i32* @y.28
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %152, %originalBB30alteredBB
  %161 = load i32, i32* @x.27
  %162 = load i32, i32* @y.28
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %169, !dbg !2526

169:                                              ; preds = %originalBBpart232
  %170 = load i32, i32* @x.27
  %171 = load i32, i32* @y.28
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %169, %originalBB34alteredBB
  %178 = load i64, i64* %19, align 8, !dbg !2527
  %179 = add i64 %178, 1, !dbg !2527
  store i64 %179, i64* %19, align 8, !dbg !2527
  %180 = load i32, i32* @x.27
  %181 = load i32, i32* @y.28
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBBpart240, label %originalBB34alteredBB

originalBBpart240:                                ; preds = %originalBB34
  br label %29, !dbg !2528, !llvm.loop !2529

188:                                              ; preds = %originalBBpart228
  %189 = load i32, i32* @x.27
  %190 = load i32, i32* @y.28
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %188, %originalBB42alteredBB
  %197 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !2531
  %198 = load i8*, i8** %15, align 8, !dbg !2532
  %199 = load i8*, i8** %16, align 8, !dbg !2533
  %200 = load i8*, i8** %17, align 8, !dbg !2534
  %201 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !2535
  %202 = load i64, i64* %19, align 8, !dbg !2536
  call void @version_etc_arn(%struct._IO_FILE* %197, i8* %198, i8* %199, i8* %200, i8** %201, i64 %202), !dbg !2537
  %203 = load i32, i32* @x.27
  %204 = load i32, i32* @y.28
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  ret void, !dbg !2538

originalBBalteredBB:                              ; preds = %originalBB, %5
  %211 = alloca %struct._IO_FILE*, align 8
  %212 = alloca i8*, align 8
  %213 = alloca i8*, align 8
  %214 = alloca i8*, align 8
  %215 = alloca %struct.__va_list_tag*, align 8
  %216 = alloca i64, align 8
  %217 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %211, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %211, metadata !2539, metadata !DIExpression()), !dbg !2499
  store i8* %1, i8** %212, align 8
  call void @llvm.dbg.declare(metadata i8** %212, metadata !2585, metadata !DIExpression()), !dbg !2501
  store i8* %2, i8** %213, align 8
  call void @llvm.dbg.declare(metadata i8** %213, metadata !2586, metadata !DIExpression()), !dbg !2503
  store i8* %3, i8** %214, align 8
  call void @llvm.dbg.declare(metadata i8** %214, metadata !2587, metadata !DIExpression()), !dbg !2505
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %215, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %215, metadata !2588, metadata !DIExpression()), !dbg !2507
  call void @llvm.dbg.declare(metadata i64* %216, metadata !2589, metadata !DIExpression()), !dbg !2509
  call void @llvm.dbg.declare(metadata [10 x i8*]* %217, metadata !2590, metadata !DIExpression()), !dbg !2512
  store i64 0, i64* %216, align 8, !dbg !2513
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %218 = load i64, i64* %19, align 8, !dbg !2516
  %219 = icmp ult i64 %218, 10, !dbg !2518
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %220 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !2520
  %221 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %220, i32 0, i32 0, !dbg !2520
  %222 = load i32, i32* %221, align 8, !dbg !2520
  %223 = icmp ule i32 %222, 40, !dbg !2520
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %69
  %224 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !2520
  %225 = load i8*, i8** %224, align 8, !dbg !2520
  %226 = getelementptr i8, i8* %225, i32 %59, !dbg !2520
  %227 = bitcast i8* %226 to i8**, !dbg !2520
  %_ = sub i32 0, %59
  %gen = add i32 %_, 8
  %_11 = sub i32 0, %59
  %gen12 = add i32 %_11, 8
  %_13 = sub i32 %59, 8
  %gen14 = mul i32 %_13, 8
  %228 = add i32 %59, 8, !dbg !2520
  store i32 %228, i32* %58, align 8, !dbg !2520
  br label %originalBB10

originalBB18alteredBB:                            ; preds = %originalBB18, %91
  %229 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !2520
  %230 = load i8*, i8** %229, align 8, !dbg !2520
  %231 = bitcast i8* %230 to i8**, !dbg !2520
  %232 = getelementptr i8, i8* %230, i32 8, !dbg !2520
  store i8* %232, i8** %229, align 8, !dbg !2520
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %112
  %233 = load i8*, i8** %113, align 8, !dbg !2520
  %234 = load i64, i64* %19, align 8, !dbg !2521
  %235 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %234, !dbg !2522
  store i8* %233, i8** %235, align 8, !dbg !2523
  %236 = icmp ne i8* %233, null, !dbg !2524
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %134
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %152
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %169
  %237 = load i64, i64* %19, align 8, !dbg !2527
  %_35 = sub i64 %237, 1
  %gen36 = mul i64 %_35, 1
  %_37 = shl i64 %237, 1
  %_38 = shl i64 %237, 1
  %238 = add i64 %237, 1, !dbg !2527
  store i64 %238, i64* %19, align 8, !dbg !2527
  br label %originalBB34

originalBB42alteredBB:                            ; preds = %originalBB42, %188
  %239 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !2531
  %240 = load i8*, i8** %15, align 8, !dbg !2532
  %241 = load i8*, i8** %16, align 8, !dbg !2533
  %242 = load i8*, i8** %17, align 8, !dbg !2534
  %243 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !2535
  %244 = load i64, i64* %19, align 8, !dbg !2536
  call void @version_etc_arn(%struct._IO_FILE* %239, i8* %240, i8* %241, i8* %242, i8** %243, i64 %244), !dbg !2537
  br label %originalBB42
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc(%struct._IO_FILE*, i8*, i8*, i8*, ...) #5 !dbg !2591 {
  %5 = load i32, i32* @x.29
  %6 = load i32, i32* @y.30
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !2594, metadata !DIExpression()), !dbg !2595
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2596, metadata !DIExpression()), !dbg !2597
  store i8* %2, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2598, metadata !DIExpression()), !dbg !2599
  store i8* %3, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !2600, metadata !DIExpression()), !dbg !2601
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %17, metadata !2602, metadata !DIExpression()), !dbg !2609
  %18 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !2610
  %19 = bitcast %struct.__va_list_tag* %18 to i8*, !dbg !2610
  call void @llvm.va_start(i8* %19), !dbg !2610
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !2611
  %21 = load i8*, i8** %14, align 8, !dbg !2612
  %22 = load i8*, i8** %15, align 8, !dbg !2613
  %23 = load i8*, i8** %16, align 8, !dbg !2614
  %24 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !2615
  call void @version_etc_va(%struct._IO_FILE* %20, i8* %21, i8* %22, i8* %23, %struct.__va_list_tag* %24), !dbg !2616
  %25 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !2617
  %26 = bitcast %struct.__va_list_tag* %25 to i8*, !dbg !2617
  call void @llvm.va_end(i8* %26), !dbg !2617
  %27 = load i32, i32* @x.29
  %28 = load i32, i32* @y.30
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !2618

originalBBalteredBB:                              ; preds = %originalBB, %4
  %35 = alloca %struct._IO_FILE*, align 8
  %36 = alloca i8*, align 8
  %37 = alloca i8*, align 8
  %38 = alloca i8*, align 8
  %39 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %35, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %35, metadata !2619, metadata !DIExpression()), !dbg !2595
  store i8* %1, i8** %36, align 8
  call void @llvm.dbg.declare(metadata i8** %36, metadata !2658, metadata !DIExpression()), !dbg !2597
  store i8* %2, i8** %37, align 8
  call void @llvm.dbg.declare(metadata i8** %37, metadata !2659, metadata !DIExpression()), !dbg !2599
  store i8* %3, i8** %38, align 8
  call void @llvm.dbg.declare(metadata i8** %38, metadata !2660, metadata !DIExpression()), !dbg !2601
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %39, metadata !2661, metadata !DIExpression()), !dbg !2609
  %40 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !2610
  %41 = bitcast %struct.__va_list_tag* %40 to i8*, !dbg !2610
  call void @llvm.va_start(i8* %41), !dbg !2610
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %35, align 8, !dbg !2611
  %43 = load i8*, i8** %36, align 8, !dbg !2612
  %44 = load i8*, i8** %37, align 8, !dbg !2613
  %45 = load i8*, i8** %38, align 8, !dbg !2614
  %46 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !2615
  call void @version_etc_va(%struct._IO_FILE* %42, i8* %43, i8* %44, i8* %45, %struct.__va_list_tag* %46), !dbg !2616
  %47 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !2617
  %48 = bitcast %struct.__va_list_tag* %47 to i8*, !dbg !2617
  call void @llvm.va_end(i8* %48), !dbg !2617
  br label %originalBB
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xmalloc(i64) #5 !dbg !2672 {
  %2 = load i32, i32* @x.31
  %3 = load i32, i32* @y.32
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !2676, metadata !DIExpression()), !dbg !2677
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2678, metadata !DIExpression()), !dbg !2679
  %12 = load i64, i64* %10, align 8, !dbg !2680
  %13 = call noalias i8* @malloc(i64 %12) #10, !dbg !2681
  store i8* %13, i8** %11, align 8, !dbg !2679
  %14 = load i8*, i8** %11, align 8, !dbg !2682
  %15 = icmp ne i8* %14, null, !dbg !2682
  %16 = load i32, i32* @x.31
  %17 = load i32, i32* @y.32
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %60, label %24, !dbg !2684

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.31
  %26 = load i32, i32* @y.32
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i64, i64* %10, align 8, !dbg !2685
  %34 = icmp ne i64 %33, 0, !dbg !2686
  %35 = load i32, i32* @x.31
  %36 = load i32, i32* @y.32
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %60, !dbg !2687

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x.31
  %45 = load i32, i32* @y.32
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  call void @xalloc_die() #14, !dbg !2688
  %52 = load i32, i32* @x.31
  %53 = load i32, i32* @y.32
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !2688

60:                                               ; preds = %originalBBpart24, %originalBBpart2
  %61 = load i32, i32* @x.31
  %62 = load i32, i32* @y.32
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  %69 = load i8*, i8** %11, align 8, !dbg !2689
  %70 = load i32, i32* @x.31
  %71 = load i32, i32* @y.32
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %69, !dbg !2690

originalBBalteredBB:                              ; preds = %originalBB, %1
  %78 = alloca i64, align 8
  %79 = alloca i8*, align 8
  store i64 %0, i64* %78, align 8
  call void @llvm.dbg.declare(metadata i64* %78, metadata !2691, metadata !DIExpression()), !dbg !2677
  call void @llvm.dbg.declare(metadata i8** %79, metadata !2694, metadata !DIExpression()), !dbg !2679
  %80 = load i64, i64* %78, align 8, !dbg !2680
  %81 = call noalias i8* @malloc(i64 %80) #10, !dbg !2681
  store i8* %81, i8** %79, align 8, !dbg !2679
  %82 = load i8*, i8** %79, align 8, !dbg !2682
  %83 = icmp ne i8* %82, null, !dbg !2682
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %84 = load i64, i64* %10, align 8, !dbg !2685
  %85 = icmp ne i64 %84, 0, !dbg !2686
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  call void @xalloc_die() #14, !dbg !2688
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  %86 = load i8*, i8** %11, align 8, !dbg !2689
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xrealloc(i8*, i64) #5 !dbg !2695 {
  %3 = load i32, i32* @x.33
  %4 = load i32, i32* @y.34
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2698, metadata !DIExpression()), !dbg !2699
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !2700, metadata !DIExpression()), !dbg !2701
  %14 = load i64, i64* %13, align 8, !dbg !2702
  %15 = icmp ne i64 %14, 0, !dbg !2702
  %16 = load i32, i32* @x.33
  %17 = load i32, i32* @y.34
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %61, label %24, !dbg !2704

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.33
  %26 = load i32, i32* @y.34
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i8*, i8** %12, align 8, !dbg !2705
  %34 = icmp ne i8* %33, null, !dbg !2705
  %35 = load i32, i32* @x.33
  %36 = load i32, i32* @y.34
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %61, !dbg !2706

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x.33
  %45 = load i32, i32* @y.34
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  %52 = load i8*, i8** %12, align 8, !dbg !2707
  call void @free(i8* %52) #10, !dbg !2709
  store i8* null, i8** %11, align 8, !dbg !2710
  %53 = load i32, i32* @x.33
  %54 = load i32, i32* @y.34
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %137, !dbg !2710

61:                                               ; preds = %originalBBpart24, %originalBBpart2
  %62 = load i32, i32* @x.33
  %63 = load i32, i32* @y.34
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load i8*, i8** %12, align 8, !dbg !2711
  %71 = load i64, i64* %13, align 8, !dbg !2712
  %72 = call i8* @realloc(i8* %70, i64 %71) #10, !dbg !2713
  store i8* %72, i8** %12, align 8, !dbg !2714
  %73 = load i8*, i8** %12, align 8, !dbg !2715
  %74 = icmp ne i8* %73, null, !dbg !2715
  %75 = load i32, i32* @x.33
  %76 = load i32, i32* @y.34
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %74, label %119, label %83, !dbg !2717

83:                                               ; preds = %originalBBpart212
  %84 = load i32, i32* @x.33
  %85 = load i32, i32* @y.34
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %83, %originalBB14alteredBB
  %92 = load i64, i64* %13, align 8, !dbg !2718
  %93 = icmp ne i64 %92, 0, !dbg !2718
  %94 = load i32, i32* @x.33
  %95 = load i32, i32* @y.34
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %93, label %102, label %119, !dbg !2719

102:                                              ; preds = %originalBBpart216
  %103 = load i32, i32* @x.33
  %104 = load i32, i32* @y.34
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %102, %originalBB18alteredBB
  call void @xalloc_die() #14, !dbg !2720
  %111 = load i32, i32* @x.33
  %112 = load i32, i32* @y.34
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  unreachable, !dbg !2720

119:                                              ; preds = %originalBBpart216, %originalBBpart212
  %120 = load i32, i32* @x.33
  %121 = load i32, i32* @y.34
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %119, %originalBB22alteredBB
  %128 = load i8*, i8** %12, align 8, !dbg !2721
  store i8* %128, i8** %11, align 8, !dbg !2722
  %129 = load i32, i32* @x.33
  %130 = load i32, i32* @y.34
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %137, !dbg !2722

137:                                              ; preds = %originalBBpart224, %originalBBpart28
  %138 = load i32, i32* @x.33
  %139 = load i32, i32* @y.34
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %137, %originalBB26alteredBB
  %146 = load i8*, i8** %11, align 8, !dbg !2723
  %147 = load i32, i32* @x.33
  %148 = load i32, i32* @y.34
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i8* %146, !dbg !2723

originalBBalteredBB:                              ; preds = %originalBB, %2
  %155 = alloca i8*, align 8
  %156 = alloca i8*, align 8
  %157 = alloca i64, align 8
  store i8* %0, i8** %156, align 8
  call void @llvm.dbg.declare(metadata i8** %156, metadata !2724, metadata !DIExpression()), !dbg !2699
  store i64 %1, i64* %157, align 8
  call void @llvm.dbg.declare(metadata i64* %157, metadata !2727, metadata !DIExpression()), !dbg !2701
  %158 = load i64, i64* %157, align 8, !dbg !2702
  %159 = icmp ne i64 %158, 0, !dbg !2702
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %160 = load i8*, i8** %12, align 8, !dbg !2705
  %161 = icmp ne i8* %160, null, !dbg !2705
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  %162 = load i8*, i8** %12, align 8, !dbg !2707
  call void @free(i8* %162) #10, !dbg !2709
  store i8* null, i8** %11, align 8, !dbg !2710
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %163 = load i8*, i8** %12, align 8, !dbg !2711
  %164 = load i64, i64* %13, align 8, !dbg !2712
  %165 = call i8* @realloc(i8* %163, i64 %164) #10, !dbg !2713
  store i8* %165, i8** %12, align 8, !dbg !2714
  %166 = load i8*, i8** %12, align 8, !dbg !2715
  %167 = icmp ne i8* %166, null, !dbg !2715
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %83
  %168 = load i64, i64* %13, align 8, !dbg !2718
  %169 = icmp ne i64 %168, 0, !dbg !2718
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %102
  call void @xalloc_die() #14, !dbg !2720
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %119
  %170 = load i8*, i8** %12, align 8, !dbg !2721
  store i8* %170, i8** %11, align 8, !dbg !2722
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %137
  %171 = load i8*, i8** %11, align 8, !dbg !2723
  br label %originalBB26
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xcharalloc(i64) #5 !dbg !2728 {
  %2 = load i32, i32* @x.35
  %3 = load i32, i32* @y.36
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !2732, metadata !DIExpression()), !dbg !2733
  %11 = load i64, i64* %10, align 8, !dbg !2734
  %12 = call noalias i8* @xmalloc(i64 %11), !dbg !2734
  %13 = load i32, i32* @x.35
  %14 = load i32, i32* @y.36
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !2735

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i64, align 8
  store i64 %0, i64* %21, align 8
  call void @llvm.dbg.declare(metadata i64* %21, metadata !2736, metadata !DIExpression()), !dbg !2733
  %22 = load i64, i64* %21, align 8, !dbg !2734
  %23 = call noalias i8* @xmalloc(i64 %22), !dbg !2734
  br label %originalBB
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @xalloc_die() #0 !dbg !2739 {
  %1 = load i32, i32* @x.37
  %2 = load i32, i32* @y.38
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = load volatile i32, i32* @exit_failure, align 4, !dbg !2741
  %10 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.89, i64 0, i64 0)) #10, !dbg !2742
  call void (i32, i32, i8*, ...) @error(i32 %9, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.90, i64 0, i64 0), i8* %10), !dbg !2743
  call void @abort() #12, !dbg !2744
  %11 = load i32, i32* @x.37
  %12 = load i32, i32* @y.38
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !2744

originalBBalteredBB:                              ; preds = %originalBB, %0
  %19 = load volatile i32, i32* @exit_failure, align 4, !dbg !2741
  %20 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.89, i64 0, i64 0)) #10, !dbg !2742
  call void (i32, i32, i8*, ...) @error(i32 %19, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.90, i64 0, i64 0), i8* %20), !dbg !2743
  call void @abort() #12, !dbg !2744
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @rpl_mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #5 !dbg !2745 {
  %5 = load i32, i32* @x.39
  %6 = load i32, i32* @y.40
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i64, align 8
  %14 = alloca i32*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i64, align 8
  %17 = alloca %struct.__mbstate_t*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i32, align 4
  %20 = alloca i8, align 1
  store i32* %0, i32** %14, align 8
  call void @llvm.dbg.declare(metadata i32** %14, metadata !2761, metadata !DIExpression()), !dbg !2762
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2763, metadata !DIExpression()), !dbg !2764
  store i64 %2, i64* %16, align 8
  call void @llvm.dbg.declare(metadata i64* %16, metadata !2765, metadata !DIExpression()), !dbg !2766
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %17, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %17, metadata !2767, metadata !DIExpression()), !dbg !2768
  call void @llvm.dbg.declare(metadata i64* %18, metadata !2769, metadata !DIExpression()), !dbg !2770
  call void @llvm.dbg.declare(metadata i32* %19, metadata !2771, metadata !DIExpression()), !dbg !2772
  %21 = load i32*, i32** %14, align 8, !dbg !2773
  %22 = icmp ne i32* %21, null, !dbg !2773
  %23 = load i32, i32* @x.39
  %24 = load i32, i32* @y.40
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %48, label %31, !dbg !2775

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.39
  %33 = load i32, i32* @y.40
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32* %19, i32** %14, align 8, !dbg !2776
  %40 = load i32, i32* @x.39
  %41 = load i32, i32* @y.40
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %48, !dbg !2777

48:                                               ; preds = %originalBBpart24, %originalBBpart2
  %49 = load i32, i32* @x.39
  %50 = load i32, i32* @y.40
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32*, i32** %14, align 8, !dbg !2778
  %58 = load i8*, i8** %15, align 8, !dbg !2779
  %59 = load i64, i64* %16, align 8, !dbg !2780
  %60 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !2781
  %61 = call i64 @mbrtowc(i32* %57, i8* %58, i64 %59, %struct.__mbstate_t* %60) #10, !dbg !2782
  store i64 %61, i64* %18, align 8, !dbg !2783
  %62 = load i64, i64* %18, align 8, !dbg !2784
  %63 = icmp ule i64 -2, %62, !dbg !2786
  %64 = load i32, i32* @x.39
  %65 = load i32, i32* @y.40
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %63, label %72, label %131, !dbg !2787

72:                                               ; preds = %originalBBpart28
  %73 = load i32, i32* @x.39
  %74 = load i32, i32* @y.40
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %72, %originalBB10alteredBB
  %81 = load i64, i64* %16, align 8, !dbg !2788
  %82 = icmp ne i64 %81, 0, !dbg !2789
  %83 = load i32, i32* @x.39
  %84 = load i32, i32* @y.40
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %82, label %91, label %131, !dbg !2790

91:                                               ; preds = %originalBBpart212
  %92 = load i32, i32* @x.39
  %93 = load i32, i32* @y.40
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %91, %originalBB14alteredBB
  %100 = call zeroext i1 @hard_locale(i32 0), !dbg !2791
  %101 = load i32, i32* @x.39
  %102 = load i32, i32* @y.40
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %100, label %131, label %109, !dbg !2792

109:                                              ; preds = %originalBBpart216
  call void @llvm.dbg.declare(metadata i8* %20, metadata !2793, metadata !DIExpression()), !dbg !2795
  %110 = load i32, i32* @x.39
  %111 = load i32, i32* @y.40
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %109, %originalBB18alteredBB
  %118 = load i8*, i8** %15, align 8, !dbg !2796
  %119 = load i8, i8* %118, align 1, !dbg !2797
  store i8 %119, i8* %20, align 1, !dbg !2795
  %120 = load i8, i8* %20, align 1, !dbg !2798
  %121 = zext i8 %120 to i32, !dbg !2798
  %122 = load i32*, i32** %14, align 8, !dbg !2799
  store i32 %121, i32* %122, align 4, !dbg !2800
  store i64 1, i64* %13, align 8, !dbg !2801
  %123 = load i32, i32* @x.39
  %124 = load i32, i32* @y.40
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %149, !dbg !2801

131:                                              ; preds = %originalBBpart216, %originalBBpart212, %originalBBpart28
  %132 = load i32, i32* @x.39
  %133 = load i32, i32* @y.40
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %131, %originalBB22alteredBB
  %140 = load i64, i64* %18, align 8, !dbg !2802
  store i64 %140, i64* %13, align 8, !dbg !2803
  %141 = load i32, i32* @x.39
  %142 = load i32, i32* @y.40
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %149, !dbg !2803

149:                                              ; preds = %originalBBpart224, %originalBBpart220
  %150 = load i32, i32* @x.39
  %151 = load i32, i32* @y.40
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %149, %originalBB26alteredBB
  %158 = load i64, i64* %13, align 8, !dbg !2804
  %159 = load i32, i32* @x.39
  %160 = load i32, i32* @y.40
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i64 %158, !dbg !2804

originalBBalteredBB:                              ; preds = %originalBB, %4
  %167 = alloca i64, align 8
  %168 = alloca i32*, align 8
  %169 = alloca i8*, align 8
  %170 = alloca i64, align 8
  %171 = alloca %struct.__mbstate_t*, align 8
  %172 = alloca i64, align 8
  %173 = alloca i32, align 4
  %174 = alloca i8, align 1
  store i32* %0, i32** %168, align 8
  call void @llvm.dbg.declare(metadata i32** %168, metadata !2805, metadata !DIExpression()), !dbg !2762
  store i8* %1, i8** %169, align 8
  call void @llvm.dbg.declare(metadata i8** %169, metadata !2821, metadata !DIExpression()), !dbg !2764
  store i64 %2, i64* %170, align 8
  call void @llvm.dbg.declare(metadata i64* %170, metadata !2822, metadata !DIExpression()), !dbg !2766
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %171, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %171, metadata !2823, metadata !DIExpression()), !dbg !2768
  call void @llvm.dbg.declare(metadata i64* %172, metadata !2824, metadata !DIExpression()), !dbg !2770
  call void @llvm.dbg.declare(metadata i32* %173, metadata !2825, metadata !DIExpression()), !dbg !2772
  %175 = load i32*, i32** %168, align 8, !dbg !2773
  %176 = icmp ne i32* %175, null, !dbg !2773
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32* %19, i32** %14, align 8, !dbg !2776
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %177 = load i32*, i32** %14, align 8, !dbg !2778
  %178 = load i8*, i8** %15, align 8, !dbg !2779
  %179 = load i64, i64* %16, align 8, !dbg !2780
  %180 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !2781
  %181 = call i64 @mbrtowc(i32* %177, i8* %178, i64 %179, %struct.__mbstate_t* %180) #10, !dbg !2782
  store i64 %181, i64* %18, align 8, !dbg !2783
  %182 = load i64, i64* %18, align 8, !dbg !2784
  %183 = icmp ule i64 -2, %182, !dbg !2786
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %72
  %184 = load i64, i64* %16, align 8, !dbg !2788
  %185 = icmp ne i64 %184, 0, !dbg !2789
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %91
  %186 = call zeroext i1 @hard_locale(i32 0), !dbg !2791
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %109
  %187 = load i8*, i8** %15, align 8, !dbg !2796
  %188 = load i8, i8* %187, align 1, !dbg !2797
  store i8 %188, i8* %20, align 1, !dbg !2795
  %189 = load i8, i8* %20, align 1, !dbg !2798
  %190 = zext i8 %189 to i32, !dbg !2798
  %191 = load i32*, i32** %14, align 8, !dbg !2799
  store i32 %190, i32* %191, align 4, !dbg !2800
  store i64 1, i64* %13, align 8, !dbg !2801
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %131
  %192 = load i64, i64* %18, align 8, !dbg !2802
  store i64 %192, i64* %13, align 8, !dbg !2803
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %149
  %193 = load i64, i64* %13, align 8, !dbg !2804
  br label %originalBB26
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #3

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @c_strcasecmp(i8*, i8*) #11 !dbg !2826 {
  %3 = load i32, i32* @x.41
  %4 = load i32, i32* @y.42
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2830, metadata !DIExpression()), !dbg !2831
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !2832, metadata !DIExpression()), !dbg !2833
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2834, metadata !DIExpression()), !dbg !2835
  %18 = load i8*, i8** %12, align 8, !dbg !2836
  store i8* %18, i8** %14, align 8, !dbg !2835
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2837, metadata !DIExpression()), !dbg !2838
  %19 = load i8*, i8** %13, align 8, !dbg !2839
  store i8* %19, i8** %15, align 8, !dbg !2838
  call void @llvm.dbg.declare(metadata i8* %16, metadata !2840, metadata !DIExpression()), !dbg !2841
  call void @llvm.dbg.declare(metadata i8* %17, metadata !2842, metadata !DIExpression()), !dbg !2843
  %20 = load i8*, i8** %14, align 8, !dbg !2844
  %21 = load i8*, i8** %15, align 8, !dbg !2846
  %22 = icmp eq i8* %20, %21, !dbg !2847
  %23 = load i32, i32* @x.41
  %24 = load i32, i32* @y.42
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %48, !dbg !2848

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.41
  %33 = load i32, i32* @y.42
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32 0, i32* %11, align 4, !dbg !2849
  %40 = load i32, i32* @x.41
  %41 = load i32, i32* @y.42
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %177, !dbg !2849

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.41
  %50 = load i32, i32* @y.42
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.41
  %58 = load i32, i32* @y.42
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !2850

65:                                               ; preds = %originalBBpart224, %originalBBpart28
  %66 = load i32, i32* @x.41
  %67 = load i32, i32* @y.42
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %74 = load i8*, i8** %14, align 8, !dbg !2851
  %75 = load i8, i8* %74, align 1, !dbg !2853
  %76 = zext i8 %75 to i32, !dbg !2853
  %77 = call i32 @c_tolower(i32 %76), !dbg !2854
  %78 = trunc i32 %77 to i8, !dbg !2854
  store i8 %78, i8* %16, align 1, !dbg !2855
  %79 = load i8*, i8** %15, align 8, !dbg !2856
  %80 = load i8, i8* %79, align 1, !dbg !2857
  %81 = zext i8 %80 to i32, !dbg !2857
  %82 = call i32 @c_tolower(i32 %81), !dbg !2858
  %83 = trunc i32 %82 to i8, !dbg !2858
  store i8 %83, i8* %17, align 1, !dbg !2859
  %84 = load i8, i8* %16, align 1, !dbg !2860
  %85 = zext i8 %84 to i32, !dbg !2860
  %86 = icmp eq i32 %85, 0, !dbg !2862
  %87 = load i32, i32* @x.41
  %88 = load i32, i32* @y.42
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %86, label %95, label %112, !dbg !2863

95:                                               ; preds = %originalBBpart212
  %96 = load i32, i32* @x.41
  %97 = load i32, i32* @y.42
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %95, %originalBB14alteredBB
  %104 = load i32, i32* @x.41
  %105 = load i32, i32* @y.42
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %155, !dbg !2864

112:                                              ; preds = %originalBBpart212
  %113 = load i32, i32* @x.41
  %114 = load i32, i32* @y.42
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %112, %originalBB18alteredBB
  %121 = load i8*, i8** %14, align 8, !dbg !2865
  %122 = getelementptr inbounds i8, i8* %121, i32 1, !dbg !2865
  store i8* %122, i8** %14, align 8, !dbg !2865
  %123 = load i8*, i8** %15, align 8, !dbg !2866
  %124 = getelementptr inbounds i8, i8* %123, i32 1, !dbg !2866
  store i8* %124, i8** %15, align 8, !dbg !2866
  %125 = load i32, i32* @x.41
  %126 = load i32, i32* @y.42
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %133, !dbg !2867

133:                                              ; preds = %originalBBpart220
  %134 = load i32, i32* @x.41
  %135 = load i32, i32* @y.42
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %133, %originalBB22alteredBB
  %142 = load i8, i8* %16, align 1, !dbg !2868
  %143 = zext i8 %142 to i32, !dbg !2868
  %144 = load i8, i8* %17, align 1, !dbg !2869
  %145 = zext i8 %144 to i32, !dbg !2869
  %146 = icmp eq i32 %143, %145, !dbg !2870
  %147 = load i32, i32* @x.41
  %148 = load i32, i32* @y.42
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %146, label %65, label %155, !dbg !2867, !llvm.loop !2871

155:                                              ; preds = %originalBBpart224, %originalBBpart216
  %156 = load i32, i32* @x.41
  %157 = load i32, i32* @y.42
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %155, %originalBB26alteredBB
  %164 = load i8, i8* %16, align 1, !dbg !2873
  %165 = zext i8 %164 to i32, !dbg !2873
  %166 = load i8, i8* %17, align 1, !dbg !2875
  %167 = zext i8 %166 to i32, !dbg !2875
  %168 = sub nsw i32 %165, %167, !dbg !2876
  store i32 %168, i32* %11, align 4, !dbg !2877
  %169 = load i32, i32* @x.41
  %170 = load i32, i32* @y.42
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart234, label %originalBB26alteredBB

originalBBpart234:                                ; preds = %originalBB26
  br label %177, !dbg !2877

177:                                              ; preds = %originalBBpart234, %originalBBpart24
  %178 = load i32, i32* @x.41
  %179 = load i32, i32* @y.42
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBB36, label %originalBB36alteredBB

originalBB36:                                     ; preds = %177, %originalBB36alteredBB
  %186 = load i32, i32* %11, align 4, !dbg !2878
  %187 = load i32, i32* @x.41
  %188 = load i32, i32* @y.42
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBBpart238, label %originalBB36alteredBB

originalBBpart238:                                ; preds = %originalBB36
  ret i32 %186, !dbg !2878

originalBBalteredBB:                              ; preds = %originalBB, %2
  %195 = alloca i32, align 4
  %196 = alloca i8*, align 8
  %197 = alloca i8*, align 8
  %198 = alloca i8*, align 8
  %199 = alloca i8*, align 8
  %200 = alloca i8, align 1
  %201 = alloca i8, align 1
  store i8* %0, i8** %196, align 8
  call void @llvm.dbg.declare(metadata i8** %196, metadata !2879, metadata !DIExpression()), !dbg !2831
  store i8* %1, i8** %197, align 8
  call void @llvm.dbg.declare(metadata i8** %197, metadata !2882, metadata !DIExpression()), !dbg !2833
  call void @llvm.dbg.declare(metadata i8** %198, metadata !2883, metadata !DIExpression()), !dbg !2835
  %202 = load i8*, i8** %196, align 8, !dbg !2836
  store i8* %202, i8** %198, align 8, !dbg !2835
  call void @llvm.dbg.declare(metadata i8** %199, metadata !2884, metadata !DIExpression()), !dbg !2838
  %203 = load i8*, i8** %197, align 8, !dbg !2839
  store i8* %203, i8** %199, align 8, !dbg !2838
  call void @llvm.dbg.declare(metadata i8* %200, metadata !2885, metadata !DIExpression()), !dbg !2841
  call void @llvm.dbg.declare(metadata i8* %201, metadata !2886, metadata !DIExpression()), !dbg !2843
  %204 = load i8*, i8** %198, align 8, !dbg !2844
  %205 = load i8*, i8** %199, align 8, !dbg !2846
  %206 = icmp eq i8* %204, %205, !dbg !2847
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32 0, i32* %11, align 4, !dbg !2849
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %207 = load i8*, i8** %14, align 8, !dbg !2851
  %208 = load i8, i8* %207, align 1, !dbg !2853
  %209 = zext i8 %208 to i32, !dbg !2853
  %210 = call i32 @c_tolower(i32 %209), !dbg !2854
  %211 = trunc i32 %210 to i8, !dbg !2854
  store i8 %211, i8* %16, align 1, !dbg !2855
  %212 = load i8*, i8** %15, align 8, !dbg !2856
  %213 = load i8, i8* %212, align 1, !dbg !2857
  %214 = zext i8 %213 to i32, !dbg !2857
  %215 = call i32 @c_tolower(i32 %214), !dbg !2858
  %216 = trunc i32 %215 to i8, !dbg !2858
  store i8 %216, i8* %17, align 1, !dbg !2859
  %217 = load i8, i8* %16, align 1, !dbg !2860
  %218 = zext i8 %217 to i32, !dbg !2860
  %219 = icmp eq i32 %218, 0, !dbg !2862
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %95
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %112
  %220 = load i8*, i8** %14, align 8, !dbg !2865
  %221 = getelementptr inbounds i8, i8* %220, i32 1, !dbg !2865
  store i8* %221, i8** %14, align 8, !dbg !2865
  %222 = load i8*, i8** %15, align 8, !dbg !2866
  %223 = getelementptr inbounds i8, i8* %222, i32 1, !dbg !2866
  store i8* %223, i8** %15, align 8, !dbg !2866
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %133
  %224 = load i8, i8* %16, align 1, !dbg !2868
  %225 = zext i8 %224 to i32, !dbg !2868
  %226 = load i8, i8* %17, align 1, !dbg !2869
  %227 = zext i8 %226 to i32, !dbg !2869
  %228 = icmp eq i32 %225, %227, !dbg !2870
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %155
  %229 = load i8, i8* %16, align 1, !dbg !2873
  %230 = zext i8 %229 to i32, !dbg !2873
  %231 = load i8, i8* %17, align 1, !dbg !2875
  %232 = zext i8 %231 to i32, !dbg !2875
  %_ = shl i32 %230, %232
  %_27 = sub i32 %230, %232
  %gen = mul i32 %_27, %232
  %_28 = sub i32 0, %230
  %gen29 = add i32 %_28, %232
  %_30 = shl i32 %230, %232
  %_31 = sub i32 %230, %232
  %gen32 = mul i32 %_31, %232
  %233 = sub nsw i32 %230, %232, !dbg !2876
  store i32 %233, i32* %11, align 4, !dbg !2877
  br label %originalBB26

originalBB36alteredBB:                            ; preds = %originalBB36, %177
  %234 = load i32, i32* %11, align 4, !dbg !2878
  br label %originalBB36
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @close_stream(%struct._IO_FILE*) #5 !dbg !2887 {
  %2 = load i32, i32* @x.43
  %3 = load i32, i32* @y.44
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !2925, metadata !DIExpression()), !dbg !2926
  call void @llvm.dbg.declare(metadata i8* %12, metadata !2927, metadata !DIExpression()), !dbg !2929
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !2930
  %16 = call i64 @__fpending(%struct._IO_FILE* %15) #10, !dbg !2931
  %17 = icmp ne i64 %16, 0, !dbg !2932
  %18 = zext i1 %17 to i8, !dbg !2929
  store i8 %18, i8* %12, align 1, !dbg !2929
  call void @llvm.dbg.declare(metadata i8* %13, metadata !2933, metadata !DIExpression()), !dbg !2934
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !2935
  %20 = call i32 @ferror_unlocked(%struct._IO_FILE* %19) #10, !dbg !2935
  %21 = icmp ne i32 %20, 0, !dbg !2936
  %22 = zext i1 %21 to i8, !dbg !2934
  store i8 %22, i8* %13, align 1, !dbg !2934
  call void @llvm.dbg.declare(metadata i8* %14, metadata !2937, metadata !DIExpression()), !dbg !2938
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !2939
  %24 = call i32 @rpl_fclose(%struct._IO_FILE* %23), !dbg !2940
  %25 = icmp ne i32 %24, 0, !dbg !2941
  %26 = zext i1 %25 to i8, !dbg !2938
  store i8 %26, i8* %14, align 1, !dbg !2938
  %27 = load i8, i8* %13, align 1, !dbg !2942
  %28 = trunc i8 %27 to i1, !dbg !2942
  %29 = load i32, i32* @x.43
  %30 = load i32, i32* @y.44
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %28, label %95, label %37, !dbg !2944

37:                                               ; preds = %originalBBpart2
  %38 = load i32, i32* @x.43
  %39 = load i32, i32* @y.44
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %46 = load i8, i8* %14, align 1, !dbg !2945
  %47 = trunc i8 %46 to i1, !dbg !2945
  %48 = load i32, i32* @x.43
  %49 = load i32, i32* @y.44
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %149, !dbg !2946

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.43
  %58 = load i32, i32* @y.44
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load i8, i8* %12, align 1, !dbg !2947
  %66 = trunc i8 %65 to i1, !dbg !2947
  %67 = load i32, i32* @x.43
  %68 = load i32, i32* @y.44
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %95, label %75, !dbg !2948

75:                                               ; preds = %originalBBpart28
  %76 = load i32, i32* @x.43
  %77 = load i32, i32* @y.44
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = call i32* @__errno_location() #15, !dbg !2949
  %85 = load i32, i32* %84, align 4, !dbg !2949
  %86 = icmp ne i32 %85, 9, !dbg !2950
  %87 = load i32, i32* @x.43
  %88 = load i32, i32* @y.44
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %86, label %95, label %149, !dbg !2951

95:                                               ; preds = %originalBBpart212, %originalBBpart28, %originalBBpart2
  %96 = load i32, i32* @x.43
  %97 = load i32, i32* @y.44
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %95, %originalBB14alteredBB
  %104 = load i8, i8* %14, align 1, !dbg !2952
  %105 = trunc i8 %104 to i1, !dbg !2952
  %106 = load i32, i32* @x.43
  %107 = load i32, i32* @y.44
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %105, label %132, label %114, !dbg !2955

114:                                              ; preds = %originalBBpart216
  %115 = load i32, i32* @x.43
  %116 = load i32, i32* @y.44
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %114, %originalBB18alteredBB
  %123 = call i32* @__errno_location() #15, !dbg !2956
  store i32 0, i32* %123, align 4, !dbg !2957
  %124 = load i32, i32* @x.43
  %125 = load i32, i32* @y.44
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %132, !dbg !2956

132:                                              ; preds = %originalBBpart220, %originalBBpart216
  %133 = load i32, i32* @x.43
  %134 = load i32, i32* @y.44
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %132, %originalBB22alteredBB
  store i32 -1, i32* %10, align 4, !dbg !2958
  %141 = load i32, i32* @x.43
  %142 = load i32, i32* @y.44
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %166, !dbg !2958

149:                                              ; preds = %originalBBpart212, %originalBBpart24
  %150 = load i32, i32* @x.43
  %151 = load i32, i32* @y.44
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %149, %originalBB26alteredBB
  store i32 0, i32* %10, align 4, !dbg !2959
  %158 = load i32, i32* @x.43
  %159 = load i32, i32* @y.44
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %166, !dbg !2959

166:                                              ; preds = %originalBBpart228, %originalBBpart224
  %167 = load i32, i32* @x.43
  %168 = load i32, i32* @y.44
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %166, %originalBB30alteredBB
  %175 = load i32, i32* %10, align 4, !dbg !2960
  %176 = load i32, i32* @x.43
  %177 = load i32, i32* @y.44
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  ret i32 %175, !dbg !2960

originalBBalteredBB:                              ; preds = %originalBB, %1
  %184 = alloca i32, align 4
  %185 = alloca %struct._IO_FILE*, align 8
  %186 = alloca i8, align 1
  %187 = alloca i8, align 1
  %188 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %185, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %185, metadata !2961, metadata !DIExpression()), !dbg !2926
  call void @llvm.dbg.declare(metadata i8* %186, metadata !3000, metadata !DIExpression()), !dbg !2929
  %189 = load %struct._IO_FILE*, %struct._IO_FILE** %185, align 8, !dbg !2930
  %190 = call i64 @__fpending(%struct._IO_FILE* %189) #10, !dbg !2931
  %191 = icmp ne i64 %190, 0, !dbg !2932
  %192 = zext i1 %191 to i8, !dbg !2929
  store i8 %192, i8* %186, align 1, !dbg !2929
  call void @llvm.dbg.declare(metadata i8* %187, metadata !3001, metadata !DIExpression()), !dbg !2934
  %193 = load %struct._IO_FILE*, %struct._IO_FILE** %185, align 8, !dbg !2935
  %194 = call i32 @ferror_unlocked(%struct._IO_FILE* %193) #10, !dbg !2935
  %195 = icmp ne i32 %194, 0, !dbg !2936
  %196 = zext i1 %195 to i8, !dbg !2934
  store i8 %196, i8* %187, align 1, !dbg !2934
  call void @llvm.dbg.declare(metadata i8* %188, metadata !3002, metadata !DIExpression()), !dbg !2938
  %197 = load %struct._IO_FILE*, %struct._IO_FILE** %185, align 8, !dbg !2939
  %198 = call i32 @rpl_fclose(%struct._IO_FILE* %197), !dbg !2940
  %199 = icmp ne i32 %198, 0, !dbg !2941
  %200 = zext i1 %199 to i8, !dbg !2938
  store i8 %200, i8* %188, align 1, !dbg !2938
  %201 = load i8, i8* %187, align 1, !dbg !2942
  %202 = trunc i8 %201 to i1, !dbg !2942
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %203 = load i8, i8* %14, align 1, !dbg !2945
  %204 = trunc i8 %203 to i1, !dbg !2945
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %205 = load i8, i8* %12, align 1, !dbg !2947
  %206 = trunc i8 %205 to i1, !dbg !2947
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %207 = call i32* @__errno_location() #15, !dbg !2949
  %208 = load i32, i32* %207, align 4, !dbg !2949
  %209 = icmp ne i32 %208, 9, !dbg !2950
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %95
  %210 = load i8, i8* %14, align 1, !dbg !2952
  %211 = trunc i8 %210 to i1, !dbg !2952
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %114
  %212 = call i32* @__errno_location() #15, !dbg !2956
  store i32 0, i32* %212, align 4, !dbg !2957
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %132
  store i32 -1, i32* %10, align 4, !dbg !2958
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %149
  store i32 0, i32* %10, align 4, !dbg !2959
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %166
  %213 = load i32, i32* %10, align 4, !dbg !2960
  br label %originalBB30
}

; Function Attrs: nounwind
declare dso_local i64 @__fpending(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @hard_locale(i32) #5 !dbg !3003 {
  %2 = load i32, i32* @x.45
  %3 = load i32, i32* @y.46
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i1, align 1
  %11 = alloca i32, align 4
  %12 = alloca [257 x i8], align 16
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3007, metadata !DIExpression()), !dbg !3008
  call void @llvm.dbg.declare(metadata [257 x i8]* %12, metadata !3009, metadata !DIExpression()), !dbg !3013
  %13 = load i32, i32* %11, align 4, !dbg !3014
  %14 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3016
  %15 = call i32 @setlocale_null_r(i32 %13, i8* %14, i64 257), !dbg !3017
  %16 = icmp ne i32 %15, 0, !dbg !3017
  %17 = load i32, i32* @x.45
  %18 = load i32, i32* @y.46
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %42, !dbg !3018

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.45
  %27 = load i32, i32* @y.46
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  store i1 false, i1* %10, align 1, !dbg !3019
  %34 = load i32, i32* @x.45
  %35 = load i32, i32* @y.46
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %101, !dbg !3019

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.45
  %44 = load i32, i32* @y.46
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3020
  %52 = call i32 @strcmp(i8* %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.99, i64 0, i64 0)) #13, !dbg !3021
  %53 = icmp eq i32 %52, 0, !dbg !3022
  %54 = load i32, i32* @x.45
  %55 = load i32, i32* @y.46
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %53, label %82, label %62, !dbg !3023

62:                                               ; preds = %originalBBpart28
  %63 = load i32, i32* @x.45
  %64 = load i32, i32* @y.46
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %62, %originalBB10alteredBB
  %71 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3024
  %72 = call i32 @strcmp(i8* %71, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.100, i64 0, i64 0)) #13, !dbg !3025
  %73 = icmp eq i32 %72, 0, !dbg !3026
  %74 = load i32, i32* @x.45
  %75 = load i32, i32* @y.46
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %82, !dbg !3023

82:                                               ; preds = %originalBBpart212, %originalBBpart28
  %83 = phi i1 [ true, %originalBBpart28 ], [ %73, %originalBBpart212 ]
  %84 = load i32, i32* @x.45
  %85 = load i32, i32* @y.46
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %82, %originalBB14alteredBB
  %92 = xor i1 %83, true, !dbg !3027
  store i1 %92, i1* %10, align 1, !dbg !3028
  %93 = load i32, i32* @x.45
  %94 = load i32, i32* @y.46
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %101, !dbg !3028

101:                                              ; preds = %originalBBpart216, %originalBBpart24
  %102 = load i32, i32* @x.45
  %103 = load i32, i32* @y.46
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %101, %originalBB18alteredBB
  %110 = load i1, i1* %10, align 1, !dbg !3029
  %111 = load i32, i32* @x.45
  %112 = load i32, i32* @y.46
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  ret i1 %110, !dbg !3029

originalBBalteredBB:                              ; preds = %originalBB, %1
  %119 = alloca i1, align 1
  %120 = alloca i32, align 4
  %121 = alloca [257 x i8], align 16
  store i32 %0, i32* %120, align 4
  call void @llvm.dbg.declare(metadata i32* %120, metadata !3030, metadata !DIExpression()), !dbg !3008
  call void @llvm.dbg.declare(metadata [257 x i8]* %121, metadata !3033, metadata !DIExpression()), !dbg !3013
  %122 = load i32, i32* %120, align 4, !dbg !3014
  %123 = getelementptr inbounds [257 x i8], [257 x i8]* %121, i64 0, i64 0, !dbg !3016
  %124 = call i32 @setlocale_null_r(i32 %122, i8* %123, i64 257), !dbg !3017
  %125 = icmp ne i32 %124, 0, !dbg !3017
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  store i1 false, i1* %10, align 1, !dbg !3019
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %126 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3020
  %127 = call i32 @strcmp(i8* %126, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.99, i64 0, i64 0)) #13, !dbg !3021
  %128 = icmp eq i32 %127, 0, !dbg !3022
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %62
  %129 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3024
  %130 = call i32 @strcmp(i8* %129, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.100, i64 0, i64 0)) #13, !dbg !3025
  %131 = icmp eq i32 %130, 0, !dbg !3026
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %82
  %_ = sub i1 %83, true
  %gen = mul i1 %_, true
  %132 = xor i1 %83, true, !dbg !3027
  store i1 %132, i1* %10, align 1, !dbg !3028
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %101
  %133 = load i1, i1* %10, align 1, !dbg !3029
  br label %originalBB18
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @locale_charset() #5 !dbg !3034 {
  %1 = load i32, i32* @x.47
  %2 = load i32, i32* @y.48
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !3038, metadata !DIExpression()), !dbg !3039
  %10 = call i8* @nl_langinfo(i32 14) #10, !dbg !3040
  store i8* %10, i8** %9, align 8, !dbg !3041
  %11 = load i8*, i8** %9, align 8, !dbg !3042
  %12 = icmp eq i8* %11, null, !dbg !3044
  %13 = load i32, i32* @x.47
  %14 = load i32, i32* @y.48
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %38, !dbg !3045

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.47
  %23 = load i32, i32* @y.48
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.103, i64 0, i64 0), i8** %9, align 8, !dbg !3046
  %30 = load i32, i32* @x.47
  %31 = load i32, i32* @y.48
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %38, !dbg !3047

38:                                               ; preds = %originalBBpart24, %originalBBpart2
  %39 = load i32, i32* @x.47
  %40 = load i32, i32* @y.48
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %38, %originalBB6alteredBB
  %47 = load i8*, i8** %9, align 8, !dbg !3048
  %48 = getelementptr inbounds i8, i8* %47, i64 0, !dbg !3048
  %49 = load i8, i8* %48, align 1, !dbg !3048
  %50 = sext i8 %49 to i32, !dbg !3048
  %51 = icmp eq i32 %50, 0, !dbg !3052
  %52 = load i32, i32* @x.47
  %53 = load i32, i32* @y.48
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %51, label %60, label %77, !dbg !3053

60:                                               ; preds = %originalBBpart28
  %61 = load i32, i32* @x.47
  %62 = load i32, i32* @y.48
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.104, i64 0, i64 0), i8** %9, align 8, !dbg !3054
  %69 = load i32, i32* @x.47
  %70 = load i32, i32* @y.48
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %77, !dbg !3055

77:                                               ; preds = %originalBBpart212, %originalBBpart28
  %78 = load i32, i32* @x.47
  %79 = load i32, i32* @y.48
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %77, %originalBB14alteredBB
  %86 = load i8*, i8** %9, align 8, !dbg !3056
  %87 = load i32, i32* @x.47
  %88 = load i32, i32* @y.48
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i8* %86, !dbg !3057

originalBBalteredBB:                              ; preds = %originalBB, %0
  %95 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %95, metadata !3058, metadata !DIExpression()), !dbg !3039
  %96 = call i8* @nl_langinfo(i32 14) #10, !dbg !3040
  store i8* %96, i8** %95, align 8, !dbg !3041
  %97 = load i8*, i8** %95, align 8, !dbg !3042
  %98 = icmp eq i8* %97, null, !dbg !3044
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.103, i64 0, i64 0), i8** %9, align 8, !dbg !3046
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %38
  %99 = load i8*, i8** %9, align 8, !dbg !3048
  %100 = getelementptr inbounds i8, i8* %99, i64 0, !dbg !3048
  %101 = load i8, i8* %100, align 1, !dbg !3048
  %102 = sext i8 %101 to i32, !dbg !3048
  %103 = icmp eq i32 %102, 0, !dbg !3052
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.104, i64 0, i64 0), i8** %9, align 8, !dbg !3054
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %77
  %104 = load i8*, i8** %9, align 8, !dbg !3056
  br label %originalBB14
}

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_r(i32, i8* nonnull, i64) #5 !dbg !3061 {
  %4 = load i32, i32* @x.49
  %5 = load i32, i32* @y.50
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !3065, metadata !DIExpression()), !dbg !3066
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3067, metadata !DIExpression()), !dbg !3068
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !3069, metadata !DIExpression()), !dbg !3070
  %15 = load i32, i32* %12, align 4, !dbg !3071
  %16 = load i8*, i8** %13, align 8, !dbg !3072
  %17 = load i64, i64* %14, align 8, !dbg !3073
  %18 = call i32 @setlocale_null_unlocked(i32 %15, i8* %16, i64 %17), !dbg !3074
  %19 = load i32, i32* @x.49
  %20 = load i32, i32* @y.50
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i32 %18, !dbg !3075

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !3076, metadata !DIExpression()), !dbg !3066
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !3079, metadata !DIExpression()), !dbg !3068
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !3080, metadata !DIExpression()), !dbg !3070
  %30 = load i32, i32* %27, align 4, !dbg !3071
  %31 = load i8*, i8** %28, align 8, !dbg !3072
  %32 = load i64, i64* %29, align 8, !dbg !3073
  %33 = call i32 @setlocale_null_unlocked(i32 %30, i8* %31, i64 %32), !dbg !3074
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_unlocked(i32, i8*, i64) #5 !dbg !3081 {
  %4 = load i32, i32* @x.51
  %5 = load i32, i32* @y.52
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !3082, metadata !DIExpression()), !dbg !3083
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3084, metadata !DIExpression()), !dbg !3085
  store i64 %2, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !3086, metadata !DIExpression()), !dbg !3087
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3088, metadata !DIExpression()), !dbg !3089
  %18 = load i32, i32* %13, align 4, !dbg !3090
  %19 = call i8* @setlocale_null_androidfix(i32 %18), !dbg !3091
  store i8* %19, i8** %16, align 8, !dbg !3089
  %20 = load i8*, i8** %16, align 8, !dbg !3092
  %21 = icmp eq i8* %20, null, !dbg !3094
  %22 = load i32, i32* @x.51
  %23 = load i32, i32* @y.52
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %85, !dbg !3095

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.51
  %32 = load i32, i32* @y.52
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load i64, i64* %15, align 8, !dbg !3096
  %40 = icmp ugt i64 %39, 0, !dbg !3099
  %41 = load i32, i32* @x.51
  %42 = load i32, i32* @y.52
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %40, label %49, label %68, !dbg !3100

49:                                               ; preds = %originalBBpart24
  %50 = load i32, i32* @x.51
  %51 = load i32, i32* @y.52
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %49, %originalBB6alteredBB
  %58 = load i8*, i8** %14, align 8, !dbg !3101
  %59 = getelementptr inbounds i8, i8* %58, i64 0, !dbg !3101
  store i8 0, i8* %59, align 1, !dbg !3102
  %60 = load i32, i32* @x.51
  %61 = load i32, i32* @y.52
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %68, !dbg !3101

68:                                               ; preds = %originalBBpart28, %originalBBpart24
  %69 = load i32, i32* @x.51
  %70 = load i32, i32* @y.52
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %68, %originalBB10alteredBB
  store i32 22, i32* %12, align 4, !dbg !3103
  %77 = load i32, i32* @x.51
  %78 = load i32, i32* @y.52
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %189, !dbg !3103

85:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i64* %17, metadata !3104, metadata !DIExpression()), !dbg !3106
  %86 = load i32, i32* @x.51
  %87 = load i32, i32* @y.52
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %85, %originalBB14alteredBB
  %94 = load i8*, i8** %16, align 8, !dbg !3107
  %95 = call i64 @strlen(i8* %94) #13, !dbg !3108
  store i64 %95, i64* %17, align 8, !dbg !3106
  %96 = load i64, i64* %17, align 8, !dbg !3109
  %97 = load i64, i64* %15, align 8, !dbg !3111
  %98 = icmp ult i64 %96, %97, !dbg !3112
  %99 = load i32, i32* @x.51
  %100 = load i32, i32* @y.52
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %98, label %107, label %128, !dbg !3113

107:                                              ; preds = %originalBBpart216
  %108 = load i32, i32* @x.51
  %109 = load i32, i32* @y.52
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %107, %originalBB18alteredBB
  %116 = load i8*, i8** %14, align 8, !dbg !3114
  %117 = load i8*, i8** %16, align 8, !dbg !3116
  %118 = load i64, i64* %17, align 8, !dbg !3117
  %119 = add i64 %118, 1, !dbg !3118
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %116, i8* align 1 %117, i64 %119, i1 false), !dbg !3119
  store i32 0, i32* %12, align 4, !dbg !3120
  %120 = load i32, i32* @x.51
  %121 = load i32, i32* @y.52
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %189, !dbg !3120

128:                                              ; preds = %originalBBpart216
  %129 = load i32, i32* @x.51
  %130 = load i32, i32* @y.52
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %128, %originalBB22alteredBB
  %137 = load i64, i64* %15, align 8, !dbg !3121
  %138 = icmp ugt i64 %137, 0, !dbg !3124
  %139 = load i32, i32* @x.51
  %140 = load i32, i32* @y.52
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %138, label %147, label %172, !dbg !3125

147:                                              ; preds = %originalBBpart224
  %148 = load i32, i32* @x.51
  %149 = load i32, i32* @y.52
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %147, %originalBB26alteredBB
  %156 = load i8*, i8** %14, align 8, !dbg !3126
  %157 = load i8*, i8** %16, align 8, !dbg !3128
  %158 = load i64, i64* %15, align 8, !dbg !3129
  %159 = sub i64 %158, 1, !dbg !3130
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %156, i8* align 1 %157, i64 %159, i1 false), !dbg !3131
  %160 = load i8*, i8** %14, align 8, !dbg !3132
  %161 = load i64, i64* %15, align 8, !dbg !3133
  %162 = sub i64 %161, 1, !dbg !3134
  %163 = getelementptr inbounds i8, i8* %160, i64 %162, !dbg !3132
  store i8 0, i8* %163, align 1, !dbg !3135
  %164 = load i32, i32* @x.51
  %165 = load i32, i32* @y.52
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBBpart252, label %originalBB26alteredBB

originalBBpart252:                                ; preds = %originalBB26
  br label %172, !dbg !3136

172:                                              ; preds = %originalBBpart252, %originalBBpart224
  %173 = load i32, i32* @x.51
  %174 = load i32, i32* @y.52
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %172, %originalBB54alteredBB
  store i32 34, i32* %12, align 4, !dbg !3137
  %181 = load i32, i32* @x.51
  %182 = load i32, i32* @y.52
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br label %189, !dbg !3137

189:                                              ; preds = %originalBBpart256, %originalBBpart220, %originalBBpart212
  %190 = load i32, i32* @x.51
  %191 = load i32, i32* @y.52
  %192 = sub i32 %190, 1
  %193 = mul i32 %190, %192
  %194 = urem i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %195, %196
  br i1 %197, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %189, %originalBB58alteredBB
  %198 = load i32, i32* %12, align 4, !dbg !3138
  %199 = load i32, i32* @x.51
  %200 = load i32, i32* @y.52
  %201 = sub i32 %199, 1
  %202 = mul i32 %199, %201
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %204, %205
  br i1 %206, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  ret i32 %198, !dbg !3138

originalBBalteredBB:                              ; preds = %originalBB, %3
  %207 = alloca i32, align 4
  %208 = alloca i32, align 4
  %209 = alloca i8*, align 8
  %210 = alloca i64, align 8
  %211 = alloca i8*, align 8
  %212 = alloca i64, align 8
  store i32 %0, i32* %208, align 4
  call void @llvm.dbg.declare(metadata i32* %208, metadata !3139, metadata !DIExpression()), !dbg !3083
  store i8* %1, i8** %209, align 8
  call void @llvm.dbg.declare(metadata i8** %209, metadata !3142, metadata !DIExpression()), !dbg !3085
  store i64 %2, i64* %210, align 8
  call void @llvm.dbg.declare(metadata i64* %210, metadata !3143, metadata !DIExpression()), !dbg !3087
  call void @llvm.dbg.declare(metadata i8** %211, metadata !3144, metadata !DIExpression()), !dbg !3089
  %213 = load i32, i32* %208, align 4, !dbg !3090
  %214 = call i8* @setlocale_null_androidfix(i32 %213), !dbg !3091
  store i8* %214, i8** %211, align 8, !dbg !3089
  %215 = load i8*, i8** %211, align 8, !dbg !3092
  %216 = icmp eq i8* %215, null, !dbg !3094
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %217 = load i64, i64* %15, align 8, !dbg !3096
  %218 = icmp ugt i64 %217, 0, !dbg !3099
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %49
  %219 = load i8*, i8** %14, align 8, !dbg !3101
  %220 = getelementptr inbounds i8, i8* %219, i64 0, !dbg !3101
  store i8 0, i8* %220, align 1, !dbg !3102
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %68
  store i32 22, i32* %12, align 4, !dbg !3103
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %85
  %221 = load i8*, i8** %16, align 8, !dbg !3107
  %222 = call i64 @strlen(i8* %221) #13, !dbg !3108
  store i64 %222, i64* %17, align 8, !dbg !3106
  %223 = load i64, i64* %17, align 8, !dbg !3109
  %224 = load i64, i64* %15, align 8, !dbg !3111
  %225 = icmp ult i64 %223, %224, !dbg !3112
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %107
  %226 = load i8*, i8** %14, align 8, !dbg !3114
  %227 = load i8*, i8** %16, align 8, !dbg !3116
  %228 = load i64, i64* %17, align 8, !dbg !3117
  %_ = sub i64 %228, 1
  %gen = mul i64 %_, 1
  %229 = add i64 %228, 1, !dbg !3118
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %226, i8* align 1 %227, i64 %229, i1 false), !dbg !3119
  store i32 0, i32* %12, align 4, !dbg !3120
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %128
  %230 = load i64, i64* %15, align 8, !dbg !3121
  %231 = icmp ugt i64 %230, 0, !dbg !3124
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %147
  %232 = load i8*, i8** %14, align 8, !dbg !3126
  %233 = load i8*, i8** %16, align 8, !dbg !3128
  %234 = load i64, i64* %15, align 8, !dbg !3129
  %_27 = sub i64 0, %234
  %gen28 = add i64 %_27, 1
  %_29 = sub i64 0, %234
  %gen30 = add i64 %_29, 1
  %_31 = sub i64 %234, 1
  %gen32 = mul i64 %_31, 1
  %_33 = sub i64 0, %234
  %gen34 = add i64 %_33, 1
  %_35 = sub i64 0, %234
  %gen36 = add i64 %_35, 1
  %235 = sub i64 %234, 1, !dbg !3130
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %232, i8* align 1 %233, i64 %235, i1 false), !dbg !3131
  %236 = load i8*, i8** %14, align 8, !dbg !3132
  %237 = load i64, i64* %15, align 8, !dbg !3133
  %_37 = sub i64 %237, 1
  %gen38 = mul i64 %_37, 1
  %_39 = shl i64 %237, 1
  %_40 = sub i64 0, %237
  %gen41 = add i64 %_40, 1
  %_42 = sub i64 0, %237
  %gen43 = add i64 %_42, 1
  %_44 = shl i64 %237, 1
  %_45 = sub i64 0, %237
  %gen46 = add i64 %_45, 1
  %_47 = sub i64 %237, 1
  %gen48 = mul i64 %_47, 1
  %_49 = sub i64 %237, 1
  %gen50 = mul i64 %_49, 1
  %238 = sub i64 %237, 1, !dbg !3134
  %239 = getelementptr inbounds i8, i8* %236, i64 %238, !dbg !3132
  store i8 0, i8* %239, align 1, !dbg !3135
  br label %originalBB26

originalBB54alteredBB:                            ; preds = %originalBB54, %172
  store i32 34, i32* %12, align 4, !dbg !3137
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %189
  %240 = load i32, i32* %12, align 4, !dbg !3138
  br label %originalBB58
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @setlocale_null_androidfix(i32) #5 !dbg !3145 {
  %2 = load i32, i32* @x.53
  %3 = load i32, i32* @y.54
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !3148, metadata !DIExpression()), !dbg !3149
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3150, metadata !DIExpression()), !dbg !3151
  %12 = load i32, i32* %10, align 4, !dbg !3152
  %13 = call i8* @setlocale(i32 %12, i8* null) #10, !dbg !3153
  store i8* %13, i8** %11, align 8, !dbg !3151
  %14 = load i8*, i8** %11, align 8, !dbg !3154
  %15 = load i32, i32* @x.53
  %16 = load i32, i32* @y.54
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !3155

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32, align 4
  %24 = alloca i8*, align 8
  store i32 %0, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !3156, metadata !DIExpression()), !dbg !3149
  call void @llvm.dbg.declare(metadata i8** %24, metadata !3159, metadata !DIExpression()), !dbg !3151
  %25 = load i32, i32* %23, align 4, !dbg !3152
  %26 = call i8* @setlocale(i32 %25, i8* null) #10, !dbg !3153
  store i8* %26, i8** %24, align 8, !dbg !3151
  %27 = load i8*, i8** %24, align 8, !dbg !3154
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fclose(%struct._IO_FILE* nonnull) #5 !dbg !3160 {
  %2 = load i32, i32* @x.55
  %3 = load i32, i32* @y.56
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !3198, metadata !DIExpression()), !dbg !3199
  call void @llvm.dbg.declare(metadata i32* %12, metadata !3200, metadata !DIExpression()), !dbg !3201
  store i32 0, i32* %12, align 4, !dbg !3201
  call void @llvm.dbg.declare(metadata i32* %13, metadata !3202, metadata !DIExpression()), !dbg !3203
  call void @llvm.dbg.declare(metadata i32* %14, metadata !3204, metadata !DIExpression()), !dbg !3205
  store i32 0, i32* %14, align 4, !dbg !3205
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3206
  %16 = call i32 @fileno(%struct._IO_FILE* %15) #10, !dbg !3207
  store i32 %16, i32* %13, align 4, !dbg !3208
  %17 = load i32, i32* %13, align 4, !dbg !3209
  %18 = icmp slt i32 %17, 0, !dbg !3211
  %19 = load i32, i32* @x.55
  %20 = load i32, i32* @y.56
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %46, !dbg !3212

27:                                               ; preds = %originalBBpart2
  %28 = load i32, i32* @x.55
  %29 = load i32, i32* @y.56
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3213
  %37 = call i32 @fclose(%struct._IO_FILE* %36), !dbg !3214
  store i32 %37, i32* %10, align 4, !dbg !3215
  %38 = load i32, i32* @x.55
  %39 = load i32, i32* @y.56
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %184, !dbg !3215

46:                                               ; preds = %originalBBpart2
  %47 = load i32, i32* @x.55
  %48 = load i32, i32* @y.56
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %46, %originalBB6alteredBB
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3216
  %56 = call i32 @__freading(%struct._IO_FILE* %55) #10, !dbg !3216
  %57 = icmp ne i32 %56, 0, !dbg !3216
  %58 = load i32, i32* @x.55
  %59 = load i32, i32* @y.56
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %57, label %66, label %87, !dbg !3218

66:                                               ; preds = %originalBBpart28
  %67 = load i32, i32* @x.55
  %68 = load i32, i32* @y.56
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3219
  %76 = call i32 @fileno(%struct._IO_FILE* %75) #10, !dbg !3220
  %77 = call i64 @lseek(i32 %76, i64 0, i32 1) #10, !dbg !3221
  %78 = icmp ne i64 %77, -1, !dbg !3222
  %79 = load i32, i32* @x.55
  %80 = load i32, i32* @y.56
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %78, label %87, label %126, !dbg !3223

87:                                               ; preds = %originalBBpart212, %originalBBpart28
  %88 = load i32, i32* @x.55
  %89 = load i32, i32* @y.56
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %87, %originalBB14alteredBB
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3224
  %97 = call i32 @rpl_fflush(%struct._IO_FILE* %96), !dbg !3225
  %98 = icmp ne i32 %97, 0, !dbg !3225
  %99 = load i32, i32* @x.55
  %100 = load i32, i32* @y.56
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %98, label %107, label %126, !dbg !3226

107:                                              ; preds = %originalBBpart216
  %108 = load i32, i32* @x.55
  %109 = load i32, i32* @y.56
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %107, %originalBB18alteredBB
  %116 = call i32* @__errno_location() #15, !dbg !3227
  %117 = load i32, i32* %116, align 4, !dbg !3227
  store i32 %117, i32* %12, align 4, !dbg !3228
  %118 = load i32, i32* @x.55
  %119 = load i32, i32* @y.56
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %126, !dbg !3229

126:                                              ; preds = %originalBBpart220, %originalBBpart216, %originalBBpart212
  %127 = load i32, i32* @x.55
  %128 = load i32, i32* @y.56
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %126, %originalBB22alteredBB
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3230
  %136 = call i32 @fclose(%struct._IO_FILE* %135), !dbg !3231
  store i32 %136, i32* %14, align 4, !dbg !3232
  %137 = load i32, i32* %12, align 4, !dbg !3233
  %138 = icmp ne i32 %137, 0, !dbg !3235
  %139 = load i32, i32* @x.55
  %140 = load i32, i32* @y.56
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %138, label %147, label %166, !dbg !3236

147:                                              ; preds = %originalBBpart224
  %148 = load i32, i32* @x.55
  %149 = load i32, i32* @y.56
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %147, %originalBB26alteredBB
  %156 = load i32, i32* %12, align 4, !dbg !3237
  %157 = call i32* @__errno_location() #15, !dbg !3239
  store i32 %156, i32* %157, align 4, !dbg !3240
  store i32 -1, i32* %14, align 4, !dbg !3241
  %158 = load i32, i32* @x.55
  %159 = load i32, i32* @y.56
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %166, !dbg !3242

166:                                              ; preds = %originalBBpart228, %originalBBpart224
  %167 = load i32, i32* @x.55
  %168 = load i32, i32* @y.56
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %166, %originalBB30alteredBB
  %175 = load i32, i32* %14, align 4, !dbg !3243
  store i32 %175, i32* %10, align 4, !dbg !3244
  %176 = load i32, i32* @x.55
  %177 = load i32, i32* @y.56
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %184, !dbg !3244

184:                                              ; preds = %originalBBpart232, %originalBBpart24
  %185 = load i32, i32* @x.55
  %186 = load i32, i32* @y.56
  %187 = sub i32 %185, 1
  %188 = mul i32 %185, %187
  %189 = urem i32 %188, 2
  %190 = icmp eq i32 %189, 0
  %191 = icmp slt i32 %186, 10
  %192 = or i1 %190, %191
  br i1 %192, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %184, %originalBB34alteredBB
  %193 = load i32, i32* %10, align 4, !dbg !3245
  %194 = load i32, i32* @x.55
  %195 = load i32, i32* @y.56
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  ret i32 %193, !dbg !3245

originalBBalteredBB:                              ; preds = %originalBB, %1
  %202 = alloca i32, align 4
  %203 = alloca %struct._IO_FILE*, align 8
  %204 = alloca i32, align 4
  %205 = alloca i32, align 4
  %206 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %203, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %203, metadata !3246, metadata !DIExpression()), !dbg !3199
  call void @llvm.dbg.declare(metadata i32* %204, metadata !3285, metadata !DIExpression()), !dbg !3201
  store i32 0, i32* %204, align 4, !dbg !3201
  call void @llvm.dbg.declare(metadata i32* %205, metadata !3286, metadata !DIExpression()), !dbg !3203
  call void @llvm.dbg.declare(metadata i32* %206, metadata !3287, metadata !DIExpression()), !dbg !3205
  store i32 0, i32* %206, align 4, !dbg !3205
  %207 = load %struct._IO_FILE*, %struct._IO_FILE** %203, align 8, !dbg !3206
  %208 = call i32 @fileno(%struct._IO_FILE* %207) #10, !dbg !3207
  store i32 %208, i32* %205, align 4, !dbg !3208
  %209 = load i32, i32* %205, align 4, !dbg !3209
  %210 = icmp slt i32 %209, 0, !dbg !3211
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  %211 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3213
  %212 = call i32 @fclose(%struct._IO_FILE* %211), !dbg !3214
  store i32 %212, i32* %10, align 4, !dbg !3215
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %46
  %213 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3216
  %214 = call i32 @__freading(%struct._IO_FILE* %213) #10, !dbg !3216
  %215 = icmp ne i32 %214, 0, !dbg !3216
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3219
  %217 = call i32 @fileno(%struct._IO_FILE* %216) #10, !dbg !3220
  %218 = call i64 @lseek(i32 %217, i64 0, i32 1) #10, !dbg !3221
  %219 = icmp ne i64 %218, -1, !dbg !3222
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %87
  %220 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3224
  %221 = call i32 @rpl_fflush(%struct._IO_FILE* %220), !dbg !3225
  %222 = icmp ne i32 %221, 0, !dbg !3225
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %107
  %223 = call i32* @__errno_location() #15, !dbg !3227
  %224 = load i32, i32* %223, align 4, !dbg !3227
  store i32 %224, i32* %12, align 4, !dbg !3228
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %126
  %225 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3230
  %226 = call i32 @fclose(%struct._IO_FILE* %225), !dbg !3231
  store i32 %226, i32* %14, align 4, !dbg !3232
  %227 = load i32, i32* %12, align 4, !dbg !3233
  %228 = icmp ne i32 %227, 0, !dbg !3235
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %147
  %229 = load i32, i32* %12, align 4, !dbg !3237
  %230 = call i32* @__errno_location() #15, !dbg !3239
  store i32 %229, i32* %230, align 4, !dbg !3240
  store i32 -1, i32* %14, align 4, !dbg !3241
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %166
  %231 = load i32, i32* %14, align 4, !dbg !3243
  store i32 %231, i32* %10, align 4, !dbg !3244
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %184
  %232 = load i32, i32* %10, align 4, !dbg !3245
  br label %originalBB34
}

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #3

declare dso_local i32 @fclose(%struct._IO_FILE*) #4

; Function Attrs: nounwind
declare dso_local i32 @__freading(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fflush(%struct._IO_FILE*) #5 !dbg !3288 {
  %2 = load i32, i32* @x.57
  %3 = load i32, i32* @y.58
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !3326, metadata !DIExpression()), !dbg !3327
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3328
  %13 = icmp eq %struct._IO_FILE* %12, null, !dbg !3330
  %14 = load i32, i32* @x.57
  %15 = load i32, i32* @y.58
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %13, label %42, label %22, !dbg !3331

22:                                               ; preds = %originalBBpart2
  %23 = load i32, i32* @x.57
  %24 = load i32, i32* @y.58
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3332
  %32 = call i32 @__freading(%struct._IO_FILE* %31) #10, !dbg !3332
  %33 = icmp ne i32 %32, 0, !dbg !3332
  %34 = load i32, i32* @x.57
  %35 = load i32, i32* @y.58
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %33, label %61, label %42, !dbg !3333

42:                                               ; preds = %originalBBpart24, %originalBBpart2
  %43 = load i32, i32* @x.57
  %44 = load i32, i32* @y.58
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3334
  %52 = call i32 @fflush(%struct._IO_FILE* %51), !dbg !3335
  store i32 %52, i32* %10, align 4, !dbg !3336
  %53 = load i32, i32* @x.57
  %54 = load i32, i32* @y.58
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %81, !dbg !3336

61:                                               ; preds = %originalBBpart24
  %62 = load i32, i32* @x.57
  %63 = load i32, i32* @y.58
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3337
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %70), !dbg !3338
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3339
  %72 = call i32 @fflush(%struct._IO_FILE* %71), !dbg !3340
  store i32 %72, i32* %10, align 4, !dbg !3341
  %73 = load i32, i32* @x.57
  %74 = load i32, i32* @y.58
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %81, !dbg !3341

81:                                               ; preds = %originalBBpart212, %originalBBpart28
  %82 = load i32, i32* @x.57
  %83 = load i32, i32* @y.58
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %81, %originalBB14alteredBB
  %90 = load i32, i32* %10, align 4, !dbg !3342
  %91 = load i32, i32* @x.57
  %92 = load i32, i32* @y.58
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i32 %90, !dbg !3342

originalBBalteredBB:                              ; preds = %originalBB, %1
  %99 = alloca i32, align 4
  %100 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %100, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %100, metadata !3343, metadata !DIExpression()), !dbg !3327
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** %100, align 8, !dbg !3328
  %102 = icmp eq %struct._IO_FILE* %101, null, !dbg !3330
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3332
  %104 = call i32 @__freading(%struct._IO_FILE* %103) #10, !dbg !3332
  %105 = icmp ne i32 %104, 0, !dbg !3332
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3334
  %107 = call i32 @fflush(%struct._IO_FILE* %106), !dbg !3335
  store i32 %107, i32* %10, align 4, !dbg !3336
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3337
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %108), !dbg !3338
  %109 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3339
  %110 = call i32 @fflush(%struct._IO_FILE* %109), !dbg !3340
  store i32 %110, i32* %10, align 4, !dbg !3341
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %81
  %111 = load i32, i32* %10, align 4, !dbg !3342
  br label %originalBB14
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE*) #5 !dbg !3382 {
  %2 = load i32, i32* @x.59
  %3 = load i32, i32* @y.60
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %10, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %10, metadata !3385, metadata !DIExpression()), !dbg !3386
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3387
  %12 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %11, i32 0, i32 0, !dbg !3389
  %13 = load i32, i32* %12, align 8, !dbg !3389
  %14 = and i32 %13, 256, !dbg !3390
  %15 = icmp ne i32 %14, 0, !dbg !3390
  %16 = load i32, i32* @x.59
  %17 = load i32, i32* @y.60
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %43, !dbg !3391

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.59
  %26 = load i32, i32* @y.60
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3392
  %34 = call i32 @rpl_fseeko(%struct._IO_FILE* %33, i64 0, i32 1), !dbg !3393
  %35 = load i32, i32* @x.59
  %36 = load i32, i32* @y.60
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %43, !dbg !3393

43:                                               ; preds = %originalBBpart24, %originalBBpart2
  %44 = load i32, i32* @x.59
  %45 = load i32, i32* @y.60
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  %52 = load i32, i32* @x.59
  %53 = load i32, i32* @y.60
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret void, !dbg !3394

originalBBalteredBB:                              ; preds = %originalBB, %1
  %60 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %60, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %60, metadata !3395, metadata !DIExpression()), !dbg !3386
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** %60, align 8, !dbg !3387
  %62 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %61, i32 0, i32 0, !dbg !3389
  %63 = load i32, i32* %62, align 8, !dbg !3389
  %_ = sub i32 0, %63
  %gen = add i32 %_, 256
  %64 = and i32 %63, 256, !dbg !3390
  %65 = icmp ne i32 %64, 0, !dbg !3390
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3392
  %67 = call i32 @rpl_fseeko(%struct._IO_FILE* %66, i64 0, i32 1), !dbg !3393
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fseeko(%struct._IO_FILE* nonnull, i64, i32) #5 !dbg !3434 {
  %4 = load i32, i32* @x.61
  %5 = load i32, i32* @y.62
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !3473, metadata !DIExpression()), !dbg !3474
  store i64 %1, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !3475, metadata !DIExpression()), !dbg !3476
  store i32 %2, i32* %15, align 4
  call void @llvm.dbg.declare(metadata i32* %15, metadata !3477, metadata !DIExpression()), !dbg !3478
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3479
  %18 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %17, i32 0, i32 2, !dbg !3481
  %19 = load i8*, i8** %18, align 8, !dbg !3481
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3482
  %21 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %20, i32 0, i32 1, !dbg !3483
  %22 = load i8*, i8** %21, align 8, !dbg !3483
  %23 = icmp eq i8* %19, %22, !dbg !3484
  %24 = load i32, i32* @x.61
  %25 = load i32, i32* @y.62
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %23, label %32, label %142, !dbg !3485

32:                                               ; preds = %originalBBpart2
  %33 = load i32, i32* @x.61
  %34 = load i32, i32* @y.62
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3486
  %42 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %41, i32 0, i32 5, !dbg !3487
  %43 = load i8*, i8** %42, align 8, !dbg !3487
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3488
  %45 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %44, i32 0, i32 4, !dbg !3489
  %46 = load i8*, i8** %45, align 8, !dbg !3489
  %47 = icmp eq i8* %43, %46, !dbg !3490
  %48 = load i32, i32* @x.61
  %49 = load i32, i32* @y.62
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %142, !dbg !3491

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.61
  %58 = load i32, i32* @y.62
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3492
  %66 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %65, i32 0, i32 9, !dbg !3493
  %67 = load i8*, i8** %66, align 8, !dbg !3493
  %68 = icmp eq i8* %67, null, !dbg !3494
  %69 = load i32, i32* @x.61
  %70 = load i32, i32* @y.62
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %68, label %77, label %142, !dbg !3495

77:                                               ; preds = %originalBBpart28
  call void @llvm.dbg.declare(metadata i64* %16, metadata !3496, metadata !DIExpression()), !dbg !3498
  %78 = load i32, i32* @x.61
  %79 = load i32, i32* @y.62
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %77, %originalBB10alteredBB
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3499
  %87 = call i32 @fileno(%struct._IO_FILE* %86) #10, !dbg !3500
  %88 = load i64, i64* %14, align 8, !dbg !3501
  %89 = load i32, i32* %15, align 4, !dbg !3502
  %90 = call i64 @lseek(i32 %87, i64 %88, i32 %89) #10, !dbg !3503
  store i64 %90, i64* %16, align 8, !dbg !3498
  %91 = load i64, i64* %16, align 8, !dbg !3504
  %92 = icmp eq i64 %91, -1, !dbg !3506
  %93 = load i32, i32* @x.61
  %94 = load i32, i32* @y.62
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %92, label %101, label %118, !dbg !3507

101:                                              ; preds = %originalBBpart212
  %102 = load i32, i32* @x.61
  %103 = load i32, i32* @y.62
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %101, %originalBB14alteredBB
  store i32 -1, i32* %12, align 4, !dbg !3508
  %110 = load i32, i32* @x.61
  %111 = load i32, i32* @y.62
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %163, !dbg !3508

118:                                              ; preds = %originalBBpart212
  %119 = load i32, i32* @x.61
  %120 = load i32, i32* @y.62
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %118, %originalBB18alteredBB
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3510
  %128 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %127, i32 0, i32 0, !dbg !3511
  %129 = load i32, i32* %128, align 8, !dbg !3512
  %130 = and i32 %129, -17, !dbg !3512
  store i32 %130, i32* %128, align 8, !dbg !3512
  %131 = load i64, i64* %16, align 8, !dbg !3513
  %132 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3514
  %133 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %132, i32 0, i32 21, !dbg !3515
  store i64 %131, i64* %133, align 8, !dbg !3516
  store i32 0, i32* %12, align 4, !dbg !3517
  %134 = load i32, i32* @x.61
  %135 = load i32, i32* @y.62
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart222, label %originalBB18alteredBB

originalBBpart222:                                ; preds = %originalBB18
  br label %163, !dbg !3517

142:                                              ; preds = %originalBBpart28, %originalBBpart24, %originalBBpart2
  %143 = load i32, i32* @x.61
  %144 = load i32, i32* @y.62
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %142, %originalBB24alteredBB
  %151 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3518
  %152 = load i64, i64* %14, align 8, !dbg !3519
  %153 = load i32, i32* %15, align 4, !dbg !3520
  %154 = call i32 @fseeko(%struct._IO_FILE* %151, i64 %152, i32 %153), !dbg !3521
  store i32 %154, i32* %12, align 4, !dbg !3522
  %155 = load i32, i32* @x.61
  %156 = load i32, i32* @y.62
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart227, label %originalBB24alteredBB

originalBBpart227:                                ; preds = %originalBB24
  br label %163, !dbg !3522

163:                                              ; preds = %originalBBpart227, %originalBBpart222, %originalBBpart216
  %164 = load i32, i32* @x.61
  %165 = load i32, i32* @y.62
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %163, %originalBB29alteredBB
  %172 = load i32, i32* %12, align 4, !dbg !3523
  %173 = load i32, i32* @x.61
  %174 = load i32, i32* @y.62
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  ret i32 %172, !dbg !3523

originalBBalteredBB:                              ; preds = %originalBB, %3
  %181 = alloca i32, align 4
  %182 = alloca %struct._IO_FILE*, align 8
  %183 = alloca i64, align 8
  %184 = alloca i32, align 4
  %185 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %182, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %182, metadata !3524, metadata !DIExpression()), !dbg !3474
  store i64 %1, i64* %183, align 8
  call void @llvm.dbg.declare(metadata i64* %183, metadata !3563, metadata !DIExpression()), !dbg !3476
  store i32 %2, i32* %184, align 4
  call void @llvm.dbg.declare(metadata i32* %184, metadata !3564, metadata !DIExpression()), !dbg !3478
  %186 = load %struct._IO_FILE*, %struct._IO_FILE** %182, align 8, !dbg !3479
  %187 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %186, i32 0, i32 2, !dbg !3481
  %188 = load i8*, i8** %187, align 8, !dbg !3481
  %189 = load %struct._IO_FILE*, %struct._IO_FILE** %182, align 8, !dbg !3482
  %190 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %189, i32 0, i32 1, !dbg !3483
  %191 = load i8*, i8** %190, align 8, !dbg !3483
  %192 = icmp eq i8* %188, %191, !dbg !3484
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  %193 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3486
  %194 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %193, i32 0, i32 5, !dbg !3487
  %195 = load i8*, i8** %194, align 8, !dbg !3487
  %196 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3488
  %197 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %196, i32 0, i32 4, !dbg !3489
  %198 = load i8*, i8** %197, align 8, !dbg !3489
  %199 = icmp eq i8* %195, %198, !dbg !3490
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %200 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3492
  %201 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %200, i32 0, i32 9, !dbg !3493
  %202 = load i8*, i8** %201, align 8, !dbg !3493
  %203 = icmp eq i8* %202, null, !dbg !3494
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %77
  %204 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3499
  %205 = call i32 @fileno(%struct._IO_FILE* %204) #10, !dbg !3500
  %206 = load i64, i64* %14, align 8, !dbg !3501
  %207 = load i32, i32* %15, align 4, !dbg !3502
  %208 = call i64 @lseek(i32 %205, i64 %206, i32 %207) #10, !dbg !3503
  store i64 %208, i64* %16, align 8, !dbg !3498
  %209 = load i64, i64* %16, align 8, !dbg !3504
  %210 = icmp eq i64 %209, -1, !dbg !3506
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %101
  store i32 -1, i32* %12, align 4, !dbg !3508
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %118
  %211 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3510
  %212 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %211, i32 0, i32 0, !dbg !3511
  %213 = load i32, i32* %212, align 8, !dbg !3512
  %_ = sub i32 %213, -17
  %gen = mul i32 %_, -17
  %_19 = sub i32 0, %213
  %gen20 = add i32 %_19, -17
  %214 = and i32 %213, -17, !dbg !3512
  store i32 %214, i32* %212, align 8, !dbg !3512
  %215 = load i64, i64* %16, align 8, !dbg !3513
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3514
  %217 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %216, i32 0, i32 21, !dbg !3515
  store i64 %215, i64* %217, align 8, !dbg !3516
  store i32 0, i32* %12, align 4, !dbg !3517
  br label %originalBB18

originalBB24alteredBB:                            ; preds = %originalBB24, %142
  %218 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3518
  %219 = load i64, i64* %14, align 8, !dbg !3519
  %220 = load i32, i32* %15, align 4, !dbg !3520
  %221 = call i32 @fseeko(%struct._IO_FILE* %218, i64 %219, i32 %220), !dbg !3521
  store i32 %221, i32* %12, align 4, !dbg !3522
  br label %originalBB24

originalBB29alteredBB:                            ; preds = %originalBB29, %163
  %222 = load i32, i32* %12, align 4, !dbg !3523
  br label %originalBB29
}

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @c_tolower(i32) #5 !dbg !3565 {
  %2 = load i32, i32* @x.63
  %3 = load i32, i32* @y.64
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3569, metadata !DIExpression()), !dbg !3570
  %12 = load i32, i32* %11, align 4, !dbg !3571
  %13 = load i32, i32* @x.63
  %14 = load i32, i32* @y.64
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %12, label %41 [
    i32 65, label %21
    i32 66, label %21
    i32 67, label %21
    i32 68, label %21
    i32 69, label %21
    i32 70, label %21
    i32 71, label %21
    i32 72, label %21
    i32 73, label %21
    i32 74, label %21
    i32 75, label %21
    i32 76, label %21
    i32 77, label %21
    i32 78, label %21
    i32 79, label %21
    i32 80, label %21
    i32 81, label %21
    i32 82, label %21
    i32 83, label %21
    i32 84, label %21
    i32 85, label %21
    i32 86, label %21
    i32 87, label %21
    i32 88, label %21
    i32 89, label %21
    i32 90, label %21
  ], !dbg !3572

21:                                               ; preds = %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2
  %22 = load i32, i32* @x.63
  %23 = load i32, i32* @y.64
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i32, i32* %11, align 4, !dbg !3573
  %31 = sub nsw i32 %30, 65, !dbg !3575
  %32 = add nsw i32 %31, 97, !dbg !3576
  store i32 %32, i32* %10, align 4, !dbg !3577
  %33 = load i32, i32* @x.63
  %34 = load i32, i32* @y.64
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart213, label %originalBB1alteredBB

originalBBpart213:                                ; preds = %originalBB1
  br label %59, !dbg !3577

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* @x.63
  %43 = load i32, i32* @y.64
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %41, %originalBB15alteredBB
  %50 = load i32, i32* %11, align 4, !dbg !3578
  store i32 %50, i32* %10, align 4, !dbg !3579
  %51 = load i32, i32* @x.63
  %52 = load i32, i32* @y.64
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  br label %59, !dbg !3579

59:                                               ; preds = %originalBBpart217, %originalBBpart213
  %60 = load i32, i32* @x.63
  %61 = load i32, i32* @y.64
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %59, %originalBB19alteredBB
  %68 = load i32, i32* %10, align 4, !dbg !3580
  %69 = load i32, i32* @x.63
  %70 = load i32, i32* @y.64
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  ret i32 %68, !dbg !3580

originalBBalteredBB:                              ; preds = %originalBB, %1
  %77 = alloca i32, align 4
  %78 = alloca i32, align 4
  store i32 %0, i32* %78, align 4
  call void @llvm.dbg.declare(metadata i32* %78, metadata !3581, metadata !DIExpression()), !dbg !3570
  %79 = load i32, i32* %78, align 4, !dbg !3571
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %80 = load i32, i32* %11, align 4, !dbg !3573
  %_ = sub i32 0, %80
  %gen = add i32 %_, 65
  %_2 = sub i32 %80, 65
  %gen3 = mul i32 %_2, 65
  %_4 = sub i32 %80, 65
  %gen5 = mul i32 %_4, 65
  %_6 = shl i32 %80, 65
  %81 = sub nsw i32 %80, 65, !dbg !3575
  %_7 = shl i32 %81, 97
  %_8 = sub i32 %81, 97
  %gen9 = mul i32 %_8, 97
  %_10 = sub i32 0, %81
  %gen11 = add i32 %_10, 97
  %82 = add nsw i32 %81, 97, !dbg !3576
  store i32 %82, i32* %10, align 4, !dbg !3577
  br label %originalBB1

originalBB15alteredBB:                            ; preds = %originalBB15, %41
  %83 = load i32, i32* %11, align 4, !dbg !3578
  store i32 %83, i32* %10, align 4, !dbg !3579
  br label %originalBB15

originalBB19alteredBB:                            ; preds = %originalBB19, %59
  %84 = load i32, i32* %10, align 4, !dbg !3580
  br label %originalBB19
}

define private i32 @controle(i8*, i32) {
  %3 = load i32, i32* @x.65
  %4 = load i32, i32* @y.66
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = load i32, i32* @inVal0
  %12 = icmp sgt i32 %11, 0
  %13 = load i32, i32* @x.65
  %14 = load i32, i32* @y.66
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %41, label %21

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.65
  %23 = load i32, i32* @y.66
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  call void @srand(i32 %1)
  %30 = call i32 @rand()
  %31 = srem i32 %30, 50000
  %32 = add i32 %31, 2
  %33 = load i32, i32* @x.65
  %34 = load i32, i32* @y.66
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart217, label %originalBB1alteredBB

originalBBpart217:                                ; preds = %originalBB1
  ret i32 %32

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* @x.65
  %43 = load i32, i32* @y.66
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %41, %originalBB19alteredBB
  %50 = getelementptr inbounds [1 x i8], [1 x i8]* @.compVal2, i32 0, i32 0
  %51 = call i32 @strcmp(i8* %50, i8* %0)
  %52 = icmp eq i32 %51, 0
  %53 = load i32, i32* @x.65
  %54 = load i32, i32* @y.66
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br i1 %52, label %61, label %96

61:                                               ; preds = %originalBBpart221
  %62 = load i32, i32* @x.65
  %63 = load i32, i32* @y.66
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %61, %originalBB23alteredBB
  %70 = icmp eq i32 %1, 0
  %71 = load i32, i32* @x.65
  %72 = load i32, i32* @y.66
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br i1 %70, label %79, label %96

79:                                               ; preds = %originalBBpart225
  %80 = load i32, i32* @x.65
  %81 = load i32, i32* @y.66
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %79, %originalBB27alteredBB
  %88 = load i32, i32* @x.65
  %89 = load i32, i32* @y.66
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  ret i32 5

96:                                               ; preds = %originalBBpart225, %originalBBpart221
  %97 = load i32, i32* @x.65
  %98 = load i32, i32* @y.66
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %96, %originalBB31alteredBB
  %105 = getelementptr inbounds [2 x i8], [2 x i8]* @.compVal1, i32 0, i32 0
  %106 = call i32 @strcmp(i8* %105, i8* %0)
  %107 = icmp eq i32 %106, 0
  %108 = load i32, i32* @x.65
  %109 = load i32, i32* @y.66
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  br i1 %107, label %116, label %151

116:                                              ; preds = %originalBBpart233
  %117 = load i32, i32* @x.65
  %118 = load i32, i32* @y.66
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %116, %originalBB35alteredBB
  %125 = icmp eq i32 %1, 0
  %126 = load i32, i32* @x.65
  %127 = load i32, i32* @y.66
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart237, label %originalBB35alteredBB

originalBBpart237:                                ; preds = %originalBB35
  br i1 %125, label %134, label %151

134:                                              ; preds = %originalBBpart237
  %135 = load i32, i32* @x.65
  %136 = load i32, i32* @y.66
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %134, %originalBB39alteredBB
  %143 = load i32, i32* @x.65
  %144 = load i32, i32* @y.66
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  ret i32 3

151:                                              ; preds = %originalBBpart237, %originalBBpart233
  %152 = load i32, i32* @x.65
  %153 = load i32, i32* @y.66
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %151, %originalBB43alteredBB
  %160 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %161 = call i32 @strcmp(i8* %160, i8* %0)
  %162 = icmp eq i32 %161, 0
  %163 = load i32, i32* @x.65
  %164 = load i32, i32* @y.66
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBBpart245, label %originalBB43alteredBB

originalBBpart245:                                ; preds = %originalBB43
  br i1 %162, label %171, label %206

171:                                              ; preds = %originalBBpart245
  %172 = load i32, i32* @x.65
  %173 = load i32, i32* @y.66
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %171, %originalBB47alteredBB
  %180 = icmp eq i32 %1, 0
  %181 = load i32, i32* @x.65
  %182 = load i32, i32* @y.66
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBBpart249, label %originalBB47alteredBB

originalBBpart249:                                ; preds = %originalBB47
  br i1 %180, label %189, label %206

189:                                              ; preds = %originalBBpart249
  %190 = load i32, i32* @x.65
  %191 = load i32, i32* @y.66
  %192 = sub i32 %190, 1
  %193 = mul i32 %190, %192
  %194 = urem i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %195, %196
  br i1 %197, label %originalBB51, label %originalBB51alteredBB

originalBB51:                                     ; preds = %189, %originalBB51alteredBB
  %198 = load i32, i32* @x.65
  %199 = load i32, i32* @y.66
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBBpart253, label %originalBB51alteredBB

originalBBpart253:                                ; preds = %originalBB51
  ret i32 3

206:                                              ; preds = %originalBBpart249, %originalBBpart245
  %207 = load i32, i32* @x.65
  %208 = load i32, i32* @y.66
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBB55, label %originalBB55alteredBB

originalBB55:                                     ; preds = %206, %originalBB55alteredBB
  %215 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %216 = call i32 @strcmp(i8* %215, i8* %0)
  %217 = icmp eq i32 %216, 0
  %218 = load i32, i32* @x.65
  %219 = load i32, i32* @y.66
  %220 = sub i32 %218, 1
  %221 = mul i32 %218, %220
  %222 = urem i32 %221, 2
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %223, %224
  br i1 %225, label %originalBBpart257, label %originalBB55alteredBB

originalBBpart257:                                ; preds = %originalBB55
  br i1 %217, label %226, label %261

226:                                              ; preds = %originalBBpart257
  %227 = load i32, i32* @x.65
  %228 = load i32, i32* @y.66
  %229 = sub i32 %227, 1
  %230 = mul i32 %227, %229
  %231 = urem i32 %230, 2
  %232 = icmp eq i32 %231, 0
  %233 = icmp slt i32 %228, 10
  %234 = or i1 %232, %233
  br i1 %234, label %originalBB59, label %originalBB59alteredBB

originalBB59:                                     ; preds = %226, %originalBB59alteredBB
  %235 = icmp eq i32 %1, 2
  %236 = load i32, i32* @x.65
  %237 = load i32, i32* @y.66
  %238 = sub i32 %236, 1
  %239 = mul i32 %236, %238
  %240 = urem i32 %239, 2
  %241 = icmp eq i32 %240, 0
  %242 = icmp slt i32 %237, 10
  %243 = or i1 %241, %242
  br i1 %243, label %originalBBpart261, label %originalBB59alteredBB

originalBBpart261:                                ; preds = %originalBB59
  br i1 %235, label %244, label %261

244:                                              ; preds = %originalBBpart261
  %245 = load i32, i32* @x.65
  %246 = load i32, i32* @y.66
  %247 = sub i32 %245, 1
  %248 = mul i32 %245, %247
  %249 = urem i32 %248, 2
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %250, %251
  br i1 %252, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %244, %originalBB63alteredBB
  %253 = load i32, i32* @x.65
  %254 = load i32, i32* @y.66
  %255 = sub i32 %253, 1
  %256 = mul i32 %253, %255
  %257 = urem i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %258, %259
  br i1 %260, label %originalBBpart265, label %originalBB63alteredBB

originalBBpart265:                                ; preds = %originalBB63
  ret i32 5

261:                                              ; preds = %originalBBpart261, %originalBBpart257
  %262 = load i32, i32* @x.65
  %263 = load i32, i32* @y.66
  %264 = sub i32 %262, 1
  %265 = mul i32 %262, %264
  %266 = urem i32 %265, 2
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %263, 10
  %269 = or i1 %267, %268
  br i1 %269, label %originalBB67, label %originalBB67alteredBB

originalBB67:                                     ; preds = %261, %originalBB67alteredBB
  call void @srand(i32 %1)
  %270 = call i32 @rand()
  %271 = srem i32 %270, 50000
  %272 = add i32 %271, 2
  %273 = load i32, i32* @x.65
  %274 = load i32, i32* @y.66
  %275 = sub i32 %273, 1
  %276 = mul i32 %273, %275
  %277 = urem i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %278, %279
  br i1 %280, label %originalBBpart280, label %originalBB67alteredBB

originalBBpart280:                                ; preds = %originalBB67
  ret i32 %272

originalBBalteredBB:                              ; preds = %originalBB, %2
  %281 = load i32, i32* @inVal0
  %282 = icmp sgt i32 %281, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  call void @srand(i32 %1)
  %283 = call i32 @rand()
  %_ = sub i32 0, %283
  %gen = add i32 %_, 50000
  %_2 = sub i32 0, %283
  %gen3 = add i32 %_2, 50000
  %_4 = sub i32 0, %283
  %gen5 = add i32 %_4, 50000
  %_6 = shl i32 %283, 50000
  %_7 = sub i32 %283, 50000
  %gen8 = mul i32 %_7, 50000
  %_9 = shl i32 %283, 50000
  %_10 = shl i32 %283, 50000
  %284 = srem i32 %283, 50000
  %_11 = sub i32 %284, 2
  %gen12 = mul i32 %_11, 2
  %_13 = shl i32 %284, 2
  %_14 = sub i32 0, %284
  %gen15 = add i32 %_14, 2
  %285 = add i32 %284, 2
  br label %originalBB1

originalBB19alteredBB:                            ; preds = %originalBB19, %41
  %286 = getelementptr inbounds [1 x i8], [1 x i8]* @.compVal2, i32 0, i32 0
  %287 = call i32 @strcmp(i8* %286, i8* %0)
  %288 = icmp eq i32 %287, 0
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %61
  %289 = icmp eq i32 %1, 0
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %79
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %96
  %290 = getelementptr inbounds [2 x i8], [2 x i8]* @.compVal1, i32 0, i32 0
  %291 = call i32 @strcmp(i8* %290, i8* %0)
  %292 = icmp eq i32 %291, 0
  br label %originalBB31

originalBB35alteredBB:                            ; preds = %originalBB35, %116
  %293 = icmp eq i32 %1, 0
  br label %originalBB35

originalBB39alteredBB:                            ; preds = %originalBB39, %134
  br label %originalBB39

originalBB43alteredBB:                            ; preds = %originalBB43, %151
  %294 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %295 = call i32 @strcmp(i8* %294, i8* %0)
  %296 = icmp eq i32 %295, 0
  br label %originalBB43

originalBB47alteredBB:                            ; preds = %originalBB47, %171
  %297 = icmp eq i32 %1, 0
  br label %originalBB47

originalBB51alteredBB:                            ; preds = %originalBB51, %189
  br label %originalBB51

originalBB55alteredBB:                            ; preds = %originalBB55, %206
  %298 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %299 = call i32 @strcmp(i8* %298, i8* %0)
  %300 = icmp eq i32 %299, 0
  br label %originalBB55

originalBB59alteredBB:                            ; preds = %originalBB59, %226
  %301 = icmp eq i32 %1, 2
  br label %originalBB59

originalBB63alteredBB:                            ; preds = %originalBB63, %244
  br label %originalBB63

originalBB67alteredBB:                            ; preds = %originalBB67, %261
  call void @srand(i32 %1)
  %302 = call i32 @rand()
  %_68 = shl i32 %302, 50000
  %_69 = sub i32 %302, 50000
  %gen70 = mul i32 %_69, 50000
  %303 = srem i32 %302, 50000
  %_71 = sub i32 0, %303
  %gen72 = add i32 %_71, 2
  %_73 = sub i32 0, %303
  %gen74 = add i32 %_73, 2
  %_75 = sub i32 0, %303
  %gen76 = add i32 %_75, 2
  %_77 = sub i32 0, %303
  %gen78 = add i32 %_77, 2
  %304 = add i32 %303, 2
  br label %originalBB67
}

declare void @srand(i32)

declare i32 @rand()

attributes #0 = { noinline noreturn nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noinline nounwind optnone readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { noreturn }
attributes #15 = { nounwind readnone }

!llvm.dbg.cu = !{!111, !2, !11, !20, !28, !37, !114, !104, !117, !120, !122, !125, !131, !133, !135, !137, !139, !141, !143, !145}
!llvm.ident = !{!147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147}
!llvm.module.flags = !{!148, !149, !150, !151, !152}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "Version", scope: !2, file: !3, line: 2, type: !6, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5, nameTableKind: None)
!3 = !DIFile(filename: "src/version.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4 = !{}
!5 = !{!0}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8)
!8 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!9 = !DIGlobalVariableExpression(var: !10, expr: !DIExpression())
!10 = distinct !DIGlobalVariable(name: "ignore_EPIPE", scope: !11, file: !16, line: 56, type: !17, isLocal: true, isDefinition: true)
!11 = distinct !DICompileUnit(language: DW_LANG_C99, file: !12, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !13, nameTableKind: None)
!12 = !DIFile(filename: "./lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!13 = !{!14, !9}
!14 = !DIGlobalVariableExpression(var: !15, expr: !DIExpression())
!15 = distinct !DIGlobalVariable(name: "file_name", scope: !11, file: !16, line: 46, type: !6, isLocal: true, isDefinition: true)
!16 = !DIFile(filename: "lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!17 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!18 = !DIGlobalVariableExpression(var: !19, expr: !DIExpression())
!19 = distinct !DIGlobalVariable(name: "exit_failure", scope: !20, file: !23, line: 24, type: !24, isLocal: false, isDefinition: true)
!20 = distinct !DICompileUnit(language: DW_LANG_C99, file: !21, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !22, nameTableKind: None)
!21 = !DIFile(filename: "./lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!22 = !{!18}
!23 = !DIFile(filename: "lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!24 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !25)
!25 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(name: "program_name", scope: !28, file: !34, line: 33, type: !6, isLocal: false, isDefinition: true)
!28 = distinct !DICompileUnit(language: DW_LANG_C99, file: !29, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !30, globals: !33, nameTableKind: None)
!29 = !DIFile(filename: "./lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!30 = !{!31, !32}
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!32 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!33 = !{!26}
!34 = !DIFile(filename: "lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !37, file: !63, line: 116, type: !76, isLocal: true, isDefinition: true)
!37 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !60, nameTableKind: None)
!38 = !DIFile(filename: "./lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!39 = !{!40}
!40 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "quoting_style", file: !41, line: 32, baseType: !42, size: 32, elements: !43)
!41 = !DIFile(filename: "./lib/quotearg.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!42 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!43 = !{!44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54}
!44 = !DIEnumerator(name: "literal_quoting_style", value: 0, isUnsigned: true)
!45 = !DIEnumerator(name: "shell_quoting_style", value: 1, isUnsigned: true)
!46 = !DIEnumerator(name: "shell_always_quoting_style", value: 2, isUnsigned: true)
!47 = !DIEnumerator(name: "shell_escape_quoting_style", value: 3, isUnsigned: true)
!48 = !DIEnumerator(name: "shell_escape_always_quoting_style", value: 4, isUnsigned: true)
!49 = !DIEnumerator(name: "c_quoting_style", value: 5, isUnsigned: true)
!50 = !DIEnumerator(name: "c_maybe_quoting_style", value: 6, isUnsigned: true)
!51 = !DIEnumerator(name: "escape_quoting_style", value: 7, isUnsigned: true)
!52 = !DIEnumerator(name: "locale_quoting_style", value: 8, isUnsigned: true)
!53 = !DIEnumerator(name: "clocale_quoting_style", value: 9, isUnsigned: true)
!54 = !DIEnumerator(name: "custom_quoting_style", value: 10, isUnsigned: true)
!55 = !{!25, !56, !57}
!56 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!57 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !58, line: 46, baseType: !59)
!58 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stddef.h", directory: "")
!59 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!60 = !{!61, !68, !74, !35, !86, !91, !98, !100}
!61 = !DIGlobalVariableExpression(var: !62, expr: !DIExpression())
!62 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !37, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!63 = !DIFile(filename: "lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!64 = !DICompositeType(tag: DW_TAG_array_type, baseType: !65, size: 704, elements: !66)
!65 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6)
!66 = !{!67}
!67 = !DISubrange(count: 11)
!68 = !DIGlobalVariableExpression(var: !69, expr: !DIExpression())
!69 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !37, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!70 = !DICompositeType(tag: DW_TAG_array_type, baseType: !71, size: 320, elements: !72)
!71 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !40)
!72 = !{!73}
!73 = !DISubrange(count: 10)
!74 = !DIGlobalVariableExpression(var: !75, expr: !DIExpression())
!75 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !37, file: !63, line: 1052, type: !76, isLocal: false, isDefinition: true)
!76 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !77)
!77 = !{!78, !79, !80, !84, !85}
!78 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !76, file: !63, line: 68, baseType: !40, size: 32)
!79 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !76, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!80 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !76, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!81 = !DICompositeType(tag: DW_TAG_array_type, baseType: !42, size: 256, elements: !82)
!82 = !{!83}
!83 = !DISubrange(count: 8)
!84 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !76, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!85 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !76, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!86 = !DIGlobalVariableExpression(var: !87, expr: !DIExpression())
!87 = distinct !DIGlobalVariable(name: "slot0", scope: !37, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!88 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2048, elements: !89)
!89 = !{!90}
!90 = !DISubrange(count: 256)
!91 = !DIGlobalVariableExpression(var: !92, expr: !DIExpression())
!92 = distinct !DIGlobalVariable(name: "slotvec", scope: !37, file: !63, line: 845, type: !93, isLocal: true, isDefinition: true)
!93 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !94, size: 64)
!94 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !95)
!95 = !{!96, !97}
!96 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !94, file: !63, line: 836, baseType: !57, size: 64)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !94, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!98 = !DIGlobalVariableExpression(var: !99, expr: !DIExpression())
!99 = distinct !DIGlobalVariable(name: "nslots", scope: !37, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!100 = !DIGlobalVariableExpression(var: !101, expr: !DIExpression())
!101 = distinct !DIGlobalVariable(name: "slotvec0", scope: !37, file: !63, line: 844, type: !94, isLocal: true, isDefinition: true)
!102 = !DIGlobalVariableExpression(var: !103, expr: !DIExpression())
!103 = distinct !DIGlobalVariable(name: "version_etc_copyright", scope: !104, file: !107, line: 26, type: !108, isLocal: false, isDefinition: true)
!104 = distinct !DICompileUnit(language: DW_LANG_C99, file: !105, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !106, nameTableKind: None)
!105 = !DIFile(filename: "./lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!106 = !{!102}
!107 = !DIFile(filename: "lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!108 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 376, elements: !109)
!109 = !{!110}
!110 = !DISubrange(count: 47)
!111 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!112 = !DIFile(filename: "src/echo.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!113 = !{!32, !31, !25, !56}
!114 = distinct !DICompileUnit(language: DW_LANG_C99, file: !115, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!115 = !DIFile(filename: "./lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!116 = !{!31}
!117 = distinct !DICompileUnit(language: DW_LANG_C99, file: !118, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !119, nameTableKind: None)
!118 = !DIFile(filename: "./lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!119 = !{!57, !32, !31}
!120 = distinct !DICompileUnit(language: DW_LANG_C99, file: !121, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!121 = !DIFile(filename: "./lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!122 = distinct !DICompileUnit(language: DW_LANG_C99, file: !123, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !124, nameTableKind: None)
!123 = !DIFile(filename: "./lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!124 = !{!57}
!125 = distinct !DICompileUnit(language: DW_LANG_C99, file: !126, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !127, nameTableKind: None)
!126 = !DIFile(filename: "./lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!127 = !{!128}
!128 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !129, size: 64)
!129 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !130)
!130 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!131 = distinct !DICompileUnit(language: DW_LANG_C99, file: !132, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!132 = !DIFile(filename: "./lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!133 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!134 = !DIFile(filename: "./lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!135 = distinct !DICompileUnit(language: DW_LANG_C99, file: !136, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!136 = !DIFile(filename: "./lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!137 = distinct !DICompileUnit(language: DW_LANG_C99, file: !138, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!138 = !DIFile(filename: "./lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!139 = distinct !DICompileUnit(language: DW_LANG_C99, file: !140, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!140 = !DIFile(filename: "./lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!141 = distinct !DICompileUnit(language: DW_LANG_C99, file: !142, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!142 = !DIFile(filename: "./lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!143 = distinct !DICompileUnit(language: DW_LANG_C99, file: !144, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!144 = !DIFile(filename: "./lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!145 = distinct !DICompileUnit(language: DW_LANG_C99, file: !146, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!146 = !DIFile(filename: "./lib/c-ctype.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!147 = !{!"clang version 9.0.1-12 "}
!148 = !{i32 2, !"Dwarf Version", i32 4}
!149 = !{i32 2, !"Debug Info Version", i32 3}
!150 = !{i32 1, !"wchar_size", i32 4}
!151 = !{i32 1, !"ThinLTO", i32 0}
!152 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!153 = distinct !DISubprogram(name: "usage", scope: !112, file: !112, line: 36, type: !154, scopeLine: 37, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !111, retainedNodes: !4)
!154 = !DISubroutineType(types: !155)
!155 = !{null, !25}
!156 = !DILocalVariable(name: "status", arg: 1, scope: !153, file: !112, line: 36, type: !25)
!157 = !DILocation(line: 36, column: 12, scope: !153)
!158 = !DILocation(line: 40, column: 3, scope: !159)
!159 = distinct !DILexicalBlock(scope: !160, file: !112, line: 40, column: 3)
!160 = distinct !DILexicalBlock(scope: !153, file: !112, line: 40, column: 3)
!161 = !DILocation(line: 40, column: 3, scope: !160)
!162 = !DILocation(line: 42, column: 11, scope: !153)
!163 = !DILocation(line: 45, column: 5, scope: !153)
!164 = !DILocation(line: 45, column: 19, scope: !153)
!165 = !DILocation(line: 42, column: 3, scope: !153)
!166 = !DILocation(line: 46, column: 3, scope: !153)
!167 = !DILocation(line: 51, column: 3, scope: !153)
!168 = !DILocation(line: 59, column: 3, scope: !153)
!169 = !DILocation(line: 60, column: 3, scope: !153)
!170 = !DILocation(line: 61, column: 3, scope: !153)
!171 = !DILocation(line: 66, column: 3, scope: !153)
!172 = !DILocation(line: 78, column: 3, scope: !153)
!173 = !DILocation(line: 82, column: 11, scope: !153)
!174 = !DILocation(line: 82, column: 3, scope: !153)
!175 = !DILocation(line: 83, column: 3, scope: !153)
!176 = !DILocation(line: 84, column: 9, scope: !153)
!177 = !DILocation(line: 84, column: 3, scope: !153)
!178 = !DILocalVariable(name: "status", arg: 1, scope: !179, file: !112, line: 36, type: !25)
!179 = distinct !DISubprogram(name: "usage", scope: !112, file: !112, line: 36, type: !154, scopeLine: 37, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !180, retainedNodes: !4)
!180 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!181 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !182, file: !182, line: 634, type: !183, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !111, retainedNodes: !4)
!182 = !DIFile(filename: "src/system.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!183 = !DISubroutineType(types: !184)
!184 = !{null, !6}
!185 = !DILocalVariable(name: "program", arg: 1, scope: !181, file: !182, line: 634, type: !6)
!186 = !DILocation(line: 634, column: 34, scope: !181)
!187 = !DILocalVariable(name: "infomap", scope: !181, file: !182, line: 636, type: !188)
!188 = !DICompositeType(tag: DW_TAG_array_type, baseType: !189, size: 896, elements: !194)
!189 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !190)
!190 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !181, file: !182, line: 636, size: 128, elements: !191)
!191 = !{!192, !193}
!192 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !190, file: !182, line: 636, baseType: !6, size: 64)
!193 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !190, file: !182, line: 636, baseType: !6, size: 64, offset: 64)
!194 = !{!195}
!195 = !DISubrange(count: 7)
!196 = !DILocation(line: 636, column: 67, scope: !181)
!197 = !DILocalVariable(name: "node", scope: !181, file: !182, line: 646, type: !6)
!198 = !DILocation(line: 646, column: 15, scope: !181)
!199 = !DILocation(line: 646, column: 22, scope: !181)
!200 = !DILocalVariable(name: "map_prog", scope: !181, file: !182, line: 647, type: !201)
!201 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !189, size: 64)
!202 = !DILocation(line: 647, column: 25, scope: !181)
!203 = !DILocation(line: 647, column: 36, scope: !181)
!204 = !DILocation(line: 649, column: 3, scope: !181)
!205 = !DILocation(line: 649, column: 10, scope: !181)
!206 = !DILocation(line: 649, column: 20, scope: !181)
!207 = !DILocation(line: 649, column: 28, scope: !181)
!208 = !DILocation(line: 649, column: 33, scope: !181)
!209 = !DILocation(line: 649, column: 31, scope: !181)
!210 = !DILocation(line: 0, scope: !181)
!211 = !DILocation(line: 650, column: 13, scope: !181)
!212 = distinct !{!212, !204, !211}
!213 = !DILocation(line: 652, column: 7, scope: !214)
!214 = distinct !DILexicalBlock(scope: !181, file: !182, line: 652, column: 7)
!215 = !DILocation(line: 652, column: 17, scope: !214)
!216 = !DILocation(line: 652, column: 7, scope: !181)
!217 = !DILocation(line: 653, column: 12, scope: !214)
!218 = !DILocation(line: 653, column: 22, scope: !214)
!219 = !DILocation(line: 653, column: 10, scope: !214)
!220 = !DILocation(line: 653, column: 5, scope: !214)
!221 = !DILocation(line: 655, column: 11, scope: !181)
!222 = !DILocation(line: 655, column: 3, scope: !181)
!223 = !DILocalVariable(name: "lc_messages", scope: !181, file: !182, line: 659, type: !6)
!224 = !DILocation(line: 659, column: 15, scope: !181)
!225 = !DILocation(line: 659, column: 29, scope: !181)
!226 = !DILocation(line: 660, column: 7, scope: !227)
!227 = distinct !DILexicalBlock(scope: !181, file: !182, line: 660, column: 7)
!228 = !DILocation(line: 660, column: 19, scope: !227)
!229 = !DILocation(line: 660, column: 22, scope: !227)
!230 = !DILocation(line: 660, column: 7, scope: !181)
!231 = !DILocation(line: 666, column: 7, scope: !232)
!232 = distinct !DILexicalBlock(scope: !227, file: !182, line: 661, column: 5)
!233 = !DILocation(line: 668, column: 5, scope: !232)
!234 = !DILocation(line: 669, column: 11, scope: !181)
!235 = !DILocation(line: 670, column: 24, scope: !181)
!236 = !DILocation(line: 669, column: 3, scope: !181)
!237 = !DILocation(line: 671, column: 11, scope: !181)
!238 = !DILocation(line: 672, column: 11, scope: !181)
!239 = !DILocation(line: 672, column: 17, scope: !181)
!240 = !DILocation(line: 672, column: 25, scope: !181)
!241 = !DILocation(line: 672, column: 22, scope: !181)
!242 = !DILocation(line: 671, column: 3, scope: !181)
!243 = !DILocation(line: 673, column: 1, scope: !181)
!244 = !DILocalVariable(name: "program", arg: 1, scope: !245, file: !182, line: 634, type: !6)
!245 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !182, file: !182, line: 634, type: !183, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !246, retainedNodes: !4)
!246 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!247 = !DILocalVariable(name: "infomap", scope: !245, file: !182, line: 636, type: !248)
!248 = !DICompositeType(tag: DW_TAG_array_type, baseType: !249, size: 896, elements: !194)
!249 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !250)
!250 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !245, file: !182, line: 636, size: 128, elements: !251)
!251 = !{!252, !253}
!252 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !250, file: !182, line: 636, baseType: !6, size: 64)
!253 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !250, file: !182, line: 636, baseType: !6, size: 64, offset: 64)
!254 = !DILocalVariable(name: "node", scope: !245, file: !182, line: 646, type: !6)
!255 = !DILocalVariable(name: "map_prog", scope: !245, file: !182, line: 647, type: !256)
!256 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !249, size: 64)
!257 = !DILocalVariable(name: "lc_messages", scope: !258, file: !182, line: 659, type: !6)
!258 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !182, file: !182, line: 634, type: !183, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !259, retainedNodes: !4)
!259 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!260 = distinct !DISubprogram(name: "main", scope: !112, file: !112, line: 108, type: !261, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !111, retainedNodes: !4)
!261 = !DISubroutineType(types: !262)
!262 = !{!25, !25, !263}
!263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !32, size: 64)
!264 = !DILocalVariable(name: "argc", arg: 1, scope: !260, file: !112, line: 108, type: !25)
!265 = !DILocation(line: 108, column: 11, scope: !260)
!266 = !DILocalVariable(name: "argv", arg: 2, scope: !260, file: !112, line: 108, type: !263)
!267 = !DILocation(line: 108, column: 24, scope: !260)
!268 = !DILocalVariable(name: "display_return", scope: !260, file: !112, line: 110, type: !17)
!269 = !DILocation(line: 110, column: 8, scope: !260)
!270 = !DILocalVariable(name: "posixly_correct", scope: !260, file: !112, line: 111, type: !17)
!271 = !DILocation(line: 111, column: 8, scope: !260)
!272 = !DILocation(line: 111, column: 26, scope: !260)
!273 = !DILocalVariable(name: "allow_options", scope: !260, file: !112, line: 112, type: !17)
!274 = !DILocation(line: 112, column: 8, scope: !260)
!275 = !DILocation(line: 113, column: 8, scope: !260)
!276 = !DILocation(line: 114, column: 6, scope: !260)
!277 = !DILocation(line: 114, column: 39, scope: !260)
!278 = !DILocation(line: 114, column: 37, scope: !260)
!279 = !DILocation(line: 114, column: 44, scope: !260)
!280 = !DILocation(line: 114, column: 47, scope: !260)
!281 = !DILocation(line: 0, scope: !260)
!282 = !DILocalVariable(name: "do_v9", scope: !260, file: !112, line: 119, type: !17)
!283 = !DILocation(line: 119, column: 8, scope: !260)
!284 = !DILocation(line: 122, column: 21, scope: !260)
!285 = !DILocation(line: 122, column: 3, scope: !260)
!286 = !DILocation(line: 123, column: 3, scope: !260)
!287 = !DILocation(line: 124, column: 3, scope: !260)
!288 = !DILocation(line: 125, column: 3, scope: !260)
!289 = !DILocation(line: 127, column: 3, scope: !260)
!290 = !DILocation(line: 131, column: 7, scope: !291)
!291 = distinct !DILexicalBlock(scope: !260, file: !112, line: 131, column: 7)
!292 = !DILocation(line: 131, column: 21, scope: !291)
!293 = !DILocation(line: 131, column: 24, scope: !291)
!294 = !DILocation(line: 131, column: 29, scope: !291)
!295 = !DILocation(line: 133, column: 11, scope: !296)
!296 = distinct !DILexicalBlock(scope: !297, file: !112, line: 133, column: 11)
!297 = distinct !DILexicalBlock(scope: !291, file: !112, line: 132, column: 5)
!298 = !DILocation(line: 134, column: 9, scope: !296)
!299 = !DILocation(line: 136, column: 11, scope: !300)
!300 = distinct !DILexicalBlock(scope: !297, file: !112, line: 136, column: 11)
!301 = !DILocation(line: 138, column: 24, scope: !302)
!302 = distinct !DILexicalBlock(scope: !300, file: !112, line: 137, column: 9)
!303 = !DILocation(line: 138, column: 60, scope: !302)
!304 = !DILocation(line: 138, column: 11, scope: !302)
!305 = !DILocation(line: 140, column: 11, scope: !302)
!306 = !DILocation(line: 142, column: 5, scope: !297)
!307 = !DILocation(line: 144, column: 3, scope: !260)
!308 = !DILocation(line: 145, column: 3, scope: !260)
!309 = !DILocation(line: 147, column: 7, scope: !310)
!310 = distinct !DILexicalBlock(scope: !260, file: !112, line: 147, column: 7)
!311 = !DILocation(line: 147, column: 7, scope: !260)
!312 = !DILocation(line: 148, column: 5, scope: !310)
!313 = !DILocation(line: 148, column: 12, scope: !310)
!314 = !DILocation(line: 148, column: 17, scope: !310)
!315 = !DILocation(line: 148, column: 21, scope: !310)
!316 = !DILocation(line: 148, column: 25, scope: !310)
!317 = !DILocation(line: 148, column: 24, scope: !310)
!318 = !DILocation(line: 148, column: 33, scope: !310)
!319 = !DILocation(line: 0, scope: !310)
!320 = !DILocalVariable(name: "temp", scope: !321, file: !112, line: 150, type: !6)
!321 = distinct !DILexicalBlock(scope: !310, file: !112, line: 149, column: 7)
!322 = !DILocation(line: 150, column: 21, scope: !321)
!323 = !DILocation(line: 150, column: 28, scope: !321)
!324 = !DILocation(line: 150, column: 36, scope: !321)
!325 = !DILocalVariable(name: "i", scope: !321, file: !112, line: 151, type: !57)
!326 = !DILocation(line: 151, column: 16, scope: !321)
!327 = !DILocation(line: 157, column: 16, scope: !328)
!328 = distinct !DILexicalBlock(scope: !321, file: !112, line: 157, column: 9)
!329 = !DILocation(line: 157, column: 14, scope: !328)
!330 = !DILocation(line: 157, column: 21, scope: !331)
!331 = distinct !DILexicalBlock(scope: !328, file: !112, line: 157, column: 9)
!332 = !DILocation(line: 157, column: 26, scope: !331)
!333 = !DILocation(line: 157, column: 9, scope: !328)
!334 = !DILocation(line: 158, column: 19, scope: !331)
!335 = !DILocation(line: 158, column: 24, scope: !331)
!336 = !DILocation(line: 158, column: 11, scope: !331)
!337 = !DILocation(line: 161, column: 15, scope: !338)
!338 = distinct !DILexicalBlock(scope: !331, file: !112, line: 159, column: 13)
!339 = !DILocation(line: 163, column: 15, scope: !338)
!340 = !DILocation(line: 164, column: 13, scope: !338)
!341 = !DILocation(line: 157, column: 31, scope: !331)
!342 = !DILocation(line: 157, column: 9, scope: !331)
!343 = distinct !{!343, !333, !344}
!344 = !DILocation(line: 164, column: 13, scope: !328)
!345 = !DILocation(line: 166, column: 13, scope: !346)
!346 = distinct !DILexicalBlock(scope: !321, file: !112, line: 166, column: 13)
!347 = !DILocation(line: 166, column: 15, scope: !346)
!348 = !DILocation(line: 167, column: 11, scope: !346)
!349 = !DILocation(line: 171, column: 9, scope: !321)
!350 = !DILocation(line: 171, column: 17, scope: !321)
!351 = !DILocation(line: 171, column: 16, scope: !321)
!352 = !DILocation(line: 172, column: 24, scope: !321)
!353 = !DILocation(line: 172, column: 19, scope: !321)
!354 = !DILocation(line: 172, column: 11, scope: !321)
!355 = !DILocation(line: 175, column: 21, scope: !356)
!356 = distinct !DILexicalBlock(scope: !321, file: !112, line: 173, column: 13)
!357 = !DILocation(line: 176, column: 15, scope: !356)
!358 = !DILocation(line: 179, column: 21, scope: !356)
!359 = !DILocation(line: 180, column: 15, scope: !356)
!360 = !DILocation(line: 183, column: 30, scope: !356)
!361 = !DILocation(line: 184, column: 15, scope: !356)
!362 = distinct !{!362, !349, !363}
!363 = !DILocation(line: 185, column: 13, scope: !321)
!364 = !DILocation(line: 187, column: 13, scope: !321)
!365 = !DILocation(line: 188, column: 13, scope: !321)
!366 = distinct !{!366, !312, !367}
!367 = !DILocation(line: 189, column: 7, scope: !310)
!368 = !DILabel(scope: !260, name: "just_echo", file: !112, line: 191)
!369 = !DILocation(line: 191, column: 1, scope: !260)
!370 = !DILocation(line: 193, column: 7, scope: !371)
!371 = distinct !DILexicalBlock(scope: !260, file: !112, line: 193, column: 7)
!372 = !DILocation(line: 193, column: 13, scope: !371)
!373 = !DILocation(line: 193, column: 16, scope: !371)
!374 = !DILocation(line: 193, column: 7, scope: !260)
!375 = !DILocation(line: 195, column: 7, scope: !376)
!376 = distinct !DILexicalBlock(scope: !371, file: !112, line: 194, column: 5)
!377 = !DILocation(line: 195, column: 14, scope: !376)
!378 = !DILocation(line: 195, column: 19, scope: !376)
!379 = !DILocalVariable(name: "s", scope: !380, file: !112, line: 197, type: !6)
!380 = distinct !DILexicalBlock(scope: !376, file: !112, line: 196, column: 9)
!381 = !DILocation(line: 197, column: 23, scope: !380)
!382 = !DILocation(line: 197, column: 27, scope: !380)
!383 = !DILocalVariable(name: "c", scope: !380, file: !112, line: 198, type: !130)
!384 = !DILocation(line: 198, column: 25, scope: !380)
!385 = !DILocation(line: 200, column: 11, scope: !380)
!386 = !DILocation(line: 200, column: 25, scope: !380)
!387 = !DILocation(line: 200, column: 23, scope: !380)
!388 = !DILocation(line: 200, column: 21, scope: !380)
!389 = !DILocation(line: 202, column: 19, scope: !390)
!390 = distinct !DILexicalBlock(scope: !391, file: !112, line: 202, column: 19)
!391 = distinct !DILexicalBlock(scope: !380, file: !112, line: 201, column: 13)
!392 = !DILocation(line: 202, column: 21, scope: !390)
!393 = !DILocation(line: 202, column: 29, scope: !390)
!394 = !DILocation(line: 202, column: 33, scope: !390)
!395 = !DILocation(line: 202, column: 32, scope: !390)
!396 = !DILocation(line: 202, column: 19, scope: !391)
!397 = !DILocation(line: 204, column: 33, scope: !398)
!398 = distinct !DILexicalBlock(scope: !390, file: !112, line: 203, column: 17)
!399 = !DILocation(line: 204, column: 31, scope: !398)
!400 = !DILocation(line: 204, column: 29, scope: !398)
!401 = !DILocation(line: 204, column: 27, scope: !398)
!402 = !DILocation(line: 204, column: 19, scope: !398)
!403 = !DILocation(line: 206, column: 33, scope: !404)
!404 = distinct !DILexicalBlock(scope: !398, file: !112, line: 205, column: 21)
!405 = !DILocation(line: 206, column: 41, scope: !404)
!406 = !DILocation(line: 207, column: 33, scope: !404)
!407 = !DILocation(line: 207, column: 41, scope: !404)
!408 = !DILocation(line: 208, column: 31, scope: !404)
!409 = !DILocation(line: 209, column: 33, scope: !404)
!410 = !DILocation(line: 209, column: 43, scope: !404)
!411 = !DILocation(line: 210, column: 33, scope: !404)
!412 = !DILocation(line: 210, column: 41, scope: !404)
!413 = !DILocation(line: 211, column: 33, scope: !404)
!414 = !DILocation(line: 211, column: 41, scope: !404)
!415 = !DILocation(line: 212, column: 33, scope: !404)
!416 = !DILocation(line: 212, column: 41, scope: !404)
!417 = !DILocation(line: 213, column: 33, scope: !404)
!418 = !DILocation(line: 213, column: 41, scope: !404)
!419 = !DILocation(line: 214, column: 33, scope: !404)
!420 = !DILocation(line: 214, column: 41, scope: !404)
!421 = !DILocalVariable(name: "ch", scope: !422, file: !112, line: 217, type: !130)
!422 = distinct !DILexicalBlock(scope: !404, file: !112, line: 216, column: 23)
!423 = !DILocation(line: 217, column: 39, scope: !422)
!424 = !DILocation(line: 217, column: 45, scope: !422)
!425 = !DILocation(line: 217, column: 44, scope: !422)
!426 = !DILocation(line: 218, column: 31, scope: !427)
!427 = distinct !DILexicalBlock(scope: !422, file: !112, line: 218, column: 29)
!428 = !DILocation(line: 218, column: 29, scope: !422)
!429 = !DILocation(line: 219, column: 27, scope: !427)
!430 = !DILocation(line: 220, column: 26, scope: !422)
!431 = !DILocation(line: 221, column: 39, scope: !422)
!432 = !DILocation(line: 221, column: 29, scope: !422)
!433 = !DILocation(line: 221, column: 27, scope: !422)
!434 = !DILocation(line: 222, column: 31, scope: !422)
!435 = !DILocation(line: 222, column: 30, scope: !422)
!436 = !DILocation(line: 222, column: 28, scope: !422)
!437 = !DILocation(line: 223, column: 29, scope: !438)
!438 = distinct !DILexicalBlock(scope: !422, file: !112, line: 223, column: 29)
!439 = !DILocation(line: 223, column: 29, scope: !422)
!440 = !DILocation(line: 225, column: 30, scope: !441)
!441 = distinct !DILexicalBlock(scope: !438, file: !112, line: 224, column: 27)
!442 = !DILocation(line: 226, column: 33, scope: !441)
!443 = !DILocation(line: 226, column: 35, scope: !441)
!444 = !DILocation(line: 226, column: 52, scope: !441)
!445 = !DILocation(line: 226, column: 42, scope: !441)
!446 = !DILocation(line: 226, column: 40, scope: !441)
!447 = !DILocation(line: 226, column: 31, scope: !441)
!448 = !DILocation(line: 227, column: 27, scope: !441)
!449 = !DILocation(line: 229, column: 23, scope: !404)
!450 = !DILocation(line: 231, column: 25, scope: !404)
!451 = !DILocation(line: 232, column: 38, scope: !452)
!452 = distinct !DILexicalBlock(scope: !404, file: !112, line: 232, column: 27)
!453 = !DILocation(line: 232, column: 37, scope: !452)
!454 = !DILocation(line: 232, column: 34, scope: !452)
!455 = !DILocation(line: 232, column: 40, scope: !452)
!456 = !DILocation(line: 232, column: 44, scope: !452)
!457 = !DILocation(line: 232, column: 43, scope: !452)
!458 = !DILocation(line: 232, column: 46, scope: !452)
!459 = !DILocation(line: 232, column: 27, scope: !404)
!460 = !DILocation(line: 233, column: 25, scope: !452)
!461 = !DILocation(line: 234, column: 29, scope: !404)
!462 = !DILocation(line: 234, column: 27, scope: !404)
!463 = !DILocation(line: 234, column: 25, scope: !404)
!464 = !DILocation(line: 235, column: 23, scope: !404)
!465 = !DILocation(line: 238, column: 25, scope: !404)
!466 = !DILocation(line: 239, column: 35, scope: !467)
!467 = distinct !DILexicalBlock(scope: !404, file: !112, line: 239, column: 27)
!468 = !DILocation(line: 239, column: 34, scope: !467)
!469 = !DILocation(line: 239, column: 31, scope: !467)
!470 = !DILocation(line: 239, column: 37, scope: !467)
!471 = !DILocation(line: 239, column: 41, scope: !467)
!472 = !DILocation(line: 239, column: 40, scope: !467)
!473 = !DILocation(line: 239, column: 43, scope: !467)
!474 = !DILocation(line: 239, column: 27, scope: !404)
!475 = !DILocation(line: 240, column: 29, scope: !467)
!476 = !DILocation(line: 240, column: 31, scope: !467)
!477 = !DILocation(line: 240, column: 40, scope: !467)
!478 = !DILocation(line: 240, column: 38, scope: !467)
!479 = !DILocation(line: 240, column: 43, scope: !467)
!480 = !DILocation(line: 240, column: 35, scope: !467)
!481 = !DILocation(line: 240, column: 27, scope: !467)
!482 = !DILocation(line: 240, column: 25, scope: !467)
!483 = !DILocation(line: 241, column: 35, scope: !484)
!484 = distinct !DILexicalBlock(scope: !404, file: !112, line: 241, column: 27)
!485 = !DILocation(line: 241, column: 34, scope: !484)
!486 = !DILocation(line: 241, column: 31, scope: !484)
!487 = !DILocation(line: 241, column: 37, scope: !484)
!488 = !DILocation(line: 241, column: 41, scope: !484)
!489 = !DILocation(line: 241, column: 40, scope: !484)
!490 = !DILocation(line: 241, column: 43, scope: !484)
!491 = !DILocation(line: 241, column: 27, scope: !404)
!492 = !DILocation(line: 242, column: 29, scope: !484)
!493 = !DILocation(line: 242, column: 31, scope: !484)
!494 = !DILocation(line: 242, column: 40, scope: !484)
!495 = !DILocation(line: 242, column: 38, scope: !484)
!496 = !DILocation(line: 242, column: 43, scope: !484)
!497 = !DILocation(line: 242, column: 35, scope: !484)
!498 = !DILocation(line: 242, column: 27, scope: !484)
!499 = !DILocation(line: 242, column: 25, scope: !484)
!500 = !DILocation(line: 243, column: 23, scope: !404)
!501 = !DILocation(line: 244, column: 32, scope: !404)
!502 = !DILabel(scope: !404, name: "not_an_escape", file: !112, line: 246)
!503 = !DILocation(line: 246, column: 21, scope: !404)
!504 = !DILocation(line: 247, column: 31, scope: !404)
!505 = !DILocation(line: 247, column: 47, scope: !404)
!506 = !DILocation(line: 249, column: 17, scope: !398)
!507 = !DILocation(line: 250, column: 15, scope: !391)
!508 = distinct !{!508, !385, !509}
!509 = !DILocation(line: 251, column: 13, scope: !380)
!510 = !DILocation(line: 252, column: 15, scope: !380)
!511 = !DILocation(line: 253, column: 15, scope: !380)
!512 = !DILocation(line: 254, column: 15, scope: !513)
!513 = distinct !DILexicalBlock(scope: !380, file: !112, line: 254, column: 15)
!514 = !DILocation(line: 254, column: 20, scope: !513)
!515 = !DILocation(line: 254, column: 15, scope: !380)
!516 = !DILocation(line: 255, column: 13, scope: !513)
!517 = distinct !{!517, !375, !518}
!518 = !DILocation(line: 256, column: 9, scope: !376)
!519 = !DILocation(line: 257, column: 5, scope: !376)
!520 = !DILocation(line: 260, column: 7, scope: !521)
!521 = distinct !DILexicalBlock(scope: !371, file: !112, line: 259, column: 5)
!522 = !DILocation(line: 260, column: 14, scope: !521)
!523 = !DILocation(line: 260, column: 19, scope: !521)
!524 = !DILocation(line: 262, column: 11, scope: !525)
!525 = distinct !DILexicalBlock(scope: !521, file: !112, line: 261, column: 9)
!526 = !DILocation(line: 263, column: 15, scope: !525)
!527 = !DILocation(line: 264, column: 15, scope: !525)
!528 = !DILocation(line: 265, column: 15, scope: !529)
!529 = distinct !DILexicalBlock(scope: !525, file: !112, line: 265, column: 15)
!530 = !DILocation(line: 265, column: 20, scope: !529)
!531 = !DILocation(line: 265, column: 15, scope: !525)
!532 = !DILocation(line: 266, column: 13, scope: !529)
!533 = distinct !{!533, !520, !534}
!534 = !DILocation(line: 267, column: 9, scope: !521)
!535 = !DILocation(line: 270, column: 7, scope: !536)
!536 = distinct !DILexicalBlock(scope: !260, file: !112, line: 270, column: 7)
!537 = !DILocation(line: 270, column: 7, scope: !260)
!538 = !DILocation(line: 271, column: 5, scope: !536)
!539 = !DILocation(line: 272, column: 3, scope: !260)
!540 = !DILocation(line: 273, column: 1, scope: !260)
!541 = !DILocalVariable(name: "argc", arg: 1, scope: !542, file: !112, line: 108, type: !25)
!542 = distinct !DISubprogram(name: "main", scope: !112, file: !112, line: 108, type: !261, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !543, retainedNodes: !4)
!543 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!544 = !DILocalVariable(name: "argv", arg: 2, scope: !542, file: !112, line: 108, type: !263)
!545 = !DILocalVariable(name: "display_return", scope: !542, file: !112, line: 110, type: !17)
!546 = !DILocalVariable(name: "posixly_correct", scope: !542, file: !112, line: 111, type: !17)
!547 = !DILocalVariable(name: "allow_options", scope: !542, file: !112, line: 112, type: !17)
!548 = !DILocalVariable(name: "do_v9", scope: !549, file: !112, line: 119, type: !17)
!549 = distinct !DISubprogram(name: "main", scope: !112, file: !112, line: 108, type: !261, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !550, retainedNodes: !4)
!550 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!551 = !DILocalVariable(name: "i", scope: !552, file: !112, line: 151, type: !57)
!552 = distinct !DILexicalBlock(scope: !553, file: !112, line: 149, column: 7)
!553 = distinct !DILexicalBlock(scope: !554, file: !112, line: 147, column: 7)
!554 = distinct !DISubprogram(name: "main", scope: !112, file: !112, line: 108, type: !261, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !555, retainedNodes: !4)
!555 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!556 = !DILocalVariable(name: "c", scope: !557, file: !112, line: 198, type: !130)
!557 = distinct !DILexicalBlock(scope: !558, file: !112, line: 196, column: 9)
!558 = distinct !DILexicalBlock(scope: !559, file: !112, line: 194, column: 5)
!559 = distinct !DILexicalBlock(scope: !560, file: !112, line: 193, column: 7)
!560 = distinct !DISubprogram(name: "main", scope: !112, file: !112, line: 108, type: !261, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !561, retainedNodes: !4)
!561 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!562 = distinct !DISubprogram(name: "hextobin", scope: !112, file: !112, line: 89, type: !563, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !111, retainedNodes: !4)
!563 = !DISubroutineType(types: !564)
!564 = !{!25, !130}
!565 = !DILocalVariable(name: "c", arg: 1, scope: !562, file: !112, line: 89, type: !130)
!566 = !DILocation(line: 89, column: 25, scope: !562)
!567 = !DILocation(line: 91, column: 11, scope: !562)
!568 = !DILocation(line: 91, column: 3, scope: !562)
!569 = !DILocation(line: 93, column: 21, scope: !570)
!570 = distinct !DILexicalBlock(scope: !562, file: !112, line: 92, column: 5)
!571 = !DILocation(line: 93, column: 23, scope: !570)
!572 = !DILocation(line: 93, column: 14, scope: !570)
!573 = !DILocation(line: 94, column: 25, scope: !570)
!574 = !DILocation(line: 95, column: 25, scope: !570)
!575 = !DILocation(line: 96, column: 25, scope: !570)
!576 = !DILocation(line: 97, column: 25, scope: !570)
!577 = !DILocation(line: 98, column: 25, scope: !570)
!578 = !DILocation(line: 99, column: 25, scope: !570)
!579 = !DILocation(line: 101, column: 1, scope: !562)
!580 = !DILocalVariable(name: "c", arg: 1, scope: !581, file: !112, line: 89, type: !130)
!581 = distinct !DISubprogram(name: "hextobin", scope: !112, file: !112, line: 89, type: !563, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !582, retainedNodes: !4)
!582 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!583 = distinct !DISubprogram(name: "close_stdout", scope: !16, file: !16, line: 117, type: !584, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !11, retainedNodes: !4)
!584 = !DISubroutineType(types: !585)
!585 = !{null}
!586 = !DILocation(line: 119, column: 21, scope: !587)
!587 = distinct !DILexicalBlock(scope: !583, file: !16, line: 119, column: 7)
!588 = !DILocation(line: 119, column: 7, scope: !587)
!589 = !DILocation(line: 119, column: 29, scope: !587)
!590 = !DILocation(line: 120, column: 7, scope: !587)
!591 = !DILocation(line: 120, column: 12, scope: !587)
!592 = !DILocation(line: 120, column: 25, scope: !587)
!593 = !DILocation(line: 120, column: 28, scope: !587)
!594 = !DILocation(line: 120, column: 34, scope: !587)
!595 = !DILocation(line: 119, column: 7, scope: !583)
!596 = !DILocalVariable(name: "write_error", scope: !597, file: !16, line: 122, type: !6)
!597 = distinct !DILexicalBlock(scope: !587, file: !16, line: 121, column: 5)
!598 = !DILocation(line: 122, column: 19, scope: !597)
!599 = !DILocation(line: 122, column: 33, scope: !597)
!600 = !DILocation(line: 123, column: 11, scope: !601)
!601 = distinct !DILexicalBlock(scope: !597, file: !16, line: 123, column: 11)
!602 = !DILocation(line: 123, column: 11, scope: !597)
!603 = !DILocation(line: 124, column: 19, scope: !601)
!604 = !DILocation(line: 124, column: 52, scope: !601)
!605 = !DILocation(line: 124, column: 36, scope: !601)
!606 = !DILocation(line: 125, column: 16, scope: !601)
!607 = !DILocation(line: 124, column: 9, scope: !601)
!608 = !DILocation(line: 127, column: 19, scope: !601)
!609 = !DILocation(line: 127, column: 32, scope: !601)
!610 = !DILocation(line: 127, column: 9, scope: !601)
!611 = !DILocation(line: 129, column: 14, scope: !597)
!612 = !DILocation(line: 129, column: 7, scope: !597)
!613 = !DILocation(line: 134, column: 42, scope: !614)
!614 = distinct !DILexicalBlock(scope: !583, file: !16, line: 134, column: 7)
!615 = !DILocation(line: 134, column: 28, scope: !614)
!616 = !DILocation(line: 134, column: 50, scope: !614)
!617 = !DILocation(line: 134, column: 7, scope: !583)
!618 = !DILocation(line: 135, column: 12, scope: !614)
!619 = !DILocation(line: 135, column: 5, scope: !614)
!620 = !DILocation(line: 136, column: 1, scope: !583)
!621 = distinct !DISubprogram(name: "set_program_name", scope: !34, file: !34, line: 39, type: !183, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !28, retainedNodes: !4)
!622 = !DILocalVariable(name: "argv0", arg: 1, scope: !621, file: !34, line: 39, type: !6)
!623 = !DILocation(line: 39, column: 31, scope: !621)
!624 = !DILocalVariable(name: "slash", scope: !621, file: !34, line: 46, type: !6)
!625 = !DILocation(line: 46, column: 15, scope: !621)
!626 = !DILocalVariable(name: "base", scope: !621, file: !34, line: 47, type: !6)
!627 = !DILocation(line: 47, column: 15, scope: !621)
!628 = !DILocation(line: 51, column: 7, scope: !629)
!629 = distinct !DILexicalBlock(scope: !621, file: !34, line: 51, column: 7)
!630 = !DILocation(line: 51, column: 13, scope: !629)
!631 = !DILocation(line: 51, column: 7, scope: !621)
!632 = !DILocation(line: 55, column: 14, scope: !633)
!633 = distinct !DILexicalBlock(scope: !629, file: !34, line: 52, column: 5)
!634 = !DILocation(line: 54, column: 7, scope: !633)
!635 = !DILocation(line: 56, column: 7, scope: !633)
!636 = !DILocation(line: 59, column: 20, scope: !621)
!637 = !DILocation(line: 59, column: 11, scope: !621)
!638 = !DILocation(line: 59, column: 9, scope: !621)
!639 = !DILocation(line: 60, column: 11, scope: !621)
!640 = !DILocation(line: 60, column: 17, scope: !621)
!641 = !DILocation(line: 60, column: 27, scope: !621)
!642 = !DILocation(line: 60, column: 33, scope: !621)
!643 = !DILocation(line: 60, column: 39, scope: !621)
!644 = !DILocation(line: 60, column: 8, scope: !621)
!645 = !DILocation(line: 61, column: 7, scope: !646)
!646 = distinct !DILexicalBlock(scope: !621, file: !34, line: 61, column: 7)
!647 = !DILocation(line: 61, column: 14, scope: !646)
!648 = !DILocation(line: 61, column: 12, scope: !646)
!649 = !DILocation(line: 61, column: 20, scope: !646)
!650 = !DILocation(line: 61, column: 25, scope: !646)
!651 = !DILocation(line: 61, column: 37, scope: !646)
!652 = !DILocation(line: 61, column: 42, scope: !646)
!653 = !DILocation(line: 61, column: 28, scope: !646)
!654 = !DILocation(line: 61, column: 61, scope: !646)
!655 = !DILocation(line: 61, column: 7, scope: !621)
!656 = !DILocation(line: 63, column: 15, scope: !657)
!657 = distinct !DILexicalBlock(scope: !646, file: !34, line: 62, column: 5)
!658 = !DILocation(line: 63, column: 13, scope: !657)
!659 = !DILocation(line: 64, column: 20, scope: !660)
!660 = distinct !DILexicalBlock(scope: !657, file: !34, line: 64, column: 11)
!661 = !DILocation(line: 64, column: 11, scope: !660)
!662 = !DILocation(line: 64, column: 36, scope: !660)
!663 = !DILocation(line: 64, column: 11, scope: !657)
!664 = !DILocation(line: 66, column: 19, scope: !665)
!665 = distinct !DILexicalBlock(scope: !660, file: !34, line: 65, column: 9)
!666 = !DILocation(line: 66, column: 24, scope: !665)
!667 = !DILocation(line: 66, column: 17, scope: !665)
!668 = !DILocation(line: 70, column: 52, scope: !665)
!669 = !DILocation(line: 70, column: 41, scope: !665)
!670 = !DILocation(line: 72, column: 9, scope: !665)
!671 = !DILocation(line: 73, column: 5, scope: !657)
!672 = !DILocation(line: 84, column: 18, scope: !621)
!673 = !DILocation(line: 84, column: 16, scope: !621)
!674 = !DILocation(line: 90, column: 38, scope: !621)
!675 = !DILocation(line: 90, column: 27, scope: !621)
!676 = !DILocation(line: 92, column: 1, scope: !621)
!677 = !DILocalVariable(name: "argv0", arg: 1, scope: !678, file: !34, line: 39, type: !6)
!678 = distinct !DISubprogram(name: "set_program_name", scope: !34, file: !34, line: 39, type: !183, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !679, retainedNodes: !4)
!679 = distinct !DICompileUnit(language: DW_LANG_C99, file: !29, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !30, globals: !680, nameTableKind: None)
!680 = !{!681}
!681 = !DIGlobalVariableExpression(var: !682, expr: !DIExpression())
!682 = distinct !DIGlobalVariable(name: "program_name", scope: !679, file: !34, line: 33, type: !6, isLocal: false, isDefinition: true)
!683 = !DILocalVariable(name: "slash", scope: !678, file: !34, line: 46, type: !6)
!684 = !DILocalVariable(name: "base", scope: !678, file: !34, line: 47, type: !6)
!685 = distinct !DISubprogram(name: "set_char_quoting", scope: !63, file: !63, line: 152, type: !686, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !37, retainedNodes: !4)
!686 = !DISubroutineType(types: !687)
!687 = !{!25, !688, !8, !25}
!688 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !76, size: 64)
!689 = !DILocalVariable(name: "o", arg: 1, scope: !685, file: !63, line: 152, type: !688)
!690 = !DILocation(line: 152, column: 43, scope: !685)
!691 = !DILocalVariable(name: "c", arg: 2, scope: !685, file: !63, line: 152, type: !8)
!692 = !DILocation(line: 152, column: 51, scope: !685)
!693 = !DILocalVariable(name: "i", arg: 3, scope: !685, file: !63, line: 152, type: !25)
!694 = !DILocation(line: 152, column: 58, scope: !685)
!695 = !DILocalVariable(name: "uc", scope: !685, file: !63, line: 154, type: !130)
!696 = !DILocation(line: 154, column: 17, scope: !685)
!697 = !DILocation(line: 154, column: 22, scope: !685)
!698 = !DILocalVariable(name: "p", scope: !685, file: !63, line: 155, type: !699)
!699 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !42, size: 64)
!700 = !DILocation(line: 155, column: 17, scope: !685)
!701 = !DILocation(line: 156, column: 6, scope: !685)
!702 = !DILocation(line: 156, column: 10, scope: !685)
!703 = !DILocation(line: 156, column: 41, scope: !685)
!704 = !DILocation(line: 156, column: 5, scope: !685)
!705 = !DILocation(line: 156, column: 59, scope: !685)
!706 = !DILocation(line: 156, column: 62, scope: !685)
!707 = !DILocation(line: 156, column: 57, scope: !685)
!708 = !DILocalVariable(name: "shift", scope: !685, file: !63, line: 157, type: !25)
!709 = !DILocation(line: 157, column: 7, scope: !685)
!710 = !DILocation(line: 157, column: 15, scope: !685)
!711 = !DILocation(line: 157, column: 18, scope: !685)
!712 = !DILocalVariable(name: "r", scope: !685, file: !63, line: 158, type: !25)
!713 = !DILocation(line: 158, column: 7, scope: !685)
!714 = !DILocation(line: 158, column: 13, scope: !685)
!715 = !DILocation(line: 158, column: 12, scope: !685)
!716 = !DILocation(line: 158, column: 18, scope: !685)
!717 = !DILocation(line: 158, column: 15, scope: !685)
!718 = !DILocation(line: 158, column: 25, scope: !685)
!719 = !DILocation(line: 159, column: 11, scope: !685)
!720 = !DILocation(line: 159, column: 13, scope: !685)
!721 = !DILocation(line: 159, column: 20, scope: !685)
!722 = !DILocation(line: 159, column: 18, scope: !685)
!723 = !DILocation(line: 159, column: 26, scope: !685)
!724 = !DILocation(line: 159, column: 23, scope: !685)
!725 = !DILocation(line: 159, column: 4, scope: !685)
!726 = !DILocation(line: 159, column: 6, scope: !685)
!727 = !DILocation(line: 160, column: 10, scope: !685)
!728 = !DILocation(line: 160, column: 3, scope: !685)
!729 = !DILocalVariable(name: "o", arg: 1, scope: !730, file: !63, line: 152, type: !733)
!730 = distinct !DISubprogram(name: "set_char_quoting", scope: !63, file: !63, line: 152, type: !731, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !741, retainedNodes: !4)
!731 = !DISubroutineType(types: !732)
!732 = !{!25, !733, !8, !25}
!733 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !734, size: 64)
!734 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !735)
!735 = !{!736, !737, !738, !739, !740}
!736 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !734, file: !63, line: 68, baseType: !40, size: 32)
!737 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !734, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!738 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !734, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!739 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !734, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!740 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !734, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!741 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !742, nameTableKind: None)
!742 = !{!743, !745, !747, !749, !751, !753, !760, !762}
!743 = !DIGlobalVariableExpression(var: !744, expr: !DIExpression())
!744 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !741, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!745 = !DIGlobalVariableExpression(var: !746, expr: !DIExpression())
!746 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !741, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!747 = !DIGlobalVariableExpression(var: !748, expr: !DIExpression())
!748 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !741, file: !63, line: 1052, type: !734, isLocal: false, isDefinition: true)
!749 = !DIGlobalVariableExpression(var: !750, expr: !DIExpression())
!750 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !741, file: !63, line: 116, type: !734, isLocal: true, isDefinition: true)
!751 = !DIGlobalVariableExpression(var: !752, expr: !DIExpression())
!752 = distinct !DIGlobalVariable(name: "slot0", scope: !741, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!753 = !DIGlobalVariableExpression(var: !754, expr: !DIExpression())
!754 = distinct !DIGlobalVariable(name: "slotvec", scope: !741, file: !63, line: 845, type: !755, isLocal: true, isDefinition: true)
!755 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !756, size: 64)
!756 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !757)
!757 = !{!758, !759}
!758 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !756, file: !63, line: 836, baseType: !57, size: 64)
!759 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !756, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!760 = !DIGlobalVariableExpression(var: !761, expr: !DIExpression())
!761 = distinct !DIGlobalVariable(name: "nslots", scope: !741, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!762 = !DIGlobalVariableExpression(var: !763, expr: !DIExpression())
!763 = distinct !DIGlobalVariable(name: "slotvec0", scope: !741, file: !63, line: 844, type: !756, isLocal: true, isDefinition: true)
!764 = !DILocalVariable(name: "c", arg: 2, scope: !730, file: !63, line: 152, type: !8)
!765 = !DILocalVariable(name: "i", arg: 3, scope: !730, file: !63, line: 152, type: !25)
!766 = !DILocalVariable(name: "uc", scope: !730, file: !63, line: 154, type: !130)
!767 = !DILocalVariable(name: "p", scope: !730, file: !63, line: 155, type: !699)
!768 = !DILocalVariable(name: "shift", scope: !769, file: !63, line: 157, type: !25)
!769 = distinct !DISubprogram(name: "set_char_quoting", scope: !63, file: !63, line: 152, type: !770, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !780, retainedNodes: !4)
!770 = !DISubroutineType(types: !771)
!771 = !{!25, !772, !8, !25}
!772 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !773, size: 64)
!773 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !774)
!774 = !{!775, !776, !777, !778, !779}
!775 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !773, file: !63, line: 68, baseType: !40, size: 32)
!776 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !773, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!777 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !773, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!778 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !773, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!779 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !773, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!780 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !781, nameTableKind: None)
!781 = !{!782, !784, !786, !788, !790, !792, !799, !801}
!782 = !DIGlobalVariableExpression(var: !783, expr: !DIExpression())
!783 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !780, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!784 = !DIGlobalVariableExpression(var: !785, expr: !DIExpression())
!785 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !780, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!786 = !DIGlobalVariableExpression(var: !787, expr: !DIExpression())
!787 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !780, file: !63, line: 1052, type: !773, isLocal: false, isDefinition: true)
!788 = !DIGlobalVariableExpression(var: !789, expr: !DIExpression())
!789 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !780, file: !63, line: 116, type: !773, isLocal: true, isDefinition: true)
!790 = !DIGlobalVariableExpression(var: !791, expr: !DIExpression())
!791 = distinct !DIGlobalVariable(name: "slot0", scope: !780, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!792 = !DIGlobalVariableExpression(var: !793, expr: !DIExpression())
!793 = distinct !DIGlobalVariable(name: "slotvec", scope: !780, file: !63, line: 845, type: !794, isLocal: true, isDefinition: true)
!794 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !795, size: 64)
!795 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !796)
!796 = !{!797, !798}
!797 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !795, file: !63, line: 836, baseType: !57, size: 64)
!798 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !795, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!799 = !DIGlobalVariableExpression(var: !800, expr: !DIExpression())
!800 = distinct !DIGlobalVariable(name: "nslots", scope: !780, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!801 = !DIGlobalVariableExpression(var: !802, expr: !DIExpression())
!802 = distinct !DIGlobalVariable(name: "slotvec0", scope: !780, file: !63, line: 844, type: !795, isLocal: true, isDefinition: true)
!803 = !DILocalVariable(name: "r", scope: !769, file: !63, line: 158, type: !25)
!804 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !63, file: !63, line: 982, type: !805, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !37, retainedNodes: !4)
!805 = !DISubroutineType(types: !806)
!806 = !{!32, !6, !57, !8}
!807 = !DILocalVariable(name: "arg", arg: 1, scope: !804, file: !63, line: 982, type: !6)
!808 = !DILocation(line: 982, column: 32, scope: !804)
!809 = !DILocalVariable(name: "argsize", arg: 2, scope: !804, file: !63, line: 982, type: !57)
!810 = !DILocation(line: 982, column: 44, scope: !804)
!811 = !DILocalVariable(name: "ch", arg: 3, scope: !804, file: !63, line: 982, type: !8)
!812 = !DILocation(line: 982, column: 58, scope: !804)
!813 = !DILocalVariable(name: "options", scope: !804, file: !63, line: 984, type: !76)
!814 = !DILocation(line: 984, column: 26, scope: !804)
!815 = !DILocation(line: 985, column: 13, scope: !804)
!816 = !DILocation(line: 986, column: 31, scope: !804)
!817 = !DILocation(line: 986, column: 3, scope: !804)
!818 = !DILocation(line: 987, column: 33, scope: !804)
!819 = !DILocation(line: 987, column: 38, scope: !804)
!820 = !DILocation(line: 987, column: 10, scope: !804)
!821 = !DILocation(line: 987, column: 3, scope: !804)
!822 = !DILocalVariable(name: "arg", arg: 1, scope: !823, file: !63, line: 982, type: !6)
!823 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !63, file: !63, line: 982, type: !805, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !824, retainedNodes: !4)
!824 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !825, nameTableKind: None)
!825 = !{!826, !828, !830, !839, !841, !843, !850, !852}
!826 = !DIGlobalVariableExpression(var: !827, expr: !DIExpression())
!827 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !824, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!828 = !DIGlobalVariableExpression(var: !829, expr: !DIExpression())
!829 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !824, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!830 = !DIGlobalVariableExpression(var: !831, expr: !DIExpression())
!831 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !824, file: !63, line: 1052, type: !832, isLocal: false, isDefinition: true)
!832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !833)
!833 = !{!834, !835, !836, !837, !838}
!834 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !832, file: !63, line: 68, baseType: !40, size: 32)
!835 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !832, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!836 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !832, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!837 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !832, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!838 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !832, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!839 = !DIGlobalVariableExpression(var: !840, expr: !DIExpression())
!840 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !824, file: !63, line: 116, type: !832, isLocal: true, isDefinition: true)
!841 = !DIGlobalVariableExpression(var: !842, expr: !DIExpression())
!842 = distinct !DIGlobalVariable(name: "slot0", scope: !824, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!843 = !DIGlobalVariableExpression(var: !844, expr: !DIExpression())
!844 = distinct !DIGlobalVariable(name: "slotvec", scope: !824, file: !63, line: 845, type: !845, isLocal: true, isDefinition: true)
!845 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !846, size: 64)
!846 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !847)
!847 = !{!848, !849}
!848 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !846, file: !63, line: 836, baseType: !57, size: 64)
!849 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !846, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!850 = !DIGlobalVariableExpression(var: !851, expr: !DIExpression())
!851 = distinct !DIGlobalVariable(name: "nslots", scope: !824, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!852 = !DIGlobalVariableExpression(var: !853, expr: !DIExpression())
!853 = distinct !DIGlobalVariable(name: "slotvec0", scope: !824, file: !63, line: 844, type: !846, isLocal: true, isDefinition: true)
!854 = !DILocalVariable(name: "argsize", arg: 2, scope: !823, file: !63, line: 982, type: !57)
!855 = !DILocalVariable(name: "ch", arg: 3, scope: !823, file: !63, line: 982, type: !8)
!856 = !DILocalVariable(name: "options", scope: !823, file: !63, line: 984, type: !832)
!857 = distinct !DISubprogram(name: "quotearg_n_options", scope: !63, file: !63, line: 877, type: !858, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !37, retainedNodes: !4)
!858 = !DISubroutineType(types: !859)
!859 = !{!32, !25, !6, !57, !860}
!860 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !861, size: 64)
!861 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !76)
!862 = !DILocalVariable(name: "n", arg: 1, scope: !857, file: !63, line: 877, type: !25)
!863 = !DILocation(line: 877, column: 25, scope: !857)
!864 = !DILocalVariable(name: "arg", arg: 2, scope: !857, file: !63, line: 877, type: !6)
!865 = !DILocation(line: 877, column: 40, scope: !857)
!866 = !DILocalVariable(name: "argsize", arg: 3, scope: !857, file: !63, line: 877, type: !57)
!867 = !DILocation(line: 877, column: 52, scope: !857)
!868 = !DILocalVariable(name: "options", arg: 4, scope: !857, file: !63, line: 878, type: !860)
!869 = !DILocation(line: 878, column: 51, scope: !857)
!870 = !DILocalVariable(name: "e", scope: !857, file: !63, line: 880, type: !25)
!871 = !DILocation(line: 880, column: 7, scope: !857)
!872 = !DILocation(line: 880, column: 11, scope: !857)
!873 = !DILocalVariable(name: "sv", scope: !857, file: !63, line: 882, type: !93)
!874 = !DILocation(line: 882, column: 19, scope: !857)
!875 = !DILocation(line: 882, column: 24, scope: !857)
!876 = !DILocation(line: 884, column: 7, scope: !877)
!877 = distinct !DILexicalBlock(scope: !857, file: !63, line: 884, column: 7)
!878 = !DILocation(line: 884, column: 9, scope: !877)
!879 = !DILocation(line: 884, column: 7, scope: !857)
!880 = !DILocation(line: 885, column: 5, scope: !877)
!881 = !DILocation(line: 887, column: 7, scope: !882)
!882 = distinct !DILexicalBlock(scope: !857, file: !63, line: 887, column: 7)
!883 = !DILocation(line: 887, column: 17, scope: !882)
!884 = !DILocation(line: 887, column: 14, scope: !882)
!885 = !DILocation(line: 887, column: 7, scope: !857)
!886 = !DILocalVariable(name: "preallocated", scope: !887, file: !63, line: 889, type: !17)
!887 = distinct !DILexicalBlock(scope: !882, file: !63, line: 888, column: 5)
!888 = !DILocation(line: 889, column: 12, scope: !887)
!889 = !DILocation(line: 889, column: 28, scope: !887)
!890 = !DILocation(line: 889, column: 31, scope: !887)
!891 = !DILocalVariable(name: "nmax", scope: !887, file: !63, line: 890, type: !25)
!892 = !DILocation(line: 890, column: 11, scope: !887)
!893 = !DILocation(line: 892, column: 11, scope: !894)
!894 = distinct !DILexicalBlock(scope: !887, file: !63, line: 892, column: 11)
!895 = !DILocation(line: 892, column: 18, scope: !894)
!896 = !DILocation(line: 892, column: 16, scope: !894)
!897 = !DILocation(line: 892, column: 11, scope: !887)
!898 = !DILocation(line: 893, column: 9, scope: !894)
!899 = !DILocation(line: 895, column: 32, scope: !887)
!900 = !DILocation(line: 895, column: 54, scope: !887)
!901 = !DILocation(line: 895, column: 59, scope: !887)
!902 = !DILocation(line: 895, column: 61, scope: !887)
!903 = !DILocation(line: 895, column: 58, scope: !887)
!904 = !DILocation(line: 895, column: 66, scope: !887)
!905 = !DILocation(line: 895, column: 22, scope: !887)
!906 = !DILocation(line: 895, column: 20, scope: !887)
!907 = !DILocation(line: 895, column: 15, scope: !887)
!908 = !DILocation(line: 896, column: 11, scope: !909)
!909 = distinct !DILexicalBlock(scope: !887, file: !63, line: 896, column: 11)
!910 = !DILocation(line: 896, column: 11, scope: !887)
!911 = !DILocation(line: 897, column: 10, scope: !909)
!912 = !DILocation(line: 897, column: 15, scope: !909)
!913 = !DILocation(line: 897, column: 9, scope: !909)
!914 = !DILocation(line: 898, column: 15, scope: !887)
!915 = !DILocation(line: 898, column: 20, scope: !887)
!916 = !DILocation(line: 898, column: 18, scope: !887)
!917 = !DILocation(line: 898, column: 7, scope: !887)
!918 = !DILocation(line: 898, column: 32, scope: !887)
!919 = !DILocation(line: 898, column: 34, scope: !887)
!920 = !DILocation(line: 898, column: 40, scope: !887)
!921 = !DILocation(line: 898, column: 38, scope: !887)
!922 = !DILocation(line: 898, column: 31, scope: !887)
!923 = !DILocation(line: 898, column: 48, scope: !887)
!924 = !DILocation(line: 899, column: 16, scope: !887)
!925 = !DILocation(line: 899, column: 18, scope: !887)
!926 = !DILocation(line: 899, column: 14, scope: !887)
!927 = !DILocation(line: 900, column: 5, scope: !887)
!928 = !DILocalVariable(name: "size", scope: !929, file: !63, line: 903, type: !57)
!929 = distinct !DILexicalBlock(scope: !857, file: !63, line: 902, column: 3)
!930 = !DILocation(line: 903, column: 12, scope: !929)
!931 = !DILocation(line: 903, column: 19, scope: !929)
!932 = !DILocation(line: 903, column: 22, scope: !929)
!933 = !DILocation(line: 903, column: 25, scope: !929)
!934 = !DILocalVariable(name: "val", scope: !929, file: !63, line: 904, type: !32)
!935 = !DILocation(line: 904, column: 11, scope: !929)
!936 = !DILocation(line: 904, column: 17, scope: !929)
!937 = !DILocation(line: 904, column: 20, scope: !929)
!938 = !DILocation(line: 904, column: 23, scope: !929)
!939 = !DILocalVariable(name: "flags", scope: !929, file: !63, line: 906, type: !25)
!940 = !DILocation(line: 906, column: 9, scope: !929)
!941 = !DILocation(line: 906, column: 17, scope: !929)
!942 = !DILocation(line: 906, column: 26, scope: !929)
!943 = !DILocation(line: 906, column: 32, scope: !929)
!944 = !DILocalVariable(name: "qsize", scope: !929, file: !63, line: 907, type: !57)
!945 = !DILocation(line: 907, column: 12, scope: !929)
!946 = !DILocation(line: 907, column: 46, scope: !929)
!947 = !DILocation(line: 907, column: 51, scope: !929)
!948 = !DILocation(line: 907, column: 57, scope: !929)
!949 = !DILocation(line: 907, column: 62, scope: !929)
!950 = !DILocation(line: 908, column: 46, scope: !929)
!951 = !DILocation(line: 908, column: 55, scope: !929)
!952 = !DILocation(line: 908, column: 62, scope: !929)
!953 = !DILocation(line: 909, column: 46, scope: !929)
!954 = !DILocation(line: 909, column: 55, scope: !929)
!955 = !DILocation(line: 910, column: 46, scope: !929)
!956 = !DILocation(line: 910, column: 55, scope: !929)
!957 = !DILocation(line: 911, column: 46, scope: !929)
!958 = !DILocation(line: 911, column: 55, scope: !929)
!959 = !DILocation(line: 907, column: 20, scope: !929)
!960 = !DILocation(line: 913, column: 9, scope: !961)
!961 = distinct !DILexicalBlock(scope: !929, file: !63, line: 913, column: 9)
!962 = !DILocation(line: 913, column: 17, scope: !961)
!963 = !DILocation(line: 913, column: 14, scope: !961)
!964 = !DILocation(line: 913, column: 9, scope: !929)
!965 = !DILocation(line: 915, column: 29, scope: !966)
!966 = distinct !DILexicalBlock(scope: !961, file: !63, line: 914, column: 7)
!967 = !DILocation(line: 915, column: 35, scope: !966)
!968 = !DILocation(line: 915, column: 27, scope: !966)
!969 = !DILocation(line: 915, column: 9, scope: !966)
!970 = !DILocation(line: 915, column: 12, scope: !966)
!971 = !DILocation(line: 915, column: 15, scope: !966)
!972 = !DILocation(line: 915, column: 20, scope: !966)
!973 = !DILocation(line: 916, column: 13, scope: !974)
!974 = distinct !DILexicalBlock(scope: !966, file: !63, line: 916, column: 13)
!975 = !DILocation(line: 916, column: 17, scope: !974)
!976 = !DILocation(line: 916, column: 13, scope: !966)
!977 = !DILocation(line: 917, column: 17, scope: !974)
!978 = !DILocation(line: 917, column: 11, scope: !974)
!979 = !DILocation(line: 918, column: 39, scope: !966)
!980 = !DILocation(line: 918, column: 27, scope: !966)
!981 = !DILocation(line: 918, column: 25, scope: !966)
!982 = !DILocation(line: 918, column: 9, scope: !966)
!983 = !DILocation(line: 918, column: 12, scope: !966)
!984 = !DILocation(line: 918, column: 15, scope: !966)
!985 = !DILocation(line: 918, column: 19, scope: !966)
!986 = !DILocation(line: 919, column: 35, scope: !966)
!987 = !DILocation(line: 919, column: 40, scope: !966)
!988 = !DILocation(line: 919, column: 46, scope: !966)
!989 = !DILocation(line: 919, column: 51, scope: !966)
!990 = !DILocation(line: 919, column: 60, scope: !966)
!991 = !DILocation(line: 919, column: 69, scope: !966)
!992 = !DILocation(line: 920, column: 35, scope: !966)
!993 = !DILocation(line: 920, column: 42, scope: !966)
!994 = !DILocation(line: 920, column: 51, scope: !966)
!995 = !DILocation(line: 921, column: 35, scope: !966)
!996 = !DILocation(line: 921, column: 44, scope: !966)
!997 = !DILocation(line: 922, column: 35, scope: !966)
!998 = !DILocation(line: 922, column: 44, scope: !966)
!999 = !DILocation(line: 919, column: 9, scope: !966)
!1000 = !DILocation(line: 923, column: 7, scope: !966)
!1001 = !DILocation(line: 925, column: 13, scope: !929)
!1002 = !DILocation(line: 925, column: 5, scope: !929)
!1003 = !DILocation(line: 925, column: 11, scope: !929)
!1004 = !DILocation(line: 926, column: 12, scope: !929)
!1005 = !DILocation(line: 926, column: 5, scope: !929)
!1006 = !DILocalVariable(name: "n", arg: 1, scope: !1007, file: !63, line: 877, type: !25)
!1007 = distinct !DISubprogram(name: "quotearg_n_options", scope: !63, file: !63, line: 877, type: !1008, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1019, retainedNodes: !4)
!1008 = !DISubroutineType(types: !1009)
!1009 = !{!32, !25, !6, !57, !1010}
!1010 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1011, size: 64)
!1011 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1012)
!1012 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !1013)
!1013 = !{!1014, !1015, !1016, !1017, !1018}
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1012, file: !63, line: 68, baseType: !40, size: 32)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1012, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1012, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1012, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1012, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!1019 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !1020, nameTableKind: None)
!1020 = !{!1021, !1023, !1025, !1027, !1029, !1031, !1038, !1040}
!1021 = !DIGlobalVariableExpression(var: !1022, expr: !DIExpression())
!1022 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1019, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!1023 = !DIGlobalVariableExpression(var: !1024, expr: !DIExpression())
!1024 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1019, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!1025 = !DIGlobalVariableExpression(var: !1026, expr: !DIExpression())
!1026 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1019, file: !63, line: 1052, type: !1012, isLocal: false, isDefinition: true)
!1027 = !DIGlobalVariableExpression(var: !1028, expr: !DIExpression())
!1028 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1019, file: !63, line: 116, type: !1012, isLocal: true, isDefinition: true)
!1029 = !DIGlobalVariableExpression(var: !1030, expr: !DIExpression())
!1030 = distinct !DIGlobalVariable(name: "slot0", scope: !1019, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!1031 = !DIGlobalVariableExpression(var: !1032, expr: !DIExpression())
!1032 = distinct !DIGlobalVariable(name: "slotvec", scope: !1019, file: !63, line: 845, type: !1033, isLocal: true, isDefinition: true)
!1033 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1034, size: 64)
!1034 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !1035)
!1035 = !{!1036, !1037}
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1034, file: !63, line: 836, baseType: !57, size: 64)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1034, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!1038 = !DIGlobalVariableExpression(var: !1039, expr: !DIExpression())
!1039 = distinct !DIGlobalVariable(name: "nslots", scope: !1019, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!1040 = !DIGlobalVariableExpression(var: !1041, expr: !DIExpression())
!1041 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1019, file: !63, line: 844, type: !1034, isLocal: true, isDefinition: true)
!1042 = !DILocalVariable(name: "arg", arg: 2, scope: !1007, file: !63, line: 877, type: !6)
!1043 = !DILocalVariable(name: "argsize", arg: 3, scope: !1007, file: !63, line: 877, type: !57)
!1044 = !DILocalVariable(name: "options", arg: 4, scope: !1007, file: !63, line: 878, type: !1010)
!1045 = !DILocalVariable(name: "e", scope: !1007, file: !63, line: 880, type: !25)
!1046 = !DILocalVariable(name: "sv", scope: !1007, file: !63, line: 882, type: !1033)
!1047 = !DILocalVariable(name: "nmax", scope: !1048, file: !63, line: 890, type: !25)
!1048 = distinct !DILexicalBlock(scope: !1049, file: !63, line: 888, column: 5)
!1049 = distinct !DILexicalBlock(scope: !1050, file: !63, line: 887, column: 7)
!1050 = distinct !DISubprogram(name: "quotearg_n_options", scope: !63, file: !63, line: 877, type: !1051, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1062, retainedNodes: !4)
!1051 = !DISubroutineType(types: !1052)
!1052 = !{!32, !25, !6, !57, !1053}
!1053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1054, size: 64)
!1054 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1055)
!1055 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !1056)
!1056 = !{!1057, !1058, !1059, !1060, !1061}
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1055, file: !63, line: 68, baseType: !40, size: 32)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1055, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1055, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1055, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1055, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!1062 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !1063, nameTableKind: None)
!1063 = !{!1064, !1066, !1068, !1070, !1072, !1074, !1081, !1083}
!1064 = !DIGlobalVariableExpression(var: !1065, expr: !DIExpression())
!1065 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1062, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!1066 = !DIGlobalVariableExpression(var: !1067, expr: !DIExpression())
!1067 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1062, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!1068 = !DIGlobalVariableExpression(var: !1069, expr: !DIExpression())
!1069 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1062, file: !63, line: 1052, type: !1055, isLocal: false, isDefinition: true)
!1070 = !DIGlobalVariableExpression(var: !1071, expr: !DIExpression())
!1071 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1062, file: !63, line: 116, type: !1055, isLocal: true, isDefinition: true)
!1072 = !DIGlobalVariableExpression(var: !1073, expr: !DIExpression())
!1073 = distinct !DIGlobalVariable(name: "slot0", scope: !1062, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!1074 = !DIGlobalVariableExpression(var: !1075, expr: !DIExpression())
!1075 = distinct !DIGlobalVariable(name: "slotvec", scope: !1062, file: !63, line: 845, type: !1076, isLocal: true, isDefinition: true)
!1076 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1077, size: 64)
!1077 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !1078)
!1078 = !{!1079, !1080}
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1077, file: !63, line: 836, baseType: !57, size: 64)
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1077, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!1081 = !DIGlobalVariableExpression(var: !1082, expr: !DIExpression())
!1082 = distinct !DIGlobalVariable(name: "nslots", scope: !1062, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!1083 = !DIGlobalVariableExpression(var: !1084, expr: !DIExpression())
!1084 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1062, file: !63, line: 844, type: !1077, isLocal: true, isDefinition: true)
!1085 = !DILocalVariable(name: "val", scope: !1086, file: !63, line: 904, type: !32)
!1086 = distinct !DILexicalBlock(scope: !1087, file: !63, line: 902, column: 3)
!1087 = distinct !DISubprogram(name: "quotearg_n_options", scope: !63, file: !63, line: 877, type: !1088, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1099, retainedNodes: !4)
!1088 = !DISubroutineType(types: !1089)
!1089 = !{!32, !25, !6, !57, !1090}
!1090 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1091, size: 64)
!1091 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1092)
!1092 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !1093)
!1093 = !{!1094, !1095, !1096, !1097, !1098}
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1092, file: !63, line: 68, baseType: !40, size: 32)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1092, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1092, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1092, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1092, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!1099 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !1100, nameTableKind: None)
!1100 = !{!1101, !1103, !1105, !1107, !1109, !1111, !1118, !1120}
!1101 = !DIGlobalVariableExpression(var: !1102, expr: !DIExpression())
!1102 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1099, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!1103 = !DIGlobalVariableExpression(var: !1104, expr: !DIExpression())
!1104 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1099, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!1105 = !DIGlobalVariableExpression(var: !1106, expr: !DIExpression())
!1106 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1099, file: !63, line: 1052, type: !1092, isLocal: false, isDefinition: true)
!1107 = !DIGlobalVariableExpression(var: !1108, expr: !DIExpression())
!1108 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1099, file: !63, line: 116, type: !1092, isLocal: true, isDefinition: true)
!1109 = !DIGlobalVariableExpression(var: !1110, expr: !DIExpression())
!1110 = distinct !DIGlobalVariable(name: "slot0", scope: !1099, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!1111 = !DIGlobalVariableExpression(var: !1112, expr: !DIExpression())
!1112 = distinct !DIGlobalVariable(name: "slotvec", scope: !1099, file: !63, line: 845, type: !1113, isLocal: true, isDefinition: true)
!1113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1114, size: 64)
!1114 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !1115)
!1115 = !{!1116, !1117}
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1114, file: !63, line: 836, baseType: !57, size: 64)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1114, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!1118 = !DIGlobalVariableExpression(var: !1119, expr: !DIExpression())
!1119 = distinct !DIGlobalVariable(name: "nslots", scope: !1099, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!1120 = !DIGlobalVariableExpression(var: !1121, expr: !DIExpression())
!1121 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1099, file: !63, line: 844, type: !1114, isLocal: true, isDefinition: true)
!1122 = !DILocalVariable(name: "flags", scope: !1086, file: !63, line: 906, type: !25)
!1123 = !DILocalVariable(name: "qsize", scope: !1086, file: !63, line: 907, type: !57)
!1124 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !63, file: !63, line: 256, type: !1125, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !37, retainedNodes: !4)
!1125 = !DISubroutineType(types: !1126)
!1126 = !{!57, !32, !57, !6, !57, !40, !25, !1127, !6, !6}
!1127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1128, size: 64)
!1128 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !42)
!1129 = !DILocalVariable(name: "buffer", arg: 1, scope: !1124, file: !63, line: 256, type: !32)
!1130 = !DILocation(line: 256, column: 33, scope: !1124)
!1131 = !DILocalVariable(name: "buffersize", arg: 2, scope: !1124, file: !63, line: 256, type: !57)
!1132 = !DILocation(line: 256, column: 48, scope: !1124)
!1133 = !DILocalVariable(name: "arg", arg: 3, scope: !1124, file: !63, line: 257, type: !6)
!1134 = !DILocation(line: 257, column: 39, scope: !1124)
!1135 = !DILocalVariable(name: "argsize", arg: 4, scope: !1124, file: !63, line: 257, type: !57)
!1136 = !DILocation(line: 257, column: 51, scope: !1124)
!1137 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !1124, file: !63, line: 258, type: !40)
!1138 = !DILocation(line: 258, column: 46, scope: !1124)
!1139 = !DILocalVariable(name: "flags", arg: 6, scope: !1124, file: !63, line: 258, type: !25)
!1140 = !DILocation(line: 258, column: 65, scope: !1124)
!1141 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !1124, file: !63, line: 259, type: !1127)
!1142 = !DILocation(line: 259, column: 47, scope: !1124)
!1143 = !DILocalVariable(name: "left_quote", arg: 8, scope: !1124, file: !63, line: 260, type: !6)
!1144 = !DILocation(line: 260, column: 39, scope: !1124)
!1145 = !DILocalVariable(name: "right_quote", arg: 9, scope: !1124, file: !63, line: 261, type: !6)
!1146 = !DILocation(line: 261, column: 39, scope: !1124)
!1147 = !DILocalVariable(name: "i", scope: !1124, file: !63, line: 263, type: !57)
!1148 = !DILocation(line: 263, column: 10, scope: !1124)
!1149 = !DILocalVariable(name: "len", scope: !1124, file: !63, line: 264, type: !57)
!1150 = !DILocation(line: 264, column: 10, scope: !1124)
!1151 = !DILocalVariable(name: "orig_buffersize", scope: !1124, file: !63, line: 265, type: !57)
!1152 = !DILocation(line: 265, column: 10, scope: !1124)
!1153 = !DILocalVariable(name: "quote_string", scope: !1124, file: !63, line: 266, type: !6)
!1154 = !DILocation(line: 266, column: 15, scope: !1124)
!1155 = !DILocalVariable(name: "quote_string_len", scope: !1124, file: !63, line: 267, type: !57)
!1156 = !DILocation(line: 267, column: 10, scope: !1124)
!1157 = !DILocalVariable(name: "backslash_escapes", scope: !1124, file: !63, line: 268, type: !17)
!1158 = !DILocation(line: 268, column: 8, scope: !1124)
!1159 = !DILocalVariable(name: "unibyte_locale", scope: !1124, file: !63, line: 269, type: !17)
!1160 = !DILocation(line: 269, column: 8, scope: !1124)
!1161 = !DILocation(line: 269, column: 25, scope: !1124)
!1162 = !DILocation(line: 269, column: 36, scope: !1124)
!1163 = !DILocalVariable(name: "elide_outer_quotes", scope: !1124, file: !63, line: 270, type: !17)
!1164 = !DILocation(line: 270, column: 8, scope: !1124)
!1165 = !DILocation(line: 270, column: 30, scope: !1124)
!1166 = !DILocation(line: 270, column: 36, scope: !1124)
!1167 = !DILocation(line: 270, column: 61, scope: !1124)
!1168 = !DILocalVariable(name: "pending_shell_escape_end", scope: !1124, file: !63, line: 271, type: !17)
!1169 = !DILocation(line: 271, column: 8, scope: !1124)
!1170 = !DILocalVariable(name: "encountered_single_quote", scope: !1124, file: !63, line: 272, type: !17)
!1171 = !DILocation(line: 272, column: 8, scope: !1124)
!1172 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !1124, file: !63, line: 273, type: !17)
!1173 = !DILocation(line: 273, column: 8, scope: !1124)
!1174 = !DILocation(line: 273, column: 3, scope: !1124)
!1175 = !DILabel(scope: !1124, name: "process_input", file: !63, line: 314)
!1176 = !DILocation(line: 314, column: 2, scope: !1124)
!1177 = !DILocation(line: 316, column: 11, scope: !1124)
!1178 = !DILocation(line: 316, column: 3, scope: !1124)
!1179 = !DILocation(line: 319, column: 21, scope: !1180)
!1180 = distinct !DILexicalBlock(scope: !1124, file: !63, line: 317, column: 5)
!1181 = !DILocation(line: 320, column: 26, scope: !1180)
!1182 = !DILocation(line: 321, column: 7, scope: !1180)
!1183 = !DILocation(line: 323, column: 12, scope: !1184)
!1184 = distinct !DILexicalBlock(scope: !1180, file: !63, line: 323, column: 11)
!1185 = !DILocation(line: 323, column: 11, scope: !1180)
!1186 = !DILocation(line: 324, column: 9, scope: !1184)
!1187 = !DILocation(line: 324, column: 9, scope: !1188)
!1188 = distinct !DILexicalBlock(scope: !1189, file: !63, line: 324, column: 9)
!1189 = distinct !DILexicalBlock(scope: !1184, file: !63, line: 324, column: 9)
!1190 = !DILocation(line: 324, column: 9, scope: !1189)
!1191 = !DILocation(line: 325, column: 25, scope: !1180)
!1192 = !DILocation(line: 326, column: 20, scope: !1180)
!1193 = !DILocation(line: 327, column: 24, scope: !1180)
!1194 = !DILocation(line: 328, column: 7, scope: !1180)
!1195 = !DILocation(line: 331, column: 25, scope: !1180)
!1196 = !DILocation(line: 332, column: 26, scope: !1180)
!1197 = !DILocation(line: 333, column: 7, scope: !1180)
!1198 = !DILocation(line: 339, column: 13, scope: !1199)
!1199 = distinct !DILexicalBlock(scope: !1200, file: !63, line: 339, column: 13)
!1200 = distinct !DILexicalBlock(scope: !1180, file: !63, line: 338, column: 7)
!1201 = !DILocation(line: 339, column: 27, scope: !1199)
!1202 = !DILocation(line: 339, column: 13, scope: !1200)
!1203 = !DILocation(line: 362, column: 50, scope: !1204)
!1204 = distinct !DILexicalBlock(scope: !1199, file: !63, line: 340, column: 11)
!1205 = !DILocation(line: 362, column: 26, scope: !1204)
!1206 = !DILocation(line: 362, column: 24, scope: !1204)
!1207 = !DILocation(line: 363, column: 51, scope: !1204)
!1208 = !DILocation(line: 363, column: 27, scope: !1204)
!1209 = !DILocation(line: 363, column: 25, scope: !1204)
!1210 = !DILocation(line: 364, column: 11, scope: !1204)
!1211 = !DILocation(line: 365, column: 14, scope: !1212)
!1212 = distinct !DILexicalBlock(scope: !1200, file: !63, line: 365, column: 13)
!1213 = !DILocation(line: 365, column: 13, scope: !1200)
!1214 = !DILocation(line: 366, column: 31, scope: !1215)
!1215 = distinct !DILexicalBlock(scope: !1212, file: !63, line: 366, column: 11)
!1216 = !DILocation(line: 366, column: 29, scope: !1215)
!1217 = !DILocation(line: 366, column: 16, scope: !1215)
!1218 = !DILocation(line: 366, column: 44, scope: !1219)
!1219 = distinct !DILexicalBlock(scope: !1215, file: !63, line: 366, column: 11)
!1220 = !DILocation(line: 366, column: 43, scope: !1219)
!1221 = !DILocation(line: 366, column: 11, scope: !1215)
!1222 = !DILocation(line: 367, column: 13, scope: !1219)
!1223 = !DILocation(line: 367, column: 13, scope: !1224)
!1224 = distinct !DILexicalBlock(scope: !1225, file: !63, line: 367, column: 13)
!1225 = distinct !DILexicalBlock(scope: !1219, file: !63, line: 367, column: 13)
!1226 = !DILocation(line: 367, column: 13, scope: !1225)
!1227 = !DILocation(line: 366, column: 70, scope: !1219)
!1228 = !DILocation(line: 366, column: 11, scope: !1219)
!1229 = distinct !{!1229, !1221, !1230}
!1230 = !DILocation(line: 367, column: 13, scope: !1215)
!1231 = !DILocation(line: 368, column: 27, scope: !1200)
!1232 = !DILocation(line: 369, column: 24, scope: !1200)
!1233 = !DILocation(line: 369, column: 22, scope: !1200)
!1234 = !DILocation(line: 370, column: 36, scope: !1200)
!1235 = !DILocation(line: 370, column: 28, scope: !1200)
!1236 = !DILocation(line: 370, column: 26, scope: !1200)
!1237 = !DILocation(line: 372, column: 7, scope: !1180)
!1238 = !DILocation(line: 375, column: 25, scope: !1180)
!1239 = !DILocation(line: 376, column: 7, scope: !1180)
!1240 = !DILocation(line: 378, column: 26, scope: !1180)
!1241 = !DILocation(line: 379, column: 7, scope: !1180)
!1242 = !DILocation(line: 381, column: 12, scope: !1243)
!1243 = distinct !DILexicalBlock(scope: !1180, file: !63, line: 381, column: 11)
!1244 = !DILocation(line: 381, column: 11, scope: !1180)
!1245 = !DILocation(line: 382, column: 27, scope: !1243)
!1246 = !DILocation(line: 382, column: 9, scope: !1243)
!1247 = !DILocation(line: 383, column: 7, scope: !1180)
!1248 = !DILocation(line: 385, column: 21, scope: !1180)
!1249 = !DILocation(line: 386, column: 12, scope: !1250)
!1250 = distinct !DILexicalBlock(scope: !1180, file: !63, line: 386, column: 11)
!1251 = !DILocation(line: 386, column: 11, scope: !1180)
!1252 = !DILocation(line: 387, column: 9, scope: !1250)
!1253 = !DILocation(line: 387, column: 9, scope: !1254)
!1254 = distinct !DILexicalBlock(scope: !1255, file: !63, line: 387, column: 9)
!1255 = distinct !DILexicalBlock(scope: !1250, file: !63, line: 387, column: 9)
!1256 = !DILocation(line: 387, column: 9, scope: !1255)
!1257 = !DILocation(line: 388, column: 20, scope: !1180)
!1258 = !DILocation(line: 389, column: 24, scope: !1180)
!1259 = !DILocation(line: 390, column: 7, scope: !1180)
!1260 = !DILocation(line: 393, column: 26, scope: !1180)
!1261 = !DILocation(line: 394, column: 7, scope: !1180)
!1262 = !DILocation(line: 397, column: 7, scope: !1180)
!1263 = !DILocation(line: 400, column: 10, scope: !1264)
!1264 = distinct !DILexicalBlock(scope: !1124, file: !63, line: 400, column: 3)
!1265 = !DILocation(line: 400, column: 8, scope: !1264)
!1266 = !DILocation(line: 400, column: 19, scope: !1267)
!1267 = distinct !DILexicalBlock(scope: !1264, file: !63, line: 400, column: 3)
!1268 = !DILocation(line: 400, column: 27, scope: !1267)
!1269 = !DILocation(line: 400, column: 41, scope: !1267)
!1270 = !DILocation(line: 400, column: 45, scope: !1267)
!1271 = !DILocation(line: 400, column: 48, scope: !1267)
!1272 = !DILocation(line: 400, column: 58, scope: !1267)
!1273 = !DILocation(line: 400, column: 63, scope: !1267)
!1274 = !DILocation(line: 400, column: 60, scope: !1267)
!1275 = !DILocation(line: 400, column: 16, scope: !1267)
!1276 = !DILocation(line: 400, column: 3, scope: !1264)
!1277 = !DILocalVariable(name: "c", scope: !1278, file: !63, line: 402, type: !130)
!1278 = distinct !DILexicalBlock(scope: !1267, file: !63, line: 401, column: 5)
!1279 = !DILocation(line: 402, column: 21, scope: !1278)
!1280 = !DILocalVariable(name: "esc", scope: !1278, file: !63, line: 403, type: !130)
!1281 = !DILocation(line: 403, column: 21, scope: !1278)
!1282 = !DILocalVariable(name: "is_right_quote", scope: !1278, file: !63, line: 404, type: !17)
!1283 = !DILocation(line: 404, column: 12, scope: !1278)
!1284 = !DILocalVariable(name: "escaping", scope: !1278, file: !63, line: 405, type: !17)
!1285 = !DILocation(line: 405, column: 12, scope: !1278)
!1286 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !1278, file: !63, line: 406, type: !17)
!1287 = !DILocation(line: 406, column: 12, scope: !1278)
!1288 = !DILocation(line: 408, column: 11, scope: !1289)
!1289 = distinct !DILexicalBlock(scope: !1278, file: !63, line: 408, column: 11)
!1290 = !DILocation(line: 409, column: 11, scope: !1289)
!1291 = !DILocation(line: 409, column: 14, scope: !1289)
!1292 = !DILocation(line: 409, column: 28, scope: !1289)
!1293 = !DILocation(line: 410, column: 11, scope: !1289)
!1294 = !DILocation(line: 410, column: 14, scope: !1289)
!1295 = !DILocation(line: 411, column: 11, scope: !1289)
!1296 = !DILocation(line: 411, column: 15, scope: !1289)
!1297 = !DILocation(line: 411, column: 19, scope: !1289)
!1298 = !DILocation(line: 411, column: 17, scope: !1289)
!1299 = !DILocation(line: 412, column: 19, scope: !1289)
!1300 = !DILocation(line: 412, column: 27, scope: !1289)
!1301 = !DILocation(line: 412, column: 39, scope: !1289)
!1302 = !DILocation(line: 412, column: 46, scope: !1289)
!1303 = !DILocation(line: 412, column: 44, scope: !1289)
!1304 = !DILocation(line: 416, column: 40, scope: !1289)
!1305 = !DILocation(line: 416, column: 32, scope: !1289)
!1306 = !DILocation(line: 416, column: 30, scope: !1289)
!1307 = !DILocation(line: 416, column: 48, scope: !1289)
!1308 = !DILocation(line: 412, column: 15, scope: !1289)
!1309 = !DILocation(line: 417, column: 11, scope: !1289)
!1310 = !DILocation(line: 417, column: 22, scope: !1289)
!1311 = !DILocation(line: 417, column: 28, scope: !1289)
!1312 = !DILocation(line: 417, column: 26, scope: !1289)
!1313 = !DILocation(line: 417, column: 31, scope: !1289)
!1314 = !DILocation(line: 417, column: 45, scope: !1289)
!1315 = !DILocation(line: 417, column: 14, scope: !1289)
!1316 = !DILocation(line: 417, column: 63, scope: !1289)
!1317 = !DILocation(line: 408, column: 11, scope: !1278)
!1318 = !DILocation(line: 419, column: 15, scope: !1319)
!1319 = distinct !DILexicalBlock(scope: !1320, file: !63, line: 419, column: 15)
!1320 = distinct !DILexicalBlock(scope: !1289, file: !63, line: 418, column: 9)
!1321 = !DILocation(line: 419, column: 15, scope: !1320)
!1322 = !DILocation(line: 420, column: 13, scope: !1319)
!1323 = !DILocation(line: 421, column: 26, scope: !1320)
!1324 = !DILocation(line: 422, column: 9, scope: !1320)
!1325 = !DILocation(line: 424, column: 11, scope: !1278)
!1326 = !DILocation(line: 424, column: 15, scope: !1278)
!1327 = !DILocation(line: 424, column: 9, scope: !1278)
!1328 = !DILocation(line: 425, column: 15, scope: !1278)
!1329 = !DILocation(line: 425, column: 7, scope: !1278)
!1330 = !DILocation(line: 428, column: 15, scope: !1331)
!1331 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 428, column: 15)
!1332 = distinct !DILexicalBlock(scope: !1278, file: !63, line: 426, column: 9)
!1333 = !DILocation(line: 428, column: 15, scope: !1332)
!1334 = !DILocation(line: 430, column: 15, scope: !1335)
!1335 = distinct !DILexicalBlock(scope: !1331, file: !63, line: 429, column: 13)
!1336 = !DILocation(line: 430, column: 15, scope: !1337)
!1337 = distinct !DILexicalBlock(scope: !1338, file: !63, line: 430, column: 15)
!1338 = distinct !DILexicalBlock(scope: !1335, file: !63, line: 430, column: 15)
!1339 = !DILocation(line: 430, column: 15, scope: !1338)
!1340 = !DILocation(line: 430, column: 15, scope: !1341)
!1341 = distinct !DILexicalBlock(scope: !1338, file: !63, line: 430, column: 15)
!1342 = !DILocation(line: 430, column: 15, scope: !1343)
!1343 = distinct !DILexicalBlock(scope: !1341, file: !63, line: 430, column: 15)
!1344 = !DILocation(line: 430, column: 15, scope: !1345)
!1345 = distinct !DILexicalBlock(scope: !1346, file: !63, line: 430, column: 15)
!1346 = distinct !DILexicalBlock(scope: !1343, file: !63, line: 430, column: 15)
!1347 = !DILocation(line: 430, column: 15, scope: !1346)
!1348 = !DILocation(line: 430, column: 15, scope: !1349)
!1349 = distinct !DILexicalBlock(scope: !1350, file: !63, line: 430, column: 15)
!1350 = distinct !DILexicalBlock(scope: !1343, file: !63, line: 430, column: 15)
!1351 = !DILocation(line: 430, column: 15, scope: !1350)
!1352 = !DILocation(line: 430, column: 15, scope: !1353)
!1353 = distinct !DILexicalBlock(scope: !1354, file: !63, line: 430, column: 15)
!1354 = distinct !DILexicalBlock(scope: !1343, file: !63, line: 430, column: 15)
!1355 = !DILocation(line: 430, column: 15, scope: !1354)
!1356 = !DILocation(line: 430, column: 15, scope: !1357)
!1357 = distinct !DILexicalBlock(scope: !1358, file: !63, line: 430, column: 15)
!1358 = distinct !DILexicalBlock(scope: !1338, file: !63, line: 430, column: 15)
!1359 = !DILocation(line: 430, column: 15, scope: !1358)
!1360 = !DILocation(line: 437, column: 19, scope: !1361)
!1361 = distinct !DILexicalBlock(scope: !1335, file: !63, line: 437, column: 19)
!1362 = !DILocation(line: 437, column: 33, scope: !1361)
!1363 = !DILocation(line: 438, column: 19, scope: !1361)
!1364 = !DILocation(line: 438, column: 22, scope: !1361)
!1365 = !DILocation(line: 438, column: 24, scope: !1361)
!1366 = !DILocation(line: 438, column: 30, scope: !1361)
!1367 = !DILocation(line: 438, column: 28, scope: !1361)
!1368 = !DILocation(line: 438, column: 38, scope: !1361)
!1369 = !DILocation(line: 438, column: 48, scope: !1361)
!1370 = !DILocation(line: 438, column: 52, scope: !1361)
!1371 = !DILocation(line: 438, column: 54, scope: !1361)
!1372 = !DILocation(line: 438, column: 45, scope: !1361)
!1373 = !DILocation(line: 438, column: 59, scope: !1361)
!1374 = !DILocation(line: 438, column: 62, scope: !1361)
!1375 = !DILocation(line: 438, column: 66, scope: !1361)
!1376 = !DILocation(line: 438, column: 68, scope: !1361)
!1377 = !DILocation(line: 438, column: 73, scope: !1361)
!1378 = !DILocation(line: 437, column: 19, scope: !1335)
!1379 = !DILocation(line: 440, column: 19, scope: !1380)
!1380 = distinct !DILexicalBlock(scope: !1361, file: !63, line: 439, column: 17)
!1381 = !DILocation(line: 440, column: 19, scope: !1382)
!1382 = distinct !DILexicalBlock(scope: !1383, file: !63, line: 440, column: 19)
!1383 = distinct !DILexicalBlock(scope: !1380, file: !63, line: 440, column: 19)
!1384 = !DILocation(line: 440, column: 19, scope: !1383)
!1385 = !DILocation(line: 441, column: 19, scope: !1380)
!1386 = !DILocation(line: 441, column: 19, scope: !1387)
!1387 = distinct !DILexicalBlock(scope: !1388, file: !63, line: 441, column: 19)
!1388 = distinct !DILexicalBlock(scope: !1380, file: !63, line: 441, column: 19)
!1389 = !DILocation(line: 441, column: 19, scope: !1388)
!1390 = !DILocation(line: 442, column: 17, scope: !1380)
!1391 = !DILocation(line: 443, column: 17, scope: !1335)
!1392 = !DILocation(line: 448, column: 13, scope: !1335)
!1393 = !DILocation(line: 449, column: 20, scope: !1394)
!1394 = distinct !DILexicalBlock(scope: !1331, file: !63, line: 449, column: 20)
!1395 = !DILocation(line: 449, column: 26, scope: !1394)
!1396 = !DILocation(line: 449, column: 20, scope: !1331)
!1397 = !DILocation(line: 450, column: 13, scope: !1394)
!1398 = !DILocation(line: 451, column: 11, scope: !1332)
!1399 = !DILocation(line: 454, column: 19, scope: !1332)
!1400 = !DILocation(line: 454, column: 11, scope: !1332)
!1401 = !DILocation(line: 457, column: 19, scope: !1402)
!1402 = distinct !DILexicalBlock(scope: !1403, file: !63, line: 457, column: 19)
!1403 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 455, column: 13)
!1404 = !DILocation(line: 457, column: 19, scope: !1403)
!1405 = !DILocation(line: 458, column: 17, scope: !1402)
!1406 = !DILocation(line: 459, column: 15, scope: !1403)
!1407 = !DILocation(line: 462, column: 20, scope: !1408)
!1408 = distinct !DILexicalBlock(scope: !1403, file: !63, line: 462, column: 19)
!1409 = !DILocation(line: 462, column: 26, scope: !1408)
!1410 = !DILocation(line: 463, column: 19, scope: !1408)
!1411 = !DILocation(line: 463, column: 22, scope: !1408)
!1412 = !DILocation(line: 463, column: 24, scope: !1408)
!1413 = !DILocation(line: 463, column: 30, scope: !1408)
!1414 = !DILocation(line: 463, column: 28, scope: !1408)
!1415 = !DILocation(line: 463, column: 38, scope: !1408)
!1416 = !DILocation(line: 463, column: 41, scope: !1408)
!1417 = !DILocation(line: 463, column: 45, scope: !1408)
!1418 = !DILocation(line: 463, column: 47, scope: !1408)
!1419 = !DILocation(line: 463, column: 52, scope: !1408)
!1420 = !DILocation(line: 462, column: 19, scope: !1403)
!1421 = !DILocation(line: 464, column: 25, scope: !1408)
!1422 = !DILocation(line: 464, column: 29, scope: !1408)
!1423 = !DILocation(line: 464, column: 31, scope: !1408)
!1424 = !DILocation(line: 464, column: 17, scope: !1408)
!1425 = !DILocation(line: 471, column: 25, scope: !1426)
!1426 = distinct !DILexicalBlock(scope: !1427, file: !63, line: 471, column: 25)
!1427 = distinct !DILexicalBlock(scope: !1408, file: !63, line: 465, column: 19)
!1428 = !DILocation(line: 471, column: 25, scope: !1427)
!1429 = !DILocation(line: 472, column: 23, scope: !1426)
!1430 = !DILocation(line: 473, column: 25, scope: !1427)
!1431 = !DILocation(line: 473, column: 29, scope: !1427)
!1432 = !DILocation(line: 473, column: 31, scope: !1427)
!1433 = !DILocation(line: 473, column: 23, scope: !1427)
!1434 = !DILocation(line: 474, column: 23, scope: !1427)
!1435 = !DILocation(line: 475, column: 21, scope: !1427)
!1436 = !DILocation(line: 475, column: 21, scope: !1437)
!1437 = distinct !DILexicalBlock(scope: !1438, file: !63, line: 475, column: 21)
!1438 = distinct !DILexicalBlock(scope: !1427, file: !63, line: 475, column: 21)
!1439 = !DILocation(line: 475, column: 21, scope: !1438)
!1440 = !DILocation(line: 476, column: 21, scope: !1427)
!1441 = !DILocation(line: 476, column: 21, scope: !1442)
!1442 = distinct !DILexicalBlock(scope: !1443, file: !63, line: 476, column: 21)
!1443 = distinct !DILexicalBlock(scope: !1427, file: !63, line: 476, column: 21)
!1444 = !DILocation(line: 476, column: 21, scope: !1443)
!1445 = !DILocation(line: 477, column: 21, scope: !1427)
!1446 = !DILocation(line: 477, column: 21, scope: !1447)
!1447 = distinct !DILexicalBlock(scope: !1448, file: !63, line: 477, column: 21)
!1448 = distinct !DILexicalBlock(scope: !1427, file: !63, line: 477, column: 21)
!1449 = !DILocation(line: 477, column: 21, scope: !1448)
!1450 = !DILocation(line: 478, column: 21, scope: !1427)
!1451 = !DILocation(line: 478, column: 21, scope: !1452)
!1452 = distinct !DILexicalBlock(scope: !1453, file: !63, line: 478, column: 21)
!1453 = distinct !DILexicalBlock(scope: !1427, file: !63, line: 478, column: 21)
!1454 = !DILocation(line: 478, column: 21, scope: !1453)
!1455 = !DILocation(line: 479, column: 21, scope: !1427)
!1456 = !DILocation(line: 482, column: 21, scope: !1427)
!1457 = !DILocation(line: 483, column: 19, scope: !1427)
!1458 = !DILocation(line: 484, column: 15, scope: !1403)
!1459 = !DILocation(line: 487, column: 15, scope: !1403)
!1460 = !DILocation(line: 489, column: 11, scope: !1332)
!1461 = !DILocation(line: 491, column: 24, scope: !1332)
!1462 = !DILocation(line: 491, column: 31, scope: !1332)
!1463 = !DILocation(line: 492, column: 24, scope: !1332)
!1464 = !DILocation(line: 492, column: 31, scope: !1332)
!1465 = !DILocation(line: 493, column: 24, scope: !1332)
!1466 = !DILocation(line: 493, column: 31, scope: !1332)
!1467 = !DILocation(line: 494, column: 24, scope: !1332)
!1468 = !DILocation(line: 494, column: 31, scope: !1332)
!1469 = !DILocation(line: 495, column: 24, scope: !1332)
!1470 = !DILocation(line: 495, column: 31, scope: !1332)
!1471 = !DILocation(line: 496, column: 24, scope: !1332)
!1472 = !DILocation(line: 496, column: 31, scope: !1332)
!1473 = !DILocation(line: 497, column: 24, scope: !1332)
!1474 = !DILocation(line: 497, column: 31, scope: !1332)
!1475 = !DILocation(line: 498, column: 26, scope: !1332)
!1476 = !DILocation(line: 498, column: 24, scope: !1332)
!1477 = !DILocation(line: 500, column: 15, scope: !1478)
!1478 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 500, column: 15)
!1479 = !DILocation(line: 500, column: 29, scope: !1478)
!1480 = !DILocation(line: 500, column: 15, scope: !1332)
!1481 = !DILocation(line: 502, column: 19, scope: !1482)
!1482 = distinct !DILexicalBlock(scope: !1483, file: !63, line: 502, column: 19)
!1483 = distinct !DILexicalBlock(scope: !1478, file: !63, line: 501, column: 13)
!1484 = !DILocation(line: 502, column: 19, scope: !1483)
!1485 = !DILocation(line: 503, column: 17, scope: !1482)
!1486 = !DILocation(line: 504, column: 15, scope: !1483)
!1487 = !DILocation(line: 509, column: 15, scope: !1488)
!1488 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 509, column: 15)
!1489 = !DILocation(line: 509, column: 33, scope: !1488)
!1490 = !DILocation(line: 509, column: 36, scope: !1488)
!1491 = !DILocation(line: 509, column: 55, scope: !1488)
!1492 = !DILocation(line: 509, column: 58, scope: !1488)
!1493 = !DILocation(line: 509, column: 15, scope: !1332)
!1494 = !DILocation(line: 510, column: 13, scope: !1488)
!1495 = !DILabel(scope: !1332, name: "c_and_shell_escape", file: !63, line: 512)
!1496 = !DILocation(line: 512, column: 9, scope: !1332)
!1497 = !DILocation(line: 513, column: 15, scope: !1498)
!1498 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 513, column: 15)
!1499 = !DILocation(line: 513, column: 29, scope: !1498)
!1500 = !DILocation(line: 514, column: 15, scope: !1498)
!1501 = !DILocation(line: 514, column: 18, scope: !1498)
!1502 = !DILocation(line: 513, column: 15, scope: !1332)
!1503 = !DILocation(line: 515, column: 13, scope: !1498)
!1504 = !DILabel(scope: !1332, name: "c_escape", file: !63, line: 517)
!1505 = !DILocation(line: 517, column: 9, scope: !1332)
!1506 = !DILocation(line: 518, column: 15, scope: !1507)
!1507 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 518, column: 15)
!1508 = !DILocation(line: 518, column: 15, scope: !1332)
!1509 = !DILocation(line: 520, column: 19, scope: !1510)
!1510 = distinct !DILexicalBlock(scope: !1507, file: !63, line: 519, column: 13)
!1511 = !DILocation(line: 520, column: 17, scope: !1510)
!1512 = !DILocation(line: 521, column: 15, scope: !1510)
!1513 = !DILocation(line: 523, column: 11, scope: !1332)
!1514 = !DILocation(line: 526, column: 18, scope: !1515)
!1515 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 526, column: 15)
!1516 = !DILocation(line: 526, column: 26, scope: !1515)
!1517 = !DILocation(line: 526, column: 15, scope: !1332)
!1518 = !DILocation(line: 526, column: 40, scope: !1515)
!1519 = !DILocation(line: 526, column: 47, scope: !1515)
!1520 = !DILocation(line: 526, column: 57, scope: !1515)
!1521 = !DILocation(line: 526, column: 65, scope: !1515)
!1522 = !DILocation(line: 527, column: 13, scope: !1515)
!1523 = !DILocation(line: 528, column: 11, scope: !1332)
!1524 = !DILocation(line: 530, column: 15, scope: !1525)
!1525 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 530, column: 15)
!1526 = !DILocation(line: 530, column: 17, scope: !1525)
!1527 = !DILocation(line: 530, column: 15, scope: !1332)
!1528 = !DILocation(line: 531, column: 13, scope: !1525)
!1529 = !DILocation(line: 532, column: 11, scope: !1332)
!1530 = !DILocation(line: 534, column: 36, scope: !1332)
!1531 = !DILocation(line: 535, column: 11, scope: !1332)
!1532 = !DILocation(line: 548, column: 15, scope: !1533)
!1533 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 548, column: 15)
!1534 = !DILocation(line: 548, column: 29, scope: !1533)
!1535 = !DILocation(line: 549, column: 15, scope: !1533)
!1536 = !DILocation(line: 549, column: 18, scope: !1533)
!1537 = !DILocation(line: 548, column: 15, scope: !1332)
!1538 = !DILocation(line: 550, column: 13, scope: !1533)
!1539 = !DILocation(line: 551, column: 11, scope: !1332)
!1540 = !DILocation(line: 554, column: 36, scope: !1332)
!1541 = !DILocation(line: 555, column: 36, scope: !1332)
!1542 = !DILocation(line: 556, column: 15, scope: !1543)
!1543 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 556, column: 15)
!1544 = !DILocation(line: 556, column: 29, scope: !1543)
!1545 = !DILocation(line: 556, column: 15, scope: !1332)
!1546 = !DILocation(line: 558, column: 19, scope: !1547)
!1547 = distinct !DILexicalBlock(scope: !1548, file: !63, line: 558, column: 19)
!1548 = distinct !DILexicalBlock(scope: !1543, file: !63, line: 557, column: 13)
!1549 = !DILocation(line: 558, column: 19, scope: !1548)
!1550 = !DILocation(line: 559, column: 17, scope: !1547)
!1551 = !DILocation(line: 561, column: 19, scope: !1552)
!1552 = distinct !DILexicalBlock(scope: !1548, file: !63, line: 561, column: 19)
!1553 = !DILocation(line: 561, column: 30, scope: !1552)
!1554 = !DILocation(line: 561, column: 35, scope: !1552)
!1555 = !DILocation(line: 561, column: 19, scope: !1548)
!1556 = !DILocation(line: 566, column: 37, scope: !1557)
!1557 = distinct !DILexicalBlock(scope: !1552, file: !63, line: 562, column: 17)
!1558 = !DILocation(line: 566, column: 35, scope: !1557)
!1559 = !DILocation(line: 567, column: 30, scope: !1557)
!1560 = !DILocation(line: 568, column: 17, scope: !1557)
!1561 = !DILocation(line: 570, column: 15, scope: !1548)
!1562 = !DILocation(line: 570, column: 15, scope: !1563)
!1563 = distinct !DILexicalBlock(scope: !1564, file: !63, line: 570, column: 15)
!1564 = distinct !DILexicalBlock(scope: !1548, file: !63, line: 570, column: 15)
!1565 = !DILocation(line: 570, column: 15, scope: !1564)
!1566 = !DILocation(line: 571, column: 15, scope: !1548)
!1567 = !DILocation(line: 571, column: 15, scope: !1568)
!1568 = distinct !DILexicalBlock(scope: !1569, file: !63, line: 571, column: 15)
!1569 = distinct !DILexicalBlock(scope: !1548, file: !63, line: 571, column: 15)
!1570 = !DILocation(line: 571, column: 15, scope: !1569)
!1571 = !DILocation(line: 572, column: 15, scope: !1548)
!1572 = !DILocation(line: 572, column: 15, scope: !1573)
!1573 = distinct !DILexicalBlock(scope: !1574, file: !63, line: 572, column: 15)
!1574 = distinct !DILexicalBlock(scope: !1548, file: !63, line: 572, column: 15)
!1575 = !DILocation(line: 572, column: 15, scope: !1574)
!1576 = !DILocation(line: 573, column: 40, scope: !1548)
!1577 = !DILocation(line: 574, column: 13, scope: !1548)
!1578 = !DILocation(line: 575, column: 11, scope: !1332)
!1579 = !DILocation(line: 599, column: 36, scope: !1332)
!1580 = !DILocation(line: 600, column: 11, scope: !1332)
!1581 = !DILocalVariable(name: "m", scope: !1582, file: !63, line: 610, type: !57)
!1582 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 608, column: 11)
!1583 = !DILocation(line: 610, column: 20, scope: !1582)
!1584 = !DILocalVariable(name: "printable", scope: !1582, file: !63, line: 612, type: !17)
!1585 = !DILocation(line: 612, column: 18, scope: !1582)
!1586 = !DILocation(line: 614, column: 17, scope: !1587)
!1587 = distinct !DILexicalBlock(scope: !1582, file: !63, line: 614, column: 17)
!1588 = !DILocation(line: 614, column: 17, scope: !1582)
!1589 = !DILocation(line: 616, column: 19, scope: !1590)
!1590 = distinct !DILexicalBlock(scope: !1587, file: !63, line: 615, column: 15)
!1591 = !DILocation(line: 617, column: 29, scope: !1590)
!1592 = !DILocation(line: 617, column: 41, scope: !1590)
!1593 = !DILocation(line: 617, column: 27, scope: !1590)
!1594 = !DILocation(line: 618, column: 15, scope: !1590)
!1595 = !DILocalVariable(name: "mbstate", scope: !1596, file: !63, line: 621, type: !1597)
!1596 = distinct !DILexicalBlock(scope: !1587, file: !63, line: 620, column: 15)
!1597 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1598, line: 6, baseType: !1599)
!1598 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "")
!1599 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1600, line: 21, baseType: !1601)
!1600 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "")
!1601 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1600, line: 13, size: 64, elements: !1602)
!1602 = !{!1603, !1604}
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !1601, file: !1600, line: 15, baseType: !25, size: 32)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !1601, file: !1600, line: 20, baseType: !1605, size: 32, offset: 32)
!1605 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1601, file: !1600, line: 16, size: 32, elements: !1606)
!1606 = !{!1607, !1608}
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !1605, file: !1600, line: 18, baseType: !42, size: 32)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !1605, file: !1600, line: 19, baseType: !1609, size: 32)
!1609 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 32, elements: !1610)
!1610 = !{!1611}
!1611 = !DISubrange(count: 4)
!1612 = !DILocation(line: 621, column: 27, scope: !1596)
!1613 = !DILocation(line: 622, column: 17, scope: !1596)
!1614 = !DILocation(line: 624, column: 19, scope: !1596)
!1615 = !DILocation(line: 625, column: 27, scope: !1596)
!1616 = !DILocation(line: 626, column: 21, scope: !1617)
!1617 = distinct !DILexicalBlock(scope: !1596, file: !63, line: 626, column: 21)
!1618 = !DILocation(line: 626, column: 29, scope: !1617)
!1619 = !DILocation(line: 626, column: 21, scope: !1596)
!1620 = !DILocation(line: 627, column: 37, scope: !1617)
!1621 = !DILocation(line: 627, column: 29, scope: !1617)
!1622 = !DILocation(line: 627, column: 27, scope: !1617)
!1623 = !DILocation(line: 627, column: 19, scope: !1617)
!1624 = !DILocation(line: 629, column: 17, scope: !1596)
!1625 = !DILocalVariable(name: "w", scope: !1626, file: !63, line: 631, type: !1627)
!1626 = distinct !DILexicalBlock(scope: !1596, file: !63, line: 630, column: 19)
!1627 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !58, line: 74, baseType: !25)
!1628 = !DILocation(line: 631, column: 29, scope: !1626)
!1629 = !DILocalVariable(name: "bytes", scope: !1626, file: !63, line: 632, type: !57)
!1630 = !DILocation(line: 632, column: 28, scope: !1626)
!1631 = !DILocation(line: 632, column: 50, scope: !1626)
!1632 = !DILocation(line: 632, column: 54, scope: !1626)
!1633 = !DILocation(line: 632, column: 58, scope: !1626)
!1634 = !DILocation(line: 632, column: 56, scope: !1626)
!1635 = !DILocation(line: 633, column: 45, scope: !1626)
!1636 = !DILocation(line: 633, column: 56, scope: !1626)
!1637 = !DILocation(line: 633, column: 60, scope: !1626)
!1638 = !DILocation(line: 633, column: 58, scope: !1626)
!1639 = !DILocation(line: 633, column: 53, scope: !1626)
!1640 = !DILocation(line: 632, column: 36, scope: !1626)
!1641 = !DILocation(line: 634, column: 25, scope: !1642)
!1642 = distinct !DILexicalBlock(scope: !1626, file: !63, line: 634, column: 25)
!1643 = !DILocation(line: 634, column: 31, scope: !1642)
!1644 = !DILocation(line: 634, column: 25, scope: !1626)
!1645 = !DILocation(line: 635, column: 23, scope: !1642)
!1646 = !DILocation(line: 636, column: 30, scope: !1647)
!1647 = distinct !DILexicalBlock(scope: !1642, file: !63, line: 636, column: 30)
!1648 = !DILocation(line: 636, column: 36, scope: !1647)
!1649 = !DILocation(line: 636, column: 30, scope: !1642)
!1650 = !DILocation(line: 638, column: 35, scope: !1651)
!1651 = distinct !DILexicalBlock(scope: !1647, file: !63, line: 637, column: 23)
!1652 = !DILocation(line: 639, column: 25, scope: !1651)
!1653 = !DILocation(line: 641, column: 30, scope: !1654)
!1654 = distinct !DILexicalBlock(scope: !1647, file: !63, line: 641, column: 30)
!1655 = !DILocation(line: 641, column: 36, scope: !1654)
!1656 = !DILocation(line: 641, column: 30, scope: !1647)
!1657 = !DILocation(line: 643, column: 35, scope: !1658)
!1658 = distinct !DILexicalBlock(scope: !1654, file: !63, line: 642, column: 23)
!1659 = !DILocation(line: 644, column: 25, scope: !1658)
!1660 = !DILocation(line: 644, column: 32, scope: !1658)
!1661 = !DILocation(line: 644, column: 36, scope: !1658)
!1662 = !DILocation(line: 644, column: 34, scope: !1658)
!1663 = !DILocation(line: 644, column: 40, scope: !1658)
!1664 = !DILocation(line: 644, column: 38, scope: !1658)
!1665 = !DILocation(line: 644, column: 48, scope: !1658)
!1666 = !DILocation(line: 644, column: 51, scope: !1658)
!1667 = !DILocation(line: 644, column: 55, scope: !1658)
!1668 = !DILocation(line: 644, column: 59, scope: !1658)
!1669 = !DILocation(line: 644, column: 57, scope: !1658)
!1670 = !DILocation(line: 0, scope: !1658)
!1671 = !DILocation(line: 645, column: 28, scope: !1658)
!1672 = distinct !{!1672, !1659, !1671}
!1673 = !DILocation(line: 646, column: 25, scope: !1658)
!1674 = !DILocation(line: 654, column: 44, scope: !1675)
!1675 = distinct !DILexicalBlock(scope: !1676, file: !63, line: 654, column: 29)
!1676 = distinct !DILexicalBlock(scope: !1654, file: !63, line: 649, column: 23)
!1677 = !DILocation(line: 655, column: 29, scope: !1675)
!1678 = !DILocation(line: 655, column: 32, scope: !1675)
!1679 = !DILocation(line: 655, column: 46, scope: !1675)
!1680 = !DILocation(line: 654, column: 29, scope: !1676)
!1681 = !DILocalVariable(name: "j", scope: !1682, file: !63, line: 657, type: !57)
!1682 = distinct !DILexicalBlock(scope: !1675, file: !63, line: 656, column: 27)
!1683 = !DILocation(line: 657, column: 36, scope: !1682)
!1684 = !DILocation(line: 658, column: 36, scope: !1685)
!1685 = distinct !DILexicalBlock(scope: !1682, file: !63, line: 658, column: 29)
!1686 = !DILocation(line: 658, column: 34, scope: !1685)
!1687 = !DILocation(line: 658, column: 41, scope: !1688)
!1688 = distinct !DILexicalBlock(scope: !1685, file: !63, line: 658, column: 29)
!1689 = !DILocation(line: 658, column: 45, scope: !1688)
!1690 = !DILocation(line: 658, column: 43, scope: !1688)
!1691 = !DILocation(line: 658, column: 29, scope: !1685)
!1692 = !DILocation(line: 659, column: 39, scope: !1688)
!1693 = !DILocation(line: 659, column: 43, scope: !1688)
!1694 = !DILocation(line: 659, column: 47, scope: !1688)
!1695 = !DILocation(line: 659, column: 45, scope: !1688)
!1696 = !DILocation(line: 659, column: 51, scope: !1688)
!1697 = !DILocation(line: 659, column: 49, scope: !1688)
!1698 = !DILocation(line: 659, column: 31, scope: !1688)
!1699 = !DILocation(line: 663, column: 35, scope: !1700)
!1700 = distinct !DILexicalBlock(scope: !1688, file: !63, line: 660, column: 33)
!1701 = !DILocation(line: 666, column: 35, scope: !1700)
!1702 = !DILocation(line: 667, column: 33, scope: !1700)
!1703 = !DILocation(line: 658, column: 53, scope: !1688)
!1704 = !DILocation(line: 658, column: 29, scope: !1688)
!1705 = distinct !{!1705, !1691, !1706}
!1706 = !DILocation(line: 667, column: 33, scope: !1685)
!1707 = !DILocation(line: 668, column: 27, scope: !1682)
!1708 = !DILocation(line: 670, column: 41, scope: !1709)
!1709 = distinct !DILexicalBlock(scope: !1676, file: !63, line: 670, column: 29)
!1710 = !DILocation(line: 670, column: 31, scope: !1709)
!1711 = !DILocation(line: 670, column: 29, scope: !1676)
!1712 = !DILocation(line: 671, column: 37, scope: !1709)
!1713 = !DILocation(line: 671, column: 27, scope: !1709)
!1714 = !DILocation(line: 672, column: 30, scope: !1676)
!1715 = !DILocation(line: 672, column: 27, scope: !1676)
!1716 = !DILocation(line: 674, column: 19, scope: !1626)
!1717 = !DILocation(line: 675, column: 26, scope: !1596)
!1718 = !DILocation(line: 675, column: 24, scope: !1596)
!1719 = distinct !{!1719, !1624, !1720}
!1720 = !DILocation(line: 675, column: 44, scope: !1596)
!1721 = !DILocation(line: 678, column: 40, scope: !1582)
!1722 = !DILocation(line: 678, column: 38, scope: !1582)
!1723 = !DILocation(line: 680, column: 21, scope: !1724)
!1724 = distinct !DILexicalBlock(scope: !1582, file: !63, line: 680, column: 17)
!1725 = !DILocation(line: 680, column: 19, scope: !1724)
!1726 = !DILocation(line: 680, column: 23, scope: !1724)
!1727 = !DILocation(line: 680, column: 27, scope: !1724)
!1728 = !DILocation(line: 680, column: 45, scope: !1724)
!1729 = !DILocation(line: 680, column: 50, scope: !1724)
!1730 = !DILocation(line: 680, column: 17, scope: !1582)
!1731 = !DILocalVariable(name: "ilim", scope: !1732, file: !63, line: 684, type: !57)
!1732 = distinct !DILexicalBlock(scope: !1724, file: !63, line: 681, column: 15)
!1733 = !DILocation(line: 684, column: 24, scope: !1732)
!1734 = !DILocation(line: 684, column: 31, scope: !1732)
!1735 = !DILocation(line: 684, column: 35, scope: !1732)
!1736 = !DILocation(line: 684, column: 33, scope: !1732)
!1737 = !DILocation(line: 686, column: 17, scope: !1732)
!1738 = !DILocation(line: 688, column: 25, scope: !1739)
!1739 = distinct !DILexicalBlock(scope: !1740, file: !63, line: 688, column: 25)
!1740 = distinct !DILexicalBlock(scope: !1741, file: !63, line: 687, column: 19)
!1741 = distinct !DILexicalBlock(scope: !1742, file: !63, line: 686, column: 17)
!1742 = distinct !DILexicalBlock(scope: !1732, file: !63, line: 686, column: 17)
!1743 = !DILocation(line: 688, column: 43, scope: !1739)
!1744 = !DILocation(line: 688, column: 48, scope: !1739)
!1745 = !DILocation(line: 688, column: 25, scope: !1740)
!1746 = !DILocation(line: 690, column: 25, scope: !1747)
!1747 = distinct !DILexicalBlock(scope: !1739, file: !63, line: 689, column: 23)
!1748 = !DILocation(line: 690, column: 25, scope: !1749)
!1749 = distinct !DILexicalBlock(scope: !1750, file: !63, line: 690, column: 25)
!1750 = distinct !DILexicalBlock(scope: !1747, file: !63, line: 690, column: 25)
!1751 = !DILocation(line: 690, column: 25, scope: !1750)
!1752 = !DILocation(line: 690, column: 25, scope: !1753)
!1753 = distinct !DILexicalBlock(scope: !1750, file: !63, line: 690, column: 25)
!1754 = !DILocation(line: 690, column: 25, scope: !1755)
!1755 = distinct !DILexicalBlock(scope: !1753, file: !63, line: 690, column: 25)
!1756 = !DILocation(line: 690, column: 25, scope: !1757)
!1757 = distinct !DILexicalBlock(scope: !1758, file: !63, line: 690, column: 25)
!1758 = distinct !DILexicalBlock(scope: !1755, file: !63, line: 690, column: 25)
!1759 = !DILocation(line: 690, column: 25, scope: !1758)
!1760 = !DILocation(line: 690, column: 25, scope: !1761)
!1761 = distinct !DILexicalBlock(scope: !1762, file: !63, line: 690, column: 25)
!1762 = distinct !DILexicalBlock(scope: !1755, file: !63, line: 690, column: 25)
!1763 = !DILocation(line: 690, column: 25, scope: !1762)
!1764 = !DILocation(line: 690, column: 25, scope: !1765)
!1765 = distinct !DILexicalBlock(scope: !1766, file: !63, line: 690, column: 25)
!1766 = distinct !DILexicalBlock(scope: !1755, file: !63, line: 690, column: 25)
!1767 = !DILocation(line: 690, column: 25, scope: !1766)
!1768 = !DILocation(line: 690, column: 25, scope: !1769)
!1769 = distinct !DILexicalBlock(scope: !1770, file: !63, line: 690, column: 25)
!1770 = distinct !DILexicalBlock(scope: !1750, file: !63, line: 690, column: 25)
!1771 = !DILocation(line: 690, column: 25, scope: !1770)
!1772 = !DILocation(line: 691, column: 25, scope: !1747)
!1773 = !DILocation(line: 691, column: 25, scope: !1774)
!1774 = distinct !DILexicalBlock(scope: !1775, file: !63, line: 691, column: 25)
!1775 = distinct !DILexicalBlock(scope: !1747, file: !63, line: 691, column: 25)
!1776 = !DILocation(line: 691, column: 25, scope: !1775)
!1777 = !DILocation(line: 692, column: 25, scope: !1747)
!1778 = !DILocation(line: 692, column: 25, scope: !1779)
!1779 = distinct !DILexicalBlock(scope: !1780, file: !63, line: 692, column: 25)
!1780 = distinct !DILexicalBlock(scope: !1747, file: !63, line: 692, column: 25)
!1781 = !DILocation(line: 692, column: 25, scope: !1780)
!1782 = !DILocation(line: 693, column: 36, scope: !1747)
!1783 = !DILocation(line: 693, column: 38, scope: !1747)
!1784 = !DILocation(line: 693, column: 33, scope: !1747)
!1785 = !DILocation(line: 693, column: 29, scope: !1747)
!1786 = !DILocation(line: 693, column: 27, scope: !1747)
!1787 = !DILocation(line: 694, column: 23, scope: !1747)
!1788 = !DILocation(line: 695, column: 30, scope: !1789)
!1789 = distinct !DILexicalBlock(scope: !1739, file: !63, line: 695, column: 30)
!1790 = !DILocation(line: 695, column: 30, scope: !1739)
!1791 = !DILocation(line: 697, column: 25, scope: !1792)
!1792 = distinct !DILexicalBlock(scope: !1789, file: !63, line: 696, column: 23)
!1793 = !DILocation(line: 697, column: 25, scope: !1794)
!1794 = distinct !DILexicalBlock(scope: !1795, file: !63, line: 697, column: 25)
!1795 = distinct !DILexicalBlock(scope: !1792, file: !63, line: 697, column: 25)
!1796 = !DILocation(line: 697, column: 25, scope: !1795)
!1797 = !DILocation(line: 698, column: 40, scope: !1792)
!1798 = !DILocation(line: 699, column: 23, scope: !1792)
!1799 = !DILocation(line: 700, column: 25, scope: !1800)
!1800 = distinct !DILexicalBlock(scope: !1740, file: !63, line: 700, column: 25)
!1801 = !DILocation(line: 700, column: 33, scope: !1800)
!1802 = !DILocation(line: 700, column: 35, scope: !1800)
!1803 = !DILocation(line: 700, column: 30, scope: !1800)
!1804 = !DILocation(line: 700, column: 25, scope: !1740)
!1805 = !DILocation(line: 701, column: 23, scope: !1800)
!1806 = !DILocation(line: 702, column: 21, scope: !1740)
!1807 = !DILocation(line: 702, column: 21, scope: !1808)
!1808 = distinct !DILexicalBlock(scope: !1809, file: !63, line: 702, column: 21)
!1809 = distinct !DILexicalBlock(scope: !1740, file: !63, line: 702, column: 21)
!1810 = !DILocation(line: 702, column: 21, scope: !1809)
!1811 = !DILocation(line: 702, column: 21, scope: !1812)
!1812 = distinct !DILexicalBlock(scope: !1808, file: !63, line: 702, column: 21)
!1813 = !DILocation(line: 702, column: 21, scope: !1814)
!1814 = distinct !DILexicalBlock(scope: !1815, file: !63, line: 702, column: 21)
!1815 = distinct !DILexicalBlock(scope: !1812, file: !63, line: 702, column: 21)
!1816 = !DILocation(line: 702, column: 21, scope: !1815)
!1817 = !DILocation(line: 702, column: 21, scope: !1818)
!1818 = distinct !DILexicalBlock(scope: !1819, file: !63, line: 702, column: 21)
!1819 = distinct !DILexicalBlock(scope: !1812, file: !63, line: 702, column: 21)
!1820 = !DILocation(line: 702, column: 21, scope: !1819)
!1821 = !DILocation(line: 703, column: 21, scope: !1740)
!1822 = !DILocation(line: 703, column: 21, scope: !1823)
!1823 = distinct !DILexicalBlock(scope: !1824, file: !63, line: 703, column: 21)
!1824 = distinct !DILexicalBlock(scope: !1740, file: !63, line: 703, column: 21)
!1825 = !DILocation(line: 703, column: 21, scope: !1824)
!1826 = !DILocation(line: 704, column: 25, scope: !1740)
!1827 = !DILocation(line: 704, column: 29, scope: !1740)
!1828 = !DILocation(line: 704, column: 23, scope: !1740)
!1829 = !DILocation(line: 686, column: 17, scope: !1741)
!1830 = distinct !{!1830, !1831, !1832}
!1831 = !DILocation(line: 686, column: 17, scope: !1742)
!1832 = !DILocation(line: 705, column: 19, scope: !1742)
!1833 = !DILocation(line: 707, column: 17, scope: !1732)
!1834 = !DILocation(line: 710, column: 9, scope: !1332)
!1835 = !DILocation(line: 712, column: 16, scope: !1836)
!1836 = distinct !DILexicalBlock(scope: !1278, file: !63, line: 712, column: 11)
!1837 = !DILocation(line: 712, column: 34, scope: !1836)
!1838 = !DILocation(line: 712, column: 37, scope: !1836)
!1839 = !DILocation(line: 712, column: 51, scope: !1836)
!1840 = !DILocation(line: 713, column: 15, scope: !1836)
!1841 = !DILocation(line: 713, column: 18, scope: !1836)
!1842 = !DILocation(line: 714, column: 14, scope: !1836)
!1843 = !DILocation(line: 714, column: 17, scope: !1836)
!1844 = !DILocation(line: 715, column: 14, scope: !1836)
!1845 = !DILocation(line: 715, column: 17, scope: !1836)
!1846 = !DILocation(line: 715, column: 33, scope: !1836)
!1847 = !DILocation(line: 715, column: 35, scope: !1836)
!1848 = !DILocation(line: 715, column: 51, scope: !1836)
!1849 = !DILocation(line: 715, column: 53, scope: !1836)
!1850 = !DILocation(line: 715, column: 47, scope: !1836)
!1851 = !DILocation(line: 715, column: 65, scope: !1836)
!1852 = !DILocation(line: 716, column: 11, scope: !1836)
!1853 = !DILocation(line: 716, column: 15, scope: !1836)
!1854 = !DILocation(line: 712, column: 11, scope: !1278)
!1855 = !DILocation(line: 717, column: 9, scope: !1836)
!1856 = !DILabel(scope: !1278, name: "store_escape", file: !63, line: 719)
!1857 = !DILocation(line: 719, column: 5, scope: !1278)
!1858 = !DILocation(line: 720, column: 7, scope: !1278)
!1859 = !DILocation(line: 720, column: 7, scope: !1860)
!1860 = distinct !DILexicalBlock(scope: !1861, file: !63, line: 720, column: 7)
!1861 = distinct !DILexicalBlock(scope: !1278, file: !63, line: 720, column: 7)
!1862 = !DILocation(line: 720, column: 7, scope: !1861)
!1863 = !DILocation(line: 720, column: 7, scope: !1864)
!1864 = distinct !DILexicalBlock(scope: !1861, file: !63, line: 720, column: 7)
!1865 = !DILocation(line: 720, column: 7, scope: !1866)
!1866 = distinct !DILexicalBlock(scope: !1864, file: !63, line: 720, column: 7)
!1867 = !DILocation(line: 720, column: 7, scope: !1868)
!1868 = distinct !DILexicalBlock(scope: !1869, file: !63, line: 720, column: 7)
!1869 = distinct !DILexicalBlock(scope: !1866, file: !63, line: 720, column: 7)
!1870 = !DILocation(line: 720, column: 7, scope: !1869)
!1871 = !DILocation(line: 720, column: 7, scope: !1872)
!1872 = distinct !DILexicalBlock(scope: !1873, file: !63, line: 720, column: 7)
!1873 = distinct !DILexicalBlock(scope: !1866, file: !63, line: 720, column: 7)
!1874 = !DILocation(line: 720, column: 7, scope: !1873)
!1875 = !DILocation(line: 720, column: 7, scope: !1876)
!1876 = distinct !DILexicalBlock(scope: !1877, file: !63, line: 720, column: 7)
!1877 = distinct !DILexicalBlock(scope: !1866, file: !63, line: 720, column: 7)
!1878 = !DILocation(line: 720, column: 7, scope: !1877)
!1879 = !DILocation(line: 720, column: 7, scope: !1880)
!1880 = distinct !DILexicalBlock(scope: !1881, file: !63, line: 720, column: 7)
!1881 = distinct !DILexicalBlock(scope: !1861, file: !63, line: 720, column: 7)
!1882 = !DILocation(line: 720, column: 7, scope: !1881)
!1883 = !DILabel(scope: !1278, name: "store_c", file: !63, line: 722)
!1884 = !DILocation(line: 722, column: 5, scope: !1278)
!1885 = !DILocation(line: 723, column: 7, scope: !1278)
!1886 = !DILocation(line: 723, column: 7, scope: !1887)
!1887 = distinct !DILexicalBlock(scope: !1888, file: !63, line: 723, column: 7)
!1888 = distinct !DILexicalBlock(scope: !1278, file: !63, line: 723, column: 7)
!1889 = !DILocation(line: 723, column: 7, scope: !1888)
!1890 = !DILocation(line: 723, column: 7, scope: !1891)
!1891 = distinct !DILexicalBlock(scope: !1887, file: !63, line: 723, column: 7)
!1892 = !DILocation(line: 723, column: 7, scope: !1893)
!1893 = distinct !DILexicalBlock(scope: !1894, file: !63, line: 723, column: 7)
!1894 = distinct !DILexicalBlock(scope: !1891, file: !63, line: 723, column: 7)
!1895 = !DILocation(line: 723, column: 7, scope: !1894)
!1896 = !DILocation(line: 723, column: 7, scope: !1897)
!1897 = distinct !DILexicalBlock(scope: !1898, file: !63, line: 723, column: 7)
!1898 = distinct !DILexicalBlock(scope: !1891, file: !63, line: 723, column: 7)
!1899 = !DILocation(line: 723, column: 7, scope: !1898)
!1900 = !DILocation(line: 724, column: 7, scope: !1278)
!1901 = !DILocation(line: 724, column: 7, scope: !1902)
!1902 = distinct !DILexicalBlock(scope: !1903, file: !63, line: 724, column: 7)
!1903 = distinct !DILexicalBlock(scope: !1278, file: !63, line: 724, column: 7)
!1904 = !DILocation(line: 724, column: 7, scope: !1903)
!1905 = !DILocation(line: 726, column: 13, scope: !1906)
!1906 = distinct !DILexicalBlock(scope: !1278, file: !63, line: 726, column: 11)
!1907 = !DILocation(line: 726, column: 11, scope: !1278)
!1908 = !DILocation(line: 727, column: 38, scope: !1906)
!1909 = !DILocation(line: 727, column: 9, scope: !1906)
!1910 = !DILocation(line: 728, column: 5, scope: !1278)
!1911 = !DILocation(line: 400, column: 75, scope: !1267)
!1912 = !DILocation(line: 400, column: 3, scope: !1267)
!1913 = distinct !{!1913, !1276, !1914}
!1914 = !DILocation(line: 728, column: 5, scope: !1264)
!1915 = !DILocation(line: 730, column: 7, scope: !1916)
!1916 = distinct !DILexicalBlock(scope: !1124, file: !63, line: 730, column: 7)
!1917 = !DILocation(line: 730, column: 11, scope: !1916)
!1918 = !DILocation(line: 730, column: 16, scope: !1916)
!1919 = !DILocation(line: 730, column: 19, scope: !1916)
!1920 = !DILocation(line: 730, column: 33, scope: !1916)
!1921 = !DILocation(line: 731, column: 7, scope: !1916)
!1922 = !DILocation(line: 731, column: 10, scope: !1916)
!1923 = !DILocation(line: 730, column: 7, scope: !1124)
!1924 = !DILocation(line: 732, column: 5, scope: !1916)
!1925 = !DILocation(line: 738, column: 7, scope: !1926)
!1926 = distinct !DILexicalBlock(scope: !1124, file: !63, line: 738, column: 7)
!1927 = !DILocation(line: 738, column: 21, scope: !1926)
!1928 = !DILocation(line: 738, column: 51, scope: !1926)
!1929 = !DILocation(line: 738, column: 56, scope: !1926)
!1930 = !DILocation(line: 739, column: 7, scope: !1926)
!1931 = !DILocation(line: 739, column: 10, scope: !1926)
!1932 = !DILocation(line: 738, column: 7, scope: !1124)
!1933 = !DILocation(line: 741, column: 11, scope: !1934)
!1934 = distinct !DILexicalBlock(scope: !1935, file: !63, line: 741, column: 11)
!1935 = distinct !DILexicalBlock(scope: !1926, file: !63, line: 740, column: 5)
!1936 = !DILocation(line: 741, column: 11, scope: !1935)
!1937 = !DILocation(line: 742, column: 42, scope: !1934)
!1938 = !DILocation(line: 742, column: 50, scope: !1934)
!1939 = !DILocation(line: 742, column: 67, scope: !1934)
!1940 = !DILocation(line: 742, column: 72, scope: !1934)
!1941 = !DILocation(line: 744, column: 42, scope: !1934)
!1942 = !DILocation(line: 744, column: 49, scope: !1934)
!1943 = !DILocation(line: 745, column: 42, scope: !1934)
!1944 = !DILocation(line: 745, column: 54, scope: !1934)
!1945 = !DILocation(line: 742, column: 16, scope: !1934)
!1946 = !DILocation(line: 742, column: 9, scope: !1934)
!1947 = !DILocation(line: 746, column: 18, scope: !1948)
!1948 = distinct !DILexicalBlock(scope: !1934, file: !63, line: 746, column: 16)
!1949 = !DILocation(line: 746, column: 29, scope: !1948)
!1950 = !DILocation(line: 746, column: 32, scope: !1948)
!1951 = !DILocation(line: 746, column: 16, scope: !1934)
!1952 = !DILocation(line: 749, column: 24, scope: !1953)
!1953 = distinct !DILexicalBlock(scope: !1948, file: !63, line: 747, column: 9)
!1954 = !DILocation(line: 749, column: 22, scope: !1953)
!1955 = !DILocation(line: 750, column: 15, scope: !1953)
!1956 = !DILocation(line: 751, column: 11, scope: !1953)
!1957 = !DILocation(line: 753, column: 5, scope: !1935)
!1958 = !DILocation(line: 755, column: 7, scope: !1959)
!1959 = distinct !DILexicalBlock(scope: !1124, file: !63, line: 755, column: 7)
!1960 = !DILocation(line: 755, column: 20, scope: !1959)
!1961 = !DILocation(line: 755, column: 24, scope: !1959)
!1962 = !DILocation(line: 755, column: 7, scope: !1124)
!1963 = !DILocation(line: 756, column: 5, scope: !1959)
!1964 = !DILocation(line: 756, column: 13, scope: !1965)
!1965 = distinct !DILexicalBlock(scope: !1966, file: !63, line: 756, column: 5)
!1966 = distinct !DILexicalBlock(scope: !1959, file: !63, line: 756, column: 5)
!1967 = !DILocation(line: 756, column: 12, scope: !1965)
!1968 = !DILocation(line: 756, column: 5, scope: !1966)
!1969 = !DILocation(line: 757, column: 7, scope: !1965)
!1970 = !DILocation(line: 757, column: 7, scope: !1971)
!1971 = distinct !DILexicalBlock(scope: !1972, file: !63, line: 757, column: 7)
!1972 = distinct !DILexicalBlock(scope: !1965, file: !63, line: 757, column: 7)
!1973 = !DILocation(line: 757, column: 7, scope: !1972)
!1974 = !DILocation(line: 756, column: 39, scope: !1965)
!1975 = !DILocation(line: 756, column: 5, scope: !1965)
!1976 = distinct !{!1976, !1968, !1977}
!1977 = !DILocation(line: 757, column: 7, scope: !1966)
!1978 = !DILocation(line: 759, column: 7, scope: !1979)
!1979 = distinct !DILexicalBlock(scope: !1124, file: !63, line: 759, column: 7)
!1980 = !DILocation(line: 759, column: 13, scope: !1979)
!1981 = !DILocation(line: 759, column: 11, scope: !1979)
!1982 = !DILocation(line: 759, column: 7, scope: !1124)
!1983 = !DILocation(line: 760, column: 5, scope: !1979)
!1984 = !DILocation(line: 760, column: 12, scope: !1979)
!1985 = !DILocation(line: 760, column: 17, scope: !1979)
!1986 = !DILocation(line: 761, column: 10, scope: !1124)
!1987 = !DILocation(line: 761, column: 3, scope: !1124)
!1988 = !DILabel(scope: !1124, name: "force_outer_quoting_style", file: !63, line: 763)
!1989 = !DILocation(line: 763, column: 2, scope: !1124)
!1990 = !DILocation(line: 766, column: 7, scope: !1991)
!1991 = distinct !DILexicalBlock(scope: !1124, file: !63, line: 766, column: 7)
!1992 = !DILocation(line: 766, column: 21, scope: !1991)
!1993 = !DILocation(line: 766, column: 51, scope: !1991)
!1994 = !DILocation(line: 766, column: 54, scope: !1991)
!1995 = !DILocation(line: 766, column: 7, scope: !1124)
!1996 = !DILocation(line: 767, column: 19, scope: !1991)
!1997 = !DILocation(line: 767, column: 5, scope: !1991)
!1998 = !DILocation(line: 768, column: 36, scope: !1124)
!1999 = !DILocation(line: 768, column: 44, scope: !1124)
!2000 = !DILocation(line: 768, column: 56, scope: !1124)
!2001 = !DILocation(line: 768, column: 61, scope: !1124)
!2002 = !DILocation(line: 769, column: 36, scope: !1124)
!2003 = !DILocation(line: 770, column: 36, scope: !1124)
!2004 = !DILocation(line: 770, column: 42, scope: !1124)
!2005 = !DILocation(line: 771, column: 36, scope: !1124)
!2006 = !DILocation(line: 771, column: 48, scope: !1124)
!2007 = !DILocation(line: 768, column: 10, scope: !1124)
!2008 = !DILocation(line: 768, column: 3, scope: !1124)
!2009 = !DILocation(line: 772, column: 1, scope: !1124)
!2010 = !DILocalVariable(name: "buffer", arg: 1, scope: !2011, file: !63, line: 256, type: !32)
!2011 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !63, file: !63, line: 256, type: !1125, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2012, retainedNodes: !4)
!2012 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !2013, nameTableKind: None)
!2013 = !{!2014, !2016, !2018, !2027, !2029, !2031, !2038, !2040}
!2014 = !DIGlobalVariableExpression(var: !2015, expr: !DIExpression())
!2015 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2012, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!2016 = !DIGlobalVariableExpression(var: !2017, expr: !DIExpression())
!2017 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2012, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!2018 = !DIGlobalVariableExpression(var: !2019, expr: !DIExpression())
!2019 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2012, file: !63, line: 1052, type: !2020, isLocal: false, isDefinition: true)
!2020 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !2021)
!2021 = !{!2022, !2023, !2024, !2025, !2026}
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2020, file: !63, line: 68, baseType: !40, size: 32)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2020, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2020, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2020, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2020, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!2027 = !DIGlobalVariableExpression(var: !2028, expr: !DIExpression())
!2028 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2012, file: !63, line: 116, type: !2020, isLocal: true, isDefinition: true)
!2029 = !DIGlobalVariableExpression(var: !2030, expr: !DIExpression())
!2030 = distinct !DIGlobalVariable(name: "slot0", scope: !2012, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!2031 = !DIGlobalVariableExpression(var: !2032, expr: !DIExpression())
!2032 = distinct !DIGlobalVariable(name: "slotvec", scope: !2012, file: !63, line: 845, type: !2033, isLocal: true, isDefinition: true)
!2033 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2034, size: 64)
!2034 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !2035)
!2035 = !{!2036, !2037}
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2034, file: !63, line: 836, baseType: !57, size: 64)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2034, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!2038 = !DIGlobalVariableExpression(var: !2039, expr: !DIExpression())
!2039 = distinct !DIGlobalVariable(name: "nslots", scope: !2012, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!2040 = !DIGlobalVariableExpression(var: !2041, expr: !DIExpression())
!2041 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2012, file: !63, line: 844, type: !2034, isLocal: true, isDefinition: true)
!2042 = !DILocalVariable(name: "buffersize", arg: 2, scope: !2011, file: !63, line: 256, type: !57)
!2043 = !DILocalVariable(name: "arg", arg: 3, scope: !2011, file: !63, line: 257, type: !6)
!2044 = !DILocalVariable(name: "argsize", arg: 4, scope: !2011, file: !63, line: 257, type: !57)
!2045 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !2011, file: !63, line: 258, type: !40)
!2046 = !DILocalVariable(name: "flags", arg: 6, scope: !2011, file: !63, line: 258, type: !25)
!2047 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !2011, file: !63, line: 259, type: !1127)
!2048 = !DILocalVariable(name: "left_quote", arg: 8, scope: !2011, file: !63, line: 260, type: !6)
!2049 = !DILocalVariable(name: "right_quote", arg: 9, scope: !2011, file: !63, line: 261, type: !6)
!2050 = !DILocalVariable(name: "i", scope: !2011, file: !63, line: 263, type: !57)
!2051 = !DILocalVariable(name: "len", scope: !2011, file: !63, line: 264, type: !57)
!2052 = !DILocalVariable(name: "orig_buffersize", scope: !2011, file: !63, line: 265, type: !57)
!2053 = !DILocalVariable(name: "quote_string", scope: !2011, file: !63, line: 266, type: !6)
!2054 = !DILocalVariable(name: "quote_string_len", scope: !2011, file: !63, line: 267, type: !57)
!2055 = !DILocalVariable(name: "backslash_escapes", scope: !2011, file: !63, line: 268, type: !17)
!2056 = !DILocalVariable(name: "unibyte_locale", scope: !2011, file: !63, line: 269, type: !17)
!2057 = !DILocalVariable(name: "elide_outer_quotes", scope: !2011, file: !63, line: 270, type: !17)
!2058 = !DILocalVariable(name: "pending_shell_escape_end", scope: !2011, file: !63, line: 271, type: !17)
!2059 = !DILocalVariable(name: "encountered_single_quote", scope: !2011, file: !63, line: 272, type: !17)
!2060 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !2011, file: !63, line: 273, type: !17)
!2061 = !DILocalVariable(name: "escaping", scope: !2062, file: !63, line: 405, type: !17)
!2062 = distinct !DILexicalBlock(scope: !2063, file: !63, line: 401, column: 5)
!2063 = distinct !DILexicalBlock(scope: !2064, file: !63, line: 400, column: 3)
!2064 = distinct !DILexicalBlock(scope: !2065, file: !63, line: 400, column: 3)
!2065 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !63, file: !63, line: 256, type: !1125, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2066, retainedNodes: !4)
!2066 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !2067, nameTableKind: None)
!2067 = !{!2068, !2070, !2072, !2081, !2083, !2085, !2092, !2094}
!2068 = !DIGlobalVariableExpression(var: !2069, expr: !DIExpression())
!2069 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2066, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!2070 = !DIGlobalVariableExpression(var: !2071, expr: !DIExpression())
!2071 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2066, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!2072 = !DIGlobalVariableExpression(var: !2073, expr: !DIExpression())
!2073 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2066, file: !63, line: 1052, type: !2074, isLocal: false, isDefinition: true)
!2074 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !2075)
!2075 = !{!2076, !2077, !2078, !2079, !2080}
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2074, file: !63, line: 68, baseType: !40, size: 32)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2074, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2074, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2074, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2074, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!2081 = !DIGlobalVariableExpression(var: !2082, expr: !DIExpression())
!2082 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2066, file: !63, line: 116, type: !2074, isLocal: true, isDefinition: true)
!2083 = !DIGlobalVariableExpression(var: !2084, expr: !DIExpression())
!2084 = distinct !DIGlobalVariable(name: "slot0", scope: !2066, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!2085 = !DIGlobalVariableExpression(var: !2086, expr: !DIExpression())
!2086 = distinct !DIGlobalVariable(name: "slotvec", scope: !2066, file: !63, line: 845, type: !2087, isLocal: true, isDefinition: true)
!2087 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2088, size: 64)
!2088 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !2089)
!2089 = !{!2090, !2091}
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2088, file: !63, line: 836, baseType: !57, size: 64)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2088, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!2092 = !DIGlobalVariableExpression(var: !2093, expr: !DIExpression())
!2093 = distinct !DIGlobalVariable(name: "nslots", scope: !2066, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!2094 = !DIGlobalVariableExpression(var: !2095, expr: !DIExpression())
!2095 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2066, file: !63, line: 844, type: !2088, isLocal: true, isDefinition: true)
!2096 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !2062, file: !63, line: 406, type: !17)
!2097 = distinct !DISubprogram(name: "gettext_quote", scope: !63, file: !63, line: 207, type: !2098, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !37, retainedNodes: !4)
!2098 = !DISubroutineType(types: !2099)
!2099 = !{!6, !6, !40}
!2100 = !DILocalVariable(name: "msgid", arg: 1, scope: !2097, file: !63, line: 207, type: !6)
!2101 = !DILocation(line: 207, column: 28, scope: !2097)
!2102 = !DILocalVariable(name: "s", arg: 2, scope: !2097, file: !63, line: 207, type: !40)
!2103 = !DILocation(line: 207, column: 54, scope: !2097)
!2104 = !DILocalVariable(name: "translation", scope: !2097, file: !63, line: 209, type: !6)
!2105 = !DILocation(line: 209, column: 15, scope: !2097)
!2106 = !DILocation(line: 209, column: 29, scope: !2097)
!2107 = !DILocalVariable(name: "locale_code", scope: !2097, file: !63, line: 210, type: !6)
!2108 = !DILocation(line: 210, column: 15, scope: !2097)
!2109 = !DILocation(line: 212, column: 7, scope: !2110)
!2110 = distinct !DILexicalBlock(scope: !2097, file: !63, line: 212, column: 7)
!2111 = !DILocation(line: 212, column: 22, scope: !2110)
!2112 = !DILocation(line: 212, column: 19, scope: !2110)
!2113 = !DILocation(line: 212, column: 7, scope: !2097)
!2114 = !DILocation(line: 213, column: 12, scope: !2110)
!2115 = !DILocation(line: 213, column: 5, scope: !2110)
!2116 = !DILocation(line: 233, column: 17, scope: !2097)
!2117 = !DILocation(line: 233, column: 15, scope: !2097)
!2118 = !DILocation(line: 234, column: 7, scope: !2119)
!2119 = distinct !DILexicalBlock(scope: !2097, file: !63, line: 234, column: 7)
!2120 = !DILocation(line: 234, column: 7, scope: !2097)
!2121 = !DILocation(line: 235, column: 12, scope: !2119)
!2122 = !DILocation(line: 235, column: 21, scope: !2119)
!2123 = !DILocation(line: 235, column: 5, scope: !2119)
!2124 = !DILocation(line: 236, column: 7, scope: !2125)
!2125 = distinct !DILexicalBlock(scope: !2097, file: !63, line: 236, column: 7)
!2126 = !DILocation(line: 236, column: 7, scope: !2097)
!2127 = !DILocation(line: 237, column: 12, scope: !2125)
!2128 = !DILocation(line: 237, column: 21, scope: !2125)
!2129 = !DILocation(line: 237, column: 5, scope: !2125)
!2130 = !DILocation(line: 239, column: 11, scope: !2097)
!2131 = !DILocation(line: 239, column: 13, scope: !2097)
!2132 = !DILocation(line: 239, column: 3, scope: !2097)
!2133 = !DILocation(line: 240, column: 1, scope: !2097)
!2134 = !DILocalVariable(name: "msgid", arg: 1, scope: !2135, file: !63, line: 207, type: !6)
!2135 = distinct !DISubprogram(name: "gettext_quote", scope: !63, file: !63, line: 207, type: !2098, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2136, retainedNodes: !4)
!2136 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !2137, nameTableKind: None)
!2137 = !{!2138, !2140, !2142, !2151, !2153, !2155, !2162, !2164}
!2138 = !DIGlobalVariableExpression(var: !2139, expr: !DIExpression())
!2139 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2136, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!2140 = !DIGlobalVariableExpression(var: !2141, expr: !DIExpression())
!2141 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2136, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!2142 = !DIGlobalVariableExpression(var: !2143, expr: !DIExpression())
!2143 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2136, file: !63, line: 1052, type: !2144, isLocal: false, isDefinition: true)
!2144 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !2145)
!2145 = !{!2146, !2147, !2148, !2149, !2150}
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2144, file: !63, line: 68, baseType: !40, size: 32)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2144, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2144, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2144, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2144, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!2151 = !DIGlobalVariableExpression(var: !2152, expr: !DIExpression())
!2152 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2136, file: !63, line: 116, type: !2144, isLocal: true, isDefinition: true)
!2153 = !DIGlobalVariableExpression(var: !2154, expr: !DIExpression())
!2154 = distinct !DIGlobalVariable(name: "slot0", scope: !2136, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!2155 = !DIGlobalVariableExpression(var: !2156, expr: !DIExpression())
!2156 = distinct !DIGlobalVariable(name: "slotvec", scope: !2136, file: !63, line: 845, type: !2157, isLocal: true, isDefinition: true)
!2157 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2158, size: 64)
!2158 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !2159)
!2159 = !{!2160, !2161}
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2158, file: !63, line: 836, baseType: !57, size: 64)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2158, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!2162 = !DIGlobalVariableExpression(var: !2163, expr: !DIExpression())
!2163 = distinct !DIGlobalVariable(name: "nslots", scope: !2136, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!2164 = !DIGlobalVariableExpression(var: !2165, expr: !DIExpression())
!2165 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2136, file: !63, line: 844, type: !2158, isLocal: true, isDefinition: true)
!2166 = !DILocalVariable(name: "s", arg: 2, scope: !2135, file: !63, line: 207, type: !40)
!2167 = !DILocalVariable(name: "translation", scope: !2135, file: !63, line: 209, type: !6)
!2168 = !DILocalVariable(name: "locale_code", scope: !2135, file: !63, line: 210, type: !6)
!2169 = distinct !DISubprogram(name: "quotearg_char", scope: !63, file: !63, line: 991, type: !2170, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !37, retainedNodes: !4)
!2170 = !DISubroutineType(types: !2171)
!2171 = !{!32, !6, !8}
!2172 = !DILocalVariable(name: "arg", arg: 1, scope: !2169, file: !63, line: 991, type: !6)
!2173 = !DILocation(line: 991, column: 28, scope: !2169)
!2174 = !DILocalVariable(name: "ch", arg: 2, scope: !2169, file: !63, line: 991, type: !8)
!2175 = !DILocation(line: 991, column: 38, scope: !2169)
!2176 = !DILocation(line: 993, column: 29, scope: !2169)
!2177 = !DILocation(line: 993, column: 44, scope: !2169)
!2178 = !DILocation(line: 993, column: 10, scope: !2169)
!2179 = !DILocation(line: 993, column: 3, scope: !2169)
!2180 = !DILocalVariable(name: "arg", arg: 1, scope: !2181, file: !63, line: 991, type: !6)
!2181 = distinct !DISubprogram(name: "quotearg_char", scope: !63, file: !63, line: 991, type: !2170, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2182, retainedNodes: !4)
!2182 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !2183, nameTableKind: None)
!2183 = !{!2184, !2186, !2188, !2197, !2199, !2201, !2208, !2210}
!2184 = !DIGlobalVariableExpression(var: !2185, expr: !DIExpression())
!2185 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2182, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!2186 = !DIGlobalVariableExpression(var: !2187, expr: !DIExpression())
!2187 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2182, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!2188 = !DIGlobalVariableExpression(var: !2189, expr: !DIExpression())
!2189 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2182, file: !63, line: 1052, type: !2190, isLocal: false, isDefinition: true)
!2190 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !2191)
!2191 = !{!2192, !2193, !2194, !2195, !2196}
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2190, file: !63, line: 68, baseType: !40, size: 32)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2190, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2190, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2190, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2190, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!2197 = !DIGlobalVariableExpression(var: !2198, expr: !DIExpression())
!2198 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2182, file: !63, line: 116, type: !2190, isLocal: true, isDefinition: true)
!2199 = !DIGlobalVariableExpression(var: !2200, expr: !DIExpression())
!2200 = distinct !DIGlobalVariable(name: "slot0", scope: !2182, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!2201 = !DIGlobalVariableExpression(var: !2202, expr: !DIExpression())
!2202 = distinct !DIGlobalVariable(name: "slotvec", scope: !2182, file: !63, line: 845, type: !2203, isLocal: true, isDefinition: true)
!2203 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2204, size: 64)
!2204 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !2205)
!2205 = !{!2206, !2207}
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2204, file: !63, line: 836, baseType: !57, size: 64)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2204, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!2208 = !DIGlobalVariableExpression(var: !2209, expr: !DIExpression())
!2209 = distinct !DIGlobalVariable(name: "nslots", scope: !2182, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!2210 = !DIGlobalVariableExpression(var: !2211, expr: !DIExpression())
!2211 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2182, file: !63, line: 844, type: !2204, isLocal: true, isDefinition: true)
!2212 = !DILocalVariable(name: "ch", arg: 2, scope: !2181, file: !63, line: 991, type: !8)
!2213 = distinct !DISubprogram(name: "quotearg_colon", scope: !63, file: !63, line: 997, type: !2214, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !37, retainedNodes: !4)
!2214 = !DISubroutineType(types: !2215)
!2215 = !{!32, !6}
!2216 = !DILocalVariable(name: "arg", arg: 1, scope: !2213, file: !63, line: 997, type: !6)
!2217 = !DILocation(line: 997, column: 29, scope: !2213)
!2218 = !DILocation(line: 999, column: 25, scope: !2213)
!2219 = !DILocation(line: 999, column: 10, scope: !2213)
!2220 = !DILocation(line: 999, column: 3, scope: !2213)
!2221 = !DILocalVariable(name: "arg", arg: 1, scope: !2222, file: !63, line: 997, type: !6)
!2222 = distinct !DISubprogram(name: "quotearg_colon", scope: !63, file: !63, line: 997, type: !2214, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2223, retainedNodes: !4)
!2223 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !2224, nameTableKind: None)
!2224 = !{!2225, !2227, !2229, !2238, !2240, !2242, !2249, !2251}
!2225 = !DIGlobalVariableExpression(var: !2226, expr: !DIExpression())
!2226 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2223, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!2227 = !DIGlobalVariableExpression(var: !2228, expr: !DIExpression())
!2228 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2223, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!2229 = !DIGlobalVariableExpression(var: !2230, expr: !DIExpression())
!2230 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2223, file: !63, line: 1052, type: !2231, isLocal: false, isDefinition: true)
!2231 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !2232)
!2232 = !{!2233, !2234, !2235, !2236, !2237}
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2231, file: !63, line: 68, baseType: !40, size: 32)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2231, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2231, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2231, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2231, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!2238 = !DIGlobalVariableExpression(var: !2239, expr: !DIExpression())
!2239 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2223, file: !63, line: 116, type: !2231, isLocal: true, isDefinition: true)
!2240 = !DIGlobalVariableExpression(var: !2241, expr: !DIExpression())
!2241 = distinct !DIGlobalVariable(name: "slot0", scope: !2223, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!2242 = !DIGlobalVariableExpression(var: !2243, expr: !DIExpression())
!2243 = distinct !DIGlobalVariable(name: "slotvec", scope: !2223, file: !63, line: 845, type: !2244, isLocal: true, isDefinition: true)
!2244 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2245, size: 64)
!2245 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !2246)
!2246 = !{!2247, !2248}
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2245, file: !63, line: 836, baseType: !57, size: 64)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2245, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!2249 = !DIGlobalVariableExpression(var: !2250, expr: !DIExpression())
!2250 = distinct !DIGlobalVariable(name: "nslots", scope: !2223, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!2251 = !DIGlobalVariableExpression(var: !2252, expr: !DIExpression())
!2252 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2223, file: !63, line: 844, type: !2245, isLocal: true, isDefinition: true)
!2253 = distinct !DISubprogram(name: "version_etc_arn", scope: !2254, file: !2254, line: 61, type: !2255, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !114, retainedNodes: !4)
!2254 = !DIFile(filename: "lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2255 = !DISubroutineType(types: !2256)
!2256 = !{null, !2257, !6, !6, !6, !2312, !57}
!2257 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2258, size: 64)
!2258 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2259, line: 7, baseType: !2260)
!2259 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2260 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2261, line: 49, size: 1728, elements: !2262)
!2261 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2262 = !{!2263, !2264, !2265, !2266, !2267, !2268, !2269, !2270, !2271, !2272, !2273, !2274, !2275, !2278, !2280, !2281, !2282, !2286, !2287, !2289, !2293, !2296, !2298, !2301, !2304, !2305, !2306, !2307, !2308}
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2260, file: !2261, line: 51, baseType: !25, size: 32)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2260, file: !2261, line: 54, baseType: !32, size: 64, offset: 64)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2260, file: !2261, line: 55, baseType: !32, size: 64, offset: 128)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2260, file: !2261, line: 56, baseType: !32, size: 64, offset: 192)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2260, file: !2261, line: 57, baseType: !32, size: 64, offset: 256)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2260, file: !2261, line: 58, baseType: !32, size: 64, offset: 320)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2260, file: !2261, line: 59, baseType: !32, size: 64, offset: 384)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2260, file: !2261, line: 60, baseType: !32, size: 64, offset: 448)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2260, file: !2261, line: 61, baseType: !32, size: 64, offset: 512)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2260, file: !2261, line: 64, baseType: !32, size: 64, offset: 576)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2260, file: !2261, line: 65, baseType: !32, size: 64, offset: 640)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2260, file: !2261, line: 66, baseType: !32, size: 64, offset: 704)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2260, file: !2261, line: 68, baseType: !2276, size: 64, offset: 768)
!2276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2277, size: 64)
!2277 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2261, line: 36, flags: DIFlagFwdDecl)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2260, file: !2261, line: 70, baseType: !2279, size: 64, offset: 832)
!2279 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2260, size: 64)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2260, file: !2261, line: 72, baseType: !25, size: 32, offset: 896)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2260, file: !2261, line: 73, baseType: !25, size: 32, offset: 928)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2260, file: !2261, line: 74, baseType: !2283, size: 64, offset: 960)
!2283 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2284, line: 152, baseType: !2285)
!2284 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2285 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2260, file: !2261, line: 77, baseType: !56, size: 16, offset: 1024)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2260, file: !2261, line: 78, baseType: !2288, size: 8, offset: 1040)
!2288 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2260, file: !2261, line: 79, baseType: !2290, size: 8, offset: 1048)
!2290 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 8, elements: !2291)
!2291 = !{!2292}
!2292 = !DISubrange(count: 1)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2260, file: !2261, line: 81, baseType: !2294, size: 64, offset: 1088)
!2294 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2295, size: 64)
!2295 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2261, line: 43, baseType: null)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2260, file: !2261, line: 89, baseType: !2297, size: 64, offset: 1152)
!2297 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2284, line: 153, baseType: !2285)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2260, file: !2261, line: 91, baseType: !2299, size: 64, offset: 1216)
!2299 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2300, size: 64)
!2300 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2261, line: 37, flags: DIFlagFwdDecl)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2260, file: !2261, line: 92, baseType: !2302, size: 64, offset: 1280)
!2302 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2303, size: 64)
!2303 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2261, line: 38, flags: DIFlagFwdDecl)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2260, file: !2261, line: 93, baseType: !2279, size: 64, offset: 1344)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2260, file: !2261, line: 94, baseType: !31, size: 64, offset: 1408)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2260, file: !2261, line: 95, baseType: !57, size: 64, offset: 1472)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2260, file: !2261, line: 96, baseType: !25, size: 32, offset: 1536)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2260, file: !2261, line: 98, baseType: !2309, size: 160, offset: 1568)
!2309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 160, elements: !2310)
!2310 = !{!2311}
!2311 = !DISubrange(count: 20)
!2312 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !65, size: 64)
!2313 = !DILocalVariable(name: "stream", arg: 1, scope: !2253, file: !2254, line: 61, type: !2257)
!2314 = !DILocation(line: 61, column: 24, scope: !2253)
!2315 = !DILocalVariable(name: "command_name", arg: 2, scope: !2253, file: !2254, line: 62, type: !6)
!2316 = !DILocation(line: 62, column: 30, scope: !2253)
!2317 = !DILocalVariable(name: "package", arg: 3, scope: !2253, file: !2254, line: 62, type: !6)
!2318 = !DILocation(line: 62, column: 56, scope: !2253)
!2319 = !DILocalVariable(name: "version", arg: 4, scope: !2253, file: !2254, line: 63, type: !6)
!2320 = !DILocation(line: 63, column: 30, scope: !2253)
!2321 = !DILocalVariable(name: "authors", arg: 5, scope: !2253, file: !2254, line: 64, type: !2312)
!2322 = !DILocation(line: 64, column: 39, scope: !2253)
!2323 = !DILocalVariable(name: "n_authors", arg: 6, scope: !2253, file: !2254, line: 64, type: !57)
!2324 = !DILocation(line: 64, column: 55, scope: !2253)
!2325 = !DILocation(line: 66, column: 7, scope: !2326)
!2326 = distinct !DILexicalBlock(scope: !2253, file: !2254, line: 66, column: 7)
!2327 = !DILocation(line: 66, column: 7, scope: !2253)
!2328 = !DILocation(line: 67, column: 14, scope: !2326)
!2329 = !DILocation(line: 67, column: 38, scope: !2326)
!2330 = !DILocation(line: 67, column: 52, scope: !2326)
!2331 = !DILocation(line: 67, column: 61, scope: !2326)
!2332 = !DILocation(line: 67, column: 5, scope: !2326)
!2333 = !DILocation(line: 69, column: 14, scope: !2326)
!2334 = !DILocation(line: 69, column: 33, scope: !2326)
!2335 = !DILocation(line: 69, column: 42, scope: !2326)
!2336 = !DILocation(line: 69, column: 5, scope: !2326)
!2337 = !DILocation(line: 83, column: 12, scope: !2253)
!2338 = !DILocation(line: 83, column: 43, scope: !2253)
!2339 = !DILocation(line: 83, column: 3, scope: !2253)
!2340 = !DILocation(line: 85, column: 3, scope: !2253)
!2341 = !DILocation(line: 88, column: 12, scope: !2253)
!2342 = !DILocation(line: 88, column: 20, scope: !2253)
!2343 = !DILocation(line: 88, column: 3, scope: !2253)
!2344 = !DILocation(line: 95, column: 3, scope: !2253)
!2345 = !DILocation(line: 97, column: 11, scope: !2253)
!2346 = !DILocation(line: 97, column: 3, scope: !2253)
!2347 = !DILocation(line: 102, column: 7, scope: !2348)
!2348 = distinct !DILexicalBlock(scope: !2253, file: !2254, line: 98, column: 5)
!2349 = !DILocation(line: 105, column: 16, scope: !2348)
!2350 = !DILocation(line: 105, column: 24, scope: !2348)
!2351 = !DILocation(line: 105, column: 47, scope: !2348)
!2352 = !DILocation(line: 105, column: 7, scope: !2348)
!2353 = !DILocation(line: 106, column: 7, scope: !2348)
!2354 = !DILocation(line: 109, column: 16, scope: !2348)
!2355 = !DILocation(line: 109, column: 24, scope: !2348)
!2356 = !DILocation(line: 109, column: 54, scope: !2348)
!2357 = !DILocation(line: 109, column: 66, scope: !2348)
!2358 = !DILocation(line: 109, column: 7, scope: !2348)
!2359 = !DILocation(line: 110, column: 7, scope: !2348)
!2360 = !DILocation(line: 113, column: 16, scope: !2348)
!2361 = !DILocation(line: 113, column: 24, scope: !2348)
!2362 = !DILocation(line: 114, column: 16, scope: !2348)
!2363 = !DILocation(line: 114, column: 28, scope: !2348)
!2364 = !DILocation(line: 114, column: 40, scope: !2348)
!2365 = !DILocation(line: 113, column: 7, scope: !2348)
!2366 = !DILocation(line: 115, column: 7, scope: !2348)
!2367 = !DILocation(line: 120, column: 16, scope: !2348)
!2368 = !DILocation(line: 120, column: 24, scope: !2348)
!2369 = !DILocation(line: 121, column: 16, scope: !2348)
!2370 = !DILocation(line: 121, column: 28, scope: !2348)
!2371 = !DILocation(line: 121, column: 40, scope: !2348)
!2372 = !DILocation(line: 121, column: 52, scope: !2348)
!2373 = !DILocation(line: 120, column: 7, scope: !2348)
!2374 = !DILocation(line: 122, column: 7, scope: !2348)
!2375 = !DILocation(line: 127, column: 16, scope: !2348)
!2376 = !DILocation(line: 127, column: 24, scope: !2348)
!2377 = !DILocation(line: 128, column: 16, scope: !2348)
!2378 = !DILocation(line: 128, column: 28, scope: !2348)
!2379 = !DILocation(line: 128, column: 40, scope: !2348)
!2380 = !DILocation(line: 128, column: 52, scope: !2348)
!2381 = !DILocation(line: 128, column: 64, scope: !2348)
!2382 = !DILocation(line: 127, column: 7, scope: !2348)
!2383 = !DILocation(line: 129, column: 7, scope: !2348)
!2384 = !DILocation(line: 134, column: 16, scope: !2348)
!2385 = !DILocation(line: 134, column: 24, scope: !2348)
!2386 = !DILocation(line: 135, column: 16, scope: !2348)
!2387 = !DILocation(line: 135, column: 28, scope: !2348)
!2388 = !DILocation(line: 135, column: 40, scope: !2348)
!2389 = !DILocation(line: 135, column: 52, scope: !2348)
!2390 = !DILocation(line: 135, column: 64, scope: !2348)
!2391 = !DILocation(line: 136, column: 16, scope: !2348)
!2392 = !DILocation(line: 134, column: 7, scope: !2348)
!2393 = !DILocation(line: 137, column: 7, scope: !2348)
!2394 = !DILocation(line: 142, column: 16, scope: !2348)
!2395 = !DILocation(line: 142, column: 24, scope: !2348)
!2396 = !DILocation(line: 143, column: 16, scope: !2348)
!2397 = !DILocation(line: 143, column: 28, scope: !2348)
!2398 = !DILocation(line: 143, column: 40, scope: !2348)
!2399 = !DILocation(line: 143, column: 52, scope: !2348)
!2400 = !DILocation(line: 143, column: 64, scope: !2348)
!2401 = !DILocation(line: 144, column: 16, scope: !2348)
!2402 = !DILocation(line: 144, column: 28, scope: !2348)
!2403 = !DILocation(line: 142, column: 7, scope: !2348)
!2404 = !DILocation(line: 145, column: 7, scope: !2348)
!2405 = !DILocation(line: 150, column: 16, scope: !2348)
!2406 = !DILocation(line: 150, column: 24, scope: !2348)
!2407 = !DILocation(line: 152, column: 17, scope: !2348)
!2408 = !DILocation(line: 152, column: 29, scope: !2348)
!2409 = !DILocation(line: 152, column: 41, scope: !2348)
!2410 = !DILocation(line: 152, column: 53, scope: !2348)
!2411 = !DILocation(line: 152, column: 65, scope: !2348)
!2412 = !DILocation(line: 153, column: 17, scope: !2348)
!2413 = !DILocation(line: 153, column: 29, scope: !2348)
!2414 = !DILocation(line: 153, column: 41, scope: !2348)
!2415 = !DILocation(line: 150, column: 7, scope: !2348)
!2416 = !DILocation(line: 154, column: 7, scope: !2348)
!2417 = !DILocation(line: 159, column: 16, scope: !2348)
!2418 = !DILocation(line: 159, column: 24, scope: !2348)
!2419 = !DILocation(line: 161, column: 16, scope: !2348)
!2420 = !DILocation(line: 161, column: 28, scope: !2348)
!2421 = !DILocation(line: 161, column: 40, scope: !2348)
!2422 = !DILocation(line: 161, column: 52, scope: !2348)
!2423 = !DILocation(line: 161, column: 64, scope: !2348)
!2424 = !DILocation(line: 162, column: 16, scope: !2348)
!2425 = !DILocation(line: 162, column: 28, scope: !2348)
!2426 = !DILocation(line: 162, column: 40, scope: !2348)
!2427 = !DILocation(line: 162, column: 52, scope: !2348)
!2428 = !DILocation(line: 159, column: 7, scope: !2348)
!2429 = !DILocation(line: 163, column: 7, scope: !2348)
!2430 = !DILocation(line: 170, column: 16, scope: !2348)
!2431 = !DILocation(line: 170, column: 24, scope: !2348)
!2432 = !DILocation(line: 172, column: 17, scope: !2348)
!2433 = !DILocation(line: 172, column: 29, scope: !2348)
!2434 = !DILocation(line: 172, column: 41, scope: !2348)
!2435 = !DILocation(line: 172, column: 53, scope: !2348)
!2436 = !DILocation(line: 172, column: 65, scope: !2348)
!2437 = !DILocation(line: 173, column: 17, scope: !2348)
!2438 = !DILocation(line: 173, column: 29, scope: !2348)
!2439 = !DILocation(line: 173, column: 41, scope: !2348)
!2440 = !DILocation(line: 173, column: 53, scope: !2348)
!2441 = !DILocation(line: 170, column: 7, scope: !2348)
!2442 = !DILocation(line: 174, column: 7, scope: !2348)
!2443 = !DILocation(line: 176, column: 1, scope: !2253)
!2444 = !DILocalVariable(name: "stream", arg: 1, scope: !2445, file: !2254, line: 61, type: !2448)
!2445 = distinct !DISubprogram(name: "version_etc_arn", scope: !2254, file: !2254, line: 61, type: !2446, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2482, retainedNodes: !4)
!2446 = !DISubroutineType(types: !2447)
!2447 = !{null, !2448, !6, !6, !6, !2312, !57}
!2448 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2449, size: 64)
!2449 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2259, line: 7, baseType: !2450)
!2450 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2261, line: 49, size: 1728, elements: !2451)
!2451 = !{!2452, !2453, !2454, !2455, !2456, !2457, !2458, !2459, !2460, !2461, !2462, !2463, !2464, !2465, !2467, !2468, !2469, !2470, !2471, !2472, !2473, !2474, !2475, !2476, !2477, !2478, !2479, !2480, !2481}
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2450, file: !2261, line: 51, baseType: !25, size: 32)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2450, file: !2261, line: 54, baseType: !32, size: 64, offset: 64)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2450, file: !2261, line: 55, baseType: !32, size: 64, offset: 128)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2450, file: !2261, line: 56, baseType: !32, size: 64, offset: 192)
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2450, file: !2261, line: 57, baseType: !32, size: 64, offset: 256)
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2450, file: !2261, line: 58, baseType: !32, size: 64, offset: 320)
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2450, file: !2261, line: 59, baseType: !32, size: 64, offset: 384)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2450, file: !2261, line: 60, baseType: !32, size: 64, offset: 448)
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2450, file: !2261, line: 61, baseType: !32, size: 64, offset: 512)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2450, file: !2261, line: 64, baseType: !32, size: 64, offset: 576)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2450, file: !2261, line: 65, baseType: !32, size: 64, offset: 640)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2450, file: !2261, line: 66, baseType: !32, size: 64, offset: 704)
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2450, file: !2261, line: 68, baseType: !2276, size: 64, offset: 768)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2450, file: !2261, line: 70, baseType: !2466, size: 64, offset: 832)
!2466 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2450, size: 64)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2450, file: !2261, line: 72, baseType: !25, size: 32, offset: 896)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2450, file: !2261, line: 73, baseType: !25, size: 32, offset: 928)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2450, file: !2261, line: 74, baseType: !2283, size: 64, offset: 960)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2450, file: !2261, line: 77, baseType: !56, size: 16, offset: 1024)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2450, file: !2261, line: 78, baseType: !2288, size: 8, offset: 1040)
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2450, file: !2261, line: 79, baseType: !2290, size: 8, offset: 1048)
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2450, file: !2261, line: 81, baseType: !2294, size: 64, offset: 1088)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2450, file: !2261, line: 89, baseType: !2297, size: 64, offset: 1152)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2450, file: !2261, line: 91, baseType: !2299, size: 64, offset: 1216)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2450, file: !2261, line: 92, baseType: !2302, size: 64, offset: 1280)
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2450, file: !2261, line: 93, baseType: !2466, size: 64, offset: 1344)
!2478 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2450, file: !2261, line: 94, baseType: !31, size: 64, offset: 1408)
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2450, file: !2261, line: 95, baseType: !57, size: 64, offset: 1472)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2450, file: !2261, line: 96, baseType: !25, size: 32, offset: 1536)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2450, file: !2261, line: 98, baseType: !2309, size: 160, offset: 1568)
!2482 = distinct !DICompileUnit(language: DW_LANG_C99, file: !115, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!2483 = !DILocalVariable(name: "command_name", arg: 2, scope: !2445, file: !2254, line: 62, type: !6)
!2484 = !DILocalVariable(name: "package", arg: 3, scope: !2445, file: !2254, line: 62, type: !6)
!2485 = !DILocalVariable(name: "version", arg: 4, scope: !2445, file: !2254, line: 63, type: !6)
!2486 = !DILocalVariable(name: "authors", arg: 5, scope: !2445, file: !2254, line: 64, type: !2312)
!2487 = !DILocalVariable(name: "n_authors", arg: 6, scope: !2445, file: !2254, line: 64, type: !57)
!2488 = distinct !DISubprogram(name: "version_etc_va", scope: !2254, file: !2254, line: 199, type: !2489, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !114, retainedNodes: !4)
!2489 = !DISubroutineType(types: !2490)
!2490 = !{null, !2257, !6, !6, !6, !2491}
!2491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2492, size: 64)
!2492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !115, line: 192, size: 192, elements: !2493)
!2493 = !{!2494, !2495, !2496, !2497}
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2492, file: !115, line: 192, baseType: !42, size: 32)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2492, file: !115, line: 192, baseType: !42, size: 32, offset: 32)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2492, file: !115, line: 192, baseType: !31, size: 64, offset: 64)
!2497 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2492, file: !115, line: 192, baseType: !31, size: 64, offset: 128)
!2498 = !DILocalVariable(name: "stream", arg: 1, scope: !2488, file: !2254, line: 199, type: !2257)
!2499 = !DILocation(line: 199, column: 23, scope: !2488)
!2500 = !DILocalVariable(name: "command_name", arg: 2, scope: !2488, file: !2254, line: 200, type: !6)
!2501 = !DILocation(line: 200, column: 29, scope: !2488)
!2502 = !DILocalVariable(name: "package", arg: 3, scope: !2488, file: !2254, line: 200, type: !6)
!2503 = !DILocation(line: 200, column: 55, scope: !2488)
!2504 = !DILocalVariable(name: "version", arg: 4, scope: !2488, file: !2254, line: 201, type: !6)
!2505 = !DILocation(line: 201, column: 29, scope: !2488)
!2506 = !DILocalVariable(name: "authors", arg: 5, scope: !2488, file: !2254, line: 201, type: !2491)
!2507 = !DILocation(line: 201, column: 46, scope: !2488)
!2508 = !DILocalVariable(name: "n_authors", scope: !2488, file: !2254, line: 203, type: !57)
!2509 = !DILocation(line: 203, column: 10, scope: !2488)
!2510 = !DILocalVariable(name: "authtab", scope: !2488, file: !2254, line: 204, type: !2511)
!2511 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 640, elements: !72)
!2512 = !DILocation(line: 204, column: 15, scope: !2488)
!2513 = !DILocation(line: 206, column: 18, scope: !2514)
!2514 = distinct !DILexicalBlock(scope: !2488, file: !2254, line: 206, column: 3)
!2515 = !DILocation(line: 206, column: 8, scope: !2514)
!2516 = !DILocation(line: 207, column: 8, scope: !2517)
!2517 = distinct !DILexicalBlock(scope: !2514, file: !2254, line: 206, column: 3)
!2518 = !DILocation(line: 207, column: 18, scope: !2517)
!2519 = !DILocation(line: 208, column: 10, scope: !2517)
!2520 = !DILocation(line: 208, column: 35, scope: !2517)
!2521 = !DILocation(line: 208, column: 22, scope: !2517)
!2522 = !DILocation(line: 208, column: 14, scope: !2517)
!2523 = !DILocation(line: 208, column: 33, scope: !2517)
!2524 = !DILocation(line: 208, column: 67, scope: !2517)
!2525 = !DILocation(line: 0, scope: !2517)
!2526 = !DILocation(line: 206, column: 3, scope: !2514)
!2527 = !DILocation(line: 209, column: 17, scope: !2517)
!2528 = !DILocation(line: 206, column: 3, scope: !2517)
!2529 = distinct !{!2529, !2526, !2530}
!2530 = !DILocation(line: 210, column: 5, scope: !2514)
!2531 = !DILocation(line: 211, column: 20, scope: !2488)
!2532 = !DILocation(line: 211, column: 28, scope: !2488)
!2533 = !DILocation(line: 211, column: 42, scope: !2488)
!2534 = !DILocation(line: 211, column: 51, scope: !2488)
!2535 = !DILocation(line: 212, column: 20, scope: !2488)
!2536 = !DILocation(line: 212, column: 29, scope: !2488)
!2537 = !DILocation(line: 211, column: 3, scope: !2488)
!2538 = !DILocation(line: 213, column: 1, scope: !2488)
!2539 = !DILocalVariable(name: "stream", arg: 1, scope: !2540, file: !2254, line: 199, type: !2543)
!2540 = distinct !DISubprogram(name: "version_etc_va", scope: !2254, file: !2254, line: 199, type: !2541, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2584, retainedNodes: !4)
!2541 = !DISubroutineType(types: !2542)
!2542 = !{null, !2543, !6, !6, !6, !2577}
!2543 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2544, size: 64)
!2544 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2259, line: 7, baseType: !2545)
!2545 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2261, line: 49, size: 1728, elements: !2546)
!2546 = !{!2547, !2548, !2549, !2550, !2551, !2552, !2553, !2554, !2555, !2556, !2557, !2558, !2559, !2560, !2562, !2563, !2564, !2565, !2566, !2567, !2568, !2569, !2570, !2571, !2572, !2573, !2574, !2575, !2576}
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2545, file: !2261, line: 51, baseType: !25, size: 32)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2545, file: !2261, line: 54, baseType: !32, size: 64, offset: 64)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2545, file: !2261, line: 55, baseType: !32, size: 64, offset: 128)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2545, file: !2261, line: 56, baseType: !32, size: 64, offset: 192)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2545, file: !2261, line: 57, baseType: !32, size: 64, offset: 256)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2545, file: !2261, line: 58, baseType: !32, size: 64, offset: 320)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2545, file: !2261, line: 59, baseType: !32, size: 64, offset: 384)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2545, file: !2261, line: 60, baseType: !32, size: 64, offset: 448)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2545, file: !2261, line: 61, baseType: !32, size: 64, offset: 512)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2545, file: !2261, line: 64, baseType: !32, size: 64, offset: 576)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2545, file: !2261, line: 65, baseType: !32, size: 64, offset: 640)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2545, file: !2261, line: 66, baseType: !32, size: 64, offset: 704)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2545, file: !2261, line: 68, baseType: !2276, size: 64, offset: 768)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2545, file: !2261, line: 70, baseType: !2561, size: 64, offset: 832)
!2561 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2545, size: 64)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2545, file: !2261, line: 72, baseType: !25, size: 32, offset: 896)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2545, file: !2261, line: 73, baseType: !25, size: 32, offset: 928)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2545, file: !2261, line: 74, baseType: !2283, size: 64, offset: 960)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2545, file: !2261, line: 77, baseType: !56, size: 16, offset: 1024)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2545, file: !2261, line: 78, baseType: !2288, size: 8, offset: 1040)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2545, file: !2261, line: 79, baseType: !2290, size: 8, offset: 1048)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2545, file: !2261, line: 81, baseType: !2294, size: 64, offset: 1088)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2545, file: !2261, line: 89, baseType: !2297, size: 64, offset: 1152)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2545, file: !2261, line: 91, baseType: !2299, size: 64, offset: 1216)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2545, file: !2261, line: 92, baseType: !2302, size: 64, offset: 1280)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2545, file: !2261, line: 93, baseType: !2561, size: 64, offset: 1344)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2545, file: !2261, line: 94, baseType: !31, size: 64, offset: 1408)
!2574 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2545, file: !2261, line: 95, baseType: !57, size: 64, offset: 1472)
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2545, file: !2261, line: 96, baseType: !25, size: 32, offset: 1536)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2545, file: !2261, line: 98, baseType: !2309, size: 160, offset: 1568)
!2577 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2578, size: 64)
!2578 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !115, line: 192, size: 192, elements: !2579)
!2579 = !{!2580, !2581, !2582, !2583}
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2578, file: !115, line: 192, baseType: !42, size: 32)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2578, file: !115, line: 192, baseType: !42, size: 32, offset: 32)
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2578, file: !115, line: 192, baseType: !31, size: 64, offset: 64)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2578, file: !115, line: 192, baseType: !31, size: 64, offset: 128)
!2584 = distinct !DICompileUnit(language: DW_LANG_C99, file: !115, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!2585 = !DILocalVariable(name: "command_name", arg: 2, scope: !2540, file: !2254, line: 200, type: !6)
!2586 = !DILocalVariable(name: "package", arg: 3, scope: !2540, file: !2254, line: 200, type: !6)
!2587 = !DILocalVariable(name: "version", arg: 4, scope: !2540, file: !2254, line: 201, type: !6)
!2588 = !DILocalVariable(name: "authors", arg: 5, scope: !2540, file: !2254, line: 201, type: !2577)
!2589 = !DILocalVariable(name: "n_authors", scope: !2540, file: !2254, line: 203, type: !57)
!2590 = !DILocalVariable(name: "authtab", scope: !2540, file: !2254, line: 204, type: !2511)
!2591 = distinct !DISubprogram(name: "version_etc", scope: !2254, file: !2254, line: 230, type: !2592, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !114, retainedNodes: !4)
!2592 = !DISubroutineType(types: !2593)
!2593 = !{null, !2257, !6, !6, !6, null}
!2594 = !DILocalVariable(name: "stream", arg: 1, scope: !2591, file: !2254, line: 230, type: !2257)
!2595 = !DILocation(line: 230, column: 20, scope: !2591)
!2596 = !DILocalVariable(name: "command_name", arg: 2, scope: !2591, file: !2254, line: 231, type: !6)
!2597 = !DILocation(line: 231, column: 26, scope: !2591)
!2598 = !DILocalVariable(name: "package", arg: 3, scope: !2591, file: !2254, line: 231, type: !6)
!2599 = !DILocation(line: 231, column: 52, scope: !2591)
!2600 = !DILocalVariable(name: "version", arg: 4, scope: !2591, file: !2254, line: 232, type: !6)
!2601 = !DILocation(line: 232, column: 26, scope: !2591)
!2602 = !DILocalVariable(name: "authors", scope: !2591, file: !2254, line: 234, type: !2603)
!2603 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !2604, line: 52, baseType: !2605)
!2604 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!2605 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !2606, line: 32, baseType: !2607)
!2606 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stdarg.h", directory: "")
!2607 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !115, line: 234, baseType: !2608)
!2608 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2492, size: 192, elements: !2291)
!2609 = !DILocation(line: 234, column: 11, scope: !2591)
!2610 = !DILocation(line: 236, column: 3, scope: !2591)
!2611 = !DILocation(line: 237, column: 19, scope: !2591)
!2612 = !DILocation(line: 237, column: 27, scope: !2591)
!2613 = !DILocation(line: 237, column: 41, scope: !2591)
!2614 = !DILocation(line: 237, column: 50, scope: !2591)
!2615 = !DILocation(line: 237, column: 59, scope: !2591)
!2616 = !DILocation(line: 237, column: 3, scope: !2591)
!2617 = !DILocation(line: 238, column: 3, scope: !2591)
!2618 = !DILocation(line: 239, column: 1, scope: !2591)
!2619 = !DILocalVariable(name: "stream", arg: 1, scope: !2620, file: !2254, line: 230, type: !2623)
!2620 = distinct !DISubprogram(name: "version_etc", scope: !2254, file: !2254, line: 230, type: !2621, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2657, retainedNodes: !4)
!2621 = !DISubroutineType(types: !2622)
!2622 = !{null, !2623, !6, !6, !6, null}
!2623 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2624, size: 64)
!2624 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2259, line: 7, baseType: !2625)
!2625 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2261, line: 49, size: 1728, elements: !2626)
!2626 = !{!2627, !2628, !2629, !2630, !2631, !2632, !2633, !2634, !2635, !2636, !2637, !2638, !2639, !2640, !2642, !2643, !2644, !2645, !2646, !2647, !2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656}
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2625, file: !2261, line: 51, baseType: !25, size: 32)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2625, file: !2261, line: 54, baseType: !32, size: 64, offset: 64)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2625, file: !2261, line: 55, baseType: !32, size: 64, offset: 128)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2625, file: !2261, line: 56, baseType: !32, size: 64, offset: 192)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2625, file: !2261, line: 57, baseType: !32, size: 64, offset: 256)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2625, file: !2261, line: 58, baseType: !32, size: 64, offset: 320)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2625, file: !2261, line: 59, baseType: !32, size: 64, offset: 384)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2625, file: !2261, line: 60, baseType: !32, size: 64, offset: 448)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2625, file: !2261, line: 61, baseType: !32, size: 64, offset: 512)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2625, file: !2261, line: 64, baseType: !32, size: 64, offset: 576)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2625, file: !2261, line: 65, baseType: !32, size: 64, offset: 640)
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2625, file: !2261, line: 66, baseType: !32, size: 64, offset: 704)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2625, file: !2261, line: 68, baseType: !2276, size: 64, offset: 768)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2625, file: !2261, line: 70, baseType: !2641, size: 64, offset: 832)
!2641 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2625, size: 64)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2625, file: !2261, line: 72, baseType: !25, size: 32, offset: 896)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2625, file: !2261, line: 73, baseType: !25, size: 32, offset: 928)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2625, file: !2261, line: 74, baseType: !2283, size: 64, offset: 960)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2625, file: !2261, line: 77, baseType: !56, size: 16, offset: 1024)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2625, file: !2261, line: 78, baseType: !2288, size: 8, offset: 1040)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2625, file: !2261, line: 79, baseType: !2290, size: 8, offset: 1048)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2625, file: !2261, line: 81, baseType: !2294, size: 64, offset: 1088)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2625, file: !2261, line: 89, baseType: !2297, size: 64, offset: 1152)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2625, file: !2261, line: 91, baseType: !2299, size: 64, offset: 1216)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2625, file: !2261, line: 92, baseType: !2302, size: 64, offset: 1280)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2625, file: !2261, line: 93, baseType: !2641, size: 64, offset: 1344)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2625, file: !2261, line: 94, baseType: !31, size: 64, offset: 1408)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2625, file: !2261, line: 95, baseType: !57, size: 64, offset: 1472)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2625, file: !2261, line: 96, baseType: !25, size: 32, offset: 1536)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2625, file: !2261, line: 98, baseType: !2309, size: 160, offset: 1568)
!2657 = distinct !DICompileUnit(language: DW_LANG_C99, file: !115, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!2658 = !DILocalVariable(name: "command_name", arg: 2, scope: !2620, file: !2254, line: 231, type: !6)
!2659 = !DILocalVariable(name: "package", arg: 3, scope: !2620, file: !2254, line: 231, type: !6)
!2660 = !DILocalVariable(name: "version", arg: 4, scope: !2620, file: !2254, line: 232, type: !6)
!2661 = !DILocalVariable(name: "authors", scope: !2620, file: !2254, line: 234, type: !2662)
!2662 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !2604, line: 52, baseType: !2663)
!2663 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !2606, line: 32, baseType: !2664)
!2664 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !115, line: 234, baseType: !2665)
!2665 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2666, size: 192, elements: !2291)
!2666 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !115, line: 192, size: 192, elements: !2667)
!2667 = !{!2668, !2669, !2670, !2671}
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2666, file: !115, line: 192, baseType: !42, size: 32)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2666, file: !115, line: 192, baseType: !42, size: 32, offset: 32)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2666, file: !115, line: 192, baseType: !31, size: 64, offset: 64)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2666, file: !115, line: 192, baseType: !31, size: 64, offset: 128)
!2672 = distinct !DISubprogram(name: "xmalloc", scope: !2673, file: !2673, line: 39, type: !2674, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !117, retainedNodes: !4)
!2673 = !DIFile(filename: "lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2674 = !DISubroutineType(types: !2675)
!2675 = !{!31, !57}
!2676 = !DILocalVariable(name: "n", arg: 1, scope: !2672, file: !2673, line: 39, type: !57)
!2677 = !DILocation(line: 39, column: 17, scope: !2672)
!2678 = !DILocalVariable(name: "p", scope: !2672, file: !2673, line: 41, type: !31)
!2679 = !DILocation(line: 41, column: 9, scope: !2672)
!2680 = !DILocation(line: 41, column: 21, scope: !2672)
!2681 = !DILocation(line: 41, column: 13, scope: !2672)
!2682 = !DILocation(line: 42, column: 8, scope: !2683)
!2683 = distinct !DILexicalBlock(scope: !2672, file: !2673, line: 42, column: 7)
!2684 = !DILocation(line: 42, column: 10, scope: !2683)
!2685 = !DILocation(line: 42, column: 13, scope: !2683)
!2686 = !DILocation(line: 42, column: 15, scope: !2683)
!2687 = !DILocation(line: 42, column: 7, scope: !2672)
!2688 = !DILocation(line: 43, column: 5, scope: !2683)
!2689 = !DILocation(line: 44, column: 10, scope: !2672)
!2690 = !DILocation(line: 44, column: 3, scope: !2672)
!2691 = !DILocalVariable(name: "n", arg: 1, scope: !2692, file: !2673, line: 39, type: !57)
!2692 = distinct !DISubprogram(name: "xmalloc", scope: !2673, file: !2673, line: 39, type: !2674, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2693, retainedNodes: !4)
!2693 = distinct !DICompileUnit(language: DW_LANG_C99, file: !118, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !119, nameTableKind: None)
!2694 = !DILocalVariable(name: "p", scope: !2692, file: !2673, line: 41, type: !31)
!2695 = distinct !DISubprogram(name: "xrealloc", scope: !2673, file: !2673, line: 51, type: !2696, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !117, retainedNodes: !4)
!2696 = !DISubroutineType(types: !2697)
!2697 = !{!31, !31, !57}
!2698 = !DILocalVariable(name: "p", arg: 1, scope: !2695, file: !2673, line: 51, type: !31)
!2699 = !DILocation(line: 51, column: 17, scope: !2695)
!2700 = !DILocalVariable(name: "n", arg: 2, scope: !2695, file: !2673, line: 51, type: !57)
!2701 = !DILocation(line: 51, column: 27, scope: !2695)
!2702 = !DILocation(line: 53, column: 8, scope: !2703)
!2703 = distinct !DILexicalBlock(scope: !2695, file: !2673, line: 53, column: 7)
!2704 = !DILocation(line: 53, column: 10, scope: !2703)
!2705 = !DILocation(line: 53, column: 13, scope: !2703)
!2706 = !DILocation(line: 53, column: 7, scope: !2695)
!2707 = !DILocation(line: 57, column: 13, scope: !2708)
!2708 = distinct !DILexicalBlock(scope: !2703, file: !2673, line: 54, column: 5)
!2709 = !DILocation(line: 57, column: 7, scope: !2708)
!2710 = !DILocation(line: 58, column: 7, scope: !2708)
!2711 = !DILocation(line: 61, column: 16, scope: !2695)
!2712 = !DILocation(line: 61, column: 19, scope: !2695)
!2713 = !DILocation(line: 61, column: 7, scope: !2695)
!2714 = !DILocation(line: 61, column: 5, scope: !2695)
!2715 = !DILocation(line: 62, column: 8, scope: !2716)
!2716 = distinct !DILexicalBlock(scope: !2695, file: !2673, line: 62, column: 7)
!2717 = !DILocation(line: 62, column: 10, scope: !2716)
!2718 = !DILocation(line: 62, column: 13, scope: !2716)
!2719 = !DILocation(line: 62, column: 7, scope: !2695)
!2720 = !DILocation(line: 63, column: 5, scope: !2716)
!2721 = !DILocation(line: 64, column: 10, scope: !2695)
!2722 = !DILocation(line: 64, column: 3, scope: !2695)
!2723 = !DILocation(line: 65, column: 1, scope: !2695)
!2724 = !DILocalVariable(name: "p", arg: 1, scope: !2725, file: !2673, line: 51, type: !31)
!2725 = distinct !DISubprogram(name: "xrealloc", scope: !2673, file: !2673, line: 51, type: !2696, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2726, retainedNodes: !4)
!2726 = distinct !DICompileUnit(language: DW_LANG_C99, file: !118, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !119, nameTableKind: None)
!2727 = !DILocalVariable(name: "n", arg: 2, scope: !2725, file: !2673, line: 51, type: !57)
!2728 = distinct !DISubprogram(name: "xcharalloc", scope: !2729, file: !2729, line: 216, type: !2730, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !117, retainedNodes: !4)
!2729 = !DIFile(filename: "./lib/xalloc.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2730 = !DISubroutineType(types: !2731)
!2731 = !{!32, !57}
!2732 = !DILocalVariable(name: "n", arg: 1, scope: !2728, file: !2729, line: 216, type: !57)
!2733 = !DILocation(line: 216, column: 20, scope: !2728)
!2734 = !DILocation(line: 218, column: 10, scope: !2728)
!2735 = !DILocation(line: 218, column: 3, scope: !2728)
!2736 = !DILocalVariable(name: "n", arg: 1, scope: !2737, file: !2729, line: 216, type: !57)
!2737 = distinct !DISubprogram(name: "xcharalloc", scope: !2729, file: !2729, line: 216, type: !2730, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2738, retainedNodes: !4)
!2738 = distinct !DICompileUnit(language: DW_LANG_C99, file: !118, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !119, nameTableKind: None)
!2739 = distinct !DISubprogram(name: "xalloc_die", scope: !2740, file: !2740, line: 32, type: !584, scopeLine: 33, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !120, retainedNodes: !4)
!2740 = !DIFile(filename: "lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2741 = !DILocation(line: 34, column: 10, scope: !2739)
!2742 = !DILocation(line: 34, column: 33, scope: !2739)
!2743 = !DILocation(line: 34, column: 3, scope: !2739)
!2744 = !DILocation(line: 40, column: 3, scope: !2739)
!2745 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !2746, file: !2746, line: 86, type: !2747, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !122, retainedNodes: !4)
!2746 = !DIFile(filename: "lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2747 = !DISubroutineType(types: !2748)
!2748 = !{!57, !2749, !6, !57, !2750}
!2749 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1627, size: 64)
!2750 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2751, size: 64)
!2751 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1598, line: 6, baseType: !2752)
!2752 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1600, line: 21, baseType: !2753)
!2753 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1600, line: 13, size: 64, elements: !2754)
!2754 = !{!2755, !2756}
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !2753, file: !1600, line: 15, baseType: !25, size: 32)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !2753, file: !1600, line: 20, baseType: !2757, size: 32, offset: 32)
!2757 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2753, file: !1600, line: 16, size: 32, elements: !2758)
!2758 = !{!2759, !2760}
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !2757, file: !1600, line: 18, baseType: !42, size: 32)
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !2757, file: !1600, line: 19, baseType: !1609, size: 32)
!2761 = !DILocalVariable(name: "pwc", arg: 1, scope: !2745, file: !2746, line: 86, type: !2749)
!2762 = !DILocation(line: 86, column: 23, scope: !2745)
!2763 = !DILocalVariable(name: "s", arg: 2, scope: !2745, file: !2746, line: 86, type: !6)
!2764 = !DILocation(line: 86, column: 40, scope: !2745)
!2765 = !DILocalVariable(name: "n", arg: 3, scope: !2745, file: !2746, line: 86, type: !57)
!2766 = !DILocation(line: 86, column: 50, scope: !2745)
!2767 = !DILocalVariable(name: "ps", arg: 4, scope: !2745, file: !2746, line: 86, type: !2750)
!2768 = !DILocation(line: 86, column: 64, scope: !2745)
!2769 = !DILocalVariable(name: "ret", scope: !2745, file: !2746, line: 88, type: !57)
!2770 = !DILocation(line: 88, column: 10, scope: !2745)
!2771 = !DILocalVariable(name: "wc", scope: !2745, file: !2746, line: 89, type: !1627)
!2772 = !DILocation(line: 89, column: 11, scope: !2745)
!2773 = !DILocation(line: 105, column: 9, scope: !2774)
!2774 = distinct !DILexicalBlock(scope: !2745, file: !2746, line: 105, column: 7)
!2775 = !DILocation(line: 105, column: 7, scope: !2745)
!2776 = !DILocation(line: 106, column: 9, scope: !2774)
!2777 = !DILocation(line: 106, column: 5, scope: !2774)
!2778 = !DILocation(line: 145, column: 18, scope: !2745)
!2779 = !DILocation(line: 145, column: 23, scope: !2745)
!2780 = !DILocation(line: 145, column: 26, scope: !2745)
!2781 = !DILocation(line: 145, column: 29, scope: !2745)
!2782 = !DILocation(line: 145, column: 9, scope: !2745)
!2783 = !DILocation(line: 145, column: 7, scope: !2745)
!2784 = !DILocation(line: 154, column: 22, scope: !2785)
!2785 = distinct !DILexicalBlock(scope: !2745, file: !2746, line: 154, column: 7)
!2786 = !DILocation(line: 154, column: 19, scope: !2785)
!2787 = !DILocation(line: 154, column: 26, scope: !2785)
!2788 = !DILocation(line: 154, column: 29, scope: !2785)
!2789 = !DILocation(line: 154, column: 31, scope: !2785)
!2790 = !DILocation(line: 154, column: 36, scope: !2785)
!2791 = !DILocation(line: 154, column: 41, scope: !2785)
!2792 = !DILocation(line: 154, column: 7, scope: !2745)
!2793 = !DILocalVariable(name: "uc", scope: !2794, file: !2746, line: 156, type: !130)
!2794 = distinct !DILexicalBlock(scope: !2785, file: !2746, line: 155, column: 5)
!2795 = !DILocation(line: 156, column: 21, scope: !2794)
!2796 = !DILocation(line: 156, column: 27, scope: !2794)
!2797 = !DILocation(line: 156, column: 26, scope: !2794)
!2798 = !DILocation(line: 157, column: 14, scope: !2794)
!2799 = !DILocation(line: 157, column: 8, scope: !2794)
!2800 = !DILocation(line: 157, column: 12, scope: !2794)
!2801 = !DILocation(line: 158, column: 7, scope: !2794)
!2802 = !DILocation(line: 162, column: 10, scope: !2745)
!2803 = !DILocation(line: 162, column: 3, scope: !2745)
!2804 = !DILocation(line: 163, column: 1, scope: !2745)
!2805 = !DILocalVariable(name: "pwc", arg: 1, scope: !2806, file: !2746, line: 86, type: !2749)
!2806 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !2746, file: !2746, line: 86, type: !2807, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2820, retainedNodes: !4)
!2807 = !DISubroutineType(types: !2808)
!2808 = !{!57, !2749, !6, !57, !2809}
!2809 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2810, size: 64)
!2810 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1598, line: 6, baseType: !2811)
!2811 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1600, line: 21, baseType: !2812)
!2812 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1600, line: 13, size: 64, elements: !2813)
!2813 = !{!2814, !2815}
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !2812, file: !1600, line: 15, baseType: !25, size: 32)
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !2812, file: !1600, line: 20, baseType: !2816, size: 32, offset: 32)
!2816 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2812, file: !1600, line: 16, size: 32, elements: !2817)
!2817 = !{!2818, !2819}
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !2816, file: !1600, line: 18, baseType: !42, size: 32)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !2816, file: !1600, line: 19, baseType: !1609, size: 32)
!2820 = distinct !DICompileUnit(language: DW_LANG_C99, file: !123, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !124, nameTableKind: None)
!2821 = !DILocalVariable(name: "s", arg: 2, scope: !2806, file: !2746, line: 86, type: !6)
!2822 = !DILocalVariable(name: "n", arg: 3, scope: !2806, file: !2746, line: 86, type: !57)
!2823 = !DILocalVariable(name: "ps", arg: 4, scope: !2806, file: !2746, line: 86, type: !2809)
!2824 = !DILocalVariable(name: "ret", scope: !2806, file: !2746, line: 88, type: !57)
!2825 = !DILocalVariable(name: "wc", scope: !2806, file: !2746, line: 89, type: !1627)
!2826 = distinct !DISubprogram(name: "c_strcasecmp", scope: !2827, file: !2827, line: 27, type: !2828, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !125, retainedNodes: !4)
!2827 = !DIFile(filename: "lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2828 = !DISubroutineType(types: !2829)
!2829 = !{!25, !6, !6}
!2830 = !DILocalVariable(name: "s1", arg: 1, scope: !2826, file: !2827, line: 27, type: !6)
!2831 = !DILocation(line: 27, column: 27, scope: !2826)
!2832 = !DILocalVariable(name: "s2", arg: 2, scope: !2826, file: !2827, line: 27, type: !6)
!2833 = !DILocation(line: 27, column: 43, scope: !2826)
!2834 = !DILocalVariable(name: "p1", scope: !2826, file: !2827, line: 29, type: !128)
!2835 = !DILocation(line: 29, column: 33, scope: !2826)
!2836 = !DILocation(line: 29, column: 62, scope: !2826)
!2837 = !DILocalVariable(name: "p2", scope: !2826, file: !2827, line: 30, type: !128)
!2838 = !DILocation(line: 30, column: 33, scope: !2826)
!2839 = !DILocation(line: 30, column: 62, scope: !2826)
!2840 = !DILocalVariable(name: "c1", scope: !2826, file: !2827, line: 31, type: !130)
!2841 = !DILocation(line: 31, column: 17, scope: !2826)
!2842 = !DILocalVariable(name: "c2", scope: !2826, file: !2827, line: 31, type: !130)
!2843 = !DILocation(line: 31, column: 21, scope: !2826)
!2844 = !DILocation(line: 33, column: 7, scope: !2845)
!2845 = distinct !DILexicalBlock(scope: !2826, file: !2827, line: 33, column: 7)
!2846 = !DILocation(line: 33, column: 13, scope: !2845)
!2847 = !DILocation(line: 33, column: 10, scope: !2845)
!2848 = !DILocation(line: 33, column: 7, scope: !2826)
!2849 = !DILocation(line: 34, column: 5, scope: !2845)
!2850 = !DILocation(line: 36, column: 3, scope: !2826)
!2851 = !DILocation(line: 38, column: 24, scope: !2852)
!2852 = distinct !DILexicalBlock(scope: !2826, file: !2827, line: 37, column: 5)
!2853 = !DILocation(line: 38, column: 23, scope: !2852)
!2854 = !DILocation(line: 38, column: 12, scope: !2852)
!2855 = !DILocation(line: 38, column: 10, scope: !2852)
!2856 = !DILocation(line: 39, column: 24, scope: !2852)
!2857 = !DILocation(line: 39, column: 23, scope: !2852)
!2858 = !DILocation(line: 39, column: 12, scope: !2852)
!2859 = !DILocation(line: 39, column: 10, scope: !2852)
!2860 = !DILocation(line: 41, column: 11, scope: !2861)
!2861 = distinct !DILexicalBlock(scope: !2852, file: !2827, line: 41, column: 11)
!2862 = !DILocation(line: 41, column: 14, scope: !2861)
!2863 = !DILocation(line: 41, column: 11, scope: !2852)
!2864 = !DILocation(line: 42, column: 9, scope: !2861)
!2865 = !DILocation(line: 44, column: 7, scope: !2852)
!2866 = !DILocation(line: 45, column: 7, scope: !2852)
!2867 = !DILocation(line: 46, column: 5, scope: !2852)
!2868 = !DILocation(line: 47, column: 10, scope: !2826)
!2869 = !DILocation(line: 47, column: 16, scope: !2826)
!2870 = !DILocation(line: 47, column: 13, scope: !2826)
!2871 = distinct !{!2871, !2850, !2872}
!2872 = !DILocation(line: 47, column: 18, scope: !2826)
!2873 = !DILocation(line: 50, column: 12, scope: !2874)
!2874 = distinct !DILexicalBlock(scope: !2826, file: !2827, line: 49, column: 7)
!2875 = !DILocation(line: 50, column: 17, scope: !2874)
!2876 = !DILocation(line: 50, column: 15, scope: !2874)
!2877 = !DILocation(line: 50, column: 5, scope: !2874)
!2878 = !DILocation(line: 56, column: 1, scope: !2826)
!2879 = !DILocalVariable(name: "s1", arg: 1, scope: !2880, file: !2827, line: 27, type: !6)
!2880 = distinct !DISubprogram(name: "c_strcasecmp", scope: !2827, file: !2827, line: 27, type: !2828, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2881, retainedNodes: !4)
!2881 = distinct !DICompileUnit(language: DW_LANG_C99, file: !126, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !127, nameTableKind: None)
!2882 = !DILocalVariable(name: "s2", arg: 2, scope: !2880, file: !2827, line: 27, type: !6)
!2883 = !DILocalVariable(name: "p1", scope: !2880, file: !2827, line: 29, type: !128)
!2884 = !DILocalVariable(name: "p2", scope: !2880, file: !2827, line: 30, type: !128)
!2885 = !DILocalVariable(name: "c1", scope: !2880, file: !2827, line: 31, type: !130)
!2886 = !DILocalVariable(name: "c2", scope: !2880, file: !2827, line: 31, type: !130)
!2887 = distinct !DISubprogram(name: "close_stream", scope: !2888, file: !2888, line: 56, type: !2889, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !131, retainedNodes: !4)
!2888 = !DIFile(filename: "lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2889 = !DISubroutineType(types: !2890)
!2890 = !{!25, !2891}
!2891 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2892, size: 64)
!2892 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2259, line: 7, baseType: !2893)
!2893 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2261, line: 49, size: 1728, elements: !2894)
!2894 = !{!2895, !2896, !2897, !2898, !2899, !2900, !2901, !2902, !2903, !2904, !2905, !2906, !2907, !2908, !2910, !2911, !2912, !2913, !2914, !2915, !2916, !2917, !2918, !2919, !2920, !2921, !2922, !2923, !2924}
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2893, file: !2261, line: 51, baseType: !25, size: 32)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2893, file: !2261, line: 54, baseType: !32, size: 64, offset: 64)
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2893, file: !2261, line: 55, baseType: !32, size: 64, offset: 128)
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2893, file: !2261, line: 56, baseType: !32, size: 64, offset: 192)
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2893, file: !2261, line: 57, baseType: !32, size: 64, offset: 256)
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2893, file: !2261, line: 58, baseType: !32, size: 64, offset: 320)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2893, file: !2261, line: 59, baseType: !32, size: 64, offset: 384)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2893, file: !2261, line: 60, baseType: !32, size: 64, offset: 448)
!2903 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2893, file: !2261, line: 61, baseType: !32, size: 64, offset: 512)
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2893, file: !2261, line: 64, baseType: !32, size: 64, offset: 576)
!2905 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2893, file: !2261, line: 65, baseType: !32, size: 64, offset: 640)
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2893, file: !2261, line: 66, baseType: !32, size: 64, offset: 704)
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2893, file: !2261, line: 68, baseType: !2276, size: 64, offset: 768)
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2893, file: !2261, line: 70, baseType: !2909, size: 64, offset: 832)
!2909 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2893, size: 64)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2893, file: !2261, line: 72, baseType: !25, size: 32, offset: 896)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2893, file: !2261, line: 73, baseType: !25, size: 32, offset: 928)
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2893, file: !2261, line: 74, baseType: !2283, size: 64, offset: 960)
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2893, file: !2261, line: 77, baseType: !56, size: 16, offset: 1024)
!2914 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2893, file: !2261, line: 78, baseType: !2288, size: 8, offset: 1040)
!2915 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2893, file: !2261, line: 79, baseType: !2290, size: 8, offset: 1048)
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2893, file: !2261, line: 81, baseType: !2294, size: 64, offset: 1088)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2893, file: !2261, line: 89, baseType: !2297, size: 64, offset: 1152)
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2893, file: !2261, line: 91, baseType: !2299, size: 64, offset: 1216)
!2919 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2893, file: !2261, line: 92, baseType: !2302, size: 64, offset: 1280)
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2893, file: !2261, line: 93, baseType: !2909, size: 64, offset: 1344)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2893, file: !2261, line: 94, baseType: !31, size: 64, offset: 1408)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2893, file: !2261, line: 95, baseType: !57, size: 64, offset: 1472)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2893, file: !2261, line: 96, baseType: !25, size: 32, offset: 1536)
!2924 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2893, file: !2261, line: 98, baseType: !2309, size: 160, offset: 1568)
!2925 = !DILocalVariable(name: "stream", arg: 1, scope: !2887, file: !2888, line: 56, type: !2891)
!2926 = !DILocation(line: 56, column: 21, scope: !2887)
!2927 = !DILocalVariable(name: "some_pending", scope: !2887, file: !2888, line: 58, type: !2928)
!2928 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !17)
!2929 = !DILocation(line: 58, column: 14, scope: !2887)
!2930 = !DILocation(line: 58, column: 42, scope: !2887)
!2931 = !DILocation(line: 58, column: 30, scope: !2887)
!2932 = !DILocation(line: 58, column: 50, scope: !2887)
!2933 = !DILocalVariable(name: "prev_fail", scope: !2887, file: !2888, line: 59, type: !2928)
!2934 = !DILocation(line: 59, column: 14, scope: !2887)
!2935 = !DILocation(line: 59, column: 27, scope: !2887)
!2936 = !DILocation(line: 59, column: 43, scope: !2887)
!2937 = !DILocalVariable(name: "fclose_fail", scope: !2887, file: !2888, line: 60, type: !2928)
!2938 = !DILocation(line: 60, column: 14, scope: !2887)
!2939 = !DILocation(line: 60, column: 37, scope: !2887)
!2940 = !DILocation(line: 60, column: 29, scope: !2887)
!2941 = !DILocation(line: 60, column: 45, scope: !2887)
!2942 = !DILocation(line: 70, column: 7, scope: !2943)
!2943 = distinct !DILexicalBlock(scope: !2887, file: !2888, line: 70, column: 7)
!2944 = !DILocation(line: 70, column: 17, scope: !2943)
!2945 = !DILocation(line: 70, column: 21, scope: !2943)
!2946 = !DILocation(line: 70, column: 33, scope: !2943)
!2947 = !DILocation(line: 70, column: 37, scope: !2943)
!2948 = !DILocation(line: 70, column: 50, scope: !2943)
!2949 = !DILocation(line: 70, column: 53, scope: !2943)
!2950 = !DILocation(line: 70, column: 59, scope: !2943)
!2951 = !DILocation(line: 70, column: 7, scope: !2887)
!2952 = !DILocation(line: 72, column: 13, scope: !2953)
!2953 = distinct !DILexicalBlock(scope: !2954, file: !2888, line: 72, column: 11)
!2954 = distinct !DILexicalBlock(scope: !2943, file: !2888, line: 71, column: 5)
!2955 = !DILocation(line: 72, column: 11, scope: !2954)
!2956 = !DILocation(line: 73, column: 9, scope: !2953)
!2957 = !DILocation(line: 73, column: 15, scope: !2953)
!2958 = !DILocation(line: 74, column: 7, scope: !2954)
!2959 = !DILocation(line: 77, column: 3, scope: !2887)
!2960 = !DILocation(line: 78, column: 1, scope: !2887)
!2961 = !DILocalVariable(name: "stream", arg: 1, scope: !2962, file: !2888, line: 56, type: !2965)
!2962 = distinct !DISubprogram(name: "close_stream", scope: !2888, file: !2888, line: 56, type: !2963, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2999, retainedNodes: !4)
!2963 = !DISubroutineType(types: !2964)
!2964 = !{!25, !2965}
!2965 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2966, size: 64)
!2966 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2259, line: 7, baseType: !2967)
!2967 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2261, line: 49, size: 1728, elements: !2968)
!2968 = !{!2969, !2970, !2971, !2972, !2973, !2974, !2975, !2976, !2977, !2978, !2979, !2980, !2981, !2982, !2984, !2985, !2986, !2987, !2988, !2989, !2990, !2991, !2992, !2993, !2994, !2995, !2996, !2997, !2998}
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2967, file: !2261, line: 51, baseType: !25, size: 32)
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2967, file: !2261, line: 54, baseType: !32, size: 64, offset: 64)
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2967, file: !2261, line: 55, baseType: !32, size: 64, offset: 128)
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2967, file: !2261, line: 56, baseType: !32, size: 64, offset: 192)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2967, file: !2261, line: 57, baseType: !32, size: 64, offset: 256)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2967, file: !2261, line: 58, baseType: !32, size: 64, offset: 320)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2967, file: !2261, line: 59, baseType: !32, size: 64, offset: 384)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2967, file: !2261, line: 60, baseType: !32, size: 64, offset: 448)
!2977 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2967, file: !2261, line: 61, baseType: !32, size: 64, offset: 512)
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2967, file: !2261, line: 64, baseType: !32, size: 64, offset: 576)
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2967, file: !2261, line: 65, baseType: !32, size: 64, offset: 640)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2967, file: !2261, line: 66, baseType: !32, size: 64, offset: 704)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2967, file: !2261, line: 68, baseType: !2276, size: 64, offset: 768)
!2982 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2967, file: !2261, line: 70, baseType: !2983, size: 64, offset: 832)
!2983 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2967, size: 64)
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2967, file: !2261, line: 72, baseType: !25, size: 32, offset: 896)
!2985 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2967, file: !2261, line: 73, baseType: !25, size: 32, offset: 928)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2967, file: !2261, line: 74, baseType: !2283, size: 64, offset: 960)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2967, file: !2261, line: 77, baseType: !56, size: 16, offset: 1024)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2967, file: !2261, line: 78, baseType: !2288, size: 8, offset: 1040)
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2967, file: !2261, line: 79, baseType: !2290, size: 8, offset: 1048)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2967, file: !2261, line: 81, baseType: !2294, size: 64, offset: 1088)
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2967, file: !2261, line: 89, baseType: !2297, size: 64, offset: 1152)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2967, file: !2261, line: 91, baseType: !2299, size: 64, offset: 1216)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2967, file: !2261, line: 92, baseType: !2302, size: 64, offset: 1280)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2967, file: !2261, line: 93, baseType: !2983, size: 64, offset: 1344)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2967, file: !2261, line: 94, baseType: !31, size: 64, offset: 1408)
!2996 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2967, file: !2261, line: 95, baseType: !57, size: 64, offset: 1472)
!2997 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2967, file: !2261, line: 96, baseType: !25, size: 32, offset: 1536)
!2998 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2967, file: !2261, line: 98, baseType: !2309, size: 160, offset: 1568)
!2999 = distinct !DICompileUnit(language: DW_LANG_C99, file: !132, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3000 = !DILocalVariable(name: "some_pending", scope: !2962, file: !2888, line: 58, type: !2928)
!3001 = !DILocalVariable(name: "prev_fail", scope: !2962, file: !2888, line: 59, type: !2928)
!3002 = !DILocalVariable(name: "fclose_fail", scope: !2962, file: !2888, line: 60, type: !2928)
!3003 = distinct !DISubprogram(name: "hard_locale", scope: !3004, file: !3004, line: 27, type: !3005, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!3004 = !DIFile(filename: "lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3005 = !DISubroutineType(types: !3006)
!3006 = !{!17, !25}
!3007 = !DILocalVariable(name: "category", arg: 1, scope: !3003, file: !3004, line: 27, type: !25)
!3008 = !DILocation(line: 27, column: 18, scope: !3003)
!3009 = !DILocalVariable(name: "locale", scope: !3003, file: !3004, line: 29, type: !3010)
!3010 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2056, elements: !3011)
!3011 = !{!3012}
!3012 = !DISubrange(count: 257)
!3013 = !DILocation(line: 29, column: 8, scope: !3003)
!3014 = !DILocation(line: 31, column: 25, scope: !3015)
!3015 = distinct !DILexicalBlock(scope: !3003, file: !3004, line: 31, column: 7)
!3016 = !DILocation(line: 31, column: 35, scope: !3015)
!3017 = !DILocation(line: 31, column: 7, scope: !3015)
!3018 = !DILocation(line: 31, column: 7, scope: !3003)
!3019 = !DILocation(line: 32, column: 5, scope: !3015)
!3020 = !DILocation(line: 34, column: 20, scope: !3003)
!3021 = !DILocation(line: 34, column: 12, scope: !3003)
!3022 = !DILocation(line: 34, column: 33, scope: !3003)
!3023 = !DILocation(line: 34, column: 38, scope: !3003)
!3024 = !DILocation(line: 34, column: 49, scope: !3003)
!3025 = !DILocation(line: 34, column: 41, scope: !3003)
!3026 = !DILocation(line: 34, column: 66, scope: !3003)
!3027 = !DILocation(line: 34, column: 10, scope: !3003)
!3028 = !DILocation(line: 34, column: 3, scope: !3003)
!3029 = !DILocation(line: 35, column: 1, scope: !3003)
!3030 = !DILocalVariable(name: "category", arg: 1, scope: !3031, file: !3004, line: 27, type: !25)
!3031 = distinct !DISubprogram(name: "hard_locale", scope: !3004, file: !3004, line: 27, type: !3005, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3032, retainedNodes: !4)
!3032 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3033 = !DILocalVariable(name: "locale", scope: !3031, file: !3004, line: 29, type: !3010)
!3034 = distinct !DISubprogram(name: "locale_charset", scope: !3035, file: !3035, line: 831, type: !3036, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !135, retainedNodes: !4)
!3035 = !DIFile(filename: "lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3036 = !DISubroutineType(types: !3037)
!3037 = !{!6}
!3038 = !DILocalVariable(name: "codeset", scope: !3034, file: !3035, line: 833, type: !6)
!3039 = !DILocation(line: 833, column: 15, scope: !3034)
!3040 = !DILocation(line: 847, column: 13, scope: !3034)
!3041 = !DILocation(line: 847, column: 11, scope: !3034)
!3042 = !DILocation(line: 911, column: 7, scope: !3043)
!3043 = distinct !DILexicalBlock(scope: !3034, file: !3035, line: 911, column: 7)
!3044 = !DILocation(line: 911, column: 15, scope: !3043)
!3045 = !DILocation(line: 911, column: 7, scope: !3034)
!3046 = !DILocation(line: 913, column: 13, scope: !3043)
!3047 = !DILocation(line: 913, column: 5, scope: !3043)
!3048 = !DILocation(line: 1070, column: 13, scope: !3049)
!3049 = distinct !DILexicalBlock(scope: !3050, file: !3035, line: 1070, column: 13)
!3050 = distinct !DILexicalBlock(scope: !3051, file: !3035, line: 1060, column: 7)
!3051 = distinct !DILexicalBlock(scope: !3034, file: !3035, line: 1019, column: 3)
!3052 = !DILocation(line: 1070, column: 24, scope: !3049)
!3053 = !DILocation(line: 1070, column: 13, scope: !3050)
!3054 = !DILocation(line: 1071, column: 19, scope: !3049)
!3055 = !DILocation(line: 1071, column: 11, scope: !3049)
!3056 = !DILocation(line: 1158, column: 10, scope: !3034)
!3057 = !DILocation(line: 1158, column: 3, scope: !3034)
!3058 = !DILocalVariable(name: "codeset", scope: !3059, file: !3035, line: 833, type: !6)
!3059 = distinct !DISubprogram(name: "locale_charset", scope: !3035, file: !3035, line: 831, type: !3036, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3060, retainedNodes: !4)
!3060 = distinct !DICompileUnit(language: DW_LANG_C99, file: !136, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!3061 = distinct !DISubprogram(name: "setlocale_null_r", scope: !3062, file: !3062, line: 269, type: !3063, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !137, retainedNodes: !4)
!3062 = !DIFile(filename: "lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3063 = !DISubroutineType(types: !3064)
!3064 = !{!25, !25, !32, !57}
!3065 = !DILocalVariable(name: "category", arg: 1, scope: !3061, file: !3062, line: 269, type: !25)
!3066 = !DILocation(line: 269, column: 23, scope: !3061)
!3067 = !DILocalVariable(name: "buf", arg: 2, scope: !3061, file: !3062, line: 269, type: !32)
!3068 = !DILocation(line: 269, column: 39, scope: !3061)
!3069 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3061, file: !3062, line: 269, type: !57)
!3070 = !DILocation(line: 269, column: 51, scope: !3061)
!3071 = !DILocation(line: 274, column: 35, scope: !3061)
!3072 = !DILocation(line: 274, column: 45, scope: !3061)
!3073 = !DILocation(line: 274, column: 50, scope: !3061)
!3074 = !DILocation(line: 274, column: 10, scope: !3061)
!3075 = !DILocation(line: 274, column: 3, scope: !3061)
!3076 = !DILocalVariable(name: "category", arg: 1, scope: !3077, file: !3062, line: 269, type: !25)
!3077 = distinct !DISubprogram(name: "setlocale_null_r", scope: !3062, file: !3062, line: 269, type: !3063, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3078, retainedNodes: !4)
!3078 = distinct !DICompileUnit(language: DW_LANG_C99, file: !138, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!3079 = !DILocalVariable(name: "buf", arg: 2, scope: !3077, file: !3062, line: 269, type: !32)
!3080 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3077, file: !3062, line: 269, type: !57)
!3081 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !3062, file: !3062, line: 91, type: !3063, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !4)
!3082 = !DILocalVariable(name: "category", arg: 1, scope: !3081, file: !3062, line: 91, type: !25)
!3083 = !DILocation(line: 91, column: 30, scope: !3081)
!3084 = !DILocalVariable(name: "buf", arg: 2, scope: !3081, file: !3062, line: 91, type: !32)
!3085 = !DILocation(line: 91, column: 46, scope: !3081)
!3086 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3081, file: !3062, line: 91, type: !57)
!3087 = !DILocation(line: 91, column: 58, scope: !3081)
!3088 = !DILocalVariable(name: "result", scope: !3081, file: !3062, line: 140, type: !6)
!3089 = !DILocation(line: 140, column: 15, scope: !3081)
!3090 = !DILocation(line: 140, column: 51, scope: !3081)
!3091 = !DILocation(line: 140, column: 24, scope: !3081)
!3092 = !DILocation(line: 142, column: 7, scope: !3093)
!3093 = distinct !DILexicalBlock(scope: !3081, file: !3062, line: 142, column: 7)
!3094 = !DILocation(line: 142, column: 14, scope: !3093)
!3095 = !DILocation(line: 142, column: 7, scope: !3081)
!3096 = !DILocation(line: 145, column: 11, scope: !3097)
!3097 = distinct !DILexicalBlock(scope: !3098, file: !3062, line: 145, column: 11)
!3098 = distinct !DILexicalBlock(scope: !3093, file: !3062, line: 143, column: 5)
!3099 = !DILocation(line: 145, column: 19, scope: !3097)
!3100 = !DILocation(line: 145, column: 11, scope: !3098)
!3101 = !DILocation(line: 149, column: 9, scope: !3097)
!3102 = !DILocation(line: 149, column: 16, scope: !3097)
!3103 = !DILocation(line: 150, column: 7, scope: !3098)
!3104 = !DILocalVariable(name: "length", scope: !3105, file: !3062, line: 154, type: !57)
!3105 = distinct !DILexicalBlock(scope: !3093, file: !3062, line: 153, column: 5)
!3106 = !DILocation(line: 154, column: 14, scope: !3105)
!3107 = !DILocation(line: 154, column: 31, scope: !3105)
!3108 = !DILocation(line: 154, column: 23, scope: !3105)
!3109 = !DILocation(line: 155, column: 11, scope: !3110)
!3110 = distinct !DILexicalBlock(scope: !3105, file: !3062, line: 155, column: 11)
!3111 = !DILocation(line: 155, column: 20, scope: !3110)
!3112 = !DILocation(line: 155, column: 18, scope: !3110)
!3113 = !DILocation(line: 155, column: 11, scope: !3105)
!3114 = !DILocation(line: 157, column: 19, scope: !3115)
!3115 = distinct !DILexicalBlock(scope: !3110, file: !3062, line: 156, column: 9)
!3116 = !DILocation(line: 157, column: 24, scope: !3115)
!3117 = !DILocation(line: 157, column: 32, scope: !3115)
!3118 = !DILocation(line: 157, column: 39, scope: !3115)
!3119 = !DILocation(line: 157, column: 11, scope: !3115)
!3120 = !DILocation(line: 158, column: 11, scope: !3115)
!3121 = !DILocation(line: 162, column: 15, scope: !3122)
!3122 = distinct !DILexicalBlock(scope: !3123, file: !3062, line: 162, column: 15)
!3123 = distinct !DILexicalBlock(scope: !3110, file: !3062, line: 161, column: 9)
!3124 = !DILocation(line: 162, column: 23, scope: !3122)
!3125 = !DILocation(line: 162, column: 15, scope: !3123)
!3126 = !DILocation(line: 167, column: 23, scope: !3127)
!3127 = distinct !DILexicalBlock(scope: !3122, file: !3062, line: 163, column: 13)
!3128 = !DILocation(line: 167, column: 28, scope: !3127)
!3129 = !DILocation(line: 167, column: 36, scope: !3127)
!3130 = !DILocation(line: 167, column: 44, scope: !3127)
!3131 = !DILocation(line: 167, column: 15, scope: !3127)
!3132 = !DILocation(line: 168, column: 15, scope: !3127)
!3133 = !DILocation(line: 168, column: 19, scope: !3127)
!3134 = !DILocation(line: 168, column: 27, scope: !3127)
!3135 = !DILocation(line: 168, column: 32, scope: !3127)
!3136 = !DILocation(line: 169, column: 13, scope: !3127)
!3137 = !DILocation(line: 170, column: 11, scope: !3123)
!3138 = !DILocation(line: 174, column: 1, scope: !3081)
!3139 = !DILocalVariable(name: "category", arg: 1, scope: !3140, file: !3062, line: 91, type: !25)
!3140 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !3062, file: !3062, line: 91, type: !3063, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3141, retainedNodes: !4)
!3141 = distinct !DICompileUnit(language: DW_LANG_C99, file: !138, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!3142 = !DILocalVariable(name: "buf", arg: 2, scope: !3140, file: !3062, line: 91, type: !32)
!3143 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3140, file: !3062, line: 91, type: !57)
!3144 = !DILocalVariable(name: "result", scope: !3140, file: !3062, line: 140, type: !6)
!3145 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !3062, file: !3062, line: 60, type: !3146, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !4)
!3146 = !DISubroutineType(types: !3147)
!3147 = !{!6, !25}
!3148 = !DILocalVariable(name: "category", arg: 1, scope: !3145, file: !3062, line: 60, type: !25)
!3149 = !DILocation(line: 60, column: 32, scope: !3145)
!3150 = !DILocalVariable(name: "result", scope: !3145, file: !3062, line: 62, type: !6)
!3151 = !DILocation(line: 62, column: 15, scope: !3145)
!3152 = !DILocation(line: 62, column: 35, scope: !3145)
!3153 = !DILocation(line: 62, column: 24, scope: !3145)
!3154 = !DILocation(line: 87, column: 10, scope: !3145)
!3155 = !DILocation(line: 87, column: 3, scope: !3145)
!3156 = !DILocalVariable(name: "category", arg: 1, scope: !3157, file: !3062, line: 60, type: !25)
!3157 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !3062, file: !3062, line: 60, type: !3146, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3158, retainedNodes: !4)
!3158 = distinct !DICompileUnit(language: DW_LANG_C99, file: !138, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!3159 = !DILocalVariable(name: "result", scope: !3157, file: !3062, line: 62, type: !6)
!3160 = distinct !DISubprogram(name: "rpl_fclose", scope: !3161, file: !3161, line: 58, type: !3162, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !139, retainedNodes: !4)
!3161 = !DIFile(filename: "lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3162 = !DISubroutineType(types: !3163)
!3163 = !{!25, !3164}
!3164 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3165, size: 64)
!3165 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2259, line: 7, baseType: !3166)
!3166 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2261, line: 49, size: 1728, elements: !3167)
!3167 = !{!3168, !3169, !3170, !3171, !3172, !3173, !3174, !3175, !3176, !3177, !3178, !3179, !3180, !3181, !3183, !3184, !3185, !3186, !3187, !3188, !3189, !3190, !3191, !3192, !3193, !3194, !3195, !3196, !3197}
!3168 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3166, file: !2261, line: 51, baseType: !25, size: 32)
!3169 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3166, file: !2261, line: 54, baseType: !32, size: 64, offset: 64)
!3170 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3166, file: !2261, line: 55, baseType: !32, size: 64, offset: 128)
!3171 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3166, file: !2261, line: 56, baseType: !32, size: 64, offset: 192)
!3172 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3166, file: !2261, line: 57, baseType: !32, size: 64, offset: 256)
!3173 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3166, file: !2261, line: 58, baseType: !32, size: 64, offset: 320)
!3174 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3166, file: !2261, line: 59, baseType: !32, size: 64, offset: 384)
!3175 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3166, file: !2261, line: 60, baseType: !32, size: 64, offset: 448)
!3176 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3166, file: !2261, line: 61, baseType: !32, size: 64, offset: 512)
!3177 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3166, file: !2261, line: 64, baseType: !32, size: 64, offset: 576)
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3166, file: !2261, line: 65, baseType: !32, size: 64, offset: 640)
!3179 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3166, file: !2261, line: 66, baseType: !32, size: 64, offset: 704)
!3180 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3166, file: !2261, line: 68, baseType: !2276, size: 64, offset: 768)
!3181 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3166, file: !2261, line: 70, baseType: !3182, size: 64, offset: 832)
!3182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3166, size: 64)
!3183 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3166, file: !2261, line: 72, baseType: !25, size: 32, offset: 896)
!3184 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3166, file: !2261, line: 73, baseType: !25, size: 32, offset: 928)
!3185 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3166, file: !2261, line: 74, baseType: !2283, size: 64, offset: 960)
!3186 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3166, file: !2261, line: 77, baseType: !56, size: 16, offset: 1024)
!3187 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3166, file: !2261, line: 78, baseType: !2288, size: 8, offset: 1040)
!3188 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3166, file: !2261, line: 79, baseType: !2290, size: 8, offset: 1048)
!3189 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3166, file: !2261, line: 81, baseType: !2294, size: 64, offset: 1088)
!3190 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3166, file: !2261, line: 89, baseType: !2297, size: 64, offset: 1152)
!3191 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3166, file: !2261, line: 91, baseType: !2299, size: 64, offset: 1216)
!3192 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3166, file: !2261, line: 92, baseType: !2302, size: 64, offset: 1280)
!3193 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3166, file: !2261, line: 93, baseType: !3182, size: 64, offset: 1344)
!3194 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3166, file: !2261, line: 94, baseType: !31, size: 64, offset: 1408)
!3195 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3166, file: !2261, line: 95, baseType: !57, size: 64, offset: 1472)
!3196 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3166, file: !2261, line: 96, baseType: !25, size: 32, offset: 1536)
!3197 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3166, file: !2261, line: 98, baseType: !2309, size: 160, offset: 1568)
!3198 = !DILocalVariable(name: "fp", arg: 1, scope: !3160, file: !3161, line: 58, type: !3164)
!3199 = !DILocation(line: 58, column: 19, scope: !3160)
!3200 = !DILocalVariable(name: "saved_errno", scope: !3160, file: !3161, line: 60, type: !25)
!3201 = !DILocation(line: 60, column: 7, scope: !3160)
!3202 = !DILocalVariable(name: "fd", scope: !3160, file: !3161, line: 61, type: !25)
!3203 = !DILocation(line: 61, column: 7, scope: !3160)
!3204 = !DILocalVariable(name: "result", scope: !3160, file: !3161, line: 62, type: !25)
!3205 = !DILocation(line: 62, column: 7, scope: !3160)
!3206 = !DILocation(line: 65, column: 16, scope: !3160)
!3207 = !DILocation(line: 65, column: 8, scope: !3160)
!3208 = !DILocation(line: 65, column: 6, scope: !3160)
!3209 = !DILocation(line: 66, column: 7, scope: !3210)
!3210 = distinct !DILexicalBlock(scope: !3160, file: !3161, line: 66, column: 7)
!3211 = !DILocation(line: 66, column: 10, scope: !3210)
!3212 = !DILocation(line: 66, column: 7, scope: !3160)
!3213 = !DILocation(line: 67, column: 28, scope: !3210)
!3214 = !DILocation(line: 67, column: 12, scope: !3210)
!3215 = !DILocation(line: 67, column: 5, scope: !3210)
!3216 = !DILocation(line: 72, column: 9, scope: !3217)
!3217 = distinct !DILexicalBlock(scope: !3160, file: !3161, line: 72, column: 7)
!3218 = !DILocation(line: 72, column: 23, scope: !3217)
!3219 = !DILocation(line: 72, column: 41, scope: !3217)
!3220 = !DILocation(line: 72, column: 33, scope: !3217)
!3221 = !DILocation(line: 72, column: 26, scope: !3217)
!3222 = !DILocation(line: 72, column: 59, scope: !3217)
!3223 = !DILocation(line: 73, column: 7, scope: !3217)
!3224 = !DILocation(line: 73, column: 18, scope: !3217)
!3225 = !DILocation(line: 73, column: 10, scope: !3217)
!3226 = !DILocation(line: 72, column: 7, scope: !3160)
!3227 = !DILocation(line: 74, column: 19, scope: !3217)
!3228 = !DILocation(line: 74, column: 17, scope: !3217)
!3229 = !DILocation(line: 74, column: 5, scope: !3217)
!3230 = !DILocation(line: 100, column: 28, scope: !3160)
!3231 = !DILocation(line: 100, column: 12, scope: !3160)
!3232 = !DILocation(line: 100, column: 10, scope: !3160)
!3233 = !DILocation(line: 105, column: 7, scope: !3234)
!3234 = distinct !DILexicalBlock(scope: !3160, file: !3161, line: 105, column: 7)
!3235 = !DILocation(line: 105, column: 19, scope: !3234)
!3236 = !DILocation(line: 105, column: 7, scope: !3160)
!3237 = !DILocation(line: 107, column: 15, scope: !3238)
!3238 = distinct !DILexicalBlock(scope: !3234, file: !3161, line: 106, column: 5)
!3239 = !DILocation(line: 107, column: 7, scope: !3238)
!3240 = !DILocation(line: 107, column: 13, scope: !3238)
!3241 = !DILocation(line: 108, column: 14, scope: !3238)
!3242 = !DILocation(line: 109, column: 5, scope: !3238)
!3243 = !DILocation(line: 111, column: 10, scope: !3160)
!3244 = !DILocation(line: 111, column: 3, scope: !3160)
!3245 = !DILocation(line: 112, column: 1, scope: !3160)
!3246 = !DILocalVariable(name: "fp", arg: 1, scope: !3247, file: !3161, line: 58, type: !3250)
!3247 = distinct !DISubprogram(name: "rpl_fclose", scope: !3161, file: !3161, line: 58, type: !3248, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3284, retainedNodes: !4)
!3248 = !DISubroutineType(types: !3249)
!3249 = !{!25, !3250}
!3250 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3251, size: 64)
!3251 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2259, line: 7, baseType: !3252)
!3252 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2261, line: 49, size: 1728, elements: !3253)
!3253 = !{!3254, !3255, !3256, !3257, !3258, !3259, !3260, !3261, !3262, !3263, !3264, !3265, !3266, !3267, !3269, !3270, !3271, !3272, !3273, !3274, !3275, !3276, !3277, !3278, !3279, !3280, !3281, !3282, !3283}
!3254 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3252, file: !2261, line: 51, baseType: !25, size: 32)
!3255 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3252, file: !2261, line: 54, baseType: !32, size: 64, offset: 64)
!3256 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3252, file: !2261, line: 55, baseType: !32, size: 64, offset: 128)
!3257 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3252, file: !2261, line: 56, baseType: !32, size: 64, offset: 192)
!3258 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3252, file: !2261, line: 57, baseType: !32, size: 64, offset: 256)
!3259 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3252, file: !2261, line: 58, baseType: !32, size: 64, offset: 320)
!3260 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3252, file: !2261, line: 59, baseType: !32, size: 64, offset: 384)
!3261 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3252, file: !2261, line: 60, baseType: !32, size: 64, offset: 448)
!3262 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3252, file: !2261, line: 61, baseType: !32, size: 64, offset: 512)
!3263 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3252, file: !2261, line: 64, baseType: !32, size: 64, offset: 576)
!3264 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3252, file: !2261, line: 65, baseType: !32, size: 64, offset: 640)
!3265 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3252, file: !2261, line: 66, baseType: !32, size: 64, offset: 704)
!3266 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3252, file: !2261, line: 68, baseType: !2276, size: 64, offset: 768)
!3267 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3252, file: !2261, line: 70, baseType: !3268, size: 64, offset: 832)
!3268 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3252, size: 64)
!3269 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3252, file: !2261, line: 72, baseType: !25, size: 32, offset: 896)
!3270 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3252, file: !2261, line: 73, baseType: !25, size: 32, offset: 928)
!3271 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3252, file: !2261, line: 74, baseType: !2283, size: 64, offset: 960)
!3272 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3252, file: !2261, line: 77, baseType: !56, size: 16, offset: 1024)
!3273 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3252, file: !2261, line: 78, baseType: !2288, size: 8, offset: 1040)
!3274 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3252, file: !2261, line: 79, baseType: !2290, size: 8, offset: 1048)
!3275 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3252, file: !2261, line: 81, baseType: !2294, size: 64, offset: 1088)
!3276 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3252, file: !2261, line: 89, baseType: !2297, size: 64, offset: 1152)
!3277 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3252, file: !2261, line: 91, baseType: !2299, size: 64, offset: 1216)
!3278 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3252, file: !2261, line: 92, baseType: !2302, size: 64, offset: 1280)
!3279 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3252, file: !2261, line: 93, baseType: !3268, size: 64, offset: 1344)
!3280 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3252, file: !2261, line: 94, baseType: !31, size: 64, offset: 1408)
!3281 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3252, file: !2261, line: 95, baseType: !57, size: 64, offset: 1472)
!3282 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3252, file: !2261, line: 96, baseType: !25, size: 32, offset: 1536)
!3283 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3252, file: !2261, line: 98, baseType: !2309, size: 160, offset: 1568)
!3284 = distinct !DICompileUnit(language: DW_LANG_C99, file: !140, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3285 = !DILocalVariable(name: "saved_errno", scope: !3247, file: !3161, line: 60, type: !25)
!3286 = !DILocalVariable(name: "fd", scope: !3247, file: !3161, line: 61, type: !25)
!3287 = !DILocalVariable(name: "result", scope: !3247, file: !3161, line: 62, type: !25)
!3288 = distinct !DISubprogram(name: "rpl_fflush", scope: !3289, file: !3289, line: 129, type: !3290, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !141, retainedNodes: !4)
!3289 = !DIFile(filename: "lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3290 = !DISubroutineType(types: !3291)
!3291 = !{!25, !3292}
!3292 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3293, size: 64)
!3293 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2259, line: 7, baseType: !3294)
!3294 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2261, line: 49, size: 1728, elements: !3295)
!3295 = !{!3296, !3297, !3298, !3299, !3300, !3301, !3302, !3303, !3304, !3305, !3306, !3307, !3308, !3309, !3311, !3312, !3313, !3314, !3315, !3316, !3317, !3318, !3319, !3320, !3321, !3322, !3323, !3324, !3325}
!3296 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3294, file: !2261, line: 51, baseType: !25, size: 32)
!3297 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3294, file: !2261, line: 54, baseType: !32, size: 64, offset: 64)
!3298 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3294, file: !2261, line: 55, baseType: !32, size: 64, offset: 128)
!3299 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3294, file: !2261, line: 56, baseType: !32, size: 64, offset: 192)
!3300 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3294, file: !2261, line: 57, baseType: !32, size: 64, offset: 256)
!3301 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3294, file: !2261, line: 58, baseType: !32, size: 64, offset: 320)
!3302 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3294, file: !2261, line: 59, baseType: !32, size: 64, offset: 384)
!3303 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3294, file: !2261, line: 60, baseType: !32, size: 64, offset: 448)
!3304 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3294, file: !2261, line: 61, baseType: !32, size: 64, offset: 512)
!3305 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3294, file: !2261, line: 64, baseType: !32, size: 64, offset: 576)
!3306 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3294, file: !2261, line: 65, baseType: !32, size: 64, offset: 640)
!3307 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3294, file: !2261, line: 66, baseType: !32, size: 64, offset: 704)
!3308 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3294, file: !2261, line: 68, baseType: !2276, size: 64, offset: 768)
!3309 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3294, file: !2261, line: 70, baseType: !3310, size: 64, offset: 832)
!3310 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3294, size: 64)
!3311 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3294, file: !2261, line: 72, baseType: !25, size: 32, offset: 896)
!3312 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3294, file: !2261, line: 73, baseType: !25, size: 32, offset: 928)
!3313 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3294, file: !2261, line: 74, baseType: !2283, size: 64, offset: 960)
!3314 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3294, file: !2261, line: 77, baseType: !56, size: 16, offset: 1024)
!3315 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3294, file: !2261, line: 78, baseType: !2288, size: 8, offset: 1040)
!3316 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3294, file: !2261, line: 79, baseType: !2290, size: 8, offset: 1048)
!3317 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3294, file: !2261, line: 81, baseType: !2294, size: 64, offset: 1088)
!3318 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3294, file: !2261, line: 89, baseType: !2297, size: 64, offset: 1152)
!3319 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3294, file: !2261, line: 91, baseType: !2299, size: 64, offset: 1216)
!3320 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3294, file: !2261, line: 92, baseType: !2302, size: 64, offset: 1280)
!3321 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3294, file: !2261, line: 93, baseType: !3310, size: 64, offset: 1344)
!3322 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3294, file: !2261, line: 94, baseType: !31, size: 64, offset: 1408)
!3323 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3294, file: !2261, line: 95, baseType: !57, size: 64, offset: 1472)
!3324 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3294, file: !2261, line: 96, baseType: !25, size: 32, offset: 1536)
!3325 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3294, file: !2261, line: 98, baseType: !2309, size: 160, offset: 1568)
!3326 = !DILocalVariable(name: "stream", arg: 1, scope: !3288, file: !3289, line: 129, type: !3292)
!3327 = !DILocation(line: 129, column: 19, scope: !3288)
!3328 = !DILocation(line: 150, column: 7, scope: !3329)
!3329 = distinct !DILexicalBlock(scope: !3288, file: !3289, line: 150, column: 7)
!3330 = !DILocation(line: 150, column: 14, scope: !3329)
!3331 = !DILocation(line: 150, column: 22, scope: !3329)
!3332 = !DILocation(line: 150, column: 27, scope: !3329)
!3333 = !DILocation(line: 150, column: 7, scope: !3288)
!3334 = !DILocation(line: 151, column: 20, scope: !3329)
!3335 = !DILocation(line: 151, column: 12, scope: !3329)
!3336 = !DILocation(line: 151, column: 5, scope: !3329)
!3337 = !DILocation(line: 156, column: 44, scope: !3288)
!3338 = !DILocation(line: 156, column: 3, scope: !3288)
!3339 = !DILocation(line: 158, column: 18, scope: !3288)
!3340 = !DILocation(line: 158, column: 10, scope: !3288)
!3341 = !DILocation(line: 158, column: 3, scope: !3288)
!3342 = !DILocation(line: 235, column: 1, scope: !3288)
!3343 = !DILocalVariable(name: "stream", arg: 1, scope: !3344, file: !3289, line: 129, type: !3347)
!3344 = distinct !DISubprogram(name: "rpl_fflush", scope: !3289, file: !3289, line: 129, type: !3345, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3381, retainedNodes: !4)
!3345 = !DISubroutineType(types: !3346)
!3346 = !{!25, !3347}
!3347 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3348, size: 64)
!3348 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2259, line: 7, baseType: !3349)
!3349 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2261, line: 49, size: 1728, elements: !3350)
!3350 = !{!3351, !3352, !3353, !3354, !3355, !3356, !3357, !3358, !3359, !3360, !3361, !3362, !3363, !3364, !3366, !3367, !3368, !3369, !3370, !3371, !3372, !3373, !3374, !3375, !3376, !3377, !3378, !3379, !3380}
!3351 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3349, file: !2261, line: 51, baseType: !25, size: 32)
!3352 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3349, file: !2261, line: 54, baseType: !32, size: 64, offset: 64)
!3353 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3349, file: !2261, line: 55, baseType: !32, size: 64, offset: 128)
!3354 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3349, file: !2261, line: 56, baseType: !32, size: 64, offset: 192)
!3355 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3349, file: !2261, line: 57, baseType: !32, size: 64, offset: 256)
!3356 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3349, file: !2261, line: 58, baseType: !32, size: 64, offset: 320)
!3357 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3349, file: !2261, line: 59, baseType: !32, size: 64, offset: 384)
!3358 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3349, file: !2261, line: 60, baseType: !32, size: 64, offset: 448)
!3359 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3349, file: !2261, line: 61, baseType: !32, size: 64, offset: 512)
!3360 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3349, file: !2261, line: 64, baseType: !32, size: 64, offset: 576)
!3361 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3349, file: !2261, line: 65, baseType: !32, size: 64, offset: 640)
!3362 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3349, file: !2261, line: 66, baseType: !32, size: 64, offset: 704)
!3363 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3349, file: !2261, line: 68, baseType: !2276, size: 64, offset: 768)
!3364 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3349, file: !2261, line: 70, baseType: !3365, size: 64, offset: 832)
!3365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3349, size: 64)
!3366 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3349, file: !2261, line: 72, baseType: !25, size: 32, offset: 896)
!3367 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3349, file: !2261, line: 73, baseType: !25, size: 32, offset: 928)
!3368 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3349, file: !2261, line: 74, baseType: !2283, size: 64, offset: 960)
!3369 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3349, file: !2261, line: 77, baseType: !56, size: 16, offset: 1024)
!3370 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3349, file: !2261, line: 78, baseType: !2288, size: 8, offset: 1040)
!3371 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3349, file: !2261, line: 79, baseType: !2290, size: 8, offset: 1048)
!3372 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3349, file: !2261, line: 81, baseType: !2294, size: 64, offset: 1088)
!3373 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3349, file: !2261, line: 89, baseType: !2297, size: 64, offset: 1152)
!3374 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3349, file: !2261, line: 91, baseType: !2299, size: 64, offset: 1216)
!3375 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3349, file: !2261, line: 92, baseType: !2302, size: 64, offset: 1280)
!3376 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3349, file: !2261, line: 93, baseType: !3365, size: 64, offset: 1344)
!3377 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3349, file: !2261, line: 94, baseType: !31, size: 64, offset: 1408)
!3378 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3349, file: !2261, line: 95, baseType: !57, size: 64, offset: 1472)
!3379 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3349, file: !2261, line: 96, baseType: !25, size: 32, offset: 1536)
!3380 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3349, file: !2261, line: 98, baseType: !2309, size: 160, offset: 1568)
!3381 = distinct !DICompileUnit(language: DW_LANG_C99, file: !142, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!3382 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !3289, file: !3289, line: 41, type: !3383, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !141, retainedNodes: !4)
!3383 = !DISubroutineType(types: !3384)
!3384 = !{null, !3292}
!3385 = !DILocalVariable(name: "fp", arg: 1, scope: !3382, file: !3289, line: 41, type: !3292)
!3386 = !DILocation(line: 41, column: 48, scope: !3382)
!3387 = !DILocation(line: 43, column: 7, scope: !3388)
!3388 = distinct !DILexicalBlock(scope: !3382, file: !3289, line: 43, column: 7)
!3389 = !DILocation(line: 43, column: 11, scope: !3388)
!3390 = !DILocation(line: 43, column: 18, scope: !3388)
!3391 = !DILocation(line: 43, column: 7, scope: !3382)
!3392 = !DILocation(line: 45, column: 13, scope: !3388)
!3393 = !DILocation(line: 45, column: 5, scope: !3388)
!3394 = !DILocation(line: 46, column: 1, scope: !3382)
!3395 = !DILocalVariable(name: "fp", arg: 1, scope: !3396, file: !3289, line: 41, type: !3399)
!3396 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !3289, file: !3289, line: 41, type: !3397, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3433, retainedNodes: !4)
!3397 = !DISubroutineType(types: !3398)
!3398 = !{null, !3399}
!3399 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3400, size: 64)
!3400 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2259, line: 7, baseType: !3401)
!3401 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2261, line: 49, size: 1728, elements: !3402)
!3402 = !{!3403, !3404, !3405, !3406, !3407, !3408, !3409, !3410, !3411, !3412, !3413, !3414, !3415, !3416, !3418, !3419, !3420, !3421, !3422, !3423, !3424, !3425, !3426, !3427, !3428, !3429, !3430, !3431, !3432}
!3403 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3401, file: !2261, line: 51, baseType: !25, size: 32)
!3404 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3401, file: !2261, line: 54, baseType: !32, size: 64, offset: 64)
!3405 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3401, file: !2261, line: 55, baseType: !32, size: 64, offset: 128)
!3406 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3401, file: !2261, line: 56, baseType: !32, size: 64, offset: 192)
!3407 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3401, file: !2261, line: 57, baseType: !32, size: 64, offset: 256)
!3408 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3401, file: !2261, line: 58, baseType: !32, size: 64, offset: 320)
!3409 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3401, file: !2261, line: 59, baseType: !32, size: 64, offset: 384)
!3410 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3401, file: !2261, line: 60, baseType: !32, size: 64, offset: 448)
!3411 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3401, file: !2261, line: 61, baseType: !32, size: 64, offset: 512)
!3412 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3401, file: !2261, line: 64, baseType: !32, size: 64, offset: 576)
!3413 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3401, file: !2261, line: 65, baseType: !32, size: 64, offset: 640)
!3414 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3401, file: !2261, line: 66, baseType: !32, size: 64, offset: 704)
!3415 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3401, file: !2261, line: 68, baseType: !2276, size: 64, offset: 768)
!3416 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3401, file: !2261, line: 70, baseType: !3417, size: 64, offset: 832)
!3417 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3401, size: 64)
!3418 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3401, file: !2261, line: 72, baseType: !25, size: 32, offset: 896)
!3419 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3401, file: !2261, line: 73, baseType: !25, size: 32, offset: 928)
!3420 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3401, file: !2261, line: 74, baseType: !2283, size: 64, offset: 960)
!3421 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3401, file: !2261, line: 77, baseType: !56, size: 16, offset: 1024)
!3422 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3401, file: !2261, line: 78, baseType: !2288, size: 8, offset: 1040)
!3423 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3401, file: !2261, line: 79, baseType: !2290, size: 8, offset: 1048)
!3424 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3401, file: !2261, line: 81, baseType: !2294, size: 64, offset: 1088)
!3425 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3401, file: !2261, line: 89, baseType: !2297, size: 64, offset: 1152)
!3426 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3401, file: !2261, line: 91, baseType: !2299, size: 64, offset: 1216)
!3427 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3401, file: !2261, line: 92, baseType: !2302, size: 64, offset: 1280)
!3428 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3401, file: !2261, line: 93, baseType: !3417, size: 64, offset: 1344)
!3429 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3401, file: !2261, line: 94, baseType: !31, size: 64, offset: 1408)
!3430 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3401, file: !2261, line: 95, baseType: !57, size: 64, offset: 1472)
!3431 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3401, file: !2261, line: 96, baseType: !25, size: 32, offset: 1536)
!3432 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3401, file: !2261, line: 98, baseType: !2309, size: 160, offset: 1568)
!3433 = distinct !DICompileUnit(language: DW_LANG_C99, file: !142, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!3434 = distinct !DISubprogram(name: "rpl_fseeko", scope: !3435, file: !3435, line: 28, type: !3436, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !143, retainedNodes: !4)
!3435 = !DIFile(filename: "lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3436 = !DISubroutineType(types: !3437)
!3437 = !{!25, !3438, !3472, !25}
!3438 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3439, size: 64)
!3439 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2259, line: 7, baseType: !3440)
!3440 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2261, line: 49, size: 1728, elements: !3441)
!3441 = !{!3442, !3443, !3444, !3445, !3446, !3447, !3448, !3449, !3450, !3451, !3452, !3453, !3454, !3455, !3457, !3458, !3459, !3460, !3461, !3462, !3463, !3464, !3465, !3466, !3467, !3468, !3469, !3470, !3471}
!3442 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3440, file: !2261, line: 51, baseType: !25, size: 32)
!3443 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3440, file: !2261, line: 54, baseType: !32, size: 64, offset: 64)
!3444 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3440, file: !2261, line: 55, baseType: !32, size: 64, offset: 128)
!3445 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3440, file: !2261, line: 56, baseType: !32, size: 64, offset: 192)
!3446 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3440, file: !2261, line: 57, baseType: !32, size: 64, offset: 256)
!3447 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3440, file: !2261, line: 58, baseType: !32, size: 64, offset: 320)
!3448 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3440, file: !2261, line: 59, baseType: !32, size: 64, offset: 384)
!3449 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3440, file: !2261, line: 60, baseType: !32, size: 64, offset: 448)
!3450 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3440, file: !2261, line: 61, baseType: !32, size: 64, offset: 512)
!3451 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3440, file: !2261, line: 64, baseType: !32, size: 64, offset: 576)
!3452 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3440, file: !2261, line: 65, baseType: !32, size: 64, offset: 640)
!3453 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3440, file: !2261, line: 66, baseType: !32, size: 64, offset: 704)
!3454 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3440, file: !2261, line: 68, baseType: !2276, size: 64, offset: 768)
!3455 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3440, file: !2261, line: 70, baseType: !3456, size: 64, offset: 832)
!3456 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3440, size: 64)
!3457 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3440, file: !2261, line: 72, baseType: !25, size: 32, offset: 896)
!3458 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3440, file: !2261, line: 73, baseType: !25, size: 32, offset: 928)
!3459 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3440, file: !2261, line: 74, baseType: !2283, size: 64, offset: 960)
!3460 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3440, file: !2261, line: 77, baseType: !56, size: 16, offset: 1024)
!3461 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3440, file: !2261, line: 78, baseType: !2288, size: 8, offset: 1040)
!3462 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3440, file: !2261, line: 79, baseType: !2290, size: 8, offset: 1048)
!3463 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3440, file: !2261, line: 81, baseType: !2294, size: 64, offset: 1088)
!3464 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3440, file: !2261, line: 89, baseType: !2297, size: 64, offset: 1152)
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3440, file: !2261, line: 91, baseType: !2299, size: 64, offset: 1216)
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3440, file: !2261, line: 92, baseType: !2302, size: 64, offset: 1280)
!3467 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3440, file: !2261, line: 93, baseType: !3456, size: 64, offset: 1344)
!3468 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3440, file: !2261, line: 94, baseType: !31, size: 64, offset: 1408)
!3469 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3440, file: !2261, line: 95, baseType: !57, size: 64, offset: 1472)
!3470 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3440, file: !2261, line: 96, baseType: !25, size: 32, offset: 1536)
!3471 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3440, file: !2261, line: 98, baseType: !2309, size: 160, offset: 1568)
!3472 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !2604, line: 63, baseType: !2283)
!3473 = !DILocalVariable(name: "fp", arg: 1, scope: !3434, file: !3435, line: 28, type: !3438)
!3474 = !DILocation(line: 28, column: 15, scope: !3434)
!3475 = !DILocalVariable(name: "offset", arg: 2, scope: !3434, file: !3435, line: 28, type: !3472)
!3476 = !DILocation(line: 28, column: 25, scope: !3434)
!3477 = !DILocalVariable(name: "whence", arg: 3, scope: !3434, file: !3435, line: 28, type: !25)
!3478 = !DILocation(line: 28, column: 37, scope: !3434)
!3479 = !DILocation(line: 52, column: 7, scope: !3480)
!3480 = distinct !DILexicalBlock(scope: !3434, file: !3435, line: 52, column: 7)
!3481 = !DILocation(line: 52, column: 11, scope: !3480)
!3482 = !DILocation(line: 52, column: 27, scope: !3480)
!3483 = !DILocation(line: 52, column: 31, scope: !3480)
!3484 = !DILocation(line: 52, column: 24, scope: !3480)
!3485 = !DILocation(line: 53, column: 7, scope: !3480)
!3486 = !DILocation(line: 53, column: 10, scope: !3480)
!3487 = !DILocation(line: 53, column: 14, scope: !3480)
!3488 = !DILocation(line: 53, column: 31, scope: !3480)
!3489 = !DILocation(line: 53, column: 35, scope: !3480)
!3490 = !DILocation(line: 53, column: 28, scope: !3480)
!3491 = !DILocation(line: 54, column: 7, scope: !3480)
!3492 = !DILocation(line: 54, column: 10, scope: !3480)
!3493 = !DILocation(line: 54, column: 14, scope: !3480)
!3494 = !DILocation(line: 54, column: 28, scope: !3480)
!3495 = !DILocation(line: 52, column: 7, scope: !3434)
!3496 = !DILocalVariable(name: "pos", scope: !3497, file: !3435, line: 117, type: !3472)
!3497 = distinct !DILexicalBlock(scope: !3480, file: !3435, line: 113, column: 5)
!3498 = !DILocation(line: 117, column: 13, scope: !3497)
!3499 = !DILocation(line: 117, column: 34, scope: !3497)
!3500 = !DILocation(line: 117, column: 26, scope: !3497)
!3501 = !DILocation(line: 117, column: 39, scope: !3497)
!3502 = !DILocation(line: 117, column: 47, scope: !3497)
!3503 = !DILocation(line: 117, column: 19, scope: !3497)
!3504 = !DILocation(line: 118, column: 11, scope: !3505)
!3505 = distinct !DILexicalBlock(scope: !3497, file: !3435, line: 118, column: 11)
!3506 = !DILocation(line: 118, column: 15, scope: !3505)
!3507 = !DILocation(line: 118, column: 11, scope: !3497)
!3508 = !DILocation(line: 124, column: 11, scope: !3509)
!3509 = distinct !DILexicalBlock(scope: !3505, file: !3435, line: 119, column: 9)
!3510 = !DILocation(line: 129, column: 7, scope: !3497)
!3511 = !DILocation(line: 129, column: 11, scope: !3497)
!3512 = !DILocation(line: 129, column: 18, scope: !3497)
!3513 = !DILocation(line: 130, column: 21, scope: !3497)
!3514 = !DILocation(line: 130, column: 7, scope: !3497)
!3515 = !DILocation(line: 130, column: 11, scope: !3497)
!3516 = !DILocation(line: 130, column: 19, scope: !3497)
!3517 = !DILocation(line: 161, column: 7, scope: !3497)
!3518 = !DILocation(line: 163, column: 18, scope: !3434)
!3519 = !DILocation(line: 163, column: 22, scope: !3434)
!3520 = !DILocation(line: 163, column: 30, scope: !3434)
!3521 = !DILocation(line: 163, column: 10, scope: !3434)
!3522 = !DILocation(line: 163, column: 3, scope: !3434)
!3523 = !DILocation(line: 164, column: 1, scope: !3434)
!3524 = !DILocalVariable(name: "fp", arg: 1, scope: !3525, file: !3435, line: 28, type: !3528)
!3525 = distinct !DISubprogram(name: "rpl_fseeko", scope: !3435, file: !3435, line: 28, type: !3526, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3562, retainedNodes: !4)
!3526 = !DISubroutineType(types: !3527)
!3527 = !{!25, !3528, !3472, !25}
!3528 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3529, size: 64)
!3529 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2259, line: 7, baseType: !3530)
!3530 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2261, line: 49, size: 1728, elements: !3531)
!3531 = !{!3532, !3533, !3534, !3535, !3536, !3537, !3538, !3539, !3540, !3541, !3542, !3543, !3544, !3545, !3547, !3548, !3549, !3550, !3551, !3552, !3553, !3554, !3555, !3556, !3557, !3558, !3559, !3560, !3561}
!3532 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3530, file: !2261, line: 51, baseType: !25, size: 32)
!3533 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3530, file: !2261, line: 54, baseType: !32, size: 64, offset: 64)
!3534 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3530, file: !2261, line: 55, baseType: !32, size: 64, offset: 128)
!3535 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3530, file: !2261, line: 56, baseType: !32, size: 64, offset: 192)
!3536 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3530, file: !2261, line: 57, baseType: !32, size: 64, offset: 256)
!3537 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3530, file: !2261, line: 58, baseType: !32, size: 64, offset: 320)
!3538 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3530, file: !2261, line: 59, baseType: !32, size: 64, offset: 384)
!3539 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3530, file: !2261, line: 60, baseType: !32, size: 64, offset: 448)
!3540 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3530, file: !2261, line: 61, baseType: !32, size: 64, offset: 512)
!3541 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3530, file: !2261, line: 64, baseType: !32, size: 64, offset: 576)
!3542 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3530, file: !2261, line: 65, baseType: !32, size: 64, offset: 640)
!3543 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3530, file: !2261, line: 66, baseType: !32, size: 64, offset: 704)
!3544 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3530, file: !2261, line: 68, baseType: !2276, size: 64, offset: 768)
!3545 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3530, file: !2261, line: 70, baseType: !3546, size: 64, offset: 832)
!3546 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3530, size: 64)
!3547 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3530, file: !2261, line: 72, baseType: !25, size: 32, offset: 896)
!3548 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3530, file: !2261, line: 73, baseType: !25, size: 32, offset: 928)
!3549 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3530, file: !2261, line: 74, baseType: !2283, size: 64, offset: 960)
!3550 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3530, file: !2261, line: 77, baseType: !56, size: 16, offset: 1024)
!3551 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3530, file: !2261, line: 78, baseType: !2288, size: 8, offset: 1040)
!3552 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3530, file: !2261, line: 79, baseType: !2290, size: 8, offset: 1048)
!3553 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3530, file: !2261, line: 81, baseType: !2294, size: 64, offset: 1088)
!3554 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3530, file: !2261, line: 89, baseType: !2297, size: 64, offset: 1152)
!3555 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3530, file: !2261, line: 91, baseType: !2299, size: 64, offset: 1216)
!3556 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3530, file: !2261, line: 92, baseType: !2302, size: 64, offset: 1280)
!3557 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3530, file: !2261, line: 93, baseType: !3546, size: 64, offset: 1344)
!3558 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3530, file: !2261, line: 94, baseType: !31, size: 64, offset: 1408)
!3559 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3530, file: !2261, line: 95, baseType: !57, size: 64, offset: 1472)
!3560 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3530, file: !2261, line: 96, baseType: !25, size: 32, offset: 1536)
!3561 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3530, file: !2261, line: 98, baseType: !2309, size: 160, offset: 1568)
!3562 = distinct !DICompileUnit(language: DW_LANG_C99, file: !144, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!3563 = !DILocalVariable(name: "offset", arg: 2, scope: !3525, file: !3435, line: 28, type: !3472)
!3564 = !DILocalVariable(name: "whence", arg: 3, scope: !3525, file: !3435, line: 28, type: !25)
!3565 = distinct !DISubprogram(name: "c_tolower", scope: !3566, file: !3566, line: 337, type: !3567, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !145, retainedNodes: !4)
!3566 = !DIFile(filename: "./lib/c-ctype.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3567 = !DISubroutineType(types: !3568)
!3568 = !{!25, !25}
!3569 = !DILocalVariable(name: "c", arg: 1, scope: !3565, file: !3566, line: 337, type: !25)
!3570 = !DILocation(line: 337, column: 16, scope: !3565)
!3571 = !DILocation(line: 339, column: 11, scope: !3565)
!3572 = !DILocation(line: 339, column: 3, scope: !3565)
!3573 = !DILocation(line: 342, column: 14, scope: !3574)
!3574 = distinct !DILexicalBlock(scope: !3565, file: !3566, line: 340, column: 5)
!3575 = !DILocation(line: 342, column: 16, scope: !3574)
!3576 = !DILocation(line: 342, column: 22, scope: !3574)
!3577 = !DILocation(line: 342, column: 7, scope: !3574)
!3578 = !DILocation(line: 344, column: 14, scope: !3574)
!3579 = !DILocation(line: 344, column: 7, scope: !3574)
!3580 = !DILocation(line: 346, column: 1, scope: !3565)
!3581 = !DILocalVariable(name: "c", arg: 1, scope: !3582, file: !3566, line: 337, type: !25)
!3582 = distinct !DISubprogram(name: "c_tolower", scope: !3566, file: !3566, line: 337, type: !3567, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3583, retainedNodes: !4)
!3583 = distinct !DICompileUnit(language: DW_LANG_C99, file: !146, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
