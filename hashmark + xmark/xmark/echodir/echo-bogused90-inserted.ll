; ModuleID = '<stdin>'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.infomap = type { i8*, i8* }
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.slotvec = type { i64, i8* }
%struct.__mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@.str = private unnamed_addr constant [23 x i8] c"status == EXIT_SUCCESS\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"src/echo.c\00", align 1
@__PRETTY_FUNCTION__.usage = private unnamed_addr constant [16 x i8] c"void usage(int)\00", align 1
@.str.2 = private unnamed_addr constant [63 x i8] c"Usage: %s [SHORT-OPTION]... [STRING]...\0A  or:  %s LONG-OPTION\0A\00", align 1
@.str.3 = private unnamed_addr constant [93 x i8] c"Echo the STRING(s) to standard output.\0A\0A  -n             do not output the trailing newline\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.4 = private unnamed_addr constant [132 x i8] c"  -e             enable interpretation of backslash escapes\0A  -E             disable interpretation of backslash escapes (default)\0A\00", align 1
@.str.5 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.6 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.7 = private unnamed_addr constant [63 x i8] c"\0AIf -e is in effect, the following sequences are recognized:\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [229 x i8] c"  \5C\5C      backslash\0A  \5Ca      alert (BEL)\0A  \5Cb      backspace\0A  \5Cc      produce no further output\0A  \5Ce      escape\0A  \5Cf      form feed\0A  \5Cn      new line\0A  \5Cr      carriage return\0A  \5Ct      horizontal tab\0A  \5Cv      vertical tab\0A\00", align 1
@.str.9 = private unnamed_addr constant [110 x i8] c"  \5C0NNN   byte with octal value NNN (1 to 3 digits)\0A  \5CxHH    byte with hexadecimal value HH (1 to 2 digits)\0A\00", align 1
@.str.10 = private unnamed_addr constant [191 x i8] c"\0ANOTE: your shell may have its own version of %s, which usually supersedes\0Athe version described here.  Please refer to your shell's documentation\0Afor details about the options it supports.\0A\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"echo\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.23, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.24, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.26, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.26, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.26, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.26, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.30 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.19 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.31 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.32 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.33 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.34 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.35 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.36 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.14 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.22 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.23 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.15 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.24 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.25 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.26 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.27 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.28 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.29 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.12 = private unnamed_addr constant [16 x i8] c"POSIXLY_CORRECT\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"-n\00", align 1
@.str.16 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"--help\00", align 1
@.str.18 = private unnamed_addr constant [10 x i8] c"--version\00", align 1
@.str.20 = private unnamed_addr constant [10 x i8] c"Brian Fox\00", align 1
@.str.21 = private unnamed_addr constant [11 x i8] c"Chet Ramey\00", align 1
@Version = internal global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.37, i32 0, i32 0), align 8, !dbg !0
@.str.37 = private unnamed_addr constant [5 x i8] c"8.32\00", align 1
@ignore_EPIPE = internal global i8 0, align 1, !dbg !9
@.str.40 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@file_name = internal global i8* null, align 8, !dbg !14
@.str.1.41 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.42 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@exit_failure = internal global i32 1, align 4, !dbg !18
@.str.47 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.48 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.49 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external dso_local global i8*, align 8
@program_name = internal global i8* null, align 8, !dbg !26
@program_invocation_name = external dso_local global i8*, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8, !dbg !35
@slotvec = internal global %struct.slotvec* @slotvec0, align 8, !dbg !91
@nslots = internal global i32 1, align 4, !dbg !98
@slotvec0 = internal global %struct.slotvec { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8, !dbg !100
@slot0 = internal global [256 x i8] zeroinitializer, align 16, !dbg !86
@.str.10.52 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.53 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.54 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.55 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.56 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.57 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.58 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.59 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.60 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@.str.63 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.64 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.65 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.66 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4.67 = private unnamed_addr constant [171 x i8] c"License GPLv3+: GNU GPL version 3 or later <%s>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.5.68 = private unnamed_addr constant [34 x i8] c"https://gnu.org/licenses/gpl.html\00", align 1
@.str.6.69 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.7.70 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.8.71 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.9.72 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.10.73 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.11.74 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.12.75 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.13.76 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.14.77 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.15.78 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@version_etc_copyright = internal constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16, !dbg !102
@.str.1.89 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.90 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.99 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.100 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.103 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.104 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@inVal0 = global i32 0
@inVal1 = global i8** null
@.compVal0 = private global [4 x i8] c"   \00"
@.compVal1 = private global [2 x i8] c"-\00"
@.compVal2 = private global [1 x i8] zeroinitializer
@x = common global i32 0
@y = common global i32 0
@x.1 = common global i32 0
@y.2 = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @usage(i32) #0 !dbg !153 {
  %2 = load i32, i32* @x
  %3 = load i32, i32* @y
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !156, metadata !DIExpression()), !dbg !157
  %11 = load i32, i32* %10, align 4, !dbg !158
  %12 = icmp eq i32 %11, 0, !dbg !158
  %13 = load i32, i32* @x
  %14 = load i32, i32* @y
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %22, !dbg !161

21:                                               ; preds = %originalBBpart2
  br label %39, !dbg !161

22:                                               ; preds = %originalBBpart2
  %23 = load i32, i32* @x
  %24 = load i32, i32* @y
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  call void @__assert_fail(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 40, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__PRETTY_FUNCTION__.usage, i64 0, i64 0)) #12, !dbg !158
  %31 = load i32, i32* @x
  %32 = load i32, i32* @y
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !158

39:                                               ; preds = %21
  %40 = load i32, i32* @x
  %41 = load i32, i32* @y
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %39, %originalBB6alteredBB
  %48 = call i8* @gettext(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !162
  %49 = load i8*, i8** @program_name, align 8, !dbg !163
  %50 = load i8*, i8** @program_name, align 8, !dbg !164
  %51 = call i32 (i8*, ...) @printf(i8* %48, i8* %49, i8* %50), !dbg !165
  %52 = call i8* @gettext(i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !166
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !166
  %54 = call i32 @fputs_unlocked(i8* %52, %struct._IO_FILE* %53), !dbg !166
  %55 = call i8* @gettext(i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !167
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !167
  %57 = call i32 @fputs_unlocked(i8* %55, %struct._IO_FILE* %56), !dbg !167
  %58 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !168
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !168
  %60 = call i32 @fputs_unlocked(i8* %58, %struct._IO_FILE* %59), !dbg !168
  %61 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !169
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !169
  %63 = call i32 @fputs_unlocked(i8* %61, %struct._IO_FILE* %62), !dbg !169
  %64 = call i8* @gettext(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.7, i64 0, i64 0)) #10, !dbg !170
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !170
  %66 = call i32 @fputs_unlocked(i8* %64, %struct._IO_FILE* %65), !dbg !170
  %67 = call i8* @gettext(i8* getelementptr inbounds ([229 x i8], [229 x i8]* @.str.8, i64 0, i64 0)) #10, !dbg !171
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !171
  %69 = call i32 @fputs_unlocked(i8* %67, %struct._IO_FILE* %68), !dbg !171
  %70 = call i8* @gettext(i8* getelementptr inbounds ([110 x i8], [110 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !172
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !172
  %72 = call i32 @fputs_unlocked(i8* %70, %struct._IO_FILE* %71), !dbg !172
  %73 = call i8* @gettext(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !173
  %74 = call i32 (i8*, ...) @printf(i8* %73, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0)), !dbg !174
  call void @emit_ancillary_info(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0)), !dbg !175
  %75 = load i32, i32* %10, align 4, !dbg !176
  call void @exit(i32 %75) #12, !dbg !177
  %76 = load i32, i32* @x
  %77 = load i32, i32* @y
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !177

originalBBalteredBB:                              ; preds = %originalBB, %1
  %84 = alloca i32, align 4
  store i32 %0, i32* %84, align 4
  call void @llvm.dbg.declare(metadata i32* %84, metadata !178, metadata !DIExpression()), !dbg !157
  %85 = load i32, i32* %84, align 4, !dbg !158
  %86 = icmp eq i32 %85, 0, !dbg !158
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  call void @__assert_fail(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 40, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__PRETTY_FUNCTION__.usage, i64 0, i64 0)) #12, !dbg !158
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %39
  %87 = call i8* @gettext(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !162
  %88 = load i8*, i8** @program_name, align 8, !dbg !163
  %89 = load i8*, i8** @program_name, align 8, !dbg !164
  %90 = call i32 (i8*, ...) @printf(i8* %87, i8* %88, i8* %89), !dbg !165
  %91 = call i8* @gettext(i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !166
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !166
  %93 = call i32 @fputs_unlocked(i8* %91, %struct._IO_FILE* %92), !dbg !166
  %94 = call i8* @gettext(i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !167
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !167
  %96 = call i32 @fputs_unlocked(i8* %94, %struct._IO_FILE* %95), !dbg !167
  %97 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !168
  %98 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !168
  %99 = call i32 @fputs_unlocked(i8* %97, %struct._IO_FILE* %98), !dbg !168
  %100 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !169
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !169
  %102 = call i32 @fputs_unlocked(i8* %100, %struct._IO_FILE* %101), !dbg !169
  %103 = call i8* @gettext(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.7, i64 0, i64 0)) #10, !dbg !170
  %104 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !170
  %105 = call i32 @fputs_unlocked(i8* %103, %struct._IO_FILE* %104), !dbg !170
  %106 = call i8* @gettext(i8* getelementptr inbounds ([229 x i8], [229 x i8]* @.str.8, i64 0, i64 0)) #10, !dbg !171
  %107 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !171
  %108 = call i32 @fputs_unlocked(i8* %106, %struct._IO_FILE* %107), !dbg !171
  %109 = call i8* @gettext(i8* getelementptr inbounds ([110 x i8], [110 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !172
  %110 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !172
  %111 = call i32 @fputs_unlocked(i8* %109, %struct._IO_FILE* %110), !dbg !172
  %112 = call i8* @gettext(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !173
  %113 = call i32 (i8*, ...) @printf(i8* %112, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0)), !dbg !174
  call void @emit_ancillary_info(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0)), !dbg !175
  %114 = load i32, i32* %10, align 4, !dbg !176
  call void @exit(i32 %114) #12, !dbg !177
  br label %originalBB6
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @gettext(i8*) #3

declare dso_local i32 @printf(i8*, ...) #4

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(i8*) #5 !dbg !181 {
  %2 = load i32, i32* @x.1
  %3 = load i32, i32* @y.2
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca [7 x %struct.infomap], align 16
  %12 = alloca i8*, align 8
  %13 = alloca %struct.infomap*, align 8
  %14 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !185, metadata !DIExpression()), !dbg !186
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %11, metadata !187, metadata !DIExpression()), !dbg !196
  %15 = bitcast [7 x %struct.infomap]* %11 to i8*, !dbg !196
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !196
  call void @llvm.dbg.declare(metadata i8** %12, metadata !197, metadata !DIExpression()), !dbg !198
  %16 = load i8*, i8** %10, align 8, !dbg !199
  store i8* %16, i8** %12, align 8, !dbg !198
  call void @llvm.dbg.declare(metadata %struct.infomap** %13, metadata !200, metadata !DIExpression()), !dbg !202
  %17 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %11, i64 0, i64 0, !dbg !203
  store %struct.infomap* %17, %struct.infomap** %13, align 8, !dbg !202
  %18 = load i32, i32* @x.1
  %19 = load i32, i32* @y.2
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %26, !dbg !204

26:                                               ; preds = %89, %originalBBpart2
  %27 = load i32, i32* @x.1
  %28 = load i32, i32* @y.2
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !205
  %36 = getelementptr inbounds %struct.infomap, %struct.infomap* %35, i32 0, i32 0, !dbg !206
  %37 = load i8*, i8** %36, align 8, !dbg !206
  %38 = icmp ne i8* %37, null, !dbg !205
  %39 = load i32, i32* @x.1
  %40 = load i32, i32* @y.2
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %71, !dbg !207

47:                                               ; preds = %originalBBpart24
  %48 = load i32, i32* @x.1
  %49 = load i32, i32* @y.2
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = load i8*, i8** %10, align 8, !dbg !208
  %57 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !208
  %58 = getelementptr inbounds %struct.infomap, %struct.infomap* %57, i32 0, i32 0, !dbg !208
  %59 = load i8*, i8** %58, align 8, !dbg !208
  %60 = call i32 @strcmp(i8* %56, i8* %59) #13, !dbg !208
  %61 = icmp eq i32 %60, 0, !dbg !208
  %62 = xor i1 %61, true, !dbg !209
  %63 = load i32, i32* @x.1
  %64 = load i32, i32* @y.2
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart211, label %originalBB6alteredBB

originalBBpart211:                                ; preds = %originalBB6
  br label %71

71:                                               ; preds = %originalBBpart211, %originalBBpart24
  %72 = phi i1 [ false, %originalBBpart24 ], [ %62, %originalBBpart211 ], !dbg !210
  %73 = load i32, i32* @x.1
  %74 = load i32, i32* @y.2
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB13, label %originalBB13alteredBB

originalBB13:                                     ; preds = %71, %originalBB13alteredBB
  %81 = load i32, i32* @x.1
  %82 = load i32, i32* @y.2
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBBpart215, label %originalBB13alteredBB

originalBBpart215:                                ; preds = %originalBB13
  br i1 %72, label %89, label %92, !dbg !204

89:                                               ; preds = %originalBBpart215
  %90 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !211
  %91 = getelementptr inbounds %struct.infomap, %struct.infomap* %90, i32 1, !dbg !211
  store %struct.infomap* %91, %struct.infomap** %13, align 8, !dbg !211
  br label %26, !dbg !204, !llvm.loop !212

92:                                               ; preds = %originalBBpart215
  %93 = load i32, i32* @x.1
  %94 = load i32, i32* @y.2
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %92, %originalBB17alteredBB
  %101 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !213
  %102 = getelementptr inbounds %struct.infomap, %struct.infomap* %101, i32 0, i32 1, !dbg !215
  %103 = load i8*, i8** %102, align 8, !dbg !215
  %104 = icmp ne i8* %103, null, !dbg !213
  %105 = load i32, i32* @x.1
  %106 = load i32, i32* @y.2
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBBpart219, label %originalBB17alteredBB

originalBBpart219:                                ; preds = %originalBB17
  br i1 %104, label %113, label %133, !dbg !216

113:                                              ; preds = %originalBBpart219
  %114 = load i32, i32* @x.1
  %115 = load i32, i32* @y.2
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB21, label %originalBB21alteredBB

originalBB21:                                     ; preds = %113, %originalBB21alteredBB
  %122 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !217
  %123 = getelementptr inbounds %struct.infomap, %struct.infomap* %122, i32 0, i32 1, !dbg !218
  %124 = load i8*, i8** %123, align 8, !dbg !218
  store i8* %124, i8** %12, align 8, !dbg !219
  %125 = load i32, i32* @x.1
  %126 = load i32, i32* @y.2
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart223, label %originalBB21alteredBB

originalBBpart223:                                ; preds = %originalBB21
  br label %133, !dbg !220

133:                                              ; preds = %originalBBpart223, %originalBBpart219
  %134 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.30, i64 0, i64 0)) #10, !dbg !221
  %135 = call i32 (i8*, ...) @printf(i8* %134, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.31, i64 0, i64 0)), !dbg !222
  call void @llvm.dbg.declare(metadata i8** %14, metadata !223, metadata !DIExpression()), !dbg !224
  %136 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !225
  store i8* %136, i8** %14, align 8, !dbg !224
  %137 = load i8*, i8** %14, align 8, !dbg !226
  %138 = icmp ne i8* %137, null, !dbg !226
  br i1 %138, label %139, label %179, !dbg !228

139:                                              ; preds = %133
  %140 = load i32, i32* @x.1
  %141 = load i32, i32* @y.2
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %139, %originalBB25alteredBB
  %148 = load i8*, i8** %14, align 8, !dbg !229
  %149 = call i32 @strncmp(i8* %148, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.32, i64 0, i64 0), i64 3) #13, !dbg !229
  %150 = icmp ne i32 %149, 0, !dbg !229
  %151 = load i32, i32* @x.1
  %152 = load i32, i32* @y.2
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br i1 %150, label %159, label %179, !dbg !230

159:                                              ; preds = %originalBBpart227
  %160 = load i32, i32* @x.1
  %161 = load i32, i32* @y.2
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %159, %originalBB29alteredBB
  %168 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.33, i64 0, i64 0)) #10, !dbg !231
  %169 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !231
  %170 = call i32 @fputs_unlocked(i8* %168, %struct._IO_FILE* %169), !dbg !231
  %171 = load i32, i32* @x.1
  %172 = load i32, i32* @y.2
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br label %179, !dbg !233

179:                                              ; preds = %originalBBpart231, %originalBBpart227, %133
  %180 = load i32, i32* @x.1
  %181 = load i32, i32* @y.2
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %179, %originalBB33alteredBB
  %188 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.34, i64 0, i64 0)) #10, !dbg !234
  %189 = load i8*, i8** %10, align 8, !dbg !235
  %190 = call i32 (i8*, ...) @printf(i8* %188, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.31, i64 0, i64 0), i8* %189), !dbg !236
  %191 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.35, i64 0, i64 0)) #10, !dbg !237
  %192 = load i8*, i8** %12, align 8, !dbg !238
  %193 = load i8*, i8** %12, align 8, !dbg !239
  %194 = load i8*, i8** %10, align 8, !dbg !240
  %195 = icmp eq i8* %193, %194, !dbg !241
  %196 = zext i1 %195 to i64, !dbg !239
  %197 = select i1 %195, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), !dbg !239
  %198 = call i32 (i8*, ...) @printf(i8* %191, i8* %192, i8* %197), !dbg !242
  %199 = load i32, i32* @x.1
  %200 = load i32, i32* @y.2
  %201 = sub i32 %199, 1
  %202 = mul i32 %199, %201
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %204, %205
  br i1 %206, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  ret void, !dbg !243

originalBBalteredBB:                              ; preds = %originalBB, %1
  %207 = alloca i8*, align 8
  %208 = alloca [7 x %struct.infomap], align 16
  %209 = alloca i8*, align 8
  %210 = alloca %struct.infomap*, align 8
  %211 = alloca i8*, align 8
  store i8* %0, i8** %207, align 8
  call void @llvm.dbg.declare(metadata i8** %207, metadata !244, metadata !DIExpression()), !dbg !186
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %208, metadata !247, metadata !DIExpression()), !dbg !196
  %212 = bitcast [7 x %struct.infomap]* %208 to i8*, !dbg !196
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %212, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !196
  call void @llvm.dbg.declare(metadata i8** %209, metadata !254, metadata !DIExpression()), !dbg !198
  %213 = load i8*, i8** %207, align 8, !dbg !199
  store i8* %213, i8** %209, align 8, !dbg !198
  call void @llvm.dbg.declare(metadata %struct.infomap** %210, metadata !255, metadata !DIExpression()), !dbg !202
  %214 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %208, i64 0, i64 0, !dbg !203
  store %struct.infomap* %214, %struct.infomap** %210, align 8, !dbg !202
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %215 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !205
  %216 = getelementptr inbounds %struct.infomap, %struct.infomap* %215, i32 0, i32 0, !dbg !206
  %217 = load i8*, i8** %216, align 8, !dbg !206
  %218 = icmp ne i8* %217, null, !dbg !205
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %219 = load i8*, i8** %10, align 8, !dbg !208
  %220 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !208
  %221 = getelementptr inbounds %struct.infomap, %struct.infomap* %220, i32 0, i32 0, !dbg !208
  %222 = load i8*, i8** %221, align 8, !dbg !208
  %223 = call i32 @strcmp(i8* %219, i8* %222) #13, !dbg !208
  %224 = icmp eq i32 %223, 0, !dbg !208
  %_ = shl i1 %224, true
  %_7 = shl i1 %224, true
  %_8 = shl i1 %224, true
  %_9 = sub i1 %224, true
  %gen = mul i1 %_9, true
  %225 = xor i1 %224, true, !dbg !209
  br label %originalBB6

originalBB13alteredBB:                            ; preds = %originalBB13, %71
  br label %originalBB13

originalBB17alteredBB:                            ; preds = %originalBB17, %92
  %226 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !213
  %227 = getelementptr inbounds %struct.infomap, %struct.infomap* %226, i32 0, i32 1, !dbg !215
  %228 = load i8*, i8** %227, align 8, !dbg !215
  %229 = icmp ne i8* %228, null, !dbg !213
  br label %originalBB17

originalBB21alteredBB:                            ; preds = %originalBB21, %113
  %230 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !217
  %231 = getelementptr inbounds %struct.infomap, %struct.infomap* %230, i32 0, i32 1, !dbg !218
  %232 = load i8*, i8** %231, align 8, !dbg !218
  store i8* %232, i8** %12, align 8, !dbg !219
  br label %originalBB21

originalBB25alteredBB:                            ; preds = %originalBB25, %139
  %233 = load i8*, i8** %14, align 8, !dbg !229
  %234 = call i32 @strncmp(i8* %233, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.32, i64 0, i64 0), i64 3) #13, !dbg !229
  %235 = icmp ne i32 %234, 0, !dbg !229
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %159
  %236 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.33, i64 0, i64 0)) #10, !dbg !231
  %237 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !231
  %238 = call i32 @fputs_unlocked(i8* %236, %struct._IO_FILE* %237), !dbg !231
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %179
  %239 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.34, i64 0, i64 0)) #10, !dbg !234
  %240 = load i8*, i8** %10, align 8, !dbg !235
  %241 = call i32 (i8*, ...) @printf(i8* %239, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.31, i64 0, i64 0), i8* %240), !dbg !236
  %242 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.35, i64 0, i64 0)) #10, !dbg !237
  %243 = load i8*, i8** %12, align 8, !dbg !238
  %244 = load i8*, i8** %12, align 8, !dbg !239
  %245 = load i8*, i8** %10, align 8, !dbg !240
  %246 = icmp eq i8* %244, %245, !dbg !241
  %247 = zext i1 %246 to i64, !dbg !239
  %248 = select i1 %246, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), !dbg !239
  %249 = call i32 (i8*, ...) @printf(i8* %242, i8* %243, i8* %248), !dbg !242
  br label %originalBB33
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #7

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #3

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) #5 !dbg !257 {
  %3 = load i32, i32* @x.3
  %4 = load i32, i32* @y.4
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8**, align 8
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  %18 = alloca i8*, align 8
  %19 = alloca i64, align 8
  %20 = alloca i8*, align 8
  %21 = alloca i8, align 1
  %22 = alloca i8, align 1
  store i32 0, i32* %11, align 4
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !261, metadata !DIExpression()), !dbg !262
  store i8** %1, i8*** %13, align 8
  call void @llvm.dbg.declare(metadata i8*** %13, metadata !263, metadata !DIExpression()), !dbg !264
  call void @llvm.dbg.declare(metadata i8* %14, metadata !265, metadata !DIExpression()), !dbg !266
  store i8 1, i8* %14, align 1, !dbg !266
  call void @llvm.dbg.declare(metadata i8* %15, metadata !267, metadata !DIExpression()), !dbg !268
  %23 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !269
  %24 = icmp ne i8* %23, null, !dbg !269
  %25 = zext i1 %24 to i8, !dbg !268
  store i8 %25, i8* %15, align 1, !dbg !268
  call void @llvm.dbg.declare(metadata i8* %16, metadata !270, metadata !DIExpression()), !dbg !271
  %26 = load i8, i8* %15, align 1, !dbg !272
  %27 = trunc i8 %26 to i1, !dbg !272
  %28 = load i32, i32* @x.3
  %29 = load i32, i32* @y.4
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %27, label %36, label %95, !dbg !273

36:                                               ; preds = %originalBBpart2
  %37 = load i32, i32* @x.3
  %38 = load i32, i32* @y.4
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %36, %originalBB1alteredBB
  %45 = load i32, i32* %12, align 4, !dbg !274
  %46 = icmp slt i32 1, %45, !dbg !275
  %47 = load i32, i32* @x.3
  %48 = load i32, i32* @y.4
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %46, label %55, label %77, !dbg !276

55:                                               ; preds = %originalBBpart24
  %56 = load i32, i32* @x.3
  %57 = load i32, i32* @y.4
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %55, %originalBB6alteredBB
  %64 = load i8**, i8*** %13, align 8, !dbg !277
  %65 = getelementptr inbounds i8*, i8** %64, i64 1, !dbg !277
  %66 = load i8*, i8** %65, align 8, !dbg !277
  %67 = call i32 @strcmp(i8* %66, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0)) #13, !dbg !277
  %68 = icmp eq i32 %67, 0, !dbg !277
  %69 = load i32, i32* @x.3
  %70 = load i32, i32* @y.4
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %77

77:                                               ; preds = %originalBBpart28, %originalBBpart24
  %78 = phi i1 [ false, %originalBBpart24 ], [ %68, %originalBBpart28 ], !dbg !278
  %79 = load i32, i32* @x.3
  %80 = load i32, i32* @y.4
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %77, %originalBB10alteredBB
  %87 = load i32, i32* @x.3
  %88 = load i32, i32* @y.4
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %95, !dbg !273

95:                                               ; preds = %originalBBpart212, %originalBBpart2
  %96 = phi i1 [ true, %originalBBpart2 ], [ %78, %originalBBpart212 ]
  %97 = load i32, i32* @x.3
  %98 = load i32, i32* @y.4
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %95, %originalBB14alteredBB
  %105 = zext i1 %96 to i8, !dbg !271
  store i8 %105, i8* %16, align 1, !dbg !271
  call void @llvm.dbg.declare(metadata i8* %17, metadata !279, metadata !DIExpression()), !dbg !280
  store i8 0, i8* %17, align 1, !dbg !280
  %106 = load i8**, i8*** %13, align 8, !dbg !281
  %107 = getelementptr inbounds i8*, i8** %106, i64 0, !dbg !281
  %108 = load i8*, i8** %107, align 8, !dbg !281
  call void @set_program_name(i8* %108), !dbg !282
  %109 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)) #10, !dbg !283
  %110 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !284
  %111 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0)) #10, !dbg !285
  %112 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !286
  %113 = load i8, i8* %16, align 1, !dbg !287
  %114 = trunc i8 %113 to i1, !dbg !287
  %115 = load i32, i32* @x.3
  %116 = load i32, i32* @y.4
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %114, label %123, label %777, !dbg !289

123:                                              ; preds = %originalBBpart216
  %124 = load i32, i32* @x.3
  %125 = load i32, i32* @y.4
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %123, %originalBB18alteredBB
  %132 = load i32, i32* %12, align 4, !dbg !290
  %133 = load i32, i32* @x.3
  %134 = load i32, i32* @y.4
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %141, !dbg !291

141:                                              ; preds = %originalBBpart220
  %142 = load i32, i32* @x.3
  %143 = load i32, i32* @y.4
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %141, %originalBB22alteredBB
  %collatzVar = alloca i32
  %150 = load i32, i32* @x.3
  %151 = load i32, i32* @y.4
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %158

158:                                              ; preds = %originalBBpart224
  %159 = load i32, i32* @x.3
  %160 = load i32, i32* @y.4
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %158, %originalBB26alteredBB
  %167 = load i32, i32* @inVal0
  %168 = icmp sgt i32 %167, 1
  %169 = load i32, i32* @x.3
  %170 = load i32, i32* @y.4
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %168, label %194, label %177

177:                                              ; preds = %originalBBpart228
  %178 = load i32, i32* @x.3
  %179 = load i32, i32* @y.4
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %177, %originalBB30alteredBB
  store i32 51, i32* %collatzVar
  %186 = load i32, i32* @x.3
  %187 = load i32, i32* @y.4
  %188 = sub i32 %186, 1
  %189 = mul i32 %186, %188
  %190 = urem i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %191, %192
  br i1 %193, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %194

194:                                              ; preds = %originalBBpart232, %originalBBpart228
  %195 = load i32, i32* @x.3
  %196 = load i32, i32* @y.4
  %197 = sub i32 %195, 1
  %198 = mul i32 %195, %197
  %199 = urem i32 %198, 2
  %200 = icmp eq i32 %199, 0
  %201 = icmp slt i32 %196, 10
  %202 = or i1 %200, %201
  br i1 %202, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %194, %originalBB34alteredBB
  %203 = load i8**, i8*** @inVal1
  %204 = getelementptr inbounds i8*, i8** %203, i64 1
  %205 = load i8*, i8** %204
  %controle = call i32 @controle(i8* %205, i32 2)
  store i32 %controle, i32* %collatzVar
  %206 = load i32, i32* @x.3
  %207 = load i32, i32* @y.4
  %208 = sub i32 %206, 1
  %209 = mul i32 %206, %208
  %210 = urem i32 %209, 2
  %211 = icmp eq i32 %210, 0
  %212 = icmp slt i32 %207, 10
  %213 = or i1 %211, %212
  br i1 %213, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %214

214:                                              ; preds = %originalBBpart2104, %originalBBpart296, %originalBBpart236
  %215 = load i32, i32* @x.3
  %216 = load i32, i32* @y.4
  %217 = sub i32 %215, 1
  %218 = mul i32 %215, %217
  %219 = urem i32 %218, 2
  %220 = icmp eq i32 %219, 0
  %221 = icmp slt i32 %216, 10
  %222 = or i1 %220, %221
  br i1 %222, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %214, %originalBB38alteredBB
  %223 = load i32, i32* %collatzVar
  %224 = icmp sgt i32 %223, 1
  %225 = load i32, i32* @x.3
  %226 = load i32, i32* @y.4
  %227 = sub i32 %225, 1
  %228 = mul i32 %225, %227
  %229 = urem i32 %228, 2
  %230 = icmp eq i32 %229, 0
  %231 = icmp slt i32 %226, 10
  %232 = or i1 %230, %231
  br i1 %232, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %224, label %233, label %777

233:                                              ; preds = %originalBBpart240
  %234 = load i32, i32* @x.3
  %235 = load i32, i32* @y.4
  %236 = sub i32 %234, 1
  %237 = mul i32 %234, %236
  %238 = urem i32 %237, 2
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %239, %240
  br i1 %241, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %233, %originalBB42alteredBB
  %242 = load i32, i32* %collatzVar
  %243 = srem i32 %242, 2
  %244 = icmp eq i32 %243, 0
  %245 = load i32, i32* @x.3
  %246 = load i32, i32* @y.4
  %247 = sub i32 %245, 1
  %248 = mul i32 %245, %247
  %249 = urem i32 %248, 2
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %250, %251
  br i1 %252, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br i1 %244, label %253, label %272

253:                                              ; preds = %originalBBpart244
  %254 = load i32, i32* @x.3
  %255 = load i32, i32* @y.4
  %256 = sub i32 %254, 1
  %257 = mul i32 %254, %256
  %258 = urem i32 %257, 2
  %259 = icmp eq i32 %258, 0
  %260 = icmp slt i32 %255, 10
  %261 = or i1 %259, %260
  br i1 %261, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %253, %originalBB46alteredBB
  %262 = load i32, i32* %collatzVar
  %263 = sdiv i32 %262, 2
  store i32 %263, i32* %collatzVar
  %264 = load i32, i32* @x.3
  %265 = load i32, i32* @y.4
  %266 = sub i32 %264, 1
  %267 = mul i32 %264, %266
  %268 = urem i32 %267, 2
  %269 = icmp eq i32 %268, 0
  %270 = icmp slt i32 %265, 10
  %271 = or i1 %269, %270
  br i1 %271, label %originalBBpart261, label %originalBB46alteredBB

originalBBpart261:                                ; preds = %originalBB46
  br label %292

272:                                              ; preds = %originalBBpart244
  %273 = load i32, i32* @x.3
  %274 = load i32, i32* @y.4
  %275 = sub i32 %273, 1
  %276 = mul i32 %273, %275
  %277 = urem i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %278, %279
  br i1 %280, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %272, %originalBB63alteredBB
  %281 = load i32, i32* %collatzVar
  %282 = mul i32 %281, 3
  %283 = add i32 %282, 1
  store i32 %283, i32* %collatzVar
  %284 = load i32, i32* @x.3
  %285 = load i32, i32* @y.4
  %286 = sub i32 %284, 1
  %287 = mul i32 %284, %286
  %288 = urem i32 %287, 2
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %289, %290
  br i1 %291, label %originalBBpart277, label %originalBB63alteredBB

originalBBpart277:                                ; preds = %originalBB63
  br label %292

292:                                              ; preds = %originalBBpart277, %originalBBpart261
  %293 = load i32, i32* @x.3
  %294 = load i32, i32* @y.4
  %295 = sub i32 %293, 1
  %296 = mul i32 %293, %295
  %297 = urem i32 %296, 2
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %298, %299
  br i1 %300, label %originalBB79, label %originalBB79alteredBB

originalBB79:                                     ; preds = %292, %originalBB79alteredBB
  %301 = load i32, i32* %collatzVar
  %302 = sub i32 %132, %301
  %303 = icmp sgt i32 %302, 0
  %304 = load i32, i32* @x.3
  %305 = load i32, i32* @y.4
  %306 = sub i32 %304, 1
  %307 = mul i32 %304, %306
  %308 = urem i32 %307, 2
  %309 = icmp eq i32 %308, 0
  %310 = icmp slt i32 %305, 10
  %311 = or i1 %309, %310
  br i1 %311, label %originalBBpart296, label %originalBB79alteredBB

originalBBpart296:                                ; preds = %originalBB79
  br i1 %303, label %312, label %214

312:                                              ; preds = %originalBBpart296
  %313 = load i32, i32* @x.3
  %314 = load i32, i32* @y.4
  %315 = sub i32 %313, 1
  %316 = mul i32 %313, %315
  %317 = urem i32 %316, 2
  %318 = icmp eq i32 %317, 0
  %319 = icmp slt i32 %314, 10
  %320 = or i1 %318, %319
  br i1 %320, label %originalBB98, label %originalBB98alteredBB

originalBB98:                                     ; preds = %312, %originalBB98alteredBB
  %321 = load i32, i32* %collatzVar
  %322 = add i32 %132, %321
  %323 = icmp slt i32 %322, 4
  %324 = load i32, i32* @x.3
  %325 = load i32, i32* @y.4
  %326 = sub i32 %324, 1
  %327 = mul i32 %324, %326
  %328 = urem i32 %327, 2
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %329, %330
  br i1 %331, label %originalBBpart2104, label %originalBB98alteredBB

originalBBpart2104:                               ; preds = %originalBB98
  br i1 %323, label %332, label %214

332:                                              ; preds = %originalBBpart2104
  %333 = load i32, i32* @x.3
  %334 = load i32, i32* @y.4
  %335 = sub i32 %333, 1
  %336 = mul i32 %333, %335
  %337 = urem i32 %336, 2
  %338 = icmp eq i32 %337, 0
  %339 = icmp slt i32 %334, 10
  %340 = or i1 %338, %339
  br i1 %340, label %originalBB106, label %originalBB106alteredBB

originalBB106:                                    ; preds = %332, %originalBB106alteredBB
  %341 = load i8**, i8*** %13, align 8, !dbg !292
  %342 = getelementptr inbounds i8*, i8** %341, i64 1, !dbg !292
  %343 = load i8*, i8** %342, align 8, !dbg !292
  %344 = call i32 @strcmp(i8* %343, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i64 0, i64 0)) #13, !dbg !292
  %345 = load i32, i32* @x.3
  %346 = load i32, i32* @y.4
  %347 = sub i32 %345, 1
  %348 = mul i32 %345, %347
  %349 = urem i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = icmp slt i32 %346, 10
  %352 = or i1 %350, %351
  br i1 %352, label %originalBBpart2108, label %originalBB106alteredBB

originalBBpart2108:                               ; preds = %originalBB106
  br label %353, !dbg !292

353:                                              ; preds = %originalBBpart2108
  %collatzVar5 = alloca i32
  br label %354

354:                                              ; preds = %353
  %355 = load i32, i32* @x.3
  %356 = load i32, i32* @y.4
  %357 = sub i32 %355, 1
  %358 = mul i32 %355, %357
  %359 = urem i32 %358, 2
  %360 = icmp eq i32 %359, 0
  %361 = icmp slt i32 %356, 10
  %362 = or i1 %360, %361
  br i1 %362, label %originalBB110, label %originalBB110alteredBB

originalBB110:                                    ; preds = %354, %originalBB110alteredBB
  %363 = load i32, i32* @inVal0
  %364 = icmp sgt i32 %363, 1
  %365 = load i32, i32* @x.3
  %366 = load i32, i32* @y.4
  %367 = sub i32 %365, 1
  %368 = mul i32 %365, %367
  %369 = urem i32 %368, 2
  %370 = icmp eq i32 %369, 0
  %371 = icmp slt i32 %366, 10
  %372 = or i1 %370, %371
  br i1 %372, label %originalBBpart2112, label %originalBB110alteredBB

originalBBpart2112:                               ; preds = %originalBB110
  br i1 %364, label %390, label %373

373:                                              ; preds = %originalBBpart2112
  %374 = load i32, i32* @x.3
  %375 = load i32, i32* @y.4
  %376 = sub i32 %374, 1
  %377 = mul i32 %374, %376
  %378 = urem i32 %377, 2
  %379 = icmp eq i32 %378, 0
  %380 = icmp slt i32 %375, 10
  %381 = or i1 %379, %380
  br i1 %381, label %originalBB114, label %originalBB114alteredBB

originalBB114:                                    ; preds = %373, %originalBB114alteredBB
  store i32 18, i32* %collatzVar5
  %382 = load i32, i32* @x.3
  %383 = load i32, i32* @y.4
  %384 = sub i32 %382, 1
  %385 = mul i32 %382, %384
  %386 = urem i32 %385, 2
  %387 = icmp eq i32 %386, 0
  %388 = icmp slt i32 %383, 10
  %389 = or i1 %387, %388
  br i1 %389, label %originalBBpart2116, label %originalBB114alteredBB

originalBBpart2116:                               ; preds = %originalBB114
  br label %390

390:                                              ; preds = %originalBBpart2116, %originalBBpart2112
  %391 = load i32, i32* @x.3
  %392 = load i32, i32* @y.4
  %393 = sub i32 %391, 1
  %394 = mul i32 %391, %393
  %395 = urem i32 %394, 2
  %396 = icmp eq i32 %395, 0
  %397 = icmp slt i32 %392, 10
  %398 = or i1 %396, %397
  br i1 %398, label %originalBB118, label %originalBB118alteredBB

originalBB118:                                    ; preds = %390, %originalBB118alteredBB
  %399 = load i8**, i8*** @inVal1
  %400 = getelementptr inbounds i8*, i8** %399, i64 1
  %401 = load i8*, i8** %400
  %controle6 = call i32 @controle(i8* %401, i32 0)
  store i32 %controle6, i32* %collatzVar5
  %402 = load i32, i32* @x.3
  %403 = load i32, i32* @y.4
  %404 = sub i32 %402, 1
  %405 = mul i32 %402, %404
  %406 = urem i32 %405, 2
  %407 = icmp eq i32 %406, 0
  %408 = icmp slt i32 %403, 10
  %409 = or i1 %407, %408
  br i1 %409, label %originalBBpart2120, label %originalBB118alteredBB

originalBBpart2120:                               ; preds = %originalBB118
  br label %410

410:                                              ; preds = %originalBBpart2191, %originalBBpart2182, %originalBBpart2120
  %411 = load i32, i32* @x.3
  %412 = load i32, i32* @y.4
  %413 = sub i32 %411, 1
  %414 = mul i32 %411, %413
  %415 = urem i32 %414, 2
  %416 = icmp eq i32 %415, 0
  %417 = icmp slt i32 %412, 10
  %418 = or i1 %416, %417
  br i1 %418, label %originalBB122, label %originalBB122alteredBB

originalBB122:                                    ; preds = %410, %originalBB122alteredBB
  %419 = load i32, i32* %collatzVar5
  %420 = icmp sgt i32 %419, 1
  %421 = load i32, i32* @x.3
  %422 = load i32, i32* @y.4
  %423 = sub i32 %421, 1
  %424 = mul i32 %421, %423
  %425 = urem i32 %424, 2
  %426 = icmp eq i32 %425, 0
  %427 = icmp slt i32 %422, 10
  %428 = or i1 %426, %427
  br i1 %428, label %originalBBpart2124, label %originalBB122alteredBB

originalBBpart2124:                               ; preds = %originalBB122
  br i1 %420, label %429, label %545

429:                                              ; preds = %originalBBpart2124
  %430 = load i32, i32* @x.3
  %431 = load i32, i32* @y.4
  %432 = sub i32 %430, 1
  %433 = mul i32 %430, %432
  %434 = urem i32 %433, 2
  %435 = icmp eq i32 %434, 0
  %436 = icmp slt i32 %431, 10
  %437 = or i1 %435, %436
  br i1 %437, label %originalBB126, label %originalBB126alteredBB

originalBB126:                                    ; preds = %429, %originalBB126alteredBB
  %438 = load i32, i32* %collatzVar5
  %439 = srem i32 %438, 2
  %440 = icmp eq i32 %439, 0
  %441 = load i32, i32* @x.3
  %442 = load i32, i32* @y.4
  %443 = sub i32 %441, 1
  %444 = mul i32 %441, %443
  %445 = urem i32 %444, 2
  %446 = icmp eq i32 %445, 0
  %447 = icmp slt i32 %442, 10
  %448 = or i1 %446, %447
  br i1 %448, label %originalBBpart2134, label %originalBB126alteredBB

originalBBpart2134:                               ; preds = %originalBB126
  br i1 %440, label %449, label %468

449:                                              ; preds = %originalBBpart2134
  %450 = load i32, i32* @x.3
  %451 = load i32, i32* @y.4
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBB136, label %originalBB136alteredBB

originalBB136:                                    ; preds = %449, %originalBB136alteredBB
  %458 = load i32, i32* %collatzVar5
  %459 = sdiv i32 %458, 2
  store i32 %459, i32* %collatzVar5
  %460 = load i32, i32* @x.3
  %461 = load i32, i32* @y.4
  %462 = sub i32 %460, 1
  %463 = mul i32 %460, %462
  %464 = urem i32 %463, 2
  %465 = icmp eq i32 %464, 0
  %466 = icmp slt i32 %461, 10
  %467 = or i1 %465, %466
  br i1 %467, label %originalBBpart2141, label %originalBB136alteredBB

originalBBpart2141:                               ; preds = %originalBB136
  br label %488

468:                                              ; preds = %originalBBpart2134
  %469 = load i32, i32* @x.3
  %470 = load i32, i32* @y.4
  %471 = sub i32 %469, 1
  %472 = mul i32 %469, %471
  %473 = urem i32 %472, 2
  %474 = icmp eq i32 %473, 0
  %475 = icmp slt i32 %470, 10
  %476 = or i1 %474, %475
  br i1 %476, label %originalBB143, label %originalBB143alteredBB

originalBB143:                                    ; preds = %468, %originalBB143alteredBB
  %477 = load i32, i32* %collatzVar5
  %478 = mul i32 %477, 3
  %479 = add i32 %478, 1
  store i32 %479, i32* %collatzVar5
  %480 = load i32, i32* @x.3
  %481 = load i32, i32* @y.4
  %482 = sub i32 %480, 1
  %483 = mul i32 %480, %482
  %484 = urem i32 %483, 2
  %485 = icmp eq i32 %484, 0
  %486 = icmp slt i32 %481, 10
  %487 = or i1 %485, %486
  br i1 %487, label %originalBBpart2166, label %originalBB143alteredBB

originalBBpart2166:                               ; preds = %originalBB143
  br label %488

488:                                              ; preds = %originalBBpart2166, %originalBBpart2141
  %489 = load i32, i32* @x.3
  %490 = load i32, i32* @y.4
  %491 = sub i32 %489, 1
  %492 = mul i32 %489, %491
  %493 = urem i32 %492, 2
  %494 = icmp eq i32 %493, 0
  %495 = icmp slt i32 %490, 10
  %496 = or i1 %494, %495
  br i1 %496, label %originalBB168, label %originalBB168alteredBB

originalBB168:                                    ; preds = %488, %originalBB168alteredBB
  %497 = load i32, i32* %collatzVar5
  %498 = sub i32 %344, %497
  %499 = icmp sgt i32 %498, -2
  %500 = load i32, i32* @x.3
  %501 = load i32, i32* @y.4
  %502 = sub i32 %500, 1
  %503 = mul i32 %500, %502
  %504 = urem i32 %503, 2
  %505 = icmp eq i32 %504, 0
  %506 = icmp slt i32 %501, 10
  %507 = or i1 %505, %506
  br i1 %507, label %originalBBpart2182, label %originalBB168alteredBB

originalBBpart2182:                               ; preds = %originalBB168
  br i1 %499, label %508, label %410

508:                                              ; preds = %originalBBpart2182
  %509 = load i32, i32* @x.3
  %510 = load i32, i32* @y.4
  %511 = sub i32 %509, 1
  %512 = mul i32 %509, %511
  %513 = urem i32 %512, 2
  %514 = icmp eq i32 %513, 0
  %515 = icmp slt i32 %510, 10
  %516 = or i1 %514, %515
  br i1 %516, label %originalBB184, label %originalBB184alteredBB

originalBB184:                                    ; preds = %508, %originalBB184alteredBB
  %517 = load i32, i32* %collatzVar5
  %518 = add i32 %344, %517
  %519 = icmp slt i32 %518, 2
  %520 = load i32, i32* @x.3
  %521 = load i32, i32* @y.4
  %522 = sub i32 %520, 1
  %523 = mul i32 %520, %522
  %524 = urem i32 %523, 2
  %525 = icmp eq i32 %524, 0
  %526 = icmp slt i32 %521, 10
  %527 = or i1 %525, %526
  br i1 %527, label %originalBBpart2191, label %originalBB184alteredBB

originalBBpart2191:                               ; preds = %originalBB184
  br i1 %519, label %528, label %410

528:                                              ; preds = %originalBBpart2191
  %529 = load i32, i32* @x.3
  %530 = load i32, i32* @y.4
  %531 = sub i32 %529, 1
  %532 = mul i32 %529, %531
  %533 = urem i32 %532, 2
  %534 = icmp eq i32 %533, 0
  %535 = icmp slt i32 %530, 10
  %536 = or i1 %534, %535
  br i1 %536, label %originalBB193, label %originalBB193alteredBB

originalBB193:                                    ; preds = %528, %originalBB193alteredBB
  call void @usage(i32 0) #14, !dbg !295
  %537 = load i32, i32* @x.3
  %538 = load i32, i32* @y.4
  %539 = sub i32 %537, 1
  %540 = mul i32 %537, %539
  %541 = urem i32 %540, 2
  %542 = icmp eq i32 %541, 0
  %543 = icmp slt i32 %538, 10
  %544 = or i1 %542, %543
  br i1 %544, label %originalBBpart2195, label %originalBB193alteredBB

originalBBpart2195:                               ; preds = %originalBB193
  unreachable, !dbg !295

545:                                              ; preds = %originalBBpart2124
  %546 = load i32, i32* @x.3
  %547 = load i32, i32* @y.4
  %548 = sub i32 %546, 1
  %549 = mul i32 %546, %548
  %550 = urem i32 %549, 2
  %551 = icmp eq i32 %550, 0
  %552 = icmp slt i32 %547, 10
  %553 = or i1 %551, %552
  br i1 %553, label %originalBB197, label %originalBB197alteredBB

originalBB197:                                    ; preds = %545, %originalBB197alteredBB
  %554 = load i8**, i8*** %13, align 8, !dbg !296
  %555 = getelementptr inbounds i8*, i8** %554, i64 1, !dbg !296
  %556 = load i8*, i8** %555, align 8, !dbg !296
  %557 = call i32 @strcmp(i8* %556, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i64 0, i64 0)) #13, !dbg !296
  %558 = load i32, i32* @x.3
  %559 = load i32, i32* @y.4
  %560 = sub i32 %558, 1
  %561 = mul i32 %558, %560
  %562 = urem i32 %561, 2
  %563 = icmp eq i32 %562, 0
  %564 = icmp slt i32 %559, 10
  %565 = or i1 %563, %564
  br i1 %565, label %originalBBpart2199, label %originalBB197alteredBB

originalBBpart2199:                               ; preds = %originalBB197
  br label %566, !dbg !296

566:                                              ; preds = %originalBBpart2199
  %567 = load i32, i32* @x.3
  %568 = load i32, i32* @y.4
  %569 = sub i32 %567, 1
  %570 = mul i32 %567, %569
  %571 = urem i32 %570, 2
  %572 = icmp eq i32 %571, 0
  %573 = icmp slt i32 %568, 10
  %574 = or i1 %572, %573
  br i1 %574, label %originalBB201, label %originalBB201alteredBB

originalBB201:                                    ; preds = %566, %originalBB201alteredBB
  %collatzVar1 = alloca i32
  %575 = load i32, i32* @x.3
  %576 = load i32, i32* @y.4
  %577 = sub i32 %575, 1
  %578 = mul i32 %575, %577
  %579 = urem i32 %578, 2
  %580 = icmp eq i32 %579, 0
  %581 = icmp slt i32 %576, 10
  %582 = or i1 %580, %581
  br i1 %582, label %originalBBpart2203, label %originalBB201alteredBB

originalBBpart2203:                               ; preds = %originalBB201
  br label %583

583:                                              ; preds = %originalBBpart2203
  %584 = load i32, i32* @x.3
  %585 = load i32, i32* @y.4
  %586 = sub i32 %584, 1
  %587 = mul i32 %584, %586
  %588 = urem i32 %587, 2
  %589 = icmp eq i32 %588, 0
  %590 = icmp slt i32 %585, 10
  %591 = or i1 %589, %590
  br i1 %591, label %originalBB205, label %originalBB205alteredBB

originalBB205:                                    ; preds = %583, %originalBB205alteredBB
  %592 = load i32, i32* @inVal0
  %593 = icmp sgt i32 %592, 1
  %594 = load i32, i32* @x.3
  %595 = load i32, i32* @y.4
  %596 = sub i32 %594, 1
  %597 = mul i32 %594, %596
  %598 = urem i32 %597, 2
  %599 = icmp eq i32 %598, 0
  %600 = icmp slt i32 %595, 10
  %601 = or i1 %599, %600
  br i1 %601, label %originalBBpart2207, label %originalBB205alteredBB

originalBBpart2207:                               ; preds = %originalBB205
  br i1 %593, label %619, label %602

602:                                              ; preds = %originalBBpart2207
  %603 = load i32, i32* @x.3
  %604 = load i32, i32* @y.4
  %605 = sub i32 %603, 1
  %606 = mul i32 %603, %605
  %607 = urem i32 %606, 2
  %608 = icmp eq i32 %607, 0
  %609 = icmp slt i32 %604, 10
  %610 = or i1 %608, %609
  br i1 %610, label %originalBB209, label %originalBB209alteredBB

originalBB209:                                    ; preds = %602, %originalBB209alteredBB
  store i32 5, i32* %collatzVar1
  %611 = load i32, i32* @x.3
  %612 = load i32, i32* @y.4
  %613 = sub i32 %611, 1
  %614 = mul i32 %611, %613
  %615 = urem i32 %614, 2
  %616 = icmp eq i32 %615, 0
  %617 = icmp slt i32 %612, 10
  %618 = or i1 %616, %617
  br i1 %618, label %originalBBpart2211, label %originalBB209alteredBB

originalBBpart2211:                               ; preds = %originalBB209
  br label %619

619:                                              ; preds = %originalBBpart2211, %originalBBpart2207
  %620 = load i32, i32* @x.3
  %621 = load i32, i32* @y.4
  %622 = sub i32 %620, 1
  %623 = mul i32 %620, %622
  %624 = urem i32 %623, 2
  %625 = icmp eq i32 %624, 0
  %626 = icmp slt i32 %621, 10
  %627 = or i1 %625, %626
  br i1 %627, label %originalBB213, label %originalBB213alteredBB

originalBB213:                                    ; preds = %619, %originalBB213alteredBB
  %628 = load i8**, i8*** @inVal1
  %629 = getelementptr inbounds i8*, i8** %628, i64 1
  %630 = load i8*, i8** %629
  %controle2 = call i32 @controle(i8* %630, i32 0)
  store i32 %controle2, i32* %collatzVar1
  %631 = load i32, i32* @x.3
  %632 = load i32, i32* @y.4
  %633 = sub i32 %631, 1
  %634 = mul i32 %631, %633
  %635 = urem i32 %634, 2
  %636 = icmp eq i32 %635, 0
  %637 = icmp slt i32 %632, 10
  %638 = or i1 %636, %637
  br i1 %638, label %originalBBpart2215, label %originalBB213alteredBB

originalBBpart2215:                               ; preds = %originalBB213
  br label %639

639:                                              ; preds = %originalBBpart2264, %originalBBpart2255, %originalBBpart2215
  %640 = load i32, i32* @x.3
  %641 = load i32, i32* @y.4
  %642 = sub i32 %640, 1
  %643 = mul i32 %640, %642
  %644 = urem i32 %643, 2
  %645 = icmp eq i32 %644, 0
  %646 = icmp slt i32 %641, 10
  %647 = or i1 %645, %646
  br i1 %647, label %originalBB217, label %originalBB217alteredBB

originalBB217:                                    ; preds = %639, %originalBB217alteredBB
  %648 = load i32, i32* %collatzVar1
  %649 = icmp sgt i32 %648, 1
  %650 = load i32, i32* @x.3
  %651 = load i32, i32* @y.4
  %652 = sub i32 %650, 1
  %653 = mul i32 %650, %652
  %654 = urem i32 %653, 2
  %655 = icmp eq i32 %654, 0
  %656 = icmp slt i32 %651, 10
  %657 = or i1 %655, %656
  br i1 %657, label %originalBBpart2219, label %originalBB217alteredBB

originalBBpart2219:                               ; preds = %originalBB217
  br i1 %649, label %658, label %760

658:                                              ; preds = %originalBBpart2219
  %659 = load i32, i32* @x.3
  %660 = load i32, i32* @y.4
  %661 = sub i32 %659, 1
  %662 = mul i32 %659, %661
  %663 = urem i32 %662, 2
  %664 = icmp eq i32 %663, 0
  %665 = icmp slt i32 %660, 10
  %666 = or i1 %664, %665
  br i1 %666, label %originalBB221, label %originalBB221alteredBB

originalBB221:                                    ; preds = %658, %originalBB221alteredBB
  %667 = load i32, i32* %collatzVar1
  %668 = srem i32 %667, 2
  %669 = icmp eq i32 %668, 0
  %670 = load i32, i32* @x.3
  %671 = load i32, i32* @y.4
  %672 = sub i32 %670, 1
  %673 = mul i32 %670, %672
  %674 = urem i32 %673, 2
  %675 = icmp eq i32 %674, 0
  %676 = icmp slt i32 %671, 10
  %677 = or i1 %675, %676
  br i1 %677, label %originalBBpart2239, label %originalBB221alteredBB

originalBBpart2239:                               ; preds = %originalBB221
  br i1 %669, label %678, label %697

678:                                              ; preds = %originalBBpart2239
  %679 = load i32, i32* @x.3
  %680 = load i32, i32* @y.4
  %681 = sub i32 %679, 1
  %682 = mul i32 %679, %681
  %683 = urem i32 %682, 2
  %684 = icmp eq i32 %683, 0
  %685 = icmp slt i32 %680, 10
  %686 = or i1 %684, %685
  br i1 %686, label %originalBB241, label %originalBB241alteredBB

originalBB241:                                    ; preds = %678, %originalBB241alteredBB
  %687 = load i32, i32* %collatzVar1
  %688 = sdiv i32 %687, 2
  store i32 %688, i32* %collatzVar1
  %689 = load i32, i32* @x.3
  %690 = load i32, i32* @y.4
  %691 = sub i32 %689, 1
  %692 = mul i32 %689, %691
  %693 = urem i32 %692, 2
  %694 = icmp eq i32 %693, 0
  %695 = icmp slt i32 %690, 10
  %696 = or i1 %694, %695
  br i1 %696, label %originalBBpart2247, label %originalBB241alteredBB

originalBBpart2247:                               ; preds = %originalBB241
  br label %701

697:                                              ; preds = %originalBBpart2239
  %698 = load i32, i32* %collatzVar1
  %699 = mul i32 %698, 3
  %700 = add i32 %699, 1
  store i32 %700, i32* %collatzVar1
  br label %701

701:                                              ; preds = %697, %originalBBpart2247
  %702 = load i32, i32* @x.3
  %703 = load i32, i32* @y.4
  %704 = sub i32 %702, 1
  %705 = mul i32 %702, %704
  %706 = urem i32 %705, 2
  %707 = icmp eq i32 %706, 0
  %708 = icmp slt i32 %703, 10
  %709 = or i1 %707, %708
  br i1 %709, label %originalBB249, label %originalBB249alteredBB

originalBB249:                                    ; preds = %701, %originalBB249alteredBB
  %710 = load i32, i32* %collatzVar1
  %711 = sub i32 %557, %710
  %712 = icmp sgt i32 %711, -2
  %713 = load i32, i32* @x.3
  %714 = load i32, i32* @y.4
  %715 = sub i32 %713, 1
  %716 = mul i32 %713, %715
  %717 = urem i32 %716, 2
  %718 = icmp eq i32 %717, 0
  %719 = icmp slt i32 %714, 10
  %720 = or i1 %718, %719
  br i1 %720, label %originalBBpart2255, label %originalBB249alteredBB

originalBBpart2255:                               ; preds = %originalBB249
  br i1 %712, label %721, label %639

721:                                              ; preds = %originalBBpart2255
  %722 = load i32, i32* @x.3
  %723 = load i32, i32* @y.4
  %724 = sub i32 %722, 1
  %725 = mul i32 %722, %724
  %726 = urem i32 %725, 2
  %727 = icmp eq i32 %726, 0
  %728 = icmp slt i32 %723, 10
  %729 = or i1 %727, %728
  br i1 %729, label %originalBB257, label %originalBB257alteredBB

originalBB257:                                    ; preds = %721, %originalBB257alteredBB
  %730 = load i32, i32* %collatzVar1
  %731 = add i32 %557, %730
  %732 = icmp slt i32 %731, 2
  %733 = load i32, i32* @x.3
  %734 = load i32, i32* @y.4
  %735 = sub i32 %733, 1
  %736 = mul i32 %733, %735
  %737 = urem i32 %736, 2
  %738 = icmp eq i32 %737, 0
  %739 = icmp slt i32 %734, 10
  %740 = or i1 %738, %739
  br i1 %740, label %originalBBpart2264, label %originalBB257alteredBB

originalBBpart2264:                               ; preds = %originalBB257
  br i1 %732, label %741, label %639

741:                                              ; preds = %originalBBpart2264
  %742 = load i32, i32* @x.3
  %743 = load i32, i32* @y.4
  %744 = sub i32 %742, 1
  %745 = mul i32 %742, %744
  %746 = urem i32 %745, 2
  %747 = icmp eq i32 %746, 0
  %748 = icmp slt i32 %743, 10
  %749 = or i1 %747, %748
  br i1 %749, label %originalBB266, label %originalBB266alteredBB

originalBB266:                                    ; preds = %741, %originalBB266alteredBB
  %750 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !298
  %751 = load i8*, i8** @Version, align 8, !dbg !300
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %750, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19, i64 0, i64 0), i8* %751, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i8* null), !dbg !301
  store i32 0, i32* %11, align 4, !dbg !302
  %752 = load i32, i32* @x.3
  %753 = load i32, i32* @y.4
  %754 = sub i32 %752, 1
  %755 = mul i32 %752, %754
  %756 = urem i32 %755, 2
  %757 = icmp eq i32 %756, 0
  %758 = icmp slt i32 %753, 10
  %759 = or i1 %757, %758
  br i1 %759, label %originalBBpart2268, label %originalBB266alteredBB

originalBBpart2268:                               ; preds = %originalBB266
  br label %2337, !dbg !302

760:                                              ; preds = %originalBBpart2219
  %761 = load i32, i32* @x.3
  %762 = load i32, i32* @y.4
  %763 = sub i32 %761, 1
  %764 = mul i32 %761, %763
  %765 = urem i32 %764, 2
  %766 = icmp eq i32 %765, 0
  %767 = icmp slt i32 %762, 10
  %768 = or i1 %766, %767
  br i1 %768, label %originalBB270, label %originalBB270alteredBB

originalBB270:                                    ; preds = %760, %originalBB270alteredBB
  %769 = load i32, i32* @x.3
  %770 = load i32, i32* @y.4
  %771 = sub i32 %769, 1
  %772 = mul i32 %769, %771
  %773 = urem i32 %772, 2
  %774 = icmp eq i32 %773, 0
  %775 = icmp slt i32 %770, 10
  %776 = or i1 %774, %775
  br i1 %776, label %originalBBpart2272, label %originalBB270alteredBB

originalBBpart2272:                               ; preds = %originalBB270
  br label %777, !dbg !303

777:                                              ; preds = %originalBBpart2272, %originalBBpart240, %originalBBpart216
  %778 = load i32, i32* %12, align 4, !dbg !304
  %779 = add nsw i32 %778, -1, !dbg !304
  store i32 %779, i32* %12, align 4, !dbg !304
  %780 = load i8**, i8*** %13, align 8, !dbg !305
  %781 = getelementptr inbounds i8*, i8** %780, i32 1, !dbg !305
  store i8** %781, i8*** %13, align 8, !dbg !305
  %782 = load i8, i8* %16, align 1, !dbg !306
  %783 = trunc i8 %782 to i1, !dbg !306
  br i1 %783, label %784, label %1359, !dbg !308

784:                                              ; preds = %777
  br label %785, !dbg !309

785:                                              ; preds = %originalBBpart2426, %784
  %786 = load i32, i32* @x.3
  %787 = load i32, i32* @y.4
  %788 = sub i32 %786, 1
  %789 = mul i32 %786, %788
  %790 = urem i32 %789, 2
  %791 = icmp eq i32 %790, 0
  %792 = icmp slt i32 %787, 10
  %793 = or i1 %791, %792
  br i1 %793, label %originalBB274, label %originalBB274alteredBB

originalBB274:                                    ; preds = %785, %originalBB274alteredBB
  %794 = load i32, i32* %12, align 4, !dbg !310
  %795 = icmp sgt i32 %794, 0, !dbg !311
  %796 = load i32, i32* @x.3
  %797 = load i32, i32* @y.4
  %798 = sub i32 %796, 1
  %799 = mul i32 %796, %798
  %800 = urem i32 %799, 2
  %801 = icmp eq i32 %800, 0
  %802 = icmp slt i32 %797, 10
  %803 = or i1 %801, %802
  br i1 %803, label %originalBBpart2276, label %originalBB274alteredBB

originalBBpart2276:                               ; preds = %originalBB274
  br i1 %795, label %804, label %827, !dbg !312

804:                                              ; preds = %originalBBpart2276
  %805 = load i32, i32* @x.3
  %806 = load i32, i32* @y.4
  %807 = sub i32 %805, 1
  %808 = mul i32 %805, %807
  %809 = urem i32 %808, 2
  %810 = icmp eq i32 %809, 0
  %811 = icmp slt i32 %806, 10
  %812 = or i1 %810, %811
  br i1 %812, label %originalBB278, label %originalBB278alteredBB

originalBB278:                                    ; preds = %804, %originalBB278alteredBB
  %813 = load i8**, i8*** %13, align 8, !dbg !313
  %814 = getelementptr inbounds i8*, i8** %813, i64 0, !dbg !313
  %815 = load i8*, i8** %814, align 8, !dbg !313
  %816 = load i8, i8* %815, align 1, !dbg !314
  %817 = sext i8 %816 to i32, !dbg !314
  %818 = icmp eq i32 %817, 45, !dbg !315
  %819 = load i32, i32* @x.3
  %820 = load i32, i32* @y.4
  %821 = sub i32 %819, 1
  %822 = mul i32 %819, %821
  %823 = urem i32 %822, 2
  %824 = icmp eq i32 %823, 0
  %825 = icmp slt i32 %820, 10
  %826 = or i1 %824, %825
  br i1 %826, label %originalBBpart2280, label %originalBB278alteredBB

originalBBpart2280:                               ; preds = %originalBB278
  br label %827

827:                                              ; preds = %originalBBpart2280, %originalBBpart2276
  %828 = phi i1 [ false, %originalBBpart2276 ], [ %818, %originalBBpart2280 ], !dbg !316
  %829 = load i32, i32* @x.3
  %830 = load i32, i32* @y.4
  %831 = sub i32 %829, 1
  %832 = mul i32 %829, %831
  %833 = urem i32 %832, 2
  %834 = icmp eq i32 %833, 0
  %835 = icmp slt i32 %830, 10
  %836 = or i1 %834, %835
  br i1 %836, label %originalBB282, label %originalBB282alteredBB

originalBB282:                                    ; preds = %827, %originalBB282alteredBB
  %837 = load i32, i32* @x.3
  %838 = load i32, i32* @y.4
  %839 = sub i32 %837, 1
  %840 = mul i32 %837, %839
  %841 = urem i32 %840, 2
  %842 = icmp eq i32 %841, 0
  %843 = icmp slt i32 %838, 10
  %844 = or i1 %842, %843
  br i1 %844, label %originalBBpart2284, label %originalBB282alteredBB

originalBBpart2284:                               ; preds = %originalBB282
  br i1 %828, label %845, label %1342, !dbg !309

845:                                              ; preds = %originalBBpart2284
  call void @llvm.dbg.declare(metadata i8** %18, metadata !317, metadata !DIExpression()), !dbg !319
  %846 = load i32, i32* @x.3
  %847 = load i32, i32* @y.4
  %848 = sub i32 %846, 1
  %849 = mul i32 %846, %848
  %850 = urem i32 %849, 2
  %851 = icmp eq i32 %850, 0
  %852 = icmp slt i32 %847, 10
  %853 = or i1 %851, %852
  br i1 %853, label %originalBB286, label %originalBB286alteredBB

originalBB286:                                    ; preds = %845, %originalBB286alteredBB
  %854 = load i8**, i8*** %13, align 8, !dbg !320
  %855 = getelementptr inbounds i8*, i8** %854, i64 0, !dbg !320
  %856 = load i8*, i8** %855, align 8, !dbg !320
  %857 = getelementptr inbounds i8, i8* %856, i64 1, !dbg !321
  store i8* %857, i8** %18, align 8, !dbg !319
  call void @llvm.dbg.declare(metadata i64* %19, metadata !322, metadata !DIExpression()), !dbg !323
  store i64 0, i64* %19, align 8, !dbg !324
  %858 = load i32, i32* @x.3
  %859 = load i32, i32* @y.4
  %860 = sub i32 %858, 1
  %861 = mul i32 %858, %860
  %862 = urem i32 %861, 2
  %863 = icmp eq i32 %862, 0
  %864 = icmp slt i32 %859, 10
  %865 = or i1 %863, %864
  br i1 %865, label %originalBBpart2288, label %originalBB286alteredBB

originalBBpart2288:                               ; preds = %originalBB286
  br label %866, !dbg !326

866:                                              ; preds = %originalBBpart2324, %originalBBpart2288
  %867 = load i32, i32* @x.3
  %868 = load i32, i32* @y.4
  %869 = sub i32 %867, 1
  %870 = mul i32 %867, %869
  %871 = urem i32 %870, 2
  %872 = icmp eq i32 %871, 0
  %873 = icmp slt i32 %868, 10
  %874 = or i1 %872, %873
  br i1 %874, label %originalBB290, label %originalBB290alteredBB

originalBB290:                                    ; preds = %866, %originalBB290alteredBB
  %875 = load i8*, i8** %18, align 8, !dbg !327
  %876 = load i64, i64* %19, align 8, !dbg !329
  %877 = getelementptr inbounds i8, i8* %875, i64 %876, !dbg !327
  %878 = load i8, i8* %877, align 1, !dbg !327
  %879 = icmp ne i8 %878, 0, !dbg !330
  %880 = load i32, i32* @x.3
  %881 = load i32, i32* @y.4
  %882 = sub i32 %880, 1
  %883 = mul i32 %880, %882
  %884 = urem i32 %883, 2
  %885 = icmp eq i32 %884, 0
  %886 = icmp slt i32 %881, 10
  %887 = or i1 %885, %886
  br i1 %887, label %originalBBpart2292, label %originalBB290alteredBB

originalBBpart2292:                               ; preds = %originalBB290
  br i1 %879, label %888, label %980, !dbg !330

888:                                              ; preds = %originalBBpart2292
  %889 = load i32, i32* @x.3
  %890 = load i32, i32* @y.4
  %891 = sub i32 %889, 1
  %892 = mul i32 %889, %891
  %893 = urem i32 %892, 2
  %894 = icmp eq i32 %893, 0
  %895 = icmp slt i32 %890, 10
  %896 = or i1 %894, %895
  br i1 %896, label %originalBB294, label %originalBB294alteredBB

originalBB294:                                    ; preds = %888, %originalBB294alteredBB
  %897 = load i8*, i8** %18, align 8, !dbg !331
  %898 = load i64, i64* %19, align 8, !dbg !332
  %899 = getelementptr inbounds i8, i8* %897, i64 %898, !dbg !331
  %900 = load i8, i8* %899, align 1, !dbg !331
  %901 = sext i8 %900 to i32, !dbg !331
  %902 = load i32, i32* @x.3
  %903 = load i32, i32* @y.4
  %904 = sub i32 %902, 1
  %905 = mul i32 %902, %904
  %906 = urem i32 %905, 2
  %907 = icmp eq i32 %906, 0
  %908 = icmp slt i32 %903, 10
  %909 = or i1 %907, %908
  br i1 %909, label %originalBBpart2296, label %originalBB294alteredBB

originalBBpart2296:                               ; preds = %originalBB294
  switch i32 %901, label %927 [
    i32 101, label %910
    i32 69, label %910
    i32 110, label %910
  ], !dbg !333

910:                                              ; preds = %originalBBpart2296, %originalBBpart2296, %originalBBpart2296
  %911 = load i32, i32* @x.3
  %912 = load i32, i32* @y.4
  %913 = sub i32 %911, 1
  %914 = mul i32 %911, %913
  %915 = urem i32 %914, 2
  %916 = icmp eq i32 %915, 0
  %917 = icmp slt i32 %912, 10
  %918 = or i1 %916, %917
  br i1 %918, label %originalBB298, label %originalBB298alteredBB

originalBB298:                                    ; preds = %910, %originalBB298alteredBB
  %919 = load i32, i32* @x.3
  %920 = load i32, i32* @y.4
  %921 = sub i32 %919, 1
  %922 = mul i32 %919, %921
  %923 = urem i32 %922, 2
  %924 = icmp eq i32 %923, 0
  %925 = icmp slt i32 %920, 10
  %926 = or i1 %924, %925
  br i1 %926, label %originalBBpart2300, label %originalBB298alteredBB

originalBBpart2300:                               ; preds = %originalBB298
  br label %944, !dbg !334

927:                                              ; preds = %originalBBpart2296
  %928 = load i32, i32* @x.3
  %929 = load i32, i32* @y.4
  %930 = sub i32 %928, 1
  %931 = mul i32 %928, %930
  %932 = urem i32 %931, 2
  %933 = icmp eq i32 %932, 0
  %934 = icmp slt i32 %929, 10
  %935 = or i1 %933, %934
  br i1 %935, label %originalBB302, label %originalBB302alteredBB

originalBB302:                                    ; preds = %927, %originalBB302alteredBB
  %936 = load i32, i32* @x.3
  %937 = load i32, i32* @y.4
  %938 = sub i32 %936, 1
  %939 = mul i32 %936, %938
  %940 = urem i32 %939, 2
  %941 = icmp eq i32 %940, 0
  %942 = icmp slt i32 %937, 10
  %943 = or i1 %941, %942
  br i1 %943, label %originalBBpart2304, label %originalBB302alteredBB

originalBBpart2304:                               ; preds = %originalBB302
  br label %1360, !dbg !336

944:                                              ; preds = %originalBBpart2300
  %945 = load i32, i32* @x.3
  %946 = load i32, i32* @y.4
  %947 = sub i32 %945, 1
  %948 = mul i32 %945, %947
  %949 = urem i32 %948, 2
  %950 = icmp eq i32 %949, 0
  %951 = icmp slt i32 %946, 10
  %952 = or i1 %950, %951
  br i1 %952, label %originalBB306, label %originalBB306alteredBB

originalBB306:                                    ; preds = %944, %originalBB306alteredBB
  %953 = load i32, i32* @x.3
  %954 = load i32, i32* @y.4
  %955 = sub i32 %953, 1
  %956 = mul i32 %953, %955
  %957 = urem i32 %956, 2
  %958 = icmp eq i32 %957, 0
  %959 = icmp slt i32 %954, 10
  %960 = or i1 %958, %959
  br i1 %960, label %originalBBpart2308, label %originalBB306alteredBB

originalBBpart2308:                               ; preds = %originalBB306
  br label %961, !dbg !337

961:                                              ; preds = %originalBBpart2308
  %962 = load i32, i32* @x.3
  %963 = load i32, i32* @y.4
  %964 = sub i32 %962, 1
  %965 = mul i32 %962, %964
  %966 = urem i32 %965, 2
  %967 = icmp eq i32 %966, 0
  %968 = icmp slt i32 %963, 10
  %969 = or i1 %967, %968
  br i1 %969, label %originalBB310, label %originalBB310alteredBB

originalBB310:                                    ; preds = %961, %originalBB310alteredBB
  %970 = load i64, i64* %19, align 8, !dbg !338
  %971 = add i64 %970, 1, !dbg !338
  store i64 %971, i64* %19, align 8, !dbg !338
  %972 = load i32, i32* @x.3
  %973 = load i32, i32* @y.4
  %974 = sub i32 %972, 1
  %975 = mul i32 %972, %974
  %976 = urem i32 %975, 2
  %977 = icmp eq i32 %976, 0
  %978 = icmp slt i32 %973, 10
  %979 = or i1 %977, %978
  br i1 %979, label %originalBBpart2324, label %originalBB310alteredBB

originalBBpart2324:                               ; preds = %originalBB310
  br label %866, !dbg !339, !llvm.loop !340

980:                                              ; preds = %originalBBpart2292
  %981 = load i32, i32* @x.3
  %982 = load i32, i32* @y.4
  %983 = sub i32 %981, 1
  %984 = mul i32 %981, %983
  %985 = urem i32 %984, 2
  %986 = icmp eq i32 %985, 0
  %987 = icmp slt i32 %982, 10
  %988 = or i1 %986, %987
  br i1 %988, label %originalBB326, label %originalBB326alteredBB

originalBB326:                                    ; preds = %980, %originalBB326alteredBB
  %989 = load i64, i64* %19, align 8, !dbg !342
  %990 = load i32, i32* @x.3
  %991 = load i32, i32* @y.4
  %992 = sub i32 %990, 1
  %993 = mul i32 %990, %992
  %994 = urem i32 %993, 2
  %995 = icmp eq i32 %994, 0
  %996 = icmp slt i32 %991, 10
  %997 = or i1 %995, %996
  br i1 %997, label %originalBBpart2328, label %originalBB326alteredBB

originalBBpart2328:                               ; preds = %originalBB326
  br label %998, !dbg !344

998:                                              ; preds = %originalBBpart2328
  %999 = load i32, i32* @x.3
  %1000 = load i32, i32* @y.4
  %1001 = sub i32 %999, 1
  %1002 = mul i32 %999, %1001
  %1003 = urem i32 %1002, 2
  %1004 = icmp eq i32 %1003, 0
  %1005 = icmp slt i32 %1000, 10
  %1006 = or i1 %1004, %1005
  br i1 %1006, label %originalBB330, label %originalBB330alteredBB

originalBB330:                                    ; preds = %998, %originalBB330alteredBB
  %collatzVar3 = alloca i32
  %1007 = load i32, i32* @x.3
  %1008 = load i32, i32* @y.4
  %1009 = sub i32 %1007, 1
  %1010 = mul i32 %1007, %1009
  %1011 = urem i32 %1010, 2
  %1012 = icmp eq i32 %1011, 0
  %1013 = icmp slt i32 %1008, 10
  %1014 = or i1 %1012, %1013
  br i1 %1014, label %originalBBpart2332, label %originalBB330alteredBB

originalBBpart2332:                               ; preds = %originalBB330
  br label %1015

1015:                                             ; preds = %originalBBpart2332
  %1016 = load i32, i32* @x.3
  %1017 = load i32, i32* @y.4
  %1018 = sub i32 %1016, 1
  %1019 = mul i32 %1016, %1018
  %1020 = urem i32 %1019, 2
  %1021 = icmp eq i32 %1020, 0
  %1022 = icmp slt i32 %1017, 10
  %1023 = or i1 %1021, %1022
  br i1 %1023, label %originalBB334, label %originalBB334alteredBB

originalBB334:                                    ; preds = %1015, %originalBB334alteredBB
  %1024 = load i32, i32* @inVal0
  %1025 = icmp sgt i32 %1024, 1
  %1026 = load i32, i32* @x.3
  %1027 = load i32, i32* @y.4
  %1028 = sub i32 %1026, 1
  %1029 = mul i32 %1026, %1028
  %1030 = urem i32 %1029, 2
  %1031 = icmp eq i32 %1030, 0
  %1032 = icmp slt i32 %1027, 10
  %1033 = or i1 %1031, %1032
  br i1 %1033, label %originalBBpart2336, label %originalBB334alteredBB

originalBBpart2336:                               ; preds = %originalBB334
  br i1 %1025, label %1051, label %1034

1034:                                             ; preds = %originalBBpart2336
  %1035 = load i32, i32* @x.3
  %1036 = load i32, i32* @y.4
  %1037 = sub i32 %1035, 1
  %1038 = mul i32 %1035, %1037
  %1039 = urem i32 %1038, 2
  %1040 = icmp eq i32 %1039, 0
  %1041 = icmp slt i32 %1036, 10
  %1042 = or i1 %1040, %1041
  br i1 %1042, label %originalBB338, label %originalBB338alteredBB

originalBB338:                                    ; preds = %1034, %originalBB338alteredBB
  store i32 43, i32* %collatzVar3
  %1043 = load i32, i32* @x.3
  %1044 = load i32, i32* @y.4
  %1045 = sub i32 %1043, 1
  %1046 = mul i32 %1043, %1045
  %1047 = urem i32 %1046, 2
  %1048 = icmp eq i32 %1047, 0
  %1049 = icmp slt i32 %1044, 10
  %1050 = or i1 %1048, %1049
  br i1 %1050, label %originalBBpart2340, label %originalBB338alteredBB

originalBBpart2340:                               ; preds = %originalBB338
  br label %1051

1051:                                             ; preds = %originalBBpart2340, %originalBBpart2336
  %1052 = load i32, i32* @x.3
  %1053 = load i32, i32* @y.4
  %1054 = sub i32 %1052, 1
  %1055 = mul i32 %1052, %1054
  %1056 = urem i32 %1055, 2
  %1057 = icmp eq i32 %1056, 0
  %1058 = icmp slt i32 %1053, 10
  %1059 = or i1 %1057, %1058
  br i1 %1059, label %originalBB342, label %originalBB342alteredBB

originalBB342:                                    ; preds = %1051, %originalBB342alteredBB
  %1060 = load i8**, i8*** @inVal1
  %1061 = getelementptr inbounds i8*, i8** %1060, i64 1
  %1062 = load i8*, i8** %1061
  %1063 = trunc i64 0 to i32
  %controle4 = call i32 @controle(i8* %1062, i32 %1063)
  store i32 %controle4, i32* %collatzVar3
  %1064 = load i32, i32* @x.3
  %1065 = load i32, i32* @y.4
  %1066 = sub i32 %1064, 1
  %1067 = mul i32 %1064, %1066
  %1068 = urem i32 %1067, 2
  %1069 = icmp eq i32 %1068, 0
  %1070 = icmp slt i32 %1065, 10
  %1071 = or i1 %1069, %1070
  br i1 %1071, label %originalBBpart2344, label %originalBB342alteredBB

originalBBpart2344:                               ; preds = %originalBB342
  br label %1072

1072:                                             ; preds = %originalBBpart2388, %originalBBpart2380, %originalBBpart2344
  %1073 = load i32, i32* @x.3
  %1074 = load i32, i32* @y.4
  %1075 = sub i32 %1073, 1
  %1076 = mul i32 %1073, %1075
  %1077 = urem i32 %1076, 2
  %1078 = icmp eq i32 %1077, 0
  %1079 = icmp slt i32 %1074, 10
  %1080 = or i1 %1078, %1079
  br i1 %1080, label %originalBB346, label %originalBB346alteredBB

originalBB346:                                    ; preds = %1072, %originalBB346alteredBB
  %1081 = load i32, i32* %collatzVar3
  %1082 = icmp sgt i32 %1081, 1
  %1083 = load i32, i32* @x.3
  %1084 = load i32, i32* @y.4
  %1085 = sub i32 %1083, 1
  %1086 = mul i32 %1083, %1085
  %1087 = urem i32 %1086, 2
  %1088 = icmp eq i32 %1087, 0
  %1089 = icmp slt i32 %1084, 10
  %1090 = or i1 %1088, %1089
  br i1 %1090, label %originalBBpart2348, label %originalBB346alteredBB

originalBBpart2348:                               ; preds = %originalBB346
  br i1 %1082, label %1091, label %1195

1091:                                             ; preds = %originalBBpart2348
  %1092 = load i32, i32* @x.3
  %1093 = load i32, i32* @y.4
  %1094 = sub i32 %1092, 1
  %1095 = mul i32 %1092, %1094
  %1096 = urem i32 %1095, 2
  %1097 = icmp eq i32 %1096, 0
  %1098 = icmp slt i32 %1093, 10
  %1099 = or i1 %1097, %1098
  br i1 %1099, label %originalBB350, label %originalBB350alteredBB

originalBB350:                                    ; preds = %1091, %originalBB350alteredBB
  %1100 = load i32, i32* %collatzVar3
  %1101 = srem i32 %1100, 2
  %1102 = icmp eq i32 %1101, 0
  %1103 = load i32, i32* @x.3
  %1104 = load i32, i32* @y.4
  %1105 = sub i32 %1103, 1
  %1106 = mul i32 %1103, %1105
  %1107 = urem i32 %1106, 2
  %1108 = icmp eq i32 %1107, 0
  %1109 = icmp slt i32 %1104, 10
  %1110 = or i1 %1108, %1109
  br i1 %1110, label %originalBBpart2356, label %originalBB350alteredBB

originalBBpart2356:                               ; preds = %originalBB350
  br i1 %1102, label %1111, label %1130

1111:                                             ; preds = %originalBBpart2356
  %1112 = load i32, i32* @x.3
  %1113 = load i32, i32* @y.4
  %1114 = sub i32 %1112, 1
  %1115 = mul i32 %1112, %1114
  %1116 = urem i32 %1115, 2
  %1117 = icmp eq i32 %1116, 0
  %1118 = icmp slt i32 %1113, 10
  %1119 = or i1 %1117, %1118
  br i1 %1119, label %originalBB358, label %originalBB358alteredBB

originalBB358:                                    ; preds = %1111, %originalBB358alteredBB
  %1120 = load i32, i32* %collatzVar3
  %1121 = sdiv i32 %1120, 2
  store i32 %1121, i32* %collatzVar3
  %1122 = load i32, i32* @x.3
  %1123 = load i32, i32* @y.4
  %1124 = sub i32 %1122, 1
  %1125 = mul i32 %1122, %1124
  %1126 = urem i32 %1125, 2
  %1127 = icmp eq i32 %1126, 0
  %1128 = icmp slt i32 %1123, 10
  %1129 = or i1 %1127, %1128
  br i1 %1129, label %originalBBpart2364, label %originalBB358alteredBB

originalBBpart2364:                               ; preds = %originalBB358
  br label %1134

1130:                                             ; preds = %originalBBpart2356
  %1131 = load i32, i32* %collatzVar3
  %1132 = mul i32 %1131, 3
  %1133 = add i32 %1132, 1
  store i32 %1133, i32* %collatzVar3
  br label %1134

1134:                                             ; preds = %1130, %originalBBpart2364
  %1135 = load i32, i32* @x.3
  %1136 = load i32, i32* @y.4
  %1137 = sub i32 %1135, 1
  %1138 = mul i32 %1135, %1137
  %1139 = urem i32 %1138, 2
  %1140 = icmp eq i32 %1139, 0
  %1141 = icmp slt i32 %1136, 10
  %1142 = or i1 %1140, %1141
  br i1 %1142, label %originalBB366, label %originalBB366alteredBB

originalBB366:                                    ; preds = %1134, %originalBB366alteredBB
  %1143 = load i32, i32* %collatzVar3
  %1144 = sext i32 %1143 to i64
  %1145 = sext i32 -2 to i64
  %1146 = sub i64 %989, %1144
  %1147 = icmp sgt i64 %1146, %1145
  %1148 = load i32, i32* @x.3
  %1149 = load i32, i32* @y.4
  %1150 = sub i32 %1148, 1
  %1151 = mul i32 %1148, %1150
  %1152 = urem i32 %1151, 2
  %1153 = icmp eq i32 %1152, 0
  %1154 = icmp slt i32 %1149, 10
  %1155 = or i1 %1153, %1154
  br i1 %1155, label %originalBBpart2380, label %originalBB366alteredBB

originalBBpart2380:                               ; preds = %originalBB366
  br i1 %1147, label %1156, label %1072

1156:                                             ; preds = %originalBBpart2380
  %1157 = load i32, i32* @x.3
  %1158 = load i32, i32* @y.4
  %1159 = sub i32 %1157, 1
  %1160 = mul i32 %1157, %1159
  %1161 = urem i32 %1160, 2
  %1162 = icmp eq i32 %1161, 0
  %1163 = icmp slt i32 %1158, 10
  %1164 = or i1 %1162, %1163
  br i1 %1164, label %originalBB382, label %originalBB382alteredBB

originalBB382:                                    ; preds = %1156, %originalBB382alteredBB
  %1165 = load i32, i32* %collatzVar3
  %1166 = sext i32 %1165 to i64
  %1167 = sext i32 2 to i64
  %1168 = add i64 %989, %1166
  %1169 = icmp slt i64 %1168, %1167
  %1170 = load i32, i32* @x.3
  %1171 = load i32, i32* @y.4
  %1172 = sub i32 %1170, 1
  %1173 = mul i32 %1170, %1172
  %1174 = urem i32 %1173, 2
  %1175 = icmp eq i32 %1174, 0
  %1176 = icmp slt i32 %1171, 10
  %1177 = or i1 %1175, %1176
  br i1 %1177, label %originalBBpart2388, label %originalBB382alteredBB

originalBBpart2388:                               ; preds = %originalBB382
  br i1 %1169, label %1178, label %1072

1178:                                             ; preds = %originalBBpart2388
  %1179 = load i32, i32* @x.3
  %1180 = load i32, i32* @y.4
  %1181 = sub i32 %1179, 1
  %1182 = mul i32 %1179, %1181
  %1183 = urem i32 %1182, 2
  %1184 = icmp eq i32 %1183, 0
  %1185 = icmp slt i32 %1180, 10
  %1186 = or i1 %1184, %1185
  br i1 %1186, label %originalBB390, label %originalBB390alteredBB

originalBB390:                                    ; preds = %1178, %originalBB390alteredBB
  %1187 = load i32, i32* @x.3
  %1188 = load i32, i32* @y.4
  %1189 = sub i32 %1187, 1
  %1190 = mul i32 %1187, %1189
  %1191 = urem i32 %1190, 2
  %1192 = icmp eq i32 %1191, 0
  %1193 = icmp slt i32 %1188, 10
  %1194 = or i1 %1192, %1193
  br i1 %1194, label %originalBBpart2392, label %originalBB390alteredBB

originalBBpart2392:                               ; preds = %originalBB390
  br label %1360, !dbg !345

1195:                                             ; preds = %originalBBpart2348
  %1196 = load i32, i32* @x.3
  %1197 = load i32, i32* @y.4
  %1198 = sub i32 %1196, 1
  %1199 = mul i32 %1196, %1198
  %1200 = urem i32 %1199, 2
  %1201 = icmp eq i32 %1200, 0
  %1202 = icmp slt i32 %1197, 10
  %1203 = or i1 %1201, %1202
  br i1 %1203, label %originalBB394, label %originalBB394alteredBB

originalBB394:                                    ; preds = %1195, %originalBB394alteredBB
  %1204 = load i32, i32* @x.3
  %1205 = load i32, i32* @y.4
  %1206 = sub i32 %1204, 1
  %1207 = mul i32 %1204, %1206
  %1208 = urem i32 %1207, 2
  %1209 = icmp eq i32 %1208, 0
  %1210 = icmp slt i32 %1205, 10
  %1211 = or i1 %1209, %1210
  br i1 %1211, label %originalBBpart2396, label %originalBB394alteredBB

originalBBpart2396:                               ; preds = %originalBB394
  br label %1212, !dbg !346

1212:                                             ; preds = %originalBBpart2420, %originalBBpart2396
  %1213 = load i32, i32* @x.3
  %1214 = load i32, i32* @y.4
  %1215 = sub i32 %1213, 1
  %1216 = mul i32 %1213, %1215
  %1217 = urem i32 %1216, 2
  %1218 = icmp eq i32 %1217, 0
  %1219 = icmp slt i32 %1214, 10
  %1220 = or i1 %1218, %1219
  br i1 %1220, label %originalBB398, label %originalBB398alteredBB

originalBB398:                                    ; preds = %1212, %originalBB398alteredBB
  %1221 = load i8*, i8** %18, align 8, !dbg !347
  %1222 = load i8, i8* %1221, align 1, !dbg !348
  %1223 = icmp ne i8 %1222, 0, !dbg !346
  %1224 = load i32, i32* @x.3
  %1225 = load i32, i32* @y.4
  %1226 = sub i32 %1224, 1
  %1227 = mul i32 %1224, %1226
  %1228 = urem i32 %1227, 2
  %1229 = icmp eq i32 %1228, 0
  %1230 = icmp slt i32 %1225, 10
  %1231 = or i1 %1229, %1230
  br i1 %1231, label %originalBBpart2400, label %originalBB398alteredBB

originalBBpart2400:                               ; preds = %originalBB398
  br i1 %1223, label %1232, label %1321, !dbg !346

1232:                                             ; preds = %originalBBpart2400
  %1233 = load i32, i32* @x.3
  %1234 = load i32, i32* @y.4
  %1235 = sub i32 %1233, 1
  %1236 = mul i32 %1233, %1235
  %1237 = urem i32 %1236, 2
  %1238 = icmp eq i32 %1237, 0
  %1239 = icmp slt i32 %1234, 10
  %1240 = or i1 %1238, %1239
  br i1 %1240, label %originalBB402, label %originalBB402alteredBB

originalBB402:                                    ; preds = %1232, %originalBB402alteredBB
  %1241 = load i8*, i8** %18, align 8, !dbg !349
  %1242 = getelementptr inbounds i8, i8* %1241, i32 1, !dbg !349
  store i8* %1242, i8** %18, align 8, !dbg !349
  %1243 = load i8, i8* %1241, align 1, !dbg !350
  %1244 = sext i8 %1243 to i32, !dbg !350
  %1245 = load i32, i32* @x.3
  %1246 = load i32, i32* @y.4
  %1247 = sub i32 %1245, 1
  %1248 = mul i32 %1245, %1247
  %1249 = urem i32 %1248, 2
  %1250 = icmp eq i32 %1249, 0
  %1251 = icmp slt i32 %1246, 10
  %1252 = or i1 %1250, %1251
  br i1 %1252, label %originalBBpart2404, label %originalBB402alteredBB

originalBBpart2404:                               ; preds = %originalBB402
  switch i32 %1244, label %1304 [
    i32 101, label %1253
    i32 69, label %1270
    i32 110, label %1287
  ], !dbg !351

1253:                                             ; preds = %originalBBpart2404
  %1254 = load i32, i32* @x.3
  %1255 = load i32, i32* @y.4
  %1256 = sub i32 %1254, 1
  %1257 = mul i32 %1254, %1256
  %1258 = urem i32 %1257, 2
  %1259 = icmp eq i32 %1258, 0
  %1260 = icmp slt i32 %1255, 10
  %1261 = or i1 %1259, %1260
  br i1 %1261, label %originalBB406, label %originalBB406alteredBB

originalBB406:                                    ; preds = %1253, %originalBB406alteredBB
  store i8 1, i8* %17, align 1, !dbg !352
  %1262 = load i32, i32* @x.3
  %1263 = load i32, i32* @y.4
  %1264 = sub i32 %1262, 1
  %1265 = mul i32 %1262, %1264
  %1266 = urem i32 %1265, 2
  %1267 = icmp eq i32 %1266, 0
  %1268 = icmp slt i32 %1263, 10
  %1269 = or i1 %1267, %1268
  br i1 %1269, label %originalBBpart2408, label %originalBB406alteredBB

originalBBpart2408:                               ; preds = %originalBB406
  br label %1304, !dbg !354

1270:                                             ; preds = %originalBBpart2404
  %1271 = load i32, i32* @x.3
  %1272 = load i32, i32* @y.4
  %1273 = sub i32 %1271, 1
  %1274 = mul i32 %1271, %1273
  %1275 = urem i32 %1274, 2
  %1276 = icmp eq i32 %1275, 0
  %1277 = icmp slt i32 %1272, 10
  %1278 = or i1 %1276, %1277
  br i1 %1278, label %originalBB410, label %originalBB410alteredBB

originalBB410:                                    ; preds = %1270, %originalBB410alteredBB
  store i8 0, i8* %17, align 1, !dbg !355
  %1279 = load i32, i32* @x.3
  %1280 = load i32, i32* @y.4
  %1281 = sub i32 %1279, 1
  %1282 = mul i32 %1279, %1281
  %1283 = urem i32 %1282, 2
  %1284 = icmp eq i32 %1283, 0
  %1285 = icmp slt i32 %1280, 10
  %1286 = or i1 %1284, %1285
  br i1 %1286, label %originalBBpart2412, label %originalBB410alteredBB

originalBBpart2412:                               ; preds = %originalBB410
  br label %1304, !dbg !356

1287:                                             ; preds = %originalBBpart2404
  %1288 = load i32, i32* @x.3
  %1289 = load i32, i32* @y.4
  %1290 = sub i32 %1288, 1
  %1291 = mul i32 %1288, %1290
  %1292 = urem i32 %1291, 2
  %1293 = icmp eq i32 %1292, 0
  %1294 = icmp slt i32 %1289, 10
  %1295 = or i1 %1293, %1294
  br i1 %1295, label %originalBB414, label %originalBB414alteredBB

originalBB414:                                    ; preds = %1287, %originalBB414alteredBB
  store i8 0, i8* %14, align 1, !dbg !357
  %1296 = load i32, i32* @x.3
  %1297 = load i32, i32* @y.4
  %1298 = sub i32 %1296, 1
  %1299 = mul i32 %1296, %1298
  %1300 = urem i32 %1299, 2
  %1301 = icmp eq i32 %1300, 0
  %1302 = icmp slt i32 %1297, 10
  %1303 = or i1 %1301, %1302
  br i1 %1303, label %originalBBpart2416, label %originalBB414alteredBB

originalBBpart2416:                               ; preds = %originalBB414
  br label %1304, !dbg !358

1304:                                             ; preds = %originalBBpart2416, %originalBBpart2412, %originalBBpart2408, %originalBBpart2404
  %1305 = load i32, i32* @x.3
  %1306 = load i32, i32* @y.4
  %1307 = sub i32 %1305, 1
  %1308 = mul i32 %1305, %1307
  %1309 = urem i32 %1308, 2
  %1310 = icmp eq i32 %1309, 0
  %1311 = icmp slt i32 %1306, 10
  %1312 = or i1 %1310, %1311
  br i1 %1312, label %originalBB418, label %originalBB418alteredBB

originalBB418:                                    ; preds = %1304, %originalBB418alteredBB
  %1313 = load i32, i32* @x.3
  %1314 = load i32, i32* @y.4
  %1315 = sub i32 %1313, 1
  %1316 = mul i32 %1313, %1315
  %1317 = urem i32 %1316, 2
  %1318 = icmp eq i32 %1317, 0
  %1319 = icmp slt i32 %1314, 10
  %1320 = or i1 %1318, %1319
  br i1 %1320, label %originalBBpart2420, label %originalBB418alteredBB

originalBBpart2420:                               ; preds = %originalBB418
  br label %1212, !dbg !346, !llvm.loop !359

1321:                                             ; preds = %originalBBpart2400
  %1322 = load i32, i32* @x.3
  %1323 = load i32, i32* @y.4
  %1324 = sub i32 %1322, 1
  %1325 = mul i32 %1322, %1324
  %1326 = urem i32 %1325, 2
  %1327 = icmp eq i32 %1326, 0
  %1328 = icmp slt i32 %1323, 10
  %1329 = or i1 %1327, %1328
  br i1 %1329, label %originalBB422, label %originalBB422alteredBB

originalBB422:                                    ; preds = %1321, %originalBB422alteredBB
  %1330 = load i32, i32* %12, align 4, !dbg !361
  %1331 = add nsw i32 %1330, -1, !dbg !361
  store i32 %1331, i32* %12, align 4, !dbg !361
  %1332 = load i8**, i8*** %13, align 8, !dbg !362
  %1333 = getelementptr inbounds i8*, i8** %1332, i32 1, !dbg !362
  store i8** %1333, i8*** %13, align 8, !dbg !362
  %1334 = load i32, i32* @x.3
  %1335 = load i32, i32* @y.4
  %1336 = sub i32 %1334, 1
  %1337 = mul i32 %1334, %1336
  %1338 = urem i32 %1337, 2
  %1339 = icmp eq i32 %1338, 0
  %1340 = icmp slt i32 %1335, 10
  %1341 = or i1 %1339, %1340
  br i1 %1341, label %originalBBpart2426, label %originalBB422alteredBB

originalBBpart2426:                               ; preds = %originalBB422
  br label %785, !dbg !309, !llvm.loop !363

1342:                                             ; preds = %originalBBpart2284
  %1343 = load i32, i32* @x.3
  %1344 = load i32, i32* @y.4
  %1345 = sub i32 %1343, 1
  %1346 = mul i32 %1343, %1345
  %1347 = urem i32 %1346, 2
  %1348 = icmp eq i32 %1347, 0
  %1349 = icmp slt i32 %1344, 10
  %1350 = or i1 %1348, %1349
  br i1 %1350, label %originalBB428, label %originalBB428alteredBB

originalBB428:                                    ; preds = %1342, %originalBB428alteredBB
  %1351 = load i32, i32* @x.3
  %1352 = load i32, i32* @y.4
  %1353 = sub i32 %1351, 1
  %1354 = mul i32 %1351, %1353
  %1355 = urem i32 %1354, 2
  %1356 = icmp eq i32 %1355, 0
  %1357 = icmp slt i32 %1352, 10
  %1358 = or i1 %1356, %1357
  br i1 %1358, label %originalBBpart2430, label %originalBB428alteredBB

originalBBpart2430:                               ; preds = %originalBB428
  br label %1359, !dbg !309

1359:                                             ; preds = %originalBBpart2430, %777
  br label %1360, !dbg !306

1360:                                             ; preds = %1359, %originalBBpart2392, %originalBBpart2304
  call void @llvm.dbg.label(metadata !365), !dbg !366
  %1361 = load i32, i32* @x.3
  %1362 = load i32, i32* @y.4
  %1363 = sub i32 %1361, 1
  %1364 = mul i32 %1361, %1363
  %1365 = urem i32 %1364, 2
  %1366 = icmp eq i32 %1365, 0
  %1367 = icmp slt i32 %1362, 10
  %1368 = or i1 %1366, %1367
  br i1 %1368, label %originalBB432, label %originalBB432alteredBB

originalBB432:                                    ; preds = %1360, %originalBB432alteredBB
  %1369 = load i8, i8* %17, align 1, !dbg !367
  %1370 = trunc i8 %1369 to i1, !dbg !367
  %1371 = load i32, i32* @x.3
  %1372 = load i32, i32* @y.4
  %1373 = sub i32 %1371, 1
  %1374 = mul i32 %1371, %1373
  %1375 = urem i32 %1374, 2
  %1376 = icmp eq i32 %1375, 0
  %1377 = icmp slt i32 %1372, 10
  %1378 = or i1 %1376, %1377
  br i1 %1378, label %originalBBpart2434, label %originalBB432alteredBB

originalBBpart2434:                               ; preds = %originalBB432
  br i1 %1370, label %1398, label %1379, !dbg !369

1379:                                             ; preds = %originalBBpart2434
  %1380 = load i32, i32* @x.3
  %1381 = load i32, i32* @y.4
  %1382 = sub i32 %1380, 1
  %1383 = mul i32 %1380, %1382
  %1384 = urem i32 %1383, 2
  %1385 = icmp eq i32 %1384, 0
  %1386 = icmp slt i32 %1381, 10
  %1387 = or i1 %1385, %1386
  br i1 %1387, label %originalBB436, label %originalBB436alteredBB

originalBB436:                                    ; preds = %1379, %originalBB436alteredBB
  %1388 = load i8, i8* %15, align 1, !dbg !370
  %1389 = trunc i8 %1388 to i1, !dbg !370
  %1390 = load i32, i32* @x.3
  %1391 = load i32, i32* @y.4
  %1392 = sub i32 %1390, 1
  %1393 = mul i32 %1390, %1392
  %1394 = urem i32 %1393, 2
  %1395 = icmp eq i32 %1394, 0
  %1396 = icmp slt i32 %1391, 10
  %1397 = or i1 %1395, %1396
  br i1 %1397, label %originalBBpart2438, label %originalBB436alteredBB

originalBBpart2438:                               ; preds = %originalBB436
  br i1 %1389, label %1398, label %2199, !dbg !371

1398:                                             ; preds = %originalBBpart2438, %originalBBpart2434
  %1399 = load i32, i32* @x.3
  %1400 = load i32, i32* @y.4
  %1401 = sub i32 %1399, 1
  %1402 = mul i32 %1399, %1401
  %1403 = urem i32 %1402, 2
  %1404 = icmp eq i32 %1403, 0
  %1405 = icmp slt i32 %1400, 10
  %1406 = or i1 %1404, %1405
  br i1 %1406, label %originalBB440, label %originalBB440alteredBB

originalBB440:                                    ; preds = %1398, %originalBB440alteredBB
  %1407 = load i32, i32* @x.3
  %1408 = load i32, i32* @y.4
  %1409 = sub i32 %1407, 1
  %1410 = mul i32 %1407, %1409
  %1411 = urem i32 %1410, 2
  %1412 = icmp eq i32 %1411, 0
  %1413 = icmp slt i32 %1408, 10
  %1414 = or i1 %1412, %1413
  br i1 %1414, label %originalBBpart2442, label %originalBB440alteredBB

originalBBpart2442:                               ; preds = %originalBB440
  br label %1415, !dbg !372

1415:                                             ; preds = %originalBBpart2656, %originalBBpart2442
  %1416 = load i32, i32* @x.3
  %1417 = load i32, i32* @y.4
  %1418 = sub i32 %1416, 1
  %1419 = mul i32 %1416, %1418
  %1420 = urem i32 %1419, 2
  %1421 = icmp eq i32 %1420, 0
  %1422 = icmp slt i32 %1417, 10
  %1423 = or i1 %1421, %1422
  br i1 %1423, label %originalBB444, label %originalBB444alteredBB

originalBB444:                                    ; preds = %1415, %originalBB444alteredBB
  %1424 = load i32, i32* %12, align 4, !dbg !374
  %1425 = icmp sgt i32 %1424, 0, !dbg !375
  %1426 = load i32, i32* @x.3
  %1427 = load i32, i32* @y.4
  %1428 = sub i32 %1426, 1
  %1429 = mul i32 %1426, %1428
  %1430 = urem i32 %1429, 2
  %1431 = icmp eq i32 %1430, 0
  %1432 = icmp slt i32 %1427, 10
  %1433 = or i1 %1431, %1432
  br i1 %1433, label %originalBBpart2446, label %originalBB444alteredBB

originalBBpart2446:                               ; preds = %originalBB444
  br i1 %1425, label %1434, label %2182, !dbg !372

1434:                                             ; preds = %originalBBpart2446
  call void @llvm.dbg.declare(metadata i8** %20, metadata !376, metadata !DIExpression()), !dbg !378
  %1435 = load i32, i32* @x.3
  %1436 = load i32, i32* @y.4
  %1437 = sub i32 %1435, 1
  %1438 = mul i32 %1435, %1437
  %1439 = urem i32 %1438, 2
  %1440 = icmp eq i32 %1439, 0
  %1441 = icmp slt i32 %1436, 10
  %1442 = or i1 %1440, %1441
  br i1 %1442, label %originalBB448, label %originalBB448alteredBB

originalBB448:                                    ; preds = %1434, %originalBB448alteredBB
  %1443 = load i8**, i8*** %13, align 8, !dbg !379
  %1444 = getelementptr inbounds i8*, i8** %1443, i64 0, !dbg !379
  %1445 = load i8*, i8** %1444, align 8, !dbg !379
  store i8* %1445, i8** %20, align 8, !dbg !378
  call void @llvm.dbg.declare(metadata i8* %21, metadata !380, metadata !DIExpression()), !dbg !381
  %1446 = load i32, i32* @x.3
  %1447 = load i32, i32* @y.4
  %1448 = sub i32 %1446, 1
  %1449 = mul i32 %1446, %1448
  %1450 = urem i32 %1449, 2
  %1451 = icmp eq i32 %1450, 0
  %1452 = icmp slt i32 %1447, 10
  %1453 = or i1 %1451, %1452
  br i1 %1453, label %originalBBpart2450, label %originalBB448alteredBB

originalBBpart2450:                               ; preds = %originalBB448
  br label %1454, !dbg !382

1454:                                             ; preds = %originalBBpart2641, %originalBBpart2450
  %1455 = load i32, i32* @x.3
  %1456 = load i32, i32* @y.4
  %1457 = sub i32 %1455, 1
  %1458 = mul i32 %1455, %1457
  %1459 = urem i32 %1458, 2
  %1460 = icmp eq i32 %1459, 0
  %1461 = icmp slt i32 %1456, 10
  %1462 = or i1 %1460, %1461
  br i1 %1462, label %originalBB452, label %originalBB452alteredBB

originalBB452:                                    ; preds = %1454, %originalBB452alteredBB
  %1463 = load i8*, i8** %20, align 8, !dbg !383
  %1464 = getelementptr inbounds i8, i8* %1463, i32 1, !dbg !383
  store i8* %1464, i8** %20, align 8, !dbg !383
  %1465 = load i8, i8* %1463, align 1, !dbg !384
  store i8 %1465, i8* %21, align 1, !dbg !385
  %1466 = icmp ne i8 %1465, 0, !dbg !382
  %1467 = load i32, i32* @x.3
  %1468 = load i32, i32* @y.4
  %1469 = sub i32 %1467, 1
  %1470 = mul i32 %1467, %1469
  %1471 = urem i32 %1470, 2
  %1472 = icmp eq i32 %1471, 0
  %1473 = icmp slt i32 %1468, 10
  %1474 = or i1 %1472, %1473
  br i1 %1474, label %originalBBpart2454, label %originalBB452alteredBB

originalBBpart2454:                               ; preds = %originalBB452
  br i1 %1466, label %1475, label %2124, !dbg !382

1475:                                             ; preds = %originalBBpart2454
  %1476 = load i32, i32* @x.3
  %1477 = load i32, i32* @y.4
  %1478 = sub i32 %1476, 1
  %1479 = mul i32 %1476, %1478
  %1480 = urem i32 %1479, 2
  %1481 = icmp eq i32 %1480, 0
  %1482 = icmp slt i32 %1477, 10
  %1483 = or i1 %1481, %1482
  br i1 %1483, label %originalBB456, label %originalBB456alteredBB

originalBB456:                                    ; preds = %1475, %originalBB456alteredBB
  %1484 = load i8, i8* %21, align 1, !dbg !386
  %1485 = zext i8 %1484 to i32, !dbg !386
  %1486 = icmp eq i32 %1485, 92, !dbg !389
  %1487 = load i32, i32* @x.3
  %1488 = load i32, i32* @y.4
  %1489 = sub i32 %1487, 1
  %1490 = mul i32 %1487, %1489
  %1491 = urem i32 %1490, 2
  %1492 = icmp eq i32 %1491, 0
  %1493 = icmp slt i32 %1488, 10
  %1494 = or i1 %1492, %1493
  br i1 %1494, label %originalBBpart2458, label %originalBB456alteredBB

originalBBpart2458:                               ; preds = %originalBB456
  br i1 %1486, label %1495, label %2104, !dbg !390

1495:                                             ; preds = %originalBBpart2458
  %1496 = load i32, i32* @x.3
  %1497 = load i32, i32* @y.4
  %1498 = sub i32 %1496, 1
  %1499 = mul i32 %1496, %1498
  %1500 = urem i32 %1499, 2
  %1501 = icmp eq i32 %1500, 0
  %1502 = icmp slt i32 %1497, 10
  %1503 = or i1 %1501, %1502
  br i1 %1503, label %originalBB460, label %originalBB460alteredBB

originalBB460:                                    ; preds = %1495, %originalBB460alteredBB
  %1504 = load i8*, i8** %20, align 8, !dbg !391
  %1505 = load i8, i8* %1504, align 1, !dbg !392
  %1506 = sext i8 %1505 to i32, !dbg !392
  %1507 = icmp ne i32 %1506, 0, !dbg !392
  %1508 = load i32, i32* @x.3
  %1509 = load i32, i32* @y.4
  %1510 = sub i32 %1508, 1
  %1511 = mul i32 %1508, %1510
  %1512 = urem i32 %1511, 2
  %1513 = icmp eq i32 %1512, 0
  %1514 = icmp slt i32 %1509, 10
  %1515 = or i1 %1513, %1514
  br i1 %1515, label %originalBBpart2462, label %originalBB460alteredBB

originalBBpart2462:                               ; preds = %originalBB460
  br i1 %1507, label %1516, label %2104, !dbg !393

1516:                                             ; preds = %originalBBpart2462
  %1517 = load i32, i32* @x.3
  %1518 = load i32, i32* @y.4
  %1519 = sub i32 %1517, 1
  %1520 = mul i32 %1517, %1519
  %1521 = urem i32 %1520, 2
  %1522 = icmp eq i32 %1521, 0
  %1523 = icmp slt i32 %1518, 10
  %1524 = or i1 %1522, %1523
  br i1 %1524, label %originalBB464, label %originalBB464alteredBB

originalBB464:                                    ; preds = %1516, %originalBB464alteredBB
  %1525 = load i8*, i8** %20, align 8, !dbg !394
  %1526 = getelementptr inbounds i8, i8* %1525, i32 1, !dbg !394
  store i8* %1526, i8** %20, align 8, !dbg !394
  %1527 = load i8, i8* %1525, align 1, !dbg !396
  store i8 %1527, i8* %21, align 1, !dbg !397
  %1528 = zext i8 %1527 to i32, !dbg !398
  %1529 = load i32, i32* @x.3
  %1530 = load i32, i32* @y.4
  %1531 = sub i32 %1529, 1
  %1532 = mul i32 %1529, %1531
  %1533 = urem i32 %1532, 2
  %1534 = icmp eq i32 %1533, 0
  %1535 = icmp slt i32 %1530, 10
  %1536 = or i1 %1534, %1535
  br i1 %1536, label %originalBBpart2466, label %originalBB464alteredBB

originalBBpart2466:                               ; preds = %originalBB464
  switch i32 %1528, label %2069 [
    i32 97, label %1537
    i32 98, label %1554
    i32 99, label %1571
    i32 101, label %1588
    i32 102, label %1605
    i32 110, label %1622
    i32 114, label %1639
    i32 116, label %1640
    i32 118, label %1657
    i32 120, label %1674
    i32 48, label %1797
    i32 49, label %1876
    i32 50, label %1876
    i32 51, label %1876
    i32 52, label %1876
    i32 53, label %1876
    i32 54, label %1876
    i32 55, label %1876
    i32 92, label %2035
  ], !dbg !399

1537:                                             ; preds = %originalBBpart2466
  %1538 = load i32, i32* @x.3
  %1539 = load i32, i32* @y.4
  %1540 = sub i32 %1538, 1
  %1541 = mul i32 %1538, %1540
  %1542 = urem i32 %1541, 2
  %1543 = icmp eq i32 %1542, 0
  %1544 = icmp slt i32 %1539, 10
  %1545 = or i1 %1543, %1544
  br i1 %1545, label %originalBB468, label %originalBB468alteredBB

originalBB468:                                    ; preds = %1537, %originalBB468alteredBB
  store i8 7, i8* %21, align 1, !dbg !400
  %1546 = load i32, i32* @x.3
  %1547 = load i32, i32* @y.4
  %1548 = sub i32 %1546, 1
  %1549 = mul i32 %1546, %1548
  %1550 = urem i32 %1549, 2
  %1551 = icmp eq i32 %1550, 0
  %1552 = icmp slt i32 %1547, 10
  %1553 = or i1 %1551, %1552
  br i1 %1553, label %originalBBpart2470, label %originalBB468alteredBB

originalBBpart2470:                               ; preds = %originalBB468
  br label %2087, !dbg !402

1554:                                             ; preds = %originalBBpart2466
  %1555 = load i32, i32* @x.3
  %1556 = load i32, i32* @y.4
  %1557 = sub i32 %1555, 1
  %1558 = mul i32 %1555, %1557
  %1559 = urem i32 %1558, 2
  %1560 = icmp eq i32 %1559, 0
  %1561 = icmp slt i32 %1556, 10
  %1562 = or i1 %1560, %1561
  br i1 %1562, label %originalBB472, label %originalBB472alteredBB

originalBB472:                                    ; preds = %1554, %originalBB472alteredBB
  store i8 8, i8* %21, align 1, !dbg !403
  %1563 = load i32, i32* @x.3
  %1564 = load i32, i32* @y.4
  %1565 = sub i32 %1563, 1
  %1566 = mul i32 %1563, %1565
  %1567 = urem i32 %1566, 2
  %1568 = icmp eq i32 %1567, 0
  %1569 = icmp slt i32 %1564, 10
  %1570 = or i1 %1568, %1569
  br i1 %1570, label %originalBBpart2474, label %originalBB472alteredBB

originalBBpart2474:                               ; preds = %originalBB472
  br label %2087, !dbg !404

1571:                                             ; preds = %originalBBpart2466
  %1572 = load i32, i32* @x.3
  %1573 = load i32, i32* @y.4
  %1574 = sub i32 %1572, 1
  %1575 = mul i32 %1572, %1574
  %1576 = urem i32 %1575, 2
  %1577 = icmp eq i32 %1576, 0
  %1578 = icmp slt i32 %1573, 10
  %1579 = or i1 %1577, %1578
  br i1 %1579, label %originalBB476, label %originalBB476alteredBB

originalBB476:                                    ; preds = %1571, %originalBB476alteredBB
  store i32 0, i32* %11, align 4, !dbg !405
  %1580 = load i32, i32* @x.3
  %1581 = load i32, i32* @y.4
  %1582 = sub i32 %1580, 1
  %1583 = mul i32 %1580, %1582
  %1584 = urem i32 %1583, 2
  %1585 = icmp eq i32 %1584, 0
  %1586 = icmp slt i32 %1581, 10
  %1587 = or i1 %1585, %1586
  br i1 %1587, label %originalBBpart2478, label %originalBB476alteredBB

originalBBpart2478:                               ; preds = %originalBB476
  br label %2337, !dbg !405

1588:                                             ; preds = %originalBBpart2466
  %1589 = load i32, i32* @x.3
  %1590 = load i32, i32* @y.4
  %1591 = sub i32 %1589, 1
  %1592 = mul i32 %1589, %1591
  %1593 = urem i32 %1592, 2
  %1594 = icmp eq i32 %1593, 0
  %1595 = icmp slt i32 %1590, 10
  %1596 = or i1 %1594, %1595
  br i1 %1596, label %originalBB480, label %originalBB480alteredBB

originalBB480:                                    ; preds = %1588, %originalBB480alteredBB
  store i8 27, i8* %21, align 1, !dbg !406
  %1597 = load i32, i32* @x.3
  %1598 = load i32, i32* @y.4
  %1599 = sub i32 %1597, 1
  %1600 = mul i32 %1597, %1599
  %1601 = urem i32 %1600, 2
  %1602 = icmp eq i32 %1601, 0
  %1603 = icmp slt i32 %1598, 10
  %1604 = or i1 %1602, %1603
  br i1 %1604, label %originalBBpart2482, label %originalBB480alteredBB

originalBBpart2482:                               ; preds = %originalBB480
  br label %2087, !dbg !407

1605:                                             ; preds = %originalBBpart2466
  %1606 = load i32, i32* @x.3
  %1607 = load i32, i32* @y.4
  %1608 = sub i32 %1606, 1
  %1609 = mul i32 %1606, %1608
  %1610 = urem i32 %1609, 2
  %1611 = icmp eq i32 %1610, 0
  %1612 = icmp slt i32 %1607, 10
  %1613 = or i1 %1611, %1612
  br i1 %1613, label %originalBB484, label %originalBB484alteredBB

originalBB484:                                    ; preds = %1605, %originalBB484alteredBB
  store i8 12, i8* %21, align 1, !dbg !408
  %1614 = load i32, i32* @x.3
  %1615 = load i32, i32* @y.4
  %1616 = sub i32 %1614, 1
  %1617 = mul i32 %1614, %1616
  %1618 = urem i32 %1617, 2
  %1619 = icmp eq i32 %1618, 0
  %1620 = icmp slt i32 %1615, 10
  %1621 = or i1 %1619, %1620
  br i1 %1621, label %originalBBpart2486, label %originalBB484alteredBB

originalBBpart2486:                               ; preds = %originalBB484
  br label %2087, !dbg !409

1622:                                             ; preds = %originalBBpart2466
  %1623 = load i32, i32* @x.3
  %1624 = load i32, i32* @y.4
  %1625 = sub i32 %1623, 1
  %1626 = mul i32 %1623, %1625
  %1627 = urem i32 %1626, 2
  %1628 = icmp eq i32 %1627, 0
  %1629 = icmp slt i32 %1624, 10
  %1630 = or i1 %1628, %1629
  br i1 %1630, label %originalBB488, label %originalBB488alteredBB

originalBB488:                                    ; preds = %1622, %originalBB488alteredBB
  store i8 10, i8* %21, align 1, !dbg !410
  %1631 = load i32, i32* @x.3
  %1632 = load i32, i32* @y.4
  %1633 = sub i32 %1631, 1
  %1634 = mul i32 %1631, %1633
  %1635 = urem i32 %1634, 2
  %1636 = icmp eq i32 %1635, 0
  %1637 = icmp slt i32 %1632, 10
  %1638 = or i1 %1636, %1637
  br i1 %1638, label %originalBBpart2490, label %originalBB488alteredBB

originalBBpart2490:                               ; preds = %originalBB488
  br label %2087, !dbg !411

1639:                                             ; preds = %originalBBpart2466
  store i8 13, i8* %21, align 1, !dbg !412
  br label %2087, !dbg !413

1640:                                             ; preds = %originalBBpart2466
  %1641 = load i32, i32* @x.3
  %1642 = load i32, i32* @y.4
  %1643 = sub i32 %1641, 1
  %1644 = mul i32 %1641, %1643
  %1645 = urem i32 %1644, 2
  %1646 = icmp eq i32 %1645, 0
  %1647 = icmp slt i32 %1642, 10
  %1648 = or i1 %1646, %1647
  br i1 %1648, label %originalBB492, label %originalBB492alteredBB

originalBB492:                                    ; preds = %1640, %originalBB492alteredBB
  store i8 9, i8* %21, align 1, !dbg !414
  %1649 = load i32, i32* @x.3
  %1650 = load i32, i32* @y.4
  %1651 = sub i32 %1649, 1
  %1652 = mul i32 %1649, %1651
  %1653 = urem i32 %1652, 2
  %1654 = icmp eq i32 %1653, 0
  %1655 = icmp slt i32 %1650, 10
  %1656 = or i1 %1654, %1655
  br i1 %1656, label %originalBBpart2494, label %originalBB492alteredBB

originalBBpart2494:                               ; preds = %originalBB492
  br label %2087, !dbg !415

1657:                                             ; preds = %originalBBpart2466
  %1658 = load i32, i32* @x.3
  %1659 = load i32, i32* @y.4
  %1660 = sub i32 %1658, 1
  %1661 = mul i32 %1658, %1660
  %1662 = urem i32 %1661, 2
  %1663 = icmp eq i32 %1662, 0
  %1664 = icmp slt i32 %1659, 10
  %1665 = or i1 %1663, %1664
  br i1 %1665, label %originalBB496, label %originalBB496alteredBB

originalBB496:                                    ; preds = %1657, %originalBB496alteredBB
  store i8 11, i8* %21, align 1, !dbg !416
  %1666 = load i32, i32* @x.3
  %1667 = load i32, i32* @y.4
  %1668 = sub i32 %1666, 1
  %1669 = mul i32 %1666, %1668
  %1670 = urem i32 %1669, 2
  %1671 = icmp eq i32 %1670, 0
  %1672 = icmp slt i32 %1667, 10
  %1673 = or i1 %1671, %1672
  br i1 %1673, label %originalBBpart2498, label %originalBB496alteredBB

originalBBpart2498:                               ; preds = %originalBB496
  br label %2087, !dbg !417

1674:                                             ; preds = %originalBBpart2466
  call void @llvm.dbg.declare(metadata i8* %22, metadata !418, metadata !DIExpression()), !dbg !420
  %1675 = load i32, i32* @x.3
  %1676 = load i32, i32* @y.4
  %1677 = sub i32 %1675, 1
  %1678 = mul i32 %1675, %1677
  %1679 = urem i32 %1678, 2
  %1680 = icmp eq i32 %1679, 0
  %1681 = icmp slt i32 %1676, 10
  %1682 = or i1 %1680, %1681
  br i1 %1682, label %originalBB500, label %originalBB500alteredBB

originalBB500:                                    ; preds = %1674, %originalBB500alteredBB
  %1683 = load i8*, i8** %20, align 8, !dbg !421
  %1684 = load i8, i8* %1683, align 1, !dbg !422
  store i8 %1684, i8* %22, align 1, !dbg !420
  %1685 = call i16** @__ctype_b_loc() #15, !dbg !423
  %1686 = load i16*, i16** %1685, align 8, !dbg !423
  %1687 = load i8, i8* %22, align 1, !dbg !423
  %1688 = zext i8 %1687 to i32, !dbg !423
  %1689 = sext i32 %1688 to i64, !dbg !423
  %1690 = getelementptr inbounds i16, i16* %1686, i64 %1689, !dbg !423
  %1691 = load i16, i16* %1690, align 2, !dbg !423
  %1692 = zext i16 %1691 to i32, !dbg !423
  %1693 = and i32 %1692, 4096, !dbg !423
  %1694 = icmp ne i32 %1693, 0, !dbg !423
  %1695 = load i32, i32* @x.3
  %1696 = load i32, i32* @y.4
  %1697 = sub i32 %1695, 1
  %1698 = mul i32 %1695, %1697
  %1699 = urem i32 %1698, 2
  %1700 = icmp eq i32 %1699, 0
  %1701 = icmp slt i32 %1696, 10
  %1702 = or i1 %1700, %1701
  br i1 %1702, label %originalBBpart2505, label %originalBB500alteredBB

originalBBpart2505:                               ; preds = %originalBB500
  br i1 %1694, label %1720, label %1703, !dbg !425

1703:                                             ; preds = %originalBBpart2505
  %1704 = load i32, i32* @x.3
  %1705 = load i32, i32* @y.4
  %1706 = sub i32 %1704, 1
  %1707 = mul i32 %1704, %1706
  %1708 = urem i32 %1707, 2
  %1709 = icmp eq i32 %1708, 0
  %1710 = icmp slt i32 %1705, 10
  %1711 = or i1 %1709, %1710
  br i1 %1711, label %originalBB507, label %originalBB507alteredBB

originalBB507:                                    ; preds = %1703, %originalBB507alteredBB
  %1712 = load i32, i32* @x.3
  %1713 = load i32, i32* @y.4
  %1714 = sub i32 %1712, 1
  %1715 = mul i32 %1712, %1714
  %1716 = urem i32 %1715, 2
  %1717 = icmp eq i32 %1716, 0
  %1718 = icmp slt i32 %1713, 10
  %1719 = or i1 %1717, %1718
  br i1 %1719, label %originalBBpart2509, label %originalBB507alteredBB

originalBBpart2509:                               ; preds = %originalBB507
  br label %2052, !dbg !426

1720:                                             ; preds = %originalBBpart2505
  %1721 = load i32, i32* @x.3
  %1722 = load i32, i32* @y.4
  %1723 = sub i32 %1721, 1
  %1724 = mul i32 %1721, %1723
  %1725 = urem i32 %1724, 2
  %1726 = icmp eq i32 %1725, 0
  %1727 = icmp slt i32 %1722, 10
  %1728 = or i1 %1726, %1727
  br i1 %1728, label %originalBB511, label %originalBB511alteredBB

originalBB511:                                    ; preds = %1720, %originalBB511alteredBB
  %1729 = load i8*, i8** %20, align 8, !dbg !427
  %1730 = getelementptr inbounds i8, i8* %1729, i32 1, !dbg !427
  store i8* %1730, i8** %20, align 8, !dbg !427
  %1731 = load i8, i8* %22, align 1, !dbg !428
  %1732 = call i32 @hextobin(i8 zeroext %1731), !dbg !429
  %1733 = trunc i32 %1732 to i8, !dbg !429
  store i8 %1733, i8* %21, align 1, !dbg !430
  %1734 = load i8*, i8** %20, align 8, !dbg !431
  %1735 = load i8, i8* %1734, align 1, !dbg !432
  store i8 %1735, i8* %22, align 1, !dbg !433
  %1736 = call i16** @__ctype_b_loc() #15, !dbg !434
  %1737 = load i16*, i16** %1736, align 8, !dbg !434
  %1738 = load i8, i8* %22, align 1, !dbg !434
  %1739 = zext i8 %1738 to i32, !dbg !434
  %1740 = sext i32 %1739 to i64, !dbg !434
  %1741 = getelementptr inbounds i16, i16* %1737, i64 %1740, !dbg !434
  %1742 = load i16, i16* %1741, align 2, !dbg !434
  %1743 = zext i16 %1742 to i32, !dbg !434
  %1744 = and i32 %1743, 4096, !dbg !434
  %1745 = icmp ne i32 %1744, 0, !dbg !434
  %1746 = load i32, i32* @x.3
  %1747 = load i32, i32* @y.4
  %1748 = sub i32 %1746, 1
  %1749 = mul i32 %1746, %1748
  %1750 = urem i32 %1749, 2
  %1751 = icmp eq i32 %1750, 0
  %1752 = icmp slt i32 %1747, 10
  %1753 = or i1 %1751, %1752
  br i1 %1753, label %originalBBpart2516, label %originalBB511alteredBB

originalBBpart2516:                               ; preds = %originalBB511
  br i1 %1745, label %1754, label %1780, !dbg !436

1754:                                             ; preds = %originalBBpart2516
  %1755 = load i32, i32* @x.3
  %1756 = load i32, i32* @y.4
  %1757 = sub i32 %1755, 1
  %1758 = mul i32 %1755, %1757
  %1759 = urem i32 %1758, 2
  %1760 = icmp eq i32 %1759, 0
  %1761 = icmp slt i32 %1756, 10
  %1762 = or i1 %1760, %1761
  br i1 %1762, label %originalBB518, label %originalBB518alteredBB

originalBB518:                                    ; preds = %1754, %originalBB518alteredBB
  %1763 = load i8*, i8** %20, align 8, !dbg !437
  %1764 = getelementptr inbounds i8, i8* %1763, i32 1, !dbg !437
  store i8* %1764, i8** %20, align 8, !dbg !437
  %1765 = load i8, i8* %21, align 1, !dbg !439
  %1766 = zext i8 %1765 to i32, !dbg !439
  %1767 = mul nsw i32 %1766, 16, !dbg !440
  %1768 = load i8, i8* %22, align 1, !dbg !441
  %1769 = call i32 @hextobin(i8 zeroext %1768), !dbg !442
  %1770 = add nsw i32 %1767, %1769, !dbg !443
  %1771 = trunc i32 %1770 to i8, !dbg !439
  store i8 %1771, i8* %21, align 1, !dbg !444
  %1772 = load i32, i32* @x.3
  %1773 = load i32, i32* @y.4
  %1774 = sub i32 %1772, 1
  %1775 = mul i32 %1772, %1774
  %1776 = urem i32 %1775, 2
  %1777 = icmp eq i32 %1776, 0
  %1778 = icmp slt i32 %1773, 10
  %1779 = or i1 %1777, %1778
  br i1 %1779, label %originalBBpart2520, label %originalBB518alteredBB

originalBBpart2520:                               ; preds = %originalBB518
  br label %1780, !dbg !445

1780:                                             ; preds = %originalBBpart2520, %originalBBpart2516
  %1781 = load i32, i32* @x.3
  %1782 = load i32, i32* @y.4
  %1783 = sub i32 %1781, 1
  %1784 = mul i32 %1781, %1783
  %1785 = urem i32 %1784, 2
  %1786 = icmp eq i32 %1785, 0
  %1787 = icmp slt i32 %1782, 10
  %1788 = or i1 %1786, %1787
  br i1 %1788, label %originalBB522, label %originalBB522alteredBB

originalBB522:                                    ; preds = %1780, %originalBB522alteredBB
  %1789 = load i32, i32* @x.3
  %1790 = load i32, i32* @y.4
  %1791 = sub i32 %1789, 1
  %1792 = mul i32 %1789, %1791
  %1793 = urem i32 %1792, 2
  %1794 = icmp eq i32 %1793, 0
  %1795 = icmp slt i32 %1790, 10
  %1796 = or i1 %1794, %1795
  br i1 %1796, label %originalBBpart2524, label %originalBB522alteredBB

originalBBpart2524:                               ; preds = %originalBB522
  br label %2087, !dbg !446

1797:                                             ; preds = %originalBBpart2466
  %1798 = load i32, i32* @x.3
  %1799 = load i32, i32* @y.4
  %1800 = sub i32 %1798, 1
  %1801 = mul i32 %1798, %1800
  %1802 = urem i32 %1801, 2
  %1803 = icmp eq i32 %1802, 0
  %1804 = icmp slt i32 %1799, 10
  %1805 = or i1 %1803, %1804
  br i1 %1805, label %originalBB526, label %originalBB526alteredBB

originalBB526:                                    ; preds = %1797, %originalBB526alteredBB
  store i8 0, i8* %21, align 1, !dbg !447
  %1806 = load i8*, i8** %20, align 8, !dbg !448
  %1807 = load i8, i8* %1806, align 1, !dbg !450
  %1808 = sext i8 %1807 to i32, !dbg !450
  %1809 = icmp sle i32 48, %1808, !dbg !451
  %1810 = load i32, i32* @x.3
  %1811 = load i32, i32* @y.4
  %1812 = sub i32 %1810, 1
  %1813 = mul i32 %1810, %1812
  %1814 = urem i32 %1813, 2
  %1815 = icmp eq i32 %1814, 0
  %1816 = icmp slt i32 %1811, 10
  %1817 = or i1 %1815, %1816
  br i1 %1817, label %originalBBpart2528, label %originalBB526alteredBB

originalBBpart2528:                               ; preds = %originalBB526
  br i1 %1809, label %1818, label %1839, !dbg !452

1818:                                             ; preds = %originalBBpart2528
  %1819 = load i32, i32* @x.3
  %1820 = load i32, i32* @y.4
  %1821 = sub i32 %1819, 1
  %1822 = mul i32 %1819, %1821
  %1823 = urem i32 %1822, 2
  %1824 = icmp eq i32 %1823, 0
  %1825 = icmp slt i32 %1820, 10
  %1826 = or i1 %1824, %1825
  br i1 %1826, label %originalBB530, label %originalBB530alteredBB

originalBB530:                                    ; preds = %1818, %originalBB530alteredBB
  %1827 = load i8*, i8** %20, align 8, !dbg !453
  %1828 = load i8, i8* %1827, align 1, !dbg !454
  %1829 = sext i8 %1828 to i32, !dbg !454
  %1830 = icmp sle i32 %1829, 55, !dbg !455
  %1831 = load i32, i32* @x.3
  %1832 = load i32, i32* @y.4
  %1833 = sub i32 %1831, 1
  %1834 = mul i32 %1831, %1833
  %1835 = urem i32 %1834, 2
  %1836 = icmp eq i32 %1835, 0
  %1837 = icmp slt i32 %1832, 10
  %1838 = or i1 %1836, %1837
  br i1 %1838, label %originalBBpart2532, label %originalBB530alteredBB

originalBBpart2532:                               ; preds = %originalBB530
  br i1 %1830, label %1856, label %1839, !dbg !456

1839:                                             ; preds = %originalBBpart2532, %originalBBpart2528
  %1840 = load i32, i32* @x.3
  %1841 = load i32, i32* @y.4
  %1842 = sub i32 %1840, 1
  %1843 = mul i32 %1840, %1842
  %1844 = urem i32 %1843, 2
  %1845 = icmp eq i32 %1844, 0
  %1846 = icmp slt i32 %1841, 10
  %1847 = or i1 %1845, %1846
  br i1 %1847, label %originalBB534, label %originalBB534alteredBB

originalBB534:                                    ; preds = %1839, %originalBB534alteredBB
  %1848 = load i32, i32* @x.3
  %1849 = load i32, i32* @y.4
  %1850 = sub i32 %1848, 1
  %1851 = mul i32 %1848, %1850
  %1852 = urem i32 %1851, 2
  %1853 = icmp eq i32 %1852, 0
  %1854 = icmp slt i32 %1849, 10
  %1855 = or i1 %1853, %1854
  br i1 %1855, label %originalBBpart2536, label %originalBB534alteredBB

originalBBpart2536:                               ; preds = %originalBB534
  br label %2087, !dbg !457

1856:                                             ; preds = %originalBBpart2532
  %1857 = load i32, i32* @x.3
  %1858 = load i32, i32* @y.4
  %1859 = sub i32 %1857, 1
  %1860 = mul i32 %1857, %1859
  %1861 = urem i32 %1860, 2
  %1862 = icmp eq i32 %1861, 0
  %1863 = icmp slt i32 %1858, 10
  %1864 = or i1 %1862, %1863
  br i1 %1864, label %originalBB538, label %originalBB538alteredBB

originalBB538:                                    ; preds = %1856, %originalBB538alteredBB
  %1865 = load i8*, i8** %20, align 8, !dbg !458
  %1866 = getelementptr inbounds i8, i8* %1865, i32 1, !dbg !458
  store i8* %1866, i8** %20, align 8, !dbg !458
  %1867 = load i8, i8* %1865, align 1, !dbg !459
  store i8 %1867, i8* %21, align 1, !dbg !460
  %1868 = load i32, i32* @x.3
  %1869 = load i32, i32* @y.4
  %1870 = sub i32 %1868, 1
  %1871 = mul i32 %1868, %1870
  %1872 = urem i32 %1871, 2
  %1873 = icmp eq i32 %1872, 0
  %1874 = icmp slt i32 %1869, 10
  %1875 = or i1 %1873, %1874
  br i1 %1875, label %originalBBpart2540, label %originalBB538alteredBB

originalBBpart2540:                               ; preds = %originalBB538
  br label %1876, !dbg !461

1876:                                             ; preds = %originalBBpart2540, %originalBBpart2466, %originalBBpart2466, %originalBBpart2466, %originalBBpart2466, %originalBBpart2466, %originalBBpart2466, %originalBBpart2466
  %1877 = load i32, i32* @x.3
  %1878 = load i32, i32* @y.4
  %1879 = sub i32 %1877, 1
  %1880 = mul i32 %1877, %1879
  %1881 = urem i32 %1880, 2
  %1882 = icmp eq i32 %1881, 0
  %1883 = icmp slt i32 %1878, 10
  %1884 = or i1 %1882, %1883
  br i1 %1884, label %originalBB542, label %originalBB542alteredBB

originalBB542:                                    ; preds = %1876, %originalBB542alteredBB
  %1885 = load i8, i8* %21, align 1, !dbg !462
  %1886 = zext i8 %1885 to i32, !dbg !462
  %1887 = sub nsw i32 %1886, 48, !dbg !462
  %1888 = trunc i32 %1887 to i8, !dbg !462
  store i8 %1888, i8* %21, align 1, !dbg !462
  %1889 = load i8*, i8** %20, align 8, !dbg !463
  %1890 = load i8, i8* %1889, align 1, !dbg !465
  %1891 = sext i8 %1890 to i32, !dbg !465
  %1892 = icmp sle i32 48, %1891, !dbg !466
  %1893 = load i32, i32* @x.3
  %1894 = load i32, i32* @y.4
  %1895 = sub i32 %1893, 1
  %1896 = mul i32 %1893, %1895
  %1897 = urem i32 %1896, 2
  %1898 = icmp eq i32 %1897, 0
  %1899 = icmp slt i32 %1894, 10
  %1900 = or i1 %1898, %1899
  br i1 %1900, label %originalBBpart2560, label %originalBB542alteredBB

originalBBpart2560:                               ; preds = %originalBB542
  br i1 %1892, label %1901, label %1949, !dbg !467

1901:                                             ; preds = %originalBBpart2560
  %1902 = load i32, i32* @x.3
  %1903 = load i32, i32* @y.4
  %1904 = sub i32 %1902, 1
  %1905 = mul i32 %1902, %1904
  %1906 = urem i32 %1905, 2
  %1907 = icmp eq i32 %1906, 0
  %1908 = icmp slt i32 %1903, 10
  %1909 = or i1 %1907, %1908
  br i1 %1909, label %originalBB562, label %originalBB562alteredBB

originalBB562:                                    ; preds = %1901, %originalBB562alteredBB
  %1910 = load i8*, i8** %20, align 8, !dbg !468
  %1911 = load i8, i8* %1910, align 1, !dbg !469
  %1912 = sext i8 %1911 to i32, !dbg !469
  %1913 = icmp sle i32 %1912, 55, !dbg !470
  %1914 = load i32, i32* @x.3
  %1915 = load i32, i32* @y.4
  %1916 = sub i32 %1914, 1
  %1917 = mul i32 %1914, %1916
  %1918 = urem i32 %1917, 2
  %1919 = icmp eq i32 %1918, 0
  %1920 = icmp slt i32 %1915, 10
  %1921 = or i1 %1919, %1920
  br i1 %1921, label %originalBBpart2564, label %originalBB562alteredBB

originalBBpart2564:                               ; preds = %originalBB562
  br i1 %1913, label %1922, label %1949, !dbg !471

1922:                                             ; preds = %originalBBpart2564
  %1923 = load i32, i32* @x.3
  %1924 = load i32, i32* @y.4
  %1925 = sub i32 %1923, 1
  %1926 = mul i32 %1923, %1925
  %1927 = urem i32 %1926, 2
  %1928 = icmp eq i32 %1927, 0
  %1929 = icmp slt i32 %1924, 10
  %1930 = or i1 %1928, %1929
  br i1 %1930, label %originalBB566, label %originalBB566alteredBB

originalBB566:                                    ; preds = %1922, %originalBB566alteredBB
  %1931 = load i8, i8* %21, align 1, !dbg !472
  %1932 = zext i8 %1931 to i32, !dbg !472
  %1933 = mul nsw i32 %1932, 8, !dbg !473
  %1934 = load i8*, i8** %20, align 8, !dbg !474
  %1935 = getelementptr inbounds i8, i8* %1934, i32 1, !dbg !474
  store i8* %1935, i8** %20, align 8, !dbg !474
  %1936 = load i8, i8* %1934, align 1, !dbg !475
  %1937 = sext i8 %1936 to i32, !dbg !475
  %1938 = sub nsw i32 %1937, 48, !dbg !476
  %1939 = add nsw i32 %1933, %1938, !dbg !477
  %1940 = trunc i32 %1939 to i8, !dbg !472
  store i8 %1940, i8* %21, align 1, !dbg !478
  %1941 = load i32, i32* @x.3
  %1942 = load i32, i32* @y.4
  %1943 = sub i32 %1941, 1
  %1944 = mul i32 %1941, %1943
  %1945 = urem i32 %1944, 2
  %1946 = icmp eq i32 %1945, 0
  %1947 = icmp slt i32 %1942, 10
  %1948 = or i1 %1946, %1947
  br i1 %1948, label %originalBBpart2591, label %originalBB566alteredBB

originalBBpart2591:                               ; preds = %originalBB566
  br label %1949, !dbg !479

1949:                                             ; preds = %originalBBpart2591, %originalBBpart2564, %originalBBpart2560
  %1950 = load i32, i32* @x.3
  %1951 = load i32, i32* @y.4
  %1952 = sub i32 %1950, 1
  %1953 = mul i32 %1950, %1952
  %1954 = urem i32 %1953, 2
  %1955 = icmp eq i32 %1954, 0
  %1956 = icmp slt i32 %1951, 10
  %1957 = or i1 %1955, %1956
  br i1 %1957, label %originalBB593, label %originalBB593alteredBB

originalBB593:                                    ; preds = %1949, %originalBB593alteredBB
  %1958 = load i8*, i8** %20, align 8, !dbg !480
  %1959 = load i8, i8* %1958, align 1, !dbg !482
  %1960 = sext i8 %1959 to i32, !dbg !482
  %1961 = icmp sle i32 48, %1960, !dbg !483
  %1962 = load i32, i32* @x.3
  %1963 = load i32, i32* @y.4
  %1964 = sub i32 %1962, 1
  %1965 = mul i32 %1962, %1964
  %1966 = urem i32 %1965, 2
  %1967 = icmp eq i32 %1966, 0
  %1968 = icmp slt i32 %1963, 10
  %1969 = or i1 %1967, %1968
  br i1 %1969, label %originalBBpart2595, label %originalBB593alteredBB

originalBBpart2595:                               ; preds = %originalBB593
  br i1 %1961, label %1970, label %2018, !dbg !484

1970:                                             ; preds = %originalBBpart2595
  %1971 = load i32, i32* @x.3
  %1972 = load i32, i32* @y.4
  %1973 = sub i32 %1971, 1
  %1974 = mul i32 %1971, %1973
  %1975 = urem i32 %1974, 2
  %1976 = icmp eq i32 %1975, 0
  %1977 = icmp slt i32 %1972, 10
  %1978 = or i1 %1976, %1977
  br i1 %1978, label %originalBB597, label %originalBB597alteredBB

originalBB597:                                    ; preds = %1970, %originalBB597alteredBB
  %1979 = load i8*, i8** %20, align 8, !dbg !485
  %1980 = load i8, i8* %1979, align 1, !dbg !486
  %1981 = sext i8 %1980 to i32, !dbg !486
  %1982 = icmp sle i32 %1981, 55, !dbg !487
  %1983 = load i32, i32* @x.3
  %1984 = load i32, i32* @y.4
  %1985 = sub i32 %1983, 1
  %1986 = mul i32 %1983, %1985
  %1987 = urem i32 %1986, 2
  %1988 = icmp eq i32 %1987, 0
  %1989 = icmp slt i32 %1984, 10
  %1990 = or i1 %1988, %1989
  br i1 %1990, label %originalBBpart2599, label %originalBB597alteredBB

originalBBpart2599:                               ; preds = %originalBB597
  br i1 %1982, label %1991, label %2018, !dbg !488

1991:                                             ; preds = %originalBBpart2599
  %1992 = load i32, i32* @x.3
  %1993 = load i32, i32* @y.4
  %1994 = sub i32 %1992, 1
  %1995 = mul i32 %1992, %1994
  %1996 = urem i32 %1995, 2
  %1997 = icmp eq i32 %1996, 0
  %1998 = icmp slt i32 %1993, 10
  %1999 = or i1 %1997, %1998
  br i1 %1999, label %originalBB601, label %originalBB601alteredBB

originalBB601:                                    ; preds = %1991, %originalBB601alteredBB
  %2000 = load i8, i8* %21, align 1, !dbg !489
  %2001 = zext i8 %2000 to i32, !dbg !489
  %2002 = mul nsw i32 %2001, 8, !dbg !490
  %2003 = load i8*, i8** %20, align 8, !dbg !491
  %2004 = getelementptr inbounds i8, i8* %2003, i32 1, !dbg !491
  store i8* %2004, i8** %20, align 8, !dbg !491
  %2005 = load i8, i8* %2003, align 1, !dbg !492
  %2006 = sext i8 %2005 to i32, !dbg !492
  %2007 = sub nsw i32 %2006, 48, !dbg !493
  %2008 = add nsw i32 %2002, %2007, !dbg !494
  %2009 = trunc i32 %2008 to i8, !dbg !489
  store i8 %2009, i8* %21, align 1, !dbg !495
  %2010 = load i32, i32* @x.3
  %2011 = load i32, i32* @y.4
  %2012 = sub i32 %2010, 1
  %2013 = mul i32 %2010, %2012
  %2014 = urem i32 %2013, 2
  %2015 = icmp eq i32 %2014, 0
  %2016 = icmp slt i32 %2011, 10
  %2017 = or i1 %2015, %2016
  br i1 %2017, label %originalBBpart2617, label %originalBB601alteredBB

originalBBpart2617:                               ; preds = %originalBB601
  br label %2018, !dbg !496

2018:                                             ; preds = %originalBBpart2617, %originalBBpart2599, %originalBBpart2595
  %2019 = load i32, i32* @x.3
  %2020 = load i32, i32* @y.4
  %2021 = sub i32 %2019, 1
  %2022 = mul i32 %2019, %2021
  %2023 = urem i32 %2022, 2
  %2024 = icmp eq i32 %2023, 0
  %2025 = icmp slt i32 %2020, 10
  %2026 = or i1 %2024, %2025
  br i1 %2026, label %originalBB619, label %originalBB619alteredBB

originalBB619:                                    ; preds = %2018, %originalBB619alteredBB
  %2027 = load i32, i32* @x.3
  %2028 = load i32, i32* @y.4
  %2029 = sub i32 %2027, 1
  %2030 = mul i32 %2027, %2029
  %2031 = urem i32 %2030, 2
  %2032 = icmp eq i32 %2031, 0
  %2033 = icmp slt i32 %2028, 10
  %2034 = or i1 %2032, %2033
  br i1 %2034, label %originalBBpart2621, label %originalBB619alteredBB

originalBBpart2621:                               ; preds = %originalBB619
  br label %2087, !dbg !497

2035:                                             ; preds = %originalBBpart2466
  %2036 = load i32, i32* @x.3
  %2037 = load i32, i32* @y.4
  %2038 = sub i32 %2036, 1
  %2039 = mul i32 %2036, %2038
  %2040 = urem i32 %2039, 2
  %2041 = icmp eq i32 %2040, 0
  %2042 = icmp slt i32 %2037, 10
  %2043 = or i1 %2041, %2042
  br i1 %2043, label %originalBB623, label %originalBB623alteredBB

originalBB623:                                    ; preds = %2035, %originalBB623alteredBB
  %2044 = load i32, i32* @x.3
  %2045 = load i32, i32* @y.4
  %2046 = sub i32 %2044, 1
  %2047 = mul i32 %2044, %2046
  %2048 = urem i32 %2047, 2
  %2049 = icmp eq i32 %2048, 0
  %2050 = icmp slt i32 %2045, 10
  %2051 = or i1 %2049, %2050
  br i1 %2051, label %originalBBpart2625, label %originalBB623alteredBB

originalBBpart2625:                               ; preds = %originalBB623
  br label %2087, !dbg !498

2052:                                             ; preds = %originalBBpart2509
  call void @llvm.dbg.label(metadata !499), !dbg !500
  %2053 = load i32, i32* @x.3
  %2054 = load i32, i32* @y.4
  %2055 = sub i32 %2053, 1
  %2056 = mul i32 %2053, %2055
  %2057 = urem i32 %2056, 2
  %2058 = icmp eq i32 %2057, 0
  %2059 = icmp slt i32 %2054, 10
  %2060 = or i1 %2058, %2059
  br i1 %2060, label %originalBB627, label %originalBB627alteredBB

originalBB627:                                    ; preds = %2052, %originalBB627alteredBB
  %2061 = load i32, i32* @x.3
  %2062 = load i32, i32* @y.4
  %2063 = sub i32 %2061, 1
  %2064 = mul i32 %2061, %2063
  %2065 = urem i32 %2064, 2
  %2066 = icmp eq i32 %2065, 0
  %2067 = icmp slt i32 %2062, 10
  %2068 = or i1 %2066, %2067
  br i1 %2068, label %originalBBpart2629, label %originalBB627alteredBB

originalBBpart2629:                               ; preds = %originalBB627
  br label %2069, !dbg !498

2069:                                             ; preds = %originalBBpart2629, %originalBBpart2466
  %2070 = load i32, i32* @x.3
  %2071 = load i32, i32* @y.4
  %2072 = sub i32 %2070, 1
  %2073 = mul i32 %2070, %2072
  %2074 = urem i32 %2073, 2
  %2075 = icmp eq i32 %2074, 0
  %2076 = icmp slt i32 %2071, 10
  %2077 = or i1 %2075, %2076
  br i1 %2077, label %originalBB631, label %originalBB631alteredBB

originalBB631:                                    ; preds = %2069, %originalBB631alteredBB
  %2078 = call i32 @putchar_unlocked(i32 92), !dbg !501
  %2079 = load i32, i32* @x.3
  %2080 = load i32, i32* @y.4
  %2081 = sub i32 %2079, 1
  %2082 = mul i32 %2079, %2081
  %2083 = urem i32 %2082, 2
  %2084 = icmp eq i32 %2083, 0
  %2085 = icmp slt i32 %2080, 10
  %2086 = or i1 %2084, %2085
  br i1 %2086, label %originalBBpart2633, label %originalBB631alteredBB

originalBBpart2633:                               ; preds = %originalBB631
  br label %2087, !dbg !502

2087:                                             ; preds = %originalBBpart2633, %originalBBpart2625, %originalBBpart2621, %originalBBpart2536, %originalBBpart2524, %originalBBpart2498, %originalBBpart2494, %1639, %originalBBpart2490, %originalBBpart2486, %originalBBpart2482, %originalBBpart2474, %originalBBpart2470
  %2088 = load i32, i32* @x.3
  %2089 = load i32, i32* @y.4
  %2090 = sub i32 %2088, 1
  %2091 = mul i32 %2088, %2090
  %2092 = urem i32 %2091, 2
  %2093 = icmp eq i32 %2092, 0
  %2094 = icmp slt i32 %2089, 10
  %2095 = or i1 %2093, %2094
  br i1 %2095, label %originalBB635, label %originalBB635alteredBB

originalBB635:                                    ; preds = %2087, %originalBB635alteredBB
  %2096 = load i32, i32* @x.3
  %2097 = load i32, i32* @y.4
  %2098 = sub i32 %2096, 1
  %2099 = mul i32 %2096, %2098
  %2100 = urem i32 %2099, 2
  %2101 = icmp eq i32 %2100, 0
  %2102 = icmp slt i32 %2097, 10
  %2103 = or i1 %2101, %2102
  br i1 %2103, label %originalBBpart2637, label %originalBB635alteredBB

originalBBpart2637:                               ; preds = %originalBB635
  br label %2104, !dbg !503

2104:                                             ; preds = %originalBBpart2637, %originalBBpart2462, %originalBBpart2458
  %2105 = load i32, i32* @x.3
  %2106 = load i32, i32* @y.4
  %2107 = sub i32 %2105, 1
  %2108 = mul i32 %2105, %2107
  %2109 = urem i32 %2108, 2
  %2110 = icmp eq i32 %2109, 0
  %2111 = icmp slt i32 %2106, 10
  %2112 = or i1 %2110, %2111
  br i1 %2112, label %originalBB639, label %originalBB639alteredBB

originalBB639:                                    ; preds = %2104, %originalBB639alteredBB
  %2113 = load i8, i8* %21, align 1, !dbg !504
  %2114 = zext i8 %2113 to i32, !dbg !504
  %2115 = call i32 @putchar_unlocked(i32 %2114), !dbg !504
  %2116 = load i32, i32* @x.3
  %2117 = load i32, i32* @y.4
  %2118 = sub i32 %2116, 1
  %2119 = mul i32 %2116, %2118
  %2120 = urem i32 %2119, 2
  %2121 = icmp eq i32 %2120, 0
  %2122 = icmp slt i32 %2117, 10
  %2123 = or i1 %2121, %2122
  br i1 %2123, label %originalBBpart2641, label %originalBB639alteredBB

originalBBpart2641:                               ; preds = %originalBB639
  br label %1454, !dbg !382, !llvm.loop !505

2124:                                             ; preds = %originalBBpart2454
  %2125 = load i32, i32* @x.3
  %2126 = load i32, i32* @y.4
  %2127 = sub i32 %2125, 1
  %2128 = mul i32 %2125, %2127
  %2129 = urem i32 %2128, 2
  %2130 = icmp eq i32 %2129, 0
  %2131 = icmp slt i32 %2126, 10
  %2132 = or i1 %2130, %2131
  br i1 %2132, label %originalBB643, label %originalBB643alteredBB

originalBB643:                                    ; preds = %2124, %originalBB643alteredBB
  %2133 = load i32, i32* %12, align 4, !dbg !507
  %2134 = add nsw i32 %2133, -1, !dbg !507
  store i32 %2134, i32* %12, align 4, !dbg !507
  %2135 = load i8**, i8*** %13, align 8, !dbg !508
  %2136 = getelementptr inbounds i8*, i8** %2135, i32 1, !dbg !508
  store i8** %2136, i8*** %13, align 8, !dbg !508
  %2137 = load i32, i32* %12, align 4, !dbg !509
  %2138 = icmp sgt i32 %2137, 0, !dbg !511
  %2139 = load i32, i32* @x.3
  %2140 = load i32, i32* @y.4
  %2141 = sub i32 %2139, 1
  %2142 = mul i32 %2139, %2141
  %2143 = urem i32 %2142, 2
  %2144 = icmp eq i32 %2143, 0
  %2145 = icmp slt i32 %2140, 10
  %2146 = or i1 %2144, %2145
  br i1 %2146, label %originalBBpart2648, label %originalBB643alteredBB

originalBBpart2648:                               ; preds = %originalBB643
  br i1 %2138, label %2147, label %2165, !dbg !512

2147:                                             ; preds = %originalBBpart2648
  %2148 = load i32, i32* @x.3
  %2149 = load i32, i32* @y.4
  %2150 = sub i32 %2148, 1
  %2151 = mul i32 %2148, %2150
  %2152 = urem i32 %2151, 2
  %2153 = icmp eq i32 %2152, 0
  %2154 = icmp slt i32 %2149, 10
  %2155 = or i1 %2153, %2154
  br i1 %2155, label %originalBB650, label %originalBB650alteredBB

originalBB650:                                    ; preds = %2147, %originalBB650alteredBB
  %2156 = call i32 @putchar_unlocked(i32 32), !dbg !513
  %2157 = load i32, i32* @x.3
  %2158 = load i32, i32* @y.4
  %2159 = sub i32 %2157, 1
  %2160 = mul i32 %2157, %2159
  %2161 = urem i32 %2160, 2
  %2162 = icmp eq i32 %2161, 0
  %2163 = icmp slt i32 %2158, 10
  %2164 = or i1 %2162, %2163
  br i1 %2164, label %originalBBpart2652, label %originalBB650alteredBB

originalBBpart2652:                               ; preds = %originalBB650
  br label %2165, !dbg !513

2165:                                             ; preds = %originalBBpart2652, %originalBBpart2648
  %2166 = load i32, i32* @x.3
  %2167 = load i32, i32* @y.4
  %2168 = sub i32 %2166, 1
  %2169 = mul i32 %2166, %2168
  %2170 = urem i32 %2169, 2
  %2171 = icmp eq i32 %2170, 0
  %2172 = icmp slt i32 %2167, 10
  %2173 = or i1 %2171, %2172
  br i1 %2173, label %originalBB654, label %originalBB654alteredBB

originalBB654:                                    ; preds = %2165, %originalBB654alteredBB
  %2174 = load i32, i32* @x.3
  %2175 = load i32, i32* @y.4
  %2176 = sub i32 %2174, 1
  %2177 = mul i32 %2174, %2176
  %2178 = urem i32 %2177, 2
  %2179 = icmp eq i32 %2178, 0
  %2180 = icmp slt i32 %2175, 10
  %2181 = or i1 %2179, %2180
  br i1 %2181, label %originalBBpart2656, label %originalBB654alteredBB

originalBBpart2656:                               ; preds = %originalBB654
  br label %1415, !dbg !372, !llvm.loop !514

2182:                                             ; preds = %originalBBpart2446
  %2183 = load i32, i32* @x.3
  %2184 = load i32, i32* @y.4
  %2185 = sub i32 %2183, 1
  %2186 = mul i32 %2183, %2185
  %2187 = urem i32 %2186, 2
  %2188 = icmp eq i32 %2187, 0
  %2189 = icmp slt i32 %2184, 10
  %2190 = or i1 %2188, %2189
  br i1 %2190, label %originalBB658, label %originalBB658alteredBB

originalBB658:                                    ; preds = %2182, %originalBB658alteredBB
  %2191 = load i32, i32* @x.3
  %2192 = load i32, i32* @y.4
  %2193 = sub i32 %2191, 1
  %2194 = mul i32 %2191, %2193
  %2195 = urem i32 %2194, 2
  %2196 = icmp eq i32 %2195, 0
  %2197 = icmp slt i32 %2192, 10
  %2198 = or i1 %2196, %2197
  br i1 %2198, label %originalBBpart2660, label %originalBB658alteredBB

originalBBpart2660:                               ; preds = %originalBB658
  br label %2283, !dbg !516

2199:                                             ; preds = %originalBBpart2438
  %2200 = load i32, i32* @x.3
  %2201 = load i32, i32* @y.4
  %2202 = sub i32 %2200, 1
  %2203 = mul i32 %2200, %2202
  %2204 = urem i32 %2203, 2
  %2205 = icmp eq i32 %2204, 0
  %2206 = icmp slt i32 %2201, 10
  %2207 = or i1 %2205, %2206
  br i1 %2207, label %originalBB662, label %originalBB662alteredBB

originalBB662:                                    ; preds = %2199, %originalBB662alteredBB
  %2208 = load i32, i32* @x.3
  %2209 = load i32, i32* @y.4
  %2210 = sub i32 %2208, 1
  %2211 = mul i32 %2208, %2210
  %2212 = urem i32 %2211, 2
  %2213 = icmp eq i32 %2212, 0
  %2214 = icmp slt i32 %2209, 10
  %2215 = or i1 %2213, %2214
  br i1 %2215, label %originalBBpart2664, label %originalBB662alteredBB

originalBBpart2664:                               ; preds = %originalBB662
  br label %2216, !dbg !517

2216:                                             ; preds = %originalBBpart2677, %originalBBpart2664
  %2217 = load i32, i32* %12, align 4, !dbg !519
  %2218 = icmp sgt i32 %2217, 0, !dbg !520
  br i1 %2218, label %2219, label %2266, !dbg !517

2219:                                             ; preds = %2216
  %2220 = load i32, i32* @x.3
  %2221 = load i32, i32* @y.4
  %2222 = sub i32 %2220, 1
  %2223 = mul i32 %2220, %2222
  %2224 = urem i32 %2223, 2
  %2225 = icmp eq i32 %2224, 0
  %2226 = icmp slt i32 %2221, 10
  %2227 = or i1 %2225, %2226
  br i1 %2227, label %originalBB666, label %originalBB666alteredBB

originalBB666:                                    ; preds = %2219, %originalBB666alteredBB
  %2228 = load i8**, i8*** %13, align 8, !dbg !521
  %2229 = getelementptr inbounds i8*, i8** %2228, i64 0, !dbg !521
  %2230 = load i8*, i8** %2229, align 8, !dbg !521
  %2231 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !521
  %2232 = call i32 @fputs_unlocked(i8* %2230, %struct._IO_FILE* %2231), !dbg !521
  %2233 = load i32, i32* %12, align 4, !dbg !523
  %2234 = add nsw i32 %2233, -1, !dbg !523
  store i32 %2234, i32* %12, align 4, !dbg !523
  %2235 = load i8**, i8*** %13, align 8, !dbg !524
  %2236 = getelementptr inbounds i8*, i8** %2235, i32 1, !dbg !524
  store i8** %2236, i8*** %13, align 8, !dbg !524
  %2237 = load i32, i32* %12, align 4, !dbg !525
  %2238 = icmp sgt i32 %2237, 0, !dbg !527
  %2239 = load i32, i32* @x.3
  %2240 = load i32, i32* @y.4
  %2241 = sub i32 %2239, 1
  %2242 = mul i32 %2239, %2241
  %2243 = urem i32 %2242, 2
  %2244 = icmp eq i32 %2243, 0
  %2245 = icmp slt i32 %2240, 10
  %2246 = or i1 %2244, %2245
  br i1 %2246, label %originalBBpart2673, label %originalBB666alteredBB

originalBBpart2673:                               ; preds = %originalBB666
  br i1 %2238, label %2247, label %2249, !dbg !528

2247:                                             ; preds = %originalBBpart2673
  %2248 = call i32 @putchar_unlocked(i32 32), !dbg !529
  br label %2249, !dbg !529

2249:                                             ; preds = %2247, %originalBBpart2673
  %2250 = load i32, i32* @x.3
  %2251 = load i32, i32* @y.4
  %2252 = sub i32 %2250, 1
  %2253 = mul i32 %2250, %2252
  %2254 = urem i32 %2253, 2
  %2255 = icmp eq i32 %2254, 0
  %2256 = icmp slt i32 %2251, 10
  %2257 = or i1 %2255, %2256
  br i1 %2257, label %originalBB675, label %originalBB675alteredBB

originalBB675:                                    ; preds = %2249, %originalBB675alteredBB
  %2258 = load i32, i32* @x.3
  %2259 = load i32, i32* @y.4
  %2260 = sub i32 %2258, 1
  %2261 = mul i32 %2258, %2260
  %2262 = urem i32 %2261, 2
  %2263 = icmp eq i32 %2262, 0
  %2264 = icmp slt i32 %2259, 10
  %2265 = or i1 %2263, %2264
  br i1 %2265, label %originalBBpart2677, label %originalBB675alteredBB

originalBBpart2677:                               ; preds = %originalBB675
  br label %2216, !dbg !517, !llvm.loop !530

2266:                                             ; preds = %2216
  %2267 = load i32, i32* @x.3
  %2268 = load i32, i32* @y.4
  %2269 = sub i32 %2267, 1
  %2270 = mul i32 %2267, %2269
  %2271 = urem i32 %2270, 2
  %2272 = icmp eq i32 %2271, 0
  %2273 = icmp slt i32 %2268, 10
  %2274 = or i1 %2272, %2273
  br i1 %2274, label %originalBB679, label %originalBB679alteredBB

originalBB679:                                    ; preds = %2266, %originalBB679alteredBB
  %2275 = load i32, i32* @x.3
  %2276 = load i32, i32* @y.4
  %2277 = sub i32 %2275, 1
  %2278 = mul i32 %2275, %2277
  %2279 = urem i32 %2278, 2
  %2280 = icmp eq i32 %2279, 0
  %2281 = icmp slt i32 %2276, 10
  %2282 = or i1 %2280, %2281
  br i1 %2282, label %originalBBpart2681, label %originalBB679alteredBB

originalBBpart2681:                               ; preds = %originalBB679
  br label %2283

2283:                                             ; preds = %originalBBpart2681, %originalBBpart2660
  %2284 = load i32, i32* @x.3
  %2285 = load i32, i32* @y.4
  %2286 = sub i32 %2284, 1
  %2287 = mul i32 %2284, %2286
  %2288 = urem i32 %2287, 2
  %2289 = icmp eq i32 %2288, 0
  %2290 = icmp slt i32 %2285, 10
  %2291 = or i1 %2289, %2290
  br i1 %2291, label %originalBB683, label %originalBB683alteredBB

originalBB683:                                    ; preds = %2283, %originalBB683alteredBB
  %2292 = load i8, i8* %14, align 1, !dbg !532
  %2293 = trunc i8 %2292 to i1, !dbg !532
  %2294 = load i32, i32* @x.3
  %2295 = load i32, i32* @y.4
  %2296 = sub i32 %2294, 1
  %2297 = mul i32 %2294, %2296
  %2298 = urem i32 %2297, 2
  %2299 = icmp eq i32 %2298, 0
  %2300 = icmp slt i32 %2295, 10
  %2301 = or i1 %2299, %2300
  br i1 %2301, label %originalBBpart2685, label %originalBB683alteredBB

originalBBpart2685:                               ; preds = %originalBB683
  br i1 %2293, label %2302, label %2320, !dbg !534

2302:                                             ; preds = %originalBBpart2685
  %2303 = load i32, i32* @x.3
  %2304 = load i32, i32* @y.4
  %2305 = sub i32 %2303, 1
  %2306 = mul i32 %2303, %2305
  %2307 = urem i32 %2306, 2
  %2308 = icmp eq i32 %2307, 0
  %2309 = icmp slt i32 %2304, 10
  %2310 = or i1 %2308, %2309
  br i1 %2310, label %originalBB687, label %originalBB687alteredBB

originalBB687:                                    ; preds = %2302, %originalBB687alteredBB
  %2311 = call i32 @putchar_unlocked(i32 10), !dbg !535
  %2312 = load i32, i32* @x.3
  %2313 = load i32, i32* @y.4
  %2314 = sub i32 %2312, 1
  %2315 = mul i32 %2312, %2314
  %2316 = urem i32 %2315, 2
  %2317 = icmp eq i32 %2316, 0
  %2318 = icmp slt i32 %2313, 10
  %2319 = or i1 %2317, %2318
  br i1 %2319, label %originalBBpart2689, label %originalBB687alteredBB

originalBBpart2689:                               ; preds = %originalBB687
  br label %2320, !dbg !535

2320:                                             ; preds = %originalBBpart2689, %originalBBpart2685
  %2321 = load i32, i32* @x.3
  %2322 = load i32, i32* @y.4
  %2323 = sub i32 %2321, 1
  %2324 = mul i32 %2321, %2323
  %2325 = urem i32 %2324, 2
  %2326 = icmp eq i32 %2325, 0
  %2327 = icmp slt i32 %2322, 10
  %2328 = or i1 %2326, %2327
  br i1 %2328, label %originalBB691, label %originalBB691alteredBB

originalBB691:                                    ; preds = %2320, %originalBB691alteredBB
  store i32 0, i32* %11, align 4, !dbg !536
  %2329 = load i32, i32* @x.3
  %2330 = load i32, i32* @y.4
  %2331 = sub i32 %2329, 1
  %2332 = mul i32 %2329, %2331
  %2333 = urem i32 %2332, 2
  %2334 = icmp eq i32 %2333, 0
  %2335 = icmp slt i32 %2330, 10
  %2336 = or i1 %2334, %2335
  br i1 %2336, label %originalBBpart2693, label %originalBB691alteredBB

originalBBpart2693:                               ; preds = %originalBB691
  br label %2337, !dbg !536

2337:                                             ; preds = %originalBBpart2693, %originalBBpart2478, %originalBBpart2268
  %2338 = load i32, i32* @x.3
  %2339 = load i32, i32* @y.4
  %2340 = sub i32 %2338, 1
  %2341 = mul i32 %2338, %2340
  %2342 = urem i32 %2341, 2
  %2343 = icmp eq i32 %2342, 0
  %2344 = icmp slt i32 %2339, 10
  %2345 = or i1 %2343, %2344
  br i1 %2345, label %originalBB695, label %originalBB695alteredBB

originalBB695:                                    ; preds = %2337, %originalBB695alteredBB
  %2346 = load i32, i32* %11, align 4, !dbg !537
  %2347 = load i32, i32* @x.3
  %2348 = load i32, i32* @y.4
  %2349 = sub i32 %2347, 1
  %2350 = mul i32 %2347, %2349
  %2351 = urem i32 %2350, 2
  %2352 = icmp eq i32 %2351, 0
  %2353 = icmp slt i32 %2348, 10
  %2354 = or i1 %2352, %2353
  br i1 %2354, label %originalBBpart2697, label %originalBB695alteredBB

originalBBpart2697:                               ; preds = %originalBB695
  ret i32 %2346, !dbg !537

originalBBalteredBB:                              ; preds = %originalBB, %2
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %2355 = alloca i32, align 4
  %2356 = alloca i32, align 4
  %2357 = alloca i8**, align 8
  %2358 = alloca i8, align 1
  %2359 = alloca i8, align 1
  %2360 = alloca i8, align 1
  %2361 = alloca i8, align 1
  %2362 = alloca i8*, align 8
  %2363 = alloca i64, align 8
  %2364 = alloca i8*, align 8
  %2365 = alloca i8, align 1
  %2366 = alloca i8, align 1
  store i32 0, i32* %2355, align 4
  store i32 %0, i32* %2356, align 4
  call void @llvm.dbg.declare(metadata i32* %2356, metadata !538, metadata !DIExpression()), !dbg !262
  store i8** %1, i8*** %2357, align 8
  call void @llvm.dbg.declare(metadata i8*** %2357, metadata !541, metadata !DIExpression()), !dbg !264
  call void @llvm.dbg.declare(metadata i8* %2358, metadata !542, metadata !DIExpression()), !dbg !266
  store i8 1, i8* %2358, align 1, !dbg !266
  call void @llvm.dbg.declare(metadata i8* %2359, metadata !543, metadata !DIExpression()), !dbg !268
  %2367 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !269
  %2368 = icmp ne i8* %2367, null, !dbg !269
  %2369 = zext i1 %2368 to i8, !dbg !268
  store i8 %2369, i8* %2359, align 1, !dbg !268
  call void @llvm.dbg.declare(metadata i8* %2360, metadata !544, metadata !DIExpression()), !dbg !271
  %2370 = load i8, i8* %2359, align 1, !dbg !272
  %2371 = trunc i8 %2370 to i1, !dbg !272
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %36
  %2372 = load i32, i32* %12, align 4, !dbg !274
  %2373 = icmp slt i32 1, %2372, !dbg !275
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %55
  %2374 = load i8**, i8*** %13, align 8, !dbg !277
  %2375 = getelementptr inbounds i8*, i8** %2374, i64 1, !dbg !277
  %2376 = load i8*, i8** %2375, align 8, !dbg !277
  %2377 = call i32 @strcmp(i8* %2376, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0)) #13, !dbg !277
  %2378 = icmp eq i32 %2377, 0, !dbg !277
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %77
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %95
  %2379 = zext i1 %96 to i8, !dbg !271
  store i8 %2379, i8* %16, align 1, !dbg !271
  call void @llvm.dbg.declare(metadata !4, metadata !545, metadata !DIExpression()), !dbg !280
  store i8 0, i8* %17, align 1, !dbg !280
  %2380 = load i8**, i8*** %13, align 8, !dbg !281
  %2381 = getelementptr inbounds i8*, i8** %2380, i64 0, !dbg !281
  %2382 = load i8*, i8** %2381, align 8, !dbg !281
  call void @set_program_name(i8* %2382), !dbg !282
  %2383 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)) #10, !dbg !283
  %2384 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !284
  %2385 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0)) #10, !dbg !285
  %2386 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !286
  %2387 = load i8, i8* %16, align 1, !dbg !287
  %2388 = trunc i8 %2387 to i1, !dbg !287
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %123
  %2389 = load i32, i32* %12, align 4, !dbg !290
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %141
  %collatzVaralteredBB = alloca i32
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %158
  %2390 = load i32, i32* @inVal0
  %2391 = icmp sgt i32 %2390, 1
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %177
  store i32 51, i32* %collatzVar
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %194
  %2392 = load i8**, i8*** @inVal1
  %2393 = getelementptr inbounds i8*, i8** %2392, i64 1
  %2394 = load i8*, i8** %2393
  %controlealteredBB = call i32 @controle(i8* %2394, i32 2)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %214
  %2395 = load i32, i32* %collatzVar
  %2396 = icmp sgt i32 %2395, 1
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %233
  %2397 = load i32, i32* %collatzVar
  %2398 = srem i32 %2397, 2
  %2399 = icmp eq i32 %2398, 0
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %253
  %2400 = load i32, i32* %collatzVar
  %_ = sub i32 0, %2400
  %gen = add i32 %_, 2
  %_47 = sub i32 %2400, 2
  %gen48 = mul i32 %_47, 2
  %_49 = sub i32 %2400, 2
  %gen50 = mul i32 %_49, 2
  %_51 = sub i32 %2400, 2
  %gen52 = mul i32 %_51, 2
  %_53 = sub i32 %2400, 2
  %gen54 = mul i32 %_53, 2
  %_55 = sub i32 %2400, 2
  %gen56 = mul i32 %_55, 2
  %_57 = shl i32 %2400, 2
  %_58 = sub i32 %2400, 2
  %gen59 = mul i32 %_58, 2
  %2401 = sdiv i32 %2400, 2
  store i32 %2401, i32* %collatzVar
  br label %originalBB46

originalBB63alteredBB:                            ; preds = %originalBB63, %272
  %2402 = load i32, i32* %collatzVar
  %_64 = shl i32 %2402, 3
  %_65 = shl i32 %2402, 3
  %_66 = sub i32 %2402, 3
  %gen67 = mul i32 %_66, 3
  %_68 = sub i32 %2402, 3
  %gen69 = mul i32 %_68, 3
  %_70 = sub i32 0, %2402
  %gen71 = add i32 %_70, 3
  %2403 = mul i32 %2402, 3
  %_72 = sub i32 %2403, 1
  %gen73 = mul i32 %_72, 1
  %_74 = sub i32 %2403, 1
  %gen75 = mul i32 %_74, 1
  %2404 = add i32 %2403, 1
  store i32 %2404, i32* %collatzVar
  br label %originalBB63

originalBB79alteredBB:                            ; preds = %originalBB79, %292
  %2405 = load i32, i32* %collatzVar
  %_80 = sub i32 %132, %2405
  %gen81 = mul i32 %_80, %2405
  %_82 = sub i32 0, %132
  %gen83 = add i32 %_82, %2405
  %_84 = sub i32 0, %132
  %gen85 = add i32 %_84, %2405
  %_86 = sub i32 0, %132
  %gen87 = add i32 %_86, %2405
  %_88 = shl i32 %132, %2405
  %_89 = sub i32 %132, %2405
  %gen90 = mul i32 %_89, %2405
  %_91 = sub i32 %132, %2405
  %gen92 = mul i32 %_91, %2405
  %_93 = sub i32 %132, %2405
  %gen94 = mul i32 %_93, %2405
  %2406 = sub i32 %132, %2405
  %2407 = icmp sgt i32 %2406, 0
  br label %originalBB79

originalBB98alteredBB:                            ; preds = %originalBB98, %312
  %2408 = load i32, i32* %collatzVar
  %_99 = shl i32 %132, %2408
  %_100 = shl i32 %132, %2408
  %_101 = sub i32 %132, %2408
  %gen102 = mul i32 %_101, %2408
  %2409 = add i32 %132, %2408
  %2410 = icmp slt i32 %2409, 4
  br label %originalBB98

originalBB106alteredBB:                           ; preds = %originalBB106, %332
  %2411 = load i8**, i8*** %13, align 8, !dbg !292
  %2412 = getelementptr inbounds i8*, i8** %2411, i64 1, !dbg !292
  %2413 = load i8*, i8** %2412, align 8, !dbg !292
  %2414 = call i32 @strcmp(i8* %2413, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i64 0, i64 0)) #13, !dbg !292
  br label %originalBB106

originalBB110alteredBB:                           ; preds = %originalBB110, %354
  %2415 = load i32, i32* @inVal0
  %2416 = icmp sgt i32 %2415, 1
  br label %originalBB110

originalBB114alteredBB:                           ; preds = %originalBB114, %373
  store i32 18, i32* %collatzVar5
  br label %originalBB114

originalBB118alteredBB:                           ; preds = %originalBB118, %390
  %2417 = load i8**, i8*** @inVal1
  %2418 = getelementptr inbounds i8*, i8** %2417, i64 1
  %2419 = load i8*, i8** %2418
  %controle6alteredBB = call i32 @controle(i8* %2419, i32 0)
  store i32 %controle6alteredBB, i32* %collatzVar5
  br label %originalBB118

originalBB122alteredBB:                           ; preds = %originalBB122, %410
  %2420 = load i32, i32* %collatzVar5
  %2421 = icmp sgt i32 %2420, 1
  br label %originalBB122

originalBB126alteredBB:                           ; preds = %originalBB126, %429
  %2422 = load i32, i32* %collatzVar5
  %_127 = shl i32 %2422, 2
  %_128 = shl i32 %2422, 2
  %_129 = sub i32 %2422, 2
  %gen130 = mul i32 %_129, 2
  %_131 = sub i32 0, %2422
  %gen132 = add i32 %_131, 2
  %2423 = srem i32 %2422, 2
  %2424 = icmp eq i32 %2423, 0
  br label %originalBB126

originalBB136alteredBB:                           ; preds = %originalBB136, %449
  %2425 = load i32, i32* %collatzVar5
  %_137 = sub i32 0, %2425
  %gen138 = add i32 %_137, 2
  %_139 = shl i32 %2425, 2
  %2426 = sdiv i32 %2425, 2
  store i32 %2426, i32* %collatzVar5
  br label %originalBB136

originalBB143alteredBB:                           ; preds = %originalBB143, %468
  %2427 = load i32, i32* %collatzVar5
  %_144 = sub i32 %2427, 3
  %gen145 = mul i32 %_144, 3
  %_146 = sub i32 0, %2427
  %gen147 = add i32 %_146, 3
  %_148 = sub i32 0, %2427
  %gen149 = add i32 %_148, 3
  %_150 = sub i32 %2427, 3
  %gen151 = mul i32 %_150, 3
  %_152 = sub i32 %2427, 3
  %gen153 = mul i32 %_152, 3
  %_154 = shl i32 %2427, 3
  %2428 = mul i32 %2427, 3
  %_155 = sub i32 %2428, 1
  %gen156 = mul i32 %_155, 1
  %_157 = sub i32 %2428, 1
  %gen158 = mul i32 %_157, 1
  %_159 = shl i32 %2428, 1
  %_160 = shl i32 %2428, 1
  %_161 = sub i32 %2428, 1
  %gen162 = mul i32 %_161, 1
  %_163 = shl i32 %2428, 1
  %_164 = shl i32 %2428, 1
  %2429 = add i32 %2428, 1
  store i32 %2429, i32* %collatzVar5
  br label %originalBB143

originalBB168alteredBB:                           ; preds = %originalBB168, %488
  %2430 = load i32, i32* %collatzVar5
  %_169 = sub i32 %344, %2430
  %gen170 = mul i32 %_169, %2430
  %_171 = shl i32 %344, %2430
  %_172 = shl i32 %344, %2430
  %_173 = sub i32 0, %344
  %gen174 = add i32 %_173, %2430
  %_175 = shl i32 %344, %2430
  %_176 = sub i32 %344, %2430
  %gen177 = mul i32 %_176, %2430
  %_178 = shl i32 %344, %2430
  %_179 = sub i32 0, %344
  %gen180 = add i32 %_179, %2430
  %2431 = sub i32 %344, %2430
  %2432 = icmp sgt i32 %2431, -2
  br label %originalBB168

originalBB184alteredBB:                           ; preds = %originalBB184, %508
  %2433 = load i32, i32* %collatzVar5
  %_185 = shl i32 %344, %2433
  %_186 = sub i32 %344, %2433
  %gen187 = mul i32 %_186, %2433
  %_188 = sub i32 0, %344
  %gen189 = add i32 %_188, %2433
  %2434 = add i32 %344, %2433
  %2435 = icmp slt i32 %2434, 2
  br label %originalBB184

originalBB193alteredBB:                           ; preds = %originalBB193, %528
  call void @usage(i32 0) #14, !dbg !295
  br label %originalBB193

originalBB197alteredBB:                           ; preds = %originalBB197, %545
  %2436 = load i8**, i8*** %13, align 8, !dbg !296
  %2437 = getelementptr inbounds i8*, i8** %2436, i64 1, !dbg !296
  %2438 = load i8*, i8** %2437, align 8, !dbg !296
  %2439 = call i32 @strcmp(i8* %2438, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i64 0, i64 0)) #13, !dbg !296
  br label %originalBB197

originalBB201alteredBB:                           ; preds = %originalBB201, %566
  %collatzVar1alteredBB = alloca i32
  br label %originalBB201

originalBB205alteredBB:                           ; preds = %originalBB205, %583
  %2440 = load i32, i32* @inVal0
  %2441 = icmp sgt i32 %2440, 1
  br label %originalBB205

originalBB209alteredBB:                           ; preds = %originalBB209, %602
  store i32 5, i32* %collatzVar1
  br label %originalBB209

originalBB213alteredBB:                           ; preds = %originalBB213, %619
  %2442 = load i8**, i8*** @inVal1
  %2443 = getelementptr inbounds i8*, i8** %2442, i64 1
  %2444 = load i8*, i8** %2443
  %controle2alteredBB = call i32 @controle(i8* %2444, i32 0)
  store i32 %controle2alteredBB, i32* %collatzVar1
  br label %originalBB213

originalBB217alteredBB:                           ; preds = %originalBB217, %639
  %2445 = load i32, i32* %collatzVar1
  %2446 = icmp sgt i32 %2445, 1
  br label %originalBB217

originalBB221alteredBB:                           ; preds = %originalBB221, %658
  %2447 = load i32, i32* %collatzVar1
  %_222 = shl i32 %2447, 2
  %_223 = shl i32 %2447, 2
  %_224 = sub i32 %2447, 2
  %gen225 = mul i32 %_224, 2
  %_226 = sub i32 %2447, 2
  %gen227 = mul i32 %_226, 2
  %_228 = sub i32 %2447, 2
  %gen229 = mul i32 %_228, 2
  %_230 = sub i32 %2447, 2
  %gen231 = mul i32 %_230, 2
  %_232 = sub i32 %2447, 2
  %gen233 = mul i32 %_232, 2
  %_234 = sub i32 0, %2447
  %gen235 = add i32 %_234, 2
  %_236 = shl i32 %2447, 2
  %_237 = shl i32 %2447, 2
  %2448 = srem i32 %2447, 2
  %2449 = icmp eq i32 %2448, 0
  br label %originalBB221

originalBB241alteredBB:                           ; preds = %originalBB241, %678
  %2450 = load i32, i32* %collatzVar1
  %_242 = sub i32 0, %2450
  %gen243 = add i32 %_242, 2
  %_244 = shl i32 %2450, 2
  %_245 = shl i32 %2450, 2
  %2451 = sdiv i32 %2450, 2
  store i32 %2451, i32* %collatzVar1
  br label %originalBB241

originalBB249alteredBB:                           ; preds = %originalBB249, %701
  %2452 = load i32, i32* %collatzVar1
  %_250 = sub i32 %557, %2452
  %gen251 = mul i32 %_250, %2452
  %_252 = shl i32 %557, %2452
  %_253 = shl i32 %557, %2452
  %2453 = sub i32 %557, %2452
  %2454 = icmp sgt i32 %2453, -2
  br label %originalBB249

originalBB257alteredBB:                           ; preds = %originalBB257, %721
  %2455 = load i32, i32* %collatzVar1
  %_258 = sub i32 %557, %2455
  %gen259 = mul i32 %_258, %2455
  %_260 = shl i32 %557, %2455
  %_261 = sub i32 0, %557
  %gen262 = add i32 %_261, %2455
  %2456 = add i32 %557, %2455
  %2457 = icmp slt i32 %2456, 2
  br label %originalBB257

originalBB266alteredBB:                           ; preds = %originalBB266, %741
  %2458 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !298
  %2459 = load i8*, i8** @Version, align 8, !dbg !300
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %2458, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19, i64 0, i64 0), i8* %2459, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i8* null), !dbg !301
  store i32 0, i32* %11, align 4, !dbg !302
  br label %originalBB266

originalBB270alteredBB:                           ; preds = %originalBB270, %760
  br label %originalBB270

originalBB274alteredBB:                           ; preds = %originalBB274, %785
  %2460 = load i32, i32* %12, align 4, !dbg !310
  %2461 = icmp sgt i32 %2460, 0, !dbg !311
  br label %originalBB274

originalBB278alteredBB:                           ; preds = %originalBB278, %804
  %2462 = load i8**, i8*** %13, align 8, !dbg !313
  %2463 = getelementptr inbounds i8*, i8** %2462, i64 0, !dbg !313
  %2464 = load i8*, i8** %2463, align 8, !dbg !313
  %2465 = load i8, i8* %2464, align 1, !dbg !314
  %2466 = sext i8 %2465 to i32, !dbg !314
  %2467 = icmp eq i32 %2466, 45, !dbg !315
  br label %originalBB278

originalBB282alteredBB:                           ; preds = %originalBB282, %827
  br label %originalBB282

originalBB286alteredBB:                           ; preds = %originalBB286, %845
  %2468 = load i8**, i8*** %13, align 8, !dbg !320
  %2469 = getelementptr inbounds i8*, i8** %2468, i64 0, !dbg !320
  %2470 = load i8*, i8** %2469, align 8, !dbg !320
  %2471 = getelementptr inbounds i8, i8* %2470, i64 1, !dbg !321
  store i8* %2471, i8** %18, align 8, !dbg !319
  call void @llvm.dbg.declare(metadata !4, metadata !548, metadata !DIExpression()), !dbg !323
  store i64 0, i64* %19, align 8, !dbg !324
  br label %originalBB286

originalBB290alteredBB:                           ; preds = %originalBB290, %866
  %2472 = load i8*, i8** %18, align 8, !dbg !327
  %2473 = load i64, i64* %19, align 8, !dbg !329
  %2474 = getelementptr inbounds i8, i8* %2472, i64 %2473, !dbg !327
  %2475 = load i8, i8* %2474, align 1, !dbg !327
  %2476 = icmp ne i8 %2475, 0, !dbg !330
  br label %originalBB290

originalBB294alteredBB:                           ; preds = %originalBB294, %888
  %2477 = load i8*, i8** %18, align 8, !dbg !331
  %2478 = load i64, i64* %19, align 8, !dbg !332
  %2479 = getelementptr inbounds i8, i8* %2477, i64 %2478, !dbg !331
  %2480 = load i8, i8* %2479, align 1, !dbg !331
  %2481 = sext i8 %2480 to i32, !dbg !331
  br label %originalBB294

originalBB298alteredBB:                           ; preds = %originalBB298, %910
  br label %originalBB298

originalBB302alteredBB:                           ; preds = %originalBB302, %927
  br label %originalBB302

originalBB306alteredBB:                           ; preds = %originalBB306, %944
  br label %originalBB306

originalBB310alteredBB:                           ; preds = %originalBB310, %961
  %2482 = load i64, i64* %19, align 8, !dbg !338
  %_311 = sub i64 %2482, 1
  %gen312 = mul i64 %_311, 1
  %_313 = sub i64 %2482, 1
  %gen314 = mul i64 %_313, 1
  %_315 = shl i64 %2482, 1
  %_316 = shl i64 %2482, 1
  %_317 = sub i64 0, %2482
  %gen318 = add i64 %_317, 1
  %_319 = sub i64 %2482, 1
  %gen320 = mul i64 %_319, 1
  %_321 = sub i64 %2482, 1
  %gen322 = mul i64 %_321, 1
  %2483 = add i64 %2482, 1, !dbg !338
  store i64 %2483, i64* %19, align 8, !dbg !338
  br label %originalBB310

originalBB326alteredBB:                           ; preds = %originalBB326, %980
  %2484 = load i64, i64* %19, align 8, !dbg !342
  br label %originalBB326

originalBB330alteredBB:                           ; preds = %originalBB330, %998
  %collatzVar3alteredBB = alloca i32
  br label %originalBB330

originalBB334alteredBB:                           ; preds = %originalBB334, %1015
  %2485 = load i32, i32* @inVal0
  %2486 = icmp sgt i32 %2485, 1
  br label %originalBB334

originalBB338alteredBB:                           ; preds = %originalBB338, %1034
  store i32 43, i32* %collatzVar3
  br label %originalBB338

originalBB342alteredBB:                           ; preds = %originalBB342, %1051
  %2487 = load i8**, i8*** @inVal1
  %2488 = getelementptr inbounds i8*, i8** %2487, i64 1
  %2489 = load i8*, i8** %2488
  %2490 = trunc i64 0 to i32
  %controle4alteredBB = call i32 @controle(i8* %2489, i32 %2490)
  store i32 %controle4alteredBB, i32* %collatzVar3
  br label %originalBB342

originalBB346alteredBB:                           ; preds = %originalBB346, %1072
  %2491 = load i32, i32* %collatzVar3
  %2492 = icmp sgt i32 %2491, 1
  br label %originalBB346

originalBB350alteredBB:                           ; preds = %originalBB350, %1091
  %2493 = load i32, i32* %collatzVar3
  %_351 = sub i32 %2493, 2
  %gen352 = mul i32 %_351, 2
  %_353 = sub i32 0, %2493
  %gen354 = add i32 %_353, 2
  %2494 = srem i32 %2493, 2
  %2495 = icmp eq i32 %2494, 0
  br label %originalBB350

originalBB358alteredBB:                           ; preds = %originalBB358, %1111
  %2496 = load i32, i32* %collatzVar3
  %_359 = sub i32 0, %2496
  %gen360 = add i32 %_359, 2
  %_361 = sub i32 %2496, 2
  %gen362 = mul i32 %_361, 2
  %2497 = sdiv i32 %2496, 2
  store i32 %2497, i32* %collatzVar3
  br label %originalBB358

originalBB366alteredBB:                           ; preds = %originalBB366, %1134
  %2498 = load i32, i32* %collatzVar3
  %2499 = sext i32 %2498 to i64
  %2500 = sext i32 -2 to i64
  %_367 = sub i64 0, %989
  %gen368 = add i64 %_367, %2499
  %_369 = shl i64 %989, %2499
  %_370 = shl i64 %989, %2499
  %_371 = sub i64 %989, %2499
  %gen372 = mul i64 %_371, %2499
  %_373 = shl i64 %989, %2499
  %_374 = shl i64 %989, %2499
  %_375 = sub i64 0, %989
  %gen376 = add i64 %_375, %2499
  %_377 = sub i64 %989, %2499
  %gen378 = mul i64 %_377, %2499
  %2501 = sub i64 %989, %2499
  %2502 = icmp sgt i64 %2501, %2500
  br label %originalBB366

originalBB382alteredBB:                           ; preds = %originalBB382, %1156
  %2503 = load i32, i32* %collatzVar3
  %2504 = sext i32 %2503 to i64
  %2505 = sext i32 2 to i64
  %_383 = sub i64 %989, %2504
  %gen384 = mul i64 %_383, %2504
  %_385 = sub i64 0, %989
  %gen386 = add i64 %_385, %2504
  %2506 = add i64 %989, %2504
  %2507 = icmp slt i64 %2506, %2505
  br label %originalBB382

originalBB390alteredBB:                           ; preds = %originalBB390, %1178
  br label %originalBB390

originalBB394alteredBB:                           ; preds = %originalBB394, %1195
  br label %originalBB394

originalBB398alteredBB:                           ; preds = %originalBB398, %1212
  %2508 = load i8*, i8** %18, align 8, !dbg !347
  %2509 = load i8, i8* %2508, align 1, !dbg !348
  %2510 = icmp ne i8 %2509, 0, !dbg !346
  br label %originalBB398

originalBB402alteredBB:                           ; preds = %originalBB402, %1232
  %2511 = load i8*, i8** %18, align 8, !dbg !349
  %2512 = getelementptr inbounds i8, i8* %2511, i32 1, !dbg !349
  store i8* %2512, i8** %18, align 8, !dbg !349
  %2513 = load i8, i8* %2511, align 1, !dbg !350
  %2514 = sext i8 %2513 to i32, !dbg !350
  br label %originalBB402

originalBB406alteredBB:                           ; preds = %originalBB406, %1253
  store i8 1, i8* %17, align 1, !dbg !352
  br label %originalBB406

originalBB410alteredBB:                           ; preds = %originalBB410, %1270
  store i8 0, i8* %17, align 1, !dbg !355
  br label %originalBB410

originalBB414alteredBB:                           ; preds = %originalBB414, %1287
  store i8 0, i8* %14, align 1, !dbg !357
  br label %originalBB414

originalBB418alteredBB:                           ; preds = %originalBB418, %1304
  br label %originalBB418

originalBB422alteredBB:                           ; preds = %originalBB422, %1321
  %2515 = load i32, i32* %12, align 4, !dbg !361
  %_423 = sub i32 0, %2515
  %gen424 = add i32 %_423, -1
  %2516 = add nsw i32 %2515, -1, !dbg !361
  store i32 %2516, i32* %12, align 4, !dbg !361
  %2517 = load i8**, i8*** %13, align 8, !dbg !362
  %2518 = getelementptr inbounds i8*, i8** %2517, i32 1, !dbg !362
  store i8** %2518, i8*** %13, align 8, !dbg !362
  br label %originalBB422

originalBB428alteredBB:                           ; preds = %originalBB428, %1342
  br label %originalBB428

originalBB432alteredBB:                           ; preds = %originalBB432, %1360
  %2519 = load i8, i8* %17, align 1, !dbg !367
  %2520 = trunc i8 %2519 to i1, !dbg !367
  br label %originalBB432

originalBB436alteredBB:                           ; preds = %originalBB436, %1379
  %2521 = load i8, i8* %15, align 1, !dbg !370
  %2522 = trunc i8 %2521 to i1, !dbg !370
  br label %originalBB436

originalBB440alteredBB:                           ; preds = %originalBB440, %1398
  br label %originalBB440

originalBB444alteredBB:                           ; preds = %originalBB444, %1415
  %2523 = load i32, i32* %12, align 4, !dbg !374
  %2524 = icmp sgt i32 %2523, 0, !dbg !375
  br label %originalBB444

originalBB448alteredBB:                           ; preds = %originalBB448, %1434
  %2525 = load i8**, i8*** %13, align 8, !dbg !379
  %2526 = getelementptr inbounds i8*, i8** %2525, i64 0, !dbg !379
  %2527 = load i8*, i8** %2526, align 8, !dbg !379
  store i8* %2527, i8** %20, align 8, !dbg !378
  call void @llvm.dbg.declare(metadata !4, metadata !553, metadata !DIExpression()), !dbg !381
  br label %originalBB448

originalBB452alteredBB:                           ; preds = %originalBB452, %1454
  %2528 = load i8*, i8** %20, align 8, !dbg !383
  %2529 = getelementptr inbounds i8, i8* %2528, i32 1, !dbg !383
  store i8* %2529, i8** %20, align 8, !dbg !383
  %2530 = load i8, i8* %2528, align 1, !dbg !384
  store i8 %2530, i8* %21, align 1, !dbg !385
  %2531 = icmp ne i8 %2530, 0, !dbg !382
  br label %originalBB452

originalBB456alteredBB:                           ; preds = %originalBB456, %1475
  %2532 = load i8, i8* %21, align 1, !dbg !386
  %2533 = zext i8 %2532 to i32, !dbg !386
  %2534 = icmp eq i32 %2533, 92, !dbg !389
  br label %originalBB456

originalBB460alteredBB:                           ; preds = %originalBB460, %1495
  %2535 = load i8*, i8** %20, align 8, !dbg !391
  %2536 = load i8, i8* %2535, align 1, !dbg !392
  %2537 = sext i8 %2536 to i32, !dbg !392
  %2538 = icmp ne i32 %2537, 0, !dbg !392
  br label %originalBB460

originalBB464alteredBB:                           ; preds = %originalBB464, %1516
  %2539 = load i8*, i8** %20, align 8, !dbg !394
  %2540 = getelementptr inbounds i8, i8* %2539, i32 1, !dbg !394
  store i8* %2540, i8** %20, align 8, !dbg !394
  %2541 = load i8, i8* %2539, align 1, !dbg !396
  store i8 %2541, i8* %21, align 1, !dbg !397
  %2542 = zext i8 %2541 to i32, !dbg !398
  br label %originalBB464

originalBB468alteredBB:                           ; preds = %originalBB468, %1537
  store i8 7, i8* %21, align 1, !dbg !400
  br label %originalBB468

originalBB472alteredBB:                           ; preds = %originalBB472, %1554
  store i8 8, i8* %21, align 1, !dbg !403
  br label %originalBB472

originalBB476alteredBB:                           ; preds = %originalBB476, %1571
  store i32 0, i32* %11, align 4, !dbg !405
  br label %originalBB476

originalBB480alteredBB:                           ; preds = %originalBB480, %1588
  store i8 27, i8* %21, align 1, !dbg !406
  br label %originalBB480

originalBB484alteredBB:                           ; preds = %originalBB484, %1605
  store i8 12, i8* %21, align 1, !dbg !408
  br label %originalBB484

originalBB488alteredBB:                           ; preds = %originalBB488, %1622
  store i8 10, i8* %21, align 1, !dbg !410
  br label %originalBB488

originalBB492alteredBB:                           ; preds = %originalBB492, %1640
  store i8 9, i8* %21, align 1, !dbg !414
  br label %originalBB492

originalBB496alteredBB:                           ; preds = %originalBB496, %1657
  store i8 11, i8* %21, align 1, !dbg !416
  br label %originalBB496

originalBB500alteredBB:                           ; preds = %originalBB500, %1674
  %2543 = load i8*, i8** %20, align 8, !dbg !421
  %2544 = load i8, i8* %2543, align 1, !dbg !422
  store i8 %2544, i8* %22, align 1, !dbg !420
  %2545 = call i16** @__ctype_b_loc() #15, !dbg !423
  %2546 = load i16*, i16** %2545, align 8, !dbg !423
  %2547 = load i8, i8* %22, align 1, !dbg !423
  %2548 = zext i8 %2547 to i32, !dbg !423
  %2549 = sext i32 %2548 to i64, !dbg !423
  %2550 = getelementptr inbounds i16, i16* %2546, i64 %2549, !dbg !423
  %2551 = load i16, i16* %2550, align 2, !dbg !423
  %2552 = zext i16 %2551 to i32, !dbg !423
  %_501 = shl i32 %2552, 4096
  %_502 = sub i32 %2552, 4096
  %gen503 = mul i32 %_502, 4096
  %2553 = and i32 %2552, 4096, !dbg !423
  %2554 = icmp ne i32 %2553, 0, !dbg !423
  br label %originalBB500

originalBB507alteredBB:                           ; preds = %originalBB507, %1703
  br label %originalBB507

originalBB511alteredBB:                           ; preds = %originalBB511, %1720
  %2555 = load i8*, i8** %20, align 8, !dbg !427
  %2556 = getelementptr inbounds i8, i8* %2555, i32 1, !dbg !427
  store i8* %2556, i8** %20, align 8, !dbg !427
  %2557 = load i8, i8* %22, align 1, !dbg !428
  %2558 = call i32 @hextobin(i8 zeroext %2557), !dbg !429
  %2559 = trunc i32 %2558 to i8, !dbg !429
  store i8 %2559, i8* %21, align 1, !dbg !430
  %2560 = load i8*, i8** %20, align 8, !dbg !431
  %2561 = load i8, i8* %2560, align 1, !dbg !432
  store i8 %2561, i8* %22, align 1, !dbg !433
  %2562 = call i16** @__ctype_b_loc() #15, !dbg !434
  %2563 = load i16*, i16** %2562, align 8, !dbg !434
  %2564 = load i8, i8* %22, align 1, !dbg !434
  %2565 = zext i8 %2564 to i32, !dbg !434
  %2566 = sext i32 %2565 to i64, !dbg !434
  %2567 = getelementptr inbounds i16, i16* %2563, i64 %2566, !dbg !434
  %2568 = load i16, i16* %2567, align 2, !dbg !434
  %2569 = zext i16 %2568 to i32, !dbg !434
  %_512 = sub i32 0, %2569
  %gen513 = add i32 %_512, 4096
  %_514 = shl i32 %2569, 4096
  %2570 = and i32 %2569, 4096, !dbg !434
  %2571 = icmp ne i32 %2570, 0, !dbg !434
  br label %originalBB511

originalBB518alteredBB:                           ; preds = %originalBB518, %1754
  %2572 = load i8*, i8** %20, align 8, !dbg !437
  %2573 = getelementptr inbounds i8, i8* %2572, i32 1, !dbg !437
  store i8* %2573, i8** %20, align 8, !dbg !437
  %2574 = load i8, i8* %21, align 1, !dbg !439
  %2575 = zext i8 %2574 to i32, !dbg !439
  %2576 = mul nsw i32 %2575, 16, !dbg !440
  %2577 = load i8, i8* %22, align 1, !dbg !441
  %2578 = call i32 @hextobin(i8 zeroext %2577), !dbg !442
  %2579 = add nsw i32 %2576, %2578, !dbg !443
  %2580 = trunc i32 %2579 to i8, !dbg !439
  store i8 %2580, i8* %21, align 1, !dbg !444
  br label %originalBB518

originalBB522alteredBB:                           ; preds = %originalBB522, %1780
  br label %originalBB522

originalBB526alteredBB:                           ; preds = %originalBB526, %1797
  store i8 0, i8* %21, align 1, !dbg !447
  %2581 = load i8*, i8** %20, align 8, !dbg !448
  %2582 = load i8, i8* %2581, align 1, !dbg !450
  %2583 = sext i8 %2582 to i32, !dbg !450
  %2584 = icmp sle i32 48, %2583, !dbg !451
  br label %originalBB526

originalBB530alteredBB:                           ; preds = %originalBB530, %1818
  %2585 = load i8*, i8** %20, align 8, !dbg !453
  %2586 = load i8, i8* %2585, align 1, !dbg !454
  %2587 = sext i8 %2586 to i32, !dbg !454
  %2588 = icmp sle i32 %2587, 55, !dbg !455
  br label %originalBB530

originalBB534alteredBB:                           ; preds = %originalBB534, %1839
  br label %originalBB534

originalBB538alteredBB:                           ; preds = %originalBB538, %1856
  %2589 = load i8*, i8** %20, align 8, !dbg !458
  %2590 = getelementptr inbounds i8, i8* %2589, i32 1, !dbg !458
  store i8* %2590, i8** %20, align 8, !dbg !458
  %2591 = load i8, i8* %2589, align 1, !dbg !459
  store i8 %2591, i8* %21, align 1, !dbg !460
  br label %originalBB538

originalBB542alteredBB:                           ; preds = %originalBB542, %1876
  %2592 = load i8, i8* %21, align 1, !dbg !462
  %2593 = zext i8 %2592 to i32, !dbg !462
  %_543 = sub i32 0, %2593
  %gen544 = add i32 %_543, 48
  %_545 = sub i32 %2593, 48
  %gen546 = mul i32 %_545, 48
  %_547 = sub i32 %2593, 48
  %gen548 = mul i32 %_547, 48
  %_549 = sub i32 %2593, 48
  %gen550 = mul i32 %_549, 48
  %_551 = sub i32 %2593, 48
  %gen552 = mul i32 %_551, 48
  %_553 = sub i32 0, %2593
  %gen554 = add i32 %_553, 48
  %_555 = sub i32 %2593, 48
  %gen556 = mul i32 %_555, 48
  %_557 = sub i32 %2593, 48
  %gen558 = mul i32 %_557, 48
  %2594 = sub nsw i32 %2593, 48, !dbg !462
  %2595 = trunc i32 %2594 to i8, !dbg !462
  store i8 %2595, i8* %21, align 1, !dbg !462
  %2596 = load i8*, i8** %20, align 8, !dbg !463
  %2597 = load i8, i8* %2596, align 1, !dbg !465
  %2598 = sext i8 %2597 to i32, !dbg !465
  %2599 = icmp sle i32 48, %2598, !dbg !466
  br label %originalBB542

originalBB562alteredBB:                           ; preds = %originalBB562, %1901
  %2600 = load i8*, i8** %20, align 8, !dbg !468
  %2601 = load i8, i8* %2600, align 1, !dbg !469
  %2602 = sext i8 %2601 to i32, !dbg !469
  %2603 = icmp sle i32 %2602, 55, !dbg !470
  br label %originalBB562

originalBB566alteredBB:                           ; preds = %originalBB566, %1922
  %2604 = load i8, i8* %21, align 1, !dbg !472
  %2605 = zext i8 %2604 to i32, !dbg !472
  %_567 = sub i32 0, %2605
  %gen568 = add i32 %_567, 8
  %_569 = sub i32 %2605, 8
  %gen570 = mul i32 %_569, 8
  %_571 = shl i32 %2605, 8
  %2606 = mul nsw i32 %2605, 8, !dbg !473
  %2607 = load i8*, i8** %20, align 8, !dbg !474
  %2608 = getelementptr inbounds i8, i8* %2607, i32 1, !dbg !474
  store i8* %2608, i8** %20, align 8, !dbg !474
  %2609 = load i8, i8* %2607, align 1, !dbg !475
  %2610 = sext i8 %2609 to i32, !dbg !475
  %_572 = sub i32 %2610, 48
  %gen573 = mul i32 %_572, 48
  %_574 = sub i32 0, %2610
  %gen575 = add i32 %_574, 48
  %_576 = sub i32 0, %2610
  %gen577 = add i32 %_576, 48
  %_578 = sub i32 %2610, 48
  %gen579 = mul i32 %_578, 48
  %_580 = sub i32 0, %2610
  %gen581 = add i32 %_580, 48
  %2611 = sub nsw i32 %2610, 48, !dbg !476
  %_582 = sub i32 %2606, %2611
  %gen583 = mul i32 %_582, %2611
  %_584 = sub i32 0, %2606
  %gen585 = add i32 %_584, %2611
  %_586 = sub i32 0, %2606
  %gen587 = add i32 %_586, %2611
  %_588 = sub i32 %2606, %2611
  %gen589 = mul i32 %_588, %2611
  %2612 = add nsw i32 %2606, %2611, !dbg !477
  %2613 = trunc i32 %2612 to i8, !dbg !472
  store i8 %2613, i8* %21, align 1, !dbg !478
  br label %originalBB566

originalBB593alteredBB:                           ; preds = %originalBB593, %1949
  %2614 = load i8*, i8** %20, align 8, !dbg !480
  %2615 = load i8, i8* %2614, align 1, !dbg !482
  %2616 = sext i8 %2615 to i32, !dbg !482
  %2617 = icmp sle i32 48, %2616, !dbg !483
  br label %originalBB593

originalBB597alteredBB:                           ; preds = %originalBB597, %1970
  %2618 = load i8*, i8** %20, align 8, !dbg !485
  %2619 = load i8, i8* %2618, align 1, !dbg !486
  %2620 = sext i8 %2619 to i32, !dbg !486
  %2621 = icmp sle i32 %2620, 55, !dbg !487
  br label %originalBB597

originalBB601alteredBB:                           ; preds = %originalBB601, %1991
  %2622 = load i8, i8* %21, align 1, !dbg !489
  %2623 = zext i8 %2622 to i32, !dbg !489
  %_602 = sub i32 0, %2623
  %gen603 = add i32 %_602, 8
  %2624 = mul nsw i32 %2623, 8, !dbg !490
  %2625 = load i8*, i8** %20, align 8, !dbg !491
  %2626 = getelementptr inbounds i8, i8* %2625, i32 1, !dbg !491
  store i8* %2626, i8** %20, align 8, !dbg !491
  %2627 = load i8, i8* %2625, align 1, !dbg !492
  %2628 = sext i8 %2627 to i32, !dbg !492
  %_604 = sub i32 0, %2628
  %gen605 = add i32 %_604, 48
  %_606 = sub i32 %2628, 48
  %gen607 = mul i32 %_606, 48
  %_608 = sub i32 %2628, 48
  %gen609 = mul i32 %_608, 48
  %2629 = sub nsw i32 %2628, 48, !dbg !493
  %_610 = sub i32 0, %2624
  %gen611 = add i32 %_610, %2629
  %_612 = sub i32 %2624, %2629
  %gen613 = mul i32 %_612, %2629
  %_614 = sub i32 0, %2624
  %gen615 = add i32 %_614, %2629
  %2630 = add nsw i32 %2624, %2629, !dbg !494
  %2631 = trunc i32 %2630 to i8, !dbg !489
  store i8 %2631, i8* %21, align 1, !dbg !495
  br label %originalBB601

originalBB619alteredBB:                           ; preds = %originalBB619, %2018
  br label %originalBB619

originalBB623alteredBB:                           ; preds = %originalBB623, %2035
  br label %originalBB623

originalBB627alteredBB:                           ; preds = %originalBB627, %2052
  br label %originalBB627

originalBB631alteredBB:                           ; preds = %originalBB631, %2069
  %2632 = call i32 @putchar_unlocked(i32 92), !dbg !501
  br label %originalBB631

originalBB635alteredBB:                           ; preds = %originalBB635, %2087
  br label %originalBB635

originalBB639alteredBB:                           ; preds = %originalBB639, %2104
  %2633 = load i8, i8* %21, align 1, !dbg !504
  %2634 = zext i8 %2633 to i32, !dbg !504
  %2635 = call i32 @putchar_unlocked(i32 %2634), !dbg !504
  br label %originalBB639

originalBB643alteredBB:                           ; preds = %originalBB643, %2124
  %2636 = load i32, i32* %12, align 4, !dbg !507
  %_644 = shl i32 %2636, -1
  %_645 = sub i32 %2636, -1
  %gen646 = mul i32 %_645, -1
  %2637 = add nsw i32 %2636, -1, !dbg !507
  store i32 %2637, i32* %12, align 4, !dbg !507
  %2638 = load i8**, i8*** %13, align 8, !dbg !508
  %2639 = getelementptr inbounds i8*, i8** %2638, i32 1, !dbg !508
  store i8** %2639, i8*** %13, align 8, !dbg !508
  %2640 = load i32, i32* %12, align 4, !dbg !509
  %2641 = icmp sgt i32 %2640, 0, !dbg !511
  br label %originalBB643

originalBB650alteredBB:                           ; preds = %originalBB650, %2147
  %2642 = call i32 @putchar_unlocked(i32 32), !dbg !513
  br label %originalBB650

originalBB654alteredBB:                           ; preds = %originalBB654, %2165
  br label %originalBB654

originalBB658alteredBB:                           ; preds = %originalBB658, %2182
  br label %originalBB658

originalBB662alteredBB:                           ; preds = %originalBB662, %2199
  br label %originalBB662

originalBB666alteredBB:                           ; preds = %originalBB666, %2219
  %2643 = load i8**, i8*** %13, align 8, !dbg !521
  %2644 = getelementptr inbounds i8*, i8** %2643, i64 0, !dbg !521
  %2645 = load i8*, i8** %2644, align 8, !dbg !521
  %2646 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !521
  %2647 = call i32 @fputs_unlocked(i8* %2645, %struct._IO_FILE* %2646), !dbg !521
  %2648 = load i32, i32* %12, align 4, !dbg !523
  %_667 = shl i32 %2648, -1
  %_668 = shl i32 %2648, -1
  %_669 = sub i32 %2648, -1
  %gen670 = mul i32 %_669, -1
  %_671 = shl i32 %2648, -1
  %2649 = add nsw i32 %2648, -1, !dbg !523
  store i32 %2649, i32* %12, align 4, !dbg !523
  %2650 = load i8**, i8*** %13, align 8, !dbg !524
  %2651 = getelementptr inbounds i8*, i8** %2650, i32 1, !dbg !524
  store i8** %2651, i8*** %13, align 8, !dbg !524
  %2652 = load i32, i32* %12, align 4, !dbg !525
  %2653 = icmp sgt i32 %2652, 0, !dbg !527
  br label %originalBB666

originalBB675alteredBB:                           ; preds = %originalBB675, %2249
  br label %originalBB675

originalBB679alteredBB:                           ; preds = %originalBB679, %2266
  br label %originalBB679

originalBB683alteredBB:                           ; preds = %originalBB683, %2283
  %2654 = load i8, i8* %14, align 1, !dbg !532
  %2655 = trunc i8 %2654 to i1, !dbg !532
  br label %originalBB683

originalBB687alteredBB:                           ; preds = %originalBB687, %2302
  %2656 = call i32 @putchar_unlocked(i32 10), !dbg !535
  br label %originalBB687

originalBB691alteredBB:                           ; preds = %originalBB691, %2320
  store i32 0, i32* %11, align 4, !dbg !536
  br label %originalBB691

originalBB695alteredBB:                           ; preds = %originalBB695, %2337
  %2657 = load i32, i32* %11, align 4, !dbg !537
  br label %originalBB695
}

; Function Attrs: nounwind
declare dso_local i8* @getenv(i8*) #3

; Function Attrs: nounwind
declare dso_local i8* @bindtextdomain(i8*, i8*) #3

; Function Attrs: nounwind
declare dso_local i8* @textdomain(i8*) #3

; Function Attrs: nounwind
declare dso_local i32 @atexit(void ()*) #3

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #8

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @hextobin(i8 zeroext) #5 !dbg !559 {
  %2 = load i32, i32* @x.5
  %3 = load i32, i32* @y.6
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  store i8 %0, i8* %11, align 1
  call void @llvm.dbg.declare(metadata i8* %11, metadata !562, metadata !DIExpression()), !dbg !563
  %12 = load i8, i8* %11, align 1, !dbg !564
  %13 = zext i8 %12 to i32, !dbg !564
  %14 = load i32, i32* @x.5
  %15 = load i32, i32* @y.6
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %13, label %22 [
    i32 97, label %42
    i32 65, label %42
    i32 98, label %59
    i32 66, label %59
    i32 99, label %76
    i32 67, label %76
    i32 100, label %93
    i32 68, label %93
    i32 101, label %110
    i32 69, label %110
    i32 102, label %111
    i32 70, label %111
  ], !dbg !565

22:                                               ; preds = %originalBBpart2
  %23 = load i32, i32* @x.5
  %24 = load i32, i32* @y.6
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load i8, i8* %11, align 1, !dbg !566
  %32 = zext i8 %31 to i32, !dbg !566
  %33 = sub nsw i32 %32, 48, !dbg !568
  store i32 %33, i32* %10, align 4, !dbg !569
  %34 = load i32, i32* @x.5
  %35 = load i32, i32* @y.6
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart29, label %originalBB1alteredBB

originalBBpart29:                                 ; preds = %originalBB1
  br label %128, !dbg !569

42:                                               ; preds = %originalBBpart2, %originalBBpart2
  %43 = load i32, i32* @x.5
  %44 = load i32, i32* @y.6
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %42, %originalBB11alteredBB
  store i32 10, i32* %10, align 4, !dbg !570
  %51 = load i32, i32* @x.5
  %52 = load i32, i32* @y.6
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  br label %128, !dbg !570

59:                                               ; preds = %originalBBpart2, %originalBBpart2
  %60 = load i32, i32* @x.5
  %61 = load i32, i32* @y.6
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %59, %originalBB15alteredBB
  store i32 11, i32* %10, align 4, !dbg !571
  %68 = load i32, i32* @x.5
  %69 = load i32, i32* @y.6
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  br label %128, !dbg !571

76:                                               ; preds = %originalBBpart2, %originalBBpart2
  %77 = load i32, i32* @x.5
  %78 = load i32, i32* @y.6
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %76, %originalBB19alteredBB
  store i32 12, i32* %10, align 4, !dbg !572
  %85 = load i32, i32* @x.5
  %86 = load i32, i32* @y.6
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br label %128, !dbg !572

93:                                               ; preds = %originalBBpart2, %originalBBpart2
  %94 = load i32, i32* @x.5
  %95 = load i32, i32* @y.6
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %93, %originalBB23alteredBB
  store i32 13, i32* %10, align 4, !dbg !573
  %102 = load i32, i32* @x.5
  %103 = load i32, i32* @y.6
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br label %128, !dbg !573

110:                                              ; preds = %originalBBpart2, %originalBBpart2
  store i32 14, i32* %10, align 4, !dbg !574
  br label %128, !dbg !574

111:                                              ; preds = %originalBBpart2, %originalBBpart2
  %112 = load i32, i32* @x.5
  %113 = load i32, i32* @y.6
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %111, %originalBB27alteredBB
  store i32 15, i32* %10, align 4, !dbg !575
  %120 = load i32, i32* @x.5
  %121 = load i32, i32* @y.6
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br label %128, !dbg !575

128:                                              ; preds = %originalBBpart229, %110, %originalBBpart225, %originalBBpart221, %originalBBpart217, %originalBBpart213, %originalBBpart29
  %129 = load i32, i32* @x.5
  %130 = load i32, i32* @y.6
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %128, %originalBB31alteredBB
  %137 = load i32, i32* %10, align 4, !dbg !576
  %138 = load i32, i32* @x.5
  %139 = load i32, i32* @y.6
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  ret i32 %137, !dbg !576

originalBBalteredBB:                              ; preds = %originalBB, %1
  %146 = alloca i32, align 4
  %147 = alloca i8, align 1
  store i8 %0, i8* %147, align 1
  call void @llvm.dbg.declare(metadata i8* %147, metadata !577, metadata !DIExpression()), !dbg !563
  %148 = load i8, i8* %147, align 1, !dbg !564
  %149 = zext i8 %148 to i32, !dbg !564
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %150 = load i8, i8* %11, align 1, !dbg !566
  %151 = zext i8 %150 to i32, !dbg !566
  %_ = shl i32 %151, 48
  %_2 = sub i32 0, %151
  %gen = add i32 %_2, 48
  %_3 = sub i32 %151, 48
  %gen4 = mul i32 %_3, 48
  %_5 = sub i32 0, %151
  %gen6 = add i32 %_5, 48
  %_7 = shl i32 %151, 48
  %152 = sub nsw i32 %151, 48, !dbg !568
  store i32 %152, i32* %10, align 4, !dbg !569
  br label %originalBB1

originalBB11alteredBB:                            ; preds = %originalBB11, %42
  store i32 10, i32* %10, align 4, !dbg !570
  br label %originalBB11

originalBB15alteredBB:                            ; preds = %originalBB15, %59
  store i32 11, i32* %10, align 4, !dbg !571
  br label %originalBB15

originalBB19alteredBB:                            ; preds = %originalBB19, %76
  store i32 12, i32* %10, align 4, !dbg !572
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %93
  store i32 13, i32* %10, align 4, !dbg !573
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %111
  store i32 15, i32* %10, align 4, !dbg !575
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %128
  %153 = load i32, i32* %10, align 4, !dbg !576
  br label %originalBB31
}

declare dso_local i32 @putchar_unlocked(i32) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @close_stdout() #5 !dbg !580 {
  %1 = load i32, i32* @x.7
  %2 = load i32, i32* @y.8
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !583
  %11 = call i32 @close_stream(%struct._IO_FILE* %10), !dbg !585
  %12 = icmp ne i32 %11, 0, !dbg !586
  %13 = load i32, i32* @x.7
  %14 = load i32, i32* @y.8
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %124, !dbg !587

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.7
  %23 = load i32, i32* @y.8
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i8, i8* @ignore_EPIPE, align 1, !dbg !588
  %31 = trunc i8 %30 to i1, !dbg !588
  %32 = load i32, i32* @x.7
  %33 = load i32, i32* @y.8
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %31, label %40, label %60, !dbg !589

40:                                               ; preds = %originalBBpart24
  %41 = load i32, i32* @x.7
  %42 = load i32, i32* @y.8
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %40, %originalBB6alteredBB
  %49 = call i32* @__errno_location() #15, !dbg !590
  %50 = load i32, i32* %49, align 4, !dbg !590
  %51 = icmp eq i32 %50, 32, !dbg !591
  %52 = load i32, i32* @x.7
  %53 = load i32, i32* @y.8
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %51, label %124, label %60, !dbg !592

60:                                               ; preds = %originalBBpart28, %originalBBpart24
  call void @llvm.dbg.declare(metadata i8** %9, metadata !593, metadata !DIExpression()), !dbg !595
  %61 = load i32, i32* @x.7
  %62 = load i32, i32* @y.8
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  %69 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.40, i64 0, i64 0)) #10, !dbg !596
  store i8* %69, i8** %9, align 8, !dbg !595
  %70 = load i8*, i8** @file_name, align 8, !dbg !597
  %71 = icmp ne i8* %70, null, !dbg !597
  %72 = load i32, i32* @x.7
  %73 = load i32, i32* @y.8
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %71, label %80, label %86, !dbg !599

80:                                               ; preds = %originalBBpart212
  %81 = call i32* @__errno_location() #15, !dbg !600
  %82 = load i32, i32* %81, align 4, !dbg !600
  %83 = load i8*, i8** @file_name, align 8, !dbg !601
  %84 = call i8* @quotearg_colon(i8* %83), !dbg !602
  %85 = load i8*, i8** %9, align 8, !dbg !603
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %82, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.41, i64 0, i64 0), i8* %84, i8* %85), !dbg !604
  br label %106, !dbg !604

86:                                               ; preds = %originalBBpart212
  %87 = load i32, i32* @x.7
  %88 = load i32, i32* @y.8
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %86, %originalBB14alteredBB
  %95 = call i32* @__errno_location() #15, !dbg !605
  %96 = load i32, i32* %95, align 4, !dbg !605
  %97 = load i8*, i8** %9, align 8, !dbg !606
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %96, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.42, i64 0, i64 0), i8* %97), !dbg !607
  %98 = load i32, i32* @x.7
  %99 = load i32, i32* @y.8
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %106

106:                                              ; preds = %originalBBpart216, %80
  %107 = load i32, i32* @x.7
  %108 = load i32, i32* @y.8
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %106, %originalBB18alteredBB
  %115 = load volatile i32, i32* @exit_failure, align 4, !dbg !608
  call void @_exit(i32 %115) #14, !dbg !609
  %116 = load i32, i32* @x.7
  %117 = load i32, i32* @y.8
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  unreachable, !dbg !609

124:                                              ; preds = %originalBBpart28, %originalBBpart2
  %125 = load i32, i32* @x.7
  %126 = load i32, i32* @y.8
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %124, %originalBB22alteredBB
  %133 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !610
  %134 = call i32 @close_stream(%struct._IO_FILE* %133), !dbg !612
  %135 = icmp ne i32 %134, 0, !dbg !613
  %136 = load i32, i32* @x.7
  %137 = load i32, i32* @y.8
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %135, label %144, label %162, !dbg !614

144:                                              ; preds = %originalBBpart224
  %145 = load i32, i32* @x.7
  %146 = load i32, i32* @y.8
  %147 = sub i32 %145, 1
  %148 = mul i32 %145, %147
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %150, %151
  br i1 %152, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %144, %originalBB26alteredBB
  %153 = load volatile i32, i32* @exit_failure, align 4, !dbg !615
  call void @_exit(i32 %153) #14, !dbg !616
  %154 = load i32, i32* @x.7
  %155 = load i32, i32* @y.8
  %156 = sub i32 %154, 1
  %157 = mul i32 %154, %156
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %159, %160
  br i1 %161, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  unreachable, !dbg !616

162:                                              ; preds = %originalBBpart224
  %163 = load i32, i32* @x.7
  %164 = load i32, i32* @y.8
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %162, %originalBB30alteredBB
  %171 = load i32, i32* @x.7
  %172 = load i32, i32* @y.8
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  ret void, !dbg !617

originalBBalteredBB:                              ; preds = %originalBB, %0
  %179 = alloca i8*, align 8
  %180 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !583
  %181 = call i32 @close_stream(%struct._IO_FILE* %180), !dbg !585
  %182 = icmp ne i32 %181, 0, !dbg !586
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %183 = load i8, i8* @ignore_EPIPE, align 1, !dbg !588
  %184 = trunc i8 %183 to i1, !dbg !588
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %40
  %185 = call i32* @__errno_location() #15, !dbg !590
  %186 = load i32, i32* %185, align 4, !dbg !590
  %187 = icmp eq i32 %186, 32, !dbg !591
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  %188 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.40, i64 0, i64 0)) #10, !dbg !596
  store i8* %188, i8** %9, align 8, !dbg !595
  %189 = load i8*, i8** @file_name, align 8, !dbg !597
  %190 = icmp ne i8* %189, null, !dbg !597
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %86
  %191 = call i32* @__errno_location() #15, !dbg !605
  %192 = load i32, i32* %191, align 4, !dbg !605
  %193 = load i8*, i8** %9, align 8, !dbg !606
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %192, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.42, i64 0, i64 0), i8* %193), !dbg !607
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %106
  %194 = load volatile i32, i32* @exit_failure, align 4, !dbg !608
  call void @_exit(i32 %194) #14, !dbg !609
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %124
  %195 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !610
  %196 = call i32 @close_stream(%struct._IO_FILE* %195), !dbg !612
  %197 = icmp ne i32 %196, 0, !dbg !613
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %144
  %198 = load volatile i32, i32* @exit_failure, align 4, !dbg !615
  call void @_exit(i32 %198) #14, !dbg !616
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %162
  br label %originalBB30
}

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #8

declare dso_local void @error(i32, i32, i8*, ...) #4

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #9

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_program_name(i8*) #5 !dbg !618 {
  %2 = load i32, i32* @x.9
  %3 = load i32, i32* @y.10
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !619, metadata !DIExpression()), !dbg !620
  call void @llvm.dbg.declare(metadata i8** %11, metadata !621, metadata !DIExpression()), !dbg !622
  call void @llvm.dbg.declare(metadata i8** %12, metadata !623, metadata !DIExpression()), !dbg !624
  %13 = load i8*, i8** %10, align 8, !dbg !625
  %14 = icmp eq i8* %13, null, !dbg !627
  %15 = load i32, i32* @x.9
  %16 = load i32, i32* @y.10
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %42, !dbg !628

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.9
  %25 = load i32, i32* @y.10
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !629
  %33 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.47, i64 0, i64 0), %struct._IO_FILE* %32), !dbg !631
  call void @abort() #12, !dbg !632
  %34 = load i32, i32* @x.9
  %35 = load i32, i32* @y.10
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !632

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.9
  %44 = load i32, i32* @y.10
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load i8*, i8** %10, align 8, !dbg !633
  %52 = call i8* @strrchr(i8* %51, i32 47) #13, !dbg !634
  store i8* %52, i8** %11, align 8, !dbg !635
  %53 = load i8*, i8** %11, align 8, !dbg !636
  %54 = icmp ne i8* %53, null, !dbg !637
  %55 = load i32, i32* @x.9
  %56 = load i32, i32* @y.10
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %54, label %63, label %82, !dbg !636

63:                                               ; preds = %originalBBpart28
  %64 = load i32, i32* @x.9
  %65 = load i32, i32* @y.10
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %63, %originalBB10alteredBB
  %72 = load i8*, i8** %11, align 8, !dbg !638
  %73 = getelementptr inbounds i8, i8* %72, i64 1, !dbg !639
  %74 = load i32, i32* @x.9
  %75 = load i32, i32* @y.10
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %84, !dbg !636

82:                                               ; preds = %originalBBpart28
  %83 = load i8*, i8** %10, align 8, !dbg !640
  br label %84, !dbg !636

84:                                               ; preds = %82, %originalBBpart212
  %85 = phi i8* [ %73, %originalBBpart212 ], [ %83, %82 ], !dbg !636
  %86 = load i32, i32* @x.9
  %87 = load i32, i32* @y.10
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %84, %originalBB14alteredBB
  store i8* %85, i8** %12, align 8, !dbg !641
  %94 = load i8*, i8** %12, align 8, !dbg !642
  %95 = load i8*, i8** %10, align 8, !dbg !644
  %96 = ptrtoint i8* %94 to i64, !dbg !645
  %97 = ptrtoint i8* %95 to i64, !dbg !645
  %98 = sub i64 %96, %97, !dbg !645
  %99 = icmp sge i64 %98, 7, !dbg !646
  %100 = load i32, i32* @x.9
  %101 = load i32, i32* @y.10
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart225, label %originalBB14alteredBB

originalBBpart225:                                ; preds = %originalBB14
  br i1 %99, label %108, label %187, !dbg !647

108:                                              ; preds = %originalBBpart225
  %109 = load i32, i32* @x.9
  %110 = load i32, i32* @y.10
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %108, %originalBB27alteredBB
  %117 = load i8*, i8** %12, align 8, !dbg !648
  %118 = getelementptr inbounds i8, i8* %117, i64 -7, !dbg !649
  %119 = call i32 @strncmp(i8* %118, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.48, i64 0, i64 0), i64 7) #13, !dbg !650
  %120 = icmp eq i32 %119, 0, !dbg !651
  %121 = load i32, i32* @x.9
  %122 = load i32, i32* @y.10
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br i1 %120, label %129, label %187, !dbg !652

129:                                              ; preds = %originalBBpart229
  %130 = load i32, i32* @x.9
  %131 = load i32, i32* @y.10
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %129, %originalBB31alteredBB
  %138 = load i8*, i8** %12, align 8, !dbg !653
  store i8* %138, i8** %10, align 8, !dbg !655
  %139 = load i8*, i8** %12, align 8, !dbg !656
  %140 = call i32 @strncmp(i8* %139, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.49, i64 0, i64 0), i64 3) #13, !dbg !658
  %141 = icmp eq i32 %140, 0, !dbg !659
  %142 = load i32, i32* @x.9
  %143 = load i32, i32* @y.10
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  br i1 %141, label %150, label %170, !dbg !660

150:                                              ; preds = %originalBBpart233
  %151 = load i32, i32* @x.9
  %152 = load i32, i32* @y.10
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %150, %originalBB35alteredBB
  %159 = load i8*, i8** %12, align 8, !dbg !661
  %160 = getelementptr inbounds i8, i8* %159, i64 3, !dbg !663
  store i8* %160, i8** %10, align 8, !dbg !664
  %161 = load i8*, i8** %10, align 8, !dbg !665
  store i8* %161, i8** @program_invocation_short_name, align 8, !dbg !666
  %162 = load i32, i32* @x.9
  %163 = load i32, i32* @y.10
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBBpart237, label %originalBB35alteredBB

originalBBpart237:                                ; preds = %originalBB35
  br label %170, !dbg !667

170:                                              ; preds = %originalBBpart237, %originalBBpart233
  %171 = load i32, i32* @x.9
  %172 = load i32, i32* @y.10
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %170, %originalBB39alteredBB
  %179 = load i32, i32* @x.9
  %180 = load i32, i32* @y.10
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  br label %187, !dbg !668

187:                                              ; preds = %originalBBpart241, %originalBBpart229, %originalBBpart225
  %188 = load i32, i32* @x.9
  %189 = load i32, i32* @y.10
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %187, %originalBB43alteredBB
  %196 = load i8*, i8** %10, align 8, !dbg !669
  store i8* %196, i8** @program_name, align 8, !dbg !670
  %197 = load i8*, i8** %10, align 8, !dbg !671
  store i8* %197, i8** @program_invocation_name, align 8, !dbg !672
  %198 = load i32, i32* @x.9
  %199 = load i32, i32* @y.10
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBBpart245, label %originalBB43alteredBB

originalBBpart245:                                ; preds = %originalBB43
  ret void, !dbg !673

originalBBalteredBB:                              ; preds = %originalBB, %1
  %206 = alloca i8*, align 8
  %207 = alloca i8*, align 8
  %208 = alloca i8*, align 8
  store i8* %0, i8** %206, align 8
  call void @llvm.dbg.declare(metadata i8** %206, metadata !674, metadata !DIExpression()), !dbg !620
  call void @llvm.dbg.declare(metadata i8** %207, metadata !680, metadata !DIExpression()), !dbg !622
  call void @llvm.dbg.declare(metadata i8** %208, metadata !681, metadata !DIExpression()), !dbg !624
  %209 = load i8*, i8** %206, align 8, !dbg !625
  %210 = icmp eq i8* %209, null, !dbg !627
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  %211 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !629
  %212 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.47, i64 0, i64 0), %struct._IO_FILE* %211), !dbg !631
  call void @abort() #12, !dbg !632
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %213 = load i8*, i8** %10, align 8, !dbg !633
  %214 = call i8* @strrchr(i8* %213, i32 47) #13, !dbg !634
  store i8* %214, i8** %11, align 8, !dbg !635
  %215 = load i8*, i8** %11, align 8, !dbg !636
  %216 = icmp ne i8* %215, null, !dbg !637
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %63
  %217 = load i8*, i8** %11, align 8, !dbg !638
  %218 = getelementptr inbounds i8, i8* %217, i64 1, !dbg !639
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %84
  store i8* %85, i8** %12, align 8, !dbg !641
  %219 = load i8*, i8** %12, align 8, !dbg !642
  %220 = load i8*, i8** %10, align 8, !dbg !644
  %221 = ptrtoint i8* %219 to i64, !dbg !645
  %222 = ptrtoint i8* %220 to i64, !dbg !645
  %_ = sub i64 0, %221
  %gen = add i64 %_, %222
  %_15 = sub i64 0, %221
  %gen16 = add i64 %_15, %222
  %_17 = sub i64 0, %221
  %gen18 = add i64 %_17, %222
  %_19 = sub i64 %221, %222
  %gen20 = mul i64 %_19, %222
  %_21 = shl i64 %221, %222
  %_22 = sub i64 0, %221
  %gen23 = add i64 %_22, %222
  %223 = sub i64 %221, %222, !dbg !645
  %224 = icmp sge i64 %223, 7, !dbg !646
  br label %originalBB14

originalBB27alteredBB:                            ; preds = %originalBB27, %108
  %225 = load i8*, i8** %12, align 8, !dbg !648
  %226 = getelementptr inbounds i8, i8* %225, i64 -7, !dbg !649
  %227 = call i32 @strncmp(i8* %226, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.48, i64 0, i64 0), i64 7) #13, !dbg !650
  %228 = icmp eq i32 %227, 0, !dbg !651
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %129
  %229 = load i8*, i8** %12, align 8, !dbg !653
  store i8* %229, i8** %10, align 8, !dbg !655
  %230 = load i8*, i8** %12, align 8, !dbg !656
  %231 = call i32 @strncmp(i8* %230, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.49, i64 0, i64 0), i64 3) #13, !dbg !658
  %232 = icmp eq i32 %231, 0, !dbg !659
  br label %originalBB31

originalBB35alteredBB:                            ; preds = %originalBB35, %150
  %233 = load i8*, i8** %12, align 8, !dbg !661
  %234 = getelementptr inbounds i8, i8* %233, i64 3, !dbg !663
  store i8* %234, i8** %10, align 8, !dbg !664
  %235 = load i8*, i8** %10, align 8, !dbg !665
  store i8* %235, i8** @program_invocation_short_name, align 8, !dbg !666
  br label %originalBB35

originalBB39alteredBB:                            ; preds = %originalBB39, %170
  br label %originalBB39

originalBB43alteredBB:                            ; preds = %originalBB43, %187
  %236 = load i8*, i8** %10, align 8, !dbg !669
  store i8* %236, i8** @program_name, align 8, !dbg !670
  %237 = load i8*, i8** %10, align 8, !dbg !671
  store i8* %237, i8** @program_invocation_name, align 8, !dbg !672
  br label %originalBB43
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #4

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #2

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @set_char_quoting(%struct.quoting_options*, i8 signext, i32) #5 !dbg !682 {
  %4 = load i32, i32* @x.11
  %5 = load i32, i32* @y.12
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca %struct.quoting_options*, align 8
  %13 = alloca i8, align 1
  %14 = alloca i32, align 4
  %15 = alloca i8, align 1
  %16 = alloca i32*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %12, metadata !686, metadata !DIExpression()), !dbg !687
  store i8 %1, i8* %13, align 1
  call void @llvm.dbg.declare(metadata i8* %13, metadata !688, metadata !DIExpression()), !dbg !689
  store i32 %2, i32* %14, align 4
  call void @llvm.dbg.declare(metadata i32* %14, metadata !690, metadata !DIExpression()), !dbg !691
  call void @llvm.dbg.declare(metadata i8* %15, metadata !692, metadata !DIExpression()), !dbg !693
  %19 = load i8, i8* %13, align 1, !dbg !694
  store i8 %19, i8* %15, align 1, !dbg !693
  call void @llvm.dbg.declare(metadata i32** %16, metadata !695, metadata !DIExpression()), !dbg !697
  %20 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !698
  %21 = icmp ne %struct.quoting_options* %20, null, !dbg !698
  %22 = load i32, i32* @x.11
  %23 = load i32, i32* @y.12
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %48, !dbg !698

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.11
  %32 = load i32, i32* @y.12
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !699
  %40 = load i32, i32* @x.11
  %41 = load i32, i32* @y.12
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %65, !dbg !698

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.11
  %50 = load i32, i32* @y.12
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.11
  %58 = load i32, i32* @y.12
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !698

65:                                               ; preds = %originalBBpart28, %originalBBpart24
  %66 = phi %struct.quoting_options* [ %39, %originalBBpart24 ], [ @default_quoting_options, %originalBBpart28 ], !dbg !698
  %67 = load i32, i32* @x.11
  %68 = load i32, i32* @y.12
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %75 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %66, i32 0, i32 2, !dbg !700
  %76 = getelementptr inbounds [8 x i32], [8 x i32]* %75, i64 0, i64 0, !dbg !701
  %77 = load i8, i8* %15, align 1, !dbg !702
  %78 = zext i8 %77 to i64, !dbg !702
  %79 = udiv i64 %78, 32, !dbg !703
  %80 = getelementptr inbounds i32, i32* %76, i64 %79, !dbg !704
  store i32* %80, i32** %16, align 8, !dbg !697
  call void @llvm.dbg.declare(metadata i32* %17, metadata !705, metadata !DIExpression()), !dbg !706
  %81 = load i8, i8* %15, align 1, !dbg !707
  %82 = zext i8 %81 to i64, !dbg !707
  %83 = urem i64 %82, 32, !dbg !708
  %84 = trunc i64 %83 to i32, !dbg !707
  store i32 %84, i32* %17, align 4, !dbg !706
  call void @llvm.dbg.declare(metadata i32* %18, metadata !709, metadata !DIExpression()), !dbg !710
  %85 = load i32*, i32** %16, align 8, !dbg !711
  %86 = load i32, i32* %85, align 4, !dbg !712
  %87 = load i32, i32* %17, align 4, !dbg !713
  %88 = lshr i32 %86, %87, !dbg !714
  %89 = and i32 %88, 1, !dbg !715
  store i32 %89, i32* %18, align 4, !dbg !710
  %90 = load i32, i32* %14, align 4, !dbg !716
  %91 = and i32 %90, 1, !dbg !717
  %92 = load i32, i32* %18, align 4, !dbg !718
  %93 = xor i32 %91, %92, !dbg !719
  %94 = load i32, i32* %17, align 4, !dbg !720
  %95 = shl i32 %93, %94, !dbg !721
  %96 = load i32*, i32** %16, align 8, !dbg !722
  %97 = load i32, i32* %96, align 4, !dbg !723
  %98 = xor i32 %97, %95, !dbg !723
  store i32 %98, i32* %96, align 4, !dbg !723
  %99 = load i32, i32* %18, align 4, !dbg !724
  %100 = load i32, i32* @x.11
  %101 = load i32, i32* @y.12
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart268, label %originalBB10alteredBB

originalBBpart268:                                ; preds = %originalBB10
  ret i32 %99, !dbg !725

originalBBalteredBB:                              ; preds = %originalBB, %3
  %108 = alloca %struct.quoting_options*, align 8
  %109 = alloca i8, align 1
  %110 = alloca i32, align 4
  %111 = alloca i8, align 1
  %112 = alloca i32*, align 8
  %113 = alloca i32, align 4
  %114 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %108, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %108, metadata !726, metadata !DIExpression()), !dbg !687
  store i8 %1, i8* %109, align 1
  call void @llvm.dbg.declare(metadata i8* %109, metadata !761, metadata !DIExpression()), !dbg !689
  store i32 %2, i32* %110, align 4
  call void @llvm.dbg.declare(metadata i32* %110, metadata !762, metadata !DIExpression()), !dbg !691
  call void @llvm.dbg.declare(metadata i8* %111, metadata !763, metadata !DIExpression()), !dbg !693
  %115 = load i8, i8* %109, align 1, !dbg !694
  store i8 %115, i8* %111, align 1, !dbg !693
  call void @llvm.dbg.declare(metadata i32** %112, metadata !764, metadata !DIExpression()), !dbg !697
  %116 = load %struct.quoting_options*, %struct.quoting_options** %108, align 8, !dbg !698
  %117 = icmp ne %struct.quoting_options* %116, null, !dbg !698
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %118 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !699
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %119 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %66, i32 0, i32 2, !dbg !700
  %120 = getelementptr inbounds [8 x i32], [8 x i32]* %119, i64 0, i64 0, !dbg !701
  %121 = load i8, i8* %15, align 1, !dbg !702
  %122 = zext i8 %121 to i64, !dbg !702
  %_ = sub i64 %122, 32
  %gen = mul i64 %_, 32
  %_11 = sub i64 0, %122
  %gen12 = add i64 %_11, 32
  %_13 = shl i64 %122, 32
  %123 = udiv i64 %122, 32, !dbg !703
  %124 = getelementptr inbounds i32, i32* %120, i64 %123, !dbg !704
  store i32* %124, i32** %16, align 8, !dbg !697
  call void @llvm.dbg.declare(metadata !4, metadata !765, metadata !DIExpression()), !dbg !706
  %125 = load i8, i8* %15, align 1, !dbg !707
  %126 = zext i8 %125 to i64, !dbg !707
  %_14 = sub i64 0, %126
  %gen15 = add i64 %_14, 32
  %_16 = sub i64 0, %126
  %gen17 = add i64 %_16, 32
  %_18 = sub i64 0, %126
  %gen19 = add i64 %_18, 32
  %_20 = shl i64 %126, 32
  %_21 = sub i64 0, %126
  %gen22 = add i64 %_21, 32
  %_23 = sub i64 0, %126
  %gen24 = add i64 %_23, 32
  %_25 = sub i64 %126, 32
  %gen26 = mul i64 %_25, 32
  %_27 = sub i64 %126, 32
  %gen28 = mul i64 %_27, 32
  %127 = urem i64 %126, 32, !dbg !708
  %128 = trunc i64 %127 to i32, !dbg !707
  store i32 %128, i32* %17, align 4, !dbg !706
  call void @llvm.dbg.declare(metadata !4, metadata !800, metadata !DIExpression()), !dbg !710
  %129 = load i32*, i32** %16, align 8, !dbg !711
  %130 = load i32, i32* %129, align 4, !dbg !712
  %131 = load i32, i32* %17, align 4, !dbg !713
  %_29 = shl i32 %130, %131
  %_30 = shl i32 %130, %131
  %_31 = shl i32 %130, %131
  %_32 = sub i32 0, %130
  %gen33 = add i32 %_32, %131
  %132 = lshr i32 %130, %131, !dbg !714
  %_34 = shl i32 %132, 1
  %_35 = sub i32 0, %132
  %gen36 = add i32 %_35, 1
  %_37 = shl i32 %132, 1
  %_38 = sub i32 0, %132
  %gen39 = add i32 %_38, 1
  %_40 = sub i32 0, %132
  %gen41 = add i32 %_40, 1
  %_42 = shl i32 %132, 1
  %_43 = sub i32 0, %132
  %gen44 = add i32 %_43, 1
  %133 = and i32 %132, 1, !dbg !715
  store i32 %133, i32* %18, align 4, !dbg !710
  %134 = load i32, i32* %14, align 4, !dbg !716
  %_45 = sub i32 %134, 1
  %gen46 = mul i32 %_45, 1
  %_47 = sub i32 %134, 1
  %gen48 = mul i32 %_47, 1
  %_49 = sub i32 0, %134
  %gen50 = add i32 %_49, 1
  %135 = and i32 %134, 1, !dbg !717
  %136 = load i32, i32* %18, align 4, !dbg !718
  %_51 = sub i32 %135, %136
  %gen52 = mul i32 %_51, %136
  %137 = xor i32 %135, %136, !dbg !719
  %138 = load i32, i32* %17, align 4, !dbg !720
  %_53 = shl i32 %137, %138
  %_54 = shl i32 %137, %138
  %_55 = sub i32 %137, %138
  %gen56 = mul i32 %_55, %138
  %139 = shl i32 %137, %138, !dbg !721
  %140 = load i32*, i32** %16, align 8, !dbg !722
  %141 = load i32, i32* %140, align 4, !dbg !723
  %_57 = sub i32 %141, %139
  %gen58 = mul i32 %_57, %139
  %_59 = sub i32 0, %141
  %gen60 = add i32 %_59, %139
  %_61 = sub i32 0, %141
  %gen62 = add i32 %_61, %139
  %_63 = sub i32 0, %141
  %gen64 = add i32 %_63, %139
  %_65 = sub i32 0, %141
  %gen66 = add i32 %_65, %139
  %142 = xor i32 %141, %139, !dbg !723
  store i32 %142, i32* %140, align 4, !dbg !723
  %143 = load i32, i32* %18, align 4, !dbg !724
  br label %originalBB10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char_mem(i8*, i64, i8 signext) #5 !dbg !801 {
  %4 = load i32, i32* @x.13
  %5 = load i32, i32* @y.14
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8, align 1
  %15 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !804, metadata !DIExpression()), !dbg !805
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !806, metadata !DIExpression()), !dbg !807
  store i8 %2, i8* %14, align 1
  call void @llvm.dbg.declare(metadata i8* %14, metadata !808, metadata !DIExpression()), !dbg !809
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %15, metadata !810, metadata !DIExpression()), !dbg !811
  %16 = bitcast %struct.quoting_options* %15 to i8*, !dbg !812
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !812
  %17 = load i8, i8* %14, align 1, !dbg !813
  %18 = call i32 @set_char_quoting(%struct.quoting_options* %15, i8 signext %17, i32 1), !dbg !814
  %19 = load i8*, i8** %12, align 8, !dbg !815
  %20 = load i64, i64* %13, align 8, !dbg !816
  %21 = call i8* @quotearg_n_options(i32 0, i8* %19, i64 %20, %struct.quoting_options* %15), !dbg !817
  %22 = load i32, i32* @x.13
  %23 = load i32, i32* @y.14
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %21, !dbg !818

originalBBalteredBB:                              ; preds = %originalBB, %3
  %30 = alloca i8*, align 8
  %31 = alloca i64, align 8
  %32 = alloca i8, align 1
  %33 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %30, align 8
  call void @llvm.dbg.declare(metadata i8** %30, metadata !819, metadata !DIExpression()), !dbg !805
  store i64 %1, i64* %31, align 8
  call void @llvm.dbg.declare(metadata i64* %31, metadata !851, metadata !DIExpression()), !dbg !807
  store i8 %2, i8* %32, align 1
  call void @llvm.dbg.declare(metadata i8* %32, metadata !852, metadata !DIExpression()), !dbg !809
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %33, metadata !853, metadata !DIExpression()), !dbg !811
  %34 = bitcast %struct.quoting_options* %33 to i8*, !dbg !812
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !812
  %35 = load i8, i8* %32, align 1, !dbg !813
  %36 = call i32 @set_char_quoting(%struct.quoting_options* %33, i8 signext %35, i32 1), !dbg !814
  %37 = load i8*, i8** %30, align 8, !dbg !815
  %38 = load i64, i64* %31, align 8, !dbg !816
  %39 = call i8* @quotearg_n_options(i32 0, i8* %37, i64 %38, %struct.quoting_options* %33), !dbg !817
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_options(i32, i8*, i64, %struct.quoting_options*) #5 !dbg !854 {
  %5 = load i32, i32* @x.15
  %6 = load i32, i32* @y.16
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca %struct.quoting_options*, align 8
  %17 = alloca i32, align 4
  %18 = alloca %struct.slotvec*, align 8
  %19 = alloca i8, align 1
  %20 = alloca i32, align 4
  %21 = alloca i64, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i32, align 4
  %24 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !859, metadata !DIExpression()), !dbg !860
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !861, metadata !DIExpression()), !dbg !862
  store i64 %2, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !863, metadata !DIExpression()), !dbg !864
  store %struct.quoting_options* %3, %struct.quoting_options** %16, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %16, metadata !865, metadata !DIExpression()), !dbg !866
  call void @llvm.dbg.declare(metadata i32* %17, metadata !867, metadata !DIExpression()), !dbg !868
  %25 = call i32* @__errno_location() #15, !dbg !869
  %26 = load i32, i32* %25, align 4, !dbg !869
  store i32 %26, i32* %17, align 4, !dbg !868
  call void @llvm.dbg.declare(metadata %struct.slotvec** %18, metadata !870, metadata !DIExpression()), !dbg !871
  %27 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !872
  store %struct.slotvec* %27, %struct.slotvec** %18, align 8, !dbg !871
  %28 = load i32, i32* %13, align 4, !dbg !873
  %29 = icmp slt i32 %28, 0, !dbg !875
  %30 = load i32, i32* @x.15
  %31 = load i32, i32* @y.16
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %29, label %38, label %55, !dbg !876

38:                                               ; preds = %originalBBpart2
  %39 = load i32, i32* @x.15
  %40 = load i32, i32* @y.16
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %38, %originalBB1alteredBB
  call void @abort() #12, !dbg !877
  %47 = load i32, i32* @x.15
  %48 = load i32, i32* @y.16
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !877

55:                                               ; preds = %originalBBpart2
  %56 = load i32, i32* @x.15
  %57 = load i32, i32* @y.16
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %55, %originalBB6alteredBB
  %64 = load i32, i32* @nslots, align 4, !dbg !878
  %65 = load i32, i32* %13, align 4, !dbg !880
  %66 = icmp sle i32 %64, %65, !dbg !881
  %67 = load i32, i32* @x.15
  %68 = load i32, i32* @y.16
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %75, label %245, !dbg !882

75:                                               ; preds = %originalBBpart28
  call void @llvm.dbg.declare(metadata i8* %19, metadata !883, metadata !DIExpression()), !dbg !885
  %76 = load i32, i32* @x.15
  %77 = load i32, i32* @y.16
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !886
  %85 = icmp eq %struct.slotvec* %84, @slotvec0, !dbg !887
  %86 = zext i1 %85 to i8, !dbg !885
  store i8 %86, i8* %19, align 1, !dbg !885
  call void @llvm.dbg.declare(metadata i32* %20, metadata !888, metadata !DIExpression()), !dbg !889
  store i32 2147483646, i32* %20, align 4, !dbg !889
  %87 = load i32, i32* %20, align 4, !dbg !890
  %88 = load i32, i32* %13, align 4, !dbg !892
  %89 = icmp slt i32 %87, %88, !dbg !893
  %90 = load i32, i32* @x.15
  %91 = load i32, i32* @y.16
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %89, label %98, label %115, !dbg !894

98:                                               ; preds = %originalBBpart212
  %99 = load i32, i32* @x.15
  %100 = load i32, i32* @y.16
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %98, %originalBB14alteredBB
  call void @xalloc_die() #14, !dbg !895
  %107 = load i32, i32* @x.15
  %108 = load i32, i32* @y.16
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  unreachable, !dbg !895

115:                                              ; preds = %originalBBpart212
  %116 = load i32, i32* @x.15
  %117 = load i32, i32* @y.16
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %115, %originalBB18alteredBB
  %124 = load i8, i8* %19, align 1, !dbg !896
  %125 = trunc i8 %124 to i1, !dbg !896
  %126 = load i32, i32* @x.15
  %127 = load i32, i32* @y.16
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %125, label %134, label %151, !dbg !896

134:                                              ; preds = %originalBBpart220
  %135 = load i32, i32* @x.15
  %136 = load i32, i32* @y.16
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %134, %originalBB22alteredBB
  %143 = load i32, i32* @x.15
  %144 = load i32, i32* @y.16
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %169, !dbg !896

151:                                              ; preds = %originalBBpart220
  %152 = load i32, i32* @x.15
  %153 = load i32, i32* @y.16
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %151, %originalBB26alteredBB
  %160 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !897
  %161 = load i32, i32* @x.15
  %162 = load i32, i32* @y.16
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %169, !dbg !896

169:                                              ; preds = %originalBBpart228, %originalBBpart224
  %170 = phi %struct.slotvec* [ null, %originalBBpart224 ], [ %160, %originalBBpart228 ], !dbg !896
  %171 = load i32, i32* @x.15
  %172 = load i32, i32* @y.16
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %169, %originalBB30alteredBB
  %179 = bitcast %struct.slotvec* %170 to i8*, !dbg !896
  %180 = load i32, i32* %13, align 4, !dbg !898
  %181 = add nsw i32 %180, 1, !dbg !899
  %182 = sext i32 %181 to i64, !dbg !900
  %183 = mul i64 %182, 16, !dbg !901
  %184 = call i8* @xrealloc(i8* %179, i64 %183), !dbg !902
  %185 = bitcast i8* %184 to %struct.slotvec*, !dbg !902
  store %struct.slotvec* %185, %struct.slotvec** %18, align 8, !dbg !903
  store %struct.slotvec* %185, %struct.slotvec** @slotvec, align 8, !dbg !904
  %186 = load i8, i8* %19, align 1, !dbg !905
  %187 = trunc i8 %186 to i1, !dbg !905
  %188 = load i32, i32* @x.15
  %189 = load i32, i32* @y.16
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBBpart239, label %originalBB30alteredBB

originalBBpart239:                                ; preds = %originalBB30
  br i1 %187, label %196, label %215, !dbg !907

196:                                              ; preds = %originalBBpart239
  %197 = load i32, i32* @x.15
  %198 = load i32, i32* @y.16
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %196, %originalBB41alteredBB
  %205 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !908
  %206 = bitcast %struct.slotvec* %205 to i8*, !dbg !909
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %206, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !909
  %207 = load i32, i32* @x.15
  %208 = load i32, i32* @y.16
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBBpart243, label %originalBB41alteredBB

originalBBpart243:                                ; preds = %originalBB41
  br label %215, !dbg !910

215:                                              ; preds = %originalBBpart243, %originalBBpart239
  %216 = load i32, i32* @x.15
  %217 = load i32, i32* @y.16
  %218 = sub i32 %216, 1
  %219 = mul i32 %216, %218
  %220 = urem i32 %219, 2
  %221 = icmp eq i32 %220, 0
  %222 = icmp slt i32 %217, 10
  %223 = or i1 %221, %222
  br i1 %223, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %215, %originalBB45alteredBB
  %224 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !911
  %225 = load i32, i32* @nslots, align 4, !dbg !912
  %226 = sext i32 %225 to i64, !dbg !913
  %227 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %224, i64 %226, !dbg !913
  %228 = bitcast %struct.slotvec* %227 to i8*, !dbg !914
  %229 = load i32, i32* %13, align 4, !dbg !915
  %230 = add nsw i32 %229, 1, !dbg !916
  %231 = load i32, i32* @nslots, align 4, !dbg !917
  %232 = sub nsw i32 %230, %231, !dbg !918
  %233 = sext i32 %232 to i64, !dbg !919
  %234 = mul i64 %233, 16, !dbg !920
  call void @llvm.memset.p0i8.i64(i8* align 8 %228, i8 0, i64 %234, i1 false), !dbg !914
  %235 = load i32, i32* %13, align 4, !dbg !921
  %236 = add nsw i32 %235, 1, !dbg !922
  store i32 %236, i32* @nslots, align 4, !dbg !923
  %237 = load i32, i32* @x.15
  %238 = load i32, i32* @y.16
  %239 = sub i32 %237, 1
  %240 = mul i32 %237, %239
  %241 = urem i32 %240, 2
  %242 = icmp eq i32 %241, 0
  %243 = icmp slt i32 %238, 10
  %244 = or i1 %242, %243
  br i1 %244, label %originalBBpart279, label %originalBB45alteredBB

originalBBpart279:                                ; preds = %originalBB45
  br label %245, !dbg !924

245:                                              ; preds = %originalBBpart279, %originalBBpart28
  call void @llvm.dbg.declare(metadata i64* %21, metadata !925, metadata !DIExpression()), !dbg !927
  %246 = load i32, i32* @x.15
  %247 = load i32, i32* @y.16
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBB81, label %originalBB81alteredBB

originalBB81:                                     ; preds = %245, %originalBB81alteredBB
  %254 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !928
  %255 = load i32, i32* %13, align 4, !dbg !929
  %256 = sext i32 %255 to i64, !dbg !928
  %257 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %254, i64 %256, !dbg !928
  %258 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %257, i32 0, i32 0, !dbg !930
  %259 = load i64, i64* %258, align 8, !dbg !930
  store i64 %259, i64* %21, align 8, !dbg !927
  call void @llvm.dbg.declare(metadata i8** %22, metadata !931, metadata !DIExpression()), !dbg !932
  %260 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !933
  %261 = load i32, i32* %13, align 4, !dbg !934
  %262 = sext i32 %261 to i64, !dbg !933
  %263 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %260, i64 %262, !dbg !933
  %264 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %263, i32 0, i32 1, !dbg !935
  %265 = load i8*, i8** %264, align 8, !dbg !935
  store i8* %265, i8** %22, align 8, !dbg !932
  call void @llvm.dbg.declare(metadata i32* %23, metadata !936, metadata !DIExpression()), !dbg !937
  %266 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !938
  %267 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %266, i32 0, i32 1, !dbg !939
  %268 = load i32, i32* %267, align 4, !dbg !939
  %269 = or i32 %268, 1, !dbg !940
  store i32 %269, i32* %23, align 4, !dbg !937
  call void @llvm.dbg.declare(metadata i64* %24, metadata !941, metadata !DIExpression()), !dbg !942
  %270 = load i8*, i8** %22, align 8, !dbg !943
  %271 = load i64, i64* %21, align 8, !dbg !944
  %272 = load i8*, i8** %14, align 8, !dbg !945
  %273 = load i64, i64* %15, align 8, !dbg !946
  %274 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !947
  %275 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %274, i32 0, i32 0, !dbg !948
  %276 = load i32, i32* %275, align 8, !dbg !948
  %277 = load i32, i32* %23, align 4, !dbg !949
  %278 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !950
  %279 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %278, i32 0, i32 2, !dbg !951
  %280 = getelementptr inbounds [8 x i32], [8 x i32]* %279, i64 0, i64 0, !dbg !950
  %281 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !952
  %282 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %281, i32 0, i32 3, !dbg !953
  %283 = load i8*, i8** %282, align 8, !dbg !953
  %284 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !954
  %285 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %284, i32 0, i32 4, !dbg !955
  %286 = load i8*, i8** %285, align 8, !dbg !955
  %287 = call i64 @quotearg_buffer_restyled(i8* %270, i64 %271, i8* %272, i64 %273, i32 %276, i32 %277, i32* %280, i8* %283, i8* %286), !dbg !956
  store i64 %287, i64* %24, align 8, !dbg !942
  %288 = load i64, i64* %21, align 8, !dbg !957
  %289 = load i64, i64* %24, align 8, !dbg !959
  %290 = icmp ule i64 %288, %289, !dbg !960
  %291 = load i32, i32* @x.15
  %292 = load i32, i32* @y.16
  %293 = sub i32 %291, 1
  %294 = mul i32 %291, %293
  %295 = urem i32 %294, 2
  %296 = icmp eq i32 %295, 0
  %297 = icmp slt i32 %292, 10
  %298 = or i1 %296, %297
  br i1 %298, label %originalBBpart292, label %originalBB81alteredBB

originalBBpart292:                                ; preds = %originalBB81
  br i1 %290, label %299, label %385, !dbg !961

299:                                              ; preds = %originalBBpart292
  %300 = load i32, i32* @x.15
  %301 = load i32, i32* @y.16
  %302 = sub i32 %300, 1
  %303 = mul i32 %300, %302
  %304 = urem i32 %303, 2
  %305 = icmp eq i32 %304, 0
  %306 = icmp slt i32 %301, 10
  %307 = or i1 %305, %306
  br i1 %307, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %299, %originalBB94alteredBB
  %308 = load i64, i64* %24, align 8, !dbg !962
  %309 = add i64 %308, 1, !dbg !964
  store i64 %309, i64* %21, align 8, !dbg !965
  %310 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !966
  %311 = load i32, i32* %13, align 4, !dbg !967
  %312 = sext i32 %311 to i64, !dbg !966
  %313 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %310, i64 %312, !dbg !966
  %314 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %313, i32 0, i32 0, !dbg !968
  store i64 %309, i64* %314, align 8, !dbg !969
  %315 = load i8*, i8** %22, align 8, !dbg !970
  %316 = icmp ne i8* %315, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !972
  %317 = load i32, i32* @x.15
  %318 = load i32, i32* @y.16
  %319 = sub i32 %317, 1
  %320 = mul i32 %317, %319
  %321 = urem i32 %320, 2
  %322 = icmp eq i32 %321, 0
  %323 = icmp slt i32 %318, 10
  %324 = or i1 %322, %323
  br i1 %324, label %originalBBpart2109, label %originalBB94alteredBB

originalBBpart2109:                               ; preds = %originalBB94
  br i1 %316, label %325, label %343, !dbg !973

325:                                              ; preds = %originalBBpart2109
  %326 = load i32, i32* @x.15
  %327 = load i32, i32* @y.16
  %328 = sub i32 %326, 1
  %329 = mul i32 %326, %328
  %330 = urem i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %331, %332
  br i1 %333, label %originalBB111, label %originalBB111alteredBB

originalBB111:                                    ; preds = %325, %originalBB111alteredBB
  %334 = load i8*, i8** %22, align 8, !dbg !974
  call void @free(i8* %334) #10, !dbg !975
  %335 = load i32, i32* @x.15
  %336 = load i32, i32* @y.16
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBBpart2113, label %originalBB111alteredBB

originalBBpart2113:                               ; preds = %originalBB111
  br label %343, !dbg !975

343:                                              ; preds = %originalBBpart2113, %originalBBpart2109
  %344 = load i32, i32* @x.15
  %345 = load i32, i32* @y.16
  %346 = sub i32 %344, 1
  %347 = mul i32 %344, %346
  %348 = urem i32 %347, 2
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %349, %350
  br i1 %351, label %originalBB115, label %originalBB115alteredBB

originalBB115:                                    ; preds = %343, %originalBB115alteredBB
  %352 = load i64, i64* %21, align 8, !dbg !976
  %353 = call noalias i8* @xcharalloc(i64 %352), !dbg !977
  store i8* %353, i8** %22, align 8, !dbg !978
  %354 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !979
  %355 = load i32, i32* %13, align 4, !dbg !980
  %356 = sext i32 %355 to i64, !dbg !979
  %357 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %354, i64 %356, !dbg !979
  %358 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %357, i32 0, i32 1, !dbg !981
  store i8* %353, i8** %358, align 8, !dbg !982
  %359 = load i8*, i8** %22, align 8, !dbg !983
  %360 = load i64, i64* %21, align 8, !dbg !984
  %361 = load i8*, i8** %14, align 8, !dbg !985
  %362 = load i64, i64* %15, align 8, !dbg !986
  %363 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !987
  %364 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %363, i32 0, i32 0, !dbg !988
  %365 = load i32, i32* %364, align 8, !dbg !988
  %366 = load i32, i32* %23, align 4, !dbg !989
  %367 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !990
  %368 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %367, i32 0, i32 2, !dbg !991
  %369 = getelementptr inbounds [8 x i32], [8 x i32]* %368, i64 0, i64 0, !dbg !990
  %370 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !992
  %371 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %370, i32 0, i32 3, !dbg !993
  %372 = load i8*, i8** %371, align 8, !dbg !993
  %373 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !994
  %374 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %373, i32 0, i32 4, !dbg !995
  %375 = load i8*, i8** %374, align 8, !dbg !995
  %376 = call i64 @quotearg_buffer_restyled(i8* %359, i64 %360, i8* %361, i64 %362, i32 %365, i32 %366, i32* %369, i8* %372, i8* %375), !dbg !996
  %377 = load i32, i32* @x.15
  %378 = load i32, i32* @y.16
  %379 = sub i32 %377, 1
  %380 = mul i32 %377, %379
  %381 = urem i32 %380, 2
  %382 = icmp eq i32 %381, 0
  %383 = icmp slt i32 %378, 10
  %384 = or i1 %382, %383
  br i1 %384, label %originalBBpart2117, label %originalBB115alteredBB

originalBBpart2117:                               ; preds = %originalBB115
  br label %385, !dbg !997

385:                                              ; preds = %originalBBpart2117, %originalBBpart292
  %386 = load i32, i32* @x.15
  %387 = load i32, i32* @y.16
  %388 = sub i32 %386, 1
  %389 = mul i32 %386, %388
  %390 = urem i32 %389, 2
  %391 = icmp eq i32 %390, 0
  %392 = icmp slt i32 %387, 10
  %393 = or i1 %391, %392
  br i1 %393, label %originalBB119, label %originalBB119alteredBB

originalBB119:                                    ; preds = %385, %originalBB119alteredBB
  %394 = load i32, i32* %17, align 4, !dbg !998
  %395 = call i32* @__errno_location() #15, !dbg !999
  store i32 %394, i32* %395, align 4, !dbg !1000
  %396 = load i8*, i8** %22, align 8, !dbg !1001
  %397 = load i32, i32* @x.15
  %398 = load i32, i32* @y.16
  %399 = sub i32 %397, 1
  %400 = mul i32 %397, %399
  %401 = urem i32 %400, 2
  %402 = icmp eq i32 %401, 0
  %403 = icmp slt i32 %398, 10
  %404 = or i1 %402, %403
  br i1 %404, label %originalBBpart2121, label %originalBB119alteredBB

originalBBpart2121:                               ; preds = %originalBB119
  ret i8* %396, !dbg !1002

originalBBalteredBB:                              ; preds = %originalBB, %4
  %405 = alloca i32, align 4
  %406 = alloca i8*, align 8
  %407 = alloca i64, align 8
  %408 = alloca %struct.quoting_options*, align 8
  %409 = alloca i32, align 4
  %410 = alloca %struct.slotvec*, align 8
  %411 = alloca i8, align 1
  %412 = alloca i32, align 4
  %413 = alloca i64, align 8
  %414 = alloca i8*, align 8
  %415 = alloca i32, align 4
  %416 = alloca i64, align 8
  store i32 %0, i32* %405, align 4
  call void @llvm.dbg.declare(metadata i32* %405, metadata !1003, metadata !DIExpression()), !dbg !860
  store i8* %1, i8** %406, align 8
  call void @llvm.dbg.declare(metadata i8** %406, metadata !1039, metadata !DIExpression()), !dbg !862
  store i64 %2, i64* %407, align 8
  call void @llvm.dbg.declare(metadata i64* %407, metadata !1040, metadata !DIExpression()), !dbg !864
  store %struct.quoting_options* %3, %struct.quoting_options** %408, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %408, metadata !1041, metadata !DIExpression()), !dbg !866
  call void @llvm.dbg.declare(metadata i32* %409, metadata !1042, metadata !DIExpression()), !dbg !868
  %417 = call i32* @__errno_location() #15, !dbg !869
  %418 = load i32, i32* %417, align 4, !dbg !869
  store i32 %418, i32* %409, align 4, !dbg !868
  call void @llvm.dbg.declare(metadata %struct.slotvec** %410, metadata !1043, metadata !DIExpression()), !dbg !871
  %419 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !872
  store %struct.slotvec* %419, %struct.slotvec** %410, align 8, !dbg !871
  %420 = load i32, i32* %405, align 4, !dbg !873
  %421 = icmp slt i32 %420, 0, !dbg !875
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %38
  call void @abort() #12, !dbg !877
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %55
  %422 = load i32, i32* @nslots, align 4, !dbg !878
  %423 = load i32, i32* %13, align 4, !dbg !880
  %424 = icmp sle i32 %422, %423, !dbg !881
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %425 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !886
  %426 = icmp eq %struct.slotvec* %425, @slotvec0, !dbg !887
  %427 = zext i1 %426 to i8, !dbg !885
  store i8 %427, i8* %19, align 1, !dbg !885
  call void @llvm.dbg.declare(metadata !4, metadata !1044, metadata !DIExpression()), !dbg !889
  store i32 2147483646, i32* %20, align 4, !dbg !889
  %428 = load i32, i32* %20, align 4, !dbg !890
  %429 = load i32, i32* %13, align 4, !dbg !892
  %430 = icmp slt i32 %428, %429, !dbg !893
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %98
  call void @xalloc_die() #14, !dbg !895
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %115
  %431 = load i8, i8* %19, align 1, !dbg !896
  %432 = trunc i8 %431 to i1, !dbg !896
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %134
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %151
  %433 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !897
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %169
  %434 = bitcast %struct.slotvec* %170 to i8*, !dbg !896
  %435 = load i32, i32* %13, align 4, !dbg !898
  %_ = sub i32 0, %435
  %gen = add i32 %_, 1
  %_31 = shl i32 %435, 1
  %_32 = sub i32 %435, 1
  %gen33 = mul i32 %_32, 1
  %_34 = sub i32 0, %435
  %gen35 = add i32 %_34, 1
  %_36 = sub i32 0, %435
  %gen37 = add i32 %_36, 1
  %436 = add nsw i32 %435, 1, !dbg !899
  %437 = sext i32 %436 to i64, !dbg !900
  %438 = mul i64 %437, 16, !dbg !901
  %439 = call i8* @xrealloc(i8* %434, i64 %438), !dbg !902
  %440 = bitcast i8* %439 to %struct.slotvec*, !dbg !902
  store %struct.slotvec* %440, %struct.slotvec** %18, align 8, !dbg !903
  store %struct.slotvec* %440, %struct.slotvec** @slotvec, align 8, !dbg !904
  %441 = load i8, i8* %19, align 1, !dbg !905
  %442 = trunc i8 %441 to i1, !dbg !905
  br label %originalBB30

originalBB41alteredBB:                            ; preds = %originalBB41, %196
  %443 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !908
  %444 = bitcast %struct.slotvec* %443 to i8*, !dbg !909
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %444, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !909
  br label %originalBB41

originalBB45alteredBB:                            ; preds = %originalBB45, %215
  %445 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !911
  %446 = load i32, i32* @nslots, align 4, !dbg !912
  %447 = sext i32 %446 to i64, !dbg !913
  %448 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %445, i64 %447, !dbg !913
  %449 = bitcast %struct.slotvec* %448 to i8*, !dbg !914
  %450 = load i32, i32* %13, align 4, !dbg !915
  %_46 = sub i32 0, %450
  %gen47 = add i32 %_46, 1
  %451 = add nsw i32 %450, 1, !dbg !916
  %452 = load i32, i32* @nslots, align 4, !dbg !917
  %_48 = sub i32 0, %451
  %gen49 = add i32 %_48, %452
  %_50 = sub i32 %451, %452
  %gen51 = mul i32 %_50, %452
  %_52 = sub i32 0, %451
  %gen53 = add i32 %_52, %452
  %_54 = sub i32 0, %451
  %gen55 = add i32 %_54, %452
  %_56 = sub i32 %451, %452
  %gen57 = mul i32 %_56, %452
  %_58 = sub i32 0, %451
  %gen59 = add i32 %_58, %452
  %453 = sub nsw i32 %451, %452, !dbg !918
  %454 = sext i32 %453 to i64, !dbg !919
  %_60 = sub i64 %454, 16
  %gen61 = mul i64 %_60, 16
  %_62 = shl i64 %454, 16
  %_63 = shl i64 %454, 16
  %_64 = sub i64 0, %454
  %gen65 = add i64 %_64, 16
  %455 = mul i64 %454, 16, !dbg !920
  call void @llvm.memset.p0i8.i64(i8* align 8 %449, i8 0, i64 %455, i1 false), !dbg !914
  %456 = load i32, i32* %13, align 4, !dbg !921
  %_66 = sub i32 0, %456
  %gen67 = add i32 %_66, 1
  %_68 = sub i32 %456, 1
  %gen69 = mul i32 %_68, 1
  %_70 = sub i32 %456, 1
  %gen71 = mul i32 %_70, 1
  %_72 = sub i32 0, %456
  %gen73 = add i32 %_72, 1
  %_74 = sub i32 0, %456
  %gen75 = add i32 %_74, 1
  %_76 = sub i32 %456, 1
  %gen77 = mul i32 %_76, 1
  %457 = add nsw i32 %456, 1, !dbg !922
  store i32 %457, i32* @nslots, align 4, !dbg !923
  br label %originalBB45

originalBB81alteredBB:                            ; preds = %originalBB81, %245
  %458 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !928
  %459 = load i32, i32* %13, align 4, !dbg !929
  %460 = sext i32 %459 to i64, !dbg !928
  %461 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %458, i64 %460, !dbg !928
  %462 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %461, i32 0, i32 0, !dbg !930
  %463 = load i64, i64* %462, align 8, !dbg !930
  store i64 %463, i64* %21, align 8, !dbg !927
  call void @llvm.dbg.declare(metadata !4, metadata !1082, metadata !DIExpression()), !dbg !932
  %464 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !933
  %465 = load i32, i32* %13, align 4, !dbg !934
  %466 = sext i32 %465 to i64, !dbg !933
  %467 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %464, i64 %466, !dbg !933
  %468 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %467, i32 0, i32 1, !dbg !935
  %469 = load i8*, i8** %468, align 8, !dbg !935
  store i8* %469, i8** %22, align 8, !dbg !932
  call void @llvm.dbg.declare(metadata !4, metadata !1119, metadata !DIExpression()), !dbg !937
  %470 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !938
  %471 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %470, i32 0, i32 1, !dbg !939
  %472 = load i32, i32* %471, align 4, !dbg !939
  %_82 = sub i32 %472, 1
  %gen83 = mul i32 %_82, 1
  %_84 = sub i32 0, %472
  %gen85 = add i32 %_84, 1
  %_86 = sub i32 %472, 1
  %gen87 = mul i32 %_86, 1
  %_88 = sub i32 0, %472
  %gen89 = add i32 %_88, 1
  %_90 = shl i32 %472, 1
  %473 = or i32 %472, 1, !dbg !940
  store i32 %473, i32* %23, align 4, !dbg !937
  call void @llvm.dbg.declare(metadata !4, metadata !1120, metadata !DIExpression()), !dbg !942
  %474 = load i8*, i8** %22, align 8, !dbg !943
  %475 = load i64, i64* %21, align 8, !dbg !944
  %476 = load i8*, i8** %14, align 8, !dbg !945
  %477 = load i64, i64* %15, align 8, !dbg !946
  %478 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !947
  %479 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %478, i32 0, i32 0, !dbg !948
  %480 = load i32, i32* %479, align 8, !dbg !948
  %481 = load i32, i32* %23, align 4, !dbg !949
  %482 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !950
  %483 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %482, i32 0, i32 2, !dbg !951
  %484 = getelementptr inbounds [8 x i32], [8 x i32]* %483, i64 0, i64 0, !dbg !950
  %485 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !952
  %486 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %485, i32 0, i32 3, !dbg !953
  %487 = load i8*, i8** %486, align 8, !dbg !953
  %488 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !954
  %489 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %488, i32 0, i32 4, !dbg !955
  %490 = load i8*, i8** %489, align 8, !dbg !955
  %491 = call i64 @quotearg_buffer_restyled(i8* %474, i64 %475, i8* %476, i64 %477, i32 %480, i32 %481, i32* %484, i8* %487, i8* %490), !dbg !956
  store i64 %491, i64* %24, align 8, !dbg !942
  %492 = load i64, i64* %21, align 8, !dbg !957
  %493 = load i64, i64* %24, align 8, !dbg !959
  %494 = icmp ule i64 %492, %493, !dbg !960
  br label %originalBB81

originalBB94alteredBB:                            ; preds = %originalBB94, %299
  %495 = load i64, i64* %24, align 8, !dbg !962
  %_95 = shl i64 %495, 1
  %_96 = sub i64 %495, 1
  %gen97 = mul i64 %_96, 1
  %_98 = shl i64 %495, 1
  %_99 = sub i64 %495, 1
  %gen100 = mul i64 %_99, 1
  %_101 = shl i64 %495, 1
  %_102 = sub i64 0, %495
  %gen103 = add i64 %_102, 1
  %_104 = sub i64 0, %495
  %gen105 = add i64 %_104, 1
  %_106 = sub i64 0, %495
  %gen107 = add i64 %_106, 1
  %496 = add i64 %495, 1, !dbg !964
  store i64 %496, i64* %21, align 8, !dbg !965
  %497 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !966
  %498 = load i32, i32* %13, align 4, !dbg !967
  %499 = sext i32 %498 to i64, !dbg !966
  %500 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %497, i64 %499, !dbg !966
  %501 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %500, i32 0, i32 0, !dbg !968
  store i64 %496, i64* %501, align 8, !dbg !969
  %502 = load i8*, i8** %22, align 8, !dbg !970
  %503 = icmp ne i8* %502, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !972
  br label %originalBB94

originalBB111alteredBB:                           ; preds = %originalBB111, %325
  %504 = load i8*, i8** %22, align 8, !dbg !974
  call void @free(i8* %504) #10, !dbg !975
  br label %originalBB111

originalBB115alteredBB:                           ; preds = %originalBB115, %343
  %505 = load i64, i64* %21, align 8, !dbg !976
  %506 = call noalias i8* @xcharalloc(i64 %505), !dbg !977
  store i8* %506, i8** %22, align 8, !dbg !978
  %507 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !979
  %508 = load i32, i32* %13, align 4, !dbg !980
  %509 = sext i32 %508 to i64, !dbg !979
  %510 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %507, i64 %509, !dbg !979
  %511 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %510, i32 0, i32 1, !dbg !981
  store i8* %506, i8** %511, align 8, !dbg !982
  %512 = load i8*, i8** %22, align 8, !dbg !983
  %513 = load i64, i64* %21, align 8, !dbg !984
  %514 = load i8*, i8** %14, align 8, !dbg !985
  %515 = load i64, i64* %15, align 8, !dbg !986
  %516 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !987
  %517 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %516, i32 0, i32 0, !dbg !988
  %518 = load i32, i32* %517, align 8, !dbg !988
  %519 = load i32, i32* %23, align 4, !dbg !989
  %520 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !990
  %521 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %520, i32 0, i32 2, !dbg !991
  %522 = getelementptr inbounds [8 x i32], [8 x i32]* %521, i64 0, i64 0, !dbg !990
  %523 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !992
  %524 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %523, i32 0, i32 3, !dbg !993
  %525 = load i8*, i8** %524, align 8, !dbg !993
  %526 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !994
  %527 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %526, i32 0, i32 4, !dbg !995
  %528 = load i8*, i8** %527, align 8, !dbg !995
  %529 = call i64 @quotearg_buffer_restyled(i8* %512, i64 %513, i8* %514, i64 %515, i32 %518, i32 %519, i32* %522, i8* %525, i8* %528), !dbg !996
  br label %originalBB115

originalBB119alteredBB:                           ; preds = %originalBB119, %385
  %530 = load i32, i32* %17, align 4, !dbg !998
  %531 = call i32* @__errno_location() #15, !dbg !999
  store i32 %530, i32* %531, align 4, !dbg !1000
  %532 = load i8*, i8** %22, align 8, !dbg !1001
  br label %originalBB119
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(i8*, i64, i8*, i64, i32, i32, i32*, i8*, i8*) #5 !dbg !1121 {
  %10 = load i32, i32* @x.17
  %11 = load i32, i32* @y.18
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  %18 = alloca i64, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i64, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i8*, align 8
  %32 = alloca i64, align 8
  %33 = alloca i8, align 1
  %34 = alloca i8, align 1
  %35 = alloca i8, align 1
  %36 = alloca i8, align 1
  %37 = alloca i8, align 1
  %38 = alloca i8, align 1
  %39 = alloca i8, align 1
  %40 = alloca i8, align 1
  %41 = alloca i8, align 1
  %42 = alloca i8, align 1
  %43 = alloca i8, align 1
  %44 = alloca i64, align 8
  %45 = alloca i8, align 1
  %46 = alloca %struct.__mbstate_t, align 4
  %47 = alloca i32, align 4
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  store i8* %0, i8** %19, align 8
  call void @llvm.dbg.declare(metadata i8** %19, metadata !1126, metadata !DIExpression()), !dbg !1127
  store i64 %1, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !1128, metadata !DIExpression()), !dbg !1129
  store i8* %2, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !1130, metadata !DIExpression()), !dbg !1131
  store i64 %3, i64* %22, align 8
  call void @llvm.dbg.declare(metadata i64* %22, metadata !1132, metadata !DIExpression()), !dbg !1133
  store i32 %4, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !1134, metadata !DIExpression()), !dbg !1135
  store i32 %5, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !1136, metadata !DIExpression()), !dbg !1137
  store i32* %6, i32** %25, align 8
  call void @llvm.dbg.declare(metadata i32** %25, metadata !1138, metadata !DIExpression()), !dbg !1139
  store i8* %7, i8** %26, align 8
  call void @llvm.dbg.declare(metadata i8** %26, metadata !1140, metadata !DIExpression()), !dbg !1141
  store i8* %8, i8** %27, align 8
  call void @llvm.dbg.declare(metadata i8** %27, metadata !1142, metadata !DIExpression()), !dbg !1143
  call void @llvm.dbg.declare(metadata i64* %28, metadata !1144, metadata !DIExpression()), !dbg !1145
  call void @llvm.dbg.declare(metadata i64* %29, metadata !1146, metadata !DIExpression()), !dbg !1147
  store i64 0, i64* %29, align 8, !dbg !1147
  call void @llvm.dbg.declare(metadata i64* %30, metadata !1148, metadata !DIExpression()), !dbg !1149
  store i64 0, i64* %30, align 8, !dbg !1149
  call void @llvm.dbg.declare(metadata i8** %31, metadata !1150, metadata !DIExpression()), !dbg !1151
  store i8* null, i8** %31, align 8, !dbg !1151
  call void @llvm.dbg.declare(metadata i64* %32, metadata !1152, metadata !DIExpression()), !dbg !1153
  store i64 0, i64* %32, align 8, !dbg !1153
  call void @llvm.dbg.declare(metadata i8* %33, metadata !1154, metadata !DIExpression()), !dbg !1155
  store i8 0, i8* %33, align 1, !dbg !1155
  call void @llvm.dbg.declare(metadata i8* %34, metadata !1156, metadata !DIExpression()), !dbg !1157
  %51 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1158
  %52 = icmp eq i64 %51, 1, !dbg !1159
  %53 = zext i1 %52 to i8, !dbg !1157
  store i8 %53, i8* %34, align 1, !dbg !1157
  call void @llvm.dbg.declare(metadata i8* %35, metadata !1160, metadata !DIExpression()), !dbg !1161
  %54 = load i32, i32* %24, align 4, !dbg !1162
  %55 = and i32 %54, 2, !dbg !1163
  %56 = icmp ne i32 %55, 0, !dbg !1164
  %57 = zext i1 %56 to i8, !dbg !1161
  store i8 %57, i8* %35, align 1, !dbg !1161
  call void @llvm.dbg.declare(metadata i8* %36, metadata !1165, metadata !DIExpression()), !dbg !1166
  store i8 0, i8* %36, align 1, !dbg !1166
  call void @llvm.dbg.declare(metadata i8* %37, metadata !1167, metadata !DIExpression()), !dbg !1168
  store i8 0, i8* %37, align 1, !dbg !1168
  call void @llvm.dbg.declare(metadata i8* %38, metadata !1169, metadata !DIExpression()), !dbg !1170
  store i8 1, i8* %38, align 1, !dbg !1170
  %58 = load i32, i32* @x.17
  %59 = load i32, i32* @y.18
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %66, !dbg !1171

66:                                               ; preds = %originalBBpart21639, %originalBBpart2
  call void @llvm.dbg.label(metadata !1172), !dbg !1173
  %67 = load i32, i32* @x.17
  %68 = load i32, i32* @y.18
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %66, %originalBB6alteredBB
  %75 = load i32, i32* %23, align 4, !dbg !1174
  %76 = load i32, i32* @x.17
  %77 = load i32, i32* @y.18
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  switch i32 %75, label %680 [
    i32 6, label %84
    i32 5, label %101
    i32 7, label %198
    i32 8, label %215
    i32 9, label %215
    i32 10, label %215
    i32 3, label %447
    i32 1, label %464
    i32 4, label %481
    i32 2, label %534
    i32 0, label %663
  ], !dbg !1175

84:                                               ; preds = %originalBBpart28
  %85 = load i32, i32* @x.17
  %86 = load i32, i32* @y.18
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %84, %originalBB10alteredBB
  store i32 5, i32* %23, align 4, !dbg !1176
  store i8 1, i8* %35, align 1, !dbg !1178
  %93 = load i32, i32* @x.17
  %94 = load i32, i32* @y.18
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %101, !dbg !1179

101:                                              ; preds = %originalBBpart212, %originalBBpart28
  %102 = load i32, i32* @x.17
  %103 = load i32, i32* @y.18
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %101, %originalBB14alteredBB
  %110 = load i8, i8* %35, align 1, !dbg !1180
  %111 = trunc i8 %110 to i1, !dbg !1180
  %112 = load i32, i32* @x.17
  %113 = load i32, i32* @y.18
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %111, label %197, label %120, !dbg !1182

120:                                              ; preds = %originalBBpart216
  %121 = load i32, i32* @x.17
  %122 = load i32, i32* @y.18
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %120, %originalBB18alteredBB
  %129 = load i32, i32* @x.17
  %130 = load i32, i32* @y.18
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %137, !dbg !1183

137:                                              ; preds = %originalBBpart220
  %138 = load i32, i32* @x.17
  %139 = load i32, i32* @y.18
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %137, %originalBB22alteredBB
  %146 = load i64, i64* %29, align 8, !dbg !1184
  %147 = load i64, i64* %20, align 8, !dbg !1184
  %148 = icmp ult i64 %146, %147, !dbg !1184
  %149 = load i32, i32* @x.17
  %150 = load i32, i32* @y.18
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %148, label %157, label %177, !dbg !1187

157:                                              ; preds = %originalBBpart224
  %158 = load i32, i32* @x.17
  %159 = load i32, i32* @y.18
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %157, %originalBB26alteredBB
  %166 = load i8*, i8** %19, align 8, !dbg !1184
  %167 = load i64, i64* %29, align 8, !dbg !1184
  %168 = getelementptr inbounds i8, i8* %166, i64 %167, !dbg !1184
  store i8 34, i8* %168, align 1, !dbg !1184
  %169 = load i32, i32* @x.17
  %170 = load i32, i32* @y.18
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %177, !dbg !1184

177:                                              ; preds = %originalBBpart228, %originalBBpart224
  %178 = load i32, i32* @x.17
  %179 = load i32, i32* @y.18
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %177, %originalBB30alteredBB
  %186 = load i64, i64* %29, align 8, !dbg !1187
  %187 = add i64 %186, 1, !dbg !1187
  store i64 %187, i64* %29, align 8, !dbg !1187
  %188 = load i32, i32* @x.17
  %189 = load i32, i32* @y.18
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBBpart238, label %originalBB30alteredBB

originalBBpart238:                                ; preds = %originalBB30
  br label %196, !dbg !1187

196:                                              ; preds = %originalBBpart238
  br label %197, !dbg !1187

197:                                              ; preds = %196, %originalBBpart216
  store i8 1, i8* %33, align 1, !dbg !1188
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.52, i64 0, i64 0), i8** %31, align 8, !dbg !1189
  store i64 1, i64* %32, align 8, !dbg !1190
  br label %697, !dbg !1191

198:                                              ; preds = %originalBBpart28
  %199 = load i32, i32* @x.17
  %200 = load i32, i32* @y.18
  %201 = sub i32 %199, 1
  %202 = mul i32 %199, %201
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %204, %205
  br i1 %206, label %originalBB40, label %originalBB40alteredBB

originalBB40:                                     ; preds = %198, %originalBB40alteredBB
  store i8 1, i8* %33, align 1, !dbg !1192
  store i8 0, i8* %35, align 1, !dbg !1193
  %207 = load i32, i32* @x.17
  %208 = load i32, i32* @y.18
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBBpart242, label %originalBB40alteredBB

originalBBpart242:                                ; preds = %originalBB40
  br label %697, !dbg !1194

215:                                              ; preds = %originalBBpart28, %originalBBpart28, %originalBBpart28
  %216 = load i32, i32* @x.17
  %217 = load i32, i32* @y.18
  %218 = sub i32 %216, 1
  %219 = mul i32 %216, %218
  %220 = urem i32 %219, 2
  %221 = icmp eq i32 %220, 0
  %222 = icmp slt i32 %217, 10
  %223 = or i1 %221, %222
  br i1 %223, label %originalBB44, label %originalBB44alteredBB

originalBB44:                                     ; preds = %215, %originalBB44alteredBB
  %224 = load i32, i32* %23, align 4, !dbg !1195
  %225 = icmp ne i32 %224, 10, !dbg !1198
  %226 = load i32, i32* @x.17
  %227 = load i32, i32* @y.18
  %228 = sub i32 %226, 1
  %229 = mul i32 %226, %228
  %230 = urem i32 %229, 2
  %231 = icmp eq i32 %230, 0
  %232 = icmp slt i32 %227, 10
  %233 = or i1 %231, %232
  br i1 %233, label %originalBBpart246, label %originalBB44alteredBB

originalBBpart246:                                ; preds = %originalBB44
  br i1 %225, label %234, label %255, !dbg !1199

234:                                              ; preds = %originalBBpart246
  %235 = load i32, i32* @x.17
  %236 = load i32, i32* @y.18
  %237 = sub i32 %235, 1
  %238 = mul i32 %235, %237
  %239 = urem i32 %238, 2
  %240 = icmp eq i32 %239, 0
  %241 = icmp slt i32 %236, 10
  %242 = or i1 %240, %241
  br i1 %242, label %originalBB48, label %originalBB48alteredBB

originalBB48:                                     ; preds = %234, %originalBB48alteredBB
  %243 = load i32, i32* %23, align 4, !dbg !1200
  %244 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.53, i64 0, i64 0), i32 %243), !dbg !1202
  store i8* %244, i8** %26, align 8, !dbg !1203
  %245 = load i32, i32* %23, align 4, !dbg !1204
  %246 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.54, i64 0, i64 0), i32 %245), !dbg !1205
  store i8* %246, i8** %27, align 8, !dbg !1206
  %247 = load i32, i32* @x.17
  %248 = load i32, i32* @y.18
  %249 = sub i32 %247, 1
  %250 = mul i32 %247, %249
  %251 = urem i32 %250, 2
  %252 = icmp eq i32 %251, 0
  %253 = icmp slt i32 %248, 10
  %254 = or i1 %252, %253
  br i1 %254, label %originalBBpart250, label %originalBB48alteredBB

originalBBpart250:                                ; preds = %originalBB48
  br label %255, !dbg !1207

255:                                              ; preds = %originalBBpart250, %originalBBpart246
  %256 = load i32, i32* @x.17
  %257 = load i32, i32* @y.18
  %258 = sub i32 %256, 1
  %259 = mul i32 %256, %258
  %260 = urem i32 %259, 2
  %261 = icmp eq i32 %260, 0
  %262 = icmp slt i32 %257, 10
  %263 = or i1 %261, %262
  br i1 %263, label %originalBB52, label %originalBB52alteredBB

originalBB52:                                     ; preds = %255, %originalBB52alteredBB
  %264 = load i8, i8* %35, align 1, !dbg !1208
  %265 = trunc i8 %264 to i1, !dbg !1208
  %266 = load i32, i32* @x.17
  %267 = load i32, i32* @y.18
  %268 = sub i32 %266, 1
  %269 = mul i32 %266, %268
  %270 = urem i32 %269, 2
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %271, %272
  br i1 %273, label %originalBBpart254, label %originalBB52alteredBB

originalBBpart254:                                ; preds = %originalBB52
  br i1 %265, label %427, label %274, !dbg !1210

274:                                              ; preds = %originalBBpart254
  %275 = load i32, i32* @x.17
  %276 = load i32, i32* @y.18
  %277 = sub i32 %275, 1
  %278 = mul i32 %275, %277
  %279 = urem i32 %278, 2
  %280 = icmp eq i32 %279, 0
  %281 = icmp slt i32 %276, 10
  %282 = or i1 %280, %281
  br i1 %282, label %originalBB56, label %originalBB56alteredBB

originalBB56:                                     ; preds = %274, %originalBB56alteredBB
  %283 = load i8*, i8** %26, align 8, !dbg !1211
  store i8* %283, i8** %31, align 8, !dbg !1213
  %284 = load i32, i32* @x.17
  %285 = load i32, i32* @y.18
  %286 = sub i32 %284, 1
  %287 = mul i32 %284, %286
  %288 = urem i32 %287, 2
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %289, %290
  br i1 %291, label %originalBBpart258, label %originalBB56alteredBB

originalBBpart258:                                ; preds = %originalBB56
  br label %292, !dbg !1214

292:                                              ; preds = %407, %originalBBpart258
  %293 = load i32, i32* @x.17
  %294 = load i32, i32* @y.18
  %295 = sub i32 %293, 1
  %296 = mul i32 %293, %295
  %297 = urem i32 %296, 2
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %298, %299
  br i1 %300, label %originalBB60, label %originalBB60alteredBB

originalBB60:                                     ; preds = %292, %originalBB60alteredBB
  %301 = load i8*, i8** %31, align 8, !dbg !1215
  %302 = load i8, i8* %301, align 1, !dbg !1217
  %303 = icmp ne i8 %302, 0, !dbg !1218
  %304 = load i32, i32* @x.17
  %305 = load i32, i32* @y.18
  %306 = sub i32 %304, 1
  %307 = mul i32 %304, %306
  %308 = urem i32 %307, 2
  %309 = icmp eq i32 %308, 0
  %310 = icmp slt i32 %305, 10
  %311 = or i1 %309, %310
  br i1 %311, label %originalBBpart262, label %originalBB60alteredBB

originalBBpart262:                                ; preds = %originalBB60
  br i1 %303, label %312, label %410, !dbg !1218

312:                                              ; preds = %originalBBpart262
  %313 = load i32, i32* @x.17
  %314 = load i32, i32* @y.18
  %315 = sub i32 %313, 1
  %316 = mul i32 %313, %315
  %317 = urem i32 %316, 2
  %318 = icmp eq i32 %317, 0
  %319 = icmp slt i32 %314, 10
  %320 = or i1 %318, %319
  br i1 %320, label %originalBB64, label %originalBB64alteredBB

originalBB64:                                     ; preds = %312, %originalBB64alteredBB
  %321 = load i32, i32* @x.17
  %322 = load i32, i32* @y.18
  %323 = sub i32 %321, 1
  %324 = mul i32 %321, %323
  %325 = urem i32 %324, 2
  %326 = icmp eq i32 %325, 0
  %327 = icmp slt i32 %322, 10
  %328 = or i1 %326, %327
  br i1 %328, label %originalBBpart266, label %originalBB64alteredBB

originalBBpart266:                                ; preds = %originalBB64
  br label %329, !dbg !1219

329:                                              ; preds = %originalBBpart266
  %330 = load i32, i32* @x.17
  %331 = load i32, i32* @y.18
  %332 = sub i32 %330, 1
  %333 = mul i32 %330, %332
  %334 = urem i32 %333, 2
  %335 = icmp eq i32 %334, 0
  %336 = icmp slt i32 %331, 10
  %337 = or i1 %335, %336
  br i1 %337, label %originalBB68, label %originalBB68alteredBB

originalBB68:                                     ; preds = %329, %originalBB68alteredBB
  %338 = load i64, i64* %29, align 8, !dbg !1220
  %339 = load i64, i64* %20, align 8, !dbg !1220
  %340 = icmp ult i64 %338, %339, !dbg !1220
  %341 = load i32, i32* @x.17
  %342 = load i32, i32* @y.18
  %343 = sub i32 %341, 1
  %344 = mul i32 %341, %343
  %345 = urem i32 %344, 2
  %346 = icmp eq i32 %345, 0
  %347 = icmp slt i32 %342, 10
  %348 = or i1 %346, %347
  br i1 %348, label %originalBBpart270, label %originalBB68alteredBB

originalBBpart270:                                ; preds = %originalBB68
  br i1 %340, label %349, label %371, !dbg !1223

349:                                              ; preds = %originalBBpart270
  %350 = load i32, i32* @x.17
  %351 = load i32, i32* @y.18
  %352 = sub i32 %350, 1
  %353 = mul i32 %350, %352
  %354 = urem i32 %353, 2
  %355 = icmp eq i32 %354, 0
  %356 = icmp slt i32 %351, 10
  %357 = or i1 %355, %356
  br i1 %357, label %originalBB72, label %originalBB72alteredBB

originalBB72:                                     ; preds = %349, %originalBB72alteredBB
  %358 = load i8*, i8** %31, align 8, !dbg !1220
  %359 = load i8, i8* %358, align 1, !dbg !1220
  %360 = load i8*, i8** %19, align 8, !dbg !1220
  %361 = load i64, i64* %29, align 8, !dbg !1220
  %362 = getelementptr inbounds i8, i8* %360, i64 %361, !dbg !1220
  store i8 %359, i8* %362, align 1, !dbg !1220
  %363 = load i32, i32* @x.17
  %364 = load i32, i32* @y.18
  %365 = sub i32 %363, 1
  %366 = mul i32 %363, %365
  %367 = urem i32 %366, 2
  %368 = icmp eq i32 %367, 0
  %369 = icmp slt i32 %364, 10
  %370 = or i1 %368, %369
  br i1 %370, label %originalBBpart274, label %originalBB72alteredBB

originalBBpart274:                                ; preds = %originalBB72
  br label %371, !dbg !1220

371:                                              ; preds = %originalBBpart274, %originalBBpart270
  %372 = load i32, i32* @x.17
  %373 = load i32, i32* @y.18
  %374 = sub i32 %372, 1
  %375 = mul i32 %372, %374
  %376 = urem i32 %375, 2
  %377 = icmp eq i32 %376, 0
  %378 = icmp slt i32 %373, 10
  %379 = or i1 %377, %378
  br i1 %379, label %originalBB76, label %originalBB76alteredBB

originalBB76:                                     ; preds = %371, %originalBB76alteredBB
  %380 = load i64, i64* %29, align 8, !dbg !1223
  %381 = add i64 %380, 1, !dbg !1223
  store i64 %381, i64* %29, align 8, !dbg !1223
  %382 = load i32, i32* @x.17
  %383 = load i32, i32* @y.18
  %384 = sub i32 %382, 1
  %385 = mul i32 %382, %384
  %386 = urem i32 %385, 2
  %387 = icmp eq i32 %386, 0
  %388 = icmp slt i32 %383, 10
  %389 = or i1 %387, %388
  br i1 %389, label %originalBBpart288, label %originalBB76alteredBB

originalBBpart288:                                ; preds = %originalBB76
  br label %390, !dbg !1223

390:                                              ; preds = %originalBBpart288
  %391 = load i32, i32* @x.17
  %392 = load i32, i32* @y.18
  %393 = sub i32 %391, 1
  %394 = mul i32 %391, %393
  %395 = urem i32 %394, 2
  %396 = icmp eq i32 %395, 0
  %397 = icmp slt i32 %392, 10
  %398 = or i1 %396, %397
  br i1 %398, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %390, %originalBB90alteredBB
  %399 = load i32, i32* @x.17
  %400 = load i32, i32* @y.18
  %401 = sub i32 %399, 1
  %402 = mul i32 %399, %401
  %403 = urem i32 %402, 2
  %404 = icmp eq i32 %403, 0
  %405 = icmp slt i32 %400, 10
  %406 = or i1 %404, %405
  br i1 %406, label %originalBBpart292, label %originalBB90alteredBB

originalBBpart292:                                ; preds = %originalBB90
  br label %407, !dbg !1223

407:                                              ; preds = %originalBBpart292
  %408 = load i8*, i8** %31, align 8, !dbg !1224
  %409 = getelementptr inbounds i8, i8* %408, i32 1, !dbg !1224
  store i8* %409, i8** %31, align 8, !dbg !1224
  br label %292, !dbg !1225, !llvm.loop !1226

410:                                              ; preds = %originalBBpart262
  %411 = load i32, i32* @x.17
  %412 = load i32, i32* @y.18
  %413 = sub i32 %411, 1
  %414 = mul i32 %411, %413
  %415 = urem i32 %414, 2
  %416 = icmp eq i32 %415, 0
  %417 = icmp slt i32 %412, 10
  %418 = or i1 %416, %417
  br i1 %418, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %410, %originalBB94alteredBB
  %419 = load i32, i32* @x.17
  %420 = load i32, i32* @y.18
  %421 = sub i32 %419, 1
  %422 = mul i32 %419, %421
  %423 = urem i32 %422, 2
  %424 = icmp eq i32 %423, 0
  %425 = icmp slt i32 %420, 10
  %426 = or i1 %424, %425
  br i1 %426, label %originalBBpart296, label %originalBB94alteredBB

originalBBpart296:                                ; preds = %originalBB94
  br label %427, !dbg !1227

427:                                              ; preds = %originalBBpart296, %originalBBpart254
  %428 = load i32, i32* @x.17
  %429 = load i32, i32* @y.18
  %430 = sub i32 %428, 1
  %431 = mul i32 %428, %430
  %432 = urem i32 %431, 2
  %433 = icmp eq i32 %432, 0
  %434 = icmp slt i32 %429, 10
  %435 = or i1 %433, %434
  br i1 %435, label %originalBB98, label %originalBB98alteredBB

originalBB98:                                     ; preds = %427, %originalBB98alteredBB
  store i8 1, i8* %33, align 1, !dbg !1228
  %436 = load i8*, i8** %27, align 8, !dbg !1229
  store i8* %436, i8** %31, align 8, !dbg !1230
  %437 = load i8*, i8** %31, align 8, !dbg !1231
  %438 = call i64 @strlen(i8* %437) #13, !dbg !1232
  store i64 %438, i64* %32, align 8, !dbg !1233
  %439 = load i32, i32* @x.17
  %440 = load i32, i32* @y.18
  %441 = sub i32 %439, 1
  %442 = mul i32 %439, %441
  %443 = urem i32 %442, 2
  %444 = icmp eq i32 %443, 0
  %445 = icmp slt i32 %440, 10
  %446 = or i1 %444, %445
  br i1 %446, label %originalBBpart2100, label %originalBB98alteredBB

originalBBpart2100:                               ; preds = %originalBB98
  br label %697, !dbg !1234

447:                                              ; preds = %originalBBpart28
  %448 = load i32, i32* @x.17
  %449 = load i32, i32* @y.18
  %450 = sub i32 %448, 1
  %451 = mul i32 %448, %450
  %452 = urem i32 %451, 2
  %453 = icmp eq i32 %452, 0
  %454 = icmp slt i32 %449, 10
  %455 = or i1 %453, %454
  br i1 %455, label %originalBB102, label %originalBB102alteredBB

originalBB102:                                    ; preds = %447, %originalBB102alteredBB
  store i8 1, i8* %33, align 1, !dbg !1235
  %456 = load i32, i32* @x.17
  %457 = load i32, i32* @y.18
  %458 = sub i32 %456, 1
  %459 = mul i32 %456, %458
  %460 = urem i32 %459, 2
  %461 = icmp eq i32 %460, 0
  %462 = icmp slt i32 %457, 10
  %463 = or i1 %461, %462
  br i1 %463, label %originalBBpart2104, label %originalBB102alteredBB

originalBBpart2104:                               ; preds = %originalBB102
  br label %464, !dbg !1236

464:                                              ; preds = %originalBBpart2104, %originalBBpart28
  %465 = load i32, i32* @x.17
  %466 = load i32, i32* @y.18
  %467 = sub i32 %465, 1
  %468 = mul i32 %465, %467
  %469 = urem i32 %468, 2
  %470 = icmp eq i32 %469, 0
  %471 = icmp slt i32 %466, 10
  %472 = or i1 %470, %471
  br i1 %472, label %originalBB106, label %originalBB106alteredBB

originalBB106:                                    ; preds = %464, %originalBB106alteredBB
  store i8 1, i8* %35, align 1, !dbg !1237
  %473 = load i32, i32* @x.17
  %474 = load i32, i32* @y.18
  %475 = sub i32 %473, 1
  %476 = mul i32 %473, %475
  %477 = urem i32 %476, 2
  %478 = icmp eq i32 %477, 0
  %479 = icmp slt i32 %474, 10
  %480 = or i1 %478, %479
  br i1 %480, label %originalBBpart2108, label %originalBB106alteredBB

originalBBpart2108:                               ; preds = %originalBB106
  br label %481, !dbg !1238

481:                                              ; preds = %originalBBpart2108, %originalBBpart28
  %482 = load i32, i32* @x.17
  %483 = load i32, i32* @y.18
  %484 = sub i32 %482, 1
  %485 = mul i32 %482, %484
  %486 = urem i32 %485, 2
  %487 = icmp eq i32 %486, 0
  %488 = icmp slt i32 %483, 10
  %489 = or i1 %487, %488
  br i1 %489, label %originalBB110, label %originalBB110alteredBB

originalBB110:                                    ; preds = %481, %originalBB110alteredBB
  %490 = load i8, i8* %35, align 1, !dbg !1239
  %491 = trunc i8 %490 to i1, !dbg !1239
  %492 = load i32, i32* @x.17
  %493 = load i32, i32* @y.18
  %494 = sub i32 %492, 1
  %495 = mul i32 %492, %494
  %496 = urem i32 %495, 2
  %497 = icmp eq i32 %496, 0
  %498 = icmp slt i32 %493, 10
  %499 = or i1 %497, %498
  br i1 %499, label %originalBBpart2112, label %originalBB110alteredBB

originalBBpart2112:                               ; preds = %originalBB110
  br i1 %491, label %517, label %500, !dbg !1241

500:                                              ; preds = %originalBBpart2112
  %501 = load i32, i32* @x.17
  %502 = load i32, i32* @y.18
  %503 = sub i32 %501, 1
  %504 = mul i32 %501, %503
  %505 = urem i32 %504, 2
  %506 = icmp eq i32 %505, 0
  %507 = icmp slt i32 %502, 10
  %508 = or i1 %506, %507
  br i1 %508, label %originalBB114, label %originalBB114alteredBB

originalBB114:                                    ; preds = %500, %originalBB114alteredBB
  store i8 1, i8* %33, align 1, !dbg !1242
  %509 = load i32, i32* @x.17
  %510 = load i32, i32* @y.18
  %511 = sub i32 %509, 1
  %512 = mul i32 %509, %511
  %513 = urem i32 %512, 2
  %514 = icmp eq i32 %513, 0
  %515 = icmp slt i32 %510, 10
  %516 = or i1 %514, %515
  br i1 %516, label %originalBBpart2116, label %originalBB114alteredBB

originalBBpart2116:                               ; preds = %originalBB114
  br label %517, !dbg !1243

517:                                              ; preds = %originalBBpart2116, %originalBBpart2112
  %518 = load i32, i32* @x.17
  %519 = load i32, i32* @y.18
  %520 = sub i32 %518, 1
  %521 = mul i32 %518, %520
  %522 = urem i32 %521, 2
  %523 = icmp eq i32 %522, 0
  %524 = icmp slt i32 %519, 10
  %525 = or i1 %523, %524
  br i1 %525, label %originalBB118, label %originalBB118alteredBB

originalBB118:                                    ; preds = %517, %originalBB118alteredBB
  %526 = load i32, i32* @x.17
  %527 = load i32, i32* @y.18
  %528 = sub i32 %526, 1
  %529 = mul i32 %526, %528
  %530 = urem i32 %529, 2
  %531 = icmp eq i32 %530, 0
  %532 = icmp slt i32 %527, 10
  %533 = or i1 %531, %532
  br i1 %533, label %originalBBpart2120, label %originalBB118alteredBB

originalBBpart2120:                               ; preds = %originalBB118
  br label %534, !dbg !1244

534:                                              ; preds = %originalBBpart2120, %originalBBpart28
  %535 = load i32, i32* @x.17
  %536 = load i32, i32* @y.18
  %537 = sub i32 %535, 1
  %538 = mul i32 %535, %537
  %539 = urem i32 %538, 2
  %540 = icmp eq i32 %539, 0
  %541 = icmp slt i32 %536, 10
  %542 = or i1 %540, %541
  br i1 %542, label %originalBB122, label %originalBB122alteredBB

originalBB122:                                    ; preds = %534, %originalBB122alteredBB
  store i32 2, i32* %23, align 4, !dbg !1245
  %543 = load i8, i8* %35, align 1, !dbg !1246
  %544 = trunc i8 %543 to i1, !dbg !1246
  %545 = load i32, i32* @x.17
  %546 = load i32, i32* @y.18
  %547 = sub i32 %545, 1
  %548 = mul i32 %545, %547
  %549 = urem i32 %548, 2
  %550 = icmp eq i32 %549, 0
  %551 = icmp slt i32 %546, 10
  %552 = or i1 %550, %551
  br i1 %552, label %originalBBpart2124, label %originalBB122alteredBB

originalBBpart2124:                               ; preds = %originalBB122
  br i1 %544, label %646, label %553, !dbg !1248

553:                                              ; preds = %originalBBpart2124
  %554 = load i32, i32* @x.17
  %555 = load i32, i32* @y.18
  %556 = sub i32 %554, 1
  %557 = mul i32 %554, %556
  %558 = urem i32 %557, 2
  %559 = icmp eq i32 %558, 0
  %560 = icmp slt i32 %555, 10
  %561 = or i1 %559, %560
  br i1 %561, label %originalBB126, label %originalBB126alteredBB

originalBB126:                                    ; preds = %553, %originalBB126alteredBB
  %562 = load i32, i32* @x.17
  %563 = load i32, i32* @y.18
  %564 = sub i32 %562, 1
  %565 = mul i32 %562, %564
  %566 = urem i32 %565, 2
  %567 = icmp eq i32 %566, 0
  %568 = icmp slt i32 %563, 10
  %569 = or i1 %567, %568
  br i1 %569, label %originalBBpart2128, label %originalBB126alteredBB

originalBBpart2128:                               ; preds = %originalBB126
  br label %570, !dbg !1249

570:                                              ; preds = %originalBBpart2128
  %571 = load i32, i32* @x.17
  %572 = load i32, i32* @y.18
  %573 = sub i32 %571, 1
  %574 = mul i32 %571, %573
  %575 = urem i32 %574, 2
  %576 = icmp eq i32 %575, 0
  %577 = icmp slt i32 %572, 10
  %578 = or i1 %576, %577
  br i1 %578, label %originalBB130, label %originalBB130alteredBB

originalBB130:                                    ; preds = %570, %originalBB130alteredBB
  %579 = load i64, i64* %29, align 8, !dbg !1250
  %580 = load i64, i64* %20, align 8, !dbg !1250
  %581 = icmp ult i64 %579, %580, !dbg !1250
  %582 = load i32, i32* @x.17
  %583 = load i32, i32* @y.18
  %584 = sub i32 %582, 1
  %585 = mul i32 %582, %584
  %586 = urem i32 %585, 2
  %587 = icmp eq i32 %586, 0
  %588 = icmp slt i32 %583, 10
  %589 = or i1 %587, %588
  br i1 %589, label %originalBBpart2132, label %originalBB130alteredBB

originalBBpart2132:                               ; preds = %originalBB130
  br i1 %581, label %590, label %610, !dbg !1253

590:                                              ; preds = %originalBBpart2132
  %591 = load i32, i32* @x.17
  %592 = load i32, i32* @y.18
  %593 = sub i32 %591, 1
  %594 = mul i32 %591, %593
  %595 = urem i32 %594, 2
  %596 = icmp eq i32 %595, 0
  %597 = icmp slt i32 %592, 10
  %598 = or i1 %596, %597
  br i1 %598, label %originalBB134, label %originalBB134alteredBB

originalBB134:                                    ; preds = %590, %originalBB134alteredBB
  %599 = load i8*, i8** %19, align 8, !dbg !1250
  %600 = load i64, i64* %29, align 8, !dbg !1250
  %601 = getelementptr inbounds i8, i8* %599, i64 %600, !dbg !1250
  store i8 39, i8* %601, align 1, !dbg !1250
  %602 = load i32, i32* @x.17
  %603 = load i32, i32* @y.18
  %604 = sub i32 %602, 1
  %605 = mul i32 %602, %604
  %606 = urem i32 %605, 2
  %607 = icmp eq i32 %606, 0
  %608 = icmp slt i32 %603, 10
  %609 = or i1 %607, %608
  br i1 %609, label %originalBBpart2136, label %originalBB134alteredBB

originalBBpart2136:                               ; preds = %originalBB134
  br label %610, !dbg !1250

610:                                              ; preds = %originalBBpart2136, %originalBBpart2132
  %611 = load i32, i32* @x.17
  %612 = load i32, i32* @y.18
  %613 = sub i32 %611, 1
  %614 = mul i32 %611, %613
  %615 = urem i32 %614, 2
  %616 = icmp eq i32 %615, 0
  %617 = icmp slt i32 %612, 10
  %618 = or i1 %616, %617
  br i1 %618, label %originalBB138, label %originalBB138alteredBB

originalBB138:                                    ; preds = %610, %originalBB138alteredBB
  %619 = load i64, i64* %29, align 8, !dbg !1253
  %620 = add i64 %619, 1, !dbg !1253
  store i64 %620, i64* %29, align 8, !dbg !1253
  %621 = load i32, i32* @x.17
  %622 = load i32, i32* @y.18
  %623 = sub i32 %621, 1
  %624 = mul i32 %621, %623
  %625 = urem i32 %624, 2
  %626 = icmp eq i32 %625, 0
  %627 = icmp slt i32 %622, 10
  %628 = or i1 %626, %627
  br i1 %628, label %originalBBpart2151, label %originalBB138alteredBB

originalBBpart2151:                               ; preds = %originalBB138
  br label %629, !dbg !1253

629:                                              ; preds = %originalBBpart2151
  %630 = load i32, i32* @x.17
  %631 = load i32, i32* @y.18
  %632 = sub i32 %630, 1
  %633 = mul i32 %630, %632
  %634 = urem i32 %633, 2
  %635 = icmp eq i32 %634, 0
  %636 = icmp slt i32 %631, 10
  %637 = or i1 %635, %636
  br i1 %637, label %originalBB153, label %originalBB153alteredBB

originalBB153:                                    ; preds = %629, %originalBB153alteredBB
  %638 = load i32, i32* @x.17
  %639 = load i32, i32* @y.18
  %640 = sub i32 %638, 1
  %641 = mul i32 %638, %640
  %642 = urem i32 %641, 2
  %643 = icmp eq i32 %642, 0
  %644 = icmp slt i32 %639, 10
  %645 = or i1 %643, %644
  br i1 %645, label %originalBBpart2155, label %originalBB153alteredBB

originalBBpart2155:                               ; preds = %originalBB153
  br label %646, !dbg !1253

646:                                              ; preds = %originalBBpart2155, %originalBBpart2124
  %647 = load i32, i32* @x.17
  %648 = load i32, i32* @y.18
  %649 = sub i32 %647, 1
  %650 = mul i32 %647, %649
  %651 = urem i32 %650, 2
  %652 = icmp eq i32 %651, 0
  %653 = icmp slt i32 %648, 10
  %654 = or i1 %652, %653
  br i1 %654, label %originalBB157, label %originalBB157alteredBB

originalBB157:                                    ; preds = %646, %originalBB157alteredBB
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.54, i64 0, i64 0), i8** %31, align 8, !dbg !1254
  store i64 1, i64* %32, align 8, !dbg !1255
  %655 = load i32, i32* @x.17
  %656 = load i32, i32* @y.18
  %657 = sub i32 %655, 1
  %658 = mul i32 %655, %657
  %659 = urem i32 %658, 2
  %660 = icmp eq i32 %659, 0
  %661 = icmp slt i32 %656, 10
  %662 = or i1 %660, %661
  br i1 %662, label %originalBBpart2159, label %originalBB157alteredBB

originalBBpart2159:                               ; preds = %originalBB157
  br label %697, !dbg !1256

663:                                              ; preds = %originalBBpart28
  %664 = load i32, i32* @x.17
  %665 = load i32, i32* @y.18
  %666 = sub i32 %664, 1
  %667 = mul i32 %664, %666
  %668 = urem i32 %667, 2
  %669 = icmp eq i32 %668, 0
  %670 = icmp slt i32 %665, 10
  %671 = or i1 %669, %670
  br i1 %671, label %originalBB161, label %originalBB161alteredBB

originalBB161:                                    ; preds = %663, %originalBB161alteredBB
  store i8 0, i8* %35, align 1, !dbg !1257
  %672 = load i32, i32* @x.17
  %673 = load i32, i32* @y.18
  %674 = sub i32 %672, 1
  %675 = mul i32 %672, %674
  %676 = urem i32 %675, 2
  %677 = icmp eq i32 %676, 0
  %678 = icmp slt i32 %673, 10
  %679 = or i1 %677, %678
  br i1 %679, label %originalBBpart2163, label %originalBB161alteredBB

originalBBpart2163:                               ; preds = %originalBB161
  br label %697, !dbg !1258

680:                                              ; preds = %originalBBpart28
  %681 = load i32, i32* @x.17
  %682 = load i32, i32* @y.18
  %683 = sub i32 %681, 1
  %684 = mul i32 %681, %683
  %685 = urem i32 %684, 2
  %686 = icmp eq i32 %685, 0
  %687 = icmp slt i32 %682, 10
  %688 = or i1 %686, %687
  br i1 %688, label %originalBB165, label %originalBB165alteredBB

originalBB165:                                    ; preds = %680, %originalBB165alteredBB
  call void @abort() #12, !dbg !1259
  %689 = load i32, i32* @x.17
  %690 = load i32, i32* @y.18
  %691 = sub i32 %689, 1
  %692 = mul i32 %689, %691
  %693 = urem i32 %692, 2
  %694 = icmp eq i32 %693, 0
  %695 = icmp slt i32 %690, 10
  %696 = or i1 %694, %695
  br i1 %696, label %originalBBpart2167, label %originalBB165alteredBB

originalBBpart2167:                               ; preds = %originalBB165
  unreachable, !dbg !1259

697:                                              ; preds = %originalBBpart2163, %originalBBpart2159, %originalBBpart2100, %originalBBpart242, %197
  %698 = load i32, i32* @x.17
  %699 = load i32, i32* @y.18
  %700 = sub i32 %698, 1
  %701 = mul i32 %698, %700
  %702 = urem i32 %701, 2
  %703 = icmp eq i32 %702, 0
  %704 = icmp slt i32 %699, 10
  %705 = or i1 %703, %704
  br i1 %705, label %originalBB169, label %originalBB169alteredBB

originalBB169:                                    ; preds = %697, %originalBB169alteredBB
  store i64 0, i64* %28, align 8, !dbg !1260
  %706 = load i32, i32* @x.17
  %707 = load i32, i32* @y.18
  %708 = sub i32 %706, 1
  %709 = mul i32 %706, %708
  %710 = urem i32 %709, 2
  %711 = icmp eq i32 %710, 0
  %712 = icmp slt i32 %707, 10
  %713 = or i1 %711, %712
  br i1 %713, label %originalBBpart2171, label %originalBB169alteredBB

originalBBpart2171:                               ; preds = %originalBB169
  br label %714, !dbg !1262

714:                                              ; preds = %originalBBpart21595, %originalBBpart2171
  %715 = load i32, i32* @x.17
  %716 = load i32, i32* @y.18
  %717 = sub i32 %715, 1
  %718 = mul i32 %715, %717
  %719 = urem i32 %718, 2
  %720 = icmp eq i32 %719, 0
  %721 = icmp slt i32 %716, 10
  %722 = or i1 %720, %721
  br i1 %722, label %originalBB173, label %originalBB173alteredBB

originalBB173:                                    ; preds = %714, %originalBB173alteredBB
  %723 = load i64, i64* %22, align 8, !dbg !1263
  %724 = icmp eq i64 %723, -1, !dbg !1265
  %725 = load i32, i32* @x.17
  %726 = load i32, i32* @y.18
  %727 = sub i32 %725, 1
  %728 = mul i32 %725, %727
  %729 = urem i32 %728, 2
  %730 = icmp eq i32 %729, 0
  %731 = icmp slt i32 %726, 10
  %732 = or i1 %730, %731
  br i1 %732, label %originalBBpart2175, label %originalBB173alteredBB

originalBBpart2175:                               ; preds = %originalBB173
  br i1 %724, label %733, label %757, !dbg !1263

733:                                              ; preds = %originalBBpart2175
  %734 = load i32, i32* @x.17
  %735 = load i32, i32* @y.18
  %736 = sub i32 %734, 1
  %737 = mul i32 %734, %736
  %738 = urem i32 %737, 2
  %739 = icmp eq i32 %738, 0
  %740 = icmp slt i32 %735, 10
  %741 = or i1 %739, %740
  br i1 %741, label %originalBB177, label %originalBB177alteredBB

originalBB177:                                    ; preds = %733, %originalBB177alteredBB
  %742 = load i8*, i8** %21, align 8, !dbg !1266
  %743 = load i64, i64* %28, align 8, !dbg !1267
  %744 = getelementptr inbounds i8, i8* %742, i64 %743, !dbg !1266
  %745 = load i8, i8* %744, align 1, !dbg !1266
  %746 = sext i8 %745 to i32, !dbg !1266
  %747 = icmp eq i32 %746, 0, !dbg !1268
  %748 = zext i1 %747 to i32, !dbg !1268
  %749 = load i32, i32* @x.17
  %750 = load i32, i32* @y.18
  %751 = sub i32 %749, 1
  %752 = mul i32 %749, %751
  %753 = urem i32 %752, 2
  %754 = icmp eq i32 %753, 0
  %755 = icmp slt i32 %750, 10
  %756 = or i1 %754, %755
  br i1 %756, label %originalBBpart2179, label %originalBB177alteredBB

originalBBpart2179:                               ; preds = %originalBB177
  br label %778, !dbg !1263

757:                                              ; preds = %originalBBpart2175
  %758 = load i32, i32* @x.17
  %759 = load i32, i32* @y.18
  %760 = sub i32 %758, 1
  %761 = mul i32 %758, %760
  %762 = urem i32 %761, 2
  %763 = icmp eq i32 %762, 0
  %764 = icmp slt i32 %759, 10
  %765 = or i1 %763, %764
  br i1 %765, label %originalBB181, label %originalBB181alteredBB

originalBB181:                                    ; preds = %757, %originalBB181alteredBB
  %766 = load i64, i64* %28, align 8, !dbg !1269
  %767 = load i64, i64* %22, align 8, !dbg !1270
  %768 = icmp eq i64 %766, %767, !dbg !1271
  %769 = zext i1 %768 to i32, !dbg !1271
  %770 = load i32, i32* @x.17
  %771 = load i32, i32* @y.18
  %772 = sub i32 %770, 1
  %773 = mul i32 %770, %772
  %774 = urem i32 %773, 2
  %775 = icmp eq i32 %774, 0
  %776 = icmp slt i32 %771, 10
  %777 = or i1 %775, %776
  br i1 %777, label %originalBBpart2183, label %originalBB181alteredBB

originalBBpart2183:                               ; preds = %originalBB181
  br label %778, !dbg !1263

778:                                              ; preds = %originalBBpart2183, %originalBBpart2179
  %779 = phi i32 [ %748, %originalBBpart2179 ], [ %769, %originalBBpart2183 ], !dbg !1263
  %780 = load i32, i32* @x.17
  %781 = load i32, i32* @y.18
  %782 = sub i32 %780, 1
  %783 = mul i32 %780, %782
  %784 = urem i32 %783, 2
  %785 = icmp eq i32 %784, 0
  %786 = icmp slt i32 %781, 10
  %787 = or i1 %785, %786
  br i1 %787, label %originalBB185, label %originalBB185alteredBB

originalBB185:                                    ; preds = %778, %originalBB185alteredBB
  %788 = icmp ne i32 %779, 0, !dbg !1272
  %789 = xor i1 %788, true, !dbg !1272
  %790 = load i32, i32* @x.17
  %791 = load i32, i32* @y.18
  %792 = sub i32 %790, 1
  %793 = mul i32 %790, %792
  %794 = urem i32 %793, 2
  %795 = icmp eq i32 %794, 0
  %796 = icmp slt i32 %791, 10
  %797 = or i1 %795, %796
  br i1 %797, label %originalBBpart2191, label %originalBB185alteredBB

originalBBpart2191:                               ; preds = %originalBB185
  br i1 %789, label %798, label %5804, !dbg !1273

798:                                              ; preds = %originalBBpart2191
  call void @llvm.dbg.declare(metadata i8* %39, metadata !1274, metadata !DIExpression()), !dbg !1276
  call void @llvm.dbg.declare(metadata i8* %40, metadata !1277, metadata !DIExpression()), !dbg !1278
  call void @llvm.dbg.declare(metadata i8* %41, metadata !1279, metadata !DIExpression()), !dbg !1280
  %799 = load i32, i32* @x.17
  %800 = load i32, i32* @y.18
  %801 = sub i32 %799, 1
  %802 = mul i32 %799, %801
  %803 = urem i32 %802, 2
  %804 = icmp eq i32 %803, 0
  %805 = icmp slt i32 %800, 10
  %806 = or i1 %804, %805
  br i1 %806, label %originalBB193, label %originalBB193alteredBB

originalBB193:                                    ; preds = %798, %originalBB193alteredBB
  store i8 0, i8* %41, align 1, !dbg !1280
  call void @llvm.dbg.declare(metadata i8* %42, metadata !1281, metadata !DIExpression()), !dbg !1282
  store i8 0, i8* %42, align 1, !dbg !1282
  call void @llvm.dbg.declare(metadata i8* %43, metadata !1283, metadata !DIExpression()), !dbg !1284
  store i8 0, i8* %43, align 1, !dbg !1284
  %807 = load i8, i8* %33, align 1, !dbg !1285
  %808 = trunc i8 %807 to i1, !dbg !1285
  %809 = load i32, i32* @x.17
  %810 = load i32, i32* @y.18
  %811 = sub i32 %809, 1
  %812 = mul i32 %809, %811
  %813 = urem i32 %812, 2
  %814 = icmp eq i32 %813, 0
  %815 = icmp slt i32 %810, 10
  %816 = or i1 %814, %815
  br i1 %816, label %originalBBpart2195, label %originalBB193alteredBB

originalBBpart2195:                               ; preds = %originalBB193
  br i1 %808, label %817, label %981, !dbg !1287

817:                                              ; preds = %originalBBpart2195
  %818 = load i32, i32* %23, align 4, !dbg !1288
  %819 = icmp ne i32 %818, 2, !dbg !1289
  br i1 %819, label %820, label %981, !dbg !1290

820:                                              ; preds = %817
  %821 = load i32, i32* @x.17
  %822 = load i32, i32* @y.18
  %823 = sub i32 %821, 1
  %824 = mul i32 %821, %823
  %825 = urem i32 %824, 2
  %826 = icmp eq i32 %825, 0
  %827 = icmp slt i32 %822, 10
  %828 = or i1 %826, %827
  br i1 %828, label %originalBB197, label %originalBB197alteredBB

originalBB197:                                    ; preds = %820, %originalBB197alteredBB
  %829 = load i64, i64* %32, align 8, !dbg !1291
  %830 = icmp ne i64 %829, 0, !dbg !1291
  %831 = load i32, i32* @x.17
  %832 = load i32, i32* @y.18
  %833 = sub i32 %831, 1
  %834 = mul i32 %831, %833
  %835 = urem i32 %834, 2
  %836 = icmp eq i32 %835, 0
  %837 = icmp slt i32 %832, 10
  %838 = or i1 %836, %837
  br i1 %838, label %originalBBpart2199, label %originalBB197alteredBB

originalBBpart2199:                               ; preds = %originalBB197
  br i1 %830, label %839, label %981, !dbg !1292

839:                                              ; preds = %originalBBpart2199
  %840 = load i32, i32* @x.17
  %841 = load i32, i32* @y.18
  %842 = sub i32 %840, 1
  %843 = mul i32 %840, %842
  %844 = urem i32 %843, 2
  %845 = icmp eq i32 %844, 0
  %846 = icmp slt i32 %841, 10
  %847 = or i1 %845, %846
  br i1 %847, label %originalBB201, label %originalBB201alteredBB

originalBB201:                                    ; preds = %839, %originalBB201alteredBB
  %848 = load i64, i64* %28, align 8, !dbg !1293
  %849 = load i64, i64* %32, align 8, !dbg !1294
  %850 = add i64 %848, %849, !dbg !1295
  %851 = load i64, i64* %22, align 8, !dbg !1296
  %852 = icmp eq i64 %851, -1, !dbg !1297
  %853 = load i32, i32* @x.17
  %854 = load i32, i32* @y.18
  %855 = sub i32 %853, 1
  %856 = mul i32 %853, %855
  %857 = urem i32 %856, 2
  %858 = icmp eq i32 %857, 0
  %859 = icmp slt i32 %854, 10
  %860 = or i1 %858, %859
  br i1 %860, label %originalBBpart2204, label %originalBB201alteredBB

originalBBpart2204:                               ; preds = %originalBB201
  br i1 %852, label %861, label %899, !dbg !1298

861:                                              ; preds = %originalBBpart2204
  %862 = load i32, i32* @x.17
  %863 = load i32, i32* @y.18
  %864 = sub i32 %862, 1
  %865 = mul i32 %862, %864
  %866 = urem i32 %865, 2
  %867 = icmp eq i32 %866, 0
  %868 = icmp slt i32 %863, 10
  %869 = or i1 %867, %868
  br i1 %869, label %originalBB206, label %originalBB206alteredBB

originalBB206:                                    ; preds = %861, %originalBB206alteredBB
  %870 = load i64, i64* %32, align 8, !dbg !1299
  %871 = icmp ult i64 1, %870, !dbg !1300
  %872 = load i32, i32* @x.17
  %873 = load i32, i32* @y.18
  %874 = sub i32 %872, 1
  %875 = mul i32 %872, %874
  %876 = urem i32 %875, 2
  %877 = icmp eq i32 %876, 0
  %878 = icmp slt i32 %873, 10
  %879 = or i1 %877, %878
  br i1 %879, label %originalBBpart2208, label %originalBB206alteredBB

originalBBpart2208:                               ; preds = %originalBB206
  br i1 %871, label %880, label %899, !dbg !1296

880:                                              ; preds = %originalBBpart2208
  %881 = load i32, i32* @x.17
  %882 = load i32, i32* @y.18
  %883 = sub i32 %881, 1
  %884 = mul i32 %881, %883
  %885 = urem i32 %884, 2
  %886 = icmp eq i32 %885, 0
  %887 = icmp slt i32 %882, 10
  %888 = or i1 %886, %887
  br i1 %888, label %originalBB210, label %originalBB210alteredBB

originalBB210:                                    ; preds = %880, %originalBB210alteredBB
  %889 = load i8*, i8** %21, align 8, !dbg !1301
  %890 = call i64 @strlen(i8* %889) #13, !dbg !1302
  store i64 %890, i64* %22, align 8, !dbg !1303
  %891 = load i32, i32* @x.17
  %892 = load i32, i32* @y.18
  %893 = sub i32 %891, 1
  %894 = mul i32 %891, %893
  %895 = urem i32 %894, 2
  %896 = icmp eq i32 %895, 0
  %897 = icmp slt i32 %892, 10
  %898 = or i1 %896, %897
  br i1 %898, label %originalBBpart2212, label %originalBB210alteredBB

originalBBpart2212:                               ; preds = %originalBB210
  br label %917, !dbg !1296

899:                                              ; preds = %originalBBpart2208, %originalBBpart2204
  %900 = load i32, i32* @x.17
  %901 = load i32, i32* @y.18
  %902 = sub i32 %900, 1
  %903 = mul i32 %900, %902
  %904 = urem i32 %903, 2
  %905 = icmp eq i32 %904, 0
  %906 = icmp slt i32 %901, 10
  %907 = or i1 %905, %906
  br i1 %907, label %originalBB214, label %originalBB214alteredBB

originalBB214:                                    ; preds = %899, %originalBB214alteredBB
  %908 = load i64, i64* %22, align 8, !dbg !1304
  %909 = load i32, i32* @x.17
  %910 = load i32, i32* @y.18
  %911 = sub i32 %909, 1
  %912 = mul i32 %909, %911
  %913 = urem i32 %912, 2
  %914 = icmp eq i32 %913, 0
  %915 = icmp slt i32 %910, 10
  %916 = or i1 %914, %915
  br i1 %916, label %originalBBpart2216, label %originalBB214alteredBB

originalBBpart2216:                               ; preds = %originalBB214
  br label %917, !dbg !1296

917:                                              ; preds = %originalBBpart2216, %originalBBpart2212
  %918 = phi i64 [ %890, %originalBBpart2212 ], [ %908, %originalBBpart2216 ], !dbg !1296
  %919 = load i32, i32* @x.17
  %920 = load i32, i32* @y.18
  %921 = sub i32 %919, 1
  %922 = mul i32 %919, %921
  %923 = urem i32 %922, 2
  %924 = icmp eq i32 %923, 0
  %925 = icmp slt i32 %920, 10
  %926 = or i1 %924, %925
  br i1 %926, label %originalBB218, label %originalBB218alteredBB

originalBB218:                                    ; preds = %917, %originalBB218alteredBB
  %927 = icmp ule i64 %850, %918, !dbg !1305
  %928 = load i32, i32* @x.17
  %929 = load i32, i32* @y.18
  %930 = sub i32 %928, 1
  %931 = mul i32 %928, %930
  %932 = urem i32 %931, 2
  %933 = icmp eq i32 %932, 0
  %934 = icmp slt i32 %929, 10
  %935 = or i1 %933, %934
  br i1 %935, label %originalBBpart2220, label %originalBB218alteredBB

originalBBpart2220:                               ; preds = %originalBB218
  br i1 %927, label %936, label %981, !dbg !1306

936:                                              ; preds = %originalBBpart2220
  %937 = load i32, i32* @x.17
  %938 = load i32, i32* @y.18
  %939 = sub i32 %937, 1
  %940 = mul i32 %937, %939
  %941 = urem i32 %940, 2
  %942 = icmp eq i32 %941, 0
  %943 = icmp slt i32 %938, 10
  %944 = or i1 %942, %943
  br i1 %944, label %originalBB222, label %originalBB222alteredBB

originalBB222:                                    ; preds = %936, %originalBB222alteredBB
  %945 = load i8*, i8** %21, align 8, !dbg !1307
  %946 = load i64, i64* %28, align 8, !dbg !1308
  %947 = getelementptr inbounds i8, i8* %945, i64 %946, !dbg !1309
  %948 = load i8*, i8** %31, align 8, !dbg !1310
  %949 = load i64, i64* %32, align 8, !dbg !1311
  %950 = call i32 @memcmp(i8* %947, i8* %948, i64 %949) #13, !dbg !1312
  %951 = icmp eq i32 %950, 0, !dbg !1313
  %952 = load i32, i32* @x.17
  %953 = load i32, i32* @y.18
  %954 = sub i32 %952, 1
  %955 = mul i32 %952, %954
  %956 = urem i32 %955, 2
  %957 = icmp eq i32 %956, 0
  %958 = icmp slt i32 %953, 10
  %959 = or i1 %957, %958
  br i1 %959, label %originalBBpart2224, label %originalBB222alteredBB

originalBBpart2224:                               ; preds = %originalBB222
  br i1 %951, label %960, label %981, !dbg !1314

960:                                              ; preds = %originalBBpart2224
  %961 = load i8, i8* %35, align 1, !dbg !1315
  %962 = trunc i8 %961 to i1, !dbg !1315
  br i1 %962, label %963, label %964, !dbg !1318

963:                                              ; preds = %960
  br label %6286, !dbg !1319

964:                                              ; preds = %960
  %965 = load i32, i32* @x.17
  %966 = load i32, i32* @y.18
  %967 = sub i32 %965, 1
  %968 = mul i32 %965, %967
  %969 = urem i32 %968, 2
  %970 = icmp eq i32 %969, 0
  %971 = icmp slt i32 %966, 10
  %972 = or i1 %970, %971
  br i1 %972, label %originalBB226, label %originalBB226alteredBB

originalBB226:                                    ; preds = %964, %originalBB226alteredBB
  store i8 1, i8* %41, align 1, !dbg !1320
  %973 = load i32, i32* @x.17
  %974 = load i32, i32* @y.18
  %975 = sub i32 %973, 1
  %976 = mul i32 %973, %975
  %977 = urem i32 %976, 2
  %978 = icmp eq i32 %977, 0
  %979 = icmp slt i32 %974, 10
  %980 = or i1 %978, %979
  br i1 %980, label %originalBBpart2228, label %originalBB226alteredBB

originalBBpart2228:                               ; preds = %originalBB226
  br label %981, !dbg !1321

981:                                              ; preds = %originalBBpart2228, %originalBBpart2224, %originalBBpart2220, %originalBBpart2199, %817, %originalBBpart2195
  %982 = load i32, i32* @x.17
  %983 = load i32, i32* @y.18
  %984 = sub i32 %982, 1
  %985 = mul i32 %982, %984
  %986 = urem i32 %985, 2
  %987 = icmp eq i32 %986, 0
  %988 = icmp slt i32 %983, 10
  %989 = or i1 %987, %988
  br i1 %989, label %originalBB230, label %originalBB230alteredBB

originalBB230:                                    ; preds = %981, %originalBB230alteredBB
  %990 = load i8*, i8** %21, align 8, !dbg !1322
  %991 = load i64, i64* %28, align 8, !dbg !1323
  %992 = getelementptr inbounds i8, i8* %990, i64 %991, !dbg !1322
  %993 = load i8, i8* %992, align 1, !dbg !1322
  store i8 %993, i8* %39, align 1, !dbg !1324
  %994 = load i8, i8* %39, align 1, !dbg !1325
  %995 = zext i8 %994 to i32, !dbg !1325
  %996 = load i32, i32* @x.17
  %997 = load i32, i32* @y.18
  %998 = sub i32 %996, 1
  %999 = mul i32 %996, %998
  %1000 = urem i32 %999, 2
  %1001 = icmp eq i32 %1000, 0
  %1002 = icmp slt i32 %997, 10
  %1003 = or i1 %1001, %1002
  br i1 %1003, label %originalBBpart2232, label %originalBB230alteredBB

originalBBpart2232:                               ; preds = %originalBB230
  switch i32 %995, label %3184 [
    i32 0, label %1004
    i32 63, label %1701
    i32 7, label %2229
    i32 8, label %2230
    i32 12, label %2247
    i32 10, label %2264
    i32 13, label %2281
    i32 9, label %2298
    i32 11, label %2315
    i32 92, label %2332
    i32 123, label %2622
    i32 125, label %2622
    i32 35, label %2716
    i32 126, label %2716
    i32 32, label %2769
    i32 33, label %2786
    i32 34, label %2786
    i32 36, label %2786
    i32 38, label %2786
    i32 40, label %2786
    i32 41, label %2786
    i32 42, label %2786
    i32 59, label %2786
    i32 60, label %2786
    i32 61, label %2786
    i32 62, label %2786
    i32 91, label %2786
    i32 94, label %2786
    i32 96, label %2786
    i32 124, label %2786
    i32 39, label %2826
    i32 37, label %3167
    i32 43, label %3167
    i32 44, label %3167
    i32 45, label %3167
    i32 46, label %3167
    i32 47, label %3167
    i32 48, label %3167
    i32 49, label %3167
    i32 50, label %3167
    i32 51, label %3167
    i32 52, label %3167
    i32 53, label %3167
    i32 54, label %3167
    i32 55, label %3167
    i32 56, label %3167
    i32 57, label %3167
    i32 58, label %3167
    i32 65, label %3167
    i32 66, label %3167
    i32 67, label %3167
    i32 68, label %3167
    i32 69, label %3167
    i32 70, label %3167
    i32 71, label %3167
    i32 72, label %3167
    i32 73, label %3167
    i32 74, label %3167
    i32 75, label %3167
    i32 76, label %3167
    i32 77, label %3167
    i32 78, label %3167
    i32 79, label %3167
    i32 80, label %3167
    i32 81, label %3167
    i32 82, label %3167
    i32 83, label %3167
    i32 84, label %3167
    i32 85, label %3167
    i32 86, label %3167
    i32 87, label %3167
    i32 88, label %3167
    i32 89, label %3167
    i32 90, label %3167
    i32 93, label %3167
    i32 95, label %3167
    i32 97, label %3167
    i32 98, label %3167
    i32 99, label %3167
    i32 100, label %3167
    i32 101, label %3167
    i32 102, label %3167
    i32 103, label %3167
    i32 104, label %3167
    i32 105, label %3167
    i32 106, label %3167
    i32 107, label %3167
    i32 108, label %3167
    i32 109, label %3167
    i32 110, label %3167
    i32 111, label %3167
    i32 112, label %3167
    i32 113, label %3167
    i32 114, label %3167
    i32 115, label %3167
    i32 116, label %3167
    i32 117, label %3167
    i32 118, label %3167
    i32 119, label %3167
    i32 120, label %3167
    i32 121, label %3167
    i32 122, label %3167
  ], !dbg !1326

1004:                                             ; preds = %originalBBpart2232
  %1005 = load i32, i32* @x.17
  %1006 = load i32, i32* @y.18
  %1007 = sub i32 %1005, 1
  %1008 = mul i32 %1005, %1007
  %1009 = urem i32 %1008, 2
  %1010 = icmp eq i32 %1009, 0
  %1011 = icmp slt i32 %1006, 10
  %1012 = or i1 %1010, %1011
  br i1 %1012, label %originalBB234, label %originalBB234alteredBB

originalBB234:                                    ; preds = %1004, %originalBB234alteredBB
  %1013 = load i8, i8* %33, align 1, !dbg !1327
  %1014 = trunc i8 %1013 to i1, !dbg !1327
  %1015 = load i32, i32* @x.17
  %1016 = load i32, i32* @y.18
  %1017 = sub i32 %1015, 1
  %1018 = mul i32 %1015, %1017
  %1019 = urem i32 %1018, 2
  %1020 = icmp eq i32 %1019, 0
  %1021 = icmp slt i32 %1016, 10
  %1022 = or i1 %1020, %1021
  br i1 %1022, label %originalBBpart2236, label %originalBB234alteredBB

originalBBpart2236:                               ; preds = %originalBB234
  br i1 %1014, label %1023, label %1662, !dbg !1330

1023:                                             ; preds = %originalBBpart2236
  %1024 = load i32, i32* @x.17
  %1025 = load i32, i32* @y.18
  %1026 = sub i32 %1024, 1
  %1027 = mul i32 %1024, %1026
  %1028 = urem i32 %1027, 2
  %1029 = icmp eq i32 %1028, 0
  %1030 = icmp slt i32 %1025, 10
  %1031 = or i1 %1029, %1030
  br i1 %1031, label %originalBB238, label %originalBB238alteredBB

originalBB238:                                    ; preds = %1023, %originalBB238alteredBB
  %1032 = load i32, i32* @x.17
  %1033 = load i32, i32* @y.18
  %1034 = sub i32 %1032, 1
  %1035 = mul i32 %1032, %1034
  %1036 = urem i32 %1035, 2
  %1037 = icmp eq i32 %1036, 0
  %1038 = icmp slt i32 %1033, 10
  %1039 = or i1 %1037, %1038
  br i1 %1039, label %originalBBpart2241, label %originalBB238alteredBB

originalBBpart2241:                               ; preds = %originalBB238
  br label %1040, !dbg !1331

1040:                                             ; preds = %originalBBpart2241
  %1041 = load i32, i32* @x.17
  %1042 = load i32, i32* @y.18
  %1043 = sub i32 %1041, 1
  %1044 = mul i32 %1041, %1043
  %1045 = urem i32 %1044, 2
  %1046 = icmp eq i32 %1045, 0
  %1047 = icmp slt i32 %1042, 10
  %1048 = or i1 %1046, %1047
  br i1 %1048, label %originalBB243, label %originalBB243alteredBB

originalBB243:                                    ; preds = %1040, %originalBB243alteredBB
  %1049 = load i8, i8* %35, align 1, !dbg !1333
  %1050 = trunc i8 %1049 to i1, !dbg !1333
  %1051 = load i32, i32* @x.17
  %1052 = load i32, i32* @y.18
  %1053 = sub i32 %1051, 1
  %1054 = mul i32 %1051, %1053
  %1055 = urem i32 %1054, 2
  %1056 = icmp eq i32 %1055, 0
  %1057 = icmp slt i32 %1052, 10
  %1058 = or i1 %1056, %1057
  br i1 %1058, label %originalBBpart2245, label %originalBB243alteredBB

originalBBpart2245:                               ; preds = %originalBB243
  br i1 %1050, label %1059, label %1076, !dbg !1336

1059:                                             ; preds = %originalBBpart2245
  %1060 = load i32, i32* @x.17
  %1061 = load i32, i32* @y.18
  %1062 = sub i32 %1060, 1
  %1063 = mul i32 %1060, %1062
  %1064 = urem i32 %1063, 2
  %1065 = icmp eq i32 %1064, 0
  %1066 = icmp slt i32 %1061, 10
  %1067 = or i1 %1065, %1066
  br i1 %1067, label %originalBB247, label %originalBB247alteredBB

originalBB247:                                    ; preds = %1059, %originalBB247alteredBB
  %1068 = load i32, i32* @x.17
  %1069 = load i32, i32* @y.18
  %1070 = sub i32 %1068, 1
  %1071 = mul i32 %1068, %1070
  %1072 = urem i32 %1071, 2
  %1073 = icmp eq i32 %1072, 0
  %1074 = icmp slt i32 %1069, 10
  %1075 = or i1 %1073, %1074
  br i1 %1075, label %originalBBpart2249, label %originalBB247alteredBB

originalBBpart2249:                               ; preds = %originalBB247
  br label %6286, !dbg !1333

1076:                                             ; preds = %originalBBpart2245
  %1077 = load i32, i32* @x.17
  %1078 = load i32, i32* @y.18
  %1079 = sub i32 %1077, 1
  %1080 = mul i32 %1077, %1079
  %1081 = urem i32 %1080, 2
  %1082 = icmp eq i32 %1081, 0
  %1083 = icmp slt i32 %1078, 10
  %1084 = or i1 %1082, %1083
  br i1 %1084, label %originalBB251, label %originalBB251alteredBB

originalBB251:                                    ; preds = %1076, %originalBB251alteredBB
  store i8 1, i8* %42, align 1, !dbg !1336
  %1085 = load i32, i32* %23, align 4, !dbg !1337
  %1086 = icmp eq i32 %1085, 2, !dbg !1337
  %1087 = load i32, i32* @x.17
  %1088 = load i32, i32* @y.18
  %1089 = sub i32 %1087, 1
  %1090 = mul i32 %1087, %1089
  %1091 = urem i32 %1090, 2
  %1092 = icmp eq i32 %1091, 0
  %1093 = icmp slt i32 %1088, 10
  %1094 = or i1 %1092, %1093
  br i1 %1094, label %originalBBpart2253, label %originalBB251alteredBB

originalBBpart2253:                               ; preds = %originalBB251
  br i1 %1086, label %1095, label %1343, !dbg !1337

1095:                                             ; preds = %originalBBpart2253
  %1096 = load i32, i32* @x.17
  %1097 = load i32, i32* @y.18
  %1098 = sub i32 %1096, 1
  %1099 = mul i32 %1096, %1098
  %1100 = urem i32 %1099, 2
  %1101 = icmp eq i32 %1100, 0
  %1102 = icmp slt i32 %1097, 10
  %1103 = or i1 %1101, %1102
  br i1 %1103, label %originalBB255, label %originalBB255alteredBB

originalBB255:                                    ; preds = %1095, %originalBB255alteredBB
  %1104 = load i8, i8* %36, align 1, !dbg !1337
  %1105 = trunc i8 %1104 to i1, !dbg !1337
  %1106 = load i32, i32* @x.17
  %1107 = load i32, i32* @y.18
  %1108 = sub i32 %1106, 1
  %1109 = mul i32 %1106, %1108
  %1110 = urem i32 %1109, 2
  %1111 = icmp eq i32 %1110, 0
  %1112 = icmp slt i32 %1107, 10
  %1113 = or i1 %1111, %1112
  br i1 %1113, label %originalBBpart2257, label %originalBB255alteredBB

originalBBpart2257:                               ; preds = %originalBB255
  br i1 %1105, label %1343, label %1114, !dbg !1336

1114:                                             ; preds = %originalBBpart2257
  %1115 = load i32, i32* @x.17
  %1116 = load i32, i32* @y.18
  %1117 = sub i32 %1115, 1
  %1118 = mul i32 %1115, %1117
  %1119 = urem i32 %1118, 2
  %1120 = icmp eq i32 %1119, 0
  %1121 = icmp slt i32 %1116, 10
  %1122 = or i1 %1120, %1121
  br i1 %1122, label %originalBB259, label %originalBB259alteredBB

originalBB259:                                    ; preds = %1114, %originalBB259alteredBB
  %1123 = load i32, i32* @x.17
  %1124 = load i32, i32* @y.18
  %1125 = sub i32 %1123, 1
  %1126 = mul i32 %1123, %1125
  %1127 = urem i32 %1126, 2
  %1128 = icmp eq i32 %1127, 0
  %1129 = icmp slt i32 %1124, 10
  %1130 = or i1 %1128, %1129
  br i1 %1130, label %originalBBpart2261, label %originalBB259alteredBB

originalBBpart2261:                               ; preds = %originalBB259
  br label %1131, !dbg !1339

1131:                                             ; preds = %originalBBpart2261
  %1132 = load i32, i32* @x.17
  %1133 = load i32, i32* @y.18
  %1134 = sub i32 %1132, 1
  %1135 = mul i32 %1132, %1134
  %1136 = urem i32 %1135, 2
  %1137 = icmp eq i32 %1136, 0
  %1138 = icmp slt i32 %1133, 10
  %1139 = or i1 %1137, %1138
  br i1 %1139, label %originalBB263, label %originalBB263alteredBB

originalBB263:                                    ; preds = %1131, %originalBB263alteredBB
  %1140 = load i64, i64* %29, align 8, !dbg !1341
  %1141 = load i64, i64* %20, align 8, !dbg !1341
  %1142 = icmp ult i64 %1140, %1141, !dbg !1341
  %1143 = load i32, i32* @x.17
  %1144 = load i32, i32* @y.18
  %1145 = sub i32 %1143, 1
  %1146 = mul i32 %1143, %1145
  %1147 = urem i32 %1146, 2
  %1148 = icmp eq i32 %1147, 0
  %1149 = icmp slt i32 %1144, 10
  %1150 = or i1 %1148, %1149
  br i1 %1150, label %originalBBpart2265, label %originalBB263alteredBB

originalBBpart2265:                               ; preds = %originalBB263
  br i1 %1142, label %1151, label %1171, !dbg !1344

1151:                                             ; preds = %originalBBpart2265
  %1152 = load i32, i32* @x.17
  %1153 = load i32, i32* @y.18
  %1154 = sub i32 %1152, 1
  %1155 = mul i32 %1152, %1154
  %1156 = urem i32 %1155, 2
  %1157 = icmp eq i32 %1156, 0
  %1158 = icmp slt i32 %1153, 10
  %1159 = or i1 %1157, %1158
  br i1 %1159, label %originalBB267, label %originalBB267alteredBB

originalBB267:                                    ; preds = %1151, %originalBB267alteredBB
  %1160 = load i8*, i8** %19, align 8, !dbg !1341
  %1161 = load i64, i64* %29, align 8, !dbg !1341
  %1162 = getelementptr inbounds i8, i8* %1160, i64 %1161, !dbg !1341
  store i8 39, i8* %1162, align 1, !dbg !1341
  %1163 = load i32, i32* @x.17
  %1164 = load i32, i32* @y.18
  %1165 = sub i32 %1163, 1
  %1166 = mul i32 %1163, %1165
  %1167 = urem i32 %1166, 2
  %1168 = icmp eq i32 %1167, 0
  %1169 = icmp slt i32 %1164, 10
  %1170 = or i1 %1168, %1169
  br i1 %1170, label %originalBBpart2269, label %originalBB267alteredBB

originalBBpart2269:                               ; preds = %originalBB267
  br label %1171, !dbg !1341

1171:                                             ; preds = %originalBBpart2269, %originalBBpart2265
  %1172 = load i32, i32* @x.17
  %1173 = load i32, i32* @y.18
  %1174 = sub i32 %1172, 1
  %1175 = mul i32 %1172, %1174
  %1176 = urem i32 %1175, 2
  %1177 = icmp eq i32 %1176, 0
  %1178 = icmp slt i32 %1173, 10
  %1179 = or i1 %1177, %1178
  br i1 %1179, label %originalBB271, label %originalBB271alteredBB

originalBB271:                                    ; preds = %1171, %originalBB271alteredBB
  %1180 = load i64, i64* %29, align 8, !dbg !1344
  %1181 = add i64 %1180, 1, !dbg !1344
  store i64 %1181, i64* %29, align 8, !dbg !1344
  %1182 = load i32, i32* @x.17
  %1183 = load i32, i32* @y.18
  %1184 = sub i32 %1182, 1
  %1185 = mul i32 %1182, %1184
  %1186 = urem i32 %1185, 2
  %1187 = icmp eq i32 %1186, 0
  %1188 = icmp slt i32 %1183, 10
  %1189 = or i1 %1187, %1188
  br i1 %1189, label %originalBBpart2281, label %originalBB271alteredBB

originalBBpart2281:                               ; preds = %originalBB271
  br label %1190, !dbg !1344

1190:                                             ; preds = %originalBBpart2281
  %1191 = load i32, i32* @x.17
  %1192 = load i32, i32* @y.18
  %1193 = sub i32 %1191, 1
  %1194 = mul i32 %1191, %1193
  %1195 = urem i32 %1194, 2
  %1196 = icmp eq i32 %1195, 0
  %1197 = icmp slt i32 %1192, 10
  %1198 = or i1 %1196, %1197
  br i1 %1198, label %originalBB283, label %originalBB283alteredBB

originalBB283:                                    ; preds = %1190, %originalBB283alteredBB
  %1199 = load i32, i32* @x.17
  %1200 = load i32, i32* @y.18
  %1201 = sub i32 %1199, 1
  %1202 = mul i32 %1199, %1201
  %1203 = urem i32 %1202, 2
  %1204 = icmp eq i32 %1203, 0
  %1205 = icmp slt i32 %1200, 10
  %1206 = or i1 %1204, %1205
  br i1 %1206, label %originalBBpart2285, label %originalBB283alteredBB

originalBBpart2285:                               ; preds = %originalBB283
  br label %1207, !dbg !1339

1207:                                             ; preds = %originalBBpart2285
  %1208 = load i32, i32* @x.17
  %1209 = load i32, i32* @y.18
  %1210 = sub i32 %1208, 1
  %1211 = mul i32 %1208, %1210
  %1212 = urem i32 %1211, 2
  %1213 = icmp eq i32 %1212, 0
  %1214 = icmp slt i32 %1209, 10
  %1215 = or i1 %1213, %1214
  br i1 %1215, label %originalBB287, label %originalBB287alteredBB

originalBB287:                                    ; preds = %1207, %originalBB287alteredBB
  %1216 = load i64, i64* %29, align 8, !dbg !1345
  %1217 = load i64, i64* %20, align 8, !dbg !1345
  %1218 = icmp ult i64 %1216, %1217, !dbg !1345
  %1219 = load i32, i32* @x.17
  %1220 = load i32, i32* @y.18
  %1221 = sub i32 %1219, 1
  %1222 = mul i32 %1219, %1221
  %1223 = urem i32 %1222, 2
  %1224 = icmp eq i32 %1223, 0
  %1225 = icmp slt i32 %1220, 10
  %1226 = or i1 %1224, %1225
  br i1 %1226, label %originalBBpart2289, label %originalBB287alteredBB

originalBBpart2289:                               ; preds = %originalBB287
  br i1 %1218, label %1227, label %1247, !dbg !1348

1227:                                             ; preds = %originalBBpart2289
  %1228 = load i32, i32* @x.17
  %1229 = load i32, i32* @y.18
  %1230 = sub i32 %1228, 1
  %1231 = mul i32 %1228, %1230
  %1232 = urem i32 %1231, 2
  %1233 = icmp eq i32 %1232, 0
  %1234 = icmp slt i32 %1229, 10
  %1235 = or i1 %1233, %1234
  br i1 %1235, label %originalBB291, label %originalBB291alteredBB

originalBB291:                                    ; preds = %1227, %originalBB291alteredBB
  %1236 = load i8*, i8** %19, align 8, !dbg !1345
  %1237 = load i64, i64* %29, align 8, !dbg !1345
  %1238 = getelementptr inbounds i8, i8* %1236, i64 %1237, !dbg !1345
  store i8 36, i8* %1238, align 1, !dbg !1345
  %1239 = load i32, i32* @x.17
  %1240 = load i32, i32* @y.18
  %1241 = sub i32 %1239, 1
  %1242 = mul i32 %1239, %1241
  %1243 = urem i32 %1242, 2
  %1244 = icmp eq i32 %1243, 0
  %1245 = icmp slt i32 %1240, 10
  %1246 = or i1 %1244, %1245
  br i1 %1246, label %originalBBpart2293, label %originalBB291alteredBB

originalBBpart2293:                               ; preds = %originalBB291
  br label %1247, !dbg !1345

1247:                                             ; preds = %originalBBpart2293, %originalBBpart2289
  %1248 = load i32, i32* @x.17
  %1249 = load i32, i32* @y.18
  %1250 = sub i32 %1248, 1
  %1251 = mul i32 %1248, %1250
  %1252 = urem i32 %1251, 2
  %1253 = icmp eq i32 %1252, 0
  %1254 = icmp slt i32 %1249, 10
  %1255 = or i1 %1253, %1254
  br i1 %1255, label %originalBB295, label %originalBB295alteredBB

originalBB295:                                    ; preds = %1247, %originalBB295alteredBB
  %1256 = load i64, i64* %29, align 8, !dbg !1348
  %1257 = add i64 %1256, 1, !dbg !1348
  store i64 %1257, i64* %29, align 8, !dbg !1348
  %1258 = load i32, i32* @x.17
  %1259 = load i32, i32* @y.18
  %1260 = sub i32 %1258, 1
  %1261 = mul i32 %1258, %1260
  %1262 = urem i32 %1261, 2
  %1263 = icmp eq i32 %1262, 0
  %1264 = icmp slt i32 %1259, 10
  %1265 = or i1 %1263, %1264
  br i1 %1265, label %originalBBpart2304, label %originalBB295alteredBB

originalBBpart2304:                               ; preds = %originalBB295
  br label %1266, !dbg !1348

1266:                                             ; preds = %originalBBpart2304
  br label %1267, !dbg !1339

1267:                                             ; preds = %1266
  %1268 = load i32, i32* @x.17
  %1269 = load i32, i32* @y.18
  %1270 = sub i32 %1268, 1
  %1271 = mul i32 %1268, %1270
  %1272 = urem i32 %1271, 2
  %1273 = icmp eq i32 %1272, 0
  %1274 = icmp slt i32 %1269, 10
  %1275 = or i1 %1273, %1274
  br i1 %1275, label %originalBB306, label %originalBB306alteredBB

originalBB306:                                    ; preds = %1267, %originalBB306alteredBB
  %1276 = load i64, i64* %29, align 8, !dbg !1349
  %1277 = load i64, i64* %20, align 8, !dbg !1349
  %1278 = icmp ult i64 %1276, %1277, !dbg !1349
  %1279 = load i32, i32* @x.17
  %1280 = load i32, i32* @y.18
  %1281 = sub i32 %1279, 1
  %1282 = mul i32 %1279, %1281
  %1283 = urem i32 %1282, 2
  %1284 = icmp eq i32 %1283, 0
  %1285 = icmp slt i32 %1280, 10
  %1286 = or i1 %1284, %1285
  br i1 %1286, label %originalBBpart2308, label %originalBB306alteredBB

originalBBpart2308:                               ; preds = %originalBB306
  br i1 %1278, label %1287, label %1307, !dbg !1352

1287:                                             ; preds = %originalBBpart2308
  %1288 = load i32, i32* @x.17
  %1289 = load i32, i32* @y.18
  %1290 = sub i32 %1288, 1
  %1291 = mul i32 %1288, %1290
  %1292 = urem i32 %1291, 2
  %1293 = icmp eq i32 %1292, 0
  %1294 = icmp slt i32 %1289, 10
  %1295 = or i1 %1293, %1294
  br i1 %1295, label %originalBB310, label %originalBB310alteredBB

originalBB310:                                    ; preds = %1287, %originalBB310alteredBB
  %1296 = load i8*, i8** %19, align 8, !dbg !1349
  %1297 = load i64, i64* %29, align 8, !dbg !1349
  %1298 = getelementptr inbounds i8, i8* %1296, i64 %1297, !dbg !1349
  store i8 39, i8* %1298, align 1, !dbg !1349
  %1299 = load i32, i32* @x.17
  %1300 = load i32, i32* @y.18
  %1301 = sub i32 %1299, 1
  %1302 = mul i32 %1299, %1301
  %1303 = urem i32 %1302, 2
  %1304 = icmp eq i32 %1303, 0
  %1305 = icmp slt i32 %1300, 10
  %1306 = or i1 %1304, %1305
  br i1 %1306, label %originalBBpart2312, label %originalBB310alteredBB

originalBBpart2312:                               ; preds = %originalBB310
  br label %1307, !dbg !1349

1307:                                             ; preds = %originalBBpart2312, %originalBBpart2308
  %1308 = load i32, i32* @x.17
  %1309 = load i32, i32* @y.18
  %1310 = sub i32 %1308, 1
  %1311 = mul i32 %1308, %1310
  %1312 = urem i32 %1311, 2
  %1313 = icmp eq i32 %1312, 0
  %1314 = icmp slt i32 %1309, 10
  %1315 = or i1 %1313, %1314
  br i1 %1315, label %originalBB314, label %originalBB314alteredBB

originalBB314:                                    ; preds = %1307, %originalBB314alteredBB
  %1316 = load i64, i64* %29, align 8, !dbg !1352
  %1317 = add i64 %1316, 1, !dbg !1352
  store i64 %1317, i64* %29, align 8, !dbg !1352
  %1318 = load i32, i32* @x.17
  %1319 = load i32, i32* @y.18
  %1320 = sub i32 %1318, 1
  %1321 = mul i32 %1318, %1320
  %1322 = urem i32 %1321, 2
  %1323 = icmp eq i32 %1322, 0
  %1324 = icmp slt i32 %1319, 10
  %1325 = or i1 %1323, %1324
  br i1 %1325, label %originalBBpart2326, label %originalBB314alteredBB

originalBBpart2326:                               ; preds = %originalBB314
  br label %1326, !dbg !1352

1326:                                             ; preds = %originalBBpart2326
  %1327 = load i32, i32* @x.17
  %1328 = load i32, i32* @y.18
  %1329 = sub i32 %1327, 1
  %1330 = mul i32 %1327, %1329
  %1331 = urem i32 %1330, 2
  %1332 = icmp eq i32 %1331, 0
  %1333 = icmp slt i32 %1328, 10
  %1334 = or i1 %1332, %1333
  br i1 %1334, label %originalBB328, label %originalBB328alteredBB

originalBB328:                                    ; preds = %1326, %originalBB328alteredBB
  store i8 1, i8* %36, align 1, !dbg !1339
  %1335 = load i32, i32* @x.17
  %1336 = load i32, i32* @y.18
  %1337 = sub i32 %1335, 1
  %1338 = mul i32 %1335, %1337
  %1339 = urem i32 %1338, 2
  %1340 = icmp eq i32 %1339, 0
  %1341 = icmp slt i32 %1336, 10
  %1342 = or i1 %1340, %1341
  br i1 %1342, label %originalBBpart2330, label %originalBB328alteredBB

originalBBpart2330:                               ; preds = %originalBB328
  br label %1343, !dbg !1339

1343:                                             ; preds = %originalBBpart2330, %originalBBpart2257, %originalBBpart2253
  %1344 = load i32, i32* @x.17
  %1345 = load i32, i32* @y.18
  %1346 = sub i32 %1344, 1
  %1347 = mul i32 %1344, %1346
  %1348 = urem i32 %1347, 2
  %1349 = icmp eq i32 %1348, 0
  %1350 = icmp slt i32 %1345, 10
  %1351 = or i1 %1349, %1350
  br i1 %1351, label %originalBB332, label %originalBB332alteredBB

originalBB332:                                    ; preds = %1343, %originalBB332alteredBB
  %1352 = load i32, i32* @x.17
  %1353 = load i32, i32* @y.18
  %1354 = sub i32 %1352, 1
  %1355 = mul i32 %1352, %1354
  %1356 = urem i32 %1355, 2
  %1357 = icmp eq i32 %1356, 0
  %1358 = icmp slt i32 %1353, 10
  %1359 = or i1 %1357, %1358
  br i1 %1359, label %originalBBpart2334, label %originalBB332alteredBB

originalBBpart2334:                               ; preds = %originalBB332
  br label %1360, !dbg !1336

1360:                                             ; preds = %originalBBpart2334
  %1361 = load i32, i32* @x.17
  %1362 = load i32, i32* @y.18
  %1363 = sub i32 %1361, 1
  %1364 = mul i32 %1361, %1363
  %1365 = urem i32 %1364, 2
  %1366 = icmp eq i32 %1365, 0
  %1367 = icmp slt i32 %1362, 10
  %1368 = or i1 %1366, %1367
  br i1 %1368, label %originalBB336, label %originalBB336alteredBB

originalBB336:                                    ; preds = %1360, %originalBB336alteredBB
  %1369 = load i64, i64* %29, align 8, !dbg !1353
  %1370 = load i64, i64* %20, align 8, !dbg !1353
  %1371 = icmp ult i64 %1369, %1370, !dbg !1353
  %1372 = load i32, i32* @x.17
  %1373 = load i32, i32* @y.18
  %1374 = sub i32 %1372, 1
  %1375 = mul i32 %1372, %1374
  %1376 = urem i32 %1375, 2
  %1377 = icmp eq i32 %1376, 0
  %1378 = icmp slt i32 %1373, 10
  %1379 = or i1 %1377, %1378
  br i1 %1379, label %originalBBpart2338, label %originalBB336alteredBB

originalBBpart2338:                               ; preds = %originalBB336
  br i1 %1371, label %1380, label %1400, !dbg !1356

1380:                                             ; preds = %originalBBpart2338
  %1381 = load i32, i32* @x.17
  %1382 = load i32, i32* @y.18
  %1383 = sub i32 %1381, 1
  %1384 = mul i32 %1381, %1383
  %1385 = urem i32 %1384, 2
  %1386 = icmp eq i32 %1385, 0
  %1387 = icmp slt i32 %1382, 10
  %1388 = or i1 %1386, %1387
  br i1 %1388, label %originalBB340, label %originalBB340alteredBB

originalBB340:                                    ; preds = %1380, %originalBB340alteredBB
  %1389 = load i8*, i8** %19, align 8, !dbg !1353
  %1390 = load i64, i64* %29, align 8, !dbg !1353
  %1391 = getelementptr inbounds i8, i8* %1389, i64 %1390, !dbg !1353
  store i8 92, i8* %1391, align 1, !dbg !1353
  %1392 = load i32, i32* @x.17
  %1393 = load i32, i32* @y.18
  %1394 = sub i32 %1392, 1
  %1395 = mul i32 %1392, %1394
  %1396 = urem i32 %1395, 2
  %1397 = icmp eq i32 %1396, 0
  %1398 = icmp slt i32 %1393, 10
  %1399 = or i1 %1397, %1398
  br i1 %1399, label %originalBBpart2342, label %originalBB340alteredBB

originalBBpart2342:                               ; preds = %originalBB340
  br label %1400, !dbg !1353

1400:                                             ; preds = %originalBBpart2342, %originalBBpart2338
  %1401 = load i64, i64* %29, align 8, !dbg !1356
  %1402 = add i64 %1401, 1, !dbg !1356
  store i64 %1402, i64* %29, align 8, !dbg !1356
  br label %1403, !dbg !1356

1403:                                             ; preds = %1400
  br label %1404, !dbg !1336

1404:                                             ; preds = %1403
  %1405 = load i32, i32* %23, align 4, !dbg !1357
  %1406 = icmp ne i32 %1405, 2, !dbg !1359
  br i1 %1406, label %1407, label %1645, !dbg !1360

1407:                                             ; preds = %1404
  %1408 = load i32, i32* @x.17
  %1409 = load i32, i32* @y.18
  %1410 = sub i32 %1408, 1
  %1411 = mul i32 %1408, %1410
  %1412 = urem i32 %1411, 2
  %1413 = icmp eq i32 %1412, 0
  %1414 = icmp slt i32 %1409, 10
  %1415 = or i1 %1413, %1414
  br i1 %1415, label %originalBB344, label %originalBB344alteredBB

originalBB344:                                    ; preds = %1407, %originalBB344alteredBB
  %1416 = load i64, i64* %28, align 8, !dbg !1361
  %1417 = add i64 %1416, 1, !dbg !1362
  %1418 = load i64, i64* %22, align 8, !dbg !1363
  %1419 = icmp ult i64 %1417, %1418, !dbg !1364
  %1420 = load i32, i32* @x.17
  %1421 = load i32, i32* @y.18
  %1422 = sub i32 %1420, 1
  %1423 = mul i32 %1420, %1422
  %1424 = urem i32 %1423, 2
  %1425 = icmp eq i32 %1424, 0
  %1426 = icmp slt i32 %1421, 10
  %1427 = or i1 %1425, %1426
  br i1 %1427, label %originalBBpart2346, label %originalBB344alteredBB

originalBBpart2346:                               ; preds = %originalBB344
  br i1 %1419, label %1428, label %1645, !dbg !1365

1428:                                             ; preds = %originalBBpart2346
  %1429 = load i32, i32* @x.17
  %1430 = load i32, i32* @y.18
  %1431 = sub i32 %1429, 1
  %1432 = mul i32 %1429, %1431
  %1433 = urem i32 %1432, 2
  %1434 = icmp eq i32 %1433, 0
  %1435 = icmp slt i32 %1430, 10
  %1436 = or i1 %1434, %1435
  br i1 %1436, label %originalBB348, label %originalBB348alteredBB

originalBB348:                                    ; preds = %1428, %originalBB348alteredBB
  %1437 = load i8*, i8** %21, align 8, !dbg !1366
  %1438 = load i64, i64* %28, align 8, !dbg !1367
  %1439 = add i64 %1438, 1, !dbg !1368
  %1440 = getelementptr inbounds i8, i8* %1437, i64 %1439, !dbg !1366
  %1441 = load i8, i8* %1440, align 1, !dbg !1366
  %1442 = sext i8 %1441 to i32, !dbg !1366
  %1443 = icmp sle i32 48, %1442, !dbg !1369
  %1444 = load i32, i32* @x.17
  %1445 = load i32, i32* @y.18
  %1446 = sub i32 %1444, 1
  %1447 = mul i32 %1444, %1446
  %1448 = urem i32 %1447, 2
  %1449 = icmp eq i32 %1448, 0
  %1450 = icmp slt i32 %1445, 10
  %1451 = or i1 %1449, %1450
  br i1 %1451, label %originalBBpart2357, label %originalBB348alteredBB

originalBBpart2357:                               ; preds = %originalBB348
  br i1 %1443, label %1452, label %1645, !dbg !1370

1452:                                             ; preds = %originalBBpart2357
  %1453 = load i32, i32* @x.17
  %1454 = load i32, i32* @y.18
  %1455 = sub i32 %1453, 1
  %1456 = mul i32 %1453, %1455
  %1457 = urem i32 %1456, 2
  %1458 = icmp eq i32 %1457, 0
  %1459 = icmp slt i32 %1454, 10
  %1460 = or i1 %1458, %1459
  br i1 %1460, label %originalBB359, label %originalBB359alteredBB

originalBB359:                                    ; preds = %1452, %originalBB359alteredBB
  %1461 = load i8*, i8** %21, align 8, !dbg !1371
  %1462 = load i64, i64* %28, align 8, !dbg !1372
  %1463 = add i64 %1462, 1, !dbg !1373
  %1464 = getelementptr inbounds i8, i8* %1461, i64 %1463, !dbg !1371
  %1465 = load i8, i8* %1464, align 1, !dbg !1371
  %1466 = sext i8 %1465 to i32, !dbg !1371
  %1467 = icmp sle i32 %1466, 57, !dbg !1374
  %1468 = load i32, i32* @x.17
  %1469 = load i32, i32* @y.18
  %1470 = sub i32 %1468, 1
  %1471 = mul i32 %1468, %1470
  %1472 = urem i32 %1471, 2
  %1473 = icmp eq i32 %1472, 0
  %1474 = icmp slt i32 %1469, 10
  %1475 = or i1 %1473, %1474
  br i1 %1475, label %originalBBpart2374, label %originalBB359alteredBB

originalBBpart2374:                               ; preds = %originalBB359
  br i1 %1467, label %1476, label %1645, !dbg !1375

1476:                                             ; preds = %originalBBpart2374
  %1477 = load i32, i32* @x.17
  %1478 = load i32, i32* @y.18
  %1479 = sub i32 %1477, 1
  %1480 = mul i32 %1477, %1479
  %1481 = urem i32 %1480, 2
  %1482 = icmp eq i32 %1481, 0
  %1483 = icmp slt i32 %1478, 10
  %1484 = or i1 %1482, %1483
  br i1 %1484, label %originalBB376, label %originalBB376alteredBB

originalBB376:                                    ; preds = %1476, %originalBB376alteredBB
  %1485 = load i32, i32* @x.17
  %1486 = load i32, i32* @y.18
  %1487 = sub i32 %1485, 1
  %1488 = mul i32 %1485, %1487
  %1489 = urem i32 %1488, 2
  %1490 = icmp eq i32 %1489, 0
  %1491 = icmp slt i32 %1486, 10
  %1492 = or i1 %1490, %1491
  br i1 %1492, label %originalBBpart2378, label %originalBB376alteredBB

originalBBpart2378:                               ; preds = %originalBB376
  br label %1493, !dbg !1376

1493:                                             ; preds = %originalBBpart2378
  %1494 = load i32, i32* @x.17
  %1495 = load i32, i32* @y.18
  %1496 = sub i32 %1494, 1
  %1497 = mul i32 %1494, %1496
  %1498 = urem i32 %1497, 2
  %1499 = icmp eq i32 %1498, 0
  %1500 = icmp slt i32 %1495, 10
  %1501 = or i1 %1499, %1500
  br i1 %1501, label %originalBB380, label %originalBB380alteredBB

originalBB380:                                    ; preds = %1493, %originalBB380alteredBB
  %1502 = load i64, i64* %29, align 8, !dbg !1378
  %1503 = load i64, i64* %20, align 8, !dbg !1378
  %1504 = icmp ult i64 %1502, %1503, !dbg !1378
  %1505 = load i32, i32* @x.17
  %1506 = load i32, i32* @y.18
  %1507 = sub i32 %1505, 1
  %1508 = mul i32 %1505, %1507
  %1509 = urem i32 %1508, 2
  %1510 = icmp eq i32 %1509, 0
  %1511 = icmp slt i32 %1506, 10
  %1512 = or i1 %1510, %1511
  br i1 %1512, label %originalBBpart2382, label %originalBB380alteredBB

originalBBpart2382:                               ; preds = %originalBB380
  br i1 %1504, label %1513, label %1533, !dbg !1381

1513:                                             ; preds = %originalBBpart2382
  %1514 = load i32, i32* @x.17
  %1515 = load i32, i32* @y.18
  %1516 = sub i32 %1514, 1
  %1517 = mul i32 %1514, %1516
  %1518 = urem i32 %1517, 2
  %1519 = icmp eq i32 %1518, 0
  %1520 = icmp slt i32 %1515, 10
  %1521 = or i1 %1519, %1520
  br i1 %1521, label %originalBB384, label %originalBB384alteredBB

originalBB384:                                    ; preds = %1513, %originalBB384alteredBB
  %1522 = load i8*, i8** %19, align 8, !dbg !1378
  %1523 = load i64, i64* %29, align 8, !dbg !1378
  %1524 = getelementptr inbounds i8, i8* %1522, i64 %1523, !dbg !1378
  store i8 48, i8* %1524, align 1, !dbg !1378
  %1525 = load i32, i32* @x.17
  %1526 = load i32, i32* @y.18
  %1527 = sub i32 %1525, 1
  %1528 = mul i32 %1525, %1527
  %1529 = urem i32 %1528, 2
  %1530 = icmp eq i32 %1529, 0
  %1531 = icmp slt i32 %1526, 10
  %1532 = or i1 %1530, %1531
  br i1 %1532, label %originalBBpart2386, label %originalBB384alteredBB

originalBBpart2386:                               ; preds = %originalBB384
  br label %1533, !dbg !1378

1533:                                             ; preds = %originalBBpart2386, %originalBBpart2382
  %1534 = load i32, i32* @x.17
  %1535 = load i32, i32* @y.18
  %1536 = sub i32 %1534, 1
  %1537 = mul i32 %1534, %1536
  %1538 = urem i32 %1537, 2
  %1539 = icmp eq i32 %1538, 0
  %1540 = icmp slt i32 %1535, 10
  %1541 = or i1 %1539, %1540
  br i1 %1541, label %originalBB388, label %originalBB388alteredBB

originalBB388:                                    ; preds = %1533, %originalBB388alteredBB
  %1542 = load i64, i64* %29, align 8, !dbg !1381
  %1543 = add i64 %1542, 1, !dbg !1381
  store i64 %1543, i64* %29, align 8, !dbg !1381
  %1544 = load i32, i32* @x.17
  %1545 = load i32, i32* @y.18
  %1546 = sub i32 %1544, 1
  %1547 = mul i32 %1544, %1546
  %1548 = urem i32 %1547, 2
  %1549 = icmp eq i32 %1548, 0
  %1550 = icmp slt i32 %1545, 10
  %1551 = or i1 %1549, %1550
  br i1 %1551, label %originalBBpart2400, label %originalBB388alteredBB

originalBBpart2400:                               ; preds = %originalBB388
  br label %1552, !dbg !1381

1552:                                             ; preds = %originalBBpart2400
  %1553 = load i32, i32* @x.17
  %1554 = load i32, i32* @y.18
  %1555 = sub i32 %1553, 1
  %1556 = mul i32 %1553, %1555
  %1557 = urem i32 %1556, 2
  %1558 = icmp eq i32 %1557, 0
  %1559 = icmp slt i32 %1554, 10
  %1560 = or i1 %1558, %1559
  br i1 %1560, label %originalBB402, label %originalBB402alteredBB

originalBB402:                                    ; preds = %1552, %originalBB402alteredBB
  %1561 = load i32, i32* @x.17
  %1562 = load i32, i32* @y.18
  %1563 = sub i32 %1561, 1
  %1564 = mul i32 %1561, %1563
  %1565 = urem i32 %1564, 2
  %1566 = icmp eq i32 %1565, 0
  %1567 = icmp slt i32 %1562, 10
  %1568 = or i1 %1566, %1567
  br i1 %1568, label %originalBBpart2404, label %originalBB402alteredBB

originalBBpart2404:                               ; preds = %originalBB402
  br label %1569, !dbg !1382

1569:                                             ; preds = %originalBBpart2404
  %1570 = load i32, i32* @x.17
  %1571 = load i32, i32* @y.18
  %1572 = sub i32 %1570, 1
  %1573 = mul i32 %1570, %1572
  %1574 = urem i32 %1573, 2
  %1575 = icmp eq i32 %1574, 0
  %1576 = icmp slt i32 %1571, 10
  %1577 = or i1 %1575, %1576
  br i1 %1577, label %originalBB406, label %originalBB406alteredBB

originalBB406:                                    ; preds = %1569, %originalBB406alteredBB
  %1578 = load i64, i64* %29, align 8, !dbg !1383
  %1579 = load i64, i64* %20, align 8, !dbg !1383
  %1580 = icmp ult i64 %1578, %1579, !dbg !1383
  %1581 = load i32, i32* @x.17
  %1582 = load i32, i32* @y.18
  %1583 = sub i32 %1581, 1
  %1584 = mul i32 %1581, %1583
  %1585 = urem i32 %1584, 2
  %1586 = icmp eq i32 %1585, 0
  %1587 = icmp slt i32 %1582, 10
  %1588 = or i1 %1586, %1587
  br i1 %1588, label %originalBBpart2408, label %originalBB406alteredBB

originalBBpart2408:                               ; preds = %originalBB406
  br i1 %1580, label %1589, label %1609, !dbg !1386

1589:                                             ; preds = %originalBBpart2408
  %1590 = load i32, i32* @x.17
  %1591 = load i32, i32* @y.18
  %1592 = sub i32 %1590, 1
  %1593 = mul i32 %1590, %1592
  %1594 = urem i32 %1593, 2
  %1595 = icmp eq i32 %1594, 0
  %1596 = icmp slt i32 %1591, 10
  %1597 = or i1 %1595, %1596
  br i1 %1597, label %originalBB410, label %originalBB410alteredBB

originalBB410:                                    ; preds = %1589, %originalBB410alteredBB
  %1598 = load i8*, i8** %19, align 8, !dbg !1383
  %1599 = load i64, i64* %29, align 8, !dbg !1383
  %1600 = getelementptr inbounds i8, i8* %1598, i64 %1599, !dbg !1383
  store i8 48, i8* %1600, align 1, !dbg !1383
  %1601 = load i32, i32* @x.17
  %1602 = load i32, i32* @y.18
  %1603 = sub i32 %1601, 1
  %1604 = mul i32 %1601, %1603
  %1605 = urem i32 %1604, 2
  %1606 = icmp eq i32 %1605, 0
  %1607 = icmp slt i32 %1602, 10
  %1608 = or i1 %1606, %1607
  br i1 %1608, label %originalBBpart2412, label %originalBB410alteredBB

originalBBpart2412:                               ; preds = %originalBB410
  br label %1609, !dbg !1383

1609:                                             ; preds = %originalBBpart2412, %originalBBpart2408
  %1610 = load i32, i32* @x.17
  %1611 = load i32, i32* @y.18
  %1612 = sub i32 %1610, 1
  %1613 = mul i32 %1610, %1612
  %1614 = urem i32 %1613, 2
  %1615 = icmp eq i32 %1614, 0
  %1616 = icmp slt i32 %1611, 10
  %1617 = or i1 %1615, %1616
  br i1 %1617, label %originalBB414, label %originalBB414alteredBB

originalBB414:                                    ; preds = %1609, %originalBB414alteredBB
  %1618 = load i64, i64* %29, align 8, !dbg !1386
  %1619 = add i64 %1618, 1, !dbg !1386
  store i64 %1619, i64* %29, align 8, !dbg !1386
  %1620 = load i32, i32* @x.17
  %1621 = load i32, i32* @y.18
  %1622 = sub i32 %1620, 1
  %1623 = mul i32 %1620, %1622
  %1624 = urem i32 %1623, 2
  %1625 = icmp eq i32 %1624, 0
  %1626 = icmp slt i32 %1621, 10
  %1627 = or i1 %1625, %1626
  br i1 %1627, label %originalBBpart2428, label %originalBB414alteredBB

originalBBpart2428:                               ; preds = %originalBB414
  br label %1628, !dbg !1386

1628:                                             ; preds = %originalBBpart2428
  %1629 = load i32, i32* @x.17
  %1630 = load i32, i32* @y.18
  %1631 = sub i32 %1629, 1
  %1632 = mul i32 %1629, %1631
  %1633 = urem i32 %1632, 2
  %1634 = icmp eq i32 %1633, 0
  %1635 = icmp slt i32 %1630, 10
  %1636 = or i1 %1634, %1635
  br i1 %1636, label %originalBB430, label %originalBB430alteredBB

originalBB430:                                    ; preds = %1628, %originalBB430alteredBB
  %1637 = load i32, i32* @x.17
  %1638 = load i32, i32* @y.18
  %1639 = sub i32 %1637, 1
  %1640 = mul i32 %1637, %1639
  %1641 = urem i32 %1640, 2
  %1642 = icmp eq i32 %1641, 0
  %1643 = icmp slt i32 %1638, 10
  %1644 = or i1 %1642, %1643
  br i1 %1644, label %originalBBpart2432, label %originalBB430alteredBB

originalBBpart2432:                               ; preds = %originalBB430
  br label %1645, !dbg !1387

1645:                                             ; preds = %originalBBpart2432, %originalBBpart2374, %originalBBpart2357, %originalBBpart2346, %1404
  %1646 = load i32, i32* @x.17
  %1647 = load i32, i32* @y.18
  %1648 = sub i32 %1646, 1
  %1649 = mul i32 %1646, %1648
  %1650 = urem i32 %1649, 2
  %1651 = icmp eq i32 %1650, 0
  %1652 = icmp slt i32 %1647, 10
  %1653 = or i1 %1651, %1652
  br i1 %1653, label %originalBB434, label %originalBB434alteredBB

originalBB434:                                    ; preds = %1645, %originalBB434alteredBB
  store i8 48, i8* %39, align 1, !dbg !1388
  %1654 = load i32, i32* @x.17
  %1655 = load i32, i32* @y.18
  %1656 = sub i32 %1654, 1
  %1657 = mul i32 %1654, %1656
  %1658 = urem i32 %1657, 2
  %1659 = icmp eq i32 %1658, 0
  %1660 = icmp slt i32 %1655, 10
  %1661 = or i1 %1659, %1660
  br i1 %1661, label %originalBBpart2436, label %originalBB434alteredBB

originalBBpart2436:                               ; preds = %originalBB434
  br label %1700, !dbg !1389

1662:                                             ; preds = %originalBBpart2236
  %1663 = load i32, i32* @x.17
  %1664 = load i32, i32* @y.18
  %1665 = sub i32 %1663, 1
  %1666 = mul i32 %1663, %1665
  %1667 = urem i32 %1666, 2
  %1668 = icmp eq i32 %1667, 0
  %1669 = icmp slt i32 %1664, 10
  %1670 = or i1 %1668, %1669
  br i1 %1670, label %originalBB438, label %originalBB438alteredBB

originalBB438:                                    ; preds = %1662, %originalBB438alteredBB
  %1671 = load i32, i32* %24, align 4, !dbg !1390
  %1672 = and i32 %1671, 1, !dbg !1392
  %1673 = icmp ne i32 %1672, 0, !dbg !1392
  %1674 = load i32, i32* @x.17
  %1675 = load i32, i32* @y.18
  %1676 = sub i32 %1674, 1
  %1677 = mul i32 %1674, %1676
  %1678 = urem i32 %1677, 2
  %1679 = icmp eq i32 %1678, 0
  %1680 = icmp slt i32 %1675, 10
  %1681 = or i1 %1679, %1680
  br i1 %1681, label %originalBBpart2449, label %originalBB438alteredBB

originalBBpart2449:                               ; preds = %originalBB438
  br i1 %1673, label %1682, label %1683, !dbg !1393

1682:                                             ; preds = %originalBBpart2449
  br label %5785, !dbg !1394

1683:                                             ; preds = %originalBBpart2449
  %1684 = load i32, i32* @x.17
  %1685 = load i32, i32* @y.18
  %1686 = sub i32 %1684, 1
  %1687 = mul i32 %1684, %1686
  %1688 = urem i32 %1687, 2
  %1689 = icmp eq i32 %1688, 0
  %1690 = icmp slt i32 %1685, 10
  %1691 = or i1 %1689, %1690
  br i1 %1691, label %originalBB451, label %originalBB451alteredBB

originalBB451:                                    ; preds = %1683, %originalBB451alteredBB
  %1692 = load i32, i32* @x.17
  %1693 = load i32, i32* @y.18
  %1694 = sub i32 %1692, 1
  %1695 = mul i32 %1692, %1694
  %1696 = urem i32 %1695, 2
  %1697 = icmp eq i32 %1696, 0
  %1698 = icmp slt i32 %1693, 10
  %1699 = or i1 %1697, %1698
  br i1 %1699, label %originalBBpart2453, label %originalBB451alteredBB

originalBBpart2453:                               ; preds = %originalBB451
  br label %1700

1700:                                             ; preds = %originalBBpart2453, %originalBBpart2436
  br label %4889, !dbg !1395

1701:                                             ; preds = %originalBBpart2232
  %1702 = load i32, i32* %23, align 4, !dbg !1396
  switch i32 %1702, label %2195 [
    i32 2, label %1703
    i32 5, label %1756
  ], !dbg !1397

1703:                                             ; preds = %1701
  %1704 = load i32, i32* @x.17
  %1705 = load i32, i32* @y.18
  %1706 = sub i32 %1704, 1
  %1707 = mul i32 %1704, %1706
  %1708 = urem i32 %1707, 2
  %1709 = icmp eq i32 %1708, 0
  %1710 = icmp slt i32 %1705, 10
  %1711 = or i1 %1709, %1710
  br i1 %1711, label %originalBB455, label %originalBB455alteredBB

originalBB455:                                    ; preds = %1703, %originalBB455alteredBB
  %1712 = load i8, i8* %35, align 1, !dbg !1398
  %1713 = trunc i8 %1712 to i1, !dbg !1398
  %1714 = load i32, i32* @x.17
  %1715 = load i32, i32* @y.18
  %1716 = sub i32 %1714, 1
  %1717 = mul i32 %1714, %1716
  %1718 = urem i32 %1717, 2
  %1719 = icmp eq i32 %1718, 0
  %1720 = icmp slt i32 %1715, 10
  %1721 = or i1 %1719, %1720
  br i1 %1721, label %originalBBpart2457, label %originalBB455alteredBB

originalBBpart2457:                               ; preds = %originalBB455
  br i1 %1713, label %1722, label %1739, !dbg !1401

1722:                                             ; preds = %originalBBpart2457
  %1723 = load i32, i32* @x.17
  %1724 = load i32, i32* @y.18
  %1725 = sub i32 %1723, 1
  %1726 = mul i32 %1723, %1725
  %1727 = urem i32 %1726, 2
  %1728 = icmp eq i32 %1727, 0
  %1729 = icmp slt i32 %1724, 10
  %1730 = or i1 %1728, %1729
  br i1 %1730, label %originalBB459, label %originalBB459alteredBB

originalBB459:                                    ; preds = %1722, %originalBB459alteredBB
  %1731 = load i32, i32* @x.17
  %1732 = load i32, i32* @y.18
  %1733 = sub i32 %1731, 1
  %1734 = mul i32 %1731, %1733
  %1735 = urem i32 %1734, 2
  %1736 = icmp eq i32 %1735, 0
  %1737 = icmp slt i32 %1732, 10
  %1738 = or i1 %1736, %1737
  br i1 %1738, label %originalBBpart2461, label %originalBB459alteredBB

originalBBpart2461:                               ; preds = %originalBB459
  br label %6286, !dbg !1402

1739:                                             ; preds = %originalBBpart2457
  %1740 = load i32, i32* @x.17
  %1741 = load i32, i32* @y.18
  %1742 = sub i32 %1740, 1
  %1743 = mul i32 %1740, %1742
  %1744 = urem i32 %1743, 2
  %1745 = icmp eq i32 %1744, 0
  %1746 = icmp slt i32 %1741, 10
  %1747 = or i1 %1745, %1746
  br i1 %1747, label %originalBB463, label %originalBB463alteredBB

originalBB463:                                    ; preds = %1739, %originalBB463alteredBB
  %1748 = load i32, i32* @x.17
  %1749 = load i32, i32* @y.18
  %1750 = sub i32 %1748, 1
  %1751 = mul i32 %1748, %1750
  %1752 = urem i32 %1751, 2
  %1753 = icmp eq i32 %1752, 0
  %1754 = icmp slt i32 %1749, 10
  %1755 = or i1 %1753, %1754
  br i1 %1755, label %originalBBpart2465, label %originalBB463alteredBB

originalBBpart2465:                               ; preds = %originalBB463
  br label %2212, !dbg !1403

1756:                                             ; preds = %1701
  %1757 = load i32, i32* @x.17
  %1758 = load i32, i32* @y.18
  %1759 = sub i32 %1757, 1
  %1760 = mul i32 %1757, %1759
  %1761 = urem i32 %1760, 2
  %1762 = icmp eq i32 %1761, 0
  %1763 = icmp slt i32 %1758, 10
  %1764 = or i1 %1762, %1763
  br i1 %1764, label %originalBB467, label %originalBB467alteredBB

originalBB467:                                    ; preds = %1756, %originalBB467alteredBB
  %1765 = load i32, i32* %24, align 4, !dbg !1404
  %1766 = and i32 %1765, 4, !dbg !1406
  %1767 = icmp ne i32 %1766, 0, !dbg !1406
  %1768 = load i32, i32* @x.17
  %1769 = load i32, i32* @y.18
  %1770 = sub i32 %1768, 1
  %1771 = mul i32 %1768, %1770
  %1772 = urem i32 %1771, 2
  %1773 = icmp eq i32 %1772, 0
  %1774 = icmp slt i32 %1769, 10
  %1775 = or i1 %1773, %1774
  br i1 %1775, label %originalBBpart2476, label %originalBB467alteredBB

originalBBpart2476:                               ; preds = %originalBB467
  br i1 %1767, label %1776, label %2194, !dbg !1407

1776:                                             ; preds = %originalBBpart2476
  %1777 = load i32, i32* @x.17
  %1778 = load i32, i32* @y.18
  %1779 = sub i32 %1777, 1
  %1780 = mul i32 %1777, %1779
  %1781 = urem i32 %1780, 2
  %1782 = icmp eq i32 %1781, 0
  %1783 = icmp slt i32 %1778, 10
  %1784 = or i1 %1782, %1783
  br i1 %1784, label %originalBB478, label %originalBB478alteredBB

originalBB478:                                    ; preds = %1776, %originalBB478alteredBB
  %1785 = load i64, i64* %28, align 8, !dbg !1408
  %1786 = add i64 %1785, 2, !dbg !1409
  %1787 = load i64, i64* %22, align 8, !dbg !1410
  %1788 = icmp ult i64 %1786, %1787, !dbg !1411
  %1789 = load i32, i32* @x.17
  %1790 = load i32, i32* @y.18
  %1791 = sub i32 %1789, 1
  %1792 = mul i32 %1789, %1791
  %1793 = urem i32 %1792, 2
  %1794 = icmp eq i32 %1793, 0
  %1795 = icmp slt i32 %1790, 10
  %1796 = or i1 %1794, %1795
  br i1 %1796, label %originalBBpart2482, label %originalBB478alteredBB

originalBBpart2482:                               ; preds = %originalBB478
  br i1 %1788, label %1797, label %2194, !dbg !1412

1797:                                             ; preds = %originalBBpart2482
  %1798 = load i32, i32* @x.17
  %1799 = load i32, i32* @y.18
  %1800 = sub i32 %1798, 1
  %1801 = mul i32 %1798, %1800
  %1802 = urem i32 %1801, 2
  %1803 = icmp eq i32 %1802, 0
  %1804 = icmp slt i32 %1799, 10
  %1805 = or i1 %1803, %1804
  br i1 %1805, label %originalBB484, label %originalBB484alteredBB

originalBB484:                                    ; preds = %1797, %originalBB484alteredBB
  %1806 = load i8*, i8** %21, align 8, !dbg !1413
  %1807 = load i64, i64* %28, align 8, !dbg !1414
  %1808 = add i64 %1807, 1, !dbg !1415
  %1809 = getelementptr inbounds i8, i8* %1806, i64 %1808, !dbg !1413
  %1810 = load i8, i8* %1809, align 1, !dbg !1413
  %1811 = sext i8 %1810 to i32, !dbg !1413
  %1812 = icmp eq i32 %1811, 63, !dbg !1416
  %1813 = load i32, i32* @x.17
  %1814 = load i32, i32* @y.18
  %1815 = sub i32 %1813, 1
  %1816 = mul i32 %1813, %1815
  %1817 = urem i32 %1816, 2
  %1818 = icmp eq i32 %1817, 0
  %1819 = icmp slt i32 %1814, 10
  %1820 = or i1 %1818, %1819
  br i1 %1820, label %originalBBpart2492, label %originalBB484alteredBB

originalBBpart2492:                               ; preds = %originalBB484
  br i1 %1812, label %1821, label %2194, !dbg !1417

1821:                                             ; preds = %originalBBpart2492
  %1822 = load i32, i32* @x.17
  %1823 = load i32, i32* @y.18
  %1824 = sub i32 %1822, 1
  %1825 = mul i32 %1822, %1824
  %1826 = urem i32 %1825, 2
  %1827 = icmp eq i32 %1826, 0
  %1828 = icmp slt i32 %1823, 10
  %1829 = or i1 %1827, %1828
  br i1 %1829, label %originalBB494, label %originalBB494alteredBB

originalBB494:                                    ; preds = %1821, %originalBB494alteredBB
  %1830 = load i8*, i8** %21, align 8, !dbg !1418
  %1831 = load i64, i64* %28, align 8, !dbg !1419
  %1832 = add i64 %1831, 2, !dbg !1420
  %1833 = getelementptr inbounds i8, i8* %1830, i64 %1832, !dbg !1418
  %1834 = load i8, i8* %1833, align 1, !dbg !1418
  %1835 = sext i8 %1834 to i32, !dbg !1418
  %1836 = load i32, i32* @x.17
  %1837 = load i32, i32* @y.18
  %1838 = sub i32 %1836, 1
  %1839 = mul i32 %1836, %1838
  %1840 = urem i32 %1839, 2
  %1841 = icmp eq i32 %1840, 0
  %1842 = icmp slt i32 %1837, 10
  %1843 = or i1 %1841, %1842
  br i1 %1843, label %originalBBpart2503, label %originalBB494alteredBB

originalBBpart2503:                               ; preds = %originalBB494
  switch i32 %1835, label %2160 [
    i32 33, label %1844
    i32 39, label %1844
    i32 40, label %1844
    i32 41, label %1844
    i32 45, label %1844
    i32 47, label %1844
    i32 60, label %1844
    i32 61, label %1844
    i32 62, label %1844
  ], !dbg !1421

1844:                                             ; preds = %originalBBpart2503, %originalBBpart2503, %originalBBpart2503, %originalBBpart2503, %originalBBpart2503, %originalBBpart2503, %originalBBpart2503, %originalBBpart2503, %originalBBpart2503
  %1845 = load i32, i32* @x.17
  %1846 = load i32, i32* @y.18
  %1847 = sub i32 %1845, 1
  %1848 = mul i32 %1845, %1847
  %1849 = urem i32 %1848, 2
  %1850 = icmp eq i32 %1849, 0
  %1851 = icmp slt i32 %1846, 10
  %1852 = or i1 %1850, %1851
  br i1 %1852, label %originalBB505, label %originalBB505alteredBB

originalBB505:                                    ; preds = %1844, %originalBB505alteredBB
  %1853 = load i8, i8* %35, align 1, !dbg !1422
  %1854 = trunc i8 %1853 to i1, !dbg !1422
  %1855 = load i32, i32* @x.17
  %1856 = load i32, i32* @y.18
  %1857 = sub i32 %1855, 1
  %1858 = mul i32 %1855, %1857
  %1859 = urem i32 %1858, 2
  %1860 = icmp eq i32 %1859, 0
  %1861 = icmp slt i32 %1856, 10
  %1862 = or i1 %1860, %1861
  br i1 %1862, label %originalBBpart2507, label %originalBB505alteredBB

originalBBpart2507:                               ; preds = %originalBB505
  br i1 %1854, label %1863, label %1880, !dbg !1425

1863:                                             ; preds = %originalBBpart2507
  %1864 = load i32, i32* @x.17
  %1865 = load i32, i32* @y.18
  %1866 = sub i32 %1864, 1
  %1867 = mul i32 %1864, %1866
  %1868 = urem i32 %1867, 2
  %1869 = icmp eq i32 %1868, 0
  %1870 = icmp slt i32 %1865, 10
  %1871 = or i1 %1869, %1870
  br i1 %1871, label %originalBB509, label %originalBB509alteredBB

originalBB509:                                    ; preds = %1863, %originalBB509alteredBB
  %1872 = load i32, i32* @x.17
  %1873 = load i32, i32* @y.18
  %1874 = sub i32 %1872, 1
  %1875 = mul i32 %1872, %1874
  %1876 = urem i32 %1875, 2
  %1877 = icmp eq i32 %1876, 0
  %1878 = icmp slt i32 %1873, 10
  %1879 = or i1 %1877, %1878
  br i1 %1879, label %originalBBpart2511, label %originalBB509alteredBB

originalBBpart2511:                               ; preds = %originalBB509
  br label %6286, !dbg !1426

1880:                                             ; preds = %originalBBpart2507
  %1881 = load i32, i32* @x.17
  %1882 = load i32, i32* @y.18
  %1883 = sub i32 %1881, 1
  %1884 = mul i32 %1881, %1883
  %1885 = urem i32 %1884, 2
  %1886 = icmp eq i32 %1885, 0
  %1887 = icmp slt i32 %1882, 10
  %1888 = or i1 %1886, %1887
  br i1 %1888, label %originalBB513, label %originalBB513alteredBB

originalBB513:                                    ; preds = %1880, %originalBB513alteredBB
  %1889 = load i8*, i8** %21, align 8, !dbg !1427
  %1890 = load i64, i64* %28, align 8, !dbg !1428
  %1891 = add i64 %1890, 2, !dbg !1429
  %1892 = getelementptr inbounds i8, i8* %1889, i64 %1891, !dbg !1427
  %1893 = load i8, i8* %1892, align 1, !dbg !1427
  store i8 %1893, i8* %39, align 1, !dbg !1430
  %1894 = load i64, i64* %28, align 8, !dbg !1431
  %1895 = add i64 %1894, 2, !dbg !1431
  store i64 %1895, i64* %28, align 8, !dbg !1431
  %1896 = load i32, i32* @x.17
  %1897 = load i32, i32* @y.18
  %1898 = sub i32 %1896, 1
  %1899 = mul i32 %1896, %1898
  %1900 = urem i32 %1899, 2
  %1901 = icmp eq i32 %1900, 0
  %1902 = icmp slt i32 %1897, 10
  %1903 = or i1 %1901, %1902
  br i1 %1903, label %originalBBpart2518, label %originalBB513alteredBB

originalBBpart2518:                               ; preds = %originalBB513
  br label %1904, !dbg !1432

1904:                                             ; preds = %originalBBpart2518
  %1905 = load i32, i32* @x.17
  %1906 = load i32, i32* @y.18
  %1907 = sub i32 %1905, 1
  %1908 = mul i32 %1905, %1907
  %1909 = urem i32 %1908, 2
  %1910 = icmp eq i32 %1909, 0
  %1911 = icmp slt i32 %1906, 10
  %1912 = or i1 %1910, %1911
  br i1 %1912, label %originalBB520, label %originalBB520alteredBB

originalBB520:                                    ; preds = %1904, %originalBB520alteredBB
  %1913 = load i64, i64* %29, align 8, !dbg !1433
  %1914 = load i64, i64* %20, align 8, !dbg !1433
  %1915 = icmp ult i64 %1913, %1914, !dbg !1433
  %1916 = load i32, i32* @x.17
  %1917 = load i32, i32* @y.18
  %1918 = sub i32 %1916, 1
  %1919 = mul i32 %1916, %1918
  %1920 = urem i32 %1919, 2
  %1921 = icmp eq i32 %1920, 0
  %1922 = icmp slt i32 %1917, 10
  %1923 = or i1 %1921, %1922
  br i1 %1923, label %originalBBpart2522, label %originalBB520alteredBB

originalBBpart2522:                               ; preds = %originalBB520
  br i1 %1915, label %1924, label %1928, !dbg !1436

1924:                                             ; preds = %originalBBpart2522
  %1925 = load i8*, i8** %19, align 8, !dbg !1433
  %1926 = load i64, i64* %29, align 8, !dbg !1433
  %1927 = getelementptr inbounds i8, i8* %1925, i64 %1926, !dbg !1433
  store i8 63, i8* %1927, align 1, !dbg !1433
  br label %1928, !dbg !1433

1928:                                             ; preds = %1924, %originalBBpart2522
  %1929 = load i64, i64* %29, align 8, !dbg !1436
  %1930 = add i64 %1929, 1, !dbg !1436
  store i64 %1930, i64* %29, align 8, !dbg !1436
  br label %1931, !dbg !1436

1931:                                             ; preds = %1928
  %1932 = load i32, i32* @x.17
  %1933 = load i32, i32* @y.18
  %1934 = sub i32 %1932, 1
  %1935 = mul i32 %1932, %1934
  %1936 = urem i32 %1935, 2
  %1937 = icmp eq i32 %1936, 0
  %1938 = icmp slt i32 %1933, 10
  %1939 = or i1 %1937, %1938
  br i1 %1939, label %originalBB524, label %originalBB524alteredBB

originalBB524:                                    ; preds = %1931, %originalBB524alteredBB
  %1940 = load i32, i32* @x.17
  %1941 = load i32, i32* @y.18
  %1942 = sub i32 %1940, 1
  %1943 = mul i32 %1940, %1942
  %1944 = urem i32 %1943, 2
  %1945 = icmp eq i32 %1944, 0
  %1946 = icmp slt i32 %1941, 10
  %1947 = or i1 %1945, %1946
  br i1 %1947, label %originalBBpart2526, label %originalBB524alteredBB

originalBBpart2526:                               ; preds = %originalBB524
  br label %1948, !dbg !1437

1948:                                             ; preds = %originalBBpart2526
  %1949 = load i32, i32* @x.17
  %1950 = load i32, i32* @y.18
  %1951 = sub i32 %1949, 1
  %1952 = mul i32 %1949, %1951
  %1953 = urem i32 %1952, 2
  %1954 = icmp eq i32 %1953, 0
  %1955 = icmp slt i32 %1950, 10
  %1956 = or i1 %1954, %1955
  br i1 %1956, label %originalBB528, label %originalBB528alteredBB

originalBB528:                                    ; preds = %1948, %originalBB528alteredBB
  %1957 = load i64, i64* %29, align 8, !dbg !1438
  %1958 = load i64, i64* %20, align 8, !dbg !1438
  %1959 = icmp ult i64 %1957, %1958, !dbg !1438
  %1960 = load i32, i32* @x.17
  %1961 = load i32, i32* @y.18
  %1962 = sub i32 %1960, 1
  %1963 = mul i32 %1960, %1962
  %1964 = urem i32 %1963, 2
  %1965 = icmp eq i32 %1964, 0
  %1966 = icmp slt i32 %1961, 10
  %1967 = or i1 %1965, %1966
  br i1 %1967, label %originalBBpart2530, label %originalBB528alteredBB

originalBBpart2530:                               ; preds = %originalBB528
  br i1 %1959, label %1968, label %1988, !dbg !1441

1968:                                             ; preds = %originalBBpart2530
  %1969 = load i32, i32* @x.17
  %1970 = load i32, i32* @y.18
  %1971 = sub i32 %1969, 1
  %1972 = mul i32 %1969, %1971
  %1973 = urem i32 %1972, 2
  %1974 = icmp eq i32 %1973, 0
  %1975 = icmp slt i32 %1970, 10
  %1976 = or i1 %1974, %1975
  br i1 %1976, label %originalBB532, label %originalBB532alteredBB

originalBB532:                                    ; preds = %1968, %originalBB532alteredBB
  %1977 = load i8*, i8** %19, align 8, !dbg !1438
  %1978 = load i64, i64* %29, align 8, !dbg !1438
  %1979 = getelementptr inbounds i8, i8* %1977, i64 %1978, !dbg !1438
  store i8 34, i8* %1979, align 1, !dbg !1438
  %1980 = load i32, i32* @x.17
  %1981 = load i32, i32* @y.18
  %1982 = sub i32 %1980, 1
  %1983 = mul i32 %1980, %1982
  %1984 = urem i32 %1983, 2
  %1985 = icmp eq i32 %1984, 0
  %1986 = icmp slt i32 %1981, 10
  %1987 = or i1 %1985, %1986
  br i1 %1987, label %originalBBpart2534, label %originalBB532alteredBB

originalBBpart2534:                               ; preds = %originalBB532
  br label %1988, !dbg !1438

1988:                                             ; preds = %originalBBpart2534, %originalBBpart2530
  %1989 = load i32, i32* @x.17
  %1990 = load i32, i32* @y.18
  %1991 = sub i32 %1989, 1
  %1992 = mul i32 %1989, %1991
  %1993 = urem i32 %1992, 2
  %1994 = icmp eq i32 %1993, 0
  %1995 = icmp slt i32 %1990, 10
  %1996 = or i1 %1994, %1995
  br i1 %1996, label %originalBB536, label %originalBB536alteredBB

originalBB536:                                    ; preds = %1988, %originalBB536alteredBB
  %1997 = load i64, i64* %29, align 8, !dbg !1441
  %1998 = add i64 %1997, 1, !dbg !1441
  store i64 %1998, i64* %29, align 8, !dbg !1441
  %1999 = load i32, i32* @x.17
  %2000 = load i32, i32* @y.18
  %2001 = sub i32 %1999, 1
  %2002 = mul i32 %1999, %2001
  %2003 = urem i32 %2002, 2
  %2004 = icmp eq i32 %2003, 0
  %2005 = icmp slt i32 %2000, 10
  %2006 = or i1 %2004, %2005
  br i1 %2006, label %originalBBpart2540, label %originalBB536alteredBB

originalBBpart2540:                               ; preds = %originalBB536
  br label %2007, !dbg !1441

2007:                                             ; preds = %originalBBpart2540
  %2008 = load i32, i32* @x.17
  %2009 = load i32, i32* @y.18
  %2010 = sub i32 %2008, 1
  %2011 = mul i32 %2008, %2010
  %2012 = urem i32 %2011, 2
  %2013 = icmp eq i32 %2012, 0
  %2014 = icmp slt i32 %2009, 10
  %2015 = or i1 %2013, %2014
  br i1 %2015, label %originalBB542, label %originalBB542alteredBB

originalBB542:                                    ; preds = %2007, %originalBB542alteredBB
  %2016 = load i32, i32* @x.17
  %2017 = load i32, i32* @y.18
  %2018 = sub i32 %2016, 1
  %2019 = mul i32 %2016, %2018
  %2020 = urem i32 %2019, 2
  %2021 = icmp eq i32 %2020, 0
  %2022 = icmp slt i32 %2017, 10
  %2023 = or i1 %2021, %2022
  br i1 %2023, label %originalBBpart2544, label %originalBB542alteredBB

originalBBpart2544:                               ; preds = %originalBB542
  br label %2024, !dbg !1442

2024:                                             ; preds = %originalBBpart2544
  %2025 = load i32, i32* @x.17
  %2026 = load i32, i32* @y.18
  %2027 = sub i32 %2025, 1
  %2028 = mul i32 %2025, %2027
  %2029 = urem i32 %2028, 2
  %2030 = icmp eq i32 %2029, 0
  %2031 = icmp slt i32 %2026, 10
  %2032 = or i1 %2030, %2031
  br i1 %2032, label %originalBB546, label %originalBB546alteredBB

originalBB546:                                    ; preds = %2024, %originalBB546alteredBB
  %2033 = load i64, i64* %29, align 8, !dbg !1443
  %2034 = load i64, i64* %20, align 8, !dbg !1443
  %2035 = icmp ult i64 %2033, %2034, !dbg !1443
  %2036 = load i32, i32* @x.17
  %2037 = load i32, i32* @y.18
  %2038 = sub i32 %2036, 1
  %2039 = mul i32 %2036, %2038
  %2040 = urem i32 %2039, 2
  %2041 = icmp eq i32 %2040, 0
  %2042 = icmp slt i32 %2037, 10
  %2043 = or i1 %2041, %2042
  br i1 %2043, label %originalBBpart2548, label %originalBB546alteredBB

originalBBpart2548:                               ; preds = %originalBB546
  br i1 %2035, label %2044, label %2064, !dbg !1446

2044:                                             ; preds = %originalBBpart2548
  %2045 = load i32, i32* @x.17
  %2046 = load i32, i32* @y.18
  %2047 = sub i32 %2045, 1
  %2048 = mul i32 %2045, %2047
  %2049 = urem i32 %2048, 2
  %2050 = icmp eq i32 %2049, 0
  %2051 = icmp slt i32 %2046, 10
  %2052 = or i1 %2050, %2051
  br i1 %2052, label %originalBB550, label %originalBB550alteredBB

originalBB550:                                    ; preds = %2044, %originalBB550alteredBB
  %2053 = load i8*, i8** %19, align 8, !dbg !1443
  %2054 = load i64, i64* %29, align 8, !dbg !1443
  %2055 = getelementptr inbounds i8, i8* %2053, i64 %2054, !dbg !1443
  store i8 34, i8* %2055, align 1, !dbg !1443
  %2056 = load i32, i32* @x.17
  %2057 = load i32, i32* @y.18
  %2058 = sub i32 %2056, 1
  %2059 = mul i32 %2056, %2058
  %2060 = urem i32 %2059, 2
  %2061 = icmp eq i32 %2060, 0
  %2062 = icmp slt i32 %2057, 10
  %2063 = or i1 %2061, %2062
  br i1 %2063, label %originalBBpart2552, label %originalBB550alteredBB

originalBBpart2552:                               ; preds = %originalBB550
  br label %2064, !dbg !1443

2064:                                             ; preds = %originalBBpart2552, %originalBBpart2548
  %2065 = load i32, i32* @x.17
  %2066 = load i32, i32* @y.18
  %2067 = sub i32 %2065, 1
  %2068 = mul i32 %2065, %2067
  %2069 = urem i32 %2068, 2
  %2070 = icmp eq i32 %2069, 0
  %2071 = icmp slt i32 %2066, 10
  %2072 = or i1 %2070, %2071
  br i1 %2072, label %originalBB554, label %originalBB554alteredBB

originalBB554:                                    ; preds = %2064, %originalBB554alteredBB
  %2073 = load i64, i64* %29, align 8, !dbg !1446
  %2074 = add i64 %2073, 1, !dbg !1446
  store i64 %2074, i64* %29, align 8, !dbg !1446
  %2075 = load i32, i32* @x.17
  %2076 = load i32, i32* @y.18
  %2077 = sub i32 %2075, 1
  %2078 = mul i32 %2075, %2077
  %2079 = urem i32 %2078, 2
  %2080 = icmp eq i32 %2079, 0
  %2081 = icmp slt i32 %2076, 10
  %2082 = or i1 %2080, %2081
  br i1 %2082, label %originalBBpart2559, label %originalBB554alteredBB

originalBBpart2559:                               ; preds = %originalBB554
  br label %2083, !dbg !1446

2083:                                             ; preds = %originalBBpart2559
  %2084 = load i32, i32* @x.17
  %2085 = load i32, i32* @y.18
  %2086 = sub i32 %2084, 1
  %2087 = mul i32 %2084, %2086
  %2088 = urem i32 %2087, 2
  %2089 = icmp eq i32 %2088, 0
  %2090 = icmp slt i32 %2085, 10
  %2091 = or i1 %2089, %2090
  br i1 %2091, label %originalBB561, label %originalBB561alteredBB

originalBB561:                                    ; preds = %2083, %originalBB561alteredBB
  %2092 = load i32, i32* @x.17
  %2093 = load i32, i32* @y.18
  %2094 = sub i32 %2092, 1
  %2095 = mul i32 %2092, %2094
  %2096 = urem i32 %2095, 2
  %2097 = icmp eq i32 %2096, 0
  %2098 = icmp slt i32 %2093, 10
  %2099 = or i1 %2097, %2098
  br i1 %2099, label %originalBBpart2563, label %originalBB561alteredBB

originalBBpart2563:                               ; preds = %originalBB561
  br label %2100, !dbg !1447

2100:                                             ; preds = %originalBBpart2563
  %2101 = load i32, i32* @x.17
  %2102 = load i32, i32* @y.18
  %2103 = sub i32 %2101, 1
  %2104 = mul i32 %2101, %2103
  %2105 = urem i32 %2104, 2
  %2106 = icmp eq i32 %2105, 0
  %2107 = icmp slt i32 %2102, 10
  %2108 = or i1 %2106, %2107
  br i1 %2108, label %originalBB565, label %originalBB565alteredBB

originalBB565:                                    ; preds = %2100, %originalBB565alteredBB
  %2109 = load i64, i64* %29, align 8, !dbg !1448
  %2110 = load i64, i64* %20, align 8, !dbg !1448
  %2111 = icmp ult i64 %2109, %2110, !dbg !1448
  %2112 = load i32, i32* @x.17
  %2113 = load i32, i32* @y.18
  %2114 = sub i32 %2112, 1
  %2115 = mul i32 %2112, %2114
  %2116 = urem i32 %2115, 2
  %2117 = icmp eq i32 %2116, 0
  %2118 = icmp slt i32 %2113, 10
  %2119 = or i1 %2117, %2118
  br i1 %2119, label %originalBBpart2567, label %originalBB565alteredBB

originalBBpart2567:                               ; preds = %originalBB565
  br i1 %2111, label %2120, label %2140, !dbg !1451

2120:                                             ; preds = %originalBBpart2567
  %2121 = load i32, i32* @x.17
  %2122 = load i32, i32* @y.18
  %2123 = sub i32 %2121, 1
  %2124 = mul i32 %2121, %2123
  %2125 = urem i32 %2124, 2
  %2126 = icmp eq i32 %2125, 0
  %2127 = icmp slt i32 %2122, 10
  %2128 = or i1 %2126, %2127
  br i1 %2128, label %originalBB569, label %originalBB569alteredBB

originalBB569:                                    ; preds = %2120, %originalBB569alteredBB
  %2129 = load i8*, i8** %19, align 8, !dbg !1448
  %2130 = load i64, i64* %29, align 8, !dbg !1448
  %2131 = getelementptr inbounds i8, i8* %2129, i64 %2130, !dbg !1448
  store i8 63, i8* %2131, align 1, !dbg !1448
  %2132 = load i32, i32* @x.17
  %2133 = load i32, i32* @y.18
  %2134 = sub i32 %2132, 1
  %2135 = mul i32 %2132, %2134
  %2136 = urem i32 %2135, 2
  %2137 = icmp eq i32 %2136, 0
  %2138 = icmp slt i32 %2133, 10
  %2139 = or i1 %2137, %2138
  br i1 %2139, label %originalBBpart2571, label %originalBB569alteredBB

originalBBpart2571:                               ; preds = %originalBB569
  br label %2140, !dbg !1448

2140:                                             ; preds = %originalBBpart2571, %originalBBpart2567
  %2141 = load i64, i64* %29, align 8, !dbg !1451
  %2142 = add i64 %2141, 1, !dbg !1451
  store i64 %2142, i64* %29, align 8, !dbg !1451
  br label %2143, !dbg !1451

2143:                                             ; preds = %2140
  %2144 = load i32, i32* @x.17
  %2145 = load i32, i32* @y.18
  %2146 = sub i32 %2144, 1
  %2147 = mul i32 %2144, %2146
  %2148 = urem i32 %2147, 2
  %2149 = icmp eq i32 %2148, 0
  %2150 = icmp slt i32 %2145, 10
  %2151 = or i1 %2149, %2150
  br i1 %2151, label %originalBB573, label %originalBB573alteredBB

originalBB573:                                    ; preds = %2143, %originalBB573alteredBB
  %2152 = load i32, i32* @x.17
  %2153 = load i32, i32* @y.18
  %2154 = sub i32 %2152, 1
  %2155 = mul i32 %2152, %2154
  %2156 = urem i32 %2155, 2
  %2157 = icmp eq i32 %2156, 0
  %2158 = icmp slt i32 %2153, 10
  %2159 = or i1 %2157, %2158
  br i1 %2159, label %originalBBpart2575, label %originalBB573alteredBB

originalBBpart2575:                               ; preds = %originalBB573
  br label %2177, !dbg !1452

2160:                                             ; preds = %originalBBpart2503
  %2161 = load i32, i32* @x.17
  %2162 = load i32, i32* @y.18
  %2163 = sub i32 %2161, 1
  %2164 = mul i32 %2161, %2163
  %2165 = urem i32 %2164, 2
  %2166 = icmp eq i32 %2165, 0
  %2167 = icmp slt i32 %2162, 10
  %2168 = or i1 %2166, %2167
  br i1 %2168, label %originalBB577, label %originalBB577alteredBB

originalBB577:                                    ; preds = %2160, %originalBB577alteredBB
  %2169 = load i32, i32* @x.17
  %2170 = load i32, i32* @y.18
  %2171 = sub i32 %2169, 1
  %2172 = mul i32 %2169, %2171
  %2173 = urem i32 %2172, 2
  %2174 = icmp eq i32 %2173, 0
  %2175 = icmp slt i32 %2170, 10
  %2176 = or i1 %2174, %2175
  br i1 %2176, label %originalBBpart2579, label %originalBB577alteredBB

originalBBpart2579:                               ; preds = %originalBB577
  br label %2177, !dbg !1453

2177:                                             ; preds = %originalBBpart2579, %originalBBpart2575
  %2178 = load i32, i32* @x.17
  %2179 = load i32, i32* @y.18
  %2180 = sub i32 %2178, 1
  %2181 = mul i32 %2178, %2180
  %2182 = urem i32 %2181, 2
  %2183 = icmp eq i32 %2182, 0
  %2184 = icmp slt i32 %2179, 10
  %2185 = or i1 %2183, %2184
  br i1 %2185, label %originalBB581, label %originalBB581alteredBB

originalBB581:                                    ; preds = %2177, %originalBB581alteredBB
  %2186 = load i32, i32* @x.17
  %2187 = load i32, i32* @y.18
  %2188 = sub i32 %2186, 1
  %2189 = mul i32 %2186, %2188
  %2190 = urem i32 %2189, 2
  %2191 = icmp eq i32 %2190, 0
  %2192 = icmp slt i32 %2187, 10
  %2193 = or i1 %2191, %2192
  br i1 %2193, label %originalBBpart2583, label %originalBB581alteredBB

originalBBpart2583:                               ; preds = %originalBB581
  br label %2194, !dbg !1454

2194:                                             ; preds = %originalBBpart2583, %originalBBpart2492, %originalBBpart2482, %originalBBpart2476
  br label %2212, !dbg !1455

2195:                                             ; preds = %1701
  %2196 = load i32, i32* @x.17
  %2197 = load i32, i32* @y.18
  %2198 = sub i32 %2196, 1
  %2199 = mul i32 %2196, %2198
  %2200 = urem i32 %2199, 2
  %2201 = icmp eq i32 %2200, 0
  %2202 = icmp slt i32 %2197, 10
  %2203 = or i1 %2201, %2202
  br i1 %2203, label %originalBB585, label %originalBB585alteredBB

originalBB585:                                    ; preds = %2195, %originalBB585alteredBB
  %2204 = load i32, i32* @x.17
  %2205 = load i32, i32* @y.18
  %2206 = sub i32 %2204, 1
  %2207 = mul i32 %2204, %2206
  %2208 = urem i32 %2207, 2
  %2209 = icmp eq i32 %2208, 0
  %2210 = icmp slt i32 %2205, 10
  %2211 = or i1 %2209, %2210
  br i1 %2211, label %originalBBpart2587, label %originalBB585alteredBB

originalBBpart2587:                               ; preds = %originalBB585
  br label %2212, !dbg !1456

2212:                                             ; preds = %originalBBpart2587, %2194, %originalBBpart2465
  %2213 = load i32, i32* @x.17
  %2214 = load i32, i32* @y.18
  %2215 = sub i32 %2213, 1
  %2216 = mul i32 %2213, %2215
  %2217 = urem i32 %2216, 2
  %2218 = icmp eq i32 %2217, 0
  %2219 = icmp slt i32 %2214, 10
  %2220 = or i1 %2218, %2219
  br i1 %2220, label %originalBB589, label %originalBB589alteredBB

originalBB589:                                    ; preds = %2212, %originalBB589alteredBB
  %2221 = load i32, i32* @x.17
  %2222 = load i32, i32* @y.18
  %2223 = sub i32 %2221, 1
  %2224 = mul i32 %2221, %2223
  %2225 = urem i32 %2224, 2
  %2226 = icmp eq i32 %2225, 0
  %2227 = icmp slt i32 %2222, 10
  %2228 = or i1 %2226, %2227
  br i1 %2228, label %originalBBpart2591, label %originalBB589alteredBB

originalBBpart2591:                               ; preds = %originalBB589
  br label %4889, !dbg !1457

2229:                                             ; preds = %originalBBpart2232
  store i8 97, i8* %40, align 1, !dbg !1458
  br label %2568, !dbg !1459

2230:                                             ; preds = %originalBBpart2232
  %2231 = load i32, i32* @x.17
  %2232 = load i32, i32* @y.18
  %2233 = sub i32 %2231, 1
  %2234 = mul i32 %2231, %2233
  %2235 = urem i32 %2234, 2
  %2236 = icmp eq i32 %2235, 0
  %2237 = icmp slt i32 %2232, 10
  %2238 = or i1 %2236, %2237
  br i1 %2238, label %originalBB593, label %originalBB593alteredBB

originalBB593:                                    ; preds = %2230, %originalBB593alteredBB
  store i8 98, i8* %40, align 1, !dbg !1460
  %2239 = load i32, i32* @x.17
  %2240 = load i32, i32* @y.18
  %2241 = sub i32 %2239, 1
  %2242 = mul i32 %2239, %2241
  %2243 = urem i32 %2242, 2
  %2244 = icmp eq i32 %2243, 0
  %2245 = icmp slt i32 %2240, 10
  %2246 = or i1 %2244, %2245
  br i1 %2246, label %originalBBpart2595, label %originalBB593alteredBB

originalBBpart2595:                               ; preds = %originalBB593
  br label %2568, !dbg !1461

2247:                                             ; preds = %originalBBpart2232
  %2248 = load i32, i32* @x.17
  %2249 = load i32, i32* @y.18
  %2250 = sub i32 %2248, 1
  %2251 = mul i32 %2248, %2250
  %2252 = urem i32 %2251, 2
  %2253 = icmp eq i32 %2252, 0
  %2254 = icmp slt i32 %2249, 10
  %2255 = or i1 %2253, %2254
  br i1 %2255, label %originalBB597, label %originalBB597alteredBB

originalBB597:                                    ; preds = %2247, %originalBB597alteredBB
  store i8 102, i8* %40, align 1, !dbg !1462
  %2256 = load i32, i32* @x.17
  %2257 = load i32, i32* @y.18
  %2258 = sub i32 %2256, 1
  %2259 = mul i32 %2256, %2258
  %2260 = urem i32 %2259, 2
  %2261 = icmp eq i32 %2260, 0
  %2262 = icmp slt i32 %2257, 10
  %2263 = or i1 %2261, %2262
  br i1 %2263, label %originalBBpart2599, label %originalBB597alteredBB

originalBBpart2599:                               ; preds = %originalBB597
  br label %2568, !dbg !1463

2264:                                             ; preds = %originalBBpart2232
  %2265 = load i32, i32* @x.17
  %2266 = load i32, i32* @y.18
  %2267 = sub i32 %2265, 1
  %2268 = mul i32 %2265, %2267
  %2269 = urem i32 %2268, 2
  %2270 = icmp eq i32 %2269, 0
  %2271 = icmp slt i32 %2266, 10
  %2272 = or i1 %2270, %2271
  br i1 %2272, label %originalBB601, label %originalBB601alteredBB

originalBB601:                                    ; preds = %2264, %originalBB601alteredBB
  store i8 110, i8* %40, align 1, !dbg !1464
  %2273 = load i32, i32* @x.17
  %2274 = load i32, i32* @y.18
  %2275 = sub i32 %2273, 1
  %2276 = mul i32 %2273, %2275
  %2277 = urem i32 %2276, 2
  %2278 = icmp eq i32 %2277, 0
  %2279 = icmp slt i32 %2274, 10
  %2280 = or i1 %2278, %2279
  br i1 %2280, label %originalBBpart2603, label %originalBB601alteredBB

originalBBpart2603:                               ; preds = %originalBB601
  br label %2496, !dbg !1465

2281:                                             ; preds = %originalBBpart2232
  %2282 = load i32, i32* @x.17
  %2283 = load i32, i32* @y.18
  %2284 = sub i32 %2282, 1
  %2285 = mul i32 %2282, %2284
  %2286 = urem i32 %2285, 2
  %2287 = icmp eq i32 %2286, 0
  %2288 = icmp slt i32 %2283, 10
  %2289 = or i1 %2287, %2288
  br i1 %2289, label %originalBB605, label %originalBB605alteredBB

originalBB605:                                    ; preds = %2281, %originalBB605alteredBB
  store i8 114, i8* %40, align 1, !dbg !1466
  %2290 = load i32, i32* @x.17
  %2291 = load i32, i32* @y.18
  %2292 = sub i32 %2290, 1
  %2293 = mul i32 %2290, %2292
  %2294 = urem i32 %2293, 2
  %2295 = icmp eq i32 %2294, 0
  %2296 = icmp slt i32 %2291, 10
  %2297 = or i1 %2295, %2296
  br i1 %2297, label %originalBBpart2607, label %originalBB605alteredBB

originalBBpart2607:                               ; preds = %originalBB605
  br label %2496, !dbg !1467

2298:                                             ; preds = %originalBBpart2232
  %2299 = load i32, i32* @x.17
  %2300 = load i32, i32* @y.18
  %2301 = sub i32 %2299, 1
  %2302 = mul i32 %2299, %2301
  %2303 = urem i32 %2302, 2
  %2304 = icmp eq i32 %2303, 0
  %2305 = icmp slt i32 %2300, 10
  %2306 = or i1 %2304, %2305
  br i1 %2306, label %originalBB609, label %originalBB609alteredBB

originalBB609:                                    ; preds = %2298, %originalBB609alteredBB
  store i8 116, i8* %40, align 1, !dbg !1468
  %2307 = load i32, i32* @x.17
  %2308 = load i32, i32* @y.18
  %2309 = sub i32 %2307, 1
  %2310 = mul i32 %2307, %2309
  %2311 = urem i32 %2310, 2
  %2312 = icmp eq i32 %2311, 0
  %2313 = icmp slt i32 %2308, 10
  %2314 = or i1 %2312, %2313
  br i1 %2314, label %originalBBpart2611, label %originalBB609alteredBB

originalBBpart2611:                               ; preds = %originalBB609
  br label %2496, !dbg !1469

2315:                                             ; preds = %originalBBpart2232
  %2316 = load i32, i32* @x.17
  %2317 = load i32, i32* @y.18
  %2318 = sub i32 %2316, 1
  %2319 = mul i32 %2316, %2318
  %2320 = urem i32 %2319, 2
  %2321 = icmp eq i32 %2320, 0
  %2322 = icmp slt i32 %2317, 10
  %2323 = or i1 %2321, %2322
  br i1 %2323, label %originalBB613, label %originalBB613alteredBB

originalBB613:                                    ; preds = %2315, %originalBB613alteredBB
  store i8 118, i8* %40, align 1, !dbg !1470
  %2324 = load i32, i32* @x.17
  %2325 = load i32, i32* @y.18
  %2326 = sub i32 %2324, 1
  %2327 = mul i32 %2324, %2326
  %2328 = urem i32 %2327, 2
  %2329 = icmp eq i32 %2328, 0
  %2330 = icmp slt i32 %2325, 10
  %2331 = or i1 %2329, %2330
  br i1 %2331, label %originalBBpart2615, label %originalBB613alteredBB

originalBBpart2615:                               ; preds = %originalBB613
  br label %2568, !dbg !1471

2332:                                             ; preds = %originalBBpart2232
  %2333 = load i32, i32* @x.17
  %2334 = load i32, i32* @y.18
  %2335 = sub i32 %2333, 1
  %2336 = mul i32 %2333, %2335
  %2337 = urem i32 %2336, 2
  %2338 = icmp eq i32 %2337, 0
  %2339 = icmp slt i32 %2334, 10
  %2340 = or i1 %2338, %2339
  br i1 %2340, label %originalBB617, label %originalBB617alteredBB

originalBB617:                                    ; preds = %2332, %originalBB617alteredBB
  %2341 = load i8, i8* %39, align 1, !dbg !1472
  store i8 %2341, i8* %40, align 1, !dbg !1473
  %2342 = load i32, i32* %23, align 4, !dbg !1474
  %2343 = icmp eq i32 %2342, 2, !dbg !1476
  %2344 = load i32, i32* @x.17
  %2345 = load i32, i32* @y.18
  %2346 = sub i32 %2344, 1
  %2347 = mul i32 %2344, %2346
  %2348 = urem i32 %2347, 2
  %2349 = icmp eq i32 %2348, 0
  %2350 = icmp slt i32 %2345, 10
  %2351 = or i1 %2349, %2350
  br i1 %2351, label %originalBBpart2619, label %originalBB617alteredBB

originalBBpart2619:                               ; preds = %originalBB617
  br i1 %2343, label %2352, label %2405, !dbg !1477

2352:                                             ; preds = %originalBBpart2619
  %2353 = load i32, i32* @x.17
  %2354 = load i32, i32* @y.18
  %2355 = sub i32 %2353, 1
  %2356 = mul i32 %2353, %2355
  %2357 = urem i32 %2356, 2
  %2358 = icmp eq i32 %2357, 0
  %2359 = icmp slt i32 %2354, 10
  %2360 = or i1 %2358, %2359
  br i1 %2360, label %originalBB621, label %originalBB621alteredBB

originalBB621:                                    ; preds = %2352, %originalBB621alteredBB
  %2361 = load i8, i8* %35, align 1, !dbg !1478
  %2362 = trunc i8 %2361 to i1, !dbg !1478
  %2363 = load i32, i32* @x.17
  %2364 = load i32, i32* @y.18
  %2365 = sub i32 %2363, 1
  %2366 = mul i32 %2363, %2365
  %2367 = urem i32 %2366, 2
  %2368 = icmp eq i32 %2367, 0
  %2369 = icmp slt i32 %2364, 10
  %2370 = or i1 %2368, %2369
  br i1 %2370, label %originalBBpart2623, label %originalBB621alteredBB

originalBBpart2623:                               ; preds = %originalBB621
  br i1 %2362, label %2371, label %2388, !dbg !1481

2371:                                             ; preds = %originalBBpart2623
  %2372 = load i32, i32* @x.17
  %2373 = load i32, i32* @y.18
  %2374 = sub i32 %2372, 1
  %2375 = mul i32 %2372, %2374
  %2376 = urem i32 %2375, 2
  %2377 = icmp eq i32 %2376, 0
  %2378 = icmp slt i32 %2373, 10
  %2379 = or i1 %2377, %2378
  br i1 %2379, label %originalBB625, label %originalBB625alteredBB

originalBB625:                                    ; preds = %2371, %originalBB625alteredBB
  %2380 = load i32, i32* @x.17
  %2381 = load i32, i32* @y.18
  %2382 = sub i32 %2380, 1
  %2383 = mul i32 %2380, %2382
  %2384 = urem i32 %2383, 2
  %2385 = icmp eq i32 %2384, 0
  %2386 = icmp slt i32 %2381, 10
  %2387 = or i1 %2385, %2386
  br i1 %2387, label %originalBBpart2627, label %originalBB625alteredBB

originalBBpart2627:                               ; preds = %originalBB625
  br label %6286, !dbg !1482

2388:                                             ; preds = %originalBBpart2623
  %2389 = load i32, i32* @x.17
  %2390 = load i32, i32* @y.18
  %2391 = sub i32 %2389, 1
  %2392 = mul i32 %2389, %2391
  %2393 = urem i32 %2392, 2
  %2394 = icmp eq i32 %2393, 0
  %2395 = icmp slt i32 %2390, 10
  %2396 = or i1 %2394, %2395
  br i1 %2396, label %originalBB629, label %originalBB629alteredBB

originalBB629:                                    ; preds = %2388, %originalBB629alteredBB
  %2397 = load i32, i32* @x.17
  %2398 = load i32, i32* @y.18
  %2399 = sub i32 %2397, 1
  %2400 = mul i32 %2397, %2399
  %2401 = urem i32 %2400, 2
  %2402 = icmp eq i32 %2401, 0
  %2403 = icmp slt i32 %2398, 10
  %2404 = or i1 %2402, %2403
  br i1 %2404, label %originalBBpart2631, label %originalBB629alteredBB

originalBBpart2631:                               ; preds = %originalBB629
  br label %5446, !dbg !1483

2405:                                             ; preds = %originalBBpart2619
  %2406 = load i32, i32* @x.17
  %2407 = load i32, i32* @y.18
  %2408 = sub i32 %2406, 1
  %2409 = mul i32 %2406, %2408
  %2410 = urem i32 %2409, 2
  %2411 = icmp eq i32 %2410, 0
  %2412 = icmp slt i32 %2407, 10
  %2413 = or i1 %2411, %2412
  br i1 %2413, label %originalBB633, label %originalBB633alteredBB

originalBB633:                                    ; preds = %2405, %originalBB633alteredBB
  %2414 = load i8, i8* %33, align 1, !dbg !1484
  %2415 = trunc i8 %2414 to i1, !dbg !1484
  %2416 = load i32, i32* @x.17
  %2417 = load i32, i32* @y.18
  %2418 = sub i32 %2416, 1
  %2419 = mul i32 %2416, %2418
  %2420 = urem i32 %2419, 2
  %2421 = icmp eq i32 %2420, 0
  %2422 = icmp slt i32 %2417, 10
  %2423 = or i1 %2421, %2422
  br i1 %2423, label %originalBBpart2635, label %originalBB633alteredBB

originalBBpart2635:                               ; preds = %originalBB633
  br i1 %2415, label %2424, label %2479, !dbg !1486

2424:                                             ; preds = %originalBBpart2635
  %2425 = load i32, i32* @x.17
  %2426 = load i32, i32* @y.18
  %2427 = sub i32 %2425, 1
  %2428 = mul i32 %2425, %2427
  %2429 = urem i32 %2428, 2
  %2430 = icmp eq i32 %2429, 0
  %2431 = icmp slt i32 %2426, 10
  %2432 = or i1 %2430, %2431
  br i1 %2432, label %originalBB637, label %originalBB637alteredBB

originalBB637:                                    ; preds = %2424, %originalBB637alteredBB
  %2433 = load i8, i8* %35, align 1, !dbg !1487
  %2434 = trunc i8 %2433 to i1, !dbg !1487
  %2435 = load i32, i32* @x.17
  %2436 = load i32, i32* @y.18
  %2437 = sub i32 %2435, 1
  %2438 = mul i32 %2435, %2437
  %2439 = urem i32 %2438, 2
  %2440 = icmp eq i32 %2439, 0
  %2441 = icmp slt i32 %2436, 10
  %2442 = or i1 %2440, %2441
  br i1 %2442, label %originalBBpart2639, label %originalBB637alteredBB

originalBBpart2639:                               ; preds = %originalBB637
  br i1 %2434, label %2443, label %2479, !dbg !1488

2443:                                             ; preds = %originalBBpart2639
  %2444 = load i32, i32* @x.17
  %2445 = load i32, i32* @y.18
  %2446 = sub i32 %2444, 1
  %2447 = mul i32 %2444, %2446
  %2448 = urem i32 %2447, 2
  %2449 = icmp eq i32 %2448, 0
  %2450 = icmp slt i32 %2445, 10
  %2451 = or i1 %2449, %2450
  br i1 %2451, label %originalBB641, label %originalBB641alteredBB

originalBB641:                                    ; preds = %2443, %originalBB641alteredBB
  %2452 = load i64, i64* %32, align 8, !dbg !1489
  %2453 = icmp ne i64 %2452, 0, !dbg !1489
  %2454 = load i32, i32* @x.17
  %2455 = load i32, i32* @y.18
  %2456 = sub i32 %2454, 1
  %2457 = mul i32 %2454, %2456
  %2458 = urem i32 %2457, 2
  %2459 = icmp eq i32 %2458, 0
  %2460 = icmp slt i32 %2455, 10
  %2461 = or i1 %2459, %2460
  br i1 %2461, label %originalBBpart2643, label %originalBB641alteredBB

originalBBpart2643:                               ; preds = %originalBB641
  br i1 %2453, label %2462, label %2479, !dbg !1490

2462:                                             ; preds = %originalBBpart2643
  %2463 = load i32, i32* @x.17
  %2464 = load i32, i32* @y.18
  %2465 = sub i32 %2463, 1
  %2466 = mul i32 %2463, %2465
  %2467 = urem i32 %2466, 2
  %2468 = icmp eq i32 %2467, 0
  %2469 = icmp slt i32 %2464, 10
  %2470 = or i1 %2468, %2469
  br i1 %2470, label %originalBB645, label %originalBB645alteredBB

originalBB645:                                    ; preds = %2462, %originalBB645alteredBB
  %2471 = load i32, i32* @x.17
  %2472 = load i32, i32* @y.18
  %2473 = sub i32 %2471, 1
  %2474 = mul i32 %2471, %2473
  %2475 = urem i32 %2474, 2
  %2476 = icmp eq i32 %2475, 0
  %2477 = icmp slt i32 %2472, 10
  %2478 = or i1 %2476, %2477
  br i1 %2478, label %originalBBpart2647, label %originalBB645alteredBB

originalBBpart2647:                               ; preds = %originalBB645
  br label %5446, !dbg !1491

2479:                                             ; preds = %originalBBpart2643, %originalBBpart2639, %originalBBpart2635
  %2480 = load i32, i32* @x.17
  %2481 = load i32, i32* @y.18
  %2482 = sub i32 %2480, 1
  %2483 = mul i32 %2480, %2482
  %2484 = urem i32 %2483, 2
  %2485 = icmp eq i32 %2484, 0
  %2486 = icmp slt i32 %2481, 10
  %2487 = or i1 %2485, %2486
  br i1 %2487, label %originalBB649, label %originalBB649alteredBB

originalBB649:                                    ; preds = %2479, %originalBB649alteredBB
  %2488 = load i32, i32* @x.17
  %2489 = load i32, i32* @y.18
  %2490 = sub i32 %2488, 1
  %2491 = mul i32 %2488, %2490
  %2492 = urem i32 %2491, 2
  %2493 = icmp eq i32 %2492, 0
  %2494 = icmp slt i32 %2489, 10
  %2495 = or i1 %2493, %2494
  br i1 %2495, label %originalBBpart2651, label %originalBB649alteredBB

originalBBpart2651:                               ; preds = %originalBB649
  br label %2496, !dbg !1489

2496:                                             ; preds = %originalBBpart2651, %originalBBpart2611, %originalBBpart2607, %originalBBpart2603
  call void @llvm.dbg.label(metadata !1492), !dbg !1493
  %2497 = load i32, i32* @x.17
  %2498 = load i32, i32* @y.18
  %2499 = sub i32 %2497, 1
  %2500 = mul i32 %2497, %2499
  %2501 = urem i32 %2500, 2
  %2502 = icmp eq i32 %2501, 0
  %2503 = icmp slt i32 %2498, 10
  %2504 = or i1 %2502, %2503
  br i1 %2504, label %originalBB653, label %originalBB653alteredBB

originalBB653:                                    ; preds = %2496, %originalBB653alteredBB
  %2505 = load i32, i32* %23, align 4, !dbg !1494
  %2506 = icmp eq i32 %2505, 2, !dbg !1496
  %2507 = load i32, i32* @x.17
  %2508 = load i32, i32* @y.18
  %2509 = sub i32 %2507, 1
  %2510 = mul i32 %2507, %2509
  %2511 = urem i32 %2510, 2
  %2512 = icmp eq i32 %2511, 0
  %2513 = icmp slt i32 %2508, 10
  %2514 = or i1 %2512, %2513
  br i1 %2514, label %originalBBpart2655, label %originalBB653alteredBB

originalBBpart2655:                               ; preds = %originalBB653
  br i1 %2506, label %2515, label %2551, !dbg !1497

2515:                                             ; preds = %originalBBpart2655
  %2516 = load i32, i32* @x.17
  %2517 = load i32, i32* @y.18
  %2518 = sub i32 %2516, 1
  %2519 = mul i32 %2516, %2518
  %2520 = urem i32 %2519, 2
  %2521 = icmp eq i32 %2520, 0
  %2522 = icmp slt i32 %2517, 10
  %2523 = or i1 %2521, %2522
  br i1 %2523, label %originalBB657, label %originalBB657alteredBB

originalBB657:                                    ; preds = %2515, %originalBB657alteredBB
  %2524 = load i8, i8* %35, align 1, !dbg !1498
  %2525 = trunc i8 %2524 to i1, !dbg !1498
  %2526 = load i32, i32* @x.17
  %2527 = load i32, i32* @y.18
  %2528 = sub i32 %2526, 1
  %2529 = mul i32 %2526, %2528
  %2530 = urem i32 %2529, 2
  %2531 = icmp eq i32 %2530, 0
  %2532 = icmp slt i32 %2527, 10
  %2533 = or i1 %2531, %2532
  br i1 %2533, label %originalBBpart2659, label %originalBB657alteredBB

originalBBpart2659:                               ; preds = %originalBB657
  br i1 %2525, label %2534, label %2551, !dbg !1499

2534:                                             ; preds = %originalBBpart2659
  %2535 = load i32, i32* @x.17
  %2536 = load i32, i32* @y.18
  %2537 = sub i32 %2535, 1
  %2538 = mul i32 %2535, %2537
  %2539 = urem i32 %2538, 2
  %2540 = icmp eq i32 %2539, 0
  %2541 = icmp slt i32 %2536, 10
  %2542 = or i1 %2540, %2541
  br i1 %2542, label %originalBB661, label %originalBB661alteredBB

originalBB661:                                    ; preds = %2534, %originalBB661alteredBB
  %2543 = load i32, i32* @x.17
  %2544 = load i32, i32* @y.18
  %2545 = sub i32 %2543, 1
  %2546 = mul i32 %2543, %2545
  %2547 = urem i32 %2546, 2
  %2548 = icmp eq i32 %2547, 0
  %2549 = icmp slt i32 %2544, 10
  %2550 = or i1 %2548, %2549
  br i1 %2550, label %originalBBpart2663, label %originalBB661alteredBB

originalBBpart2663:                               ; preds = %originalBB661
  br label %6286, !dbg !1500

2551:                                             ; preds = %originalBBpart2659, %originalBBpart2655
  %2552 = load i32, i32* @x.17
  %2553 = load i32, i32* @y.18
  %2554 = sub i32 %2552, 1
  %2555 = mul i32 %2552, %2554
  %2556 = urem i32 %2555, 2
  %2557 = icmp eq i32 %2556, 0
  %2558 = icmp slt i32 %2553, 10
  %2559 = or i1 %2557, %2558
  br i1 %2559, label %originalBB665, label %originalBB665alteredBB

originalBB665:                                    ; preds = %2551, %originalBB665alteredBB
  %2560 = load i32, i32* @x.17
  %2561 = load i32, i32* @y.18
  %2562 = sub i32 %2560, 1
  %2563 = mul i32 %2560, %2562
  %2564 = urem i32 %2563, 2
  %2565 = icmp eq i32 %2564, 0
  %2566 = icmp slt i32 %2561, 10
  %2567 = or i1 %2565, %2566
  br i1 %2567, label %originalBBpart2667, label %originalBB665alteredBB

originalBBpart2667:                               ; preds = %originalBB665
  br label %2568, !dbg !1498

2568:                                             ; preds = %originalBBpart2667, %originalBBpart2615, %originalBBpart2599, %originalBBpart2595, %2229
  call void @llvm.dbg.label(metadata !1501), !dbg !1502
  %2569 = load i32, i32* @x.17
  %2570 = load i32, i32* @y.18
  %2571 = sub i32 %2569, 1
  %2572 = mul i32 %2569, %2571
  %2573 = urem i32 %2572, 2
  %2574 = icmp eq i32 %2573, 0
  %2575 = icmp slt i32 %2570, 10
  %2576 = or i1 %2574, %2575
  br i1 %2576, label %originalBB669, label %originalBB669alteredBB

originalBB669:                                    ; preds = %2568, %originalBB669alteredBB
  %2577 = load i8, i8* %33, align 1, !dbg !1503
  %2578 = trunc i8 %2577 to i1, !dbg !1503
  %2579 = load i32, i32* @x.17
  %2580 = load i32, i32* @y.18
  %2581 = sub i32 %2579, 1
  %2582 = mul i32 %2579, %2581
  %2583 = urem i32 %2582, 2
  %2584 = icmp eq i32 %2583, 0
  %2585 = icmp slt i32 %2580, 10
  %2586 = or i1 %2584, %2585
  br i1 %2586, label %originalBBpart2671, label %originalBB669alteredBB

originalBBpart2671:                               ; preds = %originalBB669
  br i1 %2578, label %2587, label %2605, !dbg !1505

2587:                                             ; preds = %originalBBpart2671
  %2588 = load i32, i32* @x.17
  %2589 = load i32, i32* @y.18
  %2590 = sub i32 %2588, 1
  %2591 = mul i32 %2588, %2590
  %2592 = urem i32 %2591, 2
  %2593 = icmp eq i32 %2592, 0
  %2594 = icmp slt i32 %2589, 10
  %2595 = or i1 %2593, %2594
  br i1 %2595, label %originalBB673, label %originalBB673alteredBB

originalBB673:                                    ; preds = %2587, %originalBB673alteredBB
  %2596 = load i8, i8* %40, align 1, !dbg !1506
  store i8 %2596, i8* %39, align 1, !dbg !1508
  %2597 = load i32, i32* @x.17
  %2598 = load i32, i32* @y.18
  %2599 = sub i32 %2597, 1
  %2600 = mul i32 %2597, %2599
  %2601 = urem i32 %2600, 2
  %2602 = icmp eq i32 %2601, 0
  %2603 = icmp slt i32 %2598, 10
  %2604 = or i1 %2602, %2603
  br i1 %2604, label %originalBBpart2675, label %originalBB673alteredBB

originalBBpart2675:                               ; preds = %originalBB673
  br label %5048, !dbg !1509

2605:                                             ; preds = %originalBBpart2671
  %2606 = load i32, i32* @x.17
  %2607 = load i32, i32* @y.18
  %2608 = sub i32 %2606, 1
  %2609 = mul i32 %2606, %2608
  %2610 = urem i32 %2609, 2
  %2611 = icmp eq i32 %2610, 0
  %2612 = icmp slt i32 %2607, 10
  %2613 = or i1 %2611, %2612
  br i1 %2613, label %originalBB677, label %originalBB677alteredBB

originalBB677:                                    ; preds = %2605, %originalBB677alteredBB
  %2614 = load i32, i32* @x.17
  %2615 = load i32, i32* @y.18
  %2616 = sub i32 %2614, 1
  %2617 = mul i32 %2614, %2616
  %2618 = urem i32 %2617, 2
  %2619 = icmp eq i32 %2618, 0
  %2620 = icmp slt i32 %2615, 10
  %2621 = or i1 %2619, %2620
  br i1 %2621, label %originalBBpart2679, label %originalBB677alteredBB

originalBBpart2679:                               ; preds = %originalBB677
  br label %4889, !dbg !1510

2622:                                             ; preds = %originalBBpart2232, %originalBBpart2232
  %2623 = load i32, i32* @x.17
  %2624 = load i32, i32* @y.18
  %2625 = sub i32 %2623, 1
  %2626 = mul i32 %2623, %2625
  %2627 = urem i32 %2626, 2
  %2628 = icmp eq i32 %2627, 0
  %2629 = icmp slt i32 %2624, 10
  %2630 = or i1 %2628, %2629
  br i1 %2630, label %originalBB681, label %originalBB681alteredBB

originalBB681:                                    ; preds = %2622, %originalBB681alteredBB
  %2631 = load i64, i64* %22, align 8, !dbg !1511
  %2632 = icmp eq i64 %2631, -1, !dbg !1513
  %2633 = load i32, i32* @x.17
  %2634 = load i32, i32* @y.18
  %2635 = sub i32 %2633, 1
  %2636 = mul i32 %2633, %2635
  %2637 = urem i32 %2636, 2
  %2638 = icmp eq i32 %2637, 0
  %2639 = icmp slt i32 %2634, 10
  %2640 = or i1 %2638, %2639
  br i1 %2640, label %originalBBpart2683, label %originalBB681alteredBB

originalBBpart2683:                               ; preds = %originalBB681
  br i1 %2632, label %2641, label %2663, !dbg !1514

2641:                                             ; preds = %originalBBpart2683
  %2642 = load i32, i32* @x.17
  %2643 = load i32, i32* @y.18
  %2644 = sub i32 %2642, 1
  %2645 = mul i32 %2642, %2644
  %2646 = urem i32 %2645, 2
  %2647 = icmp eq i32 %2646, 0
  %2648 = icmp slt i32 %2643, 10
  %2649 = or i1 %2647, %2648
  br i1 %2649, label %originalBB685, label %originalBB685alteredBB

originalBB685:                                    ; preds = %2641, %originalBB685alteredBB
  %2650 = load i8*, i8** %21, align 8, !dbg !1515
  %2651 = getelementptr inbounds i8, i8* %2650, i64 1, !dbg !1515
  %2652 = load i8, i8* %2651, align 1, !dbg !1515
  %2653 = sext i8 %2652 to i32, !dbg !1515
  %2654 = icmp eq i32 %2653, 0, !dbg !1516
  %2655 = load i32, i32* @x.17
  %2656 = load i32, i32* @y.18
  %2657 = sub i32 %2655, 1
  %2658 = mul i32 %2655, %2657
  %2659 = urem i32 %2658, 2
  %2660 = icmp eq i32 %2659, 0
  %2661 = icmp slt i32 %2656, 10
  %2662 = or i1 %2660, %2661
  br i1 %2662, label %originalBBpart2687, label %originalBB685alteredBB

originalBBpart2687:                               ; preds = %originalBB685
  br i1 %2654, label %2699, label %2682, !dbg !1511

2663:                                             ; preds = %originalBBpart2683
  %2664 = load i32, i32* @x.17
  %2665 = load i32, i32* @y.18
  %2666 = sub i32 %2664, 1
  %2667 = mul i32 %2664, %2666
  %2668 = urem i32 %2667, 2
  %2669 = icmp eq i32 %2668, 0
  %2670 = icmp slt i32 %2665, 10
  %2671 = or i1 %2669, %2670
  br i1 %2671, label %originalBB689, label %originalBB689alteredBB

originalBB689:                                    ; preds = %2663, %originalBB689alteredBB
  %2672 = load i64, i64* %22, align 8, !dbg !1517
  %2673 = icmp eq i64 %2672, 1, !dbg !1518
  %2674 = load i32, i32* @x.17
  %2675 = load i32, i32* @y.18
  %2676 = sub i32 %2674, 1
  %2677 = mul i32 %2674, %2676
  %2678 = urem i32 %2677, 2
  %2679 = icmp eq i32 %2678, 0
  %2680 = icmp slt i32 %2675, 10
  %2681 = or i1 %2679, %2680
  br i1 %2681, label %originalBBpart2691, label %originalBB689alteredBB

originalBBpart2691:                               ; preds = %originalBB689
  br i1 %2673, label %2699, label %2682, !dbg !1514

2682:                                             ; preds = %originalBBpart2691, %originalBBpart2687
  %2683 = load i32, i32* @x.17
  %2684 = load i32, i32* @y.18
  %2685 = sub i32 %2683, 1
  %2686 = mul i32 %2683, %2685
  %2687 = urem i32 %2686, 2
  %2688 = icmp eq i32 %2687, 0
  %2689 = icmp slt i32 %2684, 10
  %2690 = or i1 %2688, %2689
  br i1 %2690, label %originalBB693, label %originalBB693alteredBB

originalBB693:                                    ; preds = %2682, %originalBB693alteredBB
  %2691 = load i32, i32* @x.17
  %2692 = load i32, i32* @y.18
  %2693 = sub i32 %2691, 1
  %2694 = mul i32 %2691, %2693
  %2695 = urem i32 %2694, 2
  %2696 = icmp eq i32 %2695, 0
  %2697 = icmp slt i32 %2692, 10
  %2698 = or i1 %2696, %2697
  br i1 %2698, label %originalBBpart2695, label %originalBB693alteredBB

originalBBpart2695:                               ; preds = %originalBB693
  br label %4889, !dbg !1519

2699:                                             ; preds = %originalBBpart2691, %originalBBpart2687
  %2700 = load i32, i32* @x.17
  %2701 = load i32, i32* @y.18
  %2702 = sub i32 %2700, 1
  %2703 = mul i32 %2700, %2702
  %2704 = urem i32 %2703, 2
  %2705 = icmp eq i32 %2704, 0
  %2706 = icmp slt i32 %2701, 10
  %2707 = or i1 %2705, %2706
  br i1 %2707, label %originalBB697, label %originalBB697alteredBB

originalBB697:                                    ; preds = %2699, %originalBB697alteredBB
  %2708 = load i32, i32* @x.17
  %2709 = load i32, i32* @y.18
  %2710 = sub i32 %2708, 1
  %2711 = mul i32 %2708, %2710
  %2712 = urem i32 %2711, 2
  %2713 = icmp eq i32 %2712, 0
  %2714 = icmp slt i32 %2709, 10
  %2715 = or i1 %2713, %2714
  br i1 %2715, label %originalBBpart2699, label %originalBB697alteredBB

originalBBpart2699:                               ; preds = %originalBB697
  br label %2716, !dbg !1520

2716:                                             ; preds = %originalBBpart2699, %originalBBpart2232, %originalBBpart2232
  %2717 = load i32, i32* @x.17
  %2718 = load i32, i32* @y.18
  %2719 = sub i32 %2717, 1
  %2720 = mul i32 %2717, %2719
  %2721 = urem i32 %2720, 2
  %2722 = icmp eq i32 %2721, 0
  %2723 = icmp slt i32 %2718, 10
  %2724 = or i1 %2722, %2723
  br i1 %2724, label %originalBB701, label %originalBB701alteredBB

originalBB701:                                    ; preds = %2716, %originalBB701alteredBB
  %2725 = load i64, i64* %28, align 8, !dbg !1521
  %2726 = icmp ne i64 %2725, 0, !dbg !1523
  %2727 = load i32, i32* @x.17
  %2728 = load i32, i32* @y.18
  %2729 = sub i32 %2727, 1
  %2730 = mul i32 %2727, %2729
  %2731 = urem i32 %2730, 2
  %2732 = icmp eq i32 %2731, 0
  %2733 = icmp slt i32 %2728, 10
  %2734 = or i1 %2732, %2733
  br i1 %2734, label %originalBBpart2703, label %originalBB701alteredBB

originalBBpart2703:                               ; preds = %originalBB701
  br i1 %2726, label %2735, label %2752, !dbg !1524

2735:                                             ; preds = %originalBBpart2703
  %2736 = load i32, i32* @x.17
  %2737 = load i32, i32* @y.18
  %2738 = sub i32 %2736, 1
  %2739 = mul i32 %2736, %2738
  %2740 = urem i32 %2739, 2
  %2741 = icmp eq i32 %2740, 0
  %2742 = icmp slt i32 %2737, 10
  %2743 = or i1 %2741, %2742
  br i1 %2743, label %originalBB705, label %originalBB705alteredBB

originalBB705:                                    ; preds = %2735, %originalBB705alteredBB
  %2744 = load i32, i32* @x.17
  %2745 = load i32, i32* @y.18
  %2746 = sub i32 %2744, 1
  %2747 = mul i32 %2744, %2746
  %2748 = urem i32 %2747, 2
  %2749 = icmp eq i32 %2748, 0
  %2750 = icmp slt i32 %2745, 10
  %2751 = or i1 %2749, %2750
  br i1 %2751, label %originalBBpart2707, label %originalBB705alteredBB

originalBBpart2707:                               ; preds = %originalBB705
  br label %4889, !dbg !1525

2752:                                             ; preds = %originalBBpart2703
  %2753 = load i32, i32* @x.17
  %2754 = load i32, i32* @y.18
  %2755 = sub i32 %2753, 1
  %2756 = mul i32 %2753, %2755
  %2757 = urem i32 %2756, 2
  %2758 = icmp eq i32 %2757, 0
  %2759 = icmp slt i32 %2754, 10
  %2760 = or i1 %2758, %2759
  br i1 %2760, label %originalBB709, label %originalBB709alteredBB

originalBB709:                                    ; preds = %2752, %originalBB709alteredBB
  %2761 = load i32, i32* @x.17
  %2762 = load i32, i32* @y.18
  %2763 = sub i32 %2761, 1
  %2764 = mul i32 %2761, %2763
  %2765 = urem i32 %2764, 2
  %2766 = icmp eq i32 %2765, 0
  %2767 = icmp slt i32 %2762, 10
  %2768 = or i1 %2766, %2767
  br i1 %2768, label %originalBBpart2711, label %originalBB709alteredBB

originalBBpart2711:                               ; preds = %originalBB709
  br label %2769, !dbg !1526

2769:                                             ; preds = %originalBBpart2711, %originalBBpart2232
  %2770 = load i32, i32* @x.17
  %2771 = load i32, i32* @y.18
  %2772 = sub i32 %2770, 1
  %2773 = mul i32 %2770, %2772
  %2774 = urem i32 %2773, 2
  %2775 = icmp eq i32 %2774, 0
  %2776 = icmp slt i32 %2771, 10
  %2777 = or i1 %2775, %2776
  br i1 %2777, label %originalBB713, label %originalBB713alteredBB

originalBB713:                                    ; preds = %2769, %originalBB713alteredBB
  store i8 1, i8* %43, align 1, !dbg !1527
  %2778 = load i32, i32* @x.17
  %2779 = load i32, i32* @y.18
  %2780 = sub i32 %2778, 1
  %2781 = mul i32 %2778, %2780
  %2782 = urem i32 %2781, 2
  %2783 = icmp eq i32 %2782, 0
  %2784 = icmp slt i32 %2779, 10
  %2785 = or i1 %2783, %2784
  br i1 %2785, label %originalBBpart2715, label %originalBB713alteredBB

originalBBpart2715:                               ; preds = %originalBB713
  br label %2786, !dbg !1528

2786:                                             ; preds = %originalBBpart2715, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232
  %2787 = load i32, i32* @x.17
  %2788 = load i32, i32* @y.18
  %2789 = sub i32 %2787, 1
  %2790 = mul i32 %2787, %2789
  %2791 = urem i32 %2790, 2
  %2792 = icmp eq i32 %2791, 0
  %2793 = icmp slt i32 %2788, 10
  %2794 = or i1 %2792, %2793
  br i1 %2794, label %originalBB717, label %originalBB717alteredBB

originalBB717:                                    ; preds = %2786, %originalBB717alteredBB
  %2795 = load i32, i32* %23, align 4, !dbg !1529
  %2796 = icmp eq i32 %2795, 2, !dbg !1531
  %2797 = load i32, i32* @x.17
  %2798 = load i32, i32* @y.18
  %2799 = sub i32 %2797, 1
  %2800 = mul i32 %2797, %2799
  %2801 = urem i32 %2800, 2
  %2802 = icmp eq i32 %2801, 0
  %2803 = icmp slt i32 %2798, 10
  %2804 = or i1 %2802, %2803
  br i1 %2804, label %originalBBpart2719, label %originalBB717alteredBB

originalBBpart2719:                               ; preds = %originalBB717
  br i1 %2796, label %2805, label %2825, !dbg !1532

2805:                                             ; preds = %originalBBpart2719
  %2806 = load i32, i32* @x.17
  %2807 = load i32, i32* @y.18
  %2808 = sub i32 %2806, 1
  %2809 = mul i32 %2806, %2808
  %2810 = urem i32 %2809, 2
  %2811 = icmp eq i32 %2810, 0
  %2812 = icmp slt i32 %2807, 10
  %2813 = or i1 %2811, %2812
  br i1 %2813, label %originalBB721, label %originalBB721alteredBB

originalBB721:                                    ; preds = %2805, %originalBB721alteredBB
  %2814 = load i8, i8* %35, align 1, !dbg !1533
  %2815 = trunc i8 %2814 to i1, !dbg !1533
  %2816 = load i32, i32* @x.17
  %2817 = load i32, i32* @y.18
  %2818 = sub i32 %2816, 1
  %2819 = mul i32 %2816, %2818
  %2820 = urem i32 %2819, 2
  %2821 = icmp eq i32 %2820, 0
  %2822 = icmp slt i32 %2817, 10
  %2823 = or i1 %2821, %2822
  br i1 %2823, label %originalBBpart2723, label %originalBB721alteredBB

originalBBpart2723:                               ; preds = %originalBB721
  br i1 %2815, label %2824, label %2825, !dbg !1534

2824:                                             ; preds = %originalBBpart2723
  br label %6286, !dbg !1535

2825:                                             ; preds = %originalBBpart2723, %originalBBpart2719
  br label %4889, !dbg !1536

2826:                                             ; preds = %originalBBpart2232
  %2827 = load i32, i32* @x.17
  %2828 = load i32, i32* @y.18
  %2829 = sub i32 %2827, 1
  %2830 = mul i32 %2827, %2829
  %2831 = urem i32 %2830, 2
  %2832 = icmp eq i32 %2831, 0
  %2833 = icmp slt i32 %2828, 10
  %2834 = or i1 %2832, %2833
  br i1 %2834, label %originalBB725, label %originalBB725alteredBB

originalBB725:                                    ; preds = %2826, %originalBB725alteredBB
  store i8 1, i8* %37, align 1, !dbg !1537
  store i8 1, i8* %43, align 1, !dbg !1538
  %2835 = load i32, i32* %23, align 4, !dbg !1539
  %2836 = icmp eq i32 %2835, 2, !dbg !1541
  %2837 = load i32, i32* @x.17
  %2838 = load i32, i32* @y.18
  %2839 = sub i32 %2837, 1
  %2840 = mul i32 %2837, %2839
  %2841 = urem i32 %2840, 2
  %2842 = icmp eq i32 %2841, 0
  %2843 = icmp slt i32 %2838, 10
  %2844 = or i1 %2842, %2843
  br i1 %2844, label %originalBBpart2727, label %originalBB725alteredBB

originalBBpart2727:                               ; preds = %originalBB725
  br i1 %2836, label %2845, label %3150, !dbg !1542

2845:                                             ; preds = %originalBBpart2727
  %2846 = load i32, i32* @x.17
  %2847 = load i32, i32* @y.18
  %2848 = sub i32 %2846, 1
  %2849 = mul i32 %2846, %2848
  %2850 = urem i32 %2849, 2
  %2851 = icmp eq i32 %2850, 0
  %2852 = icmp slt i32 %2847, 10
  %2853 = or i1 %2851, %2852
  br i1 %2853, label %originalBB729, label %originalBB729alteredBB

originalBB729:                                    ; preds = %2845, %originalBB729alteredBB
  %2854 = load i8, i8* %35, align 1, !dbg !1543
  %2855 = trunc i8 %2854 to i1, !dbg !1543
  %2856 = load i32, i32* @x.17
  %2857 = load i32, i32* @y.18
  %2858 = sub i32 %2856, 1
  %2859 = mul i32 %2856, %2858
  %2860 = urem i32 %2859, 2
  %2861 = icmp eq i32 %2860, 0
  %2862 = icmp slt i32 %2857, 10
  %2863 = or i1 %2861, %2862
  br i1 %2863, label %originalBBpart2731, label %originalBB729alteredBB

originalBBpart2731:                               ; preds = %originalBB729
  br i1 %2855, label %2864, label %2881, !dbg !1546

2864:                                             ; preds = %originalBBpart2731
  %2865 = load i32, i32* @x.17
  %2866 = load i32, i32* @y.18
  %2867 = sub i32 %2865, 1
  %2868 = mul i32 %2865, %2867
  %2869 = urem i32 %2868, 2
  %2870 = icmp eq i32 %2869, 0
  %2871 = icmp slt i32 %2866, 10
  %2872 = or i1 %2870, %2871
  br i1 %2872, label %originalBB733, label %originalBB733alteredBB

originalBB733:                                    ; preds = %2864, %originalBB733alteredBB
  %2873 = load i32, i32* @x.17
  %2874 = load i32, i32* @y.18
  %2875 = sub i32 %2873, 1
  %2876 = mul i32 %2873, %2875
  %2877 = urem i32 %2876, 2
  %2878 = icmp eq i32 %2877, 0
  %2879 = icmp slt i32 %2874, 10
  %2880 = or i1 %2878, %2879
  br i1 %2880, label %originalBBpart2735, label %originalBB733alteredBB

originalBBpart2735:                               ; preds = %originalBB733
  br label %6286, !dbg !1547

2881:                                             ; preds = %originalBBpart2731
  %2882 = load i32, i32* @x.17
  %2883 = load i32, i32* @y.18
  %2884 = sub i32 %2882, 1
  %2885 = mul i32 %2882, %2884
  %2886 = urem i32 %2885, 2
  %2887 = icmp eq i32 %2886, 0
  %2888 = icmp slt i32 %2883, 10
  %2889 = or i1 %2887, %2888
  br i1 %2889, label %originalBB737, label %originalBB737alteredBB

originalBB737:                                    ; preds = %2881, %originalBB737alteredBB
  %2890 = load i64, i64* %20, align 8, !dbg !1548
  %2891 = icmp ne i64 %2890, 0, !dbg !1548
  %2892 = load i32, i32* @x.17
  %2893 = load i32, i32* @y.18
  %2894 = sub i32 %2892, 1
  %2895 = mul i32 %2892, %2894
  %2896 = urem i32 %2895, 2
  %2897 = icmp eq i32 %2896, 0
  %2898 = icmp slt i32 %2893, 10
  %2899 = or i1 %2897, %2898
  br i1 %2899, label %originalBBpart2739, label %originalBB737alteredBB

originalBBpart2739:                               ; preds = %originalBB737
  br i1 %2891, label %2900, label %2937, !dbg !1550

2900:                                             ; preds = %originalBBpart2739
  %2901 = load i32, i32* @x.17
  %2902 = load i32, i32* @y.18
  %2903 = sub i32 %2901, 1
  %2904 = mul i32 %2901, %2903
  %2905 = urem i32 %2904, 2
  %2906 = icmp eq i32 %2905, 0
  %2907 = icmp slt i32 %2902, 10
  %2908 = or i1 %2906, %2907
  br i1 %2908, label %originalBB741, label %originalBB741alteredBB

originalBB741:                                    ; preds = %2900, %originalBB741alteredBB
  %2909 = load i64, i64* %30, align 8, !dbg !1551
  %2910 = icmp ne i64 %2909, 0, !dbg !1551
  %2911 = load i32, i32* @x.17
  %2912 = load i32, i32* @y.18
  %2913 = sub i32 %2911, 1
  %2914 = mul i32 %2911, %2913
  %2915 = urem i32 %2914, 2
  %2916 = icmp eq i32 %2915, 0
  %2917 = icmp slt i32 %2912, 10
  %2918 = or i1 %2916, %2917
  br i1 %2918, label %originalBBpart2743, label %originalBB741alteredBB

originalBBpart2743:                               ; preds = %originalBB741
  br i1 %2910, label %2937, label %2919, !dbg !1552

2919:                                             ; preds = %originalBBpart2743
  %2920 = load i32, i32* @x.17
  %2921 = load i32, i32* @y.18
  %2922 = sub i32 %2920, 1
  %2923 = mul i32 %2920, %2922
  %2924 = urem i32 %2923, 2
  %2925 = icmp eq i32 %2924, 0
  %2926 = icmp slt i32 %2921, 10
  %2927 = or i1 %2925, %2926
  br i1 %2927, label %originalBB745, label %originalBB745alteredBB

originalBB745:                                    ; preds = %2919, %originalBB745alteredBB
  %2928 = load i64, i64* %20, align 8, !dbg !1553
  store i64 %2928, i64* %30, align 8, !dbg !1555
  store i64 0, i64* %20, align 8, !dbg !1556
  %2929 = load i32, i32* @x.17
  %2930 = load i32, i32* @y.18
  %2931 = sub i32 %2929, 1
  %2932 = mul i32 %2929, %2931
  %2933 = urem i32 %2932, 2
  %2934 = icmp eq i32 %2933, 0
  %2935 = icmp slt i32 %2930, 10
  %2936 = or i1 %2934, %2935
  br i1 %2936, label %originalBBpart2747, label %originalBB745alteredBB

originalBBpart2747:                               ; preds = %originalBB745
  br label %2937, !dbg !1557

2937:                                             ; preds = %originalBBpart2747, %originalBBpart2743, %originalBBpart2739
  %2938 = load i32, i32* @x.17
  %2939 = load i32, i32* @y.18
  %2940 = sub i32 %2938, 1
  %2941 = mul i32 %2938, %2940
  %2942 = urem i32 %2941, 2
  %2943 = icmp eq i32 %2942, 0
  %2944 = icmp slt i32 %2939, 10
  %2945 = or i1 %2943, %2944
  br i1 %2945, label %originalBB749, label %originalBB749alteredBB

originalBB749:                                    ; preds = %2937, %originalBB749alteredBB
  %2946 = load i32, i32* @x.17
  %2947 = load i32, i32* @y.18
  %2948 = sub i32 %2946, 1
  %2949 = mul i32 %2946, %2948
  %2950 = urem i32 %2949, 2
  %2951 = icmp eq i32 %2950, 0
  %2952 = icmp slt i32 %2947, 10
  %2953 = or i1 %2951, %2952
  br i1 %2953, label %originalBBpart2751, label %originalBB749alteredBB

originalBBpart2751:                               ; preds = %originalBB749
  br label %2954, !dbg !1558

2954:                                             ; preds = %originalBBpart2751
  %2955 = load i32, i32* @x.17
  %2956 = load i32, i32* @y.18
  %2957 = sub i32 %2955, 1
  %2958 = mul i32 %2955, %2957
  %2959 = urem i32 %2958, 2
  %2960 = icmp eq i32 %2959, 0
  %2961 = icmp slt i32 %2956, 10
  %2962 = or i1 %2960, %2961
  br i1 %2962, label %originalBB753, label %originalBB753alteredBB

originalBB753:                                    ; preds = %2954, %originalBB753alteredBB
  %2963 = load i64, i64* %29, align 8, !dbg !1559
  %2964 = load i64, i64* %20, align 8, !dbg !1559
  %2965 = icmp ult i64 %2963, %2964, !dbg !1559
  %2966 = load i32, i32* @x.17
  %2967 = load i32, i32* @y.18
  %2968 = sub i32 %2966, 1
  %2969 = mul i32 %2966, %2968
  %2970 = urem i32 %2969, 2
  %2971 = icmp eq i32 %2970, 0
  %2972 = icmp slt i32 %2967, 10
  %2973 = or i1 %2971, %2972
  br i1 %2973, label %originalBBpart2755, label %originalBB753alteredBB

originalBBpart2755:                               ; preds = %originalBB753
  br i1 %2965, label %2974, label %2994, !dbg !1562

2974:                                             ; preds = %originalBBpart2755
  %2975 = load i32, i32* @x.17
  %2976 = load i32, i32* @y.18
  %2977 = sub i32 %2975, 1
  %2978 = mul i32 %2975, %2977
  %2979 = urem i32 %2978, 2
  %2980 = icmp eq i32 %2979, 0
  %2981 = icmp slt i32 %2976, 10
  %2982 = or i1 %2980, %2981
  br i1 %2982, label %originalBB757, label %originalBB757alteredBB

originalBB757:                                    ; preds = %2974, %originalBB757alteredBB
  %2983 = load i8*, i8** %19, align 8, !dbg !1559
  %2984 = load i64, i64* %29, align 8, !dbg !1559
  %2985 = getelementptr inbounds i8, i8* %2983, i64 %2984, !dbg !1559
  store i8 39, i8* %2985, align 1, !dbg !1559
  %2986 = load i32, i32* @x.17
  %2987 = load i32, i32* @y.18
  %2988 = sub i32 %2986, 1
  %2989 = mul i32 %2986, %2988
  %2990 = urem i32 %2989, 2
  %2991 = icmp eq i32 %2990, 0
  %2992 = icmp slt i32 %2987, 10
  %2993 = or i1 %2991, %2992
  br i1 %2993, label %originalBBpart2759, label %originalBB757alteredBB

originalBBpart2759:                               ; preds = %originalBB757
  br label %2994, !dbg !1559

2994:                                             ; preds = %originalBBpart2759, %originalBBpart2755
  %2995 = load i64, i64* %29, align 8, !dbg !1562
  %2996 = add i64 %2995, 1, !dbg !1562
  store i64 %2996, i64* %29, align 8, !dbg !1562
  br label %2997, !dbg !1562

2997:                                             ; preds = %2994
  %2998 = load i32, i32* @x.17
  %2999 = load i32, i32* @y.18
  %3000 = sub i32 %2998, 1
  %3001 = mul i32 %2998, %3000
  %3002 = urem i32 %3001, 2
  %3003 = icmp eq i32 %3002, 0
  %3004 = icmp slt i32 %2999, 10
  %3005 = or i1 %3003, %3004
  br i1 %3005, label %originalBB761, label %originalBB761alteredBB

originalBB761:                                    ; preds = %2997, %originalBB761alteredBB
  %3006 = load i32, i32* @x.17
  %3007 = load i32, i32* @y.18
  %3008 = sub i32 %3006, 1
  %3009 = mul i32 %3006, %3008
  %3010 = urem i32 %3009, 2
  %3011 = icmp eq i32 %3010, 0
  %3012 = icmp slt i32 %3007, 10
  %3013 = or i1 %3011, %3012
  br i1 %3013, label %originalBBpart2763, label %originalBB761alteredBB

originalBBpart2763:                               ; preds = %originalBB761
  br label %3014, !dbg !1563

3014:                                             ; preds = %originalBBpart2763
  %3015 = load i32, i32* @x.17
  %3016 = load i32, i32* @y.18
  %3017 = sub i32 %3015, 1
  %3018 = mul i32 %3015, %3017
  %3019 = urem i32 %3018, 2
  %3020 = icmp eq i32 %3019, 0
  %3021 = icmp slt i32 %3016, 10
  %3022 = or i1 %3020, %3021
  br i1 %3022, label %originalBB765, label %originalBB765alteredBB

originalBB765:                                    ; preds = %3014, %originalBB765alteredBB
  %3023 = load i64, i64* %29, align 8, !dbg !1564
  %3024 = load i64, i64* %20, align 8, !dbg !1564
  %3025 = icmp ult i64 %3023, %3024, !dbg !1564
  %3026 = load i32, i32* @x.17
  %3027 = load i32, i32* @y.18
  %3028 = sub i32 %3026, 1
  %3029 = mul i32 %3026, %3028
  %3030 = urem i32 %3029, 2
  %3031 = icmp eq i32 %3030, 0
  %3032 = icmp slt i32 %3027, 10
  %3033 = or i1 %3031, %3032
  br i1 %3033, label %originalBBpart2767, label %originalBB765alteredBB

originalBBpart2767:                               ; preds = %originalBB765
  br i1 %3025, label %3034, label %3038, !dbg !1567

3034:                                             ; preds = %originalBBpart2767
  %3035 = load i8*, i8** %19, align 8, !dbg !1564
  %3036 = load i64, i64* %29, align 8, !dbg !1564
  %3037 = getelementptr inbounds i8, i8* %3035, i64 %3036, !dbg !1564
  store i8 92, i8* %3037, align 1, !dbg !1564
  br label %3038, !dbg !1564

3038:                                             ; preds = %3034, %originalBBpart2767
  %3039 = load i32, i32* @x.17
  %3040 = load i32, i32* @y.18
  %3041 = sub i32 %3039, 1
  %3042 = mul i32 %3039, %3041
  %3043 = urem i32 %3042, 2
  %3044 = icmp eq i32 %3043, 0
  %3045 = icmp slt i32 %3040, 10
  %3046 = or i1 %3044, %3045
  br i1 %3046, label %originalBB769, label %originalBB769alteredBB

originalBB769:                                    ; preds = %3038, %originalBB769alteredBB
  %3047 = load i64, i64* %29, align 8, !dbg !1567
  %3048 = add i64 %3047, 1, !dbg !1567
  store i64 %3048, i64* %29, align 8, !dbg !1567
  %3049 = load i32, i32* @x.17
  %3050 = load i32, i32* @y.18
  %3051 = sub i32 %3049, 1
  %3052 = mul i32 %3049, %3051
  %3053 = urem i32 %3052, 2
  %3054 = icmp eq i32 %3053, 0
  %3055 = icmp slt i32 %3050, 10
  %3056 = or i1 %3054, %3055
  br i1 %3056, label %originalBBpart2783, label %originalBB769alteredBB

originalBBpart2783:                               ; preds = %originalBB769
  br label %3057, !dbg !1567

3057:                                             ; preds = %originalBBpart2783
  %3058 = load i32, i32* @x.17
  %3059 = load i32, i32* @y.18
  %3060 = sub i32 %3058, 1
  %3061 = mul i32 %3058, %3060
  %3062 = urem i32 %3061, 2
  %3063 = icmp eq i32 %3062, 0
  %3064 = icmp slt i32 %3059, 10
  %3065 = or i1 %3063, %3064
  br i1 %3065, label %originalBB785, label %originalBB785alteredBB

originalBB785:                                    ; preds = %3057, %originalBB785alteredBB
  %3066 = load i32, i32* @x.17
  %3067 = load i32, i32* @y.18
  %3068 = sub i32 %3066, 1
  %3069 = mul i32 %3066, %3068
  %3070 = urem i32 %3069, 2
  %3071 = icmp eq i32 %3070, 0
  %3072 = icmp slt i32 %3067, 10
  %3073 = or i1 %3071, %3072
  br i1 %3073, label %originalBBpart2787, label %originalBB785alteredBB

originalBBpart2787:                               ; preds = %originalBB785
  br label %3074, !dbg !1568

3074:                                             ; preds = %originalBBpart2787
  %3075 = load i32, i32* @x.17
  %3076 = load i32, i32* @y.18
  %3077 = sub i32 %3075, 1
  %3078 = mul i32 %3075, %3077
  %3079 = urem i32 %3078, 2
  %3080 = icmp eq i32 %3079, 0
  %3081 = icmp slt i32 %3076, 10
  %3082 = or i1 %3080, %3081
  br i1 %3082, label %originalBB789, label %originalBB789alteredBB

originalBB789:                                    ; preds = %3074, %originalBB789alteredBB
  %3083 = load i64, i64* %29, align 8, !dbg !1569
  %3084 = load i64, i64* %20, align 8, !dbg !1569
  %3085 = icmp ult i64 %3083, %3084, !dbg !1569
  %3086 = load i32, i32* @x.17
  %3087 = load i32, i32* @y.18
  %3088 = sub i32 %3086, 1
  %3089 = mul i32 %3086, %3088
  %3090 = urem i32 %3089, 2
  %3091 = icmp eq i32 %3090, 0
  %3092 = icmp slt i32 %3087, 10
  %3093 = or i1 %3091, %3092
  br i1 %3093, label %originalBBpart2791, label %originalBB789alteredBB

originalBBpart2791:                               ; preds = %originalBB789
  br i1 %3085, label %3094, label %3114, !dbg !1572

3094:                                             ; preds = %originalBBpart2791
  %3095 = load i32, i32* @x.17
  %3096 = load i32, i32* @y.18
  %3097 = sub i32 %3095, 1
  %3098 = mul i32 %3095, %3097
  %3099 = urem i32 %3098, 2
  %3100 = icmp eq i32 %3099, 0
  %3101 = icmp slt i32 %3096, 10
  %3102 = or i1 %3100, %3101
  br i1 %3102, label %originalBB793, label %originalBB793alteredBB

originalBB793:                                    ; preds = %3094, %originalBB793alteredBB
  %3103 = load i8*, i8** %19, align 8, !dbg !1569
  %3104 = load i64, i64* %29, align 8, !dbg !1569
  %3105 = getelementptr inbounds i8, i8* %3103, i64 %3104, !dbg !1569
  store i8 39, i8* %3105, align 1, !dbg !1569
  %3106 = load i32, i32* @x.17
  %3107 = load i32, i32* @y.18
  %3108 = sub i32 %3106, 1
  %3109 = mul i32 %3106, %3108
  %3110 = urem i32 %3109, 2
  %3111 = icmp eq i32 %3110, 0
  %3112 = icmp slt i32 %3107, 10
  %3113 = or i1 %3111, %3112
  br i1 %3113, label %originalBBpart2795, label %originalBB793alteredBB

originalBBpart2795:                               ; preds = %originalBB793
  br label %3114, !dbg !1569

3114:                                             ; preds = %originalBBpart2795, %originalBBpart2791
  %3115 = load i32, i32* @x.17
  %3116 = load i32, i32* @y.18
  %3117 = sub i32 %3115, 1
  %3118 = mul i32 %3115, %3117
  %3119 = urem i32 %3118, 2
  %3120 = icmp eq i32 %3119, 0
  %3121 = icmp slt i32 %3116, 10
  %3122 = or i1 %3120, %3121
  br i1 %3122, label %originalBB797, label %originalBB797alteredBB

originalBB797:                                    ; preds = %3114, %originalBB797alteredBB
  %3123 = load i64, i64* %29, align 8, !dbg !1572
  %3124 = add i64 %3123, 1, !dbg !1572
  store i64 %3124, i64* %29, align 8, !dbg !1572
  %3125 = load i32, i32* @x.17
  %3126 = load i32, i32* @y.18
  %3127 = sub i32 %3125, 1
  %3128 = mul i32 %3125, %3127
  %3129 = urem i32 %3128, 2
  %3130 = icmp eq i32 %3129, 0
  %3131 = icmp slt i32 %3126, 10
  %3132 = or i1 %3130, %3131
  br i1 %3132, label %originalBBpart2808, label %originalBB797alteredBB

originalBBpart2808:                               ; preds = %originalBB797
  br label %3133, !dbg !1572

3133:                                             ; preds = %originalBBpart2808
  %3134 = load i32, i32* @x.17
  %3135 = load i32, i32* @y.18
  %3136 = sub i32 %3134, 1
  %3137 = mul i32 %3134, %3136
  %3138 = urem i32 %3137, 2
  %3139 = icmp eq i32 %3138, 0
  %3140 = icmp slt i32 %3135, 10
  %3141 = or i1 %3139, %3140
  br i1 %3141, label %originalBB810, label %originalBB810alteredBB

originalBB810:                                    ; preds = %3133, %originalBB810alteredBB
  store i8 0, i8* %36, align 1, !dbg !1573
  %3142 = load i32, i32* @x.17
  %3143 = load i32, i32* @y.18
  %3144 = sub i32 %3142, 1
  %3145 = mul i32 %3142, %3144
  %3146 = urem i32 %3145, 2
  %3147 = icmp eq i32 %3146, 0
  %3148 = icmp slt i32 %3143, 10
  %3149 = or i1 %3147, %3148
  br i1 %3149, label %originalBBpart2812, label %originalBB810alteredBB

originalBBpart2812:                               ; preds = %originalBB810
  br label %3150, !dbg !1574

3150:                                             ; preds = %originalBBpart2812, %originalBBpart2727
  %3151 = load i32, i32* @x.17
  %3152 = load i32, i32* @y.18
  %3153 = sub i32 %3151, 1
  %3154 = mul i32 %3151, %3153
  %3155 = urem i32 %3154, 2
  %3156 = icmp eq i32 %3155, 0
  %3157 = icmp slt i32 %3152, 10
  %3158 = or i1 %3156, %3157
  br i1 %3158, label %originalBB814, label %originalBB814alteredBB

originalBB814:                                    ; preds = %3150, %originalBB814alteredBB
  %3159 = load i32, i32* @x.17
  %3160 = load i32, i32* @y.18
  %3161 = sub i32 %3159, 1
  %3162 = mul i32 %3159, %3161
  %3163 = urem i32 %3162, 2
  %3164 = icmp eq i32 %3163, 0
  %3165 = icmp slt i32 %3160, 10
  %3166 = or i1 %3164, %3165
  br i1 %3166, label %originalBBpart2816, label %originalBB814alteredBB

originalBBpart2816:                               ; preds = %originalBB814
  br label %4889, !dbg !1575

3167:                                             ; preds = %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232, %originalBBpart2232
  %3168 = load i32, i32* @x.17
  %3169 = load i32, i32* @y.18
  %3170 = sub i32 %3168, 1
  %3171 = mul i32 %3168, %3170
  %3172 = urem i32 %3171, 2
  %3173 = icmp eq i32 %3172, 0
  %3174 = icmp slt i32 %3169, 10
  %3175 = or i1 %3173, %3174
  br i1 %3175, label %originalBB818, label %originalBB818alteredBB

originalBB818:                                    ; preds = %3167, %originalBB818alteredBB
  store i8 1, i8* %43, align 1, !dbg !1576
  %3176 = load i32, i32* @x.17
  %3177 = load i32, i32* @y.18
  %3178 = sub i32 %3176, 1
  %3179 = mul i32 %3176, %3178
  %3180 = urem i32 %3179, 2
  %3181 = icmp eq i32 %3180, 0
  %3182 = icmp slt i32 %3177, 10
  %3183 = or i1 %3181, %3182
  br i1 %3183, label %originalBBpart2820, label %originalBB818alteredBB

originalBBpart2820:                               ; preds = %originalBB818
  br label %4889, !dbg !1577

3184:                                             ; preds = %originalBBpart2232
  call void @llvm.dbg.declare(metadata i64* %44, metadata !1578, metadata !DIExpression()), !dbg !1580
  call void @llvm.dbg.declare(metadata i8* %45, metadata !1581, metadata !DIExpression()), !dbg !1582
  %3185 = load i32, i32* @x.17
  %3186 = load i32, i32* @y.18
  %3187 = sub i32 %3185, 1
  %3188 = mul i32 %3185, %3187
  %3189 = urem i32 %3188, 2
  %3190 = icmp eq i32 %3189, 0
  %3191 = icmp slt i32 %3186, 10
  %3192 = or i1 %3190, %3191
  br i1 %3192, label %originalBB822, label %originalBB822alteredBB

originalBB822:                                    ; preds = %3184, %originalBB822alteredBB
  %3193 = load i8, i8* %34, align 1, !dbg !1583
  %3194 = trunc i8 %3193 to i1, !dbg !1583
  %3195 = load i32, i32* @x.17
  %3196 = load i32, i32* @y.18
  %3197 = sub i32 %3195, 1
  %3198 = mul i32 %3195, %3197
  %3199 = urem i32 %3198, 2
  %3200 = icmp eq i32 %3199, 0
  %3201 = icmp slt i32 %3196, 10
  %3202 = or i1 %3200, %3201
  br i1 %3202, label %originalBBpart2824, label %originalBB822alteredBB

originalBBpart2824:                               ; preds = %originalBB822
  br i1 %3194, label %3203, label %3231, !dbg !1585

3203:                                             ; preds = %originalBBpart2824
  %3204 = load i32, i32* @x.17
  %3205 = load i32, i32* @y.18
  %3206 = sub i32 %3204, 1
  %3207 = mul i32 %3204, %3206
  %3208 = urem i32 %3207, 2
  %3209 = icmp eq i32 %3208, 0
  %3210 = icmp slt i32 %3205, 10
  %3211 = or i1 %3209, %3210
  br i1 %3211, label %originalBB826, label %originalBB826alteredBB

originalBB826:                                    ; preds = %3203, %originalBB826alteredBB
  store i64 1, i64* %44, align 8, !dbg !1586
  %3212 = call i16** @__ctype_b_loc() #15, !dbg !1588
  %3213 = load i16*, i16** %3212, align 8, !dbg !1588
  %3214 = load i8, i8* %39, align 1, !dbg !1588
  %3215 = zext i8 %3214 to i32, !dbg !1588
  %3216 = sext i32 %3215 to i64, !dbg !1588
  %3217 = getelementptr inbounds i16, i16* %3213, i64 %3216, !dbg !1588
  %3218 = load i16, i16* %3217, align 2, !dbg !1588
  %3219 = zext i16 %3218 to i32, !dbg !1588
  %3220 = and i32 %3219, 16384, !dbg !1588
  %3221 = icmp ne i32 %3220, 0, !dbg !1589
  %3222 = zext i1 %3221 to i8, !dbg !1590
  store i8 %3222, i8* %45, align 1, !dbg !1590
  %3223 = load i32, i32* @x.17
  %3224 = load i32, i32* @y.18
  %3225 = sub i32 %3223, 1
  %3226 = mul i32 %3223, %3225
  %3227 = urem i32 %3226, 2
  %3228 = icmp eq i32 %3227, 0
  %3229 = icmp slt i32 %3224, 10
  %3230 = or i1 %3228, %3229
  br i1 %3230, label %originalBBpart2832, label %originalBB826alteredBB

originalBBpart2832:                               ; preds = %originalBB826
  br label %3760, !dbg !1591

3231:                                             ; preds = %originalBBpart2824
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %46, metadata !1592, metadata !DIExpression()), !dbg !1609
  %3232 = load i32, i32* @x.17
  %3233 = load i32, i32* @y.18
  %3234 = sub i32 %3232, 1
  %3235 = mul i32 %3232, %3234
  %3236 = urem i32 %3235, 2
  %3237 = icmp eq i32 %3236, 0
  %3238 = icmp slt i32 %3233, 10
  %3239 = or i1 %3237, %3238
  br i1 %3239, label %originalBB834, label %originalBB834alteredBB

originalBB834:                                    ; preds = %3231, %originalBB834alteredBB
  %3240 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !1610
  call void @llvm.memset.p0i8.i64(i8* align 4 %3240, i8 0, i64 8, i1 false), !dbg !1610
  store i64 0, i64* %44, align 8, !dbg !1611
  store i8 1, i8* %45, align 1, !dbg !1612
  %3241 = load i64, i64* %22, align 8, !dbg !1613
  %3242 = icmp eq i64 %3241, -1, !dbg !1615
  %3243 = load i32, i32* @x.17
  %3244 = load i32, i32* @y.18
  %3245 = sub i32 %3243, 1
  %3246 = mul i32 %3243, %3245
  %3247 = urem i32 %3246, 2
  %3248 = icmp eq i32 %3247, 0
  %3249 = icmp slt i32 %3244, 10
  %3250 = or i1 %3248, %3249
  br i1 %3250, label %originalBBpart2836, label %originalBB834alteredBB

originalBBpart2836:                               ; preds = %originalBB834
  br i1 %3242, label %3251, label %3270, !dbg !1616

3251:                                             ; preds = %originalBBpart2836
  %3252 = load i32, i32* @x.17
  %3253 = load i32, i32* @y.18
  %3254 = sub i32 %3252, 1
  %3255 = mul i32 %3252, %3254
  %3256 = urem i32 %3255, 2
  %3257 = icmp eq i32 %3256, 0
  %3258 = icmp slt i32 %3253, 10
  %3259 = or i1 %3257, %3258
  br i1 %3259, label %originalBB838, label %originalBB838alteredBB

originalBB838:                                    ; preds = %3251, %originalBB838alteredBB
  %3260 = load i8*, i8** %21, align 8, !dbg !1617
  %3261 = call i64 @strlen(i8* %3260) #13, !dbg !1618
  store i64 %3261, i64* %22, align 8, !dbg !1619
  %3262 = load i32, i32* @x.17
  %3263 = load i32, i32* @y.18
  %3264 = sub i32 %3262, 1
  %3265 = mul i32 %3262, %3264
  %3266 = urem i32 %3265, 2
  %3267 = icmp eq i32 %3266, 0
  %3268 = icmp slt i32 %3263, 10
  %3269 = or i1 %3267, %3268
  br i1 %3269, label %originalBBpart2840, label %originalBB838alteredBB

originalBBpart2840:                               ; preds = %originalBB838
  br label %3270, !dbg !1620

3270:                                             ; preds = %originalBBpart2840, %originalBBpart2836
  br label %3271, !dbg !1621

3271:                                             ; preds = %originalBBpart21003, %3270
  call void @llvm.dbg.declare(metadata i32* %47, metadata !1622, metadata !DIExpression()), !dbg !1625
  call void @llvm.dbg.declare(metadata i64* %48, metadata !1626, metadata !DIExpression()), !dbg !1627
  %3272 = load i32, i32* @x.17
  %3273 = load i32, i32* @y.18
  %3274 = sub i32 %3272, 1
  %3275 = mul i32 %3272, %3274
  %3276 = urem i32 %3275, 2
  %3277 = icmp eq i32 %3276, 0
  %3278 = icmp slt i32 %3273, 10
  %3279 = or i1 %3277, %3278
  br i1 %3279, label %originalBB842, label %originalBB842alteredBB

originalBB842:                                    ; preds = %3271, %originalBB842alteredBB
  %3280 = load i8*, i8** %21, align 8, !dbg !1628
  %3281 = load i64, i64* %28, align 8, !dbg !1629
  %3282 = load i64, i64* %44, align 8, !dbg !1630
  %3283 = add i64 %3281, %3282, !dbg !1631
  %3284 = getelementptr inbounds i8, i8* %3280, i64 %3283, !dbg !1628
  %3285 = load i64, i64* %22, align 8, !dbg !1632
  %3286 = load i64, i64* %28, align 8, !dbg !1633
  %3287 = load i64, i64* %44, align 8, !dbg !1634
  %3288 = add i64 %3286, %3287, !dbg !1635
  %3289 = sub i64 %3285, %3288, !dbg !1636
  %3290 = call i64 @rpl_mbrtowc(i32* %47, i8* %3284, i64 %3289, %struct.__mbstate_t* %46), !dbg !1637
  store i64 %3290, i64* %48, align 8, !dbg !1627
  %3291 = load i64, i64* %48, align 8, !dbg !1638
  %3292 = icmp eq i64 %3291, 0, !dbg !1640
  %3293 = load i32, i32* @x.17
  %3294 = load i32, i32* @y.18
  %3295 = sub i32 %3293, 1
  %3296 = mul i32 %3293, %3295
  %3297 = urem i32 %3296, 2
  %3298 = icmp eq i32 %3297, 0
  %3299 = icmp slt i32 %3294, 10
  %3300 = or i1 %3298, %3299
  br i1 %3300, label %originalBBpart2863, label %originalBB842alteredBB

originalBBpart2863:                               ; preds = %originalBB842
  br i1 %3292, label %3301, label %3318, !dbg !1641

3301:                                             ; preds = %originalBBpart2863
  %3302 = load i32, i32* @x.17
  %3303 = load i32, i32* @y.18
  %3304 = sub i32 %3302, 1
  %3305 = mul i32 %3302, %3304
  %3306 = urem i32 %3305, 2
  %3307 = icmp eq i32 %3306, 0
  %3308 = icmp slt i32 %3303, 10
  %3309 = or i1 %3307, %3308
  br i1 %3309, label %originalBB865, label %originalBB865alteredBB

originalBB865:                                    ; preds = %3301, %originalBB865alteredBB
  %3310 = load i32, i32* @x.17
  %3311 = load i32, i32* @y.18
  %3312 = sub i32 %3310, 1
  %3313 = mul i32 %3310, %3312
  %3314 = urem i32 %3313, 2
  %3315 = icmp eq i32 %3314, 0
  %3316 = icmp slt i32 %3311, 10
  %3317 = or i1 %3315, %3316
  br i1 %3317, label %originalBBpart2867, label %originalBB865alteredBB

originalBBpart2867:                               ; preds = %originalBB865
  br label %3743, !dbg !1642

3318:                                             ; preds = %originalBBpart2863
  %3319 = load i64, i64* %48, align 8, !dbg !1643
  %3320 = icmp eq i64 %3319, -1, !dbg !1645
  br i1 %3320, label %3321, label %3338, !dbg !1646

3321:                                             ; preds = %3318
  %3322 = load i32, i32* @x.17
  %3323 = load i32, i32* @y.18
  %3324 = sub i32 %3322, 1
  %3325 = mul i32 %3322, %3324
  %3326 = urem i32 %3325, 2
  %3327 = icmp eq i32 %3326, 0
  %3328 = icmp slt i32 %3323, 10
  %3329 = or i1 %3327, %3328
  br i1 %3329, label %originalBB869, label %originalBB869alteredBB

originalBB869:                                    ; preds = %3321, %originalBB869alteredBB
  store i8 0, i8* %45, align 1, !dbg !1647
  %3330 = load i32, i32* @x.17
  %3331 = load i32, i32* @y.18
  %3332 = sub i32 %3330, 1
  %3333 = mul i32 %3330, %3332
  %3334 = urem i32 %3333, 2
  %3335 = icmp eq i32 %3334, 0
  %3336 = icmp slt i32 %3331, 10
  %3337 = or i1 %3335, %3336
  br i1 %3337, label %originalBBpart2871, label %originalBB869alteredBB

originalBBpart2871:                               ; preds = %originalBB869
  br label %3743, !dbg !1649

3338:                                             ; preds = %3318
  %3339 = load i32, i32* @x.17
  %3340 = load i32, i32* @y.18
  %3341 = sub i32 %3339, 1
  %3342 = mul i32 %3339, %3341
  %3343 = urem i32 %3342, 2
  %3344 = icmp eq i32 %3343, 0
  %3345 = icmp slt i32 %3340, 10
  %3346 = or i1 %3344, %3345
  br i1 %3346, label %originalBB873, label %originalBB873alteredBB

originalBB873:                                    ; preds = %3338, %originalBB873alteredBB
  %3347 = load i64, i64* %48, align 8, !dbg !1650
  %3348 = icmp eq i64 %3347, -2, !dbg !1652
  %3349 = load i32, i32* @x.17
  %3350 = load i32, i32* @y.18
  %3351 = sub i32 %3349, 1
  %3352 = mul i32 %3349, %3351
  %3353 = urem i32 %3352, 2
  %3354 = icmp eq i32 %3353, 0
  %3355 = icmp slt i32 %3350, 10
  %3356 = or i1 %3354, %3355
  br i1 %3356, label %originalBBpart2875, label %originalBB873alteredBB

originalBBpart2875:                               ; preds = %originalBB873
  br i1 %3348, label %3357, label %3475, !dbg !1653

3357:                                             ; preds = %originalBBpart2875
  %3358 = load i32, i32* @x.17
  %3359 = load i32, i32* @y.18
  %3360 = sub i32 %3358, 1
  %3361 = mul i32 %3358, %3360
  %3362 = urem i32 %3361, 2
  %3363 = icmp eq i32 %3362, 0
  %3364 = icmp slt i32 %3359, 10
  %3365 = or i1 %3363, %3364
  br i1 %3365, label %originalBB877, label %originalBB877alteredBB

originalBB877:                                    ; preds = %3357, %originalBB877alteredBB
  store i8 0, i8* %45, align 1, !dbg !1654
  %3366 = load i32, i32* @x.17
  %3367 = load i32, i32* @y.18
  %3368 = sub i32 %3366, 1
  %3369 = mul i32 %3366, %3368
  %3370 = urem i32 %3369, 2
  %3371 = icmp eq i32 %3370, 0
  %3372 = icmp slt i32 %3367, 10
  %3373 = or i1 %3371, %3372
  br i1 %3373, label %originalBBpart2879, label %originalBB877alteredBB

originalBBpart2879:                               ; preds = %originalBB877
  br label %3374, !dbg !1656

3374:                                             ; preds = %originalBBpart2923, %originalBBpart2879
  %3375 = load i32, i32* @x.17
  %3376 = load i32, i32* @y.18
  %3377 = sub i32 %3375, 1
  %3378 = mul i32 %3375, %3377
  %3379 = urem i32 %3378, 2
  %3380 = icmp eq i32 %3379, 0
  %3381 = icmp slt i32 %3376, 10
  %3382 = or i1 %3380, %3381
  br i1 %3382, label %originalBB881, label %originalBB881alteredBB

originalBB881:                                    ; preds = %3374, %originalBB881alteredBB
  %3383 = load i64, i64* %28, align 8, !dbg !1657
  %3384 = load i64, i64* %44, align 8, !dbg !1658
  %3385 = add i64 %3383, %3384, !dbg !1659
  %3386 = load i64, i64* %22, align 8, !dbg !1660
  %3387 = icmp ult i64 %3385, %3386, !dbg !1661
  %3388 = load i32, i32* @x.17
  %3389 = load i32, i32* @y.18
  %3390 = sub i32 %3388, 1
  %3391 = mul i32 %3388, %3390
  %3392 = urem i32 %3391, 2
  %3393 = icmp eq i32 %3392, 0
  %3394 = icmp slt i32 %3389, 10
  %3395 = or i1 %3393, %3394
  br i1 %3395, label %originalBBpart2899, label %originalBB881alteredBB

originalBBpart2899:                               ; preds = %originalBB881
  br i1 %3387, label %3396, label %3421, !dbg !1662

3396:                                             ; preds = %originalBBpart2899
  %3397 = load i32, i32* @x.17
  %3398 = load i32, i32* @y.18
  %3399 = sub i32 %3397, 1
  %3400 = mul i32 %3397, %3399
  %3401 = urem i32 %3400, 2
  %3402 = icmp eq i32 %3401, 0
  %3403 = icmp slt i32 %3398, 10
  %3404 = or i1 %3402, %3403
  br i1 %3404, label %originalBB901, label %originalBB901alteredBB

originalBB901:                                    ; preds = %3396, %originalBB901alteredBB
  %3405 = load i8*, i8** %21, align 8, !dbg !1663
  %3406 = load i64, i64* %28, align 8, !dbg !1664
  %3407 = load i64, i64* %44, align 8, !dbg !1665
  %3408 = add i64 %3406, %3407, !dbg !1666
  %3409 = getelementptr inbounds i8, i8* %3405, i64 %3408, !dbg !1663
  %3410 = load i8, i8* %3409, align 1, !dbg !1663
  %3411 = sext i8 %3410 to i32, !dbg !1663
  %3412 = icmp ne i32 %3411, 0, !dbg !1662
  %3413 = load i32, i32* @x.17
  %3414 = load i32, i32* @y.18
  %3415 = sub i32 %3413, 1
  %3416 = mul i32 %3413, %3415
  %3417 = urem i32 %3416, 2
  %3418 = icmp eq i32 %3417, 0
  %3419 = icmp slt i32 %3414, 10
  %3420 = or i1 %3418, %3419
  br i1 %3420, label %originalBBpart2910, label %originalBB901alteredBB

originalBBpart2910:                               ; preds = %originalBB901
  br label %3421

3421:                                             ; preds = %originalBBpart2910, %originalBBpart2899
  %3422 = phi i1 [ false, %originalBBpart2899 ], [ %3412, %originalBBpart2910 ], !dbg !1667
  %3423 = load i32, i32* @x.17
  %3424 = load i32, i32* @y.18
  %3425 = sub i32 %3423, 1
  %3426 = mul i32 %3423, %3425
  %3427 = urem i32 %3426, 2
  %3428 = icmp eq i32 %3427, 0
  %3429 = icmp slt i32 %3424, 10
  %3430 = or i1 %3428, %3429
  br i1 %3430, label %originalBB912, label %originalBB912alteredBB

originalBB912:                                    ; preds = %3421, %originalBB912alteredBB
  %3431 = load i32, i32* @x.17
  %3432 = load i32, i32* @y.18
  %3433 = sub i32 %3431, 1
  %3434 = mul i32 %3431, %3433
  %3435 = urem i32 %3434, 2
  %3436 = icmp eq i32 %3435, 0
  %3437 = icmp slt i32 %3432, 10
  %3438 = or i1 %3436, %3437
  br i1 %3438, label %originalBBpart2914, label %originalBB912alteredBB

originalBBpart2914:                               ; preds = %originalBB912
  br i1 %3422, label %3439, label %3458, !dbg !1656

3439:                                             ; preds = %originalBBpart2914
  %3440 = load i32, i32* @x.17
  %3441 = load i32, i32* @y.18
  %3442 = sub i32 %3440, 1
  %3443 = mul i32 %3440, %3442
  %3444 = urem i32 %3443, 2
  %3445 = icmp eq i32 %3444, 0
  %3446 = icmp slt i32 %3441, 10
  %3447 = or i1 %3445, %3446
  br i1 %3447, label %originalBB916, label %originalBB916alteredBB

originalBB916:                                    ; preds = %3439, %originalBB916alteredBB
  %3448 = load i64, i64* %44, align 8, !dbg !1668
  %3449 = add i64 %3448, 1, !dbg !1668
  store i64 %3449, i64* %44, align 8, !dbg !1668
  %3450 = load i32, i32* @x.17
  %3451 = load i32, i32* @y.18
  %3452 = sub i32 %3450, 1
  %3453 = mul i32 %3450, %3452
  %3454 = urem i32 %3453, 2
  %3455 = icmp eq i32 %3454, 0
  %3456 = icmp slt i32 %3451, 10
  %3457 = or i1 %3455, %3456
  br i1 %3457, label %originalBBpart2923, label %originalBB916alteredBB

originalBBpart2923:                               ; preds = %originalBB916
  br label %3374, !dbg !1656, !llvm.loop !1669

3458:                                             ; preds = %originalBBpart2914
  %3459 = load i32, i32* @x.17
  %3460 = load i32, i32* @y.18
  %3461 = sub i32 %3459, 1
  %3462 = mul i32 %3459, %3461
  %3463 = urem i32 %3462, 2
  %3464 = icmp eq i32 %3463, 0
  %3465 = icmp slt i32 %3460, 10
  %3466 = or i1 %3464, %3465
  br i1 %3466, label %originalBB925, label %originalBB925alteredBB

originalBB925:                                    ; preds = %3458, %originalBB925alteredBB
  %3467 = load i32, i32* @x.17
  %3468 = load i32, i32* @y.18
  %3469 = sub i32 %3467, 1
  %3470 = mul i32 %3467, %3469
  %3471 = urem i32 %3470, 2
  %3472 = icmp eq i32 %3471, 0
  %3473 = icmp slt i32 %3468, 10
  %3474 = or i1 %3472, %3473
  br i1 %3474, label %originalBBpart2927, label %originalBB925alteredBB

originalBBpart2927:                               ; preds = %originalBB925
  br label %3743, !dbg !1670

3475:                                             ; preds = %originalBBpart2875
  %3476 = load i32, i32* @x.17
  %3477 = load i32, i32* @y.18
  %3478 = sub i32 %3476, 1
  %3479 = mul i32 %3476, %3478
  %3480 = urem i32 %3479, 2
  %3481 = icmp eq i32 %3480, 0
  %3482 = icmp slt i32 %3477, 10
  %3483 = or i1 %3481, %3482
  br i1 %3483, label %originalBB929, label %originalBB929alteredBB

originalBB929:                                    ; preds = %3475, %originalBB929alteredBB
  %3484 = load i8, i8* %35, align 1, !dbg !1671
  %3485 = trunc i8 %3484 to i1, !dbg !1671
  %3486 = load i32, i32* @x.17
  %3487 = load i32, i32* @y.18
  %3488 = sub i32 %3486, 1
  %3489 = mul i32 %3486, %3488
  %3490 = urem i32 %3489, 2
  %3491 = icmp eq i32 %3490, 0
  %3492 = icmp slt i32 %3487, 10
  %3493 = or i1 %3491, %3492
  br i1 %3493, label %originalBBpart2931, label %originalBB929alteredBB

originalBBpart2931:                               ; preds = %originalBB929
  br i1 %3485, label %3494, label %3631, !dbg !1674

3494:                                             ; preds = %originalBBpart2931
  %3495 = load i32, i32* @x.17
  %3496 = load i32, i32* @y.18
  %3497 = sub i32 %3495, 1
  %3498 = mul i32 %3495, %3497
  %3499 = urem i32 %3498, 2
  %3500 = icmp eq i32 %3499, 0
  %3501 = icmp slt i32 %3496, 10
  %3502 = or i1 %3500, %3501
  br i1 %3502, label %originalBB933, label %originalBB933alteredBB

originalBB933:                                    ; preds = %3494, %originalBB933alteredBB
  %3503 = load i32, i32* %23, align 4, !dbg !1675
  %3504 = icmp eq i32 %3503, 2, !dbg !1676
  %3505 = load i32, i32* @x.17
  %3506 = load i32, i32* @y.18
  %3507 = sub i32 %3505, 1
  %3508 = mul i32 %3505, %3507
  %3509 = urem i32 %3508, 2
  %3510 = icmp eq i32 %3509, 0
  %3511 = icmp slt i32 %3506, 10
  %3512 = or i1 %3510, %3511
  br i1 %3512, label %originalBBpart2935, label %originalBB933alteredBB

originalBBpart2935:                               ; preds = %originalBB933
  br i1 %3504, label %3513, label %3631, !dbg !1677

3513:                                             ; preds = %originalBBpart2935
  call void @llvm.dbg.declare(metadata i64* %49, metadata !1678, metadata !DIExpression()), !dbg !1680
  %3514 = load i32, i32* @x.17
  %3515 = load i32, i32* @y.18
  %3516 = sub i32 %3514, 1
  %3517 = mul i32 %3514, %3516
  %3518 = urem i32 %3517, 2
  %3519 = icmp eq i32 %3518, 0
  %3520 = icmp slt i32 %3515, 10
  %3521 = or i1 %3519, %3520
  br i1 %3521, label %originalBB937, label %originalBB937alteredBB

originalBB937:                                    ; preds = %3513, %originalBB937alteredBB
  store i64 1, i64* %49, align 8, !dbg !1681
  %3522 = load i32, i32* @x.17
  %3523 = load i32, i32* @y.18
  %3524 = sub i32 %3522, 1
  %3525 = mul i32 %3522, %3524
  %3526 = urem i32 %3525, 2
  %3527 = icmp eq i32 %3526, 0
  %3528 = icmp slt i32 %3523, 10
  %3529 = or i1 %3527, %3528
  br i1 %3529, label %originalBBpart2939, label %originalBB937alteredBB

originalBBpart2939:                               ; preds = %originalBB937
  br label %3530, !dbg !1683

3530:                                             ; preds = %3611, %originalBBpart2939
  %3531 = load i64, i64* %49, align 8, !dbg !1684
  %3532 = load i64, i64* %48, align 8, !dbg !1686
  %3533 = icmp ult i64 %3531, %3532, !dbg !1687
  br i1 %3533, label %3534, label %3614, !dbg !1688

3534:                                             ; preds = %3530
  %3535 = load i32, i32* @x.17
  %3536 = load i32, i32* @y.18
  %3537 = sub i32 %3535, 1
  %3538 = mul i32 %3535, %3537
  %3539 = urem i32 %3538, 2
  %3540 = icmp eq i32 %3539, 0
  %3541 = icmp slt i32 %3536, 10
  %3542 = or i1 %3540, %3541
  br i1 %3542, label %originalBB941, label %originalBB941alteredBB

originalBB941:                                    ; preds = %3534, %originalBB941alteredBB
  %3543 = load i8*, i8** %21, align 8, !dbg !1689
  %3544 = load i64, i64* %28, align 8, !dbg !1690
  %3545 = load i64, i64* %44, align 8, !dbg !1691
  %3546 = add i64 %3544, %3545, !dbg !1692
  %3547 = load i64, i64* %49, align 8, !dbg !1693
  %3548 = add i64 %3546, %3547, !dbg !1694
  %3549 = getelementptr inbounds i8, i8* %3543, i64 %3548, !dbg !1689
  %3550 = load i8, i8* %3549, align 1, !dbg !1689
  %3551 = sext i8 %3550 to i32, !dbg !1689
  %3552 = load i32, i32* @x.17
  %3553 = load i32, i32* @y.18
  %3554 = sub i32 %3552, 1
  %3555 = mul i32 %3552, %3554
  %3556 = urem i32 %3555, 2
  %3557 = icmp eq i32 %3556, 0
  %3558 = icmp slt i32 %3553, 10
  %3559 = or i1 %3557, %3558
  br i1 %3559, label %originalBBpart2955, label %originalBB941alteredBB

originalBBpart2955:                               ; preds = %originalBB941
  switch i32 %3551, label %3577 [
    i32 91, label %3560
    i32 92, label %3560
    i32 94, label %3560
    i32 96, label %3560
    i32 124, label %3560
  ], !dbg !1695

3560:                                             ; preds = %originalBBpart2955, %originalBBpart2955, %originalBBpart2955, %originalBBpart2955, %originalBBpart2955
  %3561 = load i32, i32* @x.17
  %3562 = load i32, i32* @y.18
  %3563 = sub i32 %3561, 1
  %3564 = mul i32 %3561, %3563
  %3565 = urem i32 %3564, 2
  %3566 = icmp eq i32 %3565, 0
  %3567 = icmp slt i32 %3562, 10
  %3568 = or i1 %3566, %3567
  br i1 %3568, label %originalBB957, label %originalBB957alteredBB

originalBB957:                                    ; preds = %3560, %originalBB957alteredBB
  %3569 = load i32, i32* @x.17
  %3570 = load i32, i32* @y.18
  %3571 = sub i32 %3569, 1
  %3572 = mul i32 %3569, %3571
  %3573 = urem i32 %3572, 2
  %3574 = icmp eq i32 %3573, 0
  %3575 = icmp slt i32 %3570, 10
  %3576 = or i1 %3574, %3575
  br i1 %3576, label %originalBBpart2959, label %originalBB957alteredBB

originalBBpart2959:                               ; preds = %originalBB957
  br label %6286, !dbg !1696

3577:                                             ; preds = %originalBBpart2955
  %3578 = load i32, i32* @x.17
  %3579 = load i32, i32* @y.18
  %3580 = sub i32 %3578, 1
  %3581 = mul i32 %3578, %3580
  %3582 = urem i32 %3581, 2
  %3583 = icmp eq i32 %3582, 0
  %3584 = icmp slt i32 %3579, 10
  %3585 = or i1 %3583, %3584
  br i1 %3585, label %originalBB961, label %originalBB961alteredBB

originalBB961:                                    ; preds = %3577, %originalBB961alteredBB
  %3586 = load i32, i32* @x.17
  %3587 = load i32, i32* @y.18
  %3588 = sub i32 %3586, 1
  %3589 = mul i32 %3586, %3588
  %3590 = urem i32 %3589, 2
  %3591 = icmp eq i32 %3590, 0
  %3592 = icmp slt i32 %3587, 10
  %3593 = or i1 %3591, %3592
  br i1 %3593, label %originalBBpart2963, label %originalBB961alteredBB

originalBBpart2963:                               ; preds = %originalBB961
  br label %3594, !dbg !1698

3594:                                             ; preds = %originalBBpart2963
  %3595 = load i32, i32* @x.17
  %3596 = load i32, i32* @y.18
  %3597 = sub i32 %3595, 1
  %3598 = mul i32 %3595, %3597
  %3599 = urem i32 %3598, 2
  %3600 = icmp eq i32 %3599, 0
  %3601 = icmp slt i32 %3596, 10
  %3602 = or i1 %3600, %3601
  br i1 %3602, label %originalBB965, label %originalBB965alteredBB

originalBB965:                                    ; preds = %3594, %originalBB965alteredBB
  %3603 = load i32, i32* @x.17
  %3604 = load i32, i32* @y.18
  %3605 = sub i32 %3603, 1
  %3606 = mul i32 %3603, %3605
  %3607 = urem i32 %3606, 2
  %3608 = icmp eq i32 %3607, 0
  %3609 = icmp slt i32 %3604, 10
  %3610 = or i1 %3608, %3609
  br i1 %3610, label %originalBBpart2967, label %originalBB965alteredBB

originalBBpart2967:                               ; preds = %originalBB965
  br label %3611, !dbg !1699

3611:                                             ; preds = %originalBBpart2967
  %3612 = load i64, i64* %49, align 8, !dbg !1700
  %3613 = add i64 %3612, 1, !dbg !1700
  store i64 %3613, i64* %49, align 8, !dbg !1700
  br label %3530, !dbg !1701, !llvm.loop !1702

3614:                                             ; preds = %3530
  %3615 = load i32, i32* @x.17
  %3616 = load i32, i32* @y.18
  %3617 = sub i32 %3615, 1
  %3618 = mul i32 %3615, %3617
  %3619 = urem i32 %3618, 2
  %3620 = icmp eq i32 %3619, 0
  %3621 = icmp slt i32 %3616, 10
  %3622 = or i1 %3620, %3621
  br i1 %3622, label %originalBB969, label %originalBB969alteredBB

originalBB969:                                    ; preds = %3614, %originalBB969alteredBB
  %3623 = load i32, i32* @x.17
  %3624 = load i32, i32* @y.18
  %3625 = sub i32 %3623, 1
  %3626 = mul i32 %3623, %3625
  %3627 = urem i32 %3626, 2
  %3628 = icmp eq i32 %3627, 0
  %3629 = icmp slt i32 %3624, 10
  %3630 = or i1 %3628, %3629
  br i1 %3630, label %originalBBpart2971, label %originalBB969alteredBB

originalBBpart2971:                               ; preds = %originalBB969
  br label %3631, !dbg !1704

3631:                                             ; preds = %originalBBpart2971, %originalBBpart2935, %originalBBpart2931
  %3632 = load i32, i32* @x.17
  %3633 = load i32, i32* @y.18
  %3634 = sub i32 %3632, 1
  %3635 = mul i32 %3632, %3634
  %3636 = urem i32 %3635, 2
  %3637 = icmp eq i32 %3636, 0
  %3638 = icmp slt i32 %3633, 10
  %3639 = or i1 %3637, %3638
  br i1 %3639, label %originalBB973, label %originalBB973alteredBB

originalBB973:                                    ; preds = %3631, %originalBB973alteredBB
  %3640 = load i32, i32* %47, align 4, !dbg !1705
  %3641 = call i32 @iswprint(i32 %3640) #10, !dbg !1707
  %3642 = icmp ne i32 %3641, 0, !dbg !1707
  %3643 = load i32, i32* @x.17
  %3644 = load i32, i32* @y.18
  %3645 = sub i32 %3643, 1
  %3646 = mul i32 %3643, %3645
  %3647 = urem i32 %3646, 2
  %3648 = icmp eq i32 %3647, 0
  %3649 = icmp slt i32 %3644, 10
  %3650 = or i1 %3648, %3649
  br i1 %3650, label %originalBBpart2975, label %originalBB973alteredBB

originalBBpart2975:                               ; preds = %originalBB973
  br i1 %3642, label %3668, label %3651, !dbg !1708

3651:                                             ; preds = %originalBBpart2975
  %3652 = load i32, i32* @x.17
  %3653 = load i32, i32* @y.18
  %3654 = sub i32 %3652, 1
  %3655 = mul i32 %3652, %3654
  %3656 = urem i32 %3655, 2
  %3657 = icmp eq i32 %3656, 0
  %3658 = icmp slt i32 %3653, 10
  %3659 = or i1 %3657, %3658
  br i1 %3659, label %originalBB977, label %originalBB977alteredBB

originalBB977:                                    ; preds = %3651, %originalBB977alteredBB
  store i8 0, i8* %45, align 1, !dbg !1709
  %3660 = load i32, i32* @x.17
  %3661 = load i32, i32* @y.18
  %3662 = sub i32 %3660, 1
  %3663 = mul i32 %3660, %3662
  %3664 = urem i32 %3663, 2
  %3665 = icmp eq i32 %3664, 0
  %3666 = icmp slt i32 %3661, 10
  %3667 = or i1 %3665, %3666
  br i1 %3667, label %originalBBpart2979, label %originalBB977alteredBB

originalBBpart2979:                               ; preds = %originalBB977
  br label %3668, !dbg !1710

3668:                                             ; preds = %originalBBpart2979, %originalBBpart2975
  %3669 = load i32, i32* @x.17
  %3670 = load i32, i32* @y.18
  %3671 = sub i32 %3669, 1
  %3672 = mul i32 %3669, %3671
  %3673 = urem i32 %3672, 2
  %3674 = icmp eq i32 %3673, 0
  %3675 = icmp slt i32 %3670, 10
  %3676 = or i1 %3674, %3675
  br i1 %3676, label %originalBB981, label %originalBB981alteredBB

originalBB981:                                    ; preds = %3668, %originalBB981alteredBB
  %3677 = load i64, i64* %48, align 8, !dbg !1711
  %3678 = load i64, i64* %44, align 8, !dbg !1712
  %3679 = add i64 %3678, %3677, !dbg !1712
  store i64 %3679, i64* %44, align 8, !dbg !1712
  %3680 = load i32, i32* @x.17
  %3681 = load i32, i32* @y.18
  %3682 = sub i32 %3680, 1
  %3683 = mul i32 %3680, %3682
  %3684 = urem i32 %3683, 2
  %3685 = icmp eq i32 %3684, 0
  %3686 = icmp slt i32 %3681, 10
  %3687 = or i1 %3685, %3686
  br i1 %3687, label %originalBBpart2987, label %originalBB981alteredBB

originalBBpart2987:                               ; preds = %originalBB981
  br label %3688

3688:                                             ; preds = %originalBBpart2987
  %3689 = load i32, i32* @x.17
  %3690 = load i32, i32* @y.18
  %3691 = sub i32 %3689, 1
  %3692 = mul i32 %3689, %3691
  %3693 = urem i32 %3692, 2
  %3694 = icmp eq i32 %3693, 0
  %3695 = icmp slt i32 %3690, 10
  %3696 = or i1 %3694, %3695
  br i1 %3696, label %originalBB989, label %originalBB989alteredBB

originalBB989:                                    ; preds = %3688, %originalBB989alteredBB
  %3697 = load i32, i32* @x.17
  %3698 = load i32, i32* @y.18
  %3699 = sub i32 %3697, 1
  %3700 = mul i32 %3697, %3699
  %3701 = urem i32 %3700, 2
  %3702 = icmp eq i32 %3701, 0
  %3703 = icmp slt i32 %3698, 10
  %3704 = or i1 %3702, %3703
  br i1 %3704, label %originalBBpart2991, label %originalBB989alteredBB

originalBBpart2991:                               ; preds = %originalBB989
  br label %3705

3705:                                             ; preds = %originalBBpart2991
  %3706 = load i32, i32* @x.17
  %3707 = load i32, i32* @y.18
  %3708 = sub i32 %3706, 1
  %3709 = mul i32 %3706, %3708
  %3710 = urem i32 %3709, 2
  %3711 = icmp eq i32 %3710, 0
  %3712 = icmp slt i32 %3707, 10
  %3713 = or i1 %3711, %3712
  br i1 %3713, label %originalBB993, label %originalBB993alteredBB

originalBB993:                                    ; preds = %3705, %originalBB993alteredBB
  %3714 = load i32, i32* @x.17
  %3715 = load i32, i32* @y.18
  %3716 = sub i32 %3714, 1
  %3717 = mul i32 %3714, %3716
  %3718 = urem i32 %3717, 2
  %3719 = icmp eq i32 %3718, 0
  %3720 = icmp slt i32 %3715, 10
  %3721 = or i1 %3719, %3720
  br i1 %3721, label %originalBBpart2995, label %originalBB993alteredBB

originalBBpart2995:                               ; preds = %originalBB993
  br label %3722

3722:                                             ; preds = %originalBBpart2995
  br label %3723, !dbg !1713

3723:                                             ; preds = %3722
  %3724 = load i32, i32* @x.17
  %3725 = load i32, i32* @y.18
  %3726 = sub i32 %3724, 1
  %3727 = mul i32 %3724, %3726
  %3728 = urem i32 %3727, 2
  %3729 = icmp eq i32 %3728, 0
  %3730 = icmp slt i32 %3725, 10
  %3731 = or i1 %3729, %3730
  br i1 %3731, label %originalBB997, label %originalBB997alteredBB

originalBB997:                                    ; preds = %3723, %originalBB997alteredBB
  %3732 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !1714
  %3733 = icmp ne i32 %3732, 0, !dbg !1715
  %3734 = xor i1 %3733, true, !dbg !1715
  %3735 = load i32, i32* @x.17
  %3736 = load i32, i32* @y.18
  %3737 = sub i32 %3735, 1
  %3738 = mul i32 %3735, %3737
  %3739 = urem i32 %3738, 2
  %3740 = icmp eq i32 %3739, 0
  %3741 = icmp slt i32 %3736, 10
  %3742 = or i1 %3740, %3741
  br i1 %3742, label %originalBBpart21003, label %originalBB997alteredBB

originalBBpart21003:                              ; preds = %originalBB997
  br i1 %3734, label %3271, label %3743, !dbg !1713, !llvm.loop !1716

3743:                                             ; preds = %originalBBpart21003, %originalBBpart2927, %originalBBpart2871, %originalBBpart2867
  %3744 = load i32, i32* @x.17
  %3745 = load i32, i32* @y.18
  %3746 = sub i32 %3744, 1
  %3747 = mul i32 %3744, %3746
  %3748 = urem i32 %3747, 2
  %3749 = icmp eq i32 %3748, 0
  %3750 = icmp slt i32 %3745, 10
  %3751 = or i1 %3749, %3750
  br i1 %3751, label %originalBB1005, label %originalBB1005alteredBB

originalBB1005:                                   ; preds = %3743, %originalBB1005alteredBB
  %3752 = load i32, i32* @x.17
  %3753 = load i32, i32* @y.18
  %3754 = sub i32 %3752, 1
  %3755 = mul i32 %3752, %3754
  %3756 = urem i32 %3755, 2
  %3757 = icmp eq i32 %3756, 0
  %3758 = icmp slt i32 %3753, 10
  %3759 = or i1 %3757, %3758
  br i1 %3759, label %originalBBpart21007, label %originalBB1005alteredBB

originalBBpart21007:                              ; preds = %originalBB1005
  br label %3760

3760:                                             ; preds = %originalBBpart21007, %originalBBpart2832
  %3761 = load i8, i8* %45, align 1, !dbg !1718
  %3762 = trunc i8 %3761 to i1, !dbg !1718
  %3763 = zext i1 %3762 to i8, !dbg !1719
  store i8 %3763, i8* %43, align 1, !dbg !1719
  %3764 = load i64, i64* %44, align 8, !dbg !1720
  %3765 = icmp ult i64 1, %3764, !dbg !1722
  br i1 %3765, label %3804, label %3766, !dbg !1723

3766:                                             ; preds = %3760
  %3767 = load i32, i32* @x.17
  %3768 = load i32, i32* @y.18
  %3769 = sub i32 %3767, 1
  %3770 = mul i32 %3767, %3769
  %3771 = urem i32 %3770, 2
  %3772 = icmp eq i32 %3771, 0
  %3773 = icmp slt i32 %3768, 10
  %3774 = or i1 %3772, %3773
  br i1 %3774, label %originalBB1009, label %originalBB1009alteredBB

originalBB1009:                                   ; preds = %3766, %originalBB1009alteredBB
  %3775 = load i8, i8* %33, align 1, !dbg !1724
  %3776 = trunc i8 %3775 to i1, !dbg !1724
  %3777 = load i32, i32* @x.17
  %3778 = load i32, i32* @y.18
  %3779 = sub i32 %3777, 1
  %3780 = mul i32 %3777, %3779
  %3781 = urem i32 %3780, 2
  %3782 = icmp eq i32 %3781, 0
  %3783 = icmp slt i32 %3778, 10
  %3784 = or i1 %3782, %3783
  br i1 %3784, label %originalBBpart21011, label %originalBB1009alteredBB

originalBBpart21011:                              ; preds = %originalBB1009
  br i1 %3776, label %3785, label %4872, !dbg !1725

3785:                                             ; preds = %originalBBpart21011
  %3786 = load i32, i32* @x.17
  %3787 = load i32, i32* @y.18
  %3788 = sub i32 %3786, 1
  %3789 = mul i32 %3786, %3788
  %3790 = urem i32 %3789, 2
  %3791 = icmp eq i32 %3790, 0
  %3792 = icmp slt i32 %3787, 10
  %3793 = or i1 %3791, %3792
  br i1 %3793, label %originalBB1013, label %originalBB1013alteredBB

originalBB1013:                                   ; preds = %3785, %originalBB1013alteredBB
  %3794 = load i8, i8* %45, align 1, !dbg !1726
  %3795 = trunc i8 %3794 to i1, !dbg !1726
  %3796 = load i32, i32* @x.17
  %3797 = load i32, i32* @y.18
  %3798 = sub i32 %3796, 1
  %3799 = mul i32 %3796, %3798
  %3800 = urem i32 %3799, 2
  %3801 = icmp eq i32 %3800, 0
  %3802 = icmp slt i32 %3797, 10
  %3803 = or i1 %3801, %3802
  br i1 %3803, label %originalBBpart21015, label %originalBB1013alteredBB

originalBBpart21015:                              ; preds = %originalBB1013
  br i1 %3795, label %4872, label %3804, !dbg !1727

3804:                                             ; preds = %originalBBpart21015, %3760
  call void @llvm.dbg.declare(metadata i64* %50, metadata !1728, metadata !DIExpression()), !dbg !1730
  %3805 = load i64, i64* %28, align 8, !dbg !1731
  %3806 = load i64, i64* %44, align 8, !dbg !1732
  %3807 = add i64 %3805, %3806, !dbg !1733
  store i64 %3807, i64* %50, align 8, !dbg !1730
  br label %3808, !dbg !1734

3808:                                             ; preds = %originalBBpart21326, %3804
  %3809 = load i32, i32* @x.17
  %3810 = load i32, i32* @y.18
  %3811 = sub i32 %3809, 1
  %3812 = mul i32 %3809, %3811
  %3813 = urem i32 %3812, 2
  %3814 = icmp eq i32 %3813, 0
  %3815 = icmp slt i32 %3810, 10
  %3816 = or i1 %3814, %3815
  br i1 %3816, label %originalBB1017, label %originalBB1017alteredBB

originalBB1017:                                   ; preds = %3808, %originalBB1017alteredBB
  %3817 = load i8, i8* %33, align 1, !dbg !1735
  %3818 = trunc i8 %3817 to i1, !dbg !1735
  %3819 = load i32, i32* @x.17
  %3820 = load i32, i32* @y.18
  %3821 = sub i32 %3819, 1
  %3822 = mul i32 %3819, %3821
  %3823 = urem i32 %3822, 2
  %3824 = icmp eq i32 %3823, 0
  %3825 = icmp slt i32 %3820, 10
  %3826 = or i1 %3824, %3825
  br i1 %3826, label %originalBBpart21019, label %originalBB1017alteredBB

originalBBpart21019:                              ; preds = %originalBB1017
  br i1 %3818, label %3827, label %4412, !dbg !1740

3827:                                             ; preds = %originalBBpart21019
  %3828 = load i32, i32* @x.17
  %3829 = load i32, i32* @y.18
  %3830 = sub i32 %3828, 1
  %3831 = mul i32 %3828, %3830
  %3832 = urem i32 %3831, 2
  %3833 = icmp eq i32 %3832, 0
  %3834 = icmp slt i32 %3829, 10
  %3835 = or i1 %3833, %3834
  br i1 %3835, label %originalBB1021, label %originalBB1021alteredBB

originalBB1021:                                   ; preds = %3827, %originalBB1021alteredBB
  %3836 = load i8, i8* %45, align 1, !dbg !1741
  %3837 = trunc i8 %3836 to i1, !dbg !1741
  %3838 = load i32, i32* @x.17
  %3839 = load i32, i32* @y.18
  %3840 = sub i32 %3838, 1
  %3841 = mul i32 %3838, %3840
  %3842 = urem i32 %3841, 2
  %3843 = icmp eq i32 %3842, 0
  %3844 = icmp slt i32 %3839, 10
  %3845 = or i1 %3843, %3844
  br i1 %3845, label %originalBBpart21023, label %originalBB1021alteredBB

originalBBpart21023:                              ; preds = %originalBB1021
  br i1 %3837, label %4412, label %3846, !dbg !1742

3846:                                             ; preds = %originalBBpart21023
  %3847 = load i32, i32* @x.17
  %3848 = load i32, i32* @y.18
  %3849 = sub i32 %3847, 1
  %3850 = mul i32 %3847, %3849
  %3851 = urem i32 %3850, 2
  %3852 = icmp eq i32 %3851, 0
  %3853 = icmp slt i32 %3848, 10
  %3854 = or i1 %3852, %3853
  br i1 %3854, label %originalBB1025, label %originalBB1025alteredBB

originalBB1025:                                   ; preds = %3846, %originalBB1025alteredBB
  %3855 = load i32, i32* @x.17
  %3856 = load i32, i32* @y.18
  %3857 = sub i32 %3855, 1
  %3858 = mul i32 %3855, %3857
  %3859 = urem i32 %3858, 2
  %3860 = icmp eq i32 %3859, 0
  %3861 = icmp slt i32 %3856, 10
  %3862 = or i1 %3860, %3861
  br i1 %3862, label %originalBBpart21027, label %originalBB1025alteredBB

originalBBpart21027:                              ; preds = %originalBB1025
  br label %3863, !dbg !1743

3863:                                             ; preds = %originalBBpart21027
  %3864 = load i32, i32* @x.17
  %3865 = load i32, i32* @y.18
  %3866 = sub i32 %3864, 1
  %3867 = mul i32 %3864, %3866
  %3868 = urem i32 %3867, 2
  %3869 = icmp eq i32 %3868, 0
  %3870 = icmp slt i32 %3865, 10
  %3871 = or i1 %3869, %3870
  br i1 %3871, label %originalBB1029, label %originalBB1029alteredBB

originalBB1029:                                   ; preds = %3863, %originalBB1029alteredBB
  %3872 = load i8, i8* %35, align 1, !dbg !1745
  %3873 = trunc i8 %3872 to i1, !dbg !1745
  %3874 = load i32, i32* @x.17
  %3875 = load i32, i32* @y.18
  %3876 = sub i32 %3874, 1
  %3877 = mul i32 %3874, %3876
  %3878 = urem i32 %3877, 2
  %3879 = icmp eq i32 %3878, 0
  %3880 = icmp slt i32 %3875, 10
  %3881 = or i1 %3879, %3880
  br i1 %3881, label %originalBBpart21031, label %originalBB1029alteredBB

originalBBpart21031:                              ; preds = %originalBB1029
  br i1 %3873, label %3882, label %3899, !dbg !1748

3882:                                             ; preds = %originalBBpart21031
  %3883 = load i32, i32* @x.17
  %3884 = load i32, i32* @y.18
  %3885 = sub i32 %3883, 1
  %3886 = mul i32 %3883, %3885
  %3887 = urem i32 %3886, 2
  %3888 = icmp eq i32 %3887, 0
  %3889 = icmp slt i32 %3884, 10
  %3890 = or i1 %3888, %3889
  br i1 %3890, label %originalBB1033, label %originalBB1033alteredBB

originalBB1033:                                   ; preds = %3882, %originalBB1033alteredBB
  %3891 = load i32, i32* @x.17
  %3892 = load i32, i32* @y.18
  %3893 = sub i32 %3891, 1
  %3894 = mul i32 %3891, %3893
  %3895 = urem i32 %3894, 2
  %3896 = icmp eq i32 %3895, 0
  %3897 = icmp slt i32 %3892, 10
  %3898 = or i1 %3896, %3897
  br i1 %3898, label %originalBBpart21035, label %originalBB1033alteredBB

originalBBpart21035:                              ; preds = %originalBB1033
  br label %6286, !dbg !1745

3899:                                             ; preds = %originalBBpart21031
  %3900 = load i32, i32* @x.17
  %3901 = load i32, i32* @y.18
  %3902 = sub i32 %3900, 1
  %3903 = mul i32 %3900, %3902
  %3904 = urem i32 %3903, 2
  %3905 = icmp eq i32 %3904, 0
  %3906 = icmp slt i32 %3901, 10
  %3907 = or i1 %3905, %3906
  br i1 %3907, label %originalBB1037, label %originalBB1037alteredBB

originalBB1037:                                   ; preds = %3899, %originalBB1037alteredBB
  store i8 1, i8* %42, align 1, !dbg !1748
  %3908 = load i32, i32* %23, align 4, !dbg !1749
  %3909 = icmp eq i32 %3908, 2, !dbg !1749
  %3910 = load i32, i32* @x.17
  %3911 = load i32, i32* @y.18
  %3912 = sub i32 %3910, 1
  %3913 = mul i32 %3910, %3912
  %3914 = urem i32 %3913, 2
  %3915 = icmp eq i32 %3914, 0
  %3916 = icmp slt i32 %3911, 10
  %3917 = or i1 %3915, %3916
  br i1 %3917, label %originalBBpart21039, label %originalBB1037alteredBB

originalBBpart21039:                              ; preds = %originalBB1037
  br i1 %3909, label %3918, label %4166, !dbg !1749

3918:                                             ; preds = %originalBBpart21039
  %3919 = load i32, i32* @x.17
  %3920 = load i32, i32* @y.18
  %3921 = sub i32 %3919, 1
  %3922 = mul i32 %3919, %3921
  %3923 = urem i32 %3922, 2
  %3924 = icmp eq i32 %3923, 0
  %3925 = icmp slt i32 %3920, 10
  %3926 = or i1 %3924, %3925
  br i1 %3926, label %originalBB1041, label %originalBB1041alteredBB

originalBB1041:                                   ; preds = %3918, %originalBB1041alteredBB
  %3927 = load i8, i8* %36, align 1, !dbg !1749
  %3928 = trunc i8 %3927 to i1, !dbg !1749
  %3929 = load i32, i32* @x.17
  %3930 = load i32, i32* @y.18
  %3931 = sub i32 %3929, 1
  %3932 = mul i32 %3929, %3931
  %3933 = urem i32 %3932, 2
  %3934 = icmp eq i32 %3933, 0
  %3935 = icmp slt i32 %3930, 10
  %3936 = or i1 %3934, %3935
  br i1 %3936, label %originalBBpart21043, label %originalBB1041alteredBB

originalBBpart21043:                              ; preds = %originalBB1041
  br i1 %3928, label %4166, label %3937, !dbg !1748

3937:                                             ; preds = %originalBBpart21043
  %3938 = load i32, i32* @x.17
  %3939 = load i32, i32* @y.18
  %3940 = sub i32 %3938, 1
  %3941 = mul i32 %3938, %3940
  %3942 = urem i32 %3941, 2
  %3943 = icmp eq i32 %3942, 0
  %3944 = icmp slt i32 %3939, 10
  %3945 = or i1 %3943, %3944
  br i1 %3945, label %originalBB1045, label %originalBB1045alteredBB

originalBB1045:                                   ; preds = %3937, %originalBB1045alteredBB
  %3946 = load i32, i32* @x.17
  %3947 = load i32, i32* @y.18
  %3948 = sub i32 %3946, 1
  %3949 = mul i32 %3946, %3948
  %3950 = urem i32 %3949, 2
  %3951 = icmp eq i32 %3950, 0
  %3952 = icmp slt i32 %3947, 10
  %3953 = or i1 %3951, %3952
  br i1 %3953, label %originalBBpart21047, label %originalBB1045alteredBB

originalBBpart21047:                              ; preds = %originalBB1045
  br label %3954, !dbg !1751

3954:                                             ; preds = %originalBBpart21047
  %3955 = load i32, i32* @x.17
  %3956 = load i32, i32* @y.18
  %3957 = sub i32 %3955, 1
  %3958 = mul i32 %3955, %3957
  %3959 = urem i32 %3958, 2
  %3960 = icmp eq i32 %3959, 0
  %3961 = icmp slt i32 %3956, 10
  %3962 = or i1 %3960, %3961
  br i1 %3962, label %originalBB1049, label %originalBB1049alteredBB

originalBB1049:                                   ; preds = %3954, %originalBB1049alteredBB
  %3963 = load i64, i64* %29, align 8, !dbg !1753
  %3964 = load i64, i64* %20, align 8, !dbg !1753
  %3965 = icmp ult i64 %3963, %3964, !dbg !1753
  %3966 = load i32, i32* @x.17
  %3967 = load i32, i32* @y.18
  %3968 = sub i32 %3966, 1
  %3969 = mul i32 %3966, %3968
  %3970 = urem i32 %3969, 2
  %3971 = icmp eq i32 %3970, 0
  %3972 = icmp slt i32 %3967, 10
  %3973 = or i1 %3971, %3972
  br i1 %3973, label %originalBBpart21051, label %originalBB1049alteredBB

originalBBpart21051:                              ; preds = %originalBB1049
  br i1 %3965, label %3974, label %3994, !dbg !1756

3974:                                             ; preds = %originalBBpart21051
  %3975 = load i32, i32* @x.17
  %3976 = load i32, i32* @y.18
  %3977 = sub i32 %3975, 1
  %3978 = mul i32 %3975, %3977
  %3979 = urem i32 %3978, 2
  %3980 = icmp eq i32 %3979, 0
  %3981 = icmp slt i32 %3976, 10
  %3982 = or i1 %3980, %3981
  br i1 %3982, label %originalBB1053, label %originalBB1053alteredBB

originalBB1053:                                   ; preds = %3974, %originalBB1053alteredBB
  %3983 = load i8*, i8** %19, align 8, !dbg !1753
  %3984 = load i64, i64* %29, align 8, !dbg !1753
  %3985 = getelementptr inbounds i8, i8* %3983, i64 %3984, !dbg !1753
  store i8 39, i8* %3985, align 1, !dbg !1753
  %3986 = load i32, i32* @x.17
  %3987 = load i32, i32* @y.18
  %3988 = sub i32 %3986, 1
  %3989 = mul i32 %3986, %3988
  %3990 = urem i32 %3989, 2
  %3991 = icmp eq i32 %3990, 0
  %3992 = icmp slt i32 %3987, 10
  %3993 = or i1 %3991, %3992
  br i1 %3993, label %originalBBpart21055, label %originalBB1053alteredBB

originalBBpart21055:                              ; preds = %originalBB1053
  br label %3994, !dbg !1753

3994:                                             ; preds = %originalBBpart21055, %originalBBpart21051
  %3995 = load i32, i32* @x.17
  %3996 = load i32, i32* @y.18
  %3997 = sub i32 %3995, 1
  %3998 = mul i32 %3995, %3997
  %3999 = urem i32 %3998, 2
  %4000 = icmp eq i32 %3999, 0
  %4001 = icmp slt i32 %3996, 10
  %4002 = or i1 %4000, %4001
  br i1 %4002, label %originalBB1057, label %originalBB1057alteredBB

originalBB1057:                                   ; preds = %3994, %originalBB1057alteredBB
  %4003 = load i64, i64* %29, align 8, !dbg !1756
  %4004 = add i64 %4003, 1, !dbg !1756
  store i64 %4004, i64* %29, align 8, !dbg !1756
  %4005 = load i32, i32* @x.17
  %4006 = load i32, i32* @y.18
  %4007 = sub i32 %4005, 1
  %4008 = mul i32 %4005, %4007
  %4009 = urem i32 %4008, 2
  %4010 = icmp eq i32 %4009, 0
  %4011 = icmp slt i32 %4006, 10
  %4012 = or i1 %4010, %4011
  br i1 %4012, label %originalBBpart21065, label %originalBB1057alteredBB

originalBBpart21065:                              ; preds = %originalBB1057
  br label %4013, !dbg !1756

4013:                                             ; preds = %originalBBpart21065
  %4014 = load i32, i32* @x.17
  %4015 = load i32, i32* @y.18
  %4016 = sub i32 %4014, 1
  %4017 = mul i32 %4014, %4016
  %4018 = urem i32 %4017, 2
  %4019 = icmp eq i32 %4018, 0
  %4020 = icmp slt i32 %4015, 10
  %4021 = or i1 %4019, %4020
  br i1 %4021, label %originalBB1067, label %originalBB1067alteredBB

originalBB1067:                                   ; preds = %4013, %originalBB1067alteredBB
  %4022 = load i32, i32* @x.17
  %4023 = load i32, i32* @y.18
  %4024 = sub i32 %4022, 1
  %4025 = mul i32 %4022, %4024
  %4026 = urem i32 %4025, 2
  %4027 = icmp eq i32 %4026, 0
  %4028 = icmp slt i32 %4023, 10
  %4029 = or i1 %4027, %4028
  br i1 %4029, label %originalBBpart21069, label %originalBB1067alteredBB

originalBBpart21069:                              ; preds = %originalBB1067
  br label %4030, !dbg !1751

4030:                                             ; preds = %originalBBpart21069
  %4031 = load i32, i32* @x.17
  %4032 = load i32, i32* @y.18
  %4033 = sub i32 %4031, 1
  %4034 = mul i32 %4031, %4033
  %4035 = urem i32 %4034, 2
  %4036 = icmp eq i32 %4035, 0
  %4037 = icmp slt i32 %4032, 10
  %4038 = or i1 %4036, %4037
  br i1 %4038, label %originalBB1071, label %originalBB1071alteredBB

originalBB1071:                                   ; preds = %4030, %originalBB1071alteredBB
  %4039 = load i64, i64* %29, align 8, !dbg !1757
  %4040 = load i64, i64* %20, align 8, !dbg !1757
  %4041 = icmp ult i64 %4039, %4040, !dbg !1757
  %4042 = load i32, i32* @x.17
  %4043 = load i32, i32* @y.18
  %4044 = sub i32 %4042, 1
  %4045 = mul i32 %4042, %4044
  %4046 = urem i32 %4045, 2
  %4047 = icmp eq i32 %4046, 0
  %4048 = icmp slt i32 %4043, 10
  %4049 = or i1 %4047, %4048
  br i1 %4049, label %originalBBpart21073, label %originalBB1071alteredBB

originalBBpart21073:                              ; preds = %originalBB1071
  br i1 %4041, label %4050, label %4070, !dbg !1760

4050:                                             ; preds = %originalBBpart21073
  %4051 = load i32, i32* @x.17
  %4052 = load i32, i32* @y.18
  %4053 = sub i32 %4051, 1
  %4054 = mul i32 %4051, %4053
  %4055 = urem i32 %4054, 2
  %4056 = icmp eq i32 %4055, 0
  %4057 = icmp slt i32 %4052, 10
  %4058 = or i1 %4056, %4057
  br i1 %4058, label %originalBB1075, label %originalBB1075alteredBB

originalBB1075:                                   ; preds = %4050, %originalBB1075alteredBB
  %4059 = load i8*, i8** %19, align 8, !dbg !1757
  %4060 = load i64, i64* %29, align 8, !dbg !1757
  %4061 = getelementptr inbounds i8, i8* %4059, i64 %4060, !dbg !1757
  store i8 36, i8* %4061, align 1, !dbg !1757
  %4062 = load i32, i32* @x.17
  %4063 = load i32, i32* @y.18
  %4064 = sub i32 %4062, 1
  %4065 = mul i32 %4062, %4064
  %4066 = urem i32 %4065, 2
  %4067 = icmp eq i32 %4066, 0
  %4068 = icmp slt i32 %4063, 10
  %4069 = or i1 %4067, %4068
  br i1 %4069, label %originalBBpart21077, label %originalBB1075alteredBB

originalBBpart21077:                              ; preds = %originalBB1075
  br label %4070, !dbg !1757

4070:                                             ; preds = %originalBBpart21077, %originalBBpart21073
  %4071 = load i32, i32* @x.17
  %4072 = load i32, i32* @y.18
  %4073 = sub i32 %4071, 1
  %4074 = mul i32 %4071, %4073
  %4075 = urem i32 %4074, 2
  %4076 = icmp eq i32 %4075, 0
  %4077 = icmp slt i32 %4072, 10
  %4078 = or i1 %4076, %4077
  br i1 %4078, label %originalBB1079, label %originalBB1079alteredBB

originalBB1079:                                   ; preds = %4070, %originalBB1079alteredBB
  %4079 = load i64, i64* %29, align 8, !dbg !1760
  %4080 = add i64 %4079, 1, !dbg !1760
  store i64 %4080, i64* %29, align 8, !dbg !1760
  %4081 = load i32, i32* @x.17
  %4082 = load i32, i32* @y.18
  %4083 = sub i32 %4081, 1
  %4084 = mul i32 %4081, %4083
  %4085 = urem i32 %4084, 2
  %4086 = icmp eq i32 %4085, 0
  %4087 = icmp slt i32 %4082, 10
  %4088 = or i1 %4086, %4087
  br i1 %4088, label %originalBBpart21085, label %originalBB1079alteredBB

originalBBpart21085:                              ; preds = %originalBB1079
  br label %4089, !dbg !1760

4089:                                             ; preds = %originalBBpart21085
  %4090 = load i32, i32* @x.17
  %4091 = load i32, i32* @y.18
  %4092 = sub i32 %4090, 1
  %4093 = mul i32 %4090, %4092
  %4094 = urem i32 %4093, 2
  %4095 = icmp eq i32 %4094, 0
  %4096 = icmp slt i32 %4091, 10
  %4097 = or i1 %4095, %4096
  br i1 %4097, label %originalBB1087, label %originalBB1087alteredBB

originalBB1087:                                   ; preds = %4089, %originalBB1087alteredBB
  %4098 = load i32, i32* @x.17
  %4099 = load i32, i32* @y.18
  %4100 = sub i32 %4098, 1
  %4101 = mul i32 %4098, %4100
  %4102 = urem i32 %4101, 2
  %4103 = icmp eq i32 %4102, 0
  %4104 = icmp slt i32 %4099, 10
  %4105 = or i1 %4103, %4104
  br i1 %4105, label %originalBBpart21089, label %originalBB1087alteredBB

originalBBpart21089:                              ; preds = %originalBB1087
  br label %4106, !dbg !1751

4106:                                             ; preds = %originalBBpart21089
  %4107 = load i64, i64* %29, align 8, !dbg !1761
  %4108 = load i64, i64* %20, align 8, !dbg !1761
  %4109 = icmp ult i64 %4107, %4108, !dbg !1761
  br i1 %4109, label %4110, label %4130, !dbg !1764

4110:                                             ; preds = %4106
  %4111 = load i32, i32* @x.17
  %4112 = load i32, i32* @y.18
  %4113 = sub i32 %4111, 1
  %4114 = mul i32 %4111, %4113
  %4115 = urem i32 %4114, 2
  %4116 = icmp eq i32 %4115, 0
  %4117 = icmp slt i32 %4112, 10
  %4118 = or i1 %4116, %4117
  br i1 %4118, label %originalBB1091, label %originalBB1091alteredBB

originalBB1091:                                   ; preds = %4110, %originalBB1091alteredBB
  %4119 = load i8*, i8** %19, align 8, !dbg !1761
  %4120 = load i64, i64* %29, align 8, !dbg !1761
  %4121 = getelementptr inbounds i8, i8* %4119, i64 %4120, !dbg !1761
  store i8 39, i8* %4121, align 1, !dbg !1761
  %4122 = load i32, i32* @x.17
  %4123 = load i32, i32* @y.18
  %4124 = sub i32 %4122, 1
  %4125 = mul i32 %4122, %4124
  %4126 = urem i32 %4125, 2
  %4127 = icmp eq i32 %4126, 0
  %4128 = icmp slt i32 %4123, 10
  %4129 = or i1 %4127, %4128
  br i1 %4129, label %originalBBpart21093, label %originalBB1091alteredBB

originalBBpart21093:                              ; preds = %originalBB1091
  br label %4130, !dbg !1761

4130:                                             ; preds = %originalBBpart21093, %4106
  %4131 = load i32, i32* @x.17
  %4132 = load i32, i32* @y.18
  %4133 = sub i32 %4131, 1
  %4134 = mul i32 %4131, %4133
  %4135 = urem i32 %4134, 2
  %4136 = icmp eq i32 %4135, 0
  %4137 = icmp slt i32 %4132, 10
  %4138 = or i1 %4136, %4137
  br i1 %4138, label %originalBB1095, label %originalBB1095alteredBB

originalBB1095:                                   ; preds = %4130, %originalBB1095alteredBB
  %4139 = load i64, i64* %29, align 8, !dbg !1764
  %4140 = add i64 %4139, 1, !dbg !1764
  store i64 %4140, i64* %29, align 8, !dbg !1764
  %4141 = load i32, i32* @x.17
  %4142 = load i32, i32* @y.18
  %4143 = sub i32 %4141, 1
  %4144 = mul i32 %4141, %4143
  %4145 = urem i32 %4144, 2
  %4146 = icmp eq i32 %4145, 0
  %4147 = icmp slt i32 %4142, 10
  %4148 = or i1 %4146, %4147
  br i1 %4148, label %originalBBpart21107, label %originalBB1095alteredBB

originalBBpart21107:                              ; preds = %originalBB1095
  br label %4149, !dbg !1764

4149:                                             ; preds = %originalBBpart21107
  %4150 = load i32, i32* @x.17
  %4151 = load i32, i32* @y.18
  %4152 = sub i32 %4150, 1
  %4153 = mul i32 %4150, %4152
  %4154 = urem i32 %4153, 2
  %4155 = icmp eq i32 %4154, 0
  %4156 = icmp slt i32 %4151, 10
  %4157 = or i1 %4155, %4156
  br i1 %4157, label %originalBB1109, label %originalBB1109alteredBB

originalBB1109:                                   ; preds = %4149, %originalBB1109alteredBB
  store i8 1, i8* %36, align 1, !dbg !1751
  %4158 = load i32, i32* @x.17
  %4159 = load i32, i32* @y.18
  %4160 = sub i32 %4158, 1
  %4161 = mul i32 %4158, %4160
  %4162 = urem i32 %4161, 2
  %4163 = icmp eq i32 %4162, 0
  %4164 = icmp slt i32 %4159, 10
  %4165 = or i1 %4163, %4164
  br i1 %4165, label %originalBBpart21111, label %originalBB1109alteredBB

originalBBpart21111:                              ; preds = %originalBB1109
  br label %4166, !dbg !1751

4166:                                             ; preds = %originalBBpart21111, %originalBBpart21043, %originalBBpart21039
  %4167 = load i32, i32* @x.17
  %4168 = load i32, i32* @y.18
  %4169 = sub i32 %4167, 1
  %4170 = mul i32 %4167, %4169
  %4171 = urem i32 %4170, 2
  %4172 = icmp eq i32 %4171, 0
  %4173 = icmp slt i32 %4168, 10
  %4174 = or i1 %4172, %4173
  br i1 %4174, label %originalBB1113, label %originalBB1113alteredBB

originalBB1113:                                   ; preds = %4166, %originalBB1113alteredBB
  %4175 = load i32, i32* @x.17
  %4176 = load i32, i32* @y.18
  %4177 = sub i32 %4175, 1
  %4178 = mul i32 %4175, %4177
  %4179 = urem i32 %4178, 2
  %4180 = icmp eq i32 %4179, 0
  %4181 = icmp slt i32 %4176, 10
  %4182 = or i1 %4180, %4181
  br i1 %4182, label %originalBBpart21115, label %originalBB1113alteredBB

originalBBpart21115:                              ; preds = %originalBB1113
  br label %4183, !dbg !1748

4183:                                             ; preds = %originalBBpart21115
  %4184 = load i64, i64* %29, align 8, !dbg !1765
  %4185 = load i64, i64* %20, align 8, !dbg !1765
  %4186 = icmp ult i64 %4184, %4185, !dbg !1765
  br i1 %4186, label %4187, label %4207, !dbg !1768

4187:                                             ; preds = %4183
  %4188 = load i32, i32* @x.17
  %4189 = load i32, i32* @y.18
  %4190 = sub i32 %4188, 1
  %4191 = mul i32 %4188, %4190
  %4192 = urem i32 %4191, 2
  %4193 = icmp eq i32 %4192, 0
  %4194 = icmp slt i32 %4189, 10
  %4195 = or i1 %4193, %4194
  br i1 %4195, label %originalBB1117, label %originalBB1117alteredBB

originalBB1117:                                   ; preds = %4187, %originalBB1117alteredBB
  %4196 = load i8*, i8** %19, align 8, !dbg !1765
  %4197 = load i64, i64* %29, align 8, !dbg !1765
  %4198 = getelementptr inbounds i8, i8* %4196, i64 %4197, !dbg !1765
  store i8 92, i8* %4198, align 1, !dbg !1765
  %4199 = load i32, i32* @x.17
  %4200 = load i32, i32* @y.18
  %4201 = sub i32 %4199, 1
  %4202 = mul i32 %4199, %4201
  %4203 = urem i32 %4202, 2
  %4204 = icmp eq i32 %4203, 0
  %4205 = icmp slt i32 %4200, 10
  %4206 = or i1 %4204, %4205
  br i1 %4206, label %originalBBpart21119, label %originalBB1117alteredBB

originalBBpart21119:                              ; preds = %originalBB1117
  br label %4207, !dbg !1765

4207:                                             ; preds = %originalBBpart21119, %4183
  %4208 = load i32, i32* @x.17
  %4209 = load i32, i32* @y.18
  %4210 = sub i32 %4208, 1
  %4211 = mul i32 %4208, %4210
  %4212 = urem i32 %4211, 2
  %4213 = icmp eq i32 %4212, 0
  %4214 = icmp slt i32 %4209, 10
  %4215 = or i1 %4213, %4214
  br i1 %4215, label %originalBB1121, label %originalBB1121alteredBB

originalBB1121:                                   ; preds = %4207, %originalBB1121alteredBB
  %4216 = load i64, i64* %29, align 8, !dbg !1768
  %4217 = add i64 %4216, 1, !dbg !1768
  store i64 %4217, i64* %29, align 8, !dbg !1768
  %4218 = load i32, i32* @x.17
  %4219 = load i32, i32* @y.18
  %4220 = sub i32 %4218, 1
  %4221 = mul i32 %4218, %4220
  %4222 = urem i32 %4221, 2
  %4223 = icmp eq i32 %4222, 0
  %4224 = icmp slt i32 %4219, 10
  %4225 = or i1 %4223, %4224
  br i1 %4225, label %originalBBpart21131, label %originalBB1121alteredBB

originalBBpart21131:                              ; preds = %originalBB1121
  br label %4226, !dbg !1768

4226:                                             ; preds = %originalBBpart21131
  %4227 = load i32, i32* @x.17
  %4228 = load i32, i32* @y.18
  %4229 = sub i32 %4227, 1
  %4230 = mul i32 %4227, %4229
  %4231 = urem i32 %4230, 2
  %4232 = icmp eq i32 %4231, 0
  %4233 = icmp slt i32 %4228, 10
  %4234 = or i1 %4232, %4233
  br i1 %4234, label %originalBB1133, label %originalBB1133alteredBB

originalBB1133:                                   ; preds = %4226, %originalBB1133alteredBB
  %4235 = load i32, i32* @x.17
  %4236 = load i32, i32* @y.18
  %4237 = sub i32 %4235, 1
  %4238 = mul i32 %4235, %4237
  %4239 = urem i32 %4238, 2
  %4240 = icmp eq i32 %4239, 0
  %4241 = icmp slt i32 %4236, 10
  %4242 = or i1 %4240, %4241
  br i1 %4242, label %originalBBpart21135, label %originalBB1133alteredBB

originalBBpart21135:                              ; preds = %originalBB1133
  br label %4243, !dbg !1748

4243:                                             ; preds = %originalBBpart21135
  br label %4244, !dbg !1769

4244:                                             ; preds = %4243
  %4245 = load i32, i32* @x.17
  %4246 = load i32, i32* @y.18
  %4247 = sub i32 %4245, 1
  %4248 = mul i32 %4245, %4247
  %4249 = urem i32 %4248, 2
  %4250 = icmp eq i32 %4249, 0
  %4251 = icmp slt i32 %4246, 10
  %4252 = or i1 %4250, %4251
  br i1 %4252, label %originalBB1137, label %originalBB1137alteredBB

originalBB1137:                                   ; preds = %4244, %originalBB1137alteredBB
  %4253 = load i64, i64* %29, align 8, !dbg !1770
  %4254 = load i64, i64* %20, align 8, !dbg !1770
  %4255 = icmp ult i64 %4253, %4254, !dbg !1770
  %4256 = load i32, i32* @x.17
  %4257 = load i32, i32* @y.18
  %4258 = sub i32 %4256, 1
  %4259 = mul i32 %4256, %4258
  %4260 = urem i32 %4259, 2
  %4261 = icmp eq i32 %4260, 0
  %4262 = icmp slt i32 %4257, 10
  %4263 = or i1 %4261, %4262
  br i1 %4263, label %originalBBpart21139, label %originalBB1137alteredBB

originalBBpart21139:                              ; preds = %originalBB1137
  br i1 %4255, label %4264, label %4289, !dbg !1773

4264:                                             ; preds = %originalBBpart21139
  %4265 = load i32, i32* @x.17
  %4266 = load i32, i32* @y.18
  %4267 = sub i32 %4265, 1
  %4268 = mul i32 %4265, %4267
  %4269 = urem i32 %4268, 2
  %4270 = icmp eq i32 %4269, 0
  %4271 = icmp slt i32 %4266, 10
  %4272 = or i1 %4270, %4271
  br i1 %4272, label %originalBB1141, label %originalBB1141alteredBB

originalBB1141:                                   ; preds = %4264, %originalBB1141alteredBB
  %4273 = load i8, i8* %39, align 1, !dbg !1770
  %4274 = zext i8 %4273 to i32, !dbg !1770
  %4275 = ashr i32 %4274, 6, !dbg !1770
  %4276 = add nsw i32 48, %4275, !dbg !1770
  %4277 = trunc i32 %4276 to i8, !dbg !1770
  %4278 = load i8*, i8** %19, align 8, !dbg !1770
  %4279 = load i64, i64* %29, align 8, !dbg !1770
  %4280 = getelementptr inbounds i8, i8* %4278, i64 %4279, !dbg !1770
  store i8 %4277, i8* %4280, align 1, !dbg !1770
  %4281 = load i32, i32* @x.17
  %4282 = load i32, i32* @y.18
  %4283 = sub i32 %4281, 1
  %4284 = mul i32 %4281, %4283
  %4285 = urem i32 %4284, 2
  %4286 = icmp eq i32 %4285, 0
  %4287 = icmp slt i32 %4282, 10
  %4288 = or i1 %4286, %4287
  br i1 %4288, label %originalBBpart21144, label %originalBB1141alteredBB

originalBBpart21144:                              ; preds = %originalBB1141
  br label %4289, !dbg !1770

4289:                                             ; preds = %originalBBpart21144, %originalBBpart21139
  %4290 = load i32, i32* @x.17
  %4291 = load i32, i32* @y.18
  %4292 = sub i32 %4290, 1
  %4293 = mul i32 %4290, %4292
  %4294 = urem i32 %4293, 2
  %4295 = icmp eq i32 %4294, 0
  %4296 = icmp slt i32 %4291, 10
  %4297 = or i1 %4295, %4296
  br i1 %4297, label %originalBB1146, label %originalBB1146alteredBB

originalBB1146:                                   ; preds = %4289, %originalBB1146alteredBB
  %4298 = load i64, i64* %29, align 8, !dbg !1773
  %4299 = add i64 %4298, 1, !dbg !1773
  store i64 %4299, i64* %29, align 8, !dbg !1773
  %4300 = load i32, i32* @x.17
  %4301 = load i32, i32* @y.18
  %4302 = sub i32 %4300, 1
  %4303 = mul i32 %4300, %4302
  %4304 = urem i32 %4303, 2
  %4305 = icmp eq i32 %4304, 0
  %4306 = icmp slt i32 %4301, 10
  %4307 = or i1 %4305, %4306
  br i1 %4307, label %originalBBpart21148, label %originalBB1146alteredBB

originalBBpart21148:                              ; preds = %originalBB1146
  br label %4308, !dbg !1773

4308:                                             ; preds = %originalBBpart21148
  %4309 = load i32, i32* @x.17
  %4310 = load i32, i32* @y.18
  %4311 = sub i32 %4309, 1
  %4312 = mul i32 %4309, %4311
  %4313 = urem i32 %4312, 2
  %4314 = icmp eq i32 %4313, 0
  %4315 = icmp slt i32 %4310, 10
  %4316 = or i1 %4314, %4315
  br i1 %4316, label %originalBB1150, label %originalBB1150alteredBB

originalBB1150:                                   ; preds = %4308, %originalBB1150alteredBB
  %4317 = load i32, i32* @x.17
  %4318 = load i32, i32* @y.18
  %4319 = sub i32 %4317, 1
  %4320 = mul i32 %4317, %4319
  %4321 = urem i32 %4320, 2
  %4322 = icmp eq i32 %4321, 0
  %4323 = icmp slt i32 %4318, 10
  %4324 = or i1 %4322, %4323
  br i1 %4324, label %originalBBpart21152, label %originalBB1150alteredBB

originalBBpart21152:                              ; preds = %originalBB1150
  br label %4325, !dbg !1774

4325:                                             ; preds = %originalBBpart21152
  %4326 = load i32, i32* @x.17
  %4327 = load i32, i32* @y.18
  %4328 = sub i32 %4326, 1
  %4329 = mul i32 %4326, %4328
  %4330 = urem i32 %4329, 2
  %4331 = icmp eq i32 %4330, 0
  %4332 = icmp slt i32 %4327, 10
  %4333 = or i1 %4331, %4332
  br i1 %4333, label %originalBB1154, label %originalBB1154alteredBB

originalBB1154:                                   ; preds = %4325, %originalBB1154alteredBB
  %4334 = load i64, i64* %29, align 8, !dbg !1775
  %4335 = load i64, i64* %20, align 8, !dbg !1775
  %4336 = icmp ult i64 %4334, %4335, !dbg !1775
  %4337 = load i32, i32* @x.17
  %4338 = load i32, i32* @y.18
  %4339 = sub i32 %4337, 1
  %4340 = mul i32 %4337, %4339
  %4341 = urem i32 %4340, 2
  %4342 = icmp eq i32 %4341, 0
  %4343 = icmp slt i32 %4338, 10
  %4344 = or i1 %4342, %4343
  br i1 %4344, label %originalBBpart21156, label %originalBB1154alteredBB

originalBBpart21156:                              ; preds = %originalBB1154
  br i1 %4336, label %4345, label %4371, !dbg !1778

4345:                                             ; preds = %originalBBpart21156
  %4346 = load i32, i32* @x.17
  %4347 = load i32, i32* @y.18
  %4348 = sub i32 %4346, 1
  %4349 = mul i32 %4346, %4348
  %4350 = urem i32 %4349, 2
  %4351 = icmp eq i32 %4350, 0
  %4352 = icmp slt i32 %4347, 10
  %4353 = or i1 %4351, %4352
  br i1 %4353, label %originalBB1158, label %originalBB1158alteredBB

originalBB1158:                                   ; preds = %4345, %originalBB1158alteredBB
  %4354 = load i8, i8* %39, align 1, !dbg !1775
  %4355 = zext i8 %4354 to i32, !dbg !1775
  %4356 = ashr i32 %4355, 3, !dbg !1775
  %4357 = and i32 %4356, 7, !dbg !1775
  %4358 = add nsw i32 48, %4357, !dbg !1775
  %4359 = trunc i32 %4358 to i8, !dbg !1775
  %4360 = load i8*, i8** %19, align 8, !dbg !1775
  %4361 = load i64, i64* %29, align 8, !dbg !1775
  %4362 = getelementptr inbounds i8, i8* %4360, i64 %4361, !dbg !1775
  store i8 %4359, i8* %4362, align 1, !dbg !1775
  %4363 = load i32, i32* @x.17
  %4364 = load i32, i32* @y.18
  %4365 = sub i32 %4363, 1
  %4366 = mul i32 %4363, %4365
  %4367 = urem i32 %4366, 2
  %4368 = icmp eq i32 %4367, 0
  %4369 = icmp slt i32 %4364, 10
  %4370 = or i1 %4368, %4369
  br i1 %4370, label %originalBBpart21176, label %originalBB1158alteredBB

originalBBpart21176:                              ; preds = %originalBB1158
  br label %4371, !dbg !1775

4371:                                             ; preds = %originalBBpart21176, %originalBBpart21156
  %4372 = load i32, i32* @x.17
  %4373 = load i32, i32* @y.18
  %4374 = sub i32 %4372, 1
  %4375 = mul i32 %4372, %4374
  %4376 = urem i32 %4375, 2
  %4377 = icmp eq i32 %4376, 0
  %4378 = icmp slt i32 %4373, 10
  %4379 = or i1 %4377, %4378
  br i1 %4379, label %originalBB1178, label %originalBB1178alteredBB

originalBB1178:                                   ; preds = %4371, %originalBB1178alteredBB
  %4380 = load i64, i64* %29, align 8, !dbg !1778
  %4381 = add i64 %4380, 1, !dbg !1778
  store i64 %4381, i64* %29, align 8, !dbg !1778
  %4382 = load i32, i32* @x.17
  %4383 = load i32, i32* @y.18
  %4384 = sub i32 %4382, 1
  %4385 = mul i32 %4382, %4384
  %4386 = urem i32 %4385, 2
  %4387 = icmp eq i32 %4386, 0
  %4388 = icmp slt i32 %4383, 10
  %4389 = or i1 %4387, %4388
  br i1 %4389, label %originalBBpart21182, label %originalBB1178alteredBB

originalBBpart21182:                              ; preds = %originalBB1178
  br label %4390, !dbg !1778

4390:                                             ; preds = %originalBBpart21182
  %4391 = load i32, i32* @x.17
  %4392 = load i32, i32* @y.18
  %4393 = sub i32 %4391, 1
  %4394 = mul i32 %4391, %4393
  %4395 = urem i32 %4394, 2
  %4396 = icmp eq i32 %4395, 0
  %4397 = icmp slt i32 %4392, 10
  %4398 = or i1 %4396, %4397
  br i1 %4398, label %originalBB1184, label %originalBB1184alteredBB

originalBB1184:                                   ; preds = %4390, %originalBB1184alteredBB
  %4399 = load i8, i8* %39, align 1, !dbg !1779
  %4400 = zext i8 %4399 to i32, !dbg !1779
  %4401 = and i32 %4400, 7, !dbg !1780
  %4402 = add nsw i32 48, %4401, !dbg !1781
  %4403 = trunc i32 %4402 to i8, !dbg !1782
  store i8 %4403, i8* %39, align 1, !dbg !1783
  %4404 = load i32, i32* @x.17
  %4405 = load i32, i32* @y.18
  %4406 = sub i32 %4404, 1
  %4407 = mul i32 %4404, %4406
  %4408 = urem i32 %4407, 2
  %4409 = icmp eq i32 %4408, 0
  %4410 = icmp slt i32 %4405, 10
  %4411 = or i1 %4409, %4410
  br i1 %4411, label %originalBBpart21195, label %originalBB1184alteredBB

originalBBpart21195:                              ; preds = %originalBB1184
  br label %4525, !dbg !1784

4412:                                             ; preds = %originalBBpart21023, %originalBBpart21019
  %4413 = load i8, i8* %41, align 1, !dbg !1785
  %4414 = trunc i8 %4413 to i1, !dbg !1785
  br i1 %4414, label %4415, label %4508, !dbg !1787

4415:                                             ; preds = %4412
  %4416 = load i32, i32* @x.17
  %4417 = load i32, i32* @y.18
  %4418 = sub i32 %4416, 1
  %4419 = mul i32 %4416, %4418
  %4420 = urem i32 %4419, 2
  %4421 = icmp eq i32 %4420, 0
  %4422 = icmp slt i32 %4417, 10
  %4423 = or i1 %4421, %4422
  br i1 %4423, label %originalBB1197, label %originalBB1197alteredBB

originalBB1197:                                   ; preds = %4415, %originalBB1197alteredBB
  %4424 = load i32, i32* @x.17
  %4425 = load i32, i32* @y.18
  %4426 = sub i32 %4424, 1
  %4427 = mul i32 %4424, %4426
  %4428 = urem i32 %4427, 2
  %4429 = icmp eq i32 %4428, 0
  %4430 = icmp slt i32 %4425, 10
  %4431 = or i1 %4429, %4430
  br i1 %4431, label %originalBBpart21199, label %originalBB1197alteredBB

originalBBpart21199:                              ; preds = %originalBB1197
  br label %4432, !dbg !1788

4432:                                             ; preds = %originalBBpart21199
  %4433 = load i32, i32* @x.17
  %4434 = load i32, i32* @y.18
  %4435 = sub i32 %4433, 1
  %4436 = mul i32 %4433, %4435
  %4437 = urem i32 %4436, 2
  %4438 = icmp eq i32 %4437, 0
  %4439 = icmp slt i32 %4434, 10
  %4440 = or i1 %4438, %4439
  br i1 %4440, label %originalBB1201, label %originalBB1201alteredBB

originalBB1201:                                   ; preds = %4432, %originalBB1201alteredBB
  %4441 = load i64, i64* %29, align 8, !dbg !1790
  %4442 = load i64, i64* %20, align 8, !dbg !1790
  %4443 = icmp ult i64 %4441, %4442, !dbg !1790
  %4444 = load i32, i32* @x.17
  %4445 = load i32, i32* @y.18
  %4446 = sub i32 %4444, 1
  %4447 = mul i32 %4444, %4446
  %4448 = urem i32 %4447, 2
  %4449 = icmp eq i32 %4448, 0
  %4450 = icmp slt i32 %4445, 10
  %4451 = or i1 %4449, %4450
  br i1 %4451, label %originalBBpart21203, label %originalBB1201alteredBB

originalBBpart21203:                              ; preds = %originalBB1201
  br i1 %4443, label %4452, label %4472, !dbg !1793

4452:                                             ; preds = %originalBBpart21203
  %4453 = load i32, i32* @x.17
  %4454 = load i32, i32* @y.18
  %4455 = sub i32 %4453, 1
  %4456 = mul i32 %4453, %4455
  %4457 = urem i32 %4456, 2
  %4458 = icmp eq i32 %4457, 0
  %4459 = icmp slt i32 %4454, 10
  %4460 = or i1 %4458, %4459
  br i1 %4460, label %originalBB1205, label %originalBB1205alteredBB

originalBB1205:                                   ; preds = %4452, %originalBB1205alteredBB
  %4461 = load i8*, i8** %19, align 8, !dbg !1790
  %4462 = load i64, i64* %29, align 8, !dbg !1790
  %4463 = getelementptr inbounds i8, i8* %4461, i64 %4462, !dbg !1790
  store i8 92, i8* %4463, align 1, !dbg !1790
  %4464 = load i32, i32* @x.17
  %4465 = load i32, i32* @y.18
  %4466 = sub i32 %4464, 1
  %4467 = mul i32 %4464, %4466
  %4468 = urem i32 %4467, 2
  %4469 = icmp eq i32 %4468, 0
  %4470 = icmp slt i32 %4465, 10
  %4471 = or i1 %4469, %4470
  br i1 %4471, label %originalBBpart21207, label %originalBB1205alteredBB

originalBBpart21207:                              ; preds = %originalBB1205
  br label %4472, !dbg !1790

4472:                                             ; preds = %originalBBpart21207, %originalBBpart21203
  %4473 = load i32, i32* @x.17
  %4474 = load i32, i32* @y.18
  %4475 = sub i32 %4473, 1
  %4476 = mul i32 %4473, %4475
  %4477 = urem i32 %4476, 2
  %4478 = icmp eq i32 %4477, 0
  %4479 = icmp slt i32 %4474, 10
  %4480 = or i1 %4478, %4479
  br i1 %4480, label %originalBB1209, label %originalBB1209alteredBB

originalBB1209:                                   ; preds = %4472, %originalBB1209alteredBB
  %4481 = load i64, i64* %29, align 8, !dbg !1793
  %4482 = add i64 %4481, 1, !dbg !1793
  store i64 %4482, i64* %29, align 8, !dbg !1793
  %4483 = load i32, i32* @x.17
  %4484 = load i32, i32* @y.18
  %4485 = sub i32 %4483, 1
  %4486 = mul i32 %4483, %4485
  %4487 = urem i32 %4486, 2
  %4488 = icmp eq i32 %4487, 0
  %4489 = icmp slt i32 %4484, 10
  %4490 = or i1 %4488, %4489
  br i1 %4490, label %originalBBpart21217, label %originalBB1209alteredBB

originalBBpart21217:                              ; preds = %originalBB1209
  br label %4491, !dbg !1793

4491:                                             ; preds = %originalBBpart21217
  %4492 = load i32, i32* @x.17
  %4493 = load i32, i32* @y.18
  %4494 = sub i32 %4492, 1
  %4495 = mul i32 %4492, %4494
  %4496 = urem i32 %4495, 2
  %4497 = icmp eq i32 %4496, 0
  %4498 = icmp slt i32 %4493, 10
  %4499 = or i1 %4497, %4498
  br i1 %4499, label %originalBB1219, label %originalBB1219alteredBB

originalBB1219:                                   ; preds = %4491, %originalBB1219alteredBB
  store i8 0, i8* %41, align 1, !dbg !1794
  %4500 = load i32, i32* @x.17
  %4501 = load i32, i32* @y.18
  %4502 = sub i32 %4500, 1
  %4503 = mul i32 %4500, %4502
  %4504 = urem i32 %4503, 2
  %4505 = icmp eq i32 %4504, 0
  %4506 = icmp slt i32 %4501, 10
  %4507 = or i1 %4505, %4506
  br i1 %4507, label %originalBBpart21221, label %originalBB1219alteredBB

originalBBpart21221:                              ; preds = %originalBB1219
  br label %4508, !dbg !1795

4508:                                             ; preds = %originalBBpart21221, %4412
  %4509 = load i32, i32* @x.17
  %4510 = load i32, i32* @y.18
  %4511 = sub i32 %4509, 1
  %4512 = mul i32 %4509, %4511
  %4513 = urem i32 %4512, 2
  %4514 = icmp eq i32 %4513, 0
  %4515 = icmp slt i32 %4510, 10
  %4516 = or i1 %4514, %4515
  br i1 %4516, label %originalBB1223, label %originalBB1223alteredBB

originalBB1223:                                   ; preds = %4508, %originalBB1223alteredBB
  %4517 = load i32, i32* @x.17
  %4518 = load i32, i32* @y.18
  %4519 = sub i32 %4517, 1
  %4520 = mul i32 %4517, %4519
  %4521 = urem i32 %4520, 2
  %4522 = icmp eq i32 %4521, 0
  %4523 = icmp slt i32 %4518, 10
  %4524 = or i1 %4522, %4523
  br i1 %4524, label %originalBBpart21225, label %originalBB1223alteredBB

originalBBpart21225:                              ; preds = %originalBB1223
  br label %4525

4525:                                             ; preds = %originalBBpart21225, %originalBBpart21195
  %4526 = load i32, i32* @x.17
  %4527 = load i32, i32* @y.18
  %4528 = sub i32 %4526, 1
  %4529 = mul i32 %4526, %4528
  %4530 = urem i32 %4529, 2
  %4531 = icmp eq i32 %4530, 0
  %4532 = icmp slt i32 %4527, 10
  %4533 = or i1 %4531, %4532
  br i1 %4533, label %originalBB1227, label %originalBB1227alteredBB

originalBB1227:                                   ; preds = %4525, %originalBB1227alteredBB
  %4534 = load i64, i64* %50, align 8, !dbg !1796
  %4535 = load i64, i64* %28, align 8, !dbg !1798
  %4536 = add i64 %4535, 1, !dbg !1799
  %4537 = icmp ule i64 %4534, %4536, !dbg !1800
  %4538 = load i32, i32* @x.17
  %4539 = load i32, i32* @y.18
  %4540 = sub i32 %4538, 1
  %4541 = mul i32 %4538, %4540
  %4542 = urem i32 %4541, 2
  %4543 = icmp eq i32 %4542, 0
  %4544 = icmp slt i32 %4539, 10
  %4545 = or i1 %4543, %4544
  br i1 %4545, label %originalBBpart21236, label %originalBB1227alteredBB

originalBBpart21236:                              ; preds = %originalBB1227
  br i1 %4537, label %4546, label %4563, !dbg !1801

4546:                                             ; preds = %originalBBpart21236
  %4547 = load i32, i32* @x.17
  %4548 = load i32, i32* @y.18
  %4549 = sub i32 %4547, 1
  %4550 = mul i32 %4547, %4549
  %4551 = urem i32 %4550, 2
  %4552 = icmp eq i32 %4551, 0
  %4553 = icmp slt i32 %4548, 10
  %4554 = or i1 %4552, %4553
  br i1 %4554, label %originalBB1238, label %originalBB1238alteredBB

originalBB1238:                                   ; preds = %4546, %originalBB1238alteredBB
  %4555 = load i32, i32* @x.17
  %4556 = load i32, i32* @y.18
  %4557 = sub i32 %4555, 1
  %4558 = mul i32 %4555, %4557
  %4559 = urem i32 %4558, 2
  %4560 = icmp eq i32 %4559, 0
  %4561 = icmp slt i32 %4556, 10
  %4562 = or i1 %4560, %4561
  br i1 %4562, label %originalBBpart21240, label %originalBB1238alteredBB

originalBBpart21240:                              ; preds = %originalBB1238
  br label %4871, !dbg !1802

4563:                                             ; preds = %originalBBpart21236
  %4564 = load i32, i32* @x.17
  %4565 = load i32, i32* @y.18
  %4566 = sub i32 %4564, 1
  %4567 = mul i32 %4564, %4566
  %4568 = urem i32 %4567, 2
  %4569 = icmp eq i32 %4568, 0
  %4570 = icmp slt i32 %4565, 10
  %4571 = or i1 %4569, %4570
  br i1 %4571, label %originalBB1242, label %originalBB1242alteredBB

originalBB1242:                                   ; preds = %4563, %originalBB1242alteredBB
  %4572 = load i32, i32* @x.17
  %4573 = load i32, i32* @y.18
  %4574 = sub i32 %4572, 1
  %4575 = mul i32 %4572, %4574
  %4576 = urem i32 %4575, 2
  %4577 = icmp eq i32 %4576, 0
  %4578 = icmp slt i32 %4573, 10
  %4579 = or i1 %4577, %4578
  br i1 %4579, label %originalBBpart21244, label %originalBB1242alteredBB

originalBBpart21244:                              ; preds = %originalBB1242
  br label %4580, !dbg !1803

4580:                                             ; preds = %originalBBpart21244
  %4581 = load i32, i32* @x.17
  %4582 = load i32, i32* @y.18
  %4583 = sub i32 %4581, 1
  %4584 = mul i32 %4581, %4583
  %4585 = urem i32 %4584, 2
  %4586 = icmp eq i32 %4585, 0
  %4587 = icmp slt i32 %4582, 10
  %4588 = or i1 %4586, %4587
  br i1 %4588, label %originalBB1246, label %originalBB1246alteredBB

originalBB1246:                                   ; preds = %4580, %originalBB1246alteredBB
  %4589 = load i8, i8* %36, align 1, !dbg !1804
  %4590 = trunc i8 %4589 to i1, !dbg !1804
  %4591 = load i32, i32* @x.17
  %4592 = load i32, i32* @y.18
  %4593 = sub i32 %4591, 1
  %4594 = mul i32 %4591, %4593
  %4595 = urem i32 %4594, 2
  %4596 = icmp eq i32 %4595, 0
  %4597 = icmp slt i32 %4592, 10
  %4598 = or i1 %4596, %4597
  br i1 %4598, label %originalBBpart21248, label %originalBB1246alteredBB

originalBBpart21248:                              ; preds = %originalBB1246
  br i1 %4590, label %4599, label %4771, !dbg !1804

4599:                                             ; preds = %originalBBpart21248
  %4600 = load i32, i32* @x.17
  %4601 = load i32, i32* @y.18
  %4602 = sub i32 %4600, 1
  %4603 = mul i32 %4600, %4602
  %4604 = urem i32 %4603, 2
  %4605 = icmp eq i32 %4604, 0
  %4606 = icmp slt i32 %4601, 10
  %4607 = or i1 %4605, %4606
  br i1 %4607, label %originalBB1250, label %originalBB1250alteredBB

originalBB1250:                                   ; preds = %4599, %originalBB1250alteredBB
  %4608 = load i8, i8* %42, align 1, !dbg !1804
  %4609 = trunc i8 %4608 to i1, !dbg !1804
  %4610 = load i32, i32* @x.17
  %4611 = load i32, i32* @y.18
  %4612 = sub i32 %4610, 1
  %4613 = mul i32 %4610, %4612
  %4614 = urem i32 %4613, 2
  %4615 = icmp eq i32 %4614, 0
  %4616 = icmp slt i32 %4611, 10
  %4617 = or i1 %4615, %4616
  br i1 %4617, label %originalBBpart21252, label %originalBB1250alteredBB

originalBBpart21252:                              ; preds = %originalBB1250
  br i1 %4609, label %4771, label %4618, !dbg !1807

4618:                                             ; preds = %originalBBpart21252
  %4619 = load i32, i32* @x.17
  %4620 = load i32, i32* @y.18
  %4621 = sub i32 %4619, 1
  %4622 = mul i32 %4619, %4621
  %4623 = urem i32 %4622, 2
  %4624 = icmp eq i32 %4623, 0
  %4625 = icmp slt i32 %4620, 10
  %4626 = or i1 %4624, %4625
  br i1 %4626, label %originalBB1254, label %originalBB1254alteredBB

originalBB1254:                                   ; preds = %4618, %originalBB1254alteredBB
  %4627 = load i32, i32* @x.17
  %4628 = load i32, i32* @y.18
  %4629 = sub i32 %4627, 1
  %4630 = mul i32 %4627, %4629
  %4631 = urem i32 %4630, 2
  %4632 = icmp eq i32 %4631, 0
  %4633 = icmp slt i32 %4628, 10
  %4634 = or i1 %4632, %4633
  br i1 %4634, label %originalBBpart21256, label %originalBB1254alteredBB

originalBBpart21256:                              ; preds = %originalBB1254
  br label %4635, !dbg !1808

4635:                                             ; preds = %originalBBpart21256
  %4636 = load i32, i32* @x.17
  %4637 = load i32, i32* @y.18
  %4638 = sub i32 %4636, 1
  %4639 = mul i32 %4636, %4638
  %4640 = urem i32 %4639, 2
  %4641 = icmp eq i32 %4640, 0
  %4642 = icmp slt i32 %4637, 10
  %4643 = or i1 %4641, %4642
  br i1 %4643, label %originalBB1258, label %originalBB1258alteredBB

originalBB1258:                                   ; preds = %4635, %originalBB1258alteredBB
  %4644 = load i64, i64* %29, align 8, !dbg !1810
  %4645 = load i64, i64* %20, align 8, !dbg !1810
  %4646 = icmp ult i64 %4644, %4645, !dbg !1810
  %4647 = load i32, i32* @x.17
  %4648 = load i32, i32* @y.18
  %4649 = sub i32 %4647, 1
  %4650 = mul i32 %4647, %4649
  %4651 = urem i32 %4650, 2
  %4652 = icmp eq i32 %4651, 0
  %4653 = icmp slt i32 %4648, 10
  %4654 = or i1 %4652, %4653
  br i1 %4654, label %originalBBpart21260, label %originalBB1258alteredBB

originalBBpart21260:                              ; preds = %originalBB1258
  br i1 %4646, label %4655, label %4659, !dbg !1813

4655:                                             ; preds = %originalBBpart21260
  %4656 = load i8*, i8** %19, align 8, !dbg !1810
  %4657 = load i64, i64* %29, align 8, !dbg !1810
  %4658 = getelementptr inbounds i8, i8* %4656, i64 %4657, !dbg !1810
  store i8 39, i8* %4658, align 1, !dbg !1810
  br label %4659, !dbg !1810

4659:                                             ; preds = %4655, %originalBBpart21260
  %4660 = load i32, i32* @x.17
  %4661 = load i32, i32* @y.18
  %4662 = sub i32 %4660, 1
  %4663 = mul i32 %4660, %4662
  %4664 = urem i32 %4663, 2
  %4665 = icmp eq i32 %4664, 0
  %4666 = icmp slt i32 %4661, 10
  %4667 = or i1 %4665, %4666
  br i1 %4667, label %originalBB1262, label %originalBB1262alteredBB

originalBB1262:                                   ; preds = %4659, %originalBB1262alteredBB
  %4668 = load i64, i64* %29, align 8, !dbg !1813
  %4669 = add i64 %4668, 1, !dbg !1813
  store i64 %4669, i64* %29, align 8, !dbg !1813
  %4670 = load i32, i32* @x.17
  %4671 = load i32, i32* @y.18
  %4672 = sub i32 %4670, 1
  %4673 = mul i32 %4670, %4672
  %4674 = urem i32 %4673, 2
  %4675 = icmp eq i32 %4674, 0
  %4676 = icmp slt i32 %4671, 10
  %4677 = or i1 %4675, %4676
  br i1 %4677, label %originalBBpart21271, label %originalBB1262alteredBB

originalBBpart21271:                              ; preds = %originalBB1262
  br label %4678, !dbg !1813

4678:                                             ; preds = %originalBBpart21271
  %4679 = load i32, i32* @x.17
  %4680 = load i32, i32* @y.18
  %4681 = sub i32 %4679, 1
  %4682 = mul i32 %4679, %4681
  %4683 = urem i32 %4682, 2
  %4684 = icmp eq i32 %4683, 0
  %4685 = icmp slt i32 %4680, 10
  %4686 = or i1 %4684, %4685
  br i1 %4686, label %originalBB1273, label %originalBB1273alteredBB

originalBB1273:                                   ; preds = %4678, %originalBB1273alteredBB
  %4687 = load i32, i32* @x.17
  %4688 = load i32, i32* @y.18
  %4689 = sub i32 %4687, 1
  %4690 = mul i32 %4687, %4689
  %4691 = urem i32 %4690, 2
  %4692 = icmp eq i32 %4691, 0
  %4693 = icmp slt i32 %4688, 10
  %4694 = or i1 %4692, %4693
  br i1 %4694, label %originalBBpart21275, label %originalBB1273alteredBB

originalBBpart21275:                              ; preds = %originalBB1273
  br label %4695, !dbg !1808

4695:                                             ; preds = %originalBBpart21275
  %4696 = load i32, i32* @x.17
  %4697 = load i32, i32* @y.18
  %4698 = sub i32 %4696, 1
  %4699 = mul i32 %4696, %4698
  %4700 = urem i32 %4699, 2
  %4701 = icmp eq i32 %4700, 0
  %4702 = icmp slt i32 %4697, 10
  %4703 = or i1 %4701, %4702
  br i1 %4703, label %originalBB1277, label %originalBB1277alteredBB

originalBB1277:                                   ; preds = %4695, %originalBB1277alteredBB
  %4704 = load i64, i64* %29, align 8, !dbg !1814
  %4705 = load i64, i64* %20, align 8, !dbg !1814
  %4706 = icmp ult i64 %4704, %4705, !dbg !1814
  %4707 = load i32, i32* @x.17
  %4708 = load i32, i32* @y.18
  %4709 = sub i32 %4707, 1
  %4710 = mul i32 %4707, %4709
  %4711 = urem i32 %4710, 2
  %4712 = icmp eq i32 %4711, 0
  %4713 = icmp slt i32 %4708, 10
  %4714 = or i1 %4712, %4713
  br i1 %4714, label %originalBBpart21279, label %originalBB1277alteredBB

originalBBpart21279:                              ; preds = %originalBB1277
  br i1 %4706, label %4715, label %4735, !dbg !1817

4715:                                             ; preds = %originalBBpart21279
  %4716 = load i32, i32* @x.17
  %4717 = load i32, i32* @y.18
  %4718 = sub i32 %4716, 1
  %4719 = mul i32 %4716, %4718
  %4720 = urem i32 %4719, 2
  %4721 = icmp eq i32 %4720, 0
  %4722 = icmp slt i32 %4717, 10
  %4723 = or i1 %4721, %4722
  br i1 %4723, label %originalBB1281, label %originalBB1281alteredBB

originalBB1281:                                   ; preds = %4715, %originalBB1281alteredBB
  %4724 = load i8*, i8** %19, align 8, !dbg !1814
  %4725 = load i64, i64* %29, align 8, !dbg !1814
  %4726 = getelementptr inbounds i8, i8* %4724, i64 %4725, !dbg !1814
  store i8 39, i8* %4726, align 1, !dbg !1814
  %4727 = load i32, i32* @x.17
  %4728 = load i32, i32* @y.18
  %4729 = sub i32 %4727, 1
  %4730 = mul i32 %4727, %4729
  %4731 = urem i32 %4730, 2
  %4732 = icmp eq i32 %4731, 0
  %4733 = icmp slt i32 %4728, 10
  %4734 = or i1 %4732, %4733
  br i1 %4734, label %originalBBpart21283, label %originalBB1281alteredBB

originalBBpart21283:                              ; preds = %originalBB1281
  br label %4735, !dbg !1814

4735:                                             ; preds = %originalBBpart21283, %originalBBpart21279
  %4736 = load i32, i32* @x.17
  %4737 = load i32, i32* @y.18
  %4738 = sub i32 %4736, 1
  %4739 = mul i32 %4736, %4738
  %4740 = urem i32 %4739, 2
  %4741 = icmp eq i32 %4740, 0
  %4742 = icmp slt i32 %4737, 10
  %4743 = or i1 %4741, %4742
  br i1 %4743, label %originalBB1285, label %originalBB1285alteredBB

originalBB1285:                                   ; preds = %4735, %originalBB1285alteredBB
  %4744 = load i64, i64* %29, align 8, !dbg !1817
  %4745 = add i64 %4744, 1, !dbg !1817
  store i64 %4745, i64* %29, align 8, !dbg !1817
  %4746 = load i32, i32* @x.17
  %4747 = load i32, i32* @y.18
  %4748 = sub i32 %4746, 1
  %4749 = mul i32 %4746, %4748
  %4750 = urem i32 %4749, 2
  %4751 = icmp eq i32 %4750, 0
  %4752 = icmp slt i32 %4747, 10
  %4753 = or i1 %4751, %4752
  br i1 %4753, label %originalBBpart21292, label %originalBB1285alteredBB

originalBBpart21292:                              ; preds = %originalBB1285
  br label %4754, !dbg !1817

4754:                                             ; preds = %originalBBpart21292
  %4755 = load i32, i32* @x.17
  %4756 = load i32, i32* @y.18
  %4757 = sub i32 %4755, 1
  %4758 = mul i32 %4755, %4757
  %4759 = urem i32 %4758, 2
  %4760 = icmp eq i32 %4759, 0
  %4761 = icmp slt i32 %4756, 10
  %4762 = or i1 %4760, %4761
  br i1 %4762, label %originalBB1294, label %originalBB1294alteredBB

originalBB1294:                                   ; preds = %4754, %originalBB1294alteredBB
  store i8 0, i8* %36, align 1, !dbg !1808
  %4763 = load i32, i32* @x.17
  %4764 = load i32, i32* @y.18
  %4765 = sub i32 %4763, 1
  %4766 = mul i32 %4763, %4765
  %4767 = urem i32 %4766, 2
  %4768 = icmp eq i32 %4767, 0
  %4769 = icmp slt i32 %4764, 10
  %4770 = or i1 %4768, %4769
  br i1 %4770, label %originalBBpart21296, label %originalBB1294alteredBB

originalBBpart21296:                              ; preds = %originalBB1294
  br label %4771, !dbg !1808

4771:                                             ; preds = %originalBBpart21296, %originalBBpart21252, %originalBBpart21248
  br label %4772, !dbg !1807

4772:                                             ; preds = %4771
  %4773 = load i32, i32* @x.17
  %4774 = load i32, i32* @y.18
  %4775 = sub i32 %4773, 1
  %4776 = mul i32 %4773, %4775
  %4777 = urem i32 %4776, 2
  %4778 = icmp eq i32 %4777, 0
  %4779 = icmp slt i32 %4774, 10
  %4780 = or i1 %4778, %4779
  br i1 %4780, label %originalBB1298, label %originalBB1298alteredBB

originalBB1298:                                   ; preds = %4772, %originalBB1298alteredBB
  %4781 = load i32, i32* @x.17
  %4782 = load i32, i32* @y.18
  %4783 = sub i32 %4781, 1
  %4784 = mul i32 %4781, %4783
  %4785 = urem i32 %4784, 2
  %4786 = icmp eq i32 %4785, 0
  %4787 = icmp slt i32 %4782, 10
  %4788 = or i1 %4786, %4787
  br i1 %4788, label %originalBBpart21300, label %originalBB1298alteredBB

originalBBpart21300:                              ; preds = %originalBB1298
  br label %4789, !dbg !1818

4789:                                             ; preds = %originalBBpart21300
  %4790 = load i32, i32* @x.17
  %4791 = load i32, i32* @y.18
  %4792 = sub i32 %4790, 1
  %4793 = mul i32 %4790, %4792
  %4794 = urem i32 %4793, 2
  %4795 = icmp eq i32 %4794, 0
  %4796 = icmp slt i32 %4791, 10
  %4797 = or i1 %4795, %4796
  br i1 %4797, label %originalBB1302, label %originalBB1302alteredBB

originalBB1302:                                   ; preds = %4789, %originalBB1302alteredBB
  %4798 = load i64, i64* %29, align 8, !dbg !1819
  %4799 = load i64, i64* %20, align 8, !dbg !1819
  %4800 = icmp ult i64 %4798, %4799, !dbg !1819
  %4801 = load i32, i32* @x.17
  %4802 = load i32, i32* @y.18
  %4803 = sub i32 %4801, 1
  %4804 = mul i32 %4801, %4803
  %4805 = urem i32 %4804, 2
  %4806 = icmp eq i32 %4805, 0
  %4807 = icmp slt i32 %4802, 10
  %4808 = or i1 %4806, %4807
  br i1 %4808, label %originalBBpart21304, label %originalBB1302alteredBB

originalBBpart21304:                              ; preds = %originalBB1302
  br i1 %4800, label %4809, label %4830, !dbg !1822

4809:                                             ; preds = %originalBBpart21304
  %4810 = load i32, i32* @x.17
  %4811 = load i32, i32* @y.18
  %4812 = sub i32 %4810, 1
  %4813 = mul i32 %4810, %4812
  %4814 = urem i32 %4813, 2
  %4815 = icmp eq i32 %4814, 0
  %4816 = icmp slt i32 %4811, 10
  %4817 = or i1 %4815, %4816
  br i1 %4817, label %originalBB1306, label %originalBB1306alteredBB

originalBB1306:                                   ; preds = %4809, %originalBB1306alteredBB
  %4818 = load i8, i8* %39, align 1, !dbg !1819
  %4819 = load i8*, i8** %19, align 8, !dbg !1819
  %4820 = load i64, i64* %29, align 8, !dbg !1819
  %4821 = getelementptr inbounds i8, i8* %4819, i64 %4820, !dbg !1819
  store i8 %4818, i8* %4821, align 1, !dbg !1819
  %4822 = load i32, i32* @x.17
  %4823 = load i32, i32* @y.18
  %4824 = sub i32 %4822, 1
  %4825 = mul i32 %4822, %4824
  %4826 = urem i32 %4825, 2
  %4827 = icmp eq i32 %4826, 0
  %4828 = icmp slt i32 %4823, 10
  %4829 = or i1 %4827, %4828
  br i1 %4829, label %originalBBpart21308, label %originalBB1306alteredBB

originalBBpart21308:                              ; preds = %originalBB1306
  br label %4830, !dbg !1819

4830:                                             ; preds = %originalBBpart21308, %originalBBpart21304
  %4831 = load i32, i32* @x.17
  %4832 = load i32, i32* @y.18
  %4833 = sub i32 %4831, 1
  %4834 = mul i32 %4831, %4833
  %4835 = urem i32 %4834, 2
  %4836 = icmp eq i32 %4835, 0
  %4837 = icmp slt i32 %4832, 10
  %4838 = or i1 %4836, %4837
  br i1 %4838, label %originalBB1310, label %originalBB1310alteredBB

originalBB1310:                                   ; preds = %4830, %originalBB1310alteredBB
  %4839 = load i64, i64* %29, align 8, !dbg !1822
  %4840 = add i64 %4839, 1, !dbg !1822
  store i64 %4840, i64* %29, align 8, !dbg !1822
  %4841 = load i32, i32* @x.17
  %4842 = load i32, i32* @y.18
  %4843 = sub i32 %4841, 1
  %4844 = mul i32 %4841, %4843
  %4845 = urem i32 %4844, 2
  %4846 = icmp eq i32 %4845, 0
  %4847 = icmp slt i32 %4842, 10
  %4848 = or i1 %4846, %4847
  br i1 %4848, label %originalBBpart21314, label %originalBB1310alteredBB

originalBBpart21314:                              ; preds = %originalBB1310
  br label %4849, !dbg !1822

4849:                                             ; preds = %originalBBpart21314
  %4850 = load i32, i32* @x.17
  %4851 = load i32, i32* @y.18
  %4852 = sub i32 %4850, 1
  %4853 = mul i32 %4850, %4852
  %4854 = urem i32 %4853, 2
  %4855 = icmp eq i32 %4854, 0
  %4856 = icmp slt i32 %4851, 10
  %4857 = or i1 %4855, %4856
  br i1 %4857, label %originalBB1316, label %originalBB1316alteredBB

originalBB1316:                                   ; preds = %4849, %originalBB1316alteredBB
  %4858 = load i8*, i8** %21, align 8, !dbg !1823
  %4859 = load i64, i64* %28, align 8, !dbg !1824
  %4860 = add i64 %4859, 1, !dbg !1824
  store i64 %4860, i64* %28, align 8, !dbg !1824
  %4861 = getelementptr inbounds i8, i8* %4858, i64 %4860, !dbg !1823
  %4862 = load i8, i8* %4861, align 1, !dbg !1823
  store i8 %4862, i8* %39, align 1, !dbg !1825
  %4863 = load i32, i32* @x.17
  %4864 = load i32, i32* @y.18
  %4865 = sub i32 %4863, 1
  %4866 = mul i32 %4863, %4865
  %4867 = urem i32 %4866, 2
  %4868 = icmp eq i32 %4867, 0
  %4869 = icmp slt i32 %4864, 10
  %4870 = or i1 %4868, %4869
  br i1 %4870, label %originalBBpart21326, label %originalBB1316alteredBB

originalBBpart21326:                              ; preds = %originalBB1316
  br label %3808, !dbg !1826, !llvm.loop !1827

4871:                                             ; preds = %originalBBpart21240
  br label %5446, !dbg !1830

4872:                                             ; preds = %originalBBpart21015, %originalBBpart21011
  %4873 = load i32, i32* @x.17
  %4874 = load i32, i32* @y.18
  %4875 = sub i32 %4873, 1
  %4876 = mul i32 %4873, %4875
  %4877 = urem i32 %4876, 2
  %4878 = icmp eq i32 %4877, 0
  %4879 = icmp slt i32 %4874, 10
  %4880 = or i1 %4878, %4879
  br i1 %4880, label %originalBB1328, label %originalBB1328alteredBB

originalBB1328:                                   ; preds = %4872, %originalBB1328alteredBB
  %4881 = load i32, i32* @x.17
  %4882 = load i32, i32* @y.18
  %4883 = sub i32 %4881, 1
  %4884 = mul i32 %4881, %4883
  %4885 = urem i32 %4884, 2
  %4886 = icmp eq i32 %4885, 0
  %4887 = icmp slt i32 %4882, 10
  %4888 = or i1 %4886, %4887
  br i1 %4888, label %originalBBpart21330, label %originalBB1328alteredBB

originalBBpart21330:                              ; preds = %originalBB1328
  br label %4889, !dbg !1831

4889:                                             ; preds = %originalBBpart21330, %originalBBpart2820, %originalBBpart2816, %2825, %originalBBpart2707, %originalBBpart2695, %originalBBpart2679, %originalBBpart2591, %1700
  %4890 = load i32, i32* @x.17
  %4891 = load i32, i32* @y.18
  %4892 = sub i32 %4890, 1
  %4893 = mul i32 %4890, %4892
  %4894 = urem i32 %4893, 2
  %4895 = icmp eq i32 %4894, 0
  %4896 = icmp slt i32 %4891, 10
  %4897 = or i1 %4895, %4896
  br i1 %4897, label %originalBB1332, label %originalBB1332alteredBB

originalBB1332:                                   ; preds = %4889, %originalBB1332alteredBB
  %4898 = load i8, i8* %33, align 1, !dbg !1832
  %4899 = trunc i8 %4898 to i1, !dbg !1832
  %4900 = load i32, i32* @x.17
  %4901 = load i32, i32* @y.18
  %4902 = sub i32 %4900, 1
  %4903 = mul i32 %4900, %4902
  %4904 = urem i32 %4903, 2
  %4905 = icmp eq i32 %4904, 0
  %4906 = icmp slt i32 %4901, 10
  %4907 = or i1 %4905, %4906
  br i1 %4907, label %originalBBpart21334, label %originalBB1332alteredBB

originalBBpart21334:                              ; preds = %originalBB1332
  br i1 %4899, label %4908, label %4927, !dbg !1834

4908:                                             ; preds = %originalBBpart21334
  %4909 = load i32, i32* @x.17
  %4910 = load i32, i32* @y.18
  %4911 = sub i32 %4909, 1
  %4912 = mul i32 %4909, %4911
  %4913 = urem i32 %4912, 2
  %4914 = icmp eq i32 %4913, 0
  %4915 = icmp slt i32 %4910, 10
  %4916 = or i1 %4914, %4915
  br i1 %4916, label %originalBB1336, label %originalBB1336alteredBB

originalBB1336:                                   ; preds = %4908, %originalBB1336alteredBB
  %4917 = load i32, i32* %23, align 4, !dbg !1835
  %4918 = icmp ne i32 %4917, 2, !dbg !1836
  %4919 = load i32, i32* @x.17
  %4920 = load i32, i32* @y.18
  %4921 = sub i32 %4919, 1
  %4922 = mul i32 %4919, %4921
  %4923 = urem i32 %4922, 2
  %4924 = icmp eq i32 %4923, 0
  %4925 = icmp slt i32 %4920, 10
  %4926 = or i1 %4924, %4925
  br i1 %4926, label %originalBBpart21338, label %originalBB1336alteredBB

originalBBpart21338:                              ; preds = %originalBB1336
  br i1 %4918, label %4946, label %4927, !dbg !1837

4927:                                             ; preds = %originalBBpart21338, %originalBBpart21334
  %4928 = load i32, i32* @x.17
  %4929 = load i32, i32* @y.18
  %4930 = sub i32 %4928, 1
  %4931 = mul i32 %4928, %4930
  %4932 = urem i32 %4931, 2
  %4933 = icmp eq i32 %4932, 0
  %4934 = icmp slt i32 %4929, 10
  %4935 = or i1 %4933, %4934
  br i1 %4935, label %originalBB1340, label %originalBB1340alteredBB

originalBB1340:                                   ; preds = %4927, %originalBB1340alteredBB
  %4936 = load i8, i8* %35, align 1, !dbg !1838
  %4937 = trunc i8 %4936 to i1, !dbg !1838
  %4938 = load i32, i32* @x.17
  %4939 = load i32, i32* @y.18
  %4940 = sub i32 %4938, 1
  %4941 = mul i32 %4938, %4940
  %4942 = urem i32 %4941, 2
  %4943 = icmp eq i32 %4942, 0
  %4944 = icmp slt i32 %4939, 10
  %4945 = or i1 %4943, %4944
  br i1 %4945, label %originalBBpart21342, label %originalBB1340alteredBB

originalBBpart21342:                              ; preds = %originalBB1340
  br i1 %4937, label %4946, label %4995, !dbg !1839

4946:                                             ; preds = %originalBBpart21342, %originalBBpart21338
  %4947 = load i32, i32* @x.17
  %4948 = load i32, i32* @y.18
  %4949 = sub i32 %4947, 1
  %4950 = mul i32 %4947, %4949
  %4951 = urem i32 %4950, 2
  %4952 = icmp eq i32 %4951, 0
  %4953 = icmp slt i32 %4948, 10
  %4954 = or i1 %4952, %4953
  br i1 %4954, label %originalBB1344, label %originalBB1344alteredBB

originalBB1344:                                   ; preds = %4946, %originalBB1344alteredBB
  %4955 = load i32*, i32** %25, align 8, !dbg !1840
  %4956 = icmp ne i32* %4955, null, !dbg !1840
  %4957 = load i32, i32* @x.17
  %4958 = load i32, i32* @y.18
  %4959 = sub i32 %4957, 1
  %4960 = mul i32 %4957, %4959
  %4961 = urem i32 %4960, 2
  %4962 = icmp eq i32 %4961, 0
  %4963 = icmp slt i32 %4958, 10
  %4964 = or i1 %4962, %4963
  br i1 %4964, label %originalBBpart21346, label %originalBB1344alteredBB

originalBBpart21346:                              ; preds = %originalBB1344
  br i1 %4956, label %4965, label %4995, !dbg !1841

4965:                                             ; preds = %originalBBpart21346
  %4966 = load i32, i32* @x.17
  %4967 = load i32, i32* @y.18
  %4968 = sub i32 %4966, 1
  %4969 = mul i32 %4966, %4968
  %4970 = urem i32 %4969, 2
  %4971 = icmp eq i32 %4970, 0
  %4972 = icmp slt i32 %4967, 10
  %4973 = or i1 %4971, %4972
  br i1 %4973, label %originalBB1348, label %originalBB1348alteredBB

originalBB1348:                                   ; preds = %4965, %originalBB1348alteredBB
  %4974 = load i32*, i32** %25, align 8, !dbg !1842
  %4975 = load i8, i8* %39, align 1, !dbg !1843
  %4976 = zext i8 %4975 to i64, !dbg !1843
  %4977 = udiv i64 %4976, 32, !dbg !1844
  %4978 = getelementptr inbounds i32, i32* %4974, i64 %4977, !dbg !1842
  %4979 = load i32, i32* %4978, align 4, !dbg !1842
  %4980 = load i8, i8* %39, align 1, !dbg !1845
  %4981 = zext i8 %4980 to i64, !dbg !1845
  %4982 = urem i64 %4981, 32, !dbg !1846
  %4983 = trunc i64 %4982 to i32, !dbg !1847
  %4984 = lshr i32 %4979, %4983, !dbg !1847
  %4985 = and i32 %4984, 1, !dbg !1848
  %4986 = icmp ne i32 %4985, 0, !dbg !1848
  %4987 = load i32, i32* @x.17
  %4988 = load i32, i32* @y.18
  %4989 = sub i32 %4987, 1
  %4990 = mul i32 %4987, %4989
  %4991 = urem i32 %4990, 2
  %4992 = icmp eq i32 %4991, 0
  %4993 = icmp slt i32 %4988, 10
  %4994 = or i1 %4992, %4993
  br i1 %4994, label %originalBBpart21369, label %originalBB1348alteredBB

originalBBpart21369:                              ; preds = %originalBB1348
  br i1 %4986, label %5031, label %4995, !dbg !1849

4995:                                             ; preds = %originalBBpart21369, %originalBBpart21346, %originalBBpart21342
  %4996 = load i32, i32* @x.17
  %4997 = load i32, i32* @y.18
  %4998 = sub i32 %4996, 1
  %4999 = mul i32 %4996, %4998
  %5000 = urem i32 %4999, 2
  %5001 = icmp eq i32 %5000, 0
  %5002 = icmp slt i32 %4997, 10
  %5003 = or i1 %5001, %5002
  br i1 %5003, label %originalBB1371, label %originalBB1371alteredBB

originalBB1371:                                   ; preds = %4995, %originalBB1371alteredBB
  %5004 = load i8, i8* %41, align 1, !dbg !1850
  %5005 = trunc i8 %5004 to i1, !dbg !1850
  %5006 = load i32, i32* @x.17
  %5007 = load i32, i32* @y.18
  %5008 = sub i32 %5006, 1
  %5009 = mul i32 %5006, %5008
  %5010 = urem i32 %5009, 2
  %5011 = icmp eq i32 %5010, 0
  %5012 = icmp slt i32 %5007, 10
  %5013 = or i1 %5011, %5012
  br i1 %5013, label %originalBBpart21373, label %originalBB1371alteredBB

originalBBpart21373:                              ; preds = %originalBB1371
  br i1 %5005, label %5031, label %5014, !dbg !1851

5014:                                             ; preds = %originalBBpart21373
  %5015 = load i32, i32* @x.17
  %5016 = load i32, i32* @y.18
  %5017 = sub i32 %5015, 1
  %5018 = mul i32 %5015, %5017
  %5019 = urem i32 %5018, 2
  %5020 = icmp eq i32 %5019, 0
  %5021 = icmp slt i32 %5016, 10
  %5022 = or i1 %5020, %5021
  br i1 %5022, label %originalBB1375, label %originalBB1375alteredBB

originalBB1375:                                   ; preds = %5014, %originalBB1375alteredBB
  %5023 = load i32, i32* @x.17
  %5024 = load i32, i32* @y.18
  %5025 = sub i32 %5023, 1
  %5026 = mul i32 %5023, %5025
  %5027 = urem i32 %5026, 2
  %5028 = icmp eq i32 %5027, 0
  %5029 = icmp slt i32 %5024, 10
  %5030 = or i1 %5028, %5029
  br i1 %5030, label %originalBBpart21377, label %originalBB1375alteredBB

originalBBpart21377:                              ; preds = %originalBB1375
  br label %5446, !dbg !1852

5031:                                             ; preds = %originalBBpart21373, %originalBBpart21369
  %5032 = load i32, i32* @x.17
  %5033 = load i32, i32* @y.18
  %5034 = sub i32 %5032, 1
  %5035 = mul i32 %5032, %5034
  %5036 = urem i32 %5035, 2
  %5037 = icmp eq i32 %5036, 0
  %5038 = icmp slt i32 %5033, 10
  %5039 = or i1 %5037, %5038
  br i1 %5039, label %originalBB1379, label %originalBB1379alteredBB

originalBB1379:                                   ; preds = %5031, %originalBB1379alteredBB
  %5040 = load i32, i32* @x.17
  %5041 = load i32, i32* @y.18
  %5042 = sub i32 %5040, 1
  %5043 = mul i32 %5040, %5042
  %5044 = urem i32 %5043, 2
  %5045 = icmp eq i32 %5044, 0
  %5046 = icmp slt i32 %5041, 10
  %5047 = or i1 %5045, %5046
  br i1 %5047, label %originalBBpart21381, label %originalBB1379alteredBB

originalBBpart21381:                              ; preds = %originalBB1379
  br label %5048, !dbg !1850

5048:                                             ; preds = %originalBBpart21381, %originalBBpart2675
  call void @llvm.dbg.label(metadata !1853), !dbg !1854
  %5049 = load i32, i32* @x.17
  %5050 = load i32, i32* @y.18
  %5051 = sub i32 %5049, 1
  %5052 = mul i32 %5049, %5051
  %5053 = urem i32 %5052, 2
  %5054 = icmp eq i32 %5053, 0
  %5055 = icmp slt i32 %5050, 10
  %5056 = or i1 %5054, %5055
  br i1 %5056, label %originalBB1383, label %originalBB1383alteredBB

originalBB1383:                                   ; preds = %5048, %originalBB1383alteredBB
  %5057 = load i32, i32* @x.17
  %5058 = load i32, i32* @y.18
  %5059 = sub i32 %5057, 1
  %5060 = mul i32 %5057, %5059
  %5061 = urem i32 %5060, 2
  %5062 = icmp eq i32 %5061, 0
  %5063 = icmp slt i32 %5058, 10
  %5064 = or i1 %5062, %5063
  br i1 %5064, label %originalBBpart21385, label %originalBB1383alteredBB

originalBBpart21385:                              ; preds = %originalBB1383
  br label %5065, !dbg !1855

5065:                                             ; preds = %originalBBpart21385
  %5066 = load i32, i32* @x.17
  %5067 = load i32, i32* @y.18
  %5068 = sub i32 %5066, 1
  %5069 = mul i32 %5066, %5068
  %5070 = urem i32 %5069, 2
  %5071 = icmp eq i32 %5070, 0
  %5072 = icmp slt i32 %5067, 10
  %5073 = or i1 %5071, %5072
  br i1 %5073, label %originalBB1387, label %originalBB1387alteredBB

originalBB1387:                                   ; preds = %5065, %originalBB1387alteredBB
  %5074 = load i8, i8* %35, align 1, !dbg !1856
  %5075 = trunc i8 %5074 to i1, !dbg !1856
  %5076 = load i32, i32* @x.17
  %5077 = load i32, i32* @y.18
  %5078 = sub i32 %5076, 1
  %5079 = mul i32 %5076, %5078
  %5080 = urem i32 %5079, 2
  %5081 = icmp eq i32 %5080, 0
  %5082 = icmp slt i32 %5077, 10
  %5083 = or i1 %5081, %5082
  br i1 %5083, label %originalBBpart21389, label %originalBB1387alteredBB

originalBBpart21389:                              ; preds = %originalBB1387
  br i1 %5075, label %5084, label %5101, !dbg !1859

5084:                                             ; preds = %originalBBpart21389
  %5085 = load i32, i32* @x.17
  %5086 = load i32, i32* @y.18
  %5087 = sub i32 %5085, 1
  %5088 = mul i32 %5085, %5087
  %5089 = urem i32 %5088, 2
  %5090 = icmp eq i32 %5089, 0
  %5091 = icmp slt i32 %5086, 10
  %5092 = or i1 %5090, %5091
  br i1 %5092, label %originalBB1391, label %originalBB1391alteredBB

originalBB1391:                                   ; preds = %5084, %originalBB1391alteredBB
  %5093 = load i32, i32* @x.17
  %5094 = load i32, i32* @y.18
  %5095 = sub i32 %5093, 1
  %5096 = mul i32 %5093, %5095
  %5097 = urem i32 %5096, 2
  %5098 = icmp eq i32 %5097, 0
  %5099 = icmp slt i32 %5094, 10
  %5100 = or i1 %5098, %5099
  br i1 %5100, label %originalBBpart21393, label %originalBB1391alteredBB

originalBBpart21393:                              ; preds = %originalBB1391
  br label %6286, !dbg !1856

5101:                                             ; preds = %originalBBpart21389
  %5102 = load i32, i32* @x.17
  %5103 = load i32, i32* @y.18
  %5104 = sub i32 %5102, 1
  %5105 = mul i32 %5102, %5104
  %5106 = urem i32 %5105, 2
  %5107 = icmp eq i32 %5106, 0
  %5108 = icmp slt i32 %5103, 10
  %5109 = or i1 %5107, %5108
  br i1 %5109, label %originalBB1395, label %originalBB1395alteredBB

originalBB1395:                                   ; preds = %5101, %originalBB1395alteredBB
  store i8 1, i8* %42, align 1, !dbg !1859
  %5110 = load i32, i32* %23, align 4, !dbg !1860
  %5111 = icmp eq i32 %5110, 2, !dbg !1860
  %5112 = load i32, i32* @x.17
  %5113 = load i32, i32* @y.18
  %5114 = sub i32 %5112, 1
  %5115 = mul i32 %5112, %5114
  %5116 = urem i32 %5115, 2
  %5117 = icmp eq i32 %5116, 0
  %5118 = icmp slt i32 %5113, 10
  %5119 = or i1 %5117, %5118
  br i1 %5119, label %originalBBpart21397, label %originalBB1395alteredBB

originalBBpart21397:                              ; preds = %originalBB1395
  br i1 %5111, label %5120, label %5352, !dbg !1860

5120:                                             ; preds = %originalBBpart21397
  %5121 = load i32, i32* @x.17
  %5122 = load i32, i32* @y.18
  %5123 = sub i32 %5121, 1
  %5124 = mul i32 %5121, %5123
  %5125 = urem i32 %5124, 2
  %5126 = icmp eq i32 %5125, 0
  %5127 = icmp slt i32 %5122, 10
  %5128 = or i1 %5126, %5127
  br i1 %5128, label %originalBB1399, label %originalBB1399alteredBB

originalBB1399:                                   ; preds = %5120, %originalBB1399alteredBB
  %5129 = load i8, i8* %36, align 1, !dbg !1860
  %5130 = trunc i8 %5129 to i1, !dbg !1860
  %5131 = load i32, i32* @x.17
  %5132 = load i32, i32* @y.18
  %5133 = sub i32 %5131, 1
  %5134 = mul i32 %5131, %5133
  %5135 = urem i32 %5134, 2
  %5136 = icmp eq i32 %5135, 0
  %5137 = icmp slt i32 %5132, 10
  %5138 = or i1 %5136, %5137
  br i1 %5138, label %originalBBpart21401, label %originalBB1399alteredBB

originalBBpart21401:                              ; preds = %originalBB1399
  br i1 %5130, label %5352, label %5139, !dbg !1859

5139:                                             ; preds = %originalBBpart21401
  %5140 = load i32, i32* @x.17
  %5141 = load i32, i32* @y.18
  %5142 = sub i32 %5140, 1
  %5143 = mul i32 %5140, %5142
  %5144 = urem i32 %5143, 2
  %5145 = icmp eq i32 %5144, 0
  %5146 = icmp slt i32 %5141, 10
  %5147 = or i1 %5145, %5146
  br i1 %5147, label %originalBB1403, label %originalBB1403alteredBB

originalBB1403:                                   ; preds = %5139, %originalBB1403alteredBB
  %5148 = load i32, i32* @x.17
  %5149 = load i32, i32* @y.18
  %5150 = sub i32 %5148, 1
  %5151 = mul i32 %5148, %5150
  %5152 = urem i32 %5151, 2
  %5153 = icmp eq i32 %5152, 0
  %5154 = icmp slt i32 %5149, 10
  %5155 = or i1 %5153, %5154
  br i1 %5155, label %originalBBpart21405, label %originalBB1403alteredBB

originalBBpart21405:                              ; preds = %originalBB1403
  br label %5156, !dbg !1862

5156:                                             ; preds = %originalBBpart21405
  %5157 = load i32, i32* @x.17
  %5158 = load i32, i32* @y.18
  %5159 = sub i32 %5157, 1
  %5160 = mul i32 %5157, %5159
  %5161 = urem i32 %5160, 2
  %5162 = icmp eq i32 %5161, 0
  %5163 = icmp slt i32 %5158, 10
  %5164 = or i1 %5162, %5163
  br i1 %5164, label %originalBB1407, label %originalBB1407alteredBB

originalBB1407:                                   ; preds = %5156, %originalBB1407alteredBB
  %5165 = load i64, i64* %29, align 8, !dbg !1864
  %5166 = load i64, i64* %20, align 8, !dbg !1864
  %5167 = icmp ult i64 %5165, %5166, !dbg !1864
  %5168 = load i32, i32* @x.17
  %5169 = load i32, i32* @y.18
  %5170 = sub i32 %5168, 1
  %5171 = mul i32 %5168, %5170
  %5172 = urem i32 %5171, 2
  %5173 = icmp eq i32 %5172, 0
  %5174 = icmp slt i32 %5169, 10
  %5175 = or i1 %5173, %5174
  br i1 %5175, label %originalBBpart21409, label %originalBB1407alteredBB

originalBBpart21409:                              ; preds = %originalBB1407
  br i1 %5167, label %5176, label %5196, !dbg !1867

5176:                                             ; preds = %originalBBpart21409
  %5177 = load i32, i32* @x.17
  %5178 = load i32, i32* @y.18
  %5179 = sub i32 %5177, 1
  %5180 = mul i32 %5177, %5179
  %5181 = urem i32 %5180, 2
  %5182 = icmp eq i32 %5181, 0
  %5183 = icmp slt i32 %5178, 10
  %5184 = or i1 %5182, %5183
  br i1 %5184, label %originalBB1411, label %originalBB1411alteredBB

originalBB1411:                                   ; preds = %5176, %originalBB1411alteredBB
  %5185 = load i8*, i8** %19, align 8, !dbg !1864
  %5186 = load i64, i64* %29, align 8, !dbg !1864
  %5187 = getelementptr inbounds i8, i8* %5185, i64 %5186, !dbg !1864
  store i8 39, i8* %5187, align 1, !dbg !1864
  %5188 = load i32, i32* @x.17
  %5189 = load i32, i32* @y.18
  %5190 = sub i32 %5188, 1
  %5191 = mul i32 %5188, %5190
  %5192 = urem i32 %5191, 2
  %5193 = icmp eq i32 %5192, 0
  %5194 = icmp slt i32 %5189, 10
  %5195 = or i1 %5193, %5194
  br i1 %5195, label %originalBBpart21413, label %originalBB1411alteredBB

originalBBpart21413:                              ; preds = %originalBB1411
  br label %5196, !dbg !1864

5196:                                             ; preds = %originalBBpart21413, %originalBBpart21409
  %5197 = load i32, i32* @x.17
  %5198 = load i32, i32* @y.18
  %5199 = sub i32 %5197, 1
  %5200 = mul i32 %5197, %5199
  %5201 = urem i32 %5200, 2
  %5202 = icmp eq i32 %5201, 0
  %5203 = icmp slt i32 %5198, 10
  %5204 = or i1 %5202, %5203
  br i1 %5204, label %originalBB1415, label %originalBB1415alteredBB

originalBB1415:                                   ; preds = %5196, %originalBB1415alteredBB
  %5205 = load i64, i64* %29, align 8, !dbg !1867
  %5206 = add i64 %5205, 1, !dbg !1867
  store i64 %5206, i64* %29, align 8, !dbg !1867
  %5207 = load i32, i32* @x.17
  %5208 = load i32, i32* @y.18
  %5209 = sub i32 %5207, 1
  %5210 = mul i32 %5207, %5209
  %5211 = urem i32 %5210, 2
  %5212 = icmp eq i32 %5211, 0
  %5213 = icmp slt i32 %5208, 10
  %5214 = or i1 %5212, %5213
  br i1 %5214, label %originalBBpart21421, label %originalBB1415alteredBB

originalBBpart21421:                              ; preds = %originalBB1415
  br label %5215, !dbg !1867

5215:                                             ; preds = %originalBBpart21421
  %5216 = load i32, i32* @x.17
  %5217 = load i32, i32* @y.18
  %5218 = sub i32 %5216, 1
  %5219 = mul i32 %5216, %5218
  %5220 = urem i32 %5219, 2
  %5221 = icmp eq i32 %5220, 0
  %5222 = icmp slt i32 %5217, 10
  %5223 = or i1 %5221, %5222
  br i1 %5223, label %originalBB1423, label %originalBB1423alteredBB

originalBB1423:                                   ; preds = %5215, %originalBB1423alteredBB
  %5224 = load i32, i32* @x.17
  %5225 = load i32, i32* @y.18
  %5226 = sub i32 %5224, 1
  %5227 = mul i32 %5224, %5226
  %5228 = urem i32 %5227, 2
  %5229 = icmp eq i32 %5228, 0
  %5230 = icmp slt i32 %5225, 10
  %5231 = or i1 %5229, %5230
  br i1 %5231, label %originalBBpart21425, label %originalBB1423alteredBB

originalBBpart21425:                              ; preds = %originalBB1423
  br label %5232, !dbg !1862

5232:                                             ; preds = %originalBBpart21425
  %5233 = load i32, i32* @x.17
  %5234 = load i32, i32* @y.18
  %5235 = sub i32 %5233, 1
  %5236 = mul i32 %5233, %5235
  %5237 = urem i32 %5236, 2
  %5238 = icmp eq i32 %5237, 0
  %5239 = icmp slt i32 %5234, 10
  %5240 = or i1 %5238, %5239
  br i1 %5240, label %originalBB1427, label %originalBB1427alteredBB

originalBB1427:                                   ; preds = %5232, %originalBB1427alteredBB
  %5241 = load i64, i64* %29, align 8, !dbg !1868
  %5242 = load i64, i64* %20, align 8, !dbg !1868
  %5243 = icmp ult i64 %5241, %5242, !dbg !1868
  %5244 = load i32, i32* @x.17
  %5245 = load i32, i32* @y.18
  %5246 = sub i32 %5244, 1
  %5247 = mul i32 %5244, %5246
  %5248 = urem i32 %5247, 2
  %5249 = icmp eq i32 %5248, 0
  %5250 = icmp slt i32 %5245, 10
  %5251 = or i1 %5249, %5250
  br i1 %5251, label %originalBBpart21429, label %originalBB1427alteredBB

originalBBpart21429:                              ; preds = %originalBB1427
  br i1 %5243, label %5252, label %5256, !dbg !1871

5252:                                             ; preds = %originalBBpart21429
  %5253 = load i8*, i8** %19, align 8, !dbg !1868
  %5254 = load i64, i64* %29, align 8, !dbg !1868
  %5255 = getelementptr inbounds i8, i8* %5253, i64 %5254, !dbg !1868
  store i8 36, i8* %5255, align 1, !dbg !1868
  br label %5256, !dbg !1868

5256:                                             ; preds = %5252, %originalBBpart21429
  %5257 = load i32, i32* @x.17
  %5258 = load i32, i32* @y.18
  %5259 = sub i32 %5257, 1
  %5260 = mul i32 %5257, %5259
  %5261 = urem i32 %5260, 2
  %5262 = icmp eq i32 %5261, 0
  %5263 = icmp slt i32 %5258, 10
  %5264 = or i1 %5262, %5263
  br i1 %5264, label %originalBB1431, label %originalBB1431alteredBB

originalBB1431:                                   ; preds = %5256, %originalBB1431alteredBB
  %5265 = load i64, i64* %29, align 8, !dbg !1871
  %5266 = add i64 %5265, 1, !dbg !1871
  store i64 %5266, i64* %29, align 8, !dbg !1871
  %5267 = load i32, i32* @x.17
  %5268 = load i32, i32* @y.18
  %5269 = sub i32 %5267, 1
  %5270 = mul i32 %5267, %5269
  %5271 = urem i32 %5270, 2
  %5272 = icmp eq i32 %5271, 0
  %5273 = icmp slt i32 %5268, 10
  %5274 = or i1 %5272, %5273
  br i1 %5274, label %originalBBpart21439, label %originalBB1431alteredBB

originalBBpart21439:                              ; preds = %originalBB1431
  br label %5275, !dbg !1871

5275:                                             ; preds = %originalBBpart21439
  %5276 = load i32, i32* @x.17
  %5277 = load i32, i32* @y.18
  %5278 = sub i32 %5276, 1
  %5279 = mul i32 %5276, %5278
  %5280 = urem i32 %5279, 2
  %5281 = icmp eq i32 %5280, 0
  %5282 = icmp slt i32 %5277, 10
  %5283 = or i1 %5281, %5282
  br i1 %5283, label %originalBB1441, label %originalBB1441alteredBB

originalBB1441:                                   ; preds = %5275, %originalBB1441alteredBB
  %5284 = load i32, i32* @x.17
  %5285 = load i32, i32* @y.18
  %5286 = sub i32 %5284, 1
  %5287 = mul i32 %5284, %5286
  %5288 = urem i32 %5287, 2
  %5289 = icmp eq i32 %5288, 0
  %5290 = icmp slt i32 %5285, 10
  %5291 = or i1 %5289, %5290
  br i1 %5291, label %originalBBpart21443, label %originalBB1441alteredBB

originalBBpart21443:                              ; preds = %originalBB1441
  br label %5292, !dbg !1862

5292:                                             ; preds = %originalBBpart21443
  %5293 = load i64, i64* %29, align 8, !dbg !1872
  %5294 = load i64, i64* %20, align 8, !dbg !1872
  %5295 = icmp ult i64 %5293, %5294, !dbg !1872
  br i1 %5295, label %5296, label %5316, !dbg !1875

5296:                                             ; preds = %5292
  %5297 = load i32, i32* @x.17
  %5298 = load i32, i32* @y.18
  %5299 = sub i32 %5297, 1
  %5300 = mul i32 %5297, %5299
  %5301 = urem i32 %5300, 2
  %5302 = icmp eq i32 %5301, 0
  %5303 = icmp slt i32 %5298, 10
  %5304 = or i1 %5302, %5303
  br i1 %5304, label %originalBB1445, label %originalBB1445alteredBB

originalBB1445:                                   ; preds = %5296, %originalBB1445alteredBB
  %5305 = load i8*, i8** %19, align 8, !dbg !1872
  %5306 = load i64, i64* %29, align 8, !dbg !1872
  %5307 = getelementptr inbounds i8, i8* %5305, i64 %5306, !dbg !1872
  store i8 39, i8* %5307, align 1, !dbg !1872
  %5308 = load i32, i32* @x.17
  %5309 = load i32, i32* @y.18
  %5310 = sub i32 %5308, 1
  %5311 = mul i32 %5308, %5310
  %5312 = urem i32 %5311, 2
  %5313 = icmp eq i32 %5312, 0
  %5314 = icmp slt i32 %5309, 10
  %5315 = or i1 %5313, %5314
  br i1 %5315, label %originalBBpart21447, label %originalBB1445alteredBB

originalBBpart21447:                              ; preds = %originalBB1445
  br label %5316, !dbg !1872

5316:                                             ; preds = %originalBBpart21447, %5292
  %5317 = load i32, i32* @x.17
  %5318 = load i32, i32* @y.18
  %5319 = sub i32 %5317, 1
  %5320 = mul i32 %5317, %5319
  %5321 = urem i32 %5320, 2
  %5322 = icmp eq i32 %5321, 0
  %5323 = icmp slt i32 %5318, 10
  %5324 = or i1 %5322, %5323
  br i1 %5324, label %originalBB1449, label %originalBB1449alteredBB

originalBB1449:                                   ; preds = %5316, %originalBB1449alteredBB
  %5325 = load i64, i64* %29, align 8, !dbg !1875
  %5326 = add i64 %5325, 1, !dbg !1875
  store i64 %5326, i64* %29, align 8, !dbg !1875
  %5327 = load i32, i32* @x.17
  %5328 = load i32, i32* @y.18
  %5329 = sub i32 %5327, 1
  %5330 = mul i32 %5327, %5329
  %5331 = urem i32 %5330, 2
  %5332 = icmp eq i32 %5331, 0
  %5333 = icmp slt i32 %5328, 10
  %5334 = or i1 %5332, %5333
  br i1 %5334, label %originalBBpart21455, label %originalBB1449alteredBB

originalBBpart21455:                              ; preds = %originalBB1449
  br label %5335, !dbg !1875

5335:                                             ; preds = %originalBBpart21455
  %5336 = load i32, i32* @x.17
  %5337 = load i32, i32* @y.18
  %5338 = sub i32 %5336, 1
  %5339 = mul i32 %5336, %5338
  %5340 = urem i32 %5339, 2
  %5341 = icmp eq i32 %5340, 0
  %5342 = icmp slt i32 %5337, 10
  %5343 = or i1 %5341, %5342
  br i1 %5343, label %originalBB1457, label %originalBB1457alteredBB

originalBB1457:                                   ; preds = %5335, %originalBB1457alteredBB
  store i8 1, i8* %36, align 1, !dbg !1862
  %5344 = load i32, i32* @x.17
  %5345 = load i32, i32* @y.18
  %5346 = sub i32 %5344, 1
  %5347 = mul i32 %5344, %5346
  %5348 = urem i32 %5347, 2
  %5349 = icmp eq i32 %5348, 0
  %5350 = icmp slt i32 %5345, 10
  %5351 = or i1 %5349, %5350
  br i1 %5351, label %originalBBpart21459, label %originalBB1457alteredBB

originalBBpart21459:                              ; preds = %originalBB1457
  br label %5352, !dbg !1862

5352:                                             ; preds = %originalBBpart21459, %originalBBpart21401, %originalBBpart21397
  %5353 = load i32, i32* @x.17
  %5354 = load i32, i32* @y.18
  %5355 = sub i32 %5353, 1
  %5356 = mul i32 %5353, %5355
  %5357 = urem i32 %5356, 2
  %5358 = icmp eq i32 %5357, 0
  %5359 = icmp slt i32 %5354, 10
  %5360 = or i1 %5358, %5359
  br i1 %5360, label %originalBB1461, label %originalBB1461alteredBB

originalBB1461:                                   ; preds = %5352, %originalBB1461alteredBB
  %5361 = load i32, i32* @x.17
  %5362 = load i32, i32* @y.18
  %5363 = sub i32 %5361, 1
  %5364 = mul i32 %5361, %5363
  %5365 = urem i32 %5364, 2
  %5366 = icmp eq i32 %5365, 0
  %5367 = icmp slt i32 %5362, 10
  %5368 = or i1 %5366, %5367
  br i1 %5368, label %originalBBpart21463, label %originalBB1461alteredBB

originalBBpart21463:                              ; preds = %originalBB1461
  br label %5369, !dbg !1859

5369:                                             ; preds = %originalBBpart21463
  %5370 = load i32, i32* @x.17
  %5371 = load i32, i32* @y.18
  %5372 = sub i32 %5370, 1
  %5373 = mul i32 %5370, %5372
  %5374 = urem i32 %5373, 2
  %5375 = icmp eq i32 %5374, 0
  %5376 = icmp slt i32 %5371, 10
  %5377 = or i1 %5375, %5376
  br i1 %5377, label %originalBB1465, label %originalBB1465alteredBB

originalBB1465:                                   ; preds = %5369, %originalBB1465alteredBB
  %5378 = load i64, i64* %29, align 8, !dbg !1876
  %5379 = load i64, i64* %20, align 8, !dbg !1876
  %5380 = icmp ult i64 %5378, %5379, !dbg !1876
  %5381 = load i32, i32* @x.17
  %5382 = load i32, i32* @y.18
  %5383 = sub i32 %5381, 1
  %5384 = mul i32 %5381, %5383
  %5385 = urem i32 %5384, 2
  %5386 = icmp eq i32 %5385, 0
  %5387 = icmp slt i32 %5382, 10
  %5388 = or i1 %5386, %5387
  br i1 %5388, label %originalBBpart21467, label %originalBB1465alteredBB

originalBBpart21467:                              ; preds = %originalBB1465
  br i1 %5380, label %5389, label %5393, !dbg !1879

5389:                                             ; preds = %originalBBpart21467
  %5390 = load i8*, i8** %19, align 8, !dbg !1876
  %5391 = load i64, i64* %29, align 8, !dbg !1876
  %5392 = getelementptr inbounds i8, i8* %5390, i64 %5391, !dbg !1876
  store i8 92, i8* %5392, align 1, !dbg !1876
  br label %5393, !dbg !1876

5393:                                             ; preds = %5389, %originalBBpart21467
  %5394 = load i32, i32* @x.17
  %5395 = load i32, i32* @y.18
  %5396 = sub i32 %5394, 1
  %5397 = mul i32 %5394, %5396
  %5398 = urem i32 %5397, 2
  %5399 = icmp eq i32 %5398, 0
  %5400 = icmp slt i32 %5395, 10
  %5401 = or i1 %5399, %5400
  br i1 %5401, label %originalBB1469, label %originalBB1469alteredBB

originalBB1469:                                   ; preds = %5393, %originalBB1469alteredBB
  %5402 = load i64, i64* %29, align 8, !dbg !1879
  %5403 = add i64 %5402, 1, !dbg !1879
  store i64 %5403, i64* %29, align 8, !dbg !1879
  %5404 = load i32, i32* @x.17
  %5405 = load i32, i32* @y.18
  %5406 = sub i32 %5404, 1
  %5407 = mul i32 %5404, %5406
  %5408 = urem i32 %5407, 2
  %5409 = icmp eq i32 %5408, 0
  %5410 = icmp slt i32 %5405, 10
  %5411 = or i1 %5409, %5410
  br i1 %5411, label %originalBBpart21474, label %originalBB1469alteredBB

originalBBpart21474:                              ; preds = %originalBB1469
  br label %5412, !dbg !1879

5412:                                             ; preds = %originalBBpart21474
  %5413 = load i32, i32* @x.17
  %5414 = load i32, i32* @y.18
  %5415 = sub i32 %5413, 1
  %5416 = mul i32 %5413, %5415
  %5417 = urem i32 %5416, 2
  %5418 = icmp eq i32 %5417, 0
  %5419 = icmp slt i32 %5414, 10
  %5420 = or i1 %5418, %5419
  br i1 %5420, label %originalBB1476, label %originalBB1476alteredBB

originalBB1476:                                   ; preds = %5412, %originalBB1476alteredBB
  %5421 = load i32, i32* @x.17
  %5422 = load i32, i32* @y.18
  %5423 = sub i32 %5421, 1
  %5424 = mul i32 %5421, %5423
  %5425 = urem i32 %5424, 2
  %5426 = icmp eq i32 %5425, 0
  %5427 = icmp slt i32 %5422, 10
  %5428 = or i1 %5426, %5427
  br i1 %5428, label %originalBBpart21478, label %originalBB1476alteredBB

originalBBpart21478:                              ; preds = %originalBB1476
  br label %5429, !dbg !1859

5429:                                             ; preds = %originalBBpart21478
  %5430 = load i32, i32* @x.17
  %5431 = load i32, i32* @y.18
  %5432 = sub i32 %5430, 1
  %5433 = mul i32 %5430, %5432
  %5434 = urem i32 %5433, 2
  %5435 = icmp eq i32 %5434, 0
  %5436 = icmp slt i32 %5431, 10
  %5437 = or i1 %5435, %5436
  br i1 %5437, label %originalBB1480, label %originalBB1480alteredBB

originalBB1480:                                   ; preds = %5429, %originalBB1480alteredBB
  %5438 = load i32, i32* @x.17
  %5439 = load i32, i32* @y.18
  %5440 = sub i32 %5438, 1
  %5441 = mul i32 %5438, %5440
  %5442 = urem i32 %5441, 2
  %5443 = icmp eq i32 %5442, 0
  %5444 = icmp slt i32 %5439, 10
  %5445 = or i1 %5443, %5444
  br i1 %5445, label %originalBBpart21482, label %originalBB1480alteredBB

originalBBpart21482:                              ; preds = %originalBB1480
  br label %5446, !dbg !1859

5446:                                             ; preds = %originalBBpart21482, %originalBBpart21377, %4871, %originalBBpart2647, %originalBBpart2631
  call void @llvm.dbg.label(metadata !1880), !dbg !1881
  %5447 = load i32, i32* @x.17
  %5448 = load i32, i32* @y.18
  %5449 = sub i32 %5447, 1
  %5450 = mul i32 %5447, %5449
  %5451 = urem i32 %5450, 2
  %5452 = icmp eq i32 %5451, 0
  %5453 = icmp slt i32 %5448, 10
  %5454 = or i1 %5452, %5453
  br i1 %5454, label %originalBB1484, label %originalBB1484alteredBB

originalBB1484:                                   ; preds = %5446, %originalBB1484alteredBB
  %5455 = load i32, i32* @x.17
  %5456 = load i32, i32* @y.18
  %5457 = sub i32 %5455, 1
  %5458 = mul i32 %5455, %5457
  %5459 = urem i32 %5458, 2
  %5460 = icmp eq i32 %5459, 0
  %5461 = icmp slt i32 %5456, 10
  %5462 = or i1 %5460, %5461
  br i1 %5462, label %originalBBpart21486, label %originalBB1484alteredBB

originalBBpart21486:                              ; preds = %originalBB1484
  br label %5463, !dbg !1882

5463:                                             ; preds = %originalBBpart21486
  %5464 = load i32, i32* @x.17
  %5465 = load i32, i32* @y.18
  %5466 = sub i32 %5464, 1
  %5467 = mul i32 %5464, %5466
  %5468 = urem i32 %5467, 2
  %5469 = icmp eq i32 %5468, 0
  %5470 = icmp slt i32 %5465, 10
  %5471 = or i1 %5469, %5470
  br i1 %5471, label %originalBB1488, label %originalBB1488alteredBB

originalBB1488:                                   ; preds = %5463, %originalBB1488alteredBB
  %5472 = load i8, i8* %36, align 1, !dbg !1883
  %5473 = trunc i8 %5472 to i1, !dbg !1883
  %5474 = load i32, i32* @x.17
  %5475 = load i32, i32* @y.18
  %5476 = sub i32 %5474, 1
  %5477 = mul i32 %5474, %5476
  %5478 = urem i32 %5477, 2
  %5479 = icmp eq i32 %5478, 0
  %5480 = icmp slt i32 %5475, 10
  %5481 = or i1 %5479, %5480
  br i1 %5481, label %originalBBpart21490, label %originalBB1488alteredBB

originalBBpart21490:                              ; preds = %originalBB1488
  br i1 %5473, label %5482, label %5654, !dbg !1883

5482:                                             ; preds = %originalBBpart21490
  %5483 = load i32, i32* @x.17
  %5484 = load i32, i32* @y.18
  %5485 = sub i32 %5483, 1
  %5486 = mul i32 %5483, %5485
  %5487 = urem i32 %5486, 2
  %5488 = icmp eq i32 %5487, 0
  %5489 = icmp slt i32 %5484, 10
  %5490 = or i1 %5488, %5489
  br i1 %5490, label %originalBB1492, label %originalBB1492alteredBB

originalBB1492:                                   ; preds = %5482, %originalBB1492alteredBB
  %5491 = load i8, i8* %42, align 1, !dbg !1883
  %5492 = trunc i8 %5491 to i1, !dbg !1883
  %5493 = load i32, i32* @x.17
  %5494 = load i32, i32* @y.18
  %5495 = sub i32 %5493, 1
  %5496 = mul i32 %5493, %5495
  %5497 = urem i32 %5496, 2
  %5498 = icmp eq i32 %5497, 0
  %5499 = icmp slt i32 %5494, 10
  %5500 = or i1 %5498, %5499
  br i1 %5500, label %originalBBpart21494, label %originalBB1492alteredBB

originalBBpart21494:                              ; preds = %originalBB1492
  br i1 %5492, label %5654, label %5501, !dbg !1886

5501:                                             ; preds = %originalBBpart21494
  br label %5502, !dbg !1887

5502:                                             ; preds = %5501
  %5503 = load i32, i32* @x.17
  %5504 = load i32, i32* @y.18
  %5505 = sub i32 %5503, 1
  %5506 = mul i32 %5503, %5505
  %5507 = urem i32 %5506, 2
  %5508 = icmp eq i32 %5507, 0
  %5509 = icmp slt i32 %5504, 10
  %5510 = or i1 %5508, %5509
  br i1 %5510, label %originalBB1496, label %originalBB1496alteredBB

originalBB1496:                                   ; preds = %5502, %originalBB1496alteredBB
  %5511 = load i64, i64* %29, align 8, !dbg !1889
  %5512 = load i64, i64* %20, align 8, !dbg !1889
  %5513 = icmp ult i64 %5511, %5512, !dbg !1889
  %5514 = load i32, i32* @x.17
  %5515 = load i32, i32* @y.18
  %5516 = sub i32 %5514, 1
  %5517 = mul i32 %5514, %5516
  %5518 = urem i32 %5517, 2
  %5519 = icmp eq i32 %5518, 0
  %5520 = icmp slt i32 %5515, 10
  %5521 = or i1 %5519, %5520
  br i1 %5521, label %originalBBpart21498, label %originalBB1496alteredBB

originalBBpart21498:                              ; preds = %originalBB1496
  br i1 %5513, label %5522, label %5542, !dbg !1892

5522:                                             ; preds = %originalBBpart21498
  %5523 = load i32, i32* @x.17
  %5524 = load i32, i32* @y.18
  %5525 = sub i32 %5523, 1
  %5526 = mul i32 %5523, %5525
  %5527 = urem i32 %5526, 2
  %5528 = icmp eq i32 %5527, 0
  %5529 = icmp slt i32 %5524, 10
  %5530 = or i1 %5528, %5529
  br i1 %5530, label %originalBB1500, label %originalBB1500alteredBB

originalBB1500:                                   ; preds = %5522, %originalBB1500alteredBB
  %5531 = load i8*, i8** %19, align 8, !dbg !1889
  %5532 = load i64, i64* %29, align 8, !dbg !1889
  %5533 = getelementptr inbounds i8, i8* %5531, i64 %5532, !dbg !1889
  store i8 39, i8* %5533, align 1, !dbg !1889
  %5534 = load i32, i32* @x.17
  %5535 = load i32, i32* @y.18
  %5536 = sub i32 %5534, 1
  %5537 = mul i32 %5534, %5536
  %5538 = urem i32 %5537, 2
  %5539 = icmp eq i32 %5538, 0
  %5540 = icmp slt i32 %5535, 10
  %5541 = or i1 %5539, %5540
  br i1 %5541, label %originalBBpart21502, label %originalBB1500alteredBB

originalBBpart21502:                              ; preds = %originalBB1500
  br label %5542, !dbg !1889

5542:                                             ; preds = %originalBBpart21502, %originalBBpart21498
  %5543 = load i32, i32* @x.17
  %5544 = load i32, i32* @y.18
  %5545 = sub i32 %5543, 1
  %5546 = mul i32 %5543, %5545
  %5547 = urem i32 %5546, 2
  %5548 = icmp eq i32 %5547, 0
  %5549 = icmp slt i32 %5544, 10
  %5550 = or i1 %5548, %5549
  br i1 %5550, label %originalBB1504, label %originalBB1504alteredBB

originalBB1504:                                   ; preds = %5542, %originalBB1504alteredBB
  %5551 = load i64, i64* %29, align 8, !dbg !1892
  %5552 = add i64 %5551, 1, !dbg !1892
  store i64 %5552, i64* %29, align 8, !dbg !1892
  %5553 = load i32, i32* @x.17
  %5554 = load i32, i32* @y.18
  %5555 = sub i32 %5553, 1
  %5556 = mul i32 %5553, %5555
  %5557 = urem i32 %5556, 2
  %5558 = icmp eq i32 %5557, 0
  %5559 = icmp slt i32 %5554, 10
  %5560 = or i1 %5558, %5559
  br i1 %5560, label %originalBBpart21515, label %originalBB1504alteredBB

originalBBpart21515:                              ; preds = %originalBB1504
  br label %5561, !dbg !1892

5561:                                             ; preds = %originalBBpart21515
  %5562 = load i32, i32* @x.17
  %5563 = load i32, i32* @y.18
  %5564 = sub i32 %5562, 1
  %5565 = mul i32 %5562, %5564
  %5566 = urem i32 %5565, 2
  %5567 = icmp eq i32 %5566, 0
  %5568 = icmp slt i32 %5563, 10
  %5569 = or i1 %5567, %5568
  br i1 %5569, label %originalBB1517, label %originalBB1517alteredBB

originalBB1517:                                   ; preds = %5561, %originalBB1517alteredBB
  %5570 = load i32, i32* @x.17
  %5571 = load i32, i32* @y.18
  %5572 = sub i32 %5570, 1
  %5573 = mul i32 %5570, %5572
  %5574 = urem i32 %5573, 2
  %5575 = icmp eq i32 %5574, 0
  %5576 = icmp slt i32 %5571, 10
  %5577 = or i1 %5575, %5576
  br i1 %5577, label %originalBBpart21519, label %originalBB1517alteredBB

originalBBpart21519:                              ; preds = %originalBB1517
  br label %5578, !dbg !1887

5578:                                             ; preds = %originalBBpart21519
  %5579 = load i32, i32* @x.17
  %5580 = load i32, i32* @y.18
  %5581 = sub i32 %5579, 1
  %5582 = mul i32 %5579, %5581
  %5583 = urem i32 %5582, 2
  %5584 = icmp eq i32 %5583, 0
  %5585 = icmp slt i32 %5580, 10
  %5586 = or i1 %5584, %5585
  br i1 %5586, label %originalBB1521, label %originalBB1521alteredBB

originalBB1521:                                   ; preds = %5578, %originalBB1521alteredBB
  %5587 = load i64, i64* %29, align 8, !dbg !1893
  %5588 = load i64, i64* %20, align 8, !dbg !1893
  %5589 = icmp ult i64 %5587, %5588, !dbg !1893
  %5590 = load i32, i32* @x.17
  %5591 = load i32, i32* @y.18
  %5592 = sub i32 %5590, 1
  %5593 = mul i32 %5590, %5592
  %5594 = urem i32 %5593, 2
  %5595 = icmp eq i32 %5594, 0
  %5596 = icmp slt i32 %5591, 10
  %5597 = or i1 %5595, %5596
  br i1 %5597, label %originalBBpart21523, label %originalBB1521alteredBB

originalBBpart21523:                              ; preds = %originalBB1521
  br i1 %5589, label %5598, label %5618, !dbg !1896

5598:                                             ; preds = %originalBBpart21523
  %5599 = load i32, i32* @x.17
  %5600 = load i32, i32* @y.18
  %5601 = sub i32 %5599, 1
  %5602 = mul i32 %5599, %5601
  %5603 = urem i32 %5602, 2
  %5604 = icmp eq i32 %5603, 0
  %5605 = icmp slt i32 %5600, 10
  %5606 = or i1 %5604, %5605
  br i1 %5606, label %originalBB1525, label %originalBB1525alteredBB

originalBB1525:                                   ; preds = %5598, %originalBB1525alteredBB
  %5607 = load i8*, i8** %19, align 8, !dbg !1893
  %5608 = load i64, i64* %29, align 8, !dbg !1893
  %5609 = getelementptr inbounds i8, i8* %5607, i64 %5608, !dbg !1893
  store i8 39, i8* %5609, align 1, !dbg !1893
  %5610 = load i32, i32* @x.17
  %5611 = load i32, i32* @y.18
  %5612 = sub i32 %5610, 1
  %5613 = mul i32 %5610, %5612
  %5614 = urem i32 %5613, 2
  %5615 = icmp eq i32 %5614, 0
  %5616 = icmp slt i32 %5611, 10
  %5617 = or i1 %5615, %5616
  br i1 %5617, label %originalBBpart21527, label %originalBB1525alteredBB

originalBBpart21527:                              ; preds = %originalBB1525
  br label %5618, !dbg !1893

5618:                                             ; preds = %originalBBpart21527, %originalBBpart21523
  %5619 = load i32, i32* @x.17
  %5620 = load i32, i32* @y.18
  %5621 = sub i32 %5619, 1
  %5622 = mul i32 %5619, %5621
  %5623 = urem i32 %5622, 2
  %5624 = icmp eq i32 %5623, 0
  %5625 = icmp slt i32 %5620, 10
  %5626 = or i1 %5624, %5625
  br i1 %5626, label %originalBB1529, label %originalBB1529alteredBB

originalBB1529:                                   ; preds = %5618, %originalBB1529alteredBB
  %5627 = load i64, i64* %29, align 8, !dbg !1896
  %5628 = add i64 %5627, 1, !dbg !1896
  store i64 %5628, i64* %29, align 8, !dbg !1896
  %5629 = load i32, i32* @x.17
  %5630 = load i32, i32* @y.18
  %5631 = sub i32 %5629, 1
  %5632 = mul i32 %5629, %5631
  %5633 = urem i32 %5632, 2
  %5634 = icmp eq i32 %5633, 0
  %5635 = icmp slt i32 %5630, 10
  %5636 = or i1 %5634, %5635
  br i1 %5636, label %originalBBpart21537, label %originalBB1529alteredBB

originalBBpart21537:                              ; preds = %originalBB1529
  br label %5637, !dbg !1896

5637:                                             ; preds = %originalBBpart21537
  %5638 = load i32, i32* @x.17
  %5639 = load i32, i32* @y.18
  %5640 = sub i32 %5638, 1
  %5641 = mul i32 %5638, %5640
  %5642 = urem i32 %5641, 2
  %5643 = icmp eq i32 %5642, 0
  %5644 = icmp slt i32 %5639, 10
  %5645 = or i1 %5643, %5644
  br i1 %5645, label %originalBB1539, label %originalBB1539alteredBB

originalBB1539:                                   ; preds = %5637, %originalBB1539alteredBB
  store i8 0, i8* %36, align 1, !dbg !1887
  %5646 = load i32, i32* @x.17
  %5647 = load i32, i32* @y.18
  %5648 = sub i32 %5646, 1
  %5649 = mul i32 %5646, %5648
  %5650 = urem i32 %5649, 2
  %5651 = icmp eq i32 %5650, 0
  %5652 = icmp slt i32 %5647, 10
  %5653 = or i1 %5651, %5652
  br i1 %5653, label %originalBBpart21541, label %originalBB1539alteredBB

originalBBpart21541:                              ; preds = %originalBB1539
  br label %5654, !dbg !1887

5654:                                             ; preds = %originalBBpart21541, %originalBBpart21494, %originalBBpart21490
  %5655 = load i32, i32* @x.17
  %5656 = load i32, i32* @y.18
  %5657 = sub i32 %5655, 1
  %5658 = mul i32 %5655, %5657
  %5659 = urem i32 %5658, 2
  %5660 = icmp eq i32 %5659, 0
  %5661 = icmp slt i32 %5656, 10
  %5662 = or i1 %5660, %5661
  br i1 %5662, label %originalBB1543, label %originalBB1543alteredBB

originalBB1543:                                   ; preds = %5654, %originalBB1543alteredBB
  %5663 = load i32, i32* @x.17
  %5664 = load i32, i32* @y.18
  %5665 = sub i32 %5663, 1
  %5666 = mul i32 %5663, %5665
  %5667 = urem i32 %5666, 2
  %5668 = icmp eq i32 %5667, 0
  %5669 = icmp slt i32 %5664, 10
  %5670 = or i1 %5668, %5669
  br i1 %5670, label %originalBBpart21545, label %originalBB1543alteredBB

originalBBpart21545:                              ; preds = %originalBB1543
  br label %5671, !dbg !1886

5671:                                             ; preds = %originalBBpart21545
  %5672 = load i32, i32* @x.17
  %5673 = load i32, i32* @y.18
  %5674 = sub i32 %5672, 1
  %5675 = mul i32 %5672, %5674
  %5676 = urem i32 %5675, 2
  %5677 = icmp eq i32 %5676, 0
  %5678 = icmp slt i32 %5673, 10
  %5679 = or i1 %5677, %5678
  br i1 %5679, label %originalBB1547, label %originalBB1547alteredBB

originalBB1547:                                   ; preds = %5671, %originalBB1547alteredBB
  %5680 = load i32, i32* @x.17
  %5681 = load i32, i32* @y.18
  %5682 = sub i32 %5680, 1
  %5683 = mul i32 %5680, %5682
  %5684 = urem i32 %5683, 2
  %5685 = icmp eq i32 %5684, 0
  %5686 = icmp slt i32 %5681, 10
  %5687 = or i1 %5685, %5686
  br i1 %5687, label %originalBBpart21549, label %originalBB1547alteredBB

originalBBpart21549:                              ; preds = %originalBB1547
  br label %5688, !dbg !1897

5688:                                             ; preds = %originalBBpart21549
  %5689 = load i32, i32* @x.17
  %5690 = load i32, i32* @y.18
  %5691 = sub i32 %5689, 1
  %5692 = mul i32 %5689, %5691
  %5693 = urem i32 %5692, 2
  %5694 = icmp eq i32 %5693, 0
  %5695 = icmp slt i32 %5690, 10
  %5696 = or i1 %5694, %5695
  br i1 %5696, label %originalBB1551, label %originalBB1551alteredBB

originalBB1551:                                   ; preds = %5688, %originalBB1551alteredBB
  %5697 = load i64, i64* %29, align 8, !dbg !1898
  %5698 = load i64, i64* %20, align 8, !dbg !1898
  %5699 = icmp ult i64 %5697, %5698, !dbg !1898
  %5700 = load i32, i32* @x.17
  %5701 = load i32, i32* @y.18
  %5702 = sub i32 %5700, 1
  %5703 = mul i32 %5700, %5702
  %5704 = urem i32 %5703, 2
  %5705 = icmp eq i32 %5704, 0
  %5706 = icmp slt i32 %5701, 10
  %5707 = or i1 %5705, %5706
  br i1 %5707, label %originalBBpart21553, label %originalBB1551alteredBB

originalBBpart21553:                              ; preds = %originalBB1551
  br i1 %5699, label %5708, label %5729, !dbg !1901

5708:                                             ; preds = %originalBBpart21553
  %5709 = load i32, i32* @x.17
  %5710 = load i32, i32* @y.18
  %5711 = sub i32 %5709, 1
  %5712 = mul i32 %5709, %5711
  %5713 = urem i32 %5712, 2
  %5714 = icmp eq i32 %5713, 0
  %5715 = icmp slt i32 %5710, 10
  %5716 = or i1 %5714, %5715
  br i1 %5716, label %originalBB1555, label %originalBB1555alteredBB

originalBB1555:                                   ; preds = %5708, %originalBB1555alteredBB
  %5717 = load i8, i8* %39, align 1, !dbg !1898
  %5718 = load i8*, i8** %19, align 8, !dbg !1898
  %5719 = load i64, i64* %29, align 8, !dbg !1898
  %5720 = getelementptr inbounds i8, i8* %5718, i64 %5719, !dbg !1898
  store i8 %5717, i8* %5720, align 1, !dbg !1898
  %5721 = load i32, i32* @x.17
  %5722 = load i32, i32* @y.18
  %5723 = sub i32 %5721, 1
  %5724 = mul i32 %5721, %5723
  %5725 = urem i32 %5724, 2
  %5726 = icmp eq i32 %5725, 0
  %5727 = icmp slt i32 %5722, 10
  %5728 = or i1 %5726, %5727
  br i1 %5728, label %originalBBpart21557, label %originalBB1555alteredBB

originalBBpart21557:                              ; preds = %originalBB1555
  br label %5729, !dbg !1898

5729:                                             ; preds = %originalBBpart21557, %originalBBpart21553
  %5730 = load i32, i32* @x.17
  %5731 = load i32, i32* @y.18
  %5732 = sub i32 %5730, 1
  %5733 = mul i32 %5730, %5732
  %5734 = urem i32 %5733, 2
  %5735 = icmp eq i32 %5734, 0
  %5736 = icmp slt i32 %5731, 10
  %5737 = or i1 %5735, %5736
  br i1 %5737, label %originalBB1559, label %originalBB1559alteredBB

originalBB1559:                                   ; preds = %5729, %originalBB1559alteredBB
  %5738 = load i64, i64* %29, align 8, !dbg !1901
  %5739 = add i64 %5738, 1, !dbg !1901
  store i64 %5739, i64* %29, align 8, !dbg !1901
  %5740 = load i32, i32* @x.17
  %5741 = load i32, i32* @y.18
  %5742 = sub i32 %5740, 1
  %5743 = mul i32 %5740, %5742
  %5744 = urem i32 %5743, 2
  %5745 = icmp eq i32 %5744, 0
  %5746 = icmp slt i32 %5741, 10
  %5747 = or i1 %5745, %5746
  br i1 %5747, label %originalBBpart21573, label %originalBB1559alteredBB

originalBBpart21573:                              ; preds = %originalBB1559
  br label %5748, !dbg !1901

5748:                                             ; preds = %originalBBpart21573
  %5749 = load i8, i8* %43, align 1, !dbg !1902
  %5750 = trunc i8 %5749 to i1, !dbg !1902
  br i1 %5750, label %5768, label %5751, !dbg !1904

5751:                                             ; preds = %5748
  %5752 = load i32, i32* @x.17
  %5753 = load i32, i32* @y.18
  %5754 = sub i32 %5752, 1
  %5755 = mul i32 %5752, %5754
  %5756 = urem i32 %5755, 2
  %5757 = icmp eq i32 %5756, 0
  %5758 = icmp slt i32 %5753, 10
  %5759 = or i1 %5757, %5758
  br i1 %5759, label %originalBB1575, label %originalBB1575alteredBB

originalBB1575:                                   ; preds = %5751, %originalBB1575alteredBB
  store i8 0, i8* %38, align 1, !dbg !1905
  %5760 = load i32, i32* @x.17
  %5761 = load i32, i32* @y.18
  %5762 = sub i32 %5760, 1
  %5763 = mul i32 %5760, %5762
  %5764 = urem i32 %5763, 2
  %5765 = icmp eq i32 %5764, 0
  %5766 = icmp slt i32 %5761, 10
  %5767 = or i1 %5765, %5766
  br i1 %5767, label %originalBBpart21577, label %originalBB1575alteredBB

originalBBpart21577:                              ; preds = %originalBB1575
  br label %5768, !dbg !1906

5768:                                             ; preds = %originalBBpart21577, %5748
  %5769 = load i32, i32* @x.17
  %5770 = load i32, i32* @y.18
  %5771 = sub i32 %5769, 1
  %5772 = mul i32 %5769, %5771
  %5773 = urem i32 %5772, 2
  %5774 = icmp eq i32 %5773, 0
  %5775 = icmp slt i32 %5770, 10
  %5776 = or i1 %5774, %5775
  br i1 %5776, label %originalBB1579, label %originalBB1579alteredBB

originalBB1579:                                   ; preds = %5768, %originalBB1579alteredBB
  %5777 = load i32, i32* @x.17
  %5778 = load i32, i32* @y.18
  %5779 = sub i32 %5777, 1
  %5780 = mul i32 %5777, %5779
  %5781 = urem i32 %5780, 2
  %5782 = icmp eq i32 %5781, 0
  %5783 = icmp slt i32 %5778, 10
  %5784 = or i1 %5782, %5783
  br i1 %5784, label %originalBBpart21581, label %originalBB1579alteredBB

originalBBpart21581:                              ; preds = %originalBB1579
  br label %5785, !dbg !1907

5785:                                             ; preds = %originalBBpart21581, %1682
  %5786 = load i32, i32* @x.17
  %5787 = load i32, i32* @y.18
  %5788 = sub i32 %5786, 1
  %5789 = mul i32 %5786, %5788
  %5790 = urem i32 %5789, 2
  %5791 = icmp eq i32 %5790, 0
  %5792 = icmp slt i32 %5787, 10
  %5793 = or i1 %5791, %5792
  br i1 %5793, label %originalBB1583, label %originalBB1583alteredBB

originalBB1583:                                   ; preds = %5785, %originalBB1583alteredBB
  %5794 = load i64, i64* %28, align 8, !dbg !1908
  %5795 = add i64 %5794, 1, !dbg !1908
  store i64 %5795, i64* %28, align 8, !dbg !1908
  %5796 = load i32, i32* @x.17
  %5797 = load i32, i32* @y.18
  %5798 = sub i32 %5796, 1
  %5799 = mul i32 %5796, %5798
  %5800 = urem i32 %5799, 2
  %5801 = icmp eq i32 %5800, 0
  %5802 = icmp slt i32 %5797, 10
  %5803 = or i1 %5801, %5802
  br i1 %5803, label %originalBBpart21595, label %originalBB1583alteredBB

originalBBpart21595:                              ; preds = %originalBB1583
  br label %714, !dbg !1909, !llvm.loop !1910

5804:                                             ; preds = %originalBBpart2191
  %5805 = load i32, i32* @x.17
  %5806 = load i32, i32* @y.18
  %5807 = sub i32 %5805, 1
  %5808 = mul i32 %5805, %5807
  %5809 = urem i32 %5808, 2
  %5810 = icmp eq i32 %5809, 0
  %5811 = icmp slt i32 %5806, 10
  %5812 = or i1 %5810, %5811
  br i1 %5812, label %originalBB1597, label %originalBB1597alteredBB

originalBB1597:                                   ; preds = %5804, %originalBB1597alteredBB
  %5813 = load i64, i64* %29, align 8, !dbg !1912
  %5814 = icmp eq i64 %5813, 0, !dbg !1914
  %5815 = load i32, i32* @x.17
  %5816 = load i32, i32* @y.18
  %5817 = sub i32 %5815, 1
  %5818 = mul i32 %5815, %5817
  %5819 = urem i32 %5818, 2
  %5820 = icmp eq i32 %5819, 0
  %5821 = icmp slt i32 %5816, 10
  %5822 = or i1 %5820, %5821
  br i1 %5822, label %originalBBpart21599, label %originalBB1597alteredBB

originalBBpart21599:                              ; preds = %originalBB1597
  br i1 %5814, label %5823, label %5878, !dbg !1915

5823:                                             ; preds = %originalBBpart21599
  %5824 = load i32, i32* @x.17
  %5825 = load i32, i32* @y.18
  %5826 = sub i32 %5824, 1
  %5827 = mul i32 %5824, %5826
  %5828 = urem i32 %5827, 2
  %5829 = icmp eq i32 %5828, 0
  %5830 = icmp slt i32 %5825, 10
  %5831 = or i1 %5829, %5830
  br i1 %5831, label %originalBB1601, label %originalBB1601alteredBB

originalBB1601:                                   ; preds = %5823, %originalBB1601alteredBB
  %5832 = load i32, i32* %23, align 4, !dbg !1916
  %5833 = icmp eq i32 %5832, 2, !dbg !1917
  %5834 = load i32, i32* @x.17
  %5835 = load i32, i32* @y.18
  %5836 = sub i32 %5834, 1
  %5837 = mul i32 %5834, %5836
  %5838 = urem i32 %5837, 2
  %5839 = icmp eq i32 %5838, 0
  %5840 = icmp slt i32 %5835, 10
  %5841 = or i1 %5839, %5840
  br i1 %5841, label %originalBBpart21603, label %originalBB1601alteredBB

originalBBpart21603:                              ; preds = %originalBB1601
  br i1 %5833, label %5842, label %5878, !dbg !1918

5842:                                             ; preds = %originalBBpart21603
  %5843 = load i32, i32* @x.17
  %5844 = load i32, i32* @y.18
  %5845 = sub i32 %5843, 1
  %5846 = mul i32 %5843, %5845
  %5847 = urem i32 %5846, 2
  %5848 = icmp eq i32 %5847, 0
  %5849 = icmp slt i32 %5844, 10
  %5850 = or i1 %5848, %5849
  br i1 %5850, label %originalBB1605, label %originalBB1605alteredBB

originalBB1605:                                   ; preds = %5842, %originalBB1605alteredBB
  %5851 = load i8, i8* %35, align 1, !dbg !1919
  %5852 = trunc i8 %5851 to i1, !dbg !1919
  %5853 = load i32, i32* @x.17
  %5854 = load i32, i32* @y.18
  %5855 = sub i32 %5853, 1
  %5856 = mul i32 %5853, %5855
  %5857 = urem i32 %5856, 2
  %5858 = icmp eq i32 %5857, 0
  %5859 = icmp slt i32 %5854, 10
  %5860 = or i1 %5858, %5859
  br i1 %5860, label %originalBBpart21607, label %originalBB1605alteredBB

originalBBpart21607:                              ; preds = %originalBB1605
  br i1 %5852, label %5861, label %5878, !dbg !1920

5861:                                             ; preds = %originalBBpart21607
  %5862 = load i32, i32* @x.17
  %5863 = load i32, i32* @y.18
  %5864 = sub i32 %5862, 1
  %5865 = mul i32 %5862, %5864
  %5866 = urem i32 %5865, 2
  %5867 = icmp eq i32 %5866, 0
  %5868 = icmp slt i32 %5863, 10
  %5869 = or i1 %5867, %5868
  br i1 %5869, label %originalBB1609, label %originalBB1609alteredBB

originalBB1609:                                   ; preds = %5861, %originalBB1609alteredBB
  %5870 = load i32, i32* @x.17
  %5871 = load i32, i32* @y.18
  %5872 = sub i32 %5870, 1
  %5873 = mul i32 %5870, %5872
  %5874 = urem i32 %5873, 2
  %5875 = icmp eq i32 %5874, 0
  %5876 = icmp slt i32 %5871, 10
  %5877 = or i1 %5875, %5876
  br i1 %5877, label %originalBBpart21611, label %originalBB1609alteredBB

originalBBpart21611:                              ; preds = %originalBB1609
  br label %6286, !dbg !1921

5878:                                             ; preds = %originalBBpart21607, %originalBBpart21603, %originalBBpart21599
  %5879 = load i32, i32* @x.17
  %5880 = load i32, i32* @y.18
  %5881 = sub i32 %5879, 1
  %5882 = mul i32 %5879, %5881
  %5883 = urem i32 %5882, 2
  %5884 = icmp eq i32 %5883, 0
  %5885 = icmp slt i32 %5880, 10
  %5886 = or i1 %5884, %5885
  br i1 %5886, label %originalBB1613, label %originalBB1613alteredBB

originalBB1613:                                   ; preds = %5878, %originalBB1613alteredBB
  %5887 = load i32, i32* %23, align 4, !dbg !1922
  %5888 = icmp eq i32 %5887, 2, !dbg !1924
  %5889 = load i32, i32* @x.17
  %5890 = load i32, i32* @y.18
  %5891 = sub i32 %5889, 1
  %5892 = mul i32 %5889, %5891
  %5893 = urem i32 %5892, 2
  %5894 = icmp eq i32 %5893, 0
  %5895 = icmp slt i32 %5890, 10
  %5896 = or i1 %5894, %5895
  br i1 %5896, label %originalBBpart21615, label %originalBB1613alteredBB

originalBBpart21615:                              ; preds = %originalBB1613
  br i1 %5888, label %5897, label %6054, !dbg !1925

5897:                                             ; preds = %originalBBpart21615
  %5898 = load i32, i32* @x.17
  %5899 = load i32, i32* @y.18
  %5900 = sub i32 %5898, 1
  %5901 = mul i32 %5898, %5900
  %5902 = urem i32 %5901, 2
  %5903 = icmp eq i32 %5902, 0
  %5904 = icmp slt i32 %5899, 10
  %5905 = or i1 %5903, %5904
  br i1 %5905, label %originalBB1617, label %originalBB1617alteredBB

originalBB1617:                                   ; preds = %5897, %originalBB1617alteredBB
  %5906 = load i8, i8* %35, align 1, !dbg !1926
  %5907 = trunc i8 %5906 to i1, !dbg !1926
  %5908 = load i32, i32* @x.17
  %5909 = load i32, i32* @y.18
  %5910 = sub i32 %5908, 1
  %5911 = mul i32 %5908, %5910
  %5912 = urem i32 %5911, 2
  %5913 = icmp eq i32 %5912, 0
  %5914 = icmp slt i32 %5909, 10
  %5915 = or i1 %5913, %5914
  br i1 %5915, label %originalBBpart21619, label %originalBB1617alteredBB

originalBBpart21619:                              ; preds = %originalBB1617
  br i1 %5907, label %6054, label %5916, !dbg !1927

5916:                                             ; preds = %originalBBpart21619
  %5917 = load i32, i32* @x.17
  %5918 = load i32, i32* @y.18
  %5919 = sub i32 %5917, 1
  %5920 = mul i32 %5917, %5919
  %5921 = urem i32 %5920, 2
  %5922 = icmp eq i32 %5921, 0
  %5923 = icmp slt i32 %5918, 10
  %5924 = or i1 %5922, %5923
  br i1 %5924, label %originalBB1621, label %originalBB1621alteredBB

originalBB1621:                                   ; preds = %5916, %originalBB1621alteredBB
  %5925 = load i8, i8* %37, align 1, !dbg !1928
  %5926 = trunc i8 %5925 to i1, !dbg !1928
  %5927 = load i32, i32* @x.17
  %5928 = load i32, i32* @y.18
  %5929 = sub i32 %5927, 1
  %5930 = mul i32 %5927, %5929
  %5931 = urem i32 %5930, 2
  %5932 = icmp eq i32 %5931, 0
  %5933 = icmp slt i32 %5928, 10
  %5934 = or i1 %5932, %5933
  br i1 %5934, label %originalBBpart21623, label %originalBB1621alteredBB

originalBBpart21623:                              ; preds = %originalBB1621
  br i1 %5926, label %5935, label %6054, !dbg !1929

5935:                                             ; preds = %originalBBpart21623
  %5936 = load i32, i32* @x.17
  %5937 = load i32, i32* @y.18
  %5938 = sub i32 %5936, 1
  %5939 = mul i32 %5936, %5938
  %5940 = urem i32 %5939, 2
  %5941 = icmp eq i32 %5940, 0
  %5942 = icmp slt i32 %5937, 10
  %5943 = or i1 %5941, %5942
  br i1 %5943, label %originalBB1625, label %originalBB1625alteredBB

originalBB1625:                                   ; preds = %5935, %originalBB1625alteredBB
  %5944 = load i8, i8* %38, align 1, !dbg !1930
  %5945 = trunc i8 %5944 to i1, !dbg !1930
  %5946 = load i32, i32* @x.17
  %5947 = load i32, i32* @y.18
  %5948 = sub i32 %5946, 1
  %5949 = mul i32 %5946, %5948
  %5950 = urem i32 %5949, 2
  %5951 = icmp eq i32 %5950, 0
  %5952 = icmp slt i32 %5947, 10
  %5953 = or i1 %5951, %5952
  br i1 %5953, label %originalBBpart21627, label %originalBB1625alteredBB

originalBBpart21627:                              ; preds = %originalBB1625
  br i1 %5945, label %5954, label %5964, !dbg !1933

5954:                                             ; preds = %originalBBpart21627
  %5955 = load i8*, i8** %19, align 8, !dbg !1934
  %5956 = load i64, i64* %30, align 8, !dbg !1935
  %5957 = load i8*, i8** %21, align 8, !dbg !1936
  %5958 = load i64, i64* %22, align 8, !dbg !1937
  %5959 = load i32, i32* %24, align 4, !dbg !1938
  %5960 = load i32*, i32** %25, align 8, !dbg !1939
  %5961 = load i8*, i8** %26, align 8, !dbg !1940
  %5962 = load i8*, i8** %27, align 8, !dbg !1941
  %5963 = call i64 @quotearg_buffer_restyled(i8* %5955, i64 %5956, i8* %5957, i64 %5958, i32 5, i32 %5959, i32* %5960, i8* %5961, i8* %5962), !dbg !1942
  store i64 %5963, i64* %18, align 8, !dbg !1943
  br label %6368, !dbg !1943

5964:                                             ; preds = %originalBBpart21627
  %5965 = load i32, i32* @x.17
  %5966 = load i32, i32* @y.18
  %5967 = sub i32 %5965, 1
  %5968 = mul i32 %5965, %5967
  %5969 = urem i32 %5968, 2
  %5970 = icmp eq i32 %5969, 0
  %5971 = icmp slt i32 %5966, 10
  %5972 = or i1 %5970, %5971
  br i1 %5972, label %originalBB1629, label %originalBB1629alteredBB

originalBB1629:                                   ; preds = %5964, %originalBB1629alteredBB
  %5973 = load i64, i64* %20, align 8, !dbg !1944
  %5974 = icmp ne i64 %5973, 0, !dbg !1944
  %5975 = load i32, i32* @x.17
  %5976 = load i32, i32* @y.18
  %5977 = sub i32 %5975, 1
  %5978 = mul i32 %5975, %5977
  %5979 = urem i32 %5978, 2
  %5980 = icmp eq i32 %5979, 0
  %5981 = icmp slt i32 %5976, 10
  %5982 = or i1 %5980, %5981
  br i1 %5982, label %originalBBpart21631, label %originalBB1629alteredBB

originalBBpart21631:                              ; preds = %originalBB1629
  br i1 %5974, label %6020, label %5983, !dbg !1946

5983:                                             ; preds = %originalBBpart21631
  %5984 = load i32, i32* @x.17
  %5985 = load i32, i32* @y.18
  %5986 = sub i32 %5984, 1
  %5987 = mul i32 %5984, %5986
  %5988 = urem i32 %5987, 2
  %5989 = icmp eq i32 %5988, 0
  %5990 = icmp slt i32 %5985, 10
  %5991 = or i1 %5989, %5990
  br i1 %5991, label %originalBB1633, label %originalBB1633alteredBB

originalBB1633:                                   ; preds = %5983, %originalBB1633alteredBB
  %5992 = load i64, i64* %30, align 8, !dbg !1947
  %5993 = icmp ne i64 %5992, 0, !dbg !1947
  %5994 = load i32, i32* @x.17
  %5995 = load i32, i32* @y.18
  %5996 = sub i32 %5994, 1
  %5997 = mul i32 %5994, %5996
  %5998 = urem i32 %5997, 2
  %5999 = icmp eq i32 %5998, 0
  %6000 = icmp slt i32 %5995, 10
  %6001 = or i1 %5999, %6000
  br i1 %6001, label %originalBBpart21635, label %originalBB1633alteredBB

originalBBpart21635:                              ; preds = %originalBB1633
  br i1 %5993, label %6002, label %6020, !dbg !1948

6002:                                             ; preds = %originalBBpart21635
  %6003 = load i32, i32* @x.17
  %6004 = load i32, i32* @y.18
  %6005 = sub i32 %6003, 1
  %6006 = mul i32 %6003, %6005
  %6007 = urem i32 %6006, 2
  %6008 = icmp eq i32 %6007, 0
  %6009 = icmp slt i32 %6004, 10
  %6010 = or i1 %6008, %6009
  br i1 %6010, label %originalBB1637, label %originalBB1637alteredBB

originalBB1637:                                   ; preds = %6002, %originalBB1637alteredBB
  %6011 = load i64, i64* %30, align 8, !dbg !1949
  store i64 %6011, i64* %20, align 8, !dbg !1951
  store i64 0, i64* %29, align 8, !dbg !1952
  %6012 = load i32, i32* @x.17
  %6013 = load i32, i32* @y.18
  %6014 = sub i32 %6012, 1
  %6015 = mul i32 %6012, %6014
  %6016 = urem i32 %6015, 2
  %6017 = icmp eq i32 %6016, 0
  %6018 = icmp slt i32 %6013, 10
  %6019 = or i1 %6017, %6018
  br i1 %6019, label %originalBBpart21639, label %originalBB1637alteredBB

originalBBpart21639:                              ; preds = %originalBB1637
  br label %66, !dbg !1953

6020:                                             ; preds = %originalBBpart21635, %originalBBpart21631
  %6021 = load i32, i32* @x.17
  %6022 = load i32, i32* @y.18
  %6023 = sub i32 %6021, 1
  %6024 = mul i32 %6021, %6023
  %6025 = urem i32 %6024, 2
  %6026 = icmp eq i32 %6025, 0
  %6027 = icmp slt i32 %6022, 10
  %6028 = or i1 %6026, %6027
  br i1 %6028, label %originalBB1641, label %originalBB1641alteredBB

originalBB1641:                                   ; preds = %6020, %originalBB1641alteredBB
  %6029 = load i32, i32* @x.17
  %6030 = load i32, i32* @y.18
  %6031 = sub i32 %6029, 1
  %6032 = mul i32 %6029, %6031
  %6033 = urem i32 %6032, 2
  %6034 = icmp eq i32 %6033, 0
  %6035 = icmp slt i32 %6030, 10
  %6036 = or i1 %6034, %6035
  br i1 %6036, label %originalBBpart21643, label %originalBB1641alteredBB

originalBBpart21643:                              ; preds = %originalBB1641
  br label %6037

6037:                                             ; preds = %originalBBpart21643
  %6038 = load i32, i32* @x.17
  %6039 = load i32, i32* @y.18
  %6040 = sub i32 %6038, 1
  %6041 = mul i32 %6038, %6040
  %6042 = urem i32 %6041, 2
  %6043 = icmp eq i32 %6042, 0
  %6044 = icmp slt i32 %6039, 10
  %6045 = or i1 %6043, %6044
  br i1 %6045, label %originalBB1645, label %originalBB1645alteredBB

originalBB1645:                                   ; preds = %6037, %originalBB1645alteredBB
  %6046 = load i32, i32* @x.17
  %6047 = load i32, i32* @y.18
  %6048 = sub i32 %6046, 1
  %6049 = mul i32 %6046, %6048
  %6050 = urem i32 %6049, 2
  %6051 = icmp eq i32 %6050, 0
  %6052 = icmp slt i32 %6047, 10
  %6053 = or i1 %6051, %6052
  br i1 %6053, label %originalBBpart21647, label %originalBB1645alteredBB

originalBBpart21647:                              ; preds = %originalBB1645
  br label %6054, !dbg !1954

6054:                                             ; preds = %originalBBpart21647, %originalBBpart21623, %originalBBpart21619, %originalBBpart21615
  %6055 = load i32, i32* @x.17
  %6056 = load i32, i32* @y.18
  %6057 = sub i32 %6055, 1
  %6058 = mul i32 %6055, %6057
  %6059 = urem i32 %6058, 2
  %6060 = icmp eq i32 %6059, 0
  %6061 = icmp slt i32 %6056, 10
  %6062 = or i1 %6060, %6061
  br i1 %6062, label %originalBB1649, label %originalBB1649alteredBB

originalBB1649:                                   ; preds = %6054, %originalBB1649alteredBB
  %6063 = load i8*, i8** %31, align 8, !dbg !1955
  %6064 = icmp ne i8* %6063, null, !dbg !1955
  %6065 = load i32, i32* @x.17
  %6066 = load i32, i32* @y.18
  %6067 = sub i32 %6065, 1
  %6068 = mul i32 %6065, %6067
  %6069 = urem i32 %6068, 2
  %6070 = icmp eq i32 %6069, 0
  %6071 = icmp slt i32 %6066, 10
  %6072 = or i1 %6070, %6071
  br i1 %6072, label %originalBBpart21651, label %originalBB1649alteredBB

originalBBpart21651:                              ; preds = %originalBB1649
  br i1 %6064, label %6073, label %6228, !dbg !1957

6073:                                             ; preds = %originalBBpart21651
  %6074 = load i32, i32* @x.17
  %6075 = load i32, i32* @y.18
  %6076 = sub i32 %6074, 1
  %6077 = mul i32 %6074, %6076
  %6078 = urem i32 %6077, 2
  %6079 = icmp eq i32 %6078, 0
  %6080 = icmp slt i32 %6075, 10
  %6081 = or i1 %6079, %6080
  br i1 %6081, label %originalBB1653, label %originalBB1653alteredBB

originalBB1653:                                   ; preds = %6073, %originalBB1653alteredBB
  %6082 = load i8, i8* %35, align 1, !dbg !1958
  %6083 = trunc i8 %6082 to i1, !dbg !1958
  %6084 = load i32, i32* @x.17
  %6085 = load i32, i32* @y.18
  %6086 = sub i32 %6084, 1
  %6087 = mul i32 %6084, %6086
  %6088 = urem i32 %6087, 2
  %6089 = icmp eq i32 %6088, 0
  %6090 = icmp slt i32 %6085, 10
  %6091 = or i1 %6089, %6090
  br i1 %6091, label %originalBBpart21655, label %originalBB1653alteredBB

originalBBpart21655:                              ; preds = %originalBB1653
  br i1 %6083, label %6228, label %6092, !dbg !1959

6092:                                             ; preds = %originalBBpart21655
  br label %6093, !dbg !1960

6093:                                             ; preds = %originalBBpart21692, %6092
  %6094 = load i32, i32* @x.17
  %6095 = load i32, i32* @y.18
  %6096 = sub i32 %6094, 1
  %6097 = mul i32 %6094, %6096
  %6098 = urem i32 %6097, 2
  %6099 = icmp eq i32 %6098, 0
  %6100 = icmp slt i32 %6095, 10
  %6101 = or i1 %6099, %6100
  br i1 %6101, label %originalBB1657, label %originalBB1657alteredBB

originalBB1657:                                   ; preds = %6093, %originalBB1657alteredBB
  %6102 = load i8*, i8** %31, align 8, !dbg !1961
  %6103 = load i8, i8* %6102, align 1, !dbg !1964
  %6104 = icmp ne i8 %6103, 0, !dbg !1965
  %6105 = load i32, i32* @x.17
  %6106 = load i32, i32* @y.18
  %6107 = sub i32 %6105, 1
  %6108 = mul i32 %6105, %6107
  %6109 = urem i32 %6108, 2
  %6110 = icmp eq i32 %6109, 0
  %6111 = icmp slt i32 %6106, 10
  %6112 = or i1 %6110, %6111
  br i1 %6112, label %originalBBpart21659, label %originalBB1657alteredBB

originalBBpart21659:                              ; preds = %originalBB1657
  br i1 %6104, label %6113, label %6211, !dbg !1965

6113:                                             ; preds = %originalBBpart21659
  %6114 = load i32, i32* @x.17
  %6115 = load i32, i32* @y.18
  %6116 = sub i32 %6114, 1
  %6117 = mul i32 %6114, %6116
  %6118 = urem i32 %6117, 2
  %6119 = icmp eq i32 %6118, 0
  %6120 = icmp slt i32 %6115, 10
  %6121 = or i1 %6119, %6120
  br i1 %6121, label %originalBB1661, label %originalBB1661alteredBB

originalBB1661:                                   ; preds = %6113, %originalBB1661alteredBB
  %6122 = load i32, i32* @x.17
  %6123 = load i32, i32* @y.18
  %6124 = sub i32 %6122, 1
  %6125 = mul i32 %6122, %6124
  %6126 = urem i32 %6125, 2
  %6127 = icmp eq i32 %6126, 0
  %6128 = icmp slt i32 %6123, 10
  %6129 = or i1 %6127, %6128
  br i1 %6129, label %originalBBpart21663, label %originalBB1661alteredBB

originalBBpart21663:                              ; preds = %originalBB1661
  br label %6130, !dbg !1966

6130:                                             ; preds = %originalBBpart21663
  %6131 = load i64, i64* %29, align 8, !dbg !1967
  %6132 = load i64, i64* %20, align 8, !dbg !1967
  %6133 = icmp ult i64 %6131, %6132, !dbg !1967
  br i1 %6133, label %6134, label %6156, !dbg !1970

6134:                                             ; preds = %6130
  %6135 = load i32, i32* @x.17
  %6136 = load i32, i32* @y.18
  %6137 = sub i32 %6135, 1
  %6138 = mul i32 %6135, %6137
  %6139 = urem i32 %6138, 2
  %6140 = icmp eq i32 %6139, 0
  %6141 = icmp slt i32 %6136, 10
  %6142 = or i1 %6140, %6141
  br i1 %6142, label %originalBB1665, label %originalBB1665alteredBB

originalBB1665:                                   ; preds = %6134, %originalBB1665alteredBB
  %6143 = load i8*, i8** %31, align 8, !dbg !1967
  %6144 = load i8, i8* %6143, align 1, !dbg !1967
  %6145 = load i8*, i8** %19, align 8, !dbg !1967
  %6146 = load i64, i64* %29, align 8, !dbg !1967
  %6147 = getelementptr inbounds i8, i8* %6145, i64 %6146, !dbg !1967
  store i8 %6144, i8* %6147, align 1, !dbg !1967
  %6148 = load i32, i32* @x.17
  %6149 = load i32, i32* @y.18
  %6150 = sub i32 %6148, 1
  %6151 = mul i32 %6148, %6150
  %6152 = urem i32 %6151, 2
  %6153 = icmp eq i32 %6152, 0
  %6154 = icmp slt i32 %6149, 10
  %6155 = or i1 %6153, %6154
  br i1 %6155, label %originalBBpart21667, label %originalBB1665alteredBB

originalBBpart21667:                              ; preds = %originalBB1665
  br label %6156, !dbg !1967

6156:                                             ; preds = %originalBBpart21667, %6130
  %6157 = load i32, i32* @x.17
  %6158 = load i32, i32* @y.18
  %6159 = sub i32 %6157, 1
  %6160 = mul i32 %6157, %6159
  %6161 = urem i32 %6160, 2
  %6162 = icmp eq i32 %6161, 0
  %6163 = icmp slt i32 %6158, 10
  %6164 = or i1 %6162, %6163
  br i1 %6164, label %originalBB1669, label %originalBB1669alteredBB

originalBB1669:                                   ; preds = %6156, %originalBB1669alteredBB
  %6165 = load i64, i64* %29, align 8, !dbg !1970
  %6166 = add i64 %6165, 1, !dbg !1970
  store i64 %6166, i64* %29, align 8, !dbg !1970
  %6167 = load i32, i32* @x.17
  %6168 = load i32, i32* @y.18
  %6169 = sub i32 %6167, 1
  %6170 = mul i32 %6167, %6169
  %6171 = urem i32 %6170, 2
  %6172 = icmp eq i32 %6171, 0
  %6173 = icmp slt i32 %6168, 10
  %6174 = or i1 %6172, %6173
  br i1 %6174, label %originalBBpart21684, label %originalBB1669alteredBB

originalBBpart21684:                              ; preds = %originalBB1669
  br label %6175, !dbg !1970

6175:                                             ; preds = %originalBBpart21684
  %6176 = load i32, i32* @x.17
  %6177 = load i32, i32* @y.18
  %6178 = sub i32 %6176, 1
  %6179 = mul i32 %6176, %6178
  %6180 = urem i32 %6179, 2
  %6181 = icmp eq i32 %6180, 0
  %6182 = icmp slt i32 %6177, 10
  %6183 = or i1 %6181, %6182
  br i1 %6183, label %originalBB1686, label %originalBB1686alteredBB

originalBB1686:                                   ; preds = %6175, %originalBB1686alteredBB
  %6184 = load i32, i32* @x.17
  %6185 = load i32, i32* @y.18
  %6186 = sub i32 %6184, 1
  %6187 = mul i32 %6184, %6186
  %6188 = urem i32 %6187, 2
  %6189 = icmp eq i32 %6188, 0
  %6190 = icmp slt i32 %6185, 10
  %6191 = or i1 %6189, %6190
  br i1 %6191, label %originalBBpart21688, label %originalBB1686alteredBB

originalBBpart21688:                              ; preds = %originalBB1686
  br label %6192, !dbg !1970

6192:                                             ; preds = %originalBBpart21688
  %6193 = load i32, i32* @x.17
  %6194 = load i32, i32* @y.18
  %6195 = sub i32 %6193, 1
  %6196 = mul i32 %6193, %6195
  %6197 = urem i32 %6196, 2
  %6198 = icmp eq i32 %6197, 0
  %6199 = icmp slt i32 %6194, 10
  %6200 = or i1 %6198, %6199
  br i1 %6200, label %originalBB1690, label %originalBB1690alteredBB

originalBB1690:                                   ; preds = %6192, %originalBB1690alteredBB
  %6201 = load i8*, i8** %31, align 8, !dbg !1971
  %6202 = getelementptr inbounds i8, i8* %6201, i32 1, !dbg !1971
  store i8* %6202, i8** %31, align 8, !dbg !1971
  %6203 = load i32, i32* @x.17
  %6204 = load i32, i32* @y.18
  %6205 = sub i32 %6203, 1
  %6206 = mul i32 %6203, %6205
  %6207 = urem i32 %6206, 2
  %6208 = icmp eq i32 %6207, 0
  %6209 = icmp slt i32 %6204, 10
  %6210 = or i1 %6208, %6209
  br i1 %6210, label %originalBBpart21692, label %originalBB1690alteredBB

originalBBpart21692:                              ; preds = %originalBB1690
  br label %6093, !dbg !1972, !llvm.loop !1973

6211:                                             ; preds = %originalBBpart21659
  %6212 = load i32, i32* @x.17
  %6213 = load i32, i32* @y.18
  %6214 = sub i32 %6212, 1
  %6215 = mul i32 %6212, %6214
  %6216 = urem i32 %6215, 2
  %6217 = icmp eq i32 %6216, 0
  %6218 = icmp slt i32 %6213, 10
  %6219 = or i1 %6217, %6218
  br i1 %6219, label %originalBB1694, label %originalBB1694alteredBB

originalBB1694:                                   ; preds = %6211, %originalBB1694alteredBB
  %6220 = load i32, i32* @x.17
  %6221 = load i32, i32* @y.18
  %6222 = sub i32 %6220, 1
  %6223 = mul i32 %6220, %6222
  %6224 = urem i32 %6223, 2
  %6225 = icmp eq i32 %6224, 0
  %6226 = icmp slt i32 %6221, 10
  %6227 = or i1 %6225, %6226
  br i1 %6227, label %originalBBpart21696, label %originalBB1694alteredBB

originalBBpart21696:                              ; preds = %originalBB1694
  br label %6228, !dbg !1974

6228:                                             ; preds = %originalBBpart21696, %originalBBpart21655, %originalBBpart21651
  %6229 = load i32, i32* @x.17
  %6230 = load i32, i32* @y.18
  %6231 = sub i32 %6229, 1
  %6232 = mul i32 %6229, %6231
  %6233 = urem i32 %6232, 2
  %6234 = icmp eq i32 %6233, 0
  %6235 = icmp slt i32 %6230, 10
  %6236 = or i1 %6234, %6235
  br i1 %6236, label %originalBB1698, label %originalBB1698alteredBB

originalBB1698:                                   ; preds = %6228, %originalBB1698alteredBB
  %6237 = load i64, i64* %29, align 8, !dbg !1975
  %6238 = load i64, i64* %20, align 8, !dbg !1977
  %6239 = icmp ult i64 %6237, %6238, !dbg !1978
  %6240 = load i32, i32* @x.17
  %6241 = load i32, i32* @y.18
  %6242 = sub i32 %6240, 1
  %6243 = mul i32 %6240, %6242
  %6244 = urem i32 %6243, 2
  %6245 = icmp eq i32 %6244, 0
  %6246 = icmp slt i32 %6241, 10
  %6247 = or i1 %6245, %6246
  br i1 %6247, label %originalBBpart21700, label %originalBB1698alteredBB

originalBBpart21700:                              ; preds = %originalBB1698
  br i1 %6239, label %6248, label %6268, !dbg !1979

6248:                                             ; preds = %originalBBpart21700
  %6249 = load i32, i32* @x.17
  %6250 = load i32, i32* @y.18
  %6251 = sub i32 %6249, 1
  %6252 = mul i32 %6249, %6251
  %6253 = urem i32 %6252, 2
  %6254 = icmp eq i32 %6253, 0
  %6255 = icmp slt i32 %6250, 10
  %6256 = or i1 %6254, %6255
  br i1 %6256, label %originalBB1702, label %originalBB1702alteredBB

originalBB1702:                                   ; preds = %6248, %originalBB1702alteredBB
  %6257 = load i8*, i8** %19, align 8, !dbg !1980
  %6258 = load i64, i64* %29, align 8, !dbg !1981
  %6259 = getelementptr inbounds i8, i8* %6257, i64 %6258, !dbg !1980
  store i8 0, i8* %6259, align 1, !dbg !1982
  %6260 = load i32, i32* @x.17
  %6261 = load i32, i32* @y.18
  %6262 = sub i32 %6260, 1
  %6263 = mul i32 %6260, %6262
  %6264 = urem i32 %6263, 2
  %6265 = icmp eq i32 %6264, 0
  %6266 = icmp slt i32 %6261, 10
  %6267 = or i1 %6265, %6266
  br i1 %6267, label %originalBBpart21704, label %originalBB1702alteredBB

originalBBpart21704:                              ; preds = %originalBB1702
  br label %6268, !dbg !1980

6268:                                             ; preds = %originalBBpart21704, %originalBBpart21700
  %6269 = load i32, i32* @x.17
  %6270 = load i32, i32* @y.18
  %6271 = sub i32 %6269, 1
  %6272 = mul i32 %6269, %6271
  %6273 = urem i32 %6272, 2
  %6274 = icmp eq i32 %6273, 0
  %6275 = icmp slt i32 %6270, 10
  %6276 = or i1 %6274, %6275
  br i1 %6276, label %originalBB1706, label %originalBB1706alteredBB

originalBB1706:                                   ; preds = %6268, %originalBB1706alteredBB
  %6277 = load i64, i64* %29, align 8, !dbg !1983
  store i64 %6277, i64* %18, align 8, !dbg !1984
  %6278 = load i32, i32* @x.17
  %6279 = load i32, i32* @y.18
  %6280 = sub i32 %6278, 1
  %6281 = mul i32 %6278, %6280
  %6282 = urem i32 %6281, 2
  %6283 = icmp eq i32 %6282, 0
  %6284 = icmp slt i32 %6279, 10
  %6285 = or i1 %6283, %6284
  br i1 %6285, label %originalBBpart21708, label %originalBB1706alteredBB

originalBBpart21708:                              ; preds = %originalBB1706
  br label %6368, !dbg !1984

6286:                                             ; preds = %originalBBpart21611, %originalBBpart21393, %originalBBpart21035, %originalBBpart2959, %originalBBpart2735, %2824, %originalBBpart2663, %originalBBpart2627, %originalBBpart2511, %originalBBpart2461, %originalBBpart2249, %963
  call void @llvm.dbg.label(metadata !1985), !dbg !1986
  %6287 = load i32, i32* @x.17
  %6288 = load i32, i32* @y.18
  %6289 = sub i32 %6287, 1
  %6290 = mul i32 %6287, %6289
  %6291 = urem i32 %6290, 2
  %6292 = icmp eq i32 %6291, 0
  %6293 = icmp slt i32 %6288, 10
  %6294 = or i1 %6292, %6293
  br i1 %6294, label %originalBB1710, label %originalBB1710alteredBB

originalBB1710:                                   ; preds = %6286, %originalBB1710alteredBB
  %6295 = load i32, i32* %23, align 4, !dbg !1987
  %6296 = icmp eq i32 %6295, 2, !dbg !1989
  %6297 = load i32, i32* @x.17
  %6298 = load i32, i32* @y.18
  %6299 = sub i32 %6297, 1
  %6300 = mul i32 %6297, %6299
  %6301 = urem i32 %6300, 2
  %6302 = icmp eq i32 %6301, 0
  %6303 = icmp slt i32 %6298, 10
  %6304 = or i1 %6302, %6303
  br i1 %6304, label %originalBBpart21712, label %originalBB1710alteredBB

originalBBpart21712:                              ; preds = %originalBB1710
  br i1 %6296, label %6305, label %6341, !dbg !1990

6305:                                             ; preds = %originalBBpart21712
  %6306 = load i32, i32* @x.17
  %6307 = load i32, i32* @y.18
  %6308 = sub i32 %6306, 1
  %6309 = mul i32 %6306, %6308
  %6310 = urem i32 %6309, 2
  %6311 = icmp eq i32 %6310, 0
  %6312 = icmp slt i32 %6307, 10
  %6313 = or i1 %6311, %6312
  br i1 %6313, label %originalBB1714, label %originalBB1714alteredBB

originalBB1714:                                   ; preds = %6305, %originalBB1714alteredBB
  %6314 = load i8, i8* %33, align 1, !dbg !1991
  %6315 = trunc i8 %6314 to i1, !dbg !1991
  %6316 = load i32, i32* @x.17
  %6317 = load i32, i32* @y.18
  %6318 = sub i32 %6316, 1
  %6319 = mul i32 %6316, %6318
  %6320 = urem i32 %6319, 2
  %6321 = icmp eq i32 %6320, 0
  %6322 = icmp slt i32 %6317, 10
  %6323 = or i1 %6321, %6322
  br i1 %6323, label %originalBBpart21716, label %originalBB1714alteredBB

originalBBpart21716:                              ; preds = %originalBB1714
  br i1 %6315, label %6324, label %6341, !dbg !1992

6324:                                             ; preds = %originalBBpart21716
  %6325 = load i32, i32* @x.17
  %6326 = load i32, i32* @y.18
  %6327 = sub i32 %6325, 1
  %6328 = mul i32 %6325, %6327
  %6329 = urem i32 %6328, 2
  %6330 = icmp eq i32 %6329, 0
  %6331 = icmp slt i32 %6326, 10
  %6332 = or i1 %6330, %6331
  br i1 %6332, label %originalBB1718, label %originalBB1718alteredBB

originalBB1718:                                   ; preds = %6324, %originalBB1718alteredBB
  store i32 4, i32* %23, align 4, !dbg !1993
  %6333 = load i32, i32* @x.17
  %6334 = load i32, i32* @y.18
  %6335 = sub i32 %6333, 1
  %6336 = mul i32 %6333, %6335
  %6337 = urem i32 %6336, 2
  %6338 = icmp eq i32 %6337, 0
  %6339 = icmp slt i32 %6334, 10
  %6340 = or i1 %6338, %6339
  br i1 %6340, label %originalBBpart21720, label %originalBB1718alteredBB

originalBBpart21720:                              ; preds = %originalBB1718
  br label %6341, !dbg !1994

6341:                                             ; preds = %originalBBpart21720, %originalBBpart21716, %originalBBpart21712
  %6342 = load i32, i32* @x.17
  %6343 = load i32, i32* @y.18
  %6344 = sub i32 %6342, 1
  %6345 = mul i32 %6342, %6344
  %6346 = urem i32 %6345, 2
  %6347 = icmp eq i32 %6346, 0
  %6348 = icmp slt i32 %6343, 10
  %6349 = or i1 %6347, %6348
  br i1 %6349, label %originalBB1722, label %originalBB1722alteredBB

originalBB1722:                                   ; preds = %6341, %originalBB1722alteredBB
  %6350 = load i8*, i8** %19, align 8, !dbg !1995
  %6351 = load i64, i64* %20, align 8, !dbg !1996
  %6352 = load i8*, i8** %21, align 8, !dbg !1997
  %6353 = load i64, i64* %22, align 8, !dbg !1998
  %6354 = load i32, i32* %23, align 4, !dbg !1999
  %6355 = load i32, i32* %24, align 4, !dbg !2000
  %6356 = and i32 %6355, -3, !dbg !2001
  %6357 = load i8*, i8** %26, align 8, !dbg !2002
  %6358 = load i8*, i8** %27, align 8, !dbg !2003
  %6359 = call i64 @quotearg_buffer_restyled(i8* %6350, i64 %6351, i8* %6352, i64 %6353, i32 %6354, i32 %6356, i32* null, i8* %6357, i8* %6358), !dbg !2004
  store i64 %6359, i64* %18, align 8, !dbg !2005
  %6360 = load i32, i32* @x.17
  %6361 = load i32, i32* @y.18
  %6362 = sub i32 %6360, 1
  %6363 = mul i32 %6360, %6362
  %6364 = urem i32 %6363, 2
  %6365 = icmp eq i32 %6364, 0
  %6366 = icmp slt i32 %6361, 10
  %6367 = or i1 %6365, %6366
  br i1 %6367, label %originalBBpart21727, label %originalBB1722alteredBB

originalBBpart21727:                              ; preds = %originalBB1722
  br label %6368, !dbg !2005

6368:                                             ; preds = %originalBBpart21727, %originalBBpart21708, %5954
  %6369 = load i32, i32* @x.17
  %6370 = load i32, i32* @y.18
  %6371 = sub i32 %6369, 1
  %6372 = mul i32 %6369, %6371
  %6373 = urem i32 %6372, 2
  %6374 = icmp eq i32 %6373, 0
  %6375 = icmp slt i32 %6370, 10
  %6376 = or i1 %6374, %6375
  br i1 %6376, label %originalBB1729, label %originalBB1729alteredBB

originalBB1729:                                   ; preds = %6368, %originalBB1729alteredBB
  %6377 = load i64, i64* %18, align 8, !dbg !2006
  %6378 = load i32, i32* @x.17
  %6379 = load i32, i32* @y.18
  %6380 = sub i32 %6378, 1
  %6381 = mul i32 %6378, %6380
  %6382 = urem i32 %6381, 2
  %6383 = icmp eq i32 %6382, 0
  %6384 = icmp slt i32 %6379, 10
  %6385 = or i1 %6383, %6384
  br i1 %6385, label %originalBBpart21731, label %originalBB1729alteredBB

originalBBpart21731:                              ; preds = %originalBB1729
  ret i64 %6377, !dbg !2006

originalBBalteredBB:                              ; preds = %originalBB, %9
  %6386 = alloca i64, align 8
  %6387 = alloca i8*, align 8
  %6388 = alloca i64, align 8
  %6389 = alloca i8*, align 8
  %6390 = alloca i64, align 8
  %6391 = alloca i32, align 4
  %6392 = alloca i32, align 4
  %6393 = alloca i32*, align 8
  %6394 = alloca i8*, align 8
  %6395 = alloca i8*, align 8
  %6396 = alloca i64, align 8
  %6397 = alloca i64, align 8
  %6398 = alloca i64, align 8
  %6399 = alloca i8*, align 8
  %6400 = alloca i64, align 8
  %6401 = alloca i8, align 1
  %6402 = alloca i8, align 1
  %6403 = alloca i8, align 1
  %6404 = alloca i8, align 1
  %6405 = alloca i8, align 1
  %6406 = alloca i8, align 1
  %6407 = alloca i8, align 1
  %6408 = alloca i8, align 1
  %6409 = alloca i8, align 1
  %6410 = alloca i8, align 1
  %6411 = alloca i8, align 1
  %6412 = alloca i64, align 8
  %6413 = alloca i8, align 1
  %6414 = alloca %struct.__mbstate_t, align 4
  %6415 = alloca i32, align 4
  %6416 = alloca i64, align 8
  %6417 = alloca i64, align 8
  %6418 = alloca i64, align 8
  store i8* %0, i8** %6387, align 8
  call void @llvm.dbg.declare(metadata i8** %6387, metadata !2007, metadata !DIExpression()), !dbg !1127
  store i64 %1, i64* %6388, align 8
  call void @llvm.dbg.declare(metadata i64* %6388, metadata !2039, metadata !DIExpression()), !dbg !1129
  store i8* %2, i8** %6389, align 8
  call void @llvm.dbg.declare(metadata i8** %6389, metadata !2040, metadata !DIExpression()), !dbg !1131
  store i64 %3, i64* %6390, align 8
  call void @llvm.dbg.declare(metadata i64* %6390, metadata !2041, metadata !DIExpression()), !dbg !1133
  store i32 %4, i32* %6391, align 4
  call void @llvm.dbg.declare(metadata i32* %6391, metadata !2042, metadata !DIExpression()), !dbg !1135
  store i32 %5, i32* %6392, align 4
  call void @llvm.dbg.declare(metadata i32* %6392, metadata !2043, metadata !DIExpression()), !dbg !1137
  store i32* %6, i32** %6393, align 8
  call void @llvm.dbg.declare(metadata i32** %6393, metadata !2044, metadata !DIExpression()), !dbg !1139
  store i8* %7, i8** %6394, align 8
  call void @llvm.dbg.declare(metadata i8** %6394, metadata !2045, metadata !DIExpression()), !dbg !1141
  store i8* %8, i8** %6395, align 8
  call void @llvm.dbg.declare(metadata i8** %6395, metadata !2046, metadata !DIExpression()), !dbg !1143
  call void @llvm.dbg.declare(metadata i64* %6396, metadata !2047, metadata !DIExpression()), !dbg !1145
  call void @llvm.dbg.declare(metadata i64* %6397, metadata !2048, metadata !DIExpression()), !dbg !1147
  store i64 0, i64* %6397, align 8, !dbg !1147
  call void @llvm.dbg.declare(metadata i64* %6398, metadata !2049, metadata !DIExpression()), !dbg !1149
  store i64 0, i64* %6398, align 8, !dbg !1149
  call void @llvm.dbg.declare(metadata i8** %6399, metadata !2050, metadata !DIExpression()), !dbg !1151
  store i8* null, i8** %6399, align 8, !dbg !1151
  call void @llvm.dbg.declare(metadata i64* %6400, metadata !2051, metadata !DIExpression()), !dbg !1153
  store i64 0, i64* %6400, align 8, !dbg !1153
  call void @llvm.dbg.declare(metadata i8* %6401, metadata !2052, metadata !DIExpression()), !dbg !1155
  store i8 0, i8* %6401, align 1, !dbg !1155
  call void @llvm.dbg.declare(metadata i8* %6402, metadata !2053, metadata !DIExpression()), !dbg !1157
  %6419 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1158
  %6420 = icmp eq i64 %6419, 1, !dbg !1159
  %6421 = zext i1 %6420 to i8, !dbg !1157
  store i8 %6421, i8* %6402, align 1, !dbg !1157
  call void @llvm.dbg.declare(metadata i8* %6403, metadata !2054, metadata !DIExpression()), !dbg !1161
  %6422 = load i32, i32* %6392, align 4, !dbg !1162
  %_ = sub i32 0, %6422
  %gen = add i32 %_, 2
  %_1 = sub i32 0, %6422
  %gen2 = add i32 %_1, 2
  %_3 = sub i32 %6422, 2
  %gen4 = mul i32 %_3, 2
  %_5 = shl i32 %6422, 2
  %6423 = and i32 %6422, 2, !dbg !1163
  %6424 = icmp ne i32 %6423, 0, !dbg !1164
  %6425 = zext i1 %6424 to i8, !dbg !1161
  store i8 %6425, i8* %6403, align 1, !dbg !1161
  call void @llvm.dbg.declare(metadata i8* %6404, metadata !2055, metadata !DIExpression()), !dbg !1166
  store i8 0, i8* %6404, align 1, !dbg !1166
  call void @llvm.dbg.declare(metadata i8* %6405, metadata !2056, metadata !DIExpression()), !dbg !1168
  store i8 0, i8* %6405, align 1, !dbg !1168
  call void @llvm.dbg.declare(metadata i8* %6406, metadata !2057, metadata !DIExpression()), !dbg !1170
  store i8 1, i8* %6406, align 1, !dbg !1170
  br label %originalBB

originalBB6alteredBB:                             ; preds = %originalBB6, %66
  %6426 = load i32, i32* %23, align 4, !dbg !1174
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %84
  store i32 5, i32* %23, align 4, !dbg !1176
  store i8 1, i8* %35, align 1, !dbg !1178
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %101
  %6427 = load i8, i8* %35, align 1, !dbg !1180
  %6428 = trunc i8 %6427 to i1, !dbg !1180
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %120
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %137
  %6429 = load i64, i64* %29, align 8, !dbg !1184
  %6430 = load i64, i64* %20, align 8, !dbg !1184
  %6431 = icmp ult i64 %6429, %6430, !dbg !1184
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %157
  %6432 = load i8*, i8** %19, align 8, !dbg !1184
  %6433 = load i64, i64* %29, align 8, !dbg !1184
  %6434 = getelementptr inbounds i8, i8* %6432, i64 %6433, !dbg !1184
  store i8 34, i8* %6434, align 1, !dbg !1184
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %177
  %6435 = load i64, i64* %29, align 8, !dbg !1187
  %_31 = sub i64 0, %6435
  %gen32 = add i64 %_31, 1
  %_33 = sub i64 0, %6435
  %gen34 = add i64 %_33, 1
  %_35 = sub i64 0, %6435
  %gen36 = add i64 %_35, 1
  %6436 = add i64 %6435, 1, !dbg !1187
  store i64 %6436, i64* %29, align 8, !dbg !1187
  br label %originalBB30

originalBB40alteredBB:                            ; preds = %originalBB40, %198
  store i8 1, i8* %33, align 1, !dbg !1192
  store i8 0, i8* %35, align 1, !dbg !1193
  br label %originalBB40

originalBB44alteredBB:                            ; preds = %originalBB44, %215
  %6437 = load i32, i32* %23, align 4, !dbg !1195
  %6438 = icmp ne i32 %6437, 10, !dbg !1198
  br label %originalBB44

originalBB48alteredBB:                            ; preds = %originalBB48, %234
  %6439 = load i32, i32* %23, align 4, !dbg !1200
  %6440 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.53, i64 0, i64 0), i32 %6439), !dbg !1202
  store i8* %6440, i8** %26, align 8, !dbg !1203
  %6441 = load i32, i32* %23, align 4, !dbg !1204
  %6442 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.54, i64 0, i64 0), i32 %6441), !dbg !1205
  store i8* %6442, i8** %27, align 8, !dbg !1206
  br label %originalBB48

originalBB52alteredBB:                            ; preds = %originalBB52, %255
  %6443 = load i8, i8* %35, align 1, !dbg !1208
  %6444 = trunc i8 %6443 to i1, !dbg !1208
  br label %originalBB52

originalBB56alteredBB:                            ; preds = %originalBB56, %274
  %6445 = load i8*, i8** %26, align 8, !dbg !1211
  store i8* %6445, i8** %31, align 8, !dbg !1213
  br label %originalBB56

originalBB60alteredBB:                            ; preds = %originalBB60, %292
  %6446 = load i8*, i8** %31, align 8, !dbg !1215
  %6447 = load i8, i8* %6446, align 1, !dbg !1217
  %6448 = icmp ne i8 %6447, 0, !dbg !1218
  br label %originalBB60

originalBB64alteredBB:                            ; preds = %originalBB64, %312
  br label %originalBB64

originalBB68alteredBB:                            ; preds = %originalBB68, %329
  %6449 = load i64, i64* %29, align 8, !dbg !1220
  %6450 = load i64, i64* %20, align 8, !dbg !1220
  %6451 = icmp ult i64 %6449, %6450, !dbg !1220
  br label %originalBB68

originalBB72alteredBB:                            ; preds = %originalBB72, %349
  %6452 = load i8*, i8** %31, align 8, !dbg !1220
  %6453 = load i8, i8* %6452, align 1, !dbg !1220
  %6454 = load i8*, i8** %19, align 8, !dbg !1220
  %6455 = load i64, i64* %29, align 8, !dbg !1220
  %6456 = getelementptr inbounds i8, i8* %6454, i64 %6455, !dbg !1220
  store i8 %6453, i8* %6456, align 1, !dbg !1220
  br label %originalBB72

originalBB76alteredBB:                            ; preds = %originalBB76, %371
  %6457 = load i64, i64* %29, align 8, !dbg !1223
  %_77 = shl i64 %6457, 1
  %_78 = sub i64 0, %6457
  %gen79 = add i64 %_78, 1
  %_80 = shl i64 %6457, 1
  %_81 = sub i64 %6457, 1
  %gen82 = mul i64 %_81, 1
  %_83 = sub i64 %6457, 1
  %gen84 = mul i64 %_83, 1
  %_85 = sub i64 %6457, 1
  %gen86 = mul i64 %_85, 1
  %6458 = add i64 %6457, 1, !dbg !1223
  store i64 %6458, i64* %29, align 8, !dbg !1223
  br label %originalBB76

originalBB90alteredBB:                            ; preds = %originalBB90, %390
  br label %originalBB90

originalBB94alteredBB:                            ; preds = %originalBB94, %410
  br label %originalBB94

originalBB98alteredBB:                            ; preds = %originalBB98, %427
  store i8 1, i8* %33, align 1, !dbg !1228
  %6459 = load i8*, i8** %27, align 8, !dbg !1229
  store i8* %6459, i8** %31, align 8, !dbg !1230
  %6460 = load i8*, i8** %31, align 8, !dbg !1231
  %6461 = call i64 @strlen(i8* %6460) #13, !dbg !1232
  store i64 %6461, i64* %32, align 8, !dbg !1233
  br label %originalBB98

originalBB102alteredBB:                           ; preds = %originalBB102, %447
  store i8 1, i8* %33, align 1, !dbg !1235
  br label %originalBB102

originalBB106alteredBB:                           ; preds = %originalBB106, %464
  store i8 1, i8* %35, align 1, !dbg !1237
  br label %originalBB106

originalBB110alteredBB:                           ; preds = %originalBB110, %481
  %6462 = load i8, i8* %35, align 1, !dbg !1239
  %6463 = trunc i8 %6462 to i1, !dbg !1239
  br label %originalBB110

originalBB114alteredBB:                           ; preds = %originalBB114, %500
  store i8 1, i8* %33, align 1, !dbg !1242
  br label %originalBB114

originalBB118alteredBB:                           ; preds = %originalBB118, %517
  br label %originalBB118

originalBB122alteredBB:                           ; preds = %originalBB122, %534
  store i32 2, i32* %23, align 4, !dbg !1245
  %6464 = load i8, i8* %35, align 1, !dbg !1246
  %6465 = trunc i8 %6464 to i1, !dbg !1246
  br label %originalBB122

originalBB126alteredBB:                           ; preds = %originalBB126, %553
  br label %originalBB126

originalBB130alteredBB:                           ; preds = %originalBB130, %570
  %6466 = load i64, i64* %29, align 8, !dbg !1250
  %6467 = load i64, i64* %20, align 8, !dbg !1250
  %6468 = icmp ult i64 %6466, %6467, !dbg !1250
  br label %originalBB130

originalBB134alteredBB:                           ; preds = %originalBB134, %590
  %6469 = load i8*, i8** %19, align 8, !dbg !1250
  %6470 = load i64, i64* %29, align 8, !dbg !1250
  %6471 = getelementptr inbounds i8, i8* %6469, i64 %6470, !dbg !1250
  store i8 39, i8* %6471, align 1, !dbg !1250
  br label %originalBB134

originalBB138alteredBB:                           ; preds = %originalBB138, %610
  %6472 = load i64, i64* %29, align 8, !dbg !1253
  %_139 = sub i64 %6472, 1
  %gen140 = mul i64 %_139, 1
  %_141 = sub i64 0, %6472
  %gen142 = add i64 %_141, 1
  %_143 = sub i64 %6472, 1
  %gen144 = mul i64 %_143, 1
  %_145 = sub i64 0, %6472
  %gen146 = add i64 %_145, 1
  %_147 = sub i64 %6472, 1
  %gen148 = mul i64 %_147, 1
  %_149 = shl i64 %6472, 1
  %6473 = add i64 %6472, 1, !dbg !1253
  store i64 %6473, i64* %29, align 8, !dbg !1253
  br label %originalBB138

originalBB153alteredBB:                           ; preds = %originalBB153, %629
  br label %originalBB153

originalBB157alteredBB:                           ; preds = %originalBB157, %646
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.54, i64 0, i64 0), i8** %31, align 8, !dbg !1254
  store i64 1, i64* %32, align 8, !dbg !1255
  br label %originalBB157

originalBB161alteredBB:                           ; preds = %originalBB161, %663
  store i8 0, i8* %35, align 1, !dbg !1257
  br label %originalBB161

originalBB165alteredBB:                           ; preds = %originalBB165, %680
  call void @abort() #12, !dbg !1259
  br label %originalBB165

originalBB169alteredBB:                           ; preds = %originalBB169, %697
  store i64 0, i64* %28, align 8, !dbg !1260
  br label %originalBB169

originalBB173alteredBB:                           ; preds = %originalBB173, %714
  %6474 = load i64, i64* %22, align 8, !dbg !1263
  %6475 = icmp eq i64 %6474, -1, !dbg !1265
  br label %originalBB173

originalBB177alteredBB:                           ; preds = %originalBB177, %733
  %6476 = load i8*, i8** %21, align 8, !dbg !1266
  %6477 = load i64, i64* %28, align 8, !dbg !1267
  %6478 = getelementptr inbounds i8, i8* %6476, i64 %6477, !dbg !1266
  %6479 = load i8, i8* %6478, align 1, !dbg !1266
  %6480 = sext i8 %6479 to i32, !dbg !1266
  %6481 = icmp eq i32 %6480, 0, !dbg !1268
  %6482 = zext i1 %6481 to i32, !dbg !1268
  br label %originalBB177

originalBB181alteredBB:                           ; preds = %originalBB181, %757
  %6483 = load i64, i64* %28, align 8, !dbg !1269
  %6484 = load i64, i64* %22, align 8, !dbg !1270
  %6485 = icmp eq i64 %6483, %6484, !dbg !1271
  %6486 = zext i1 %6485 to i32, !dbg !1271
  br label %originalBB181

originalBB185alteredBB:                           ; preds = %originalBB185, %778
  %6487 = icmp ne i32 %779, 0, !dbg !1272
  %_186 = sub i1 false, %6487
  %gen187 = add i1 %_186, true
  %_188 = sub i1 false, %6487
  %gen189 = add i1 %_188, true
  %6488 = xor i1 %6487, true, !dbg !1272
  br label %originalBB185

originalBB193alteredBB:                           ; preds = %originalBB193, %798
  store i8 0, i8* %41, align 1, !dbg !1280
  call void @llvm.dbg.declare(metadata !4, metadata !2058, metadata !DIExpression()), !dbg !1282
  store i8 0, i8* %42, align 1, !dbg !1282
  call void @llvm.dbg.declare(metadata !4, metadata !2093, metadata !DIExpression()), !dbg !1284
  store i8 0, i8* %43, align 1, !dbg !1284
  %6489 = load i8, i8* %33, align 1, !dbg !1285
  %6490 = trunc i8 %6489 to i1, !dbg !1285
  br label %originalBB193

originalBB197alteredBB:                           ; preds = %originalBB197, %820
  %6491 = load i64, i64* %32, align 8, !dbg !1291
  %6492 = icmp ne i64 %6491, 0, !dbg !1291
  br label %originalBB197

originalBB201alteredBB:                           ; preds = %originalBB201, %839
  %6493 = load i64, i64* %28, align 8, !dbg !1293
  %6494 = load i64, i64* %32, align 8, !dbg !1294
  %_202 = shl i64 %6493, %6494
  %6495 = add i64 %6493, %6494, !dbg !1295
  %6496 = load i64, i64* %22, align 8, !dbg !1296
  %6497 = icmp eq i64 %6496, -1, !dbg !1297
  br label %originalBB201

originalBB206alteredBB:                           ; preds = %originalBB206, %861
  %6498 = load i64, i64* %32, align 8, !dbg !1299
  %6499 = icmp ult i64 1, %6498, !dbg !1300
  br label %originalBB206

originalBB210alteredBB:                           ; preds = %originalBB210, %880
  %6500 = load i8*, i8** %21, align 8, !dbg !1301
  %6501 = call i64 @strlen(i8* %6500) #13, !dbg !1302
  store i64 %6501, i64* %22, align 8, !dbg !1303
  br label %originalBB210

originalBB214alteredBB:                           ; preds = %originalBB214, %899
  %6502 = load i64, i64* %22, align 8, !dbg !1304
  br label %originalBB214

originalBB218alteredBB:                           ; preds = %originalBB218, %917
  %6503 = icmp ule i64 %850, %918, !dbg !1305
  br label %originalBB218

originalBB222alteredBB:                           ; preds = %originalBB222, %936
  %6504 = load i8*, i8** %21, align 8, !dbg !1307
  %6505 = load i64, i64* %28, align 8, !dbg !1308
  %6506 = getelementptr inbounds i8, i8* %6504, i64 %6505, !dbg !1309
  %6507 = load i8*, i8** %31, align 8, !dbg !1310
  %6508 = load i64, i64* %32, align 8, !dbg !1311
  %6509 = call i32 @memcmp(i8* %6506, i8* %6507, i64 %6508) #13, !dbg !1312
  %6510 = icmp eq i32 %6509, 0, !dbg !1313
  br label %originalBB222

originalBB226alteredBB:                           ; preds = %originalBB226, %964
  store i8 1, i8* %41, align 1, !dbg !1320
  br label %originalBB226

originalBB230alteredBB:                           ; preds = %originalBB230, %981
  %6511 = load i8*, i8** %21, align 8, !dbg !1322
  %6512 = load i64, i64* %28, align 8, !dbg !1323
  %6513 = getelementptr inbounds i8, i8* %6511, i64 %6512, !dbg !1322
  %6514 = load i8, i8* %6513, align 1, !dbg !1322
  store i8 %6514, i8* %39, align 1, !dbg !1324
  %6515 = load i8, i8* %39, align 1, !dbg !1325
  %6516 = zext i8 %6515 to i32, !dbg !1325
  br label %originalBB230

originalBB234alteredBB:                           ; preds = %originalBB234, %1004
  %6517 = load i8, i8* %33, align 1, !dbg !1327
  %6518 = trunc i8 %6517 to i1, !dbg !1327
  br label %originalBB234

originalBB238alteredBB:                           ; preds = %originalBB238, %1023
  br label %originalBB238

originalBB243alteredBB:                           ; preds = %originalBB243, %1040
  %6519 = load i8, i8* %35, align 1, !dbg !1333
  %6520 = trunc i8 %6519 to i1, !dbg !1333
  br label %originalBB243

originalBB247alteredBB:                           ; preds = %originalBB247, %1059
  br label %originalBB247

originalBB251alteredBB:                           ; preds = %originalBB251, %1076
  store i8 1, i8* %42, align 1, !dbg !1336
  %6521 = load i32, i32* %23, align 4, !dbg !1337
  %6522 = icmp eq i32 %6521, 2, !dbg !1337
  br label %originalBB251

originalBB255alteredBB:                           ; preds = %originalBB255, %1095
  %6523 = load i8, i8* %36, align 1, !dbg !1337
  %6524 = trunc i8 %6523 to i1, !dbg !1337
  br label %originalBB255

originalBB259alteredBB:                           ; preds = %originalBB259, %1114
  br label %originalBB259

originalBB263alteredBB:                           ; preds = %originalBB263, %1131
  %6525 = load i64, i64* %29, align 8, !dbg !1341
  %6526 = load i64, i64* %20, align 8, !dbg !1341
  %6527 = icmp ult i64 %6525, %6526, !dbg !1341
  br label %originalBB263

originalBB267alteredBB:                           ; preds = %originalBB267, %1151
  %6528 = load i8*, i8** %19, align 8, !dbg !1341
  %6529 = load i64, i64* %29, align 8, !dbg !1341
  %6530 = getelementptr inbounds i8, i8* %6528, i64 %6529, !dbg !1341
  store i8 39, i8* %6530, align 1, !dbg !1341
  br label %originalBB267

originalBB271alteredBB:                           ; preds = %originalBB271, %1171
  %6531 = load i64, i64* %29, align 8, !dbg !1344
  %_272 = sub i64 0, %6531
  %gen273 = add i64 %_272, 1
  %_274 = sub i64 %6531, 1
  %gen275 = mul i64 %_274, 1
  %_276 = sub i64 0, %6531
  %gen277 = add i64 %_276, 1
  %_278 = shl i64 %6531, 1
  %_279 = shl i64 %6531, 1
  %6532 = add i64 %6531, 1, !dbg !1344
  store i64 %6532, i64* %29, align 8, !dbg !1344
  br label %originalBB271

originalBB283alteredBB:                           ; preds = %originalBB283, %1190
  br label %originalBB283

originalBB287alteredBB:                           ; preds = %originalBB287, %1207
  %6533 = load i64, i64* %29, align 8, !dbg !1345
  %6534 = load i64, i64* %20, align 8, !dbg !1345
  %6535 = icmp ult i64 %6533, %6534, !dbg !1345
  br label %originalBB287

originalBB291alteredBB:                           ; preds = %originalBB291, %1227
  %6536 = load i8*, i8** %19, align 8, !dbg !1345
  %6537 = load i64, i64* %29, align 8, !dbg !1345
  %6538 = getelementptr inbounds i8, i8* %6536, i64 %6537, !dbg !1345
  store i8 36, i8* %6538, align 1, !dbg !1345
  br label %originalBB291

originalBB295alteredBB:                           ; preds = %originalBB295, %1247
  %6539 = load i64, i64* %29, align 8, !dbg !1348
  %_296 = shl i64 %6539, 1
  %_297 = sub i64 0, %6539
  %gen298 = add i64 %_297, 1
  %_299 = sub i64 %6539, 1
  %gen300 = mul i64 %_299, 1
  %_301 = sub i64 0, %6539
  %gen302 = add i64 %_301, 1
  %6540 = add i64 %6539, 1, !dbg !1348
  store i64 %6540, i64* %29, align 8, !dbg !1348
  br label %originalBB295

originalBB306alteredBB:                           ; preds = %originalBB306, %1267
  %6541 = load i64, i64* %29, align 8, !dbg !1349
  %6542 = load i64, i64* %20, align 8, !dbg !1349
  %6543 = icmp ult i64 %6541, %6542, !dbg !1349
  br label %originalBB306

originalBB310alteredBB:                           ; preds = %originalBB310, %1287
  %6544 = load i8*, i8** %19, align 8, !dbg !1349
  %6545 = load i64, i64* %29, align 8, !dbg !1349
  %6546 = getelementptr inbounds i8, i8* %6544, i64 %6545, !dbg !1349
  store i8 39, i8* %6546, align 1, !dbg !1349
  br label %originalBB310

originalBB314alteredBB:                           ; preds = %originalBB314, %1307
  %6547 = load i64, i64* %29, align 8, !dbg !1352
  %_315 = sub i64 0, %6547
  %gen316 = add i64 %_315, 1
  %_317 = sub i64 %6547, 1
  %gen318 = mul i64 %_317, 1
  %_319 = shl i64 %6547, 1
  %_320 = sub i64 %6547, 1
  %gen321 = mul i64 %_320, 1
  %_322 = sub i64 %6547, 1
  %gen323 = mul i64 %_322, 1
  %_324 = shl i64 %6547, 1
  %6548 = add i64 %6547, 1, !dbg !1352
  store i64 %6548, i64* %29, align 8, !dbg !1352
  br label %originalBB314

originalBB328alteredBB:                           ; preds = %originalBB328, %1326
  store i8 1, i8* %36, align 1, !dbg !1339
  br label %originalBB328

originalBB332alteredBB:                           ; preds = %originalBB332, %1343
  br label %originalBB332

originalBB336alteredBB:                           ; preds = %originalBB336, %1360
  %6549 = load i64, i64* %29, align 8, !dbg !1353
  %6550 = load i64, i64* %20, align 8, !dbg !1353
  %6551 = icmp ult i64 %6549, %6550, !dbg !1353
  br label %originalBB336

originalBB340alteredBB:                           ; preds = %originalBB340, %1380
  %6552 = load i8*, i8** %19, align 8, !dbg !1353
  %6553 = load i64, i64* %29, align 8, !dbg !1353
  %6554 = getelementptr inbounds i8, i8* %6552, i64 %6553, !dbg !1353
  store i8 92, i8* %6554, align 1, !dbg !1353
  br label %originalBB340

originalBB344alteredBB:                           ; preds = %originalBB344, %1407
  %6555 = load i64, i64* %28, align 8, !dbg !1361
  %6556 = add i64 %6555, 1, !dbg !1362
  %6557 = load i64, i64* %22, align 8, !dbg !1363
  %6558 = icmp ult i64 %6556, %6557, !dbg !1364
  br label %originalBB344

originalBB348alteredBB:                           ; preds = %originalBB348, %1428
  %6559 = load i8*, i8** %21, align 8, !dbg !1366
  %6560 = load i64, i64* %28, align 8, !dbg !1367
  %_349 = sub i64 %6560, 1
  %gen350 = mul i64 %_349, 1
  %_351 = sub i64 0, %6560
  %gen352 = add i64 %_351, 1
  %_353 = sub i64 0, %6560
  %gen354 = add i64 %_353, 1
  %_355 = shl i64 %6560, 1
  %6561 = add i64 %6560, 1, !dbg !1368
  %6562 = getelementptr inbounds i8, i8* %6559, i64 %6561, !dbg !1366
  %6563 = load i8, i8* %6562, align 1, !dbg !1366
  %6564 = sext i8 %6563 to i32, !dbg !1366
  %6565 = icmp sle i32 48, %6564, !dbg !1369
  br label %originalBB348

originalBB359alteredBB:                           ; preds = %originalBB359, %1452
  %6566 = load i8*, i8** %21, align 8, !dbg !1371
  %6567 = load i64, i64* %28, align 8, !dbg !1372
  %_360 = sub i64 %6567, 1
  %gen361 = mul i64 %_360, 1
  %_362 = sub i64 %6567, 1
  %gen363 = mul i64 %_362, 1
  %_364 = shl i64 %6567, 1
  %_365 = sub i64 0, %6567
  %gen366 = add i64 %_365, 1
  %_367 = sub i64 0, %6567
  %gen368 = add i64 %_367, 1
  %_369 = sub i64 %6567, 1
  %gen370 = mul i64 %_369, 1
  %_371 = sub i64 %6567, 1
  %gen372 = mul i64 %_371, 1
  %6568 = add i64 %6567, 1, !dbg !1373
  %6569 = getelementptr inbounds i8, i8* %6566, i64 %6568, !dbg !1371
  %6570 = load i8, i8* %6569, align 1, !dbg !1371
  %6571 = sext i8 %6570 to i32, !dbg !1371
  %6572 = icmp sle i32 %6571, 57, !dbg !1374
  br label %originalBB359

originalBB376alteredBB:                           ; preds = %originalBB376, %1476
  br label %originalBB376

originalBB380alteredBB:                           ; preds = %originalBB380, %1493
  %6573 = load i64, i64* %29, align 8, !dbg !1378
  %6574 = load i64, i64* %20, align 8, !dbg !1378
  %6575 = icmp ult i64 %6573, %6574, !dbg !1378
  br label %originalBB380

originalBB384alteredBB:                           ; preds = %originalBB384, %1513
  %6576 = load i8*, i8** %19, align 8, !dbg !1378
  %6577 = load i64, i64* %29, align 8, !dbg !1378
  %6578 = getelementptr inbounds i8, i8* %6576, i64 %6577, !dbg !1378
  store i8 48, i8* %6578, align 1, !dbg !1378
  br label %originalBB384

originalBB388alteredBB:                           ; preds = %originalBB388, %1533
  %6579 = load i64, i64* %29, align 8, !dbg !1381
  %_389 = sub i64 0, %6579
  %gen390 = add i64 %_389, 1
  %_391 = sub i64 %6579, 1
  %gen392 = mul i64 %_391, 1
  %_393 = sub i64 %6579, 1
  %gen394 = mul i64 %_393, 1
  %_395 = sub i64 %6579, 1
  %gen396 = mul i64 %_395, 1
  %_397 = sub i64 0, %6579
  %gen398 = add i64 %_397, 1
  %6580 = add i64 %6579, 1, !dbg !1381
  store i64 %6580, i64* %29, align 8, !dbg !1381
  br label %originalBB388

originalBB402alteredBB:                           ; preds = %originalBB402, %1552
  br label %originalBB402

originalBB406alteredBB:                           ; preds = %originalBB406, %1569
  %6581 = load i64, i64* %29, align 8, !dbg !1383
  %6582 = load i64, i64* %20, align 8, !dbg !1383
  %6583 = icmp ult i64 %6581, %6582, !dbg !1383
  br label %originalBB406

originalBB410alteredBB:                           ; preds = %originalBB410, %1589
  %6584 = load i8*, i8** %19, align 8, !dbg !1383
  %6585 = load i64, i64* %29, align 8, !dbg !1383
  %6586 = getelementptr inbounds i8, i8* %6584, i64 %6585, !dbg !1383
  store i8 48, i8* %6586, align 1, !dbg !1383
  br label %originalBB410

originalBB414alteredBB:                           ; preds = %originalBB414, %1609
  %6587 = load i64, i64* %29, align 8, !dbg !1386
  %_415 = sub i64 %6587, 1
  %gen416 = mul i64 %_415, 1
  %_417 = sub i64 0, %6587
  %gen418 = add i64 %_417, 1
  %_419 = shl i64 %6587, 1
  %_420 = sub i64 0, %6587
  %gen421 = add i64 %_420, 1
  %_422 = sub i64 0, %6587
  %gen423 = add i64 %_422, 1
  %_424 = sub i64 0, %6587
  %gen425 = add i64 %_424, 1
  %_426 = shl i64 %6587, 1
  %6588 = add i64 %6587, 1, !dbg !1386
  store i64 %6588, i64* %29, align 8, !dbg !1386
  br label %originalBB414

originalBB430alteredBB:                           ; preds = %originalBB430, %1628
  br label %originalBB430

originalBB434alteredBB:                           ; preds = %originalBB434, %1645
  store i8 48, i8* %39, align 1, !dbg !1388
  br label %originalBB434

originalBB438alteredBB:                           ; preds = %originalBB438, %1662
  %6589 = load i32, i32* %24, align 4, !dbg !1390
  %_439 = shl i32 %6589, 1
  %_440 = sub i32 %6589, 1
  %gen441 = mul i32 %_440, 1
  %_442 = sub i32 0, %6589
  %gen443 = add i32 %_442, 1
  %_444 = shl i32 %6589, 1
  %_445 = sub i32 0, %6589
  %gen446 = add i32 %_445, 1
  %_447 = shl i32 %6589, 1
  %6590 = and i32 %6589, 1, !dbg !1392
  %6591 = icmp ne i32 %6590, 0, !dbg !1392
  br label %originalBB438

originalBB451alteredBB:                           ; preds = %originalBB451, %1683
  br label %originalBB451

originalBB455alteredBB:                           ; preds = %originalBB455, %1703
  %6592 = load i8, i8* %35, align 1, !dbg !1398
  %6593 = trunc i8 %6592 to i1, !dbg !1398
  br label %originalBB455

originalBB459alteredBB:                           ; preds = %originalBB459, %1722
  br label %originalBB459

originalBB463alteredBB:                           ; preds = %originalBB463, %1739
  br label %originalBB463

originalBB467alteredBB:                           ; preds = %originalBB467, %1756
  %6594 = load i32, i32* %24, align 4, !dbg !1404
  %_468 = sub i32 %6594, 4
  %gen469 = mul i32 %_468, 4
  %_470 = sub i32 0, %6594
  %gen471 = add i32 %_470, 4
  %_472 = sub i32 %6594, 4
  %gen473 = mul i32 %_472, 4
  %_474 = shl i32 %6594, 4
  %6595 = and i32 %6594, 4, !dbg !1406
  %6596 = icmp ne i32 %6595, 0, !dbg !1406
  br label %originalBB467

originalBB478alteredBB:                           ; preds = %originalBB478, %1776
  %6597 = load i64, i64* %28, align 8, !dbg !1408
  %_479 = sub i64 %6597, 2
  %gen480 = mul i64 %_479, 2
  %6598 = add i64 %6597, 2, !dbg !1409
  %6599 = load i64, i64* %22, align 8, !dbg !1410
  %6600 = icmp ult i64 %6598, %6599, !dbg !1411
  br label %originalBB478

originalBB484alteredBB:                           ; preds = %originalBB484, %1797
  %6601 = load i8*, i8** %21, align 8, !dbg !1413
  %6602 = load i64, i64* %28, align 8, !dbg !1414
  %_485 = sub i64 0, %6602
  %gen486 = add i64 %_485, 1
  %_487 = shl i64 %6602, 1
  %_488 = shl i64 %6602, 1
  %_489 = sub i64 %6602, 1
  %gen490 = mul i64 %_489, 1
  %6603 = add i64 %6602, 1, !dbg !1415
  %6604 = getelementptr inbounds i8, i8* %6601, i64 %6603, !dbg !1413
  %6605 = load i8, i8* %6604, align 1, !dbg !1413
  %6606 = sext i8 %6605 to i32, !dbg !1413
  %6607 = icmp eq i32 %6606, 63, !dbg !1416
  br label %originalBB484

originalBB494alteredBB:                           ; preds = %originalBB494, %1821
  %6608 = load i8*, i8** %21, align 8, !dbg !1418
  %6609 = load i64, i64* %28, align 8, !dbg !1419
  %_495 = sub i64 0, %6609
  %gen496 = add i64 %_495, 2
  %_497 = shl i64 %6609, 2
  %_498 = sub i64 %6609, 2
  %gen499 = mul i64 %_498, 2
  %_500 = sub i64 %6609, 2
  %gen501 = mul i64 %_500, 2
  %6610 = add i64 %6609, 2, !dbg !1420
  %6611 = getelementptr inbounds i8, i8* %6608, i64 %6610, !dbg !1418
  %6612 = load i8, i8* %6611, align 1, !dbg !1418
  %6613 = sext i8 %6612 to i32, !dbg !1418
  br label %originalBB494

originalBB505alteredBB:                           ; preds = %originalBB505, %1844
  %6614 = load i8, i8* %35, align 1, !dbg !1422
  %6615 = trunc i8 %6614 to i1, !dbg !1422
  br label %originalBB505

originalBB509alteredBB:                           ; preds = %originalBB509, %1863
  br label %originalBB509

originalBB513alteredBB:                           ; preds = %originalBB513, %1880
  %6616 = load i8*, i8** %21, align 8, !dbg !1427
  %6617 = load i64, i64* %28, align 8, !dbg !1428
  %_514 = shl i64 %6617, 2
  %6618 = add i64 %6617, 2, !dbg !1429
  %6619 = getelementptr inbounds i8, i8* %6616, i64 %6618, !dbg !1427
  %6620 = load i8, i8* %6619, align 1, !dbg !1427
  store i8 %6620, i8* %39, align 1, !dbg !1430
  %6621 = load i64, i64* %28, align 8, !dbg !1431
  %_515 = sub i64 %6621, 2
  %gen516 = mul i64 %_515, 2
  %6622 = add i64 %6621, 2, !dbg !1431
  store i64 %6622, i64* %28, align 8, !dbg !1431
  br label %originalBB513

originalBB520alteredBB:                           ; preds = %originalBB520, %1904
  %6623 = load i64, i64* %29, align 8, !dbg !1433
  %6624 = load i64, i64* %20, align 8, !dbg !1433
  %6625 = icmp ult i64 %6623, %6624, !dbg !1433
  br label %originalBB520

originalBB524alteredBB:                           ; preds = %originalBB524, %1931
  br label %originalBB524

originalBB528alteredBB:                           ; preds = %originalBB528, %1948
  %6626 = load i64, i64* %29, align 8, !dbg !1438
  %6627 = load i64, i64* %20, align 8, !dbg !1438
  %6628 = icmp ult i64 %6626, %6627, !dbg !1438
  br label %originalBB528

originalBB532alteredBB:                           ; preds = %originalBB532, %1968
  %6629 = load i8*, i8** %19, align 8, !dbg !1438
  %6630 = load i64, i64* %29, align 8, !dbg !1438
  %6631 = getelementptr inbounds i8, i8* %6629, i64 %6630, !dbg !1438
  store i8 34, i8* %6631, align 1, !dbg !1438
  br label %originalBB532

originalBB536alteredBB:                           ; preds = %originalBB536, %1988
  %6632 = load i64, i64* %29, align 8, !dbg !1441
  %_537 = sub i64 %6632, 1
  %gen538 = mul i64 %_537, 1
  %6633 = add i64 %6632, 1, !dbg !1441
  store i64 %6633, i64* %29, align 8, !dbg !1441
  br label %originalBB536

originalBB542alteredBB:                           ; preds = %originalBB542, %2007
  br label %originalBB542

originalBB546alteredBB:                           ; preds = %originalBB546, %2024
  %6634 = load i64, i64* %29, align 8, !dbg !1443
  %6635 = load i64, i64* %20, align 8, !dbg !1443
  %6636 = icmp ult i64 %6634, %6635, !dbg !1443
  br label %originalBB546

originalBB550alteredBB:                           ; preds = %originalBB550, %2044
  %6637 = load i8*, i8** %19, align 8, !dbg !1443
  %6638 = load i64, i64* %29, align 8, !dbg !1443
  %6639 = getelementptr inbounds i8, i8* %6637, i64 %6638, !dbg !1443
  store i8 34, i8* %6639, align 1, !dbg !1443
  br label %originalBB550

originalBB554alteredBB:                           ; preds = %originalBB554, %2064
  %6640 = load i64, i64* %29, align 8, !dbg !1446
  %_555 = sub i64 0, %6640
  %gen556 = add i64 %_555, 1
  %_557 = shl i64 %6640, 1
  %6641 = add i64 %6640, 1, !dbg !1446
  store i64 %6641, i64* %29, align 8, !dbg !1446
  br label %originalBB554

originalBB561alteredBB:                           ; preds = %originalBB561, %2083
  br label %originalBB561

originalBB565alteredBB:                           ; preds = %originalBB565, %2100
  %6642 = load i64, i64* %29, align 8, !dbg !1448
  %6643 = load i64, i64* %20, align 8, !dbg !1448
  %6644 = icmp ult i64 %6642, %6643, !dbg !1448
  br label %originalBB565

originalBB569alteredBB:                           ; preds = %originalBB569, %2120
  %6645 = load i8*, i8** %19, align 8, !dbg !1448
  %6646 = load i64, i64* %29, align 8, !dbg !1448
  %6647 = getelementptr inbounds i8, i8* %6645, i64 %6646, !dbg !1448
  store i8 63, i8* %6647, align 1, !dbg !1448
  br label %originalBB569

originalBB573alteredBB:                           ; preds = %originalBB573, %2143
  br label %originalBB573

originalBB577alteredBB:                           ; preds = %originalBB577, %2160
  br label %originalBB577

originalBB581alteredBB:                           ; preds = %originalBB581, %2177
  br label %originalBB581

originalBB585alteredBB:                           ; preds = %originalBB585, %2195
  br label %originalBB585

originalBB589alteredBB:                           ; preds = %originalBB589, %2212
  br label %originalBB589

originalBB593alteredBB:                           ; preds = %originalBB593, %2230
  store i8 98, i8* %40, align 1, !dbg !1460
  br label %originalBB593

originalBB597alteredBB:                           ; preds = %originalBB597, %2247
  store i8 102, i8* %40, align 1, !dbg !1462
  br label %originalBB597

originalBB601alteredBB:                           ; preds = %originalBB601, %2264
  store i8 110, i8* %40, align 1, !dbg !1464
  br label %originalBB601

originalBB605alteredBB:                           ; preds = %originalBB605, %2281
  store i8 114, i8* %40, align 1, !dbg !1466
  br label %originalBB605

originalBB609alteredBB:                           ; preds = %originalBB609, %2298
  store i8 116, i8* %40, align 1, !dbg !1468
  br label %originalBB609

originalBB613alteredBB:                           ; preds = %originalBB613, %2315
  store i8 118, i8* %40, align 1, !dbg !1470
  br label %originalBB613

originalBB617alteredBB:                           ; preds = %originalBB617, %2332
  %6648 = load i8, i8* %39, align 1, !dbg !1472
  store i8 %6648, i8* %40, align 1, !dbg !1473
  %6649 = load i32, i32* %23, align 4, !dbg !1474
  %6650 = icmp eq i32 %6649, 2, !dbg !1476
  br label %originalBB617

originalBB621alteredBB:                           ; preds = %originalBB621, %2352
  %6651 = load i8, i8* %35, align 1, !dbg !1478
  %6652 = trunc i8 %6651 to i1, !dbg !1478
  br label %originalBB621

originalBB625alteredBB:                           ; preds = %originalBB625, %2371
  br label %originalBB625

originalBB629alteredBB:                           ; preds = %originalBB629, %2388
  br label %originalBB629

originalBB633alteredBB:                           ; preds = %originalBB633, %2405
  %6653 = load i8, i8* %33, align 1, !dbg !1484
  %6654 = trunc i8 %6653 to i1, !dbg !1484
  br label %originalBB633

originalBB637alteredBB:                           ; preds = %originalBB637, %2424
  %6655 = load i8, i8* %35, align 1, !dbg !1487
  %6656 = trunc i8 %6655 to i1, !dbg !1487
  br label %originalBB637

originalBB641alteredBB:                           ; preds = %originalBB641, %2443
  %6657 = load i64, i64* %32, align 8, !dbg !1489
  %6658 = icmp ne i64 %6657, 0, !dbg !1489
  br label %originalBB641

originalBB645alteredBB:                           ; preds = %originalBB645, %2462
  br label %originalBB645

originalBB649alteredBB:                           ; preds = %originalBB649, %2479
  br label %originalBB649

originalBB653alteredBB:                           ; preds = %originalBB653, %2496
  %6659 = load i32, i32* %23, align 4, !dbg !1494
  %6660 = icmp eq i32 %6659, 2, !dbg !1496
  br label %originalBB653

originalBB657alteredBB:                           ; preds = %originalBB657, %2515
  %6661 = load i8, i8* %35, align 1, !dbg !1498
  %6662 = trunc i8 %6661 to i1, !dbg !1498
  br label %originalBB657

originalBB661alteredBB:                           ; preds = %originalBB661, %2534
  br label %originalBB661

originalBB665alteredBB:                           ; preds = %originalBB665, %2551
  br label %originalBB665

originalBB669alteredBB:                           ; preds = %originalBB669, %2568
  %6663 = load i8, i8* %33, align 1, !dbg !1503
  %6664 = trunc i8 %6663 to i1, !dbg !1503
  br label %originalBB669

originalBB673alteredBB:                           ; preds = %originalBB673, %2587
  %6665 = load i8, i8* %40, align 1, !dbg !1506
  store i8 %6665, i8* %39, align 1, !dbg !1508
  br label %originalBB673

originalBB677alteredBB:                           ; preds = %originalBB677, %2605
  br label %originalBB677

originalBB681alteredBB:                           ; preds = %originalBB681, %2622
  %6666 = load i64, i64* %22, align 8, !dbg !1511
  %6667 = icmp eq i64 %6666, -1, !dbg !1513
  br label %originalBB681

originalBB685alteredBB:                           ; preds = %originalBB685, %2641
  %6668 = load i8*, i8** %21, align 8, !dbg !1515
  %6669 = getelementptr inbounds i8, i8* %6668, i64 1, !dbg !1515
  %6670 = load i8, i8* %6669, align 1, !dbg !1515
  %6671 = sext i8 %6670 to i32, !dbg !1515
  %6672 = icmp eq i32 %6671, 0, !dbg !1516
  br label %originalBB685

originalBB689alteredBB:                           ; preds = %originalBB689, %2663
  %6673 = load i64, i64* %22, align 8, !dbg !1517
  %6674 = icmp eq i64 %6673, 1, !dbg !1518
  br label %originalBB689

originalBB693alteredBB:                           ; preds = %originalBB693, %2682
  br label %originalBB693

originalBB697alteredBB:                           ; preds = %originalBB697, %2699
  br label %originalBB697

originalBB701alteredBB:                           ; preds = %originalBB701, %2716
  %6675 = load i64, i64* %28, align 8, !dbg !1521
  %6676 = icmp ne i64 %6675, 0, !dbg !1523
  br label %originalBB701

originalBB705alteredBB:                           ; preds = %originalBB705, %2735
  br label %originalBB705

originalBB709alteredBB:                           ; preds = %originalBB709, %2752
  br label %originalBB709

originalBB713alteredBB:                           ; preds = %originalBB713, %2769
  store i8 1, i8* %43, align 1, !dbg !1527
  br label %originalBB713

originalBB717alteredBB:                           ; preds = %originalBB717, %2786
  %6677 = load i32, i32* %23, align 4, !dbg !1529
  %6678 = icmp eq i32 %6677, 2, !dbg !1531
  br label %originalBB717

originalBB721alteredBB:                           ; preds = %originalBB721, %2805
  %6679 = load i8, i8* %35, align 1, !dbg !1533
  %6680 = trunc i8 %6679 to i1, !dbg !1533
  br label %originalBB721

originalBB725alteredBB:                           ; preds = %originalBB725, %2826
  store i8 1, i8* %37, align 1, !dbg !1537
  store i8 1, i8* %43, align 1, !dbg !1538
  %6681 = load i32, i32* %23, align 4, !dbg !1539
  %6682 = icmp eq i32 %6681, 2, !dbg !1541
  br label %originalBB725

originalBB729alteredBB:                           ; preds = %originalBB729, %2845
  %6683 = load i8, i8* %35, align 1, !dbg !1543
  %6684 = trunc i8 %6683 to i1, !dbg !1543
  br label %originalBB729

originalBB733alteredBB:                           ; preds = %originalBB733, %2864
  br label %originalBB733

originalBB737alteredBB:                           ; preds = %originalBB737, %2881
  %6685 = load i64, i64* %20, align 8, !dbg !1548
  %6686 = icmp ne i64 %6685, 0, !dbg !1548
  br label %originalBB737

originalBB741alteredBB:                           ; preds = %originalBB741, %2900
  %6687 = load i64, i64* %30, align 8, !dbg !1551
  %6688 = icmp ne i64 %6687, 0, !dbg !1551
  br label %originalBB741

originalBB745alteredBB:                           ; preds = %originalBB745, %2919
  %6689 = load i64, i64* %20, align 8, !dbg !1553
  store i64 %6689, i64* %30, align 8, !dbg !1555
  store i64 0, i64* %20, align 8, !dbg !1556
  br label %originalBB745

originalBB749alteredBB:                           ; preds = %originalBB749, %2937
  br label %originalBB749

originalBB753alteredBB:                           ; preds = %originalBB753, %2954
  %6690 = load i64, i64* %29, align 8, !dbg !1559
  %6691 = load i64, i64* %20, align 8, !dbg !1559
  %6692 = icmp ult i64 %6690, %6691, !dbg !1559
  br label %originalBB753

originalBB757alteredBB:                           ; preds = %originalBB757, %2974
  %6693 = load i8*, i8** %19, align 8, !dbg !1559
  %6694 = load i64, i64* %29, align 8, !dbg !1559
  %6695 = getelementptr inbounds i8, i8* %6693, i64 %6694, !dbg !1559
  store i8 39, i8* %6695, align 1, !dbg !1559
  br label %originalBB757

originalBB761alteredBB:                           ; preds = %originalBB761, %2997
  br label %originalBB761

originalBB765alteredBB:                           ; preds = %originalBB765, %3014
  %6696 = load i64, i64* %29, align 8, !dbg !1564
  %6697 = load i64, i64* %20, align 8, !dbg !1564
  %6698 = icmp ult i64 %6696, %6697, !dbg !1564
  br label %originalBB765

originalBB769alteredBB:                           ; preds = %originalBB769, %3038
  %6699 = load i64, i64* %29, align 8, !dbg !1567
  %_770 = sub i64 %6699, 1
  %gen771 = mul i64 %_770, 1
  %_772 = sub i64 %6699, 1
  %gen773 = mul i64 %_772, 1
  %_774 = shl i64 %6699, 1
  %_775 = sub i64 %6699, 1
  %gen776 = mul i64 %_775, 1
  %_777 = sub i64 %6699, 1
  %gen778 = mul i64 %_777, 1
  %_779 = sub i64 %6699, 1
  %gen780 = mul i64 %_779, 1
  %_781 = shl i64 %6699, 1
  %6700 = add i64 %6699, 1, !dbg !1567
  store i64 %6700, i64* %29, align 8, !dbg !1567
  br label %originalBB769

originalBB785alteredBB:                           ; preds = %originalBB785, %3057
  br label %originalBB785

originalBB789alteredBB:                           ; preds = %originalBB789, %3074
  %6701 = load i64, i64* %29, align 8, !dbg !1569
  %6702 = load i64, i64* %20, align 8, !dbg !1569
  %6703 = icmp ult i64 %6701, %6702, !dbg !1569
  br label %originalBB789

originalBB793alteredBB:                           ; preds = %originalBB793, %3094
  %6704 = load i8*, i8** %19, align 8, !dbg !1569
  %6705 = load i64, i64* %29, align 8, !dbg !1569
  %6706 = getelementptr inbounds i8, i8* %6704, i64 %6705, !dbg !1569
  store i8 39, i8* %6706, align 1, !dbg !1569
  br label %originalBB793

originalBB797alteredBB:                           ; preds = %originalBB797, %3114
  %6707 = load i64, i64* %29, align 8, !dbg !1572
  %_798 = shl i64 %6707, 1
  %_799 = shl i64 %6707, 1
  %_800 = shl i64 %6707, 1
  %_801 = sub i64 %6707, 1
  %gen802 = mul i64 %_801, 1
  %_803 = sub i64 0, %6707
  %gen804 = add i64 %_803, 1
  %_805 = sub i64 %6707, 1
  %gen806 = mul i64 %_805, 1
  %6708 = add i64 %6707, 1, !dbg !1572
  store i64 %6708, i64* %29, align 8, !dbg !1572
  br label %originalBB797

originalBB810alteredBB:                           ; preds = %originalBB810, %3133
  store i8 0, i8* %36, align 1, !dbg !1573
  br label %originalBB810

originalBB814alteredBB:                           ; preds = %originalBB814, %3150
  br label %originalBB814

originalBB818alteredBB:                           ; preds = %originalBB818, %3167
  store i8 1, i8* %43, align 1, !dbg !1576
  br label %originalBB818

originalBB822alteredBB:                           ; preds = %originalBB822, %3184
  %6709 = load i8, i8* %34, align 1, !dbg !1583
  %6710 = trunc i8 %6709 to i1, !dbg !1583
  br label %originalBB822

originalBB826alteredBB:                           ; preds = %originalBB826, %3203
  store i64 1, i64* %44, align 8, !dbg !1586
  %6711 = call i16** @__ctype_b_loc() #15, !dbg !1588
  %6712 = load i16*, i16** %6711, align 8, !dbg !1588
  %6713 = load i8, i8* %39, align 1, !dbg !1588
  %6714 = zext i8 %6713 to i32, !dbg !1588
  %6715 = sext i32 %6714 to i64, !dbg !1588
  %6716 = getelementptr inbounds i16, i16* %6712, i64 %6715, !dbg !1588
  %6717 = load i16, i16* %6716, align 2, !dbg !1588
  %6718 = zext i16 %6717 to i32, !dbg !1588
  %_827 = sub i32 %6718, 16384
  %gen828 = mul i32 %_827, 16384
  %_829 = sub i32 0, %6718
  %gen830 = add i32 %_829, 16384
  %6719 = and i32 %6718, 16384, !dbg !1588
  %6720 = icmp ne i32 %6719, 0, !dbg !1589
  %6721 = zext i1 %6720 to i8, !dbg !1590
  store i8 %6721, i8* %45, align 1, !dbg !1590
  br label %originalBB826

originalBB834alteredBB:                           ; preds = %originalBB834, %3231
  %6722 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !1610
  call void @llvm.memset.p0i8.i64(i8* align 4 %6722, i8 0, i64 8, i1 false), !dbg !1610
  store i64 0, i64* %44, align 8, !dbg !1611
  store i8 1, i8* %45, align 1, !dbg !1612
  %6723 = load i64, i64* %22, align 8, !dbg !1613
  %6724 = icmp eq i64 %6723, -1, !dbg !1615
  br label %originalBB834

originalBB838alteredBB:                           ; preds = %originalBB838, %3251
  %6725 = load i8*, i8** %21, align 8, !dbg !1617
  %6726 = call i64 @strlen(i8* %6725) #13, !dbg !1618
  store i64 %6726, i64* %22, align 8, !dbg !1619
  br label %originalBB838

originalBB842alteredBB:                           ; preds = %originalBB842, %3271
  %6727 = load i8*, i8** %21, align 8, !dbg !1628
  %6728 = load i64, i64* %28, align 8, !dbg !1629
  %6729 = load i64, i64* %44, align 8, !dbg !1630
  %6730 = add i64 %6728, %6729, !dbg !1631
  %6731 = getelementptr inbounds i8, i8* %6727, i64 %6730, !dbg !1628
  %6732 = load i64, i64* %22, align 8, !dbg !1632
  %6733 = load i64, i64* %28, align 8, !dbg !1633
  %6734 = load i64, i64* %44, align 8, !dbg !1634
  %_843 = sub i64 %6733, %6734
  %gen844 = mul i64 %_843, %6734
  %_845 = shl i64 %6733, %6734
  %_846 = sub i64 %6733, %6734
  %gen847 = mul i64 %_846, %6734
  %_848 = sub i64 0, %6733
  %gen849 = add i64 %_848, %6734
  %_850 = sub i64 %6733, %6734
  %gen851 = mul i64 %_850, %6734
  %_852 = shl i64 %6733, %6734
  %_853 = sub i64 0, %6733
  %gen854 = add i64 %_853, %6734
  %6735 = add i64 %6733, %6734, !dbg !1635
  %_855 = shl i64 %6732, %6735
  %_856 = shl i64 %6732, %6735
  %_857 = sub i64 %6732, %6735
  %gen858 = mul i64 %_857, %6735
  %_859 = sub i64 0, %6732
  %gen860 = add i64 %_859, %6735
  %_861 = shl i64 %6732, %6735
  %6736 = sub i64 %6732, %6735, !dbg !1636
  %6737 = call i64 @rpl_mbrtowc(i32* %47, i8* %6731, i64 %6736, %struct.__mbstate_t* %46), !dbg !1637
  store i64 %6737, i64* %48, align 8, !dbg !1627
  %6738 = load i64, i64* %48, align 8, !dbg !1638
  %6739 = icmp eq i64 %6738, 0, !dbg !1640
  br label %originalBB842

originalBB865alteredBB:                           ; preds = %originalBB865, %3301
  br label %originalBB865

originalBB869alteredBB:                           ; preds = %originalBB869, %3321
  store i8 0, i8* %45, align 1, !dbg !1647
  br label %originalBB869

originalBB873alteredBB:                           ; preds = %originalBB873, %3338
  %6740 = load i64, i64* %48, align 8, !dbg !1650
  %6741 = icmp eq i64 %6740, -2, !dbg !1652
  br label %originalBB873

originalBB877alteredBB:                           ; preds = %originalBB877, %3357
  store i8 0, i8* %45, align 1, !dbg !1654
  br label %originalBB877

originalBB881alteredBB:                           ; preds = %originalBB881, %3374
  %6742 = load i64, i64* %28, align 8, !dbg !1657
  %6743 = load i64, i64* %44, align 8, !dbg !1658
  %_882 = sub i64 %6742, %6743
  %gen883 = mul i64 %_882, %6743
  %_884 = sub i64 %6742, %6743
  %gen885 = mul i64 %_884, %6743
  %_886 = sub i64 %6742, %6743
  %gen887 = mul i64 %_886, %6743
  %_888 = sub i64 0, %6742
  %gen889 = add i64 %_888, %6743
  %_890 = sub i64 0, %6742
  %gen891 = add i64 %_890, %6743
  %_892 = sub i64 %6742, %6743
  %gen893 = mul i64 %_892, %6743
  %_894 = sub i64 0, %6742
  %gen895 = add i64 %_894, %6743
  %_896 = sub i64 0, %6742
  %gen897 = add i64 %_896, %6743
  %6744 = add i64 %6742, %6743, !dbg !1659
  %6745 = load i64, i64* %22, align 8, !dbg !1660
  %6746 = icmp ult i64 %6744, %6745, !dbg !1661
  br label %originalBB881

originalBB901alteredBB:                           ; preds = %originalBB901, %3396
  %6747 = load i8*, i8** %21, align 8, !dbg !1663
  %6748 = load i64, i64* %28, align 8, !dbg !1664
  %6749 = load i64, i64* %44, align 8, !dbg !1665
  %_902 = sub i64 %6748, %6749
  %gen903 = mul i64 %_902, %6749
  %_904 = sub i64 0, %6748
  %gen905 = add i64 %_904, %6749
  %_906 = shl i64 %6748, %6749
  %_907 = sub i64 0, %6748
  %gen908 = add i64 %_907, %6749
  %6750 = add i64 %6748, %6749, !dbg !1666
  %6751 = getelementptr inbounds i8, i8* %6747, i64 %6750, !dbg !1663
  %6752 = load i8, i8* %6751, align 1, !dbg !1663
  %6753 = sext i8 %6752 to i32, !dbg !1663
  %6754 = icmp ne i32 %6753, 0, !dbg !1662
  br label %originalBB901

originalBB912alteredBB:                           ; preds = %originalBB912, %3421
  br label %originalBB912

originalBB916alteredBB:                           ; preds = %originalBB916, %3439
  %6755 = load i64, i64* %44, align 8, !dbg !1668
  %_917 = sub i64 0, %6755
  %gen918 = add i64 %_917, 1
  %_919 = sub i64 0, %6755
  %gen920 = add i64 %_919, 1
  %_921 = shl i64 %6755, 1
  %6756 = add i64 %6755, 1, !dbg !1668
  store i64 %6756, i64* %44, align 8, !dbg !1668
  br label %originalBB916

originalBB925alteredBB:                           ; preds = %originalBB925, %3458
  br label %originalBB925

originalBB929alteredBB:                           ; preds = %originalBB929, %3475
  %6757 = load i8, i8* %35, align 1, !dbg !1671
  %6758 = trunc i8 %6757 to i1, !dbg !1671
  br label %originalBB929

originalBB933alteredBB:                           ; preds = %originalBB933, %3494
  %6759 = load i32, i32* %23, align 4, !dbg !1675
  %6760 = icmp eq i32 %6759, 2, !dbg !1676
  br label %originalBB933

originalBB937alteredBB:                           ; preds = %originalBB937, %3513
  store i64 1, i64* %49, align 8, !dbg !1681
  br label %originalBB937

originalBB941alteredBB:                           ; preds = %originalBB941, %3534
  %6761 = load i8*, i8** %21, align 8, !dbg !1689
  %6762 = load i64, i64* %28, align 8, !dbg !1690
  %6763 = load i64, i64* %44, align 8, !dbg !1691
  %_942 = sub i64 %6762, %6763
  %gen943 = mul i64 %_942, %6763
  %_944 = shl i64 %6762, %6763
  %_945 = sub i64 0, %6762
  %gen946 = add i64 %_945, %6763
  %_947 = sub i64 0, %6762
  %gen948 = add i64 %_947, %6763
  %_949 = sub i64 0, %6762
  %gen950 = add i64 %_949, %6763
  %_951 = shl i64 %6762, %6763
  %6764 = add i64 %6762, %6763, !dbg !1692
  %6765 = load i64, i64* %49, align 8, !dbg !1693
  %_952 = sub i64 0, %6764
  %gen953 = add i64 %_952, %6765
  %6766 = add i64 %6764, %6765, !dbg !1694
  %6767 = getelementptr inbounds i8, i8* %6761, i64 %6766, !dbg !1689
  %6768 = load i8, i8* %6767, align 1, !dbg !1689
  %6769 = sext i8 %6768 to i32, !dbg !1689
  br label %originalBB941

originalBB957alteredBB:                           ; preds = %originalBB957, %3560
  br label %originalBB957

originalBB961alteredBB:                           ; preds = %originalBB961, %3577
  br label %originalBB961

originalBB965alteredBB:                           ; preds = %originalBB965, %3594
  br label %originalBB965

originalBB969alteredBB:                           ; preds = %originalBB969, %3614
  br label %originalBB969

originalBB973alteredBB:                           ; preds = %originalBB973, %3631
  %6770 = load i32, i32* %47, align 4, !dbg !1705
  %6771 = call i32 @iswprint(i32 %6770) #10, !dbg !1707
  %6772 = icmp ne i32 %6771, 0, !dbg !1707
  br label %originalBB973

originalBB977alteredBB:                           ; preds = %originalBB977, %3651
  store i8 0, i8* %45, align 1, !dbg !1709
  br label %originalBB977

originalBB981alteredBB:                           ; preds = %originalBB981, %3668
  %6773 = load i64, i64* %48, align 8, !dbg !1711
  %6774 = load i64, i64* %44, align 8, !dbg !1712
  %_982 = sub i64 0, %6774
  %gen983 = add i64 %_982, %6773
  %_984 = sub i64 0, %6774
  %gen985 = add i64 %_984, %6773
  %6775 = add i64 %6774, %6773, !dbg !1712
  store i64 %6775, i64* %44, align 8, !dbg !1712
  br label %originalBB981

originalBB989alteredBB:                           ; preds = %originalBB989, %3688
  br label %originalBB989

originalBB993alteredBB:                           ; preds = %originalBB993, %3705
  br label %originalBB993

originalBB997alteredBB:                           ; preds = %originalBB997, %3723
  %6776 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !1714
  %6777 = icmp ne i32 %6776, 0, !dbg !1715
  %_998 = shl i1 %6777, true
  %_999 = sub i1 false, %6777
  %gen1000 = add i1 %_999, true
  %_1001 = shl i1 %6777, true
  %6778 = xor i1 %6777, true, !dbg !1715
  br label %originalBB997

originalBB1005alteredBB:                          ; preds = %originalBB1005, %3743
  br label %originalBB1005

originalBB1009alteredBB:                          ; preds = %originalBB1009, %3766
  %6779 = load i8, i8* %33, align 1, !dbg !1724
  %6780 = trunc i8 %6779 to i1, !dbg !1724
  br label %originalBB1009

originalBB1013alteredBB:                          ; preds = %originalBB1013, %3785
  %6781 = load i8, i8* %45, align 1, !dbg !1726
  %6782 = trunc i8 %6781 to i1, !dbg !1726
  br label %originalBB1013

originalBB1017alteredBB:                          ; preds = %originalBB1017, %3808
  %6783 = load i8, i8* %33, align 1, !dbg !1735
  %6784 = trunc i8 %6783 to i1, !dbg !1735
  br label %originalBB1017

originalBB1021alteredBB:                          ; preds = %originalBB1021, %3827
  %6785 = load i8, i8* %45, align 1, !dbg !1741
  %6786 = trunc i8 %6785 to i1, !dbg !1741
  br label %originalBB1021

originalBB1025alteredBB:                          ; preds = %originalBB1025, %3846
  br label %originalBB1025

originalBB1029alteredBB:                          ; preds = %originalBB1029, %3863
  %6787 = load i8, i8* %35, align 1, !dbg !1745
  %6788 = trunc i8 %6787 to i1, !dbg !1745
  br label %originalBB1029

originalBB1033alteredBB:                          ; preds = %originalBB1033, %3882
  br label %originalBB1033

originalBB1037alteredBB:                          ; preds = %originalBB1037, %3899
  store i8 1, i8* %42, align 1, !dbg !1748
  %6789 = load i32, i32* %23, align 4, !dbg !1749
  %6790 = icmp eq i32 %6789, 2, !dbg !1749
  br label %originalBB1037

originalBB1041alteredBB:                          ; preds = %originalBB1041, %3918
  %6791 = load i8, i8* %36, align 1, !dbg !1749
  %6792 = trunc i8 %6791 to i1, !dbg !1749
  br label %originalBB1041

originalBB1045alteredBB:                          ; preds = %originalBB1045, %3937
  br label %originalBB1045

originalBB1049alteredBB:                          ; preds = %originalBB1049, %3954
  %6793 = load i64, i64* %29, align 8, !dbg !1753
  %6794 = load i64, i64* %20, align 8, !dbg !1753
  %6795 = icmp ult i64 %6793, %6794, !dbg !1753
  br label %originalBB1049

originalBB1053alteredBB:                          ; preds = %originalBB1053, %3974
  %6796 = load i8*, i8** %19, align 8, !dbg !1753
  %6797 = load i64, i64* %29, align 8, !dbg !1753
  %6798 = getelementptr inbounds i8, i8* %6796, i64 %6797, !dbg !1753
  store i8 39, i8* %6798, align 1, !dbg !1753
  br label %originalBB1053

originalBB1057alteredBB:                          ; preds = %originalBB1057, %3994
  %6799 = load i64, i64* %29, align 8, !dbg !1756
  %_1058 = shl i64 %6799, 1
  %_1059 = sub i64 %6799, 1
  %gen1060 = mul i64 %_1059, 1
  %_1061 = sub i64 %6799, 1
  %gen1062 = mul i64 %_1061, 1
  %_1063 = shl i64 %6799, 1
  %6800 = add i64 %6799, 1, !dbg !1756
  store i64 %6800, i64* %29, align 8, !dbg !1756
  br label %originalBB1057

originalBB1067alteredBB:                          ; preds = %originalBB1067, %4013
  br label %originalBB1067

originalBB1071alteredBB:                          ; preds = %originalBB1071, %4030
  %6801 = load i64, i64* %29, align 8, !dbg !1757
  %6802 = load i64, i64* %20, align 8, !dbg !1757
  %6803 = icmp ult i64 %6801, %6802, !dbg !1757
  br label %originalBB1071

originalBB1075alteredBB:                          ; preds = %originalBB1075, %4050
  %6804 = load i8*, i8** %19, align 8, !dbg !1757
  %6805 = load i64, i64* %29, align 8, !dbg !1757
  %6806 = getelementptr inbounds i8, i8* %6804, i64 %6805, !dbg !1757
  store i8 36, i8* %6806, align 1, !dbg !1757
  br label %originalBB1075

originalBB1079alteredBB:                          ; preds = %originalBB1079, %4070
  %6807 = load i64, i64* %29, align 8, !dbg !1760
  %_1080 = shl i64 %6807, 1
  %_1081 = shl i64 %6807, 1
  %_1082 = sub i64 0, %6807
  %gen1083 = add i64 %_1082, 1
  %6808 = add i64 %6807, 1, !dbg !1760
  store i64 %6808, i64* %29, align 8, !dbg !1760
  br label %originalBB1079

originalBB1087alteredBB:                          ; preds = %originalBB1087, %4089
  br label %originalBB1087

originalBB1091alteredBB:                          ; preds = %originalBB1091, %4110
  %6809 = load i8*, i8** %19, align 8, !dbg !1761
  %6810 = load i64, i64* %29, align 8, !dbg !1761
  %6811 = getelementptr inbounds i8, i8* %6809, i64 %6810, !dbg !1761
  store i8 39, i8* %6811, align 1, !dbg !1761
  br label %originalBB1091

originalBB1095alteredBB:                          ; preds = %originalBB1095, %4130
  %6812 = load i64, i64* %29, align 8, !dbg !1764
  %_1096 = sub i64 %6812, 1
  %gen1097 = mul i64 %_1096, 1
  %_1098 = sub i64 0, %6812
  %gen1099 = add i64 %_1098, 1
  %_1100 = sub i64 0, %6812
  %gen1101 = add i64 %_1100, 1
  %_1102 = sub i64 %6812, 1
  %gen1103 = mul i64 %_1102, 1
  %_1104 = sub i64 0, %6812
  %gen1105 = add i64 %_1104, 1
  %6813 = add i64 %6812, 1, !dbg !1764
  store i64 %6813, i64* %29, align 8, !dbg !1764
  br label %originalBB1095

originalBB1109alteredBB:                          ; preds = %originalBB1109, %4149
  store i8 1, i8* %36, align 1, !dbg !1751
  br label %originalBB1109

originalBB1113alteredBB:                          ; preds = %originalBB1113, %4166
  br label %originalBB1113

originalBB1117alteredBB:                          ; preds = %originalBB1117, %4187
  %6814 = load i8*, i8** %19, align 8, !dbg !1765
  %6815 = load i64, i64* %29, align 8, !dbg !1765
  %6816 = getelementptr inbounds i8, i8* %6814, i64 %6815, !dbg !1765
  store i8 92, i8* %6816, align 1, !dbg !1765
  br label %originalBB1117

originalBB1121alteredBB:                          ; preds = %originalBB1121, %4207
  %6817 = load i64, i64* %29, align 8, !dbg !1768
  %_1122 = shl i64 %6817, 1
  %_1123 = sub i64 0, %6817
  %gen1124 = add i64 %_1123, 1
  %_1125 = sub i64 0, %6817
  %gen1126 = add i64 %_1125, 1
  %_1127 = shl i64 %6817, 1
  %_1128 = sub i64 0, %6817
  %gen1129 = add i64 %_1128, 1
  %6818 = add i64 %6817, 1, !dbg !1768
  store i64 %6818, i64* %29, align 8, !dbg !1768
  br label %originalBB1121

originalBB1133alteredBB:                          ; preds = %originalBB1133, %4226
  br label %originalBB1133

originalBB1137alteredBB:                          ; preds = %originalBB1137, %4244
  %6819 = load i64, i64* %29, align 8, !dbg !1770
  %6820 = load i64, i64* %20, align 8, !dbg !1770
  %6821 = icmp ult i64 %6819, %6820, !dbg !1770
  br label %originalBB1137

originalBB1141alteredBB:                          ; preds = %originalBB1141, %4264
  %6822 = load i8, i8* %39, align 1, !dbg !1770
  %6823 = zext i8 %6822 to i32, !dbg !1770
  %6824 = ashr i32 %6823, 6, !dbg !1770
  %_1142 = shl i32 48, %6824
  %6825 = add nsw i32 48, %6824, !dbg !1770
  %6826 = trunc i32 %6825 to i8, !dbg !1770
  %6827 = load i8*, i8** %19, align 8, !dbg !1770
  %6828 = load i64, i64* %29, align 8, !dbg !1770
  %6829 = getelementptr inbounds i8, i8* %6827, i64 %6828, !dbg !1770
  store i8 %6826, i8* %6829, align 1, !dbg !1770
  br label %originalBB1141

originalBB1146alteredBB:                          ; preds = %originalBB1146, %4289
  %6830 = load i64, i64* %29, align 8, !dbg !1773
  %6831 = add i64 %6830, 1, !dbg !1773
  store i64 %6831, i64* %29, align 8, !dbg !1773
  br label %originalBB1146

originalBB1150alteredBB:                          ; preds = %originalBB1150, %4308
  br label %originalBB1150

originalBB1154alteredBB:                          ; preds = %originalBB1154, %4325
  %6832 = load i64, i64* %29, align 8, !dbg !1775
  %6833 = load i64, i64* %20, align 8, !dbg !1775
  %6834 = icmp ult i64 %6832, %6833, !dbg !1775
  br label %originalBB1154

originalBB1158alteredBB:                          ; preds = %originalBB1158, %4345
  %6835 = load i8, i8* %39, align 1, !dbg !1775
  %6836 = zext i8 %6835 to i32, !dbg !1775
  %_1159 = sub i32 %6836, 3
  %gen1160 = mul i32 %_1159, 3
  %_1161 = sub i32 %6836, 3
  %gen1162 = mul i32 %_1161, 3
  %6837 = ashr i32 %6836, 3, !dbg !1775
  %_1163 = sub i32 %6837, 7
  %gen1164 = mul i32 %_1163, 7
  %_1165 = shl i32 %6837, 7
  %_1166 = sub i32 0, %6837
  %gen1167 = add i32 %_1166, 7
  %_1168 = shl i32 %6837, 7
  %_1169 = shl i32 %6837, 7
  %6838 = and i32 %6837, 7, !dbg !1775
  %_1170 = sub i32 0, 48
  %gen1171 = add i32 %_1170, %6838
  %_1172 = shl i32 48, %6838
  %_1173 = sub i32 48, %6838
  %gen1174 = mul i32 %_1173, %6838
  %6839 = add nsw i32 48, %6838, !dbg !1775
  %6840 = trunc i32 %6839 to i8, !dbg !1775
  %6841 = load i8*, i8** %19, align 8, !dbg !1775
  %6842 = load i64, i64* %29, align 8, !dbg !1775
  %6843 = getelementptr inbounds i8, i8* %6841, i64 %6842, !dbg !1775
  store i8 %6840, i8* %6843, align 1, !dbg !1775
  br label %originalBB1158

originalBB1178alteredBB:                          ; preds = %originalBB1178, %4371
  %6844 = load i64, i64* %29, align 8, !dbg !1778
  %_1179 = sub i64 %6844, 1
  %gen1180 = mul i64 %_1179, 1
  %6845 = add i64 %6844, 1, !dbg !1778
  store i64 %6845, i64* %29, align 8, !dbg !1778
  br label %originalBB1178

originalBB1184alteredBB:                          ; preds = %originalBB1184, %4390
  %6846 = load i8, i8* %39, align 1, !dbg !1779
  %6847 = zext i8 %6846 to i32, !dbg !1779
  %_1185 = sub i32 0, %6847
  %gen1186 = add i32 %_1185, 7
  %_1187 = sub i32 %6847, 7
  %gen1188 = mul i32 %_1187, 7
  %_1189 = sub i32 0, %6847
  %gen1190 = add i32 %_1189, 7
  %_1191 = shl i32 %6847, 7
  %6848 = and i32 %6847, 7, !dbg !1780
  %_1192 = sub i32 48, %6848
  %gen1193 = mul i32 %_1192, %6848
  %6849 = add nsw i32 48, %6848, !dbg !1781
  %6850 = trunc i32 %6849 to i8, !dbg !1782
  store i8 %6850, i8* %39, align 1, !dbg !1783
  br label %originalBB1184

originalBB1197alteredBB:                          ; preds = %originalBB1197, %4415
  br label %originalBB1197

originalBB1201alteredBB:                          ; preds = %originalBB1201, %4432
  %6851 = load i64, i64* %29, align 8, !dbg !1790
  %6852 = load i64, i64* %20, align 8, !dbg !1790
  %6853 = icmp ult i64 %6851, %6852, !dbg !1790
  br label %originalBB1201

originalBB1205alteredBB:                          ; preds = %originalBB1205, %4452
  %6854 = load i8*, i8** %19, align 8, !dbg !1790
  %6855 = load i64, i64* %29, align 8, !dbg !1790
  %6856 = getelementptr inbounds i8, i8* %6854, i64 %6855, !dbg !1790
  store i8 92, i8* %6856, align 1, !dbg !1790
  br label %originalBB1205

originalBB1209alteredBB:                          ; preds = %originalBB1209, %4472
  %6857 = load i64, i64* %29, align 8, !dbg !1793
  %_1210 = sub i64 %6857, 1
  %gen1211 = mul i64 %_1210, 1
  %_1212 = shl i64 %6857, 1
  %_1213 = shl i64 %6857, 1
  %_1214 = shl i64 %6857, 1
  %_1215 = shl i64 %6857, 1
  %6858 = add i64 %6857, 1, !dbg !1793
  store i64 %6858, i64* %29, align 8, !dbg !1793
  br label %originalBB1209

originalBB1219alteredBB:                          ; preds = %originalBB1219, %4491
  store i8 0, i8* %41, align 1, !dbg !1794
  br label %originalBB1219

originalBB1223alteredBB:                          ; preds = %originalBB1223, %4508
  br label %originalBB1223

originalBB1227alteredBB:                          ; preds = %originalBB1227, %4525
  %6859 = load i64, i64* %50, align 8, !dbg !1796
  %6860 = load i64, i64* %28, align 8, !dbg !1798
  %_1228 = sub i64 0, %6860
  %gen1229 = add i64 %_1228, 1
  %_1230 = sub i64 0, %6860
  %gen1231 = add i64 %_1230, 1
  %_1232 = sub i64 0, %6860
  %gen1233 = add i64 %_1232, 1
  %_1234 = shl i64 %6860, 1
  %6861 = add i64 %6860, 1, !dbg !1799
  %6862 = icmp ule i64 %6859, %6861, !dbg !1800
  br label %originalBB1227

originalBB1238alteredBB:                          ; preds = %originalBB1238, %4546
  br label %originalBB1238

originalBB1242alteredBB:                          ; preds = %originalBB1242, %4563
  br label %originalBB1242

originalBB1246alteredBB:                          ; preds = %originalBB1246, %4580
  %6863 = load i8, i8* %36, align 1, !dbg !1804
  %6864 = trunc i8 %6863 to i1, !dbg !1804
  br label %originalBB1246

originalBB1250alteredBB:                          ; preds = %originalBB1250, %4599
  %6865 = load i8, i8* %42, align 1, !dbg !1804
  %6866 = trunc i8 %6865 to i1, !dbg !1804
  br label %originalBB1250

originalBB1254alteredBB:                          ; preds = %originalBB1254, %4618
  br label %originalBB1254

originalBB1258alteredBB:                          ; preds = %originalBB1258, %4635
  %6867 = load i64, i64* %29, align 8, !dbg !1810
  %6868 = load i64, i64* %20, align 8, !dbg !1810
  %6869 = icmp ult i64 %6867, %6868, !dbg !1810
  br label %originalBB1258

originalBB1262alteredBB:                          ; preds = %originalBB1262, %4659
  %6870 = load i64, i64* %29, align 8, !dbg !1813
  %_1263 = sub i64 0, %6870
  %gen1264 = add i64 %_1263, 1
  %_1265 = sub i64 %6870, 1
  %gen1266 = mul i64 %_1265, 1
  %_1267 = shl i64 %6870, 1
  %_1268 = sub i64 0, %6870
  %gen1269 = add i64 %_1268, 1
  %6871 = add i64 %6870, 1, !dbg !1813
  store i64 %6871, i64* %29, align 8, !dbg !1813
  br label %originalBB1262

originalBB1273alteredBB:                          ; preds = %originalBB1273, %4678
  br label %originalBB1273

originalBB1277alteredBB:                          ; preds = %originalBB1277, %4695
  %6872 = load i64, i64* %29, align 8, !dbg !1814
  %6873 = load i64, i64* %20, align 8, !dbg !1814
  %6874 = icmp ult i64 %6872, %6873, !dbg !1814
  br label %originalBB1277

originalBB1281alteredBB:                          ; preds = %originalBB1281, %4715
  %6875 = load i8*, i8** %19, align 8, !dbg !1814
  %6876 = load i64, i64* %29, align 8, !dbg !1814
  %6877 = getelementptr inbounds i8, i8* %6875, i64 %6876, !dbg !1814
  store i8 39, i8* %6877, align 1, !dbg !1814
  br label %originalBB1281

originalBB1285alteredBB:                          ; preds = %originalBB1285, %4735
  %6878 = load i64, i64* %29, align 8, !dbg !1817
  %_1286 = sub i64 %6878, 1
  %gen1287 = mul i64 %_1286, 1
  %_1288 = shl i64 %6878, 1
  %_1289 = sub i64 0, %6878
  %gen1290 = add i64 %_1289, 1
  %6879 = add i64 %6878, 1, !dbg !1817
  store i64 %6879, i64* %29, align 8, !dbg !1817
  br label %originalBB1285

originalBB1294alteredBB:                          ; preds = %originalBB1294, %4754
  store i8 0, i8* %36, align 1, !dbg !1808
  br label %originalBB1294

originalBB1298alteredBB:                          ; preds = %originalBB1298, %4772
  br label %originalBB1298

originalBB1302alteredBB:                          ; preds = %originalBB1302, %4789
  %6880 = load i64, i64* %29, align 8, !dbg !1819
  %6881 = load i64, i64* %20, align 8, !dbg !1819
  %6882 = icmp ult i64 %6880, %6881, !dbg !1819
  br label %originalBB1302

originalBB1306alteredBB:                          ; preds = %originalBB1306, %4809
  %6883 = load i8, i8* %39, align 1, !dbg !1819
  %6884 = load i8*, i8** %19, align 8, !dbg !1819
  %6885 = load i64, i64* %29, align 8, !dbg !1819
  %6886 = getelementptr inbounds i8, i8* %6884, i64 %6885, !dbg !1819
  store i8 %6883, i8* %6886, align 1, !dbg !1819
  br label %originalBB1306

originalBB1310alteredBB:                          ; preds = %originalBB1310, %4830
  %6887 = load i64, i64* %29, align 8, !dbg !1822
  %_1311 = sub i64 %6887, 1
  %gen1312 = mul i64 %_1311, 1
  %6888 = add i64 %6887, 1, !dbg !1822
  store i64 %6888, i64* %29, align 8, !dbg !1822
  br label %originalBB1310

originalBB1316alteredBB:                          ; preds = %originalBB1316, %4849
  %6889 = load i8*, i8** %21, align 8, !dbg !1823
  %6890 = load i64, i64* %28, align 8, !dbg !1824
  %_1317 = sub i64 0, %6890
  %gen1318 = add i64 %_1317, 1
  %_1319 = shl i64 %6890, 1
  %_1320 = shl i64 %6890, 1
  %_1321 = sub i64 %6890, 1
  %gen1322 = mul i64 %_1321, 1
  %_1323 = sub i64 %6890, 1
  %gen1324 = mul i64 %_1323, 1
  %6891 = add i64 %6890, 1, !dbg !1824
  store i64 %6891, i64* %28, align 8, !dbg !1824
  %6892 = getelementptr inbounds i8, i8* %6889, i64 %6891, !dbg !1823
  %6893 = load i8, i8* %6892, align 1, !dbg !1823
  store i8 %6893, i8* %39, align 1, !dbg !1825
  br label %originalBB1316

originalBB1328alteredBB:                          ; preds = %originalBB1328, %4872
  br label %originalBB1328

originalBB1332alteredBB:                          ; preds = %originalBB1332, %4889
  %6894 = load i8, i8* %33, align 1, !dbg !1832
  %6895 = trunc i8 %6894 to i1, !dbg !1832
  br label %originalBB1332

originalBB1336alteredBB:                          ; preds = %originalBB1336, %4908
  %6896 = load i32, i32* %23, align 4, !dbg !1835
  %6897 = icmp ne i32 %6896, 2, !dbg !1836
  br label %originalBB1336

originalBB1340alteredBB:                          ; preds = %originalBB1340, %4927
  %6898 = load i8, i8* %35, align 1, !dbg !1838
  %6899 = trunc i8 %6898 to i1, !dbg !1838
  br label %originalBB1340

originalBB1344alteredBB:                          ; preds = %originalBB1344, %4946
  %6900 = load i32*, i32** %25, align 8, !dbg !1840
  %6901 = icmp ne i32* %6900, null, !dbg !1840
  br label %originalBB1344

originalBB1348alteredBB:                          ; preds = %originalBB1348, %4965
  %6902 = load i32*, i32** %25, align 8, !dbg !1842
  %6903 = load i8, i8* %39, align 1, !dbg !1843
  %6904 = zext i8 %6903 to i64, !dbg !1843
  %_1349 = sub i64 %6904, 32
  %gen1350 = mul i64 %_1349, 32
  %_1351 = sub i64 %6904, 32
  %gen1352 = mul i64 %_1351, 32
  %6905 = udiv i64 %6904, 32, !dbg !1844
  %6906 = getelementptr inbounds i32, i32* %6902, i64 %6905, !dbg !1842
  %6907 = load i32, i32* %6906, align 4, !dbg !1842
  %6908 = load i8, i8* %39, align 1, !dbg !1845
  %6909 = zext i8 %6908 to i64, !dbg !1845
  %_1353 = sub i64 0, %6909
  %gen1354 = add i64 %_1353, 32
  %_1355 = shl i64 %6909, 32
  %_1356 = sub i64 %6909, 32
  %gen1357 = mul i64 %_1356, 32
  %_1358 = sub i64 %6909, 32
  %gen1359 = mul i64 %_1358, 32
  %_1360 = shl i64 %6909, 32
  %_1361 = sub i64 0, %6909
  %gen1362 = add i64 %_1361, 32
  %6910 = urem i64 %6909, 32, !dbg !1846
  %6911 = trunc i64 %6910 to i32, !dbg !1847
  %_1363 = shl i32 %6907, %6911
  %_1364 = sub i32 0, %6907
  %gen1365 = add i32 %_1364, %6911
  %6912 = lshr i32 %6907, %6911, !dbg !1847
  %_1366 = sub i32 %6912, 1
  %gen1367 = mul i32 %_1366, 1
  %6913 = and i32 %6912, 1, !dbg !1848
  %6914 = icmp ne i32 %6913, 0, !dbg !1848
  br label %originalBB1348

originalBB1371alteredBB:                          ; preds = %originalBB1371, %4995
  %6915 = load i8, i8* %41, align 1, !dbg !1850
  %6916 = trunc i8 %6915 to i1, !dbg !1850
  br label %originalBB1371

originalBB1375alteredBB:                          ; preds = %originalBB1375, %5014
  br label %originalBB1375

originalBB1379alteredBB:                          ; preds = %originalBB1379, %5031
  br label %originalBB1379

originalBB1383alteredBB:                          ; preds = %originalBB1383, %5048
  br label %originalBB1383

originalBB1387alteredBB:                          ; preds = %originalBB1387, %5065
  %6917 = load i8, i8* %35, align 1, !dbg !1856
  %6918 = trunc i8 %6917 to i1, !dbg !1856
  br label %originalBB1387

originalBB1391alteredBB:                          ; preds = %originalBB1391, %5084
  br label %originalBB1391

originalBB1395alteredBB:                          ; preds = %originalBB1395, %5101
  store i8 1, i8* %42, align 1, !dbg !1859
  %6919 = load i32, i32* %23, align 4, !dbg !1860
  %6920 = icmp eq i32 %6919, 2, !dbg !1860
  br label %originalBB1395

originalBB1399alteredBB:                          ; preds = %originalBB1399, %5120
  %6921 = load i8, i8* %36, align 1, !dbg !1860
  %6922 = trunc i8 %6921 to i1, !dbg !1860
  br label %originalBB1399

originalBB1403alteredBB:                          ; preds = %originalBB1403, %5139
  br label %originalBB1403

originalBB1407alteredBB:                          ; preds = %originalBB1407, %5156
  %6923 = load i64, i64* %29, align 8, !dbg !1864
  %6924 = load i64, i64* %20, align 8, !dbg !1864
  %6925 = icmp ult i64 %6923, %6924, !dbg !1864
  br label %originalBB1407

originalBB1411alteredBB:                          ; preds = %originalBB1411, %5176
  %6926 = load i8*, i8** %19, align 8, !dbg !1864
  %6927 = load i64, i64* %29, align 8, !dbg !1864
  %6928 = getelementptr inbounds i8, i8* %6926, i64 %6927, !dbg !1864
  store i8 39, i8* %6928, align 1, !dbg !1864
  br label %originalBB1411

originalBB1415alteredBB:                          ; preds = %originalBB1415, %5196
  %6929 = load i64, i64* %29, align 8, !dbg !1867
  %_1416 = sub i64 %6929, 1
  %gen1417 = mul i64 %_1416, 1
  %_1418 = shl i64 %6929, 1
  %_1419 = shl i64 %6929, 1
  %6930 = add i64 %6929, 1, !dbg !1867
  store i64 %6930, i64* %29, align 8, !dbg !1867
  br label %originalBB1415

originalBB1423alteredBB:                          ; preds = %originalBB1423, %5215
  br label %originalBB1423

originalBB1427alteredBB:                          ; preds = %originalBB1427, %5232
  %6931 = load i64, i64* %29, align 8, !dbg !1868
  %6932 = load i64, i64* %20, align 8, !dbg !1868
  %6933 = icmp ult i64 %6931, %6932, !dbg !1868
  br label %originalBB1427

originalBB1431alteredBB:                          ; preds = %originalBB1431, %5256
  %6934 = load i64, i64* %29, align 8, !dbg !1871
  %_1432 = sub i64 0, %6934
  %gen1433 = add i64 %_1432, 1
  %_1434 = shl i64 %6934, 1
  %_1435 = sub i64 %6934, 1
  %gen1436 = mul i64 %_1435, 1
  %_1437 = shl i64 %6934, 1
  %6935 = add i64 %6934, 1, !dbg !1871
  store i64 %6935, i64* %29, align 8, !dbg !1871
  br label %originalBB1431

originalBB1441alteredBB:                          ; preds = %originalBB1441, %5275
  br label %originalBB1441

originalBB1445alteredBB:                          ; preds = %originalBB1445, %5296
  %6936 = load i8*, i8** %19, align 8, !dbg !1872
  %6937 = load i64, i64* %29, align 8, !dbg !1872
  %6938 = getelementptr inbounds i8, i8* %6936, i64 %6937, !dbg !1872
  store i8 39, i8* %6938, align 1, !dbg !1872
  br label %originalBB1445

originalBB1449alteredBB:                          ; preds = %originalBB1449, %5316
  %6939 = load i64, i64* %29, align 8, !dbg !1875
  %_1450 = sub i64 0, %6939
  %gen1451 = add i64 %_1450, 1
  %_1452 = sub i64 %6939, 1
  %gen1453 = mul i64 %_1452, 1
  %6940 = add i64 %6939, 1, !dbg !1875
  store i64 %6940, i64* %29, align 8, !dbg !1875
  br label %originalBB1449

originalBB1457alteredBB:                          ; preds = %originalBB1457, %5335
  store i8 1, i8* %36, align 1, !dbg !1862
  br label %originalBB1457

originalBB1461alteredBB:                          ; preds = %originalBB1461, %5352
  br label %originalBB1461

originalBB1465alteredBB:                          ; preds = %originalBB1465, %5369
  %6941 = load i64, i64* %29, align 8, !dbg !1876
  %6942 = load i64, i64* %20, align 8, !dbg !1876
  %6943 = icmp ult i64 %6941, %6942, !dbg !1876
  br label %originalBB1465

originalBB1469alteredBB:                          ; preds = %originalBB1469, %5393
  %6944 = load i64, i64* %29, align 8, !dbg !1879
  %_1470 = sub i64 0, %6944
  %gen1471 = add i64 %_1470, 1
  %_1472 = shl i64 %6944, 1
  %6945 = add i64 %6944, 1, !dbg !1879
  store i64 %6945, i64* %29, align 8, !dbg !1879
  br label %originalBB1469

originalBB1476alteredBB:                          ; preds = %originalBB1476, %5412
  br label %originalBB1476

originalBB1480alteredBB:                          ; preds = %originalBB1480, %5429
  br label %originalBB1480

originalBB1484alteredBB:                          ; preds = %originalBB1484, %5446
  br label %originalBB1484

originalBB1488alteredBB:                          ; preds = %originalBB1488, %5463
  %6946 = load i8, i8* %36, align 1, !dbg !1883
  %6947 = trunc i8 %6946 to i1, !dbg !1883
  br label %originalBB1488

originalBB1492alteredBB:                          ; preds = %originalBB1492, %5482
  %6948 = load i8, i8* %42, align 1, !dbg !1883
  %6949 = trunc i8 %6948 to i1, !dbg !1883
  br label %originalBB1492

originalBB1496alteredBB:                          ; preds = %originalBB1496, %5502
  %6950 = load i64, i64* %29, align 8, !dbg !1889
  %6951 = load i64, i64* %20, align 8, !dbg !1889
  %6952 = icmp ult i64 %6950, %6951, !dbg !1889
  br label %originalBB1496

originalBB1500alteredBB:                          ; preds = %originalBB1500, %5522
  %6953 = load i8*, i8** %19, align 8, !dbg !1889
  %6954 = load i64, i64* %29, align 8, !dbg !1889
  %6955 = getelementptr inbounds i8, i8* %6953, i64 %6954, !dbg !1889
  store i8 39, i8* %6955, align 1, !dbg !1889
  br label %originalBB1500

originalBB1504alteredBB:                          ; preds = %originalBB1504, %5542
  %6956 = load i64, i64* %29, align 8, !dbg !1892
  %_1505 = shl i64 %6956, 1
  %_1506 = sub i64 0, %6956
  %gen1507 = add i64 %_1506, 1
  %_1508 = sub i64 0, %6956
  %gen1509 = add i64 %_1508, 1
  %_1510 = shl i64 %6956, 1
  %_1511 = shl i64 %6956, 1
  %_1512 = sub i64 0, %6956
  %gen1513 = add i64 %_1512, 1
  %6957 = add i64 %6956, 1, !dbg !1892
  store i64 %6957, i64* %29, align 8, !dbg !1892
  br label %originalBB1504

originalBB1517alteredBB:                          ; preds = %originalBB1517, %5561
  br label %originalBB1517

originalBB1521alteredBB:                          ; preds = %originalBB1521, %5578
  %6958 = load i64, i64* %29, align 8, !dbg !1893
  %6959 = load i64, i64* %20, align 8, !dbg !1893
  %6960 = icmp ult i64 %6958, %6959, !dbg !1893
  br label %originalBB1521

originalBB1525alteredBB:                          ; preds = %originalBB1525, %5598
  %6961 = load i8*, i8** %19, align 8, !dbg !1893
  %6962 = load i64, i64* %29, align 8, !dbg !1893
  %6963 = getelementptr inbounds i8, i8* %6961, i64 %6962, !dbg !1893
  store i8 39, i8* %6963, align 1, !dbg !1893
  br label %originalBB1525

originalBB1529alteredBB:                          ; preds = %originalBB1529, %5618
  %6964 = load i64, i64* %29, align 8, !dbg !1896
  %_1530 = sub i64 %6964, 1
  %gen1531 = mul i64 %_1530, 1
  %_1532 = sub i64 %6964, 1
  %gen1533 = mul i64 %_1532, 1
  %_1534 = sub i64 %6964, 1
  %gen1535 = mul i64 %_1534, 1
  %6965 = add i64 %6964, 1, !dbg !1896
  store i64 %6965, i64* %29, align 8, !dbg !1896
  br label %originalBB1529

originalBB1539alteredBB:                          ; preds = %originalBB1539, %5637
  store i8 0, i8* %36, align 1, !dbg !1887
  br label %originalBB1539

originalBB1543alteredBB:                          ; preds = %originalBB1543, %5654
  br label %originalBB1543

originalBB1547alteredBB:                          ; preds = %originalBB1547, %5671
  br label %originalBB1547

originalBB1551alteredBB:                          ; preds = %originalBB1551, %5688
  %6966 = load i64, i64* %29, align 8, !dbg !1898
  %6967 = load i64, i64* %20, align 8, !dbg !1898
  %6968 = icmp ult i64 %6966, %6967, !dbg !1898
  br label %originalBB1551

originalBB1555alteredBB:                          ; preds = %originalBB1555, %5708
  %6969 = load i8, i8* %39, align 1, !dbg !1898
  %6970 = load i8*, i8** %19, align 8, !dbg !1898
  %6971 = load i64, i64* %29, align 8, !dbg !1898
  %6972 = getelementptr inbounds i8, i8* %6970, i64 %6971, !dbg !1898
  store i8 %6969, i8* %6972, align 1, !dbg !1898
  br label %originalBB1555

originalBB1559alteredBB:                          ; preds = %originalBB1559, %5729
  %6973 = load i64, i64* %29, align 8, !dbg !1901
  %_1560 = sub i64 %6973, 1
  %gen1561 = mul i64 %_1560, 1
  %_1562 = sub i64 0, %6973
  %gen1563 = add i64 %_1562, 1
  %_1564 = shl i64 %6973, 1
  %_1565 = shl i64 %6973, 1
  %_1566 = shl i64 %6973, 1
  %_1567 = sub i64 0, %6973
  %gen1568 = add i64 %_1567, 1
  %_1569 = sub i64 0, %6973
  %gen1570 = add i64 %_1569, 1
  %_1571 = shl i64 %6973, 1
  %6974 = add i64 %6973, 1, !dbg !1901
  store i64 %6974, i64* %29, align 8, !dbg !1901
  br label %originalBB1559

originalBB1575alteredBB:                          ; preds = %originalBB1575, %5751
  store i8 0, i8* %38, align 1, !dbg !1905
  br label %originalBB1575

originalBB1579alteredBB:                          ; preds = %originalBB1579, %5768
  br label %originalBB1579

originalBB1583alteredBB:                          ; preds = %originalBB1583, %5785
  %6975 = load i64, i64* %28, align 8, !dbg !1908
  %_1584 = shl i64 %6975, 1
  %_1585 = sub i64 %6975, 1
  %gen1586 = mul i64 %_1585, 1
  %_1587 = sub i64 %6975, 1
  %gen1588 = mul i64 %_1587, 1
  %_1589 = sub i64 %6975, 1
  %gen1590 = mul i64 %_1589, 1
  %_1591 = shl i64 %6975, 1
  %_1592 = sub i64 %6975, 1
  %gen1593 = mul i64 %_1592, 1
  %6976 = add i64 %6975, 1, !dbg !1908
  store i64 %6976, i64* %28, align 8, !dbg !1908
  br label %originalBB1583

originalBB1597alteredBB:                          ; preds = %originalBB1597, %5804
  %6977 = load i64, i64* %29, align 8, !dbg !1912
  %6978 = icmp eq i64 %6977, 0, !dbg !1914
  br label %originalBB1597

originalBB1601alteredBB:                          ; preds = %originalBB1601, %5823
  %6979 = load i32, i32* %23, align 4, !dbg !1916
  %6980 = icmp eq i32 %6979, 2, !dbg !1917
  br label %originalBB1601

originalBB1605alteredBB:                          ; preds = %originalBB1605, %5842
  %6981 = load i8, i8* %35, align 1, !dbg !1919
  %6982 = trunc i8 %6981 to i1, !dbg !1919
  br label %originalBB1605

originalBB1609alteredBB:                          ; preds = %originalBB1609, %5861
  br label %originalBB1609

originalBB1613alteredBB:                          ; preds = %originalBB1613, %5878
  %6983 = load i32, i32* %23, align 4, !dbg !1922
  %6984 = icmp eq i32 %6983, 2, !dbg !1924
  br label %originalBB1613

originalBB1617alteredBB:                          ; preds = %originalBB1617, %5897
  %6985 = load i8, i8* %35, align 1, !dbg !1926
  %6986 = trunc i8 %6985 to i1, !dbg !1926
  br label %originalBB1617

originalBB1621alteredBB:                          ; preds = %originalBB1621, %5916
  %6987 = load i8, i8* %37, align 1, !dbg !1928
  %6988 = trunc i8 %6987 to i1, !dbg !1928
  br label %originalBB1621

originalBB1625alteredBB:                          ; preds = %originalBB1625, %5935
  %6989 = load i8, i8* %38, align 1, !dbg !1930
  %6990 = trunc i8 %6989 to i1, !dbg !1930
  br label %originalBB1625

originalBB1629alteredBB:                          ; preds = %originalBB1629, %5964
  %6991 = load i64, i64* %20, align 8, !dbg !1944
  %6992 = icmp ne i64 %6991, 0, !dbg !1944
  br label %originalBB1629

originalBB1633alteredBB:                          ; preds = %originalBB1633, %5983
  %6993 = load i64, i64* %30, align 8, !dbg !1947
  %6994 = icmp ne i64 %6993, 0, !dbg !1947
  br label %originalBB1633

originalBB1637alteredBB:                          ; preds = %originalBB1637, %6002
  %6995 = load i64, i64* %30, align 8, !dbg !1949
  store i64 %6995, i64* %20, align 8, !dbg !1951
  store i64 0, i64* %29, align 8, !dbg !1952
  br label %originalBB1637

originalBB1641alteredBB:                          ; preds = %originalBB1641, %6020
  br label %originalBB1641

originalBB1645alteredBB:                          ; preds = %originalBB1645, %6037
  br label %originalBB1645

originalBB1649alteredBB:                          ; preds = %originalBB1649, %6054
  %6996 = load i8*, i8** %31, align 8, !dbg !1955
  %6997 = icmp ne i8* %6996, null, !dbg !1955
  br label %originalBB1649

originalBB1653alteredBB:                          ; preds = %originalBB1653, %6073
  %6998 = load i8, i8* %35, align 1, !dbg !1958
  %6999 = trunc i8 %6998 to i1, !dbg !1958
  br label %originalBB1653

originalBB1657alteredBB:                          ; preds = %originalBB1657, %6093
  %7000 = load i8*, i8** %31, align 8, !dbg !1961
  %7001 = load i8, i8* %7000, align 1, !dbg !1964
  %7002 = icmp ne i8 %7001, 0, !dbg !1965
  br label %originalBB1657

originalBB1661alteredBB:                          ; preds = %originalBB1661, %6113
  br label %originalBB1661

originalBB1665alteredBB:                          ; preds = %originalBB1665, %6134
  %7003 = load i8*, i8** %31, align 8, !dbg !1967
  %7004 = load i8, i8* %7003, align 1, !dbg !1967
  %7005 = load i8*, i8** %19, align 8, !dbg !1967
  %7006 = load i64, i64* %29, align 8, !dbg !1967
  %7007 = getelementptr inbounds i8, i8* %7005, i64 %7006, !dbg !1967
  store i8 %7004, i8* %7007, align 1, !dbg !1967
  br label %originalBB1665

originalBB1669alteredBB:                          ; preds = %originalBB1669, %6156
  %7008 = load i64, i64* %29, align 8, !dbg !1970
  %_1670 = shl i64 %7008, 1
  %_1671 = sub i64 %7008, 1
  %gen1672 = mul i64 %_1671, 1
  %_1673 = shl i64 %7008, 1
  %_1674 = sub i64 %7008, 1
  %gen1675 = mul i64 %_1674, 1
  %_1676 = sub i64 %7008, 1
  %gen1677 = mul i64 %_1676, 1
  %_1678 = shl i64 %7008, 1
  %_1679 = sub i64 0, %7008
  %gen1680 = add i64 %_1679, 1
  %_1681 = sub i64 %7008, 1
  %gen1682 = mul i64 %_1681, 1
  %7009 = add i64 %7008, 1, !dbg !1970
  store i64 %7009, i64* %29, align 8, !dbg !1970
  br label %originalBB1669

originalBB1686alteredBB:                          ; preds = %originalBB1686, %6175
  br label %originalBB1686

originalBB1690alteredBB:                          ; preds = %originalBB1690, %6192
  %7010 = load i8*, i8** %31, align 8, !dbg !1971
  %7011 = getelementptr inbounds i8, i8* %7010, i32 1, !dbg !1971
  store i8* %7011, i8** %31, align 8, !dbg !1971
  br label %originalBB1690

originalBB1694alteredBB:                          ; preds = %originalBB1694, %6211
  br label %originalBB1694

originalBB1698alteredBB:                          ; preds = %originalBB1698, %6228
  %7012 = load i64, i64* %29, align 8, !dbg !1975
  %7013 = load i64, i64* %20, align 8, !dbg !1977
  %7014 = icmp ult i64 %7012, %7013, !dbg !1978
  br label %originalBB1698

originalBB1702alteredBB:                          ; preds = %originalBB1702, %6248
  %7015 = load i8*, i8** %19, align 8, !dbg !1980
  %7016 = load i64, i64* %29, align 8, !dbg !1981
  %7017 = getelementptr inbounds i8, i8* %7015, i64 %7016, !dbg !1980
  store i8 0, i8* %7017, align 1, !dbg !1982
  br label %originalBB1702

originalBB1706alteredBB:                          ; preds = %originalBB1706, %6268
  %7018 = load i64, i64* %29, align 8, !dbg !1983
  store i64 %7018, i64* %18, align 8, !dbg !1984
  br label %originalBB1706

originalBB1710alteredBB:                          ; preds = %originalBB1710, %6286
  %7019 = load i32, i32* %23, align 4, !dbg !1987
  %7020 = icmp eq i32 %7019, 2, !dbg !1989
  br label %originalBB1710

originalBB1714alteredBB:                          ; preds = %originalBB1714, %6305
  %7021 = load i8, i8* %33, align 1, !dbg !1991
  %7022 = trunc i8 %7021 to i1, !dbg !1991
  br label %originalBB1714

originalBB1718alteredBB:                          ; preds = %originalBB1718, %6324
  store i32 4, i32* %23, align 4, !dbg !1993
  br label %originalBB1718

originalBB1722alteredBB:                          ; preds = %originalBB1722, %6341
  %7023 = load i8*, i8** %19, align 8, !dbg !1995
  %7024 = load i64, i64* %20, align 8, !dbg !1996
  %7025 = load i8*, i8** %21, align 8, !dbg !1997
  %7026 = load i64, i64* %22, align 8, !dbg !1998
  %7027 = load i32, i32* %23, align 4, !dbg !1999
  %7028 = load i32, i32* %24, align 4, !dbg !2000
  %_1723 = shl i32 %7028, -3
  %_1724 = sub i32 0, %7028
  %gen1725 = add i32 %_1724, -3
  %7029 = and i32 %7028, -3, !dbg !2001
  %7030 = load i8*, i8** %26, align 8, !dbg !2002
  %7031 = load i8*, i8** %27, align 8, !dbg !2003
  %7032 = call i64 @quotearg_buffer_restyled(i8* %7023, i64 %7024, i8* %7025, i64 %7026, i32 %7027, i32 %7029, i32* null, i8* %7030, i8* %7031), !dbg !2004
  store i64 %7032, i64* %18, align 8, !dbg !2005
  br label %originalBB1722

originalBB1729alteredBB:                          ; preds = %originalBB1729, %6368
  %7033 = load i64, i64* %18, align 8, !dbg !2006
  br label %originalBB1729
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #3

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gettext_quote(i8*, i32) #5 !dbg !2094 {
  %3 = load i32, i32* @x.19
  %4 = load i32, i32* @y.20
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2097, metadata !DIExpression()), !dbg !2098
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !2099, metadata !DIExpression()), !dbg !2100
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2101, metadata !DIExpression()), !dbg !2102
  %16 = load i8*, i8** %12, align 8, !dbg !2103
  %17 = call i8* @gettext(i8* %16) #10, !dbg !2103
  store i8* %17, i8** %14, align 8, !dbg !2102
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2104, metadata !DIExpression()), !dbg !2105
  %18 = load i8*, i8** %14, align 8, !dbg !2106
  %19 = load i8*, i8** %12, align 8, !dbg !2108
  %20 = icmp ne i8* %18, %19, !dbg !2109
  %21 = load i32, i32* @x.19
  %22 = load i32, i32* @y.20
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %20, label %29, label %47, !dbg !2110

29:                                               ; preds = %originalBBpart2
  %30 = load i32, i32* @x.19
  %31 = load i32, i32* @y.20
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i8*, i8** %14, align 8, !dbg !2111
  store i8* %38, i8** %11, align 8, !dbg !2112
  %39 = load i32, i32* @x.19
  %40 = load i32, i32* @y.20
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %141, !dbg !2112

47:                                               ; preds = %originalBBpart2
  %48 = call i8* @locale_charset(), !dbg !2113
  store i8* %48, i8** %15, align 8, !dbg !2114
  %49 = load i8*, i8** %15, align 8, !dbg !2115
  %50 = call i32 @c_strcasecmp(i8* %49, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.55, i64 0, i64 0)) #13, !dbg !2115
  %51 = icmp eq i32 %50, 0, !dbg !2115
  br i1 %51, label %52, label %76, !dbg !2117

52:                                               ; preds = %47
  %53 = load i32, i32* @x.19
  %54 = load i32, i32* @y.20
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %52, %originalBB6alteredBB
  %61 = load i8*, i8** %12, align 8, !dbg !2118
  %62 = getelementptr inbounds i8, i8* %61, i64 0, !dbg !2118
  %63 = load i8, i8* %62, align 1, !dbg !2118
  %64 = sext i8 %63 to i32, !dbg !2118
  %65 = icmp eq i32 %64, 96, !dbg !2119
  %66 = zext i1 %65 to i64, !dbg !2118
  %67 = select i1 %65, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.56, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.57, i64 0, i64 0), !dbg !2118
  store i8* %67, i8** %11, align 8, !dbg !2120
  %68 = load i32, i32* @x.19
  %69 = load i32, i32* @y.20
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %141, !dbg !2120

76:                                               ; preds = %47
  %77 = load i32, i32* @x.19
  %78 = load i32, i32* @y.20
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %76, %originalBB10alteredBB
  %85 = load i8*, i8** %15, align 8, !dbg !2121
  %86 = call i32 @c_strcasecmp(i8* %85, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.58, i64 0, i64 0)) #13, !dbg !2121
  %87 = icmp eq i32 %86, 0, !dbg !2121
  %88 = load i32, i32* @x.19
  %89 = load i32, i32* @y.20
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %87, label %96, label %120, !dbg !2123

96:                                               ; preds = %originalBBpart212
  %97 = load i32, i32* @x.19
  %98 = load i32, i32* @y.20
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %96, %originalBB14alteredBB
  %105 = load i8*, i8** %12, align 8, !dbg !2124
  %106 = getelementptr inbounds i8, i8* %105, i64 0, !dbg !2124
  %107 = load i8, i8* %106, align 1, !dbg !2124
  %108 = sext i8 %107 to i32, !dbg !2124
  %109 = icmp eq i32 %108, 96, !dbg !2125
  %110 = zext i1 %109 to i64, !dbg !2124
  %111 = select i1 %109, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.59, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.60, i64 0, i64 0), !dbg !2124
  store i8* %111, i8** %11, align 8, !dbg !2126
  %112 = load i32, i32* @x.19
  %113 = load i32, i32* @y.20
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %141, !dbg !2126

120:                                              ; preds = %originalBBpart212
  %121 = load i32, i32* @x.19
  %122 = load i32, i32* @y.20
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %120, %originalBB18alteredBB
  %129 = load i32, i32* %13, align 4, !dbg !2127
  %130 = icmp eq i32 %129, 9, !dbg !2128
  %131 = zext i1 %130 to i64, !dbg !2127
  %132 = select i1 %130, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.52, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.54, i64 0, i64 0), !dbg !2127
  store i8* %132, i8** %11, align 8, !dbg !2129
  %133 = load i32, i32* @x.19
  %134 = load i32, i32* @y.20
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %141, !dbg !2129

141:                                              ; preds = %originalBBpart220, %originalBBpart216, %originalBBpart28, %originalBBpart24
  %142 = load i32, i32* @x.19
  %143 = load i32, i32* @y.20
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %141, %originalBB22alteredBB
  %150 = load i8*, i8** %11, align 8, !dbg !2130
  %151 = load i32, i32* @x.19
  %152 = load i32, i32* @y.20
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret i8* %150, !dbg !2130

originalBBalteredBB:                              ; preds = %originalBB, %2
  %159 = alloca i8*, align 8
  %160 = alloca i8*, align 8
  %161 = alloca i32, align 4
  %162 = alloca i8*, align 8
  %163 = alloca i8*, align 8
  store i8* %0, i8** %160, align 8
  call void @llvm.dbg.declare(metadata i8** %160, metadata !2131, metadata !DIExpression()), !dbg !2098
  store i32 %1, i32* %161, align 4
  call void @llvm.dbg.declare(metadata i32* %161, metadata !2163, metadata !DIExpression()), !dbg !2100
  call void @llvm.dbg.declare(metadata i8** %162, metadata !2164, metadata !DIExpression()), !dbg !2102
  %164 = load i8*, i8** %160, align 8, !dbg !2103
  %165 = call i8* @gettext(i8* %164) #10, !dbg !2103
  store i8* %165, i8** %162, align 8, !dbg !2102
  call void @llvm.dbg.declare(metadata i8** %163, metadata !2165, metadata !DIExpression()), !dbg !2105
  %166 = load i8*, i8** %162, align 8, !dbg !2106
  %167 = load i8*, i8** %160, align 8, !dbg !2108
  %168 = icmp ne i8* %166, %167, !dbg !2109
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %169 = load i8*, i8** %14, align 8, !dbg !2111
  store i8* %169, i8** %11, align 8, !dbg !2112
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %52
  %170 = load i8*, i8** %12, align 8, !dbg !2118
  %171 = getelementptr inbounds i8, i8* %170, i64 0, !dbg !2118
  %172 = load i8, i8* %171, align 1, !dbg !2118
  %173 = sext i8 %172 to i32, !dbg !2118
  %174 = icmp eq i32 %173, 96, !dbg !2119
  %175 = zext i1 %174 to i64, !dbg !2118
  %176 = select i1 %174, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.56, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.57, i64 0, i64 0), !dbg !2118
  store i8* %176, i8** %11, align 8, !dbg !2120
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %76
  %177 = load i8*, i8** %15, align 8, !dbg !2121
  %178 = call i32 @c_strcasecmp(i8* %177, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.58, i64 0, i64 0)) #13, !dbg !2121
  %179 = icmp eq i32 %178, 0, !dbg !2121
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %96
  %180 = load i8*, i8** %12, align 8, !dbg !2124
  %181 = getelementptr inbounds i8, i8* %180, i64 0, !dbg !2124
  %182 = load i8, i8* %181, align 1, !dbg !2124
  %183 = sext i8 %182 to i32, !dbg !2124
  %184 = icmp eq i32 %183, 96, !dbg !2125
  %185 = zext i1 %184 to i64, !dbg !2124
  %186 = select i1 %184, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.59, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.60, i64 0, i64 0), !dbg !2124
  store i8* %186, i8** %11, align 8, !dbg !2126
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %120
  %187 = load i32, i32* %13, align 4, !dbg !2127
  %188 = icmp eq i32 %187, 9, !dbg !2128
  %189 = zext i1 %188 to i64, !dbg !2127
  %190 = select i1 %188, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.52, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.54, i64 0, i64 0), !dbg !2127
  store i8* %190, i8** %11, align 8, !dbg !2129
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %141
  %191 = load i8*, i8** %11, align 8, !dbg !2130
  br label %originalBB22
}

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #7

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #7

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #3

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char(i8*, i8 signext) #5 !dbg !2166 {
  %3 = load i32, i32* @x.21
  %4 = load i32, i32* @y.22
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8, align 1
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2169, metadata !DIExpression()), !dbg !2170
  store i8 %1, i8* %12, align 1
  call void @llvm.dbg.declare(metadata i8* %12, metadata !2171, metadata !DIExpression()), !dbg !2172
  %13 = load i8*, i8** %11, align 8, !dbg !2173
  %14 = load i8, i8* %12, align 1, !dbg !2174
  %15 = call i8* @quotearg_char_mem(i8* %13, i64 -1, i8 signext %14), !dbg !2175
  %16 = load i32, i32* @x.21
  %17 = load i32, i32* @y.22
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !2176

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i8*, align 8
  %25 = alloca i8, align 1
  store i8* %0, i8** %24, align 8
  call void @llvm.dbg.declare(metadata i8** %24, metadata !2177, metadata !DIExpression()), !dbg !2170
  store i8 %1, i8* %25, align 1
  call void @llvm.dbg.declare(metadata i8* %25, metadata !2209, metadata !DIExpression()), !dbg !2172
  %26 = load i8*, i8** %24, align 8, !dbg !2173
  %27 = load i8, i8* %25, align 1, !dbg !2174
  %28 = call i8* @quotearg_char_mem(i8* %26, i64 -1, i8 signext %27), !dbg !2175
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_colon(i8*) #5 !dbg !2210 {
  %2 = load i32, i32* @x.23
  %3 = load i32, i32* @y.24
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !2213, metadata !DIExpression()), !dbg !2214
  %11 = load i8*, i8** %10, align 8, !dbg !2215
  %12 = call i8* @quotearg_char(i8* %11, i8 signext 58), !dbg !2216
  %13 = load i32, i32* @x.23
  %14 = load i32, i32* @y.24
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !2217

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !2218, metadata !DIExpression()), !dbg !2214
  %22 = load i8*, i8** %21, align 8, !dbg !2215
  %23 = call i8* @quotearg_char(i8* %22, i8 signext 58), !dbg !2216
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_arn(%struct._IO_FILE*, i8*, i8*, i8*, i8**, i64) #5 !dbg !2250 {
  %7 = load i32, i32* @x.25
  %8 = load i32, i32* @y.26
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %6, %originalBBalteredBB
  %15 = alloca %struct._IO_FILE*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8**, align 8
  %20 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %15, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %15, metadata !2310, metadata !DIExpression()), !dbg !2311
  store i8* %1, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !2312, metadata !DIExpression()), !dbg !2313
  store i8* %2, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !2314, metadata !DIExpression()), !dbg !2315
  store i8* %3, i8** %18, align 8
  call void @llvm.dbg.declare(metadata i8** %18, metadata !2316, metadata !DIExpression()), !dbg !2317
  store i8** %4, i8*** %19, align 8
  call void @llvm.dbg.declare(metadata i8*** %19, metadata !2318, metadata !DIExpression()), !dbg !2319
  store i64 %5, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !2320, metadata !DIExpression()), !dbg !2321
  %21 = load i8*, i8** %16, align 8, !dbg !2322
  %22 = icmp ne i8* %21, null, !dbg !2322
  %23 = load i32, i32* @x.25
  %24 = load i32, i32* @y.26
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %53, !dbg !2324

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.25
  %33 = load i32, i32* @y.26
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2325
  %41 = load i8*, i8** %16, align 8, !dbg !2326
  %42 = load i8*, i8** %17, align 8, !dbg !2327
  %43 = load i8*, i8** %18, align 8, !dbg !2328
  %44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.63, i64 0, i64 0), i8* %41, i8* %42, i8* %43), !dbg !2329
  %45 = load i32, i32* @x.25
  %46 = load i32, i32* @y.26
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %74, !dbg !2329

53:                                               ; preds = %originalBBpart2
  %54 = load i32, i32* @x.25
  %55 = load i32, i32* @y.26
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2330
  %63 = load i8*, i8** %17, align 8, !dbg !2331
  %64 = load i8*, i8** %18, align 8, !dbg !2332
  %65 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.64, i64 0, i64 0), i8* %63, i8* %64), !dbg !2333
  %66 = load i32, i32* @x.25
  %67 = load i32, i32* @y.26
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %74

74:                                               ; preds = %originalBBpart28, %originalBBpart24
  %75 = load i32, i32* @x.25
  %76 = load i32, i32* @y.26
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %74, %originalBB10alteredBB
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2334
  %84 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.65, i64 0, i64 0)) #10, !dbg !2335
  %85 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %83, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %84, i32 2020), !dbg !2336
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2337
  %87 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.66, i64 0, i64 0), %struct._IO_FILE* %86), !dbg !2337
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2338
  %89 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.67, i64 0, i64 0)) #10, !dbg !2339
  %90 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %88, i8* %89, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.68, i64 0, i64 0)), !dbg !2340
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2341
  %92 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.66, i64 0, i64 0), %struct._IO_FILE* %91), !dbg !2341
  %93 = load i64, i64* %20, align 8, !dbg !2342
  %94 = load i32, i32* @x.25
  %95 = load i32, i32* @y.26
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  switch i64 %93, label %386 [
    i64 0, label %102
    i64 1, label %119
    i64 2, label %142
    i64 3, label %168
    i64 4, label %181
    i64 5, label %197
    i64 6, label %216
    i64 7, label %254
    i64 8, label %295
    i64 9, label %339
  ], !dbg !2343

102:                                              ; preds = %originalBBpart212
  %103 = load i32, i32* @x.25
  %104 = load i32, i32* @y.26
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %102, %originalBB14alteredBB
  %111 = load i32, i32* @x.25
  %112 = load i32, i32* @y.26
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %433, !dbg !2344

119:                                              ; preds = %originalBBpart212
  %120 = load i32, i32* @x.25
  %121 = load i32, i32* @y.26
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %119, %originalBB18alteredBB
  %128 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2346
  %129 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.69, i64 0, i64 0)) #10, !dbg !2347
  %130 = load i8**, i8*** %19, align 8, !dbg !2348
  %131 = getelementptr inbounds i8*, i8** %130, i64 0, !dbg !2348
  %132 = load i8*, i8** %131, align 8, !dbg !2348
  %133 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %128, i8* %129, i8* %132), !dbg !2349
  %134 = load i32, i32* @x.25
  %135 = load i32, i32* @y.26
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %433, !dbg !2350

142:                                              ; preds = %originalBBpart212
  %143 = load i32, i32* @x.25
  %144 = load i32, i32* @y.26
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %142, %originalBB22alteredBB
  %151 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2351
  %152 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.70, i64 0, i64 0)) #10, !dbg !2352
  %153 = load i8**, i8*** %19, align 8, !dbg !2353
  %154 = getelementptr inbounds i8*, i8** %153, i64 0, !dbg !2353
  %155 = load i8*, i8** %154, align 8, !dbg !2353
  %156 = load i8**, i8*** %19, align 8, !dbg !2354
  %157 = getelementptr inbounds i8*, i8** %156, i64 1, !dbg !2354
  %158 = load i8*, i8** %157, align 8, !dbg !2354
  %159 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %151, i8* %152, i8* %155, i8* %158), !dbg !2355
  %160 = load i32, i32* @x.25
  %161 = load i32, i32* @y.26
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %433, !dbg !2356

168:                                              ; preds = %originalBBpart212
  %169 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2357
  %170 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.71, i64 0, i64 0)) #10, !dbg !2358
  %171 = load i8**, i8*** %19, align 8, !dbg !2359
  %172 = getelementptr inbounds i8*, i8** %171, i64 0, !dbg !2359
  %173 = load i8*, i8** %172, align 8, !dbg !2359
  %174 = load i8**, i8*** %19, align 8, !dbg !2360
  %175 = getelementptr inbounds i8*, i8** %174, i64 1, !dbg !2360
  %176 = load i8*, i8** %175, align 8, !dbg !2360
  %177 = load i8**, i8*** %19, align 8, !dbg !2361
  %178 = getelementptr inbounds i8*, i8** %177, i64 2, !dbg !2361
  %179 = load i8*, i8** %178, align 8, !dbg !2361
  %180 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %169, i8* %170, i8* %173, i8* %176, i8* %179), !dbg !2362
  br label %433, !dbg !2363

181:                                              ; preds = %originalBBpart212
  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2364
  %183 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.72, i64 0, i64 0)) #10, !dbg !2365
  %184 = load i8**, i8*** %19, align 8, !dbg !2366
  %185 = getelementptr inbounds i8*, i8** %184, i64 0, !dbg !2366
  %186 = load i8*, i8** %185, align 8, !dbg !2366
  %187 = load i8**, i8*** %19, align 8, !dbg !2367
  %188 = getelementptr inbounds i8*, i8** %187, i64 1, !dbg !2367
  %189 = load i8*, i8** %188, align 8, !dbg !2367
  %190 = load i8**, i8*** %19, align 8, !dbg !2368
  %191 = getelementptr inbounds i8*, i8** %190, i64 2, !dbg !2368
  %192 = load i8*, i8** %191, align 8, !dbg !2368
  %193 = load i8**, i8*** %19, align 8, !dbg !2369
  %194 = getelementptr inbounds i8*, i8** %193, i64 3, !dbg !2369
  %195 = load i8*, i8** %194, align 8, !dbg !2369
  %196 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %182, i8* %183, i8* %186, i8* %189, i8* %192, i8* %195), !dbg !2370
  br label %433, !dbg !2371

197:                                              ; preds = %originalBBpart212
  %198 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2372
  %199 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.73, i64 0, i64 0)) #10, !dbg !2373
  %200 = load i8**, i8*** %19, align 8, !dbg !2374
  %201 = getelementptr inbounds i8*, i8** %200, i64 0, !dbg !2374
  %202 = load i8*, i8** %201, align 8, !dbg !2374
  %203 = load i8**, i8*** %19, align 8, !dbg !2375
  %204 = getelementptr inbounds i8*, i8** %203, i64 1, !dbg !2375
  %205 = load i8*, i8** %204, align 8, !dbg !2375
  %206 = load i8**, i8*** %19, align 8, !dbg !2376
  %207 = getelementptr inbounds i8*, i8** %206, i64 2, !dbg !2376
  %208 = load i8*, i8** %207, align 8, !dbg !2376
  %209 = load i8**, i8*** %19, align 8, !dbg !2377
  %210 = getelementptr inbounds i8*, i8** %209, i64 3, !dbg !2377
  %211 = load i8*, i8** %210, align 8, !dbg !2377
  %212 = load i8**, i8*** %19, align 8, !dbg !2378
  %213 = getelementptr inbounds i8*, i8** %212, i64 4, !dbg !2378
  %214 = load i8*, i8** %213, align 8, !dbg !2378
  %215 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %198, i8* %199, i8* %202, i8* %205, i8* %208, i8* %211, i8* %214), !dbg !2379
  br label %433, !dbg !2380

216:                                              ; preds = %originalBBpart212
  %217 = load i32, i32* @x.25
  %218 = load i32, i32* @y.26
  %219 = sub i32 %217, 1
  %220 = mul i32 %217, %219
  %221 = urem i32 %220, 2
  %222 = icmp eq i32 %221, 0
  %223 = icmp slt i32 %218, 10
  %224 = or i1 %222, %223
  br i1 %224, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %216, %originalBB26alteredBB
  %225 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2381
  %226 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.74, i64 0, i64 0)) #10, !dbg !2382
  %227 = load i8**, i8*** %19, align 8, !dbg !2383
  %228 = getelementptr inbounds i8*, i8** %227, i64 0, !dbg !2383
  %229 = load i8*, i8** %228, align 8, !dbg !2383
  %230 = load i8**, i8*** %19, align 8, !dbg !2384
  %231 = getelementptr inbounds i8*, i8** %230, i64 1, !dbg !2384
  %232 = load i8*, i8** %231, align 8, !dbg !2384
  %233 = load i8**, i8*** %19, align 8, !dbg !2385
  %234 = getelementptr inbounds i8*, i8** %233, i64 2, !dbg !2385
  %235 = load i8*, i8** %234, align 8, !dbg !2385
  %236 = load i8**, i8*** %19, align 8, !dbg !2386
  %237 = getelementptr inbounds i8*, i8** %236, i64 3, !dbg !2386
  %238 = load i8*, i8** %237, align 8, !dbg !2386
  %239 = load i8**, i8*** %19, align 8, !dbg !2387
  %240 = getelementptr inbounds i8*, i8** %239, i64 4, !dbg !2387
  %241 = load i8*, i8** %240, align 8, !dbg !2387
  %242 = load i8**, i8*** %19, align 8, !dbg !2388
  %243 = getelementptr inbounds i8*, i8** %242, i64 5, !dbg !2388
  %244 = load i8*, i8** %243, align 8, !dbg !2388
  %245 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %225, i8* %226, i8* %229, i8* %232, i8* %235, i8* %238, i8* %241, i8* %244), !dbg !2389
  %246 = load i32, i32* @x.25
  %247 = load i32, i32* @y.26
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %433, !dbg !2390

254:                                              ; preds = %originalBBpart212
  %255 = load i32, i32* @x.25
  %256 = load i32, i32* @y.26
  %257 = sub i32 %255, 1
  %258 = mul i32 %255, %257
  %259 = urem i32 %258, 2
  %260 = icmp eq i32 %259, 0
  %261 = icmp slt i32 %256, 10
  %262 = or i1 %260, %261
  br i1 %262, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %254, %originalBB30alteredBB
  %263 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2391
  %264 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.75, i64 0, i64 0)) #10, !dbg !2392
  %265 = load i8**, i8*** %19, align 8, !dbg !2393
  %266 = getelementptr inbounds i8*, i8** %265, i64 0, !dbg !2393
  %267 = load i8*, i8** %266, align 8, !dbg !2393
  %268 = load i8**, i8*** %19, align 8, !dbg !2394
  %269 = getelementptr inbounds i8*, i8** %268, i64 1, !dbg !2394
  %270 = load i8*, i8** %269, align 8, !dbg !2394
  %271 = load i8**, i8*** %19, align 8, !dbg !2395
  %272 = getelementptr inbounds i8*, i8** %271, i64 2, !dbg !2395
  %273 = load i8*, i8** %272, align 8, !dbg !2395
  %274 = load i8**, i8*** %19, align 8, !dbg !2396
  %275 = getelementptr inbounds i8*, i8** %274, i64 3, !dbg !2396
  %276 = load i8*, i8** %275, align 8, !dbg !2396
  %277 = load i8**, i8*** %19, align 8, !dbg !2397
  %278 = getelementptr inbounds i8*, i8** %277, i64 4, !dbg !2397
  %279 = load i8*, i8** %278, align 8, !dbg !2397
  %280 = load i8**, i8*** %19, align 8, !dbg !2398
  %281 = getelementptr inbounds i8*, i8** %280, i64 5, !dbg !2398
  %282 = load i8*, i8** %281, align 8, !dbg !2398
  %283 = load i8**, i8*** %19, align 8, !dbg !2399
  %284 = getelementptr inbounds i8*, i8** %283, i64 6, !dbg !2399
  %285 = load i8*, i8** %284, align 8, !dbg !2399
  %286 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %263, i8* %264, i8* %267, i8* %270, i8* %273, i8* %276, i8* %279, i8* %282, i8* %285), !dbg !2400
  %287 = load i32, i32* @x.25
  %288 = load i32, i32* @y.26
  %289 = sub i32 %287, 1
  %290 = mul i32 %287, %289
  %291 = urem i32 %290, 2
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %292, %293
  br i1 %294, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %433, !dbg !2401

295:                                              ; preds = %originalBBpart212
  %296 = load i32, i32* @x.25
  %297 = load i32, i32* @y.26
  %298 = sub i32 %296, 1
  %299 = mul i32 %296, %298
  %300 = urem i32 %299, 2
  %301 = icmp eq i32 %300, 0
  %302 = icmp slt i32 %297, 10
  %303 = or i1 %301, %302
  br i1 %303, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %295, %originalBB34alteredBB
  %304 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2402
  %305 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.76, i64 0, i64 0)) #10, !dbg !2403
  %306 = load i8**, i8*** %19, align 8, !dbg !2404
  %307 = getelementptr inbounds i8*, i8** %306, i64 0, !dbg !2404
  %308 = load i8*, i8** %307, align 8, !dbg !2404
  %309 = load i8**, i8*** %19, align 8, !dbg !2405
  %310 = getelementptr inbounds i8*, i8** %309, i64 1, !dbg !2405
  %311 = load i8*, i8** %310, align 8, !dbg !2405
  %312 = load i8**, i8*** %19, align 8, !dbg !2406
  %313 = getelementptr inbounds i8*, i8** %312, i64 2, !dbg !2406
  %314 = load i8*, i8** %313, align 8, !dbg !2406
  %315 = load i8**, i8*** %19, align 8, !dbg !2407
  %316 = getelementptr inbounds i8*, i8** %315, i64 3, !dbg !2407
  %317 = load i8*, i8** %316, align 8, !dbg !2407
  %318 = load i8**, i8*** %19, align 8, !dbg !2408
  %319 = getelementptr inbounds i8*, i8** %318, i64 4, !dbg !2408
  %320 = load i8*, i8** %319, align 8, !dbg !2408
  %321 = load i8**, i8*** %19, align 8, !dbg !2409
  %322 = getelementptr inbounds i8*, i8** %321, i64 5, !dbg !2409
  %323 = load i8*, i8** %322, align 8, !dbg !2409
  %324 = load i8**, i8*** %19, align 8, !dbg !2410
  %325 = getelementptr inbounds i8*, i8** %324, i64 6, !dbg !2410
  %326 = load i8*, i8** %325, align 8, !dbg !2410
  %327 = load i8**, i8*** %19, align 8, !dbg !2411
  %328 = getelementptr inbounds i8*, i8** %327, i64 7, !dbg !2411
  %329 = load i8*, i8** %328, align 8, !dbg !2411
  %330 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %304, i8* %305, i8* %308, i8* %311, i8* %314, i8* %317, i8* %320, i8* %323, i8* %326, i8* %329), !dbg !2412
  %331 = load i32, i32* @x.25
  %332 = load i32, i32* @y.26
  %333 = sub i32 %331, 1
  %334 = mul i32 %331, %333
  %335 = urem i32 %334, 2
  %336 = icmp eq i32 %335, 0
  %337 = icmp slt i32 %332, 10
  %338 = or i1 %336, %337
  br i1 %338, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %433, !dbg !2413

339:                                              ; preds = %originalBBpart212
  %340 = load i32, i32* @x.25
  %341 = load i32, i32* @y.26
  %342 = sub i32 %340, 1
  %343 = mul i32 %340, %342
  %344 = urem i32 %343, 2
  %345 = icmp eq i32 %344, 0
  %346 = icmp slt i32 %341, 10
  %347 = or i1 %345, %346
  br i1 %347, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %339, %originalBB38alteredBB
  %348 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2414
  %349 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.77, i64 0, i64 0)) #10, !dbg !2415
  %350 = load i8**, i8*** %19, align 8, !dbg !2416
  %351 = getelementptr inbounds i8*, i8** %350, i64 0, !dbg !2416
  %352 = load i8*, i8** %351, align 8, !dbg !2416
  %353 = load i8**, i8*** %19, align 8, !dbg !2417
  %354 = getelementptr inbounds i8*, i8** %353, i64 1, !dbg !2417
  %355 = load i8*, i8** %354, align 8, !dbg !2417
  %356 = load i8**, i8*** %19, align 8, !dbg !2418
  %357 = getelementptr inbounds i8*, i8** %356, i64 2, !dbg !2418
  %358 = load i8*, i8** %357, align 8, !dbg !2418
  %359 = load i8**, i8*** %19, align 8, !dbg !2419
  %360 = getelementptr inbounds i8*, i8** %359, i64 3, !dbg !2419
  %361 = load i8*, i8** %360, align 8, !dbg !2419
  %362 = load i8**, i8*** %19, align 8, !dbg !2420
  %363 = getelementptr inbounds i8*, i8** %362, i64 4, !dbg !2420
  %364 = load i8*, i8** %363, align 8, !dbg !2420
  %365 = load i8**, i8*** %19, align 8, !dbg !2421
  %366 = getelementptr inbounds i8*, i8** %365, i64 5, !dbg !2421
  %367 = load i8*, i8** %366, align 8, !dbg !2421
  %368 = load i8**, i8*** %19, align 8, !dbg !2422
  %369 = getelementptr inbounds i8*, i8** %368, i64 6, !dbg !2422
  %370 = load i8*, i8** %369, align 8, !dbg !2422
  %371 = load i8**, i8*** %19, align 8, !dbg !2423
  %372 = getelementptr inbounds i8*, i8** %371, i64 7, !dbg !2423
  %373 = load i8*, i8** %372, align 8, !dbg !2423
  %374 = load i8**, i8*** %19, align 8, !dbg !2424
  %375 = getelementptr inbounds i8*, i8** %374, i64 8, !dbg !2424
  %376 = load i8*, i8** %375, align 8, !dbg !2424
  %377 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %348, i8* %349, i8* %352, i8* %355, i8* %358, i8* %361, i8* %364, i8* %367, i8* %370, i8* %373, i8* %376), !dbg !2425
  %378 = load i32, i32* @x.25
  %379 = load i32, i32* @y.26
  %380 = sub i32 %378, 1
  %381 = mul i32 %378, %380
  %382 = urem i32 %381, 2
  %383 = icmp eq i32 %382, 0
  %384 = icmp slt i32 %379, 10
  %385 = or i1 %383, %384
  br i1 %385, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %433, !dbg !2426

386:                                              ; preds = %originalBBpart212
  %387 = load i32, i32* @x.25
  %388 = load i32, i32* @y.26
  %389 = sub i32 %387, 1
  %390 = mul i32 %387, %389
  %391 = urem i32 %390, 2
  %392 = icmp eq i32 %391, 0
  %393 = icmp slt i32 %388, 10
  %394 = or i1 %392, %393
  br i1 %394, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %386, %originalBB42alteredBB
  %395 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2427
  %396 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.78, i64 0, i64 0)) #10, !dbg !2428
  %397 = load i8**, i8*** %19, align 8, !dbg !2429
  %398 = getelementptr inbounds i8*, i8** %397, i64 0, !dbg !2429
  %399 = load i8*, i8** %398, align 8, !dbg !2429
  %400 = load i8**, i8*** %19, align 8, !dbg !2430
  %401 = getelementptr inbounds i8*, i8** %400, i64 1, !dbg !2430
  %402 = load i8*, i8** %401, align 8, !dbg !2430
  %403 = load i8**, i8*** %19, align 8, !dbg !2431
  %404 = getelementptr inbounds i8*, i8** %403, i64 2, !dbg !2431
  %405 = load i8*, i8** %404, align 8, !dbg !2431
  %406 = load i8**, i8*** %19, align 8, !dbg !2432
  %407 = getelementptr inbounds i8*, i8** %406, i64 3, !dbg !2432
  %408 = load i8*, i8** %407, align 8, !dbg !2432
  %409 = load i8**, i8*** %19, align 8, !dbg !2433
  %410 = getelementptr inbounds i8*, i8** %409, i64 4, !dbg !2433
  %411 = load i8*, i8** %410, align 8, !dbg !2433
  %412 = load i8**, i8*** %19, align 8, !dbg !2434
  %413 = getelementptr inbounds i8*, i8** %412, i64 5, !dbg !2434
  %414 = load i8*, i8** %413, align 8, !dbg !2434
  %415 = load i8**, i8*** %19, align 8, !dbg !2435
  %416 = getelementptr inbounds i8*, i8** %415, i64 6, !dbg !2435
  %417 = load i8*, i8** %416, align 8, !dbg !2435
  %418 = load i8**, i8*** %19, align 8, !dbg !2436
  %419 = getelementptr inbounds i8*, i8** %418, i64 7, !dbg !2436
  %420 = load i8*, i8** %419, align 8, !dbg !2436
  %421 = load i8**, i8*** %19, align 8, !dbg !2437
  %422 = getelementptr inbounds i8*, i8** %421, i64 8, !dbg !2437
  %423 = load i8*, i8** %422, align 8, !dbg !2437
  %424 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %395, i8* %396, i8* %399, i8* %402, i8* %405, i8* %408, i8* %411, i8* %414, i8* %417, i8* %420, i8* %423), !dbg !2438
  %425 = load i32, i32* @x.25
  %426 = load i32, i32* @y.26
  %427 = sub i32 %425, 1
  %428 = mul i32 %425, %427
  %429 = urem i32 %428, 2
  %430 = icmp eq i32 %429, 0
  %431 = icmp slt i32 %426, 10
  %432 = or i1 %430, %431
  br i1 %432, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %433, !dbg !2439

433:                                              ; preds = %originalBBpart244, %originalBBpart240, %originalBBpart236, %originalBBpart232, %originalBBpart228, %197, %181, %168, %originalBBpart224, %originalBBpart220, %originalBBpart216
  %434 = load i32, i32* @x.25
  %435 = load i32, i32* @y.26
  %436 = sub i32 %434, 1
  %437 = mul i32 %434, %436
  %438 = urem i32 %437, 2
  %439 = icmp eq i32 %438, 0
  %440 = icmp slt i32 %435, 10
  %441 = or i1 %439, %440
  br i1 %441, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %433, %originalBB46alteredBB
  %442 = load i32, i32* @x.25
  %443 = load i32, i32* @y.26
  %444 = sub i32 %442, 1
  %445 = mul i32 %442, %444
  %446 = urem i32 %445, 2
  %447 = icmp eq i32 %446, 0
  %448 = icmp slt i32 %443, 10
  %449 = or i1 %447, %448
  br i1 %449, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  ret void, !dbg !2440

originalBBalteredBB:                              ; preds = %originalBB, %6
  %450 = alloca %struct._IO_FILE*, align 8
  %451 = alloca i8*, align 8
  %452 = alloca i8*, align 8
  %453 = alloca i8*, align 8
  %454 = alloca i8**, align 8
  %455 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %450, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %450, metadata !2441, metadata !DIExpression()), !dbg !2311
  store i8* %1, i8** %451, align 8
  call void @llvm.dbg.declare(metadata i8** %451, metadata !2480, metadata !DIExpression()), !dbg !2313
  store i8* %2, i8** %452, align 8
  call void @llvm.dbg.declare(metadata i8** %452, metadata !2481, metadata !DIExpression()), !dbg !2315
  store i8* %3, i8** %453, align 8
  call void @llvm.dbg.declare(metadata i8** %453, metadata !2482, metadata !DIExpression()), !dbg !2317
  store i8** %4, i8*** %454, align 8
  call void @llvm.dbg.declare(metadata i8*** %454, metadata !2483, metadata !DIExpression()), !dbg !2319
  store i64 %5, i64* %455, align 8
  call void @llvm.dbg.declare(metadata i64* %455, metadata !2484, metadata !DIExpression()), !dbg !2321
  %456 = load i8*, i8** %451, align 8, !dbg !2322
  %457 = icmp ne i8* %456, null, !dbg !2322
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  %458 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2325
  %459 = load i8*, i8** %16, align 8, !dbg !2326
  %460 = load i8*, i8** %17, align 8, !dbg !2327
  %461 = load i8*, i8** %18, align 8, !dbg !2328
  %462 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %458, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.63, i64 0, i64 0), i8* %459, i8* %460, i8* %461), !dbg !2329
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  %463 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2330
  %464 = load i8*, i8** %17, align 8, !dbg !2331
  %465 = load i8*, i8** %18, align 8, !dbg !2332
  %466 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %463, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.64, i64 0, i64 0), i8* %464, i8* %465), !dbg !2333
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %74
  %467 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2334
  %468 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.65, i64 0, i64 0)) #10, !dbg !2335
  %469 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %467, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %468, i32 2020), !dbg !2336
  %470 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2337
  %471 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.66, i64 0, i64 0), %struct._IO_FILE* %470), !dbg !2337
  %472 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2338
  %473 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.67, i64 0, i64 0)) #10, !dbg !2339
  %474 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %472, i8* %473, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.68, i64 0, i64 0)), !dbg !2340
  %475 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2341
  %476 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.66, i64 0, i64 0), %struct._IO_FILE* %475), !dbg !2341
  %477 = load i64, i64* %20, align 8, !dbg !2342
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %102
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %119
  %478 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2346
  %479 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.69, i64 0, i64 0)) #10, !dbg !2347
  %480 = load i8**, i8*** %19, align 8, !dbg !2348
  %481 = getelementptr inbounds i8*, i8** %480, i64 0, !dbg !2348
  %482 = load i8*, i8** %481, align 8, !dbg !2348
  %483 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %478, i8* %479, i8* %482), !dbg !2349
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %142
  %484 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2351
  %485 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.70, i64 0, i64 0)) #10, !dbg !2352
  %486 = load i8**, i8*** %19, align 8, !dbg !2353
  %487 = getelementptr inbounds i8*, i8** %486, i64 0, !dbg !2353
  %488 = load i8*, i8** %487, align 8, !dbg !2353
  %489 = load i8**, i8*** %19, align 8, !dbg !2354
  %490 = getelementptr inbounds i8*, i8** %489, i64 1, !dbg !2354
  %491 = load i8*, i8** %490, align 8, !dbg !2354
  %492 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %484, i8* %485, i8* %488, i8* %491), !dbg !2355
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %216
  %493 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2381
  %494 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.74, i64 0, i64 0)) #10, !dbg !2382
  %495 = load i8**, i8*** %19, align 8, !dbg !2383
  %496 = getelementptr inbounds i8*, i8** %495, i64 0, !dbg !2383
  %497 = load i8*, i8** %496, align 8, !dbg !2383
  %498 = load i8**, i8*** %19, align 8, !dbg !2384
  %499 = getelementptr inbounds i8*, i8** %498, i64 1, !dbg !2384
  %500 = load i8*, i8** %499, align 8, !dbg !2384
  %501 = load i8**, i8*** %19, align 8, !dbg !2385
  %502 = getelementptr inbounds i8*, i8** %501, i64 2, !dbg !2385
  %503 = load i8*, i8** %502, align 8, !dbg !2385
  %504 = load i8**, i8*** %19, align 8, !dbg !2386
  %505 = getelementptr inbounds i8*, i8** %504, i64 3, !dbg !2386
  %506 = load i8*, i8** %505, align 8, !dbg !2386
  %507 = load i8**, i8*** %19, align 8, !dbg !2387
  %508 = getelementptr inbounds i8*, i8** %507, i64 4, !dbg !2387
  %509 = load i8*, i8** %508, align 8, !dbg !2387
  %510 = load i8**, i8*** %19, align 8, !dbg !2388
  %511 = getelementptr inbounds i8*, i8** %510, i64 5, !dbg !2388
  %512 = load i8*, i8** %511, align 8, !dbg !2388
  %513 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %493, i8* %494, i8* %497, i8* %500, i8* %503, i8* %506, i8* %509, i8* %512), !dbg !2389
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %254
  %514 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2391
  %515 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.75, i64 0, i64 0)) #10, !dbg !2392
  %516 = load i8**, i8*** %19, align 8, !dbg !2393
  %517 = getelementptr inbounds i8*, i8** %516, i64 0, !dbg !2393
  %518 = load i8*, i8** %517, align 8, !dbg !2393
  %519 = load i8**, i8*** %19, align 8, !dbg !2394
  %520 = getelementptr inbounds i8*, i8** %519, i64 1, !dbg !2394
  %521 = load i8*, i8** %520, align 8, !dbg !2394
  %522 = load i8**, i8*** %19, align 8, !dbg !2395
  %523 = getelementptr inbounds i8*, i8** %522, i64 2, !dbg !2395
  %524 = load i8*, i8** %523, align 8, !dbg !2395
  %525 = load i8**, i8*** %19, align 8, !dbg !2396
  %526 = getelementptr inbounds i8*, i8** %525, i64 3, !dbg !2396
  %527 = load i8*, i8** %526, align 8, !dbg !2396
  %528 = load i8**, i8*** %19, align 8, !dbg !2397
  %529 = getelementptr inbounds i8*, i8** %528, i64 4, !dbg !2397
  %530 = load i8*, i8** %529, align 8, !dbg !2397
  %531 = load i8**, i8*** %19, align 8, !dbg !2398
  %532 = getelementptr inbounds i8*, i8** %531, i64 5, !dbg !2398
  %533 = load i8*, i8** %532, align 8, !dbg !2398
  %534 = load i8**, i8*** %19, align 8, !dbg !2399
  %535 = getelementptr inbounds i8*, i8** %534, i64 6, !dbg !2399
  %536 = load i8*, i8** %535, align 8, !dbg !2399
  %537 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %514, i8* %515, i8* %518, i8* %521, i8* %524, i8* %527, i8* %530, i8* %533, i8* %536), !dbg !2400
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %295
  %538 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2402
  %539 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.76, i64 0, i64 0)) #10, !dbg !2403
  %540 = load i8**, i8*** %19, align 8, !dbg !2404
  %541 = getelementptr inbounds i8*, i8** %540, i64 0, !dbg !2404
  %542 = load i8*, i8** %541, align 8, !dbg !2404
  %543 = load i8**, i8*** %19, align 8, !dbg !2405
  %544 = getelementptr inbounds i8*, i8** %543, i64 1, !dbg !2405
  %545 = load i8*, i8** %544, align 8, !dbg !2405
  %546 = load i8**, i8*** %19, align 8, !dbg !2406
  %547 = getelementptr inbounds i8*, i8** %546, i64 2, !dbg !2406
  %548 = load i8*, i8** %547, align 8, !dbg !2406
  %549 = load i8**, i8*** %19, align 8, !dbg !2407
  %550 = getelementptr inbounds i8*, i8** %549, i64 3, !dbg !2407
  %551 = load i8*, i8** %550, align 8, !dbg !2407
  %552 = load i8**, i8*** %19, align 8, !dbg !2408
  %553 = getelementptr inbounds i8*, i8** %552, i64 4, !dbg !2408
  %554 = load i8*, i8** %553, align 8, !dbg !2408
  %555 = load i8**, i8*** %19, align 8, !dbg !2409
  %556 = getelementptr inbounds i8*, i8** %555, i64 5, !dbg !2409
  %557 = load i8*, i8** %556, align 8, !dbg !2409
  %558 = load i8**, i8*** %19, align 8, !dbg !2410
  %559 = getelementptr inbounds i8*, i8** %558, i64 6, !dbg !2410
  %560 = load i8*, i8** %559, align 8, !dbg !2410
  %561 = load i8**, i8*** %19, align 8, !dbg !2411
  %562 = getelementptr inbounds i8*, i8** %561, i64 7, !dbg !2411
  %563 = load i8*, i8** %562, align 8, !dbg !2411
  %564 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %538, i8* %539, i8* %542, i8* %545, i8* %548, i8* %551, i8* %554, i8* %557, i8* %560, i8* %563), !dbg !2412
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %339
  %565 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2414
  %566 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.77, i64 0, i64 0)) #10, !dbg !2415
  %567 = load i8**, i8*** %19, align 8, !dbg !2416
  %568 = getelementptr inbounds i8*, i8** %567, i64 0, !dbg !2416
  %569 = load i8*, i8** %568, align 8, !dbg !2416
  %570 = load i8**, i8*** %19, align 8, !dbg !2417
  %571 = getelementptr inbounds i8*, i8** %570, i64 1, !dbg !2417
  %572 = load i8*, i8** %571, align 8, !dbg !2417
  %573 = load i8**, i8*** %19, align 8, !dbg !2418
  %574 = getelementptr inbounds i8*, i8** %573, i64 2, !dbg !2418
  %575 = load i8*, i8** %574, align 8, !dbg !2418
  %576 = load i8**, i8*** %19, align 8, !dbg !2419
  %577 = getelementptr inbounds i8*, i8** %576, i64 3, !dbg !2419
  %578 = load i8*, i8** %577, align 8, !dbg !2419
  %579 = load i8**, i8*** %19, align 8, !dbg !2420
  %580 = getelementptr inbounds i8*, i8** %579, i64 4, !dbg !2420
  %581 = load i8*, i8** %580, align 8, !dbg !2420
  %582 = load i8**, i8*** %19, align 8, !dbg !2421
  %583 = getelementptr inbounds i8*, i8** %582, i64 5, !dbg !2421
  %584 = load i8*, i8** %583, align 8, !dbg !2421
  %585 = load i8**, i8*** %19, align 8, !dbg !2422
  %586 = getelementptr inbounds i8*, i8** %585, i64 6, !dbg !2422
  %587 = load i8*, i8** %586, align 8, !dbg !2422
  %588 = load i8**, i8*** %19, align 8, !dbg !2423
  %589 = getelementptr inbounds i8*, i8** %588, i64 7, !dbg !2423
  %590 = load i8*, i8** %589, align 8, !dbg !2423
  %591 = load i8**, i8*** %19, align 8, !dbg !2424
  %592 = getelementptr inbounds i8*, i8** %591, i64 8, !dbg !2424
  %593 = load i8*, i8** %592, align 8, !dbg !2424
  %594 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %565, i8* %566, i8* %569, i8* %572, i8* %575, i8* %578, i8* %581, i8* %584, i8* %587, i8* %590, i8* %593), !dbg !2425
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %386
  %595 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2427
  %596 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.78, i64 0, i64 0)) #10, !dbg !2428
  %597 = load i8**, i8*** %19, align 8, !dbg !2429
  %598 = getelementptr inbounds i8*, i8** %597, i64 0, !dbg !2429
  %599 = load i8*, i8** %598, align 8, !dbg !2429
  %600 = load i8**, i8*** %19, align 8, !dbg !2430
  %601 = getelementptr inbounds i8*, i8** %600, i64 1, !dbg !2430
  %602 = load i8*, i8** %601, align 8, !dbg !2430
  %603 = load i8**, i8*** %19, align 8, !dbg !2431
  %604 = getelementptr inbounds i8*, i8** %603, i64 2, !dbg !2431
  %605 = load i8*, i8** %604, align 8, !dbg !2431
  %606 = load i8**, i8*** %19, align 8, !dbg !2432
  %607 = getelementptr inbounds i8*, i8** %606, i64 3, !dbg !2432
  %608 = load i8*, i8** %607, align 8, !dbg !2432
  %609 = load i8**, i8*** %19, align 8, !dbg !2433
  %610 = getelementptr inbounds i8*, i8** %609, i64 4, !dbg !2433
  %611 = load i8*, i8** %610, align 8, !dbg !2433
  %612 = load i8**, i8*** %19, align 8, !dbg !2434
  %613 = getelementptr inbounds i8*, i8** %612, i64 5, !dbg !2434
  %614 = load i8*, i8** %613, align 8, !dbg !2434
  %615 = load i8**, i8*** %19, align 8, !dbg !2435
  %616 = getelementptr inbounds i8*, i8** %615, i64 6, !dbg !2435
  %617 = load i8*, i8** %616, align 8, !dbg !2435
  %618 = load i8**, i8*** %19, align 8, !dbg !2436
  %619 = getelementptr inbounds i8*, i8** %618, i64 7, !dbg !2436
  %620 = load i8*, i8** %619, align 8, !dbg !2436
  %621 = load i8**, i8*** %19, align 8, !dbg !2437
  %622 = getelementptr inbounds i8*, i8** %621, i64 8, !dbg !2437
  %623 = load i8*, i8** %622, align 8, !dbg !2437
  %624 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %595, i8* %596, i8* %599, i8* %602, i8* %605, i8* %608, i8* %611, i8* %614, i8* %617, i8* %620, i8* %623), !dbg !2438
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %433
  br label %originalBB46
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_va(%struct._IO_FILE*, i8*, i8*, i8*, %struct.__va_list_tag*) #5 !dbg !2485 {
  %6 = load i32, i32* @x.27
  %7 = load i32, i32* @y.28
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = alloca %struct._IO_FILE*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca %struct.__va_list_tag*, align 8
  %19 = alloca i64, align 8
  %20 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %14, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %14, metadata !2495, metadata !DIExpression()), !dbg !2496
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2497, metadata !DIExpression()), !dbg !2498
  store i8* %2, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !2499, metadata !DIExpression()), !dbg !2500
  store i8* %3, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !2501, metadata !DIExpression()), !dbg !2502
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %18, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %18, metadata !2503, metadata !DIExpression()), !dbg !2504
  call void @llvm.dbg.declare(metadata i64* %19, metadata !2505, metadata !DIExpression()), !dbg !2506
  call void @llvm.dbg.declare(metadata [10 x i8*]* %20, metadata !2507, metadata !DIExpression()), !dbg !2509
  store i64 0, i64* %19, align 8, !dbg !2510
  %21 = load i32, i32* @x.27
  %22 = load i32, i32* @y.28
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %29, !dbg !2512

29:                                               ; preds = %originalBBpart237, %originalBBpart2
  %30 = load i32, i32* @x.27
  %31 = load i32, i32* @y.28
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i64, i64* %19, align 8, !dbg !2513
  %39 = icmp ult i64 %38, 10, !dbg !2515
  %40 = load i32, i32* @x.27
  %41 = load i32, i32* @y.28
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %39, label %48, label %118, !dbg !2516

48:                                               ; preds = %originalBBpart24
  %49 = load i32, i32* @x.27
  %50 = load i32, i32* @y.28
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !2517
  %58 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 0, !dbg !2517
  %59 = load i32, i32* %58, align 8, !dbg !2517
  %60 = icmp ule i32 %59, 40, !dbg !2517
  %61 = load i32, i32* @x.27
  %62 = load i32, i32* @y.28
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %60, label %69, label %91, !dbg !2517

69:                                               ; preds = %originalBBpart28
  %70 = load i32, i32* @x.27
  %71 = load i32, i32* @y.28
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %69, %originalBB10alteredBB
  %78 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !2517
  %79 = load i8*, i8** %78, align 8, !dbg !2517
  %80 = getelementptr i8, i8* %79, i32 %59, !dbg !2517
  %81 = bitcast i8* %80 to i8**, !dbg !2517
  %82 = add i32 %59, 8, !dbg !2517
  store i32 %82, i32* %58, align 8, !dbg !2517
  %83 = load i32, i32* @x.27
  %84 = load i32, i32* @y.28
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart218, label %originalBB10alteredBB

originalBBpart218:                                ; preds = %originalBB10
  br label %112, !dbg !2517

91:                                               ; preds = %originalBBpart28
  %92 = load i32, i32* @x.27
  %93 = load i32, i32* @y.28
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %91, %originalBB20alteredBB
  %100 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !2517
  %101 = load i8*, i8** %100, align 8, !dbg !2517
  %102 = bitcast i8* %101 to i8**, !dbg !2517
  %103 = getelementptr i8, i8* %101, i32 8, !dbg !2517
  store i8* %103, i8** %100, align 8, !dbg !2517
  %104 = load i32, i32* @x.27
  %105 = load i32, i32* @y.28
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  br label %112, !dbg !2517

112:                                              ; preds = %originalBBpart222, %originalBBpart218
  %113 = phi i8** [ %81, %originalBBpart218 ], [ %102, %originalBBpart222 ], !dbg !2517
  %114 = load i8*, i8** %113, align 8, !dbg !2517
  %115 = load i64, i64* %19, align 8, !dbg !2518
  %116 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %115, !dbg !2519
  store i8* %114, i8** %116, align 8, !dbg !2520
  %117 = icmp ne i8* %114, null, !dbg !2521
  br label %118

118:                                              ; preds = %112, %originalBBpart24
  %119 = phi i1 [ false, %originalBBpart24 ], [ %117, %112 ], !dbg !2522
  %120 = load i32, i32* @x.27
  %121 = load i32, i32* @y.28
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %118, %originalBB24alteredBB
  %128 = load i32, i32* @x.27
  %129 = load i32, i32* @y.28
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBBpart227, label %originalBB24alteredBB

originalBBpart227:                                ; preds = %originalBB24
  br i1 %119, label %136, label %156, !dbg !2523

136:                                              ; preds = %originalBBpart227
  br label %137, !dbg !2523

137:                                              ; preds = %136
  %138 = load i32, i32* @x.27
  %139 = load i32, i32* @y.28
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %137, %originalBB29alteredBB
  %146 = load i64, i64* %19, align 8, !dbg !2524
  %147 = add i64 %146, 1, !dbg !2524
  store i64 %147, i64* %19, align 8, !dbg !2524
  %148 = load i32, i32* @x.27
  %149 = load i32, i32* @y.28
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBBpart237, label %originalBB29alteredBB

originalBBpart237:                                ; preds = %originalBB29
  br label %29, !dbg !2525, !llvm.loop !2526

156:                                              ; preds = %originalBBpart227
  %157 = load i32, i32* @x.27
  %158 = load i32, i32* @y.28
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %156, %originalBB39alteredBB
  %165 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !2528
  %166 = load i8*, i8** %15, align 8, !dbg !2529
  %167 = load i8*, i8** %16, align 8, !dbg !2530
  %168 = load i8*, i8** %17, align 8, !dbg !2531
  %169 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !2532
  %170 = load i64, i64* %19, align 8, !dbg !2533
  call void @version_etc_arn(%struct._IO_FILE* %165, i8* %166, i8* %167, i8* %168, i8** %169, i64 %170), !dbg !2534
  %171 = load i32, i32* @x.27
  %172 = load i32, i32* @y.28
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  ret void, !dbg !2535

originalBBalteredBB:                              ; preds = %originalBB, %5
  %179 = alloca %struct._IO_FILE*, align 8
  %180 = alloca i8*, align 8
  %181 = alloca i8*, align 8
  %182 = alloca i8*, align 8
  %183 = alloca %struct.__va_list_tag*, align 8
  %184 = alloca i64, align 8
  %185 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %179, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %179, metadata !2536, metadata !DIExpression()), !dbg !2496
  store i8* %1, i8** %180, align 8
  call void @llvm.dbg.declare(metadata i8** %180, metadata !2582, metadata !DIExpression()), !dbg !2498
  store i8* %2, i8** %181, align 8
  call void @llvm.dbg.declare(metadata i8** %181, metadata !2583, metadata !DIExpression()), !dbg !2500
  store i8* %3, i8** %182, align 8
  call void @llvm.dbg.declare(metadata i8** %182, metadata !2584, metadata !DIExpression()), !dbg !2502
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %183, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %183, metadata !2585, metadata !DIExpression()), !dbg !2504
  call void @llvm.dbg.declare(metadata i64* %184, metadata !2586, metadata !DIExpression()), !dbg !2506
  call void @llvm.dbg.declare(metadata [10 x i8*]* %185, metadata !2587, metadata !DIExpression()), !dbg !2509
  store i64 0, i64* %184, align 8, !dbg !2510
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %186 = load i64, i64* %19, align 8, !dbg !2513
  %187 = icmp ult i64 %186, 10, !dbg !2515
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %188 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !2517
  %189 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %188, i32 0, i32 0, !dbg !2517
  %190 = load i32, i32* %189, align 8, !dbg !2517
  %191 = icmp ule i32 %190, 40, !dbg !2517
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %69
  %192 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !2517
  %193 = load i8*, i8** %192, align 8, !dbg !2517
  %194 = getelementptr i8, i8* %193, i32 %59, !dbg !2517
  %195 = bitcast i8* %194 to i8**, !dbg !2517
  %_ = sub i32 0, %59
  %gen = add i32 %_, 8
  %_11 = sub i32 0, %59
  %gen12 = add i32 %_11, 8
  %_13 = sub i32 %59, 8
  %gen14 = mul i32 %_13, 8
  %_15 = sub i32 0, %59
  %gen16 = add i32 %_15, 8
  %196 = add i32 %59, 8, !dbg !2517
  store i32 %196, i32* %58, align 8, !dbg !2517
  br label %originalBB10

originalBB20alteredBB:                            ; preds = %originalBB20, %91
  %197 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !2517
  %198 = load i8*, i8** %197, align 8, !dbg !2517
  %199 = bitcast i8* %198 to i8**, !dbg !2517
  %200 = getelementptr i8, i8* %198, i32 8, !dbg !2517
  store i8* %200, i8** %197, align 8, !dbg !2517
  br label %originalBB20

originalBB24alteredBB:                            ; preds = %originalBB24, %118
  br label %originalBB24

originalBB29alteredBB:                            ; preds = %originalBB29, %137
  %201 = load i64, i64* %19, align 8, !dbg !2524
  %_30 = sub i64 0, %201
  %gen31 = add i64 %_30, 1
  %_32 = sub i64 %201, 1
  %gen33 = mul i64 %_32, 1
  %_34 = sub i64 0, %201
  %gen35 = add i64 %_34, 1
  %202 = add i64 %201, 1, !dbg !2524
  store i64 %202, i64* %19, align 8, !dbg !2524
  br label %originalBB29

originalBB39alteredBB:                            ; preds = %originalBB39, %156
  %203 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !2528
  %204 = load i8*, i8** %15, align 8, !dbg !2529
  %205 = load i8*, i8** %16, align 8, !dbg !2530
  %206 = load i8*, i8** %17, align 8, !dbg !2531
  %207 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !2532
  %208 = load i64, i64* %19, align 8, !dbg !2533
  call void @version_etc_arn(%struct._IO_FILE* %203, i8* %204, i8* %205, i8* %206, i8** %207, i64 %208), !dbg !2534
  br label %originalBB39
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc(%struct._IO_FILE*, i8*, i8*, i8*, ...) #5 !dbg !2588 {
  %5 = load i32, i32* @x.29
  %6 = load i32, i32* @y.30
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !2591, metadata !DIExpression()), !dbg !2592
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2593, metadata !DIExpression()), !dbg !2594
  store i8* %2, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2595, metadata !DIExpression()), !dbg !2596
  store i8* %3, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !2597, metadata !DIExpression()), !dbg !2598
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %17, metadata !2599, metadata !DIExpression()), !dbg !2606
  %18 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !2607
  %19 = bitcast %struct.__va_list_tag* %18 to i8*, !dbg !2607
  call void @llvm.va_start(i8* %19), !dbg !2607
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !2608
  %21 = load i8*, i8** %14, align 8, !dbg !2609
  %22 = load i8*, i8** %15, align 8, !dbg !2610
  %23 = load i8*, i8** %16, align 8, !dbg !2611
  %24 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !2612
  call void @version_etc_va(%struct._IO_FILE* %20, i8* %21, i8* %22, i8* %23, %struct.__va_list_tag* %24), !dbg !2613
  %25 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !2614
  %26 = bitcast %struct.__va_list_tag* %25 to i8*, !dbg !2614
  call void @llvm.va_end(i8* %26), !dbg !2614
  %27 = load i32, i32* @x.29
  %28 = load i32, i32* @y.30
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !2615

originalBBalteredBB:                              ; preds = %originalBB, %4
  %35 = alloca %struct._IO_FILE*, align 8
  %36 = alloca i8*, align 8
  %37 = alloca i8*, align 8
  %38 = alloca i8*, align 8
  %39 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %35, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %35, metadata !2616, metadata !DIExpression()), !dbg !2592
  store i8* %1, i8** %36, align 8
  call void @llvm.dbg.declare(metadata i8** %36, metadata !2655, metadata !DIExpression()), !dbg !2594
  store i8* %2, i8** %37, align 8
  call void @llvm.dbg.declare(metadata i8** %37, metadata !2656, metadata !DIExpression()), !dbg !2596
  store i8* %3, i8** %38, align 8
  call void @llvm.dbg.declare(metadata i8** %38, metadata !2657, metadata !DIExpression()), !dbg !2598
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %39, metadata !2658, metadata !DIExpression()), !dbg !2606
  %40 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !2607
  %41 = bitcast %struct.__va_list_tag* %40 to i8*, !dbg !2607
  call void @llvm.va_start(i8* %41), !dbg !2607
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %35, align 8, !dbg !2608
  %43 = load i8*, i8** %36, align 8, !dbg !2609
  %44 = load i8*, i8** %37, align 8, !dbg !2610
  %45 = load i8*, i8** %38, align 8, !dbg !2611
  %46 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !2612
  call void @version_etc_va(%struct._IO_FILE* %42, i8* %43, i8* %44, i8* %45, %struct.__va_list_tag* %46), !dbg !2613
  %47 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !2614
  %48 = bitcast %struct.__va_list_tag* %47 to i8*, !dbg !2614
  call void @llvm.va_end(i8* %48), !dbg !2614
  br label %originalBB
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xmalloc(i64) #5 !dbg !2669 {
  %2 = load i32, i32* @x.31
  %3 = load i32, i32* @y.32
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !2673, metadata !DIExpression()), !dbg !2674
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2675, metadata !DIExpression()), !dbg !2676
  %12 = load i64, i64* %10, align 8, !dbg !2677
  %13 = call noalias i8* @malloc(i64 %12) #10, !dbg !2678
  store i8* %13, i8** %11, align 8, !dbg !2676
  %14 = load i8*, i8** %11, align 8, !dbg !2679
  %15 = icmp ne i8* %14, null, !dbg !2679
  %16 = load i32, i32* @x.31
  %17 = load i32, i32* @y.32
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %60, label %24, !dbg !2681

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.31
  %26 = load i32, i32* @y.32
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i64, i64* %10, align 8, !dbg !2682
  %34 = icmp ne i64 %33, 0, !dbg !2683
  %35 = load i32, i32* @x.31
  %36 = load i32, i32* @y.32
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %60, !dbg !2684

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x.31
  %45 = load i32, i32* @y.32
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  call void @xalloc_die() #14, !dbg !2685
  %52 = load i32, i32* @x.31
  %53 = load i32, i32* @y.32
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !2685

60:                                               ; preds = %originalBBpart24, %originalBBpart2
  %61 = load i8*, i8** %11, align 8, !dbg !2686
  ret i8* %61, !dbg !2687

originalBBalteredBB:                              ; preds = %originalBB, %1
  %62 = alloca i64, align 8
  %63 = alloca i8*, align 8
  store i64 %0, i64* %62, align 8
  call void @llvm.dbg.declare(metadata i64* %62, metadata !2688, metadata !DIExpression()), !dbg !2674
  call void @llvm.dbg.declare(metadata i8** %63, metadata !2691, metadata !DIExpression()), !dbg !2676
  %64 = load i64, i64* %62, align 8, !dbg !2677
  %65 = call noalias i8* @malloc(i64 %64) #10, !dbg !2678
  store i8* %65, i8** %63, align 8, !dbg !2676
  %66 = load i8*, i8** %63, align 8, !dbg !2679
  %67 = icmp ne i8* %66, null, !dbg !2679
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %68 = load i64, i64* %10, align 8, !dbg !2682
  %69 = icmp ne i64 %68, 0, !dbg !2683
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  call void @xalloc_die() #14, !dbg !2685
  br label %originalBB6
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xrealloc(i8*, i64) #5 !dbg !2692 {
  %3 = load i32, i32* @x.33
  %4 = load i32, i32* @y.34
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2695, metadata !DIExpression()), !dbg !2696
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !2697, metadata !DIExpression()), !dbg !2698
  %14 = load i64, i64* %13, align 8, !dbg !2699
  %15 = icmp ne i64 %14, 0, !dbg !2699
  %16 = load i32, i32* @x.33
  %17 = load i32, i32* @y.34
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %61, label %24, !dbg !2701

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.33
  %26 = load i32, i32* @y.34
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i8*, i8** %12, align 8, !dbg !2702
  %34 = icmp ne i8* %33, null, !dbg !2702
  %35 = load i32, i32* @x.33
  %36 = load i32, i32* @y.34
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %61, !dbg !2703

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x.33
  %45 = load i32, i32* @y.34
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  %52 = load i8*, i8** %12, align 8, !dbg !2704
  call void @free(i8* %52) #10, !dbg !2706
  store i8* null, i8** %11, align 8, !dbg !2707
  %53 = load i32, i32* @x.33
  %54 = load i32, i32* @y.34
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %137, !dbg !2707

61:                                               ; preds = %originalBBpart24, %originalBBpart2
  %62 = load i32, i32* @x.33
  %63 = load i32, i32* @y.34
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load i8*, i8** %12, align 8, !dbg !2708
  %71 = load i64, i64* %13, align 8, !dbg !2709
  %72 = call i8* @realloc(i8* %70, i64 %71) #10, !dbg !2710
  store i8* %72, i8** %12, align 8, !dbg !2711
  %73 = load i8*, i8** %12, align 8, !dbg !2712
  %74 = icmp ne i8* %73, null, !dbg !2712
  %75 = load i32, i32* @x.33
  %76 = load i32, i32* @y.34
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %74, label %119, label %83, !dbg !2714

83:                                               ; preds = %originalBBpart212
  %84 = load i32, i32* @x.33
  %85 = load i32, i32* @y.34
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %83, %originalBB14alteredBB
  %92 = load i64, i64* %13, align 8, !dbg !2715
  %93 = icmp ne i64 %92, 0, !dbg !2715
  %94 = load i32, i32* @x.33
  %95 = load i32, i32* @y.34
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %93, label %102, label %119, !dbg !2716

102:                                              ; preds = %originalBBpart216
  %103 = load i32, i32* @x.33
  %104 = load i32, i32* @y.34
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %102, %originalBB18alteredBB
  call void @xalloc_die() #14, !dbg !2717
  %111 = load i32, i32* @x.33
  %112 = load i32, i32* @y.34
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  unreachable, !dbg !2717

119:                                              ; preds = %originalBBpart216, %originalBBpart212
  %120 = load i32, i32* @x.33
  %121 = load i32, i32* @y.34
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %119, %originalBB22alteredBB
  %128 = load i8*, i8** %12, align 8, !dbg !2718
  store i8* %128, i8** %11, align 8, !dbg !2719
  %129 = load i32, i32* @x.33
  %130 = load i32, i32* @y.34
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %137, !dbg !2719

137:                                              ; preds = %originalBBpart224, %originalBBpart28
  %138 = load i32, i32* @x.33
  %139 = load i32, i32* @y.34
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %137, %originalBB26alteredBB
  %146 = load i8*, i8** %11, align 8, !dbg !2720
  %147 = load i32, i32* @x.33
  %148 = load i32, i32* @y.34
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i8* %146, !dbg !2720

originalBBalteredBB:                              ; preds = %originalBB, %2
  %155 = alloca i8*, align 8
  %156 = alloca i8*, align 8
  %157 = alloca i64, align 8
  store i8* %0, i8** %156, align 8
  call void @llvm.dbg.declare(metadata i8** %156, metadata !2721, metadata !DIExpression()), !dbg !2696
  store i64 %1, i64* %157, align 8
  call void @llvm.dbg.declare(metadata i64* %157, metadata !2724, metadata !DIExpression()), !dbg !2698
  %158 = load i64, i64* %157, align 8, !dbg !2699
  %159 = icmp ne i64 %158, 0, !dbg !2699
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %160 = load i8*, i8** %12, align 8, !dbg !2702
  %161 = icmp ne i8* %160, null, !dbg !2702
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  %162 = load i8*, i8** %12, align 8, !dbg !2704
  call void @free(i8* %162) #10, !dbg !2706
  store i8* null, i8** %11, align 8, !dbg !2707
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %163 = load i8*, i8** %12, align 8, !dbg !2708
  %164 = load i64, i64* %13, align 8, !dbg !2709
  %165 = call i8* @realloc(i8* %163, i64 %164) #10, !dbg !2710
  store i8* %165, i8** %12, align 8, !dbg !2711
  %166 = load i8*, i8** %12, align 8, !dbg !2712
  %167 = icmp ne i8* %166, null, !dbg !2712
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %83
  %168 = load i64, i64* %13, align 8, !dbg !2715
  %169 = icmp ne i64 %168, 0, !dbg !2715
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %102
  call void @xalloc_die() #14, !dbg !2717
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %119
  %170 = load i8*, i8** %12, align 8, !dbg !2718
  store i8* %170, i8** %11, align 8, !dbg !2719
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %137
  %171 = load i8*, i8** %11, align 8, !dbg !2720
  br label %originalBB26
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xcharalloc(i64) #5 !dbg !2725 {
  %2 = load i32, i32* @x.35
  %3 = load i32, i32* @y.36
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !2729, metadata !DIExpression()), !dbg !2730
  %11 = load i64, i64* %10, align 8, !dbg !2731
  %12 = call noalias i8* @xmalloc(i64 %11), !dbg !2731
  %13 = load i32, i32* @x.35
  %14 = load i32, i32* @y.36
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !2732

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i64, align 8
  store i64 %0, i64* %21, align 8
  call void @llvm.dbg.declare(metadata i64* %21, metadata !2733, metadata !DIExpression()), !dbg !2730
  %22 = load i64, i64* %21, align 8, !dbg !2731
  %23 = call noalias i8* @xmalloc(i64 %22), !dbg !2731
  br label %originalBB
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @xalloc_die() #0 !dbg !2736 {
  %1 = load i32, i32* @x.37
  %2 = load i32, i32* @y.38
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = load volatile i32, i32* @exit_failure, align 4, !dbg !2738
  %10 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.89, i64 0, i64 0)) #10, !dbg !2739
  call void (i32, i32, i8*, ...) @error(i32 %9, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.90, i64 0, i64 0), i8* %10), !dbg !2740
  call void @abort() #12, !dbg !2741
  %11 = load i32, i32* @x.37
  %12 = load i32, i32* @y.38
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !2741

originalBBalteredBB:                              ; preds = %originalBB, %0
  %19 = load volatile i32, i32* @exit_failure, align 4, !dbg !2738
  %20 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.89, i64 0, i64 0)) #10, !dbg !2739
  call void (i32, i32, i8*, ...) @error(i32 %19, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.90, i64 0, i64 0), i8* %20), !dbg !2740
  call void @abort() #12, !dbg !2741
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @rpl_mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #5 !dbg !2742 {
  %5 = load i32, i32* @x.39
  %6 = load i32, i32* @y.40
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i64, align 8
  %14 = alloca i32*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i64, align 8
  %17 = alloca %struct.__mbstate_t*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i32, align 4
  %20 = alloca i8, align 1
  store i32* %0, i32** %14, align 8
  call void @llvm.dbg.declare(metadata i32** %14, metadata !2758, metadata !DIExpression()), !dbg !2759
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2760, metadata !DIExpression()), !dbg !2761
  store i64 %2, i64* %16, align 8
  call void @llvm.dbg.declare(metadata i64* %16, metadata !2762, metadata !DIExpression()), !dbg !2763
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %17, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %17, metadata !2764, metadata !DIExpression()), !dbg !2765
  call void @llvm.dbg.declare(metadata i64* %18, metadata !2766, metadata !DIExpression()), !dbg !2767
  call void @llvm.dbg.declare(metadata i32* %19, metadata !2768, metadata !DIExpression()), !dbg !2769
  %21 = load i32*, i32** %14, align 8, !dbg !2770
  %22 = icmp ne i32* %21, null, !dbg !2770
  %23 = load i32, i32* @x.39
  %24 = load i32, i32* @y.40
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %48, label %31, !dbg !2772

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.39
  %33 = load i32, i32* @y.40
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32* %19, i32** %14, align 8, !dbg !2773
  %40 = load i32, i32* @x.39
  %41 = load i32, i32* @y.40
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %48, !dbg !2774

48:                                               ; preds = %originalBBpart24, %originalBBpart2
  %49 = load i32, i32* @x.39
  %50 = load i32, i32* @y.40
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32*, i32** %14, align 8, !dbg !2775
  %58 = load i8*, i8** %15, align 8, !dbg !2776
  %59 = load i64, i64* %16, align 8, !dbg !2777
  %60 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !2778
  %61 = call i64 @mbrtowc(i32* %57, i8* %58, i64 %59, %struct.__mbstate_t* %60) #10, !dbg !2779
  store i64 %61, i64* %18, align 8, !dbg !2780
  %62 = load i64, i64* %18, align 8, !dbg !2781
  %63 = icmp ule i64 -2, %62, !dbg !2783
  %64 = load i32, i32* @x.39
  %65 = load i32, i32* @y.40
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %63, label %72, label %131, !dbg !2784

72:                                               ; preds = %originalBBpart28
  %73 = load i32, i32* @x.39
  %74 = load i32, i32* @y.40
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %72, %originalBB10alteredBB
  %81 = load i64, i64* %16, align 8, !dbg !2785
  %82 = icmp ne i64 %81, 0, !dbg !2786
  %83 = load i32, i32* @x.39
  %84 = load i32, i32* @y.40
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %82, label %91, label %131, !dbg !2787

91:                                               ; preds = %originalBBpart212
  %92 = load i32, i32* @x.39
  %93 = load i32, i32* @y.40
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %91, %originalBB14alteredBB
  %100 = call zeroext i1 @hard_locale(i32 0), !dbg !2788
  %101 = load i32, i32* @x.39
  %102 = load i32, i32* @y.40
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %100, label %131, label %109, !dbg !2789

109:                                              ; preds = %originalBBpart216
  call void @llvm.dbg.declare(metadata i8* %20, metadata !2790, metadata !DIExpression()), !dbg !2792
  %110 = load i32, i32* @x.39
  %111 = load i32, i32* @y.40
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %109, %originalBB18alteredBB
  %118 = load i8*, i8** %15, align 8, !dbg !2793
  %119 = load i8, i8* %118, align 1, !dbg !2794
  store i8 %119, i8* %20, align 1, !dbg !2792
  %120 = load i8, i8* %20, align 1, !dbg !2795
  %121 = zext i8 %120 to i32, !dbg !2795
  %122 = load i32*, i32** %14, align 8, !dbg !2796
  store i32 %121, i32* %122, align 4, !dbg !2797
  store i64 1, i64* %13, align 8, !dbg !2798
  %123 = load i32, i32* @x.39
  %124 = load i32, i32* @y.40
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %149, !dbg !2798

131:                                              ; preds = %originalBBpart216, %originalBBpart212, %originalBBpart28
  %132 = load i32, i32* @x.39
  %133 = load i32, i32* @y.40
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %131, %originalBB22alteredBB
  %140 = load i64, i64* %18, align 8, !dbg !2799
  store i64 %140, i64* %13, align 8, !dbg !2800
  %141 = load i32, i32* @x.39
  %142 = load i32, i32* @y.40
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %149, !dbg !2800

149:                                              ; preds = %originalBBpart224, %originalBBpart220
  %150 = load i64, i64* %13, align 8, !dbg !2801
  ret i64 %150, !dbg !2801

originalBBalteredBB:                              ; preds = %originalBB, %4
  %151 = alloca i64, align 8
  %152 = alloca i32*, align 8
  %153 = alloca i8*, align 8
  %154 = alloca i64, align 8
  %155 = alloca %struct.__mbstate_t*, align 8
  %156 = alloca i64, align 8
  %157 = alloca i32, align 4
  %158 = alloca i8, align 1
  store i32* %0, i32** %152, align 8
  call void @llvm.dbg.declare(metadata i32** %152, metadata !2802, metadata !DIExpression()), !dbg !2759
  store i8* %1, i8** %153, align 8
  call void @llvm.dbg.declare(metadata i8** %153, metadata !2818, metadata !DIExpression()), !dbg !2761
  store i64 %2, i64* %154, align 8
  call void @llvm.dbg.declare(metadata i64* %154, metadata !2819, metadata !DIExpression()), !dbg !2763
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %155, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %155, metadata !2820, metadata !DIExpression()), !dbg !2765
  call void @llvm.dbg.declare(metadata i64* %156, metadata !2821, metadata !DIExpression()), !dbg !2767
  call void @llvm.dbg.declare(metadata i32* %157, metadata !2822, metadata !DIExpression()), !dbg !2769
  %159 = load i32*, i32** %152, align 8, !dbg !2770
  %160 = icmp ne i32* %159, null, !dbg !2770
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32* %19, i32** %14, align 8, !dbg !2773
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %161 = load i32*, i32** %14, align 8, !dbg !2775
  %162 = load i8*, i8** %15, align 8, !dbg !2776
  %163 = load i64, i64* %16, align 8, !dbg !2777
  %164 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !2778
  %165 = call i64 @mbrtowc(i32* %161, i8* %162, i64 %163, %struct.__mbstate_t* %164) #10, !dbg !2779
  store i64 %165, i64* %18, align 8, !dbg !2780
  %166 = load i64, i64* %18, align 8, !dbg !2781
  %167 = icmp ule i64 -2, %166, !dbg !2783
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %72
  %168 = load i64, i64* %16, align 8, !dbg !2785
  %169 = icmp ne i64 %168, 0, !dbg !2786
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %91
  %170 = call zeroext i1 @hard_locale(i32 0), !dbg !2788
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %109
  %171 = load i8*, i8** %15, align 8, !dbg !2793
  %172 = load i8, i8* %171, align 1, !dbg !2794
  store i8 %172, i8* %20, align 1, !dbg !2792
  %173 = load i8, i8* %20, align 1, !dbg !2795
  %174 = zext i8 %173 to i32, !dbg !2795
  %175 = load i32*, i32** %14, align 8, !dbg !2796
  store i32 %174, i32* %175, align 4, !dbg !2797
  store i64 1, i64* %13, align 8, !dbg !2798
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %131
  %176 = load i64, i64* %18, align 8, !dbg !2799
  store i64 %176, i64* %13, align 8, !dbg !2800
  br label %originalBB22
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #3

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @c_strcasecmp(i8*, i8*) #11 !dbg !2823 {
  %3 = load i32, i32* @x.41
  %4 = load i32, i32* @y.42
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2827, metadata !DIExpression()), !dbg !2828
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !2829, metadata !DIExpression()), !dbg !2830
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2831, metadata !DIExpression()), !dbg !2832
  %18 = load i8*, i8** %12, align 8, !dbg !2833
  store i8* %18, i8** %14, align 8, !dbg !2832
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2834, metadata !DIExpression()), !dbg !2835
  %19 = load i8*, i8** %13, align 8, !dbg !2836
  store i8* %19, i8** %15, align 8, !dbg !2835
  call void @llvm.dbg.declare(metadata i8* %16, metadata !2837, metadata !DIExpression()), !dbg !2838
  call void @llvm.dbg.declare(metadata i8* %17, metadata !2839, metadata !DIExpression()), !dbg !2840
  %20 = load i8*, i8** %14, align 8, !dbg !2841
  %21 = load i8*, i8** %15, align 8, !dbg !2843
  %22 = icmp eq i8* %20, %21, !dbg !2844
  %23 = load i32, i32* @x.41
  %24 = load i32, i32* @y.42
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %48, !dbg !2845

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.41
  %33 = load i32, i32* @y.42
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32 0, i32* %11, align 4, !dbg !2846
  %40 = load i32, i32* @x.41
  %41 = load i32, i32* @y.42
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %161, !dbg !2846

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.41
  %50 = load i32, i32* @y.42
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.41
  %58 = load i32, i32* @y.42
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !2847

65:                                               ; preds = %originalBBpart224, %originalBBpart28
  %66 = load i32, i32* @x.41
  %67 = load i32, i32* @y.42
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %74 = load i8*, i8** %14, align 8, !dbg !2848
  %75 = load i8, i8* %74, align 1, !dbg !2850
  %76 = zext i8 %75 to i32, !dbg !2850
  %77 = call i32 @c_tolower(i32 %76), !dbg !2851
  %78 = trunc i32 %77 to i8, !dbg !2851
  store i8 %78, i8* %16, align 1, !dbg !2852
  %79 = load i8*, i8** %15, align 8, !dbg !2853
  %80 = load i8, i8* %79, align 1, !dbg !2854
  %81 = zext i8 %80 to i32, !dbg !2854
  %82 = call i32 @c_tolower(i32 %81), !dbg !2855
  %83 = trunc i32 %82 to i8, !dbg !2855
  store i8 %83, i8* %17, align 1, !dbg !2856
  %84 = load i8, i8* %16, align 1, !dbg !2857
  %85 = zext i8 %84 to i32, !dbg !2857
  %86 = icmp eq i32 %85, 0, !dbg !2859
  %87 = load i32, i32* @x.41
  %88 = load i32, i32* @y.42
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %86, label %95, label %112, !dbg !2860

95:                                               ; preds = %originalBBpart212
  %96 = load i32, i32* @x.41
  %97 = load i32, i32* @y.42
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %95, %originalBB14alteredBB
  %104 = load i32, i32* @x.41
  %105 = load i32, i32* @y.42
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %155, !dbg !2861

112:                                              ; preds = %originalBBpart212
  %113 = load i32, i32* @x.41
  %114 = load i32, i32* @y.42
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %112, %originalBB18alteredBB
  %121 = load i8*, i8** %14, align 8, !dbg !2862
  %122 = getelementptr inbounds i8, i8* %121, i32 1, !dbg !2862
  store i8* %122, i8** %14, align 8, !dbg !2862
  %123 = load i8*, i8** %15, align 8, !dbg !2863
  %124 = getelementptr inbounds i8, i8* %123, i32 1, !dbg !2863
  store i8* %124, i8** %15, align 8, !dbg !2863
  %125 = load i32, i32* @x.41
  %126 = load i32, i32* @y.42
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %133, !dbg !2864

133:                                              ; preds = %originalBBpart220
  %134 = load i32, i32* @x.41
  %135 = load i32, i32* @y.42
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %133, %originalBB22alteredBB
  %142 = load i8, i8* %16, align 1, !dbg !2865
  %143 = zext i8 %142 to i32, !dbg !2865
  %144 = load i8, i8* %17, align 1, !dbg !2866
  %145 = zext i8 %144 to i32, !dbg !2866
  %146 = icmp eq i32 %143, %145, !dbg !2867
  %147 = load i32, i32* @x.41
  %148 = load i32, i32* @y.42
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %146, label %65, label %155, !dbg !2864, !llvm.loop !2868

155:                                              ; preds = %originalBBpart224, %originalBBpart216
  %156 = load i8, i8* %16, align 1, !dbg !2870
  %157 = zext i8 %156 to i32, !dbg !2870
  %158 = load i8, i8* %17, align 1, !dbg !2872
  %159 = zext i8 %158 to i32, !dbg !2872
  %160 = sub nsw i32 %157, %159, !dbg !2873
  store i32 %160, i32* %11, align 4, !dbg !2874
  br label %161, !dbg !2874

161:                                              ; preds = %155, %originalBBpart24
  %162 = load i32, i32* @x.41
  %163 = load i32, i32* @y.42
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %161, %originalBB26alteredBB
  %170 = load i32, i32* %11, align 4, !dbg !2875
  %171 = load i32, i32* @x.41
  %172 = load i32, i32* @y.42
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i32 %170, !dbg !2875

originalBBalteredBB:                              ; preds = %originalBB, %2
  %179 = alloca i32, align 4
  %180 = alloca i8*, align 8
  %181 = alloca i8*, align 8
  %182 = alloca i8*, align 8
  %183 = alloca i8*, align 8
  %184 = alloca i8, align 1
  %185 = alloca i8, align 1
  store i8* %0, i8** %180, align 8
  call void @llvm.dbg.declare(metadata i8** %180, metadata !2876, metadata !DIExpression()), !dbg !2828
  store i8* %1, i8** %181, align 8
  call void @llvm.dbg.declare(metadata i8** %181, metadata !2879, metadata !DIExpression()), !dbg !2830
  call void @llvm.dbg.declare(metadata i8** %182, metadata !2880, metadata !DIExpression()), !dbg !2832
  %186 = load i8*, i8** %180, align 8, !dbg !2833
  store i8* %186, i8** %182, align 8, !dbg !2832
  call void @llvm.dbg.declare(metadata i8** %183, metadata !2881, metadata !DIExpression()), !dbg !2835
  %187 = load i8*, i8** %181, align 8, !dbg !2836
  store i8* %187, i8** %183, align 8, !dbg !2835
  call void @llvm.dbg.declare(metadata i8* %184, metadata !2882, metadata !DIExpression()), !dbg !2838
  call void @llvm.dbg.declare(metadata i8* %185, metadata !2883, metadata !DIExpression()), !dbg !2840
  %188 = load i8*, i8** %182, align 8, !dbg !2841
  %189 = load i8*, i8** %183, align 8, !dbg !2843
  %190 = icmp eq i8* %188, %189, !dbg !2844
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32 0, i32* %11, align 4, !dbg !2846
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %191 = load i8*, i8** %14, align 8, !dbg !2848
  %192 = load i8, i8* %191, align 1, !dbg !2850
  %193 = zext i8 %192 to i32, !dbg !2850
  %194 = call i32 @c_tolower(i32 %193), !dbg !2851
  %195 = trunc i32 %194 to i8, !dbg !2851
  store i8 %195, i8* %16, align 1, !dbg !2852
  %196 = load i8*, i8** %15, align 8, !dbg !2853
  %197 = load i8, i8* %196, align 1, !dbg !2854
  %198 = zext i8 %197 to i32, !dbg !2854
  %199 = call i32 @c_tolower(i32 %198), !dbg !2855
  %200 = trunc i32 %199 to i8, !dbg !2855
  store i8 %200, i8* %17, align 1, !dbg !2856
  %201 = load i8, i8* %16, align 1, !dbg !2857
  %202 = zext i8 %201 to i32, !dbg !2857
  %203 = icmp eq i32 %202, 0, !dbg !2859
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %95
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %112
  %204 = load i8*, i8** %14, align 8, !dbg !2862
  %205 = getelementptr inbounds i8, i8* %204, i32 1, !dbg !2862
  store i8* %205, i8** %14, align 8, !dbg !2862
  %206 = load i8*, i8** %15, align 8, !dbg !2863
  %207 = getelementptr inbounds i8, i8* %206, i32 1, !dbg !2863
  store i8* %207, i8** %15, align 8, !dbg !2863
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %133
  %208 = load i8, i8* %16, align 1, !dbg !2865
  %209 = zext i8 %208 to i32, !dbg !2865
  %210 = load i8, i8* %17, align 1, !dbg !2866
  %211 = zext i8 %210 to i32, !dbg !2866
  %212 = icmp eq i32 %209, %211, !dbg !2867
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %161
  %213 = load i32, i32* %11, align 4, !dbg !2875
  br label %originalBB26
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @close_stream(%struct._IO_FILE*) #5 !dbg !2884 {
  %2 = load i32, i32* @x.43
  %3 = load i32, i32* @y.44
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !2922, metadata !DIExpression()), !dbg !2923
  call void @llvm.dbg.declare(metadata i8* %12, metadata !2924, metadata !DIExpression()), !dbg !2926
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !2927
  %16 = call i64 @__fpending(%struct._IO_FILE* %15) #10, !dbg !2928
  %17 = icmp ne i64 %16, 0, !dbg !2929
  %18 = zext i1 %17 to i8, !dbg !2926
  store i8 %18, i8* %12, align 1, !dbg !2926
  call void @llvm.dbg.declare(metadata i8* %13, metadata !2930, metadata !DIExpression()), !dbg !2931
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !2932
  %20 = call i32 @ferror_unlocked(%struct._IO_FILE* %19) #10, !dbg !2932
  %21 = icmp ne i32 %20, 0, !dbg !2933
  %22 = zext i1 %21 to i8, !dbg !2931
  store i8 %22, i8* %13, align 1, !dbg !2931
  call void @llvm.dbg.declare(metadata i8* %14, metadata !2934, metadata !DIExpression()), !dbg !2935
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !2936
  %24 = call i32 @rpl_fclose(%struct._IO_FILE* %23), !dbg !2937
  %25 = icmp ne i32 %24, 0, !dbg !2938
  %26 = zext i1 %25 to i8, !dbg !2935
  store i8 %26, i8* %14, align 1, !dbg !2935
  %27 = load i8, i8* %13, align 1, !dbg !2939
  %28 = trunc i8 %27 to i1, !dbg !2939
  %29 = load i32, i32* @x.43
  %30 = load i32, i32* @y.44
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %28, label %95, label %37, !dbg !2941

37:                                               ; preds = %originalBBpart2
  %38 = load i32, i32* @x.43
  %39 = load i32, i32* @y.44
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %46 = load i8, i8* %14, align 1, !dbg !2942
  %47 = trunc i8 %46 to i1, !dbg !2942
  %48 = load i32, i32* @x.43
  %49 = load i32, i32* @y.44
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %149, !dbg !2943

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.43
  %58 = load i32, i32* @y.44
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load i8, i8* %12, align 1, !dbg !2944
  %66 = trunc i8 %65 to i1, !dbg !2944
  %67 = load i32, i32* @x.43
  %68 = load i32, i32* @y.44
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %95, label %75, !dbg !2945

75:                                               ; preds = %originalBBpart28
  %76 = load i32, i32* @x.43
  %77 = load i32, i32* @y.44
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = call i32* @__errno_location() #15, !dbg !2946
  %85 = load i32, i32* %84, align 4, !dbg !2946
  %86 = icmp ne i32 %85, 9, !dbg !2947
  %87 = load i32, i32* @x.43
  %88 = load i32, i32* @y.44
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %86, label %95, label %149, !dbg !2948

95:                                               ; preds = %originalBBpart212, %originalBBpart28, %originalBBpart2
  %96 = load i32, i32* @x.43
  %97 = load i32, i32* @y.44
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %95, %originalBB14alteredBB
  %104 = load i8, i8* %14, align 1, !dbg !2949
  %105 = trunc i8 %104 to i1, !dbg !2949
  %106 = load i32, i32* @x.43
  %107 = load i32, i32* @y.44
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %105, label %132, label %114, !dbg !2952

114:                                              ; preds = %originalBBpart216
  %115 = load i32, i32* @x.43
  %116 = load i32, i32* @y.44
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %114, %originalBB18alteredBB
  %123 = call i32* @__errno_location() #15, !dbg !2953
  store i32 0, i32* %123, align 4, !dbg !2954
  %124 = load i32, i32* @x.43
  %125 = load i32, i32* @y.44
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %132, !dbg !2953

132:                                              ; preds = %originalBBpart220, %originalBBpart216
  %133 = load i32, i32* @x.43
  %134 = load i32, i32* @y.44
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %132, %originalBB22alteredBB
  store i32 -1, i32* %10, align 4, !dbg !2955
  %141 = load i32, i32* @x.43
  %142 = load i32, i32* @y.44
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %166, !dbg !2955

149:                                              ; preds = %originalBBpart212, %originalBBpart24
  %150 = load i32, i32* @x.43
  %151 = load i32, i32* @y.44
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %149, %originalBB26alteredBB
  store i32 0, i32* %10, align 4, !dbg !2956
  %158 = load i32, i32* @x.43
  %159 = load i32, i32* @y.44
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %166, !dbg !2956

166:                                              ; preds = %originalBBpart228, %originalBBpart224
  %167 = load i32, i32* @x.43
  %168 = load i32, i32* @y.44
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %166, %originalBB30alteredBB
  %175 = load i32, i32* %10, align 4, !dbg !2957
  %176 = load i32, i32* @x.43
  %177 = load i32, i32* @y.44
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  ret i32 %175, !dbg !2957

originalBBalteredBB:                              ; preds = %originalBB, %1
  %184 = alloca i32, align 4
  %185 = alloca %struct._IO_FILE*, align 8
  %186 = alloca i8, align 1
  %187 = alloca i8, align 1
  %188 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %185, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %185, metadata !2958, metadata !DIExpression()), !dbg !2923
  call void @llvm.dbg.declare(metadata i8* %186, metadata !2997, metadata !DIExpression()), !dbg !2926
  %189 = load %struct._IO_FILE*, %struct._IO_FILE** %185, align 8, !dbg !2927
  %190 = call i64 @__fpending(%struct._IO_FILE* %189) #10, !dbg !2928
  %191 = icmp ne i64 %190, 0, !dbg !2929
  %192 = zext i1 %191 to i8, !dbg !2926
  store i8 %192, i8* %186, align 1, !dbg !2926
  call void @llvm.dbg.declare(metadata i8* %187, metadata !2998, metadata !DIExpression()), !dbg !2931
  %193 = load %struct._IO_FILE*, %struct._IO_FILE** %185, align 8, !dbg !2932
  %194 = call i32 @ferror_unlocked(%struct._IO_FILE* %193) #10, !dbg !2932
  %195 = icmp ne i32 %194, 0, !dbg !2933
  %196 = zext i1 %195 to i8, !dbg !2931
  store i8 %196, i8* %187, align 1, !dbg !2931
  call void @llvm.dbg.declare(metadata i8* %188, metadata !2999, metadata !DIExpression()), !dbg !2935
  %197 = load %struct._IO_FILE*, %struct._IO_FILE** %185, align 8, !dbg !2936
  %198 = call i32 @rpl_fclose(%struct._IO_FILE* %197), !dbg !2937
  %199 = icmp ne i32 %198, 0, !dbg !2938
  %200 = zext i1 %199 to i8, !dbg !2935
  store i8 %200, i8* %188, align 1, !dbg !2935
  %201 = load i8, i8* %187, align 1, !dbg !2939
  %202 = trunc i8 %201 to i1, !dbg !2939
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %203 = load i8, i8* %14, align 1, !dbg !2942
  %204 = trunc i8 %203 to i1, !dbg !2942
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %205 = load i8, i8* %12, align 1, !dbg !2944
  %206 = trunc i8 %205 to i1, !dbg !2944
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %207 = call i32* @__errno_location() #15, !dbg !2946
  %208 = load i32, i32* %207, align 4, !dbg !2946
  %209 = icmp ne i32 %208, 9, !dbg !2947
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %95
  %210 = load i8, i8* %14, align 1, !dbg !2949
  %211 = trunc i8 %210 to i1, !dbg !2949
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %114
  %212 = call i32* @__errno_location() #15, !dbg !2953
  store i32 0, i32* %212, align 4, !dbg !2954
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %132
  store i32 -1, i32* %10, align 4, !dbg !2955
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %149
  store i32 0, i32* %10, align 4, !dbg !2956
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %166
  %213 = load i32, i32* %10, align 4, !dbg !2957
  br label %originalBB30
}

; Function Attrs: nounwind
declare dso_local i64 @__fpending(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @hard_locale(i32) #5 !dbg !3000 {
  %2 = load i32, i32* @x.45
  %3 = load i32, i32* @y.46
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i1, align 1
  %11 = alloca i32, align 4
  %12 = alloca [257 x i8], align 16
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3004, metadata !DIExpression()), !dbg !3005
  call void @llvm.dbg.declare(metadata [257 x i8]* %12, metadata !3006, metadata !DIExpression()), !dbg !3010
  %13 = load i32, i32* %11, align 4, !dbg !3011
  %14 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3013
  %15 = call i32 @setlocale_null_r(i32 %13, i8* %14, i64 257), !dbg !3014
  %16 = icmp ne i32 %15, 0, !dbg !3014
  %17 = load i32, i32* @x.45
  %18 = load i32, i32* @y.46
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %42, !dbg !3015

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.45
  %27 = load i32, i32* @y.46
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  store i1 false, i1* %10, align 1, !dbg !3016
  %34 = load i32, i32* @x.45
  %35 = load i32, i32* @y.46
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %85, !dbg !3016

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.45
  %44 = load i32, i32* @y.46
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3017
  %52 = call i32 @strcmp(i8* %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.99, i64 0, i64 0)) #13, !dbg !3018
  %53 = icmp eq i32 %52, 0, !dbg !3019
  %54 = load i32, i32* @x.45
  %55 = load i32, i32* @y.46
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %53, label %66, label %62, !dbg !3020

62:                                               ; preds = %originalBBpart28
  %63 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3021
  %64 = call i32 @strcmp(i8* %63, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.100, i64 0, i64 0)) #13, !dbg !3022
  %65 = icmp eq i32 %64, 0, !dbg !3023
  br label %66, !dbg !3020

66:                                               ; preds = %62, %originalBBpart28
  %67 = phi i1 [ true, %originalBBpart28 ], [ %65, %62 ]
  %68 = load i32, i32* @x.45
  %69 = load i32, i32* @y.46
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %76 = xor i1 %67, true, !dbg !3024
  store i1 %76, i1* %10, align 1, !dbg !3025
  %77 = load i32, i32* @x.45
  %78 = load i32, i32* @y.46
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart214, label %originalBB10alteredBB

originalBBpart214:                                ; preds = %originalBB10
  br label %85, !dbg !3025

85:                                               ; preds = %originalBBpart214, %originalBBpart24
  %86 = load i32, i32* @x.45
  %87 = load i32, i32* @y.46
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB16, label %originalBB16alteredBB

originalBB16:                                     ; preds = %85, %originalBB16alteredBB
  %94 = load i1, i1* %10, align 1, !dbg !3026
  %95 = load i32, i32* @x.45
  %96 = load i32, i32* @y.46
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBBpart218, label %originalBB16alteredBB

originalBBpart218:                                ; preds = %originalBB16
  ret i1 %94, !dbg !3026

originalBBalteredBB:                              ; preds = %originalBB, %1
  %103 = alloca i1, align 1
  %104 = alloca i32, align 4
  %105 = alloca [257 x i8], align 16
  store i32 %0, i32* %104, align 4
  call void @llvm.dbg.declare(metadata i32* %104, metadata !3027, metadata !DIExpression()), !dbg !3005
  call void @llvm.dbg.declare(metadata [257 x i8]* %105, metadata !3030, metadata !DIExpression()), !dbg !3010
  %106 = load i32, i32* %104, align 4, !dbg !3011
  %107 = getelementptr inbounds [257 x i8], [257 x i8]* %105, i64 0, i64 0, !dbg !3013
  %108 = call i32 @setlocale_null_r(i32 %106, i8* %107, i64 257), !dbg !3014
  %109 = icmp ne i32 %108, 0, !dbg !3014
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  store i1 false, i1* %10, align 1, !dbg !3016
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %110 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3017
  %111 = call i32 @strcmp(i8* %110, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.99, i64 0, i64 0)) #13, !dbg !3018
  %112 = icmp eq i32 %111, 0, !dbg !3019
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %_ = shl i1 %67, true
  %_11 = shl i1 %67, true
  %_12 = sub i1 false, %67
  %gen = add i1 %_12, true
  %113 = xor i1 %67, true, !dbg !3024
  store i1 %113, i1* %10, align 1, !dbg !3025
  br label %originalBB10

originalBB16alteredBB:                            ; preds = %originalBB16, %85
  %114 = load i1, i1* %10, align 1, !dbg !3026
  br label %originalBB16
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @locale_charset() #5 !dbg !3031 {
  %1 = load i32, i32* @x.47
  %2 = load i32, i32* @y.48
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !3035, metadata !DIExpression()), !dbg !3036
  %10 = call i8* @nl_langinfo(i32 14) #10, !dbg !3037
  store i8* %10, i8** %9, align 8, !dbg !3038
  %11 = load i8*, i8** %9, align 8, !dbg !3039
  %12 = icmp eq i8* %11, null, !dbg !3041
  %13 = load i32, i32* @x.47
  %14 = load i32, i32* @y.48
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %38, !dbg !3042

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.47
  %23 = load i32, i32* @y.48
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.103, i64 0, i64 0), i8** %9, align 8, !dbg !3043
  %30 = load i32, i32* @x.47
  %31 = load i32, i32* @y.48
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %38, !dbg !3044

38:                                               ; preds = %originalBBpart24, %originalBBpart2
  %39 = load i32, i32* @x.47
  %40 = load i32, i32* @y.48
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %38, %originalBB6alteredBB
  %47 = load i8*, i8** %9, align 8, !dbg !3045
  %48 = getelementptr inbounds i8, i8* %47, i64 0, !dbg !3045
  %49 = load i8, i8* %48, align 1, !dbg !3045
  %50 = sext i8 %49 to i32, !dbg !3045
  %51 = icmp eq i32 %50, 0, !dbg !3049
  %52 = load i32, i32* @x.47
  %53 = load i32, i32* @y.48
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %51, label %60, label %77, !dbg !3050

60:                                               ; preds = %originalBBpart28
  %61 = load i32, i32* @x.47
  %62 = load i32, i32* @y.48
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.104, i64 0, i64 0), i8** %9, align 8, !dbg !3051
  %69 = load i32, i32* @x.47
  %70 = load i32, i32* @y.48
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %77, !dbg !3052

77:                                               ; preds = %originalBBpart212, %originalBBpart28
  %78 = load i32, i32* @x.47
  %79 = load i32, i32* @y.48
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %77, %originalBB14alteredBB
  %86 = load i8*, i8** %9, align 8, !dbg !3053
  %87 = load i32, i32* @x.47
  %88 = load i32, i32* @y.48
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i8* %86, !dbg !3054

originalBBalteredBB:                              ; preds = %originalBB, %0
  %95 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %95, metadata !3055, metadata !DIExpression()), !dbg !3036
  %96 = call i8* @nl_langinfo(i32 14) #10, !dbg !3037
  store i8* %96, i8** %95, align 8, !dbg !3038
  %97 = load i8*, i8** %95, align 8, !dbg !3039
  %98 = icmp eq i8* %97, null, !dbg !3041
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.103, i64 0, i64 0), i8** %9, align 8, !dbg !3043
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %38
  %99 = load i8*, i8** %9, align 8, !dbg !3045
  %100 = getelementptr inbounds i8, i8* %99, i64 0, !dbg !3045
  %101 = load i8, i8* %100, align 1, !dbg !3045
  %102 = sext i8 %101 to i32, !dbg !3045
  %103 = icmp eq i32 %102, 0, !dbg !3049
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.104, i64 0, i64 0), i8** %9, align 8, !dbg !3051
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %77
  %104 = load i8*, i8** %9, align 8, !dbg !3053
  br label %originalBB14
}

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_r(i32, i8* nonnull, i64) #5 !dbg !3058 {
  %4 = load i32, i32* @x.49
  %5 = load i32, i32* @y.50
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !3062, metadata !DIExpression()), !dbg !3063
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3064, metadata !DIExpression()), !dbg !3065
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !3066, metadata !DIExpression()), !dbg !3067
  %15 = load i32, i32* %12, align 4, !dbg !3068
  %16 = load i8*, i8** %13, align 8, !dbg !3069
  %17 = load i64, i64* %14, align 8, !dbg !3070
  %18 = call i32 @setlocale_null_unlocked(i32 %15, i8* %16, i64 %17), !dbg !3071
  %19 = load i32, i32* @x.49
  %20 = load i32, i32* @y.50
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i32 %18, !dbg !3072

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !3073, metadata !DIExpression()), !dbg !3063
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !3076, metadata !DIExpression()), !dbg !3065
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !3077, metadata !DIExpression()), !dbg !3067
  %30 = load i32, i32* %27, align 4, !dbg !3068
  %31 = load i8*, i8** %28, align 8, !dbg !3069
  %32 = load i64, i64* %29, align 8, !dbg !3070
  %33 = call i32 @setlocale_null_unlocked(i32 %30, i8* %31, i64 %32), !dbg !3071
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_unlocked(i32, i8*, i64) #5 !dbg !3078 {
  %4 = load i32, i32* @x.51
  %5 = load i32, i32* @y.52
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !3079, metadata !DIExpression()), !dbg !3080
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3081, metadata !DIExpression()), !dbg !3082
  store i64 %2, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !3083, metadata !DIExpression()), !dbg !3084
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3085, metadata !DIExpression()), !dbg !3086
  %18 = load i32, i32* %13, align 4, !dbg !3087
  %19 = call i8* @setlocale_null_androidfix(i32 %18), !dbg !3088
  store i8* %19, i8** %16, align 8, !dbg !3086
  %20 = load i8*, i8** %16, align 8, !dbg !3089
  %21 = icmp eq i8* %20, null, !dbg !3091
  %22 = load i32, i32* @x.51
  %23 = load i32, i32* @y.52
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %85, !dbg !3092

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.51
  %32 = load i32, i32* @y.52
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load i64, i64* %15, align 8, !dbg !3093
  %40 = icmp ugt i64 %39, 0, !dbg !3096
  %41 = load i32, i32* @x.51
  %42 = load i32, i32* @y.52
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %40, label %49, label %68, !dbg !3097

49:                                               ; preds = %originalBBpart24
  %50 = load i32, i32* @x.51
  %51 = load i32, i32* @y.52
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %49, %originalBB6alteredBB
  %58 = load i8*, i8** %14, align 8, !dbg !3098
  %59 = getelementptr inbounds i8, i8* %58, i64 0, !dbg !3098
  store i8 0, i8* %59, align 1, !dbg !3099
  %60 = load i32, i32* @x.51
  %61 = load i32, i32* @y.52
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %68, !dbg !3098

68:                                               ; preds = %originalBBpart28, %originalBBpart24
  %69 = load i32, i32* @x.51
  %70 = load i32, i32* @y.52
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %68, %originalBB10alteredBB
  store i32 22, i32* %12, align 4, !dbg !3100
  %77 = load i32, i32* @x.51
  %78 = load i32, i32* @y.52
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %173, !dbg !3100

85:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i64* %17, metadata !3101, metadata !DIExpression()), !dbg !3103
  %86 = load i32, i32* @x.51
  %87 = load i32, i32* @y.52
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %85, %originalBB14alteredBB
  %94 = load i8*, i8** %16, align 8, !dbg !3104
  %95 = call i64 @strlen(i8* %94) #13, !dbg !3105
  store i64 %95, i64* %17, align 8, !dbg !3103
  %96 = load i64, i64* %17, align 8, !dbg !3106
  %97 = load i64, i64* %15, align 8, !dbg !3108
  %98 = icmp ult i64 %96, %97, !dbg !3109
  %99 = load i32, i32* @x.51
  %100 = load i32, i32* @y.52
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %98, label %107, label %128, !dbg !3110

107:                                              ; preds = %originalBBpart216
  %108 = load i32, i32* @x.51
  %109 = load i32, i32* @y.52
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %107, %originalBB18alteredBB
  %116 = load i8*, i8** %14, align 8, !dbg !3111
  %117 = load i8*, i8** %16, align 8, !dbg !3113
  %118 = load i64, i64* %17, align 8, !dbg !3114
  %119 = add i64 %118, 1, !dbg !3115
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %116, i8* align 1 %117, i64 %119, i1 false), !dbg !3116
  store i32 0, i32* %12, align 4, !dbg !3117
  %120 = load i32, i32* @x.51
  %121 = load i32, i32* @y.52
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBBpart221, label %originalBB18alteredBB

originalBBpart221:                                ; preds = %originalBB18
  br label %173, !dbg !3117

128:                                              ; preds = %originalBBpart216
  %129 = load i32, i32* @x.51
  %130 = load i32, i32* @y.52
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %128, %originalBB23alteredBB
  %137 = load i64, i64* %15, align 8, !dbg !3118
  %138 = icmp ugt i64 %137, 0, !dbg !3121
  %139 = load i32, i32* @x.51
  %140 = load i32, i32* @y.52
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br i1 %138, label %147, label %172, !dbg !3122

147:                                              ; preds = %originalBBpart225
  %148 = load i32, i32* @x.51
  %149 = load i32, i32* @y.52
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %147, %originalBB27alteredBB
  %156 = load i8*, i8** %14, align 8, !dbg !3123
  %157 = load i8*, i8** %16, align 8, !dbg !3125
  %158 = load i64, i64* %15, align 8, !dbg !3126
  %159 = sub i64 %158, 1, !dbg !3127
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %156, i8* align 1 %157, i64 %159, i1 false), !dbg !3128
  %160 = load i8*, i8** %14, align 8, !dbg !3129
  %161 = load i64, i64* %15, align 8, !dbg !3130
  %162 = sub i64 %161, 1, !dbg !3131
  %163 = getelementptr inbounds i8, i8* %160, i64 %162, !dbg !3129
  store i8 0, i8* %163, align 1, !dbg !3132
  %164 = load i32, i32* @x.51
  %165 = load i32, i32* @y.52
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBBpart251, label %originalBB27alteredBB

originalBBpart251:                                ; preds = %originalBB27
  br label %172, !dbg !3133

172:                                              ; preds = %originalBBpart251, %originalBBpart225
  store i32 34, i32* %12, align 4, !dbg !3134
  br label %173, !dbg !3134

173:                                              ; preds = %172, %originalBBpart221, %originalBBpart212
  %174 = load i32, i32* @x.51
  %175 = load i32, i32* @y.52
  %176 = sub i32 %174, 1
  %177 = mul i32 %174, %176
  %178 = urem i32 %177, 2
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %179, %180
  br i1 %181, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %173, %originalBB53alteredBB
  %182 = load i32, i32* %12, align 4, !dbg !3135
  %183 = load i32, i32* @x.51
  %184 = load i32, i32* @y.52
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBBpart255, label %originalBB53alteredBB

originalBBpart255:                                ; preds = %originalBB53
  ret i32 %182, !dbg !3135

originalBBalteredBB:                              ; preds = %originalBB, %3
  %191 = alloca i32, align 4
  %192 = alloca i32, align 4
  %193 = alloca i8*, align 8
  %194 = alloca i64, align 8
  %195 = alloca i8*, align 8
  %196 = alloca i64, align 8
  store i32 %0, i32* %192, align 4
  call void @llvm.dbg.declare(metadata i32* %192, metadata !3136, metadata !DIExpression()), !dbg !3080
  store i8* %1, i8** %193, align 8
  call void @llvm.dbg.declare(metadata i8** %193, metadata !3139, metadata !DIExpression()), !dbg !3082
  store i64 %2, i64* %194, align 8
  call void @llvm.dbg.declare(metadata i64* %194, metadata !3140, metadata !DIExpression()), !dbg !3084
  call void @llvm.dbg.declare(metadata i8** %195, metadata !3141, metadata !DIExpression()), !dbg !3086
  %197 = load i32, i32* %192, align 4, !dbg !3087
  %198 = call i8* @setlocale_null_androidfix(i32 %197), !dbg !3088
  store i8* %198, i8** %195, align 8, !dbg !3086
  %199 = load i8*, i8** %195, align 8, !dbg !3089
  %200 = icmp eq i8* %199, null, !dbg !3091
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %201 = load i64, i64* %15, align 8, !dbg !3093
  %202 = icmp ugt i64 %201, 0, !dbg !3096
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %49
  %203 = load i8*, i8** %14, align 8, !dbg !3098
  %204 = getelementptr inbounds i8, i8* %203, i64 0, !dbg !3098
  store i8 0, i8* %204, align 1, !dbg !3099
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %68
  store i32 22, i32* %12, align 4, !dbg !3100
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %85
  %205 = load i8*, i8** %16, align 8, !dbg !3104
  %206 = call i64 @strlen(i8* %205) #13, !dbg !3105
  store i64 %206, i64* %17, align 8, !dbg !3103
  %207 = load i64, i64* %17, align 8, !dbg !3106
  %208 = load i64, i64* %15, align 8, !dbg !3108
  %209 = icmp ult i64 %207, %208, !dbg !3109
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %107
  %210 = load i8*, i8** %14, align 8, !dbg !3111
  %211 = load i8*, i8** %16, align 8, !dbg !3113
  %212 = load i64, i64* %17, align 8, !dbg !3114
  %_ = shl i64 %212, 1
  %_19 = shl i64 %212, 1
  %213 = add i64 %212, 1, !dbg !3115
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %210, i8* align 1 %211, i64 %213, i1 false), !dbg !3116
  store i32 0, i32* %12, align 4, !dbg !3117
  br label %originalBB18

originalBB23alteredBB:                            ; preds = %originalBB23, %128
  %214 = load i64, i64* %15, align 8, !dbg !3118
  %215 = icmp ugt i64 %214, 0, !dbg !3121
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %147
  %216 = load i8*, i8** %14, align 8, !dbg !3123
  %217 = load i8*, i8** %16, align 8, !dbg !3125
  %218 = load i64, i64* %15, align 8, !dbg !3126
  %_28 = sub i64 0, %218
  %gen = add i64 %_28, 1
  %_29 = sub i64 %218, 1
  %gen30 = mul i64 %_29, 1
  %_31 = sub i64 0, %218
  %gen32 = add i64 %_31, 1
  %_33 = sub i64 %218, 1
  %gen34 = mul i64 %_33, 1
  %_35 = sub i64 0, %218
  %gen36 = add i64 %_35, 1
  %_37 = sub i64 %218, 1
  %gen38 = mul i64 %_37, 1
  %219 = sub i64 %218, 1, !dbg !3127
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %216, i8* align 1 %217, i64 %219, i1 false), !dbg !3128
  %220 = load i8*, i8** %14, align 8, !dbg !3129
  %221 = load i64, i64* %15, align 8, !dbg !3130
  %_39 = sub i64 0, %221
  %gen40 = add i64 %_39, 1
  %_41 = sub i64 %221, 1
  %gen42 = mul i64 %_41, 1
  %_43 = sub i64 %221, 1
  %gen44 = mul i64 %_43, 1
  %_45 = shl i64 %221, 1
  %_46 = sub i64 %221, 1
  %gen47 = mul i64 %_46, 1
  %_48 = sub i64 %221, 1
  %gen49 = mul i64 %_48, 1
  %222 = sub i64 %221, 1, !dbg !3131
  %223 = getelementptr inbounds i8, i8* %220, i64 %222, !dbg !3129
  store i8 0, i8* %223, align 1, !dbg !3132
  br label %originalBB27

originalBB53alteredBB:                            ; preds = %originalBB53, %173
  %224 = load i32, i32* %12, align 4, !dbg !3135
  br label %originalBB53
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @setlocale_null_androidfix(i32) #5 !dbg !3142 {
  %2 = load i32, i32* @x.53
  %3 = load i32, i32* @y.54
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !3145, metadata !DIExpression()), !dbg !3146
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3147, metadata !DIExpression()), !dbg !3148
  %12 = load i32, i32* %10, align 4, !dbg !3149
  %13 = call i8* @setlocale(i32 %12, i8* null) #10, !dbg !3150
  store i8* %13, i8** %11, align 8, !dbg !3148
  %14 = load i8*, i8** %11, align 8, !dbg !3151
  %15 = load i32, i32* @x.53
  %16 = load i32, i32* @y.54
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !3152

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32, align 4
  %24 = alloca i8*, align 8
  store i32 %0, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !3153, metadata !DIExpression()), !dbg !3146
  call void @llvm.dbg.declare(metadata i8** %24, metadata !3156, metadata !DIExpression()), !dbg !3148
  %25 = load i32, i32* %23, align 4, !dbg !3149
  %26 = call i8* @setlocale(i32 %25, i8* null) #10, !dbg !3150
  store i8* %26, i8** %24, align 8, !dbg !3148
  %27 = load i8*, i8** %24, align 8, !dbg !3151
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fclose(%struct._IO_FILE* nonnull) #5 !dbg !3157 {
  %2 = load i32, i32* @x.55
  %3 = load i32, i32* @y.56
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !3195, metadata !DIExpression()), !dbg !3196
  call void @llvm.dbg.declare(metadata i32* %12, metadata !3197, metadata !DIExpression()), !dbg !3198
  store i32 0, i32* %12, align 4, !dbg !3198
  call void @llvm.dbg.declare(metadata i32* %13, metadata !3199, metadata !DIExpression()), !dbg !3200
  call void @llvm.dbg.declare(metadata i32* %14, metadata !3201, metadata !DIExpression()), !dbg !3202
  store i32 0, i32* %14, align 4, !dbg !3202
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3203
  %16 = call i32 @fileno(%struct._IO_FILE* %15) #10, !dbg !3204
  store i32 %16, i32* %13, align 4, !dbg !3205
  %17 = load i32, i32* %13, align 4, !dbg !3206
  %18 = icmp slt i32 %17, 0, !dbg !3208
  %19 = load i32, i32* @x.55
  %20 = load i32, i32* @y.56
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %46, !dbg !3209

27:                                               ; preds = %originalBBpart2
  %28 = load i32, i32* @x.55
  %29 = load i32, i32* @y.56
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3210
  %37 = call i32 @fclose(%struct._IO_FILE* %36), !dbg !3211
  store i32 %37, i32* %10, align 4, !dbg !3212
  %38 = load i32, i32* @x.55
  %39 = load i32, i32* @y.56
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %184, !dbg !3212

46:                                               ; preds = %originalBBpart2
  %47 = load i32, i32* @x.55
  %48 = load i32, i32* @y.56
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %46, %originalBB6alteredBB
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3213
  %56 = call i32 @__freading(%struct._IO_FILE* %55) #10, !dbg !3213
  %57 = icmp ne i32 %56, 0, !dbg !3213
  %58 = load i32, i32* @x.55
  %59 = load i32, i32* @y.56
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %57, label %66, label %87, !dbg !3215

66:                                               ; preds = %originalBBpart28
  %67 = load i32, i32* @x.55
  %68 = load i32, i32* @y.56
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3216
  %76 = call i32 @fileno(%struct._IO_FILE* %75) #10, !dbg !3217
  %77 = call i64 @lseek(i32 %76, i64 0, i32 1) #10, !dbg !3218
  %78 = icmp ne i64 %77, -1, !dbg !3219
  %79 = load i32, i32* @x.55
  %80 = load i32, i32* @y.56
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %78, label %87, label %126, !dbg !3220

87:                                               ; preds = %originalBBpart212, %originalBBpart28
  %88 = load i32, i32* @x.55
  %89 = load i32, i32* @y.56
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %87, %originalBB14alteredBB
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3221
  %97 = call i32 @rpl_fflush(%struct._IO_FILE* %96), !dbg !3222
  %98 = icmp ne i32 %97, 0, !dbg !3222
  %99 = load i32, i32* @x.55
  %100 = load i32, i32* @y.56
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %98, label %107, label %126, !dbg !3223

107:                                              ; preds = %originalBBpart216
  %108 = load i32, i32* @x.55
  %109 = load i32, i32* @y.56
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %107, %originalBB18alteredBB
  %116 = call i32* @__errno_location() #15, !dbg !3224
  %117 = load i32, i32* %116, align 4, !dbg !3224
  store i32 %117, i32* %12, align 4, !dbg !3225
  %118 = load i32, i32* @x.55
  %119 = load i32, i32* @y.56
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %126, !dbg !3226

126:                                              ; preds = %originalBBpart220, %originalBBpart216, %originalBBpart212
  %127 = load i32, i32* @x.55
  %128 = load i32, i32* @y.56
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %126, %originalBB22alteredBB
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3227
  %136 = call i32 @fclose(%struct._IO_FILE* %135), !dbg !3228
  store i32 %136, i32* %14, align 4, !dbg !3229
  %137 = load i32, i32* %12, align 4, !dbg !3230
  %138 = icmp ne i32 %137, 0, !dbg !3232
  %139 = load i32, i32* @x.55
  %140 = load i32, i32* @y.56
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %138, label %147, label %166, !dbg !3233

147:                                              ; preds = %originalBBpart224
  %148 = load i32, i32* @x.55
  %149 = load i32, i32* @y.56
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %147, %originalBB26alteredBB
  %156 = load i32, i32* %12, align 4, !dbg !3234
  %157 = call i32* @__errno_location() #15, !dbg !3236
  store i32 %156, i32* %157, align 4, !dbg !3237
  store i32 -1, i32* %14, align 4, !dbg !3238
  %158 = load i32, i32* @x.55
  %159 = load i32, i32* @y.56
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %166, !dbg !3239

166:                                              ; preds = %originalBBpart228, %originalBBpart224
  %167 = load i32, i32* @x.55
  %168 = load i32, i32* @y.56
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %166, %originalBB30alteredBB
  %175 = load i32, i32* %14, align 4, !dbg !3240
  store i32 %175, i32* %10, align 4, !dbg !3241
  %176 = load i32, i32* @x.55
  %177 = load i32, i32* @y.56
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %184, !dbg !3241

184:                                              ; preds = %originalBBpart232, %originalBBpart24
  %185 = load i32, i32* @x.55
  %186 = load i32, i32* @y.56
  %187 = sub i32 %185, 1
  %188 = mul i32 %185, %187
  %189 = urem i32 %188, 2
  %190 = icmp eq i32 %189, 0
  %191 = icmp slt i32 %186, 10
  %192 = or i1 %190, %191
  br i1 %192, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %184, %originalBB34alteredBB
  %193 = load i32, i32* %10, align 4, !dbg !3242
  %194 = load i32, i32* @x.55
  %195 = load i32, i32* @y.56
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  ret i32 %193, !dbg !3242

originalBBalteredBB:                              ; preds = %originalBB, %1
  %202 = alloca i32, align 4
  %203 = alloca %struct._IO_FILE*, align 8
  %204 = alloca i32, align 4
  %205 = alloca i32, align 4
  %206 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %203, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %203, metadata !3243, metadata !DIExpression()), !dbg !3196
  call void @llvm.dbg.declare(metadata i32* %204, metadata !3282, metadata !DIExpression()), !dbg !3198
  store i32 0, i32* %204, align 4, !dbg !3198
  call void @llvm.dbg.declare(metadata i32* %205, metadata !3283, metadata !DIExpression()), !dbg !3200
  call void @llvm.dbg.declare(metadata i32* %206, metadata !3284, metadata !DIExpression()), !dbg !3202
  store i32 0, i32* %206, align 4, !dbg !3202
  %207 = load %struct._IO_FILE*, %struct._IO_FILE** %203, align 8, !dbg !3203
  %208 = call i32 @fileno(%struct._IO_FILE* %207) #10, !dbg !3204
  store i32 %208, i32* %205, align 4, !dbg !3205
  %209 = load i32, i32* %205, align 4, !dbg !3206
  %210 = icmp slt i32 %209, 0, !dbg !3208
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  %211 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3210
  %212 = call i32 @fclose(%struct._IO_FILE* %211), !dbg !3211
  store i32 %212, i32* %10, align 4, !dbg !3212
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %46
  %213 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3213
  %214 = call i32 @__freading(%struct._IO_FILE* %213) #10, !dbg !3213
  %215 = icmp ne i32 %214, 0, !dbg !3213
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3216
  %217 = call i32 @fileno(%struct._IO_FILE* %216) #10, !dbg !3217
  %218 = call i64 @lseek(i32 %217, i64 0, i32 1) #10, !dbg !3218
  %219 = icmp ne i64 %218, -1, !dbg !3219
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %87
  %220 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3221
  %221 = call i32 @rpl_fflush(%struct._IO_FILE* %220), !dbg !3222
  %222 = icmp ne i32 %221, 0, !dbg !3222
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %107
  %223 = call i32* @__errno_location() #15, !dbg !3224
  %224 = load i32, i32* %223, align 4, !dbg !3224
  store i32 %224, i32* %12, align 4, !dbg !3225
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %126
  %225 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3227
  %226 = call i32 @fclose(%struct._IO_FILE* %225), !dbg !3228
  store i32 %226, i32* %14, align 4, !dbg !3229
  %227 = load i32, i32* %12, align 4, !dbg !3230
  %228 = icmp ne i32 %227, 0, !dbg !3232
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %147
  %229 = load i32, i32* %12, align 4, !dbg !3234
  %230 = call i32* @__errno_location() #15, !dbg !3236
  store i32 %229, i32* %230, align 4, !dbg !3237
  store i32 -1, i32* %14, align 4, !dbg !3238
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %166
  %231 = load i32, i32* %14, align 4, !dbg !3240
  store i32 %231, i32* %10, align 4, !dbg !3241
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %184
  %232 = load i32, i32* %10, align 4, !dbg !3242
  br label %originalBB34
}

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #3

declare dso_local i32 @fclose(%struct._IO_FILE*) #4

; Function Attrs: nounwind
declare dso_local i32 @__freading(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fflush(%struct._IO_FILE*) #5 !dbg !3285 {
  %2 = alloca i32, align 4
  %3 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %3, metadata !3323, metadata !DIExpression()), !dbg !3324
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3325
  %5 = icmp eq %struct._IO_FILE* %4, null, !dbg !3327
  br i1 %5, label %26, label %6, !dbg !3328

6:                                                ; preds = %1
  %7 = load i32, i32* @x.57
  %8 = load i32, i32* @y.58
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %6, %originalBBalteredBB
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3329
  %16 = call i32 @__freading(%struct._IO_FILE* %15) #10, !dbg !3329
  %17 = icmp ne i32 %16, 0, !dbg !3329
  %18 = load i32, i32* @x.57
  %19 = load i32, i32* @y.58
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %17, label %45, label %26, !dbg !3330

26:                                               ; preds = %originalBBpart2, %1
  %27 = load i32, i32* @x.57
  %28 = load i32, i32* @y.58
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3331
  %36 = call i32 @fflush(%struct._IO_FILE* %35), !dbg !3332
  store i32 %36, i32* %2, align 4, !dbg !3333
  %37 = load i32, i32* @x.57
  %38 = load i32, i32* @y.58
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %49, !dbg !3333

45:                                               ; preds = %originalBBpart2
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3334
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %46), !dbg !3335
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3336
  %48 = call i32 @fflush(%struct._IO_FILE* %47), !dbg !3337
  store i32 %48, i32* %2, align 4, !dbg !3338
  br label %49, !dbg !3338

49:                                               ; preds = %45, %originalBBpart24
  %50 = load i32, i32* @x.57
  %51 = load i32, i32* @y.58
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %49, %originalBB6alteredBB
  %58 = load i32, i32* %2, align 4, !dbg !3339
  %59 = load i32, i32* @x.57
  %60 = load i32, i32* @y.58
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i32 %58, !dbg !3339

originalBBalteredBB:                              ; preds = %originalBB, %6
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3329
  %68 = call i32 @__freading(%struct._IO_FILE* %67) #10, !dbg !3329
  %69 = icmp ne i32 %68, 0, !dbg !3329
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3331
  %71 = call i32 @fflush(%struct._IO_FILE* %70), !dbg !3332
  store i32 %71, i32* %2, align 4, !dbg !3333
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %49
  %72 = load i32, i32* %2, align 4, !dbg !3339
  br label %originalBB6
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE*) #5 !dbg !3340 {
  %2 = load i32, i32* @x.59
  %3 = load i32, i32* @y.60
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %10, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %10, metadata !3343, metadata !DIExpression()), !dbg !3344
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3345
  %12 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %11, i32 0, i32 0, !dbg !3347
  %13 = load i32, i32* %12, align 8, !dbg !3347
  %14 = and i32 %13, 256, !dbg !3348
  %15 = icmp ne i32 %14, 0, !dbg !3348
  %16 = load i32, i32* @x.59
  %17 = load i32, i32* @y.60
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %43, !dbg !3349

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.59
  %26 = load i32, i32* @y.60
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB13, label %originalBB13alteredBB

originalBB13:                                     ; preds = %24, %originalBB13alteredBB
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3350
  %34 = call i32 @rpl_fseeko(%struct._IO_FILE* %33, i64 0, i32 1), !dbg !3351
  %35 = load i32, i32* @x.59
  %36 = load i32, i32* @y.60
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart215, label %originalBB13alteredBB

originalBBpart215:                                ; preds = %originalBB13
  br label %43, !dbg !3351

43:                                               ; preds = %originalBBpart215, %originalBBpart2
  ret void, !dbg !3352

originalBBalteredBB:                              ; preds = %originalBB, %1
  %44 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %44, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %44, metadata !3353, metadata !DIExpression()), !dbg !3344
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** %44, align 8, !dbg !3345
  %46 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %45, i32 0, i32 0, !dbg !3347
  %47 = load i32, i32* %46, align 8, !dbg !3347
  %_ = sub i32 %47, 256
  %gen = mul i32 %_, 256
  %_1 = sub i32 0, %47
  %gen2 = add i32 %_1, 256
  %_3 = shl i32 %47, 256
  %_4 = sub i32 0, %47
  %gen5 = add i32 %_4, 256
  %_6 = sub i32 0, %47
  %gen7 = add i32 %_6, 256
  %_8 = sub i32 0, %47
  %gen9 = add i32 %_8, 256
  %_10 = shl i32 %47, 256
  %_11 = shl i32 %47, 256
  %_12 = shl i32 %47, 256
  %48 = and i32 %47, 256, !dbg !3348
  %49 = icmp ne i32 %48, 0, !dbg !3348
  br label %originalBB

originalBB13alteredBB:                            ; preds = %originalBB13, %24
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3350
  %51 = call i32 @rpl_fseeko(%struct._IO_FILE* %50, i64 0, i32 1), !dbg !3351
  br label %originalBB13
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fseeko(%struct._IO_FILE* nonnull, i64, i32) #5 !dbg !3392 {
  %4 = load i32, i32* @x.61
  %5 = load i32, i32* @y.62
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !3431, metadata !DIExpression()), !dbg !3432
  store i64 %1, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !3433, metadata !DIExpression()), !dbg !3434
  store i32 %2, i32* %15, align 4
  call void @llvm.dbg.declare(metadata i32* %15, metadata !3435, metadata !DIExpression()), !dbg !3436
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3437
  %18 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %17, i32 0, i32 2, !dbg !3439
  %19 = load i8*, i8** %18, align 8, !dbg !3439
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3440
  %21 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %20, i32 0, i32 1, !dbg !3441
  %22 = load i8*, i8** %21, align 8, !dbg !3441
  %23 = icmp eq i8* %19, %22, !dbg !3442
  %24 = load i32, i32* @x.61
  %25 = load i32, i32* @y.62
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %23, label %32, label %142, !dbg !3443

32:                                               ; preds = %originalBBpart2
  %33 = load i32, i32* @x.61
  %34 = load i32, i32* @y.62
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3444
  %42 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %41, i32 0, i32 5, !dbg !3445
  %43 = load i8*, i8** %42, align 8, !dbg !3445
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3446
  %45 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %44, i32 0, i32 4, !dbg !3447
  %46 = load i8*, i8** %45, align 8, !dbg !3447
  %47 = icmp eq i8* %43, %46, !dbg !3448
  %48 = load i32, i32* @x.61
  %49 = load i32, i32* @y.62
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %142, !dbg !3449

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.61
  %58 = load i32, i32* @y.62
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3450
  %66 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %65, i32 0, i32 9, !dbg !3451
  %67 = load i8*, i8** %66, align 8, !dbg !3451
  %68 = icmp eq i8* %67, null, !dbg !3452
  %69 = load i32, i32* @x.61
  %70 = load i32, i32* @y.62
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %68, label %77, label %142, !dbg !3453

77:                                               ; preds = %originalBBpart28
  call void @llvm.dbg.declare(metadata i64* %16, metadata !3454, metadata !DIExpression()), !dbg !3456
  %78 = load i32, i32* @x.61
  %79 = load i32, i32* @y.62
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %77, %originalBB10alteredBB
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3457
  %87 = call i32 @fileno(%struct._IO_FILE* %86) #10, !dbg !3458
  %88 = load i64, i64* %14, align 8, !dbg !3459
  %89 = load i32, i32* %15, align 4, !dbg !3460
  %90 = call i64 @lseek(i32 %87, i64 %88, i32 %89) #10, !dbg !3461
  store i64 %90, i64* %16, align 8, !dbg !3456
  %91 = load i64, i64* %16, align 8, !dbg !3462
  %92 = icmp eq i64 %91, -1, !dbg !3464
  %93 = load i32, i32* @x.61
  %94 = load i32, i32* @y.62
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %92, label %101, label %118, !dbg !3465

101:                                              ; preds = %originalBBpart212
  %102 = load i32, i32* @x.61
  %103 = load i32, i32* @y.62
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %101, %originalBB14alteredBB
  store i32 -1, i32* %12, align 4, !dbg !3466
  %110 = load i32, i32* @x.61
  %111 = load i32, i32* @y.62
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %163, !dbg !3466

118:                                              ; preds = %originalBBpart212
  %119 = load i32, i32* @x.61
  %120 = load i32, i32* @y.62
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %118, %originalBB18alteredBB
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3468
  %128 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %127, i32 0, i32 0, !dbg !3469
  %129 = load i32, i32* %128, align 8, !dbg !3470
  %130 = and i32 %129, -17, !dbg !3470
  store i32 %130, i32* %128, align 8, !dbg !3470
  %131 = load i64, i64* %16, align 8, !dbg !3471
  %132 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3472
  %133 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %132, i32 0, i32 21, !dbg !3473
  store i64 %131, i64* %133, align 8, !dbg !3474
  store i32 0, i32* %12, align 4, !dbg !3475
  %134 = load i32, i32* @x.61
  %135 = load i32, i32* @y.62
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart221, label %originalBB18alteredBB

originalBBpart221:                                ; preds = %originalBB18
  br label %163, !dbg !3475

142:                                              ; preds = %originalBBpart28, %originalBBpart24, %originalBBpart2
  %143 = load i32, i32* @x.61
  %144 = load i32, i32* @y.62
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %142, %originalBB23alteredBB
  %151 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3476
  %152 = load i64, i64* %14, align 8, !dbg !3477
  %153 = load i32, i32* %15, align 4, !dbg !3478
  %154 = call i32 @fseeko(%struct._IO_FILE* %151, i64 %152, i32 %153), !dbg !3479
  store i32 %154, i32* %12, align 4, !dbg !3480
  %155 = load i32, i32* @x.61
  %156 = load i32, i32* @y.62
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br label %163, !dbg !3480

163:                                              ; preds = %originalBBpart225, %originalBBpart221, %originalBBpart216
  %164 = load i32, i32* @x.61
  %165 = load i32, i32* @y.62
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %163, %originalBB27alteredBB
  %172 = load i32, i32* %12, align 4, !dbg !3481
  %173 = load i32, i32* @x.61
  %174 = load i32, i32* @y.62
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  ret i32 %172, !dbg !3481

originalBBalteredBB:                              ; preds = %originalBB, %3
  %181 = alloca i32, align 4
  %182 = alloca %struct._IO_FILE*, align 8
  %183 = alloca i64, align 8
  %184 = alloca i32, align 4
  %185 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %182, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %182, metadata !3482, metadata !DIExpression()), !dbg !3432
  store i64 %1, i64* %183, align 8
  call void @llvm.dbg.declare(metadata i64* %183, metadata !3521, metadata !DIExpression()), !dbg !3434
  store i32 %2, i32* %184, align 4
  call void @llvm.dbg.declare(metadata i32* %184, metadata !3522, metadata !DIExpression()), !dbg !3436
  %186 = load %struct._IO_FILE*, %struct._IO_FILE** %182, align 8, !dbg !3437
  %187 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %186, i32 0, i32 2, !dbg !3439
  %188 = load i8*, i8** %187, align 8, !dbg !3439
  %189 = load %struct._IO_FILE*, %struct._IO_FILE** %182, align 8, !dbg !3440
  %190 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %189, i32 0, i32 1, !dbg !3441
  %191 = load i8*, i8** %190, align 8, !dbg !3441
  %192 = icmp eq i8* %188, %191, !dbg !3442
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  %193 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3444
  %194 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %193, i32 0, i32 5, !dbg !3445
  %195 = load i8*, i8** %194, align 8, !dbg !3445
  %196 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3446
  %197 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %196, i32 0, i32 4, !dbg !3447
  %198 = load i8*, i8** %197, align 8, !dbg !3447
  %199 = icmp eq i8* %195, %198, !dbg !3448
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %200 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3450
  %201 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %200, i32 0, i32 9, !dbg !3451
  %202 = load i8*, i8** %201, align 8, !dbg !3451
  %203 = icmp eq i8* %202, null, !dbg !3452
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %77
  %204 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3457
  %205 = call i32 @fileno(%struct._IO_FILE* %204) #10, !dbg !3458
  %206 = load i64, i64* %14, align 8, !dbg !3459
  %207 = load i32, i32* %15, align 4, !dbg !3460
  %208 = call i64 @lseek(i32 %205, i64 %206, i32 %207) #10, !dbg !3461
  store i64 %208, i64* %16, align 8, !dbg !3456
  %209 = load i64, i64* %16, align 8, !dbg !3462
  %210 = icmp eq i64 %209, -1, !dbg !3464
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %101
  store i32 -1, i32* %12, align 4, !dbg !3466
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %118
  %211 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3468
  %212 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %211, i32 0, i32 0, !dbg !3469
  %213 = load i32, i32* %212, align 8, !dbg !3470
  %_ = shl i32 %213, -17
  %_19 = sub i32 %213, -17
  %gen = mul i32 %_19, -17
  %214 = and i32 %213, -17, !dbg !3470
  store i32 %214, i32* %212, align 8, !dbg !3470
  %215 = load i64, i64* %16, align 8, !dbg !3471
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3472
  %217 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %216, i32 0, i32 21, !dbg !3473
  store i64 %215, i64* %217, align 8, !dbg !3474
  store i32 0, i32* %12, align 4, !dbg !3475
  br label %originalBB18

originalBB23alteredBB:                            ; preds = %originalBB23, %142
  %218 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3476
  %219 = load i64, i64* %14, align 8, !dbg !3477
  %220 = load i32, i32* %15, align 4, !dbg !3478
  %221 = call i32 @fseeko(%struct._IO_FILE* %218, i64 %219, i32 %220), !dbg !3479
  store i32 %221, i32* %12, align 4, !dbg !3480
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %163
  %222 = load i32, i32* %12, align 4, !dbg !3481
  br label %originalBB27
}

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @c_tolower(i32) #5 !dbg !3523 {
  %2 = load i32, i32* @x.63
  %3 = load i32, i32* @y.64
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3527, metadata !DIExpression()), !dbg !3528
  %12 = load i32, i32* %11, align 4, !dbg !3529
  %13 = load i32, i32* @x.63
  %14 = load i32, i32* @y.64
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %12, label %41 [
    i32 65, label %21
    i32 66, label %21
    i32 67, label %21
    i32 68, label %21
    i32 69, label %21
    i32 70, label %21
    i32 71, label %21
    i32 72, label %21
    i32 73, label %21
    i32 74, label %21
    i32 75, label %21
    i32 76, label %21
    i32 77, label %21
    i32 78, label %21
    i32 79, label %21
    i32 80, label %21
    i32 81, label %21
    i32 82, label %21
    i32 83, label %21
    i32 84, label %21
    i32 85, label %21
    i32 86, label %21
    i32 87, label %21
    i32 88, label %21
    i32 89, label %21
    i32 90, label %21
  ], !dbg !3530

21:                                               ; preds = %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2
  %22 = load i32, i32* @x.63
  %23 = load i32, i32* @y.64
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i32, i32* %11, align 4, !dbg !3531
  %31 = sub nsw i32 %30, 65, !dbg !3533
  %32 = add nsw i32 %31, 97, !dbg !3534
  store i32 %32, i32* %10, align 4, !dbg !3535
  %33 = load i32, i32* @x.63
  %34 = load i32, i32* @y.64
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart212, label %originalBB1alteredBB

originalBBpart212:                                ; preds = %originalBB1
  br label %59, !dbg !3535

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* @x.63
  %43 = load i32, i32* @y.64
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %41, %originalBB14alteredBB
  %50 = load i32, i32* %11, align 4, !dbg !3536
  store i32 %50, i32* %10, align 4, !dbg !3537
  %51 = load i32, i32* @x.63
  %52 = load i32, i32* @y.64
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %59, !dbg !3537

59:                                               ; preds = %originalBBpart216, %originalBBpart212
  %60 = load i32, i32* @x.63
  %61 = load i32, i32* @y.64
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %59, %originalBB18alteredBB
  %68 = load i32, i32* %10, align 4, !dbg !3538
  %69 = load i32, i32* @x.63
  %70 = load i32, i32* @y.64
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  ret i32 %68, !dbg !3538

originalBBalteredBB:                              ; preds = %originalBB, %1
  %77 = alloca i32, align 4
  %78 = alloca i32, align 4
  store i32 %0, i32* %78, align 4
  call void @llvm.dbg.declare(metadata i32* %78, metadata !3539, metadata !DIExpression()), !dbg !3528
  %79 = load i32, i32* %78, align 4, !dbg !3529
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %80 = load i32, i32* %11, align 4, !dbg !3531
  %_ = sub i32 0, %80
  %gen = add i32 %_, 65
  %_2 = shl i32 %80, 65
  %_3 = sub i32 %80, 65
  %gen4 = mul i32 %_3, 65
  %_5 = shl i32 %80, 65
  %_6 = shl i32 %80, 65
  %_7 = shl i32 %80, 65
  %_8 = sub i32 %80, 65
  %gen9 = mul i32 %_8, 65
  %81 = sub nsw i32 %80, 65, !dbg !3533
  %_10 = shl i32 %81, 97
  %82 = add nsw i32 %81, 97, !dbg !3534
  store i32 %82, i32* %10, align 4, !dbg !3535
  br label %originalBB1

originalBB14alteredBB:                            ; preds = %originalBB14, %41
  %83 = load i32, i32* %11, align 4, !dbg !3536
  store i32 %83, i32* %10, align 4, !dbg !3537
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %59
  %84 = load i32, i32* %10, align 4, !dbg !3538
  br label %originalBB18
}

define private i32 @controle(i8*, i32) {
  %3 = load i32, i32* @x.65
  %4 = load i32, i32* @y.66
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = load i32, i32* @inVal0
  %12 = icmp sgt i32 %11, 0
  %13 = load i32, i32* @x.65
  %14 = load i32, i32* @y.66
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %41, label %21

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.65
  %23 = load i32, i32* @y.66
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  call void @srand(i32 %1)
  %30 = call i32 @rand()
  %31 = srem i32 %30, 50000
  %32 = add i32 %31, 2
  %33 = load i32, i32* @x.65
  %34 = load i32, i32* @y.66
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart223, label %originalBB1alteredBB

originalBBpart223:                                ; preds = %originalBB1
  ret i32 %32

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* @x.65
  %43 = load i32, i32* @y.66
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %41, %originalBB25alteredBB
  %50 = getelementptr inbounds [1 x i8], [1 x i8]* @.compVal2, i32 0, i32 0
  %51 = call i32 @strcmp(i8* %50, i8* %0)
  %52 = icmp eq i32 %51, 0
  %53 = load i32, i32* @x.65
  %54 = load i32, i32* @y.66
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br i1 %52, label %61, label %96

61:                                               ; preds = %originalBBpart227
  %62 = load i32, i32* @x.65
  %63 = load i32, i32* @y.66
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %61, %originalBB29alteredBB
  %70 = icmp eq i32 %1, 0
  %71 = load i32, i32* @x.65
  %72 = load i32, i32* @y.66
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br i1 %70, label %79, label %96

79:                                               ; preds = %originalBBpart231
  %80 = load i32, i32* @x.65
  %81 = load i32, i32* @y.66
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %79, %originalBB33alteredBB
  %88 = load i32, i32* @x.65
  %89 = load i32, i32* @y.66
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  ret i32 5

96:                                               ; preds = %originalBBpart231, %originalBBpart227
  %97 = load i32, i32* @x.65
  %98 = load i32, i32* @y.66
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %96, %originalBB37alteredBB
  %105 = getelementptr inbounds [2 x i8], [2 x i8]* @.compVal1, i32 0, i32 0
  %106 = call i32 @strcmp(i8* %105, i8* %0)
  %107 = icmp eq i32 %106, 0
  %108 = load i32, i32* @x.65
  %109 = load i32, i32* @y.66
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  br i1 %107, label %116, label %135

116:                                              ; preds = %originalBBpart239
  %117 = icmp eq i32 %1, 0
  br i1 %117, label %118, label %135

118:                                              ; preds = %116
  %119 = load i32, i32* @x.65
  %120 = load i32, i32* @y.66
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %118, %originalBB41alteredBB
  %127 = load i32, i32* @x.65
  %128 = load i32, i32* @y.66
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBBpart243, label %originalBB41alteredBB

originalBBpart243:                                ; preds = %originalBB41
  ret i32 3

135:                                              ; preds = %116, %originalBBpart239
  %136 = load i32, i32* @x.65
  %137 = load i32, i32* @y.66
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %135, %originalBB45alteredBB
  %144 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %145 = call i32 @strcmp(i8* %144, i8* %0)
  %146 = icmp eq i32 %145, 0
  %147 = load i32, i32* @x.65
  %148 = load i32, i32* @y.66
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart247, label %originalBB45alteredBB

originalBBpart247:                                ; preds = %originalBB45
  br i1 %146, label %155, label %174

155:                                              ; preds = %originalBBpart247
  %156 = icmp eq i32 %1, 0
  br i1 %156, label %157, label %174

157:                                              ; preds = %155
  %158 = load i32, i32* @x.65
  %159 = load i32, i32* @y.66
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBB49, label %originalBB49alteredBB

originalBB49:                                     ; preds = %157, %originalBB49alteredBB
  %166 = load i32, i32* @x.65
  %167 = load i32, i32* @y.66
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBBpart251, label %originalBB49alteredBB

originalBBpart251:                                ; preds = %originalBB49
  ret i32 3

174:                                              ; preds = %155, %originalBBpart247
  %175 = load i32, i32* @x.65
  %176 = load i32, i32* @y.66
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %174, %originalBB53alteredBB
  %183 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %184 = call i32 @strcmp(i8* %183, i8* %0)
  %185 = icmp eq i32 %184, 0
  %186 = load i32, i32* @x.65
  %187 = load i32, i32* @y.66
  %188 = sub i32 %186, 1
  %189 = mul i32 %186, %188
  %190 = urem i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %191, %192
  br i1 %193, label %originalBBpart255, label %originalBB53alteredBB

originalBBpart255:                                ; preds = %originalBB53
  br i1 %185, label %194, label %229

194:                                              ; preds = %originalBBpart255
  %195 = load i32, i32* @x.65
  %196 = load i32, i32* @y.66
  %197 = sub i32 %195, 1
  %198 = mul i32 %195, %197
  %199 = urem i32 %198, 2
  %200 = icmp eq i32 %199, 0
  %201 = icmp slt i32 %196, 10
  %202 = or i1 %200, %201
  br i1 %202, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %194, %originalBB57alteredBB
  %203 = icmp eq i32 %1, 2
  %204 = load i32, i32* @x.65
  %205 = load i32, i32* @y.66
  %206 = sub i32 %204, 1
  %207 = mul i32 %204, %206
  %208 = urem i32 %207, 2
  %209 = icmp eq i32 %208, 0
  %210 = icmp slt i32 %205, 10
  %211 = or i1 %209, %210
  br i1 %211, label %originalBBpart259, label %originalBB57alteredBB

originalBBpart259:                                ; preds = %originalBB57
  br i1 %203, label %212, label %229

212:                                              ; preds = %originalBBpart259
  %213 = load i32, i32* @x.65
  %214 = load i32, i32* @y.66
  %215 = sub i32 %213, 1
  %216 = mul i32 %213, %215
  %217 = urem i32 %216, 2
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %218, %219
  br i1 %220, label %originalBB61, label %originalBB61alteredBB

originalBB61:                                     ; preds = %212, %originalBB61alteredBB
  %221 = load i32, i32* @x.65
  %222 = load i32, i32* @y.66
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBBpart263, label %originalBB61alteredBB

originalBBpart263:                                ; preds = %originalBB61
  ret i32 5

229:                                              ; preds = %originalBBpart259, %originalBBpart255
  %230 = load i32, i32* @x.65
  %231 = load i32, i32* @y.66
  %232 = sub i32 %230, 1
  %233 = mul i32 %230, %232
  %234 = urem i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = icmp slt i32 %231, 10
  %237 = or i1 %235, %236
  br i1 %237, label %originalBB65, label %originalBB65alteredBB

originalBB65:                                     ; preds = %229, %originalBB65alteredBB
  call void @srand(i32 %1)
  %238 = call i32 @rand()
  %239 = srem i32 %238, 50000
  %240 = add i32 %239, 2
  %241 = load i32, i32* @x.65
  %242 = load i32, i32* @y.66
  %243 = sub i32 %241, 1
  %244 = mul i32 %241, %243
  %245 = urem i32 %244, 2
  %246 = icmp eq i32 %245, 0
  %247 = icmp slt i32 %242, 10
  %248 = or i1 %246, %247
  br i1 %248, label %originalBBpart281, label %originalBB65alteredBB

originalBBpart281:                                ; preds = %originalBB65
  ret i32 %240

originalBBalteredBB:                              ; preds = %originalBB, %2
  %249 = load i32, i32* @inVal0
  %250 = icmp sgt i32 %249, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  call void @srand(i32 %1)
  %251 = call i32 @rand()
  %_ = shl i32 %251, 50000
  %_2 = sub i32 %251, 50000
  %gen = mul i32 %_2, 50000
  %_3 = shl i32 %251, 50000
  %_4 = sub i32 %251, 50000
  %gen5 = mul i32 %_4, 50000
  %_6 = shl i32 %251, 50000
  %_7 = sub i32 0, %251
  %gen8 = add i32 %_7, 50000
  %252 = srem i32 %251, 50000
  %_9 = shl i32 %252, 2
  %_10 = sub i32 0, %252
  %gen11 = add i32 %_10, 2
  %_12 = sub i32 %252, 2
  %gen13 = mul i32 %_12, 2
  %_14 = sub i32 %252, 2
  %gen15 = mul i32 %_14, 2
  %_16 = sub i32 %252, 2
  %gen17 = mul i32 %_16, 2
  %_18 = sub i32 %252, 2
  %gen19 = mul i32 %_18, 2
  %_20 = sub i32 %252, 2
  %gen21 = mul i32 %_20, 2
  %253 = add i32 %252, 2
  br label %originalBB1

originalBB25alteredBB:                            ; preds = %originalBB25, %41
  %254 = getelementptr inbounds [1 x i8], [1 x i8]* @.compVal2, i32 0, i32 0
  %255 = call i32 @strcmp(i8* %254, i8* %0)
  %256 = icmp eq i32 %255, 0
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %61
  %257 = icmp eq i32 %1, 0
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %79
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %96
  %258 = getelementptr inbounds [2 x i8], [2 x i8]* @.compVal1, i32 0, i32 0
  %259 = call i32 @strcmp(i8* %258, i8* %0)
  %260 = icmp eq i32 %259, 0
  br label %originalBB37

originalBB41alteredBB:                            ; preds = %originalBB41, %118
  br label %originalBB41

originalBB45alteredBB:                            ; preds = %originalBB45, %135
  %261 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %262 = call i32 @strcmp(i8* %261, i8* %0)
  %263 = icmp eq i32 %262, 0
  br label %originalBB45

originalBB49alteredBB:                            ; preds = %originalBB49, %157
  br label %originalBB49

originalBB53alteredBB:                            ; preds = %originalBB53, %174
  %264 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %265 = call i32 @strcmp(i8* %264, i8* %0)
  %266 = icmp eq i32 %265, 0
  br label %originalBB53

originalBB57alteredBB:                            ; preds = %originalBB57, %194
  %267 = icmp eq i32 %1, 2
  br label %originalBB57

originalBB61alteredBB:                            ; preds = %originalBB61, %212
  br label %originalBB61

originalBB65alteredBB:                            ; preds = %originalBB65, %229
  call void @srand(i32 %1)
  %268 = call i32 @rand()
  %_66 = shl i32 %268, 50000
  %_67 = shl i32 %268, 50000
  %_68 = shl i32 %268, 50000
  %_69 = shl i32 %268, 50000
  %_70 = sub i32 %268, 50000
  %gen71 = mul i32 %_70, 50000
  %_72 = sub i32 %268, 50000
  %gen73 = mul i32 %_72, 50000
  %269 = srem i32 %268, 50000
  %_74 = shl i32 %269, 2
  %_75 = sub i32 %269, 2
  %gen76 = mul i32 %_75, 2
  %_77 = sub i32 %269, 2
  %gen78 = mul i32 %_77, 2
  %_79 = shl i32 %269, 2
  %270 = add i32 %269, 2
  br label %originalBB65
}

declare void @srand(i32)

declare i32 @rand()

attributes #0 = { noinline noreturn nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noinline nounwind optnone readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { noreturn }
attributes #15 = { nounwind readnone }

!llvm.dbg.cu = !{!111, !2, !11, !20, !28, !37, !114, !104, !117, !120, !122, !125, !131, !133, !135, !137, !139, !141, !143, !145}
!llvm.ident = !{!147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147}
!llvm.module.flags = !{!148, !149, !150, !151, !152}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "Version", scope: !2, file: !3, line: 2, type: !6, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5, nameTableKind: None)
!3 = !DIFile(filename: "src/version.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4 = !{}
!5 = !{!0}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8)
!8 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!9 = !DIGlobalVariableExpression(var: !10, expr: !DIExpression())
!10 = distinct !DIGlobalVariable(name: "ignore_EPIPE", scope: !11, file: !16, line: 56, type: !17, isLocal: true, isDefinition: true)
!11 = distinct !DICompileUnit(language: DW_LANG_C99, file: !12, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !13, nameTableKind: None)
!12 = !DIFile(filename: "./lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!13 = !{!14, !9}
!14 = !DIGlobalVariableExpression(var: !15, expr: !DIExpression())
!15 = distinct !DIGlobalVariable(name: "file_name", scope: !11, file: !16, line: 46, type: !6, isLocal: true, isDefinition: true)
!16 = !DIFile(filename: "lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!17 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!18 = !DIGlobalVariableExpression(var: !19, expr: !DIExpression())
!19 = distinct !DIGlobalVariable(name: "exit_failure", scope: !20, file: !23, line: 24, type: !24, isLocal: false, isDefinition: true)
!20 = distinct !DICompileUnit(language: DW_LANG_C99, file: !21, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !22, nameTableKind: None)
!21 = !DIFile(filename: "./lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!22 = !{!18}
!23 = !DIFile(filename: "lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!24 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !25)
!25 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(name: "program_name", scope: !28, file: !34, line: 33, type: !6, isLocal: false, isDefinition: true)
!28 = distinct !DICompileUnit(language: DW_LANG_C99, file: !29, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !30, globals: !33, nameTableKind: None)
!29 = !DIFile(filename: "./lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!30 = !{!31, !32}
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!32 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!33 = !{!26}
!34 = !DIFile(filename: "lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !37, file: !63, line: 116, type: !76, isLocal: true, isDefinition: true)
!37 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !60, nameTableKind: None)
!38 = !DIFile(filename: "./lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!39 = !{!40}
!40 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "quoting_style", file: !41, line: 32, baseType: !42, size: 32, elements: !43)
!41 = !DIFile(filename: "./lib/quotearg.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!42 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!43 = !{!44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54}
!44 = !DIEnumerator(name: "literal_quoting_style", value: 0, isUnsigned: true)
!45 = !DIEnumerator(name: "shell_quoting_style", value: 1, isUnsigned: true)
!46 = !DIEnumerator(name: "shell_always_quoting_style", value: 2, isUnsigned: true)
!47 = !DIEnumerator(name: "shell_escape_quoting_style", value: 3, isUnsigned: true)
!48 = !DIEnumerator(name: "shell_escape_always_quoting_style", value: 4, isUnsigned: true)
!49 = !DIEnumerator(name: "c_quoting_style", value: 5, isUnsigned: true)
!50 = !DIEnumerator(name: "c_maybe_quoting_style", value: 6, isUnsigned: true)
!51 = !DIEnumerator(name: "escape_quoting_style", value: 7, isUnsigned: true)
!52 = !DIEnumerator(name: "locale_quoting_style", value: 8, isUnsigned: true)
!53 = !DIEnumerator(name: "clocale_quoting_style", value: 9, isUnsigned: true)
!54 = !DIEnumerator(name: "custom_quoting_style", value: 10, isUnsigned: true)
!55 = !{!25, !56, !57}
!56 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!57 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !58, line: 46, baseType: !59)
!58 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stddef.h", directory: "")
!59 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!60 = !{!61, !68, !74, !35, !86, !91, !98, !100}
!61 = !DIGlobalVariableExpression(var: !62, expr: !DIExpression())
!62 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !37, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!63 = !DIFile(filename: "lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!64 = !DICompositeType(tag: DW_TAG_array_type, baseType: !65, size: 704, elements: !66)
!65 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6)
!66 = !{!67}
!67 = !DISubrange(count: 11)
!68 = !DIGlobalVariableExpression(var: !69, expr: !DIExpression())
!69 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !37, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!70 = !DICompositeType(tag: DW_TAG_array_type, baseType: !71, size: 320, elements: !72)
!71 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !40)
!72 = !{!73}
!73 = !DISubrange(count: 10)
!74 = !DIGlobalVariableExpression(var: !75, expr: !DIExpression())
!75 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !37, file: !63, line: 1052, type: !76, isLocal: false, isDefinition: true)
!76 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !77)
!77 = !{!78, !79, !80, !84, !85}
!78 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !76, file: !63, line: 68, baseType: !40, size: 32)
!79 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !76, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!80 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !76, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!81 = !DICompositeType(tag: DW_TAG_array_type, baseType: !42, size: 256, elements: !82)
!82 = !{!83}
!83 = !DISubrange(count: 8)
!84 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !76, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!85 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !76, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!86 = !DIGlobalVariableExpression(var: !87, expr: !DIExpression())
!87 = distinct !DIGlobalVariable(name: "slot0", scope: !37, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!88 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2048, elements: !89)
!89 = !{!90}
!90 = !DISubrange(count: 256)
!91 = !DIGlobalVariableExpression(var: !92, expr: !DIExpression())
!92 = distinct !DIGlobalVariable(name: "slotvec", scope: !37, file: !63, line: 845, type: !93, isLocal: true, isDefinition: true)
!93 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !94, size: 64)
!94 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !95)
!95 = !{!96, !97}
!96 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !94, file: !63, line: 836, baseType: !57, size: 64)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !94, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!98 = !DIGlobalVariableExpression(var: !99, expr: !DIExpression())
!99 = distinct !DIGlobalVariable(name: "nslots", scope: !37, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!100 = !DIGlobalVariableExpression(var: !101, expr: !DIExpression())
!101 = distinct !DIGlobalVariable(name: "slotvec0", scope: !37, file: !63, line: 844, type: !94, isLocal: true, isDefinition: true)
!102 = !DIGlobalVariableExpression(var: !103, expr: !DIExpression())
!103 = distinct !DIGlobalVariable(name: "version_etc_copyright", scope: !104, file: !107, line: 26, type: !108, isLocal: false, isDefinition: true)
!104 = distinct !DICompileUnit(language: DW_LANG_C99, file: !105, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !106, nameTableKind: None)
!105 = !DIFile(filename: "./lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!106 = !{!102}
!107 = !DIFile(filename: "lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!108 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 376, elements: !109)
!109 = !{!110}
!110 = !DISubrange(count: 47)
!111 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!112 = !DIFile(filename: "src/echo.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!113 = !{!32, !31, !25, !56}
!114 = distinct !DICompileUnit(language: DW_LANG_C99, file: !115, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!115 = !DIFile(filename: "./lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!116 = !{!31}
!117 = distinct !DICompileUnit(language: DW_LANG_C99, file: !118, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !119, nameTableKind: None)
!118 = !DIFile(filename: "./lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!119 = !{!57, !32, !31}
!120 = distinct !DICompileUnit(language: DW_LANG_C99, file: !121, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!121 = !DIFile(filename: "./lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!122 = distinct !DICompileUnit(language: DW_LANG_C99, file: !123, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !124, nameTableKind: None)
!123 = !DIFile(filename: "./lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!124 = !{!57}
!125 = distinct !DICompileUnit(language: DW_LANG_C99, file: !126, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !127, nameTableKind: None)
!126 = !DIFile(filename: "./lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!127 = !{!128}
!128 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !129, size: 64)
!129 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !130)
!130 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!131 = distinct !DICompileUnit(language: DW_LANG_C99, file: !132, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!132 = !DIFile(filename: "./lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!133 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!134 = !DIFile(filename: "./lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!135 = distinct !DICompileUnit(language: DW_LANG_C99, file: !136, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!136 = !DIFile(filename: "./lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!137 = distinct !DICompileUnit(language: DW_LANG_C99, file: !138, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!138 = !DIFile(filename: "./lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!139 = distinct !DICompileUnit(language: DW_LANG_C99, file: !140, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!140 = !DIFile(filename: "./lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!141 = distinct !DICompileUnit(language: DW_LANG_C99, file: !142, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!142 = !DIFile(filename: "./lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!143 = distinct !DICompileUnit(language: DW_LANG_C99, file: !144, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!144 = !DIFile(filename: "./lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!145 = distinct !DICompileUnit(language: DW_LANG_C99, file: !146, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!146 = !DIFile(filename: "./lib/c-ctype.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!147 = !{!"clang version 9.0.1-12 "}
!148 = !{i32 2, !"Dwarf Version", i32 4}
!149 = !{i32 2, !"Debug Info Version", i32 3}
!150 = !{i32 1, !"wchar_size", i32 4}
!151 = !{i32 1, !"ThinLTO", i32 0}
!152 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!153 = distinct !DISubprogram(name: "usage", scope: !112, file: !112, line: 36, type: !154, scopeLine: 37, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !111, retainedNodes: !4)
!154 = !DISubroutineType(types: !155)
!155 = !{null, !25}
!156 = !DILocalVariable(name: "status", arg: 1, scope: !153, file: !112, line: 36, type: !25)
!157 = !DILocation(line: 36, column: 12, scope: !153)
!158 = !DILocation(line: 40, column: 3, scope: !159)
!159 = distinct !DILexicalBlock(scope: !160, file: !112, line: 40, column: 3)
!160 = distinct !DILexicalBlock(scope: !153, file: !112, line: 40, column: 3)
!161 = !DILocation(line: 40, column: 3, scope: !160)
!162 = !DILocation(line: 42, column: 11, scope: !153)
!163 = !DILocation(line: 45, column: 5, scope: !153)
!164 = !DILocation(line: 45, column: 19, scope: !153)
!165 = !DILocation(line: 42, column: 3, scope: !153)
!166 = !DILocation(line: 46, column: 3, scope: !153)
!167 = !DILocation(line: 51, column: 3, scope: !153)
!168 = !DILocation(line: 59, column: 3, scope: !153)
!169 = !DILocation(line: 60, column: 3, scope: !153)
!170 = !DILocation(line: 61, column: 3, scope: !153)
!171 = !DILocation(line: 66, column: 3, scope: !153)
!172 = !DILocation(line: 78, column: 3, scope: !153)
!173 = !DILocation(line: 82, column: 11, scope: !153)
!174 = !DILocation(line: 82, column: 3, scope: !153)
!175 = !DILocation(line: 83, column: 3, scope: !153)
!176 = !DILocation(line: 84, column: 9, scope: !153)
!177 = !DILocation(line: 84, column: 3, scope: !153)
!178 = !DILocalVariable(name: "status", arg: 1, scope: !179, file: !112, line: 36, type: !25)
!179 = distinct !DISubprogram(name: "usage", scope: !112, file: !112, line: 36, type: !154, scopeLine: 37, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !180, retainedNodes: !4)
!180 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!181 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !182, file: !182, line: 634, type: !183, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !111, retainedNodes: !4)
!182 = !DIFile(filename: "src/system.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!183 = !DISubroutineType(types: !184)
!184 = !{null, !6}
!185 = !DILocalVariable(name: "program", arg: 1, scope: !181, file: !182, line: 634, type: !6)
!186 = !DILocation(line: 634, column: 34, scope: !181)
!187 = !DILocalVariable(name: "infomap", scope: !181, file: !182, line: 636, type: !188)
!188 = !DICompositeType(tag: DW_TAG_array_type, baseType: !189, size: 896, elements: !194)
!189 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !190)
!190 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !181, file: !182, line: 636, size: 128, elements: !191)
!191 = !{!192, !193}
!192 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !190, file: !182, line: 636, baseType: !6, size: 64)
!193 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !190, file: !182, line: 636, baseType: !6, size: 64, offset: 64)
!194 = !{!195}
!195 = !DISubrange(count: 7)
!196 = !DILocation(line: 636, column: 67, scope: !181)
!197 = !DILocalVariable(name: "node", scope: !181, file: !182, line: 646, type: !6)
!198 = !DILocation(line: 646, column: 15, scope: !181)
!199 = !DILocation(line: 646, column: 22, scope: !181)
!200 = !DILocalVariable(name: "map_prog", scope: !181, file: !182, line: 647, type: !201)
!201 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !189, size: 64)
!202 = !DILocation(line: 647, column: 25, scope: !181)
!203 = !DILocation(line: 647, column: 36, scope: !181)
!204 = !DILocation(line: 649, column: 3, scope: !181)
!205 = !DILocation(line: 649, column: 10, scope: !181)
!206 = !DILocation(line: 649, column: 20, scope: !181)
!207 = !DILocation(line: 649, column: 28, scope: !181)
!208 = !DILocation(line: 649, column: 33, scope: !181)
!209 = !DILocation(line: 649, column: 31, scope: !181)
!210 = !DILocation(line: 0, scope: !181)
!211 = !DILocation(line: 650, column: 13, scope: !181)
!212 = distinct !{!212, !204, !211}
!213 = !DILocation(line: 652, column: 7, scope: !214)
!214 = distinct !DILexicalBlock(scope: !181, file: !182, line: 652, column: 7)
!215 = !DILocation(line: 652, column: 17, scope: !214)
!216 = !DILocation(line: 652, column: 7, scope: !181)
!217 = !DILocation(line: 653, column: 12, scope: !214)
!218 = !DILocation(line: 653, column: 22, scope: !214)
!219 = !DILocation(line: 653, column: 10, scope: !214)
!220 = !DILocation(line: 653, column: 5, scope: !214)
!221 = !DILocation(line: 655, column: 11, scope: !181)
!222 = !DILocation(line: 655, column: 3, scope: !181)
!223 = !DILocalVariable(name: "lc_messages", scope: !181, file: !182, line: 659, type: !6)
!224 = !DILocation(line: 659, column: 15, scope: !181)
!225 = !DILocation(line: 659, column: 29, scope: !181)
!226 = !DILocation(line: 660, column: 7, scope: !227)
!227 = distinct !DILexicalBlock(scope: !181, file: !182, line: 660, column: 7)
!228 = !DILocation(line: 660, column: 19, scope: !227)
!229 = !DILocation(line: 660, column: 22, scope: !227)
!230 = !DILocation(line: 660, column: 7, scope: !181)
!231 = !DILocation(line: 666, column: 7, scope: !232)
!232 = distinct !DILexicalBlock(scope: !227, file: !182, line: 661, column: 5)
!233 = !DILocation(line: 668, column: 5, scope: !232)
!234 = !DILocation(line: 669, column: 11, scope: !181)
!235 = !DILocation(line: 670, column: 24, scope: !181)
!236 = !DILocation(line: 669, column: 3, scope: !181)
!237 = !DILocation(line: 671, column: 11, scope: !181)
!238 = !DILocation(line: 672, column: 11, scope: !181)
!239 = !DILocation(line: 672, column: 17, scope: !181)
!240 = !DILocation(line: 672, column: 25, scope: !181)
!241 = !DILocation(line: 672, column: 22, scope: !181)
!242 = !DILocation(line: 671, column: 3, scope: !181)
!243 = !DILocation(line: 673, column: 1, scope: !181)
!244 = !DILocalVariable(name: "program", arg: 1, scope: !245, file: !182, line: 634, type: !6)
!245 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !182, file: !182, line: 634, type: !183, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !246, retainedNodes: !4)
!246 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!247 = !DILocalVariable(name: "infomap", scope: !245, file: !182, line: 636, type: !248)
!248 = !DICompositeType(tag: DW_TAG_array_type, baseType: !249, size: 896, elements: !194)
!249 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !250)
!250 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !245, file: !182, line: 636, size: 128, elements: !251)
!251 = !{!252, !253}
!252 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !250, file: !182, line: 636, baseType: !6, size: 64)
!253 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !250, file: !182, line: 636, baseType: !6, size: 64, offset: 64)
!254 = !DILocalVariable(name: "node", scope: !245, file: !182, line: 646, type: !6)
!255 = !DILocalVariable(name: "map_prog", scope: !245, file: !182, line: 647, type: !256)
!256 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !249, size: 64)
!257 = distinct !DISubprogram(name: "main", scope: !112, file: !112, line: 108, type: !258, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !111, retainedNodes: !4)
!258 = !DISubroutineType(types: !259)
!259 = !{!25, !25, !260}
!260 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !32, size: 64)
!261 = !DILocalVariable(name: "argc", arg: 1, scope: !257, file: !112, line: 108, type: !25)
!262 = !DILocation(line: 108, column: 11, scope: !257)
!263 = !DILocalVariable(name: "argv", arg: 2, scope: !257, file: !112, line: 108, type: !260)
!264 = !DILocation(line: 108, column: 24, scope: !257)
!265 = !DILocalVariable(name: "display_return", scope: !257, file: !112, line: 110, type: !17)
!266 = !DILocation(line: 110, column: 8, scope: !257)
!267 = !DILocalVariable(name: "posixly_correct", scope: !257, file: !112, line: 111, type: !17)
!268 = !DILocation(line: 111, column: 8, scope: !257)
!269 = !DILocation(line: 111, column: 26, scope: !257)
!270 = !DILocalVariable(name: "allow_options", scope: !257, file: !112, line: 112, type: !17)
!271 = !DILocation(line: 112, column: 8, scope: !257)
!272 = !DILocation(line: 113, column: 8, scope: !257)
!273 = !DILocation(line: 114, column: 6, scope: !257)
!274 = !DILocation(line: 114, column: 39, scope: !257)
!275 = !DILocation(line: 114, column: 37, scope: !257)
!276 = !DILocation(line: 114, column: 44, scope: !257)
!277 = !DILocation(line: 114, column: 47, scope: !257)
!278 = !DILocation(line: 0, scope: !257)
!279 = !DILocalVariable(name: "do_v9", scope: !257, file: !112, line: 119, type: !17)
!280 = !DILocation(line: 119, column: 8, scope: !257)
!281 = !DILocation(line: 122, column: 21, scope: !257)
!282 = !DILocation(line: 122, column: 3, scope: !257)
!283 = !DILocation(line: 123, column: 3, scope: !257)
!284 = !DILocation(line: 124, column: 3, scope: !257)
!285 = !DILocation(line: 125, column: 3, scope: !257)
!286 = !DILocation(line: 127, column: 3, scope: !257)
!287 = !DILocation(line: 131, column: 7, scope: !288)
!288 = distinct !DILexicalBlock(scope: !257, file: !112, line: 131, column: 7)
!289 = !DILocation(line: 131, column: 21, scope: !288)
!290 = !DILocation(line: 131, column: 24, scope: !288)
!291 = !DILocation(line: 131, column: 29, scope: !288)
!292 = !DILocation(line: 133, column: 11, scope: !293)
!293 = distinct !DILexicalBlock(scope: !294, file: !112, line: 133, column: 11)
!294 = distinct !DILexicalBlock(scope: !288, file: !112, line: 132, column: 5)
!295 = !DILocation(line: 134, column: 9, scope: !293)
!296 = !DILocation(line: 136, column: 11, scope: !297)
!297 = distinct !DILexicalBlock(scope: !294, file: !112, line: 136, column: 11)
!298 = !DILocation(line: 138, column: 24, scope: !299)
!299 = distinct !DILexicalBlock(scope: !297, file: !112, line: 137, column: 9)
!300 = !DILocation(line: 138, column: 60, scope: !299)
!301 = !DILocation(line: 138, column: 11, scope: !299)
!302 = !DILocation(line: 140, column: 11, scope: !299)
!303 = !DILocation(line: 142, column: 5, scope: !294)
!304 = !DILocation(line: 144, column: 3, scope: !257)
!305 = !DILocation(line: 145, column: 3, scope: !257)
!306 = !DILocation(line: 147, column: 7, scope: !307)
!307 = distinct !DILexicalBlock(scope: !257, file: !112, line: 147, column: 7)
!308 = !DILocation(line: 147, column: 7, scope: !257)
!309 = !DILocation(line: 148, column: 5, scope: !307)
!310 = !DILocation(line: 148, column: 12, scope: !307)
!311 = !DILocation(line: 148, column: 17, scope: !307)
!312 = !DILocation(line: 148, column: 21, scope: !307)
!313 = !DILocation(line: 148, column: 25, scope: !307)
!314 = !DILocation(line: 148, column: 24, scope: !307)
!315 = !DILocation(line: 148, column: 33, scope: !307)
!316 = !DILocation(line: 0, scope: !307)
!317 = !DILocalVariable(name: "temp", scope: !318, file: !112, line: 150, type: !6)
!318 = distinct !DILexicalBlock(scope: !307, file: !112, line: 149, column: 7)
!319 = !DILocation(line: 150, column: 21, scope: !318)
!320 = !DILocation(line: 150, column: 28, scope: !318)
!321 = !DILocation(line: 150, column: 36, scope: !318)
!322 = !DILocalVariable(name: "i", scope: !318, file: !112, line: 151, type: !57)
!323 = !DILocation(line: 151, column: 16, scope: !318)
!324 = !DILocation(line: 157, column: 16, scope: !325)
!325 = distinct !DILexicalBlock(scope: !318, file: !112, line: 157, column: 9)
!326 = !DILocation(line: 157, column: 14, scope: !325)
!327 = !DILocation(line: 157, column: 21, scope: !328)
!328 = distinct !DILexicalBlock(scope: !325, file: !112, line: 157, column: 9)
!329 = !DILocation(line: 157, column: 26, scope: !328)
!330 = !DILocation(line: 157, column: 9, scope: !325)
!331 = !DILocation(line: 158, column: 19, scope: !328)
!332 = !DILocation(line: 158, column: 24, scope: !328)
!333 = !DILocation(line: 158, column: 11, scope: !328)
!334 = !DILocation(line: 161, column: 15, scope: !335)
!335 = distinct !DILexicalBlock(scope: !328, file: !112, line: 159, column: 13)
!336 = !DILocation(line: 163, column: 15, scope: !335)
!337 = !DILocation(line: 164, column: 13, scope: !335)
!338 = !DILocation(line: 157, column: 31, scope: !328)
!339 = !DILocation(line: 157, column: 9, scope: !328)
!340 = distinct !{!340, !330, !341}
!341 = !DILocation(line: 164, column: 13, scope: !325)
!342 = !DILocation(line: 166, column: 13, scope: !343)
!343 = distinct !DILexicalBlock(scope: !318, file: !112, line: 166, column: 13)
!344 = !DILocation(line: 166, column: 15, scope: !343)
!345 = !DILocation(line: 167, column: 11, scope: !343)
!346 = !DILocation(line: 171, column: 9, scope: !318)
!347 = !DILocation(line: 171, column: 17, scope: !318)
!348 = !DILocation(line: 171, column: 16, scope: !318)
!349 = !DILocation(line: 172, column: 24, scope: !318)
!350 = !DILocation(line: 172, column: 19, scope: !318)
!351 = !DILocation(line: 172, column: 11, scope: !318)
!352 = !DILocation(line: 175, column: 21, scope: !353)
!353 = distinct !DILexicalBlock(scope: !318, file: !112, line: 173, column: 13)
!354 = !DILocation(line: 176, column: 15, scope: !353)
!355 = !DILocation(line: 179, column: 21, scope: !353)
!356 = !DILocation(line: 180, column: 15, scope: !353)
!357 = !DILocation(line: 183, column: 30, scope: !353)
!358 = !DILocation(line: 184, column: 15, scope: !353)
!359 = distinct !{!359, !346, !360}
!360 = !DILocation(line: 185, column: 13, scope: !318)
!361 = !DILocation(line: 187, column: 13, scope: !318)
!362 = !DILocation(line: 188, column: 13, scope: !318)
!363 = distinct !{!363, !309, !364}
!364 = !DILocation(line: 189, column: 7, scope: !307)
!365 = !DILabel(scope: !257, name: "just_echo", file: !112, line: 191)
!366 = !DILocation(line: 191, column: 1, scope: !257)
!367 = !DILocation(line: 193, column: 7, scope: !368)
!368 = distinct !DILexicalBlock(scope: !257, file: !112, line: 193, column: 7)
!369 = !DILocation(line: 193, column: 13, scope: !368)
!370 = !DILocation(line: 193, column: 16, scope: !368)
!371 = !DILocation(line: 193, column: 7, scope: !257)
!372 = !DILocation(line: 195, column: 7, scope: !373)
!373 = distinct !DILexicalBlock(scope: !368, file: !112, line: 194, column: 5)
!374 = !DILocation(line: 195, column: 14, scope: !373)
!375 = !DILocation(line: 195, column: 19, scope: !373)
!376 = !DILocalVariable(name: "s", scope: !377, file: !112, line: 197, type: !6)
!377 = distinct !DILexicalBlock(scope: !373, file: !112, line: 196, column: 9)
!378 = !DILocation(line: 197, column: 23, scope: !377)
!379 = !DILocation(line: 197, column: 27, scope: !377)
!380 = !DILocalVariable(name: "c", scope: !377, file: !112, line: 198, type: !130)
!381 = !DILocation(line: 198, column: 25, scope: !377)
!382 = !DILocation(line: 200, column: 11, scope: !377)
!383 = !DILocation(line: 200, column: 25, scope: !377)
!384 = !DILocation(line: 200, column: 23, scope: !377)
!385 = !DILocation(line: 200, column: 21, scope: !377)
!386 = !DILocation(line: 202, column: 19, scope: !387)
!387 = distinct !DILexicalBlock(scope: !388, file: !112, line: 202, column: 19)
!388 = distinct !DILexicalBlock(scope: !377, file: !112, line: 201, column: 13)
!389 = !DILocation(line: 202, column: 21, scope: !387)
!390 = !DILocation(line: 202, column: 29, scope: !387)
!391 = !DILocation(line: 202, column: 33, scope: !387)
!392 = !DILocation(line: 202, column: 32, scope: !387)
!393 = !DILocation(line: 202, column: 19, scope: !388)
!394 = !DILocation(line: 204, column: 33, scope: !395)
!395 = distinct !DILexicalBlock(scope: !387, file: !112, line: 203, column: 17)
!396 = !DILocation(line: 204, column: 31, scope: !395)
!397 = !DILocation(line: 204, column: 29, scope: !395)
!398 = !DILocation(line: 204, column: 27, scope: !395)
!399 = !DILocation(line: 204, column: 19, scope: !395)
!400 = !DILocation(line: 206, column: 33, scope: !401)
!401 = distinct !DILexicalBlock(scope: !395, file: !112, line: 205, column: 21)
!402 = !DILocation(line: 206, column: 41, scope: !401)
!403 = !DILocation(line: 207, column: 33, scope: !401)
!404 = !DILocation(line: 207, column: 41, scope: !401)
!405 = !DILocation(line: 208, column: 31, scope: !401)
!406 = !DILocation(line: 209, column: 33, scope: !401)
!407 = !DILocation(line: 209, column: 43, scope: !401)
!408 = !DILocation(line: 210, column: 33, scope: !401)
!409 = !DILocation(line: 210, column: 41, scope: !401)
!410 = !DILocation(line: 211, column: 33, scope: !401)
!411 = !DILocation(line: 211, column: 41, scope: !401)
!412 = !DILocation(line: 212, column: 33, scope: !401)
!413 = !DILocation(line: 212, column: 41, scope: !401)
!414 = !DILocation(line: 213, column: 33, scope: !401)
!415 = !DILocation(line: 213, column: 41, scope: !401)
!416 = !DILocation(line: 214, column: 33, scope: !401)
!417 = !DILocation(line: 214, column: 41, scope: !401)
!418 = !DILocalVariable(name: "ch", scope: !419, file: !112, line: 217, type: !130)
!419 = distinct !DILexicalBlock(scope: !401, file: !112, line: 216, column: 23)
!420 = !DILocation(line: 217, column: 39, scope: !419)
!421 = !DILocation(line: 217, column: 45, scope: !419)
!422 = !DILocation(line: 217, column: 44, scope: !419)
!423 = !DILocation(line: 218, column: 31, scope: !424)
!424 = distinct !DILexicalBlock(scope: !419, file: !112, line: 218, column: 29)
!425 = !DILocation(line: 218, column: 29, scope: !419)
!426 = !DILocation(line: 219, column: 27, scope: !424)
!427 = !DILocation(line: 220, column: 26, scope: !419)
!428 = !DILocation(line: 221, column: 39, scope: !419)
!429 = !DILocation(line: 221, column: 29, scope: !419)
!430 = !DILocation(line: 221, column: 27, scope: !419)
!431 = !DILocation(line: 222, column: 31, scope: !419)
!432 = !DILocation(line: 222, column: 30, scope: !419)
!433 = !DILocation(line: 222, column: 28, scope: !419)
!434 = !DILocation(line: 223, column: 29, scope: !435)
!435 = distinct !DILexicalBlock(scope: !419, file: !112, line: 223, column: 29)
!436 = !DILocation(line: 223, column: 29, scope: !419)
!437 = !DILocation(line: 225, column: 30, scope: !438)
!438 = distinct !DILexicalBlock(scope: !435, file: !112, line: 224, column: 27)
!439 = !DILocation(line: 226, column: 33, scope: !438)
!440 = !DILocation(line: 226, column: 35, scope: !438)
!441 = !DILocation(line: 226, column: 52, scope: !438)
!442 = !DILocation(line: 226, column: 42, scope: !438)
!443 = !DILocation(line: 226, column: 40, scope: !438)
!444 = !DILocation(line: 226, column: 31, scope: !438)
!445 = !DILocation(line: 227, column: 27, scope: !438)
!446 = !DILocation(line: 229, column: 23, scope: !401)
!447 = !DILocation(line: 231, column: 25, scope: !401)
!448 = !DILocation(line: 232, column: 38, scope: !449)
!449 = distinct !DILexicalBlock(scope: !401, file: !112, line: 232, column: 27)
!450 = !DILocation(line: 232, column: 37, scope: !449)
!451 = !DILocation(line: 232, column: 34, scope: !449)
!452 = !DILocation(line: 232, column: 40, scope: !449)
!453 = !DILocation(line: 232, column: 44, scope: !449)
!454 = !DILocation(line: 232, column: 43, scope: !449)
!455 = !DILocation(line: 232, column: 46, scope: !449)
!456 = !DILocation(line: 232, column: 27, scope: !401)
!457 = !DILocation(line: 233, column: 25, scope: !449)
!458 = !DILocation(line: 234, column: 29, scope: !401)
!459 = !DILocation(line: 234, column: 27, scope: !401)
!460 = !DILocation(line: 234, column: 25, scope: !401)
!461 = !DILocation(line: 235, column: 23, scope: !401)
!462 = !DILocation(line: 238, column: 25, scope: !401)
!463 = !DILocation(line: 239, column: 35, scope: !464)
!464 = distinct !DILexicalBlock(scope: !401, file: !112, line: 239, column: 27)
!465 = !DILocation(line: 239, column: 34, scope: !464)
!466 = !DILocation(line: 239, column: 31, scope: !464)
!467 = !DILocation(line: 239, column: 37, scope: !464)
!468 = !DILocation(line: 239, column: 41, scope: !464)
!469 = !DILocation(line: 239, column: 40, scope: !464)
!470 = !DILocation(line: 239, column: 43, scope: !464)
!471 = !DILocation(line: 239, column: 27, scope: !401)
!472 = !DILocation(line: 240, column: 29, scope: !464)
!473 = !DILocation(line: 240, column: 31, scope: !464)
!474 = !DILocation(line: 240, column: 40, scope: !464)
!475 = !DILocation(line: 240, column: 38, scope: !464)
!476 = !DILocation(line: 240, column: 43, scope: !464)
!477 = !DILocation(line: 240, column: 35, scope: !464)
!478 = !DILocation(line: 240, column: 27, scope: !464)
!479 = !DILocation(line: 240, column: 25, scope: !464)
!480 = !DILocation(line: 241, column: 35, scope: !481)
!481 = distinct !DILexicalBlock(scope: !401, file: !112, line: 241, column: 27)
!482 = !DILocation(line: 241, column: 34, scope: !481)
!483 = !DILocation(line: 241, column: 31, scope: !481)
!484 = !DILocation(line: 241, column: 37, scope: !481)
!485 = !DILocation(line: 241, column: 41, scope: !481)
!486 = !DILocation(line: 241, column: 40, scope: !481)
!487 = !DILocation(line: 241, column: 43, scope: !481)
!488 = !DILocation(line: 241, column: 27, scope: !401)
!489 = !DILocation(line: 242, column: 29, scope: !481)
!490 = !DILocation(line: 242, column: 31, scope: !481)
!491 = !DILocation(line: 242, column: 40, scope: !481)
!492 = !DILocation(line: 242, column: 38, scope: !481)
!493 = !DILocation(line: 242, column: 43, scope: !481)
!494 = !DILocation(line: 242, column: 35, scope: !481)
!495 = !DILocation(line: 242, column: 27, scope: !481)
!496 = !DILocation(line: 242, column: 25, scope: !481)
!497 = !DILocation(line: 243, column: 23, scope: !401)
!498 = !DILocation(line: 244, column: 32, scope: !401)
!499 = !DILabel(scope: !401, name: "not_an_escape", file: !112, line: 246)
!500 = !DILocation(line: 246, column: 21, scope: !401)
!501 = !DILocation(line: 247, column: 31, scope: !401)
!502 = !DILocation(line: 247, column: 47, scope: !401)
!503 = !DILocation(line: 249, column: 17, scope: !395)
!504 = !DILocation(line: 250, column: 15, scope: !388)
!505 = distinct !{!505, !382, !506}
!506 = !DILocation(line: 251, column: 13, scope: !377)
!507 = !DILocation(line: 252, column: 15, scope: !377)
!508 = !DILocation(line: 253, column: 15, scope: !377)
!509 = !DILocation(line: 254, column: 15, scope: !510)
!510 = distinct !DILexicalBlock(scope: !377, file: !112, line: 254, column: 15)
!511 = !DILocation(line: 254, column: 20, scope: !510)
!512 = !DILocation(line: 254, column: 15, scope: !377)
!513 = !DILocation(line: 255, column: 13, scope: !510)
!514 = distinct !{!514, !372, !515}
!515 = !DILocation(line: 256, column: 9, scope: !373)
!516 = !DILocation(line: 257, column: 5, scope: !373)
!517 = !DILocation(line: 260, column: 7, scope: !518)
!518 = distinct !DILexicalBlock(scope: !368, file: !112, line: 259, column: 5)
!519 = !DILocation(line: 260, column: 14, scope: !518)
!520 = !DILocation(line: 260, column: 19, scope: !518)
!521 = !DILocation(line: 262, column: 11, scope: !522)
!522 = distinct !DILexicalBlock(scope: !518, file: !112, line: 261, column: 9)
!523 = !DILocation(line: 263, column: 15, scope: !522)
!524 = !DILocation(line: 264, column: 15, scope: !522)
!525 = !DILocation(line: 265, column: 15, scope: !526)
!526 = distinct !DILexicalBlock(scope: !522, file: !112, line: 265, column: 15)
!527 = !DILocation(line: 265, column: 20, scope: !526)
!528 = !DILocation(line: 265, column: 15, scope: !522)
!529 = !DILocation(line: 266, column: 13, scope: !526)
!530 = distinct !{!530, !517, !531}
!531 = !DILocation(line: 267, column: 9, scope: !518)
!532 = !DILocation(line: 270, column: 7, scope: !533)
!533 = distinct !DILexicalBlock(scope: !257, file: !112, line: 270, column: 7)
!534 = !DILocation(line: 270, column: 7, scope: !257)
!535 = !DILocation(line: 271, column: 5, scope: !533)
!536 = !DILocation(line: 272, column: 3, scope: !257)
!537 = !DILocation(line: 273, column: 1, scope: !257)
!538 = !DILocalVariable(name: "argc", arg: 1, scope: !539, file: !112, line: 108, type: !25)
!539 = distinct !DISubprogram(name: "main", scope: !112, file: !112, line: 108, type: !258, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !540, retainedNodes: !4)
!540 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!541 = !DILocalVariable(name: "argv", arg: 2, scope: !539, file: !112, line: 108, type: !260)
!542 = !DILocalVariable(name: "display_return", scope: !539, file: !112, line: 110, type: !17)
!543 = !DILocalVariable(name: "posixly_correct", scope: !539, file: !112, line: 111, type: !17)
!544 = !DILocalVariable(name: "allow_options", scope: !539, file: !112, line: 112, type: !17)
!545 = !DILocalVariable(name: "do_v9", scope: !546, file: !112, line: 119, type: !17)
!546 = distinct !DISubprogram(name: "main", scope: !112, file: !112, line: 108, type: !258, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !547, retainedNodes: !4)
!547 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!548 = !DILocalVariable(name: "i", scope: !549, file: !112, line: 151, type: !57)
!549 = distinct !DILexicalBlock(scope: !550, file: !112, line: 149, column: 7)
!550 = distinct !DILexicalBlock(scope: !551, file: !112, line: 147, column: 7)
!551 = distinct !DISubprogram(name: "main", scope: !112, file: !112, line: 108, type: !258, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !552, retainedNodes: !4)
!552 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!553 = !DILocalVariable(name: "c", scope: !554, file: !112, line: 198, type: !130)
!554 = distinct !DILexicalBlock(scope: !555, file: !112, line: 196, column: 9)
!555 = distinct !DILexicalBlock(scope: !556, file: !112, line: 194, column: 5)
!556 = distinct !DILexicalBlock(scope: !557, file: !112, line: 193, column: 7)
!557 = distinct !DISubprogram(name: "main", scope: !112, file: !112, line: 108, type: !258, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !558, retainedNodes: !4)
!558 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!559 = distinct !DISubprogram(name: "hextobin", scope: !112, file: !112, line: 89, type: !560, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !111, retainedNodes: !4)
!560 = !DISubroutineType(types: !561)
!561 = !{!25, !130}
!562 = !DILocalVariable(name: "c", arg: 1, scope: !559, file: !112, line: 89, type: !130)
!563 = !DILocation(line: 89, column: 25, scope: !559)
!564 = !DILocation(line: 91, column: 11, scope: !559)
!565 = !DILocation(line: 91, column: 3, scope: !559)
!566 = !DILocation(line: 93, column: 21, scope: !567)
!567 = distinct !DILexicalBlock(scope: !559, file: !112, line: 92, column: 5)
!568 = !DILocation(line: 93, column: 23, scope: !567)
!569 = !DILocation(line: 93, column: 14, scope: !567)
!570 = !DILocation(line: 94, column: 25, scope: !567)
!571 = !DILocation(line: 95, column: 25, scope: !567)
!572 = !DILocation(line: 96, column: 25, scope: !567)
!573 = !DILocation(line: 97, column: 25, scope: !567)
!574 = !DILocation(line: 98, column: 25, scope: !567)
!575 = !DILocation(line: 99, column: 25, scope: !567)
!576 = !DILocation(line: 101, column: 1, scope: !559)
!577 = !DILocalVariable(name: "c", arg: 1, scope: !578, file: !112, line: 89, type: !130)
!578 = distinct !DISubprogram(name: "hextobin", scope: !112, file: !112, line: 89, type: !560, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !579, retainedNodes: !4)
!579 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!580 = distinct !DISubprogram(name: "close_stdout", scope: !16, file: !16, line: 117, type: !581, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !11, retainedNodes: !4)
!581 = !DISubroutineType(types: !582)
!582 = !{null}
!583 = !DILocation(line: 119, column: 21, scope: !584)
!584 = distinct !DILexicalBlock(scope: !580, file: !16, line: 119, column: 7)
!585 = !DILocation(line: 119, column: 7, scope: !584)
!586 = !DILocation(line: 119, column: 29, scope: !584)
!587 = !DILocation(line: 120, column: 7, scope: !584)
!588 = !DILocation(line: 120, column: 12, scope: !584)
!589 = !DILocation(line: 120, column: 25, scope: !584)
!590 = !DILocation(line: 120, column: 28, scope: !584)
!591 = !DILocation(line: 120, column: 34, scope: !584)
!592 = !DILocation(line: 119, column: 7, scope: !580)
!593 = !DILocalVariable(name: "write_error", scope: !594, file: !16, line: 122, type: !6)
!594 = distinct !DILexicalBlock(scope: !584, file: !16, line: 121, column: 5)
!595 = !DILocation(line: 122, column: 19, scope: !594)
!596 = !DILocation(line: 122, column: 33, scope: !594)
!597 = !DILocation(line: 123, column: 11, scope: !598)
!598 = distinct !DILexicalBlock(scope: !594, file: !16, line: 123, column: 11)
!599 = !DILocation(line: 123, column: 11, scope: !594)
!600 = !DILocation(line: 124, column: 19, scope: !598)
!601 = !DILocation(line: 124, column: 52, scope: !598)
!602 = !DILocation(line: 124, column: 36, scope: !598)
!603 = !DILocation(line: 125, column: 16, scope: !598)
!604 = !DILocation(line: 124, column: 9, scope: !598)
!605 = !DILocation(line: 127, column: 19, scope: !598)
!606 = !DILocation(line: 127, column: 32, scope: !598)
!607 = !DILocation(line: 127, column: 9, scope: !598)
!608 = !DILocation(line: 129, column: 14, scope: !594)
!609 = !DILocation(line: 129, column: 7, scope: !594)
!610 = !DILocation(line: 134, column: 42, scope: !611)
!611 = distinct !DILexicalBlock(scope: !580, file: !16, line: 134, column: 7)
!612 = !DILocation(line: 134, column: 28, scope: !611)
!613 = !DILocation(line: 134, column: 50, scope: !611)
!614 = !DILocation(line: 134, column: 7, scope: !580)
!615 = !DILocation(line: 135, column: 12, scope: !611)
!616 = !DILocation(line: 135, column: 5, scope: !611)
!617 = !DILocation(line: 136, column: 1, scope: !580)
!618 = distinct !DISubprogram(name: "set_program_name", scope: !34, file: !34, line: 39, type: !183, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !28, retainedNodes: !4)
!619 = !DILocalVariable(name: "argv0", arg: 1, scope: !618, file: !34, line: 39, type: !6)
!620 = !DILocation(line: 39, column: 31, scope: !618)
!621 = !DILocalVariable(name: "slash", scope: !618, file: !34, line: 46, type: !6)
!622 = !DILocation(line: 46, column: 15, scope: !618)
!623 = !DILocalVariable(name: "base", scope: !618, file: !34, line: 47, type: !6)
!624 = !DILocation(line: 47, column: 15, scope: !618)
!625 = !DILocation(line: 51, column: 7, scope: !626)
!626 = distinct !DILexicalBlock(scope: !618, file: !34, line: 51, column: 7)
!627 = !DILocation(line: 51, column: 13, scope: !626)
!628 = !DILocation(line: 51, column: 7, scope: !618)
!629 = !DILocation(line: 55, column: 14, scope: !630)
!630 = distinct !DILexicalBlock(scope: !626, file: !34, line: 52, column: 5)
!631 = !DILocation(line: 54, column: 7, scope: !630)
!632 = !DILocation(line: 56, column: 7, scope: !630)
!633 = !DILocation(line: 59, column: 20, scope: !618)
!634 = !DILocation(line: 59, column: 11, scope: !618)
!635 = !DILocation(line: 59, column: 9, scope: !618)
!636 = !DILocation(line: 60, column: 11, scope: !618)
!637 = !DILocation(line: 60, column: 17, scope: !618)
!638 = !DILocation(line: 60, column: 27, scope: !618)
!639 = !DILocation(line: 60, column: 33, scope: !618)
!640 = !DILocation(line: 60, column: 39, scope: !618)
!641 = !DILocation(line: 60, column: 8, scope: !618)
!642 = !DILocation(line: 61, column: 7, scope: !643)
!643 = distinct !DILexicalBlock(scope: !618, file: !34, line: 61, column: 7)
!644 = !DILocation(line: 61, column: 14, scope: !643)
!645 = !DILocation(line: 61, column: 12, scope: !643)
!646 = !DILocation(line: 61, column: 20, scope: !643)
!647 = !DILocation(line: 61, column: 25, scope: !643)
!648 = !DILocation(line: 61, column: 37, scope: !643)
!649 = !DILocation(line: 61, column: 42, scope: !643)
!650 = !DILocation(line: 61, column: 28, scope: !643)
!651 = !DILocation(line: 61, column: 61, scope: !643)
!652 = !DILocation(line: 61, column: 7, scope: !618)
!653 = !DILocation(line: 63, column: 15, scope: !654)
!654 = distinct !DILexicalBlock(scope: !643, file: !34, line: 62, column: 5)
!655 = !DILocation(line: 63, column: 13, scope: !654)
!656 = !DILocation(line: 64, column: 20, scope: !657)
!657 = distinct !DILexicalBlock(scope: !654, file: !34, line: 64, column: 11)
!658 = !DILocation(line: 64, column: 11, scope: !657)
!659 = !DILocation(line: 64, column: 36, scope: !657)
!660 = !DILocation(line: 64, column: 11, scope: !654)
!661 = !DILocation(line: 66, column: 19, scope: !662)
!662 = distinct !DILexicalBlock(scope: !657, file: !34, line: 65, column: 9)
!663 = !DILocation(line: 66, column: 24, scope: !662)
!664 = !DILocation(line: 66, column: 17, scope: !662)
!665 = !DILocation(line: 70, column: 52, scope: !662)
!666 = !DILocation(line: 70, column: 41, scope: !662)
!667 = !DILocation(line: 72, column: 9, scope: !662)
!668 = !DILocation(line: 73, column: 5, scope: !654)
!669 = !DILocation(line: 84, column: 18, scope: !618)
!670 = !DILocation(line: 84, column: 16, scope: !618)
!671 = !DILocation(line: 90, column: 38, scope: !618)
!672 = !DILocation(line: 90, column: 27, scope: !618)
!673 = !DILocation(line: 92, column: 1, scope: !618)
!674 = !DILocalVariable(name: "argv0", arg: 1, scope: !675, file: !34, line: 39, type: !6)
!675 = distinct !DISubprogram(name: "set_program_name", scope: !34, file: !34, line: 39, type: !183, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !676, retainedNodes: !4)
!676 = distinct !DICompileUnit(language: DW_LANG_C99, file: !29, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !30, globals: !677, nameTableKind: None)
!677 = !{!678}
!678 = !DIGlobalVariableExpression(var: !679, expr: !DIExpression())
!679 = distinct !DIGlobalVariable(name: "program_name", scope: !676, file: !34, line: 33, type: !6, isLocal: false, isDefinition: true)
!680 = !DILocalVariable(name: "slash", scope: !675, file: !34, line: 46, type: !6)
!681 = !DILocalVariable(name: "base", scope: !675, file: !34, line: 47, type: !6)
!682 = distinct !DISubprogram(name: "set_char_quoting", scope: !63, file: !63, line: 152, type: !683, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !37, retainedNodes: !4)
!683 = !DISubroutineType(types: !684)
!684 = !{!25, !685, !8, !25}
!685 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !76, size: 64)
!686 = !DILocalVariable(name: "o", arg: 1, scope: !682, file: !63, line: 152, type: !685)
!687 = !DILocation(line: 152, column: 43, scope: !682)
!688 = !DILocalVariable(name: "c", arg: 2, scope: !682, file: !63, line: 152, type: !8)
!689 = !DILocation(line: 152, column: 51, scope: !682)
!690 = !DILocalVariable(name: "i", arg: 3, scope: !682, file: !63, line: 152, type: !25)
!691 = !DILocation(line: 152, column: 58, scope: !682)
!692 = !DILocalVariable(name: "uc", scope: !682, file: !63, line: 154, type: !130)
!693 = !DILocation(line: 154, column: 17, scope: !682)
!694 = !DILocation(line: 154, column: 22, scope: !682)
!695 = !DILocalVariable(name: "p", scope: !682, file: !63, line: 155, type: !696)
!696 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !42, size: 64)
!697 = !DILocation(line: 155, column: 17, scope: !682)
!698 = !DILocation(line: 156, column: 6, scope: !682)
!699 = !DILocation(line: 156, column: 10, scope: !682)
!700 = !DILocation(line: 156, column: 41, scope: !682)
!701 = !DILocation(line: 156, column: 5, scope: !682)
!702 = !DILocation(line: 156, column: 59, scope: !682)
!703 = !DILocation(line: 156, column: 62, scope: !682)
!704 = !DILocation(line: 156, column: 57, scope: !682)
!705 = !DILocalVariable(name: "shift", scope: !682, file: !63, line: 157, type: !25)
!706 = !DILocation(line: 157, column: 7, scope: !682)
!707 = !DILocation(line: 157, column: 15, scope: !682)
!708 = !DILocation(line: 157, column: 18, scope: !682)
!709 = !DILocalVariable(name: "r", scope: !682, file: !63, line: 158, type: !25)
!710 = !DILocation(line: 158, column: 7, scope: !682)
!711 = !DILocation(line: 158, column: 13, scope: !682)
!712 = !DILocation(line: 158, column: 12, scope: !682)
!713 = !DILocation(line: 158, column: 18, scope: !682)
!714 = !DILocation(line: 158, column: 15, scope: !682)
!715 = !DILocation(line: 158, column: 25, scope: !682)
!716 = !DILocation(line: 159, column: 11, scope: !682)
!717 = !DILocation(line: 159, column: 13, scope: !682)
!718 = !DILocation(line: 159, column: 20, scope: !682)
!719 = !DILocation(line: 159, column: 18, scope: !682)
!720 = !DILocation(line: 159, column: 26, scope: !682)
!721 = !DILocation(line: 159, column: 23, scope: !682)
!722 = !DILocation(line: 159, column: 4, scope: !682)
!723 = !DILocation(line: 159, column: 6, scope: !682)
!724 = !DILocation(line: 160, column: 10, scope: !682)
!725 = !DILocation(line: 160, column: 3, scope: !682)
!726 = !DILocalVariable(name: "o", arg: 1, scope: !727, file: !63, line: 152, type: !730)
!727 = distinct !DISubprogram(name: "set_char_quoting", scope: !63, file: !63, line: 152, type: !728, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !738, retainedNodes: !4)
!728 = !DISubroutineType(types: !729)
!729 = !{!25, !730, !8, !25}
!730 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !731, size: 64)
!731 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !732)
!732 = !{!733, !734, !735, !736, !737}
!733 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !731, file: !63, line: 68, baseType: !40, size: 32)
!734 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !731, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!735 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !731, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!736 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !731, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!737 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !731, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!738 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !739, nameTableKind: None)
!739 = !{!740, !742, !744, !746, !748, !750, !757, !759}
!740 = !DIGlobalVariableExpression(var: !741, expr: !DIExpression())
!741 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !738, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!742 = !DIGlobalVariableExpression(var: !743, expr: !DIExpression())
!743 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !738, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!744 = !DIGlobalVariableExpression(var: !745, expr: !DIExpression())
!745 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !738, file: !63, line: 1052, type: !731, isLocal: false, isDefinition: true)
!746 = !DIGlobalVariableExpression(var: !747, expr: !DIExpression())
!747 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !738, file: !63, line: 116, type: !731, isLocal: true, isDefinition: true)
!748 = !DIGlobalVariableExpression(var: !749, expr: !DIExpression())
!749 = distinct !DIGlobalVariable(name: "slot0", scope: !738, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!750 = !DIGlobalVariableExpression(var: !751, expr: !DIExpression())
!751 = distinct !DIGlobalVariable(name: "slotvec", scope: !738, file: !63, line: 845, type: !752, isLocal: true, isDefinition: true)
!752 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !753, size: 64)
!753 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !754)
!754 = !{!755, !756}
!755 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !753, file: !63, line: 836, baseType: !57, size: 64)
!756 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !753, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!757 = !DIGlobalVariableExpression(var: !758, expr: !DIExpression())
!758 = distinct !DIGlobalVariable(name: "nslots", scope: !738, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!759 = !DIGlobalVariableExpression(var: !760, expr: !DIExpression())
!760 = distinct !DIGlobalVariable(name: "slotvec0", scope: !738, file: !63, line: 844, type: !753, isLocal: true, isDefinition: true)
!761 = !DILocalVariable(name: "c", arg: 2, scope: !727, file: !63, line: 152, type: !8)
!762 = !DILocalVariable(name: "i", arg: 3, scope: !727, file: !63, line: 152, type: !25)
!763 = !DILocalVariable(name: "uc", scope: !727, file: !63, line: 154, type: !130)
!764 = !DILocalVariable(name: "p", scope: !727, file: !63, line: 155, type: !696)
!765 = !DILocalVariable(name: "shift", scope: !766, file: !63, line: 157, type: !25)
!766 = distinct !DISubprogram(name: "set_char_quoting", scope: !63, file: !63, line: 152, type: !767, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !777, retainedNodes: !4)
!767 = !DISubroutineType(types: !768)
!768 = !{!25, !769, !8, !25}
!769 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !770, size: 64)
!770 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !771)
!771 = !{!772, !773, !774, !775, !776}
!772 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !770, file: !63, line: 68, baseType: !40, size: 32)
!773 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !770, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!774 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !770, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!775 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !770, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!776 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !770, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!777 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !778, nameTableKind: None)
!778 = !{!779, !781, !783, !785, !787, !789, !796, !798}
!779 = !DIGlobalVariableExpression(var: !780, expr: !DIExpression())
!780 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !777, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!781 = !DIGlobalVariableExpression(var: !782, expr: !DIExpression())
!782 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !777, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!783 = !DIGlobalVariableExpression(var: !784, expr: !DIExpression())
!784 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !777, file: !63, line: 1052, type: !770, isLocal: false, isDefinition: true)
!785 = !DIGlobalVariableExpression(var: !786, expr: !DIExpression())
!786 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !777, file: !63, line: 116, type: !770, isLocal: true, isDefinition: true)
!787 = !DIGlobalVariableExpression(var: !788, expr: !DIExpression())
!788 = distinct !DIGlobalVariable(name: "slot0", scope: !777, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!789 = !DIGlobalVariableExpression(var: !790, expr: !DIExpression())
!790 = distinct !DIGlobalVariable(name: "slotvec", scope: !777, file: !63, line: 845, type: !791, isLocal: true, isDefinition: true)
!791 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !792, size: 64)
!792 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !793)
!793 = !{!794, !795}
!794 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !792, file: !63, line: 836, baseType: !57, size: 64)
!795 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !792, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!796 = !DIGlobalVariableExpression(var: !797, expr: !DIExpression())
!797 = distinct !DIGlobalVariable(name: "nslots", scope: !777, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!798 = !DIGlobalVariableExpression(var: !799, expr: !DIExpression())
!799 = distinct !DIGlobalVariable(name: "slotvec0", scope: !777, file: !63, line: 844, type: !792, isLocal: true, isDefinition: true)
!800 = !DILocalVariable(name: "r", scope: !766, file: !63, line: 158, type: !25)
!801 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !63, file: !63, line: 982, type: !802, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !37, retainedNodes: !4)
!802 = !DISubroutineType(types: !803)
!803 = !{!32, !6, !57, !8}
!804 = !DILocalVariable(name: "arg", arg: 1, scope: !801, file: !63, line: 982, type: !6)
!805 = !DILocation(line: 982, column: 32, scope: !801)
!806 = !DILocalVariable(name: "argsize", arg: 2, scope: !801, file: !63, line: 982, type: !57)
!807 = !DILocation(line: 982, column: 44, scope: !801)
!808 = !DILocalVariable(name: "ch", arg: 3, scope: !801, file: !63, line: 982, type: !8)
!809 = !DILocation(line: 982, column: 58, scope: !801)
!810 = !DILocalVariable(name: "options", scope: !801, file: !63, line: 984, type: !76)
!811 = !DILocation(line: 984, column: 26, scope: !801)
!812 = !DILocation(line: 985, column: 13, scope: !801)
!813 = !DILocation(line: 986, column: 31, scope: !801)
!814 = !DILocation(line: 986, column: 3, scope: !801)
!815 = !DILocation(line: 987, column: 33, scope: !801)
!816 = !DILocation(line: 987, column: 38, scope: !801)
!817 = !DILocation(line: 987, column: 10, scope: !801)
!818 = !DILocation(line: 987, column: 3, scope: !801)
!819 = !DILocalVariable(name: "arg", arg: 1, scope: !820, file: !63, line: 982, type: !6)
!820 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !63, file: !63, line: 982, type: !802, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !821, retainedNodes: !4)
!821 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !822, nameTableKind: None)
!822 = !{!823, !825, !827, !836, !838, !840, !847, !849}
!823 = !DIGlobalVariableExpression(var: !824, expr: !DIExpression())
!824 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !821, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!825 = !DIGlobalVariableExpression(var: !826, expr: !DIExpression())
!826 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !821, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!827 = !DIGlobalVariableExpression(var: !828, expr: !DIExpression())
!828 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !821, file: !63, line: 1052, type: !829, isLocal: false, isDefinition: true)
!829 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !830)
!830 = !{!831, !832, !833, !834, !835}
!831 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !829, file: !63, line: 68, baseType: !40, size: 32)
!832 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !829, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!833 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !829, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!834 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !829, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!835 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !829, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!836 = !DIGlobalVariableExpression(var: !837, expr: !DIExpression())
!837 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !821, file: !63, line: 116, type: !829, isLocal: true, isDefinition: true)
!838 = !DIGlobalVariableExpression(var: !839, expr: !DIExpression())
!839 = distinct !DIGlobalVariable(name: "slot0", scope: !821, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!840 = !DIGlobalVariableExpression(var: !841, expr: !DIExpression())
!841 = distinct !DIGlobalVariable(name: "slotvec", scope: !821, file: !63, line: 845, type: !842, isLocal: true, isDefinition: true)
!842 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !843, size: 64)
!843 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !844)
!844 = !{!845, !846}
!845 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !843, file: !63, line: 836, baseType: !57, size: 64)
!846 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !843, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!847 = !DIGlobalVariableExpression(var: !848, expr: !DIExpression())
!848 = distinct !DIGlobalVariable(name: "nslots", scope: !821, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!849 = !DIGlobalVariableExpression(var: !850, expr: !DIExpression())
!850 = distinct !DIGlobalVariable(name: "slotvec0", scope: !821, file: !63, line: 844, type: !843, isLocal: true, isDefinition: true)
!851 = !DILocalVariable(name: "argsize", arg: 2, scope: !820, file: !63, line: 982, type: !57)
!852 = !DILocalVariable(name: "ch", arg: 3, scope: !820, file: !63, line: 982, type: !8)
!853 = !DILocalVariable(name: "options", scope: !820, file: !63, line: 984, type: !829)
!854 = distinct !DISubprogram(name: "quotearg_n_options", scope: !63, file: !63, line: 877, type: !855, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !37, retainedNodes: !4)
!855 = !DISubroutineType(types: !856)
!856 = !{!32, !25, !6, !57, !857}
!857 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !858, size: 64)
!858 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !76)
!859 = !DILocalVariable(name: "n", arg: 1, scope: !854, file: !63, line: 877, type: !25)
!860 = !DILocation(line: 877, column: 25, scope: !854)
!861 = !DILocalVariable(name: "arg", arg: 2, scope: !854, file: !63, line: 877, type: !6)
!862 = !DILocation(line: 877, column: 40, scope: !854)
!863 = !DILocalVariable(name: "argsize", arg: 3, scope: !854, file: !63, line: 877, type: !57)
!864 = !DILocation(line: 877, column: 52, scope: !854)
!865 = !DILocalVariable(name: "options", arg: 4, scope: !854, file: !63, line: 878, type: !857)
!866 = !DILocation(line: 878, column: 51, scope: !854)
!867 = !DILocalVariable(name: "e", scope: !854, file: !63, line: 880, type: !25)
!868 = !DILocation(line: 880, column: 7, scope: !854)
!869 = !DILocation(line: 880, column: 11, scope: !854)
!870 = !DILocalVariable(name: "sv", scope: !854, file: !63, line: 882, type: !93)
!871 = !DILocation(line: 882, column: 19, scope: !854)
!872 = !DILocation(line: 882, column: 24, scope: !854)
!873 = !DILocation(line: 884, column: 7, scope: !874)
!874 = distinct !DILexicalBlock(scope: !854, file: !63, line: 884, column: 7)
!875 = !DILocation(line: 884, column: 9, scope: !874)
!876 = !DILocation(line: 884, column: 7, scope: !854)
!877 = !DILocation(line: 885, column: 5, scope: !874)
!878 = !DILocation(line: 887, column: 7, scope: !879)
!879 = distinct !DILexicalBlock(scope: !854, file: !63, line: 887, column: 7)
!880 = !DILocation(line: 887, column: 17, scope: !879)
!881 = !DILocation(line: 887, column: 14, scope: !879)
!882 = !DILocation(line: 887, column: 7, scope: !854)
!883 = !DILocalVariable(name: "preallocated", scope: !884, file: !63, line: 889, type: !17)
!884 = distinct !DILexicalBlock(scope: !879, file: !63, line: 888, column: 5)
!885 = !DILocation(line: 889, column: 12, scope: !884)
!886 = !DILocation(line: 889, column: 28, scope: !884)
!887 = !DILocation(line: 889, column: 31, scope: !884)
!888 = !DILocalVariable(name: "nmax", scope: !884, file: !63, line: 890, type: !25)
!889 = !DILocation(line: 890, column: 11, scope: !884)
!890 = !DILocation(line: 892, column: 11, scope: !891)
!891 = distinct !DILexicalBlock(scope: !884, file: !63, line: 892, column: 11)
!892 = !DILocation(line: 892, column: 18, scope: !891)
!893 = !DILocation(line: 892, column: 16, scope: !891)
!894 = !DILocation(line: 892, column: 11, scope: !884)
!895 = !DILocation(line: 893, column: 9, scope: !891)
!896 = !DILocation(line: 895, column: 32, scope: !884)
!897 = !DILocation(line: 895, column: 54, scope: !884)
!898 = !DILocation(line: 895, column: 59, scope: !884)
!899 = !DILocation(line: 895, column: 61, scope: !884)
!900 = !DILocation(line: 895, column: 58, scope: !884)
!901 = !DILocation(line: 895, column: 66, scope: !884)
!902 = !DILocation(line: 895, column: 22, scope: !884)
!903 = !DILocation(line: 895, column: 20, scope: !884)
!904 = !DILocation(line: 895, column: 15, scope: !884)
!905 = !DILocation(line: 896, column: 11, scope: !906)
!906 = distinct !DILexicalBlock(scope: !884, file: !63, line: 896, column: 11)
!907 = !DILocation(line: 896, column: 11, scope: !884)
!908 = !DILocation(line: 897, column: 10, scope: !906)
!909 = !DILocation(line: 897, column: 15, scope: !906)
!910 = !DILocation(line: 897, column: 9, scope: !906)
!911 = !DILocation(line: 898, column: 15, scope: !884)
!912 = !DILocation(line: 898, column: 20, scope: !884)
!913 = !DILocation(line: 898, column: 18, scope: !884)
!914 = !DILocation(line: 898, column: 7, scope: !884)
!915 = !DILocation(line: 898, column: 32, scope: !884)
!916 = !DILocation(line: 898, column: 34, scope: !884)
!917 = !DILocation(line: 898, column: 40, scope: !884)
!918 = !DILocation(line: 898, column: 38, scope: !884)
!919 = !DILocation(line: 898, column: 31, scope: !884)
!920 = !DILocation(line: 898, column: 48, scope: !884)
!921 = !DILocation(line: 899, column: 16, scope: !884)
!922 = !DILocation(line: 899, column: 18, scope: !884)
!923 = !DILocation(line: 899, column: 14, scope: !884)
!924 = !DILocation(line: 900, column: 5, scope: !884)
!925 = !DILocalVariable(name: "size", scope: !926, file: !63, line: 903, type: !57)
!926 = distinct !DILexicalBlock(scope: !854, file: !63, line: 902, column: 3)
!927 = !DILocation(line: 903, column: 12, scope: !926)
!928 = !DILocation(line: 903, column: 19, scope: !926)
!929 = !DILocation(line: 903, column: 22, scope: !926)
!930 = !DILocation(line: 903, column: 25, scope: !926)
!931 = !DILocalVariable(name: "val", scope: !926, file: !63, line: 904, type: !32)
!932 = !DILocation(line: 904, column: 11, scope: !926)
!933 = !DILocation(line: 904, column: 17, scope: !926)
!934 = !DILocation(line: 904, column: 20, scope: !926)
!935 = !DILocation(line: 904, column: 23, scope: !926)
!936 = !DILocalVariable(name: "flags", scope: !926, file: !63, line: 906, type: !25)
!937 = !DILocation(line: 906, column: 9, scope: !926)
!938 = !DILocation(line: 906, column: 17, scope: !926)
!939 = !DILocation(line: 906, column: 26, scope: !926)
!940 = !DILocation(line: 906, column: 32, scope: !926)
!941 = !DILocalVariable(name: "qsize", scope: !926, file: !63, line: 907, type: !57)
!942 = !DILocation(line: 907, column: 12, scope: !926)
!943 = !DILocation(line: 907, column: 46, scope: !926)
!944 = !DILocation(line: 907, column: 51, scope: !926)
!945 = !DILocation(line: 907, column: 57, scope: !926)
!946 = !DILocation(line: 907, column: 62, scope: !926)
!947 = !DILocation(line: 908, column: 46, scope: !926)
!948 = !DILocation(line: 908, column: 55, scope: !926)
!949 = !DILocation(line: 908, column: 62, scope: !926)
!950 = !DILocation(line: 909, column: 46, scope: !926)
!951 = !DILocation(line: 909, column: 55, scope: !926)
!952 = !DILocation(line: 910, column: 46, scope: !926)
!953 = !DILocation(line: 910, column: 55, scope: !926)
!954 = !DILocation(line: 911, column: 46, scope: !926)
!955 = !DILocation(line: 911, column: 55, scope: !926)
!956 = !DILocation(line: 907, column: 20, scope: !926)
!957 = !DILocation(line: 913, column: 9, scope: !958)
!958 = distinct !DILexicalBlock(scope: !926, file: !63, line: 913, column: 9)
!959 = !DILocation(line: 913, column: 17, scope: !958)
!960 = !DILocation(line: 913, column: 14, scope: !958)
!961 = !DILocation(line: 913, column: 9, scope: !926)
!962 = !DILocation(line: 915, column: 29, scope: !963)
!963 = distinct !DILexicalBlock(scope: !958, file: !63, line: 914, column: 7)
!964 = !DILocation(line: 915, column: 35, scope: !963)
!965 = !DILocation(line: 915, column: 27, scope: !963)
!966 = !DILocation(line: 915, column: 9, scope: !963)
!967 = !DILocation(line: 915, column: 12, scope: !963)
!968 = !DILocation(line: 915, column: 15, scope: !963)
!969 = !DILocation(line: 915, column: 20, scope: !963)
!970 = !DILocation(line: 916, column: 13, scope: !971)
!971 = distinct !DILexicalBlock(scope: !963, file: !63, line: 916, column: 13)
!972 = !DILocation(line: 916, column: 17, scope: !971)
!973 = !DILocation(line: 916, column: 13, scope: !963)
!974 = !DILocation(line: 917, column: 17, scope: !971)
!975 = !DILocation(line: 917, column: 11, scope: !971)
!976 = !DILocation(line: 918, column: 39, scope: !963)
!977 = !DILocation(line: 918, column: 27, scope: !963)
!978 = !DILocation(line: 918, column: 25, scope: !963)
!979 = !DILocation(line: 918, column: 9, scope: !963)
!980 = !DILocation(line: 918, column: 12, scope: !963)
!981 = !DILocation(line: 918, column: 15, scope: !963)
!982 = !DILocation(line: 918, column: 19, scope: !963)
!983 = !DILocation(line: 919, column: 35, scope: !963)
!984 = !DILocation(line: 919, column: 40, scope: !963)
!985 = !DILocation(line: 919, column: 46, scope: !963)
!986 = !DILocation(line: 919, column: 51, scope: !963)
!987 = !DILocation(line: 919, column: 60, scope: !963)
!988 = !DILocation(line: 919, column: 69, scope: !963)
!989 = !DILocation(line: 920, column: 35, scope: !963)
!990 = !DILocation(line: 920, column: 42, scope: !963)
!991 = !DILocation(line: 920, column: 51, scope: !963)
!992 = !DILocation(line: 921, column: 35, scope: !963)
!993 = !DILocation(line: 921, column: 44, scope: !963)
!994 = !DILocation(line: 922, column: 35, scope: !963)
!995 = !DILocation(line: 922, column: 44, scope: !963)
!996 = !DILocation(line: 919, column: 9, scope: !963)
!997 = !DILocation(line: 923, column: 7, scope: !963)
!998 = !DILocation(line: 925, column: 13, scope: !926)
!999 = !DILocation(line: 925, column: 5, scope: !926)
!1000 = !DILocation(line: 925, column: 11, scope: !926)
!1001 = !DILocation(line: 926, column: 12, scope: !926)
!1002 = !DILocation(line: 926, column: 5, scope: !926)
!1003 = !DILocalVariable(name: "n", arg: 1, scope: !1004, file: !63, line: 877, type: !25)
!1004 = distinct !DISubprogram(name: "quotearg_n_options", scope: !63, file: !63, line: 877, type: !1005, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1016, retainedNodes: !4)
!1005 = !DISubroutineType(types: !1006)
!1006 = !{!32, !25, !6, !57, !1007}
!1007 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1008, size: 64)
!1008 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1009)
!1009 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !1010)
!1010 = !{!1011, !1012, !1013, !1014, !1015}
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1009, file: !63, line: 68, baseType: !40, size: 32)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1009, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1009, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1009, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1009, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!1016 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !1017, nameTableKind: None)
!1017 = !{!1018, !1020, !1022, !1024, !1026, !1028, !1035, !1037}
!1018 = !DIGlobalVariableExpression(var: !1019, expr: !DIExpression())
!1019 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1016, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!1020 = !DIGlobalVariableExpression(var: !1021, expr: !DIExpression())
!1021 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1016, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!1022 = !DIGlobalVariableExpression(var: !1023, expr: !DIExpression())
!1023 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1016, file: !63, line: 1052, type: !1009, isLocal: false, isDefinition: true)
!1024 = !DIGlobalVariableExpression(var: !1025, expr: !DIExpression())
!1025 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1016, file: !63, line: 116, type: !1009, isLocal: true, isDefinition: true)
!1026 = !DIGlobalVariableExpression(var: !1027, expr: !DIExpression())
!1027 = distinct !DIGlobalVariable(name: "slot0", scope: !1016, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!1028 = !DIGlobalVariableExpression(var: !1029, expr: !DIExpression())
!1029 = distinct !DIGlobalVariable(name: "slotvec", scope: !1016, file: !63, line: 845, type: !1030, isLocal: true, isDefinition: true)
!1030 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1031, size: 64)
!1031 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !1032)
!1032 = !{!1033, !1034}
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1031, file: !63, line: 836, baseType: !57, size: 64)
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1031, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!1035 = !DIGlobalVariableExpression(var: !1036, expr: !DIExpression())
!1036 = distinct !DIGlobalVariable(name: "nslots", scope: !1016, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!1037 = !DIGlobalVariableExpression(var: !1038, expr: !DIExpression())
!1038 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1016, file: !63, line: 844, type: !1031, isLocal: true, isDefinition: true)
!1039 = !DILocalVariable(name: "arg", arg: 2, scope: !1004, file: !63, line: 877, type: !6)
!1040 = !DILocalVariable(name: "argsize", arg: 3, scope: !1004, file: !63, line: 877, type: !57)
!1041 = !DILocalVariable(name: "options", arg: 4, scope: !1004, file: !63, line: 878, type: !1007)
!1042 = !DILocalVariable(name: "e", scope: !1004, file: !63, line: 880, type: !25)
!1043 = !DILocalVariable(name: "sv", scope: !1004, file: !63, line: 882, type: !1030)
!1044 = !DILocalVariable(name: "nmax", scope: !1045, file: !63, line: 890, type: !25)
!1045 = distinct !DILexicalBlock(scope: !1046, file: !63, line: 888, column: 5)
!1046 = distinct !DILexicalBlock(scope: !1047, file: !63, line: 887, column: 7)
!1047 = distinct !DISubprogram(name: "quotearg_n_options", scope: !63, file: !63, line: 877, type: !1048, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1059, retainedNodes: !4)
!1048 = !DISubroutineType(types: !1049)
!1049 = !{!32, !25, !6, !57, !1050}
!1050 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1051, size: 64)
!1051 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1052)
!1052 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !1053)
!1053 = !{!1054, !1055, !1056, !1057, !1058}
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1052, file: !63, line: 68, baseType: !40, size: 32)
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1052, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1052, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1052, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1052, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!1059 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !1060, nameTableKind: None)
!1060 = !{!1061, !1063, !1065, !1067, !1069, !1071, !1078, !1080}
!1061 = !DIGlobalVariableExpression(var: !1062, expr: !DIExpression())
!1062 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1059, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!1063 = !DIGlobalVariableExpression(var: !1064, expr: !DIExpression())
!1064 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1059, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!1065 = !DIGlobalVariableExpression(var: !1066, expr: !DIExpression())
!1066 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1059, file: !63, line: 1052, type: !1052, isLocal: false, isDefinition: true)
!1067 = !DIGlobalVariableExpression(var: !1068, expr: !DIExpression())
!1068 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1059, file: !63, line: 116, type: !1052, isLocal: true, isDefinition: true)
!1069 = !DIGlobalVariableExpression(var: !1070, expr: !DIExpression())
!1070 = distinct !DIGlobalVariable(name: "slot0", scope: !1059, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!1071 = !DIGlobalVariableExpression(var: !1072, expr: !DIExpression())
!1072 = distinct !DIGlobalVariable(name: "slotvec", scope: !1059, file: !63, line: 845, type: !1073, isLocal: true, isDefinition: true)
!1073 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1074, size: 64)
!1074 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !1075)
!1075 = !{!1076, !1077}
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1074, file: !63, line: 836, baseType: !57, size: 64)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1074, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!1078 = !DIGlobalVariableExpression(var: !1079, expr: !DIExpression())
!1079 = distinct !DIGlobalVariable(name: "nslots", scope: !1059, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!1080 = !DIGlobalVariableExpression(var: !1081, expr: !DIExpression())
!1081 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1059, file: !63, line: 844, type: !1074, isLocal: true, isDefinition: true)
!1082 = !DILocalVariable(name: "val", scope: !1083, file: !63, line: 904, type: !32)
!1083 = distinct !DILexicalBlock(scope: !1084, file: !63, line: 902, column: 3)
!1084 = distinct !DISubprogram(name: "quotearg_n_options", scope: !63, file: !63, line: 877, type: !1085, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1096, retainedNodes: !4)
!1085 = !DISubroutineType(types: !1086)
!1086 = !{!32, !25, !6, !57, !1087}
!1087 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1088, size: 64)
!1088 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1089)
!1089 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !1090)
!1090 = !{!1091, !1092, !1093, !1094, !1095}
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1089, file: !63, line: 68, baseType: !40, size: 32)
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1089, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1089, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1089, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1089, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!1096 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !1097, nameTableKind: None)
!1097 = !{!1098, !1100, !1102, !1104, !1106, !1108, !1115, !1117}
!1098 = !DIGlobalVariableExpression(var: !1099, expr: !DIExpression())
!1099 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1096, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!1100 = !DIGlobalVariableExpression(var: !1101, expr: !DIExpression())
!1101 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1096, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!1102 = !DIGlobalVariableExpression(var: !1103, expr: !DIExpression())
!1103 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1096, file: !63, line: 1052, type: !1089, isLocal: false, isDefinition: true)
!1104 = !DIGlobalVariableExpression(var: !1105, expr: !DIExpression())
!1105 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1096, file: !63, line: 116, type: !1089, isLocal: true, isDefinition: true)
!1106 = !DIGlobalVariableExpression(var: !1107, expr: !DIExpression())
!1107 = distinct !DIGlobalVariable(name: "slot0", scope: !1096, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!1108 = !DIGlobalVariableExpression(var: !1109, expr: !DIExpression())
!1109 = distinct !DIGlobalVariable(name: "slotvec", scope: !1096, file: !63, line: 845, type: !1110, isLocal: true, isDefinition: true)
!1110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1111, size: 64)
!1111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !1112)
!1112 = !{!1113, !1114}
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1111, file: !63, line: 836, baseType: !57, size: 64)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1111, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!1115 = !DIGlobalVariableExpression(var: !1116, expr: !DIExpression())
!1116 = distinct !DIGlobalVariable(name: "nslots", scope: !1096, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!1117 = !DIGlobalVariableExpression(var: !1118, expr: !DIExpression())
!1118 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1096, file: !63, line: 844, type: !1111, isLocal: true, isDefinition: true)
!1119 = !DILocalVariable(name: "flags", scope: !1083, file: !63, line: 906, type: !25)
!1120 = !DILocalVariable(name: "qsize", scope: !1083, file: !63, line: 907, type: !57)
!1121 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !63, file: !63, line: 256, type: !1122, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !37, retainedNodes: !4)
!1122 = !DISubroutineType(types: !1123)
!1123 = !{!57, !32, !57, !6, !57, !40, !25, !1124, !6, !6}
!1124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1125, size: 64)
!1125 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !42)
!1126 = !DILocalVariable(name: "buffer", arg: 1, scope: !1121, file: !63, line: 256, type: !32)
!1127 = !DILocation(line: 256, column: 33, scope: !1121)
!1128 = !DILocalVariable(name: "buffersize", arg: 2, scope: !1121, file: !63, line: 256, type: !57)
!1129 = !DILocation(line: 256, column: 48, scope: !1121)
!1130 = !DILocalVariable(name: "arg", arg: 3, scope: !1121, file: !63, line: 257, type: !6)
!1131 = !DILocation(line: 257, column: 39, scope: !1121)
!1132 = !DILocalVariable(name: "argsize", arg: 4, scope: !1121, file: !63, line: 257, type: !57)
!1133 = !DILocation(line: 257, column: 51, scope: !1121)
!1134 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !1121, file: !63, line: 258, type: !40)
!1135 = !DILocation(line: 258, column: 46, scope: !1121)
!1136 = !DILocalVariable(name: "flags", arg: 6, scope: !1121, file: !63, line: 258, type: !25)
!1137 = !DILocation(line: 258, column: 65, scope: !1121)
!1138 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !1121, file: !63, line: 259, type: !1124)
!1139 = !DILocation(line: 259, column: 47, scope: !1121)
!1140 = !DILocalVariable(name: "left_quote", arg: 8, scope: !1121, file: !63, line: 260, type: !6)
!1141 = !DILocation(line: 260, column: 39, scope: !1121)
!1142 = !DILocalVariable(name: "right_quote", arg: 9, scope: !1121, file: !63, line: 261, type: !6)
!1143 = !DILocation(line: 261, column: 39, scope: !1121)
!1144 = !DILocalVariable(name: "i", scope: !1121, file: !63, line: 263, type: !57)
!1145 = !DILocation(line: 263, column: 10, scope: !1121)
!1146 = !DILocalVariable(name: "len", scope: !1121, file: !63, line: 264, type: !57)
!1147 = !DILocation(line: 264, column: 10, scope: !1121)
!1148 = !DILocalVariable(name: "orig_buffersize", scope: !1121, file: !63, line: 265, type: !57)
!1149 = !DILocation(line: 265, column: 10, scope: !1121)
!1150 = !DILocalVariable(name: "quote_string", scope: !1121, file: !63, line: 266, type: !6)
!1151 = !DILocation(line: 266, column: 15, scope: !1121)
!1152 = !DILocalVariable(name: "quote_string_len", scope: !1121, file: !63, line: 267, type: !57)
!1153 = !DILocation(line: 267, column: 10, scope: !1121)
!1154 = !DILocalVariable(name: "backslash_escapes", scope: !1121, file: !63, line: 268, type: !17)
!1155 = !DILocation(line: 268, column: 8, scope: !1121)
!1156 = !DILocalVariable(name: "unibyte_locale", scope: !1121, file: !63, line: 269, type: !17)
!1157 = !DILocation(line: 269, column: 8, scope: !1121)
!1158 = !DILocation(line: 269, column: 25, scope: !1121)
!1159 = !DILocation(line: 269, column: 36, scope: !1121)
!1160 = !DILocalVariable(name: "elide_outer_quotes", scope: !1121, file: !63, line: 270, type: !17)
!1161 = !DILocation(line: 270, column: 8, scope: !1121)
!1162 = !DILocation(line: 270, column: 30, scope: !1121)
!1163 = !DILocation(line: 270, column: 36, scope: !1121)
!1164 = !DILocation(line: 270, column: 61, scope: !1121)
!1165 = !DILocalVariable(name: "pending_shell_escape_end", scope: !1121, file: !63, line: 271, type: !17)
!1166 = !DILocation(line: 271, column: 8, scope: !1121)
!1167 = !DILocalVariable(name: "encountered_single_quote", scope: !1121, file: !63, line: 272, type: !17)
!1168 = !DILocation(line: 272, column: 8, scope: !1121)
!1169 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !1121, file: !63, line: 273, type: !17)
!1170 = !DILocation(line: 273, column: 8, scope: !1121)
!1171 = !DILocation(line: 273, column: 3, scope: !1121)
!1172 = !DILabel(scope: !1121, name: "process_input", file: !63, line: 314)
!1173 = !DILocation(line: 314, column: 2, scope: !1121)
!1174 = !DILocation(line: 316, column: 11, scope: !1121)
!1175 = !DILocation(line: 316, column: 3, scope: !1121)
!1176 = !DILocation(line: 319, column: 21, scope: !1177)
!1177 = distinct !DILexicalBlock(scope: !1121, file: !63, line: 317, column: 5)
!1178 = !DILocation(line: 320, column: 26, scope: !1177)
!1179 = !DILocation(line: 321, column: 7, scope: !1177)
!1180 = !DILocation(line: 323, column: 12, scope: !1181)
!1181 = distinct !DILexicalBlock(scope: !1177, file: !63, line: 323, column: 11)
!1182 = !DILocation(line: 323, column: 11, scope: !1177)
!1183 = !DILocation(line: 324, column: 9, scope: !1181)
!1184 = !DILocation(line: 324, column: 9, scope: !1185)
!1185 = distinct !DILexicalBlock(scope: !1186, file: !63, line: 324, column: 9)
!1186 = distinct !DILexicalBlock(scope: !1181, file: !63, line: 324, column: 9)
!1187 = !DILocation(line: 324, column: 9, scope: !1186)
!1188 = !DILocation(line: 325, column: 25, scope: !1177)
!1189 = !DILocation(line: 326, column: 20, scope: !1177)
!1190 = !DILocation(line: 327, column: 24, scope: !1177)
!1191 = !DILocation(line: 328, column: 7, scope: !1177)
!1192 = !DILocation(line: 331, column: 25, scope: !1177)
!1193 = !DILocation(line: 332, column: 26, scope: !1177)
!1194 = !DILocation(line: 333, column: 7, scope: !1177)
!1195 = !DILocation(line: 339, column: 13, scope: !1196)
!1196 = distinct !DILexicalBlock(scope: !1197, file: !63, line: 339, column: 13)
!1197 = distinct !DILexicalBlock(scope: !1177, file: !63, line: 338, column: 7)
!1198 = !DILocation(line: 339, column: 27, scope: !1196)
!1199 = !DILocation(line: 339, column: 13, scope: !1197)
!1200 = !DILocation(line: 362, column: 50, scope: !1201)
!1201 = distinct !DILexicalBlock(scope: !1196, file: !63, line: 340, column: 11)
!1202 = !DILocation(line: 362, column: 26, scope: !1201)
!1203 = !DILocation(line: 362, column: 24, scope: !1201)
!1204 = !DILocation(line: 363, column: 51, scope: !1201)
!1205 = !DILocation(line: 363, column: 27, scope: !1201)
!1206 = !DILocation(line: 363, column: 25, scope: !1201)
!1207 = !DILocation(line: 364, column: 11, scope: !1201)
!1208 = !DILocation(line: 365, column: 14, scope: !1209)
!1209 = distinct !DILexicalBlock(scope: !1197, file: !63, line: 365, column: 13)
!1210 = !DILocation(line: 365, column: 13, scope: !1197)
!1211 = !DILocation(line: 366, column: 31, scope: !1212)
!1212 = distinct !DILexicalBlock(scope: !1209, file: !63, line: 366, column: 11)
!1213 = !DILocation(line: 366, column: 29, scope: !1212)
!1214 = !DILocation(line: 366, column: 16, scope: !1212)
!1215 = !DILocation(line: 366, column: 44, scope: !1216)
!1216 = distinct !DILexicalBlock(scope: !1212, file: !63, line: 366, column: 11)
!1217 = !DILocation(line: 366, column: 43, scope: !1216)
!1218 = !DILocation(line: 366, column: 11, scope: !1212)
!1219 = !DILocation(line: 367, column: 13, scope: !1216)
!1220 = !DILocation(line: 367, column: 13, scope: !1221)
!1221 = distinct !DILexicalBlock(scope: !1222, file: !63, line: 367, column: 13)
!1222 = distinct !DILexicalBlock(scope: !1216, file: !63, line: 367, column: 13)
!1223 = !DILocation(line: 367, column: 13, scope: !1222)
!1224 = !DILocation(line: 366, column: 70, scope: !1216)
!1225 = !DILocation(line: 366, column: 11, scope: !1216)
!1226 = distinct !{!1226, !1218, !1227}
!1227 = !DILocation(line: 367, column: 13, scope: !1212)
!1228 = !DILocation(line: 368, column: 27, scope: !1197)
!1229 = !DILocation(line: 369, column: 24, scope: !1197)
!1230 = !DILocation(line: 369, column: 22, scope: !1197)
!1231 = !DILocation(line: 370, column: 36, scope: !1197)
!1232 = !DILocation(line: 370, column: 28, scope: !1197)
!1233 = !DILocation(line: 370, column: 26, scope: !1197)
!1234 = !DILocation(line: 372, column: 7, scope: !1177)
!1235 = !DILocation(line: 375, column: 25, scope: !1177)
!1236 = !DILocation(line: 376, column: 7, scope: !1177)
!1237 = !DILocation(line: 378, column: 26, scope: !1177)
!1238 = !DILocation(line: 379, column: 7, scope: !1177)
!1239 = !DILocation(line: 381, column: 12, scope: !1240)
!1240 = distinct !DILexicalBlock(scope: !1177, file: !63, line: 381, column: 11)
!1241 = !DILocation(line: 381, column: 11, scope: !1177)
!1242 = !DILocation(line: 382, column: 27, scope: !1240)
!1243 = !DILocation(line: 382, column: 9, scope: !1240)
!1244 = !DILocation(line: 383, column: 7, scope: !1177)
!1245 = !DILocation(line: 385, column: 21, scope: !1177)
!1246 = !DILocation(line: 386, column: 12, scope: !1247)
!1247 = distinct !DILexicalBlock(scope: !1177, file: !63, line: 386, column: 11)
!1248 = !DILocation(line: 386, column: 11, scope: !1177)
!1249 = !DILocation(line: 387, column: 9, scope: !1247)
!1250 = !DILocation(line: 387, column: 9, scope: !1251)
!1251 = distinct !DILexicalBlock(scope: !1252, file: !63, line: 387, column: 9)
!1252 = distinct !DILexicalBlock(scope: !1247, file: !63, line: 387, column: 9)
!1253 = !DILocation(line: 387, column: 9, scope: !1252)
!1254 = !DILocation(line: 388, column: 20, scope: !1177)
!1255 = !DILocation(line: 389, column: 24, scope: !1177)
!1256 = !DILocation(line: 390, column: 7, scope: !1177)
!1257 = !DILocation(line: 393, column: 26, scope: !1177)
!1258 = !DILocation(line: 394, column: 7, scope: !1177)
!1259 = !DILocation(line: 397, column: 7, scope: !1177)
!1260 = !DILocation(line: 400, column: 10, scope: !1261)
!1261 = distinct !DILexicalBlock(scope: !1121, file: !63, line: 400, column: 3)
!1262 = !DILocation(line: 400, column: 8, scope: !1261)
!1263 = !DILocation(line: 400, column: 19, scope: !1264)
!1264 = distinct !DILexicalBlock(scope: !1261, file: !63, line: 400, column: 3)
!1265 = !DILocation(line: 400, column: 27, scope: !1264)
!1266 = !DILocation(line: 400, column: 41, scope: !1264)
!1267 = !DILocation(line: 400, column: 45, scope: !1264)
!1268 = !DILocation(line: 400, column: 48, scope: !1264)
!1269 = !DILocation(line: 400, column: 58, scope: !1264)
!1270 = !DILocation(line: 400, column: 63, scope: !1264)
!1271 = !DILocation(line: 400, column: 60, scope: !1264)
!1272 = !DILocation(line: 400, column: 16, scope: !1264)
!1273 = !DILocation(line: 400, column: 3, scope: !1261)
!1274 = !DILocalVariable(name: "c", scope: !1275, file: !63, line: 402, type: !130)
!1275 = distinct !DILexicalBlock(scope: !1264, file: !63, line: 401, column: 5)
!1276 = !DILocation(line: 402, column: 21, scope: !1275)
!1277 = !DILocalVariable(name: "esc", scope: !1275, file: !63, line: 403, type: !130)
!1278 = !DILocation(line: 403, column: 21, scope: !1275)
!1279 = !DILocalVariable(name: "is_right_quote", scope: !1275, file: !63, line: 404, type: !17)
!1280 = !DILocation(line: 404, column: 12, scope: !1275)
!1281 = !DILocalVariable(name: "escaping", scope: !1275, file: !63, line: 405, type: !17)
!1282 = !DILocation(line: 405, column: 12, scope: !1275)
!1283 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !1275, file: !63, line: 406, type: !17)
!1284 = !DILocation(line: 406, column: 12, scope: !1275)
!1285 = !DILocation(line: 408, column: 11, scope: !1286)
!1286 = distinct !DILexicalBlock(scope: !1275, file: !63, line: 408, column: 11)
!1287 = !DILocation(line: 409, column: 11, scope: !1286)
!1288 = !DILocation(line: 409, column: 14, scope: !1286)
!1289 = !DILocation(line: 409, column: 28, scope: !1286)
!1290 = !DILocation(line: 410, column: 11, scope: !1286)
!1291 = !DILocation(line: 410, column: 14, scope: !1286)
!1292 = !DILocation(line: 411, column: 11, scope: !1286)
!1293 = !DILocation(line: 411, column: 15, scope: !1286)
!1294 = !DILocation(line: 411, column: 19, scope: !1286)
!1295 = !DILocation(line: 411, column: 17, scope: !1286)
!1296 = !DILocation(line: 412, column: 19, scope: !1286)
!1297 = !DILocation(line: 412, column: 27, scope: !1286)
!1298 = !DILocation(line: 412, column: 39, scope: !1286)
!1299 = !DILocation(line: 412, column: 46, scope: !1286)
!1300 = !DILocation(line: 412, column: 44, scope: !1286)
!1301 = !DILocation(line: 416, column: 40, scope: !1286)
!1302 = !DILocation(line: 416, column: 32, scope: !1286)
!1303 = !DILocation(line: 416, column: 30, scope: !1286)
!1304 = !DILocation(line: 416, column: 48, scope: !1286)
!1305 = !DILocation(line: 412, column: 15, scope: !1286)
!1306 = !DILocation(line: 417, column: 11, scope: !1286)
!1307 = !DILocation(line: 417, column: 22, scope: !1286)
!1308 = !DILocation(line: 417, column: 28, scope: !1286)
!1309 = !DILocation(line: 417, column: 26, scope: !1286)
!1310 = !DILocation(line: 417, column: 31, scope: !1286)
!1311 = !DILocation(line: 417, column: 45, scope: !1286)
!1312 = !DILocation(line: 417, column: 14, scope: !1286)
!1313 = !DILocation(line: 417, column: 63, scope: !1286)
!1314 = !DILocation(line: 408, column: 11, scope: !1275)
!1315 = !DILocation(line: 419, column: 15, scope: !1316)
!1316 = distinct !DILexicalBlock(scope: !1317, file: !63, line: 419, column: 15)
!1317 = distinct !DILexicalBlock(scope: !1286, file: !63, line: 418, column: 9)
!1318 = !DILocation(line: 419, column: 15, scope: !1317)
!1319 = !DILocation(line: 420, column: 13, scope: !1316)
!1320 = !DILocation(line: 421, column: 26, scope: !1317)
!1321 = !DILocation(line: 422, column: 9, scope: !1317)
!1322 = !DILocation(line: 424, column: 11, scope: !1275)
!1323 = !DILocation(line: 424, column: 15, scope: !1275)
!1324 = !DILocation(line: 424, column: 9, scope: !1275)
!1325 = !DILocation(line: 425, column: 15, scope: !1275)
!1326 = !DILocation(line: 425, column: 7, scope: !1275)
!1327 = !DILocation(line: 428, column: 15, scope: !1328)
!1328 = distinct !DILexicalBlock(scope: !1329, file: !63, line: 428, column: 15)
!1329 = distinct !DILexicalBlock(scope: !1275, file: !63, line: 426, column: 9)
!1330 = !DILocation(line: 428, column: 15, scope: !1329)
!1331 = !DILocation(line: 430, column: 15, scope: !1332)
!1332 = distinct !DILexicalBlock(scope: !1328, file: !63, line: 429, column: 13)
!1333 = !DILocation(line: 430, column: 15, scope: !1334)
!1334 = distinct !DILexicalBlock(scope: !1335, file: !63, line: 430, column: 15)
!1335 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 430, column: 15)
!1336 = !DILocation(line: 430, column: 15, scope: !1335)
!1337 = !DILocation(line: 430, column: 15, scope: !1338)
!1338 = distinct !DILexicalBlock(scope: !1335, file: !63, line: 430, column: 15)
!1339 = !DILocation(line: 430, column: 15, scope: !1340)
!1340 = distinct !DILexicalBlock(scope: !1338, file: !63, line: 430, column: 15)
!1341 = !DILocation(line: 430, column: 15, scope: !1342)
!1342 = distinct !DILexicalBlock(scope: !1343, file: !63, line: 430, column: 15)
!1343 = distinct !DILexicalBlock(scope: !1340, file: !63, line: 430, column: 15)
!1344 = !DILocation(line: 430, column: 15, scope: !1343)
!1345 = !DILocation(line: 430, column: 15, scope: !1346)
!1346 = distinct !DILexicalBlock(scope: !1347, file: !63, line: 430, column: 15)
!1347 = distinct !DILexicalBlock(scope: !1340, file: !63, line: 430, column: 15)
!1348 = !DILocation(line: 430, column: 15, scope: !1347)
!1349 = !DILocation(line: 430, column: 15, scope: !1350)
!1350 = distinct !DILexicalBlock(scope: !1351, file: !63, line: 430, column: 15)
!1351 = distinct !DILexicalBlock(scope: !1340, file: !63, line: 430, column: 15)
!1352 = !DILocation(line: 430, column: 15, scope: !1351)
!1353 = !DILocation(line: 430, column: 15, scope: !1354)
!1354 = distinct !DILexicalBlock(scope: !1355, file: !63, line: 430, column: 15)
!1355 = distinct !DILexicalBlock(scope: !1335, file: !63, line: 430, column: 15)
!1356 = !DILocation(line: 430, column: 15, scope: !1355)
!1357 = !DILocation(line: 437, column: 19, scope: !1358)
!1358 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 437, column: 19)
!1359 = !DILocation(line: 437, column: 33, scope: !1358)
!1360 = !DILocation(line: 438, column: 19, scope: !1358)
!1361 = !DILocation(line: 438, column: 22, scope: !1358)
!1362 = !DILocation(line: 438, column: 24, scope: !1358)
!1363 = !DILocation(line: 438, column: 30, scope: !1358)
!1364 = !DILocation(line: 438, column: 28, scope: !1358)
!1365 = !DILocation(line: 438, column: 38, scope: !1358)
!1366 = !DILocation(line: 438, column: 48, scope: !1358)
!1367 = !DILocation(line: 438, column: 52, scope: !1358)
!1368 = !DILocation(line: 438, column: 54, scope: !1358)
!1369 = !DILocation(line: 438, column: 45, scope: !1358)
!1370 = !DILocation(line: 438, column: 59, scope: !1358)
!1371 = !DILocation(line: 438, column: 62, scope: !1358)
!1372 = !DILocation(line: 438, column: 66, scope: !1358)
!1373 = !DILocation(line: 438, column: 68, scope: !1358)
!1374 = !DILocation(line: 438, column: 73, scope: !1358)
!1375 = !DILocation(line: 437, column: 19, scope: !1332)
!1376 = !DILocation(line: 440, column: 19, scope: !1377)
!1377 = distinct !DILexicalBlock(scope: !1358, file: !63, line: 439, column: 17)
!1378 = !DILocation(line: 440, column: 19, scope: !1379)
!1379 = distinct !DILexicalBlock(scope: !1380, file: !63, line: 440, column: 19)
!1380 = distinct !DILexicalBlock(scope: !1377, file: !63, line: 440, column: 19)
!1381 = !DILocation(line: 440, column: 19, scope: !1380)
!1382 = !DILocation(line: 441, column: 19, scope: !1377)
!1383 = !DILocation(line: 441, column: 19, scope: !1384)
!1384 = distinct !DILexicalBlock(scope: !1385, file: !63, line: 441, column: 19)
!1385 = distinct !DILexicalBlock(scope: !1377, file: !63, line: 441, column: 19)
!1386 = !DILocation(line: 441, column: 19, scope: !1385)
!1387 = !DILocation(line: 442, column: 17, scope: !1377)
!1388 = !DILocation(line: 443, column: 17, scope: !1332)
!1389 = !DILocation(line: 448, column: 13, scope: !1332)
!1390 = !DILocation(line: 449, column: 20, scope: !1391)
!1391 = distinct !DILexicalBlock(scope: !1328, file: !63, line: 449, column: 20)
!1392 = !DILocation(line: 449, column: 26, scope: !1391)
!1393 = !DILocation(line: 449, column: 20, scope: !1328)
!1394 = !DILocation(line: 450, column: 13, scope: !1391)
!1395 = !DILocation(line: 451, column: 11, scope: !1329)
!1396 = !DILocation(line: 454, column: 19, scope: !1329)
!1397 = !DILocation(line: 454, column: 11, scope: !1329)
!1398 = !DILocation(line: 457, column: 19, scope: !1399)
!1399 = distinct !DILexicalBlock(scope: !1400, file: !63, line: 457, column: 19)
!1400 = distinct !DILexicalBlock(scope: !1329, file: !63, line: 455, column: 13)
!1401 = !DILocation(line: 457, column: 19, scope: !1400)
!1402 = !DILocation(line: 458, column: 17, scope: !1399)
!1403 = !DILocation(line: 459, column: 15, scope: !1400)
!1404 = !DILocation(line: 462, column: 20, scope: !1405)
!1405 = distinct !DILexicalBlock(scope: !1400, file: !63, line: 462, column: 19)
!1406 = !DILocation(line: 462, column: 26, scope: !1405)
!1407 = !DILocation(line: 463, column: 19, scope: !1405)
!1408 = !DILocation(line: 463, column: 22, scope: !1405)
!1409 = !DILocation(line: 463, column: 24, scope: !1405)
!1410 = !DILocation(line: 463, column: 30, scope: !1405)
!1411 = !DILocation(line: 463, column: 28, scope: !1405)
!1412 = !DILocation(line: 463, column: 38, scope: !1405)
!1413 = !DILocation(line: 463, column: 41, scope: !1405)
!1414 = !DILocation(line: 463, column: 45, scope: !1405)
!1415 = !DILocation(line: 463, column: 47, scope: !1405)
!1416 = !DILocation(line: 463, column: 52, scope: !1405)
!1417 = !DILocation(line: 462, column: 19, scope: !1400)
!1418 = !DILocation(line: 464, column: 25, scope: !1405)
!1419 = !DILocation(line: 464, column: 29, scope: !1405)
!1420 = !DILocation(line: 464, column: 31, scope: !1405)
!1421 = !DILocation(line: 464, column: 17, scope: !1405)
!1422 = !DILocation(line: 471, column: 25, scope: !1423)
!1423 = distinct !DILexicalBlock(scope: !1424, file: !63, line: 471, column: 25)
!1424 = distinct !DILexicalBlock(scope: !1405, file: !63, line: 465, column: 19)
!1425 = !DILocation(line: 471, column: 25, scope: !1424)
!1426 = !DILocation(line: 472, column: 23, scope: !1423)
!1427 = !DILocation(line: 473, column: 25, scope: !1424)
!1428 = !DILocation(line: 473, column: 29, scope: !1424)
!1429 = !DILocation(line: 473, column: 31, scope: !1424)
!1430 = !DILocation(line: 473, column: 23, scope: !1424)
!1431 = !DILocation(line: 474, column: 23, scope: !1424)
!1432 = !DILocation(line: 475, column: 21, scope: !1424)
!1433 = !DILocation(line: 475, column: 21, scope: !1434)
!1434 = distinct !DILexicalBlock(scope: !1435, file: !63, line: 475, column: 21)
!1435 = distinct !DILexicalBlock(scope: !1424, file: !63, line: 475, column: 21)
!1436 = !DILocation(line: 475, column: 21, scope: !1435)
!1437 = !DILocation(line: 476, column: 21, scope: !1424)
!1438 = !DILocation(line: 476, column: 21, scope: !1439)
!1439 = distinct !DILexicalBlock(scope: !1440, file: !63, line: 476, column: 21)
!1440 = distinct !DILexicalBlock(scope: !1424, file: !63, line: 476, column: 21)
!1441 = !DILocation(line: 476, column: 21, scope: !1440)
!1442 = !DILocation(line: 477, column: 21, scope: !1424)
!1443 = !DILocation(line: 477, column: 21, scope: !1444)
!1444 = distinct !DILexicalBlock(scope: !1445, file: !63, line: 477, column: 21)
!1445 = distinct !DILexicalBlock(scope: !1424, file: !63, line: 477, column: 21)
!1446 = !DILocation(line: 477, column: 21, scope: !1445)
!1447 = !DILocation(line: 478, column: 21, scope: !1424)
!1448 = !DILocation(line: 478, column: 21, scope: !1449)
!1449 = distinct !DILexicalBlock(scope: !1450, file: !63, line: 478, column: 21)
!1450 = distinct !DILexicalBlock(scope: !1424, file: !63, line: 478, column: 21)
!1451 = !DILocation(line: 478, column: 21, scope: !1450)
!1452 = !DILocation(line: 479, column: 21, scope: !1424)
!1453 = !DILocation(line: 482, column: 21, scope: !1424)
!1454 = !DILocation(line: 483, column: 19, scope: !1424)
!1455 = !DILocation(line: 484, column: 15, scope: !1400)
!1456 = !DILocation(line: 487, column: 15, scope: !1400)
!1457 = !DILocation(line: 489, column: 11, scope: !1329)
!1458 = !DILocation(line: 491, column: 24, scope: !1329)
!1459 = !DILocation(line: 491, column: 31, scope: !1329)
!1460 = !DILocation(line: 492, column: 24, scope: !1329)
!1461 = !DILocation(line: 492, column: 31, scope: !1329)
!1462 = !DILocation(line: 493, column: 24, scope: !1329)
!1463 = !DILocation(line: 493, column: 31, scope: !1329)
!1464 = !DILocation(line: 494, column: 24, scope: !1329)
!1465 = !DILocation(line: 494, column: 31, scope: !1329)
!1466 = !DILocation(line: 495, column: 24, scope: !1329)
!1467 = !DILocation(line: 495, column: 31, scope: !1329)
!1468 = !DILocation(line: 496, column: 24, scope: !1329)
!1469 = !DILocation(line: 496, column: 31, scope: !1329)
!1470 = !DILocation(line: 497, column: 24, scope: !1329)
!1471 = !DILocation(line: 497, column: 31, scope: !1329)
!1472 = !DILocation(line: 498, column: 26, scope: !1329)
!1473 = !DILocation(line: 498, column: 24, scope: !1329)
!1474 = !DILocation(line: 500, column: 15, scope: !1475)
!1475 = distinct !DILexicalBlock(scope: !1329, file: !63, line: 500, column: 15)
!1476 = !DILocation(line: 500, column: 29, scope: !1475)
!1477 = !DILocation(line: 500, column: 15, scope: !1329)
!1478 = !DILocation(line: 502, column: 19, scope: !1479)
!1479 = distinct !DILexicalBlock(scope: !1480, file: !63, line: 502, column: 19)
!1480 = distinct !DILexicalBlock(scope: !1475, file: !63, line: 501, column: 13)
!1481 = !DILocation(line: 502, column: 19, scope: !1480)
!1482 = !DILocation(line: 503, column: 17, scope: !1479)
!1483 = !DILocation(line: 504, column: 15, scope: !1480)
!1484 = !DILocation(line: 509, column: 15, scope: !1485)
!1485 = distinct !DILexicalBlock(scope: !1329, file: !63, line: 509, column: 15)
!1486 = !DILocation(line: 509, column: 33, scope: !1485)
!1487 = !DILocation(line: 509, column: 36, scope: !1485)
!1488 = !DILocation(line: 509, column: 55, scope: !1485)
!1489 = !DILocation(line: 509, column: 58, scope: !1485)
!1490 = !DILocation(line: 509, column: 15, scope: !1329)
!1491 = !DILocation(line: 510, column: 13, scope: !1485)
!1492 = !DILabel(scope: !1329, name: "c_and_shell_escape", file: !63, line: 512)
!1493 = !DILocation(line: 512, column: 9, scope: !1329)
!1494 = !DILocation(line: 513, column: 15, scope: !1495)
!1495 = distinct !DILexicalBlock(scope: !1329, file: !63, line: 513, column: 15)
!1496 = !DILocation(line: 513, column: 29, scope: !1495)
!1497 = !DILocation(line: 514, column: 15, scope: !1495)
!1498 = !DILocation(line: 514, column: 18, scope: !1495)
!1499 = !DILocation(line: 513, column: 15, scope: !1329)
!1500 = !DILocation(line: 515, column: 13, scope: !1495)
!1501 = !DILabel(scope: !1329, name: "c_escape", file: !63, line: 517)
!1502 = !DILocation(line: 517, column: 9, scope: !1329)
!1503 = !DILocation(line: 518, column: 15, scope: !1504)
!1504 = distinct !DILexicalBlock(scope: !1329, file: !63, line: 518, column: 15)
!1505 = !DILocation(line: 518, column: 15, scope: !1329)
!1506 = !DILocation(line: 520, column: 19, scope: !1507)
!1507 = distinct !DILexicalBlock(scope: !1504, file: !63, line: 519, column: 13)
!1508 = !DILocation(line: 520, column: 17, scope: !1507)
!1509 = !DILocation(line: 521, column: 15, scope: !1507)
!1510 = !DILocation(line: 523, column: 11, scope: !1329)
!1511 = !DILocation(line: 526, column: 18, scope: !1512)
!1512 = distinct !DILexicalBlock(scope: !1329, file: !63, line: 526, column: 15)
!1513 = !DILocation(line: 526, column: 26, scope: !1512)
!1514 = !DILocation(line: 526, column: 15, scope: !1329)
!1515 = !DILocation(line: 526, column: 40, scope: !1512)
!1516 = !DILocation(line: 526, column: 47, scope: !1512)
!1517 = !DILocation(line: 526, column: 57, scope: !1512)
!1518 = !DILocation(line: 526, column: 65, scope: !1512)
!1519 = !DILocation(line: 527, column: 13, scope: !1512)
!1520 = !DILocation(line: 528, column: 11, scope: !1329)
!1521 = !DILocation(line: 530, column: 15, scope: !1522)
!1522 = distinct !DILexicalBlock(scope: !1329, file: !63, line: 530, column: 15)
!1523 = !DILocation(line: 530, column: 17, scope: !1522)
!1524 = !DILocation(line: 530, column: 15, scope: !1329)
!1525 = !DILocation(line: 531, column: 13, scope: !1522)
!1526 = !DILocation(line: 532, column: 11, scope: !1329)
!1527 = !DILocation(line: 534, column: 36, scope: !1329)
!1528 = !DILocation(line: 535, column: 11, scope: !1329)
!1529 = !DILocation(line: 548, column: 15, scope: !1530)
!1530 = distinct !DILexicalBlock(scope: !1329, file: !63, line: 548, column: 15)
!1531 = !DILocation(line: 548, column: 29, scope: !1530)
!1532 = !DILocation(line: 549, column: 15, scope: !1530)
!1533 = !DILocation(line: 549, column: 18, scope: !1530)
!1534 = !DILocation(line: 548, column: 15, scope: !1329)
!1535 = !DILocation(line: 550, column: 13, scope: !1530)
!1536 = !DILocation(line: 551, column: 11, scope: !1329)
!1537 = !DILocation(line: 554, column: 36, scope: !1329)
!1538 = !DILocation(line: 555, column: 36, scope: !1329)
!1539 = !DILocation(line: 556, column: 15, scope: !1540)
!1540 = distinct !DILexicalBlock(scope: !1329, file: !63, line: 556, column: 15)
!1541 = !DILocation(line: 556, column: 29, scope: !1540)
!1542 = !DILocation(line: 556, column: 15, scope: !1329)
!1543 = !DILocation(line: 558, column: 19, scope: !1544)
!1544 = distinct !DILexicalBlock(scope: !1545, file: !63, line: 558, column: 19)
!1545 = distinct !DILexicalBlock(scope: !1540, file: !63, line: 557, column: 13)
!1546 = !DILocation(line: 558, column: 19, scope: !1545)
!1547 = !DILocation(line: 559, column: 17, scope: !1544)
!1548 = !DILocation(line: 561, column: 19, scope: !1549)
!1549 = distinct !DILexicalBlock(scope: !1545, file: !63, line: 561, column: 19)
!1550 = !DILocation(line: 561, column: 30, scope: !1549)
!1551 = !DILocation(line: 561, column: 35, scope: !1549)
!1552 = !DILocation(line: 561, column: 19, scope: !1545)
!1553 = !DILocation(line: 566, column: 37, scope: !1554)
!1554 = distinct !DILexicalBlock(scope: !1549, file: !63, line: 562, column: 17)
!1555 = !DILocation(line: 566, column: 35, scope: !1554)
!1556 = !DILocation(line: 567, column: 30, scope: !1554)
!1557 = !DILocation(line: 568, column: 17, scope: !1554)
!1558 = !DILocation(line: 570, column: 15, scope: !1545)
!1559 = !DILocation(line: 570, column: 15, scope: !1560)
!1560 = distinct !DILexicalBlock(scope: !1561, file: !63, line: 570, column: 15)
!1561 = distinct !DILexicalBlock(scope: !1545, file: !63, line: 570, column: 15)
!1562 = !DILocation(line: 570, column: 15, scope: !1561)
!1563 = !DILocation(line: 571, column: 15, scope: !1545)
!1564 = !DILocation(line: 571, column: 15, scope: !1565)
!1565 = distinct !DILexicalBlock(scope: !1566, file: !63, line: 571, column: 15)
!1566 = distinct !DILexicalBlock(scope: !1545, file: !63, line: 571, column: 15)
!1567 = !DILocation(line: 571, column: 15, scope: !1566)
!1568 = !DILocation(line: 572, column: 15, scope: !1545)
!1569 = !DILocation(line: 572, column: 15, scope: !1570)
!1570 = distinct !DILexicalBlock(scope: !1571, file: !63, line: 572, column: 15)
!1571 = distinct !DILexicalBlock(scope: !1545, file: !63, line: 572, column: 15)
!1572 = !DILocation(line: 572, column: 15, scope: !1571)
!1573 = !DILocation(line: 573, column: 40, scope: !1545)
!1574 = !DILocation(line: 574, column: 13, scope: !1545)
!1575 = !DILocation(line: 575, column: 11, scope: !1329)
!1576 = !DILocation(line: 599, column: 36, scope: !1329)
!1577 = !DILocation(line: 600, column: 11, scope: !1329)
!1578 = !DILocalVariable(name: "m", scope: !1579, file: !63, line: 610, type: !57)
!1579 = distinct !DILexicalBlock(scope: !1329, file: !63, line: 608, column: 11)
!1580 = !DILocation(line: 610, column: 20, scope: !1579)
!1581 = !DILocalVariable(name: "printable", scope: !1579, file: !63, line: 612, type: !17)
!1582 = !DILocation(line: 612, column: 18, scope: !1579)
!1583 = !DILocation(line: 614, column: 17, scope: !1584)
!1584 = distinct !DILexicalBlock(scope: !1579, file: !63, line: 614, column: 17)
!1585 = !DILocation(line: 614, column: 17, scope: !1579)
!1586 = !DILocation(line: 616, column: 19, scope: !1587)
!1587 = distinct !DILexicalBlock(scope: !1584, file: !63, line: 615, column: 15)
!1588 = !DILocation(line: 617, column: 29, scope: !1587)
!1589 = !DILocation(line: 617, column: 41, scope: !1587)
!1590 = !DILocation(line: 617, column: 27, scope: !1587)
!1591 = !DILocation(line: 618, column: 15, scope: !1587)
!1592 = !DILocalVariable(name: "mbstate", scope: !1593, file: !63, line: 621, type: !1594)
!1593 = distinct !DILexicalBlock(scope: !1584, file: !63, line: 620, column: 15)
!1594 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1595, line: 6, baseType: !1596)
!1595 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "")
!1596 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1597, line: 21, baseType: !1598)
!1597 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "")
!1598 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1597, line: 13, size: 64, elements: !1599)
!1599 = !{!1600, !1601}
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !1598, file: !1597, line: 15, baseType: !25, size: 32)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !1598, file: !1597, line: 20, baseType: !1602, size: 32, offset: 32)
!1602 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1598, file: !1597, line: 16, size: 32, elements: !1603)
!1603 = !{!1604, !1605}
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !1602, file: !1597, line: 18, baseType: !42, size: 32)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !1602, file: !1597, line: 19, baseType: !1606, size: 32)
!1606 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 32, elements: !1607)
!1607 = !{!1608}
!1608 = !DISubrange(count: 4)
!1609 = !DILocation(line: 621, column: 27, scope: !1593)
!1610 = !DILocation(line: 622, column: 17, scope: !1593)
!1611 = !DILocation(line: 624, column: 19, scope: !1593)
!1612 = !DILocation(line: 625, column: 27, scope: !1593)
!1613 = !DILocation(line: 626, column: 21, scope: !1614)
!1614 = distinct !DILexicalBlock(scope: !1593, file: !63, line: 626, column: 21)
!1615 = !DILocation(line: 626, column: 29, scope: !1614)
!1616 = !DILocation(line: 626, column: 21, scope: !1593)
!1617 = !DILocation(line: 627, column: 37, scope: !1614)
!1618 = !DILocation(line: 627, column: 29, scope: !1614)
!1619 = !DILocation(line: 627, column: 27, scope: !1614)
!1620 = !DILocation(line: 627, column: 19, scope: !1614)
!1621 = !DILocation(line: 629, column: 17, scope: !1593)
!1622 = !DILocalVariable(name: "w", scope: !1623, file: !63, line: 631, type: !1624)
!1623 = distinct !DILexicalBlock(scope: !1593, file: !63, line: 630, column: 19)
!1624 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !58, line: 74, baseType: !25)
!1625 = !DILocation(line: 631, column: 29, scope: !1623)
!1626 = !DILocalVariable(name: "bytes", scope: !1623, file: !63, line: 632, type: !57)
!1627 = !DILocation(line: 632, column: 28, scope: !1623)
!1628 = !DILocation(line: 632, column: 50, scope: !1623)
!1629 = !DILocation(line: 632, column: 54, scope: !1623)
!1630 = !DILocation(line: 632, column: 58, scope: !1623)
!1631 = !DILocation(line: 632, column: 56, scope: !1623)
!1632 = !DILocation(line: 633, column: 45, scope: !1623)
!1633 = !DILocation(line: 633, column: 56, scope: !1623)
!1634 = !DILocation(line: 633, column: 60, scope: !1623)
!1635 = !DILocation(line: 633, column: 58, scope: !1623)
!1636 = !DILocation(line: 633, column: 53, scope: !1623)
!1637 = !DILocation(line: 632, column: 36, scope: !1623)
!1638 = !DILocation(line: 634, column: 25, scope: !1639)
!1639 = distinct !DILexicalBlock(scope: !1623, file: !63, line: 634, column: 25)
!1640 = !DILocation(line: 634, column: 31, scope: !1639)
!1641 = !DILocation(line: 634, column: 25, scope: !1623)
!1642 = !DILocation(line: 635, column: 23, scope: !1639)
!1643 = !DILocation(line: 636, column: 30, scope: !1644)
!1644 = distinct !DILexicalBlock(scope: !1639, file: !63, line: 636, column: 30)
!1645 = !DILocation(line: 636, column: 36, scope: !1644)
!1646 = !DILocation(line: 636, column: 30, scope: !1639)
!1647 = !DILocation(line: 638, column: 35, scope: !1648)
!1648 = distinct !DILexicalBlock(scope: !1644, file: !63, line: 637, column: 23)
!1649 = !DILocation(line: 639, column: 25, scope: !1648)
!1650 = !DILocation(line: 641, column: 30, scope: !1651)
!1651 = distinct !DILexicalBlock(scope: !1644, file: !63, line: 641, column: 30)
!1652 = !DILocation(line: 641, column: 36, scope: !1651)
!1653 = !DILocation(line: 641, column: 30, scope: !1644)
!1654 = !DILocation(line: 643, column: 35, scope: !1655)
!1655 = distinct !DILexicalBlock(scope: !1651, file: !63, line: 642, column: 23)
!1656 = !DILocation(line: 644, column: 25, scope: !1655)
!1657 = !DILocation(line: 644, column: 32, scope: !1655)
!1658 = !DILocation(line: 644, column: 36, scope: !1655)
!1659 = !DILocation(line: 644, column: 34, scope: !1655)
!1660 = !DILocation(line: 644, column: 40, scope: !1655)
!1661 = !DILocation(line: 644, column: 38, scope: !1655)
!1662 = !DILocation(line: 644, column: 48, scope: !1655)
!1663 = !DILocation(line: 644, column: 51, scope: !1655)
!1664 = !DILocation(line: 644, column: 55, scope: !1655)
!1665 = !DILocation(line: 644, column: 59, scope: !1655)
!1666 = !DILocation(line: 644, column: 57, scope: !1655)
!1667 = !DILocation(line: 0, scope: !1655)
!1668 = !DILocation(line: 645, column: 28, scope: !1655)
!1669 = distinct !{!1669, !1656, !1668}
!1670 = !DILocation(line: 646, column: 25, scope: !1655)
!1671 = !DILocation(line: 654, column: 44, scope: !1672)
!1672 = distinct !DILexicalBlock(scope: !1673, file: !63, line: 654, column: 29)
!1673 = distinct !DILexicalBlock(scope: !1651, file: !63, line: 649, column: 23)
!1674 = !DILocation(line: 655, column: 29, scope: !1672)
!1675 = !DILocation(line: 655, column: 32, scope: !1672)
!1676 = !DILocation(line: 655, column: 46, scope: !1672)
!1677 = !DILocation(line: 654, column: 29, scope: !1673)
!1678 = !DILocalVariable(name: "j", scope: !1679, file: !63, line: 657, type: !57)
!1679 = distinct !DILexicalBlock(scope: !1672, file: !63, line: 656, column: 27)
!1680 = !DILocation(line: 657, column: 36, scope: !1679)
!1681 = !DILocation(line: 658, column: 36, scope: !1682)
!1682 = distinct !DILexicalBlock(scope: !1679, file: !63, line: 658, column: 29)
!1683 = !DILocation(line: 658, column: 34, scope: !1682)
!1684 = !DILocation(line: 658, column: 41, scope: !1685)
!1685 = distinct !DILexicalBlock(scope: !1682, file: !63, line: 658, column: 29)
!1686 = !DILocation(line: 658, column: 45, scope: !1685)
!1687 = !DILocation(line: 658, column: 43, scope: !1685)
!1688 = !DILocation(line: 658, column: 29, scope: !1682)
!1689 = !DILocation(line: 659, column: 39, scope: !1685)
!1690 = !DILocation(line: 659, column: 43, scope: !1685)
!1691 = !DILocation(line: 659, column: 47, scope: !1685)
!1692 = !DILocation(line: 659, column: 45, scope: !1685)
!1693 = !DILocation(line: 659, column: 51, scope: !1685)
!1694 = !DILocation(line: 659, column: 49, scope: !1685)
!1695 = !DILocation(line: 659, column: 31, scope: !1685)
!1696 = !DILocation(line: 663, column: 35, scope: !1697)
!1697 = distinct !DILexicalBlock(scope: !1685, file: !63, line: 660, column: 33)
!1698 = !DILocation(line: 666, column: 35, scope: !1697)
!1699 = !DILocation(line: 667, column: 33, scope: !1697)
!1700 = !DILocation(line: 658, column: 53, scope: !1685)
!1701 = !DILocation(line: 658, column: 29, scope: !1685)
!1702 = distinct !{!1702, !1688, !1703}
!1703 = !DILocation(line: 667, column: 33, scope: !1682)
!1704 = !DILocation(line: 668, column: 27, scope: !1679)
!1705 = !DILocation(line: 670, column: 41, scope: !1706)
!1706 = distinct !DILexicalBlock(scope: !1673, file: !63, line: 670, column: 29)
!1707 = !DILocation(line: 670, column: 31, scope: !1706)
!1708 = !DILocation(line: 670, column: 29, scope: !1673)
!1709 = !DILocation(line: 671, column: 37, scope: !1706)
!1710 = !DILocation(line: 671, column: 27, scope: !1706)
!1711 = !DILocation(line: 672, column: 30, scope: !1673)
!1712 = !DILocation(line: 672, column: 27, scope: !1673)
!1713 = !DILocation(line: 674, column: 19, scope: !1623)
!1714 = !DILocation(line: 675, column: 26, scope: !1593)
!1715 = !DILocation(line: 675, column: 24, scope: !1593)
!1716 = distinct !{!1716, !1621, !1717}
!1717 = !DILocation(line: 675, column: 44, scope: !1593)
!1718 = !DILocation(line: 678, column: 40, scope: !1579)
!1719 = !DILocation(line: 678, column: 38, scope: !1579)
!1720 = !DILocation(line: 680, column: 21, scope: !1721)
!1721 = distinct !DILexicalBlock(scope: !1579, file: !63, line: 680, column: 17)
!1722 = !DILocation(line: 680, column: 19, scope: !1721)
!1723 = !DILocation(line: 680, column: 23, scope: !1721)
!1724 = !DILocation(line: 680, column: 27, scope: !1721)
!1725 = !DILocation(line: 680, column: 45, scope: !1721)
!1726 = !DILocation(line: 680, column: 50, scope: !1721)
!1727 = !DILocation(line: 680, column: 17, scope: !1579)
!1728 = !DILocalVariable(name: "ilim", scope: !1729, file: !63, line: 684, type: !57)
!1729 = distinct !DILexicalBlock(scope: !1721, file: !63, line: 681, column: 15)
!1730 = !DILocation(line: 684, column: 24, scope: !1729)
!1731 = !DILocation(line: 684, column: 31, scope: !1729)
!1732 = !DILocation(line: 684, column: 35, scope: !1729)
!1733 = !DILocation(line: 684, column: 33, scope: !1729)
!1734 = !DILocation(line: 686, column: 17, scope: !1729)
!1735 = !DILocation(line: 688, column: 25, scope: !1736)
!1736 = distinct !DILexicalBlock(scope: !1737, file: !63, line: 688, column: 25)
!1737 = distinct !DILexicalBlock(scope: !1738, file: !63, line: 687, column: 19)
!1738 = distinct !DILexicalBlock(scope: !1739, file: !63, line: 686, column: 17)
!1739 = distinct !DILexicalBlock(scope: !1729, file: !63, line: 686, column: 17)
!1740 = !DILocation(line: 688, column: 43, scope: !1736)
!1741 = !DILocation(line: 688, column: 48, scope: !1736)
!1742 = !DILocation(line: 688, column: 25, scope: !1737)
!1743 = !DILocation(line: 690, column: 25, scope: !1744)
!1744 = distinct !DILexicalBlock(scope: !1736, file: !63, line: 689, column: 23)
!1745 = !DILocation(line: 690, column: 25, scope: !1746)
!1746 = distinct !DILexicalBlock(scope: !1747, file: !63, line: 690, column: 25)
!1747 = distinct !DILexicalBlock(scope: !1744, file: !63, line: 690, column: 25)
!1748 = !DILocation(line: 690, column: 25, scope: !1747)
!1749 = !DILocation(line: 690, column: 25, scope: !1750)
!1750 = distinct !DILexicalBlock(scope: !1747, file: !63, line: 690, column: 25)
!1751 = !DILocation(line: 690, column: 25, scope: !1752)
!1752 = distinct !DILexicalBlock(scope: !1750, file: !63, line: 690, column: 25)
!1753 = !DILocation(line: 690, column: 25, scope: !1754)
!1754 = distinct !DILexicalBlock(scope: !1755, file: !63, line: 690, column: 25)
!1755 = distinct !DILexicalBlock(scope: !1752, file: !63, line: 690, column: 25)
!1756 = !DILocation(line: 690, column: 25, scope: !1755)
!1757 = !DILocation(line: 690, column: 25, scope: !1758)
!1758 = distinct !DILexicalBlock(scope: !1759, file: !63, line: 690, column: 25)
!1759 = distinct !DILexicalBlock(scope: !1752, file: !63, line: 690, column: 25)
!1760 = !DILocation(line: 690, column: 25, scope: !1759)
!1761 = !DILocation(line: 690, column: 25, scope: !1762)
!1762 = distinct !DILexicalBlock(scope: !1763, file: !63, line: 690, column: 25)
!1763 = distinct !DILexicalBlock(scope: !1752, file: !63, line: 690, column: 25)
!1764 = !DILocation(line: 690, column: 25, scope: !1763)
!1765 = !DILocation(line: 690, column: 25, scope: !1766)
!1766 = distinct !DILexicalBlock(scope: !1767, file: !63, line: 690, column: 25)
!1767 = distinct !DILexicalBlock(scope: !1747, file: !63, line: 690, column: 25)
!1768 = !DILocation(line: 690, column: 25, scope: !1767)
!1769 = !DILocation(line: 691, column: 25, scope: !1744)
!1770 = !DILocation(line: 691, column: 25, scope: !1771)
!1771 = distinct !DILexicalBlock(scope: !1772, file: !63, line: 691, column: 25)
!1772 = distinct !DILexicalBlock(scope: !1744, file: !63, line: 691, column: 25)
!1773 = !DILocation(line: 691, column: 25, scope: !1772)
!1774 = !DILocation(line: 692, column: 25, scope: !1744)
!1775 = !DILocation(line: 692, column: 25, scope: !1776)
!1776 = distinct !DILexicalBlock(scope: !1777, file: !63, line: 692, column: 25)
!1777 = distinct !DILexicalBlock(scope: !1744, file: !63, line: 692, column: 25)
!1778 = !DILocation(line: 692, column: 25, scope: !1777)
!1779 = !DILocation(line: 693, column: 36, scope: !1744)
!1780 = !DILocation(line: 693, column: 38, scope: !1744)
!1781 = !DILocation(line: 693, column: 33, scope: !1744)
!1782 = !DILocation(line: 693, column: 29, scope: !1744)
!1783 = !DILocation(line: 693, column: 27, scope: !1744)
!1784 = !DILocation(line: 694, column: 23, scope: !1744)
!1785 = !DILocation(line: 695, column: 30, scope: !1786)
!1786 = distinct !DILexicalBlock(scope: !1736, file: !63, line: 695, column: 30)
!1787 = !DILocation(line: 695, column: 30, scope: !1736)
!1788 = !DILocation(line: 697, column: 25, scope: !1789)
!1789 = distinct !DILexicalBlock(scope: !1786, file: !63, line: 696, column: 23)
!1790 = !DILocation(line: 697, column: 25, scope: !1791)
!1791 = distinct !DILexicalBlock(scope: !1792, file: !63, line: 697, column: 25)
!1792 = distinct !DILexicalBlock(scope: !1789, file: !63, line: 697, column: 25)
!1793 = !DILocation(line: 697, column: 25, scope: !1792)
!1794 = !DILocation(line: 698, column: 40, scope: !1789)
!1795 = !DILocation(line: 699, column: 23, scope: !1789)
!1796 = !DILocation(line: 700, column: 25, scope: !1797)
!1797 = distinct !DILexicalBlock(scope: !1737, file: !63, line: 700, column: 25)
!1798 = !DILocation(line: 700, column: 33, scope: !1797)
!1799 = !DILocation(line: 700, column: 35, scope: !1797)
!1800 = !DILocation(line: 700, column: 30, scope: !1797)
!1801 = !DILocation(line: 700, column: 25, scope: !1737)
!1802 = !DILocation(line: 701, column: 23, scope: !1797)
!1803 = !DILocation(line: 702, column: 21, scope: !1737)
!1804 = !DILocation(line: 702, column: 21, scope: !1805)
!1805 = distinct !DILexicalBlock(scope: !1806, file: !63, line: 702, column: 21)
!1806 = distinct !DILexicalBlock(scope: !1737, file: !63, line: 702, column: 21)
!1807 = !DILocation(line: 702, column: 21, scope: !1806)
!1808 = !DILocation(line: 702, column: 21, scope: !1809)
!1809 = distinct !DILexicalBlock(scope: !1805, file: !63, line: 702, column: 21)
!1810 = !DILocation(line: 702, column: 21, scope: !1811)
!1811 = distinct !DILexicalBlock(scope: !1812, file: !63, line: 702, column: 21)
!1812 = distinct !DILexicalBlock(scope: !1809, file: !63, line: 702, column: 21)
!1813 = !DILocation(line: 702, column: 21, scope: !1812)
!1814 = !DILocation(line: 702, column: 21, scope: !1815)
!1815 = distinct !DILexicalBlock(scope: !1816, file: !63, line: 702, column: 21)
!1816 = distinct !DILexicalBlock(scope: !1809, file: !63, line: 702, column: 21)
!1817 = !DILocation(line: 702, column: 21, scope: !1816)
!1818 = !DILocation(line: 703, column: 21, scope: !1737)
!1819 = !DILocation(line: 703, column: 21, scope: !1820)
!1820 = distinct !DILexicalBlock(scope: !1821, file: !63, line: 703, column: 21)
!1821 = distinct !DILexicalBlock(scope: !1737, file: !63, line: 703, column: 21)
!1822 = !DILocation(line: 703, column: 21, scope: !1821)
!1823 = !DILocation(line: 704, column: 25, scope: !1737)
!1824 = !DILocation(line: 704, column: 29, scope: !1737)
!1825 = !DILocation(line: 704, column: 23, scope: !1737)
!1826 = !DILocation(line: 686, column: 17, scope: !1738)
!1827 = distinct !{!1827, !1828, !1829}
!1828 = !DILocation(line: 686, column: 17, scope: !1739)
!1829 = !DILocation(line: 705, column: 19, scope: !1739)
!1830 = !DILocation(line: 707, column: 17, scope: !1729)
!1831 = !DILocation(line: 710, column: 9, scope: !1329)
!1832 = !DILocation(line: 712, column: 16, scope: !1833)
!1833 = distinct !DILexicalBlock(scope: !1275, file: !63, line: 712, column: 11)
!1834 = !DILocation(line: 712, column: 34, scope: !1833)
!1835 = !DILocation(line: 712, column: 37, scope: !1833)
!1836 = !DILocation(line: 712, column: 51, scope: !1833)
!1837 = !DILocation(line: 713, column: 15, scope: !1833)
!1838 = !DILocation(line: 713, column: 18, scope: !1833)
!1839 = !DILocation(line: 714, column: 14, scope: !1833)
!1840 = !DILocation(line: 714, column: 17, scope: !1833)
!1841 = !DILocation(line: 715, column: 14, scope: !1833)
!1842 = !DILocation(line: 715, column: 17, scope: !1833)
!1843 = !DILocation(line: 715, column: 33, scope: !1833)
!1844 = !DILocation(line: 715, column: 35, scope: !1833)
!1845 = !DILocation(line: 715, column: 51, scope: !1833)
!1846 = !DILocation(line: 715, column: 53, scope: !1833)
!1847 = !DILocation(line: 715, column: 47, scope: !1833)
!1848 = !DILocation(line: 715, column: 65, scope: !1833)
!1849 = !DILocation(line: 716, column: 11, scope: !1833)
!1850 = !DILocation(line: 716, column: 15, scope: !1833)
!1851 = !DILocation(line: 712, column: 11, scope: !1275)
!1852 = !DILocation(line: 717, column: 9, scope: !1833)
!1853 = !DILabel(scope: !1275, name: "store_escape", file: !63, line: 719)
!1854 = !DILocation(line: 719, column: 5, scope: !1275)
!1855 = !DILocation(line: 720, column: 7, scope: !1275)
!1856 = !DILocation(line: 720, column: 7, scope: !1857)
!1857 = distinct !DILexicalBlock(scope: !1858, file: !63, line: 720, column: 7)
!1858 = distinct !DILexicalBlock(scope: !1275, file: !63, line: 720, column: 7)
!1859 = !DILocation(line: 720, column: 7, scope: !1858)
!1860 = !DILocation(line: 720, column: 7, scope: !1861)
!1861 = distinct !DILexicalBlock(scope: !1858, file: !63, line: 720, column: 7)
!1862 = !DILocation(line: 720, column: 7, scope: !1863)
!1863 = distinct !DILexicalBlock(scope: !1861, file: !63, line: 720, column: 7)
!1864 = !DILocation(line: 720, column: 7, scope: !1865)
!1865 = distinct !DILexicalBlock(scope: !1866, file: !63, line: 720, column: 7)
!1866 = distinct !DILexicalBlock(scope: !1863, file: !63, line: 720, column: 7)
!1867 = !DILocation(line: 720, column: 7, scope: !1866)
!1868 = !DILocation(line: 720, column: 7, scope: !1869)
!1869 = distinct !DILexicalBlock(scope: !1870, file: !63, line: 720, column: 7)
!1870 = distinct !DILexicalBlock(scope: !1863, file: !63, line: 720, column: 7)
!1871 = !DILocation(line: 720, column: 7, scope: !1870)
!1872 = !DILocation(line: 720, column: 7, scope: !1873)
!1873 = distinct !DILexicalBlock(scope: !1874, file: !63, line: 720, column: 7)
!1874 = distinct !DILexicalBlock(scope: !1863, file: !63, line: 720, column: 7)
!1875 = !DILocation(line: 720, column: 7, scope: !1874)
!1876 = !DILocation(line: 720, column: 7, scope: !1877)
!1877 = distinct !DILexicalBlock(scope: !1878, file: !63, line: 720, column: 7)
!1878 = distinct !DILexicalBlock(scope: !1858, file: !63, line: 720, column: 7)
!1879 = !DILocation(line: 720, column: 7, scope: !1878)
!1880 = !DILabel(scope: !1275, name: "store_c", file: !63, line: 722)
!1881 = !DILocation(line: 722, column: 5, scope: !1275)
!1882 = !DILocation(line: 723, column: 7, scope: !1275)
!1883 = !DILocation(line: 723, column: 7, scope: !1884)
!1884 = distinct !DILexicalBlock(scope: !1885, file: !63, line: 723, column: 7)
!1885 = distinct !DILexicalBlock(scope: !1275, file: !63, line: 723, column: 7)
!1886 = !DILocation(line: 723, column: 7, scope: !1885)
!1887 = !DILocation(line: 723, column: 7, scope: !1888)
!1888 = distinct !DILexicalBlock(scope: !1884, file: !63, line: 723, column: 7)
!1889 = !DILocation(line: 723, column: 7, scope: !1890)
!1890 = distinct !DILexicalBlock(scope: !1891, file: !63, line: 723, column: 7)
!1891 = distinct !DILexicalBlock(scope: !1888, file: !63, line: 723, column: 7)
!1892 = !DILocation(line: 723, column: 7, scope: !1891)
!1893 = !DILocation(line: 723, column: 7, scope: !1894)
!1894 = distinct !DILexicalBlock(scope: !1895, file: !63, line: 723, column: 7)
!1895 = distinct !DILexicalBlock(scope: !1888, file: !63, line: 723, column: 7)
!1896 = !DILocation(line: 723, column: 7, scope: !1895)
!1897 = !DILocation(line: 724, column: 7, scope: !1275)
!1898 = !DILocation(line: 724, column: 7, scope: !1899)
!1899 = distinct !DILexicalBlock(scope: !1900, file: !63, line: 724, column: 7)
!1900 = distinct !DILexicalBlock(scope: !1275, file: !63, line: 724, column: 7)
!1901 = !DILocation(line: 724, column: 7, scope: !1900)
!1902 = !DILocation(line: 726, column: 13, scope: !1903)
!1903 = distinct !DILexicalBlock(scope: !1275, file: !63, line: 726, column: 11)
!1904 = !DILocation(line: 726, column: 11, scope: !1275)
!1905 = !DILocation(line: 727, column: 38, scope: !1903)
!1906 = !DILocation(line: 727, column: 9, scope: !1903)
!1907 = !DILocation(line: 728, column: 5, scope: !1275)
!1908 = !DILocation(line: 400, column: 75, scope: !1264)
!1909 = !DILocation(line: 400, column: 3, scope: !1264)
!1910 = distinct !{!1910, !1273, !1911}
!1911 = !DILocation(line: 728, column: 5, scope: !1261)
!1912 = !DILocation(line: 730, column: 7, scope: !1913)
!1913 = distinct !DILexicalBlock(scope: !1121, file: !63, line: 730, column: 7)
!1914 = !DILocation(line: 730, column: 11, scope: !1913)
!1915 = !DILocation(line: 730, column: 16, scope: !1913)
!1916 = !DILocation(line: 730, column: 19, scope: !1913)
!1917 = !DILocation(line: 730, column: 33, scope: !1913)
!1918 = !DILocation(line: 731, column: 7, scope: !1913)
!1919 = !DILocation(line: 731, column: 10, scope: !1913)
!1920 = !DILocation(line: 730, column: 7, scope: !1121)
!1921 = !DILocation(line: 732, column: 5, scope: !1913)
!1922 = !DILocation(line: 738, column: 7, scope: !1923)
!1923 = distinct !DILexicalBlock(scope: !1121, file: !63, line: 738, column: 7)
!1924 = !DILocation(line: 738, column: 21, scope: !1923)
!1925 = !DILocation(line: 738, column: 51, scope: !1923)
!1926 = !DILocation(line: 738, column: 56, scope: !1923)
!1927 = !DILocation(line: 739, column: 7, scope: !1923)
!1928 = !DILocation(line: 739, column: 10, scope: !1923)
!1929 = !DILocation(line: 738, column: 7, scope: !1121)
!1930 = !DILocation(line: 741, column: 11, scope: !1931)
!1931 = distinct !DILexicalBlock(scope: !1932, file: !63, line: 741, column: 11)
!1932 = distinct !DILexicalBlock(scope: !1923, file: !63, line: 740, column: 5)
!1933 = !DILocation(line: 741, column: 11, scope: !1932)
!1934 = !DILocation(line: 742, column: 42, scope: !1931)
!1935 = !DILocation(line: 742, column: 50, scope: !1931)
!1936 = !DILocation(line: 742, column: 67, scope: !1931)
!1937 = !DILocation(line: 742, column: 72, scope: !1931)
!1938 = !DILocation(line: 744, column: 42, scope: !1931)
!1939 = !DILocation(line: 744, column: 49, scope: !1931)
!1940 = !DILocation(line: 745, column: 42, scope: !1931)
!1941 = !DILocation(line: 745, column: 54, scope: !1931)
!1942 = !DILocation(line: 742, column: 16, scope: !1931)
!1943 = !DILocation(line: 742, column: 9, scope: !1931)
!1944 = !DILocation(line: 746, column: 18, scope: !1945)
!1945 = distinct !DILexicalBlock(scope: !1931, file: !63, line: 746, column: 16)
!1946 = !DILocation(line: 746, column: 29, scope: !1945)
!1947 = !DILocation(line: 746, column: 32, scope: !1945)
!1948 = !DILocation(line: 746, column: 16, scope: !1931)
!1949 = !DILocation(line: 749, column: 24, scope: !1950)
!1950 = distinct !DILexicalBlock(scope: !1945, file: !63, line: 747, column: 9)
!1951 = !DILocation(line: 749, column: 22, scope: !1950)
!1952 = !DILocation(line: 750, column: 15, scope: !1950)
!1953 = !DILocation(line: 751, column: 11, scope: !1950)
!1954 = !DILocation(line: 753, column: 5, scope: !1932)
!1955 = !DILocation(line: 755, column: 7, scope: !1956)
!1956 = distinct !DILexicalBlock(scope: !1121, file: !63, line: 755, column: 7)
!1957 = !DILocation(line: 755, column: 20, scope: !1956)
!1958 = !DILocation(line: 755, column: 24, scope: !1956)
!1959 = !DILocation(line: 755, column: 7, scope: !1121)
!1960 = !DILocation(line: 756, column: 5, scope: !1956)
!1961 = !DILocation(line: 756, column: 13, scope: !1962)
!1962 = distinct !DILexicalBlock(scope: !1963, file: !63, line: 756, column: 5)
!1963 = distinct !DILexicalBlock(scope: !1956, file: !63, line: 756, column: 5)
!1964 = !DILocation(line: 756, column: 12, scope: !1962)
!1965 = !DILocation(line: 756, column: 5, scope: !1963)
!1966 = !DILocation(line: 757, column: 7, scope: !1962)
!1967 = !DILocation(line: 757, column: 7, scope: !1968)
!1968 = distinct !DILexicalBlock(scope: !1969, file: !63, line: 757, column: 7)
!1969 = distinct !DILexicalBlock(scope: !1962, file: !63, line: 757, column: 7)
!1970 = !DILocation(line: 757, column: 7, scope: !1969)
!1971 = !DILocation(line: 756, column: 39, scope: !1962)
!1972 = !DILocation(line: 756, column: 5, scope: !1962)
!1973 = distinct !{!1973, !1965, !1974}
!1974 = !DILocation(line: 757, column: 7, scope: !1963)
!1975 = !DILocation(line: 759, column: 7, scope: !1976)
!1976 = distinct !DILexicalBlock(scope: !1121, file: !63, line: 759, column: 7)
!1977 = !DILocation(line: 759, column: 13, scope: !1976)
!1978 = !DILocation(line: 759, column: 11, scope: !1976)
!1979 = !DILocation(line: 759, column: 7, scope: !1121)
!1980 = !DILocation(line: 760, column: 5, scope: !1976)
!1981 = !DILocation(line: 760, column: 12, scope: !1976)
!1982 = !DILocation(line: 760, column: 17, scope: !1976)
!1983 = !DILocation(line: 761, column: 10, scope: !1121)
!1984 = !DILocation(line: 761, column: 3, scope: !1121)
!1985 = !DILabel(scope: !1121, name: "force_outer_quoting_style", file: !63, line: 763)
!1986 = !DILocation(line: 763, column: 2, scope: !1121)
!1987 = !DILocation(line: 766, column: 7, scope: !1988)
!1988 = distinct !DILexicalBlock(scope: !1121, file: !63, line: 766, column: 7)
!1989 = !DILocation(line: 766, column: 21, scope: !1988)
!1990 = !DILocation(line: 766, column: 51, scope: !1988)
!1991 = !DILocation(line: 766, column: 54, scope: !1988)
!1992 = !DILocation(line: 766, column: 7, scope: !1121)
!1993 = !DILocation(line: 767, column: 19, scope: !1988)
!1994 = !DILocation(line: 767, column: 5, scope: !1988)
!1995 = !DILocation(line: 768, column: 36, scope: !1121)
!1996 = !DILocation(line: 768, column: 44, scope: !1121)
!1997 = !DILocation(line: 768, column: 56, scope: !1121)
!1998 = !DILocation(line: 768, column: 61, scope: !1121)
!1999 = !DILocation(line: 769, column: 36, scope: !1121)
!2000 = !DILocation(line: 770, column: 36, scope: !1121)
!2001 = !DILocation(line: 770, column: 42, scope: !1121)
!2002 = !DILocation(line: 771, column: 36, scope: !1121)
!2003 = !DILocation(line: 771, column: 48, scope: !1121)
!2004 = !DILocation(line: 768, column: 10, scope: !1121)
!2005 = !DILocation(line: 768, column: 3, scope: !1121)
!2006 = !DILocation(line: 772, column: 1, scope: !1121)
!2007 = !DILocalVariable(name: "buffer", arg: 1, scope: !2008, file: !63, line: 256, type: !32)
!2008 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !63, file: !63, line: 256, type: !1122, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2009, retainedNodes: !4)
!2009 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !2010, nameTableKind: None)
!2010 = !{!2011, !2013, !2015, !2024, !2026, !2028, !2035, !2037}
!2011 = !DIGlobalVariableExpression(var: !2012, expr: !DIExpression())
!2012 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2009, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!2013 = !DIGlobalVariableExpression(var: !2014, expr: !DIExpression())
!2014 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2009, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!2015 = !DIGlobalVariableExpression(var: !2016, expr: !DIExpression())
!2016 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2009, file: !63, line: 1052, type: !2017, isLocal: false, isDefinition: true)
!2017 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !2018)
!2018 = !{!2019, !2020, !2021, !2022, !2023}
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2017, file: !63, line: 68, baseType: !40, size: 32)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2017, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2017, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2017, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2017, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!2024 = !DIGlobalVariableExpression(var: !2025, expr: !DIExpression())
!2025 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2009, file: !63, line: 116, type: !2017, isLocal: true, isDefinition: true)
!2026 = !DIGlobalVariableExpression(var: !2027, expr: !DIExpression())
!2027 = distinct !DIGlobalVariable(name: "slot0", scope: !2009, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!2028 = !DIGlobalVariableExpression(var: !2029, expr: !DIExpression())
!2029 = distinct !DIGlobalVariable(name: "slotvec", scope: !2009, file: !63, line: 845, type: !2030, isLocal: true, isDefinition: true)
!2030 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2031, size: 64)
!2031 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !2032)
!2032 = !{!2033, !2034}
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2031, file: !63, line: 836, baseType: !57, size: 64)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2031, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!2035 = !DIGlobalVariableExpression(var: !2036, expr: !DIExpression())
!2036 = distinct !DIGlobalVariable(name: "nslots", scope: !2009, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!2037 = !DIGlobalVariableExpression(var: !2038, expr: !DIExpression())
!2038 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2009, file: !63, line: 844, type: !2031, isLocal: true, isDefinition: true)
!2039 = !DILocalVariable(name: "buffersize", arg: 2, scope: !2008, file: !63, line: 256, type: !57)
!2040 = !DILocalVariable(name: "arg", arg: 3, scope: !2008, file: !63, line: 257, type: !6)
!2041 = !DILocalVariable(name: "argsize", arg: 4, scope: !2008, file: !63, line: 257, type: !57)
!2042 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !2008, file: !63, line: 258, type: !40)
!2043 = !DILocalVariable(name: "flags", arg: 6, scope: !2008, file: !63, line: 258, type: !25)
!2044 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !2008, file: !63, line: 259, type: !1124)
!2045 = !DILocalVariable(name: "left_quote", arg: 8, scope: !2008, file: !63, line: 260, type: !6)
!2046 = !DILocalVariable(name: "right_quote", arg: 9, scope: !2008, file: !63, line: 261, type: !6)
!2047 = !DILocalVariable(name: "i", scope: !2008, file: !63, line: 263, type: !57)
!2048 = !DILocalVariable(name: "len", scope: !2008, file: !63, line: 264, type: !57)
!2049 = !DILocalVariable(name: "orig_buffersize", scope: !2008, file: !63, line: 265, type: !57)
!2050 = !DILocalVariable(name: "quote_string", scope: !2008, file: !63, line: 266, type: !6)
!2051 = !DILocalVariable(name: "quote_string_len", scope: !2008, file: !63, line: 267, type: !57)
!2052 = !DILocalVariable(name: "backslash_escapes", scope: !2008, file: !63, line: 268, type: !17)
!2053 = !DILocalVariable(name: "unibyte_locale", scope: !2008, file: !63, line: 269, type: !17)
!2054 = !DILocalVariable(name: "elide_outer_quotes", scope: !2008, file: !63, line: 270, type: !17)
!2055 = !DILocalVariable(name: "pending_shell_escape_end", scope: !2008, file: !63, line: 271, type: !17)
!2056 = !DILocalVariable(name: "encountered_single_quote", scope: !2008, file: !63, line: 272, type: !17)
!2057 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !2008, file: !63, line: 273, type: !17)
!2058 = !DILocalVariable(name: "escaping", scope: !2059, file: !63, line: 405, type: !17)
!2059 = distinct !DILexicalBlock(scope: !2060, file: !63, line: 401, column: 5)
!2060 = distinct !DILexicalBlock(scope: !2061, file: !63, line: 400, column: 3)
!2061 = distinct !DILexicalBlock(scope: !2062, file: !63, line: 400, column: 3)
!2062 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !63, file: !63, line: 256, type: !1122, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2063, retainedNodes: !4)
!2063 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !2064, nameTableKind: None)
!2064 = !{!2065, !2067, !2069, !2078, !2080, !2082, !2089, !2091}
!2065 = !DIGlobalVariableExpression(var: !2066, expr: !DIExpression())
!2066 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2063, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!2067 = !DIGlobalVariableExpression(var: !2068, expr: !DIExpression())
!2068 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2063, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!2069 = !DIGlobalVariableExpression(var: !2070, expr: !DIExpression())
!2070 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2063, file: !63, line: 1052, type: !2071, isLocal: false, isDefinition: true)
!2071 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !2072)
!2072 = !{!2073, !2074, !2075, !2076, !2077}
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2071, file: !63, line: 68, baseType: !40, size: 32)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2071, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2071, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2071, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2071, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!2078 = !DIGlobalVariableExpression(var: !2079, expr: !DIExpression())
!2079 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2063, file: !63, line: 116, type: !2071, isLocal: true, isDefinition: true)
!2080 = !DIGlobalVariableExpression(var: !2081, expr: !DIExpression())
!2081 = distinct !DIGlobalVariable(name: "slot0", scope: !2063, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!2082 = !DIGlobalVariableExpression(var: !2083, expr: !DIExpression())
!2083 = distinct !DIGlobalVariable(name: "slotvec", scope: !2063, file: !63, line: 845, type: !2084, isLocal: true, isDefinition: true)
!2084 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2085, size: 64)
!2085 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !2086)
!2086 = !{!2087, !2088}
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2085, file: !63, line: 836, baseType: !57, size: 64)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2085, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!2089 = !DIGlobalVariableExpression(var: !2090, expr: !DIExpression())
!2090 = distinct !DIGlobalVariable(name: "nslots", scope: !2063, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!2091 = !DIGlobalVariableExpression(var: !2092, expr: !DIExpression())
!2092 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2063, file: !63, line: 844, type: !2085, isLocal: true, isDefinition: true)
!2093 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !2059, file: !63, line: 406, type: !17)
!2094 = distinct !DISubprogram(name: "gettext_quote", scope: !63, file: !63, line: 207, type: !2095, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !37, retainedNodes: !4)
!2095 = !DISubroutineType(types: !2096)
!2096 = !{!6, !6, !40}
!2097 = !DILocalVariable(name: "msgid", arg: 1, scope: !2094, file: !63, line: 207, type: !6)
!2098 = !DILocation(line: 207, column: 28, scope: !2094)
!2099 = !DILocalVariable(name: "s", arg: 2, scope: !2094, file: !63, line: 207, type: !40)
!2100 = !DILocation(line: 207, column: 54, scope: !2094)
!2101 = !DILocalVariable(name: "translation", scope: !2094, file: !63, line: 209, type: !6)
!2102 = !DILocation(line: 209, column: 15, scope: !2094)
!2103 = !DILocation(line: 209, column: 29, scope: !2094)
!2104 = !DILocalVariable(name: "locale_code", scope: !2094, file: !63, line: 210, type: !6)
!2105 = !DILocation(line: 210, column: 15, scope: !2094)
!2106 = !DILocation(line: 212, column: 7, scope: !2107)
!2107 = distinct !DILexicalBlock(scope: !2094, file: !63, line: 212, column: 7)
!2108 = !DILocation(line: 212, column: 22, scope: !2107)
!2109 = !DILocation(line: 212, column: 19, scope: !2107)
!2110 = !DILocation(line: 212, column: 7, scope: !2094)
!2111 = !DILocation(line: 213, column: 12, scope: !2107)
!2112 = !DILocation(line: 213, column: 5, scope: !2107)
!2113 = !DILocation(line: 233, column: 17, scope: !2094)
!2114 = !DILocation(line: 233, column: 15, scope: !2094)
!2115 = !DILocation(line: 234, column: 7, scope: !2116)
!2116 = distinct !DILexicalBlock(scope: !2094, file: !63, line: 234, column: 7)
!2117 = !DILocation(line: 234, column: 7, scope: !2094)
!2118 = !DILocation(line: 235, column: 12, scope: !2116)
!2119 = !DILocation(line: 235, column: 21, scope: !2116)
!2120 = !DILocation(line: 235, column: 5, scope: !2116)
!2121 = !DILocation(line: 236, column: 7, scope: !2122)
!2122 = distinct !DILexicalBlock(scope: !2094, file: !63, line: 236, column: 7)
!2123 = !DILocation(line: 236, column: 7, scope: !2094)
!2124 = !DILocation(line: 237, column: 12, scope: !2122)
!2125 = !DILocation(line: 237, column: 21, scope: !2122)
!2126 = !DILocation(line: 237, column: 5, scope: !2122)
!2127 = !DILocation(line: 239, column: 11, scope: !2094)
!2128 = !DILocation(line: 239, column: 13, scope: !2094)
!2129 = !DILocation(line: 239, column: 3, scope: !2094)
!2130 = !DILocation(line: 240, column: 1, scope: !2094)
!2131 = !DILocalVariable(name: "msgid", arg: 1, scope: !2132, file: !63, line: 207, type: !6)
!2132 = distinct !DISubprogram(name: "gettext_quote", scope: !63, file: !63, line: 207, type: !2095, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2133, retainedNodes: !4)
!2133 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !2134, nameTableKind: None)
!2134 = !{!2135, !2137, !2139, !2148, !2150, !2152, !2159, !2161}
!2135 = !DIGlobalVariableExpression(var: !2136, expr: !DIExpression())
!2136 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2133, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!2137 = !DIGlobalVariableExpression(var: !2138, expr: !DIExpression())
!2138 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2133, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!2139 = !DIGlobalVariableExpression(var: !2140, expr: !DIExpression())
!2140 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2133, file: !63, line: 1052, type: !2141, isLocal: false, isDefinition: true)
!2141 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !2142)
!2142 = !{!2143, !2144, !2145, !2146, !2147}
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2141, file: !63, line: 68, baseType: !40, size: 32)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2141, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2141, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2141, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2141, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!2148 = !DIGlobalVariableExpression(var: !2149, expr: !DIExpression())
!2149 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2133, file: !63, line: 116, type: !2141, isLocal: true, isDefinition: true)
!2150 = !DIGlobalVariableExpression(var: !2151, expr: !DIExpression())
!2151 = distinct !DIGlobalVariable(name: "slot0", scope: !2133, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!2152 = !DIGlobalVariableExpression(var: !2153, expr: !DIExpression())
!2153 = distinct !DIGlobalVariable(name: "slotvec", scope: !2133, file: !63, line: 845, type: !2154, isLocal: true, isDefinition: true)
!2154 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2155, size: 64)
!2155 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !2156)
!2156 = !{!2157, !2158}
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2155, file: !63, line: 836, baseType: !57, size: 64)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2155, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!2159 = !DIGlobalVariableExpression(var: !2160, expr: !DIExpression())
!2160 = distinct !DIGlobalVariable(name: "nslots", scope: !2133, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!2161 = !DIGlobalVariableExpression(var: !2162, expr: !DIExpression())
!2162 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2133, file: !63, line: 844, type: !2155, isLocal: true, isDefinition: true)
!2163 = !DILocalVariable(name: "s", arg: 2, scope: !2132, file: !63, line: 207, type: !40)
!2164 = !DILocalVariable(name: "translation", scope: !2132, file: !63, line: 209, type: !6)
!2165 = !DILocalVariable(name: "locale_code", scope: !2132, file: !63, line: 210, type: !6)
!2166 = distinct !DISubprogram(name: "quotearg_char", scope: !63, file: !63, line: 991, type: !2167, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !37, retainedNodes: !4)
!2167 = !DISubroutineType(types: !2168)
!2168 = !{!32, !6, !8}
!2169 = !DILocalVariable(name: "arg", arg: 1, scope: !2166, file: !63, line: 991, type: !6)
!2170 = !DILocation(line: 991, column: 28, scope: !2166)
!2171 = !DILocalVariable(name: "ch", arg: 2, scope: !2166, file: !63, line: 991, type: !8)
!2172 = !DILocation(line: 991, column: 38, scope: !2166)
!2173 = !DILocation(line: 993, column: 29, scope: !2166)
!2174 = !DILocation(line: 993, column: 44, scope: !2166)
!2175 = !DILocation(line: 993, column: 10, scope: !2166)
!2176 = !DILocation(line: 993, column: 3, scope: !2166)
!2177 = !DILocalVariable(name: "arg", arg: 1, scope: !2178, file: !63, line: 991, type: !6)
!2178 = distinct !DISubprogram(name: "quotearg_char", scope: !63, file: !63, line: 991, type: !2167, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2179, retainedNodes: !4)
!2179 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !2180, nameTableKind: None)
!2180 = !{!2181, !2183, !2185, !2194, !2196, !2198, !2205, !2207}
!2181 = !DIGlobalVariableExpression(var: !2182, expr: !DIExpression())
!2182 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2179, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!2183 = !DIGlobalVariableExpression(var: !2184, expr: !DIExpression())
!2184 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2179, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!2185 = !DIGlobalVariableExpression(var: !2186, expr: !DIExpression())
!2186 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2179, file: !63, line: 1052, type: !2187, isLocal: false, isDefinition: true)
!2187 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !2188)
!2188 = !{!2189, !2190, !2191, !2192, !2193}
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2187, file: !63, line: 68, baseType: !40, size: 32)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2187, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2187, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2187, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2187, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!2194 = !DIGlobalVariableExpression(var: !2195, expr: !DIExpression())
!2195 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2179, file: !63, line: 116, type: !2187, isLocal: true, isDefinition: true)
!2196 = !DIGlobalVariableExpression(var: !2197, expr: !DIExpression())
!2197 = distinct !DIGlobalVariable(name: "slot0", scope: !2179, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!2198 = !DIGlobalVariableExpression(var: !2199, expr: !DIExpression())
!2199 = distinct !DIGlobalVariable(name: "slotvec", scope: !2179, file: !63, line: 845, type: !2200, isLocal: true, isDefinition: true)
!2200 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2201, size: 64)
!2201 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !2202)
!2202 = !{!2203, !2204}
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2201, file: !63, line: 836, baseType: !57, size: 64)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2201, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!2205 = !DIGlobalVariableExpression(var: !2206, expr: !DIExpression())
!2206 = distinct !DIGlobalVariable(name: "nslots", scope: !2179, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!2207 = !DIGlobalVariableExpression(var: !2208, expr: !DIExpression())
!2208 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2179, file: !63, line: 844, type: !2201, isLocal: true, isDefinition: true)
!2209 = !DILocalVariable(name: "ch", arg: 2, scope: !2178, file: !63, line: 991, type: !8)
!2210 = distinct !DISubprogram(name: "quotearg_colon", scope: !63, file: !63, line: 997, type: !2211, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !37, retainedNodes: !4)
!2211 = !DISubroutineType(types: !2212)
!2212 = !{!32, !6}
!2213 = !DILocalVariable(name: "arg", arg: 1, scope: !2210, file: !63, line: 997, type: !6)
!2214 = !DILocation(line: 997, column: 29, scope: !2210)
!2215 = !DILocation(line: 999, column: 25, scope: !2210)
!2216 = !DILocation(line: 999, column: 10, scope: !2210)
!2217 = !DILocation(line: 999, column: 3, scope: !2210)
!2218 = !DILocalVariable(name: "arg", arg: 1, scope: !2219, file: !63, line: 997, type: !6)
!2219 = distinct !DISubprogram(name: "quotearg_colon", scope: !63, file: !63, line: 997, type: !2211, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2220, retainedNodes: !4)
!2220 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !2221, nameTableKind: None)
!2221 = !{!2222, !2224, !2226, !2235, !2237, !2239, !2246, !2248}
!2222 = !DIGlobalVariableExpression(var: !2223, expr: !DIExpression())
!2223 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2220, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!2224 = !DIGlobalVariableExpression(var: !2225, expr: !DIExpression())
!2225 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2220, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!2226 = !DIGlobalVariableExpression(var: !2227, expr: !DIExpression())
!2227 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2220, file: !63, line: 1052, type: !2228, isLocal: false, isDefinition: true)
!2228 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !2229)
!2229 = !{!2230, !2231, !2232, !2233, !2234}
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2228, file: !63, line: 68, baseType: !40, size: 32)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2228, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2228, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2228, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2228, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!2235 = !DIGlobalVariableExpression(var: !2236, expr: !DIExpression())
!2236 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2220, file: !63, line: 116, type: !2228, isLocal: true, isDefinition: true)
!2237 = !DIGlobalVariableExpression(var: !2238, expr: !DIExpression())
!2238 = distinct !DIGlobalVariable(name: "slot0", scope: !2220, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!2239 = !DIGlobalVariableExpression(var: !2240, expr: !DIExpression())
!2240 = distinct !DIGlobalVariable(name: "slotvec", scope: !2220, file: !63, line: 845, type: !2241, isLocal: true, isDefinition: true)
!2241 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2242, size: 64)
!2242 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !2243)
!2243 = !{!2244, !2245}
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2242, file: !63, line: 836, baseType: !57, size: 64)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2242, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!2246 = !DIGlobalVariableExpression(var: !2247, expr: !DIExpression())
!2247 = distinct !DIGlobalVariable(name: "nslots", scope: !2220, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!2248 = !DIGlobalVariableExpression(var: !2249, expr: !DIExpression())
!2249 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2220, file: !63, line: 844, type: !2242, isLocal: true, isDefinition: true)
!2250 = distinct !DISubprogram(name: "version_etc_arn", scope: !2251, file: !2251, line: 61, type: !2252, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !114, retainedNodes: !4)
!2251 = !DIFile(filename: "lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2252 = !DISubroutineType(types: !2253)
!2253 = !{null, !2254, !6, !6, !6, !2309, !57}
!2254 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2255, size: 64)
!2255 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2256, line: 7, baseType: !2257)
!2256 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2257 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2258, line: 49, size: 1728, elements: !2259)
!2258 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2259 = !{!2260, !2261, !2262, !2263, !2264, !2265, !2266, !2267, !2268, !2269, !2270, !2271, !2272, !2275, !2277, !2278, !2279, !2283, !2284, !2286, !2290, !2293, !2295, !2298, !2301, !2302, !2303, !2304, !2305}
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2257, file: !2258, line: 51, baseType: !25, size: 32)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2257, file: !2258, line: 54, baseType: !32, size: 64, offset: 64)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2257, file: !2258, line: 55, baseType: !32, size: 64, offset: 128)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2257, file: !2258, line: 56, baseType: !32, size: 64, offset: 192)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2257, file: !2258, line: 57, baseType: !32, size: 64, offset: 256)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2257, file: !2258, line: 58, baseType: !32, size: 64, offset: 320)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2257, file: !2258, line: 59, baseType: !32, size: 64, offset: 384)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2257, file: !2258, line: 60, baseType: !32, size: 64, offset: 448)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2257, file: !2258, line: 61, baseType: !32, size: 64, offset: 512)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2257, file: !2258, line: 64, baseType: !32, size: 64, offset: 576)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2257, file: !2258, line: 65, baseType: !32, size: 64, offset: 640)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2257, file: !2258, line: 66, baseType: !32, size: 64, offset: 704)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2257, file: !2258, line: 68, baseType: !2273, size: 64, offset: 768)
!2273 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2274, size: 64)
!2274 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2258, line: 36, flags: DIFlagFwdDecl)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2257, file: !2258, line: 70, baseType: !2276, size: 64, offset: 832)
!2276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2257, size: 64)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2257, file: !2258, line: 72, baseType: !25, size: 32, offset: 896)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2257, file: !2258, line: 73, baseType: !25, size: 32, offset: 928)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2257, file: !2258, line: 74, baseType: !2280, size: 64, offset: 960)
!2280 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2281, line: 152, baseType: !2282)
!2281 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2282 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2257, file: !2258, line: 77, baseType: !56, size: 16, offset: 1024)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2257, file: !2258, line: 78, baseType: !2285, size: 8, offset: 1040)
!2285 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2257, file: !2258, line: 79, baseType: !2287, size: 8, offset: 1048)
!2287 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 8, elements: !2288)
!2288 = !{!2289}
!2289 = !DISubrange(count: 1)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2257, file: !2258, line: 81, baseType: !2291, size: 64, offset: 1088)
!2291 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2292, size: 64)
!2292 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2258, line: 43, baseType: null)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2257, file: !2258, line: 89, baseType: !2294, size: 64, offset: 1152)
!2294 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2281, line: 153, baseType: !2282)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2257, file: !2258, line: 91, baseType: !2296, size: 64, offset: 1216)
!2296 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2297, size: 64)
!2297 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2258, line: 37, flags: DIFlagFwdDecl)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2257, file: !2258, line: 92, baseType: !2299, size: 64, offset: 1280)
!2299 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2300, size: 64)
!2300 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2258, line: 38, flags: DIFlagFwdDecl)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2257, file: !2258, line: 93, baseType: !2276, size: 64, offset: 1344)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2257, file: !2258, line: 94, baseType: !31, size: 64, offset: 1408)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2257, file: !2258, line: 95, baseType: !57, size: 64, offset: 1472)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2257, file: !2258, line: 96, baseType: !25, size: 32, offset: 1536)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2257, file: !2258, line: 98, baseType: !2306, size: 160, offset: 1568)
!2306 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 160, elements: !2307)
!2307 = !{!2308}
!2308 = !DISubrange(count: 20)
!2309 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !65, size: 64)
!2310 = !DILocalVariable(name: "stream", arg: 1, scope: !2250, file: !2251, line: 61, type: !2254)
!2311 = !DILocation(line: 61, column: 24, scope: !2250)
!2312 = !DILocalVariable(name: "command_name", arg: 2, scope: !2250, file: !2251, line: 62, type: !6)
!2313 = !DILocation(line: 62, column: 30, scope: !2250)
!2314 = !DILocalVariable(name: "package", arg: 3, scope: !2250, file: !2251, line: 62, type: !6)
!2315 = !DILocation(line: 62, column: 56, scope: !2250)
!2316 = !DILocalVariable(name: "version", arg: 4, scope: !2250, file: !2251, line: 63, type: !6)
!2317 = !DILocation(line: 63, column: 30, scope: !2250)
!2318 = !DILocalVariable(name: "authors", arg: 5, scope: !2250, file: !2251, line: 64, type: !2309)
!2319 = !DILocation(line: 64, column: 39, scope: !2250)
!2320 = !DILocalVariable(name: "n_authors", arg: 6, scope: !2250, file: !2251, line: 64, type: !57)
!2321 = !DILocation(line: 64, column: 55, scope: !2250)
!2322 = !DILocation(line: 66, column: 7, scope: !2323)
!2323 = distinct !DILexicalBlock(scope: !2250, file: !2251, line: 66, column: 7)
!2324 = !DILocation(line: 66, column: 7, scope: !2250)
!2325 = !DILocation(line: 67, column: 14, scope: !2323)
!2326 = !DILocation(line: 67, column: 38, scope: !2323)
!2327 = !DILocation(line: 67, column: 52, scope: !2323)
!2328 = !DILocation(line: 67, column: 61, scope: !2323)
!2329 = !DILocation(line: 67, column: 5, scope: !2323)
!2330 = !DILocation(line: 69, column: 14, scope: !2323)
!2331 = !DILocation(line: 69, column: 33, scope: !2323)
!2332 = !DILocation(line: 69, column: 42, scope: !2323)
!2333 = !DILocation(line: 69, column: 5, scope: !2323)
!2334 = !DILocation(line: 83, column: 12, scope: !2250)
!2335 = !DILocation(line: 83, column: 43, scope: !2250)
!2336 = !DILocation(line: 83, column: 3, scope: !2250)
!2337 = !DILocation(line: 85, column: 3, scope: !2250)
!2338 = !DILocation(line: 88, column: 12, scope: !2250)
!2339 = !DILocation(line: 88, column: 20, scope: !2250)
!2340 = !DILocation(line: 88, column: 3, scope: !2250)
!2341 = !DILocation(line: 95, column: 3, scope: !2250)
!2342 = !DILocation(line: 97, column: 11, scope: !2250)
!2343 = !DILocation(line: 97, column: 3, scope: !2250)
!2344 = !DILocation(line: 102, column: 7, scope: !2345)
!2345 = distinct !DILexicalBlock(scope: !2250, file: !2251, line: 98, column: 5)
!2346 = !DILocation(line: 105, column: 16, scope: !2345)
!2347 = !DILocation(line: 105, column: 24, scope: !2345)
!2348 = !DILocation(line: 105, column: 47, scope: !2345)
!2349 = !DILocation(line: 105, column: 7, scope: !2345)
!2350 = !DILocation(line: 106, column: 7, scope: !2345)
!2351 = !DILocation(line: 109, column: 16, scope: !2345)
!2352 = !DILocation(line: 109, column: 24, scope: !2345)
!2353 = !DILocation(line: 109, column: 54, scope: !2345)
!2354 = !DILocation(line: 109, column: 66, scope: !2345)
!2355 = !DILocation(line: 109, column: 7, scope: !2345)
!2356 = !DILocation(line: 110, column: 7, scope: !2345)
!2357 = !DILocation(line: 113, column: 16, scope: !2345)
!2358 = !DILocation(line: 113, column: 24, scope: !2345)
!2359 = !DILocation(line: 114, column: 16, scope: !2345)
!2360 = !DILocation(line: 114, column: 28, scope: !2345)
!2361 = !DILocation(line: 114, column: 40, scope: !2345)
!2362 = !DILocation(line: 113, column: 7, scope: !2345)
!2363 = !DILocation(line: 115, column: 7, scope: !2345)
!2364 = !DILocation(line: 120, column: 16, scope: !2345)
!2365 = !DILocation(line: 120, column: 24, scope: !2345)
!2366 = !DILocation(line: 121, column: 16, scope: !2345)
!2367 = !DILocation(line: 121, column: 28, scope: !2345)
!2368 = !DILocation(line: 121, column: 40, scope: !2345)
!2369 = !DILocation(line: 121, column: 52, scope: !2345)
!2370 = !DILocation(line: 120, column: 7, scope: !2345)
!2371 = !DILocation(line: 122, column: 7, scope: !2345)
!2372 = !DILocation(line: 127, column: 16, scope: !2345)
!2373 = !DILocation(line: 127, column: 24, scope: !2345)
!2374 = !DILocation(line: 128, column: 16, scope: !2345)
!2375 = !DILocation(line: 128, column: 28, scope: !2345)
!2376 = !DILocation(line: 128, column: 40, scope: !2345)
!2377 = !DILocation(line: 128, column: 52, scope: !2345)
!2378 = !DILocation(line: 128, column: 64, scope: !2345)
!2379 = !DILocation(line: 127, column: 7, scope: !2345)
!2380 = !DILocation(line: 129, column: 7, scope: !2345)
!2381 = !DILocation(line: 134, column: 16, scope: !2345)
!2382 = !DILocation(line: 134, column: 24, scope: !2345)
!2383 = !DILocation(line: 135, column: 16, scope: !2345)
!2384 = !DILocation(line: 135, column: 28, scope: !2345)
!2385 = !DILocation(line: 135, column: 40, scope: !2345)
!2386 = !DILocation(line: 135, column: 52, scope: !2345)
!2387 = !DILocation(line: 135, column: 64, scope: !2345)
!2388 = !DILocation(line: 136, column: 16, scope: !2345)
!2389 = !DILocation(line: 134, column: 7, scope: !2345)
!2390 = !DILocation(line: 137, column: 7, scope: !2345)
!2391 = !DILocation(line: 142, column: 16, scope: !2345)
!2392 = !DILocation(line: 142, column: 24, scope: !2345)
!2393 = !DILocation(line: 143, column: 16, scope: !2345)
!2394 = !DILocation(line: 143, column: 28, scope: !2345)
!2395 = !DILocation(line: 143, column: 40, scope: !2345)
!2396 = !DILocation(line: 143, column: 52, scope: !2345)
!2397 = !DILocation(line: 143, column: 64, scope: !2345)
!2398 = !DILocation(line: 144, column: 16, scope: !2345)
!2399 = !DILocation(line: 144, column: 28, scope: !2345)
!2400 = !DILocation(line: 142, column: 7, scope: !2345)
!2401 = !DILocation(line: 145, column: 7, scope: !2345)
!2402 = !DILocation(line: 150, column: 16, scope: !2345)
!2403 = !DILocation(line: 150, column: 24, scope: !2345)
!2404 = !DILocation(line: 152, column: 17, scope: !2345)
!2405 = !DILocation(line: 152, column: 29, scope: !2345)
!2406 = !DILocation(line: 152, column: 41, scope: !2345)
!2407 = !DILocation(line: 152, column: 53, scope: !2345)
!2408 = !DILocation(line: 152, column: 65, scope: !2345)
!2409 = !DILocation(line: 153, column: 17, scope: !2345)
!2410 = !DILocation(line: 153, column: 29, scope: !2345)
!2411 = !DILocation(line: 153, column: 41, scope: !2345)
!2412 = !DILocation(line: 150, column: 7, scope: !2345)
!2413 = !DILocation(line: 154, column: 7, scope: !2345)
!2414 = !DILocation(line: 159, column: 16, scope: !2345)
!2415 = !DILocation(line: 159, column: 24, scope: !2345)
!2416 = !DILocation(line: 161, column: 16, scope: !2345)
!2417 = !DILocation(line: 161, column: 28, scope: !2345)
!2418 = !DILocation(line: 161, column: 40, scope: !2345)
!2419 = !DILocation(line: 161, column: 52, scope: !2345)
!2420 = !DILocation(line: 161, column: 64, scope: !2345)
!2421 = !DILocation(line: 162, column: 16, scope: !2345)
!2422 = !DILocation(line: 162, column: 28, scope: !2345)
!2423 = !DILocation(line: 162, column: 40, scope: !2345)
!2424 = !DILocation(line: 162, column: 52, scope: !2345)
!2425 = !DILocation(line: 159, column: 7, scope: !2345)
!2426 = !DILocation(line: 163, column: 7, scope: !2345)
!2427 = !DILocation(line: 170, column: 16, scope: !2345)
!2428 = !DILocation(line: 170, column: 24, scope: !2345)
!2429 = !DILocation(line: 172, column: 17, scope: !2345)
!2430 = !DILocation(line: 172, column: 29, scope: !2345)
!2431 = !DILocation(line: 172, column: 41, scope: !2345)
!2432 = !DILocation(line: 172, column: 53, scope: !2345)
!2433 = !DILocation(line: 172, column: 65, scope: !2345)
!2434 = !DILocation(line: 173, column: 17, scope: !2345)
!2435 = !DILocation(line: 173, column: 29, scope: !2345)
!2436 = !DILocation(line: 173, column: 41, scope: !2345)
!2437 = !DILocation(line: 173, column: 53, scope: !2345)
!2438 = !DILocation(line: 170, column: 7, scope: !2345)
!2439 = !DILocation(line: 174, column: 7, scope: !2345)
!2440 = !DILocation(line: 176, column: 1, scope: !2250)
!2441 = !DILocalVariable(name: "stream", arg: 1, scope: !2442, file: !2251, line: 61, type: !2445)
!2442 = distinct !DISubprogram(name: "version_etc_arn", scope: !2251, file: !2251, line: 61, type: !2443, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2479, retainedNodes: !4)
!2443 = !DISubroutineType(types: !2444)
!2444 = !{null, !2445, !6, !6, !6, !2309, !57}
!2445 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2446, size: 64)
!2446 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2256, line: 7, baseType: !2447)
!2447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2258, line: 49, size: 1728, elements: !2448)
!2448 = !{!2449, !2450, !2451, !2452, !2453, !2454, !2455, !2456, !2457, !2458, !2459, !2460, !2461, !2462, !2464, !2465, !2466, !2467, !2468, !2469, !2470, !2471, !2472, !2473, !2474, !2475, !2476, !2477, !2478}
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2447, file: !2258, line: 51, baseType: !25, size: 32)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2447, file: !2258, line: 54, baseType: !32, size: 64, offset: 64)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2447, file: !2258, line: 55, baseType: !32, size: 64, offset: 128)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2447, file: !2258, line: 56, baseType: !32, size: 64, offset: 192)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2447, file: !2258, line: 57, baseType: !32, size: 64, offset: 256)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2447, file: !2258, line: 58, baseType: !32, size: 64, offset: 320)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2447, file: !2258, line: 59, baseType: !32, size: 64, offset: 384)
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2447, file: !2258, line: 60, baseType: !32, size: 64, offset: 448)
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2447, file: !2258, line: 61, baseType: !32, size: 64, offset: 512)
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2447, file: !2258, line: 64, baseType: !32, size: 64, offset: 576)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2447, file: !2258, line: 65, baseType: !32, size: 64, offset: 640)
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2447, file: !2258, line: 66, baseType: !32, size: 64, offset: 704)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2447, file: !2258, line: 68, baseType: !2273, size: 64, offset: 768)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2447, file: !2258, line: 70, baseType: !2463, size: 64, offset: 832)
!2463 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2447, size: 64)
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2447, file: !2258, line: 72, baseType: !25, size: 32, offset: 896)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2447, file: !2258, line: 73, baseType: !25, size: 32, offset: 928)
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2447, file: !2258, line: 74, baseType: !2280, size: 64, offset: 960)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2447, file: !2258, line: 77, baseType: !56, size: 16, offset: 1024)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2447, file: !2258, line: 78, baseType: !2285, size: 8, offset: 1040)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2447, file: !2258, line: 79, baseType: !2287, size: 8, offset: 1048)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2447, file: !2258, line: 81, baseType: !2291, size: 64, offset: 1088)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2447, file: !2258, line: 89, baseType: !2294, size: 64, offset: 1152)
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2447, file: !2258, line: 91, baseType: !2296, size: 64, offset: 1216)
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2447, file: !2258, line: 92, baseType: !2299, size: 64, offset: 1280)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2447, file: !2258, line: 93, baseType: !2463, size: 64, offset: 1344)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2447, file: !2258, line: 94, baseType: !31, size: 64, offset: 1408)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2447, file: !2258, line: 95, baseType: !57, size: 64, offset: 1472)
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2447, file: !2258, line: 96, baseType: !25, size: 32, offset: 1536)
!2478 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2447, file: !2258, line: 98, baseType: !2306, size: 160, offset: 1568)
!2479 = distinct !DICompileUnit(language: DW_LANG_C99, file: !115, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!2480 = !DILocalVariable(name: "command_name", arg: 2, scope: !2442, file: !2251, line: 62, type: !6)
!2481 = !DILocalVariable(name: "package", arg: 3, scope: !2442, file: !2251, line: 62, type: !6)
!2482 = !DILocalVariable(name: "version", arg: 4, scope: !2442, file: !2251, line: 63, type: !6)
!2483 = !DILocalVariable(name: "authors", arg: 5, scope: !2442, file: !2251, line: 64, type: !2309)
!2484 = !DILocalVariable(name: "n_authors", arg: 6, scope: !2442, file: !2251, line: 64, type: !57)
!2485 = distinct !DISubprogram(name: "version_etc_va", scope: !2251, file: !2251, line: 199, type: !2486, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !114, retainedNodes: !4)
!2486 = !DISubroutineType(types: !2487)
!2487 = !{null, !2254, !6, !6, !6, !2488}
!2488 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2489, size: 64)
!2489 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !115, line: 192, size: 192, elements: !2490)
!2490 = !{!2491, !2492, !2493, !2494}
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2489, file: !115, line: 192, baseType: !42, size: 32)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2489, file: !115, line: 192, baseType: !42, size: 32, offset: 32)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2489, file: !115, line: 192, baseType: !31, size: 64, offset: 64)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2489, file: !115, line: 192, baseType: !31, size: 64, offset: 128)
!2495 = !DILocalVariable(name: "stream", arg: 1, scope: !2485, file: !2251, line: 199, type: !2254)
!2496 = !DILocation(line: 199, column: 23, scope: !2485)
!2497 = !DILocalVariable(name: "command_name", arg: 2, scope: !2485, file: !2251, line: 200, type: !6)
!2498 = !DILocation(line: 200, column: 29, scope: !2485)
!2499 = !DILocalVariable(name: "package", arg: 3, scope: !2485, file: !2251, line: 200, type: !6)
!2500 = !DILocation(line: 200, column: 55, scope: !2485)
!2501 = !DILocalVariable(name: "version", arg: 4, scope: !2485, file: !2251, line: 201, type: !6)
!2502 = !DILocation(line: 201, column: 29, scope: !2485)
!2503 = !DILocalVariable(name: "authors", arg: 5, scope: !2485, file: !2251, line: 201, type: !2488)
!2504 = !DILocation(line: 201, column: 46, scope: !2485)
!2505 = !DILocalVariable(name: "n_authors", scope: !2485, file: !2251, line: 203, type: !57)
!2506 = !DILocation(line: 203, column: 10, scope: !2485)
!2507 = !DILocalVariable(name: "authtab", scope: !2485, file: !2251, line: 204, type: !2508)
!2508 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 640, elements: !72)
!2509 = !DILocation(line: 204, column: 15, scope: !2485)
!2510 = !DILocation(line: 206, column: 18, scope: !2511)
!2511 = distinct !DILexicalBlock(scope: !2485, file: !2251, line: 206, column: 3)
!2512 = !DILocation(line: 206, column: 8, scope: !2511)
!2513 = !DILocation(line: 207, column: 8, scope: !2514)
!2514 = distinct !DILexicalBlock(scope: !2511, file: !2251, line: 206, column: 3)
!2515 = !DILocation(line: 207, column: 18, scope: !2514)
!2516 = !DILocation(line: 208, column: 10, scope: !2514)
!2517 = !DILocation(line: 208, column: 35, scope: !2514)
!2518 = !DILocation(line: 208, column: 22, scope: !2514)
!2519 = !DILocation(line: 208, column: 14, scope: !2514)
!2520 = !DILocation(line: 208, column: 33, scope: !2514)
!2521 = !DILocation(line: 208, column: 67, scope: !2514)
!2522 = !DILocation(line: 0, scope: !2514)
!2523 = !DILocation(line: 206, column: 3, scope: !2511)
!2524 = !DILocation(line: 209, column: 17, scope: !2514)
!2525 = !DILocation(line: 206, column: 3, scope: !2514)
!2526 = distinct !{!2526, !2523, !2527}
!2527 = !DILocation(line: 210, column: 5, scope: !2511)
!2528 = !DILocation(line: 211, column: 20, scope: !2485)
!2529 = !DILocation(line: 211, column: 28, scope: !2485)
!2530 = !DILocation(line: 211, column: 42, scope: !2485)
!2531 = !DILocation(line: 211, column: 51, scope: !2485)
!2532 = !DILocation(line: 212, column: 20, scope: !2485)
!2533 = !DILocation(line: 212, column: 29, scope: !2485)
!2534 = !DILocation(line: 211, column: 3, scope: !2485)
!2535 = !DILocation(line: 213, column: 1, scope: !2485)
!2536 = !DILocalVariable(name: "stream", arg: 1, scope: !2537, file: !2251, line: 199, type: !2540)
!2537 = distinct !DISubprogram(name: "version_etc_va", scope: !2251, file: !2251, line: 199, type: !2538, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2581, retainedNodes: !4)
!2538 = !DISubroutineType(types: !2539)
!2539 = !{null, !2540, !6, !6, !6, !2574}
!2540 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2541, size: 64)
!2541 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2256, line: 7, baseType: !2542)
!2542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2258, line: 49, size: 1728, elements: !2543)
!2543 = !{!2544, !2545, !2546, !2547, !2548, !2549, !2550, !2551, !2552, !2553, !2554, !2555, !2556, !2557, !2559, !2560, !2561, !2562, !2563, !2564, !2565, !2566, !2567, !2568, !2569, !2570, !2571, !2572, !2573}
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2542, file: !2258, line: 51, baseType: !25, size: 32)
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2542, file: !2258, line: 54, baseType: !32, size: 64, offset: 64)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2542, file: !2258, line: 55, baseType: !32, size: 64, offset: 128)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2542, file: !2258, line: 56, baseType: !32, size: 64, offset: 192)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2542, file: !2258, line: 57, baseType: !32, size: 64, offset: 256)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2542, file: !2258, line: 58, baseType: !32, size: 64, offset: 320)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2542, file: !2258, line: 59, baseType: !32, size: 64, offset: 384)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2542, file: !2258, line: 60, baseType: !32, size: 64, offset: 448)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2542, file: !2258, line: 61, baseType: !32, size: 64, offset: 512)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2542, file: !2258, line: 64, baseType: !32, size: 64, offset: 576)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2542, file: !2258, line: 65, baseType: !32, size: 64, offset: 640)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2542, file: !2258, line: 66, baseType: !32, size: 64, offset: 704)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2542, file: !2258, line: 68, baseType: !2273, size: 64, offset: 768)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2542, file: !2258, line: 70, baseType: !2558, size: 64, offset: 832)
!2558 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2542, size: 64)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2542, file: !2258, line: 72, baseType: !25, size: 32, offset: 896)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2542, file: !2258, line: 73, baseType: !25, size: 32, offset: 928)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2542, file: !2258, line: 74, baseType: !2280, size: 64, offset: 960)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2542, file: !2258, line: 77, baseType: !56, size: 16, offset: 1024)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2542, file: !2258, line: 78, baseType: !2285, size: 8, offset: 1040)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2542, file: !2258, line: 79, baseType: !2287, size: 8, offset: 1048)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2542, file: !2258, line: 81, baseType: !2291, size: 64, offset: 1088)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2542, file: !2258, line: 89, baseType: !2294, size: 64, offset: 1152)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2542, file: !2258, line: 91, baseType: !2296, size: 64, offset: 1216)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2542, file: !2258, line: 92, baseType: !2299, size: 64, offset: 1280)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2542, file: !2258, line: 93, baseType: !2558, size: 64, offset: 1344)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2542, file: !2258, line: 94, baseType: !31, size: 64, offset: 1408)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2542, file: !2258, line: 95, baseType: !57, size: 64, offset: 1472)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2542, file: !2258, line: 96, baseType: !25, size: 32, offset: 1536)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2542, file: !2258, line: 98, baseType: !2306, size: 160, offset: 1568)
!2574 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2575, size: 64)
!2575 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !115, line: 192, size: 192, elements: !2576)
!2576 = !{!2577, !2578, !2579, !2580}
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2575, file: !115, line: 192, baseType: !42, size: 32)
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2575, file: !115, line: 192, baseType: !42, size: 32, offset: 32)
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2575, file: !115, line: 192, baseType: !31, size: 64, offset: 64)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2575, file: !115, line: 192, baseType: !31, size: 64, offset: 128)
!2581 = distinct !DICompileUnit(language: DW_LANG_C99, file: !115, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!2582 = !DILocalVariable(name: "command_name", arg: 2, scope: !2537, file: !2251, line: 200, type: !6)
!2583 = !DILocalVariable(name: "package", arg: 3, scope: !2537, file: !2251, line: 200, type: !6)
!2584 = !DILocalVariable(name: "version", arg: 4, scope: !2537, file: !2251, line: 201, type: !6)
!2585 = !DILocalVariable(name: "authors", arg: 5, scope: !2537, file: !2251, line: 201, type: !2574)
!2586 = !DILocalVariable(name: "n_authors", scope: !2537, file: !2251, line: 203, type: !57)
!2587 = !DILocalVariable(name: "authtab", scope: !2537, file: !2251, line: 204, type: !2508)
!2588 = distinct !DISubprogram(name: "version_etc", scope: !2251, file: !2251, line: 230, type: !2589, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !114, retainedNodes: !4)
!2589 = !DISubroutineType(types: !2590)
!2590 = !{null, !2254, !6, !6, !6, null}
!2591 = !DILocalVariable(name: "stream", arg: 1, scope: !2588, file: !2251, line: 230, type: !2254)
!2592 = !DILocation(line: 230, column: 20, scope: !2588)
!2593 = !DILocalVariable(name: "command_name", arg: 2, scope: !2588, file: !2251, line: 231, type: !6)
!2594 = !DILocation(line: 231, column: 26, scope: !2588)
!2595 = !DILocalVariable(name: "package", arg: 3, scope: !2588, file: !2251, line: 231, type: !6)
!2596 = !DILocation(line: 231, column: 52, scope: !2588)
!2597 = !DILocalVariable(name: "version", arg: 4, scope: !2588, file: !2251, line: 232, type: !6)
!2598 = !DILocation(line: 232, column: 26, scope: !2588)
!2599 = !DILocalVariable(name: "authors", scope: !2588, file: !2251, line: 234, type: !2600)
!2600 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !2601, line: 52, baseType: !2602)
!2601 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!2602 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !2603, line: 32, baseType: !2604)
!2603 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stdarg.h", directory: "")
!2604 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !115, line: 234, baseType: !2605)
!2605 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2489, size: 192, elements: !2288)
!2606 = !DILocation(line: 234, column: 11, scope: !2588)
!2607 = !DILocation(line: 236, column: 3, scope: !2588)
!2608 = !DILocation(line: 237, column: 19, scope: !2588)
!2609 = !DILocation(line: 237, column: 27, scope: !2588)
!2610 = !DILocation(line: 237, column: 41, scope: !2588)
!2611 = !DILocation(line: 237, column: 50, scope: !2588)
!2612 = !DILocation(line: 237, column: 59, scope: !2588)
!2613 = !DILocation(line: 237, column: 3, scope: !2588)
!2614 = !DILocation(line: 238, column: 3, scope: !2588)
!2615 = !DILocation(line: 239, column: 1, scope: !2588)
!2616 = !DILocalVariable(name: "stream", arg: 1, scope: !2617, file: !2251, line: 230, type: !2620)
!2617 = distinct !DISubprogram(name: "version_etc", scope: !2251, file: !2251, line: 230, type: !2618, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2654, retainedNodes: !4)
!2618 = !DISubroutineType(types: !2619)
!2619 = !{null, !2620, !6, !6, !6, null}
!2620 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2621, size: 64)
!2621 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2256, line: 7, baseType: !2622)
!2622 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2258, line: 49, size: 1728, elements: !2623)
!2623 = !{!2624, !2625, !2626, !2627, !2628, !2629, !2630, !2631, !2632, !2633, !2634, !2635, !2636, !2637, !2639, !2640, !2641, !2642, !2643, !2644, !2645, !2646, !2647, !2648, !2649, !2650, !2651, !2652, !2653}
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2622, file: !2258, line: 51, baseType: !25, size: 32)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2622, file: !2258, line: 54, baseType: !32, size: 64, offset: 64)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2622, file: !2258, line: 55, baseType: !32, size: 64, offset: 128)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2622, file: !2258, line: 56, baseType: !32, size: 64, offset: 192)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2622, file: !2258, line: 57, baseType: !32, size: 64, offset: 256)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2622, file: !2258, line: 58, baseType: !32, size: 64, offset: 320)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2622, file: !2258, line: 59, baseType: !32, size: 64, offset: 384)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2622, file: !2258, line: 60, baseType: !32, size: 64, offset: 448)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2622, file: !2258, line: 61, baseType: !32, size: 64, offset: 512)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2622, file: !2258, line: 64, baseType: !32, size: 64, offset: 576)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2622, file: !2258, line: 65, baseType: !32, size: 64, offset: 640)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2622, file: !2258, line: 66, baseType: !32, size: 64, offset: 704)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2622, file: !2258, line: 68, baseType: !2273, size: 64, offset: 768)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2622, file: !2258, line: 70, baseType: !2638, size: 64, offset: 832)
!2638 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2622, size: 64)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2622, file: !2258, line: 72, baseType: !25, size: 32, offset: 896)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2622, file: !2258, line: 73, baseType: !25, size: 32, offset: 928)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2622, file: !2258, line: 74, baseType: !2280, size: 64, offset: 960)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2622, file: !2258, line: 77, baseType: !56, size: 16, offset: 1024)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2622, file: !2258, line: 78, baseType: !2285, size: 8, offset: 1040)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2622, file: !2258, line: 79, baseType: !2287, size: 8, offset: 1048)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2622, file: !2258, line: 81, baseType: !2291, size: 64, offset: 1088)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2622, file: !2258, line: 89, baseType: !2294, size: 64, offset: 1152)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2622, file: !2258, line: 91, baseType: !2296, size: 64, offset: 1216)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2622, file: !2258, line: 92, baseType: !2299, size: 64, offset: 1280)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2622, file: !2258, line: 93, baseType: !2638, size: 64, offset: 1344)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2622, file: !2258, line: 94, baseType: !31, size: 64, offset: 1408)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2622, file: !2258, line: 95, baseType: !57, size: 64, offset: 1472)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2622, file: !2258, line: 96, baseType: !25, size: 32, offset: 1536)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2622, file: !2258, line: 98, baseType: !2306, size: 160, offset: 1568)
!2654 = distinct !DICompileUnit(language: DW_LANG_C99, file: !115, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!2655 = !DILocalVariable(name: "command_name", arg: 2, scope: !2617, file: !2251, line: 231, type: !6)
!2656 = !DILocalVariable(name: "package", arg: 3, scope: !2617, file: !2251, line: 231, type: !6)
!2657 = !DILocalVariable(name: "version", arg: 4, scope: !2617, file: !2251, line: 232, type: !6)
!2658 = !DILocalVariable(name: "authors", scope: !2617, file: !2251, line: 234, type: !2659)
!2659 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !2601, line: 52, baseType: !2660)
!2660 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !2603, line: 32, baseType: !2661)
!2661 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !115, line: 234, baseType: !2662)
!2662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2663, size: 192, elements: !2288)
!2663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !115, line: 192, size: 192, elements: !2664)
!2664 = !{!2665, !2666, !2667, !2668}
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2663, file: !115, line: 192, baseType: !42, size: 32)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2663, file: !115, line: 192, baseType: !42, size: 32, offset: 32)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2663, file: !115, line: 192, baseType: !31, size: 64, offset: 64)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2663, file: !115, line: 192, baseType: !31, size: 64, offset: 128)
!2669 = distinct !DISubprogram(name: "xmalloc", scope: !2670, file: !2670, line: 39, type: !2671, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !117, retainedNodes: !4)
!2670 = !DIFile(filename: "lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2671 = !DISubroutineType(types: !2672)
!2672 = !{!31, !57}
!2673 = !DILocalVariable(name: "n", arg: 1, scope: !2669, file: !2670, line: 39, type: !57)
!2674 = !DILocation(line: 39, column: 17, scope: !2669)
!2675 = !DILocalVariable(name: "p", scope: !2669, file: !2670, line: 41, type: !31)
!2676 = !DILocation(line: 41, column: 9, scope: !2669)
!2677 = !DILocation(line: 41, column: 21, scope: !2669)
!2678 = !DILocation(line: 41, column: 13, scope: !2669)
!2679 = !DILocation(line: 42, column: 8, scope: !2680)
!2680 = distinct !DILexicalBlock(scope: !2669, file: !2670, line: 42, column: 7)
!2681 = !DILocation(line: 42, column: 10, scope: !2680)
!2682 = !DILocation(line: 42, column: 13, scope: !2680)
!2683 = !DILocation(line: 42, column: 15, scope: !2680)
!2684 = !DILocation(line: 42, column: 7, scope: !2669)
!2685 = !DILocation(line: 43, column: 5, scope: !2680)
!2686 = !DILocation(line: 44, column: 10, scope: !2669)
!2687 = !DILocation(line: 44, column: 3, scope: !2669)
!2688 = !DILocalVariable(name: "n", arg: 1, scope: !2689, file: !2670, line: 39, type: !57)
!2689 = distinct !DISubprogram(name: "xmalloc", scope: !2670, file: !2670, line: 39, type: !2671, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2690, retainedNodes: !4)
!2690 = distinct !DICompileUnit(language: DW_LANG_C99, file: !118, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !119, nameTableKind: None)
!2691 = !DILocalVariable(name: "p", scope: !2689, file: !2670, line: 41, type: !31)
!2692 = distinct !DISubprogram(name: "xrealloc", scope: !2670, file: !2670, line: 51, type: !2693, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !117, retainedNodes: !4)
!2693 = !DISubroutineType(types: !2694)
!2694 = !{!31, !31, !57}
!2695 = !DILocalVariable(name: "p", arg: 1, scope: !2692, file: !2670, line: 51, type: !31)
!2696 = !DILocation(line: 51, column: 17, scope: !2692)
!2697 = !DILocalVariable(name: "n", arg: 2, scope: !2692, file: !2670, line: 51, type: !57)
!2698 = !DILocation(line: 51, column: 27, scope: !2692)
!2699 = !DILocation(line: 53, column: 8, scope: !2700)
!2700 = distinct !DILexicalBlock(scope: !2692, file: !2670, line: 53, column: 7)
!2701 = !DILocation(line: 53, column: 10, scope: !2700)
!2702 = !DILocation(line: 53, column: 13, scope: !2700)
!2703 = !DILocation(line: 53, column: 7, scope: !2692)
!2704 = !DILocation(line: 57, column: 13, scope: !2705)
!2705 = distinct !DILexicalBlock(scope: !2700, file: !2670, line: 54, column: 5)
!2706 = !DILocation(line: 57, column: 7, scope: !2705)
!2707 = !DILocation(line: 58, column: 7, scope: !2705)
!2708 = !DILocation(line: 61, column: 16, scope: !2692)
!2709 = !DILocation(line: 61, column: 19, scope: !2692)
!2710 = !DILocation(line: 61, column: 7, scope: !2692)
!2711 = !DILocation(line: 61, column: 5, scope: !2692)
!2712 = !DILocation(line: 62, column: 8, scope: !2713)
!2713 = distinct !DILexicalBlock(scope: !2692, file: !2670, line: 62, column: 7)
!2714 = !DILocation(line: 62, column: 10, scope: !2713)
!2715 = !DILocation(line: 62, column: 13, scope: !2713)
!2716 = !DILocation(line: 62, column: 7, scope: !2692)
!2717 = !DILocation(line: 63, column: 5, scope: !2713)
!2718 = !DILocation(line: 64, column: 10, scope: !2692)
!2719 = !DILocation(line: 64, column: 3, scope: !2692)
!2720 = !DILocation(line: 65, column: 1, scope: !2692)
!2721 = !DILocalVariable(name: "p", arg: 1, scope: !2722, file: !2670, line: 51, type: !31)
!2722 = distinct !DISubprogram(name: "xrealloc", scope: !2670, file: !2670, line: 51, type: !2693, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2723, retainedNodes: !4)
!2723 = distinct !DICompileUnit(language: DW_LANG_C99, file: !118, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !119, nameTableKind: None)
!2724 = !DILocalVariable(name: "n", arg: 2, scope: !2722, file: !2670, line: 51, type: !57)
!2725 = distinct !DISubprogram(name: "xcharalloc", scope: !2726, file: !2726, line: 216, type: !2727, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !117, retainedNodes: !4)
!2726 = !DIFile(filename: "./lib/xalloc.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2727 = !DISubroutineType(types: !2728)
!2728 = !{!32, !57}
!2729 = !DILocalVariable(name: "n", arg: 1, scope: !2725, file: !2726, line: 216, type: !57)
!2730 = !DILocation(line: 216, column: 20, scope: !2725)
!2731 = !DILocation(line: 218, column: 10, scope: !2725)
!2732 = !DILocation(line: 218, column: 3, scope: !2725)
!2733 = !DILocalVariable(name: "n", arg: 1, scope: !2734, file: !2726, line: 216, type: !57)
!2734 = distinct !DISubprogram(name: "xcharalloc", scope: !2726, file: !2726, line: 216, type: !2727, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2735, retainedNodes: !4)
!2735 = distinct !DICompileUnit(language: DW_LANG_C99, file: !118, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !119, nameTableKind: None)
!2736 = distinct !DISubprogram(name: "xalloc_die", scope: !2737, file: !2737, line: 32, type: !581, scopeLine: 33, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !120, retainedNodes: !4)
!2737 = !DIFile(filename: "lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2738 = !DILocation(line: 34, column: 10, scope: !2736)
!2739 = !DILocation(line: 34, column: 33, scope: !2736)
!2740 = !DILocation(line: 34, column: 3, scope: !2736)
!2741 = !DILocation(line: 40, column: 3, scope: !2736)
!2742 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !2743, file: !2743, line: 86, type: !2744, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !122, retainedNodes: !4)
!2743 = !DIFile(filename: "lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2744 = !DISubroutineType(types: !2745)
!2745 = !{!57, !2746, !6, !57, !2747}
!2746 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1624, size: 64)
!2747 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2748, size: 64)
!2748 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1595, line: 6, baseType: !2749)
!2749 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1597, line: 21, baseType: !2750)
!2750 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1597, line: 13, size: 64, elements: !2751)
!2751 = !{!2752, !2753}
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !2750, file: !1597, line: 15, baseType: !25, size: 32)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !2750, file: !1597, line: 20, baseType: !2754, size: 32, offset: 32)
!2754 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2750, file: !1597, line: 16, size: 32, elements: !2755)
!2755 = !{!2756, !2757}
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !2754, file: !1597, line: 18, baseType: !42, size: 32)
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !2754, file: !1597, line: 19, baseType: !1606, size: 32)
!2758 = !DILocalVariable(name: "pwc", arg: 1, scope: !2742, file: !2743, line: 86, type: !2746)
!2759 = !DILocation(line: 86, column: 23, scope: !2742)
!2760 = !DILocalVariable(name: "s", arg: 2, scope: !2742, file: !2743, line: 86, type: !6)
!2761 = !DILocation(line: 86, column: 40, scope: !2742)
!2762 = !DILocalVariable(name: "n", arg: 3, scope: !2742, file: !2743, line: 86, type: !57)
!2763 = !DILocation(line: 86, column: 50, scope: !2742)
!2764 = !DILocalVariable(name: "ps", arg: 4, scope: !2742, file: !2743, line: 86, type: !2747)
!2765 = !DILocation(line: 86, column: 64, scope: !2742)
!2766 = !DILocalVariable(name: "ret", scope: !2742, file: !2743, line: 88, type: !57)
!2767 = !DILocation(line: 88, column: 10, scope: !2742)
!2768 = !DILocalVariable(name: "wc", scope: !2742, file: !2743, line: 89, type: !1624)
!2769 = !DILocation(line: 89, column: 11, scope: !2742)
!2770 = !DILocation(line: 105, column: 9, scope: !2771)
!2771 = distinct !DILexicalBlock(scope: !2742, file: !2743, line: 105, column: 7)
!2772 = !DILocation(line: 105, column: 7, scope: !2742)
!2773 = !DILocation(line: 106, column: 9, scope: !2771)
!2774 = !DILocation(line: 106, column: 5, scope: !2771)
!2775 = !DILocation(line: 145, column: 18, scope: !2742)
!2776 = !DILocation(line: 145, column: 23, scope: !2742)
!2777 = !DILocation(line: 145, column: 26, scope: !2742)
!2778 = !DILocation(line: 145, column: 29, scope: !2742)
!2779 = !DILocation(line: 145, column: 9, scope: !2742)
!2780 = !DILocation(line: 145, column: 7, scope: !2742)
!2781 = !DILocation(line: 154, column: 22, scope: !2782)
!2782 = distinct !DILexicalBlock(scope: !2742, file: !2743, line: 154, column: 7)
!2783 = !DILocation(line: 154, column: 19, scope: !2782)
!2784 = !DILocation(line: 154, column: 26, scope: !2782)
!2785 = !DILocation(line: 154, column: 29, scope: !2782)
!2786 = !DILocation(line: 154, column: 31, scope: !2782)
!2787 = !DILocation(line: 154, column: 36, scope: !2782)
!2788 = !DILocation(line: 154, column: 41, scope: !2782)
!2789 = !DILocation(line: 154, column: 7, scope: !2742)
!2790 = !DILocalVariable(name: "uc", scope: !2791, file: !2743, line: 156, type: !130)
!2791 = distinct !DILexicalBlock(scope: !2782, file: !2743, line: 155, column: 5)
!2792 = !DILocation(line: 156, column: 21, scope: !2791)
!2793 = !DILocation(line: 156, column: 27, scope: !2791)
!2794 = !DILocation(line: 156, column: 26, scope: !2791)
!2795 = !DILocation(line: 157, column: 14, scope: !2791)
!2796 = !DILocation(line: 157, column: 8, scope: !2791)
!2797 = !DILocation(line: 157, column: 12, scope: !2791)
!2798 = !DILocation(line: 158, column: 7, scope: !2791)
!2799 = !DILocation(line: 162, column: 10, scope: !2742)
!2800 = !DILocation(line: 162, column: 3, scope: !2742)
!2801 = !DILocation(line: 163, column: 1, scope: !2742)
!2802 = !DILocalVariable(name: "pwc", arg: 1, scope: !2803, file: !2743, line: 86, type: !2746)
!2803 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !2743, file: !2743, line: 86, type: !2804, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2817, retainedNodes: !4)
!2804 = !DISubroutineType(types: !2805)
!2805 = !{!57, !2746, !6, !57, !2806}
!2806 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2807, size: 64)
!2807 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1595, line: 6, baseType: !2808)
!2808 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1597, line: 21, baseType: !2809)
!2809 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1597, line: 13, size: 64, elements: !2810)
!2810 = !{!2811, !2812}
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !2809, file: !1597, line: 15, baseType: !25, size: 32)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !2809, file: !1597, line: 20, baseType: !2813, size: 32, offset: 32)
!2813 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2809, file: !1597, line: 16, size: 32, elements: !2814)
!2814 = !{!2815, !2816}
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !2813, file: !1597, line: 18, baseType: !42, size: 32)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !2813, file: !1597, line: 19, baseType: !1606, size: 32)
!2817 = distinct !DICompileUnit(language: DW_LANG_C99, file: !123, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !124, nameTableKind: None)
!2818 = !DILocalVariable(name: "s", arg: 2, scope: !2803, file: !2743, line: 86, type: !6)
!2819 = !DILocalVariable(name: "n", arg: 3, scope: !2803, file: !2743, line: 86, type: !57)
!2820 = !DILocalVariable(name: "ps", arg: 4, scope: !2803, file: !2743, line: 86, type: !2806)
!2821 = !DILocalVariable(name: "ret", scope: !2803, file: !2743, line: 88, type: !57)
!2822 = !DILocalVariable(name: "wc", scope: !2803, file: !2743, line: 89, type: !1624)
!2823 = distinct !DISubprogram(name: "c_strcasecmp", scope: !2824, file: !2824, line: 27, type: !2825, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !125, retainedNodes: !4)
!2824 = !DIFile(filename: "lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2825 = !DISubroutineType(types: !2826)
!2826 = !{!25, !6, !6}
!2827 = !DILocalVariable(name: "s1", arg: 1, scope: !2823, file: !2824, line: 27, type: !6)
!2828 = !DILocation(line: 27, column: 27, scope: !2823)
!2829 = !DILocalVariable(name: "s2", arg: 2, scope: !2823, file: !2824, line: 27, type: !6)
!2830 = !DILocation(line: 27, column: 43, scope: !2823)
!2831 = !DILocalVariable(name: "p1", scope: !2823, file: !2824, line: 29, type: !128)
!2832 = !DILocation(line: 29, column: 33, scope: !2823)
!2833 = !DILocation(line: 29, column: 62, scope: !2823)
!2834 = !DILocalVariable(name: "p2", scope: !2823, file: !2824, line: 30, type: !128)
!2835 = !DILocation(line: 30, column: 33, scope: !2823)
!2836 = !DILocation(line: 30, column: 62, scope: !2823)
!2837 = !DILocalVariable(name: "c1", scope: !2823, file: !2824, line: 31, type: !130)
!2838 = !DILocation(line: 31, column: 17, scope: !2823)
!2839 = !DILocalVariable(name: "c2", scope: !2823, file: !2824, line: 31, type: !130)
!2840 = !DILocation(line: 31, column: 21, scope: !2823)
!2841 = !DILocation(line: 33, column: 7, scope: !2842)
!2842 = distinct !DILexicalBlock(scope: !2823, file: !2824, line: 33, column: 7)
!2843 = !DILocation(line: 33, column: 13, scope: !2842)
!2844 = !DILocation(line: 33, column: 10, scope: !2842)
!2845 = !DILocation(line: 33, column: 7, scope: !2823)
!2846 = !DILocation(line: 34, column: 5, scope: !2842)
!2847 = !DILocation(line: 36, column: 3, scope: !2823)
!2848 = !DILocation(line: 38, column: 24, scope: !2849)
!2849 = distinct !DILexicalBlock(scope: !2823, file: !2824, line: 37, column: 5)
!2850 = !DILocation(line: 38, column: 23, scope: !2849)
!2851 = !DILocation(line: 38, column: 12, scope: !2849)
!2852 = !DILocation(line: 38, column: 10, scope: !2849)
!2853 = !DILocation(line: 39, column: 24, scope: !2849)
!2854 = !DILocation(line: 39, column: 23, scope: !2849)
!2855 = !DILocation(line: 39, column: 12, scope: !2849)
!2856 = !DILocation(line: 39, column: 10, scope: !2849)
!2857 = !DILocation(line: 41, column: 11, scope: !2858)
!2858 = distinct !DILexicalBlock(scope: !2849, file: !2824, line: 41, column: 11)
!2859 = !DILocation(line: 41, column: 14, scope: !2858)
!2860 = !DILocation(line: 41, column: 11, scope: !2849)
!2861 = !DILocation(line: 42, column: 9, scope: !2858)
!2862 = !DILocation(line: 44, column: 7, scope: !2849)
!2863 = !DILocation(line: 45, column: 7, scope: !2849)
!2864 = !DILocation(line: 46, column: 5, scope: !2849)
!2865 = !DILocation(line: 47, column: 10, scope: !2823)
!2866 = !DILocation(line: 47, column: 16, scope: !2823)
!2867 = !DILocation(line: 47, column: 13, scope: !2823)
!2868 = distinct !{!2868, !2847, !2869}
!2869 = !DILocation(line: 47, column: 18, scope: !2823)
!2870 = !DILocation(line: 50, column: 12, scope: !2871)
!2871 = distinct !DILexicalBlock(scope: !2823, file: !2824, line: 49, column: 7)
!2872 = !DILocation(line: 50, column: 17, scope: !2871)
!2873 = !DILocation(line: 50, column: 15, scope: !2871)
!2874 = !DILocation(line: 50, column: 5, scope: !2871)
!2875 = !DILocation(line: 56, column: 1, scope: !2823)
!2876 = !DILocalVariable(name: "s1", arg: 1, scope: !2877, file: !2824, line: 27, type: !6)
!2877 = distinct !DISubprogram(name: "c_strcasecmp", scope: !2824, file: !2824, line: 27, type: !2825, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2878, retainedNodes: !4)
!2878 = distinct !DICompileUnit(language: DW_LANG_C99, file: !126, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !127, nameTableKind: None)
!2879 = !DILocalVariable(name: "s2", arg: 2, scope: !2877, file: !2824, line: 27, type: !6)
!2880 = !DILocalVariable(name: "p1", scope: !2877, file: !2824, line: 29, type: !128)
!2881 = !DILocalVariable(name: "p2", scope: !2877, file: !2824, line: 30, type: !128)
!2882 = !DILocalVariable(name: "c1", scope: !2877, file: !2824, line: 31, type: !130)
!2883 = !DILocalVariable(name: "c2", scope: !2877, file: !2824, line: 31, type: !130)
!2884 = distinct !DISubprogram(name: "close_stream", scope: !2885, file: !2885, line: 56, type: !2886, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !131, retainedNodes: !4)
!2885 = !DIFile(filename: "lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2886 = !DISubroutineType(types: !2887)
!2887 = !{!25, !2888}
!2888 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2889, size: 64)
!2889 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2256, line: 7, baseType: !2890)
!2890 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2258, line: 49, size: 1728, elements: !2891)
!2891 = !{!2892, !2893, !2894, !2895, !2896, !2897, !2898, !2899, !2900, !2901, !2902, !2903, !2904, !2905, !2907, !2908, !2909, !2910, !2911, !2912, !2913, !2914, !2915, !2916, !2917, !2918, !2919, !2920, !2921}
!2892 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2890, file: !2258, line: 51, baseType: !25, size: 32)
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2890, file: !2258, line: 54, baseType: !32, size: 64, offset: 64)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2890, file: !2258, line: 55, baseType: !32, size: 64, offset: 128)
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2890, file: !2258, line: 56, baseType: !32, size: 64, offset: 192)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2890, file: !2258, line: 57, baseType: !32, size: 64, offset: 256)
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2890, file: !2258, line: 58, baseType: !32, size: 64, offset: 320)
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2890, file: !2258, line: 59, baseType: !32, size: 64, offset: 384)
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2890, file: !2258, line: 60, baseType: !32, size: 64, offset: 448)
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2890, file: !2258, line: 61, baseType: !32, size: 64, offset: 512)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2890, file: !2258, line: 64, baseType: !32, size: 64, offset: 576)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2890, file: !2258, line: 65, baseType: !32, size: 64, offset: 640)
!2903 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2890, file: !2258, line: 66, baseType: !32, size: 64, offset: 704)
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2890, file: !2258, line: 68, baseType: !2273, size: 64, offset: 768)
!2905 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2890, file: !2258, line: 70, baseType: !2906, size: 64, offset: 832)
!2906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2890, size: 64)
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2890, file: !2258, line: 72, baseType: !25, size: 32, offset: 896)
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2890, file: !2258, line: 73, baseType: !25, size: 32, offset: 928)
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2890, file: !2258, line: 74, baseType: !2280, size: 64, offset: 960)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2890, file: !2258, line: 77, baseType: !56, size: 16, offset: 1024)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2890, file: !2258, line: 78, baseType: !2285, size: 8, offset: 1040)
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2890, file: !2258, line: 79, baseType: !2287, size: 8, offset: 1048)
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2890, file: !2258, line: 81, baseType: !2291, size: 64, offset: 1088)
!2914 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2890, file: !2258, line: 89, baseType: !2294, size: 64, offset: 1152)
!2915 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2890, file: !2258, line: 91, baseType: !2296, size: 64, offset: 1216)
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2890, file: !2258, line: 92, baseType: !2299, size: 64, offset: 1280)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2890, file: !2258, line: 93, baseType: !2906, size: 64, offset: 1344)
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2890, file: !2258, line: 94, baseType: !31, size: 64, offset: 1408)
!2919 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2890, file: !2258, line: 95, baseType: !57, size: 64, offset: 1472)
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2890, file: !2258, line: 96, baseType: !25, size: 32, offset: 1536)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2890, file: !2258, line: 98, baseType: !2306, size: 160, offset: 1568)
!2922 = !DILocalVariable(name: "stream", arg: 1, scope: !2884, file: !2885, line: 56, type: !2888)
!2923 = !DILocation(line: 56, column: 21, scope: !2884)
!2924 = !DILocalVariable(name: "some_pending", scope: !2884, file: !2885, line: 58, type: !2925)
!2925 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !17)
!2926 = !DILocation(line: 58, column: 14, scope: !2884)
!2927 = !DILocation(line: 58, column: 42, scope: !2884)
!2928 = !DILocation(line: 58, column: 30, scope: !2884)
!2929 = !DILocation(line: 58, column: 50, scope: !2884)
!2930 = !DILocalVariable(name: "prev_fail", scope: !2884, file: !2885, line: 59, type: !2925)
!2931 = !DILocation(line: 59, column: 14, scope: !2884)
!2932 = !DILocation(line: 59, column: 27, scope: !2884)
!2933 = !DILocation(line: 59, column: 43, scope: !2884)
!2934 = !DILocalVariable(name: "fclose_fail", scope: !2884, file: !2885, line: 60, type: !2925)
!2935 = !DILocation(line: 60, column: 14, scope: !2884)
!2936 = !DILocation(line: 60, column: 37, scope: !2884)
!2937 = !DILocation(line: 60, column: 29, scope: !2884)
!2938 = !DILocation(line: 60, column: 45, scope: !2884)
!2939 = !DILocation(line: 70, column: 7, scope: !2940)
!2940 = distinct !DILexicalBlock(scope: !2884, file: !2885, line: 70, column: 7)
!2941 = !DILocation(line: 70, column: 17, scope: !2940)
!2942 = !DILocation(line: 70, column: 21, scope: !2940)
!2943 = !DILocation(line: 70, column: 33, scope: !2940)
!2944 = !DILocation(line: 70, column: 37, scope: !2940)
!2945 = !DILocation(line: 70, column: 50, scope: !2940)
!2946 = !DILocation(line: 70, column: 53, scope: !2940)
!2947 = !DILocation(line: 70, column: 59, scope: !2940)
!2948 = !DILocation(line: 70, column: 7, scope: !2884)
!2949 = !DILocation(line: 72, column: 13, scope: !2950)
!2950 = distinct !DILexicalBlock(scope: !2951, file: !2885, line: 72, column: 11)
!2951 = distinct !DILexicalBlock(scope: !2940, file: !2885, line: 71, column: 5)
!2952 = !DILocation(line: 72, column: 11, scope: !2951)
!2953 = !DILocation(line: 73, column: 9, scope: !2950)
!2954 = !DILocation(line: 73, column: 15, scope: !2950)
!2955 = !DILocation(line: 74, column: 7, scope: !2951)
!2956 = !DILocation(line: 77, column: 3, scope: !2884)
!2957 = !DILocation(line: 78, column: 1, scope: !2884)
!2958 = !DILocalVariable(name: "stream", arg: 1, scope: !2959, file: !2885, line: 56, type: !2962)
!2959 = distinct !DISubprogram(name: "close_stream", scope: !2885, file: !2885, line: 56, type: !2960, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2996, retainedNodes: !4)
!2960 = !DISubroutineType(types: !2961)
!2961 = !{!25, !2962}
!2962 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2963, size: 64)
!2963 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2256, line: 7, baseType: !2964)
!2964 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2258, line: 49, size: 1728, elements: !2965)
!2965 = !{!2966, !2967, !2968, !2969, !2970, !2971, !2972, !2973, !2974, !2975, !2976, !2977, !2978, !2979, !2981, !2982, !2983, !2984, !2985, !2986, !2987, !2988, !2989, !2990, !2991, !2992, !2993, !2994, !2995}
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2964, file: !2258, line: 51, baseType: !25, size: 32)
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2964, file: !2258, line: 54, baseType: !32, size: 64, offset: 64)
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2964, file: !2258, line: 55, baseType: !32, size: 64, offset: 128)
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2964, file: !2258, line: 56, baseType: !32, size: 64, offset: 192)
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2964, file: !2258, line: 57, baseType: !32, size: 64, offset: 256)
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2964, file: !2258, line: 58, baseType: !32, size: 64, offset: 320)
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2964, file: !2258, line: 59, baseType: !32, size: 64, offset: 384)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2964, file: !2258, line: 60, baseType: !32, size: 64, offset: 448)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2964, file: !2258, line: 61, baseType: !32, size: 64, offset: 512)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2964, file: !2258, line: 64, baseType: !32, size: 64, offset: 576)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2964, file: !2258, line: 65, baseType: !32, size: 64, offset: 640)
!2977 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2964, file: !2258, line: 66, baseType: !32, size: 64, offset: 704)
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2964, file: !2258, line: 68, baseType: !2273, size: 64, offset: 768)
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2964, file: !2258, line: 70, baseType: !2980, size: 64, offset: 832)
!2980 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2964, size: 64)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2964, file: !2258, line: 72, baseType: !25, size: 32, offset: 896)
!2982 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2964, file: !2258, line: 73, baseType: !25, size: 32, offset: 928)
!2983 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2964, file: !2258, line: 74, baseType: !2280, size: 64, offset: 960)
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2964, file: !2258, line: 77, baseType: !56, size: 16, offset: 1024)
!2985 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2964, file: !2258, line: 78, baseType: !2285, size: 8, offset: 1040)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2964, file: !2258, line: 79, baseType: !2287, size: 8, offset: 1048)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2964, file: !2258, line: 81, baseType: !2291, size: 64, offset: 1088)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2964, file: !2258, line: 89, baseType: !2294, size: 64, offset: 1152)
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2964, file: !2258, line: 91, baseType: !2296, size: 64, offset: 1216)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2964, file: !2258, line: 92, baseType: !2299, size: 64, offset: 1280)
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2964, file: !2258, line: 93, baseType: !2980, size: 64, offset: 1344)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2964, file: !2258, line: 94, baseType: !31, size: 64, offset: 1408)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2964, file: !2258, line: 95, baseType: !57, size: 64, offset: 1472)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2964, file: !2258, line: 96, baseType: !25, size: 32, offset: 1536)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2964, file: !2258, line: 98, baseType: !2306, size: 160, offset: 1568)
!2996 = distinct !DICompileUnit(language: DW_LANG_C99, file: !132, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!2997 = !DILocalVariable(name: "some_pending", scope: !2959, file: !2885, line: 58, type: !2925)
!2998 = !DILocalVariable(name: "prev_fail", scope: !2959, file: !2885, line: 59, type: !2925)
!2999 = !DILocalVariable(name: "fclose_fail", scope: !2959, file: !2885, line: 60, type: !2925)
!3000 = distinct !DISubprogram(name: "hard_locale", scope: !3001, file: !3001, line: 27, type: !3002, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!3001 = !DIFile(filename: "lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3002 = !DISubroutineType(types: !3003)
!3003 = !{!17, !25}
!3004 = !DILocalVariable(name: "category", arg: 1, scope: !3000, file: !3001, line: 27, type: !25)
!3005 = !DILocation(line: 27, column: 18, scope: !3000)
!3006 = !DILocalVariable(name: "locale", scope: !3000, file: !3001, line: 29, type: !3007)
!3007 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2056, elements: !3008)
!3008 = !{!3009}
!3009 = !DISubrange(count: 257)
!3010 = !DILocation(line: 29, column: 8, scope: !3000)
!3011 = !DILocation(line: 31, column: 25, scope: !3012)
!3012 = distinct !DILexicalBlock(scope: !3000, file: !3001, line: 31, column: 7)
!3013 = !DILocation(line: 31, column: 35, scope: !3012)
!3014 = !DILocation(line: 31, column: 7, scope: !3012)
!3015 = !DILocation(line: 31, column: 7, scope: !3000)
!3016 = !DILocation(line: 32, column: 5, scope: !3012)
!3017 = !DILocation(line: 34, column: 20, scope: !3000)
!3018 = !DILocation(line: 34, column: 12, scope: !3000)
!3019 = !DILocation(line: 34, column: 33, scope: !3000)
!3020 = !DILocation(line: 34, column: 38, scope: !3000)
!3021 = !DILocation(line: 34, column: 49, scope: !3000)
!3022 = !DILocation(line: 34, column: 41, scope: !3000)
!3023 = !DILocation(line: 34, column: 66, scope: !3000)
!3024 = !DILocation(line: 34, column: 10, scope: !3000)
!3025 = !DILocation(line: 34, column: 3, scope: !3000)
!3026 = !DILocation(line: 35, column: 1, scope: !3000)
!3027 = !DILocalVariable(name: "category", arg: 1, scope: !3028, file: !3001, line: 27, type: !25)
!3028 = distinct !DISubprogram(name: "hard_locale", scope: !3001, file: !3001, line: 27, type: !3002, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3029, retainedNodes: !4)
!3029 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3030 = !DILocalVariable(name: "locale", scope: !3028, file: !3001, line: 29, type: !3007)
!3031 = distinct !DISubprogram(name: "locale_charset", scope: !3032, file: !3032, line: 831, type: !3033, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !135, retainedNodes: !4)
!3032 = !DIFile(filename: "lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3033 = !DISubroutineType(types: !3034)
!3034 = !{!6}
!3035 = !DILocalVariable(name: "codeset", scope: !3031, file: !3032, line: 833, type: !6)
!3036 = !DILocation(line: 833, column: 15, scope: !3031)
!3037 = !DILocation(line: 847, column: 13, scope: !3031)
!3038 = !DILocation(line: 847, column: 11, scope: !3031)
!3039 = !DILocation(line: 911, column: 7, scope: !3040)
!3040 = distinct !DILexicalBlock(scope: !3031, file: !3032, line: 911, column: 7)
!3041 = !DILocation(line: 911, column: 15, scope: !3040)
!3042 = !DILocation(line: 911, column: 7, scope: !3031)
!3043 = !DILocation(line: 913, column: 13, scope: !3040)
!3044 = !DILocation(line: 913, column: 5, scope: !3040)
!3045 = !DILocation(line: 1070, column: 13, scope: !3046)
!3046 = distinct !DILexicalBlock(scope: !3047, file: !3032, line: 1070, column: 13)
!3047 = distinct !DILexicalBlock(scope: !3048, file: !3032, line: 1060, column: 7)
!3048 = distinct !DILexicalBlock(scope: !3031, file: !3032, line: 1019, column: 3)
!3049 = !DILocation(line: 1070, column: 24, scope: !3046)
!3050 = !DILocation(line: 1070, column: 13, scope: !3047)
!3051 = !DILocation(line: 1071, column: 19, scope: !3046)
!3052 = !DILocation(line: 1071, column: 11, scope: !3046)
!3053 = !DILocation(line: 1158, column: 10, scope: !3031)
!3054 = !DILocation(line: 1158, column: 3, scope: !3031)
!3055 = !DILocalVariable(name: "codeset", scope: !3056, file: !3032, line: 833, type: !6)
!3056 = distinct !DISubprogram(name: "locale_charset", scope: !3032, file: !3032, line: 831, type: !3033, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3057, retainedNodes: !4)
!3057 = distinct !DICompileUnit(language: DW_LANG_C99, file: !136, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!3058 = distinct !DISubprogram(name: "setlocale_null_r", scope: !3059, file: !3059, line: 269, type: !3060, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !137, retainedNodes: !4)
!3059 = !DIFile(filename: "lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3060 = !DISubroutineType(types: !3061)
!3061 = !{!25, !25, !32, !57}
!3062 = !DILocalVariable(name: "category", arg: 1, scope: !3058, file: !3059, line: 269, type: !25)
!3063 = !DILocation(line: 269, column: 23, scope: !3058)
!3064 = !DILocalVariable(name: "buf", arg: 2, scope: !3058, file: !3059, line: 269, type: !32)
!3065 = !DILocation(line: 269, column: 39, scope: !3058)
!3066 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3058, file: !3059, line: 269, type: !57)
!3067 = !DILocation(line: 269, column: 51, scope: !3058)
!3068 = !DILocation(line: 274, column: 35, scope: !3058)
!3069 = !DILocation(line: 274, column: 45, scope: !3058)
!3070 = !DILocation(line: 274, column: 50, scope: !3058)
!3071 = !DILocation(line: 274, column: 10, scope: !3058)
!3072 = !DILocation(line: 274, column: 3, scope: !3058)
!3073 = !DILocalVariable(name: "category", arg: 1, scope: !3074, file: !3059, line: 269, type: !25)
!3074 = distinct !DISubprogram(name: "setlocale_null_r", scope: !3059, file: !3059, line: 269, type: !3060, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3075, retainedNodes: !4)
!3075 = distinct !DICompileUnit(language: DW_LANG_C99, file: !138, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!3076 = !DILocalVariable(name: "buf", arg: 2, scope: !3074, file: !3059, line: 269, type: !32)
!3077 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3074, file: !3059, line: 269, type: !57)
!3078 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !3059, file: !3059, line: 91, type: !3060, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !4)
!3079 = !DILocalVariable(name: "category", arg: 1, scope: !3078, file: !3059, line: 91, type: !25)
!3080 = !DILocation(line: 91, column: 30, scope: !3078)
!3081 = !DILocalVariable(name: "buf", arg: 2, scope: !3078, file: !3059, line: 91, type: !32)
!3082 = !DILocation(line: 91, column: 46, scope: !3078)
!3083 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3078, file: !3059, line: 91, type: !57)
!3084 = !DILocation(line: 91, column: 58, scope: !3078)
!3085 = !DILocalVariable(name: "result", scope: !3078, file: !3059, line: 140, type: !6)
!3086 = !DILocation(line: 140, column: 15, scope: !3078)
!3087 = !DILocation(line: 140, column: 51, scope: !3078)
!3088 = !DILocation(line: 140, column: 24, scope: !3078)
!3089 = !DILocation(line: 142, column: 7, scope: !3090)
!3090 = distinct !DILexicalBlock(scope: !3078, file: !3059, line: 142, column: 7)
!3091 = !DILocation(line: 142, column: 14, scope: !3090)
!3092 = !DILocation(line: 142, column: 7, scope: !3078)
!3093 = !DILocation(line: 145, column: 11, scope: !3094)
!3094 = distinct !DILexicalBlock(scope: !3095, file: !3059, line: 145, column: 11)
!3095 = distinct !DILexicalBlock(scope: !3090, file: !3059, line: 143, column: 5)
!3096 = !DILocation(line: 145, column: 19, scope: !3094)
!3097 = !DILocation(line: 145, column: 11, scope: !3095)
!3098 = !DILocation(line: 149, column: 9, scope: !3094)
!3099 = !DILocation(line: 149, column: 16, scope: !3094)
!3100 = !DILocation(line: 150, column: 7, scope: !3095)
!3101 = !DILocalVariable(name: "length", scope: !3102, file: !3059, line: 154, type: !57)
!3102 = distinct !DILexicalBlock(scope: !3090, file: !3059, line: 153, column: 5)
!3103 = !DILocation(line: 154, column: 14, scope: !3102)
!3104 = !DILocation(line: 154, column: 31, scope: !3102)
!3105 = !DILocation(line: 154, column: 23, scope: !3102)
!3106 = !DILocation(line: 155, column: 11, scope: !3107)
!3107 = distinct !DILexicalBlock(scope: !3102, file: !3059, line: 155, column: 11)
!3108 = !DILocation(line: 155, column: 20, scope: !3107)
!3109 = !DILocation(line: 155, column: 18, scope: !3107)
!3110 = !DILocation(line: 155, column: 11, scope: !3102)
!3111 = !DILocation(line: 157, column: 19, scope: !3112)
!3112 = distinct !DILexicalBlock(scope: !3107, file: !3059, line: 156, column: 9)
!3113 = !DILocation(line: 157, column: 24, scope: !3112)
!3114 = !DILocation(line: 157, column: 32, scope: !3112)
!3115 = !DILocation(line: 157, column: 39, scope: !3112)
!3116 = !DILocation(line: 157, column: 11, scope: !3112)
!3117 = !DILocation(line: 158, column: 11, scope: !3112)
!3118 = !DILocation(line: 162, column: 15, scope: !3119)
!3119 = distinct !DILexicalBlock(scope: !3120, file: !3059, line: 162, column: 15)
!3120 = distinct !DILexicalBlock(scope: !3107, file: !3059, line: 161, column: 9)
!3121 = !DILocation(line: 162, column: 23, scope: !3119)
!3122 = !DILocation(line: 162, column: 15, scope: !3120)
!3123 = !DILocation(line: 167, column: 23, scope: !3124)
!3124 = distinct !DILexicalBlock(scope: !3119, file: !3059, line: 163, column: 13)
!3125 = !DILocation(line: 167, column: 28, scope: !3124)
!3126 = !DILocation(line: 167, column: 36, scope: !3124)
!3127 = !DILocation(line: 167, column: 44, scope: !3124)
!3128 = !DILocation(line: 167, column: 15, scope: !3124)
!3129 = !DILocation(line: 168, column: 15, scope: !3124)
!3130 = !DILocation(line: 168, column: 19, scope: !3124)
!3131 = !DILocation(line: 168, column: 27, scope: !3124)
!3132 = !DILocation(line: 168, column: 32, scope: !3124)
!3133 = !DILocation(line: 169, column: 13, scope: !3124)
!3134 = !DILocation(line: 170, column: 11, scope: !3120)
!3135 = !DILocation(line: 174, column: 1, scope: !3078)
!3136 = !DILocalVariable(name: "category", arg: 1, scope: !3137, file: !3059, line: 91, type: !25)
!3137 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !3059, file: !3059, line: 91, type: !3060, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3138, retainedNodes: !4)
!3138 = distinct !DICompileUnit(language: DW_LANG_C99, file: !138, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!3139 = !DILocalVariable(name: "buf", arg: 2, scope: !3137, file: !3059, line: 91, type: !32)
!3140 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3137, file: !3059, line: 91, type: !57)
!3141 = !DILocalVariable(name: "result", scope: !3137, file: !3059, line: 140, type: !6)
!3142 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !3059, file: !3059, line: 60, type: !3143, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !4)
!3143 = !DISubroutineType(types: !3144)
!3144 = !{!6, !25}
!3145 = !DILocalVariable(name: "category", arg: 1, scope: !3142, file: !3059, line: 60, type: !25)
!3146 = !DILocation(line: 60, column: 32, scope: !3142)
!3147 = !DILocalVariable(name: "result", scope: !3142, file: !3059, line: 62, type: !6)
!3148 = !DILocation(line: 62, column: 15, scope: !3142)
!3149 = !DILocation(line: 62, column: 35, scope: !3142)
!3150 = !DILocation(line: 62, column: 24, scope: !3142)
!3151 = !DILocation(line: 87, column: 10, scope: !3142)
!3152 = !DILocation(line: 87, column: 3, scope: !3142)
!3153 = !DILocalVariable(name: "category", arg: 1, scope: !3154, file: !3059, line: 60, type: !25)
!3154 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !3059, file: !3059, line: 60, type: !3143, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3155, retainedNodes: !4)
!3155 = distinct !DICompileUnit(language: DW_LANG_C99, file: !138, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!3156 = !DILocalVariable(name: "result", scope: !3154, file: !3059, line: 62, type: !6)
!3157 = distinct !DISubprogram(name: "rpl_fclose", scope: !3158, file: !3158, line: 58, type: !3159, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !139, retainedNodes: !4)
!3158 = !DIFile(filename: "lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3159 = !DISubroutineType(types: !3160)
!3160 = !{!25, !3161}
!3161 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3162, size: 64)
!3162 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2256, line: 7, baseType: !3163)
!3163 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2258, line: 49, size: 1728, elements: !3164)
!3164 = !{!3165, !3166, !3167, !3168, !3169, !3170, !3171, !3172, !3173, !3174, !3175, !3176, !3177, !3178, !3180, !3181, !3182, !3183, !3184, !3185, !3186, !3187, !3188, !3189, !3190, !3191, !3192, !3193, !3194}
!3165 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3163, file: !2258, line: 51, baseType: !25, size: 32)
!3166 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3163, file: !2258, line: 54, baseType: !32, size: 64, offset: 64)
!3167 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3163, file: !2258, line: 55, baseType: !32, size: 64, offset: 128)
!3168 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3163, file: !2258, line: 56, baseType: !32, size: 64, offset: 192)
!3169 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3163, file: !2258, line: 57, baseType: !32, size: 64, offset: 256)
!3170 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3163, file: !2258, line: 58, baseType: !32, size: 64, offset: 320)
!3171 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3163, file: !2258, line: 59, baseType: !32, size: 64, offset: 384)
!3172 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3163, file: !2258, line: 60, baseType: !32, size: 64, offset: 448)
!3173 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3163, file: !2258, line: 61, baseType: !32, size: 64, offset: 512)
!3174 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3163, file: !2258, line: 64, baseType: !32, size: 64, offset: 576)
!3175 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3163, file: !2258, line: 65, baseType: !32, size: 64, offset: 640)
!3176 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3163, file: !2258, line: 66, baseType: !32, size: 64, offset: 704)
!3177 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3163, file: !2258, line: 68, baseType: !2273, size: 64, offset: 768)
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3163, file: !2258, line: 70, baseType: !3179, size: 64, offset: 832)
!3179 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3163, size: 64)
!3180 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3163, file: !2258, line: 72, baseType: !25, size: 32, offset: 896)
!3181 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3163, file: !2258, line: 73, baseType: !25, size: 32, offset: 928)
!3182 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3163, file: !2258, line: 74, baseType: !2280, size: 64, offset: 960)
!3183 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3163, file: !2258, line: 77, baseType: !56, size: 16, offset: 1024)
!3184 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3163, file: !2258, line: 78, baseType: !2285, size: 8, offset: 1040)
!3185 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3163, file: !2258, line: 79, baseType: !2287, size: 8, offset: 1048)
!3186 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3163, file: !2258, line: 81, baseType: !2291, size: 64, offset: 1088)
!3187 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3163, file: !2258, line: 89, baseType: !2294, size: 64, offset: 1152)
!3188 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3163, file: !2258, line: 91, baseType: !2296, size: 64, offset: 1216)
!3189 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3163, file: !2258, line: 92, baseType: !2299, size: 64, offset: 1280)
!3190 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3163, file: !2258, line: 93, baseType: !3179, size: 64, offset: 1344)
!3191 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3163, file: !2258, line: 94, baseType: !31, size: 64, offset: 1408)
!3192 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3163, file: !2258, line: 95, baseType: !57, size: 64, offset: 1472)
!3193 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3163, file: !2258, line: 96, baseType: !25, size: 32, offset: 1536)
!3194 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3163, file: !2258, line: 98, baseType: !2306, size: 160, offset: 1568)
!3195 = !DILocalVariable(name: "fp", arg: 1, scope: !3157, file: !3158, line: 58, type: !3161)
!3196 = !DILocation(line: 58, column: 19, scope: !3157)
!3197 = !DILocalVariable(name: "saved_errno", scope: !3157, file: !3158, line: 60, type: !25)
!3198 = !DILocation(line: 60, column: 7, scope: !3157)
!3199 = !DILocalVariable(name: "fd", scope: !3157, file: !3158, line: 61, type: !25)
!3200 = !DILocation(line: 61, column: 7, scope: !3157)
!3201 = !DILocalVariable(name: "result", scope: !3157, file: !3158, line: 62, type: !25)
!3202 = !DILocation(line: 62, column: 7, scope: !3157)
!3203 = !DILocation(line: 65, column: 16, scope: !3157)
!3204 = !DILocation(line: 65, column: 8, scope: !3157)
!3205 = !DILocation(line: 65, column: 6, scope: !3157)
!3206 = !DILocation(line: 66, column: 7, scope: !3207)
!3207 = distinct !DILexicalBlock(scope: !3157, file: !3158, line: 66, column: 7)
!3208 = !DILocation(line: 66, column: 10, scope: !3207)
!3209 = !DILocation(line: 66, column: 7, scope: !3157)
!3210 = !DILocation(line: 67, column: 28, scope: !3207)
!3211 = !DILocation(line: 67, column: 12, scope: !3207)
!3212 = !DILocation(line: 67, column: 5, scope: !3207)
!3213 = !DILocation(line: 72, column: 9, scope: !3214)
!3214 = distinct !DILexicalBlock(scope: !3157, file: !3158, line: 72, column: 7)
!3215 = !DILocation(line: 72, column: 23, scope: !3214)
!3216 = !DILocation(line: 72, column: 41, scope: !3214)
!3217 = !DILocation(line: 72, column: 33, scope: !3214)
!3218 = !DILocation(line: 72, column: 26, scope: !3214)
!3219 = !DILocation(line: 72, column: 59, scope: !3214)
!3220 = !DILocation(line: 73, column: 7, scope: !3214)
!3221 = !DILocation(line: 73, column: 18, scope: !3214)
!3222 = !DILocation(line: 73, column: 10, scope: !3214)
!3223 = !DILocation(line: 72, column: 7, scope: !3157)
!3224 = !DILocation(line: 74, column: 19, scope: !3214)
!3225 = !DILocation(line: 74, column: 17, scope: !3214)
!3226 = !DILocation(line: 74, column: 5, scope: !3214)
!3227 = !DILocation(line: 100, column: 28, scope: !3157)
!3228 = !DILocation(line: 100, column: 12, scope: !3157)
!3229 = !DILocation(line: 100, column: 10, scope: !3157)
!3230 = !DILocation(line: 105, column: 7, scope: !3231)
!3231 = distinct !DILexicalBlock(scope: !3157, file: !3158, line: 105, column: 7)
!3232 = !DILocation(line: 105, column: 19, scope: !3231)
!3233 = !DILocation(line: 105, column: 7, scope: !3157)
!3234 = !DILocation(line: 107, column: 15, scope: !3235)
!3235 = distinct !DILexicalBlock(scope: !3231, file: !3158, line: 106, column: 5)
!3236 = !DILocation(line: 107, column: 7, scope: !3235)
!3237 = !DILocation(line: 107, column: 13, scope: !3235)
!3238 = !DILocation(line: 108, column: 14, scope: !3235)
!3239 = !DILocation(line: 109, column: 5, scope: !3235)
!3240 = !DILocation(line: 111, column: 10, scope: !3157)
!3241 = !DILocation(line: 111, column: 3, scope: !3157)
!3242 = !DILocation(line: 112, column: 1, scope: !3157)
!3243 = !DILocalVariable(name: "fp", arg: 1, scope: !3244, file: !3158, line: 58, type: !3247)
!3244 = distinct !DISubprogram(name: "rpl_fclose", scope: !3158, file: !3158, line: 58, type: !3245, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3281, retainedNodes: !4)
!3245 = !DISubroutineType(types: !3246)
!3246 = !{!25, !3247}
!3247 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3248, size: 64)
!3248 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2256, line: 7, baseType: !3249)
!3249 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2258, line: 49, size: 1728, elements: !3250)
!3250 = !{!3251, !3252, !3253, !3254, !3255, !3256, !3257, !3258, !3259, !3260, !3261, !3262, !3263, !3264, !3266, !3267, !3268, !3269, !3270, !3271, !3272, !3273, !3274, !3275, !3276, !3277, !3278, !3279, !3280}
!3251 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3249, file: !2258, line: 51, baseType: !25, size: 32)
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3249, file: !2258, line: 54, baseType: !32, size: 64, offset: 64)
!3253 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3249, file: !2258, line: 55, baseType: !32, size: 64, offset: 128)
!3254 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3249, file: !2258, line: 56, baseType: !32, size: 64, offset: 192)
!3255 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3249, file: !2258, line: 57, baseType: !32, size: 64, offset: 256)
!3256 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3249, file: !2258, line: 58, baseType: !32, size: 64, offset: 320)
!3257 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3249, file: !2258, line: 59, baseType: !32, size: 64, offset: 384)
!3258 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3249, file: !2258, line: 60, baseType: !32, size: 64, offset: 448)
!3259 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3249, file: !2258, line: 61, baseType: !32, size: 64, offset: 512)
!3260 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3249, file: !2258, line: 64, baseType: !32, size: 64, offset: 576)
!3261 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3249, file: !2258, line: 65, baseType: !32, size: 64, offset: 640)
!3262 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3249, file: !2258, line: 66, baseType: !32, size: 64, offset: 704)
!3263 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3249, file: !2258, line: 68, baseType: !2273, size: 64, offset: 768)
!3264 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3249, file: !2258, line: 70, baseType: !3265, size: 64, offset: 832)
!3265 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3249, size: 64)
!3266 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3249, file: !2258, line: 72, baseType: !25, size: 32, offset: 896)
!3267 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3249, file: !2258, line: 73, baseType: !25, size: 32, offset: 928)
!3268 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3249, file: !2258, line: 74, baseType: !2280, size: 64, offset: 960)
!3269 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3249, file: !2258, line: 77, baseType: !56, size: 16, offset: 1024)
!3270 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3249, file: !2258, line: 78, baseType: !2285, size: 8, offset: 1040)
!3271 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3249, file: !2258, line: 79, baseType: !2287, size: 8, offset: 1048)
!3272 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3249, file: !2258, line: 81, baseType: !2291, size: 64, offset: 1088)
!3273 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3249, file: !2258, line: 89, baseType: !2294, size: 64, offset: 1152)
!3274 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3249, file: !2258, line: 91, baseType: !2296, size: 64, offset: 1216)
!3275 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3249, file: !2258, line: 92, baseType: !2299, size: 64, offset: 1280)
!3276 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3249, file: !2258, line: 93, baseType: !3265, size: 64, offset: 1344)
!3277 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3249, file: !2258, line: 94, baseType: !31, size: 64, offset: 1408)
!3278 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3249, file: !2258, line: 95, baseType: !57, size: 64, offset: 1472)
!3279 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3249, file: !2258, line: 96, baseType: !25, size: 32, offset: 1536)
!3280 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3249, file: !2258, line: 98, baseType: !2306, size: 160, offset: 1568)
!3281 = distinct !DICompileUnit(language: DW_LANG_C99, file: !140, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3282 = !DILocalVariable(name: "saved_errno", scope: !3244, file: !3158, line: 60, type: !25)
!3283 = !DILocalVariable(name: "fd", scope: !3244, file: !3158, line: 61, type: !25)
!3284 = !DILocalVariable(name: "result", scope: !3244, file: !3158, line: 62, type: !25)
!3285 = distinct !DISubprogram(name: "rpl_fflush", scope: !3286, file: !3286, line: 129, type: !3287, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !141, retainedNodes: !4)
!3286 = !DIFile(filename: "lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3287 = !DISubroutineType(types: !3288)
!3288 = !{!25, !3289}
!3289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3290, size: 64)
!3290 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2256, line: 7, baseType: !3291)
!3291 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2258, line: 49, size: 1728, elements: !3292)
!3292 = !{!3293, !3294, !3295, !3296, !3297, !3298, !3299, !3300, !3301, !3302, !3303, !3304, !3305, !3306, !3308, !3309, !3310, !3311, !3312, !3313, !3314, !3315, !3316, !3317, !3318, !3319, !3320, !3321, !3322}
!3293 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3291, file: !2258, line: 51, baseType: !25, size: 32)
!3294 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3291, file: !2258, line: 54, baseType: !32, size: 64, offset: 64)
!3295 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3291, file: !2258, line: 55, baseType: !32, size: 64, offset: 128)
!3296 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3291, file: !2258, line: 56, baseType: !32, size: 64, offset: 192)
!3297 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3291, file: !2258, line: 57, baseType: !32, size: 64, offset: 256)
!3298 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3291, file: !2258, line: 58, baseType: !32, size: 64, offset: 320)
!3299 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3291, file: !2258, line: 59, baseType: !32, size: 64, offset: 384)
!3300 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3291, file: !2258, line: 60, baseType: !32, size: 64, offset: 448)
!3301 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3291, file: !2258, line: 61, baseType: !32, size: 64, offset: 512)
!3302 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3291, file: !2258, line: 64, baseType: !32, size: 64, offset: 576)
!3303 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3291, file: !2258, line: 65, baseType: !32, size: 64, offset: 640)
!3304 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3291, file: !2258, line: 66, baseType: !32, size: 64, offset: 704)
!3305 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3291, file: !2258, line: 68, baseType: !2273, size: 64, offset: 768)
!3306 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3291, file: !2258, line: 70, baseType: !3307, size: 64, offset: 832)
!3307 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3291, size: 64)
!3308 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3291, file: !2258, line: 72, baseType: !25, size: 32, offset: 896)
!3309 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3291, file: !2258, line: 73, baseType: !25, size: 32, offset: 928)
!3310 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3291, file: !2258, line: 74, baseType: !2280, size: 64, offset: 960)
!3311 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3291, file: !2258, line: 77, baseType: !56, size: 16, offset: 1024)
!3312 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3291, file: !2258, line: 78, baseType: !2285, size: 8, offset: 1040)
!3313 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3291, file: !2258, line: 79, baseType: !2287, size: 8, offset: 1048)
!3314 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3291, file: !2258, line: 81, baseType: !2291, size: 64, offset: 1088)
!3315 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3291, file: !2258, line: 89, baseType: !2294, size: 64, offset: 1152)
!3316 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3291, file: !2258, line: 91, baseType: !2296, size: 64, offset: 1216)
!3317 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3291, file: !2258, line: 92, baseType: !2299, size: 64, offset: 1280)
!3318 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3291, file: !2258, line: 93, baseType: !3307, size: 64, offset: 1344)
!3319 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3291, file: !2258, line: 94, baseType: !31, size: 64, offset: 1408)
!3320 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3291, file: !2258, line: 95, baseType: !57, size: 64, offset: 1472)
!3321 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3291, file: !2258, line: 96, baseType: !25, size: 32, offset: 1536)
!3322 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3291, file: !2258, line: 98, baseType: !2306, size: 160, offset: 1568)
!3323 = !DILocalVariable(name: "stream", arg: 1, scope: !3285, file: !3286, line: 129, type: !3289)
!3324 = !DILocation(line: 129, column: 19, scope: !3285)
!3325 = !DILocation(line: 150, column: 7, scope: !3326)
!3326 = distinct !DILexicalBlock(scope: !3285, file: !3286, line: 150, column: 7)
!3327 = !DILocation(line: 150, column: 14, scope: !3326)
!3328 = !DILocation(line: 150, column: 22, scope: !3326)
!3329 = !DILocation(line: 150, column: 27, scope: !3326)
!3330 = !DILocation(line: 150, column: 7, scope: !3285)
!3331 = !DILocation(line: 151, column: 20, scope: !3326)
!3332 = !DILocation(line: 151, column: 12, scope: !3326)
!3333 = !DILocation(line: 151, column: 5, scope: !3326)
!3334 = !DILocation(line: 156, column: 44, scope: !3285)
!3335 = !DILocation(line: 156, column: 3, scope: !3285)
!3336 = !DILocation(line: 158, column: 18, scope: !3285)
!3337 = !DILocation(line: 158, column: 10, scope: !3285)
!3338 = !DILocation(line: 158, column: 3, scope: !3285)
!3339 = !DILocation(line: 235, column: 1, scope: !3285)
!3340 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !3286, file: !3286, line: 41, type: !3341, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !141, retainedNodes: !4)
!3341 = !DISubroutineType(types: !3342)
!3342 = !{null, !3289}
!3343 = !DILocalVariable(name: "fp", arg: 1, scope: !3340, file: !3286, line: 41, type: !3289)
!3344 = !DILocation(line: 41, column: 48, scope: !3340)
!3345 = !DILocation(line: 43, column: 7, scope: !3346)
!3346 = distinct !DILexicalBlock(scope: !3340, file: !3286, line: 43, column: 7)
!3347 = !DILocation(line: 43, column: 11, scope: !3346)
!3348 = !DILocation(line: 43, column: 18, scope: !3346)
!3349 = !DILocation(line: 43, column: 7, scope: !3340)
!3350 = !DILocation(line: 45, column: 13, scope: !3346)
!3351 = !DILocation(line: 45, column: 5, scope: !3346)
!3352 = !DILocation(line: 46, column: 1, scope: !3340)
!3353 = !DILocalVariable(name: "fp", arg: 1, scope: !3354, file: !3286, line: 41, type: !3357)
!3354 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !3286, file: !3286, line: 41, type: !3355, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3391, retainedNodes: !4)
!3355 = !DISubroutineType(types: !3356)
!3356 = !{null, !3357}
!3357 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3358, size: 64)
!3358 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2256, line: 7, baseType: !3359)
!3359 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2258, line: 49, size: 1728, elements: !3360)
!3360 = !{!3361, !3362, !3363, !3364, !3365, !3366, !3367, !3368, !3369, !3370, !3371, !3372, !3373, !3374, !3376, !3377, !3378, !3379, !3380, !3381, !3382, !3383, !3384, !3385, !3386, !3387, !3388, !3389, !3390}
!3361 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3359, file: !2258, line: 51, baseType: !25, size: 32)
!3362 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3359, file: !2258, line: 54, baseType: !32, size: 64, offset: 64)
!3363 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3359, file: !2258, line: 55, baseType: !32, size: 64, offset: 128)
!3364 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3359, file: !2258, line: 56, baseType: !32, size: 64, offset: 192)
!3365 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3359, file: !2258, line: 57, baseType: !32, size: 64, offset: 256)
!3366 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3359, file: !2258, line: 58, baseType: !32, size: 64, offset: 320)
!3367 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3359, file: !2258, line: 59, baseType: !32, size: 64, offset: 384)
!3368 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3359, file: !2258, line: 60, baseType: !32, size: 64, offset: 448)
!3369 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3359, file: !2258, line: 61, baseType: !32, size: 64, offset: 512)
!3370 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3359, file: !2258, line: 64, baseType: !32, size: 64, offset: 576)
!3371 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3359, file: !2258, line: 65, baseType: !32, size: 64, offset: 640)
!3372 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3359, file: !2258, line: 66, baseType: !32, size: 64, offset: 704)
!3373 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3359, file: !2258, line: 68, baseType: !2273, size: 64, offset: 768)
!3374 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3359, file: !2258, line: 70, baseType: !3375, size: 64, offset: 832)
!3375 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3359, size: 64)
!3376 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3359, file: !2258, line: 72, baseType: !25, size: 32, offset: 896)
!3377 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3359, file: !2258, line: 73, baseType: !25, size: 32, offset: 928)
!3378 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3359, file: !2258, line: 74, baseType: !2280, size: 64, offset: 960)
!3379 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3359, file: !2258, line: 77, baseType: !56, size: 16, offset: 1024)
!3380 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3359, file: !2258, line: 78, baseType: !2285, size: 8, offset: 1040)
!3381 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3359, file: !2258, line: 79, baseType: !2287, size: 8, offset: 1048)
!3382 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3359, file: !2258, line: 81, baseType: !2291, size: 64, offset: 1088)
!3383 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3359, file: !2258, line: 89, baseType: !2294, size: 64, offset: 1152)
!3384 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3359, file: !2258, line: 91, baseType: !2296, size: 64, offset: 1216)
!3385 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3359, file: !2258, line: 92, baseType: !2299, size: 64, offset: 1280)
!3386 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3359, file: !2258, line: 93, baseType: !3375, size: 64, offset: 1344)
!3387 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3359, file: !2258, line: 94, baseType: !31, size: 64, offset: 1408)
!3388 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3359, file: !2258, line: 95, baseType: !57, size: 64, offset: 1472)
!3389 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3359, file: !2258, line: 96, baseType: !25, size: 32, offset: 1536)
!3390 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3359, file: !2258, line: 98, baseType: !2306, size: 160, offset: 1568)
!3391 = distinct !DICompileUnit(language: DW_LANG_C99, file: !142, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!3392 = distinct !DISubprogram(name: "rpl_fseeko", scope: !3393, file: !3393, line: 28, type: !3394, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !143, retainedNodes: !4)
!3393 = !DIFile(filename: "lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3394 = !DISubroutineType(types: !3395)
!3395 = !{!25, !3396, !3430, !25}
!3396 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3397, size: 64)
!3397 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2256, line: 7, baseType: !3398)
!3398 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2258, line: 49, size: 1728, elements: !3399)
!3399 = !{!3400, !3401, !3402, !3403, !3404, !3405, !3406, !3407, !3408, !3409, !3410, !3411, !3412, !3413, !3415, !3416, !3417, !3418, !3419, !3420, !3421, !3422, !3423, !3424, !3425, !3426, !3427, !3428, !3429}
!3400 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3398, file: !2258, line: 51, baseType: !25, size: 32)
!3401 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3398, file: !2258, line: 54, baseType: !32, size: 64, offset: 64)
!3402 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3398, file: !2258, line: 55, baseType: !32, size: 64, offset: 128)
!3403 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3398, file: !2258, line: 56, baseType: !32, size: 64, offset: 192)
!3404 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3398, file: !2258, line: 57, baseType: !32, size: 64, offset: 256)
!3405 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3398, file: !2258, line: 58, baseType: !32, size: 64, offset: 320)
!3406 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3398, file: !2258, line: 59, baseType: !32, size: 64, offset: 384)
!3407 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3398, file: !2258, line: 60, baseType: !32, size: 64, offset: 448)
!3408 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3398, file: !2258, line: 61, baseType: !32, size: 64, offset: 512)
!3409 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3398, file: !2258, line: 64, baseType: !32, size: 64, offset: 576)
!3410 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3398, file: !2258, line: 65, baseType: !32, size: 64, offset: 640)
!3411 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3398, file: !2258, line: 66, baseType: !32, size: 64, offset: 704)
!3412 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3398, file: !2258, line: 68, baseType: !2273, size: 64, offset: 768)
!3413 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3398, file: !2258, line: 70, baseType: !3414, size: 64, offset: 832)
!3414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3398, size: 64)
!3415 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3398, file: !2258, line: 72, baseType: !25, size: 32, offset: 896)
!3416 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3398, file: !2258, line: 73, baseType: !25, size: 32, offset: 928)
!3417 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3398, file: !2258, line: 74, baseType: !2280, size: 64, offset: 960)
!3418 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3398, file: !2258, line: 77, baseType: !56, size: 16, offset: 1024)
!3419 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3398, file: !2258, line: 78, baseType: !2285, size: 8, offset: 1040)
!3420 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3398, file: !2258, line: 79, baseType: !2287, size: 8, offset: 1048)
!3421 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3398, file: !2258, line: 81, baseType: !2291, size: 64, offset: 1088)
!3422 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3398, file: !2258, line: 89, baseType: !2294, size: 64, offset: 1152)
!3423 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3398, file: !2258, line: 91, baseType: !2296, size: 64, offset: 1216)
!3424 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3398, file: !2258, line: 92, baseType: !2299, size: 64, offset: 1280)
!3425 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3398, file: !2258, line: 93, baseType: !3414, size: 64, offset: 1344)
!3426 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3398, file: !2258, line: 94, baseType: !31, size: 64, offset: 1408)
!3427 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3398, file: !2258, line: 95, baseType: !57, size: 64, offset: 1472)
!3428 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3398, file: !2258, line: 96, baseType: !25, size: 32, offset: 1536)
!3429 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3398, file: !2258, line: 98, baseType: !2306, size: 160, offset: 1568)
!3430 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !2601, line: 63, baseType: !2280)
!3431 = !DILocalVariable(name: "fp", arg: 1, scope: !3392, file: !3393, line: 28, type: !3396)
!3432 = !DILocation(line: 28, column: 15, scope: !3392)
!3433 = !DILocalVariable(name: "offset", arg: 2, scope: !3392, file: !3393, line: 28, type: !3430)
!3434 = !DILocation(line: 28, column: 25, scope: !3392)
!3435 = !DILocalVariable(name: "whence", arg: 3, scope: !3392, file: !3393, line: 28, type: !25)
!3436 = !DILocation(line: 28, column: 37, scope: !3392)
!3437 = !DILocation(line: 52, column: 7, scope: !3438)
!3438 = distinct !DILexicalBlock(scope: !3392, file: !3393, line: 52, column: 7)
!3439 = !DILocation(line: 52, column: 11, scope: !3438)
!3440 = !DILocation(line: 52, column: 27, scope: !3438)
!3441 = !DILocation(line: 52, column: 31, scope: !3438)
!3442 = !DILocation(line: 52, column: 24, scope: !3438)
!3443 = !DILocation(line: 53, column: 7, scope: !3438)
!3444 = !DILocation(line: 53, column: 10, scope: !3438)
!3445 = !DILocation(line: 53, column: 14, scope: !3438)
!3446 = !DILocation(line: 53, column: 31, scope: !3438)
!3447 = !DILocation(line: 53, column: 35, scope: !3438)
!3448 = !DILocation(line: 53, column: 28, scope: !3438)
!3449 = !DILocation(line: 54, column: 7, scope: !3438)
!3450 = !DILocation(line: 54, column: 10, scope: !3438)
!3451 = !DILocation(line: 54, column: 14, scope: !3438)
!3452 = !DILocation(line: 54, column: 28, scope: !3438)
!3453 = !DILocation(line: 52, column: 7, scope: !3392)
!3454 = !DILocalVariable(name: "pos", scope: !3455, file: !3393, line: 117, type: !3430)
!3455 = distinct !DILexicalBlock(scope: !3438, file: !3393, line: 113, column: 5)
!3456 = !DILocation(line: 117, column: 13, scope: !3455)
!3457 = !DILocation(line: 117, column: 34, scope: !3455)
!3458 = !DILocation(line: 117, column: 26, scope: !3455)
!3459 = !DILocation(line: 117, column: 39, scope: !3455)
!3460 = !DILocation(line: 117, column: 47, scope: !3455)
!3461 = !DILocation(line: 117, column: 19, scope: !3455)
!3462 = !DILocation(line: 118, column: 11, scope: !3463)
!3463 = distinct !DILexicalBlock(scope: !3455, file: !3393, line: 118, column: 11)
!3464 = !DILocation(line: 118, column: 15, scope: !3463)
!3465 = !DILocation(line: 118, column: 11, scope: !3455)
!3466 = !DILocation(line: 124, column: 11, scope: !3467)
!3467 = distinct !DILexicalBlock(scope: !3463, file: !3393, line: 119, column: 9)
!3468 = !DILocation(line: 129, column: 7, scope: !3455)
!3469 = !DILocation(line: 129, column: 11, scope: !3455)
!3470 = !DILocation(line: 129, column: 18, scope: !3455)
!3471 = !DILocation(line: 130, column: 21, scope: !3455)
!3472 = !DILocation(line: 130, column: 7, scope: !3455)
!3473 = !DILocation(line: 130, column: 11, scope: !3455)
!3474 = !DILocation(line: 130, column: 19, scope: !3455)
!3475 = !DILocation(line: 161, column: 7, scope: !3455)
!3476 = !DILocation(line: 163, column: 18, scope: !3392)
!3477 = !DILocation(line: 163, column: 22, scope: !3392)
!3478 = !DILocation(line: 163, column: 30, scope: !3392)
!3479 = !DILocation(line: 163, column: 10, scope: !3392)
!3480 = !DILocation(line: 163, column: 3, scope: !3392)
!3481 = !DILocation(line: 164, column: 1, scope: !3392)
!3482 = !DILocalVariable(name: "fp", arg: 1, scope: !3483, file: !3393, line: 28, type: !3486)
!3483 = distinct !DISubprogram(name: "rpl_fseeko", scope: !3393, file: !3393, line: 28, type: !3484, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3520, retainedNodes: !4)
!3484 = !DISubroutineType(types: !3485)
!3485 = !{!25, !3486, !3430, !25}
!3486 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3487, size: 64)
!3487 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2256, line: 7, baseType: !3488)
!3488 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2258, line: 49, size: 1728, elements: !3489)
!3489 = !{!3490, !3491, !3492, !3493, !3494, !3495, !3496, !3497, !3498, !3499, !3500, !3501, !3502, !3503, !3505, !3506, !3507, !3508, !3509, !3510, !3511, !3512, !3513, !3514, !3515, !3516, !3517, !3518, !3519}
!3490 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3488, file: !2258, line: 51, baseType: !25, size: 32)
!3491 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3488, file: !2258, line: 54, baseType: !32, size: 64, offset: 64)
!3492 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3488, file: !2258, line: 55, baseType: !32, size: 64, offset: 128)
!3493 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3488, file: !2258, line: 56, baseType: !32, size: 64, offset: 192)
!3494 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3488, file: !2258, line: 57, baseType: !32, size: 64, offset: 256)
!3495 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3488, file: !2258, line: 58, baseType: !32, size: 64, offset: 320)
!3496 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3488, file: !2258, line: 59, baseType: !32, size: 64, offset: 384)
!3497 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3488, file: !2258, line: 60, baseType: !32, size: 64, offset: 448)
!3498 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3488, file: !2258, line: 61, baseType: !32, size: 64, offset: 512)
!3499 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3488, file: !2258, line: 64, baseType: !32, size: 64, offset: 576)
!3500 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3488, file: !2258, line: 65, baseType: !32, size: 64, offset: 640)
!3501 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3488, file: !2258, line: 66, baseType: !32, size: 64, offset: 704)
!3502 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3488, file: !2258, line: 68, baseType: !2273, size: 64, offset: 768)
!3503 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3488, file: !2258, line: 70, baseType: !3504, size: 64, offset: 832)
!3504 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3488, size: 64)
!3505 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3488, file: !2258, line: 72, baseType: !25, size: 32, offset: 896)
!3506 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3488, file: !2258, line: 73, baseType: !25, size: 32, offset: 928)
!3507 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3488, file: !2258, line: 74, baseType: !2280, size: 64, offset: 960)
!3508 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3488, file: !2258, line: 77, baseType: !56, size: 16, offset: 1024)
!3509 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3488, file: !2258, line: 78, baseType: !2285, size: 8, offset: 1040)
!3510 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3488, file: !2258, line: 79, baseType: !2287, size: 8, offset: 1048)
!3511 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3488, file: !2258, line: 81, baseType: !2291, size: 64, offset: 1088)
!3512 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3488, file: !2258, line: 89, baseType: !2294, size: 64, offset: 1152)
!3513 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3488, file: !2258, line: 91, baseType: !2296, size: 64, offset: 1216)
!3514 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3488, file: !2258, line: 92, baseType: !2299, size: 64, offset: 1280)
!3515 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3488, file: !2258, line: 93, baseType: !3504, size: 64, offset: 1344)
!3516 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3488, file: !2258, line: 94, baseType: !31, size: 64, offset: 1408)
!3517 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3488, file: !2258, line: 95, baseType: !57, size: 64, offset: 1472)
!3518 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3488, file: !2258, line: 96, baseType: !25, size: 32, offset: 1536)
!3519 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3488, file: !2258, line: 98, baseType: !2306, size: 160, offset: 1568)
!3520 = distinct !DICompileUnit(language: DW_LANG_C99, file: !144, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!3521 = !DILocalVariable(name: "offset", arg: 2, scope: !3483, file: !3393, line: 28, type: !3430)
!3522 = !DILocalVariable(name: "whence", arg: 3, scope: !3483, file: !3393, line: 28, type: !25)
!3523 = distinct !DISubprogram(name: "c_tolower", scope: !3524, file: !3524, line: 337, type: !3525, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !145, retainedNodes: !4)
!3524 = !DIFile(filename: "./lib/c-ctype.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3525 = !DISubroutineType(types: !3526)
!3526 = !{!25, !25}
!3527 = !DILocalVariable(name: "c", arg: 1, scope: !3523, file: !3524, line: 337, type: !25)
!3528 = !DILocation(line: 337, column: 16, scope: !3523)
!3529 = !DILocation(line: 339, column: 11, scope: !3523)
!3530 = !DILocation(line: 339, column: 3, scope: !3523)
!3531 = !DILocation(line: 342, column: 14, scope: !3532)
!3532 = distinct !DILexicalBlock(scope: !3523, file: !3524, line: 340, column: 5)
!3533 = !DILocation(line: 342, column: 16, scope: !3532)
!3534 = !DILocation(line: 342, column: 22, scope: !3532)
!3535 = !DILocation(line: 342, column: 7, scope: !3532)
!3536 = !DILocation(line: 344, column: 14, scope: !3532)
!3537 = !DILocation(line: 344, column: 7, scope: !3532)
!3538 = !DILocation(line: 346, column: 1, scope: !3523)
!3539 = !DILocalVariable(name: "c", arg: 1, scope: !3540, file: !3524, line: 337, type: !25)
!3540 = distinct !DISubprogram(name: "c_tolower", scope: !3524, file: !3524, line: 337, type: !3525, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3541, retainedNodes: !4)
!3541 = distinct !DICompileUnit(language: DW_LANG_C99, file: !146, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
