; ModuleID = '<stdin>'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.infomap = type { i8*, i8* }
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.slotvec = type { i64, i8* }
%struct.__mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@.str = private unnamed_addr constant [23 x i8] c"status == EXIT_SUCCESS\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"src/echo.c\00", align 1
@__PRETTY_FUNCTION__.usage = private unnamed_addr constant [16 x i8] c"void usage(int)\00", align 1
@.str.2 = private unnamed_addr constant [63 x i8] c"Usage: %s [SHORT-OPTION]... [STRING]...\0A  or:  %s LONG-OPTION\0A\00", align 1
@.str.3 = private unnamed_addr constant [93 x i8] c"Echo the STRING(s) to standard output.\0A\0A  -n             do not output the trailing newline\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.4 = private unnamed_addr constant [132 x i8] c"  -e             enable interpretation of backslash escapes\0A  -E             disable interpretation of backslash escapes (default)\0A\00", align 1
@.str.5 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.6 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.7 = private unnamed_addr constant [63 x i8] c"\0AIf -e is in effect, the following sequences are recognized:\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [229 x i8] c"  \5C\5C      backslash\0A  \5Ca      alert (BEL)\0A  \5Cb      backspace\0A  \5Cc      produce no further output\0A  \5Ce      escape\0A  \5Cf      form feed\0A  \5Cn      new line\0A  \5Cr      carriage return\0A  \5Ct      horizontal tab\0A  \5Cv      vertical tab\0A\00", align 1
@.str.9 = private unnamed_addr constant [110 x i8] c"  \5C0NNN   byte with octal value NNN (1 to 3 digits)\0A  \5CxHH    byte with hexadecimal value HH (1 to 2 digits)\0A\00", align 1
@.str.10 = private unnamed_addr constant [191 x i8] c"\0ANOTE: your shell may have its own version of %s, which usually supersedes\0Athe version described here.  Please refer to your shell's documentation\0Afor details about the options it supports.\0A\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"echo\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.23, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.24, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.26, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.26, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.26, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.26, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.30 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.19 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.31 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.32 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.33 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.34 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.35 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.36 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.14 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.22 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.23 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.15 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.24 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.25 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.26 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.27 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.28 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.29 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.12 = private unnamed_addr constant [16 x i8] c"POSIXLY_CORRECT\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"-n\00", align 1
@.str.16 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"--help\00", align 1
@.str.18 = private unnamed_addr constant [10 x i8] c"--version\00", align 1
@.str.20 = private unnamed_addr constant [10 x i8] c"Brian Fox\00", align 1
@.str.21 = private unnamed_addr constant [11 x i8] c"Chet Ramey\00", align 1
@Version = internal global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.37, i32 0, i32 0), align 8, !dbg !0
@.str.37 = private unnamed_addr constant [5 x i8] c"8.32\00", align 1
@ignore_EPIPE = internal global i8 0, align 1, !dbg !9
@.str.40 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@file_name = internal global i8* null, align 8, !dbg !14
@.str.1.41 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.42 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@exit_failure = internal global i32 1, align 4, !dbg !18
@.str.47 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.48 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.49 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external dso_local global i8*, align 8
@program_name = internal global i8* null, align 8, !dbg !26
@program_invocation_name = external dso_local global i8*, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8, !dbg !35
@slotvec = internal global %struct.slotvec* @slotvec0, align 8, !dbg !91
@nslots = internal global i32 1, align 4, !dbg !98
@slotvec0 = internal global %struct.slotvec { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8, !dbg !100
@slot0 = internal global [256 x i8] zeroinitializer, align 16, !dbg !86
@.str.10.52 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.53 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.54 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.55 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.56 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.57 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.58 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.59 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.60 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@.str.63 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.64 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.65 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.66 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4.67 = private unnamed_addr constant [171 x i8] c"License GPLv3+: GNU GPL version 3 or later <%s>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.5.68 = private unnamed_addr constant [34 x i8] c"https://gnu.org/licenses/gpl.html\00", align 1
@.str.6.69 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.7.70 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.8.71 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.9.72 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.10.73 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.11.74 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.12.75 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.13.76 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.14.77 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.15.78 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@version_etc_copyright = internal constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16, !dbg !102
@.str.1.89 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.90 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.99 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.100 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.103 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.104 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@inVal0 = global i32 0
@inVal1 = global i8** null
@.compVal0 = private global [4 x i8] c"   \00"
@.compVal1 = private global [2 x i8] c"-\00"
@.compVal2 = private global [1 x i8] zeroinitializer
@x = common global i32 0
@y = common global i32 0
@x.1 = common global i32 0
@y.2 = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @usage(i32) #0 !dbg !153 {
  %2 = load i32, i32* @x
  %3 = load i32, i32* @y
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !156, metadata !DIExpression()), !dbg !157
  %11 = load i32, i32* %10, align 4, !dbg !158
  %12 = icmp eq i32 %11, 0, !dbg !158
  %13 = load i32, i32* @x
  %14 = load i32, i32* @y
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %22, !dbg !161

21:                                               ; preds = %originalBBpart2
  br label %39, !dbg !161

22:                                               ; preds = %originalBBpart2
  %23 = load i32, i32* @x
  %24 = load i32, i32* @y
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  call void @__assert_fail(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 40, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__PRETTY_FUNCTION__.usage, i64 0, i64 0)) #12, !dbg !158
  %31 = load i32, i32* @x
  %32 = load i32, i32* @y
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !158

39:                                               ; preds = %21
  %40 = call i8* @gettext(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !162
  %41 = load i8*, i8** @program_name, align 8, !dbg !163
  %42 = load i8*, i8** @program_name, align 8, !dbg !164
  %43 = call i32 (i8*, ...) @printf(i8* %40, i8* %41, i8* %42), !dbg !165
  %44 = call i8* @gettext(i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !166
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !166
  %46 = call i32 @fputs_unlocked(i8* %44, %struct._IO_FILE* %45), !dbg !166
  %47 = call i8* @gettext(i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !167
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !167
  %49 = call i32 @fputs_unlocked(i8* %47, %struct._IO_FILE* %48), !dbg !167
  %50 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !168
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !168
  %52 = call i32 @fputs_unlocked(i8* %50, %struct._IO_FILE* %51), !dbg !168
  %53 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !169
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !169
  %55 = call i32 @fputs_unlocked(i8* %53, %struct._IO_FILE* %54), !dbg !169
  %56 = call i8* @gettext(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.7, i64 0, i64 0)) #10, !dbg !170
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !170
  %58 = call i32 @fputs_unlocked(i8* %56, %struct._IO_FILE* %57), !dbg !170
  %59 = call i8* @gettext(i8* getelementptr inbounds ([229 x i8], [229 x i8]* @.str.8, i64 0, i64 0)) #10, !dbg !171
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !171
  %61 = call i32 @fputs_unlocked(i8* %59, %struct._IO_FILE* %60), !dbg !171
  %62 = call i8* @gettext(i8* getelementptr inbounds ([110 x i8], [110 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !172
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !172
  %64 = call i32 @fputs_unlocked(i8* %62, %struct._IO_FILE* %63), !dbg !172
  %65 = call i8* @gettext(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !173
  %66 = call i32 (i8*, ...) @printf(i8* %65, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0)), !dbg !174
  call void @emit_ancillary_info(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0)), !dbg !175
  %67 = load i32, i32* %10, align 4, !dbg !176
  call void @exit(i32 %67) #12, !dbg !177
  unreachable, !dbg !177

originalBBalteredBB:                              ; preds = %originalBB, %1
  %68 = alloca i32, align 4
  store i32 %0, i32* %68, align 4
  call void @llvm.dbg.declare(metadata i32* %68, metadata !178, metadata !DIExpression()), !dbg !157
  %69 = load i32, i32* %68, align 4, !dbg !158
  %70 = icmp eq i32 %69, 0, !dbg !158
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  call void @__assert_fail(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 40, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__PRETTY_FUNCTION__.usage, i64 0, i64 0)) #12, !dbg !158
  br label %originalBB1
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @gettext(i8*) #3

declare dso_local i32 @printf(i8*, ...) #4

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(i8*) #5 !dbg !181 {
  %2 = load i32, i32* @x.1
  %3 = load i32, i32* @y.2
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca [7 x %struct.infomap], align 16
  %12 = alloca i8*, align 8
  %13 = alloca %struct.infomap*, align 8
  %14 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !185, metadata !DIExpression()), !dbg !186
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %11, metadata !187, metadata !DIExpression()), !dbg !196
  %15 = bitcast [7 x %struct.infomap]* %11 to i8*, !dbg !196
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !196
  call void @llvm.dbg.declare(metadata i8** %12, metadata !197, metadata !DIExpression()), !dbg !198
  %16 = load i8*, i8** %10, align 8, !dbg !199
  store i8* %16, i8** %12, align 8, !dbg !198
  call void @llvm.dbg.declare(metadata %struct.infomap** %13, metadata !200, metadata !DIExpression()), !dbg !202
  %17 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %11, i64 0, i64 0, !dbg !203
  store %struct.infomap* %17, %struct.infomap** %13, align 8, !dbg !202
  %18 = load i32, i32* @x.1
  %19 = load i32, i32* @y.2
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %26, !dbg !204

26:                                               ; preds = %originalBBpart220, %originalBBpart2
  %27 = load i32, i32* @x.1
  %28 = load i32, i32* @y.2
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !205
  %36 = getelementptr inbounds %struct.infomap, %struct.infomap* %35, i32 0, i32 0, !dbg !206
  %37 = load i8*, i8** %36, align 8, !dbg !206
  %38 = icmp ne i8* %37, null, !dbg !205
  %39 = load i32, i32* @x.1
  %40 = load i32, i32* @y.2
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %71, !dbg !207

47:                                               ; preds = %originalBBpart24
  %48 = load i32, i32* @x.1
  %49 = load i32, i32* @y.2
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = load i8*, i8** %10, align 8, !dbg !208
  %57 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !208
  %58 = getelementptr inbounds %struct.infomap, %struct.infomap* %57, i32 0, i32 0, !dbg !208
  %59 = load i8*, i8** %58, align 8, !dbg !208
  %60 = call i32 @strcmp(i8* %56, i8* %59) #13, !dbg !208
  %61 = icmp eq i32 %60, 0, !dbg !208
  %62 = xor i1 %61, true, !dbg !209
  %63 = load i32, i32* @x.1
  %64 = load i32, i32* @y.2
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart212, label %originalBB6alteredBB

originalBBpart212:                                ; preds = %originalBB6
  br label %71

71:                                               ; preds = %originalBBpart212, %originalBBpart24
  %72 = phi i1 [ false, %originalBBpart24 ], [ %62, %originalBBpart212 ], !dbg !210
  %73 = load i32, i32* @x.1
  %74 = load i32, i32* @y.2
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %71, %originalBB14alteredBB
  %81 = load i32, i32* @x.1
  %82 = load i32, i32* @y.2
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %72, label %89, label %108, !dbg !204

89:                                               ; preds = %originalBBpart216
  %90 = load i32, i32* @x.1
  %91 = load i32, i32* @y.2
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %89, %originalBB18alteredBB
  %98 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !211
  %99 = getelementptr inbounds %struct.infomap, %struct.infomap* %98, i32 1, !dbg !211
  store %struct.infomap* %99, %struct.infomap** %13, align 8, !dbg !211
  %100 = load i32, i32* @x.1
  %101 = load i32, i32* @y.2
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %26, !dbg !204, !llvm.loop !212

108:                                              ; preds = %originalBBpart216
  %109 = load i32, i32* @x.1
  %110 = load i32, i32* @y.2
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %108, %originalBB22alteredBB
  %117 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !213
  %118 = getelementptr inbounds %struct.infomap, %struct.infomap* %117, i32 0, i32 1, !dbg !215
  %119 = load i8*, i8** %118, align 8, !dbg !215
  %120 = icmp ne i8* %119, null, !dbg !213
  %121 = load i32, i32* @x.1
  %122 = load i32, i32* @y.2
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %120, label %129, label %149, !dbg !216

129:                                              ; preds = %originalBBpart224
  %130 = load i32, i32* @x.1
  %131 = load i32, i32* @y.2
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %129, %originalBB26alteredBB
  %138 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !217
  %139 = getelementptr inbounds %struct.infomap, %struct.infomap* %138, i32 0, i32 1, !dbg !218
  %140 = load i8*, i8** %139, align 8, !dbg !218
  store i8* %140, i8** %12, align 8, !dbg !219
  %141 = load i32, i32* @x.1
  %142 = load i32, i32* @y.2
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %149, !dbg !220

149:                                              ; preds = %originalBBpart228, %originalBBpart224
  %150 = load i32, i32* @x.1
  %151 = load i32, i32* @y.2
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %149, %originalBB30alteredBB
  %158 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.30, i64 0, i64 0)) #10, !dbg !221
  %159 = call i32 (i8*, ...) @printf(i8* %158, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.31, i64 0, i64 0)), !dbg !222
  call void @llvm.dbg.declare(metadata i8** %14, metadata !223, metadata !DIExpression()), !dbg !224
  %160 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !225
  store i8* %160, i8** %14, align 8, !dbg !224
  %161 = load i8*, i8** %14, align 8, !dbg !226
  %162 = icmp ne i8* %161, null, !dbg !226
  %163 = load i32, i32* @x.1
  %164 = load i32, i32* @y.2
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %162, label %171, label %211, !dbg !228

171:                                              ; preds = %originalBBpart232
  %172 = load i32, i32* @x.1
  %173 = load i32, i32* @y.2
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %171, %originalBB34alteredBB
  %180 = load i8*, i8** %14, align 8, !dbg !229
  %181 = call i32 @strncmp(i8* %180, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.32, i64 0, i64 0), i64 3) #13, !dbg !229
  %182 = icmp ne i32 %181, 0, !dbg !229
  %183 = load i32, i32* @x.1
  %184 = load i32, i32* @y.2
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %182, label %191, label %211, !dbg !230

191:                                              ; preds = %originalBBpart236
  %192 = load i32, i32* @x.1
  %193 = load i32, i32* @y.2
  %194 = sub i32 %192, 1
  %195 = mul i32 %192, %194
  %196 = urem i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %197, %198
  br i1 %199, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %191, %originalBB38alteredBB
  %200 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.33, i64 0, i64 0)) #10, !dbg !231
  %201 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !231
  %202 = call i32 @fputs_unlocked(i8* %200, %struct._IO_FILE* %201), !dbg !231
  %203 = load i32, i32* @x.1
  %204 = load i32, i32* @y.2
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %211, !dbg !233

211:                                              ; preds = %originalBBpart240, %originalBBpart236, %originalBBpart232
  %212 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.34, i64 0, i64 0)) #10, !dbg !234
  %213 = load i8*, i8** %10, align 8, !dbg !235
  %214 = call i32 (i8*, ...) @printf(i8* %212, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.31, i64 0, i64 0), i8* %213), !dbg !236
  %215 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.35, i64 0, i64 0)) #10, !dbg !237
  %216 = load i8*, i8** %12, align 8, !dbg !238
  %217 = load i8*, i8** %12, align 8, !dbg !239
  %218 = load i8*, i8** %10, align 8, !dbg !240
  %219 = icmp eq i8* %217, %218, !dbg !241
  %220 = zext i1 %219 to i64, !dbg !239
  %221 = select i1 %219, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), !dbg !239
  %222 = call i32 (i8*, ...) @printf(i8* %215, i8* %216, i8* %221), !dbg !242
  ret void, !dbg !243

originalBBalteredBB:                              ; preds = %originalBB, %1
  %223 = alloca i8*, align 8
  %224 = alloca [7 x %struct.infomap], align 16
  %225 = alloca i8*, align 8
  %226 = alloca %struct.infomap*, align 8
  %227 = alloca i8*, align 8
  store i8* %0, i8** %223, align 8
  call void @llvm.dbg.declare(metadata i8** %223, metadata !244, metadata !DIExpression()), !dbg !186
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %224, metadata !247, metadata !DIExpression()), !dbg !196
  %228 = bitcast [7 x %struct.infomap]* %224 to i8*, !dbg !196
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %228, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !196
  call void @llvm.dbg.declare(metadata i8** %225, metadata !254, metadata !DIExpression()), !dbg !198
  %229 = load i8*, i8** %223, align 8, !dbg !199
  store i8* %229, i8** %225, align 8, !dbg !198
  call void @llvm.dbg.declare(metadata %struct.infomap** %226, metadata !255, metadata !DIExpression()), !dbg !202
  %230 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %224, i64 0, i64 0, !dbg !203
  store %struct.infomap* %230, %struct.infomap** %226, align 8, !dbg !202
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %231 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !205
  %232 = getelementptr inbounds %struct.infomap, %struct.infomap* %231, i32 0, i32 0, !dbg !206
  %233 = load i8*, i8** %232, align 8, !dbg !206
  %234 = icmp ne i8* %233, null, !dbg !205
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %235 = load i8*, i8** %10, align 8, !dbg !208
  %236 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !208
  %237 = getelementptr inbounds %struct.infomap, %struct.infomap* %236, i32 0, i32 0, !dbg !208
  %238 = load i8*, i8** %237, align 8, !dbg !208
  %239 = call i32 @strcmp(i8* %235, i8* %238) #13, !dbg !208
  %240 = icmp eq i32 %239, 0, !dbg !208
  %_ = sub i1 %240, true
  %gen = mul i1 %_, true
  %_7 = sub i1 %240, true
  %gen8 = mul i1 %_7, true
  %_9 = sub i1 false, %240
  %gen10 = add i1 %_9, true
  %241 = xor i1 %240, true, !dbg !209
  br label %originalBB6

originalBB14alteredBB:                            ; preds = %originalBB14, %71
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %89
  %242 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !211
  %243 = getelementptr inbounds %struct.infomap, %struct.infomap* %242, i32 1, !dbg !211
  store %struct.infomap* %243, %struct.infomap** %13, align 8, !dbg !211
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %108
  %244 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !213
  %245 = getelementptr inbounds %struct.infomap, %struct.infomap* %244, i32 0, i32 1, !dbg !215
  %246 = load i8*, i8** %245, align 8, !dbg !215
  %247 = icmp ne i8* %246, null, !dbg !213
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %129
  %248 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !217
  %249 = getelementptr inbounds %struct.infomap, %struct.infomap* %248, i32 0, i32 1, !dbg !218
  %250 = load i8*, i8** %249, align 8, !dbg !218
  store i8* %250, i8** %12, align 8, !dbg !219
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %149
  %251 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.30, i64 0, i64 0)) #10, !dbg !221
  %252 = call i32 (i8*, ...) @printf(i8* %251, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.31, i64 0, i64 0)), !dbg !222
  call void @llvm.dbg.declare(metadata !4, metadata !257, metadata !DIExpression()), !dbg !224
  %253 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !225
  store i8* %253, i8** %14, align 8, !dbg !224
  %254 = load i8*, i8** %14, align 8, !dbg !226
  %255 = icmp ne i8* %254, null, !dbg !226
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %171
  %256 = load i8*, i8** %14, align 8, !dbg !229
  %257 = call i32 @strncmp(i8* %256, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.32, i64 0, i64 0), i64 3) #13, !dbg !229
  %258 = icmp ne i32 %257, 0, !dbg !229
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %191
  %259 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.33, i64 0, i64 0)) #10, !dbg !231
  %260 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !231
  %261 = call i32 @fputs_unlocked(i8* %259, %struct._IO_FILE* %260), !dbg !231
  br label %originalBB38
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #7

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #3

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) #5 !dbg !260 {
  %3 = load i32, i32* @x.3
  %4 = load i32, i32* @y.4
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8**, align 8
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  %18 = alloca i8*, align 8
  %19 = alloca i64, align 8
  %20 = alloca i8*, align 8
  %21 = alloca i8, align 1
  %22 = alloca i8, align 1
  store i32 0, i32* %11, align 4
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !264, metadata !DIExpression()), !dbg !265
  store i8** %1, i8*** %13, align 8
  call void @llvm.dbg.declare(metadata i8*** %13, metadata !266, metadata !DIExpression()), !dbg !267
  call void @llvm.dbg.declare(metadata i8* %14, metadata !268, metadata !DIExpression()), !dbg !269
  store i8 1, i8* %14, align 1, !dbg !269
  call void @llvm.dbg.declare(metadata i8* %15, metadata !270, metadata !DIExpression()), !dbg !271
  %23 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !272
  %24 = icmp ne i8* %23, null, !dbg !272
  %25 = zext i1 %24 to i8, !dbg !271
  store i8 %25, i8* %15, align 1, !dbg !271
  call void @llvm.dbg.declare(metadata i8* %16, metadata !273, metadata !DIExpression()), !dbg !274
  %26 = load i8, i8* %15, align 1, !dbg !275
  %27 = trunc i8 %26 to i1, !dbg !275
  %28 = load i32, i32* @x.3
  %29 = load i32, i32* @y.4
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %27, label %36, label %79, !dbg !276

36:                                               ; preds = %originalBBpart2
  %37 = load i32, i32* @x.3
  %38 = load i32, i32* @y.4
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %36, %originalBB1alteredBB
  %45 = load i32, i32* %12, align 4, !dbg !277
  %46 = icmp slt i32 1, %45, !dbg !278
  %47 = load i32, i32* @x.3
  %48 = load i32, i32* @y.4
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %46, label %55, label %77, !dbg !279

55:                                               ; preds = %originalBBpart24
  %56 = load i32, i32* @x.3
  %57 = load i32, i32* @y.4
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %55, %originalBB6alteredBB
  %64 = load i8**, i8*** %13, align 8, !dbg !280
  %65 = getelementptr inbounds i8*, i8** %64, i64 1, !dbg !280
  %66 = load i8*, i8** %65, align 8, !dbg !280
  %67 = call i32 @strcmp(i8* %66, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0)) #13, !dbg !280
  %68 = icmp eq i32 %67, 0, !dbg !280
  %69 = load i32, i32* @x.3
  %70 = load i32, i32* @y.4
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %77

77:                                               ; preds = %originalBBpart28, %originalBBpart24
  %78 = phi i1 [ false, %originalBBpart24 ], [ %68, %originalBBpart28 ], !dbg !281
  br label %79, !dbg !276

79:                                               ; preds = %77, %originalBBpart2
  %80 = phi i1 [ true, %originalBBpart2 ], [ %78, %77 ]
  %81 = load i32, i32* @x.3
  %82 = load i32, i32* @y.4
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %79, %originalBB10alteredBB
  %89 = zext i1 %80 to i8, !dbg !274
  store i8 %89, i8* %16, align 1, !dbg !274
  call void @llvm.dbg.declare(metadata i8* %17, metadata !282, metadata !DIExpression()), !dbg !283
  store i8 0, i8* %17, align 1, !dbg !283
  %90 = load i8**, i8*** %13, align 8, !dbg !284
  %91 = getelementptr inbounds i8*, i8** %90, i64 0, !dbg !284
  %92 = load i8*, i8** %91, align 8, !dbg !284
  call void @set_program_name(i8* %92), !dbg !285
  %93 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)) #10, !dbg !286
  %94 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !287
  %95 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0)) #10, !dbg !288
  %96 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !289
  %97 = load i8, i8* %16, align 1, !dbg !290
  %98 = trunc i8 %97 to i1, !dbg !290
  %99 = load i32, i32* @x.3
  %100 = load i32, i32* @y.4
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %98, label %107, label %649, !dbg !292

107:                                              ; preds = %originalBBpart212
  %108 = load i32, i32* @x.3
  %109 = load i32, i32* @y.4
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %107, %originalBB14alteredBB
  %116 = load i32, i32* %12, align 4, !dbg !293
  %117 = load i32, i32* @x.3
  %118 = load i32, i32* @y.4
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %125, !dbg !294

125:                                              ; preds = %originalBBpart216
  %126 = load i32, i32* @x.3
  %127 = load i32, i32* @y.4
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %125, %originalBB18alteredBB
  %collatzVar = alloca i32
  %134 = load i32, i32* @x.3
  %135 = load i32, i32* @y.4
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %142

142:                                              ; preds = %originalBBpart220
  %143 = load i32, i32* @x.3
  %144 = load i32, i32* @y.4
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %142, %originalBB22alteredBB
  %151 = load i32, i32* @inVal0
  %152 = icmp sgt i32 %151, 1
  %153 = load i32, i32* @x.3
  %154 = load i32, i32* @y.4
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %152, label %178, label %161

161:                                              ; preds = %originalBBpart224
  %162 = load i32, i32* @x.3
  %163 = load i32, i32* @y.4
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %161, %originalBB26alteredBB
  store i32 51, i32* %collatzVar
  %170 = load i32, i32* @x.3
  %171 = load i32, i32* @y.4
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %178

178:                                              ; preds = %originalBBpart228, %originalBBpart224
  %179 = load i8**, i8*** @inVal1
  %180 = getelementptr inbounds i8*, i8** %179, i64 1
  %181 = load i8*, i8** %180
  %controle = call i32 @controle(i8* %181, i32 2)
  store i32 %controle, i32* %collatzVar
  br label %182

182:                                              ; preds = %248, %244, %178
  %183 = load i32, i32* @x.3
  %184 = load i32, i32* @y.4
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %182, %originalBB30alteredBB
  %191 = load i32, i32* %collatzVar
  %192 = icmp sgt i32 %191, 1
  %193 = load i32, i32* @x.3
  %194 = load i32, i32* @y.4
  %195 = sub i32 %193, 1
  %196 = mul i32 %193, %195
  %197 = urem i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %198, %199
  br i1 %200, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %192, label %201, label %649

201:                                              ; preds = %originalBBpart232
  %202 = load i32, i32* @x.3
  %203 = load i32, i32* @y.4
  %204 = sub i32 %202, 1
  %205 = mul i32 %202, %204
  %206 = urem i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = icmp slt i32 %203, 10
  %209 = or i1 %207, %208
  br i1 %209, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %201, %originalBB34alteredBB
  %210 = load i32, i32* %collatzVar
  %211 = srem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = load i32, i32* @x.3
  %214 = load i32, i32* @y.4
  %215 = sub i32 %213, 1
  %216 = mul i32 %213, %215
  %217 = urem i32 %216, 2
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %218, %219
  br i1 %220, label %originalBBpart240, label %originalBB34alteredBB

originalBBpart240:                                ; preds = %originalBB34
  br i1 %212, label %221, label %240

221:                                              ; preds = %originalBBpart240
  %222 = load i32, i32* @x.3
  %223 = load i32, i32* @y.4
  %224 = sub i32 %222, 1
  %225 = mul i32 %222, %224
  %226 = urem i32 %225, 2
  %227 = icmp eq i32 %226, 0
  %228 = icmp slt i32 %223, 10
  %229 = or i1 %227, %228
  br i1 %229, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %221, %originalBB42alteredBB
  %230 = load i32, i32* %collatzVar
  %231 = sdiv i32 %230, 2
  store i32 %231, i32* %collatzVar
  %232 = load i32, i32* @x.3
  %233 = load i32, i32* @y.4
  %234 = sub i32 %232, 1
  %235 = mul i32 %232, %234
  %236 = urem i32 %235, 2
  %237 = icmp eq i32 %236, 0
  %238 = icmp slt i32 %233, 10
  %239 = or i1 %237, %238
  br i1 %239, label %originalBBpart253, label %originalBB42alteredBB

originalBBpart253:                                ; preds = %originalBB42
  br label %244

240:                                              ; preds = %originalBBpart240
  %241 = load i32, i32* %collatzVar
  %242 = mul i32 %241, 3
  %243 = add i32 %242, 1
  store i32 %243, i32* %collatzVar
  br label %244

244:                                              ; preds = %240, %originalBBpart253
  %245 = load i32, i32* %collatzVar
  %246 = sub i32 %116, %245
  %247 = icmp sgt i32 %246, 0
  br i1 %247, label %248, label %182

248:                                              ; preds = %244
  %249 = load i32, i32* %collatzVar
  %250 = add i32 %116, %249
  %251 = icmp slt i32 %250, 4
  br i1 %251, label %252, label %182

252:                                              ; preds = %248
  %253 = load i8**, i8*** %13, align 8, !dbg !295
  %254 = getelementptr inbounds i8*, i8** %253, i64 1, !dbg !295
  %255 = load i8*, i8** %254, align 8, !dbg !295
  %256 = call i32 @strcmp(i8* %255, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i64 0, i64 0)) #13, !dbg !295
  br label %257, !dbg !295

257:                                              ; preds = %252
  %collatzVar5 = alloca i32
  br label %258

258:                                              ; preds = %257
  %259 = load i32, i32* @x.3
  %260 = load i32, i32* @y.4
  %261 = sub i32 %259, 1
  %262 = mul i32 %259, %261
  %263 = urem i32 %262, 2
  %264 = icmp eq i32 %263, 0
  %265 = icmp slt i32 %260, 10
  %266 = or i1 %264, %265
  br i1 %266, label %originalBB55, label %originalBB55alteredBB

originalBB55:                                     ; preds = %258, %originalBB55alteredBB
  %267 = load i32, i32* @inVal0
  %268 = icmp sgt i32 %267, 1
  %269 = load i32, i32* @x.3
  %270 = load i32, i32* @y.4
  %271 = sub i32 %269, 1
  %272 = mul i32 %269, %271
  %273 = urem i32 %272, 2
  %274 = icmp eq i32 %273, 0
  %275 = icmp slt i32 %270, 10
  %276 = or i1 %274, %275
  br i1 %276, label %originalBBpart257, label %originalBB55alteredBB

originalBBpart257:                                ; preds = %originalBB55
  br i1 %268, label %294, label %277

277:                                              ; preds = %originalBBpart257
  %278 = load i32, i32* @x.3
  %279 = load i32, i32* @y.4
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBB59, label %originalBB59alteredBB

originalBB59:                                     ; preds = %277, %originalBB59alteredBB
  store i32 18, i32* %collatzVar5
  %286 = load i32, i32* @x.3
  %287 = load i32, i32* @y.4
  %288 = sub i32 %286, 1
  %289 = mul i32 %286, %288
  %290 = urem i32 %289, 2
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %291, %292
  br i1 %293, label %originalBBpart261, label %originalBB59alteredBB

originalBBpart261:                                ; preds = %originalBB59
  br label %294

294:                                              ; preds = %originalBBpart261, %originalBBpart257
  %295 = load i32, i32* @x.3
  %296 = load i32, i32* @y.4
  %297 = sub i32 %295, 1
  %298 = mul i32 %295, %297
  %299 = urem i32 %298, 2
  %300 = icmp eq i32 %299, 0
  %301 = icmp slt i32 %296, 10
  %302 = or i1 %300, %301
  br i1 %302, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %294, %originalBB63alteredBB
  %303 = load i8**, i8*** @inVal1
  %304 = getelementptr inbounds i8*, i8** %303, i64 1
  %305 = load i8*, i8** %304
  %controle6 = call i32 @controle(i8* %305, i32 0)
  store i32 %controle6, i32* %collatzVar5
  %306 = load i32, i32* @x.3
  %307 = load i32, i32* @y.4
  %308 = sub i32 %306, 1
  %309 = mul i32 %306, %308
  %310 = urem i32 %309, 2
  %311 = icmp eq i32 %310, 0
  %312 = icmp slt i32 %307, 10
  %313 = or i1 %311, %312
  br i1 %313, label %originalBBpart265, label %originalBB63alteredBB

originalBBpart265:                                ; preds = %originalBB63
  br label %314

314:                                              ; preds = %originalBBpart2128, %originalBBpart2114, %originalBBpart265
  %315 = load i32, i32* @x.3
  %316 = load i32, i32* @y.4
  %317 = sub i32 %315, 1
  %318 = mul i32 %315, %317
  %319 = urem i32 %318, 2
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %320, %321
  br i1 %322, label %originalBB67, label %originalBB67alteredBB

originalBB67:                                     ; preds = %314, %originalBB67alteredBB
  %323 = load i32, i32* %collatzVar5
  %324 = icmp sgt i32 %323, 1
  %325 = load i32, i32* @x.3
  %326 = load i32, i32* @y.4
  %327 = sub i32 %325, 1
  %328 = mul i32 %325, %327
  %329 = urem i32 %328, 2
  %330 = icmp eq i32 %329, 0
  %331 = icmp slt i32 %326, 10
  %332 = or i1 %330, %331
  br i1 %332, label %originalBBpart269, label %originalBB67alteredBB

originalBBpart269:                                ; preds = %originalBB67
  br i1 %324, label %333, label %449

333:                                              ; preds = %originalBBpart269
  %334 = load i32, i32* @x.3
  %335 = load i32, i32* @y.4
  %336 = sub i32 %334, 1
  %337 = mul i32 %334, %336
  %338 = urem i32 %337, 2
  %339 = icmp eq i32 %338, 0
  %340 = icmp slt i32 %335, 10
  %341 = or i1 %339, %340
  br i1 %341, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %333, %originalBB71alteredBB
  %342 = load i32, i32* %collatzVar5
  %343 = srem i32 %342, 2
  %344 = icmp eq i32 %343, 0
  %345 = load i32, i32* @x.3
  %346 = load i32, i32* @y.4
  %347 = sub i32 %345, 1
  %348 = mul i32 %345, %347
  %349 = urem i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = icmp slt i32 %346, 10
  %352 = or i1 %350, %351
  br i1 %352, label %originalBBpart275, label %originalBB71alteredBB

originalBBpart275:                                ; preds = %originalBB71
  br i1 %344, label %353, label %372

353:                                              ; preds = %originalBBpart275
  %354 = load i32, i32* @x.3
  %355 = load i32, i32* @y.4
  %356 = sub i32 %354, 1
  %357 = mul i32 %354, %356
  %358 = urem i32 %357, 2
  %359 = icmp eq i32 %358, 0
  %360 = icmp slt i32 %355, 10
  %361 = or i1 %359, %360
  br i1 %361, label %originalBB77, label %originalBB77alteredBB

originalBB77:                                     ; preds = %353, %originalBB77alteredBB
  %362 = load i32, i32* %collatzVar5
  %363 = sdiv i32 %362, 2
  store i32 %363, i32* %collatzVar5
  %364 = load i32, i32* @x.3
  %365 = load i32, i32* @y.4
  %366 = sub i32 %364, 1
  %367 = mul i32 %364, %366
  %368 = urem i32 %367, 2
  %369 = icmp eq i32 %368, 0
  %370 = icmp slt i32 %365, 10
  %371 = or i1 %369, %370
  br i1 %371, label %originalBBpart284, label %originalBB77alteredBB

originalBBpart284:                                ; preds = %originalBB77
  br label %392

372:                                              ; preds = %originalBBpart275
  %373 = load i32, i32* @x.3
  %374 = load i32, i32* @y.4
  %375 = sub i32 %373, 1
  %376 = mul i32 %373, %375
  %377 = urem i32 %376, 2
  %378 = icmp eq i32 %377, 0
  %379 = icmp slt i32 %374, 10
  %380 = or i1 %378, %379
  br i1 %380, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %372, %originalBB86alteredBB
  %381 = load i32, i32* %collatzVar5
  %382 = mul i32 %381, 3
  %383 = add i32 %382, 1
  store i32 %383, i32* %collatzVar5
  %384 = load i32, i32* @x.3
  %385 = load i32, i32* @y.4
  %386 = sub i32 %384, 1
  %387 = mul i32 %384, %386
  %388 = urem i32 %387, 2
  %389 = icmp eq i32 %388, 0
  %390 = icmp slt i32 %385, 10
  %391 = or i1 %389, %390
  br i1 %391, label %originalBBpart2105, label %originalBB86alteredBB

originalBBpart2105:                               ; preds = %originalBB86
  br label %392

392:                                              ; preds = %originalBBpart2105, %originalBBpart284
  %393 = load i32, i32* @x.3
  %394 = load i32, i32* @y.4
  %395 = sub i32 %393, 1
  %396 = mul i32 %393, %395
  %397 = urem i32 %396, 2
  %398 = icmp eq i32 %397, 0
  %399 = icmp slt i32 %394, 10
  %400 = or i1 %398, %399
  br i1 %400, label %originalBB107, label %originalBB107alteredBB

originalBB107:                                    ; preds = %392, %originalBB107alteredBB
  %401 = load i32, i32* %collatzVar5
  %402 = sub i32 %256, %401
  %403 = icmp sgt i32 %402, -2
  %404 = load i32, i32* @x.3
  %405 = load i32, i32* @y.4
  %406 = sub i32 %404, 1
  %407 = mul i32 %404, %406
  %408 = urem i32 %407, 2
  %409 = icmp eq i32 %408, 0
  %410 = icmp slt i32 %405, 10
  %411 = or i1 %409, %410
  br i1 %411, label %originalBBpart2114, label %originalBB107alteredBB

originalBBpart2114:                               ; preds = %originalBB107
  br i1 %403, label %412, label %314

412:                                              ; preds = %originalBBpart2114
  %413 = load i32, i32* @x.3
  %414 = load i32, i32* @y.4
  %415 = sub i32 %413, 1
  %416 = mul i32 %413, %415
  %417 = urem i32 %416, 2
  %418 = icmp eq i32 %417, 0
  %419 = icmp slt i32 %414, 10
  %420 = or i1 %418, %419
  br i1 %420, label %originalBB116, label %originalBB116alteredBB

originalBB116:                                    ; preds = %412, %originalBB116alteredBB
  %421 = load i32, i32* %collatzVar5
  %422 = add i32 %256, %421
  %423 = icmp slt i32 %422, 2
  %424 = load i32, i32* @x.3
  %425 = load i32, i32* @y.4
  %426 = sub i32 %424, 1
  %427 = mul i32 %424, %426
  %428 = urem i32 %427, 2
  %429 = icmp eq i32 %428, 0
  %430 = icmp slt i32 %425, 10
  %431 = or i1 %429, %430
  br i1 %431, label %originalBBpart2128, label %originalBB116alteredBB

originalBBpart2128:                               ; preds = %originalBB116
  br i1 %423, label %432, label %314

432:                                              ; preds = %originalBBpart2128
  %433 = load i32, i32* @x.3
  %434 = load i32, i32* @y.4
  %435 = sub i32 %433, 1
  %436 = mul i32 %433, %435
  %437 = urem i32 %436, 2
  %438 = icmp eq i32 %437, 0
  %439 = icmp slt i32 %434, 10
  %440 = or i1 %438, %439
  br i1 %440, label %originalBB130, label %originalBB130alteredBB

originalBB130:                                    ; preds = %432, %originalBB130alteredBB
  call void @usage(i32 0) #14, !dbg !298
  %441 = load i32, i32* @x.3
  %442 = load i32, i32* @y.4
  %443 = sub i32 %441, 1
  %444 = mul i32 %441, %443
  %445 = urem i32 %444, 2
  %446 = icmp eq i32 %445, 0
  %447 = icmp slt i32 %442, 10
  %448 = or i1 %446, %447
  br i1 %448, label %originalBBpart2132, label %originalBB130alteredBB

originalBBpart2132:                               ; preds = %originalBB130
  unreachable, !dbg !298

449:                                              ; preds = %originalBBpart269
  %450 = load i32, i32* @x.3
  %451 = load i32, i32* @y.4
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBB134, label %originalBB134alteredBB

originalBB134:                                    ; preds = %449, %originalBB134alteredBB
  %458 = load i8**, i8*** %13, align 8, !dbg !299
  %459 = getelementptr inbounds i8*, i8** %458, i64 1, !dbg !299
  %460 = load i8*, i8** %459, align 8, !dbg !299
  %461 = call i32 @strcmp(i8* %460, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i64 0, i64 0)) #13, !dbg !299
  %462 = load i32, i32* @x.3
  %463 = load i32, i32* @y.4
  %464 = sub i32 %462, 1
  %465 = mul i32 %462, %464
  %466 = urem i32 %465, 2
  %467 = icmp eq i32 %466, 0
  %468 = icmp slt i32 %463, 10
  %469 = or i1 %467, %468
  br i1 %469, label %originalBBpart2136, label %originalBB134alteredBB

originalBBpart2136:                               ; preds = %originalBB134
  br label %470, !dbg !299

470:                                              ; preds = %originalBBpart2136
  %471 = load i32, i32* @x.3
  %472 = load i32, i32* @y.4
  %473 = sub i32 %471, 1
  %474 = mul i32 %471, %473
  %475 = urem i32 %474, 2
  %476 = icmp eq i32 %475, 0
  %477 = icmp slt i32 %472, 10
  %478 = or i1 %476, %477
  br i1 %478, label %originalBB138, label %originalBB138alteredBB

originalBB138:                                    ; preds = %470, %originalBB138alteredBB
  %collatzVar1 = alloca i32
  %479 = load i32, i32* @x.3
  %480 = load i32, i32* @y.4
  %481 = sub i32 %479, 1
  %482 = mul i32 %479, %481
  %483 = urem i32 %482, 2
  %484 = icmp eq i32 %483, 0
  %485 = icmp slt i32 %480, 10
  %486 = or i1 %484, %485
  br i1 %486, label %originalBBpart2140, label %originalBB138alteredBB

originalBBpart2140:                               ; preds = %originalBB138
  br label %487

487:                                              ; preds = %originalBBpart2140
  %488 = load i32, i32* @x.3
  %489 = load i32, i32* @y.4
  %490 = sub i32 %488, 1
  %491 = mul i32 %488, %490
  %492 = urem i32 %491, 2
  %493 = icmp eq i32 %492, 0
  %494 = icmp slt i32 %489, 10
  %495 = or i1 %493, %494
  br i1 %495, label %originalBB142, label %originalBB142alteredBB

originalBB142:                                    ; preds = %487, %originalBB142alteredBB
  %496 = load i32, i32* @inVal0
  %497 = icmp sgt i32 %496, 1
  %498 = load i32, i32* @x.3
  %499 = load i32, i32* @y.4
  %500 = sub i32 %498, 1
  %501 = mul i32 %498, %500
  %502 = urem i32 %501, 2
  %503 = icmp eq i32 %502, 0
  %504 = icmp slt i32 %499, 10
  %505 = or i1 %503, %504
  br i1 %505, label %originalBBpart2144, label %originalBB142alteredBB

originalBBpart2144:                               ; preds = %originalBB142
  br i1 %497, label %523, label %506

506:                                              ; preds = %originalBBpart2144
  %507 = load i32, i32* @x.3
  %508 = load i32, i32* @y.4
  %509 = sub i32 %507, 1
  %510 = mul i32 %507, %509
  %511 = urem i32 %510, 2
  %512 = icmp eq i32 %511, 0
  %513 = icmp slt i32 %508, 10
  %514 = or i1 %512, %513
  br i1 %514, label %originalBB146, label %originalBB146alteredBB

originalBB146:                                    ; preds = %506, %originalBB146alteredBB
  store i32 5, i32* %collatzVar1
  %515 = load i32, i32* @x.3
  %516 = load i32, i32* @y.4
  %517 = sub i32 %515, 1
  %518 = mul i32 %515, %517
  %519 = urem i32 %518, 2
  %520 = icmp eq i32 %519, 0
  %521 = icmp slt i32 %516, 10
  %522 = or i1 %520, %521
  br i1 %522, label %originalBBpart2148, label %originalBB146alteredBB

originalBBpart2148:                               ; preds = %originalBB146
  br label %523

523:                                              ; preds = %originalBBpart2148, %originalBBpart2144
  %524 = load i32, i32* @x.3
  %525 = load i32, i32* @y.4
  %526 = sub i32 %524, 1
  %527 = mul i32 %524, %526
  %528 = urem i32 %527, 2
  %529 = icmp eq i32 %528, 0
  %530 = icmp slt i32 %525, 10
  %531 = or i1 %529, %530
  br i1 %531, label %originalBB150, label %originalBB150alteredBB

originalBB150:                                    ; preds = %523, %originalBB150alteredBB
  %532 = load i8**, i8*** @inVal1
  %533 = getelementptr inbounds i8*, i8** %532, i64 1
  %534 = load i8*, i8** %533
  %controle2 = call i32 @controle(i8* %534, i32 0)
  store i32 %controle2, i32* %collatzVar1
  %535 = load i32, i32* @x.3
  %536 = load i32, i32* @y.4
  %537 = sub i32 %535, 1
  %538 = mul i32 %535, %537
  %539 = urem i32 %538, 2
  %540 = icmp eq i32 %539, 0
  %541 = icmp slt i32 %536, 10
  %542 = or i1 %540, %541
  br i1 %542, label %originalBBpart2152, label %originalBB150alteredBB

originalBBpart2152:                               ; preds = %originalBB150
  br label %543

543:                                              ; preds = %641, %originalBBpart2225, %originalBBpart2152
  %544 = load i32, i32* @x.3
  %545 = load i32, i32* @y.4
  %546 = sub i32 %544, 1
  %547 = mul i32 %544, %546
  %548 = urem i32 %547, 2
  %549 = icmp eq i32 %548, 0
  %550 = icmp slt i32 %545, 10
  %551 = or i1 %549, %550
  br i1 %551, label %originalBB154, label %originalBB154alteredBB

originalBB154:                                    ; preds = %543, %originalBB154alteredBB
  %552 = load i32, i32* %collatzVar1
  %553 = icmp sgt i32 %552, 1
  %554 = load i32, i32* @x.3
  %555 = load i32, i32* @y.4
  %556 = sub i32 %554, 1
  %557 = mul i32 %554, %556
  %558 = urem i32 %557, 2
  %559 = icmp eq i32 %558, 0
  %560 = icmp slt i32 %555, 10
  %561 = or i1 %559, %560
  br i1 %561, label %originalBBpart2156, label %originalBB154alteredBB

originalBBpart2156:                               ; preds = %originalBB154
  br i1 %553, label %562, label %648

562:                                              ; preds = %originalBBpart2156
  %563 = load i32, i32* @x.3
  %564 = load i32, i32* @y.4
  %565 = sub i32 %563, 1
  %566 = mul i32 %563, %565
  %567 = urem i32 %566, 2
  %568 = icmp eq i32 %567, 0
  %569 = icmp slt i32 %564, 10
  %570 = or i1 %568, %569
  br i1 %570, label %originalBB158, label %originalBB158alteredBB

originalBB158:                                    ; preds = %562, %originalBB158alteredBB
  %571 = load i32, i32* %collatzVar1
  %572 = srem i32 %571, 2
  %573 = icmp eq i32 %572, 0
  %574 = load i32, i32* @x.3
  %575 = load i32, i32* @y.4
  %576 = sub i32 %574, 1
  %577 = mul i32 %574, %576
  %578 = urem i32 %577, 2
  %579 = icmp eq i32 %578, 0
  %580 = icmp slt i32 %575, 10
  %581 = or i1 %579, %580
  br i1 %581, label %originalBBpart2174, label %originalBB158alteredBB

originalBBpart2174:                               ; preds = %originalBB158
  br i1 %573, label %582, label %601

582:                                              ; preds = %originalBBpart2174
  %583 = load i32, i32* @x.3
  %584 = load i32, i32* @y.4
  %585 = sub i32 %583, 1
  %586 = mul i32 %583, %585
  %587 = urem i32 %586, 2
  %588 = icmp eq i32 %587, 0
  %589 = icmp slt i32 %584, 10
  %590 = or i1 %588, %589
  br i1 %590, label %originalBB176, label %originalBB176alteredBB

originalBB176:                                    ; preds = %582, %originalBB176alteredBB
  %591 = load i32, i32* %collatzVar1
  %592 = sdiv i32 %591, 2
  store i32 %592, i32* %collatzVar1
  %593 = load i32, i32* @x.3
  %594 = load i32, i32* @y.4
  %595 = sub i32 %593, 1
  %596 = mul i32 %593, %595
  %597 = urem i32 %596, 2
  %598 = icmp eq i32 %597, 0
  %599 = icmp slt i32 %594, 10
  %600 = or i1 %598, %599
  br i1 %600, label %originalBBpart2183, label %originalBB176alteredBB

originalBBpart2183:                               ; preds = %originalBB176
  br label %621

601:                                              ; preds = %originalBBpart2174
  %602 = load i32, i32* @x.3
  %603 = load i32, i32* @y.4
  %604 = sub i32 %602, 1
  %605 = mul i32 %602, %604
  %606 = urem i32 %605, 2
  %607 = icmp eq i32 %606, 0
  %608 = icmp slt i32 %603, 10
  %609 = or i1 %607, %608
  br i1 %609, label %originalBB185, label %originalBB185alteredBB

originalBB185:                                    ; preds = %601, %originalBB185alteredBB
  %610 = load i32, i32* %collatzVar1
  %611 = mul i32 %610, 3
  %612 = add i32 %611, 1
  store i32 %612, i32* %collatzVar1
  %613 = load i32, i32* @x.3
  %614 = load i32, i32* @y.4
  %615 = sub i32 %613, 1
  %616 = mul i32 %613, %615
  %617 = urem i32 %616, 2
  %618 = icmp eq i32 %617, 0
  %619 = icmp slt i32 %614, 10
  %620 = or i1 %618, %619
  br i1 %620, label %originalBBpart2212, label %originalBB185alteredBB

originalBBpart2212:                               ; preds = %originalBB185
  br label %621

621:                                              ; preds = %originalBBpart2212, %originalBBpart2183
  %622 = load i32, i32* @x.3
  %623 = load i32, i32* @y.4
  %624 = sub i32 %622, 1
  %625 = mul i32 %622, %624
  %626 = urem i32 %625, 2
  %627 = icmp eq i32 %626, 0
  %628 = icmp slt i32 %623, 10
  %629 = or i1 %627, %628
  br i1 %629, label %originalBB214, label %originalBB214alteredBB

originalBB214:                                    ; preds = %621, %originalBB214alteredBB
  %630 = load i32, i32* %collatzVar1
  %631 = sub i32 %461, %630
  %632 = icmp sgt i32 %631, -2
  %633 = load i32, i32* @x.3
  %634 = load i32, i32* @y.4
  %635 = sub i32 %633, 1
  %636 = mul i32 %633, %635
  %637 = urem i32 %636, 2
  %638 = icmp eq i32 %637, 0
  %639 = icmp slt i32 %634, 10
  %640 = or i1 %638, %639
  br i1 %640, label %originalBBpart2225, label %originalBB214alteredBB

originalBBpart2225:                               ; preds = %originalBB214
  br i1 %632, label %641, label %543

641:                                              ; preds = %originalBBpart2225
  %642 = load i32, i32* %collatzVar1
  %643 = add i32 %461, %642
  %644 = icmp slt i32 %643, 2
  br i1 %644, label %645, label %543

645:                                              ; preds = %641
  %646 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !301
  %647 = load i8*, i8** @Version, align 8, !dbg !303
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %646, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19, i64 0, i64 0), i8* %647, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i8* null), !dbg !304
  store i32 0, i32* %11, align 4, !dbg !305
  br label %1873, !dbg !305

648:                                              ; preds = %originalBBpart2156
  br label %649, !dbg !306

649:                                              ; preds = %648, %originalBBpart232, %originalBBpart212
  %650 = load i32, i32* %12, align 4, !dbg !307
  %651 = add nsw i32 %650, -1, !dbg !307
  store i32 %651, i32* %12, align 4, !dbg !307
  %652 = load i8**, i8*** %13, align 8, !dbg !308
  %653 = getelementptr inbounds i8*, i8** %652, i32 1, !dbg !308
  store i8** %653, i8*** %13, align 8, !dbg !308
  %654 = load i8, i8* %16, align 1, !dbg !309
  %655 = trunc i8 %654 to i1, !dbg !309
  br i1 %655, label %656, label %1151, !dbg !311

656:                                              ; preds = %649
  %657 = load i32, i32* @x.3
  %658 = load i32, i32* @y.4
  %659 = sub i32 %657, 1
  %660 = mul i32 %657, %659
  %661 = urem i32 %660, 2
  %662 = icmp eq i32 %661, 0
  %663 = icmp slt i32 %658, 10
  %664 = or i1 %662, %663
  br i1 %664, label %originalBB227, label %originalBB227alteredBB

originalBB227:                                    ; preds = %656, %originalBB227alteredBB
  %665 = load i32, i32* @x.3
  %666 = load i32, i32* @y.4
  %667 = sub i32 %665, 1
  %668 = mul i32 %665, %667
  %669 = urem i32 %668, 2
  %670 = icmp eq i32 %669, 0
  %671 = icmp slt i32 %666, 10
  %672 = or i1 %670, %671
  br i1 %672, label %originalBBpart2229, label %originalBB227alteredBB

originalBBpart2229:                               ; preds = %originalBB227
  br label %673, !dbg !312

673:                                              ; preds = %originalBBpart2364, %originalBBpart2229
  %674 = load i32, i32* @x.3
  %675 = load i32, i32* @y.4
  %676 = sub i32 %674, 1
  %677 = mul i32 %674, %676
  %678 = urem i32 %677, 2
  %679 = icmp eq i32 %678, 0
  %680 = icmp slt i32 %675, 10
  %681 = or i1 %679, %680
  br i1 %681, label %originalBB231, label %originalBB231alteredBB

originalBB231:                                    ; preds = %673, %originalBB231alteredBB
  %682 = load i32, i32* %12, align 4, !dbg !313
  %683 = icmp sgt i32 %682, 0, !dbg !314
  %684 = load i32, i32* @x.3
  %685 = load i32, i32* @y.4
  %686 = sub i32 %684, 1
  %687 = mul i32 %684, %686
  %688 = urem i32 %687, 2
  %689 = icmp eq i32 %688, 0
  %690 = icmp slt i32 %685, 10
  %691 = or i1 %689, %690
  br i1 %691, label %originalBBpart2233, label %originalBB231alteredBB

originalBBpart2233:                               ; preds = %originalBB231
  br i1 %683, label %692, label %715, !dbg !315

692:                                              ; preds = %originalBBpart2233
  %693 = load i32, i32* @x.3
  %694 = load i32, i32* @y.4
  %695 = sub i32 %693, 1
  %696 = mul i32 %693, %695
  %697 = urem i32 %696, 2
  %698 = icmp eq i32 %697, 0
  %699 = icmp slt i32 %694, 10
  %700 = or i1 %698, %699
  br i1 %700, label %originalBB235, label %originalBB235alteredBB

originalBB235:                                    ; preds = %692, %originalBB235alteredBB
  %701 = load i8**, i8*** %13, align 8, !dbg !316
  %702 = getelementptr inbounds i8*, i8** %701, i64 0, !dbg !316
  %703 = load i8*, i8** %702, align 8, !dbg !316
  %704 = load i8, i8* %703, align 1, !dbg !317
  %705 = sext i8 %704 to i32, !dbg !317
  %706 = icmp eq i32 %705, 45, !dbg !318
  %707 = load i32, i32* @x.3
  %708 = load i32, i32* @y.4
  %709 = sub i32 %707, 1
  %710 = mul i32 %707, %709
  %711 = urem i32 %710, 2
  %712 = icmp eq i32 %711, 0
  %713 = icmp slt i32 %708, 10
  %714 = or i1 %712, %713
  br i1 %714, label %originalBBpart2237, label %originalBB235alteredBB

originalBBpart2237:                               ; preds = %originalBB235
  br label %715

715:                                              ; preds = %originalBBpart2237, %originalBBpart2233
  %716 = phi i1 [ false, %originalBBpart2233 ], [ %706, %originalBBpart2237 ], !dbg !319
  %717 = load i32, i32* @x.3
  %718 = load i32, i32* @y.4
  %719 = sub i32 %717, 1
  %720 = mul i32 %717, %719
  %721 = urem i32 %720, 2
  %722 = icmp eq i32 %721, 0
  %723 = icmp slt i32 %718, 10
  %724 = or i1 %722, %723
  br i1 %724, label %originalBB239, label %originalBB239alteredBB

originalBB239:                                    ; preds = %715, %originalBB239alteredBB
  %725 = load i32, i32* @x.3
  %726 = load i32, i32* @y.4
  %727 = sub i32 %725, 1
  %728 = mul i32 %725, %727
  %729 = urem i32 %728, 2
  %730 = icmp eq i32 %729, 0
  %731 = icmp slt i32 %726, 10
  %732 = or i1 %730, %731
  br i1 %732, label %originalBBpart2241, label %originalBB239alteredBB

originalBBpart2241:                               ; preds = %originalBB239
  br i1 %716, label %733, label %1134, !dbg !312

733:                                              ; preds = %originalBBpart2241
  call void @llvm.dbg.declare(metadata i8** %18, metadata !320, metadata !DIExpression()), !dbg !322
  %734 = load i32, i32* @x.3
  %735 = load i32, i32* @y.4
  %736 = sub i32 %734, 1
  %737 = mul i32 %734, %736
  %738 = urem i32 %737, 2
  %739 = icmp eq i32 %738, 0
  %740 = icmp slt i32 %735, 10
  %741 = or i1 %739, %740
  br i1 %741, label %originalBB243, label %originalBB243alteredBB

originalBB243:                                    ; preds = %733, %originalBB243alteredBB
  %742 = load i8**, i8*** %13, align 8, !dbg !323
  %743 = getelementptr inbounds i8*, i8** %742, i64 0, !dbg !323
  %744 = load i8*, i8** %743, align 8, !dbg !323
  %745 = getelementptr inbounds i8, i8* %744, i64 1, !dbg !324
  store i8* %745, i8** %18, align 8, !dbg !322
  call void @llvm.dbg.declare(metadata i64* %19, metadata !325, metadata !DIExpression()), !dbg !326
  store i64 0, i64* %19, align 8, !dbg !327
  %746 = load i32, i32* @x.3
  %747 = load i32, i32* @y.4
  %748 = sub i32 %746, 1
  %749 = mul i32 %746, %748
  %750 = urem i32 %749, 2
  %751 = icmp eq i32 %750, 0
  %752 = icmp slt i32 %747, 10
  %753 = or i1 %751, %752
  br i1 %753, label %originalBBpart2245, label %originalBB243alteredBB

originalBBpart2245:                               ; preds = %originalBB243
  br label %754, !dbg !329

754:                                              ; preds = %833, %originalBBpart2245
  %755 = load i32, i32* @x.3
  %756 = load i32, i32* @y.4
  %757 = sub i32 %755, 1
  %758 = mul i32 %755, %757
  %759 = urem i32 %758, 2
  %760 = icmp eq i32 %759, 0
  %761 = icmp slt i32 %756, 10
  %762 = or i1 %760, %761
  br i1 %762, label %originalBB247, label %originalBB247alteredBB

originalBB247:                                    ; preds = %754, %originalBB247alteredBB
  %763 = load i8*, i8** %18, align 8, !dbg !330
  %764 = load i64, i64* %19, align 8, !dbg !332
  %765 = getelementptr inbounds i8, i8* %763, i64 %764, !dbg !330
  %766 = load i8, i8* %765, align 1, !dbg !330
  %767 = icmp ne i8 %766, 0, !dbg !333
  %768 = load i32, i32* @x.3
  %769 = load i32, i32* @y.4
  %770 = sub i32 %768, 1
  %771 = mul i32 %768, %770
  %772 = urem i32 %771, 2
  %773 = icmp eq i32 %772, 0
  %774 = icmp slt i32 %769, 10
  %775 = or i1 %773, %774
  br i1 %775, label %originalBBpart2249, label %originalBB247alteredBB

originalBBpart2249:                               ; preds = %originalBB247
  br i1 %767, label %776, label %836, !dbg !333

776:                                              ; preds = %originalBBpart2249
  %777 = load i32, i32* @x.3
  %778 = load i32, i32* @y.4
  %779 = sub i32 %777, 1
  %780 = mul i32 %777, %779
  %781 = urem i32 %780, 2
  %782 = icmp eq i32 %781, 0
  %783 = icmp slt i32 %778, 10
  %784 = or i1 %782, %783
  br i1 %784, label %originalBB251, label %originalBB251alteredBB

originalBB251:                                    ; preds = %776, %originalBB251alteredBB
  %785 = load i8*, i8** %18, align 8, !dbg !334
  %786 = load i64, i64* %19, align 8, !dbg !335
  %787 = getelementptr inbounds i8, i8* %785, i64 %786, !dbg !334
  %788 = load i8, i8* %787, align 1, !dbg !334
  %789 = sext i8 %788 to i32, !dbg !334
  %790 = load i32, i32* @x.3
  %791 = load i32, i32* @y.4
  %792 = sub i32 %790, 1
  %793 = mul i32 %790, %792
  %794 = urem i32 %793, 2
  %795 = icmp eq i32 %794, 0
  %796 = icmp slt i32 %791, 10
  %797 = or i1 %795, %796
  br i1 %797, label %originalBBpart2253, label %originalBB251alteredBB

originalBBpart2253:                               ; preds = %originalBB251
  switch i32 %789, label %799 [
    i32 101, label %798
    i32 69, label %798
    i32 110, label %798
  ], !dbg !336

798:                                              ; preds = %originalBBpart2253, %originalBBpart2253, %originalBBpart2253
  br label %816, !dbg !337

799:                                              ; preds = %originalBBpart2253
  %800 = load i32, i32* @x.3
  %801 = load i32, i32* @y.4
  %802 = sub i32 %800, 1
  %803 = mul i32 %800, %802
  %804 = urem i32 %803, 2
  %805 = icmp eq i32 %804, 0
  %806 = icmp slt i32 %801, 10
  %807 = or i1 %805, %806
  br i1 %807, label %originalBB255, label %originalBB255alteredBB

originalBB255:                                    ; preds = %799, %originalBB255alteredBB
  %808 = load i32, i32* @x.3
  %809 = load i32, i32* @y.4
  %810 = sub i32 %808, 1
  %811 = mul i32 %808, %810
  %812 = urem i32 %811, 2
  %813 = icmp eq i32 %812, 0
  %814 = icmp slt i32 %809, 10
  %815 = or i1 %813, %814
  br i1 %815, label %originalBBpart2257, label %originalBB255alteredBB

originalBBpart2257:                               ; preds = %originalBB255
  br label %1168, !dbg !339

816:                                              ; preds = %798
  %817 = load i32, i32* @x.3
  %818 = load i32, i32* @y.4
  %819 = sub i32 %817, 1
  %820 = mul i32 %817, %819
  %821 = urem i32 %820, 2
  %822 = icmp eq i32 %821, 0
  %823 = icmp slt i32 %818, 10
  %824 = or i1 %822, %823
  br i1 %824, label %originalBB259, label %originalBB259alteredBB

originalBB259:                                    ; preds = %816, %originalBB259alteredBB
  %825 = load i32, i32* @x.3
  %826 = load i32, i32* @y.4
  %827 = sub i32 %825, 1
  %828 = mul i32 %825, %827
  %829 = urem i32 %828, 2
  %830 = icmp eq i32 %829, 0
  %831 = icmp slt i32 %826, 10
  %832 = or i1 %830, %831
  br i1 %832, label %originalBBpart2261, label %originalBB259alteredBB

originalBBpart2261:                               ; preds = %originalBB259
  br label %833, !dbg !340

833:                                              ; preds = %originalBBpart2261
  %834 = load i64, i64* %19, align 8, !dbg !341
  %835 = add i64 %834, 1, !dbg !341
  store i64 %835, i64* %19, align 8, !dbg !341
  br label %754, !dbg !342, !llvm.loop !343

836:                                              ; preds = %originalBBpart2249
  %837 = load i32, i32* @x.3
  %838 = load i32, i32* @y.4
  %839 = sub i32 %837, 1
  %840 = mul i32 %837, %839
  %841 = urem i32 %840, 2
  %842 = icmp eq i32 %841, 0
  %843 = icmp slt i32 %838, 10
  %844 = or i1 %842, %843
  br i1 %844, label %originalBB263, label %originalBB263alteredBB

originalBB263:                                    ; preds = %836, %originalBB263alteredBB
  %845 = load i64, i64* %19, align 8, !dbg !345
  %846 = load i32, i32* @x.3
  %847 = load i32, i32* @y.4
  %848 = sub i32 %846, 1
  %849 = mul i32 %846, %848
  %850 = urem i32 %849, 2
  %851 = icmp eq i32 %850, 0
  %852 = icmp slt i32 %847, 10
  %853 = or i1 %851, %852
  br i1 %853, label %originalBBpart2265, label %originalBB263alteredBB

originalBBpart2265:                               ; preds = %originalBB263
  br label %854, !dbg !347

854:                                              ; preds = %originalBBpart2265
  %collatzVar3 = alloca i32
  br label %855

855:                                              ; preds = %854
  %856 = load i32, i32* @x.3
  %857 = load i32, i32* @y.4
  %858 = sub i32 %856, 1
  %859 = mul i32 %856, %858
  %860 = urem i32 %859, 2
  %861 = icmp eq i32 %860, 0
  %862 = icmp slt i32 %857, 10
  %863 = or i1 %861, %862
  br i1 %863, label %originalBB267, label %originalBB267alteredBB

originalBB267:                                    ; preds = %855, %originalBB267alteredBB
  %864 = load i32, i32* @inVal0
  %865 = icmp sgt i32 %864, 1
  %866 = load i32, i32* @x.3
  %867 = load i32, i32* @y.4
  %868 = sub i32 %866, 1
  %869 = mul i32 %866, %868
  %870 = urem i32 %869, 2
  %871 = icmp eq i32 %870, 0
  %872 = icmp slt i32 %867, 10
  %873 = or i1 %871, %872
  br i1 %873, label %originalBBpart2269, label %originalBB267alteredBB

originalBBpart2269:                               ; preds = %originalBB267
  br i1 %865, label %891, label %874

874:                                              ; preds = %originalBBpart2269
  %875 = load i32, i32* @x.3
  %876 = load i32, i32* @y.4
  %877 = sub i32 %875, 1
  %878 = mul i32 %875, %877
  %879 = urem i32 %878, 2
  %880 = icmp eq i32 %879, 0
  %881 = icmp slt i32 %876, 10
  %882 = or i1 %880, %881
  br i1 %882, label %originalBB271, label %originalBB271alteredBB

originalBB271:                                    ; preds = %874, %originalBB271alteredBB
  store i32 43, i32* %collatzVar3
  %883 = load i32, i32* @x.3
  %884 = load i32, i32* @y.4
  %885 = sub i32 %883, 1
  %886 = mul i32 %883, %885
  %887 = urem i32 %886, 2
  %888 = icmp eq i32 %887, 0
  %889 = icmp slt i32 %884, 10
  %890 = or i1 %888, %889
  br i1 %890, label %originalBBpart2273, label %originalBB271alteredBB

originalBBpart2273:                               ; preds = %originalBB271
  br label %891

891:                                              ; preds = %originalBBpart2273, %originalBBpart2269
  %892 = load i32, i32* @x.3
  %893 = load i32, i32* @y.4
  %894 = sub i32 %892, 1
  %895 = mul i32 %892, %894
  %896 = urem i32 %895, 2
  %897 = icmp eq i32 %896, 0
  %898 = icmp slt i32 %893, 10
  %899 = or i1 %897, %898
  br i1 %899, label %originalBB275, label %originalBB275alteredBB

originalBB275:                                    ; preds = %891, %originalBB275alteredBB
  %900 = load i8**, i8*** @inVal1
  %901 = getelementptr inbounds i8*, i8** %900, i64 1
  %902 = load i8*, i8** %901
  %903 = trunc i64 0 to i32
  %controle4 = call i32 @controle(i8* %902, i32 %903)
  store i32 %controle4, i32* %collatzVar3
  %904 = load i32, i32* @x.3
  %905 = load i32, i32* @y.4
  %906 = sub i32 %904, 1
  %907 = mul i32 %904, %906
  %908 = urem i32 %907, 2
  %909 = icmp eq i32 %908, 0
  %910 = icmp slt i32 %905, 10
  %911 = or i1 %909, %910
  br i1 %911, label %originalBBpart2278, label %originalBB275alteredBB

originalBBpart2278:                               ; preds = %originalBB275
  br label %912

912:                                              ; preds = %originalBBpart2325, %974, %originalBBpart2278
  %913 = load i32, i32* %collatzVar3
  %914 = icmp sgt i32 %913, 1
  br i1 %914, label %915, label %1019

915:                                              ; preds = %912
  %916 = load i32, i32* @x.3
  %917 = load i32, i32* @y.4
  %918 = sub i32 %916, 1
  %919 = mul i32 %916, %918
  %920 = urem i32 %919, 2
  %921 = icmp eq i32 %920, 0
  %922 = icmp slt i32 %917, 10
  %923 = or i1 %921, %922
  br i1 %923, label %originalBB280, label %originalBB280alteredBB

originalBB280:                                    ; preds = %915, %originalBB280alteredBB
  %924 = load i32, i32* %collatzVar3
  %925 = srem i32 %924, 2
  %926 = icmp eq i32 %925, 0
  %927 = load i32, i32* @x.3
  %928 = load i32, i32* @y.4
  %929 = sub i32 %927, 1
  %930 = mul i32 %927, %929
  %931 = urem i32 %930, 2
  %932 = icmp eq i32 %931, 0
  %933 = icmp slt i32 %928, 10
  %934 = or i1 %932, %933
  br i1 %934, label %originalBBpart2284, label %originalBB280alteredBB

originalBBpart2284:                               ; preds = %originalBB280
  br i1 %926, label %935, label %954

935:                                              ; preds = %originalBBpart2284
  %936 = load i32, i32* @x.3
  %937 = load i32, i32* @y.4
  %938 = sub i32 %936, 1
  %939 = mul i32 %936, %938
  %940 = urem i32 %939, 2
  %941 = icmp eq i32 %940, 0
  %942 = icmp slt i32 %937, 10
  %943 = or i1 %941, %942
  br i1 %943, label %originalBB286, label %originalBB286alteredBB

originalBB286:                                    ; preds = %935, %originalBB286alteredBB
  %944 = load i32, i32* %collatzVar3
  %945 = sdiv i32 %944, 2
  store i32 %945, i32* %collatzVar3
  %946 = load i32, i32* @x.3
  %947 = load i32, i32* @y.4
  %948 = sub i32 %946, 1
  %949 = mul i32 %946, %948
  %950 = urem i32 %949, 2
  %951 = icmp eq i32 %950, 0
  %952 = icmp slt i32 %947, 10
  %953 = or i1 %951, %952
  br i1 %953, label %originalBBpart2290, label %originalBB286alteredBB

originalBBpart2290:                               ; preds = %originalBB286
  br label %974

954:                                              ; preds = %originalBBpart2284
  %955 = load i32, i32* @x.3
  %956 = load i32, i32* @y.4
  %957 = sub i32 %955, 1
  %958 = mul i32 %955, %957
  %959 = urem i32 %958, 2
  %960 = icmp eq i32 %959, 0
  %961 = icmp slt i32 %956, 10
  %962 = or i1 %960, %961
  br i1 %962, label %originalBB292, label %originalBB292alteredBB

originalBB292:                                    ; preds = %954, %originalBB292alteredBB
  %963 = load i32, i32* %collatzVar3
  %964 = mul i32 %963, 3
  %965 = add i32 %964, 1
  store i32 %965, i32* %collatzVar3
  %966 = load i32, i32* @x.3
  %967 = load i32, i32* @y.4
  %968 = sub i32 %966, 1
  %969 = mul i32 %966, %968
  %970 = urem i32 %969, 2
  %971 = icmp eq i32 %970, 0
  %972 = icmp slt i32 %967, 10
  %973 = or i1 %971, %972
  br i1 %973, label %originalBBpart2314, label %originalBB292alteredBB

originalBBpart2314:                               ; preds = %originalBB292
  br label %974

974:                                              ; preds = %originalBBpart2314, %originalBBpart2290
  %975 = load i32, i32* %collatzVar3
  %976 = sext i32 %975 to i64
  %977 = sext i32 -2 to i64
  %978 = sub i64 %845, %976
  %979 = icmp sgt i64 %978, %977
  br i1 %979, label %980, label %912

980:                                              ; preds = %974
  %981 = load i32, i32* @x.3
  %982 = load i32, i32* @y.4
  %983 = sub i32 %981, 1
  %984 = mul i32 %981, %983
  %985 = urem i32 %984, 2
  %986 = icmp eq i32 %985, 0
  %987 = icmp slt i32 %982, 10
  %988 = or i1 %986, %987
  br i1 %988, label %originalBB316, label %originalBB316alteredBB

originalBB316:                                    ; preds = %980, %originalBB316alteredBB
  %989 = load i32, i32* %collatzVar3
  %990 = sext i32 %989 to i64
  %991 = sext i32 2 to i64
  %992 = add i64 %845, %990
  %993 = icmp slt i64 %992, %991
  %994 = load i32, i32* @x.3
  %995 = load i32, i32* @y.4
  %996 = sub i32 %994, 1
  %997 = mul i32 %994, %996
  %998 = urem i32 %997, 2
  %999 = icmp eq i32 %998, 0
  %1000 = icmp slt i32 %995, 10
  %1001 = or i1 %999, %1000
  br i1 %1001, label %originalBBpart2325, label %originalBB316alteredBB

originalBBpart2325:                               ; preds = %originalBB316
  br i1 %993, label %1002, label %912

1002:                                             ; preds = %originalBBpart2325
  %1003 = load i32, i32* @x.3
  %1004 = load i32, i32* @y.4
  %1005 = sub i32 %1003, 1
  %1006 = mul i32 %1003, %1005
  %1007 = urem i32 %1006, 2
  %1008 = icmp eq i32 %1007, 0
  %1009 = icmp slt i32 %1004, 10
  %1010 = or i1 %1008, %1009
  br i1 %1010, label %originalBB327, label %originalBB327alteredBB

originalBB327:                                    ; preds = %1002, %originalBB327alteredBB
  %1011 = load i32, i32* @x.3
  %1012 = load i32, i32* @y.4
  %1013 = sub i32 %1011, 1
  %1014 = mul i32 %1011, %1013
  %1015 = urem i32 %1014, 2
  %1016 = icmp eq i32 %1015, 0
  %1017 = icmp slt i32 %1012, 10
  %1018 = or i1 %1016, %1017
  br i1 %1018, label %originalBBpart2329, label %originalBB327alteredBB

originalBBpart2329:                               ; preds = %originalBB327
  br label %1168, !dbg !348

1019:                                             ; preds = %912
  %1020 = load i32, i32* @x.3
  %1021 = load i32, i32* @y.4
  %1022 = sub i32 %1020, 1
  %1023 = mul i32 %1020, %1022
  %1024 = urem i32 %1023, 2
  %1025 = icmp eq i32 %1024, 0
  %1026 = icmp slt i32 %1021, 10
  %1027 = or i1 %1025, %1026
  br i1 %1027, label %originalBB331, label %originalBB331alteredBB

originalBB331:                                    ; preds = %1019, %originalBB331alteredBB
  %1028 = load i32, i32* @x.3
  %1029 = load i32, i32* @y.4
  %1030 = sub i32 %1028, 1
  %1031 = mul i32 %1028, %1030
  %1032 = urem i32 %1031, 2
  %1033 = icmp eq i32 %1032, 0
  %1034 = icmp slt i32 %1029, 10
  %1035 = or i1 %1033, %1034
  br i1 %1035, label %originalBBpart2333, label %originalBB331alteredBB

originalBBpart2333:                               ; preds = %originalBB331
  br label %1036, !dbg !349

1036:                                             ; preds = %originalBBpart2349, %originalBBpart2333
  %1037 = load i32, i32* @x.3
  %1038 = load i32, i32* @y.4
  %1039 = sub i32 %1037, 1
  %1040 = mul i32 %1037, %1039
  %1041 = urem i32 %1040, 2
  %1042 = icmp eq i32 %1041, 0
  %1043 = icmp slt i32 %1038, 10
  %1044 = or i1 %1042, %1043
  br i1 %1044, label %originalBB335, label %originalBB335alteredBB

originalBB335:                                    ; preds = %1036, %originalBB335alteredBB
  %1045 = load i8*, i8** %18, align 8, !dbg !350
  %1046 = load i8, i8* %1045, align 1, !dbg !351
  %1047 = icmp ne i8 %1046, 0, !dbg !349
  %1048 = load i32, i32* @x.3
  %1049 = load i32, i32* @y.4
  %1050 = sub i32 %1048, 1
  %1051 = mul i32 %1048, %1050
  %1052 = urem i32 %1051, 2
  %1053 = icmp eq i32 %1052, 0
  %1054 = icmp slt i32 %1049, 10
  %1055 = or i1 %1053, %1054
  br i1 %1055, label %originalBBpart2337, label %originalBB335alteredBB

originalBBpart2337:                               ; preds = %originalBB335
  br i1 %1047, label %1056, label %1113, !dbg !349

1056:                                             ; preds = %originalBBpart2337
  %1057 = load i8*, i8** %18, align 8, !dbg !352
  %1058 = getelementptr inbounds i8, i8* %1057, i32 1, !dbg !352
  store i8* %1058, i8** %18, align 8, !dbg !352
  %1059 = load i8, i8* %1057, align 1, !dbg !353
  %1060 = sext i8 %1059 to i32, !dbg !353
  switch i32 %1060, label %1096 [
    i32 101, label %1061
    i32 69, label %1078
    i32 110, label %1079
  ], !dbg !354

1061:                                             ; preds = %1056
  %1062 = load i32, i32* @x.3
  %1063 = load i32, i32* @y.4
  %1064 = sub i32 %1062, 1
  %1065 = mul i32 %1062, %1064
  %1066 = urem i32 %1065, 2
  %1067 = icmp eq i32 %1066, 0
  %1068 = icmp slt i32 %1063, 10
  %1069 = or i1 %1067, %1068
  br i1 %1069, label %originalBB339, label %originalBB339alteredBB

originalBB339:                                    ; preds = %1061, %originalBB339alteredBB
  store i8 1, i8* %17, align 1, !dbg !355
  %1070 = load i32, i32* @x.3
  %1071 = load i32, i32* @y.4
  %1072 = sub i32 %1070, 1
  %1073 = mul i32 %1070, %1072
  %1074 = urem i32 %1073, 2
  %1075 = icmp eq i32 %1074, 0
  %1076 = icmp slt i32 %1071, 10
  %1077 = or i1 %1075, %1076
  br i1 %1077, label %originalBBpart2341, label %originalBB339alteredBB

originalBBpart2341:                               ; preds = %originalBB339
  br label %1096, !dbg !357

1078:                                             ; preds = %1056
  store i8 0, i8* %17, align 1, !dbg !358
  br label %1096, !dbg !359

1079:                                             ; preds = %1056
  %1080 = load i32, i32* @x.3
  %1081 = load i32, i32* @y.4
  %1082 = sub i32 %1080, 1
  %1083 = mul i32 %1080, %1082
  %1084 = urem i32 %1083, 2
  %1085 = icmp eq i32 %1084, 0
  %1086 = icmp slt i32 %1081, 10
  %1087 = or i1 %1085, %1086
  br i1 %1087, label %originalBB343, label %originalBB343alteredBB

originalBB343:                                    ; preds = %1079, %originalBB343alteredBB
  store i8 0, i8* %14, align 1, !dbg !360
  %1088 = load i32, i32* @x.3
  %1089 = load i32, i32* @y.4
  %1090 = sub i32 %1088, 1
  %1091 = mul i32 %1088, %1090
  %1092 = urem i32 %1091, 2
  %1093 = icmp eq i32 %1092, 0
  %1094 = icmp slt i32 %1089, 10
  %1095 = or i1 %1093, %1094
  br i1 %1095, label %originalBBpart2345, label %originalBB343alteredBB

originalBBpart2345:                               ; preds = %originalBB343
  br label %1096, !dbg !361

1096:                                             ; preds = %originalBBpart2345, %1078, %originalBBpart2341, %1056
  %1097 = load i32, i32* @x.3
  %1098 = load i32, i32* @y.4
  %1099 = sub i32 %1097, 1
  %1100 = mul i32 %1097, %1099
  %1101 = urem i32 %1100, 2
  %1102 = icmp eq i32 %1101, 0
  %1103 = icmp slt i32 %1098, 10
  %1104 = or i1 %1102, %1103
  br i1 %1104, label %originalBB347, label %originalBB347alteredBB

originalBB347:                                    ; preds = %1096, %originalBB347alteredBB
  %1105 = load i32, i32* @x.3
  %1106 = load i32, i32* @y.4
  %1107 = sub i32 %1105, 1
  %1108 = mul i32 %1105, %1107
  %1109 = urem i32 %1108, 2
  %1110 = icmp eq i32 %1109, 0
  %1111 = icmp slt i32 %1106, 10
  %1112 = or i1 %1110, %1111
  br i1 %1112, label %originalBBpart2349, label %originalBB347alteredBB

originalBBpart2349:                               ; preds = %originalBB347
  br label %1036, !dbg !349, !llvm.loop !362

1113:                                             ; preds = %originalBBpart2337
  %1114 = load i32, i32* @x.3
  %1115 = load i32, i32* @y.4
  %1116 = sub i32 %1114, 1
  %1117 = mul i32 %1114, %1116
  %1118 = urem i32 %1117, 2
  %1119 = icmp eq i32 %1118, 0
  %1120 = icmp slt i32 %1115, 10
  %1121 = or i1 %1119, %1120
  br i1 %1121, label %originalBB351, label %originalBB351alteredBB

originalBB351:                                    ; preds = %1113, %originalBB351alteredBB
  %1122 = load i32, i32* %12, align 4, !dbg !364
  %1123 = add nsw i32 %1122, -1, !dbg !364
  store i32 %1123, i32* %12, align 4, !dbg !364
  %1124 = load i8**, i8*** %13, align 8, !dbg !365
  %1125 = getelementptr inbounds i8*, i8** %1124, i32 1, !dbg !365
  store i8** %1125, i8*** %13, align 8, !dbg !365
  %1126 = load i32, i32* @x.3
  %1127 = load i32, i32* @y.4
  %1128 = sub i32 %1126, 1
  %1129 = mul i32 %1126, %1128
  %1130 = urem i32 %1129, 2
  %1131 = icmp eq i32 %1130, 0
  %1132 = icmp slt i32 %1127, 10
  %1133 = or i1 %1131, %1132
  br i1 %1133, label %originalBBpart2364, label %originalBB351alteredBB

originalBBpart2364:                               ; preds = %originalBB351
  br label %673, !dbg !312, !llvm.loop !366

1134:                                             ; preds = %originalBBpart2241
  %1135 = load i32, i32* @x.3
  %1136 = load i32, i32* @y.4
  %1137 = sub i32 %1135, 1
  %1138 = mul i32 %1135, %1137
  %1139 = urem i32 %1138, 2
  %1140 = icmp eq i32 %1139, 0
  %1141 = icmp slt i32 %1136, 10
  %1142 = or i1 %1140, %1141
  br i1 %1142, label %originalBB366, label %originalBB366alteredBB

originalBB366:                                    ; preds = %1134, %originalBB366alteredBB
  %1143 = load i32, i32* @x.3
  %1144 = load i32, i32* @y.4
  %1145 = sub i32 %1143, 1
  %1146 = mul i32 %1143, %1145
  %1147 = urem i32 %1146, 2
  %1148 = icmp eq i32 %1147, 0
  %1149 = icmp slt i32 %1144, 10
  %1150 = or i1 %1148, %1149
  br i1 %1150, label %originalBBpart2368, label %originalBB366alteredBB

originalBBpart2368:                               ; preds = %originalBB366
  br label %1151, !dbg !312

1151:                                             ; preds = %originalBBpart2368, %649
  %1152 = load i32, i32* @x.3
  %1153 = load i32, i32* @y.4
  %1154 = sub i32 %1152, 1
  %1155 = mul i32 %1152, %1154
  %1156 = urem i32 %1155, 2
  %1157 = icmp eq i32 %1156, 0
  %1158 = icmp slt i32 %1153, 10
  %1159 = or i1 %1157, %1158
  br i1 %1159, label %originalBB370, label %originalBB370alteredBB

originalBB370:                                    ; preds = %1151, %originalBB370alteredBB
  %1160 = load i32, i32* @x.3
  %1161 = load i32, i32* @y.4
  %1162 = sub i32 %1160, 1
  %1163 = mul i32 %1160, %1162
  %1164 = urem i32 %1163, 2
  %1165 = icmp eq i32 %1164, 0
  %1166 = icmp slt i32 %1161, 10
  %1167 = or i1 %1165, %1166
  br i1 %1167, label %originalBBpart2372, label %originalBB370alteredBB

originalBBpart2372:                               ; preds = %originalBB370
  br label %1168, !dbg !309

1168:                                             ; preds = %originalBBpart2372, %originalBBpart2329, %originalBBpart2257
  call void @llvm.dbg.label(metadata !368), !dbg !369
  %1169 = load i32, i32* @x.3
  %1170 = load i32, i32* @y.4
  %1171 = sub i32 %1169, 1
  %1172 = mul i32 %1169, %1171
  %1173 = urem i32 %1172, 2
  %1174 = icmp eq i32 %1173, 0
  %1175 = icmp slt i32 %1170, 10
  %1176 = or i1 %1174, %1175
  br i1 %1176, label %originalBB374, label %originalBB374alteredBB

originalBB374:                                    ; preds = %1168, %originalBB374alteredBB
  %1177 = load i8, i8* %17, align 1, !dbg !370
  %1178 = trunc i8 %1177 to i1, !dbg !370
  %1179 = load i32, i32* @x.3
  %1180 = load i32, i32* @y.4
  %1181 = sub i32 %1179, 1
  %1182 = mul i32 %1179, %1181
  %1183 = urem i32 %1182, 2
  %1184 = icmp eq i32 %1183, 0
  %1185 = icmp slt i32 %1180, 10
  %1186 = or i1 %1184, %1185
  br i1 %1186, label %originalBBpart2376, label %originalBB374alteredBB

originalBBpart2376:                               ; preds = %originalBB374
  br i1 %1178, label %1206, label %1187, !dbg !372

1187:                                             ; preds = %originalBBpart2376
  %1188 = load i32, i32* @x.3
  %1189 = load i32, i32* @y.4
  %1190 = sub i32 %1188, 1
  %1191 = mul i32 %1188, %1190
  %1192 = urem i32 %1191, 2
  %1193 = icmp eq i32 %1192, 0
  %1194 = icmp slt i32 %1189, 10
  %1195 = or i1 %1193, %1194
  br i1 %1195, label %originalBB378, label %originalBB378alteredBB

originalBB378:                                    ; preds = %1187, %originalBB378alteredBB
  %1196 = load i8, i8* %15, align 1, !dbg !373
  %1197 = trunc i8 %1196 to i1, !dbg !373
  %1198 = load i32, i32* @x.3
  %1199 = load i32, i32* @y.4
  %1200 = sub i32 %1198, 1
  %1201 = mul i32 %1198, %1200
  %1202 = urem i32 %1201, 2
  %1203 = icmp eq i32 %1202, 0
  %1204 = icmp slt i32 %1199, 10
  %1205 = or i1 %1203, %1204
  br i1 %1205, label %originalBBpart2380, label %originalBB378alteredBB

originalBBpart2380:                               ; preds = %originalBB378
  br i1 %1197, label %1206, label %1751, !dbg !374

1206:                                             ; preds = %originalBBpart2380, %originalBBpart2376
  %1207 = load i32, i32* @x.3
  %1208 = load i32, i32* @y.4
  %1209 = sub i32 %1207, 1
  %1210 = mul i32 %1207, %1209
  %1211 = urem i32 %1210, 2
  %1212 = icmp eq i32 %1211, 0
  %1213 = icmp slt i32 %1208, 10
  %1214 = or i1 %1212, %1213
  br i1 %1214, label %originalBB382, label %originalBB382alteredBB

originalBB382:                                    ; preds = %1206, %originalBB382alteredBB
  %1215 = load i32, i32* @x.3
  %1216 = load i32, i32* @y.4
  %1217 = sub i32 %1215, 1
  %1218 = mul i32 %1215, %1217
  %1219 = urem i32 %1218, 2
  %1220 = icmp eq i32 %1219, 0
  %1221 = icmp slt i32 %1216, 10
  %1222 = or i1 %1220, %1221
  br i1 %1222, label %originalBBpart2384, label %originalBB382alteredBB

originalBBpart2384:                               ; preds = %originalBB382
  br label %1223, !dbg !375

1223:                                             ; preds = %originalBBpart2507, %originalBBpart2384
  %1224 = load i32, i32* @x.3
  %1225 = load i32, i32* @y.4
  %1226 = sub i32 %1224, 1
  %1227 = mul i32 %1224, %1226
  %1228 = urem i32 %1227, 2
  %1229 = icmp eq i32 %1228, 0
  %1230 = icmp slt i32 %1225, 10
  %1231 = or i1 %1229, %1230
  br i1 %1231, label %originalBB386, label %originalBB386alteredBB

originalBB386:                                    ; preds = %1223, %originalBB386alteredBB
  %1232 = load i32, i32* %12, align 4, !dbg !377
  %1233 = icmp sgt i32 %1232, 0, !dbg !378
  %1234 = load i32, i32* @x.3
  %1235 = load i32, i32* @y.4
  %1236 = sub i32 %1234, 1
  %1237 = mul i32 %1234, %1236
  %1238 = urem i32 %1237, 2
  %1239 = icmp eq i32 %1238, 0
  %1240 = icmp slt i32 %1235, 10
  %1241 = or i1 %1239, %1240
  br i1 %1241, label %originalBBpart2388, label %originalBB386alteredBB

originalBBpart2388:                               ; preds = %originalBB386
  br i1 %1233, label %1242, label %1750, !dbg !375

1242:                                             ; preds = %originalBBpart2388
  call void @llvm.dbg.declare(metadata i8** %20, metadata !379, metadata !DIExpression()), !dbg !381
  %1243 = load i32, i32* @x.3
  %1244 = load i32, i32* @y.4
  %1245 = sub i32 %1243, 1
  %1246 = mul i32 %1243, %1245
  %1247 = urem i32 %1246, 2
  %1248 = icmp eq i32 %1247, 0
  %1249 = icmp slt i32 %1244, 10
  %1250 = or i1 %1248, %1249
  br i1 %1250, label %originalBB390, label %originalBB390alteredBB

originalBB390:                                    ; preds = %1242, %originalBB390alteredBB
  %1251 = load i8**, i8*** %13, align 8, !dbg !382
  %1252 = getelementptr inbounds i8*, i8** %1251, i64 0, !dbg !382
  %1253 = load i8*, i8** %1252, align 8, !dbg !382
  store i8* %1253, i8** %20, align 8, !dbg !381
  call void @llvm.dbg.declare(metadata i8* %21, metadata !383, metadata !DIExpression()), !dbg !384
  %1254 = load i32, i32* @x.3
  %1255 = load i32, i32* @y.4
  %1256 = sub i32 %1254, 1
  %1257 = mul i32 %1254, %1256
  %1258 = urem i32 %1257, 2
  %1259 = icmp eq i32 %1258, 0
  %1260 = icmp slt i32 %1255, 10
  %1261 = or i1 %1259, %1260
  br i1 %1261, label %originalBBpart2392, label %originalBB390alteredBB

originalBBpart2392:                               ; preds = %originalBB390
  br label %1262, !dbg !385

1262:                                             ; preds = %originalBBpart2487, %originalBBpart2392
  %1263 = load i32, i32* @x.3
  %1264 = load i32, i32* @y.4
  %1265 = sub i32 %1263, 1
  %1266 = mul i32 %1263, %1265
  %1267 = urem i32 %1266, 2
  %1268 = icmp eq i32 %1267, 0
  %1269 = icmp slt i32 %1264, 10
  %1270 = or i1 %1268, %1269
  br i1 %1270, label %originalBB394, label %originalBB394alteredBB

originalBB394:                                    ; preds = %1262, %originalBB394alteredBB
  %1271 = load i8*, i8** %20, align 8, !dbg !386
  %1272 = getelementptr inbounds i8, i8* %1271, i32 1, !dbg !386
  store i8* %1272, i8** %20, align 8, !dbg !386
  %1273 = load i8, i8* %1271, align 1, !dbg !387
  store i8 %1273, i8* %21, align 1, !dbg !388
  %1274 = icmp ne i8 %1273, 0, !dbg !385
  %1275 = load i32, i32* @x.3
  %1276 = load i32, i32* @y.4
  %1277 = sub i32 %1275, 1
  %1278 = mul i32 %1275, %1277
  %1279 = urem i32 %1278, 2
  %1280 = icmp eq i32 %1279, 0
  %1281 = icmp slt i32 %1276, 10
  %1282 = or i1 %1280, %1281
  br i1 %1282, label %originalBBpart2396, label %originalBB394alteredBB

originalBBpart2396:                               ; preds = %originalBB394
  br i1 %1274, label %1283, label %1692, !dbg !385

1283:                                             ; preds = %originalBBpart2396
  %1284 = load i8, i8* %21, align 1, !dbg !389
  %1285 = zext i8 %1284 to i32, !dbg !389
  %1286 = icmp eq i32 %1285, 92, !dbg !392
  br i1 %1286, label %1287, label %1672, !dbg !393

1287:                                             ; preds = %1283
  %1288 = load i8*, i8** %20, align 8, !dbg !394
  %1289 = load i8, i8* %1288, align 1, !dbg !395
  %1290 = sext i8 %1289 to i32, !dbg !395
  %1291 = icmp ne i32 %1290, 0, !dbg !395
  br i1 %1291, label %1292, label %1672, !dbg !396

1292:                                             ; preds = %1287
  %1293 = load i8*, i8** %20, align 8, !dbg !397
  %1294 = getelementptr inbounds i8, i8* %1293, i32 1, !dbg !397
  store i8* %1294, i8** %20, align 8, !dbg !397
  %1295 = load i8, i8* %1293, align 1, !dbg !399
  store i8 %1295, i8* %21, align 1, !dbg !400
  %1296 = zext i8 %1295 to i32, !dbg !401
  switch i32 %1296, label %1653 [
    i32 97, label %1297
    i32 98, label %1314
    i32 99, label %1331
    i32 101, label %1332
    i32 102, label %1333
    i32 110, label %1334
    i32 114, label %1335
    i32 116, label %1336
    i32 118, label %1353
    i32 120, label %1354
    i32 48, label %1477
    i32 49, label %1524
    i32 50, label %1524
    i32 51, label %1524
    i32 52, label %1524
    i32 53, label %1524
    i32 54, label %1524
    i32 55, label %1524
    i32 92, label %1635
  ], !dbg !402

1297:                                             ; preds = %1292
  %1298 = load i32, i32* @x.3
  %1299 = load i32, i32* @y.4
  %1300 = sub i32 %1298, 1
  %1301 = mul i32 %1298, %1300
  %1302 = urem i32 %1301, 2
  %1303 = icmp eq i32 %1302, 0
  %1304 = icmp slt i32 %1299, 10
  %1305 = or i1 %1303, %1304
  br i1 %1305, label %originalBB398, label %originalBB398alteredBB

originalBB398:                                    ; preds = %1297, %originalBB398alteredBB
  store i8 7, i8* %21, align 1, !dbg !403
  %1306 = load i32, i32* @x.3
  %1307 = load i32, i32* @y.4
  %1308 = sub i32 %1306, 1
  %1309 = mul i32 %1306, %1308
  %1310 = urem i32 %1309, 2
  %1311 = icmp eq i32 %1310, 0
  %1312 = icmp slt i32 %1307, 10
  %1313 = or i1 %1311, %1312
  br i1 %1313, label %originalBBpart2400, label %originalBB398alteredBB

originalBBpart2400:                               ; preds = %originalBB398
  br label %1655, !dbg !405

1314:                                             ; preds = %1292
  %1315 = load i32, i32* @x.3
  %1316 = load i32, i32* @y.4
  %1317 = sub i32 %1315, 1
  %1318 = mul i32 %1315, %1317
  %1319 = urem i32 %1318, 2
  %1320 = icmp eq i32 %1319, 0
  %1321 = icmp slt i32 %1316, 10
  %1322 = or i1 %1320, %1321
  br i1 %1322, label %originalBB402, label %originalBB402alteredBB

originalBB402:                                    ; preds = %1314, %originalBB402alteredBB
  store i8 8, i8* %21, align 1, !dbg !406
  %1323 = load i32, i32* @x.3
  %1324 = load i32, i32* @y.4
  %1325 = sub i32 %1323, 1
  %1326 = mul i32 %1323, %1325
  %1327 = urem i32 %1326, 2
  %1328 = icmp eq i32 %1327, 0
  %1329 = icmp slt i32 %1324, 10
  %1330 = or i1 %1328, %1329
  br i1 %1330, label %originalBBpart2404, label %originalBB402alteredBB

originalBBpart2404:                               ; preds = %originalBB402
  br label %1655, !dbg !407

1331:                                             ; preds = %1292
  store i32 0, i32* %11, align 4, !dbg !408
  br label %1873, !dbg !408

1332:                                             ; preds = %1292
  store i8 27, i8* %21, align 1, !dbg !409
  br label %1655, !dbg !410

1333:                                             ; preds = %1292
  store i8 12, i8* %21, align 1, !dbg !411
  br label %1655, !dbg !412

1334:                                             ; preds = %1292
  store i8 10, i8* %21, align 1, !dbg !413
  br label %1655, !dbg !414

1335:                                             ; preds = %1292
  store i8 13, i8* %21, align 1, !dbg !415
  br label %1655, !dbg !416

1336:                                             ; preds = %1292
  %1337 = load i32, i32* @x.3
  %1338 = load i32, i32* @y.4
  %1339 = sub i32 %1337, 1
  %1340 = mul i32 %1337, %1339
  %1341 = urem i32 %1340, 2
  %1342 = icmp eq i32 %1341, 0
  %1343 = icmp slt i32 %1338, 10
  %1344 = or i1 %1342, %1343
  br i1 %1344, label %originalBB406, label %originalBB406alteredBB

originalBB406:                                    ; preds = %1336, %originalBB406alteredBB
  store i8 9, i8* %21, align 1, !dbg !417
  %1345 = load i32, i32* @x.3
  %1346 = load i32, i32* @y.4
  %1347 = sub i32 %1345, 1
  %1348 = mul i32 %1345, %1347
  %1349 = urem i32 %1348, 2
  %1350 = icmp eq i32 %1349, 0
  %1351 = icmp slt i32 %1346, 10
  %1352 = or i1 %1350, %1351
  br i1 %1352, label %originalBBpart2408, label %originalBB406alteredBB

originalBBpart2408:                               ; preds = %originalBB406
  br label %1655, !dbg !418

1353:                                             ; preds = %1292
  store i8 11, i8* %21, align 1, !dbg !419
  br label %1655, !dbg !420

1354:                                             ; preds = %1292
  call void @llvm.dbg.declare(metadata i8* %22, metadata !421, metadata !DIExpression()), !dbg !423
  %1355 = load i32, i32* @x.3
  %1356 = load i32, i32* @y.4
  %1357 = sub i32 %1355, 1
  %1358 = mul i32 %1355, %1357
  %1359 = urem i32 %1358, 2
  %1360 = icmp eq i32 %1359, 0
  %1361 = icmp slt i32 %1356, 10
  %1362 = or i1 %1360, %1361
  br i1 %1362, label %originalBB410, label %originalBB410alteredBB

originalBB410:                                    ; preds = %1354, %originalBB410alteredBB
  %1363 = load i8*, i8** %20, align 8, !dbg !424
  %1364 = load i8, i8* %1363, align 1, !dbg !425
  store i8 %1364, i8* %22, align 1, !dbg !423
  %1365 = call i16** @__ctype_b_loc() #15, !dbg !426
  %1366 = load i16*, i16** %1365, align 8, !dbg !426
  %1367 = load i8, i8* %22, align 1, !dbg !426
  %1368 = zext i8 %1367 to i32, !dbg !426
  %1369 = sext i32 %1368 to i64, !dbg !426
  %1370 = getelementptr inbounds i16, i16* %1366, i64 %1369, !dbg !426
  %1371 = load i16, i16* %1370, align 2, !dbg !426
  %1372 = zext i16 %1371 to i32, !dbg !426
  %1373 = and i32 %1372, 4096, !dbg !426
  %1374 = icmp ne i32 %1373, 0, !dbg !426
  %1375 = load i32, i32* @x.3
  %1376 = load i32, i32* @y.4
  %1377 = sub i32 %1375, 1
  %1378 = mul i32 %1375, %1377
  %1379 = urem i32 %1378, 2
  %1380 = icmp eq i32 %1379, 0
  %1381 = icmp slt i32 %1376, 10
  %1382 = or i1 %1380, %1381
  br i1 %1382, label %originalBBpart2422, label %originalBB410alteredBB

originalBBpart2422:                               ; preds = %originalBB410
  br i1 %1374, label %1400, label %1383, !dbg !428

1383:                                             ; preds = %originalBBpart2422
  %1384 = load i32, i32* @x.3
  %1385 = load i32, i32* @y.4
  %1386 = sub i32 %1384, 1
  %1387 = mul i32 %1384, %1386
  %1388 = urem i32 %1387, 2
  %1389 = icmp eq i32 %1388, 0
  %1390 = icmp slt i32 %1385, 10
  %1391 = or i1 %1389, %1390
  br i1 %1391, label %originalBB424, label %originalBB424alteredBB

originalBB424:                                    ; preds = %1383, %originalBB424alteredBB
  %1392 = load i32, i32* @x.3
  %1393 = load i32, i32* @y.4
  %1394 = sub i32 %1392, 1
  %1395 = mul i32 %1392, %1394
  %1396 = urem i32 %1395, 2
  %1397 = icmp eq i32 %1396, 0
  %1398 = icmp slt i32 %1393, 10
  %1399 = or i1 %1397, %1398
  br i1 %1399, label %originalBBpart2426, label %originalBB424alteredBB

originalBBpart2426:                               ; preds = %originalBB424
  br label %1652, !dbg !429

1400:                                             ; preds = %originalBBpart2422
  %1401 = load i32, i32* @x.3
  %1402 = load i32, i32* @y.4
  %1403 = sub i32 %1401, 1
  %1404 = mul i32 %1401, %1403
  %1405 = urem i32 %1404, 2
  %1406 = icmp eq i32 %1405, 0
  %1407 = icmp slt i32 %1402, 10
  %1408 = or i1 %1406, %1407
  br i1 %1408, label %originalBB428, label %originalBB428alteredBB

originalBB428:                                    ; preds = %1400, %originalBB428alteredBB
  %1409 = load i8*, i8** %20, align 8, !dbg !430
  %1410 = getelementptr inbounds i8, i8* %1409, i32 1, !dbg !430
  store i8* %1410, i8** %20, align 8, !dbg !430
  %1411 = load i8, i8* %22, align 1, !dbg !431
  %1412 = call i32 @hextobin(i8 zeroext %1411), !dbg !432
  %1413 = trunc i32 %1412 to i8, !dbg !432
  store i8 %1413, i8* %21, align 1, !dbg !433
  %1414 = load i8*, i8** %20, align 8, !dbg !434
  %1415 = load i8, i8* %1414, align 1, !dbg !435
  store i8 %1415, i8* %22, align 1, !dbg !436
  %1416 = call i16** @__ctype_b_loc() #15, !dbg !437
  %1417 = load i16*, i16** %1416, align 8, !dbg !437
  %1418 = load i8, i8* %22, align 1, !dbg !437
  %1419 = zext i8 %1418 to i32, !dbg !437
  %1420 = sext i32 %1419 to i64, !dbg !437
  %1421 = getelementptr inbounds i16, i16* %1417, i64 %1420, !dbg !437
  %1422 = load i16, i16* %1421, align 2, !dbg !437
  %1423 = zext i16 %1422 to i32, !dbg !437
  %1424 = and i32 %1423, 4096, !dbg !437
  %1425 = icmp ne i32 %1424, 0, !dbg !437
  %1426 = load i32, i32* @x.3
  %1427 = load i32, i32* @y.4
  %1428 = sub i32 %1426, 1
  %1429 = mul i32 %1426, %1428
  %1430 = urem i32 %1429, 2
  %1431 = icmp eq i32 %1430, 0
  %1432 = icmp slt i32 %1427, 10
  %1433 = or i1 %1431, %1432
  br i1 %1433, label %originalBBpart2436, label %originalBB428alteredBB

originalBBpart2436:                               ; preds = %originalBB428
  br i1 %1425, label %1434, label %1460, !dbg !439

1434:                                             ; preds = %originalBBpart2436
  %1435 = load i32, i32* @x.3
  %1436 = load i32, i32* @y.4
  %1437 = sub i32 %1435, 1
  %1438 = mul i32 %1435, %1437
  %1439 = urem i32 %1438, 2
  %1440 = icmp eq i32 %1439, 0
  %1441 = icmp slt i32 %1436, 10
  %1442 = or i1 %1440, %1441
  br i1 %1442, label %originalBB438, label %originalBB438alteredBB

originalBB438:                                    ; preds = %1434, %originalBB438alteredBB
  %1443 = load i8*, i8** %20, align 8, !dbg !440
  %1444 = getelementptr inbounds i8, i8* %1443, i32 1, !dbg !440
  store i8* %1444, i8** %20, align 8, !dbg !440
  %1445 = load i8, i8* %21, align 1, !dbg !442
  %1446 = zext i8 %1445 to i32, !dbg !442
  %1447 = mul nsw i32 %1446, 16, !dbg !443
  %1448 = load i8, i8* %22, align 1, !dbg !444
  %1449 = call i32 @hextobin(i8 zeroext %1448), !dbg !445
  %1450 = add nsw i32 %1447, %1449, !dbg !446
  %1451 = trunc i32 %1450 to i8, !dbg !442
  store i8 %1451, i8* %21, align 1, !dbg !447
  %1452 = load i32, i32* @x.3
  %1453 = load i32, i32* @y.4
  %1454 = sub i32 %1452, 1
  %1455 = mul i32 %1452, %1454
  %1456 = urem i32 %1455, 2
  %1457 = icmp eq i32 %1456, 0
  %1458 = icmp slt i32 %1453, 10
  %1459 = or i1 %1457, %1458
  br i1 %1459, label %originalBBpart2447, label %originalBB438alteredBB

originalBBpart2447:                               ; preds = %originalBB438
  br label %1460, !dbg !448

1460:                                             ; preds = %originalBBpart2447, %originalBBpart2436
  %1461 = load i32, i32* @x.3
  %1462 = load i32, i32* @y.4
  %1463 = sub i32 %1461, 1
  %1464 = mul i32 %1461, %1463
  %1465 = urem i32 %1464, 2
  %1466 = icmp eq i32 %1465, 0
  %1467 = icmp slt i32 %1462, 10
  %1468 = or i1 %1466, %1467
  br i1 %1468, label %originalBB449, label %originalBB449alteredBB

originalBB449:                                    ; preds = %1460, %originalBB449alteredBB
  %1469 = load i32, i32* @x.3
  %1470 = load i32, i32* @y.4
  %1471 = sub i32 %1469, 1
  %1472 = mul i32 %1469, %1471
  %1473 = urem i32 %1472, 2
  %1474 = icmp eq i32 %1473, 0
  %1475 = icmp slt i32 %1470, 10
  %1476 = or i1 %1474, %1475
  br i1 %1476, label %originalBBpart2451, label %originalBB449alteredBB

originalBBpart2451:                               ; preds = %originalBB449
  br label %1655, !dbg !449

1477:                                             ; preds = %1292
  %1478 = load i32, i32* @x.3
  %1479 = load i32, i32* @y.4
  %1480 = sub i32 %1478, 1
  %1481 = mul i32 %1478, %1480
  %1482 = urem i32 %1481, 2
  %1483 = icmp eq i32 %1482, 0
  %1484 = icmp slt i32 %1479, 10
  %1485 = or i1 %1483, %1484
  br i1 %1485, label %originalBB453, label %originalBB453alteredBB

originalBB453:                                    ; preds = %1477, %originalBB453alteredBB
  store i8 0, i8* %21, align 1, !dbg !450
  %1486 = load i8*, i8** %20, align 8, !dbg !451
  %1487 = load i8, i8* %1486, align 1, !dbg !453
  %1488 = sext i8 %1487 to i32, !dbg !453
  %1489 = icmp sle i32 48, %1488, !dbg !454
  %1490 = load i32, i32* @x.3
  %1491 = load i32, i32* @y.4
  %1492 = sub i32 %1490, 1
  %1493 = mul i32 %1490, %1492
  %1494 = urem i32 %1493, 2
  %1495 = icmp eq i32 %1494, 0
  %1496 = icmp slt i32 %1491, 10
  %1497 = or i1 %1495, %1496
  br i1 %1497, label %originalBBpart2455, label %originalBB453alteredBB

originalBBpart2455:                               ; preds = %originalBB453
  br i1 %1489, label %1498, label %1519, !dbg !455

1498:                                             ; preds = %originalBBpart2455
  %1499 = load i32, i32* @x.3
  %1500 = load i32, i32* @y.4
  %1501 = sub i32 %1499, 1
  %1502 = mul i32 %1499, %1501
  %1503 = urem i32 %1502, 2
  %1504 = icmp eq i32 %1503, 0
  %1505 = icmp slt i32 %1500, 10
  %1506 = or i1 %1504, %1505
  br i1 %1506, label %originalBB457, label %originalBB457alteredBB

originalBB457:                                    ; preds = %1498, %originalBB457alteredBB
  %1507 = load i8*, i8** %20, align 8, !dbg !456
  %1508 = load i8, i8* %1507, align 1, !dbg !457
  %1509 = sext i8 %1508 to i32, !dbg !457
  %1510 = icmp sle i32 %1509, 55, !dbg !458
  %1511 = load i32, i32* @x.3
  %1512 = load i32, i32* @y.4
  %1513 = sub i32 %1511, 1
  %1514 = mul i32 %1511, %1513
  %1515 = urem i32 %1514, 2
  %1516 = icmp eq i32 %1515, 0
  %1517 = icmp slt i32 %1512, 10
  %1518 = or i1 %1516, %1517
  br i1 %1518, label %originalBBpart2459, label %originalBB457alteredBB

originalBBpart2459:                               ; preds = %originalBB457
  br i1 %1510, label %1520, label %1519, !dbg !459

1519:                                             ; preds = %originalBBpart2459, %originalBBpart2455
  br label %1655, !dbg !460

1520:                                             ; preds = %originalBBpart2459
  %1521 = load i8*, i8** %20, align 8, !dbg !461
  %1522 = getelementptr inbounds i8, i8* %1521, i32 1, !dbg !461
  store i8* %1522, i8** %20, align 8, !dbg !461
  %1523 = load i8, i8* %1521, align 1, !dbg !462
  store i8 %1523, i8* %21, align 1, !dbg !463
  br label %1524, !dbg !464

1524:                                             ; preds = %1520, %1292, %1292, %1292, %1292, %1292, %1292, %1292
  %1525 = load i8, i8* %21, align 1, !dbg !465
  %1526 = zext i8 %1525 to i32, !dbg !465
  %1527 = sub nsw i32 %1526, 48, !dbg !465
  %1528 = trunc i32 %1527 to i8, !dbg !465
  store i8 %1528, i8* %21, align 1, !dbg !465
  %1529 = load i8*, i8** %20, align 8, !dbg !466
  %1530 = load i8, i8* %1529, align 1, !dbg !468
  %1531 = sext i8 %1530 to i32, !dbg !468
  %1532 = icmp sle i32 48, %1531, !dbg !469
  br i1 %1532, label %1533, label %1565, !dbg !470

1533:                                             ; preds = %1524
  %1534 = load i32, i32* @x.3
  %1535 = load i32, i32* @y.4
  %1536 = sub i32 %1534, 1
  %1537 = mul i32 %1534, %1536
  %1538 = urem i32 %1537, 2
  %1539 = icmp eq i32 %1538, 0
  %1540 = icmp slt i32 %1535, 10
  %1541 = or i1 %1539, %1540
  br i1 %1541, label %originalBB461, label %originalBB461alteredBB

originalBB461:                                    ; preds = %1533, %originalBB461alteredBB
  %1542 = load i8*, i8** %20, align 8, !dbg !471
  %1543 = load i8, i8* %1542, align 1, !dbg !472
  %1544 = sext i8 %1543 to i32, !dbg !472
  %1545 = icmp sle i32 %1544, 55, !dbg !473
  %1546 = load i32, i32* @x.3
  %1547 = load i32, i32* @y.4
  %1548 = sub i32 %1546, 1
  %1549 = mul i32 %1546, %1548
  %1550 = urem i32 %1549, 2
  %1551 = icmp eq i32 %1550, 0
  %1552 = icmp slt i32 %1547, 10
  %1553 = or i1 %1551, %1552
  br i1 %1553, label %originalBBpart2463, label %originalBB461alteredBB

originalBBpart2463:                               ; preds = %originalBB461
  br i1 %1545, label %1554, label %1565, !dbg !474

1554:                                             ; preds = %originalBBpart2463
  %1555 = load i8, i8* %21, align 1, !dbg !475
  %1556 = zext i8 %1555 to i32, !dbg !475
  %1557 = mul nsw i32 %1556, 8, !dbg !476
  %1558 = load i8*, i8** %20, align 8, !dbg !477
  %1559 = getelementptr inbounds i8, i8* %1558, i32 1, !dbg !477
  store i8* %1559, i8** %20, align 8, !dbg !477
  %1560 = load i8, i8* %1558, align 1, !dbg !478
  %1561 = sext i8 %1560 to i32, !dbg !478
  %1562 = sub nsw i32 %1561, 48, !dbg !479
  %1563 = add nsw i32 %1557, %1562, !dbg !480
  %1564 = trunc i32 %1563 to i8, !dbg !475
  store i8 %1564, i8* %21, align 1, !dbg !481
  br label %1565, !dbg !482

1565:                                             ; preds = %1554, %originalBBpart2463, %1524
  %1566 = load i32, i32* @x.3
  %1567 = load i32, i32* @y.4
  %1568 = sub i32 %1566, 1
  %1569 = mul i32 %1566, %1568
  %1570 = urem i32 %1569, 2
  %1571 = icmp eq i32 %1570, 0
  %1572 = icmp slt i32 %1567, 10
  %1573 = or i1 %1571, %1572
  br i1 %1573, label %originalBB465, label %originalBB465alteredBB

originalBB465:                                    ; preds = %1565, %originalBB465alteredBB
  %1574 = load i8*, i8** %20, align 8, !dbg !483
  %1575 = load i8, i8* %1574, align 1, !dbg !485
  %1576 = sext i8 %1575 to i32, !dbg !485
  %1577 = icmp sle i32 48, %1576, !dbg !486
  %1578 = load i32, i32* @x.3
  %1579 = load i32, i32* @y.4
  %1580 = sub i32 %1578, 1
  %1581 = mul i32 %1578, %1580
  %1582 = urem i32 %1581, 2
  %1583 = icmp eq i32 %1582, 0
  %1584 = icmp slt i32 %1579, 10
  %1585 = or i1 %1583, %1584
  br i1 %1585, label %originalBBpart2467, label %originalBB465alteredBB

originalBBpart2467:                               ; preds = %originalBB465
  br i1 %1577, label %1586, label %1618, !dbg !487

1586:                                             ; preds = %originalBBpart2467
  %1587 = load i32, i32* @x.3
  %1588 = load i32, i32* @y.4
  %1589 = sub i32 %1587, 1
  %1590 = mul i32 %1587, %1589
  %1591 = urem i32 %1590, 2
  %1592 = icmp eq i32 %1591, 0
  %1593 = icmp slt i32 %1588, 10
  %1594 = or i1 %1592, %1593
  br i1 %1594, label %originalBB469, label %originalBB469alteredBB

originalBB469:                                    ; preds = %1586, %originalBB469alteredBB
  %1595 = load i8*, i8** %20, align 8, !dbg !488
  %1596 = load i8, i8* %1595, align 1, !dbg !489
  %1597 = sext i8 %1596 to i32, !dbg !489
  %1598 = icmp sle i32 %1597, 55, !dbg !490
  %1599 = load i32, i32* @x.3
  %1600 = load i32, i32* @y.4
  %1601 = sub i32 %1599, 1
  %1602 = mul i32 %1599, %1601
  %1603 = urem i32 %1602, 2
  %1604 = icmp eq i32 %1603, 0
  %1605 = icmp slt i32 %1600, 10
  %1606 = or i1 %1604, %1605
  br i1 %1606, label %originalBBpart2471, label %originalBB469alteredBB

originalBBpart2471:                               ; preds = %originalBB469
  br i1 %1598, label %1607, label %1618, !dbg !491

1607:                                             ; preds = %originalBBpart2471
  %1608 = load i8, i8* %21, align 1, !dbg !492
  %1609 = zext i8 %1608 to i32, !dbg !492
  %1610 = mul nsw i32 %1609, 8, !dbg !493
  %1611 = load i8*, i8** %20, align 8, !dbg !494
  %1612 = getelementptr inbounds i8, i8* %1611, i32 1, !dbg !494
  store i8* %1612, i8** %20, align 8, !dbg !494
  %1613 = load i8, i8* %1611, align 1, !dbg !495
  %1614 = sext i8 %1613 to i32, !dbg !495
  %1615 = sub nsw i32 %1614, 48, !dbg !496
  %1616 = add nsw i32 %1610, %1615, !dbg !497
  %1617 = trunc i32 %1616 to i8, !dbg !492
  store i8 %1617, i8* %21, align 1, !dbg !498
  br label %1618, !dbg !499

1618:                                             ; preds = %1607, %originalBBpart2471, %originalBBpart2467
  %1619 = load i32, i32* @x.3
  %1620 = load i32, i32* @y.4
  %1621 = sub i32 %1619, 1
  %1622 = mul i32 %1619, %1621
  %1623 = urem i32 %1622, 2
  %1624 = icmp eq i32 %1623, 0
  %1625 = icmp slt i32 %1620, 10
  %1626 = or i1 %1624, %1625
  br i1 %1626, label %originalBB473, label %originalBB473alteredBB

originalBB473:                                    ; preds = %1618, %originalBB473alteredBB
  %1627 = load i32, i32* @x.3
  %1628 = load i32, i32* @y.4
  %1629 = sub i32 %1627, 1
  %1630 = mul i32 %1627, %1629
  %1631 = urem i32 %1630, 2
  %1632 = icmp eq i32 %1631, 0
  %1633 = icmp slt i32 %1628, 10
  %1634 = or i1 %1632, %1633
  br i1 %1634, label %originalBBpart2475, label %originalBB473alteredBB

originalBBpart2475:                               ; preds = %originalBB473
  br label %1655, !dbg !500

1635:                                             ; preds = %1292
  %1636 = load i32, i32* @x.3
  %1637 = load i32, i32* @y.4
  %1638 = sub i32 %1636, 1
  %1639 = mul i32 %1636, %1638
  %1640 = urem i32 %1639, 2
  %1641 = icmp eq i32 %1640, 0
  %1642 = icmp slt i32 %1637, 10
  %1643 = or i1 %1641, %1642
  br i1 %1643, label %originalBB477, label %originalBB477alteredBB

originalBB477:                                    ; preds = %1635, %originalBB477alteredBB
  %1644 = load i32, i32* @x.3
  %1645 = load i32, i32* @y.4
  %1646 = sub i32 %1644, 1
  %1647 = mul i32 %1644, %1646
  %1648 = urem i32 %1647, 2
  %1649 = icmp eq i32 %1648, 0
  %1650 = icmp slt i32 %1645, 10
  %1651 = or i1 %1649, %1650
  br i1 %1651, label %originalBBpart2479, label %originalBB477alteredBB

originalBBpart2479:                               ; preds = %originalBB477
  br label %1655, !dbg !501

1652:                                             ; preds = %originalBBpart2426
  call void @llvm.dbg.label(metadata !502), !dbg !503
  br label %1653, !dbg !501

1653:                                             ; preds = %1652, %1292
  %1654 = call i32 @putchar_unlocked(i32 92), !dbg !504
  br label %1655, !dbg !505

1655:                                             ; preds = %1653, %originalBBpart2479, %originalBBpart2475, %1519, %originalBBpart2451, %1353, %originalBBpart2408, %1335, %1334, %1333, %1332, %originalBBpart2404, %originalBBpart2400
  %1656 = load i32, i32* @x.3
  %1657 = load i32, i32* @y.4
  %1658 = sub i32 %1656, 1
  %1659 = mul i32 %1656, %1658
  %1660 = urem i32 %1659, 2
  %1661 = icmp eq i32 %1660, 0
  %1662 = icmp slt i32 %1657, 10
  %1663 = or i1 %1661, %1662
  br i1 %1663, label %originalBB481, label %originalBB481alteredBB

originalBB481:                                    ; preds = %1655, %originalBB481alteredBB
  %1664 = load i32, i32* @x.3
  %1665 = load i32, i32* @y.4
  %1666 = sub i32 %1664, 1
  %1667 = mul i32 %1664, %1666
  %1668 = urem i32 %1667, 2
  %1669 = icmp eq i32 %1668, 0
  %1670 = icmp slt i32 %1665, 10
  %1671 = or i1 %1669, %1670
  br i1 %1671, label %originalBBpart2483, label %originalBB481alteredBB

originalBBpart2483:                               ; preds = %originalBB481
  br label %1672, !dbg !506

1672:                                             ; preds = %originalBBpart2483, %1287, %1283
  %1673 = load i32, i32* @x.3
  %1674 = load i32, i32* @y.4
  %1675 = sub i32 %1673, 1
  %1676 = mul i32 %1673, %1675
  %1677 = urem i32 %1676, 2
  %1678 = icmp eq i32 %1677, 0
  %1679 = icmp slt i32 %1674, 10
  %1680 = or i1 %1678, %1679
  br i1 %1680, label %originalBB485, label %originalBB485alteredBB

originalBB485:                                    ; preds = %1672, %originalBB485alteredBB
  %1681 = load i8, i8* %21, align 1, !dbg !507
  %1682 = zext i8 %1681 to i32, !dbg !507
  %1683 = call i32 @putchar_unlocked(i32 %1682), !dbg !507
  %1684 = load i32, i32* @x.3
  %1685 = load i32, i32* @y.4
  %1686 = sub i32 %1684, 1
  %1687 = mul i32 %1684, %1686
  %1688 = urem i32 %1687, 2
  %1689 = icmp eq i32 %1688, 0
  %1690 = icmp slt i32 %1685, 10
  %1691 = or i1 %1689, %1690
  br i1 %1691, label %originalBBpart2487, label %originalBB485alteredBB

originalBBpart2487:                               ; preds = %originalBB485
  br label %1262, !dbg !385, !llvm.loop !508

1692:                                             ; preds = %originalBBpart2396
  %1693 = load i32, i32* @x.3
  %1694 = load i32, i32* @y.4
  %1695 = sub i32 %1693, 1
  %1696 = mul i32 %1693, %1695
  %1697 = urem i32 %1696, 2
  %1698 = icmp eq i32 %1697, 0
  %1699 = icmp slt i32 %1694, 10
  %1700 = or i1 %1698, %1699
  br i1 %1700, label %originalBB489, label %originalBB489alteredBB

originalBB489:                                    ; preds = %1692, %originalBB489alteredBB
  %1701 = load i32, i32* %12, align 4, !dbg !510
  %1702 = add nsw i32 %1701, -1, !dbg !510
  store i32 %1702, i32* %12, align 4, !dbg !510
  %1703 = load i8**, i8*** %13, align 8, !dbg !511
  %1704 = getelementptr inbounds i8*, i8** %1703, i32 1, !dbg !511
  store i8** %1704, i8*** %13, align 8, !dbg !511
  %1705 = load i32, i32* %12, align 4, !dbg !512
  %1706 = icmp sgt i32 %1705, 0, !dbg !514
  %1707 = load i32, i32* @x.3
  %1708 = load i32, i32* @y.4
  %1709 = sub i32 %1707, 1
  %1710 = mul i32 %1707, %1709
  %1711 = urem i32 %1710, 2
  %1712 = icmp eq i32 %1711, 0
  %1713 = icmp slt i32 %1708, 10
  %1714 = or i1 %1712, %1713
  br i1 %1714, label %originalBBpart2499, label %originalBB489alteredBB

originalBBpart2499:                               ; preds = %originalBB489
  br i1 %1706, label %1715, label %1733, !dbg !515

1715:                                             ; preds = %originalBBpart2499
  %1716 = load i32, i32* @x.3
  %1717 = load i32, i32* @y.4
  %1718 = sub i32 %1716, 1
  %1719 = mul i32 %1716, %1718
  %1720 = urem i32 %1719, 2
  %1721 = icmp eq i32 %1720, 0
  %1722 = icmp slt i32 %1717, 10
  %1723 = or i1 %1721, %1722
  br i1 %1723, label %originalBB501, label %originalBB501alteredBB

originalBB501:                                    ; preds = %1715, %originalBB501alteredBB
  %1724 = call i32 @putchar_unlocked(i32 32), !dbg !516
  %1725 = load i32, i32* @x.3
  %1726 = load i32, i32* @y.4
  %1727 = sub i32 %1725, 1
  %1728 = mul i32 %1725, %1727
  %1729 = urem i32 %1728, 2
  %1730 = icmp eq i32 %1729, 0
  %1731 = icmp slt i32 %1726, 10
  %1732 = or i1 %1730, %1731
  br i1 %1732, label %originalBBpart2503, label %originalBB501alteredBB

originalBBpart2503:                               ; preds = %originalBB501
  br label %1733, !dbg !516

1733:                                             ; preds = %originalBBpart2503, %originalBBpart2499
  %1734 = load i32, i32* @x.3
  %1735 = load i32, i32* @y.4
  %1736 = sub i32 %1734, 1
  %1737 = mul i32 %1734, %1736
  %1738 = urem i32 %1737, 2
  %1739 = icmp eq i32 %1738, 0
  %1740 = icmp slt i32 %1735, 10
  %1741 = or i1 %1739, %1740
  br i1 %1741, label %originalBB505, label %originalBB505alteredBB

originalBB505:                                    ; preds = %1733, %originalBB505alteredBB
  %1742 = load i32, i32* @x.3
  %1743 = load i32, i32* @y.4
  %1744 = sub i32 %1742, 1
  %1745 = mul i32 %1742, %1744
  %1746 = urem i32 %1745, 2
  %1747 = icmp eq i32 %1746, 0
  %1748 = icmp slt i32 %1743, 10
  %1749 = or i1 %1747, %1748
  br i1 %1749, label %originalBBpart2507, label %originalBB505alteredBB

originalBBpart2507:                               ; preds = %originalBB505
  br label %1223, !dbg !375, !llvm.loop !517

1750:                                             ; preds = %originalBBpart2388
  br label %1835, !dbg !519

1751:                                             ; preds = %originalBBpart2380
  %1752 = load i32, i32* @x.3
  %1753 = load i32, i32* @y.4
  %1754 = sub i32 %1752, 1
  %1755 = mul i32 %1752, %1754
  %1756 = urem i32 %1755, 2
  %1757 = icmp eq i32 %1756, 0
  %1758 = icmp slt i32 %1753, 10
  %1759 = or i1 %1757, %1758
  br i1 %1759, label %originalBB509, label %originalBB509alteredBB

originalBB509:                                    ; preds = %1751, %originalBB509alteredBB
  %1760 = load i32, i32* @x.3
  %1761 = load i32, i32* @y.4
  %1762 = sub i32 %1760, 1
  %1763 = mul i32 %1760, %1762
  %1764 = urem i32 %1763, 2
  %1765 = icmp eq i32 %1764, 0
  %1766 = icmp slt i32 %1761, 10
  %1767 = or i1 %1765, %1766
  br i1 %1767, label %originalBBpart2511, label %originalBB509alteredBB

originalBBpart2511:                               ; preds = %originalBB509
  br label %1768, !dbg !520

1768:                                             ; preds = %originalBBpart2519, %originalBBpart2511
  %1769 = load i32, i32* @x.3
  %1770 = load i32, i32* @y.4
  %1771 = sub i32 %1769, 1
  %1772 = mul i32 %1769, %1771
  %1773 = urem i32 %1772, 2
  %1774 = icmp eq i32 %1773, 0
  %1775 = icmp slt i32 %1770, 10
  %1776 = or i1 %1774, %1775
  br i1 %1776, label %originalBB513, label %originalBB513alteredBB

originalBB513:                                    ; preds = %1768, %originalBB513alteredBB
  %1777 = load i32, i32* %12, align 4, !dbg !522
  %1778 = icmp sgt i32 %1777, 0, !dbg !523
  %1779 = load i32, i32* @x.3
  %1780 = load i32, i32* @y.4
  %1781 = sub i32 %1779, 1
  %1782 = mul i32 %1779, %1781
  %1783 = urem i32 %1782, 2
  %1784 = icmp eq i32 %1783, 0
  %1785 = icmp slt i32 %1780, 10
  %1786 = or i1 %1784, %1785
  br i1 %1786, label %originalBBpart2515, label %originalBB513alteredBB

originalBBpart2515:                               ; preds = %originalBB513
  br i1 %1778, label %1787, label %1818, !dbg !520

1787:                                             ; preds = %originalBBpart2515
  %1788 = load i8**, i8*** %13, align 8, !dbg !524
  %1789 = getelementptr inbounds i8*, i8** %1788, i64 0, !dbg !524
  %1790 = load i8*, i8** %1789, align 8, !dbg !524
  %1791 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !524
  %1792 = call i32 @fputs_unlocked(i8* %1790, %struct._IO_FILE* %1791), !dbg !524
  %1793 = load i32, i32* %12, align 4, !dbg !526
  %1794 = add nsw i32 %1793, -1, !dbg !526
  store i32 %1794, i32* %12, align 4, !dbg !526
  %1795 = load i8**, i8*** %13, align 8, !dbg !527
  %1796 = getelementptr inbounds i8*, i8** %1795, i32 1, !dbg !527
  store i8** %1796, i8*** %13, align 8, !dbg !527
  %1797 = load i32, i32* %12, align 4, !dbg !528
  %1798 = icmp sgt i32 %1797, 0, !dbg !530
  br i1 %1798, label %1799, label %1801, !dbg !531

1799:                                             ; preds = %1787
  %1800 = call i32 @putchar_unlocked(i32 32), !dbg !532
  br label %1801, !dbg !532

1801:                                             ; preds = %1799, %1787
  %1802 = load i32, i32* @x.3
  %1803 = load i32, i32* @y.4
  %1804 = sub i32 %1802, 1
  %1805 = mul i32 %1802, %1804
  %1806 = urem i32 %1805, 2
  %1807 = icmp eq i32 %1806, 0
  %1808 = icmp slt i32 %1803, 10
  %1809 = or i1 %1807, %1808
  br i1 %1809, label %originalBB517, label %originalBB517alteredBB

originalBB517:                                    ; preds = %1801, %originalBB517alteredBB
  %1810 = load i32, i32* @x.3
  %1811 = load i32, i32* @y.4
  %1812 = sub i32 %1810, 1
  %1813 = mul i32 %1810, %1812
  %1814 = urem i32 %1813, 2
  %1815 = icmp eq i32 %1814, 0
  %1816 = icmp slt i32 %1811, 10
  %1817 = or i1 %1815, %1816
  br i1 %1817, label %originalBBpart2519, label %originalBB517alteredBB

originalBBpart2519:                               ; preds = %originalBB517
  br label %1768, !dbg !520, !llvm.loop !533

1818:                                             ; preds = %originalBBpart2515
  %1819 = load i32, i32* @x.3
  %1820 = load i32, i32* @y.4
  %1821 = sub i32 %1819, 1
  %1822 = mul i32 %1819, %1821
  %1823 = urem i32 %1822, 2
  %1824 = icmp eq i32 %1823, 0
  %1825 = icmp slt i32 %1820, 10
  %1826 = or i1 %1824, %1825
  br i1 %1826, label %originalBB521, label %originalBB521alteredBB

originalBB521:                                    ; preds = %1818, %originalBB521alteredBB
  %1827 = load i32, i32* @x.3
  %1828 = load i32, i32* @y.4
  %1829 = sub i32 %1827, 1
  %1830 = mul i32 %1827, %1829
  %1831 = urem i32 %1830, 2
  %1832 = icmp eq i32 %1831, 0
  %1833 = icmp slt i32 %1828, 10
  %1834 = or i1 %1832, %1833
  br i1 %1834, label %originalBBpart2523, label %originalBB521alteredBB

originalBBpart2523:                               ; preds = %originalBB521
  br label %1835

1835:                                             ; preds = %originalBBpart2523, %1750
  %1836 = load i32, i32* @x.3
  %1837 = load i32, i32* @y.4
  %1838 = sub i32 %1836, 1
  %1839 = mul i32 %1836, %1838
  %1840 = urem i32 %1839, 2
  %1841 = icmp eq i32 %1840, 0
  %1842 = icmp slt i32 %1837, 10
  %1843 = or i1 %1841, %1842
  br i1 %1843, label %originalBB525, label %originalBB525alteredBB

originalBB525:                                    ; preds = %1835, %originalBB525alteredBB
  %1844 = load i8, i8* %14, align 1, !dbg !535
  %1845 = trunc i8 %1844 to i1, !dbg !535
  %1846 = load i32, i32* @x.3
  %1847 = load i32, i32* @y.4
  %1848 = sub i32 %1846, 1
  %1849 = mul i32 %1846, %1848
  %1850 = urem i32 %1849, 2
  %1851 = icmp eq i32 %1850, 0
  %1852 = icmp slt i32 %1847, 10
  %1853 = or i1 %1851, %1852
  br i1 %1853, label %originalBBpart2527, label %originalBB525alteredBB

originalBBpart2527:                               ; preds = %originalBB525
  br i1 %1845, label %1854, label %1872, !dbg !537

1854:                                             ; preds = %originalBBpart2527
  %1855 = load i32, i32* @x.3
  %1856 = load i32, i32* @y.4
  %1857 = sub i32 %1855, 1
  %1858 = mul i32 %1855, %1857
  %1859 = urem i32 %1858, 2
  %1860 = icmp eq i32 %1859, 0
  %1861 = icmp slt i32 %1856, 10
  %1862 = or i1 %1860, %1861
  br i1 %1862, label %originalBB529, label %originalBB529alteredBB

originalBB529:                                    ; preds = %1854, %originalBB529alteredBB
  %1863 = call i32 @putchar_unlocked(i32 10), !dbg !538
  %1864 = load i32, i32* @x.3
  %1865 = load i32, i32* @y.4
  %1866 = sub i32 %1864, 1
  %1867 = mul i32 %1864, %1866
  %1868 = urem i32 %1867, 2
  %1869 = icmp eq i32 %1868, 0
  %1870 = icmp slt i32 %1865, 10
  %1871 = or i1 %1869, %1870
  br i1 %1871, label %originalBBpart2531, label %originalBB529alteredBB

originalBBpart2531:                               ; preds = %originalBB529
  br label %1872, !dbg !538

1872:                                             ; preds = %originalBBpart2531, %originalBBpart2527
  store i32 0, i32* %11, align 4, !dbg !539
  br label %1873, !dbg !539

1873:                                             ; preds = %1872, %1331, %645
  %1874 = load i32, i32* @x.3
  %1875 = load i32, i32* @y.4
  %1876 = sub i32 %1874, 1
  %1877 = mul i32 %1874, %1876
  %1878 = urem i32 %1877, 2
  %1879 = icmp eq i32 %1878, 0
  %1880 = icmp slt i32 %1875, 10
  %1881 = or i1 %1879, %1880
  br i1 %1881, label %originalBB533, label %originalBB533alteredBB

originalBB533:                                    ; preds = %1873, %originalBB533alteredBB
  %1882 = load i32, i32* %11, align 4, !dbg !540
  %1883 = load i32, i32* @x.3
  %1884 = load i32, i32* @y.4
  %1885 = sub i32 %1883, 1
  %1886 = mul i32 %1883, %1885
  %1887 = urem i32 %1886, 2
  %1888 = icmp eq i32 %1887, 0
  %1889 = icmp slt i32 %1884, 10
  %1890 = or i1 %1888, %1889
  br i1 %1890, label %originalBBpart2535, label %originalBB533alteredBB

originalBBpart2535:                               ; preds = %originalBB533
  ret i32 %1882, !dbg !540

originalBBalteredBB:                              ; preds = %originalBB, %2
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %1891 = alloca i32, align 4
  %1892 = alloca i32, align 4
  %1893 = alloca i8**, align 8
  %1894 = alloca i8, align 1
  %1895 = alloca i8, align 1
  %1896 = alloca i8, align 1
  %1897 = alloca i8, align 1
  %1898 = alloca i8*, align 8
  %1899 = alloca i64, align 8
  %1900 = alloca i8*, align 8
  %1901 = alloca i8, align 1
  %1902 = alloca i8, align 1
  store i32 0, i32* %1891, align 4
  store i32 %0, i32* %1892, align 4
  call void @llvm.dbg.declare(metadata i32* %1892, metadata !541, metadata !DIExpression()), !dbg !265
  store i8** %1, i8*** %1893, align 8
  call void @llvm.dbg.declare(metadata i8*** %1893, metadata !544, metadata !DIExpression()), !dbg !267
  call void @llvm.dbg.declare(metadata i8* %1894, metadata !545, metadata !DIExpression()), !dbg !269
  store i8 1, i8* %1894, align 1, !dbg !269
  call void @llvm.dbg.declare(metadata i8* %1895, metadata !546, metadata !DIExpression()), !dbg !271
  %1903 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !272
  %1904 = icmp ne i8* %1903, null, !dbg !272
  %1905 = zext i1 %1904 to i8, !dbg !271
  store i8 %1905, i8* %1895, align 1, !dbg !271
  call void @llvm.dbg.declare(metadata i8* %1896, metadata !547, metadata !DIExpression()), !dbg !274
  %1906 = load i8, i8* %1895, align 1, !dbg !275
  %1907 = trunc i8 %1906 to i1, !dbg !275
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %36
  %1908 = load i32, i32* %12, align 4, !dbg !277
  %1909 = icmp slt i32 1, %1908, !dbg !278
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %55
  %1910 = load i8**, i8*** %13, align 8, !dbg !280
  %1911 = getelementptr inbounds i8*, i8** %1910, i64 1, !dbg !280
  %1912 = load i8*, i8** %1911, align 8, !dbg !280
  %1913 = call i32 @strcmp(i8* %1912, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0)) #13, !dbg !280
  %1914 = icmp eq i32 %1913, 0, !dbg !280
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %79
  %1915 = zext i1 %80 to i8, !dbg !274
  store i8 %1915, i8* %16, align 1, !dbg !274
  call void @llvm.dbg.declare(metadata !4, metadata !548, metadata !DIExpression()), !dbg !283
  store i8 0, i8* %17, align 1, !dbg !283
  %1916 = load i8**, i8*** %13, align 8, !dbg !284
  %1917 = getelementptr inbounds i8*, i8** %1916, i64 0, !dbg !284
  %1918 = load i8*, i8** %1917, align 8, !dbg !284
  call void @set_program_name(i8* %1918), !dbg !285
  %1919 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)) #10, !dbg !286
  %1920 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !287
  %1921 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0)) #10, !dbg !288
  %1922 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !289
  %1923 = load i8, i8* %16, align 1, !dbg !290
  %1924 = trunc i8 %1923 to i1, !dbg !290
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %107
  %1925 = load i32, i32* %12, align 4, !dbg !293
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %125
  %collatzVaralteredBB = alloca i32
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %142
  %1926 = load i32, i32* @inVal0
  %1927 = icmp sgt i32 %1926, 1
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %161
  store i32 51, i32* %collatzVar
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %182
  %1928 = load i32, i32* %collatzVar
  %1929 = icmp sgt i32 %1928, 1
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %201
  %1930 = load i32, i32* %collatzVar
  %_ = sub i32 %1930, 2
  %gen = mul i32 %_, 2
  %_35 = sub i32 %1930, 2
  %gen36 = mul i32 %_35, 2
  %_37 = sub i32 0, %1930
  %gen38 = add i32 %_37, 2
  %1931 = srem i32 %1930, 2
  %1932 = icmp eq i32 %1931, 0
  br label %originalBB34

originalBB42alteredBB:                            ; preds = %originalBB42, %221
  %1933 = load i32, i32* %collatzVar
  %_43 = sub i32 %1933, 2
  %gen44 = mul i32 %_43, 2
  %_45 = shl i32 %1933, 2
  %_46 = sub i32 %1933, 2
  %gen47 = mul i32 %_46, 2
  %_48 = sub i32 %1933, 2
  %gen49 = mul i32 %_48, 2
  %_50 = sub i32 %1933, 2
  %gen51 = mul i32 %_50, 2
  %1934 = sdiv i32 %1933, 2
  store i32 %1934, i32* %collatzVar
  br label %originalBB42

originalBB55alteredBB:                            ; preds = %originalBB55, %258
  %1935 = load i32, i32* @inVal0
  %1936 = icmp sgt i32 %1935, 1
  br label %originalBB55

originalBB59alteredBB:                            ; preds = %originalBB59, %277
  store i32 18, i32* %collatzVar5
  br label %originalBB59

originalBB63alteredBB:                            ; preds = %originalBB63, %294
  %1937 = load i8**, i8*** @inVal1
  %1938 = getelementptr inbounds i8*, i8** %1937, i64 1
  %1939 = load i8*, i8** %1938
  %controle6alteredBB = call i32 @controle(i8* %1939, i32 0)
  store i32 %controle6alteredBB, i32* %collatzVar5
  br label %originalBB63

originalBB67alteredBB:                            ; preds = %originalBB67, %314
  %1940 = load i32, i32* %collatzVar5
  %1941 = icmp sgt i32 %1940, 1
  br label %originalBB67

originalBB71alteredBB:                            ; preds = %originalBB71, %333
  %1942 = load i32, i32* %collatzVar5
  %_72 = sub i32 %1942, 2
  %gen73 = mul i32 %_72, 2
  %1943 = srem i32 %1942, 2
  %1944 = icmp eq i32 %1943, 0
  br label %originalBB71

originalBB77alteredBB:                            ; preds = %originalBB77, %353
  %1945 = load i32, i32* %collatzVar5
  %_78 = sub i32 %1945, 2
  %gen79 = mul i32 %_78, 2
  %_80 = sub i32 0, %1945
  %gen81 = add i32 %_80, 2
  %_82 = shl i32 %1945, 2
  %1946 = sdiv i32 %1945, 2
  store i32 %1946, i32* %collatzVar5
  br label %originalBB77

originalBB86alteredBB:                            ; preds = %originalBB86, %372
  %1947 = load i32, i32* %collatzVar5
  %_87 = shl i32 %1947, 3
  %_88 = shl i32 %1947, 3
  %_89 = shl i32 %1947, 3
  %_90 = sub i32 0, %1947
  %gen91 = add i32 %_90, 3
  %_92 = sub i32 0, %1947
  %gen93 = add i32 %_92, 3
  %_94 = sub i32 %1947, 3
  %gen95 = mul i32 %_94, 3
  %1948 = mul i32 %1947, 3
  %_96 = sub i32 0, %1948
  %gen97 = add i32 %_96, 1
  %_98 = shl i32 %1948, 1
  %_99 = sub i32 0, %1948
  %gen100 = add i32 %_99, 1
  %_101 = shl i32 %1948, 1
  %_102 = sub i32 0, %1948
  %gen103 = add i32 %_102, 1
  %1949 = add i32 %1948, 1
  store i32 %1949, i32* %collatzVar5
  br label %originalBB86

originalBB107alteredBB:                           ; preds = %originalBB107, %392
  %1950 = load i32, i32* %collatzVar5
  %_108 = sub i32 0, %256
  %gen109 = add i32 %_108, %1950
  %_110 = sub i32 %256, %1950
  %gen111 = mul i32 %_110, %1950
  %_112 = shl i32 %256, %1950
  %1951 = sub i32 %256, %1950
  %1952 = icmp sgt i32 %1951, -2
  br label %originalBB107

originalBB116alteredBB:                           ; preds = %originalBB116, %412
  %1953 = load i32, i32* %collatzVar5
  %_117 = sub i32 0, %256
  %gen118 = add i32 %_117, %1953
  %_119 = shl i32 %256, %1953
  %_120 = sub i32 0, %256
  %gen121 = add i32 %_120, %1953
  %_122 = sub i32 0, %256
  %gen123 = add i32 %_122, %1953
  %_124 = sub i32 0, %256
  %gen125 = add i32 %_124, %1953
  %_126 = shl i32 %256, %1953
  %1954 = add i32 %256, %1953
  %1955 = icmp slt i32 %1954, 2
  br label %originalBB116

originalBB130alteredBB:                           ; preds = %originalBB130, %432
  call void @usage(i32 0) #14, !dbg !298
  br label %originalBB130

originalBB134alteredBB:                           ; preds = %originalBB134, %449
  %1956 = load i8**, i8*** %13, align 8, !dbg !299
  %1957 = getelementptr inbounds i8*, i8** %1956, i64 1, !dbg !299
  %1958 = load i8*, i8** %1957, align 8, !dbg !299
  %1959 = call i32 @strcmp(i8* %1958, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i64 0, i64 0)) #13, !dbg !299
  br label %originalBB134

originalBB138alteredBB:                           ; preds = %originalBB138, %470
  %collatzVar1alteredBB = alloca i32
  br label %originalBB138

originalBB142alteredBB:                           ; preds = %originalBB142, %487
  %1960 = load i32, i32* @inVal0
  %1961 = icmp sgt i32 %1960, 1
  br label %originalBB142

originalBB146alteredBB:                           ; preds = %originalBB146, %506
  store i32 5, i32* %collatzVar1
  br label %originalBB146

originalBB150alteredBB:                           ; preds = %originalBB150, %523
  %1962 = load i8**, i8*** @inVal1
  %1963 = getelementptr inbounds i8*, i8** %1962, i64 1
  %1964 = load i8*, i8** %1963
  %controle2alteredBB = call i32 @controle(i8* %1964, i32 0)
  store i32 %controle2alteredBB, i32* %collatzVar1
  br label %originalBB150

originalBB154alteredBB:                           ; preds = %originalBB154, %543
  %1965 = load i32, i32* %collatzVar1
  %1966 = icmp sgt i32 %1965, 1
  br label %originalBB154

originalBB158alteredBB:                           ; preds = %originalBB158, %562
  %1967 = load i32, i32* %collatzVar1
  %_159 = sub i32 %1967, 2
  %gen160 = mul i32 %_159, 2
  %_161 = shl i32 %1967, 2
  %_162 = sub i32 %1967, 2
  %gen163 = mul i32 %_162, 2
  %_164 = sub i32 %1967, 2
  %gen165 = mul i32 %_164, 2
  %_166 = sub i32 %1967, 2
  %gen167 = mul i32 %_166, 2
  %_168 = sub i32 %1967, 2
  %gen169 = mul i32 %_168, 2
  %_170 = shl i32 %1967, 2
  %_171 = sub i32 0, %1967
  %gen172 = add i32 %_171, 2
  %1968 = srem i32 %1967, 2
  %1969 = icmp eq i32 %1968, 0
  br label %originalBB158

originalBB176alteredBB:                           ; preds = %originalBB176, %582
  %1970 = load i32, i32* %collatzVar1
  %_177 = sub i32 %1970, 2
  %gen178 = mul i32 %_177, 2
  %_179 = shl i32 %1970, 2
  %_180 = shl i32 %1970, 2
  %_181 = shl i32 %1970, 2
  %1971 = sdiv i32 %1970, 2
  store i32 %1971, i32* %collatzVar1
  br label %originalBB176

originalBB185alteredBB:                           ; preds = %originalBB185, %601
  %1972 = load i32, i32* %collatzVar1
  %_186 = sub i32 0, %1972
  %gen187 = add i32 %_186, 3
  %_188 = sub i32 %1972, 3
  %gen189 = mul i32 %_188, 3
  %_190 = sub i32 0, %1972
  %gen191 = add i32 %_190, 3
  %_192 = sub i32 0, %1972
  %gen193 = add i32 %_192, 3
  %_194 = shl i32 %1972, 3
  %_195 = sub i32 0, %1972
  %gen196 = add i32 %_195, 3
  %_197 = sub i32 0, %1972
  %gen198 = add i32 %_197, 3
  %1973 = mul i32 %1972, 3
  %_199 = sub i32 %1973, 1
  %gen200 = mul i32 %_199, 1
  %_201 = sub i32 0, %1973
  %gen202 = add i32 %_201, 1
  %_203 = sub i32 %1973, 1
  %gen204 = mul i32 %_203, 1
  %_205 = shl i32 %1973, 1
  %_206 = shl i32 %1973, 1
  %_207 = sub i32 %1973, 1
  %gen208 = mul i32 %_207, 1
  %_209 = sub i32 %1973, 1
  %gen210 = mul i32 %_209, 1
  %1974 = add i32 %1973, 1
  store i32 %1974, i32* %collatzVar1
  br label %originalBB185

originalBB214alteredBB:                           ; preds = %originalBB214, %621
  %1975 = load i32, i32* %collatzVar1
  %_215 = sub i32 0, %461
  %gen216 = add i32 %_215, %1975
  %_217 = shl i32 %461, %1975
  %_218 = sub i32 %461, %1975
  %gen219 = mul i32 %_218, %1975
  %_220 = shl i32 %461, %1975
  %_221 = sub i32 0, %461
  %gen222 = add i32 %_221, %1975
  %_223 = shl i32 %461, %1975
  %1976 = sub i32 %461, %1975
  %1977 = icmp sgt i32 %1976, -2
  br label %originalBB214

originalBB227alteredBB:                           ; preds = %originalBB227, %656
  br label %originalBB227

originalBB231alteredBB:                           ; preds = %originalBB231, %673
  %1978 = load i32, i32* %12, align 4, !dbg !313
  %1979 = icmp sgt i32 %1978, 0, !dbg !314
  br label %originalBB231

originalBB235alteredBB:                           ; preds = %originalBB235, %692
  %1980 = load i8**, i8*** %13, align 8, !dbg !316
  %1981 = getelementptr inbounds i8*, i8** %1980, i64 0, !dbg !316
  %1982 = load i8*, i8** %1981, align 8, !dbg !316
  %1983 = load i8, i8* %1982, align 1, !dbg !317
  %1984 = sext i8 %1983 to i32, !dbg !317
  %1985 = icmp eq i32 %1984, 45, !dbg !318
  br label %originalBB235

originalBB239alteredBB:                           ; preds = %originalBB239, %715
  br label %originalBB239

originalBB243alteredBB:                           ; preds = %originalBB243, %733
  %1986 = load i8**, i8*** %13, align 8, !dbg !323
  %1987 = getelementptr inbounds i8*, i8** %1986, i64 0, !dbg !323
  %1988 = load i8*, i8** %1987, align 8, !dbg !323
  %1989 = getelementptr inbounds i8, i8* %1988, i64 1, !dbg !324
  store i8* %1989, i8** %18, align 8, !dbg !322
  call void @llvm.dbg.declare(metadata !4, metadata !551, metadata !DIExpression()), !dbg !326
  store i64 0, i64* %19, align 8, !dbg !327
  br label %originalBB243

originalBB247alteredBB:                           ; preds = %originalBB247, %754
  %1990 = load i8*, i8** %18, align 8, !dbg !330
  %1991 = load i64, i64* %19, align 8, !dbg !332
  %1992 = getelementptr inbounds i8, i8* %1990, i64 %1991, !dbg !330
  %1993 = load i8, i8* %1992, align 1, !dbg !330
  %1994 = icmp ne i8 %1993, 0, !dbg !333
  br label %originalBB247

originalBB251alteredBB:                           ; preds = %originalBB251, %776
  %1995 = load i8*, i8** %18, align 8, !dbg !334
  %1996 = load i64, i64* %19, align 8, !dbg !335
  %1997 = getelementptr inbounds i8, i8* %1995, i64 %1996, !dbg !334
  %1998 = load i8, i8* %1997, align 1, !dbg !334
  %1999 = sext i8 %1998 to i32, !dbg !334
  br label %originalBB251

originalBB255alteredBB:                           ; preds = %originalBB255, %799
  br label %originalBB255

originalBB259alteredBB:                           ; preds = %originalBB259, %816
  br label %originalBB259

originalBB263alteredBB:                           ; preds = %originalBB263, %836
  %2000 = load i64, i64* %19, align 8, !dbg !345
  br label %originalBB263

originalBB267alteredBB:                           ; preds = %originalBB267, %855
  %2001 = load i32, i32* @inVal0
  %2002 = icmp sgt i32 %2001, 1
  br label %originalBB267

originalBB271alteredBB:                           ; preds = %originalBB271, %874
  store i32 43, i32* %collatzVar3
  br label %originalBB271

originalBB275alteredBB:                           ; preds = %originalBB275, %891
  %2003 = load i8**, i8*** @inVal1
  %2004 = getelementptr inbounds i8*, i8** %2003, i64 1
  %2005 = load i8*, i8** %2004
  %2006 = trunc i64 0 to i32
  %controle4alteredBB = call i32 @controle(i8* %2005, i32 %2006)
  store i32 %controle4alteredBB, i32* %collatzVar3
  br label %originalBB275

originalBB280alteredBB:                           ; preds = %originalBB280, %915
  %2007 = load i32, i32* %collatzVar3
  %_281 = sub i32 0, %2007
  %gen282 = add i32 %_281, 2
  %2008 = srem i32 %2007, 2
  %2009 = icmp eq i32 %2008, 0
  br label %originalBB280

originalBB286alteredBB:                           ; preds = %originalBB286, %935
  %2010 = load i32, i32* %collatzVar3
  %_287 = sub i32 %2010, 2
  %gen288 = mul i32 %_287, 2
  %2011 = sdiv i32 %2010, 2
  store i32 %2011, i32* %collatzVar3
  br label %originalBB286

originalBB292alteredBB:                           ; preds = %originalBB292, %954
  %2012 = load i32, i32* %collatzVar3
  %_293 = sub i32 %2012, 3
  %gen294 = mul i32 %_293, 3
  %_295 = shl i32 %2012, 3
  %_296 = sub i32 0, %2012
  %gen297 = add i32 %_296, 3
  %_298 = sub i32 %2012, 3
  %gen299 = mul i32 %_298, 3
  %_300 = sub i32 0, %2012
  %gen301 = add i32 %_300, 3
  %_302 = shl i32 %2012, 3
  %_303 = sub i32 0, %2012
  %gen304 = add i32 %_303, 3
  %2013 = mul i32 %2012, 3
  %_305 = sub i32 %2013, 1
  %gen306 = mul i32 %_305, 1
  %_307 = sub i32 0, %2013
  %gen308 = add i32 %_307, 1
  %_309 = sub i32 0, %2013
  %gen310 = add i32 %_309, 1
  %_311 = sub i32 0, %2013
  %gen312 = add i32 %_311, 1
  %2014 = add i32 %2013, 1
  store i32 %2014, i32* %collatzVar3
  br label %originalBB292

originalBB316alteredBB:                           ; preds = %originalBB316, %980
  %2015 = load i32, i32* %collatzVar3
  %2016 = sext i32 %2015 to i64
  %2017 = sext i32 2 to i64
  %_317 = shl i64 %845, %2016
  %_318 = sub i64 %845, %2016
  %gen319 = mul i64 %_318, %2016
  %_320 = sub i64 0, %845
  %gen321 = add i64 %_320, %2016
  %_322 = sub i64 0, %845
  %gen323 = add i64 %_322, %2016
  %2018 = add i64 %845, %2016
  %2019 = icmp slt i64 %2018, %2017
  br label %originalBB316

originalBB327alteredBB:                           ; preds = %originalBB327, %1002
  br label %originalBB327

originalBB331alteredBB:                           ; preds = %originalBB331, %1019
  br label %originalBB331

originalBB335alteredBB:                           ; preds = %originalBB335, %1036
  %2020 = load i8*, i8** %18, align 8, !dbg !350
  %2021 = load i8, i8* %2020, align 1, !dbg !351
  %2022 = icmp ne i8 %2021, 0, !dbg !349
  br label %originalBB335

originalBB339alteredBB:                           ; preds = %originalBB339, %1061
  store i8 1, i8* %17, align 1, !dbg !355
  br label %originalBB339

originalBB343alteredBB:                           ; preds = %originalBB343, %1079
  store i8 0, i8* %14, align 1, !dbg !360
  br label %originalBB343

originalBB347alteredBB:                           ; preds = %originalBB347, %1096
  br label %originalBB347

originalBB351alteredBB:                           ; preds = %originalBB351, %1113
  %2023 = load i32, i32* %12, align 4, !dbg !364
  %_352 = shl i32 %2023, -1
  %_353 = shl i32 %2023, -1
  %_354 = sub i32 %2023, -1
  %gen355 = mul i32 %_354, -1
  %_356 = sub i32 %2023, -1
  %gen357 = mul i32 %_356, -1
  %_358 = sub i32 0, %2023
  %gen359 = add i32 %_358, -1
  %_360 = shl i32 %2023, -1
  %_361 = sub i32 0, %2023
  %gen362 = add i32 %_361, -1
  %2024 = add nsw i32 %2023, -1, !dbg !364
  store i32 %2024, i32* %12, align 4, !dbg !364
  %2025 = load i8**, i8*** %13, align 8, !dbg !365
  %2026 = getelementptr inbounds i8*, i8** %2025, i32 1, !dbg !365
  store i8** %2026, i8*** %13, align 8, !dbg !365
  br label %originalBB351

originalBB366alteredBB:                           ; preds = %originalBB366, %1134
  br label %originalBB366

originalBB370alteredBB:                           ; preds = %originalBB370, %1151
  br label %originalBB370

originalBB374alteredBB:                           ; preds = %originalBB374, %1168
  %2027 = load i8, i8* %17, align 1, !dbg !370
  %2028 = trunc i8 %2027 to i1, !dbg !370
  br label %originalBB374

originalBB378alteredBB:                           ; preds = %originalBB378, %1187
  %2029 = load i8, i8* %15, align 1, !dbg !373
  %2030 = trunc i8 %2029 to i1, !dbg !373
  br label %originalBB378

originalBB382alteredBB:                           ; preds = %originalBB382, %1206
  br label %originalBB382

originalBB386alteredBB:                           ; preds = %originalBB386, %1223
  %2031 = load i32, i32* %12, align 4, !dbg !377
  %2032 = icmp sgt i32 %2031, 0, !dbg !378
  br label %originalBB386

originalBB390alteredBB:                           ; preds = %originalBB390, %1242
  %2033 = load i8**, i8*** %13, align 8, !dbg !382
  %2034 = getelementptr inbounds i8*, i8** %2033, i64 0, !dbg !382
  %2035 = load i8*, i8** %2034, align 8, !dbg !382
  store i8* %2035, i8** %20, align 8, !dbg !381
  call void @llvm.dbg.declare(metadata !4, metadata !556, metadata !DIExpression()), !dbg !384
  br label %originalBB390

originalBB394alteredBB:                           ; preds = %originalBB394, %1262
  %2036 = load i8*, i8** %20, align 8, !dbg !386
  %2037 = getelementptr inbounds i8, i8* %2036, i32 1, !dbg !386
  store i8* %2037, i8** %20, align 8, !dbg !386
  %2038 = load i8, i8* %2036, align 1, !dbg !387
  store i8 %2038, i8* %21, align 1, !dbg !388
  %2039 = icmp ne i8 %2038, 0, !dbg !385
  br label %originalBB394

originalBB398alteredBB:                           ; preds = %originalBB398, %1297
  store i8 7, i8* %21, align 1, !dbg !403
  br label %originalBB398

originalBB402alteredBB:                           ; preds = %originalBB402, %1314
  store i8 8, i8* %21, align 1, !dbg !406
  br label %originalBB402

originalBB406alteredBB:                           ; preds = %originalBB406, %1336
  store i8 9, i8* %21, align 1, !dbg !417
  br label %originalBB406

originalBB410alteredBB:                           ; preds = %originalBB410, %1354
  %2040 = load i8*, i8** %20, align 8, !dbg !424
  %2041 = load i8, i8* %2040, align 1, !dbg !425
  store i8 %2041, i8* %22, align 1, !dbg !423
  %2042 = call i16** @__ctype_b_loc() #15, !dbg !426
  %2043 = load i16*, i16** %2042, align 8, !dbg !426
  %2044 = load i8, i8* %22, align 1, !dbg !426
  %2045 = zext i8 %2044 to i32, !dbg !426
  %2046 = sext i32 %2045 to i64, !dbg !426
  %2047 = getelementptr inbounds i16, i16* %2043, i64 %2046, !dbg !426
  %2048 = load i16, i16* %2047, align 2, !dbg !426
  %2049 = zext i16 %2048 to i32, !dbg !426
  %_411 = shl i32 %2049, 4096
  %_412 = sub i32 %2049, 4096
  %gen413 = mul i32 %_412, 4096
  %_414 = shl i32 %2049, 4096
  %_415 = sub i32 %2049, 4096
  %gen416 = mul i32 %_415, 4096
  %_417 = shl i32 %2049, 4096
  %_418 = sub i32 0, %2049
  %gen419 = add i32 %_418, 4096
  %_420 = shl i32 %2049, 4096
  %2050 = and i32 %2049, 4096, !dbg !426
  %2051 = icmp ne i32 %2050, 0, !dbg !426
  br label %originalBB410

originalBB424alteredBB:                           ; preds = %originalBB424, %1383
  br label %originalBB424

originalBB428alteredBB:                           ; preds = %originalBB428, %1400
  %2052 = load i8*, i8** %20, align 8, !dbg !430
  %2053 = getelementptr inbounds i8, i8* %2052, i32 1, !dbg !430
  store i8* %2053, i8** %20, align 8, !dbg !430
  %2054 = load i8, i8* %22, align 1, !dbg !431
  %2055 = call i32 @hextobin(i8 zeroext %2054), !dbg !432
  %2056 = trunc i32 %2055 to i8, !dbg !432
  store i8 %2056, i8* %21, align 1, !dbg !433
  %2057 = load i8*, i8** %20, align 8, !dbg !434
  %2058 = load i8, i8* %2057, align 1, !dbg !435
  store i8 %2058, i8* %22, align 1, !dbg !436
  %2059 = call i16** @__ctype_b_loc() #15, !dbg !437
  %2060 = load i16*, i16** %2059, align 8, !dbg !437
  %2061 = load i8, i8* %22, align 1, !dbg !437
  %2062 = zext i8 %2061 to i32, !dbg !437
  %2063 = sext i32 %2062 to i64, !dbg !437
  %2064 = getelementptr inbounds i16, i16* %2060, i64 %2063, !dbg !437
  %2065 = load i16, i16* %2064, align 2, !dbg !437
  %2066 = zext i16 %2065 to i32, !dbg !437
  %_429 = sub i32 %2066, 4096
  %gen430 = mul i32 %_429, 4096
  %_431 = shl i32 %2066, 4096
  %_432 = shl i32 %2066, 4096
  %_433 = shl i32 %2066, 4096
  %_434 = shl i32 %2066, 4096
  %2067 = and i32 %2066, 4096, !dbg !437
  %2068 = icmp ne i32 %2067, 0, !dbg !437
  br label %originalBB428

originalBB438alteredBB:                           ; preds = %originalBB438, %1434
  %2069 = load i8*, i8** %20, align 8, !dbg !440
  %2070 = getelementptr inbounds i8, i8* %2069, i32 1, !dbg !440
  store i8* %2070, i8** %20, align 8, !dbg !440
  %2071 = load i8, i8* %21, align 1, !dbg !442
  %2072 = zext i8 %2071 to i32, !dbg !442
  %_439 = sub i32 0, %2072
  %gen440 = add i32 %_439, 16
  %2073 = mul nsw i32 %2072, 16, !dbg !443
  %2074 = load i8, i8* %22, align 1, !dbg !444
  %2075 = call i32 @hextobin(i8 zeroext %2074), !dbg !445
  %_441 = sub i32 %2073, %2075
  %gen442 = mul i32 %_441, %2075
  %_443 = sub i32 0, %2073
  %gen444 = add i32 %_443, %2075
  %_445 = shl i32 %2073, %2075
  %2076 = add nsw i32 %2073, %2075, !dbg !446
  %2077 = trunc i32 %2076 to i8, !dbg !442
  store i8 %2077, i8* %21, align 1, !dbg !447
  br label %originalBB438

originalBB449alteredBB:                           ; preds = %originalBB449, %1460
  br label %originalBB449

originalBB453alteredBB:                           ; preds = %originalBB453, %1477
  store i8 0, i8* %21, align 1, !dbg !450
  %2078 = load i8*, i8** %20, align 8, !dbg !451
  %2079 = load i8, i8* %2078, align 1, !dbg !453
  %2080 = sext i8 %2079 to i32, !dbg !453
  %2081 = icmp sle i32 48, %2080, !dbg !454
  br label %originalBB453

originalBB457alteredBB:                           ; preds = %originalBB457, %1498
  %2082 = load i8*, i8** %20, align 8, !dbg !456
  %2083 = load i8, i8* %2082, align 1, !dbg !457
  %2084 = sext i8 %2083 to i32, !dbg !457
  %2085 = icmp sle i32 %2084, 55, !dbg !458
  br label %originalBB457

originalBB461alteredBB:                           ; preds = %originalBB461, %1533
  %2086 = load i8*, i8** %20, align 8, !dbg !471
  %2087 = load i8, i8* %2086, align 1, !dbg !472
  %2088 = sext i8 %2087 to i32, !dbg !472
  %2089 = icmp sle i32 %2088, 55, !dbg !473
  br label %originalBB461

originalBB465alteredBB:                           ; preds = %originalBB465, %1565
  %2090 = load i8*, i8** %20, align 8, !dbg !483
  %2091 = load i8, i8* %2090, align 1, !dbg !485
  %2092 = sext i8 %2091 to i32, !dbg !485
  %2093 = icmp sle i32 48, %2092, !dbg !486
  br label %originalBB465

originalBB469alteredBB:                           ; preds = %originalBB469, %1586
  %2094 = load i8*, i8** %20, align 8, !dbg !488
  %2095 = load i8, i8* %2094, align 1, !dbg !489
  %2096 = sext i8 %2095 to i32, !dbg !489
  %2097 = icmp sle i32 %2096, 55, !dbg !490
  br label %originalBB469

originalBB473alteredBB:                           ; preds = %originalBB473, %1618
  br label %originalBB473

originalBB477alteredBB:                           ; preds = %originalBB477, %1635
  br label %originalBB477

originalBB481alteredBB:                           ; preds = %originalBB481, %1655
  br label %originalBB481

originalBB485alteredBB:                           ; preds = %originalBB485, %1672
  %2098 = load i8, i8* %21, align 1, !dbg !507
  %2099 = zext i8 %2098 to i32, !dbg !507
  %2100 = call i32 @putchar_unlocked(i32 %2099), !dbg !507
  br label %originalBB485

originalBB489alteredBB:                           ; preds = %originalBB489, %1692
  %2101 = load i32, i32* %12, align 4, !dbg !510
  %_490 = sub i32 %2101, -1
  %gen491 = mul i32 %_490, -1
  %_492 = shl i32 %2101, -1
  %_493 = sub i32 %2101, -1
  %gen494 = mul i32 %_493, -1
  %_495 = shl i32 %2101, -1
  %_496 = shl i32 %2101, -1
  %_497 = shl i32 %2101, -1
  %2102 = add nsw i32 %2101, -1, !dbg !510
  store i32 %2102, i32* %12, align 4, !dbg !510
  %2103 = load i8**, i8*** %13, align 8, !dbg !511
  %2104 = getelementptr inbounds i8*, i8** %2103, i32 1, !dbg !511
  store i8** %2104, i8*** %13, align 8, !dbg !511
  %2105 = load i32, i32* %12, align 4, !dbg !512
  %2106 = icmp sgt i32 %2105, 0, !dbg !514
  br label %originalBB489

originalBB501alteredBB:                           ; preds = %originalBB501, %1715
  %2107 = call i32 @putchar_unlocked(i32 32), !dbg !516
  br label %originalBB501

originalBB505alteredBB:                           ; preds = %originalBB505, %1733
  br label %originalBB505

originalBB509alteredBB:                           ; preds = %originalBB509, %1751
  br label %originalBB509

originalBB513alteredBB:                           ; preds = %originalBB513, %1768
  %2108 = load i32, i32* %12, align 4, !dbg !522
  %2109 = icmp sgt i32 %2108, 0, !dbg !523
  br label %originalBB513

originalBB517alteredBB:                           ; preds = %originalBB517, %1801
  br label %originalBB517

originalBB521alteredBB:                           ; preds = %originalBB521, %1818
  br label %originalBB521

originalBB525alteredBB:                           ; preds = %originalBB525, %1835
  %2110 = load i8, i8* %14, align 1, !dbg !535
  %2111 = trunc i8 %2110 to i1, !dbg !535
  br label %originalBB525

originalBB529alteredBB:                           ; preds = %originalBB529, %1854
  %2112 = call i32 @putchar_unlocked(i32 10), !dbg !538
  br label %originalBB529

originalBB533alteredBB:                           ; preds = %originalBB533, %1873
  %2113 = load i32, i32* %11, align 4, !dbg !540
  br label %originalBB533
}

; Function Attrs: nounwind
declare dso_local i8* @getenv(i8*) #3

; Function Attrs: nounwind
declare dso_local i8* @bindtextdomain(i8*, i8*) #3

; Function Attrs: nounwind
declare dso_local i8* @textdomain(i8*) #3

; Function Attrs: nounwind
declare dso_local i32 @atexit(void ()*) #3

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #8

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @hextobin(i8 zeroext) #5 !dbg !562 {
  %2 = load i32, i32* @x.5
  %3 = load i32, i32* @y.6
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  store i8 %0, i8* %11, align 1
  call void @llvm.dbg.declare(metadata i8* %11, metadata !565, metadata !DIExpression()), !dbg !566
  %12 = load i8, i8* %11, align 1, !dbg !567
  %13 = zext i8 %12 to i32, !dbg !567
  %14 = load i32, i32* @x.5
  %15 = load i32, i32* @y.6
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %13, label %22 [
    i32 97, label %26
    i32 65, label %26
    i32 98, label %27
    i32 66, label %27
    i32 99, label %28
    i32 67, label %28
    i32 100, label %45
    i32 68, label %45
    i32 101, label %62
    i32 69, label %62
    i32 102, label %63
    i32 70, label %63
  ], !dbg !568

22:                                               ; preds = %originalBBpart2
  %23 = load i8, i8* %11, align 1, !dbg !569
  %24 = zext i8 %23 to i32, !dbg !569
  %25 = sub nsw i32 %24, 48, !dbg !571
  store i32 %25, i32* %10, align 4, !dbg !572
  br label %80, !dbg !572

26:                                               ; preds = %originalBBpart2, %originalBBpart2
  store i32 10, i32* %10, align 4, !dbg !573
  br label %80, !dbg !573

27:                                               ; preds = %originalBBpart2, %originalBBpart2
  store i32 11, i32* %10, align 4, !dbg !574
  br label %80, !dbg !574

28:                                               ; preds = %originalBBpart2, %originalBBpart2
  %29 = load i32, i32* @x.5
  %30 = load i32, i32* @y.6
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %28, %originalBB1alteredBB
  store i32 12, i32* %10, align 4, !dbg !575
  %37 = load i32, i32* @x.5
  %38 = load i32, i32* @y.6
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %80, !dbg !575

45:                                               ; preds = %originalBBpart2, %originalBBpart2
  %46 = load i32, i32* @x.5
  %47 = load i32, i32* @y.6
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %45, %originalBB6alteredBB
  store i32 13, i32* %10, align 4, !dbg !576
  %54 = load i32, i32* @x.5
  %55 = load i32, i32* @y.6
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %80, !dbg !576

62:                                               ; preds = %originalBBpart2, %originalBBpart2
  store i32 14, i32* %10, align 4, !dbg !577
  br label %80, !dbg !577

63:                                               ; preds = %originalBBpart2, %originalBBpart2
  %64 = load i32, i32* @x.5
  %65 = load i32, i32* @y.6
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %63, %originalBB10alteredBB
  store i32 15, i32* %10, align 4, !dbg !578
  %72 = load i32, i32* @x.5
  %73 = load i32, i32* @y.6
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %80, !dbg !578

80:                                               ; preds = %originalBBpart212, %62, %originalBBpart28, %originalBBpart24, %27, %26, %22
  %81 = load i32, i32* %10, align 4, !dbg !579
  ret i32 %81, !dbg !579

originalBBalteredBB:                              ; preds = %originalBB, %1
  %82 = alloca i32, align 4
  %83 = alloca i8, align 1
  store i8 %0, i8* %83, align 1
  call void @llvm.dbg.declare(metadata i8* %83, metadata !580, metadata !DIExpression()), !dbg !566
  %84 = load i8, i8* %83, align 1, !dbg !567
  %85 = zext i8 %84 to i32, !dbg !567
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %28
  store i32 12, i32* %10, align 4, !dbg !575
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %45
  store i32 13, i32* %10, align 4, !dbg !576
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %63
  store i32 15, i32* %10, align 4, !dbg !578
  br label %originalBB10
}

declare dso_local i32 @putchar_unlocked(i32) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @close_stdout() #5 !dbg !583 {
  %1 = alloca i8*, align 8
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !586
  %3 = call i32 @close_stream(%struct._IO_FILE* %2), !dbg !588
  %4 = icmp ne i32 %3, 0, !dbg !589
  br i1 %4, label %5, label %108, !dbg !590

5:                                                ; preds = %0
  %6 = load i32, i32* @x.7
  %7 = load i32, i32* @y.8
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = load i8, i8* @ignore_EPIPE, align 1, !dbg !591
  %15 = trunc i8 %14 to i1, !dbg !591
  %16 = load i32, i32* @x.7
  %17 = load i32, i32* @y.8
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %44, !dbg !592

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.7
  %26 = load i32, i32* @y.8
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = call i32* @__errno_location() #15, !dbg !593
  %34 = load i32, i32* %33, align 4, !dbg !593
  %35 = icmp eq i32 %34, 32, !dbg !594
  %36 = load i32, i32* @x.7
  %37 = load i32, i32* @y.8
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %35, label %108, label %44, !dbg !595

44:                                               ; preds = %originalBBpart24, %originalBBpart2
  call void @llvm.dbg.declare(metadata i8** %1, metadata !596, metadata !DIExpression()), !dbg !598
  %45 = load i32, i32* @x.7
  %46 = load i32, i32* @y.8
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  %53 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.40, i64 0, i64 0)) #10, !dbg !599
  store i8* %53, i8** %1, align 8, !dbg !598
  %54 = load i8*, i8** @file_name, align 8, !dbg !600
  %55 = icmp ne i8* %54, null, !dbg !600
  %56 = load i32, i32* @x.7
  %57 = load i32, i32* @y.8
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %55, label %64, label %86, !dbg !602

64:                                               ; preds = %originalBBpart28
  %65 = load i32, i32* @x.7
  %66 = load i32, i32* @y.8
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %64, %originalBB10alteredBB
  %73 = call i32* @__errno_location() #15, !dbg !603
  %74 = load i32, i32* %73, align 4, !dbg !603
  %75 = load i8*, i8** @file_name, align 8, !dbg !604
  %76 = call i8* @quotearg_colon(i8* %75), !dbg !605
  %77 = load i8*, i8** %1, align 8, !dbg !606
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %74, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.41, i64 0, i64 0), i8* %76, i8* %77), !dbg !607
  %78 = load i32, i32* @x.7
  %79 = load i32, i32* @y.8
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %90, !dbg !607

86:                                               ; preds = %originalBBpart28
  %87 = call i32* @__errno_location() #15, !dbg !608
  %88 = load i32, i32* %87, align 4, !dbg !608
  %89 = load i8*, i8** %1, align 8, !dbg !609
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %88, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.42, i64 0, i64 0), i8* %89), !dbg !610
  br label %90

90:                                               ; preds = %86, %originalBBpart212
  %91 = load i32, i32* @x.7
  %92 = load i32, i32* @y.8
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %90, %originalBB14alteredBB
  %99 = load volatile i32, i32* @exit_failure, align 4, !dbg !611
  call void @_exit(i32 %99) #14, !dbg !612
  %100 = load i32, i32* @x.7
  %101 = load i32, i32* @y.8
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  unreachable, !dbg !612

108:                                              ; preds = %originalBBpart24, %0
  %109 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !613
  %110 = call i32 @close_stream(%struct._IO_FILE* %109), !dbg !615
  %111 = icmp ne i32 %110, 0, !dbg !616
  br i1 %111, label %112, label %130, !dbg !617

112:                                              ; preds = %108
  %113 = load i32, i32* @x.7
  %114 = load i32, i32* @y.8
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %112, %originalBB18alteredBB
  %121 = load volatile i32, i32* @exit_failure, align 4, !dbg !618
  call void @_exit(i32 %121) #14, !dbg !619
  %122 = load i32, i32* @x.7
  %123 = load i32, i32* @y.8
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  unreachable, !dbg !619

130:                                              ; preds = %108
  %131 = load i32, i32* @x.7
  %132 = load i32, i32* @y.8
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %130, %originalBB22alteredBB
  %139 = load i32, i32* @x.7
  %140 = load i32, i32* @y.8
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret void, !dbg !620

originalBBalteredBB:                              ; preds = %originalBB, %5
  %147 = load i8, i8* @ignore_EPIPE, align 1, !dbg !591
  %148 = trunc i8 %147 to i1, !dbg !591
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %149 = call i32* @__errno_location() #15, !dbg !593
  %150 = load i32, i32* %149, align 4, !dbg !593
  %151 = icmp eq i32 %150, 32, !dbg !594
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  %152 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.40, i64 0, i64 0)) #10, !dbg !599
  store i8* %152, i8** %1, align 8, !dbg !598
  %153 = load i8*, i8** @file_name, align 8, !dbg !600
  %154 = icmp ne i8* %153, null, !dbg !600
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %64
  %155 = call i32* @__errno_location() #15, !dbg !603
  %156 = load i32, i32* %155, align 4, !dbg !603
  %157 = load i8*, i8** @file_name, align 8, !dbg !604
  %158 = call i8* @quotearg_colon(i8* %157), !dbg !605
  %159 = load i8*, i8** %1, align 8, !dbg !606
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %156, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.41, i64 0, i64 0), i8* %158, i8* %159), !dbg !607
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %90
  %160 = load volatile i32, i32* @exit_failure, align 4, !dbg !611
  call void @_exit(i32 %160) #14, !dbg !612
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %112
  %161 = load volatile i32, i32* @exit_failure, align 4, !dbg !618
  call void @_exit(i32 %161) #14, !dbg !619
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %130
  br label %originalBB22
}

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #8

declare dso_local void @error(i32, i32, i8*, ...) #4

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #9

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_program_name(i8*) #5 !dbg !621 {
  %2 = load i32, i32* @x.9
  %3 = load i32, i32* @y.10
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !622, metadata !DIExpression()), !dbg !623
  call void @llvm.dbg.declare(metadata i8** %11, metadata !624, metadata !DIExpression()), !dbg !625
  call void @llvm.dbg.declare(metadata i8** %12, metadata !626, metadata !DIExpression()), !dbg !627
  %13 = load i8*, i8** %10, align 8, !dbg !628
  %14 = icmp eq i8* %13, null, !dbg !630
  %15 = load i32, i32* @x.9
  %16 = load i32, i32* @y.10
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %42, !dbg !631

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.9
  %25 = load i32, i32* @y.10
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !632
  %33 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.47, i64 0, i64 0), %struct._IO_FILE* %32), !dbg !634
  call void @abort() #12, !dbg !635
  %34 = load i32, i32* @x.9
  %35 = load i32, i32* @y.10
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !635

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.9
  %44 = load i32, i32* @y.10
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load i8*, i8** %10, align 8, !dbg !636
  %52 = call i8* @strrchr(i8* %51, i32 47) #13, !dbg !637
  store i8* %52, i8** %11, align 8, !dbg !638
  %53 = load i8*, i8** %11, align 8, !dbg !639
  %54 = icmp ne i8* %53, null, !dbg !640
  %55 = load i32, i32* @x.9
  %56 = load i32, i32* @y.10
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %54, label %63, label %66, !dbg !639

63:                                               ; preds = %originalBBpart28
  %64 = load i8*, i8** %11, align 8, !dbg !641
  %65 = getelementptr inbounds i8, i8* %64, i64 1, !dbg !642
  br label %84, !dbg !639

66:                                               ; preds = %originalBBpart28
  %67 = load i32, i32* @x.9
  %68 = load i32, i32* @y.10
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %75 = load i8*, i8** %10, align 8, !dbg !643
  %76 = load i32, i32* @x.9
  %77 = load i32, i32* @y.10
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %84, !dbg !639

84:                                               ; preds = %originalBBpart212, %63
  %85 = phi i8* [ %65, %63 ], [ %75, %originalBBpart212 ], !dbg !639
  %86 = load i32, i32* @x.9
  %87 = load i32, i32* @y.10
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %84, %originalBB14alteredBB
  store i8* %85, i8** %12, align 8, !dbg !644
  %94 = load i8*, i8** %12, align 8, !dbg !645
  %95 = load i8*, i8** %10, align 8, !dbg !647
  %96 = ptrtoint i8* %94 to i64, !dbg !648
  %97 = ptrtoint i8* %95 to i64, !dbg !648
  %98 = sub i64 %96, %97, !dbg !648
  %99 = icmp sge i64 %98, 7, !dbg !649
  %100 = load i32, i32* @x.9
  %101 = load i32, i32* @y.10
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart223, label %originalBB14alteredBB

originalBBpart223:                                ; preds = %originalBB14
  br i1 %99, label %108, label %171, !dbg !650

108:                                              ; preds = %originalBBpart223
  %109 = load i32, i32* @x.9
  %110 = load i32, i32* @y.10
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %108, %originalBB25alteredBB
  %117 = load i8*, i8** %12, align 8, !dbg !651
  %118 = getelementptr inbounds i8, i8* %117, i64 -7, !dbg !652
  %119 = call i32 @strncmp(i8* %118, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.48, i64 0, i64 0), i64 7) #13, !dbg !653
  %120 = icmp eq i32 %119, 0, !dbg !654
  %121 = load i32, i32* @x.9
  %122 = load i32, i32* @y.10
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br i1 %120, label %129, label %171, !dbg !655

129:                                              ; preds = %originalBBpart227
  %130 = load i8*, i8** %12, align 8, !dbg !656
  store i8* %130, i8** %10, align 8, !dbg !658
  %131 = load i8*, i8** %12, align 8, !dbg !659
  %132 = call i32 @strncmp(i8* %131, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.49, i64 0, i64 0), i64 3) #13, !dbg !661
  %133 = icmp eq i32 %132, 0, !dbg !662
  br i1 %133, label %134, label %154, !dbg !663

134:                                              ; preds = %129
  %135 = load i32, i32* @x.9
  %136 = load i32, i32* @y.10
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %134, %originalBB29alteredBB
  %143 = load i8*, i8** %12, align 8, !dbg !664
  %144 = getelementptr inbounds i8, i8* %143, i64 3, !dbg !666
  store i8* %144, i8** %10, align 8, !dbg !667
  %145 = load i8*, i8** %10, align 8, !dbg !668
  store i8* %145, i8** @program_invocation_short_name, align 8, !dbg !669
  %146 = load i32, i32* @x.9
  %147 = load i32, i32* @y.10
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br label %154, !dbg !670

154:                                              ; preds = %originalBBpart231, %129
  %155 = load i32, i32* @x.9
  %156 = load i32, i32* @y.10
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %154, %originalBB33alteredBB
  %163 = load i32, i32* @x.9
  %164 = load i32, i32* @y.10
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br label %171, !dbg !671

171:                                              ; preds = %originalBBpart235, %originalBBpart227, %originalBBpart223
  %172 = load i32, i32* @x.9
  %173 = load i32, i32* @y.10
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %171, %originalBB37alteredBB
  %180 = load i8*, i8** %10, align 8, !dbg !672
  store i8* %180, i8** @program_name, align 8, !dbg !673
  %181 = load i8*, i8** %10, align 8, !dbg !674
  store i8* %181, i8** @program_invocation_name, align 8, !dbg !675
  %182 = load i32, i32* @x.9
  %183 = load i32, i32* @y.10
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  ret void, !dbg !676

originalBBalteredBB:                              ; preds = %originalBB, %1
  %190 = alloca i8*, align 8
  %191 = alloca i8*, align 8
  %192 = alloca i8*, align 8
  store i8* %0, i8** %190, align 8
  call void @llvm.dbg.declare(metadata i8** %190, metadata !677, metadata !DIExpression()), !dbg !623
  call void @llvm.dbg.declare(metadata i8** %191, metadata !683, metadata !DIExpression()), !dbg !625
  call void @llvm.dbg.declare(metadata i8** %192, metadata !684, metadata !DIExpression()), !dbg !627
  %193 = load i8*, i8** %190, align 8, !dbg !628
  %194 = icmp eq i8* %193, null, !dbg !630
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  %195 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !632
  %196 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.47, i64 0, i64 0), %struct._IO_FILE* %195), !dbg !634
  call void @abort() #12, !dbg !635
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %197 = load i8*, i8** %10, align 8, !dbg !636
  %198 = call i8* @strrchr(i8* %197, i32 47) #13, !dbg !637
  store i8* %198, i8** %11, align 8, !dbg !638
  %199 = load i8*, i8** %11, align 8, !dbg !639
  %200 = icmp ne i8* %199, null, !dbg !640
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %201 = load i8*, i8** %10, align 8, !dbg !643
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %84
  store i8* %85, i8** %12, align 8, !dbg !644
  %202 = load i8*, i8** %12, align 8, !dbg !645
  %203 = load i8*, i8** %10, align 8, !dbg !647
  %204 = ptrtoint i8* %202 to i64, !dbg !648
  %205 = ptrtoint i8* %203 to i64, !dbg !648
  %_ = shl i64 %204, %205
  %_15 = shl i64 %204, %205
  %_16 = sub i64 0, %204
  %gen = add i64 %_16, %205
  %_17 = shl i64 %204, %205
  %_18 = shl i64 %204, %205
  %_19 = shl i64 %204, %205
  %_20 = sub i64 0, %204
  %gen21 = add i64 %_20, %205
  %206 = sub i64 %204, %205, !dbg !648
  %207 = icmp sge i64 %206, 7, !dbg !649
  br label %originalBB14

originalBB25alteredBB:                            ; preds = %originalBB25, %108
  %208 = load i8*, i8** %12, align 8, !dbg !651
  %209 = getelementptr inbounds i8, i8* %208, i64 -7, !dbg !652
  %210 = call i32 @strncmp(i8* %209, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.48, i64 0, i64 0), i64 7) #13, !dbg !653
  %211 = icmp eq i32 %210, 0, !dbg !654
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %134
  %212 = load i8*, i8** %12, align 8, !dbg !664
  %213 = getelementptr inbounds i8, i8* %212, i64 3, !dbg !666
  store i8* %213, i8** %10, align 8, !dbg !667
  %214 = load i8*, i8** %10, align 8, !dbg !668
  store i8* %214, i8** @program_invocation_short_name, align 8, !dbg !669
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %154
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %171
  %215 = load i8*, i8** %10, align 8, !dbg !672
  store i8* %215, i8** @program_name, align 8, !dbg !673
  %216 = load i8*, i8** %10, align 8, !dbg !674
  store i8* %216, i8** @program_invocation_name, align 8, !dbg !675
  br label %originalBB37
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #4

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #2

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @set_char_quoting(%struct.quoting_options*, i8 signext, i32) #5 !dbg !685 {
  %4 = load i32, i32* @x.11
  %5 = load i32, i32* @y.12
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca %struct.quoting_options*, align 8
  %13 = alloca i8, align 1
  %14 = alloca i32, align 4
  %15 = alloca i8, align 1
  %16 = alloca i32*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %12, metadata !689, metadata !DIExpression()), !dbg !690
  store i8 %1, i8* %13, align 1
  call void @llvm.dbg.declare(metadata i8* %13, metadata !691, metadata !DIExpression()), !dbg !692
  store i32 %2, i32* %14, align 4
  call void @llvm.dbg.declare(metadata i32* %14, metadata !693, metadata !DIExpression()), !dbg !694
  call void @llvm.dbg.declare(metadata i8* %15, metadata !695, metadata !DIExpression()), !dbg !696
  %19 = load i8, i8* %13, align 1, !dbg !697
  store i8 %19, i8* %15, align 1, !dbg !696
  call void @llvm.dbg.declare(metadata i32** %16, metadata !698, metadata !DIExpression()), !dbg !700
  %20 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !701
  %21 = icmp ne %struct.quoting_options* %20, null, !dbg !701
  %22 = load i32, i32* @x.11
  %23 = load i32, i32* @y.12
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %48, !dbg !701

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.11
  %32 = load i32, i32* @y.12
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !702
  %40 = load i32, i32* @x.11
  %41 = load i32, i32* @y.12
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %65, !dbg !701

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.11
  %50 = load i32, i32* @y.12
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.11
  %58 = load i32, i32* @y.12
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !701

65:                                               ; preds = %originalBBpart28, %originalBBpart24
  %66 = phi %struct.quoting_options* [ %39, %originalBBpart24 ], [ @default_quoting_options, %originalBBpart28 ], !dbg !701
  %67 = load i32, i32* @x.11
  %68 = load i32, i32* @y.12
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %75 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %66, i32 0, i32 2, !dbg !703
  %76 = getelementptr inbounds [8 x i32], [8 x i32]* %75, i64 0, i64 0, !dbg !704
  %77 = load i8, i8* %15, align 1, !dbg !705
  %78 = zext i8 %77 to i64, !dbg !705
  %79 = udiv i64 %78, 32, !dbg !706
  %80 = getelementptr inbounds i32, i32* %76, i64 %79, !dbg !707
  store i32* %80, i32** %16, align 8, !dbg !700
  call void @llvm.dbg.declare(metadata i32* %17, metadata !708, metadata !DIExpression()), !dbg !709
  %81 = load i8, i8* %15, align 1, !dbg !710
  %82 = zext i8 %81 to i64, !dbg !710
  %83 = urem i64 %82, 32, !dbg !711
  %84 = trunc i64 %83 to i32, !dbg !710
  store i32 %84, i32* %17, align 4, !dbg !709
  call void @llvm.dbg.declare(metadata i32* %18, metadata !712, metadata !DIExpression()), !dbg !713
  %85 = load i32*, i32** %16, align 8, !dbg !714
  %86 = load i32, i32* %85, align 4, !dbg !715
  %87 = load i32, i32* %17, align 4, !dbg !716
  %88 = lshr i32 %86, %87, !dbg !717
  %89 = and i32 %88, 1, !dbg !718
  store i32 %89, i32* %18, align 4, !dbg !713
  %90 = load i32, i32* %14, align 4, !dbg !719
  %91 = and i32 %90, 1, !dbg !720
  %92 = load i32, i32* %18, align 4, !dbg !721
  %93 = xor i32 %91, %92, !dbg !722
  %94 = load i32, i32* %17, align 4, !dbg !723
  %95 = shl i32 %93, %94, !dbg !724
  %96 = load i32*, i32** %16, align 8, !dbg !725
  %97 = load i32, i32* %96, align 4, !dbg !726
  %98 = xor i32 %97, %95, !dbg !726
  store i32 %98, i32* %96, align 4, !dbg !726
  %99 = load i32, i32* %18, align 4, !dbg !727
  %100 = load i32, i32* @x.11
  %101 = load i32, i32* @y.12
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart282, label %originalBB10alteredBB

originalBBpart282:                                ; preds = %originalBB10
  ret i32 %99, !dbg !728

originalBBalteredBB:                              ; preds = %originalBB, %3
  %108 = alloca %struct.quoting_options*, align 8
  %109 = alloca i8, align 1
  %110 = alloca i32, align 4
  %111 = alloca i8, align 1
  %112 = alloca i32*, align 8
  %113 = alloca i32, align 4
  %114 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %108, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %108, metadata !729, metadata !DIExpression()), !dbg !690
  store i8 %1, i8* %109, align 1
  call void @llvm.dbg.declare(metadata i8* %109, metadata !764, metadata !DIExpression()), !dbg !692
  store i32 %2, i32* %110, align 4
  call void @llvm.dbg.declare(metadata i32* %110, metadata !765, metadata !DIExpression()), !dbg !694
  call void @llvm.dbg.declare(metadata i8* %111, metadata !766, metadata !DIExpression()), !dbg !696
  %115 = load i8, i8* %109, align 1, !dbg !697
  store i8 %115, i8* %111, align 1, !dbg !696
  call void @llvm.dbg.declare(metadata i32** %112, metadata !767, metadata !DIExpression()), !dbg !700
  %116 = load %struct.quoting_options*, %struct.quoting_options** %108, align 8, !dbg !701
  %117 = icmp ne %struct.quoting_options* %116, null, !dbg !701
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %118 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !702
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %119 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %66, i32 0, i32 2, !dbg !703
  %120 = getelementptr inbounds [8 x i32], [8 x i32]* %119, i64 0, i64 0, !dbg !704
  %121 = load i8, i8* %15, align 1, !dbg !705
  %122 = zext i8 %121 to i64, !dbg !705
  %_ = shl i64 %122, 32
  %_11 = sub i64 %122, 32
  %gen = mul i64 %_11, 32
  %_12 = shl i64 %122, 32
  %_13 = sub i64 0, %122
  %gen14 = add i64 %_13, 32
  %123 = udiv i64 %122, 32, !dbg !706
  %124 = getelementptr inbounds i32, i32* %120, i64 %123, !dbg !707
  store i32* %124, i32** %16, align 8, !dbg !700
  call void @llvm.dbg.declare(metadata !4, metadata !768, metadata !DIExpression()), !dbg !709
  %125 = load i8, i8* %15, align 1, !dbg !710
  %126 = zext i8 %125 to i64, !dbg !710
  %_15 = sub i64 0, %126
  %gen16 = add i64 %_15, 32
  %_17 = shl i64 %126, 32
  %_18 = sub i64 0, %126
  %gen19 = add i64 %_18, 32
  %_20 = sub i64 %126, 32
  %gen21 = mul i64 %_20, 32
  %_22 = shl i64 %126, 32
  %_23 = sub i64 0, %126
  %gen24 = add i64 %_23, 32
  %_25 = sub i64 0, %126
  %gen26 = add i64 %_25, 32
  %127 = urem i64 %126, 32, !dbg !711
  %128 = trunc i64 %127 to i32, !dbg !710
  store i32 %128, i32* %17, align 4, !dbg !709
  call void @llvm.dbg.declare(metadata !4, metadata !803, metadata !DIExpression()), !dbg !713
  %129 = load i32*, i32** %16, align 8, !dbg !714
  %130 = load i32, i32* %129, align 4, !dbg !715
  %131 = load i32, i32* %17, align 4, !dbg !716
  %_27 = sub i32 %130, %131
  %gen28 = mul i32 %_27, %131
  %_29 = shl i32 %130, %131
  %_30 = shl i32 %130, %131
  %_31 = sub i32 0, %130
  %gen32 = add i32 %_31, %131
  %_33 = shl i32 %130, %131
  %132 = lshr i32 %130, %131, !dbg !717
  %_34 = sub i32 %132, 1
  %gen35 = mul i32 %_34, 1
  %_36 = sub i32 0, %132
  %gen37 = add i32 %_36, 1
  %_38 = sub i32 %132, 1
  %gen39 = mul i32 %_38, 1
  %133 = and i32 %132, 1, !dbg !718
  store i32 %133, i32* %18, align 4, !dbg !713
  %134 = load i32, i32* %14, align 4, !dbg !719
  %_40 = shl i32 %134, 1
  %_41 = sub i32 0, %134
  %gen42 = add i32 %_41, 1
  %_43 = sub i32 0, %134
  %gen44 = add i32 %_43, 1
  %_45 = sub i32 0, %134
  %gen46 = add i32 %_45, 1
  %_47 = shl i32 %134, 1
  %_48 = shl i32 %134, 1
  %_49 = sub i32 0, %134
  %gen50 = add i32 %_49, 1
  %135 = and i32 %134, 1, !dbg !720
  %136 = load i32, i32* %18, align 4, !dbg !721
  %_51 = shl i32 %135, %136
  %_52 = shl i32 %135, %136
  %_53 = sub i32 0, %135
  %gen54 = add i32 %_53, %136
  %_55 = sub i32 0, %135
  %gen56 = add i32 %_55, %136
  %_57 = sub i32 %135, %136
  %gen58 = mul i32 %_57, %136
  %_59 = sub i32 0, %135
  %gen60 = add i32 %_59, %136
  %_61 = sub i32 0, %135
  %gen62 = add i32 %_61, %136
  %_63 = sub i32 0, %135
  %gen64 = add i32 %_63, %136
  %137 = xor i32 %135, %136, !dbg !722
  %138 = load i32, i32* %17, align 4, !dbg !723
  %_65 = sub i32 0, %137
  %gen66 = add i32 %_65, %138
  %_67 = sub i32 0, %137
  %gen68 = add i32 %_67, %138
  %139 = shl i32 %137, %138, !dbg !724
  %140 = load i32*, i32** %16, align 8, !dbg !725
  %141 = load i32, i32* %140, align 4, !dbg !726
  %_69 = sub i32 %141, %139
  %gen70 = mul i32 %_69, %139
  %_71 = sub i32 0, %141
  %gen72 = add i32 %_71, %139
  %_73 = sub i32 0, %141
  %gen74 = add i32 %_73, %139
  %_75 = sub i32 %141, %139
  %gen76 = mul i32 %_75, %139
  %_77 = shl i32 %141, %139
  %_78 = shl i32 %141, %139
  %_79 = sub i32 %141, %139
  %gen80 = mul i32 %_79, %139
  %142 = xor i32 %141, %139, !dbg !726
  store i32 %142, i32* %140, align 4, !dbg !726
  %143 = load i32, i32* %18, align 4, !dbg !727
  br label %originalBB10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char_mem(i8*, i64, i8 signext) #5 !dbg !804 {
  %4 = load i32, i32* @x.13
  %5 = load i32, i32* @y.14
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8, align 1
  %15 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !807, metadata !DIExpression()), !dbg !808
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !809, metadata !DIExpression()), !dbg !810
  store i8 %2, i8* %14, align 1
  call void @llvm.dbg.declare(metadata i8* %14, metadata !811, metadata !DIExpression()), !dbg !812
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %15, metadata !813, metadata !DIExpression()), !dbg !814
  %16 = bitcast %struct.quoting_options* %15 to i8*, !dbg !815
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !815
  %17 = load i8, i8* %14, align 1, !dbg !816
  %18 = call i32 @set_char_quoting(%struct.quoting_options* %15, i8 signext %17, i32 1), !dbg !817
  %19 = load i8*, i8** %12, align 8, !dbg !818
  %20 = load i64, i64* %13, align 8, !dbg !819
  %21 = call i8* @quotearg_n_options(i32 0, i8* %19, i64 %20, %struct.quoting_options* %15), !dbg !820
  %22 = load i32, i32* @x.13
  %23 = load i32, i32* @y.14
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %21, !dbg !821

originalBBalteredBB:                              ; preds = %originalBB, %3
  %30 = alloca i8*, align 8
  %31 = alloca i64, align 8
  %32 = alloca i8, align 1
  %33 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %30, align 8
  call void @llvm.dbg.declare(metadata i8** %30, metadata !822, metadata !DIExpression()), !dbg !808
  store i64 %1, i64* %31, align 8
  call void @llvm.dbg.declare(metadata i64* %31, metadata !854, metadata !DIExpression()), !dbg !810
  store i8 %2, i8* %32, align 1
  call void @llvm.dbg.declare(metadata i8* %32, metadata !855, metadata !DIExpression()), !dbg !812
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %33, metadata !856, metadata !DIExpression()), !dbg !814
  %34 = bitcast %struct.quoting_options* %33 to i8*, !dbg !815
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !815
  %35 = load i8, i8* %32, align 1, !dbg !816
  %36 = call i32 @set_char_quoting(%struct.quoting_options* %33, i8 signext %35, i32 1), !dbg !817
  %37 = load i8*, i8** %30, align 8, !dbg !818
  %38 = load i64, i64* %31, align 8, !dbg !819
  %39 = call i8* @quotearg_n_options(i32 0, i8* %37, i64 %38, %struct.quoting_options* %33), !dbg !820
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_options(i32, i8*, i64, %struct.quoting_options*) #5 !dbg !857 {
  %5 = load i32, i32* @x.15
  %6 = load i32, i32* @y.16
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca %struct.quoting_options*, align 8
  %17 = alloca i32, align 4
  %18 = alloca %struct.slotvec*, align 8
  %19 = alloca i8, align 1
  %20 = alloca i32, align 4
  %21 = alloca i64, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i32, align 4
  %24 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !862, metadata !DIExpression()), !dbg !863
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !864, metadata !DIExpression()), !dbg !865
  store i64 %2, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !866, metadata !DIExpression()), !dbg !867
  store %struct.quoting_options* %3, %struct.quoting_options** %16, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %16, metadata !868, metadata !DIExpression()), !dbg !869
  call void @llvm.dbg.declare(metadata i32* %17, metadata !870, metadata !DIExpression()), !dbg !871
  %25 = call i32* @__errno_location() #15, !dbg !872
  %26 = load i32, i32* %25, align 4, !dbg !872
  store i32 %26, i32* %17, align 4, !dbg !871
  call void @llvm.dbg.declare(metadata %struct.slotvec** %18, metadata !873, metadata !DIExpression()), !dbg !874
  %27 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !875
  store %struct.slotvec* %27, %struct.slotvec** %18, align 8, !dbg !874
  %28 = load i32, i32* %13, align 4, !dbg !876
  %29 = icmp slt i32 %28, 0, !dbg !878
  %30 = load i32, i32* @x.15
  %31 = load i32, i32* @y.16
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %29, label %38, label %39, !dbg !879

38:                                               ; preds = %originalBBpart2
  call void @abort() #12, !dbg !880
  unreachable, !dbg !880

39:                                               ; preds = %originalBBpart2
  %40 = load i32, i32* @x.15
  %41 = load i32, i32* @y.16
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %39, %originalBB1alteredBB
  %48 = load i32, i32* @nslots, align 4, !dbg !881
  %49 = load i32, i32* %13, align 4, !dbg !883
  %50 = icmp sle i32 %48, %49, !dbg !884
  %51 = load i32, i32* @x.15
  %52 = load i32, i32* @y.16
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %50, label %59, label %229, !dbg !885

59:                                               ; preds = %originalBBpart24
  call void @llvm.dbg.declare(metadata i8* %19, metadata !886, metadata !DIExpression()), !dbg !888
  %60 = load i32, i32* @x.15
  %61 = load i32, i32* @y.16
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %59, %originalBB6alteredBB
  %68 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !889
  %69 = icmp eq %struct.slotvec* %68, @slotvec0, !dbg !890
  %70 = zext i1 %69 to i8, !dbg !888
  store i8 %70, i8* %19, align 1, !dbg !888
  call void @llvm.dbg.declare(metadata i32* %20, metadata !891, metadata !DIExpression()), !dbg !892
  store i32 2147483646, i32* %20, align 4, !dbg !892
  %71 = load i32, i32* %20, align 4, !dbg !893
  %72 = load i32, i32* %13, align 4, !dbg !895
  %73 = icmp slt i32 %71, %72, !dbg !896
  %74 = load i32, i32* @x.15
  %75 = load i32, i32* @y.16
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %73, label %82, label %99, !dbg !897

82:                                               ; preds = %originalBBpart28
  %83 = load i32, i32* @x.15
  %84 = load i32, i32* @y.16
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %82, %originalBB10alteredBB
  call void @xalloc_die() #14, !dbg !898
  %91 = load i32, i32* @x.15
  %92 = load i32, i32* @y.16
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  unreachable, !dbg !898

99:                                               ; preds = %originalBBpart28
  %100 = load i32, i32* @x.15
  %101 = load i32, i32* @y.16
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %99, %originalBB14alteredBB
  %108 = load i8, i8* %19, align 1, !dbg !899
  %109 = trunc i8 %108 to i1, !dbg !899
  %110 = load i32, i32* @x.15
  %111 = load i32, i32* @y.16
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %109, label %118, label %135, !dbg !899

118:                                              ; preds = %originalBBpart216
  %119 = load i32, i32* @x.15
  %120 = load i32, i32* @y.16
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %118, %originalBB18alteredBB
  %127 = load i32, i32* @x.15
  %128 = load i32, i32* @y.16
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %153, !dbg !899

135:                                              ; preds = %originalBBpart216
  %136 = load i32, i32* @x.15
  %137 = load i32, i32* @y.16
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %135, %originalBB22alteredBB
  %144 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !900
  %145 = load i32, i32* @x.15
  %146 = load i32, i32* @y.16
  %147 = sub i32 %145, 1
  %148 = mul i32 %145, %147
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %150, %151
  br i1 %152, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %153, !dbg !899

153:                                              ; preds = %originalBBpart224, %originalBBpart220
  %154 = phi %struct.slotvec* [ null, %originalBBpart220 ], [ %144, %originalBBpart224 ], !dbg !899
  %155 = load i32, i32* @x.15
  %156 = load i32, i32* @y.16
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %153, %originalBB26alteredBB
  %163 = bitcast %struct.slotvec* %154 to i8*, !dbg !899
  %164 = load i32, i32* %13, align 4, !dbg !901
  %165 = add nsw i32 %164, 1, !dbg !902
  %166 = sext i32 %165 to i64, !dbg !903
  %167 = mul i64 %166, 16, !dbg !904
  %168 = call i8* @xrealloc(i8* %163, i64 %167), !dbg !905
  %169 = bitcast i8* %168 to %struct.slotvec*, !dbg !905
  store %struct.slotvec* %169, %struct.slotvec** %18, align 8, !dbg !906
  store %struct.slotvec* %169, %struct.slotvec** @slotvec, align 8, !dbg !907
  %170 = load i8, i8* %19, align 1, !dbg !908
  %171 = trunc i8 %170 to i1, !dbg !908
  %172 = load i32, i32* @x.15
  %173 = load i32, i32* @y.16
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBBpart241, label %originalBB26alteredBB

originalBBpart241:                                ; preds = %originalBB26
  br i1 %171, label %180, label %199, !dbg !910

180:                                              ; preds = %originalBBpart241
  %181 = load i32, i32* @x.15
  %182 = load i32, i32* @y.16
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %180, %originalBB43alteredBB
  %189 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !911
  %190 = bitcast %struct.slotvec* %189 to i8*, !dbg !912
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %190, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !912
  %191 = load i32, i32* @x.15
  %192 = load i32, i32* @y.16
  %193 = sub i32 %191, 1
  %194 = mul i32 %191, %193
  %195 = urem i32 %194, 2
  %196 = icmp eq i32 %195, 0
  %197 = icmp slt i32 %192, 10
  %198 = or i1 %196, %197
  br i1 %198, label %originalBBpart245, label %originalBB43alteredBB

originalBBpart245:                                ; preds = %originalBB43
  br label %199, !dbg !913

199:                                              ; preds = %originalBBpart245, %originalBBpart241
  %200 = load i32, i32* @x.15
  %201 = load i32, i32* @y.16
  %202 = sub i32 %200, 1
  %203 = mul i32 %200, %202
  %204 = urem i32 %203, 2
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %205, %206
  br i1 %207, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %199, %originalBB47alteredBB
  %208 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !914
  %209 = load i32, i32* @nslots, align 4, !dbg !915
  %210 = sext i32 %209 to i64, !dbg !916
  %211 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %208, i64 %210, !dbg !916
  %212 = bitcast %struct.slotvec* %211 to i8*, !dbg !917
  %213 = load i32, i32* %13, align 4, !dbg !918
  %214 = add nsw i32 %213, 1, !dbg !919
  %215 = load i32, i32* @nslots, align 4, !dbg !920
  %216 = sub nsw i32 %214, %215, !dbg !921
  %217 = sext i32 %216 to i64, !dbg !922
  %218 = mul i64 %217, 16, !dbg !923
  call void @llvm.memset.p0i8.i64(i8* align 8 %212, i8 0, i64 %218, i1 false), !dbg !917
  %219 = load i32, i32* %13, align 4, !dbg !924
  %220 = add nsw i32 %219, 1, !dbg !925
  store i32 %220, i32* @nslots, align 4, !dbg !926
  %221 = load i32, i32* @x.15
  %222 = load i32, i32* @y.16
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBBpart272, label %originalBB47alteredBB

originalBBpart272:                                ; preds = %originalBB47
  br label %229, !dbg !927

229:                                              ; preds = %originalBBpart272, %originalBBpart24
  call void @llvm.dbg.declare(metadata i64* %21, metadata !928, metadata !DIExpression()), !dbg !930
  %230 = load i32, i32* @x.15
  %231 = load i32, i32* @y.16
  %232 = sub i32 %230, 1
  %233 = mul i32 %230, %232
  %234 = urem i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = icmp slt i32 %231, 10
  %237 = or i1 %235, %236
  br i1 %237, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %229, %originalBB74alteredBB
  %238 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !931
  %239 = load i32, i32* %13, align 4, !dbg !932
  %240 = sext i32 %239 to i64, !dbg !931
  %241 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %238, i64 %240, !dbg !931
  %242 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %241, i32 0, i32 0, !dbg !933
  %243 = load i64, i64* %242, align 8, !dbg !933
  store i64 %243, i64* %21, align 8, !dbg !930
  call void @llvm.dbg.declare(metadata i8** %22, metadata !934, metadata !DIExpression()), !dbg !935
  %244 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !936
  %245 = load i32, i32* %13, align 4, !dbg !937
  %246 = sext i32 %245 to i64, !dbg !936
  %247 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %244, i64 %246, !dbg !936
  %248 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %247, i32 0, i32 1, !dbg !938
  %249 = load i8*, i8** %248, align 8, !dbg !938
  store i8* %249, i8** %22, align 8, !dbg !935
  call void @llvm.dbg.declare(metadata i32* %23, metadata !939, metadata !DIExpression()), !dbg !940
  %250 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !941
  %251 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %250, i32 0, i32 1, !dbg !942
  %252 = load i32, i32* %251, align 4, !dbg !942
  %253 = or i32 %252, 1, !dbg !943
  store i32 %253, i32* %23, align 4, !dbg !940
  call void @llvm.dbg.declare(metadata i64* %24, metadata !944, metadata !DIExpression()), !dbg !945
  %254 = load i8*, i8** %22, align 8, !dbg !946
  %255 = load i64, i64* %21, align 8, !dbg !947
  %256 = load i8*, i8** %14, align 8, !dbg !948
  %257 = load i64, i64* %15, align 8, !dbg !949
  %258 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !950
  %259 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %258, i32 0, i32 0, !dbg !951
  %260 = load i32, i32* %259, align 8, !dbg !951
  %261 = load i32, i32* %23, align 4, !dbg !952
  %262 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !953
  %263 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %262, i32 0, i32 2, !dbg !954
  %264 = getelementptr inbounds [8 x i32], [8 x i32]* %263, i64 0, i64 0, !dbg !953
  %265 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !955
  %266 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %265, i32 0, i32 3, !dbg !956
  %267 = load i8*, i8** %266, align 8, !dbg !956
  %268 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !957
  %269 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %268, i32 0, i32 4, !dbg !958
  %270 = load i8*, i8** %269, align 8, !dbg !958
  %271 = call i64 @quotearg_buffer_restyled(i8* %254, i64 %255, i8* %256, i64 %257, i32 %260, i32 %261, i32* %264, i8* %267, i8* %270), !dbg !959
  store i64 %271, i64* %24, align 8, !dbg !945
  %272 = load i64, i64* %21, align 8, !dbg !960
  %273 = load i64, i64* %24, align 8, !dbg !962
  %274 = icmp ule i64 %272, %273, !dbg !963
  %275 = load i32, i32* @x.15
  %276 = load i32, i32* @y.16
  %277 = sub i32 %275, 1
  %278 = mul i32 %275, %277
  %279 = urem i32 %278, 2
  %280 = icmp eq i32 %279, 0
  %281 = icmp slt i32 %276, 10
  %282 = or i1 %280, %281
  br i1 %282, label %originalBBpart291, label %originalBB74alteredBB

originalBBpart291:                                ; preds = %originalBB74
  br i1 %274, label %283, label %337, !dbg !964

283:                                              ; preds = %originalBBpart291
  %284 = load i64, i64* %24, align 8, !dbg !965
  %285 = add i64 %284, 1, !dbg !967
  store i64 %285, i64* %21, align 8, !dbg !968
  %286 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !969
  %287 = load i32, i32* %13, align 4, !dbg !970
  %288 = sext i32 %287 to i64, !dbg !969
  %289 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %286, i64 %288, !dbg !969
  %290 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %289, i32 0, i32 0, !dbg !971
  store i64 %285, i64* %290, align 8, !dbg !972
  %291 = load i8*, i8** %22, align 8, !dbg !973
  %292 = icmp ne i8* %291, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !975
  br i1 %292, label %293, label %311, !dbg !976

293:                                              ; preds = %283
  %294 = load i32, i32* @x.15
  %295 = load i32, i32* @y.16
  %296 = sub i32 %294, 1
  %297 = mul i32 %294, %296
  %298 = urem i32 %297, 2
  %299 = icmp eq i32 %298, 0
  %300 = icmp slt i32 %295, 10
  %301 = or i1 %299, %300
  br i1 %301, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %293, %originalBB93alteredBB
  %302 = load i8*, i8** %22, align 8, !dbg !977
  call void @free(i8* %302) #10, !dbg !978
  %303 = load i32, i32* @x.15
  %304 = load i32, i32* @y.16
  %305 = sub i32 %303, 1
  %306 = mul i32 %303, %305
  %307 = urem i32 %306, 2
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %308, %309
  br i1 %310, label %originalBBpart295, label %originalBB93alteredBB

originalBBpart295:                                ; preds = %originalBB93
  br label %311, !dbg !978

311:                                              ; preds = %originalBBpart295, %283
  %312 = load i64, i64* %21, align 8, !dbg !979
  %313 = call noalias i8* @xcharalloc(i64 %312), !dbg !980
  store i8* %313, i8** %22, align 8, !dbg !981
  %314 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !982
  %315 = load i32, i32* %13, align 4, !dbg !983
  %316 = sext i32 %315 to i64, !dbg !982
  %317 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %314, i64 %316, !dbg !982
  %318 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %317, i32 0, i32 1, !dbg !984
  store i8* %313, i8** %318, align 8, !dbg !985
  %319 = load i8*, i8** %22, align 8, !dbg !986
  %320 = load i64, i64* %21, align 8, !dbg !987
  %321 = load i8*, i8** %14, align 8, !dbg !988
  %322 = load i64, i64* %15, align 8, !dbg !989
  %323 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !990
  %324 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %323, i32 0, i32 0, !dbg !991
  %325 = load i32, i32* %324, align 8, !dbg !991
  %326 = load i32, i32* %23, align 4, !dbg !992
  %327 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !993
  %328 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %327, i32 0, i32 2, !dbg !994
  %329 = getelementptr inbounds [8 x i32], [8 x i32]* %328, i64 0, i64 0, !dbg !993
  %330 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !995
  %331 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %330, i32 0, i32 3, !dbg !996
  %332 = load i8*, i8** %331, align 8, !dbg !996
  %333 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !997
  %334 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %333, i32 0, i32 4, !dbg !998
  %335 = load i8*, i8** %334, align 8, !dbg !998
  %336 = call i64 @quotearg_buffer_restyled(i8* %319, i64 %320, i8* %321, i64 %322, i32 %325, i32 %326, i32* %329, i8* %332, i8* %335), !dbg !999
  br label %337, !dbg !1000

337:                                              ; preds = %311, %originalBBpart291
  %338 = load i32, i32* @x.15
  %339 = load i32, i32* @y.16
  %340 = sub i32 %338, 1
  %341 = mul i32 %338, %340
  %342 = urem i32 %341, 2
  %343 = icmp eq i32 %342, 0
  %344 = icmp slt i32 %339, 10
  %345 = or i1 %343, %344
  br i1 %345, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %337, %originalBB97alteredBB
  %346 = load i32, i32* %17, align 4, !dbg !1001
  %347 = call i32* @__errno_location() #15, !dbg !1002
  store i32 %346, i32* %347, align 4, !dbg !1003
  %348 = load i8*, i8** %22, align 8, !dbg !1004
  %349 = load i32, i32* @x.15
  %350 = load i32, i32* @y.16
  %351 = sub i32 %349, 1
  %352 = mul i32 %349, %351
  %353 = urem i32 %352, 2
  %354 = icmp eq i32 %353, 0
  %355 = icmp slt i32 %350, 10
  %356 = or i1 %354, %355
  br i1 %356, label %originalBBpart299, label %originalBB97alteredBB

originalBBpart299:                                ; preds = %originalBB97
  ret i8* %348, !dbg !1005

originalBBalteredBB:                              ; preds = %originalBB, %4
  %357 = alloca i32, align 4
  %358 = alloca i8*, align 8
  %359 = alloca i64, align 8
  %360 = alloca %struct.quoting_options*, align 8
  %361 = alloca i32, align 4
  %362 = alloca %struct.slotvec*, align 8
  %363 = alloca i8, align 1
  %364 = alloca i32, align 4
  %365 = alloca i64, align 8
  %366 = alloca i8*, align 8
  %367 = alloca i32, align 4
  %368 = alloca i64, align 8
  store i32 %0, i32* %357, align 4
  call void @llvm.dbg.declare(metadata i32* %357, metadata !1006, metadata !DIExpression()), !dbg !863
  store i8* %1, i8** %358, align 8
  call void @llvm.dbg.declare(metadata i8** %358, metadata !1042, metadata !DIExpression()), !dbg !865
  store i64 %2, i64* %359, align 8
  call void @llvm.dbg.declare(metadata i64* %359, metadata !1043, metadata !DIExpression()), !dbg !867
  store %struct.quoting_options* %3, %struct.quoting_options** %360, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %360, metadata !1044, metadata !DIExpression()), !dbg !869
  call void @llvm.dbg.declare(metadata i32* %361, metadata !1045, metadata !DIExpression()), !dbg !871
  %369 = call i32* @__errno_location() #15, !dbg !872
  %370 = load i32, i32* %369, align 4, !dbg !872
  store i32 %370, i32* %361, align 4, !dbg !871
  call void @llvm.dbg.declare(metadata %struct.slotvec** %362, metadata !1046, metadata !DIExpression()), !dbg !874
  %371 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !875
  store %struct.slotvec* %371, %struct.slotvec** %362, align 8, !dbg !874
  %372 = load i32, i32* %357, align 4, !dbg !876
  %373 = icmp slt i32 %372, 0, !dbg !878
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %39
  %374 = load i32, i32* @nslots, align 4, !dbg !881
  %375 = load i32, i32* %13, align 4, !dbg !883
  %376 = icmp sle i32 %374, %375, !dbg !884
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %59
  %377 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !889
  %378 = icmp eq %struct.slotvec* %377, @slotvec0, !dbg !890
  %379 = zext i1 %378 to i8, !dbg !888
  store i8 %379, i8* %19, align 1, !dbg !888
  call void @llvm.dbg.declare(metadata !4, metadata !1047, metadata !DIExpression()), !dbg !892
  store i32 2147483646, i32* %20, align 4, !dbg !892
  %380 = load i32, i32* %20, align 4, !dbg !893
  %381 = load i32, i32* %13, align 4, !dbg !895
  %382 = icmp slt i32 %380, %381, !dbg !896
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %82
  call void @xalloc_die() #14, !dbg !898
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %99
  %383 = load i8, i8* %19, align 1, !dbg !899
  %384 = trunc i8 %383 to i1, !dbg !899
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %118
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %135
  %385 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !900
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %153
  %386 = bitcast %struct.slotvec* %154 to i8*, !dbg !899
  %387 = load i32, i32* %13, align 4, !dbg !901
  %_ = shl i32 %387, 1
  %_27 = shl i32 %387, 1
  %388 = add nsw i32 %387, 1, !dbg !902
  %389 = sext i32 %388 to i64, !dbg !903
  %_28 = sub i64 %389, 16
  %gen = mul i64 %_28, 16
  %_29 = sub i64 %389, 16
  %gen30 = mul i64 %_29, 16
  %_31 = sub i64 %389, 16
  %gen32 = mul i64 %_31, 16
  %_33 = sub i64 0, %389
  %gen34 = add i64 %_33, 16
  %_35 = sub i64 %389, 16
  %gen36 = mul i64 %_35, 16
  %_37 = shl i64 %389, 16
  %_38 = sub i64 0, %389
  %gen39 = add i64 %_38, 16
  %390 = mul i64 %389, 16, !dbg !904
  %391 = call i8* @xrealloc(i8* %386, i64 %390), !dbg !905
  %392 = bitcast i8* %391 to %struct.slotvec*, !dbg !905
  store %struct.slotvec* %392, %struct.slotvec** %18, align 8, !dbg !906
  store %struct.slotvec* %392, %struct.slotvec** @slotvec, align 8, !dbg !907
  %393 = load i8, i8* %19, align 1, !dbg !908
  %394 = trunc i8 %393 to i1, !dbg !908
  br label %originalBB26

originalBB43alteredBB:                            ; preds = %originalBB43, %180
  %395 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !911
  %396 = bitcast %struct.slotvec* %395 to i8*, !dbg !912
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %396, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !912
  br label %originalBB43

originalBB47alteredBB:                            ; preds = %originalBB47, %199
  %397 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !914
  %398 = load i32, i32* @nslots, align 4, !dbg !915
  %399 = sext i32 %398 to i64, !dbg !916
  %400 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %397, i64 %399, !dbg !916
  %401 = bitcast %struct.slotvec* %400 to i8*, !dbg !917
  %402 = load i32, i32* %13, align 4, !dbg !918
  %_48 = shl i32 %402, 1
  %_49 = sub i32 %402, 1
  %gen50 = mul i32 %_49, 1
  %_51 = shl i32 %402, 1
  %403 = add nsw i32 %402, 1, !dbg !919
  %404 = load i32, i32* @nslots, align 4, !dbg !920
  %_52 = sub i32 %403, %404
  %gen53 = mul i32 %_52, %404
  %_54 = sub i32 0, %403
  %gen55 = add i32 %_54, %404
  %_56 = shl i32 %403, %404
  %405 = sub nsw i32 %403, %404, !dbg !921
  %406 = sext i32 %405 to i64, !dbg !922
  %_57 = sub i64 0, %406
  %gen58 = add i64 %_57, 16
  %407 = mul i64 %406, 16, !dbg !923
  call void @llvm.memset.p0i8.i64(i8* align 8 %401, i8 0, i64 %407, i1 false), !dbg !917
  %408 = load i32, i32* %13, align 4, !dbg !924
  %_59 = shl i32 %408, 1
  %_60 = shl i32 %408, 1
  %_61 = shl i32 %408, 1
  %_62 = sub i32 %408, 1
  %gen63 = mul i32 %_62, 1
  %_64 = shl i32 %408, 1
  %_65 = sub i32 %408, 1
  %gen66 = mul i32 %_65, 1
  %_67 = sub i32 0, %408
  %gen68 = add i32 %_67, 1
  %_69 = sub i32 %408, 1
  %gen70 = mul i32 %_69, 1
  %409 = add nsw i32 %408, 1, !dbg !925
  store i32 %409, i32* @nslots, align 4, !dbg !926
  br label %originalBB47

originalBB74alteredBB:                            ; preds = %originalBB74, %229
  %410 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !931
  %411 = load i32, i32* %13, align 4, !dbg !932
  %412 = sext i32 %411 to i64, !dbg !931
  %413 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %410, i64 %412, !dbg !931
  %414 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %413, i32 0, i32 0, !dbg !933
  %415 = load i64, i64* %414, align 8, !dbg !933
  store i64 %415, i64* %21, align 8, !dbg !930
  call void @llvm.dbg.declare(metadata !4, metadata !1085, metadata !DIExpression()), !dbg !935
  %416 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !936
  %417 = load i32, i32* %13, align 4, !dbg !937
  %418 = sext i32 %417 to i64, !dbg !936
  %419 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %416, i64 %418, !dbg !936
  %420 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %419, i32 0, i32 1, !dbg !938
  %421 = load i8*, i8** %420, align 8, !dbg !938
  store i8* %421, i8** %22, align 8, !dbg !935
  call void @llvm.dbg.declare(metadata !4, metadata !1122, metadata !DIExpression()), !dbg !940
  %422 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !941
  %423 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %422, i32 0, i32 1, !dbg !942
  %424 = load i32, i32* %423, align 4, !dbg !942
  %_75 = sub i32 %424, 1
  %gen76 = mul i32 %_75, 1
  %_77 = sub i32 0, %424
  %gen78 = add i32 %_77, 1
  %_79 = sub i32 0, %424
  %gen80 = add i32 %_79, 1
  %_81 = sub i32 0, %424
  %gen82 = add i32 %_81, 1
  %_83 = sub i32 %424, 1
  %gen84 = mul i32 %_83, 1
  %_85 = sub i32 %424, 1
  %gen86 = mul i32 %_85, 1
  %_87 = sub i32 %424, 1
  %gen88 = mul i32 %_87, 1
  %_89 = shl i32 %424, 1
  %425 = or i32 %424, 1, !dbg !943
  store i32 %425, i32* %23, align 4, !dbg !940
  call void @llvm.dbg.declare(metadata !4, metadata !1123, metadata !DIExpression()), !dbg !945
  %426 = load i8*, i8** %22, align 8, !dbg !946
  %427 = load i64, i64* %21, align 8, !dbg !947
  %428 = load i8*, i8** %14, align 8, !dbg !948
  %429 = load i64, i64* %15, align 8, !dbg !949
  %430 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !950
  %431 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %430, i32 0, i32 0, !dbg !951
  %432 = load i32, i32* %431, align 8, !dbg !951
  %433 = load i32, i32* %23, align 4, !dbg !952
  %434 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !953
  %435 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %434, i32 0, i32 2, !dbg !954
  %436 = getelementptr inbounds [8 x i32], [8 x i32]* %435, i64 0, i64 0, !dbg !953
  %437 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !955
  %438 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %437, i32 0, i32 3, !dbg !956
  %439 = load i8*, i8** %438, align 8, !dbg !956
  %440 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !957
  %441 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %440, i32 0, i32 4, !dbg !958
  %442 = load i8*, i8** %441, align 8, !dbg !958
  %443 = call i64 @quotearg_buffer_restyled(i8* %426, i64 %427, i8* %428, i64 %429, i32 %432, i32 %433, i32* %436, i8* %439, i8* %442), !dbg !959
  store i64 %443, i64* %24, align 8, !dbg !945
  %444 = load i64, i64* %21, align 8, !dbg !960
  %445 = load i64, i64* %24, align 8, !dbg !962
  %446 = icmp ule i64 %444, %445, !dbg !963
  br label %originalBB74

originalBB93alteredBB:                            ; preds = %originalBB93, %293
  %447 = load i8*, i8** %22, align 8, !dbg !977
  call void @free(i8* %447) #10, !dbg !978
  br label %originalBB93

originalBB97alteredBB:                            ; preds = %originalBB97, %337
  %448 = load i32, i32* %17, align 4, !dbg !1001
  %449 = call i32* @__errno_location() #15, !dbg !1002
  store i32 %448, i32* %449, align 4, !dbg !1003
  %450 = load i8*, i8** %22, align 8, !dbg !1004
  br label %originalBB97
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(i8*, i64, i8*, i64, i32, i32, i32*, i8*, i8*) #5 !dbg !1124 {
  %10 = load i32, i32* @x.17
  %11 = load i32, i32* @y.18
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  %18 = alloca i64, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i64, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i8*, align 8
  %32 = alloca i64, align 8
  %33 = alloca i8, align 1
  %34 = alloca i8, align 1
  %35 = alloca i8, align 1
  %36 = alloca i8, align 1
  %37 = alloca i8, align 1
  %38 = alloca i8, align 1
  %39 = alloca i8, align 1
  %40 = alloca i8, align 1
  %41 = alloca i8, align 1
  %42 = alloca i8, align 1
  %43 = alloca i8, align 1
  %44 = alloca i64, align 8
  %45 = alloca i8, align 1
  %46 = alloca %struct.__mbstate_t, align 4
  %47 = alloca i32, align 4
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  store i8* %0, i8** %19, align 8
  call void @llvm.dbg.declare(metadata i8** %19, metadata !1129, metadata !DIExpression()), !dbg !1130
  store i64 %1, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !1131, metadata !DIExpression()), !dbg !1132
  store i8* %2, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !1133, metadata !DIExpression()), !dbg !1134
  store i64 %3, i64* %22, align 8
  call void @llvm.dbg.declare(metadata i64* %22, metadata !1135, metadata !DIExpression()), !dbg !1136
  store i32 %4, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !1137, metadata !DIExpression()), !dbg !1138
  store i32 %5, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !1139, metadata !DIExpression()), !dbg !1140
  store i32* %6, i32** %25, align 8
  call void @llvm.dbg.declare(metadata i32** %25, metadata !1141, metadata !DIExpression()), !dbg !1142
  store i8* %7, i8** %26, align 8
  call void @llvm.dbg.declare(metadata i8** %26, metadata !1143, metadata !DIExpression()), !dbg !1144
  store i8* %8, i8** %27, align 8
  call void @llvm.dbg.declare(metadata i8** %27, metadata !1145, metadata !DIExpression()), !dbg !1146
  call void @llvm.dbg.declare(metadata i64* %28, metadata !1147, metadata !DIExpression()), !dbg !1148
  call void @llvm.dbg.declare(metadata i64* %29, metadata !1149, metadata !DIExpression()), !dbg !1150
  store i64 0, i64* %29, align 8, !dbg !1150
  call void @llvm.dbg.declare(metadata i64* %30, metadata !1151, metadata !DIExpression()), !dbg !1152
  store i64 0, i64* %30, align 8, !dbg !1152
  call void @llvm.dbg.declare(metadata i8** %31, metadata !1153, metadata !DIExpression()), !dbg !1154
  store i8* null, i8** %31, align 8, !dbg !1154
  call void @llvm.dbg.declare(metadata i64* %32, metadata !1155, metadata !DIExpression()), !dbg !1156
  store i64 0, i64* %32, align 8, !dbg !1156
  call void @llvm.dbg.declare(metadata i8* %33, metadata !1157, metadata !DIExpression()), !dbg !1158
  store i8 0, i8* %33, align 1, !dbg !1158
  call void @llvm.dbg.declare(metadata i8* %34, metadata !1159, metadata !DIExpression()), !dbg !1160
  %51 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1161
  %52 = icmp eq i64 %51, 1, !dbg !1162
  %53 = zext i1 %52 to i8, !dbg !1160
  store i8 %53, i8* %34, align 1, !dbg !1160
  call void @llvm.dbg.declare(metadata i8* %35, metadata !1163, metadata !DIExpression()), !dbg !1164
  %54 = load i32, i32* %24, align 4, !dbg !1165
  %55 = and i32 %54, 2, !dbg !1166
  %56 = icmp ne i32 %55, 0, !dbg !1167
  %57 = zext i1 %56 to i8, !dbg !1164
  store i8 %57, i8* %35, align 1, !dbg !1164
  call void @llvm.dbg.declare(metadata i8* %36, metadata !1168, metadata !DIExpression()), !dbg !1169
  store i8 0, i8* %36, align 1, !dbg !1169
  call void @llvm.dbg.declare(metadata i8* %37, metadata !1170, metadata !DIExpression()), !dbg !1171
  store i8 0, i8* %37, align 1, !dbg !1171
  call void @llvm.dbg.declare(metadata i8* %38, metadata !1172, metadata !DIExpression()), !dbg !1173
  store i8 1, i8* %38, align 1, !dbg !1173
  %58 = load i32, i32* @x.17
  %59 = load i32, i32* @y.18
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %66, !dbg !1174

66:                                               ; preds = %4914, %originalBBpart2
  call void @llvm.dbg.label(metadata !1175), !dbg !1176
  %67 = load i32, i32* @x.17
  %68 = load i32, i32* @y.18
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB2, label %originalBB2alteredBB

originalBB2:                                      ; preds = %66, %originalBB2alteredBB
  %75 = load i32, i32* %23, align 4, !dbg !1177
  %76 = load i32, i32* @x.17
  %77 = load i32, i32* @y.18
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart24, label %originalBB2alteredBB

originalBBpart24:                                 ; preds = %originalBB2
  switch i32 %75, label %552 [
    i32 6, label %84
    i32 5, label %101
    i32 7, label %182
    i32 8, label %199
    i32 9, label %199
    i32 10, label %199
    i32 3, label %367
    i32 1, label %384
    i32 4, label %385
    i32 2, label %438
    i32 0, label %535
  ], !dbg !1178

84:                                               ; preds = %originalBBpart24
  %85 = load i32, i32* @x.17
  %86 = load i32, i32* @y.18
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %84, %originalBB6alteredBB
  store i32 5, i32* %23, align 4, !dbg !1179
  store i8 1, i8* %35, align 1, !dbg !1181
  %93 = load i32, i32* @x.17
  %94 = load i32, i32* @y.18
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %101, !dbg !1182

101:                                              ; preds = %originalBBpart28, %originalBBpart24
  %102 = load i32, i32* @x.17
  %103 = load i32, i32* @y.18
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %101, %originalBB10alteredBB
  %110 = load i8, i8* %35, align 1, !dbg !1183
  %111 = trunc i8 %110 to i1, !dbg !1183
  %112 = load i32, i32* @x.17
  %113 = load i32, i32* @y.18
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %111, label %165, label %120, !dbg !1185

120:                                              ; preds = %originalBBpart212
  br label %121, !dbg !1186

121:                                              ; preds = %120
  %122 = load i32, i32* @x.17
  %123 = load i32, i32* @y.18
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %121, %originalBB14alteredBB
  %130 = load i64, i64* %29, align 8, !dbg !1187
  %131 = load i64, i64* %20, align 8, !dbg !1187
  %132 = icmp ult i64 %130, %131, !dbg !1187
  %133 = load i32, i32* @x.17
  %134 = load i32, i32* @y.18
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %132, label %141, label %145, !dbg !1190

141:                                              ; preds = %originalBBpart216
  %142 = load i8*, i8** %19, align 8, !dbg !1187
  %143 = load i64, i64* %29, align 8, !dbg !1187
  %144 = getelementptr inbounds i8, i8* %142, i64 %143, !dbg !1187
  store i8 34, i8* %144, align 1, !dbg !1187
  br label %145, !dbg !1187

145:                                              ; preds = %141, %originalBBpart216
  %146 = load i64, i64* %29, align 8, !dbg !1190
  %147 = add i64 %146, 1, !dbg !1190
  store i64 %147, i64* %29, align 8, !dbg !1190
  br label %148, !dbg !1190

148:                                              ; preds = %145
  %149 = load i32, i32* @x.17
  %150 = load i32, i32* @y.18
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %148, %originalBB18alteredBB
  %157 = load i32, i32* @x.17
  %158 = load i32, i32* @y.18
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %165, !dbg !1190

165:                                              ; preds = %originalBBpart220, %originalBBpart212
  %166 = load i32, i32* @x.17
  %167 = load i32, i32* @y.18
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %165, %originalBB22alteredBB
  store i8 1, i8* %33, align 1, !dbg !1191
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.52, i64 0, i64 0), i8** %31, align 8, !dbg !1192
  store i64 1, i64* %32, align 8, !dbg !1193
  %174 = load i32, i32* @x.17
  %175 = load i32, i32* @y.18
  %176 = sub i32 %174, 1
  %177 = mul i32 %174, %176
  %178 = urem i32 %177, 2
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %179, %180
  br i1 %181, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %569, !dbg !1194

182:                                              ; preds = %originalBBpart24
  %183 = load i32, i32* @x.17
  %184 = load i32, i32* @y.18
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %182, %originalBB26alteredBB
  store i8 1, i8* %33, align 1, !dbg !1195
  store i8 0, i8* %35, align 1, !dbg !1196
  %191 = load i32, i32* @x.17
  %192 = load i32, i32* @y.18
  %193 = sub i32 %191, 1
  %194 = mul i32 %191, %193
  %195 = urem i32 %194, 2
  %196 = icmp eq i32 %195, 0
  %197 = icmp slt i32 %192, 10
  %198 = or i1 %196, %197
  br i1 %198, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %569, !dbg !1197

199:                                              ; preds = %originalBBpart24, %originalBBpart24, %originalBBpart24
  %200 = load i32, i32* %23, align 4, !dbg !1198
  %201 = icmp ne i32 %200, 10, !dbg !1201
  br i1 %201, label %202, label %223, !dbg !1202

202:                                              ; preds = %199
  %203 = load i32, i32* @x.17
  %204 = load i32, i32* @y.18
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %202, %originalBB30alteredBB
  %211 = load i32, i32* %23, align 4, !dbg !1203
  %212 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.53, i64 0, i64 0), i32 %211), !dbg !1205
  store i8* %212, i8** %26, align 8, !dbg !1206
  %213 = load i32, i32* %23, align 4, !dbg !1207
  %214 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.54, i64 0, i64 0), i32 %213), !dbg !1208
  store i8* %214, i8** %27, align 8, !dbg !1209
  %215 = load i32, i32* @x.17
  %216 = load i32, i32* @y.18
  %217 = sub i32 %215, 1
  %218 = mul i32 %215, %217
  %219 = urem i32 %218, 2
  %220 = icmp eq i32 %219, 0
  %221 = icmp slt i32 %216, 10
  %222 = or i1 %220, %221
  br i1 %222, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %223, !dbg !1210

223:                                              ; preds = %originalBBpart232, %199
  %224 = load i32, i32* @x.17
  %225 = load i32, i32* @y.18
  %226 = sub i32 %224, 1
  %227 = mul i32 %224, %226
  %228 = urem i32 %227, 2
  %229 = icmp eq i32 %228, 0
  %230 = icmp slt i32 %225, 10
  %231 = or i1 %229, %230
  br i1 %231, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %223, %originalBB34alteredBB
  %232 = load i8, i8* %35, align 1, !dbg !1211
  %233 = trunc i8 %232 to i1, !dbg !1211
  %234 = load i32, i32* @x.17
  %235 = load i32, i32* @y.18
  %236 = sub i32 %234, 1
  %237 = mul i32 %234, %236
  %238 = urem i32 %237, 2
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %239, %240
  br i1 %241, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %233, label %347, label %242, !dbg !1213

242:                                              ; preds = %originalBBpart236
  %243 = load i8*, i8** %26, align 8, !dbg !1214
  store i8* %243, i8** %31, align 8, !dbg !1216
  br label %244, !dbg !1217

244:                                              ; preds = %originalBBpart263, %242
  %245 = load i32, i32* @x.17
  %246 = load i32, i32* @y.18
  %247 = sub i32 %245, 1
  %248 = mul i32 %245, %247
  %249 = urem i32 %248, 2
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %250, %251
  br i1 %252, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %244, %originalBB38alteredBB
  %253 = load i8*, i8** %31, align 8, !dbg !1218
  %254 = load i8, i8* %253, align 1, !dbg !1220
  %255 = icmp ne i8 %254, 0, !dbg !1221
  %256 = load i32, i32* @x.17
  %257 = load i32, i32* @y.18
  %258 = sub i32 %256, 1
  %259 = mul i32 %256, %258
  %260 = urem i32 %259, 2
  %261 = icmp eq i32 %260, 0
  %262 = icmp slt i32 %257, 10
  %263 = or i1 %261, %262
  br i1 %263, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %255, label %264, label %346, !dbg !1221

264:                                              ; preds = %originalBBpart240
  br label %265, !dbg !1222

265:                                              ; preds = %264
  %266 = load i32, i32* @x.17
  %267 = load i32, i32* @y.18
  %268 = sub i32 %266, 1
  %269 = mul i32 %266, %268
  %270 = urem i32 %269, 2
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %271, %272
  br i1 %273, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %265, %originalBB42alteredBB
  %274 = load i64, i64* %29, align 8, !dbg !1223
  %275 = load i64, i64* %20, align 8, !dbg !1223
  %276 = icmp ult i64 %274, %275, !dbg !1223
  %277 = load i32, i32* @x.17
  %278 = load i32, i32* @y.18
  %279 = sub i32 %277, 1
  %280 = mul i32 %277, %279
  %281 = urem i32 %280, 2
  %282 = icmp eq i32 %281, 0
  %283 = icmp slt i32 %278, 10
  %284 = or i1 %282, %283
  br i1 %284, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br i1 %276, label %285, label %291, !dbg !1226

285:                                              ; preds = %originalBBpart244
  %286 = load i8*, i8** %31, align 8, !dbg !1223
  %287 = load i8, i8* %286, align 1, !dbg !1223
  %288 = load i8*, i8** %19, align 8, !dbg !1223
  %289 = load i64, i64* %29, align 8, !dbg !1223
  %290 = getelementptr inbounds i8, i8* %288, i64 %289, !dbg !1223
  store i8 %287, i8* %290, align 1, !dbg !1223
  br label %291, !dbg !1223

291:                                              ; preds = %285, %originalBBpart244
  %292 = load i32, i32* @x.17
  %293 = load i32, i32* @y.18
  %294 = sub i32 %292, 1
  %295 = mul i32 %292, %294
  %296 = urem i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = icmp slt i32 %293, 10
  %299 = or i1 %297, %298
  br i1 %299, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %291, %originalBB46alteredBB
  %300 = load i64, i64* %29, align 8, !dbg !1226
  %301 = add i64 %300, 1, !dbg !1226
  store i64 %301, i64* %29, align 8, !dbg !1226
  %302 = load i32, i32* @x.17
  %303 = load i32, i32* @y.18
  %304 = sub i32 %302, 1
  %305 = mul i32 %302, %304
  %306 = urem i32 %305, 2
  %307 = icmp eq i32 %306, 0
  %308 = icmp slt i32 %303, 10
  %309 = or i1 %307, %308
  br i1 %309, label %originalBBpart255, label %originalBB46alteredBB

originalBBpart255:                                ; preds = %originalBB46
  br label %310, !dbg !1226

310:                                              ; preds = %originalBBpart255
  %311 = load i32, i32* @x.17
  %312 = load i32, i32* @y.18
  %313 = sub i32 %311, 1
  %314 = mul i32 %311, %313
  %315 = urem i32 %314, 2
  %316 = icmp eq i32 %315, 0
  %317 = icmp slt i32 %312, 10
  %318 = or i1 %316, %317
  br i1 %318, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %310, %originalBB57alteredBB
  %319 = load i32, i32* @x.17
  %320 = load i32, i32* @y.18
  %321 = sub i32 %319, 1
  %322 = mul i32 %319, %321
  %323 = urem i32 %322, 2
  %324 = icmp eq i32 %323, 0
  %325 = icmp slt i32 %320, 10
  %326 = or i1 %324, %325
  br i1 %326, label %originalBBpart259, label %originalBB57alteredBB

originalBBpart259:                                ; preds = %originalBB57
  br label %327, !dbg !1226

327:                                              ; preds = %originalBBpart259
  %328 = load i32, i32* @x.17
  %329 = load i32, i32* @y.18
  %330 = sub i32 %328, 1
  %331 = mul i32 %328, %330
  %332 = urem i32 %331, 2
  %333 = icmp eq i32 %332, 0
  %334 = icmp slt i32 %329, 10
  %335 = or i1 %333, %334
  br i1 %335, label %originalBB61, label %originalBB61alteredBB

originalBB61:                                     ; preds = %327, %originalBB61alteredBB
  %336 = load i8*, i8** %31, align 8, !dbg !1227
  %337 = getelementptr inbounds i8, i8* %336, i32 1, !dbg !1227
  store i8* %337, i8** %31, align 8, !dbg !1227
  %338 = load i32, i32* @x.17
  %339 = load i32, i32* @y.18
  %340 = sub i32 %338, 1
  %341 = mul i32 %338, %340
  %342 = urem i32 %341, 2
  %343 = icmp eq i32 %342, 0
  %344 = icmp slt i32 %339, 10
  %345 = or i1 %343, %344
  br i1 %345, label %originalBBpart263, label %originalBB61alteredBB

originalBBpart263:                                ; preds = %originalBB61
  br label %244, !dbg !1228, !llvm.loop !1229

346:                                              ; preds = %originalBBpart240
  br label %347, !dbg !1230

347:                                              ; preds = %346, %originalBBpart236
  %348 = load i32, i32* @x.17
  %349 = load i32, i32* @y.18
  %350 = sub i32 %348, 1
  %351 = mul i32 %348, %350
  %352 = urem i32 %351, 2
  %353 = icmp eq i32 %352, 0
  %354 = icmp slt i32 %349, 10
  %355 = or i1 %353, %354
  br i1 %355, label %originalBB65, label %originalBB65alteredBB

originalBB65:                                     ; preds = %347, %originalBB65alteredBB
  store i8 1, i8* %33, align 1, !dbg !1231
  %356 = load i8*, i8** %27, align 8, !dbg !1232
  store i8* %356, i8** %31, align 8, !dbg !1233
  %357 = load i8*, i8** %31, align 8, !dbg !1234
  %358 = call i64 @strlen(i8* %357) #13, !dbg !1235
  store i64 %358, i64* %32, align 8, !dbg !1236
  %359 = load i32, i32* @x.17
  %360 = load i32, i32* @y.18
  %361 = sub i32 %359, 1
  %362 = mul i32 %359, %361
  %363 = urem i32 %362, 2
  %364 = icmp eq i32 %363, 0
  %365 = icmp slt i32 %360, 10
  %366 = or i1 %364, %365
  br i1 %366, label %originalBBpart267, label %originalBB65alteredBB

originalBBpart267:                                ; preds = %originalBB65
  br label %569, !dbg !1237

367:                                              ; preds = %originalBBpart24
  %368 = load i32, i32* @x.17
  %369 = load i32, i32* @y.18
  %370 = sub i32 %368, 1
  %371 = mul i32 %368, %370
  %372 = urem i32 %371, 2
  %373 = icmp eq i32 %372, 0
  %374 = icmp slt i32 %369, 10
  %375 = or i1 %373, %374
  br i1 %375, label %originalBB69, label %originalBB69alteredBB

originalBB69:                                     ; preds = %367, %originalBB69alteredBB
  store i8 1, i8* %33, align 1, !dbg !1238
  %376 = load i32, i32* @x.17
  %377 = load i32, i32* @y.18
  %378 = sub i32 %376, 1
  %379 = mul i32 %376, %378
  %380 = urem i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %381, %382
  br i1 %383, label %originalBBpart271, label %originalBB69alteredBB

originalBBpart271:                                ; preds = %originalBB69
  br label %384, !dbg !1239

384:                                              ; preds = %originalBBpart271, %originalBBpart24
  store i8 1, i8* %35, align 1, !dbg !1240
  br label %385, !dbg !1241

385:                                              ; preds = %384, %originalBBpart24
  %386 = load i32, i32* @x.17
  %387 = load i32, i32* @y.18
  %388 = sub i32 %386, 1
  %389 = mul i32 %386, %388
  %390 = urem i32 %389, 2
  %391 = icmp eq i32 %390, 0
  %392 = icmp slt i32 %387, 10
  %393 = or i1 %391, %392
  br i1 %393, label %originalBB73, label %originalBB73alteredBB

originalBB73:                                     ; preds = %385, %originalBB73alteredBB
  %394 = load i8, i8* %35, align 1, !dbg !1242
  %395 = trunc i8 %394 to i1, !dbg !1242
  %396 = load i32, i32* @x.17
  %397 = load i32, i32* @y.18
  %398 = sub i32 %396, 1
  %399 = mul i32 %396, %398
  %400 = urem i32 %399, 2
  %401 = icmp eq i32 %400, 0
  %402 = icmp slt i32 %397, 10
  %403 = or i1 %401, %402
  br i1 %403, label %originalBBpart275, label %originalBB73alteredBB

originalBBpart275:                                ; preds = %originalBB73
  br i1 %395, label %421, label %404, !dbg !1244

404:                                              ; preds = %originalBBpart275
  %405 = load i32, i32* @x.17
  %406 = load i32, i32* @y.18
  %407 = sub i32 %405, 1
  %408 = mul i32 %405, %407
  %409 = urem i32 %408, 2
  %410 = icmp eq i32 %409, 0
  %411 = icmp slt i32 %406, 10
  %412 = or i1 %410, %411
  br i1 %412, label %originalBB77, label %originalBB77alteredBB

originalBB77:                                     ; preds = %404, %originalBB77alteredBB
  store i8 1, i8* %33, align 1, !dbg !1245
  %413 = load i32, i32* @x.17
  %414 = load i32, i32* @y.18
  %415 = sub i32 %413, 1
  %416 = mul i32 %413, %415
  %417 = urem i32 %416, 2
  %418 = icmp eq i32 %417, 0
  %419 = icmp slt i32 %414, 10
  %420 = or i1 %418, %419
  br i1 %420, label %originalBBpart279, label %originalBB77alteredBB

originalBBpart279:                                ; preds = %originalBB77
  br label %421, !dbg !1246

421:                                              ; preds = %originalBBpart279, %originalBBpart275
  %422 = load i32, i32* @x.17
  %423 = load i32, i32* @y.18
  %424 = sub i32 %422, 1
  %425 = mul i32 %422, %424
  %426 = urem i32 %425, 2
  %427 = icmp eq i32 %426, 0
  %428 = icmp slt i32 %423, 10
  %429 = or i1 %427, %428
  br i1 %429, label %originalBB81, label %originalBB81alteredBB

originalBB81:                                     ; preds = %421, %originalBB81alteredBB
  %430 = load i32, i32* @x.17
  %431 = load i32, i32* @y.18
  %432 = sub i32 %430, 1
  %433 = mul i32 %430, %432
  %434 = urem i32 %433, 2
  %435 = icmp eq i32 %434, 0
  %436 = icmp slt i32 %431, 10
  %437 = or i1 %435, %436
  br i1 %437, label %originalBBpart283, label %originalBB81alteredBB

originalBBpart283:                                ; preds = %originalBB81
  br label %438, !dbg !1247

438:                                              ; preds = %originalBBpart283, %originalBBpart24
  %439 = load i32, i32* @x.17
  %440 = load i32, i32* @y.18
  %441 = sub i32 %439, 1
  %442 = mul i32 %439, %441
  %443 = urem i32 %442, 2
  %444 = icmp eq i32 %443, 0
  %445 = icmp slt i32 %440, 10
  %446 = or i1 %444, %445
  br i1 %446, label %originalBB85, label %originalBB85alteredBB

originalBB85:                                     ; preds = %438, %originalBB85alteredBB
  store i32 2, i32* %23, align 4, !dbg !1248
  %447 = load i8, i8* %35, align 1, !dbg !1249
  %448 = trunc i8 %447 to i1, !dbg !1249
  %449 = load i32, i32* @x.17
  %450 = load i32, i32* @y.18
  %451 = sub i32 %449, 1
  %452 = mul i32 %449, %451
  %453 = urem i32 %452, 2
  %454 = icmp eq i32 %453, 0
  %455 = icmp slt i32 %450, 10
  %456 = or i1 %454, %455
  br i1 %456, label %originalBBpart287, label %originalBB85alteredBB

originalBBpart287:                                ; preds = %originalBB85
  br i1 %448, label %518, label %457, !dbg !1251

457:                                              ; preds = %originalBBpart287
  br label %458, !dbg !1252

458:                                              ; preds = %457
  %459 = load i32, i32* @x.17
  %460 = load i32, i32* @y.18
  %461 = sub i32 %459, 1
  %462 = mul i32 %459, %461
  %463 = urem i32 %462, 2
  %464 = icmp eq i32 %463, 0
  %465 = icmp slt i32 %460, 10
  %466 = or i1 %464, %465
  br i1 %466, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %458, %originalBB89alteredBB
  %467 = load i64, i64* %29, align 8, !dbg !1253
  %468 = load i64, i64* %20, align 8, !dbg !1253
  %469 = icmp ult i64 %467, %468, !dbg !1253
  %470 = load i32, i32* @x.17
  %471 = load i32, i32* @y.18
  %472 = sub i32 %470, 1
  %473 = mul i32 %470, %472
  %474 = urem i32 %473, 2
  %475 = icmp eq i32 %474, 0
  %476 = icmp slt i32 %471, 10
  %477 = or i1 %475, %476
  br i1 %477, label %originalBBpart291, label %originalBB89alteredBB

originalBBpart291:                                ; preds = %originalBB89
  br i1 %469, label %478, label %498, !dbg !1256

478:                                              ; preds = %originalBBpart291
  %479 = load i32, i32* @x.17
  %480 = load i32, i32* @y.18
  %481 = sub i32 %479, 1
  %482 = mul i32 %479, %481
  %483 = urem i32 %482, 2
  %484 = icmp eq i32 %483, 0
  %485 = icmp slt i32 %480, 10
  %486 = or i1 %484, %485
  br i1 %486, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %478, %originalBB93alteredBB
  %487 = load i8*, i8** %19, align 8, !dbg !1253
  %488 = load i64, i64* %29, align 8, !dbg !1253
  %489 = getelementptr inbounds i8, i8* %487, i64 %488, !dbg !1253
  store i8 39, i8* %489, align 1, !dbg !1253
  %490 = load i32, i32* @x.17
  %491 = load i32, i32* @y.18
  %492 = sub i32 %490, 1
  %493 = mul i32 %490, %492
  %494 = urem i32 %493, 2
  %495 = icmp eq i32 %494, 0
  %496 = icmp slt i32 %491, 10
  %497 = or i1 %495, %496
  br i1 %497, label %originalBBpart295, label %originalBB93alteredBB

originalBBpart295:                                ; preds = %originalBB93
  br label %498, !dbg !1253

498:                                              ; preds = %originalBBpart295, %originalBBpart291
  %499 = load i32, i32* @x.17
  %500 = load i32, i32* @y.18
  %501 = sub i32 %499, 1
  %502 = mul i32 %499, %501
  %503 = urem i32 %502, 2
  %504 = icmp eq i32 %503, 0
  %505 = icmp slt i32 %500, 10
  %506 = or i1 %504, %505
  br i1 %506, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %498, %originalBB97alteredBB
  %507 = load i64, i64* %29, align 8, !dbg !1256
  %508 = add i64 %507, 1, !dbg !1256
  store i64 %508, i64* %29, align 8, !dbg !1256
  %509 = load i32, i32* @x.17
  %510 = load i32, i32* @y.18
  %511 = sub i32 %509, 1
  %512 = mul i32 %509, %511
  %513 = urem i32 %512, 2
  %514 = icmp eq i32 %513, 0
  %515 = icmp slt i32 %510, 10
  %516 = or i1 %514, %515
  br i1 %516, label %originalBBpart2113, label %originalBB97alteredBB

originalBBpart2113:                               ; preds = %originalBB97
  br label %517, !dbg !1256

517:                                              ; preds = %originalBBpart2113
  br label %518, !dbg !1256

518:                                              ; preds = %517, %originalBBpart287
  %519 = load i32, i32* @x.17
  %520 = load i32, i32* @y.18
  %521 = sub i32 %519, 1
  %522 = mul i32 %519, %521
  %523 = urem i32 %522, 2
  %524 = icmp eq i32 %523, 0
  %525 = icmp slt i32 %520, 10
  %526 = or i1 %524, %525
  br i1 %526, label %originalBB115, label %originalBB115alteredBB

originalBB115:                                    ; preds = %518, %originalBB115alteredBB
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.54, i64 0, i64 0), i8** %31, align 8, !dbg !1257
  store i64 1, i64* %32, align 8, !dbg !1258
  %527 = load i32, i32* @x.17
  %528 = load i32, i32* @y.18
  %529 = sub i32 %527, 1
  %530 = mul i32 %527, %529
  %531 = urem i32 %530, 2
  %532 = icmp eq i32 %531, 0
  %533 = icmp slt i32 %528, 10
  %534 = or i1 %532, %533
  br i1 %534, label %originalBBpart2117, label %originalBB115alteredBB

originalBBpart2117:                               ; preds = %originalBB115
  br label %569, !dbg !1259

535:                                              ; preds = %originalBBpart24
  %536 = load i32, i32* @x.17
  %537 = load i32, i32* @y.18
  %538 = sub i32 %536, 1
  %539 = mul i32 %536, %538
  %540 = urem i32 %539, 2
  %541 = icmp eq i32 %540, 0
  %542 = icmp slt i32 %537, 10
  %543 = or i1 %541, %542
  br i1 %543, label %originalBB119, label %originalBB119alteredBB

originalBB119:                                    ; preds = %535, %originalBB119alteredBB
  store i8 0, i8* %35, align 1, !dbg !1260
  %544 = load i32, i32* @x.17
  %545 = load i32, i32* @y.18
  %546 = sub i32 %544, 1
  %547 = mul i32 %544, %546
  %548 = urem i32 %547, 2
  %549 = icmp eq i32 %548, 0
  %550 = icmp slt i32 %545, 10
  %551 = or i1 %549, %550
  br i1 %551, label %originalBBpart2121, label %originalBB119alteredBB

originalBBpart2121:                               ; preds = %originalBB119
  br label %569, !dbg !1261

552:                                              ; preds = %originalBBpart24
  %553 = load i32, i32* @x.17
  %554 = load i32, i32* @y.18
  %555 = sub i32 %553, 1
  %556 = mul i32 %553, %555
  %557 = urem i32 %556, 2
  %558 = icmp eq i32 %557, 0
  %559 = icmp slt i32 %554, 10
  %560 = or i1 %558, %559
  br i1 %560, label %originalBB123, label %originalBB123alteredBB

originalBB123:                                    ; preds = %552, %originalBB123alteredBB
  call void @abort() #12, !dbg !1262
  %561 = load i32, i32* @x.17
  %562 = load i32, i32* @y.18
  %563 = sub i32 %561, 1
  %564 = mul i32 %561, %563
  %565 = urem i32 %564, 2
  %566 = icmp eq i32 %565, 0
  %567 = icmp slt i32 %562, 10
  %568 = or i1 %566, %567
  br i1 %568, label %originalBBpart2125, label %originalBB123alteredBB

originalBBpart2125:                               ; preds = %originalBB123
  unreachable, !dbg !1262

569:                                              ; preds = %originalBBpart2121, %originalBBpart2117, %originalBBpart267, %originalBBpart228, %originalBBpart224
  %570 = load i32, i32* @x.17
  %571 = load i32, i32* @y.18
  %572 = sub i32 %570, 1
  %573 = mul i32 %570, %572
  %574 = urem i32 %573, 2
  %575 = icmp eq i32 %574, 0
  %576 = icmp slt i32 %571, 10
  %577 = or i1 %575, %576
  br i1 %577, label %originalBB127, label %originalBB127alteredBB

originalBB127:                                    ; preds = %569, %originalBB127alteredBB
  store i64 0, i64* %28, align 8, !dbg !1263
  %578 = load i32, i32* @x.17
  %579 = load i32, i32* @y.18
  %580 = sub i32 %578, 1
  %581 = mul i32 %578, %580
  %582 = urem i32 %581, 2
  %583 = icmp eq i32 %582, 0
  %584 = icmp slt i32 %579, 10
  %585 = or i1 %583, %584
  br i1 %585, label %originalBBpart2129, label %originalBB127alteredBB

originalBBpart2129:                               ; preds = %originalBB127
  br label %586, !dbg !1265

586:                                              ; preds = %4745, %originalBBpart2129
  %587 = load i32, i32* @x.17
  %588 = load i32, i32* @y.18
  %589 = sub i32 %587, 1
  %590 = mul i32 %587, %589
  %591 = urem i32 %590, 2
  %592 = icmp eq i32 %591, 0
  %593 = icmp slt i32 %588, 10
  %594 = or i1 %592, %593
  br i1 %594, label %originalBB131, label %originalBB131alteredBB

originalBB131:                                    ; preds = %586, %originalBB131alteredBB
  %595 = load i64, i64* %22, align 8, !dbg !1266
  %596 = icmp eq i64 %595, -1, !dbg !1268
  %597 = load i32, i32* @x.17
  %598 = load i32, i32* @y.18
  %599 = sub i32 %597, 1
  %600 = mul i32 %597, %599
  %601 = urem i32 %600, 2
  %602 = icmp eq i32 %601, 0
  %603 = icmp slt i32 %598, 10
  %604 = or i1 %602, %603
  br i1 %604, label %originalBBpart2133, label %originalBB131alteredBB

originalBBpart2133:                               ; preds = %originalBB131
  br i1 %596, label %605, label %629, !dbg !1266

605:                                              ; preds = %originalBBpart2133
  %606 = load i32, i32* @x.17
  %607 = load i32, i32* @y.18
  %608 = sub i32 %606, 1
  %609 = mul i32 %606, %608
  %610 = urem i32 %609, 2
  %611 = icmp eq i32 %610, 0
  %612 = icmp slt i32 %607, 10
  %613 = or i1 %611, %612
  br i1 %613, label %originalBB135, label %originalBB135alteredBB

originalBB135:                                    ; preds = %605, %originalBB135alteredBB
  %614 = load i8*, i8** %21, align 8, !dbg !1269
  %615 = load i64, i64* %28, align 8, !dbg !1270
  %616 = getelementptr inbounds i8, i8* %614, i64 %615, !dbg !1269
  %617 = load i8, i8* %616, align 1, !dbg !1269
  %618 = sext i8 %617 to i32, !dbg !1269
  %619 = icmp eq i32 %618, 0, !dbg !1271
  %620 = zext i1 %619 to i32, !dbg !1271
  %621 = load i32, i32* @x.17
  %622 = load i32, i32* @y.18
  %623 = sub i32 %621, 1
  %624 = mul i32 %621, %623
  %625 = urem i32 %624, 2
  %626 = icmp eq i32 %625, 0
  %627 = icmp slt i32 %622, 10
  %628 = or i1 %626, %627
  br i1 %628, label %originalBBpart2137, label %originalBB135alteredBB

originalBBpart2137:                               ; preds = %originalBB135
  br label %650, !dbg !1266

629:                                              ; preds = %originalBBpart2133
  %630 = load i32, i32* @x.17
  %631 = load i32, i32* @y.18
  %632 = sub i32 %630, 1
  %633 = mul i32 %630, %632
  %634 = urem i32 %633, 2
  %635 = icmp eq i32 %634, 0
  %636 = icmp slt i32 %631, 10
  %637 = or i1 %635, %636
  br i1 %637, label %originalBB139, label %originalBB139alteredBB

originalBB139:                                    ; preds = %629, %originalBB139alteredBB
  %638 = load i64, i64* %28, align 8, !dbg !1272
  %639 = load i64, i64* %22, align 8, !dbg !1273
  %640 = icmp eq i64 %638, %639, !dbg !1274
  %641 = zext i1 %640 to i32, !dbg !1274
  %642 = load i32, i32* @x.17
  %643 = load i32, i32* @y.18
  %644 = sub i32 %642, 1
  %645 = mul i32 %642, %644
  %646 = urem i32 %645, 2
  %647 = icmp eq i32 %646, 0
  %648 = icmp slt i32 %643, 10
  %649 = or i1 %647, %648
  br i1 %649, label %originalBBpart2141, label %originalBB139alteredBB

originalBBpart2141:                               ; preds = %originalBB139
  br label %650, !dbg !1266

650:                                              ; preds = %originalBBpart2141, %originalBBpart2137
  %651 = phi i32 [ %620, %originalBBpart2137 ], [ %641, %originalBBpart2141 ], !dbg !1266
  %652 = load i32, i32* @x.17
  %653 = load i32, i32* @y.18
  %654 = sub i32 %652, 1
  %655 = mul i32 %652, %654
  %656 = urem i32 %655, 2
  %657 = icmp eq i32 %656, 0
  %658 = icmp slt i32 %653, 10
  %659 = or i1 %657, %658
  br i1 %659, label %originalBB143, label %originalBB143alteredBB

originalBB143:                                    ; preds = %650, %originalBB143alteredBB
  %660 = icmp ne i32 %651, 0, !dbg !1275
  %661 = xor i1 %660, true, !dbg !1275
  %662 = load i32, i32* @x.17
  %663 = load i32, i32* @y.18
  %664 = sub i32 %662, 1
  %665 = mul i32 %662, %664
  %666 = urem i32 %665, 2
  %667 = icmp eq i32 %666, 0
  %668 = icmp slt i32 %663, 10
  %669 = or i1 %667, %668
  br i1 %669, label %originalBBpart2147, label %originalBB143alteredBB

originalBBpart2147:                               ; preds = %originalBB143
  br i1 %661, label %670, label %4748, !dbg !1276

670:                                              ; preds = %originalBBpart2147
  call void @llvm.dbg.declare(metadata i8* %39, metadata !1277, metadata !DIExpression()), !dbg !1279
  call void @llvm.dbg.declare(metadata i8* %40, metadata !1280, metadata !DIExpression()), !dbg !1281
  call void @llvm.dbg.declare(metadata i8* %41, metadata !1282, metadata !DIExpression()), !dbg !1283
  store i8 0, i8* %41, align 1, !dbg !1283
  call void @llvm.dbg.declare(metadata i8* %42, metadata !1284, metadata !DIExpression()), !dbg !1285
  store i8 0, i8* %42, align 1, !dbg !1285
  call void @llvm.dbg.declare(metadata i8* %43, metadata !1286, metadata !DIExpression()), !dbg !1287
  store i8 0, i8* %43, align 1, !dbg !1287
  %671 = load i8, i8* %33, align 1, !dbg !1288
  %672 = trunc i8 %671 to i1, !dbg !1288
  br i1 %672, label %673, label %821, !dbg !1290

673:                                              ; preds = %670
  %674 = load i32, i32* %23, align 4, !dbg !1291
  %675 = icmp ne i32 %674, 2, !dbg !1292
  br i1 %675, label %676, label %821, !dbg !1293

676:                                              ; preds = %673
  %677 = load i32, i32* @x.17
  %678 = load i32, i32* @y.18
  %679 = sub i32 %677, 1
  %680 = mul i32 %677, %679
  %681 = urem i32 %680, 2
  %682 = icmp eq i32 %681, 0
  %683 = icmp slt i32 %678, 10
  %684 = or i1 %682, %683
  br i1 %684, label %originalBB149, label %originalBB149alteredBB

originalBB149:                                    ; preds = %676, %originalBB149alteredBB
  %685 = load i64, i64* %32, align 8, !dbg !1294
  %686 = icmp ne i64 %685, 0, !dbg !1294
  %687 = load i32, i32* @x.17
  %688 = load i32, i32* @y.18
  %689 = sub i32 %687, 1
  %690 = mul i32 %687, %689
  %691 = urem i32 %690, 2
  %692 = icmp eq i32 %691, 0
  %693 = icmp slt i32 %688, 10
  %694 = or i1 %692, %693
  br i1 %694, label %originalBBpart2151, label %originalBB149alteredBB

originalBBpart2151:                               ; preds = %originalBB149
  br i1 %686, label %695, label %821, !dbg !1295

695:                                              ; preds = %originalBBpart2151
  %696 = load i32, i32* @x.17
  %697 = load i32, i32* @y.18
  %698 = sub i32 %696, 1
  %699 = mul i32 %696, %698
  %700 = urem i32 %699, 2
  %701 = icmp eq i32 %700, 0
  %702 = icmp slt i32 %697, 10
  %703 = or i1 %701, %702
  br i1 %703, label %originalBB153, label %originalBB153alteredBB

originalBB153:                                    ; preds = %695, %originalBB153alteredBB
  %704 = load i64, i64* %28, align 8, !dbg !1296
  %705 = load i64, i64* %32, align 8, !dbg !1297
  %706 = add i64 %704, %705, !dbg !1298
  %707 = load i64, i64* %22, align 8, !dbg !1299
  %708 = icmp eq i64 %707, -1, !dbg !1300
  %709 = load i32, i32* @x.17
  %710 = load i32, i32* @y.18
  %711 = sub i32 %709, 1
  %712 = mul i32 %709, %711
  %713 = urem i32 %712, 2
  %714 = icmp eq i32 %713, 0
  %715 = icmp slt i32 %710, 10
  %716 = or i1 %714, %715
  br i1 %716, label %originalBBpart2163, label %originalBB153alteredBB

originalBBpart2163:                               ; preds = %originalBB153
  br i1 %708, label %717, label %755, !dbg !1301

717:                                              ; preds = %originalBBpart2163
  %718 = load i32, i32* @x.17
  %719 = load i32, i32* @y.18
  %720 = sub i32 %718, 1
  %721 = mul i32 %718, %720
  %722 = urem i32 %721, 2
  %723 = icmp eq i32 %722, 0
  %724 = icmp slt i32 %719, 10
  %725 = or i1 %723, %724
  br i1 %725, label %originalBB165, label %originalBB165alteredBB

originalBB165:                                    ; preds = %717, %originalBB165alteredBB
  %726 = load i64, i64* %32, align 8, !dbg !1302
  %727 = icmp ult i64 1, %726, !dbg !1303
  %728 = load i32, i32* @x.17
  %729 = load i32, i32* @y.18
  %730 = sub i32 %728, 1
  %731 = mul i32 %728, %730
  %732 = urem i32 %731, 2
  %733 = icmp eq i32 %732, 0
  %734 = icmp slt i32 %729, 10
  %735 = or i1 %733, %734
  br i1 %735, label %originalBBpart2167, label %originalBB165alteredBB

originalBBpart2167:                               ; preds = %originalBB165
  br i1 %727, label %736, label %755, !dbg !1299

736:                                              ; preds = %originalBBpart2167
  %737 = load i32, i32* @x.17
  %738 = load i32, i32* @y.18
  %739 = sub i32 %737, 1
  %740 = mul i32 %737, %739
  %741 = urem i32 %740, 2
  %742 = icmp eq i32 %741, 0
  %743 = icmp slt i32 %738, 10
  %744 = or i1 %742, %743
  br i1 %744, label %originalBB169, label %originalBB169alteredBB

originalBB169:                                    ; preds = %736, %originalBB169alteredBB
  %745 = load i8*, i8** %21, align 8, !dbg !1304
  %746 = call i64 @strlen(i8* %745) #13, !dbg !1305
  store i64 %746, i64* %22, align 8, !dbg !1306
  %747 = load i32, i32* @x.17
  %748 = load i32, i32* @y.18
  %749 = sub i32 %747, 1
  %750 = mul i32 %747, %749
  %751 = urem i32 %750, 2
  %752 = icmp eq i32 %751, 0
  %753 = icmp slt i32 %748, 10
  %754 = or i1 %752, %753
  br i1 %754, label %originalBBpart2171, label %originalBB169alteredBB

originalBBpart2171:                               ; preds = %originalBB169
  br label %757, !dbg !1299

755:                                              ; preds = %originalBBpart2167, %originalBBpart2163
  %756 = load i64, i64* %22, align 8, !dbg !1307
  br label %757, !dbg !1299

757:                                              ; preds = %755, %originalBBpart2171
  %758 = phi i64 [ %746, %originalBBpart2171 ], [ %756, %755 ], !dbg !1299
  %759 = icmp ule i64 %706, %758, !dbg !1308
  br i1 %759, label %760, label %821, !dbg !1309

760:                                              ; preds = %757
  %761 = load i8*, i8** %21, align 8, !dbg !1310
  %762 = load i64, i64* %28, align 8, !dbg !1311
  %763 = getelementptr inbounds i8, i8* %761, i64 %762, !dbg !1312
  %764 = load i8*, i8** %31, align 8, !dbg !1313
  %765 = load i64, i64* %32, align 8, !dbg !1314
  %766 = call i32 @memcmp(i8* %763, i8* %764, i64 %765) #13, !dbg !1315
  %767 = icmp eq i32 %766, 0, !dbg !1316
  br i1 %767, label %768, label %821, !dbg !1317

768:                                              ; preds = %760
  %769 = load i32, i32* @x.17
  %770 = load i32, i32* @y.18
  %771 = sub i32 %769, 1
  %772 = mul i32 %769, %771
  %773 = urem i32 %772, 2
  %774 = icmp eq i32 %773, 0
  %775 = icmp slt i32 %770, 10
  %776 = or i1 %774, %775
  br i1 %776, label %originalBB173, label %originalBB173alteredBB

originalBB173:                                    ; preds = %768, %originalBB173alteredBB
  %777 = load i8, i8* %35, align 1, !dbg !1318
  %778 = trunc i8 %777 to i1, !dbg !1318
  %779 = load i32, i32* @x.17
  %780 = load i32, i32* @y.18
  %781 = sub i32 %779, 1
  %782 = mul i32 %779, %781
  %783 = urem i32 %782, 2
  %784 = icmp eq i32 %783, 0
  %785 = icmp slt i32 %780, 10
  %786 = or i1 %784, %785
  br i1 %786, label %originalBBpart2175, label %originalBB173alteredBB

originalBBpart2175:                               ; preds = %originalBB173
  br i1 %778, label %787, label %804, !dbg !1321

787:                                              ; preds = %originalBBpart2175
  %788 = load i32, i32* @x.17
  %789 = load i32, i32* @y.18
  %790 = sub i32 %788, 1
  %791 = mul i32 %788, %790
  %792 = urem i32 %791, 2
  %793 = icmp eq i32 %792, 0
  %794 = icmp slt i32 %789, 10
  %795 = or i1 %793, %794
  br i1 %795, label %originalBB177, label %originalBB177alteredBB

originalBB177:                                    ; preds = %787, %originalBB177alteredBB
  %796 = load i32, i32* @x.17
  %797 = load i32, i32* @y.18
  %798 = sub i32 %796, 1
  %799 = mul i32 %796, %798
  %800 = urem i32 %799, 2
  %801 = icmp eq i32 %800, 0
  %802 = icmp slt i32 %797, 10
  %803 = or i1 %801, %802
  br i1 %803, label %originalBBpart2179, label %originalBB177alteredBB

originalBBpart2179:                               ; preds = %originalBB177
  br label %5134, !dbg !1322

804:                                              ; preds = %originalBBpart2175
  %805 = load i32, i32* @x.17
  %806 = load i32, i32* @y.18
  %807 = sub i32 %805, 1
  %808 = mul i32 %805, %807
  %809 = urem i32 %808, 2
  %810 = icmp eq i32 %809, 0
  %811 = icmp slt i32 %806, 10
  %812 = or i1 %810, %811
  br i1 %812, label %originalBB181, label %originalBB181alteredBB

originalBB181:                                    ; preds = %804, %originalBB181alteredBB
  store i8 1, i8* %41, align 1, !dbg !1323
  %813 = load i32, i32* @x.17
  %814 = load i32, i32* @y.18
  %815 = sub i32 %813, 1
  %816 = mul i32 %813, %815
  %817 = urem i32 %816, 2
  %818 = icmp eq i32 %817, 0
  %819 = icmp slt i32 %814, 10
  %820 = or i1 %818, %819
  br i1 %820, label %originalBBpart2183, label %originalBB181alteredBB

originalBBpart2183:                               ; preds = %originalBB181
  br label %821, !dbg !1324

821:                                              ; preds = %originalBBpart2183, %760, %757, %originalBBpart2151, %673, %670
  %822 = load i32, i32* @x.17
  %823 = load i32, i32* @y.18
  %824 = sub i32 %822, 1
  %825 = mul i32 %822, %824
  %826 = urem i32 %825, 2
  %827 = icmp eq i32 %826, 0
  %828 = icmp slt i32 %823, 10
  %829 = or i1 %827, %828
  br i1 %829, label %originalBB185, label %originalBB185alteredBB

originalBB185:                                    ; preds = %821, %originalBB185alteredBB
  %830 = load i8*, i8** %21, align 8, !dbg !1325
  %831 = load i64, i64* %28, align 8, !dbg !1326
  %832 = getelementptr inbounds i8, i8* %830, i64 %831, !dbg !1325
  %833 = load i8, i8* %832, align 1, !dbg !1325
  store i8 %833, i8* %39, align 1, !dbg !1327
  %834 = load i8, i8* %39, align 1, !dbg !1328
  %835 = zext i8 %834 to i32, !dbg !1328
  %836 = load i32, i32* @x.17
  %837 = load i32, i32* @y.18
  %838 = sub i32 %836, 1
  %839 = mul i32 %836, %838
  %840 = urem i32 %839, 2
  %841 = icmp eq i32 %840, 0
  %842 = icmp slt i32 %837, 10
  %843 = or i1 %841, %842
  br i1 %843, label %originalBBpart2187, label %originalBB185alteredBB

originalBBpart2187:                               ; preds = %originalBB185
  switch i32 %835, label %2640 [
    i32 0, label %844
    i32 63, label %1477
    i32 7, label %1989
    i32 8, label %2006
    i32 12, label %2007
    i32 10, label %2024
    i32 13, label %2041
    i32 9, label %2042
    i32 11, label %2043
    i32 92, label %2044
    i32 123, label %2254
    i32 125, label %2254
    i32 35, label %2284
    i32 126, label %2284
    i32 32, label %2337
    i32 33, label %2354
    i32 34, label %2354
    i32 36, label %2354
    i32 38, label %2354
    i32 40, label %2354
    i32 41, label %2354
    i32 42, label %2354
    i32 59, label %2354
    i32 60, label %2354
    i32 61, label %2354
    i32 62, label %2354
    i32 91, label %2354
    i32 94, label %2354
    i32 96, label %2354
    i32 124, label %2354
    i32 39, label %2410
    i32 37, label %2623
    i32 43, label %2623
    i32 44, label %2623
    i32 45, label %2623
    i32 46, label %2623
    i32 47, label %2623
    i32 48, label %2623
    i32 49, label %2623
    i32 50, label %2623
    i32 51, label %2623
    i32 52, label %2623
    i32 53, label %2623
    i32 54, label %2623
    i32 55, label %2623
    i32 56, label %2623
    i32 57, label %2623
    i32 58, label %2623
    i32 65, label %2623
    i32 66, label %2623
    i32 67, label %2623
    i32 68, label %2623
    i32 69, label %2623
    i32 70, label %2623
    i32 71, label %2623
    i32 72, label %2623
    i32 73, label %2623
    i32 74, label %2623
    i32 75, label %2623
    i32 76, label %2623
    i32 77, label %2623
    i32 78, label %2623
    i32 79, label %2623
    i32 80, label %2623
    i32 81, label %2623
    i32 82, label %2623
    i32 83, label %2623
    i32 84, label %2623
    i32 85, label %2623
    i32 86, label %2623
    i32 87, label %2623
    i32 88, label %2623
    i32 89, label %2623
    i32 90, label %2623
    i32 93, label %2623
    i32 95, label %2623
    i32 97, label %2623
    i32 98, label %2623
    i32 99, label %2623
    i32 100, label %2623
    i32 101, label %2623
    i32 102, label %2623
    i32 103, label %2623
    i32 104, label %2623
    i32 105, label %2623
    i32 106, label %2623
    i32 107, label %2623
    i32 108, label %2623
    i32 109, label %2623
    i32 110, label %2623
    i32 111, label %2623
    i32 112, label %2623
    i32 113, label %2623
    i32 114, label %2623
    i32 115, label %2623
    i32 116, label %2623
    i32 117, label %2623
    i32 118, label %2623
    i32 119, label %2623
    i32 120, label %2623
    i32 121, label %2623
    i32 122, label %2623
  ], !dbg !1329

844:                                              ; preds = %originalBBpart2187
  %845 = load i8, i8* %33, align 1, !dbg !1330
  %846 = trunc i8 %845 to i1, !dbg !1330
  br i1 %846, label %847, label %1406, !dbg !1333

847:                                              ; preds = %844
  br label %848, !dbg !1334

848:                                              ; preds = %847
  %849 = load i32, i32* @x.17
  %850 = load i32, i32* @y.18
  %851 = sub i32 %849, 1
  %852 = mul i32 %849, %851
  %853 = urem i32 %852, 2
  %854 = icmp eq i32 %853, 0
  %855 = icmp slt i32 %850, 10
  %856 = or i1 %854, %855
  br i1 %856, label %originalBB189, label %originalBB189alteredBB

originalBB189:                                    ; preds = %848, %originalBB189alteredBB
  %857 = load i8, i8* %35, align 1, !dbg !1336
  %858 = trunc i8 %857 to i1, !dbg !1336
  %859 = load i32, i32* @x.17
  %860 = load i32, i32* @y.18
  %861 = sub i32 %859, 1
  %862 = mul i32 %859, %861
  %863 = urem i32 %862, 2
  %864 = icmp eq i32 %863, 0
  %865 = icmp slt i32 %860, 10
  %866 = or i1 %864, %865
  br i1 %866, label %originalBBpart2191, label %originalBB189alteredBB

originalBBpart2191:                               ; preds = %originalBB189
  br i1 %858, label %867, label %884, !dbg !1339

867:                                              ; preds = %originalBBpart2191
  %868 = load i32, i32* @x.17
  %869 = load i32, i32* @y.18
  %870 = sub i32 %868, 1
  %871 = mul i32 %868, %870
  %872 = urem i32 %871, 2
  %873 = icmp eq i32 %872, 0
  %874 = icmp slt i32 %869, 10
  %875 = or i1 %873, %874
  br i1 %875, label %originalBB193, label %originalBB193alteredBB

originalBB193:                                    ; preds = %867, %originalBB193alteredBB
  %876 = load i32, i32* @x.17
  %877 = load i32, i32* @y.18
  %878 = sub i32 %876, 1
  %879 = mul i32 %876, %878
  %880 = urem i32 %879, 2
  %881 = icmp eq i32 %880, 0
  %882 = icmp slt i32 %877, 10
  %883 = or i1 %881, %882
  br i1 %883, label %originalBBpart2195, label %originalBB193alteredBB

originalBBpart2195:                               ; preds = %originalBB193
  br label %5134, !dbg !1336

884:                                              ; preds = %originalBBpart2191
  store i8 1, i8* %42, align 1, !dbg !1339
  %885 = load i32, i32* %23, align 4, !dbg !1340
  %886 = icmp eq i32 %885, 2, !dbg !1340
  br i1 %886, label %887, label %1103, !dbg !1340

887:                                              ; preds = %884
  %888 = load i32, i32* @x.17
  %889 = load i32, i32* @y.18
  %890 = sub i32 %888, 1
  %891 = mul i32 %888, %890
  %892 = urem i32 %891, 2
  %893 = icmp eq i32 %892, 0
  %894 = icmp slt i32 %889, 10
  %895 = or i1 %893, %894
  br i1 %895, label %originalBB197, label %originalBB197alteredBB

originalBB197:                                    ; preds = %887, %originalBB197alteredBB
  %896 = load i8, i8* %36, align 1, !dbg !1340
  %897 = trunc i8 %896 to i1, !dbg !1340
  %898 = load i32, i32* @x.17
  %899 = load i32, i32* @y.18
  %900 = sub i32 %898, 1
  %901 = mul i32 %898, %900
  %902 = urem i32 %901, 2
  %903 = icmp eq i32 %902, 0
  %904 = icmp slt i32 %899, 10
  %905 = or i1 %903, %904
  br i1 %905, label %originalBBpart2199, label %originalBB197alteredBB

originalBBpart2199:                               ; preds = %originalBB197
  br i1 %897, label %1103, label %906, !dbg !1339

906:                                              ; preds = %originalBBpart2199
  %907 = load i32, i32* @x.17
  %908 = load i32, i32* @y.18
  %909 = sub i32 %907, 1
  %910 = mul i32 %907, %909
  %911 = urem i32 %910, 2
  %912 = icmp eq i32 %911, 0
  %913 = icmp slt i32 %908, 10
  %914 = or i1 %912, %913
  br i1 %914, label %originalBB201, label %originalBB201alteredBB

originalBB201:                                    ; preds = %906, %originalBB201alteredBB
  %915 = load i32, i32* @x.17
  %916 = load i32, i32* @y.18
  %917 = sub i32 %915, 1
  %918 = mul i32 %915, %917
  %919 = urem i32 %918, 2
  %920 = icmp eq i32 %919, 0
  %921 = icmp slt i32 %916, 10
  %922 = or i1 %920, %921
  br i1 %922, label %originalBBpart2203, label %originalBB201alteredBB

originalBBpart2203:                               ; preds = %originalBB201
  br label %923, !dbg !1342

923:                                              ; preds = %originalBBpart2203
  %924 = load i32, i32* @x.17
  %925 = load i32, i32* @y.18
  %926 = sub i32 %924, 1
  %927 = mul i32 %924, %926
  %928 = urem i32 %927, 2
  %929 = icmp eq i32 %928, 0
  %930 = icmp slt i32 %925, 10
  %931 = or i1 %929, %930
  br i1 %931, label %originalBB205, label %originalBB205alteredBB

originalBB205:                                    ; preds = %923, %originalBB205alteredBB
  %932 = load i64, i64* %29, align 8, !dbg !1344
  %933 = load i64, i64* %20, align 8, !dbg !1344
  %934 = icmp ult i64 %932, %933, !dbg !1344
  %935 = load i32, i32* @x.17
  %936 = load i32, i32* @y.18
  %937 = sub i32 %935, 1
  %938 = mul i32 %935, %937
  %939 = urem i32 %938, 2
  %940 = icmp eq i32 %939, 0
  %941 = icmp slt i32 %936, 10
  %942 = or i1 %940, %941
  br i1 %942, label %originalBBpart2207, label %originalBB205alteredBB

originalBBpart2207:                               ; preds = %originalBB205
  br i1 %934, label %943, label %947, !dbg !1347

943:                                              ; preds = %originalBBpart2207
  %944 = load i8*, i8** %19, align 8, !dbg !1344
  %945 = load i64, i64* %29, align 8, !dbg !1344
  %946 = getelementptr inbounds i8, i8* %944, i64 %945, !dbg !1344
  store i8 39, i8* %946, align 1, !dbg !1344
  br label %947, !dbg !1344

947:                                              ; preds = %943, %originalBBpart2207
  %948 = load i32, i32* @x.17
  %949 = load i32, i32* @y.18
  %950 = sub i32 %948, 1
  %951 = mul i32 %948, %950
  %952 = urem i32 %951, 2
  %953 = icmp eq i32 %952, 0
  %954 = icmp slt i32 %949, 10
  %955 = or i1 %953, %954
  br i1 %955, label %originalBB209, label %originalBB209alteredBB

originalBB209:                                    ; preds = %947, %originalBB209alteredBB
  %956 = load i64, i64* %29, align 8, !dbg !1347
  %957 = add i64 %956, 1, !dbg !1347
  store i64 %957, i64* %29, align 8, !dbg !1347
  %958 = load i32, i32* @x.17
  %959 = load i32, i32* @y.18
  %960 = sub i32 %958, 1
  %961 = mul i32 %958, %960
  %962 = urem i32 %961, 2
  %963 = icmp eq i32 %962, 0
  %964 = icmp slt i32 %959, 10
  %965 = or i1 %963, %964
  br i1 %965, label %originalBBpart2223, label %originalBB209alteredBB

originalBBpart2223:                               ; preds = %originalBB209
  br label %966, !dbg !1347

966:                                              ; preds = %originalBBpart2223
  %967 = load i32, i32* @x.17
  %968 = load i32, i32* @y.18
  %969 = sub i32 %967, 1
  %970 = mul i32 %967, %969
  %971 = urem i32 %970, 2
  %972 = icmp eq i32 %971, 0
  %973 = icmp slt i32 %968, 10
  %974 = or i1 %972, %973
  br i1 %974, label %originalBB225, label %originalBB225alteredBB

originalBB225:                                    ; preds = %966, %originalBB225alteredBB
  %975 = load i32, i32* @x.17
  %976 = load i32, i32* @y.18
  %977 = sub i32 %975, 1
  %978 = mul i32 %975, %977
  %979 = urem i32 %978, 2
  %980 = icmp eq i32 %979, 0
  %981 = icmp slt i32 %976, 10
  %982 = or i1 %980, %981
  br i1 %982, label %originalBBpart2227, label %originalBB225alteredBB

originalBBpart2227:                               ; preds = %originalBB225
  br label %983, !dbg !1342

983:                                              ; preds = %originalBBpart2227
  %984 = load i64, i64* %29, align 8, !dbg !1348
  %985 = load i64, i64* %20, align 8, !dbg !1348
  %986 = icmp ult i64 %984, %985, !dbg !1348
  br i1 %986, label %987, label %1007, !dbg !1351

987:                                              ; preds = %983
  %988 = load i32, i32* @x.17
  %989 = load i32, i32* @y.18
  %990 = sub i32 %988, 1
  %991 = mul i32 %988, %990
  %992 = urem i32 %991, 2
  %993 = icmp eq i32 %992, 0
  %994 = icmp slt i32 %989, 10
  %995 = or i1 %993, %994
  br i1 %995, label %originalBB229, label %originalBB229alteredBB

originalBB229:                                    ; preds = %987, %originalBB229alteredBB
  %996 = load i8*, i8** %19, align 8, !dbg !1348
  %997 = load i64, i64* %29, align 8, !dbg !1348
  %998 = getelementptr inbounds i8, i8* %996, i64 %997, !dbg !1348
  store i8 36, i8* %998, align 1, !dbg !1348
  %999 = load i32, i32* @x.17
  %1000 = load i32, i32* @y.18
  %1001 = sub i32 %999, 1
  %1002 = mul i32 %999, %1001
  %1003 = urem i32 %1002, 2
  %1004 = icmp eq i32 %1003, 0
  %1005 = icmp slt i32 %1000, 10
  %1006 = or i1 %1004, %1005
  br i1 %1006, label %originalBBpart2231, label %originalBB229alteredBB

originalBBpart2231:                               ; preds = %originalBB229
  br label %1007, !dbg !1348

1007:                                             ; preds = %originalBBpart2231, %983
  %1008 = load i32, i32* @x.17
  %1009 = load i32, i32* @y.18
  %1010 = sub i32 %1008, 1
  %1011 = mul i32 %1008, %1010
  %1012 = urem i32 %1011, 2
  %1013 = icmp eq i32 %1012, 0
  %1014 = icmp slt i32 %1009, 10
  %1015 = or i1 %1013, %1014
  br i1 %1015, label %originalBB233, label %originalBB233alteredBB

originalBB233:                                    ; preds = %1007, %originalBB233alteredBB
  %1016 = load i64, i64* %29, align 8, !dbg !1351
  %1017 = add i64 %1016, 1, !dbg !1351
  store i64 %1017, i64* %29, align 8, !dbg !1351
  %1018 = load i32, i32* @x.17
  %1019 = load i32, i32* @y.18
  %1020 = sub i32 %1018, 1
  %1021 = mul i32 %1018, %1020
  %1022 = urem i32 %1021, 2
  %1023 = icmp eq i32 %1022, 0
  %1024 = icmp slt i32 %1019, 10
  %1025 = or i1 %1023, %1024
  br i1 %1025, label %originalBBpart2243, label %originalBB233alteredBB

originalBBpart2243:                               ; preds = %originalBB233
  br label %1026, !dbg !1351

1026:                                             ; preds = %originalBBpart2243
  %1027 = load i32, i32* @x.17
  %1028 = load i32, i32* @y.18
  %1029 = sub i32 %1027, 1
  %1030 = mul i32 %1027, %1029
  %1031 = urem i32 %1030, 2
  %1032 = icmp eq i32 %1031, 0
  %1033 = icmp slt i32 %1028, 10
  %1034 = or i1 %1032, %1033
  br i1 %1034, label %originalBB245, label %originalBB245alteredBB

originalBB245:                                    ; preds = %1026, %originalBB245alteredBB
  %1035 = load i32, i32* @x.17
  %1036 = load i32, i32* @y.18
  %1037 = sub i32 %1035, 1
  %1038 = mul i32 %1035, %1037
  %1039 = urem i32 %1038, 2
  %1040 = icmp eq i32 %1039, 0
  %1041 = icmp slt i32 %1036, 10
  %1042 = or i1 %1040, %1041
  br i1 %1042, label %originalBBpart2247, label %originalBB245alteredBB

originalBBpart2247:                               ; preds = %originalBB245
  br label %1043, !dbg !1342

1043:                                             ; preds = %originalBBpart2247
  %1044 = load i64, i64* %29, align 8, !dbg !1352
  %1045 = load i64, i64* %20, align 8, !dbg !1352
  %1046 = icmp ult i64 %1044, %1045, !dbg !1352
  br i1 %1046, label %1047, label %1067, !dbg !1355

1047:                                             ; preds = %1043
  %1048 = load i32, i32* @x.17
  %1049 = load i32, i32* @y.18
  %1050 = sub i32 %1048, 1
  %1051 = mul i32 %1048, %1050
  %1052 = urem i32 %1051, 2
  %1053 = icmp eq i32 %1052, 0
  %1054 = icmp slt i32 %1049, 10
  %1055 = or i1 %1053, %1054
  br i1 %1055, label %originalBB249, label %originalBB249alteredBB

originalBB249:                                    ; preds = %1047, %originalBB249alteredBB
  %1056 = load i8*, i8** %19, align 8, !dbg !1352
  %1057 = load i64, i64* %29, align 8, !dbg !1352
  %1058 = getelementptr inbounds i8, i8* %1056, i64 %1057, !dbg !1352
  store i8 39, i8* %1058, align 1, !dbg !1352
  %1059 = load i32, i32* @x.17
  %1060 = load i32, i32* @y.18
  %1061 = sub i32 %1059, 1
  %1062 = mul i32 %1059, %1061
  %1063 = urem i32 %1062, 2
  %1064 = icmp eq i32 %1063, 0
  %1065 = icmp slt i32 %1060, 10
  %1066 = or i1 %1064, %1065
  br i1 %1066, label %originalBBpart2251, label %originalBB249alteredBB

originalBBpart2251:                               ; preds = %originalBB249
  br label %1067, !dbg !1352

1067:                                             ; preds = %originalBBpart2251, %1043
  %1068 = load i32, i32* @x.17
  %1069 = load i32, i32* @y.18
  %1070 = sub i32 %1068, 1
  %1071 = mul i32 %1068, %1070
  %1072 = urem i32 %1071, 2
  %1073 = icmp eq i32 %1072, 0
  %1074 = icmp slt i32 %1069, 10
  %1075 = or i1 %1073, %1074
  br i1 %1075, label %originalBB253, label %originalBB253alteredBB

originalBB253:                                    ; preds = %1067, %originalBB253alteredBB
  %1076 = load i64, i64* %29, align 8, !dbg !1355
  %1077 = add i64 %1076, 1, !dbg !1355
  store i64 %1077, i64* %29, align 8, !dbg !1355
  %1078 = load i32, i32* @x.17
  %1079 = load i32, i32* @y.18
  %1080 = sub i32 %1078, 1
  %1081 = mul i32 %1078, %1080
  %1082 = urem i32 %1081, 2
  %1083 = icmp eq i32 %1082, 0
  %1084 = icmp slt i32 %1079, 10
  %1085 = or i1 %1083, %1084
  br i1 %1085, label %originalBBpart2260, label %originalBB253alteredBB

originalBBpart2260:                               ; preds = %originalBB253
  br label %1086, !dbg !1355

1086:                                             ; preds = %originalBBpart2260
  %1087 = load i32, i32* @x.17
  %1088 = load i32, i32* @y.18
  %1089 = sub i32 %1087, 1
  %1090 = mul i32 %1087, %1089
  %1091 = urem i32 %1090, 2
  %1092 = icmp eq i32 %1091, 0
  %1093 = icmp slt i32 %1088, 10
  %1094 = or i1 %1092, %1093
  br i1 %1094, label %originalBB262, label %originalBB262alteredBB

originalBB262:                                    ; preds = %1086, %originalBB262alteredBB
  store i8 1, i8* %36, align 1, !dbg !1342
  %1095 = load i32, i32* @x.17
  %1096 = load i32, i32* @y.18
  %1097 = sub i32 %1095, 1
  %1098 = mul i32 %1095, %1097
  %1099 = urem i32 %1098, 2
  %1100 = icmp eq i32 %1099, 0
  %1101 = icmp slt i32 %1096, 10
  %1102 = or i1 %1100, %1101
  br i1 %1102, label %originalBBpart2264, label %originalBB262alteredBB

originalBBpart2264:                               ; preds = %originalBB262
  br label %1103, !dbg !1342

1103:                                             ; preds = %originalBBpart2264, %originalBBpart2199, %884
  %1104 = load i32, i32* @x.17
  %1105 = load i32, i32* @y.18
  %1106 = sub i32 %1104, 1
  %1107 = mul i32 %1104, %1106
  %1108 = urem i32 %1107, 2
  %1109 = icmp eq i32 %1108, 0
  %1110 = icmp slt i32 %1105, 10
  %1111 = or i1 %1109, %1110
  br i1 %1111, label %originalBB266, label %originalBB266alteredBB

originalBB266:                                    ; preds = %1103, %originalBB266alteredBB
  %1112 = load i32, i32* @x.17
  %1113 = load i32, i32* @y.18
  %1114 = sub i32 %1112, 1
  %1115 = mul i32 %1112, %1114
  %1116 = urem i32 %1115, 2
  %1117 = icmp eq i32 %1116, 0
  %1118 = icmp slt i32 %1113, 10
  %1119 = or i1 %1117, %1118
  br i1 %1119, label %originalBBpart2268, label %originalBB266alteredBB

originalBBpart2268:                               ; preds = %originalBB266
  br label %1120, !dbg !1339

1120:                                             ; preds = %originalBBpart2268
  %1121 = load i64, i64* %29, align 8, !dbg !1356
  %1122 = load i64, i64* %20, align 8, !dbg !1356
  %1123 = icmp ult i64 %1121, %1122, !dbg !1356
  br i1 %1123, label %1124, label %1128, !dbg !1359

1124:                                             ; preds = %1120
  %1125 = load i8*, i8** %19, align 8, !dbg !1356
  %1126 = load i64, i64* %29, align 8, !dbg !1356
  %1127 = getelementptr inbounds i8, i8* %1125, i64 %1126, !dbg !1356
  store i8 92, i8* %1127, align 1, !dbg !1356
  br label %1128, !dbg !1356

1128:                                             ; preds = %1124, %1120
  %1129 = load i64, i64* %29, align 8, !dbg !1359
  %1130 = add i64 %1129, 1, !dbg !1359
  store i64 %1130, i64* %29, align 8, !dbg !1359
  br label %1131, !dbg !1359

1131:                                             ; preds = %1128
  br label %1132, !dbg !1339

1132:                                             ; preds = %1131
  %1133 = load i32, i32* @x.17
  %1134 = load i32, i32* @y.18
  %1135 = sub i32 %1133, 1
  %1136 = mul i32 %1133, %1135
  %1137 = urem i32 %1136, 2
  %1138 = icmp eq i32 %1137, 0
  %1139 = icmp slt i32 %1134, 10
  %1140 = or i1 %1138, %1139
  br i1 %1140, label %originalBB270, label %originalBB270alteredBB

originalBB270:                                    ; preds = %1132, %originalBB270alteredBB
  %1141 = load i32, i32* %23, align 4, !dbg !1360
  %1142 = icmp ne i32 %1141, 2, !dbg !1362
  %1143 = load i32, i32* @x.17
  %1144 = load i32, i32* @y.18
  %1145 = sub i32 %1143, 1
  %1146 = mul i32 %1143, %1145
  %1147 = urem i32 %1146, 2
  %1148 = icmp eq i32 %1147, 0
  %1149 = icmp slt i32 %1144, 10
  %1150 = or i1 %1148, %1149
  br i1 %1150, label %originalBBpart2272, label %originalBB270alteredBB

originalBBpart2272:                               ; preds = %originalBB270
  br i1 %1142, label %1151, label %1389, !dbg !1363

1151:                                             ; preds = %originalBBpart2272
  %1152 = load i32, i32* @x.17
  %1153 = load i32, i32* @y.18
  %1154 = sub i32 %1152, 1
  %1155 = mul i32 %1152, %1154
  %1156 = urem i32 %1155, 2
  %1157 = icmp eq i32 %1156, 0
  %1158 = icmp slt i32 %1153, 10
  %1159 = or i1 %1157, %1158
  br i1 %1159, label %originalBB274, label %originalBB274alteredBB

originalBB274:                                    ; preds = %1151, %originalBB274alteredBB
  %1160 = load i64, i64* %28, align 8, !dbg !1364
  %1161 = add i64 %1160, 1, !dbg !1365
  %1162 = load i64, i64* %22, align 8, !dbg !1366
  %1163 = icmp ult i64 %1161, %1162, !dbg !1367
  %1164 = load i32, i32* @x.17
  %1165 = load i32, i32* @y.18
  %1166 = sub i32 %1164, 1
  %1167 = mul i32 %1164, %1166
  %1168 = urem i32 %1167, 2
  %1169 = icmp eq i32 %1168, 0
  %1170 = icmp slt i32 %1165, 10
  %1171 = or i1 %1169, %1170
  br i1 %1171, label %originalBBpart2280, label %originalBB274alteredBB

originalBBpart2280:                               ; preds = %originalBB274
  br i1 %1163, label %1172, label %1389, !dbg !1368

1172:                                             ; preds = %originalBBpart2280
  %1173 = load i32, i32* @x.17
  %1174 = load i32, i32* @y.18
  %1175 = sub i32 %1173, 1
  %1176 = mul i32 %1173, %1175
  %1177 = urem i32 %1176, 2
  %1178 = icmp eq i32 %1177, 0
  %1179 = icmp slt i32 %1174, 10
  %1180 = or i1 %1178, %1179
  br i1 %1180, label %originalBB282, label %originalBB282alteredBB

originalBB282:                                    ; preds = %1172, %originalBB282alteredBB
  %1181 = load i8*, i8** %21, align 8, !dbg !1369
  %1182 = load i64, i64* %28, align 8, !dbg !1370
  %1183 = add i64 %1182, 1, !dbg !1371
  %1184 = getelementptr inbounds i8, i8* %1181, i64 %1183, !dbg !1369
  %1185 = load i8, i8* %1184, align 1, !dbg !1369
  %1186 = sext i8 %1185 to i32, !dbg !1369
  %1187 = icmp sle i32 48, %1186, !dbg !1372
  %1188 = load i32, i32* @x.17
  %1189 = load i32, i32* @y.18
  %1190 = sub i32 %1188, 1
  %1191 = mul i32 %1188, %1190
  %1192 = urem i32 %1191, 2
  %1193 = icmp eq i32 %1192, 0
  %1194 = icmp slt i32 %1189, 10
  %1195 = or i1 %1193, %1194
  br i1 %1195, label %originalBBpart2290, label %originalBB282alteredBB

originalBBpart2290:                               ; preds = %originalBB282
  br i1 %1187, label %1196, label %1389, !dbg !1373

1196:                                             ; preds = %originalBBpart2290
  %1197 = load i32, i32* @x.17
  %1198 = load i32, i32* @y.18
  %1199 = sub i32 %1197, 1
  %1200 = mul i32 %1197, %1199
  %1201 = urem i32 %1200, 2
  %1202 = icmp eq i32 %1201, 0
  %1203 = icmp slt i32 %1198, 10
  %1204 = or i1 %1202, %1203
  br i1 %1204, label %originalBB292, label %originalBB292alteredBB

originalBB292:                                    ; preds = %1196, %originalBB292alteredBB
  %1205 = load i8*, i8** %21, align 8, !dbg !1374
  %1206 = load i64, i64* %28, align 8, !dbg !1375
  %1207 = add i64 %1206, 1, !dbg !1376
  %1208 = getelementptr inbounds i8, i8* %1205, i64 %1207, !dbg !1374
  %1209 = load i8, i8* %1208, align 1, !dbg !1374
  %1210 = sext i8 %1209 to i32, !dbg !1374
  %1211 = icmp sle i32 %1210, 57, !dbg !1377
  %1212 = load i32, i32* @x.17
  %1213 = load i32, i32* @y.18
  %1214 = sub i32 %1212, 1
  %1215 = mul i32 %1212, %1214
  %1216 = urem i32 %1215, 2
  %1217 = icmp eq i32 %1216, 0
  %1218 = icmp slt i32 %1213, 10
  %1219 = or i1 %1217, %1218
  br i1 %1219, label %originalBBpart2296, label %originalBB292alteredBB

originalBBpart2296:                               ; preds = %originalBB292
  br i1 %1211, label %1220, label %1389, !dbg !1378

1220:                                             ; preds = %originalBBpart2296
  %1221 = load i32, i32* @x.17
  %1222 = load i32, i32* @y.18
  %1223 = sub i32 %1221, 1
  %1224 = mul i32 %1221, %1223
  %1225 = urem i32 %1224, 2
  %1226 = icmp eq i32 %1225, 0
  %1227 = icmp slt i32 %1222, 10
  %1228 = or i1 %1226, %1227
  br i1 %1228, label %originalBB298, label %originalBB298alteredBB

originalBB298:                                    ; preds = %1220, %originalBB298alteredBB
  %1229 = load i32, i32* @x.17
  %1230 = load i32, i32* @y.18
  %1231 = sub i32 %1229, 1
  %1232 = mul i32 %1229, %1231
  %1233 = urem i32 %1232, 2
  %1234 = icmp eq i32 %1233, 0
  %1235 = icmp slt i32 %1230, 10
  %1236 = or i1 %1234, %1235
  br i1 %1236, label %originalBBpart2300, label %originalBB298alteredBB

originalBBpart2300:                               ; preds = %originalBB298
  br label %1237, !dbg !1379

1237:                                             ; preds = %originalBBpart2300
  %1238 = load i32, i32* @x.17
  %1239 = load i32, i32* @y.18
  %1240 = sub i32 %1238, 1
  %1241 = mul i32 %1238, %1240
  %1242 = urem i32 %1241, 2
  %1243 = icmp eq i32 %1242, 0
  %1244 = icmp slt i32 %1239, 10
  %1245 = or i1 %1243, %1244
  br i1 %1245, label %originalBB302, label %originalBB302alteredBB

originalBB302:                                    ; preds = %1237, %originalBB302alteredBB
  %1246 = load i64, i64* %29, align 8, !dbg !1381
  %1247 = load i64, i64* %20, align 8, !dbg !1381
  %1248 = icmp ult i64 %1246, %1247, !dbg !1381
  %1249 = load i32, i32* @x.17
  %1250 = load i32, i32* @y.18
  %1251 = sub i32 %1249, 1
  %1252 = mul i32 %1249, %1251
  %1253 = urem i32 %1252, 2
  %1254 = icmp eq i32 %1253, 0
  %1255 = icmp slt i32 %1250, 10
  %1256 = or i1 %1254, %1255
  br i1 %1256, label %originalBBpart2304, label %originalBB302alteredBB

originalBBpart2304:                               ; preds = %originalBB302
  br i1 %1248, label %1257, label %1277, !dbg !1384

1257:                                             ; preds = %originalBBpart2304
  %1258 = load i32, i32* @x.17
  %1259 = load i32, i32* @y.18
  %1260 = sub i32 %1258, 1
  %1261 = mul i32 %1258, %1260
  %1262 = urem i32 %1261, 2
  %1263 = icmp eq i32 %1262, 0
  %1264 = icmp slt i32 %1259, 10
  %1265 = or i1 %1263, %1264
  br i1 %1265, label %originalBB306, label %originalBB306alteredBB

originalBB306:                                    ; preds = %1257, %originalBB306alteredBB
  %1266 = load i8*, i8** %19, align 8, !dbg !1381
  %1267 = load i64, i64* %29, align 8, !dbg !1381
  %1268 = getelementptr inbounds i8, i8* %1266, i64 %1267, !dbg !1381
  store i8 48, i8* %1268, align 1, !dbg !1381
  %1269 = load i32, i32* @x.17
  %1270 = load i32, i32* @y.18
  %1271 = sub i32 %1269, 1
  %1272 = mul i32 %1269, %1271
  %1273 = urem i32 %1272, 2
  %1274 = icmp eq i32 %1273, 0
  %1275 = icmp slt i32 %1270, 10
  %1276 = or i1 %1274, %1275
  br i1 %1276, label %originalBBpart2308, label %originalBB306alteredBB

originalBBpart2308:                               ; preds = %originalBB306
  br label %1277, !dbg !1381

1277:                                             ; preds = %originalBBpart2308, %originalBBpart2304
  %1278 = load i32, i32* @x.17
  %1279 = load i32, i32* @y.18
  %1280 = sub i32 %1278, 1
  %1281 = mul i32 %1278, %1280
  %1282 = urem i32 %1281, 2
  %1283 = icmp eq i32 %1282, 0
  %1284 = icmp slt i32 %1279, 10
  %1285 = or i1 %1283, %1284
  br i1 %1285, label %originalBB310, label %originalBB310alteredBB

originalBB310:                                    ; preds = %1277, %originalBB310alteredBB
  %1286 = load i64, i64* %29, align 8, !dbg !1384
  %1287 = add i64 %1286, 1, !dbg !1384
  store i64 %1287, i64* %29, align 8, !dbg !1384
  %1288 = load i32, i32* @x.17
  %1289 = load i32, i32* @y.18
  %1290 = sub i32 %1288, 1
  %1291 = mul i32 %1288, %1290
  %1292 = urem i32 %1291, 2
  %1293 = icmp eq i32 %1292, 0
  %1294 = icmp slt i32 %1289, 10
  %1295 = or i1 %1293, %1294
  br i1 %1295, label %originalBBpart2316, label %originalBB310alteredBB

originalBBpart2316:                               ; preds = %originalBB310
  br label %1296, !dbg !1384

1296:                                             ; preds = %originalBBpart2316
  %1297 = load i32, i32* @x.17
  %1298 = load i32, i32* @y.18
  %1299 = sub i32 %1297, 1
  %1300 = mul i32 %1297, %1299
  %1301 = urem i32 %1300, 2
  %1302 = icmp eq i32 %1301, 0
  %1303 = icmp slt i32 %1298, 10
  %1304 = or i1 %1302, %1303
  br i1 %1304, label %originalBB318, label %originalBB318alteredBB

originalBB318:                                    ; preds = %1296, %originalBB318alteredBB
  %1305 = load i32, i32* @x.17
  %1306 = load i32, i32* @y.18
  %1307 = sub i32 %1305, 1
  %1308 = mul i32 %1305, %1307
  %1309 = urem i32 %1308, 2
  %1310 = icmp eq i32 %1309, 0
  %1311 = icmp slt i32 %1306, 10
  %1312 = or i1 %1310, %1311
  br i1 %1312, label %originalBBpart2320, label %originalBB318alteredBB

originalBBpart2320:                               ; preds = %originalBB318
  br label %1313, !dbg !1385

1313:                                             ; preds = %originalBBpart2320
  %1314 = load i32, i32* @x.17
  %1315 = load i32, i32* @y.18
  %1316 = sub i32 %1314, 1
  %1317 = mul i32 %1314, %1316
  %1318 = urem i32 %1317, 2
  %1319 = icmp eq i32 %1318, 0
  %1320 = icmp slt i32 %1315, 10
  %1321 = or i1 %1319, %1320
  br i1 %1321, label %originalBB322, label %originalBB322alteredBB

originalBB322:                                    ; preds = %1313, %originalBB322alteredBB
  %1322 = load i64, i64* %29, align 8, !dbg !1386
  %1323 = load i64, i64* %20, align 8, !dbg !1386
  %1324 = icmp ult i64 %1322, %1323, !dbg !1386
  %1325 = load i32, i32* @x.17
  %1326 = load i32, i32* @y.18
  %1327 = sub i32 %1325, 1
  %1328 = mul i32 %1325, %1327
  %1329 = urem i32 %1328, 2
  %1330 = icmp eq i32 %1329, 0
  %1331 = icmp slt i32 %1326, 10
  %1332 = or i1 %1330, %1331
  br i1 %1332, label %originalBBpart2324, label %originalBB322alteredBB

originalBBpart2324:                               ; preds = %originalBB322
  br i1 %1324, label %1333, label %1353, !dbg !1389

1333:                                             ; preds = %originalBBpart2324
  %1334 = load i32, i32* @x.17
  %1335 = load i32, i32* @y.18
  %1336 = sub i32 %1334, 1
  %1337 = mul i32 %1334, %1336
  %1338 = urem i32 %1337, 2
  %1339 = icmp eq i32 %1338, 0
  %1340 = icmp slt i32 %1335, 10
  %1341 = or i1 %1339, %1340
  br i1 %1341, label %originalBB326, label %originalBB326alteredBB

originalBB326:                                    ; preds = %1333, %originalBB326alteredBB
  %1342 = load i8*, i8** %19, align 8, !dbg !1386
  %1343 = load i64, i64* %29, align 8, !dbg !1386
  %1344 = getelementptr inbounds i8, i8* %1342, i64 %1343, !dbg !1386
  store i8 48, i8* %1344, align 1, !dbg !1386
  %1345 = load i32, i32* @x.17
  %1346 = load i32, i32* @y.18
  %1347 = sub i32 %1345, 1
  %1348 = mul i32 %1345, %1347
  %1349 = urem i32 %1348, 2
  %1350 = icmp eq i32 %1349, 0
  %1351 = icmp slt i32 %1346, 10
  %1352 = or i1 %1350, %1351
  br i1 %1352, label %originalBBpart2328, label %originalBB326alteredBB

originalBBpart2328:                               ; preds = %originalBB326
  br label %1353, !dbg !1386

1353:                                             ; preds = %originalBBpart2328, %originalBBpart2324
  %1354 = load i32, i32* @x.17
  %1355 = load i32, i32* @y.18
  %1356 = sub i32 %1354, 1
  %1357 = mul i32 %1354, %1356
  %1358 = urem i32 %1357, 2
  %1359 = icmp eq i32 %1358, 0
  %1360 = icmp slt i32 %1355, 10
  %1361 = or i1 %1359, %1360
  br i1 %1361, label %originalBB330, label %originalBB330alteredBB

originalBB330:                                    ; preds = %1353, %originalBB330alteredBB
  %1362 = load i64, i64* %29, align 8, !dbg !1389
  %1363 = add i64 %1362, 1, !dbg !1389
  store i64 %1363, i64* %29, align 8, !dbg !1389
  %1364 = load i32, i32* @x.17
  %1365 = load i32, i32* @y.18
  %1366 = sub i32 %1364, 1
  %1367 = mul i32 %1364, %1366
  %1368 = urem i32 %1367, 2
  %1369 = icmp eq i32 %1368, 0
  %1370 = icmp slt i32 %1365, 10
  %1371 = or i1 %1369, %1370
  br i1 %1371, label %originalBBpart2334, label %originalBB330alteredBB

originalBBpart2334:                               ; preds = %originalBB330
  br label %1372, !dbg !1389

1372:                                             ; preds = %originalBBpart2334
  %1373 = load i32, i32* @x.17
  %1374 = load i32, i32* @y.18
  %1375 = sub i32 %1373, 1
  %1376 = mul i32 %1373, %1375
  %1377 = urem i32 %1376, 2
  %1378 = icmp eq i32 %1377, 0
  %1379 = icmp slt i32 %1374, 10
  %1380 = or i1 %1378, %1379
  br i1 %1380, label %originalBB336, label %originalBB336alteredBB

originalBB336:                                    ; preds = %1372, %originalBB336alteredBB
  %1381 = load i32, i32* @x.17
  %1382 = load i32, i32* @y.18
  %1383 = sub i32 %1381, 1
  %1384 = mul i32 %1381, %1383
  %1385 = urem i32 %1384, 2
  %1386 = icmp eq i32 %1385, 0
  %1387 = icmp slt i32 %1382, 10
  %1388 = or i1 %1386, %1387
  br i1 %1388, label %originalBBpart2338, label %originalBB336alteredBB

originalBBpart2338:                               ; preds = %originalBB336
  br label %1389, !dbg !1390

1389:                                             ; preds = %originalBBpart2338, %originalBBpart2296, %originalBBpart2290, %originalBBpart2280, %originalBBpart2272
  %1390 = load i32, i32* @x.17
  %1391 = load i32, i32* @y.18
  %1392 = sub i32 %1390, 1
  %1393 = mul i32 %1390, %1392
  %1394 = urem i32 %1393, 2
  %1395 = icmp eq i32 %1394, 0
  %1396 = icmp slt i32 %1391, 10
  %1397 = or i1 %1395, %1396
  br i1 %1397, label %originalBB340, label %originalBB340alteredBB

originalBB340:                                    ; preds = %1389, %originalBB340alteredBB
  store i8 48, i8* %39, align 1, !dbg !1391
  %1398 = load i32, i32* @x.17
  %1399 = load i32, i32* @y.18
  %1400 = sub i32 %1398, 1
  %1401 = mul i32 %1398, %1400
  %1402 = urem i32 %1401, 2
  %1403 = icmp eq i32 %1402, 0
  %1404 = icmp slt i32 %1399, 10
  %1405 = or i1 %1403, %1404
  br i1 %1405, label %originalBBpart2342, label %originalBB340alteredBB

originalBBpart2342:                               ; preds = %originalBB340
  br label %1460, !dbg !1392

1406:                                             ; preds = %844
  %1407 = load i32, i32* @x.17
  %1408 = load i32, i32* @y.18
  %1409 = sub i32 %1407, 1
  %1410 = mul i32 %1407, %1409
  %1411 = urem i32 %1410, 2
  %1412 = icmp eq i32 %1411, 0
  %1413 = icmp slt i32 %1408, 10
  %1414 = or i1 %1412, %1413
  br i1 %1414, label %originalBB344, label %originalBB344alteredBB

originalBB344:                                    ; preds = %1406, %originalBB344alteredBB
  %1415 = load i32, i32* %24, align 4, !dbg !1393
  %1416 = and i32 %1415, 1, !dbg !1395
  %1417 = icmp ne i32 %1416, 0, !dbg !1395
  %1418 = load i32, i32* @x.17
  %1419 = load i32, i32* @y.18
  %1420 = sub i32 %1418, 1
  %1421 = mul i32 %1418, %1420
  %1422 = urem i32 %1421, 2
  %1423 = icmp eq i32 %1422, 0
  %1424 = icmp slt i32 %1419, 10
  %1425 = or i1 %1423, %1424
  br i1 %1425, label %originalBBpart2348, label %originalBB344alteredBB

originalBBpart2348:                               ; preds = %originalBB344
  br i1 %1417, label %1426, label %1443, !dbg !1396

1426:                                             ; preds = %originalBBpart2348
  %1427 = load i32, i32* @x.17
  %1428 = load i32, i32* @y.18
  %1429 = sub i32 %1427, 1
  %1430 = mul i32 %1427, %1429
  %1431 = urem i32 %1430, 2
  %1432 = icmp eq i32 %1431, 0
  %1433 = icmp slt i32 %1428, 10
  %1434 = or i1 %1432, %1433
  br i1 %1434, label %originalBB350, label %originalBB350alteredBB

originalBB350:                                    ; preds = %1426, %originalBB350alteredBB
  %1435 = load i32, i32* @x.17
  %1436 = load i32, i32* @y.18
  %1437 = sub i32 %1435, 1
  %1438 = mul i32 %1435, %1437
  %1439 = urem i32 %1438, 2
  %1440 = icmp eq i32 %1439, 0
  %1441 = icmp slt i32 %1436, 10
  %1442 = or i1 %1440, %1441
  br i1 %1442, label %originalBBpart2352, label %originalBB350alteredBB

originalBBpart2352:                               ; preds = %originalBB350
  br label %4745, !dbg !1397

1443:                                             ; preds = %originalBBpart2348
  %1444 = load i32, i32* @x.17
  %1445 = load i32, i32* @y.18
  %1446 = sub i32 %1444, 1
  %1447 = mul i32 %1444, %1446
  %1448 = urem i32 %1447, 2
  %1449 = icmp eq i32 %1448, 0
  %1450 = icmp slt i32 %1445, 10
  %1451 = or i1 %1449, %1450
  br i1 %1451, label %originalBB354, label %originalBB354alteredBB

originalBB354:                                    ; preds = %1443, %originalBB354alteredBB
  %1452 = load i32, i32* @x.17
  %1453 = load i32, i32* @y.18
  %1454 = sub i32 %1452, 1
  %1455 = mul i32 %1452, %1454
  %1456 = urem i32 %1455, 2
  %1457 = icmp eq i32 %1456, 0
  %1458 = icmp slt i32 %1453, 10
  %1459 = or i1 %1457, %1458
  br i1 %1459, label %originalBBpart2356, label %originalBB354alteredBB

originalBBpart2356:                               ; preds = %originalBB354
  br label %1460

1460:                                             ; preds = %originalBBpart2356, %originalBBpart2342
  %1461 = load i32, i32* @x.17
  %1462 = load i32, i32* @y.18
  %1463 = sub i32 %1461, 1
  %1464 = mul i32 %1461, %1463
  %1465 = urem i32 %1464, 2
  %1466 = icmp eq i32 %1465, 0
  %1467 = icmp slt i32 %1462, 10
  %1468 = or i1 %1466, %1467
  br i1 %1468, label %originalBB358, label %originalBB358alteredBB

originalBB358:                                    ; preds = %1460, %originalBB358alteredBB
  %1469 = load i32, i32* @x.17
  %1470 = load i32, i32* @y.18
  %1471 = sub i32 %1469, 1
  %1472 = mul i32 %1469, %1471
  %1473 = urem i32 %1472, 2
  %1474 = icmp eq i32 %1473, 0
  %1475 = icmp slt i32 %1470, 10
  %1476 = or i1 %1474, %1475
  br i1 %1476, label %originalBBpart2360, label %originalBB358alteredBB

originalBBpart2360:                               ; preds = %originalBB358
  br label %4041, !dbg !1398

1477:                                             ; preds = %originalBBpart2187
  %1478 = load i32, i32* @x.17
  %1479 = load i32, i32* @y.18
  %1480 = sub i32 %1478, 1
  %1481 = mul i32 %1478, %1480
  %1482 = urem i32 %1481, 2
  %1483 = icmp eq i32 %1482, 0
  %1484 = icmp slt i32 %1479, 10
  %1485 = or i1 %1483, %1484
  br i1 %1485, label %originalBB362, label %originalBB362alteredBB

originalBB362:                                    ; preds = %1477, %originalBB362alteredBB
  %1486 = load i32, i32* %23, align 4, !dbg !1399
  %1487 = load i32, i32* @x.17
  %1488 = load i32, i32* @y.18
  %1489 = sub i32 %1487, 1
  %1490 = mul i32 %1487, %1489
  %1491 = urem i32 %1490, 2
  %1492 = icmp eq i32 %1491, 0
  %1493 = icmp slt i32 %1488, 10
  %1494 = or i1 %1492, %1493
  br i1 %1494, label %originalBBpart2364, label %originalBB362alteredBB

originalBBpart2364:                               ; preds = %originalBB362
  switch i32 %1486, label %1955 [
    i32 2, label %1495
    i32 5, label %1548
  ], !dbg !1400

1495:                                             ; preds = %originalBBpart2364
  %1496 = load i32, i32* @x.17
  %1497 = load i32, i32* @y.18
  %1498 = sub i32 %1496, 1
  %1499 = mul i32 %1496, %1498
  %1500 = urem i32 %1499, 2
  %1501 = icmp eq i32 %1500, 0
  %1502 = icmp slt i32 %1497, 10
  %1503 = or i1 %1501, %1502
  br i1 %1503, label %originalBB366, label %originalBB366alteredBB

originalBB366:                                    ; preds = %1495, %originalBB366alteredBB
  %1504 = load i8, i8* %35, align 1, !dbg !1401
  %1505 = trunc i8 %1504 to i1, !dbg !1401
  %1506 = load i32, i32* @x.17
  %1507 = load i32, i32* @y.18
  %1508 = sub i32 %1506, 1
  %1509 = mul i32 %1506, %1508
  %1510 = urem i32 %1509, 2
  %1511 = icmp eq i32 %1510, 0
  %1512 = icmp slt i32 %1507, 10
  %1513 = or i1 %1511, %1512
  br i1 %1513, label %originalBBpart2368, label %originalBB366alteredBB

originalBBpart2368:                               ; preds = %originalBB366
  br i1 %1505, label %1514, label %1531, !dbg !1404

1514:                                             ; preds = %originalBBpart2368
  %1515 = load i32, i32* @x.17
  %1516 = load i32, i32* @y.18
  %1517 = sub i32 %1515, 1
  %1518 = mul i32 %1515, %1517
  %1519 = urem i32 %1518, 2
  %1520 = icmp eq i32 %1519, 0
  %1521 = icmp slt i32 %1516, 10
  %1522 = or i1 %1520, %1521
  br i1 %1522, label %originalBB370, label %originalBB370alteredBB

originalBB370:                                    ; preds = %1514, %originalBB370alteredBB
  %1523 = load i32, i32* @x.17
  %1524 = load i32, i32* @y.18
  %1525 = sub i32 %1523, 1
  %1526 = mul i32 %1523, %1525
  %1527 = urem i32 %1526, 2
  %1528 = icmp eq i32 %1527, 0
  %1529 = icmp slt i32 %1524, 10
  %1530 = or i1 %1528, %1529
  br i1 %1530, label %originalBBpart2372, label %originalBB370alteredBB

originalBBpart2372:                               ; preds = %originalBB370
  br label %5134, !dbg !1405

1531:                                             ; preds = %originalBBpart2368
  %1532 = load i32, i32* @x.17
  %1533 = load i32, i32* @y.18
  %1534 = sub i32 %1532, 1
  %1535 = mul i32 %1532, %1534
  %1536 = urem i32 %1535, 2
  %1537 = icmp eq i32 %1536, 0
  %1538 = icmp slt i32 %1533, 10
  %1539 = or i1 %1537, %1538
  br i1 %1539, label %originalBB374, label %originalBB374alteredBB

originalBB374:                                    ; preds = %1531, %originalBB374alteredBB
  %1540 = load i32, i32* @x.17
  %1541 = load i32, i32* @y.18
  %1542 = sub i32 %1540, 1
  %1543 = mul i32 %1540, %1542
  %1544 = urem i32 %1543, 2
  %1545 = icmp eq i32 %1544, 0
  %1546 = icmp slt i32 %1541, 10
  %1547 = or i1 %1545, %1546
  br i1 %1547, label %originalBBpart2376, label %originalBB374alteredBB

originalBBpart2376:                               ; preds = %originalBB374
  br label %1972, !dbg !1406

1548:                                             ; preds = %originalBBpart2364
  %1549 = load i32, i32* @x.17
  %1550 = load i32, i32* @y.18
  %1551 = sub i32 %1549, 1
  %1552 = mul i32 %1549, %1551
  %1553 = urem i32 %1552, 2
  %1554 = icmp eq i32 %1553, 0
  %1555 = icmp slt i32 %1550, 10
  %1556 = or i1 %1554, %1555
  br i1 %1556, label %originalBB378, label %originalBB378alteredBB

originalBB378:                                    ; preds = %1548, %originalBB378alteredBB
  %1557 = load i32, i32* %24, align 4, !dbg !1407
  %1558 = and i32 %1557, 4, !dbg !1409
  %1559 = icmp ne i32 %1558, 0, !dbg !1409
  %1560 = load i32, i32* @x.17
  %1561 = load i32, i32* @y.18
  %1562 = sub i32 %1560, 1
  %1563 = mul i32 %1560, %1562
  %1564 = urem i32 %1563, 2
  %1565 = icmp eq i32 %1564, 0
  %1566 = icmp slt i32 %1561, 10
  %1567 = or i1 %1565, %1566
  br i1 %1567, label %originalBBpart2382, label %originalBB378alteredBB

originalBBpart2382:                               ; preds = %originalBB378
  br i1 %1559, label %1568, label %1938, !dbg !1410

1568:                                             ; preds = %originalBBpart2382
  %1569 = load i32, i32* @x.17
  %1570 = load i32, i32* @y.18
  %1571 = sub i32 %1569, 1
  %1572 = mul i32 %1569, %1571
  %1573 = urem i32 %1572, 2
  %1574 = icmp eq i32 %1573, 0
  %1575 = icmp slt i32 %1570, 10
  %1576 = or i1 %1574, %1575
  br i1 %1576, label %originalBB384, label %originalBB384alteredBB

originalBB384:                                    ; preds = %1568, %originalBB384alteredBB
  %1577 = load i64, i64* %28, align 8, !dbg !1411
  %1578 = add i64 %1577, 2, !dbg !1412
  %1579 = load i64, i64* %22, align 8, !dbg !1413
  %1580 = icmp ult i64 %1578, %1579, !dbg !1414
  %1581 = load i32, i32* @x.17
  %1582 = load i32, i32* @y.18
  %1583 = sub i32 %1581, 1
  %1584 = mul i32 %1581, %1583
  %1585 = urem i32 %1584, 2
  %1586 = icmp eq i32 %1585, 0
  %1587 = icmp slt i32 %1582, 10
  %1588 = or i1 %1586, %1587
  br i1 %1588, label %originalBBpart2399, label %originalBB384alteredBB

originalBBpart2399:                               ; preds = %originalBB384
  br i1 %1580, label %1589, label %1938, !dbg !1415

1589:                                             ; preds = %originalBBpart2399
  %1590 = load i32, i32* @x.17
  %1591 = load i32, i32* @y.18
  %1592 = sub i32 %1590, 1
  %1593 = mul i32 %1590, %1592
  %1594 = urem i32 %1593, 2
  %1595 = icmp eq i32 %1594, 0
  %1596 = icmp slt i32 %1591, 10
  %1597 = or i1 %1595, %1596
  br i1 %1597, label %originalBB401, label %originalBB401alteredBB

originalBB401:                                    ; preds = %1589, %originalBB401alteredBB
  %1598 = load i8*, i8** %21, align 8, !dbg !1416
  %1599 = load i64, i64* %28, align 8, !dbg !1417
  %1600 = add i64 %1599, 1, !dbg !1418
  %1601 = getelementptr inbounds i8, i8* %1598, i64 %1600, !dbg !1416
  %1602 = load i8, i8* %1601, align 1, !dbg !1416
  %1603 = sext i8 %1602 to i32, !dbg !1416
  %1604 = icmp eq i32 %1603, 63, !dbg !1419
  %1605 = load i32, i32* @x.17
  %1606 = load i32, i32* @y.18
  %1607 = sub i32 %1605, 1
  %1608 = mul i32 %1605, %1607
  %1609 = urem i32 %1608, 2
  %1610 = icmp eq i32 %1609, 0
  %1611 = icmp slt i32 %1606, 10
  %1612 = or i1 %1610, %1611
  br i1 %1612, label %originalBBpart2408, label %originalBB401alteredBB

originalBBpart2408:                               ; preds = %originalBB401
  br i1 %1604, label %1613, label %1938, !dbg !1420

1613:                                             ; preds = %originalBBpart2408
  %1614 = load i8*, i8** %21, align 8, !dbg !1421
  %1615 = load i64, i64* %28, align 8, !dbg !1422
  %1616 = add i64 %1615, 2, !dbg !1423
  %1617 = getelementptr inbounds i8, i8* %1614, i64 %1616, !dbg !1421
  %1618 = load i8, i8* %1617, align 1, !dbg !1421
  %1619 = sext i8 %1618 to i32, !dbg !1421
  switch i32 %1619, label %1904 [
    i32 33, label %1620
    i32 39, label %1620
    i32 40, label %1620
    i32 41, label %1620
    i32 45, label %1620
    i32 47, label %1620
    i32 60, label %1620
    i32 61, label %1620
    i32 62, label %1620
  ], !dbg !1424

1620:                                             ; preds = %1613, %1613, %1613, %1613, %1613, %1613, %1613, %1613, %1613
  %1621 = load i32, i32* @x.17
  %1622 = load i32, i32* @y.18
  %1623 = sub i32 %1621, 1
  %1624 = mul i32 %1621, %1623
  %1625 = urem i32 %1624, 2
  %1626 = icmp eq i32 %1625, 0
  %1627 = icmp slt i32 %1622, 10
  %1628 = or i1 %1626, %1627
  br i1 %1628, label %originalBB410, label %originalBB410alteredBB

originalBB410:                                    ; preds = %1620, %originalBB410alteredBB
  %1629 = load i8, i8* %35, align 1, !dbg !1425
  %1630 = trunc i8 %1629 to i1, !dbg !1425
  %1631 = load i32, i32* @x.17
  %1632 = load i32, i32* @y.18
  %1633 = sub i32 %1631, 1
  %1634 = mul i32 %1631, %1633
  %1635 = urem i32 %1634, 2
  %1636 = icmp eq i32 %1635, 0
  %1637 = icmp slt i32 %1632, 10
  %1638 = or i1 %1636, %1637
  br i1 %1638, label %originalBBpart2412, label %originalBB410alteredBB

originalBBpart2412:                               ; preds = %originalBB410
  br i1 %1630, label %1639, label %1640, !dbg !1428

1639:                                             ; preds = %originalBBpart2412
  br label %5134, !dbg !1429

1640:                                             ; preds = %originalBBpart2412
  %1641 = load i32, i32* @x.17
  %1642 = load i32, i32* @y.18
  %1643 = sub i32 %1641, 1
  %1644 = mul i32 %1641, %1643
  %1645 = urem i32 %1644, 2
  %1646 = icmp eq i32 %1645, 0
  %1647 = icmp slt i32 %1642, 10
  %1648 = or i1 %1646, %1647
  br i1 %1648, label %originalBB414, label %originalBB414alteredBB

originalBB414:                                    ; preds = %1640, %originalBB414alteredBB
  %1649 = load i8*, i8** %21, align 8, !dbg !1430
  %1650 = load i64, i64* %28, align 8, !dbg !1431
  %1651 = add i64 %1650, 2, !dbg !1432
  %1652 = getelementptr inbounds i8, i8* %1649, i64 %1651, !dbg !1430
  %1653 = load i8, i8* %1652, align 1, !dbg !1430
  store i8 %1653, i8* %39, align 1, !dbg !1433
  %1654 = load i64, i64* %28, align 8, !dbg !1434
  %1655 = add i64 %1654, 2, !dbg !1434
  store i64 %1655, i64* %28, align 8, !dbg !1434
  %1656 = load i32, i32* @x.17
  %1657 = load i32, i32* @y.18
  %1658 = sub i32 %1656, 1
  %1659 = mul i32 %1656, %1658
  %1660 = urem i32 %1659, 2
  %1661 = icmp eq i32 %1660, 0
  %1662 = icmp slt i32 %1657, 10
  %1663 = or i1 %1661, %1662
  br i1 %1663, label %originalBBpart2424, label %originalBB414alteredBB

originalBBpart2424:                               ; preds = %originalBB414
  br label %1664, !dbg !1435

1664:                                             ; preds = %originalBBpart2424
  %1665 = load i32, i32* @x.17
  %1666 = load i32, i32* @y.18
  %1667 = sub i32 %1665, 1
  %1668 = mul i32 %1665, %1667
  %1669 = urem i32 %1668, 2
  %1670 = icmp eq i32 %1669, 0
  %1671 = icmp slt i32 %1666, 10
  %1672 = or i1 %1670, %1671
  br i1 %1672, label %originalBB426, label %originalBB426alteredBB

originalBB426:                                    ; preds = %1664, %originalBB426alteredBB
  %1673 = load i64, i64* %29, align 8, !dbg !1436
  %1674 = load i64, i64* %20, align 8, !dbg !1436
  %1675 = icmp ult i64 %1673, %1674, !dbg !1436
  %1676 = load i32, i32* @x.17
  %1677 = load i32, i32* @y.18
  %1678 = sub i32 %1676, 1
  %1679 = mul i32 %1676, %1678
  %1680 = urem i32 %1679, 2
  %1681 = icmp eq i32 %1680, 0
  %1682 = icmp slt i32 %1677, 10
  %1683 = or i1 %1681, %1682
  br i1 %1683, label %originalBBpart2428, label %originalBB426alteredBB

originalBBpart2428:                               ; preds = %originalBB426
  br i1 %1675, label %1684, label %1688, !dbg !1439

1684:                                             ; preds = %originalBBpart2428
  %1685 = load i8*, i8** %19, align 8, !dbg !1436
  %1686 = load i64, i64* %29, align 8, !dbg !1436
  %1687 = getelementptr inbounds i8, i8* %1685, i64 %1686, !dbg !1436
  store i8 63, i8* %1687, align 1, !dbg !1436
  br label %1688, !dbg !1436

1688:                                             ; preds = %1684, %originalBBpart2428
  %1689 = load i32, i32* @x.17
  %1690 = load i32, i32* @y.18
  %1691 = sub i32 %1689, 1
  %1692 = mul i32 %1689, %1691
  %1693 = urem i32 %1692, 2
  %1694 = icmp eq i32 %1693, 0
  %1695 = icmp slt i32 %1690, 10
  %1696 = or i1 %1694, %1695
  br i1 %1696, label %originalBB430, label %originalBB430alteredBB

originalBB430:                                    ; preds = %1688, %originalBB430alteredBB
  %1697 = load i64, i64* %29, align 8, !dbg !1439
  %1698 = add i64 %1697, 1, !dbg !1439
  store i64 %1698, i64* %29, align 8, !dbg !1439
  %1699 = load i32, i32* @x.17
  %1700 = load i32, i32* @y.18
  %1701 = sub i32 %1699, 1
  %1702 = mul i32 %1699, %1701
  %1703 = urem i32 %1702, 2
  %1704 = icmp eq i32 %1703, 0
  %1705 = icmp slt i32 %1700, 10
  %1706 = or i1 %1704, %1705
  br i1 %1706, label %originalBBpart2433, label %originalBB430alteredBB

originalBBpart2433:                               ; preds = %originalBB430
  br label %1707, !dbg !1439

1707:                                             ; preds = %originalBBpart2433
  %1708 = load i32, i32* @x.17
  %1709 = load i32, i32* @y.18
  %1710 = sub i32 %1708, 1
  %1711 = mul i32 %1708, %1710
  %1712 = urem i32 %1711, 2
  %1713 = icmp eq i32 %1712, 0
  %1714 = icmp slt i32 %1709, 10
  %1715 = or i1 %1713, %1714
  br i1 %1715, label %originalBB435, label %originalBB435alteredBB

originalBB435:                                    ; preds = %1707, %originalBB435alteredBB
  %1716 = load i32, i32* @x.17
  %1717 = load i32, i32* @y.18
  %1718 = sub i32 %1716, 1
  %1719 = mul i32 %1716, %1718
  %1720 = urem i32 %1719, 2
  %1721 = icmp eq i32 %1720, 0
  %1722 = icmp slt i32 %1717, 10
  %1723 = or i1 %1721, %1722
  br i1 %1723, label %originalBBpart2437, label %originalBB435alteredBB

originalBBpart2437:                               ; preds = %originalBB435
  br label %1724, !dbg !1440

1724:                                             ; preds = %originalBBpart2437
  %1725 = load i64, i64* %29, align 8, !dbg !1441
  %1726 = load i64, i64* %20, align 8, !dbg !1441
  %1727 = icmp ult i64 %1725, %1726, !dbg !1441
  br i1 %1727, label %1728, label %1748, !dbg !1444

1728:                                             ; preds = %1724
  %1729 = load i32, i32* @x.17
  %1730 = load i32, i32* @y.18
  %1731 = sub i32 %1729, 1
  %1732 = mul i32 %1729, %1731
  %1733 = urem i32 %1732, 2
  %1734 = icmp eq i32 %1733, 0
  %1735 = icmp slt i32 %1730, 10
  %1736 = or i1 %1734, %1735
  br i1 %1736, label %originalBB439, label %originalBB439alteredBB

originalBB439:                                    ; preds = %1728, %originalBB439alteredBB
  %1737 = load i8*, i8** %19, align 8, !dbg !1441
  %1738 = load i64, i64* %29, align 8, !dbg !1441
  %1739 = getelementptr inbounds i8, i8* %1737, i64 %1738, !dbg !1441
  store i8 34, i8* %1739, align 1, !dbg !1441
  %1740 = load i32, i32* @x.17
  %1741 = load i32, i32* @y.18
  %1742 = sub i32 %1740, 1
  %1743 = mul i32 %1740, %1742
  %1744 = urem i32 %1743, 2
  %1745 = icmp eq i32 %1744, 0
  %1746 = icmp slt i32 %1741, 10
  %1747 = or i1 %1745, %1746
  br i1 %1747, label %originalBBpart2441, label %originalBB439alteredBB

originalBBpart2441:                               ; preds = %originalBB439
  br label %1748, !dbg !1441

1748:                                             ; preds = %originalBBpart2441, %1724
  %1749 = load i32, i32* @x.17
  %1750 = load i32, i32* @y.18
  %1751 = sub i32 %1749, 1
  %1752 = mul i32 %1749, %1751
  %1753 = urem i32 %1752, 2
  %1754 = icmp eq i32 %1753, 0
  %1755 = icmp slt i32 %1750, 10
  %1756 = or i1 %1754, %1755
  br i1 %1756, label %originalBB443, label %originalBB443alteredBB

originalBB443:                                    ; preds = %1748, %originalBB443alteredBB
  %1757 = load i64, i64* %29, align 8, !dbg !1444
  %1758 = add i64 %1757, 1, !dbg !1444
  store i64 %1758, i64* %29, align 8, !dbg !1444
  %1759 = load i32, i32* @x.17
  %1760 = load i32, i32* @y.18
  %1761 = sub i32 %1759, 1
  %1762 = mul i32 %1759, %1761
  %1763 = urem i32 %1762, 2
  %1764 = icmp eq i32 %1763, 0
  %1765 = icmp slt i32 %1760, 10
  %1766 = or i1 %1764, %1765
  br i1 %1766, label %originalBBpart2452, label %originalBB443alteredBB

originalBBpart2452:                               ; preds = %originalBB443
  br label %1767, !dbg !1444

1767:                                             ; preds = %originalBBpart2452
  %1768 = load i32, i32* @x.17
  %1769 = load i32, i32* @y.18
  %1770 = sub i32 %1768, 1
  %1771 = mul i32 %1768, %1770
  %1772 = urem i32 %1771, 2
  %1773 = icmp eq i32 %1772, 0
  %1774 = icmp slt i32 %1769, 10
  %1775 = or i1 %1773, %1774
  br i1 %1775, label %originalBB454, label %originalBB454alteredBB

originalBB454:                                    ; preds = %1767, %originalBB454alteredBB
  %1776 = load i32, i32* @x.17
  %1777 = load i32, i32* @y.18
  %1778 = sub i32 %1776, 1
  %1779 = mul i32 %1776, %1778
  %1780 = urem i32 %1779, 2
  %1781 = icmp eq i32 %1780, 0
  %1782 = icmp slt i32 %1777, 10
  %1783 = or i1 %1781, %1782
  br i1 %1783, label %originalBBpart2456, label %originalBB454alteredBB

originalBBpart2456:                               ; preds = %originalBB454
  br label %1784, !dbg !1445

1784:                                             ; preds = %originalBBpart2456
  %1785 = load i64, i64* %29, align 8, !dbg !1446
  %1786 = load i64, i64* %20, align 8, !dbg !1446
  %1787 = icmp ult i64 %1785, %1786, !dbg !1446
  br i1 %1787, label %1788, label %1808, !dbg !1449

1788:                                             ; preds = %1784
  %1789 = load i32, i32* @x.17
  %1790 = load i32, i32* @y.18
  %1791 = sub i32 %1789, 1
  %1792 = mul i32 %1789, %1791
  %1793 = urem i32 %1792, 2
  %1794 = icmp eq i32 %1793, 0
  %1795 = icmp slt i32 %1790, 10
  %1796 = or i1 %1794, %1795
  br i1 %1796, label %originalBB458, label %originalBB458alteredBB

originalBB458:                                    ; preds = %1788, %originalBB458alteredBB
  %1797 = load i8*, i8** %19, align 8, !dbg !1446
  %1798 = load i64, i64* %29, align 8, !dbg !1446
  %1799 = getelementptr inbounds i8, i8* %1797, i64 %1798, !dbg !1446
  store i8 34, i8* %1799, align 1, !dbg !1446
  %1800 = load i32, i32* @x.17
  %1801 = load i32, i32* @y.18
  %1802 = sub i32 %1800, 1
  %1803 = mul i32 %1800, %1802
  %1804 = urem i32 %1803, 2
  %1805 = icmp eq i32 %1804, 0
  %1806 = icmp slt i32 %1801, 10
  %1807 = or i1 %1805, %1806
  br i1 %1807, label %originalBBpart2460, label %originalBB458alteredBB

originalBBpart2460:                               ; preds = %originalBB458
  br label %1808, !dbg !1446

1808:                                             ; preds = %originalBBpart2460, %1784
  %1809 = load i64, i64* %29, align 8, !dbg !1449
  %1810 = add i64 %1809, 1, !dbg !1449
  store i64 %1810, i64* %29, align 8, !dbg !1449
  br label %1811, !dbg !1449

1811:                                             ; preds = %1808
  %1812 = load i32, i32* @x.17
  %1813 = load i32, i32* @y.18
  %1814 = sub i32 %1812, 1
  %1815 = mul i32 %1812, %1814
  %1816 = urem i32 %1815, 2
  %1817 = icmp eq i32 %1816, 0
  %1818 = icmp slt i32 %1813, 10
  %1819 = or i1 %1817, %1818
  br i1 %1819, label %originalBB462, label %originalBB462alteredBB

originalBB462:                                    ; preds = %1811, %originalBB462alteredBB
  %1820 = load i32, i32* @x.17
  %1821 = load i32, i32* @y.18
  %1822 = sub i32 %1820, 1
  %1823 = mul i32 %1820, %1822
  %1824 = urem i32 %1823, 2
  %1825 = icmp eq i32 %1824, 0
  %1826 = icmp slt i32 %1821, 10
  %1827 = or i1 %1825, %1826
  br i1 %1827, label %originalBBpart2464, label %originalBB462alteredBB

originalBBpart2464:                               ; preds = %originalBB462
  br label %1828, !dbg !1450

1828:                                             ; preds = %originalBBpart2464
  %1829 = load i32, i32* @x.17
  %1830 = load i32, i32* @y.18
  %1831 = sub i32 %1829, 1
  %1832 = mul i32 %1829, %1831
  %1833 = urem i32 %1832, 2
  %1834 = icmp eq i32 %1833, 0
  %1835 = icmp slt i32 %1830, 10
  %1836 = or i1 %1834, %1835
  br i1 %1836, label %originalBB466, label %originalBB466alteredBB

originalBB466:                                    ; preds = %1828, %originalBB466alteredBB
  %1837 = load i64, i64* %29, align 8, !dbg !1451
  %1838 = load i64, i64* %20, align 8, !dbg !1451
  %1839 = icmp ult i64 %1837, %1838, !dbg !1451
  %1840 = load i32, i32* @x.17
  %1841 = load i32, i32* @y.18
  %1842 = sub i32 %1840, 1
  %1843 = mul i32 %1840, %1842
  %1844 = urem i32 %1843, 2
  %1845 = icmp eq i32 %1844, 0
  %1846 = icmp slt i32 %1841, 10
  %1847 = or i1 %1845, %1846
  br i1 %1847, label %originalBBpart2468, label %originalBB466alteredBB

originalBBpart2468:                               ; preds = %originalBB466
  br i1 %1839, label %1848, label %1868, !dbg !1454

1848:                                             ; preds = %originalBBpart2468
  %1849 = load i32, i32* @x.17
  %1850 = load i32, i32* @y.18
  %1851 = sub i32 %1849, 1
  %1852 = mul i32 %1849, %1851
  %1853 = urem i32 %1852, 2
  %1854 = icmp eq i32 %1853, 0
  %1855 = icmp slt i32 %1850, 10
  %1856 = or i1 %1854, %1855
  br i1 %1856, label %originalBB470, label %originalBB470alteredBB

originalBB470:                                    ; preds = %1848, %originalBB470alteredBB
  %1857 = load i8*, i8** %19, align 8, !dbg !1451
  %1858 = load i64, i64* %29, align 8, !dbg !1451
  %1859 = getelementptr inbounds i8, i8* %1857, i64 %1858, !dbg !1451
  store i8 63, i8* %1859, align 1, !dbg !1451
  %1860 = load i32, i32* @x.17
  %1861 = load i32, i32* @y.18
  %1862 = sub i32 %1860, 1
  %1863 = mul i32 %1860, %1862
  %1864 = urem i32 %1863, 2
  %1865 = icmp eq i32 %1864, 0
  %1866 = icmp slt i32 %1861, 10
  %1867 = or i1 %1865, %1866
  br i1 %1867, label %originalBBpart2472, label %originalBB470alteredBB

originalBBpart2472:                               ; preds = %originalBB470
  br label %1868, !dbg !1451

1868:                                             ; preds = %originalBBpart2472, %originalBBpart2468
  %1869 = load i32, i32* @x.17
  %1870 = load i32, i32* @y.18
  %1871 = sub i32 %1869, 1
  %1872 = mul i32 %1869, %1871
  %1873 = urem i32 %1872, 2
  %1874 = icmp eq i32 %1873, 0
  %1875 = icmp slt i32 %1870, 10
  %1876 = or i1 %1874, %1875
  br i1 %1876, label %originalBB474, label %originalBB474alteredBB

originalBB474:                                    ; preds = %1868, %originalBB474alteredBB
  %1877 = load i64, i64* %29, align 8, !dbg !1454
  %1878 = add i64 %1877, 1, !dbg !1454
  store i64 %1878, i64* %29, align 8, !dbg !1454
  %1879 = load i32, i32* @x.17
  %1880 = load i32, i32* @y.18
  %1881 = sub i32 %1879, 1
  %1882 = mul i32 %1879, %1881
  %1883 = urem i32 %1882, 2
  %1884 = icmp eq i32 %1883, 0
  %1885 = icmp slt i32 %1880, 10
  %1886 = or i1 %1884, %1885
  br i1 %1886, label %originalBBpart2487, label %originalBB474alteredBB

originalBBpart2487:                               ; preds = %originalBB474
  br label %1887, !dbg !1454

1887:                                             ; preds = %originalBBpart2487
  %1888 = load i32, i32* @x.17
  %1889 = load i32, i32* @y.18
  %1890 = sub i32 %1888, 1
  %1891 = mul i32 %1888, %1890
  %1892 = urem i32 %1891, 2
  %1893 = icmp eq i32 %1892, 0
  %1894 = icmp slt i32 %1889, 10
  %1895 = or i1 %1893, %1894
  br i1 %1895, label %originalBB489, label %originalBB489alteredBB

originalBB489:                                    ; preds = %1887, %originalBB489alteredBB
  %1896 = load i32, i32* @x.17
  %1897 = load i32, i32* @y.18
  %1898 = sub i32 %1896, 1
  %1899 = mul i32 %1896, %1898
  %1900 = urem i32 %1899, 2
  %1901 = icmp eq i32 %1900, 0
  %1902 = icmp slt i32 %1897, 10
  %1903 = or i1 %1901, %1902
  br i1 %1903, label %originalBBpart2491, label %originalBB489alteredBB

originalBBpart2491:                               ; preds = %originalBB489
  br label %1921, !dbg !1455

1904:                                             ; preds = %1613
  %1905 = load i32, i32* @x.17
  %1906 = load i32, i32* @y.18
  %1907 = sub i32 %1905, 1
  %1908 = mul i32 %1905, %1907
  %1909 = urem i32 %1908, 2
  %1910 = icmp eq i32 %1909, 0
  %1911 = icmp slt i32 %1906, 10
  %1912 = or i1 %1910, %1911
  br i1 %1912, label %originalBB493, label %originalBB493alteredBB

originalBB493:                                    ; preds = %1904, %originalBB493alteredBB
  %1913 = load i32, i32* @x.17
  %1914 = load i32, i32* @y.18
  %1915 = sub i32 %1913, 1
  %1916 = mul i32 %1913, %1915
  %1917 = urem i32 %1916, 2
  %1918 = icmp eq i32 %1917, 0
  %1919 = icmp slt i32 %1914, 10
  %1920 = or i1 %1918, %1919
  br i1 %1920, label %originalBBpart2495, label %originalBB493alteredBB

originalBBpart2495:                               ; preds = %originalBB493
  br label %1921, !dbg !1456

1921:                                             ; preds = %originalBBpart2495, %originalBBpart2491
  %1922 = load i32, i32* @x.17
  %1923 = load i32, i32* @y.18
  %1924 = sub i32 %1922, 1
  %1925 = mul i32 %1922, %1924
  %1926 = urem i32 %1925, 2
  %1927 = icmp eq i32 %1926, 0
  %1928 = icmp slt i32 %1923, 10
  %1929 = or i1 %1927, %1928
  br i1 %1929, label %originalBB497, label %originalBB497alteredBB

originalBB497:                                    ; preds = %1921, %originalBB497alteredBB
  %1930 = load i32, i32* @x.17
  %1931 = load i32, i32* @y.18
  %1932 = sub i32 %1930, 1
  %1933 = mul i32 %1930, %1932
  %1934 = urem i32 %1933, 2
  %1935 = icmp eq i32 %1934, 0
  %1936 = icmp slt i32 %1931, 10
  %1937 = or i1 %1935, %1936
  br i1 %1937, label %originalBBpart2499, label %originalBB497alteredBB

originalBBpart2499:                               ; preds = %originalBB497
  br label %1938, !dbg !1457

1938:                                             ; preds = %originalBBpart2499, %originalBBpart2408, %originalBBpart2399, %originalBBpart2382
  %1939 = load i32, i32* @x.17
  %1940 = load i32, i32* @y.18
  %1941 = sub i32 %1939, 1
  %1942 = mul i32 %1939, %1941
  %1943 = urem i32 %1942, 2
  %1944 = icmp eq i32 %1943, 0
  %1945 = icmp slt i32 %1940, 10
  %1946 = or i1 %1944, %1945
  br i1 %1946, label %originalBB501, label %originalBB501alteredBB

originalBB501:                                    ; preds = %1938, %originalBB501alteredBB
  %1947 = load i32, i32* @x.17
  %1948 = load i32, i32* @y.18
  %1949 = sub i32 %1947, 1
  %1950 = mul i32 %1947, %1949
  %1951 = urem i32 %1950, 2
  %1952 = icmp eq i32 %1951, 0
  %1953 = icmp slt i32 %1948, 10
  %1954 = or i1 %1952, %1953
  br i1 %1954, label %originalBBpart2503, label %originalBB501alteredBB

originalBBpart2503:                               ; preds = %originalBB501
  br label %1972, !dbg !1458

1955:                                             ; preds = %originalBBpart2364
  %1956 = load i32, i32* @x.17
  %1957 = load i32, i32* @y.18
  %1958 = sub i32 %1956, 1
  %1959 = mul i32 %1956, %1958
  %1960 = urem i32 %1959, 2
  %1961 = icmp eq i32 %1960, 0
  %1962 = icmp slt i32 %1957, 10
  %1963 = or i1 %1961, %1962
  br i1 %1963, label %originalBB505, label %originalBB505alteredBB

originalBB505:                                    ; preds = %1955, %originalBB505alteredBB
  %1964 = load i32, i32* @x.17
  %1965 = load i32, i32* @y.18
  %1966 = sub i32 %1964, 1
  %1967 = mul i32 %1964, %1966
  %1968 = urem i32 %1967, 2
  %1969 = icmp eq i32 %1968, 0
  %1970 = icmp slt i32 %1965, 10
  %1971 = or i1 %1969, %1970
  br i1 %1971, label %originalBBpart2507, label %originalBB505alteredBB

originalBBpart2507:                               ; preds = %originalBB505
  br label %1972, !dbg !1459

1972:                                             ; preds = %originalBBpart2507, %originalBBpart2503, %originalBBpart2376
  %1973 = load i32, i32* @x.17
  %1974 = load i32, i32* @y.18
  %1975 = sub i32 %1973, 1
  %1976 = mul i32 %1973, %1975
  %1977 = urem i32 %1976, 2
  %1978 = icmp eq i32 %1977, 0
  %1979 = icmp slt i32 %1974, 10
  %1980 = or i1 %1978, %1979
  br i1 %1980, label %originalBB509, label %originalBB509alteredBB

originalBB509:                                    ; preds = %1972, %originalBB509alteredBB
  %1981 = load i32, i32* @x.17
  %1982 = load i32, i32* @y.18
  %1983 = sub i32 %1981, 1
  %1984 = mul i32 %1981, %1983
  %1985 = urem i32 %1984, 2
  %1986 = icmp eq i32 %1985, 0
  %1987 = icmp slt i32 %1982, 10
  %1988 = or i1 %1986, %1987
  br i1 %1988, label %originalBBpart2511, label %originalBB509alteredBB

originalBBpart2511:                               ; preds = %originalBB509
  br label %4041, !dbg !1460

1989:                                             ; preds = %originalBBpart2187
  %1990 = load i32, i32* @x.17
  %1991 = load i32, i32* @y.18
  %1992 = sub i32 %1990, 1
  %1993 = mul i32 %1990, %1992
  %1994 = urem i32 %1993, 2
  %1995 = icmp eq i32 %1994, 0
  %1996 = icmp slt i32 %1991, 10
  %1997 = or i1 %1995, %1996
  br i1 %1997, label %originalBB513, label %originalBB513alteredBB

originalBB513:                                    ; preds = %1989, %originalBB513alteredBB
  store i8 97, i8* %40, align 1, !dbg !1461
  %1998 = load i32, i32* @x.17
  %1999 = load i32, i32* @y.18
  %2000 = sub i32 %1998, 1
  %2001 = mul i32 %1998, %2000
  %2002 = urem i32 %2001, 2
  %2003 = icmp eq i32 %2002, 0
  %2004 = icmp slt i32 %1999, 10
  %2005 = or i1 %2003, %2004
  br i1 %2005, label %originalBBpart2515, label %originalBB513alteredBB

originalBBpart2515:                               ; preds = %originalBB513
  br label %2216, !dbg !1462

2006:                                             ; preds = %originalBBpart2187
  store i8 98, i8* %40, align 1, !dbg !1463
  br label %2216, !dbg !1464

2007:                                             ; preds = %originalBBpart2187
  %2008 = load i32, i32* @x.17
  %2009 = load i32, i32* @y.18
  %2010 = sub i32 %2008, 1
  %2011 = mul i32 %2008, %2010
  %2012 = urem i32 %2011, 2
  %2013 = icmp eq i32 %2012, 0
  %2014 = icmp slt i32 %2009, 10
  %2015 = or i1 %2013, %2014
  br i1 %2015, label %originalBB517, label %originalBB517alteredBB

originalBB517:                                    ; preds = %2007, %originalBB517alteredBB
  store i8 102, i8* %40, align 1, !dbg !1465
  %2016 = load i32, i32* @x.17
  %2017 = load i32, i32* @y.18
  %2018 = sub i32 %2016, 1
  %2019 = mul i32 %2016, %2018
  %2020 = urem i32 %2019, 2
  %2021 = icmp eq i32 %2020, 0
  %2022 = icmp slt i32 %2017, 10
  %2023 = or i1 %2021, %2022
  br i1 %2023, label %originalBBpart2519, label %originalBB517alteredBB

originalBBpart2519:                               ; preds = %originalBB517
  br label %2216, !dbg !1466

2024:                                             ; preds = %originalBBpart2187
  %2025 = load i32, i32* @x.17
  %2026 = load i32, i32* @y.18
  %2027 = sub i32 %2025, 1
  %2028 = mul i32 %2025, %2027
  %2029 = urem i32 %2028, 2
  %2030 = icmp eq i32 %2029, 0
  %2031 = icmp slt i32 %2026, 10
  %2032 = or i1 %2030, %2031
  br i1 %2032, label %originalBB521, label %originalBB521alteredBB

originalBB521:                                    ; preds = %2024, %originalBB521alteredBB
  store i8 110, i8* %40, align 1, !dbg !1467
  %2033 = load i32, i32* @x.17
  %2034 = load i32, i32* @y.18
  %2035 = sub i32 %2033, 1
  %2036 = mul i32 %2033, %2035
  %2037 = urem i32 %2036, 2
  %2038 = icmp eq i32 %2037, 0
  %2039 = icmp slt i32 %2034, 10
  %2040 = or i1 %2038, %2039
  br i1 %2040, label %originalBBpart2523, label %originalBB521alteredBB

originalBBpart2523:                               ; preds = %originalBB521
  br label %2176, !dbg !1468

2041:                                             ; preds = %originalBBpart2187
  store i8 114, i8* %40, align 1, !dbg !1469
  br label %2176, !dbg !1470

2042:                                             ; preds = %originalBBpart2187
  store i8 116, i8* %40, align 1, !dbg !1471
  br label %2176, !dbg !1472

2043:                                             ; preds = %originalBBpart2187
  store i8 118, i8* %40, align 1, !dbg !1473
  br label %2216, !dbg !1474

2044:                                             ; preds = %originalBBpart2187
  %2045 = load i32, i32* @x.17
  %2046 = load i32, i32* @y.18
  %2047 = sub i32 %2045, 1
  %2048 = mul i32 %2045, %2047
  %2049 = urem i32 %2048, 2
  %2050 = icmp eq i32 %2049, 0
  %2051 = icmp slt i32 %2046, 10
  %2052 = or i1 %2050, %2051
  br i1 %2052, label %originalBB525, label %originalBB525alteredBB

originalBB525:                                    ; preds = %2044, %originalBB525alteredBB
  %2053 = load i8, i8* %39, align 1, !dbg !1475
  store i8 %2053, i8* %40, align 1, !dbg !1476
  %2054 = load i32, i32* %23, align 4, !dbg !1477
  %2055 = icmp eq i32 %2054, 2, !dbg !1479
  %2056 = load i32, i32* @x.17
  %2057 = load i32, i32* @y.18
  %2058 = sub i32 %2056, 1
  %2059 = mul i32 %2056, %2058
  %2060 = urem i32 %2059, 2
  %2061 = icmp eq i32 %2060, 0
  %2062 = icmp slt i32 %2057, 10
  %2063 = or i1 %2061, %2062
  br i1 %2063, label %originalBBpart2527, label %originalBB525alteredBB

originalBBpart2527:                               ; preds = %originalBB525
  br i1 %2055, label %2064, label %2101, !dbg !1480

2064:                                             ; preds = %originalBBpart2527
  %2065 = load i32, i32* @x.17
  %2066 = load i32, i32* @y.18
  %2067 = sub i32 %2065, 1
  %2068 = mul i32 %2065, %2067
  %2069 = urem i32 %2068, 2
  %2070 = icmp eq i32 %2069, 0
  %2071 = icmp slt i32 %2066, 10
  %2072 = or i1 %2070, %2071
  br i1 %2072, label %originalBB529, label %originalBB529alteredBB

originalBB529:                                    ; preds = %2064, %originalBB529alteredBB
  %2073 = load i8, i8* %35, align 1, !dbg !1481
  %2074 = trunc i8 %2073 to i1, !dbg !1481
  %2075 = load i32, i32* @x.17
  %2076 = load i32, i32* @y.18
  %2077 = sub i32 %2075, 1
  %2078 = mul i32 %2075, %2077
  %2079 = urem i32 %2078, 2
  %2080 = icmp eq i32 %2079, 0
  %2081 = icmp slt i32 %2076, 10
  %2082 = or i1 %2080, %2081
  br i1 %2082, label %originalBBpart2531, label %originalBB529alteredBB

originalBBpart2531:                               ; preds = %originalBB529
  br i1 %2074, label %2083, label %2100, !dbg !1484

2083:                                             ; preds = %originalBBpart2531
  %2084 = load i32, i32* @x.17
  %2085 = load i32, i32* @y.18
  %2086 = sub i32 %2084, 1
  %2087 = mul i32 %2084, %2086
  %2088 = urem i32 %2087, 2
  %2089 = icmp eq i32 %2088, 0
  %2090 = icmp slt i32 %2085, 10
  %2091 = or i1 %2089, %2090
  br i1 %2091, label %originalBB533, label %originalBB533alteredBB

originalBB533:                                    ; preds = %2083, %originalBB533alteredBB
  %2092 = load i32, i32* @x.17
  %2093 = load i32, i32* @y.18
  %2094 = sub i32 %2092, 1
  %2095 = mul i32 %2092, %2094
  %2096 = urem i32 %2095, 2
  %2097 = icmp eq i32 %2096, 0
  %2098 = icmp slt i32 %2093, 10
  %2099 = or i1 %2097, %2098
  br i1 %2099, label %originalBBpart2535, label %originalBB533alteredBB

originalBBpart2535:                               ; preds = %originalBB533
  br label %5134, !dbg !1485

2100:                                             ; preds = %originalBBpart2531
  br label %4454, !dbg !1486

2101:                                             ; preds = %originalBBpart2527
  %2102 = load i32, i32* @x.17
  %2103 = load i32, i32* @y.18
  %2104 = sub i32 %2102, 1
  %2105 = mul i32 %2102, %2104
  %2106 = urem i32 %2105, 2
  %2107 = icmp eq i32 %2106, 0
  %2108 = icmp slt i32 %2103, 10
  %2109 = or i1 %2107, %2108
  br i1 %2109, label %originalBB537, label %originalBB537alteredBB

originalBB537:                                    ; preds = %2101, %originalBB537alteredBB
  %2110 = load i8, i8* %33, align 1, !dbg !1487
  %2111 = trunc i8 %2110 to i1, !dbg !1487
  %2112 = load i32, i32* @x.17
  %2113 = load i32, i32* @y.18
  %2114 = sub i32 %2112, 1
  %2115 = mul i32 %2112, %2114
  %2116 = urem i32 %2115, 2
  %2117 = icmp eq i32 %2116, 0
  %2118 = icmp slt i32 %2113, 10
  %2119 = or i1 %2117, %2118
  br i1 %2119, label %originalBBpart2539, label %originalBB537alteredBB

originalBBpart2539:                               ; preds = %originalBB537
  br i1 %2111, label %2120, label %2159, !dbg !1489

2120:                                             ; preds = %originalBBpart2539
  %2121 = load i32, i32* @x.17
  %2122 = load i32, i32* @y.18
  %2123 = sub i32 %2121, 1
  %2124 = mul i32 %2121, %2123
  %2125 = urem i32 %2124, 2
  %2126 = icmp eq i32 %2125, 0
  %2127 = icmp slt i32 %2122, 10
  %2128 = or i1 %2126, %2127
  br i1 %2128, label %originalBB541, label %originalBB541alteredBB

originalBB541:                                    ; preds = %2120, %originalBB541alteredBB
  %2129 = load i8, i8* %35, align 1, !dbg !1490
  %2130 = trunc i8 %2129 to i1, !dbg !1490
  %2131 = load i32, i32* @x.17
  %2132 = load i32, i32* @y.18
  %2133 = sub i32 %2131, 1
  %2134 = mul i32 %2131, %2133
  %2135 = urem i32 %2134, 2
  %2136 = icmp eq i32 %2135, 0
  %2137 = icmp slt i32 %2132, 10
  %2138 = or i1 %2136, %2137
  br i1 %2138, label %originalBBpart2543, label %originalBB541alteredBB

originalBBpart2543:                               ; preds = %originalBB541
  br i1 %2130, label %2139, label %2159, !dbg !1491

2139:                                             ; preds = %originalBBpart2543
  %2140 = load i64, i64* %32, align 8, !dbg !1492
  %2141 = icmp ne i64 %2140, 0, !dbg !1492
  br i1 %2141, label %2142, label %2159, !dbg !1493

2142:                                             ; preds = %2139
  %2143 = load i32, i32* @x.17
  %2144 = load i32, i32* @y.18
  %2145 = sub i32 %2143, 1
  %2146 = mul i32 %2143, %2145
  %2147 = urem i32 %2146, 2
  %2148 = icmp eq i32 %2147, 0
  %2149 = icmp slt i32 %2144, 10
  %2150 = or i1 %2148, %2149
  br i1 %2150, label %originalBB545, label %originalBB545alteredBB

originalBB545:                                    ; preds = %2142, %originalBB545alteredBB
  %2151 = load i32, i32* @x.17
  %2152 = load i32, i32* @y.18
  %2153 = sub i32 %2151, 1
  %2154 = mul i32 %2151, %2153
  %2155 = urem i32 %2154, 2
  %2156 = icmp eq i32 %2155, 0
  %2157 = icmp slt i32 %2152, 10
  %2158 = or i1 %2156, %2157
  br i1 %2158, label %originalBBpart2547, label %originalBB545alteredBB

originalBBpart2547:                               ; preds = %originalBB545
  br label %4454, !dbg !1494

2159:                                             ; preds = %2139, %originalBBpart2543, %originalBBpart2539
  %2160 = load i32, i32* @x.17
  %2161 = load i32, i32* @y.18
  %2162 = sub i32 %2160, 1
  %2163 = mul i32 %2160, %2162
  %2164 = urem i32 %2163, 2
  %2165 = icmp eq i32 %2164, 0
  %2166 = icmp slt i32 %2161, 10
  %2167 = or i1 %2165, %2166
  br i1 %2167, label %originalBB549, label %originalBB549alteredBB

originalBB549:                                    ; preds = %2159, %originalBB549alteredBB
  %2168 = load i32, i32* @x.17
  %2169 = load i32, i32* @y.18
  %2170 = sub i32 %2168, 1
  %2171 = mul i32 %2168, %2170
  %2172 = urem i32 %2171, 2
  %2173 = icmp eq i32 %2172, 0
  %2174 = icmp slt i32 %2169, 10
  %2175 = or i1 %2173, %2174
  br i1 %2175, label %originalBBpart2551, label %originalBB549alteredBB

originalBBpart2551:                               ; preds = %originalBB549
  br label %2176, !dbg !1492

2176:                                             ; preds = %originalBBpart2551, %2042, %2041, %originalBBpart2523
  call void @llvm.dbg.label(metadata !1495), !dbg !1496
  %2177 = load i32, i32* @x.17
  %2178 = load i32, i32* @y.18
  %2179 = sub i32 %2177, 1
  %2180 = mul i32 %2177, %2179
  %2181 = urem i32 %2180, 2
  %2182 = icmp eq i32 %2181, 0
  %2183 = icmp slt i32 %2178, 10
  %2184 = or i1 %2182, %2183
  br i1 %2184, label %originalBB553, label %originalBB553alteredBB

originalBB553:                                    ; preds = %2176, %originalBB553alteredBB
  %2185 = load i32, i32* %23, align 4, !dbg !1497
  %2186 = icmp eq i32 %2185, 2, !dbg !1499
  %2187 = load i32, i32* @x.17
  %2188 = load i32, i32* @y.18
  %2189 = sub i32 %2187, 1
  %2190 = mul i32 %2187, %2189
  %2191 = urem i32 %2190, 2
  %2192 = icmp eq i32 %2191, 0
  %2193 = icmp slt i32 %2188, 10
  %2194 = or i1 %2192, %2193
  br i1 %2194, label %originalBBpart2555, label %originalBB553alteredBB

originalBBpart2555:                               ; preds = %originalBB553
  br i1 %2186, label %2195, label %2215, !dbg !1500

2195:                                             ; preds = %originalBBpart2555
  %2196 = load i32, i32* @x.17
  %2197 = load i32, i32* @y.18
  %2198 = sub i32 %2196, 1
  %2199 = mul i32 %2196, %2198
  %2200 = urem i32 %2199, 2
  %2201 = icmp eq i32 %2200, 0
  %2202 = icmp slt i32 %2197, 10
  %2203 = or i1 %2201, %2202
  br i1 %2203, label %originalBB557, label %originalBB557alteredBB

originalBB557:                                    ; preds = %2195, %originalBB557alteredBB
  %2204 = load i8, i8* %35, align 1, !dbg !1501
  %2205 = trunc i8 %2204 to i1, !dbg !1501
  %2206 = load i32, i32* @x.17
  %2207 = load i32, i32* @y.18
  %2208 = sub i32 %2206, 1
  %2209 = mul i32 %2206, %2208
  %2210 = urem i32 %2209, 2
  %2211 = icmp eq i32 %2210, 0
  %2212 = icmp slt i32 %2207, 10
  %2213 = or i1 %2211, %2212
  br i1 %2213, label %originalBBpart2559, label %originalBB557alteredBB

originalBBpart2559:                               ; preds = %originalBB557
  br i1 %2205, label %2214, label %2215, !dbg !1502

2214:                                             ; preds = %originalBBpart2559
  br label %5134, !dbg !1503

2215:                                             ; preds = %originalBBpart2559, %originalBBpart2555
  br label %2216, !dbg !1501

2216:                                             ; preds = %2215, %2043, %originalBBpart2519, %2006, %originalBBpart2515
  call void @llvm.dbg.label(metadata !1504), !dbg !1505
  %2217 = load i32, i32* @x.17
  %2218 = load i32, i32* @y.18
  %2219 = sub i32 %2217, 1
  %2220 = mul i32 %2217, %2219
  %2221 = urem i32 %2220, 2
  %2222 = icmp eq i32 %2221, 0
  %2223 = icmp slt i32 %2218, 10
  %2224 = or i1 %2222, %2223
  br i1 %2224, label %originalBB561, label %originalBB561alteredBB

originalBB561:                                    ; preds = %2216, %originalBB561alteredBB
  %2225 = load i8, i8* %33, align 1, !dbg !1506
  %2226 = trunc i8 %2225 to i1, !dbg !1506
  %2227 = load i32, i32* @x.17
  %2228 = load i32, i32* @y.18
  %2229 = sub i32 %2227, 1
  %2230 = mul i32 %2227, %2229
  %2231 = urem i32 %2230, 2
  %2232 = icmp eq i32 %2231, 0
  %2233 = icmp slt i32 %2228, 10
  %2234 = or i1 %2232, %2233
  br i1 %2234, label %originalBBpart2563, label %originalBB561alteredBB

originalBBpart2563:                               ; preds = %originalBB561
  br i1 %2226, label %2235, label %2237, !dbg !1508

2235:                                             ; preds = %originalBBpart2563
  %2236 = load i8, i8* %40, align 1, !dbg !1509
  store i8 %2236, i8* %39, align 1, !dbg !1511
  br label %4136, !dbg !1512

2237:                                             ; preds = %originalBBpart2563
  %2238 = load i32, i32* @x.17
  %2239 = load i32, i32* @y.18
  %2240 = sub i32 %2238, 1
  %2241 = mul i32 %2238, %2240
  %2242 = urem i32 %2241, 2
  %2243 = icmp eq i32 %2242, 0
  %2244 = icmp slt i32 %2239, 10
  %2245 = or i1 %2243, %2244
  br i1 %2245, label %originalBB565, label %originalBB565alteredBB

originalBB565:                                    ; preds = %2237, %originalBB565alteredBB
  %2246 = load i32, i32* @x.17
  %2247 = load i32, i32* @y.18
  %2248 = sub i32 %2246, 1
  %2249 = mul i32 %2246, %2248
  %2250 = urem i32 %2249, 2
  %2251 = icmp eq i32 %2250, 0
  %2252 = icmp slt i32 %2247, 10
  %2253 = or i1 %2251, %2252
  br i1 %2253, label %originalBBpart2567, label %originalBB565alteredBB

originalBBpart2567:                               ; preds = %originalBB565
  br label %4041, !dbg !1513

2254:                                             ; preds = %originalBBpart2187, %originalBBpart2187
  %2255 = load i32, i32* @x.17
  %2256 = load i32, i32* @y.18
  %2257 = sub i32 %2255, 1
  %2258 = mul i32 %2255, %2257
  %2259 = urem i32 %2258, 2
  %2260 = icmp eq i32 %2259, 0
  %2261 = icmp slt i32 %2256, 10
  %2262 = or i1 %2260, %2261
  br i1 %2262, label %originalBB569, label %originalBB569alteredBB

originalBB569:                                    ; preds = %2254, %originalBB569alteredBB
  %2263 = load i64, i64* %22, align 8, !dbg !1514
  %2264 = icmp eq i64 %2263, -1, !dbg !1516
  %2265 = load i32, i32* @x.17
  %2266 = load i32, i32* @y.18
  %2267 = sub i32 %2265, 1
  %2268 = mul i32 %2265, %2267
  %2269 = urem i32 %2268, 2
  %2270 = icmp eq i32 %2269, 0
  %2271 = icmp slt i32 %2266, 10
  %2272 = or i1 %2270, %2271
  br i1 %2272, label %originalBBpart2571, label %originalBB569alteredBB

originalBBpart2571:                               ; preds = %originalBB569
  br i1 %2264, label %2273, label %2279, !dbg !1517

2273:                                             ; preds = %originalBBpart2571
  %2274 = load i8*, i8** %21, align 8, !dbg !1518
  %2275 = getelementptr inbounds i8, i8* %2274, i64 1, !dbg !1518
  %2276 = load i8, i8* %2275, align 1, !dbg !1518
  %2277 = sext i8 %2276 to i32, !dbg !1518
  %2278 = icmp eq i32 %2277, 0, !dbg !1519
  br i1 %2278, label %2283, label %2282, !dbg !1514

2279:                                             ; preds = %originalBBpart2571
  %2280 = load i64, i64* %22, align 8, !dbg !1520
  %2281 = icmp eq i64 %2280, 1, !dbg !1521
  br i1 %2281, label %2283, label %2282, !dbg !1517

2282:                                             ; preds = %2279, %2273
  br label %4041, !dbg !1522

2283:                                             ; preds = %2279, %2273
  br label %2284, !dbg !1523

2284:                                             ; preds = %2283, %originalBBpart2187, %originalBBpart2187
  %2285 = load i32, i32* @x.17
  %2286 = load i32, i32* @y.18
  %2287 = sub i32 %2285, 1
  %2288 = mul i32 %2285, %2287
  %2289 = urem i32 %2288, 2
  %2290 = icmp eq i32 %2289, 0
  %2291 = icmp slt i32 %2286, 10
  %2292 = or i1 %2290, %2291
  br i1 %2292, label %originalBB573, label %originalBB573alteredBB

originalBB573:                                    ; preds = %2284, %originalBB573alteredBB
  %2293 = load i64, i64* %28, align 8, !dbg !1524
  %2294 = icmp ne i64 %2293, 0, !dbg !1526
  %2295 = load i32, i32* @x.17
  %2296 = load i32, i32* @y.18
  %2297 = sub i32 %2295, 1
  %2298 = mul i32 %2295, %2297
  %2299 = urem i32 %2298, 2
  %2300 = icmp eq i32 %2299, 0
  %2301 = icmp slt i32 %2296, 10
  %2302 = or i1 %2300, %2301
  br i1 %2302, label %originalBBpart2575, label %originalBB573alteredBB

originalBBpart2575:                               ; preds = %originalBB573
  br i1 %2294, label %2303, label %2320, !dbg !1527

2303:                                             ; preds = %originalBBpart2575
  %2304 = load i32, i32* @x.17
  %2305 = load i32, i32* @y.18
  %2306 = sub i32 %2304, 1
  %2307 = mul i32 %2304, %2306
  %2308 = urem i32 %2307, 2
  %2309 = icmp eq i32 %2308, 0
  %2310 = icmp slt i32 %2305, 10
  %2311 = or i1 %2309, %2310
  br i1 %2311, label %originalBB577, label %originalBB577alteredBB

originalBB577:                                    ; preds = %2303, %originalBB577alteredBB
  %2312 = load i32, i32* @x.17
  %2313 = load i32, i32* @y.18
  %2314 = sub i32 %2312, 1
  %2315 = mul i32 %2312, %2314
  %2316 = urem i32 %2315, 2
  %2317 = icmp eq i32 %2316, 0
  %2318 = icmp slt i32 %2313, 10
  %2319 = or i1 %2317, %2318
  br i1 %2319, label %originalBBpart2579, label %originalBB577alteredBB

originalBBpart2579:                               ; preds = %originalBB577
  br label %4041, !dbg !1528

2320:                                             ; preds = %originalBBpart2575
  %2321 = load i32, i32* @x.17
  %2322 = load i32, i32* @y.18
  %2323 = sub i32 %2321, 1
  %2324 = mul i32 %2321, %2323
  %2325 = urem i32 %2324, 2
  %2326 = icmp eq i32 %2325, 0
  %2327 = icmp slt i32 %2322, 10
  %2328 = or i1 %2326, %2327
  br i1 %2328, label %originalBB581, label %originalBB581alteredBB

originalBB581:                                    ; preds = %2320, %originalBB581alteredBB
  %2329 = load i32, i32* @x.17
  %2330 = load i32, i32* @y.18
  %2331 = sub i32 %2329, 1
  %2332 = mul i32 %2329, %2331
  %2333 = urem i32 %2332, 2
  %2334 = icmp eq i32 %2333, 0
  %2335 = icmp slt i32 %2330, 10
  %2336 = or i1 %2334, %2335
  br i1 %2336, label %originalBBpart2583, label %originalBB581alteredBB

originalBBpart2583:                               ; preds = %originalBB581
  br label %2337, !dbg !1529

2337:                                             ; preds = %originalBBpart2583, %originalBBpart2187
  %2338 = load i32, i32* @x.17
  %2339 = load i32, i32* @y.18
  %2340 = sub i32 %2338, 1
  %2341 = mul i32 %2338, %2340
  %2342 = urem i32 %2341, 2
  %2343 = icmp eq i32 %2342, 0
  %2344 = icmp slt i32 %2339, 10
  %2345 = or i1 %2343, %2344
  br i1 %2345, label %originalBB585, label %originalBB585alteredBB

originalBB585:                                    ; preds = %2337, %originalBB585alteredBB
  store i8 1, i8* %43, align 1, !dbg !1530
  %2346 = load i32, i32* @x.17
  %2347 = load i32, i32* @y.18
  %2348 = sub i32 %2346, 1
  %2349 = mul i32 %2346, %2348
  %2350 = urem i32 %2349, 2
  %2351 = icmp eq i32 %2350, 0
  %2352 = icmp slt i32 %2347, 10
  %2353 = or i1 %2351, %2352
  br i1 %2353, label %originalBBpart2587, label %originalBB585alteredBB

originalBBpart2587:                               ; preds = %originalBB585
  br label %2354, !dbg !1531

2354:                                             ; preds = %originalBBpart2587, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187
  %2355 = load i32, i32* @x.17
  %2356 = load i32, i32* @y.18
  %2357 = sub i32 %2355, 1
  %2358 = mul i32 %2355, %2357
  %2359 = urem i32 %2358, 2
  %2360 = icmp eq i32 %2359, 0
  %2361 = icmp slt i32 %2356, 10
  %2362 = or i1 %2360, %2361
  br i1 %2362, label %originalBB589, label %originalBB589alteredBB

originalBB589:                                    ; preds = %2354, %originalBB589alteredBB
  %2363 = load i32, i32* %23, align 4, !dbg !1532
  %2364 = icmp eq i32 %2363, 2, !dbg !1534
  %2365 = load i32, i32* @x.17
  %2366 = load i32, i32* @y.18
  %2367 = sub i32 %2365, 1
  %2368 = mul i32 %2365, %2367
  %2369 = urem i32 %2368, 2
  %2370 = icmp eq i32 %2369, 0
  %2371 = icmp slt i32 %2366, 10
  %2372 = or i1 %2370, %2371
  br i1 %2372, label %originalBBpart2591, label %originalBB589alteredBB

originalBBpart2591:                               ; preds = %originalBB589
  br i1 %2364, label %2373, label %2409, !dbg !1535

2373:                                             ; preds = %originalBBpart2591
  %2374 = load i32, i32* @x.17
  %2375 = load i32, i32* @y.18
  %2376 = sub i32 %2374, 1
  %2377 = mul i32 %2374, %2376
  %2378 = urem i32 %2377, 2
  %2379 = icmp eq i32 %2378, 0
  %2380 = icmp slt i32 %2375, 10
  %2381 = or i1 %2379, %2380
  br i1 %2381, label %originalBB593, label %originalBB593alteredBB

originalBB593:                                    ; preds = %2373, %originalBB593alteredBB
  %2382 = load i8, i8* %35, align 1, !dbg !1536
  %2383 = trunc i8 %2382 to i1, !dbg !1536
  %2384 = load i32, i32* @x.17
  %2385 = load i32, i32* @y.18
  %2386 = sub i32 %2384, 1
  %2387 = mul i32 %2384, %2386
  %2388 = urem i32 %2387, 2
  %2389 = icmp eq i32 %2388, 0
  %2390 = icmp slt i32 %2385, 10
  %2391 = or i1 %2389, %2390
  br i1 %2391, label %originalBBpart2595, label %originalBB593alteredBB

originalBBpart2595:                               ; preds = %originalBB593
  br i1 %2383, label %2392, label %2409, !dbg !1537

2392:                                             ; preds = %originalBBpart2595
  %2393 = load i32, i32* @x.17
  %2394 = load i32, i32* @y.18
  %2395 = sub i32 %2393, 1
  %2396 = mul i32 %2393, %2395
  %2397 = urem i32 %2396, 2
  %2398 = icmp eq i32 %2397, 0
  %2399 = icmp slt i32 %2394, 10
  %2400 = or i1 %2398, %2399
  br i1 %2400, label %originalBB597, label %originalBB597alteredBB

originalBB597:                                    ; preds = %2392, %originalBB597alteredBB
  %2401 = load i32, i32* @x.17
  %2402 = load i32, i32* @y.18
  %2403 = sub i32 %2401, 1
  %2404 = mul i32 %2401, %2403
  %2405 = urem i32 %2404, 2
  %2406 = icmp eq i32 %2405, 0
  %2407 = icmp slt i32 %2402, 10
  %2408 = or i1 %2406, %2407
  br i1 %2408, label %originalBBpart2599, label %originalBB597alteredBB

originalBBpart2599:                               ; preds = %originalBB597
  br label %5134, !dbg !1538

2409:                                             ; preds = %originalBBpart2595, %originalBBpart2591
  br label %4041, !dbg !1539

2410:                                             ; preds = %originalBBpart2187
  store i8 1, i8* %37, align 1, !dbg !1540
  store i8 1, i8* %43, align 1, !dbg !1541
  %2411 = load i32, i32* %23, align 4, !dbg !1542
  %2412 = icmp eq i32 %2411, 2, !dbg !1544
  br i1 %2412, label %2413, label %2606, !dbg !1545

2413:                                             ; preds = %2410
  %2414 = load i8, i8* %35, align 1, !dbg !1546
  %2415 = trunc i8 %2414 to i1, !dbg !1546
  br i1 %2415, label %2416, label %2433, !dbg !1549

2416:                                             ; preds = %2413
  %2417 = load i32, i32* @x.17
  %2418 = load i32, i32* @y.18
  %2419 = sub i32 %2417, 1
  %2420 = mul i32 %2417, %2419
  %2421 = urem i32 %2420, 2
  %2422 = icmp eq i32 %2421, 0
  %2423 = icmp slt i32 %2418, 10
  %2424 = or i1 %2422, %2423
  br i1 %2424, label %originalBB601, label %originalBB601alteredBB

originalBB601:                                    ; preds = %2416, %originalBB601alteredBB
  %2425 = load i32, i32* @x.17
  %2426 = load i32, i32* @y.18
  %2427 = sub i32 %2425, 1
  %2428 = mul i32 %2425, %2427
  %2429 = urem i32 %2428, 2
  %2430 = icmp eq i32 %2429, 0
  %2431 = icmp slt i32 %2426, 10
  %2432 = or i1 %2430, %2431
  br i1 %2432, label %originalBBpart2603, label %originalBB601alteredBB

originalBBpart2603:                               ; preds = %originalBB601
  br label %5134, !dbg !1550

2433:                                             ; preds = %2413
  %2434 = load i64, i64* %20, align 8, !dbg !1551
  %2435 = icmp ne i64 %2434, 0, !dbg !1551
  br i1 %2435, label %2436, label %2457, !dbg !1553

2436:                                             ; preds = %2433
  %2437 = load i64, i64* %30, align 8, !dbg !1554
  %2438 = icmp ne i64 %2437, 0, !dbg !1554
  br i1 %2438, label %2457, label %2439, !dbg !1555

2439:                                             ; preds = %2436
  %2440 = load i32, i32* @x.17
  %2441 = load i32, i32* @y.18
  %2442 = sub i32 %2440, 1
  %2443 = mul i32 %2440, %2442
  %2444 = urem i32 %2443, 2
  %2445 = icmp eq i32 %2444, 0
  %2446 = icmp slt i32 %2441, 10
  %2447 = or i1 %2445, %2446
  br i1 %2447, label %originalBB605, label %originalBB605alteredBB

originalBB605:                                    ; preds = %2439, %originalBB605alteredBB
  %2448 = load i64, i64* %20, align 8, !dbg !1556
  store i64 %2448, i64* %30, align 8, !dbg !1558
  store i64 0, i64* %20, align 8, !dbg !1559
  %2449 = load i32, i32* @x.17
  %2450 = load i32, i32* @y.18
  %2451 = sub i32 %2449, 1
  %2452 = mul i32 %2449, %2451
  %2453 = urem i32 %2452, 2
  %2454 = icmp eq i32 %2453, 0
  %2455 = icmp slt i32 %2450, 10
  %2456 = or i1 %2454, %2455
  br i1 %2456, label %originalBBpart2607, label %originalBB605alteredBB

originalBBpart2607:                               ; preds = %originalBB605
  br label %2457, !dbg !1560

2457:                                             ; preds = %originalBBpart2607, %2436, %2433
  %2458 = load i32, i32* @x.17
  %2459 = load i32, i32* @y.18
  %2460 = sub i32 %2458, 1
  %2461 = mul i32 %2458, %2460
  %2462 = urem i32 %2461, 2
  %2463 = icmp eq i32 %2462, 0
  %2464 = icmp slt i32 %2459, 10
  %2465 = or i1 %2463, %2464
  br i1 %2465, label %originalBB609, label %originalBB609alteredBB

originalBB609:                                    ; preds = %2457, %originalBB609alteredBB
  %2466 = load i32, i32* @x.17
  %2467 = load i32, i32* @y.18
  %2468 = sub i32 %2466, 1
  %2469 = mul i32 %2466, %2468
  %2470 = urem i32 %2469, 2
  %2471 = icmp eq i32 %2470, 0
  %2472 = icmp slt i32 %2467, 10
  %2473 = or i1 %2471, %2472
  br i1 %2473, label %originalBBpart2611, label %originalBB609alteredBB

originalBBpart2611:                               ; preds = %originalBB609
  br label %2474, !dbg !1561

2474:                                             ; preds = %originalBBpart2611
  %2475 = load i64, i64* %29, align 8, !dbg !1562
  %2476 = load i64, i64* %20, align 8, !dbg !1562
  %2477 = icmp ult i64 %2475, %2476, !dbg !1562
  br i1 %2477, label %2478, label %2482, !dbg !1565

2478:                                             ; preds = %2474
  %2479 = load i8*, i8** %19, align 8, !dbg !1562
  %2480 = load i64, i64* %29, align 8, !dbg !1562
  %2481 = getelementptr inbounds i8, i8* %2479, i64 %2480, !dbg !1562
  store i8 39, i8* %2481, align 1, !dbg !1562
  br label %2482, !dbg !1562

2482:                                             ; preds = %2478, %2474
  %2483 = load i32, i32* @x.17
  %2484 = load i32, i32* @y.18
  %2485 = sub i32 %2483, 1
  %2486 = mul i32 %2483, %2485
  %2487 = urem i32 %2486, 2
  %2488 = icmp eq i32 %2487, 0
  %2489 = icmp slt i32 %2484, 10
  %2490 = or i1 %2488, %2489
  br i1 %2490, label %originalBB613, label %originalBB613alteredBB

originalBB613:                                    ; preds = %2482, %originalBB613alteredBB
  %2491 = load i64, i64* %29, align 8, !dbg !1565
  %2492 = add i64 %2491, 1, !dbg !1565
  store i64 %2492, i64* %29, align 8, !dbg !1565
  %2493 = load i32, i32* @x.17
  %2494 = load i32, i32* @y.18
  %2495 = sub i32 %2493, 1
  %2496 = mul i32 %2493, %2495
  %2497 = urem i32 %2496, 2
  %2498 = icmp eq i32 %2497, 0
  %2499 = icmp slt i32 %2494, 10
  %2500 = or i1 %2498, %2499
  br i1 %2500, label %originalBBpart2624, label %originalBB613alteredBB

originalBBpart2624:                               ; preds = %originalBB613
  br label %2501, !dbg !1565

2501:                                             ; preds = %originalBBpart2624
  %2502 = load i32, i32* @x.17
  %2503 = load i32, i32* @y.18
  %2504 = sub i32 %2502, 1
  %2505 = mul i32 %2502, %2504
  %2506 = urem i32 %2505, 2
  %2507 = icmp eq i32 %2506, 0
  %2508 = icmp slt i32 %2503, 10
  %2509 = or i1 %2507, %2508
  br i1 %2509, label %originalBB626, label %originalBB626alteredBB

originalBB626:                                    ; preds = %2501, %originalBB626alteredBB
  %2510 = load i32, i32* @x.17
  %2511 = load i32, i32* @y.18
  %2512 = sub i32 %2510, 1
  %2513 = mul i32 %2510, %2512
  %2514 = urem i32 %2513, 2
  %2515 = icmp eq i32 %2514, 0
  %2516 = icmp slt i32 %2511, 10
  %2517 = or i1 %2515, %2516
  br i1 %2517, label %originalBBpart2628, label %originalBB626alteredBB

originalBBpart2628:                               ; preds = %originalBB626
  br label %2518, !dbg !1566

2518:                                             ; preds = %originalBBpart2628
  %2519 = load i64, i64* %29, align 8, !dbg !1567
  %2520 = load i64, i64* %20, align 8, !dbg !1567
  %2521 = icmp ult i64 %2519, %2520, !dbg !1567
  br i1 %2521, label %2522, label %2542, !dbg !1570

2522:                                             ; preds = %2518
  %2523 = load i32, i32* @x.17
  %2524 = load i32, i32* @y.18
  %2525 = sub i32 %2523, 1
  %2526 = mul i32 %2523, %2525
  %2527 = urem i32 %2526, 2
  %2528 = icmp eq i32 %2527, 0
  %2529 = icmp slt i32 %2524, 10
  %2530 = or i1 %2528, %2529
  br i1 %2530, label %originalBB630, label %originalBB630alteredBB

originalBB630:                                    ; preds = %2522, %originalBB630alteredBB
  %2531 = load i8*, i8** %19, align 8, !dbg !1567
  %2532 = load i64, i64* %29, align 8, !dbg !1567
  %2533 = getelementptr inbounds i8, i8* %2531, i64 %2532, !dbg !1567
  store i8 92, i8* %2533, align 1, !dbg !1567
  %2534 = load i32, i32* @x.17
  %2535 = load i32, i32* @y.18
  %2536 = sub i32 %2534, 1
  %2537 = mul i32 %2534, %2536
  %2538 = urem i32 %2537, 2
  %2539 = icmp eq i32 %2538, 0
  %2540 = icmp slt i32 %2535, 10
  %2541 = or i1 %2539, %2540
  br i1 %2541, label %originalBBpart2632, label %originalBB630alteredBB

originalBBpart2632:                               ; preds = %originalBB630
  br label %2542, !dbg !1567

2542:                                             ; preds = %originalBBpart2632, %2518
  %2543 = load i64, i64* %29, align 8, !dbg !1570
  %2544 = add i64 %2543, 1, !dbg !1570
  store i64 %2544, i64* %29, align 8, !dbg !1570
  br label %2545, !dbg !1570

2545:                                             ; preds = %2542
  br label %2546, !dbg !1571

2546:                                             ; preds = %2545
  %2547 = load i32, i32* @x.17
  %2548 = load i32, i32* @y.18
  %2549 = sub i32 %2547, 1
  %2550 = mul i32 %2547, %2549
  %2551 = urem i32 %2550, 2
  %2552 = icmp eq i32 %2551, 0
  %2553 = icmp slt i32 %2548, 10
  %2554 = or i1 %2552, %2553
  br i1 %2554, label %originalBB634, label %originalBB634alteredBB

originalBB634:                                    ; preds = %2546, %originalBB634alteredBB
  %2555 = load i64, i64* %29, align 8, !dbg !1572
  %2556 = load i64, i64* %20, align 8, !dbg !1572
  %2557 = icmp ult i64 %2555, %2556, !dbg !1572
  %2558 = load i32, i32* @x.17
  %2559 = load i32, i32* @y.18
  %2560 = sub i32 %2558, 1
  %2561 = mul i32 %2558, %2560
  %2562 = urem i32 %2561, 2
  %2563 = icmp eq i32 %2562, 0
  %2564 = icmp slt i32 %2559, 10
  %2565 = or i1 %2563, %2564
  br i1 %2565, label %originalBBpart2636, label %originalBB634alteredBB

originalBBpart2636:                               ; preds = %originalBB634
  br i1 %2557, label %2566, label %2586, !dbg !1575

2566:                                             ; preds = %originalBBpart2636
  %2567 = load i32, i32* @x.17
  %2568 = load i32, i32* @y.18
  %2569 = sub i32 %2567, 1
  %2570 = mul i32 %2567, %2569
  %2571 = urem i32 %2570, 2
  %2572 = icmp eq i32 %2571, 0
  %2573 = icmp slt i32 %2568, 10
  %2574 = or i1 %2572, %2573
  br i1 %2574, label %originalBB638, label %originalBB638alteredBB

originalBB638:                                    ; preds = %2566, %originalBB638alteredBB
  %2575 = load i8*, i8** %19, align 8, !dbg !1572
  %2576 = load i64, i64* %29, align 8, !dbg !1572
  %2577 = getelementptr inbounds i8, i8* %2575, i64 %2576, !dbg !1572
  store i8 39, i8* %2577, align 1, !dbg !1572
  %2578 = load i32, i32* @x.17
  %2579 = load i32, i32* @y.18
  %2580 = sub i32 %2578, 1
  %2581 = mul i32 %2578, %2580
  %2582 = urem i32 %2581, 2
  %2583 = icmp eq i32 %2582, 0
  %2584 = icmp slt i32 %2579, 10
  %2585 = or i1 %2583, %2584
  br i1 %2585, label %originalBBpart2640, label %originalBB638alteredBB

originalBBpart2640:                               ; preds = %originalBB638
  br label %2586, !dbg !1572

2586:                                             ; preds = %originalBBpart2640, %originalBBpart2636
  %2587 = load i64, i64* %29, align 8, !dbg !1575
  %2588 = add i64 %2587, 1, !dbg !1575
  store i64 %2588, i64* %29, align 8, !dbg !1575
  br label %2589, !dbg !1575

2589:                                             ; preds = %2586
  %2590 = load i32, i32* @x.17
  %2591 = load i32, i32* @y.18
  %2592 = sub i32 %2590, 1
  %2593 = mul i32 %2590, %2592
  %2594 = urem i32 %2593, 2
  %2595 = icmp eq i32 %2594, 0
  %2596 = icmp slt i32 %2591, 10
  %2597 = or i1 %2595, %2596
  br i1 %2597, label %originalBB642, label %originalBB642alteredBB

originalBB642:                                    ; preds = %2589, %originalBB642alteredBB
  store i8 0, i8* %36, align 1, !dbg !1576
  %2598 = load i32, i32* @x.17
  %2599 = load i32, i32* @y.18
  %2600 = sub i32 %2598, 1
  %2601 = mul i32 %2598, %2600
  %2602 = urem i32 %2601, 2
  %2603 = icmp eq i32 %2602, 0
  %2604 = icmp slt i32 %2599, 10
  %2605 = or i1 %2603, %2604
  br i1 %2605, label %originalBBpart2644, label %originalBB642alteredBB

originalBBpart2644:                               ; preds = %originalBB642
  br label %2606, !dbg !1577

2606:                                             ; preds = %originalBBpart2644, %2410
  %2607 = load i32, i32* @x.17
  %2608 = load i32, i32* @y.18
  %2609 = sub i32 %2607, 1
  %2610 = mul i32 %2607, %2609
  %2611 = urem i32 %2610, 2
  %2612 = icmp eq i32 %2611, 0
  %2613 = icmp slt i32 %2608, 10
  %2614 = or i1 %2612, %2613
  br i1 %2614, label %originalBB646, label %originalBB646alteredBB

originalBB646:                                    ; preds = %2606, %originalBB646alteredBB
  %2615 = load i32, i32* @x.17
  %2616 = load i32, i32* @y.18
  %2617 = sub i32 %2615, 1
  %2618 = mul i32 %2615, %2617
  %2619 = urem i32 %2618, 2
  %2620 = icmp eq i32 %2619, 0
  %2621 = icmp slt i32 %2616, 10
  %2622 = or i1 %2620, %2621
  br i1 %2622, label %originalBBpart2648, label %originalBB646alteredBB

originalBBpart2648:                               ; preds = %originalBB646
  br label %4041, !dbg !1578

2623:                                             ; preds = %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187, %originalBBpart2187
  %2624 = load i32, i32* @x.17
  %2625 = load i32, i32* @y.18
  %2626 = sub i32 %2624, 1
  %2627 = mul i32 %2624, %2626
  %2628 = urem i32 %2627, 2
  %2629 = icmp eq i32 %2628, 0
  %2630 = icmp slt i32 %2625, 10
  %2631 = or i1 %2629, %2630
  br i1 %2631, label %originalBB650, label %originalBB650alteredBB

originalBB650:                                    ; preds = %2623, %originalBB650alteredBB
  store i8 1, i8* %43, align 1, !dbg !1579
  %2632 = load i32, i32* @x.17
  %2633 = load i32, i32* @y.18
  %2634 = sub i32 %2632, 1
  %2635 = mul i32 %2632, %2634
  %2636 = urem i32 %2635, 2
  %2637 = icmp eq i32 %2636, 0
  %2638 = icmp slt i32 %2633, 10
  %2639 = or i1 %2637, %2638
  br i1 %2639, label %originalBBpart2652, label %originalBB650alteredBB

originalBBpart2652:                               ; preds = %originalBB650
  br label %4041, !dbg !1580

2640:                                             ; preds = %originalBBpart2187
  call void @llvm.dbg.declare(metadata i64* %44, metadata !1581, metadata !DIExpression()), !dbg !1583
  call void @llvm.dbg.declare(metadata i8* %45, metadata !1584, metadata !DIExpression()), !dbg !1585
  %2641 = load i8, i8* %34, align 1, !dbg !1586
  %2642 = trunc i8 %2641 to i1, !dbg !1586
  br i1 %2642, label %2643, label %2671, !dbg !1588

2643:                                             ; preds = %2640
  %2644 = load i32, i32* @x.17
  %2645 = load i32, i32* @y.18
  %2646 = sub i32 %2644, 1
  %2647 = mul i32 %2644, %2646
  %2648 = urem i32 %2647, 2
  %2649 = icmp eq i32 %2648, 0
  %2650 = icmp slt i32 %2645, 10
  %2651 = or i1 %2649, %2650
  br i1 %2651, label %originalBB654, label %originalBB654alteredBB

originalBB654:                                    ; preds = %2643, %originalBB654alteredBB
  store i64 1, i64* %44, align 8, !dbg !1589
  %2652 = call i16** @__ctype_b_loc() #15, !dbg !1591
  %2653 = load i16*, i16** %2652, align 8, !dbg !1591
  %2654 = load i8, i8* %39, align 1, !dbg !1591
  %2655 = zext i8 %2654 to i32, !dbg !1591
  %2656 = sext i32 %2655 to i64, !dbg !1591
  %2657 = getelementptr inbounds i16, i16* %2653, i64 %2656, !dbg !1591
  %2658 = load i16, i16* %2657, align 2, !dbg !1591
  %2659 = zext i16 %2658 to i32, !dbg !1591
  %2660 = and i32 %2659, 16384, !dbg !1591
  %2661 = icmp ne i32 %2660, 0, !dbg !1592
  %2662 = zext i1 %2661 to i8, !dbg !1593
  store i8 %2662, i8* %45, align 1, !dbg !1593
  %2663 = load i32, i32* @x.17
  %2664 = load i32, i32* @y.18
  %2665 = sub i32 %2663, 1
  %2666 = mul i32 %2663, %2665
  %2667 = urem i32 %2666, 2
  %2668 = icmp eq i32 %2667, 0
  %2669 = icmp slt i32 %2664, 10
  %2670 = or i1 %2668, %2669
  br i1 %2670, label %originalBBpart2658, label %originalBB654alteredBB

originalBBpart2658:                               ; preds = %originalBB654
  br label %3104, !dbg !1594

2671:                                             ; preds = %2640
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %46, metadata !1595, metadata !DIExpression()), !dbg !1612
  %2672 = load i32, i32* @x.17
  %2673 = load i32, i32* @y.18
  %2674 = sub i32 %2672, 1
  %2675 = mul i32 %2672, %2674
  %2676 = urem i32 %2675, 2
  %2677 = icmp eq i32 %2676, 0
  %2678 = icmp slt i32 %2673, 10
  %2679 = or i1 %2677, %2678
  br i1 %2679, label %originalBB660, label %originalBB660alteredBB

originalBB660:                                    ; preds = %2671, %originalBB660alteredBB
  %2680 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !1613
  call void @llvm.memset.p0i8.i64(i8* align 4 %2680, i8 0, i64 8, i1 false), !dbg !1613
  store i64 0, i64* %44, align 8, !dbg !1614
  store i8 1, i8* %45, align 1, !dbg !1615
  %2681 = load i64, i64* %22, align 8, !dbg !1616
  %2682 = icmp eq i64 %2681, -1, !dbg !1618
  %2683 = load i32, i32* @x.17
  %2684 = load i32, i32* @y.18
  %2685 = sub i32 %2683, 1
  %2686 = mul i32 %2683, %2685
  %2687 = urem i32 %2686, 2
  %2688 = icmp eq i32 %2687, 0
  %2689 = icmp slt i32 %2684, 10
  %2690 = or i1 %2688, %2689
  br i1 %2690, label %originalBBpart2662, label %originalBB660alteredBB

originalBBpart2662:                               ; preds = %originalBB660
  br i1 %2682, label %2691, label %2710, !dbg !1619

2691:                                             ; preds = %originalBBpart2662
  %2692 = load i32, i32* @x.17
  %2693 = load i32, i32* @y.18
  %2694 = sub i32 %2692, 1
  %2695 = mul i32 %2692, %2694
  %2696 = urem i32 %2695, 2
  %2697 = icmp eq i32 %2696, 0
  %2698 = icmp slt i32 %2693, 10
  %2699 = or i1 %2697, %2698
  br i1 %2699, label %originalBB664, label %originalBB664alteredBB

originalBB664:                                    ; preds = %2691, %originalBB664alteredBB
  %2700 = load i8*, i8** %21, align 8, !dbg !1620
  %2701 = call i64 @strlen(i8* %2700) #13, !dbg !1621
  store i64 %2701, i64* %22, align 8, !dbg !1622
  %2702 = load i32, i32* @x.17
  %2703 = load i32, i32* @y.18
  %2704 = sub i32 %2702, 1
  %2705 = mul i32 %2702, %2704
  %2706 = urem i32 %2705, 2
  %2707 = icmp eq i32 %2706, 0
  %2708 = icmp slt i32 %2703, 10
  %2709 = or i1 %2707, %2708
  br i1 %2709, label %originalBBpart2666, label %originalBB664alteredBB

originalBBpart2666:                               ; preds = %originalBB664
  br label %2710, !dbg !1623

2710:                                             ; preds = %originalBBpart2666, %originalBBpart2662
  %2711 = load i32, i32* @x.17
  %2712 = load i32, i32* @y.18
  %2713 = sub i32 %2711, 1
  %2714 = mul i32 %2711, %2713
  %2715 = urem i32 %2714, 2
  %2716 = icmp eq i32 %2715, 0
  %2717 = icmp slt i32 %2712, 10
  %2718 = or i1 %2716, %2717
  br i1 %2718, label %originalBB668, label %originalBB668alteredBB

originalBB668:                                    ; preds = %2710, %originalBB668alteredBB
  %2719 = load i32, i32* @x.17
  %2720 = load i32, i32* @y.18
  %2721 = sub i32 %2719, 1
  %2722 = mul i32 %2719, %2721
  %2723 = urem i32 %2722, 2
  %2724 = icmp eq i32 %2723, 0
  %2725 = icmp slt i32 %2720, 10
  %2726 = or i1 %2724, %2725
  br i1 %2726, label %originalBBpart2670, label %originalBB668alteredBB

originalBBpart2670:                               ; preds = %originalBB668
  br label %2727, !dbg !1624

2727:                                             ; preds = %originalBBpart2800, %originalBBpart2670
  call void @llvm.dbg.declare(metadata i32* %47, metadata !1625, metadata !DIExpression()), !dbg !1628
  call void @llvm.dbg.declare(metadata i64* %48, metadata !1629, metadata !DIExpression()), !dbg !1630
  %2728 = load i32, i32* @x.17
  %2729 = load i32, i32* @y.18
  %2730 = sub i32 %2728, 1
  %2731 = mul i32 %2728, %2730
  %2732 = urem i32 %2731, 2
  %2733 = icmp eq i32 %2732, 0
  %2734 = icmp slt i32 %2729, 10
  %2735 = or i1 %2733, %2734
  br i1 %2735, label %originalBB672, label %originalBB672alteredBB

originalBB672:                                    ; preds = %2727, %originalBB672alteredBB
  %2736 = load i8*, i8** %21, align 8, !dbg !1631
  %2737 = load i64, i64* %28, align 8, !dbg !1632
  %2738 = load i64, i64* %44, align 8, !dbg !1633
  %2739 = add i64 %2737, %2738, !dbg !1634
  %2740 = getelementptr inbounds i8, i8* %2736, i64 %2739, !dbg !1631
  %2741 = load i64, i64* %22, align 8, !dbg !1635
  %2742 = load i64, i64* %28, align 8, !dbg !1636
  %2743 = load i64, i64* %44, align 8, !dbg !1637
  %2744 = add i64 %2742, %2743, !dbg !1638
  %2745 = sub i64 %2741, %2744, !dbg !1639
  %2746 = call i64 @rpl_mbrtowc(i32* %47, i8* %2740, i64 %2745, %struct.__mbstate_t* %46), !dbg !1640
  store i64 %2746, i64* %48, align 8, !dbg !1630
  %2747 = load i64, i64* %48, align 8, !dbg !1641
  %2748 = icmp eq i64 %2747, 0, !dbg !1643
  %2749 = load i32, i32* @x.17
  %2750 = load i32, i32* @y.18
  %2751 = sub i32 %2749, 1
  %2752 = mul i32 %2749, %2751
  %2753 = urem i32 %2752, 2
  %2754 = icmp eq i32 %2753, 0
  %2755 = icmp slt i32 %2750, 10
  %2756 = or i1 %2754, %2755
  br i1 %2756, label %originalBBpart2699, label %originalBB672alteredBB

originalBBpart2699:                               ; preds = %originalBB672
  br i1 %2748, label %2757, label %2774, !dbg !1644

2757:                                             ; preds = %originalBBpart2699
  %2758 = load i32, i32* @x.17
  %2759 = load i32, i32* @y.18
  %2760 = sub i32 %2758, 1
  %2761 = mul i32 %2758, %2760
  %2762 = urem i32 %2761, 2
  %2763 = icmp eq i32 %2762, 0
  %2764 = icmp slt i32 %2759, 10
  %2765 = or i1 %2763, %2764
  br i1 %2765, label %originalBB701, label %originalBB701alteredBB

originalBB701:                                    ; preds = %2757, %originalBB701alteredBB
  %2766 = load i32, i32* @x.17
  %2767 = load i32, i32* @y.18
  %2768 = sub i32 %2766, 1
  %2769 = mul i32 %2766, %2768
  %2770 = urem i32 %2769, 2
  %2771 = icmp eq i32 %2770, 0
  %2772 = icmp slt i32 %2767, 10
  %2773 = or i1 %2771, %2772
  br i1 %2773, label %originalBBpart2703, label %originalBB701alteredBB

originalBBpart2703:                               ; preds = %originalBB701
  br label %3087, !dbg !1645

2774:                                             ; preds = %originalBBpart2699
  %2775 = load i64, i64* %48, align 8, !dbg !1646
  %2776 = icmp eq i64 %2775, -1, !dbg !1648
  br i1 %2776, label %2777, label %2778, !dbg !1649

2777:                                             ; preds = %2774
  store i8 0, i8* %45, align 1, !dbg !1650
  br label %3087, !dbg !1652

2778:                                             ; preds = %2774
  %2779 = load i32, i32* @x.17
  %2780 = load i32, i32* @y.18
  %2781 = sub i32 %2779, 1
  %2782 = mul i32 %2779, %2781
  %2783 = urem i32 %2782, 2
  %2784 = icmp eq i32 %2783, 0
  %2785 = icmp slt i32 %2780, 10
  %2786 = or i1 %2784, %2785
  br i1 %2786, label %originalBB705, label %originalBB705alteredBB

originalBB705:                                    ; preds = %2778, %originalBB705alteredBB
  %2787 = load i64, i64* %48, align 8, !dbg !1653
  %2788 = icmp eq i64 %2787, -2, !dbg !1655
  %2789 = load i32, i32* @x.17
  %2790 = load i32, i32* @y.18
  %2791 = sub i32 %2789, 1
  %2792 = mul i32 %2789, %2791
  %2793 = urem i32 %2792, 2
  %2794 = icmp eq i32 %2793, 0
  %2795 = icmp slt i32 %2790, 10
  %2796 = or i1 %2794, %2795
  br i1 %2796, label %originalBBpart2707, label %originalBB705alteredBB

originalBBpart2707:                               ; preds = %originalBB705
  br i1 %2788, label %2797, label %2867, !dbg !1656

2797:                                             ; preds = %originalBBpart2707
  store i8 0, i8* %45, align 1, !dbg !1657
  br label %2798, !dbg !1659

2798:                                             ; preds = %originalBBpart2726, %2797
  %2799 = load i32, i32* @x.17
  %2800 = load i32, i32* @y.18
  %2801 = sub i32 %2799, 1
  %2802 = mul i32 %2799, %2801
  %2803 = urem i32 %2802, 2
  %2804 = icmp eq i32 %2803, 0
  %2805 = icmp slt i32 %2800, 10
  %2806 = or i1 %2804, %2805
  br i1 %2806, label %originalBB709, label %originalBB709alteredBB

originalBB709:                                    ; preds = %2798, %originalBB709alteredBB
  %2807 = load i64, i64* %28, align 8, !dbg !1660
  %2808 = load i64, i64* %44, align 8, !dbg !1661
  %2809 = add i64 %2807, %2808, !dbg !1662
  %2810 = load i64, i64* %22, align 8, !dbg !1663
  %2811 = icmp ult i64 %2809, %2810, !dbg !1664
  %2812 = load i32, i32* @x.17
  %2813 = load i32, i32* @y.18
  %2814 = sub i32 %2812, 1
  %2815 = mul i32 %2812, %2814
  %2816 = urem i32 %2815, 2
  %2817 = icmp eq i32 %2816, 0
  %2818 = icmp slt i32 %2813, 10
  %2819 = or i1 %2817, %2818
  br i1 %2819, label %originalBBpart2722, label %originalBB709alteredBB

originalBBpart2722:                               ; preds = %originalBB709
  br i1 %2811, label %2820, label %2829, !dbg !1665

2820:                                             ; preds = %originalBBpart2722
  %2821 = load i8*, i8** %21, align 8, !dbg !1666
  %2822 = load i64, i64* %28, align 8, !dbg !1667
  %2823 = load i64, i64* %44, align 8, !dbg !1668
  %2824 = add i64 %2822, %2823, !dbg !1669
  %2825 = getelementptr inbounds i8, i8* %2821, i64 %2824, !dbg !1666
  %2826 = load i8, i8* %2825, align 1, !dbg !1666
  %2827 = sext i8 %2826 to i32, !dbg !1666
  %2828 = icmp ne i32 %2827, 0, !dbg !1665
  br label %2829

2829:                                             ; preds = %2820, %originalBBpart2722
  %2830 = phi i1 [ false, %originalBBpart2722 ], [ %2828, %2820 ], !dbg !1670
  br i1 %2830, label %2831, label %2850, !dbg !1659

2831:                                             ; preds = %2829
  %2832 = load i32, i32* @x.17
  %2833 = load i32, i32* @y.18
  %2834 = sub i32 %2832, 1
  %2835 = mul i32 %2832, %2834
  %2836 = urem i32 %2835, 2
  %2837 = icmp eq i32 %2836, 0
  %2838 = icmp slt i32 %2833, 10
  %2839 = or i1 %2837, %2838
  br i1 %2839, label %originalBB724, label %originalBB724alteredBB

originalBB724:                                    ; preds = %2831, %originalBB724alteredBB
  %2840 = load i64, i64* %44, align 8, !dbg !1671
  %2841 = add i64 %2840, 1, !dbg !1671
  store i64 %2841, i64* %44, align 8, !dbg !1671
  %2842 = load i32, i32* @x.17
  %2843 = load i32, i32* @y.18
  %2844 = sub i32 %2842, 1
  %2845 = mul i32 %2842, %2844
  %2846 = urem i32 %2845, 2
  %2847 = icmp eq i32 %2846, 0
  %2848 = icmp slt i32 %2843, 10
  %2849 = or i1 %2847, %2848
  br i1 %2849, label %originalBBpart2726, label %originalBB724alteredBB

originalBBpart2726:                               ; preds = %originalBB724
  br label %2798, !dbg !1659, !llvm.loop !1672

2850:                                             ; preds = %2829
  %2851 = load i32, i32* @x.17
  %2852 = load i32, i32* @y.18
  %2853 = sub i32 %2851, 1
  %2854 = mul i32 %2851, %2853
  %2855 = urem i32 %2854, 2
  %2856 = icmp eq i32 %2855, 0
  %2857 = icmp slt i32 %2852, 10
  %2858 = or i1 %2856, %2857
  br i1 %2858, label %originalBB728, label %originalBB728alteredBB

originalBB728:                                    ; preds = %2850, %originalBB728alteredBB
  %2859 = load i32, i32* @x.17
  %2860 = load i32, i32* @y.18
  %2861 = sub i32 %2859, 1
  %2862 = mul i32 %2859, %2861
  %2863 = urem i32 %2862, 2
  %2864 = icmp eq i32 %2863, 0
  %2865 = icmp slt i32 %2860, 10
  %2866 = or i1 %2864, %2865
  br i1 %2866, label %originalBBpart2730, label %originalBB728alteredBB

originalBBpart2730:                               ; preds = %originalBB728
  br label %3087, !dbg !1673

2867:                                             ; preds = %originalBBpart2707
  %2868 = load i32, i32* @x.17
  %2869 = load i32, i32* @y.18
  %2870 = sub i32 %2868, 1
  %2871 = mul i32 %2868, %2870
  %2872 = urem i32 %2871, 2
  %2873 = icmp eq i32 %2872, 0
  %2874 = icmp slt i32 %2869, 10
  %2875 = or i1 %2873, %2874
  br i1 %2875, label %originalBB732, label %originalBB732alteredBB

originalBB732:                                    ; preds = %2867, %originalBB732alteredBB
  %2876 = load i8, i8* %35, align 1, !dbg !1674
  %2877 = trunc i8 %2876 to i1, !dbg !1674
  %2878 = load i32, i32* @x.17
  %2879 = load i32, i32* @y.18
  %2880 = sub i32 %2878, 1
  %2881 = mul i32 %2878, %2880
  %2882 = urem i32 %2881, 2
  %2883 = icmp eq i32 %2882, 0
  %2884 = icmp slt i32 %2879, 10
  %2885 = or i1 %2883, %2884
  br i1 %2885, label %originalBBpart2734, label %originalBB732alteredBB

originalBBpart2734:                               ; preds = %originalBB732
  br i1 %2877, label %2886, label %2991, !dbg !1677

2886:                                             ; preds = %originalBBpart2734
  %2887 = load i32, i32* @x.17
  %2888 = load i32, i32* @y.18
  %2889 = sub i32 %2887, 1
  %2890 = mul i32 %2887, %2889
  %2891 = urem i32 %2890, 2
  %2892 = icmp eq i32 %2891, 0
  %2893 = icmp slt i32 %2888, 10
  %2894 = or i1 %2892, %2893
  br i1 %2894, label %originalBB736, label %originalBB736alteredBB

originalBB736:                                    ; preds = %2886, %originalBB736alteredBB
  %2895 = load i32, i32* %23, align 4, !dbg !1678
  %2896 = icmp eq i32 %2895, 2, !dbg !1679
  %2897 = load i32, i32* @x.17
  %2898 = load i32, i32* @y.18
  %2899 = sub i32 %2897, 1
  %2900 = mul i32 %2897, %2899
  %2901 = urem i32 %2900, 2
  %2902 = icmp eq i32 %2901, 0
  %2903 = icmp slt i32 %2898, 10
  %2904 = or i1 %2902, %2903
  br i1 %2904, label %originalBBpart2738, label %originalBB736alteredBB

originalBBpart2738:                               ; preds = %originalBB736
  br i1 %2896, label %2905, label %2991, !dbg !1680

2905:                                             ; preds = %originalBBpart2738
  call void @llvm.dbg.declare(metadata i64* %49, metadata !1681, metadata !DIExpression()), !dbg !1683
  store i64 1, i64* %49, align 8, !dbg !1684
  br label %2906, !dbg !1686

2906:                                             ; preds = %originalBBpart2771, %2905
  %2907 = load i32, i32* @x.17
  %2908 = load i32, i32* @y.18
  %2909 = sub i32 %2907, 1
  %2910 = mul i32 %2907, %2909
  %2911 = urem i32 %2910, 2
  %2912 = icmp eq i32 %2911, 0
  %2913 = icmp slt i32 %2908, 10
  %2914 = or i1 %2912, %2913
  br i1 %2914, label %originalBB740, label %originalBB740alteredBB

originalBB740:                                    ; preds = %2906, %originalBB740alteredBB
  %2915 = load i64, i64* %49, align 8, !dbg !1687
  %2916 = load i64, i64* %48, align 8, !dbg !1689
  %2917 = icmp ult i64 %2915, %2916, !dbg !1690
  %2918 = load i32, i32* @x.17
  %2919 = load i32, i32* @y.18
  %2920 = sub i32 %2918, 1
  %2921 = mul i32 %2918, %2920
  %2922 = urem i32 %2921, 2
  %2923 = icmp eq i32 %2922, 0
  %2924 = icmp slt i32 %2919, 10
  %2925 = or i1 %2923, %2924
  br i1 %2925, label %originalBBpart2742, label %originalBB740alteredBB

originalBBpart2742:                               ; preds = %originalBB740
  br i1 %2917, label %2926, label %2990, !dbg !1691

2926:                                             ; preds = %originalBBpart2742
  %2927 = load i8*, i8** %21, align 8, !dbg !1692
  %2928 = load i64, i64* %28, align 8, !dbg !1693
  %2929 = load i64, i64* %44, align 8, !dbg !1694
  %2930 = add i64 %2928, %2929, !dbg !1695
  %2931 = load i64, i64* %49, align 8, !dbg !1696
  %2932 = add i64 %2930, %2931, !dbg !1697
  %2933 = getelementptr inbounds i8, i8* %2927, i64 %2932, !dbg !1692
  %2934 = load i8, i8* %2933, align 1, !dbg !1692
  %2935 = sext i8 %2934 to i32, !dbg !1692
  switch i32 %2935, label %2937 [
    i32 91, label %2936
    i32 92, label %2936
    i32 94, label %2936
    i32 96, label %2936
    i32 124, label %2936
  ], !dbg !1698

2936:                                             ; preds = %2926, %2926, %2926, %2926, %2926
  br label %5134, !dbg !1699

2937:                                             ; preds = %2926
  %2938 = load i32, i32* @x.17
  %2939 = load i32, i32* @y.18
  %2940 = sub i32 %2938, 1
  %2941 = mul i32 %2938, %2940
  %2942 = urem i32 %2941, 2
  %2943 = icmp eq i32 %2942, 0
  %2944 = icmp slt i32 %2939, 10
  %2945 = or i1 %2943, %2944
  br i1 %2945, label %originalBB744, label %originalBB744alteredBB

originalBB744:                                    ; preds = %2937, %originalBB744alteredBB
  %2946 = load i32, i32* @x.17
  %2947 = load i32, i32* @y.18
  %2948 = sub i32 %2946, 1
  %2949 = mul i32 %2946, %2948
  %2950 = urem i32 %2949, 2
  %2951 = icmp eq i32 %2950, 0
  %2952 = icmp slt i32 %2947, 10
  %2953 = or i1 %2951, %2952
  br i1 %2953, label %originalBBpart2746, label %originalBB744alteredBB

originalBBpart2746:                               ; preds = %originalBB744
  br label %2954, !dbg !1701

2954:                                             ; preds = %originalBBpart2746
  %2955 = load i32, i32* @x.17
  %2956 = load i32, i32* @y.18
  %2957 = sub i32 %2955, 1
  %2958 = mul i32 %2955, %2957
  %2959 = urem i32 %2958, 2
  %2960 = icmp eq i32 %2959, 0
  %2961 = icmp slt i32 %2956, 10
  %2962 = or i1 %2960, %2961
  br i1 %2962, label %originalBB748, label %originalBB748alteredBB

originalBB748:                                    ; preds = %2954, %originalBB748alteredBB
  %2963 = load i32, i32* @x.17
  %2964 = load i32, i32* @y.18
  %2965 = sub i32 %2963, 1
  %2966 = mul i32 %2963, %2965
  %2967 = urem i32 %2966, 2
  %2968 = icmp eq i32 %2967, 0
  %2969 = icmp slt i32 %2964, 10
  %2970 = or i1 %2968, %2969
  br i1 %2970, label %originalBBpart2750, label %originalBB748alteredBB

originalBBpart2750:                               ; preds = %originalBB748
  br label %2971, !dbg !1702

2971:                                             ; preds = %originalBBpart2750
  %2972 = load i32, i32* @x.17
  %2973 = load i32, i32* @y.18
  %2974 = sub i32 %2972, 1
  %2975 = mul i32 %2972, %2974
  %2976 = urem i32 %2975, 2
  %2977 = icmp eq i32 %2976, 0
  %2978 = icmp slt i32 %2973, 10
  %2979 = or i1 %2977, %2978
  br i1 %2979, label %originalBB752, label %originalBB752alteredBB

originalBB752:                                    ; preds = %2971, %originalBB752alteredBB
  %2980 = load i64, i64* %49, align 8, !dbg !1703
  %2981 = add i64 %2980, 1, !dbg !1703
  store i64 %2981, i64* %49, align 8, !dbg !1703
  %2982 = load i32, i32* @x.17
  %2983 = load i32, i32* @y.18
  %2984 = sub i32 %2982, 1
  %2985 = mul i32 %2982, %2984
  %2986 = urem i32 %2985, 2
  %2987 = icmp eq i32 %2986, 0
  %2988 = icmp slt i32 %2983, 10
  %2989 = or i1 %2987, %2988
  br i1 %2989, label %originalBBpart2771, label %originalBB752alteredBB

originalBBpart2771:                               ; preds = %originalBB752
  br label %2906, !dbg !1704, !llvm.loop !1705

2990:                                             ; preds = %originalBBpart2742
  br label %2991, !dbg !1707

2991:                                             ; preds = %2990, %originalBBpart2738, %originalBBpart2734
  %2992 = load i32, i32* @x.17
  %2993 = load i32, i32* @y.18
  %2994 = sub i32 %2992, 1
  %2995 = mul i32 %2992, %2994
  %2996 = urem i32 %2995, 2
  %2997 = icmp eq i32 %2996, 0
  %2998 = icmp slt i32 %2993, 10
  %2999 = or i1 %2997, %2998
  br i1 %2999, label %originalBB773, label %originalBB773alteredBB

originalBB773:                                    ; preds = %2991, %originalBB773alteredBB
  %3000 = load i32, i32* %47, align 4, !dbg !1708
  %3001 = call i32 @iswprint(i32 %3000) #10, !dbg !1710
  %3002 = icmp ne i32 %3001, 0, !dbg !1710
  %3003 = load i32, i32* @x.17
  %3004 = load i32, i32* @y.18
  %3005 = sub i32 %3003, 1
  %3006 = mul i32 %3003, %3005
  %3007 = urem i32 %3006, 2
  %3008 = icmp eq i32 %3007, 0
  %3009 = icmp slt i32 %3004, 10
  %3010 = or i1 %3008, %3009
  br i1 %3010, label %originalBBpart2775, label %originalBB773alteredBB

originalBBpart2775:                               ; preds = %originalBB773
  br i1 %3002, label %3028, label %3011, !dbg !1711

3011:                                             ; preds = %originalBBpart2775
  %3012 = load i32, i32* @x.17
  %3013 = load i32, i32* @y.18
  %3014 = sub i32 %3012, 1
  %3015 = mul i32 %3012, %3014
  %3016 = urem i32 %3015, 2
  %3017 = icmp eq i32 %3016, 0
  %3018 = icmp slt i32 %3013, 10
  %3019 = or i1 %3017, %3018
  br i1 %3019, label %originalBB777, label %originalBB777alteredBB

originalBB777:                                    ; preds = %3011, %originalBB777alteredBB
  store i8 0, i8* %45, align 1, !dbg !1712
  %3020 = load i32, i32* @x.17
  %3021 = load i32, i32* @y.18
  %3022 = sub i32 %3020, 1
  %3023 = mul i32 %3020, %3022
  %3024 = urem i32 %3023, 2
  %3025 = icmp eq i32 %3024, 0
  %3026 = icmp slt i32 %3021, 10
  %3027 = or i1 %3025, %3026
  br i1 %3027, label %originalBBpart2779, label %originalBB777alteredBB

originalBBpart2779:                               ; preds = %originalBB777
  br label %3028, !dbg !1713

3028:                                             ; preds = %originalBBpart2779, %originalBBpart2775
  %3029 = load i64, i64* %48, align 8, !dbg !1714
  %3030 = load i64, i64* %44, align 8, !dbg !1715
  %3031 = add i64 %3030, %3029, !dbg !1715
  store i64 %3031, i64* %44, align 8, !dbg !1715
  br label %3032

3032:                                             ; preds = %3028
  %3033 = load i32, i32* @x.17
  %3034 = load i32, i32* @y.18
  %3035 = sub i32 %3033, 1
  %3036 = mul i32 %3033, %3035
  %3037 = urem i32 %3036, 2
  %3038 = icmp eq i32 %3037, 0
  %3039 = icmp slt i32 %3034, 10
  %3040 = or i1 %3038, %3039
  br i1 %3040, label %originalBB781, label %originalBB781alteredBB

originalBB781:                                    ; preds = %3032, %originalBB781alteredBB
  %3041 = load i32, i32* @x.17
  %3042 = load i32, i32* @y.18
  %3043 = sub i32 %3041, 1
  %3044 = mul i32 %3041, %3043
  %3045 = urem i32 %3044, 2
  %3046 = icmp eq i32 %3045, 0
  %3047 = icmp slt i32 %3042, 10
  %3048 = or i1 %3046, %3047
  br i1 %3048, label %originalBBpart2783, label %originalBB781alteredBB

originalBBpart2783:                               ; preds = %originalBB781
  br label %3049

3049:                                             ; preds = %originalBBpart2783
  %3050 = load i32, i32* @x.17
  %3051 = load i32, i32* @y.18
  %3052 = sub i32 %3050, 1
  %3053 = mul i32 %3050, %3052
  %3054 = urem i32 %3053, 2
  %3055 = icmp eq i32 %3054, 0
  %3056 = icmp slt i32 %3051, 10
  %3057 = or i1 %3055, %3056
  br i1 %3057, label %originalBB785, label %originalBB785alteredBB

originalBB785:                                    ; preds = %3049, %originalBB785alteredBB
  %3058 = load i32, i32* @x.17
  %3059 = load i32, i32* @y.18
  %3060 = sub i32 %3058, 1
  %3061 = mul i32 %3058, %3060
  %3062 = urem i32 %3061, 2
  %3063 = icmp eq i32 %3062, 0
  %3064 = icmp slt i32 %3059, 10
  %3065 = or i1 %3063, %3064
  br i1 %3065, label %originalBBpart2787, label %originalBB785alteredBB

originalBBpart2787:                               ; preds = %originalBB785
  br label %3066

3066:                                             ; preds = %originalBBpart2787
  br label %3067, !dbg !1716

3067:                                             ; preds = %3066
  %3068 = load i32, i32* @x.17
  %3069 = load i32, i32* @y.18
  %3070 = sub i32 %3068, 1
  %3071 = mul i32 %3068, %3070
  %3072 = urem i32 %3071, 2
  %3073 = icmp eq i32 %3072, 0
  %3074 = icmp slt i32 %3069, 10
  %3075 = or i1 %3073, %3074
  br i1 %3075, label %originalBB789, label %originalBB789alteredBB

originalBB789:                                    ; preds = %3067, %originalBB789alteredBB
  %3076 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !1717
  %3077 = icmp ne i32 %3076, 0, !dbg !1718
  %3078 = xor i1 %3077, true, !dbg !1718
  %3079 = load i32, i32* @x.17
  %3080 = load i32, i32* @y.18
  %3081 = sub i32 %3079, 1
  %3082 = mul i32 %3079, %3081
  %3083 = urem i32 %3082, 2
  %3084 = icmp eq i32 %3083, 0
  %3085 = icmp slt i32 %3080, 10
  %3086 = or i1 %3084, %3085
  br i1 %3086, label %originalBBpart2800, label %originalBB789alteredBB

originalBBpart2800:                               ; preds = %originalBB789
  br i1 %3078, label %2727, label %3087, !dbg !1716, !llvm.loop !1719

3087:                                             ; preds = %originalBBpart2800, %originalBBpart2730, %2777, %originalBBpart2703
  %3088 = load i32, i32* @x.17
  %3089 = load i32, i32* @y.18
  %3090 = sub i32 %3088, 1
  %3091 = mul i32 %3088, %3090
  %3092 = urem i32 %3091, 2
  %3093 = icmp eq i32 %3092, 0
  %3094 = icmp slt i32 %3089, 10
  %3095 = or i1 %3093, %3094
  br i1 %3095, label %originalBB802, label %originalBB802alteredBB

originalBB802:                                    ; preds = %3087, %originalBB802alteredBB
  %3096 = load i32, i32* @x.17
  %3097 = load i32, i32* @y.18
  %3098 = sub i32 %3096, 1
  %3099 = mul i32 %3096, %3098
  %3100 = urem i32 %3099, 2
  %3101 = icmp eq i32 %3100, 0
  %3102 = icmp slt i32 %3097, 10
  %3103 = or i1 %3101, %3102
  br i1 %3103, label %originalBBpart2804, label %originalBB802alteredBB

originalBBpart2804:                               ; preds = %originalBB802
  br label %3104

3104:                                             ; preds = %originalBBpart2804, %originalBBpart2658
  %3105 = load i32, i32* @x.17
  %3106 = load i32, i32* @y.18
  %3107 = sub i32 %3105, 1
  %3108 = mul i32 %3105, %3107
  %3109 = urem i32 %3108, 2
  %3110 = icmp eq i32 %3109, 0
  %3111 = icmp slt i32 %3106, 10
  %3112 = or i1 %3110, %3111
  br i1 %3112, label %originalBB806, label %originalBB806alteredBB

originalBB806:                                    ; preds = %3104, %originalBB806alteredBB
  %3113 = load i8, i8* %45, align 1, !dbg !1721
  %3114 = trunc i8 %3113 to i1, !dbg !1721
  %3115 = zext i1 %3114 to i8, !dbg !1722
  store i8 %3115, i8* %43, align 1, !dbg !1722
  %3116 = load i64, i64* %44, align 8, !dbg !1723
  %3117 = icmp ult i64 1, %3116, !dbg !1725
  %3118 = load i32, i32* @x.17
  %3119 = load i32, i32* @y.18
  %3120 = sub i32 %3118, 1
  %3121 = mul i32 %3118, %3120
  %3122 = urem i32 %3121, 2
  %3123 = icmp eq i32 %3122, 0
  %3124 = icmp slt i32 %3119, 10
  %3125 = or i1 %3123, %3124
  br i1 %3125, label %originalBBpart2808, label %originalBB806alteredBB

originalBBpart2808:                               ; preds = %originalBB806
  br i1 %3117, label %3132, label %3126, !dbg !1726

3126:                                             ; preds = %originalBBpart2808
  %3127 = load i8, i8* %33, align 1, !dbg !1727
  %3128 = trunc i8 %3127 to i1, !dbg !1727
  br i1 %3128, label %3129, label %4024, !dbg !1728

3129:                                             ; preds = %3126
  %3130 = load i8, i8* %45, align 1, !dbg !1729
  %3131 = trunc i8 %3130 to i1, !dbg !1729
  br i1 %3131, label %4024, label %3132, !dbg !1730

3132:                                             ; preds = %3129, %originalBBpart2808
  call void @llvm.dbg.declare(metadata i64* %50, metadata !1731, metadata !DIExpression()), !dbg !1733
  %3133 = load i32, i32* @x.17
  %3134 = load i32, i32* @y.18
  %3135 = sub i32 %3133, 1
  %3136 = mul i32 %3133, %3135
  %3137 = urem i32 %3136, 2
  %3138 = icmp eq i32 %3137, 0
  %3139 = icmp slt i32 %3134, 10
  %3140 = or i1 %3138, %3139
  br i1 %3140, label %originalBB810, label %originalBB810alteredBB

originalBB810:                                    ; preds = %3132, %originalBB810alteredBB
  %3141 = load i64, i64* %28, align 8, !dbg !1734
  %3142 = load i64, i64* %44, align 8, !dbg !1735
  %3143 = add i64 %3141, %3142, !dbg !1736
  store i64 %3143, i64* %50, align 8, !dbg !1733
  %3144 = load i32, i32* @x.17
  %3145 = load i32, i32* @y.18
  %3146 = sub i32 %3144, 1
  %3147 = mul i32 %3144, %3146
  %3148 = urem i32 %3147, 2
  %3149 = icmp eq i32 %3148, 0
  %3150 = icmp slt i32 %3145, 10
  %3151 = or i1 %3149, %3150
  br i1 %3151, label %originalBBpart2824, label %originalBB810alteredBB

originalBBpart2824:                               ; preds = %originalBB810
  br label %3152, !dbg !1737

3152:                                             ; preds = %originalBBpart21118, %originalBBpart2824
  %3153 = load i32, i32* @x.17
  %3154 = load i32, i32* @y.18
  %3155 = sub i32 %3153, 1
  %3156 = mul i32 %3153, %3155
  %3157 = urem i32 %3156, 2
  %3158 = icmp eq i32 %3157, 0
  %3159 = icmp slt i32 %3154, 10
  %3160 = or i1 %3158, %3159
  br i1 %3160, label %originalBB826, label %originalBB826alteredBB

originalBB826:                                    ; preds = %3152, %originalBB826alteredBB
  %3161 = load i8, i8* %33, align 1, !dbg !1738
  %3162 = trunc i8 %3161 to i1, !dbg !1738
  %3163 = load i32, i32* @x.17
  %3164 = load i32, i32* @y.18
  %3165 = sub i32 %3163, 1
  %3166 = mul i32 %3163, %3165
  %3167 = urem i32 %3166, 2
  %3168 = icmp eq i32 %3167, 0
  %3169 = icmp slt i32 %3164, 10
  %3170 = or i1 %3168, %3169
  br i1 %3170, label %originalBBpart2828, label %originalBB826alteredBB

originalBBpart2828:                               ; preds = %originalBB826
  br i1 %3162, label %3171, label %3660, !dbg !1743

3171:                                             ; preds = %originalBBpart2828
  %3172 = load i32, i32* @x.17
  %3173 = load i32, i32* @y.18
  %3174 = sub i32 %3172, 1
  %3175 = mul i32 %3172, %3174
  %3176 = urem i32 %3175, 2
  %3177 = icmp eq i32 %3176, 0
  %3178 = icmp slt i32 %3173, 10
  %3179 = or i1 %3177, %3178
  br i1 %3179, label %originalBB830, label %originalBB830alteredBB

originalBB830:                                    ; preds = %3171, %originalBB830alteredBB
  %3180 = load i8, i8* %45, align 1, !dbg !1744
  %3181 = trunc i8 %3180 to i1, !dbg !1744
  %3182 = load i32, i32* @x.17
  %3183 = load i32, i32* @y.18
  %3184 = sub i32 %3182, 1
  %3185 = mul i32 %3182, %3184
  %3186 = urem i32 %3185, 2
  %3187 = icmp eq i32 %3186, 0
  %3188 = icmp slt i32 %3183, 10
  %3189 = or i1 %3187, %3188
  br i1 %3189, label %originalBBpart2832, label %originalBB830alteredBB

originalBBpart2832:                               ; preds = %originalBB830
  br i1 %3181, label %3660, label %3190, !dbg !1745

3190:                                             ; preds = %originalBBpart2832
  br label %3191, !dbg !1746

3191:                                             ; preds = %3190
  %3192 = load i32, i32* @x.17
  %3193 = load i32, i32* @y.18
  %3194 = sub i32 %3192, 1
  %3195 = mul i32 %3192, %3194
  %3196 = urem i32 %3195, 2
  %3197 = icmp eq i32 %3196, 0
  %3198 = icmp slt i32 %3193, 10
  %3199 = or i1 %3197, %3198
  br i1 %3199, label %originalBB834, label %originalBB834alteredBB

originalBB834:                                    ; preds = %3191, %originalBB834alteredBB
  %3200 = load i8, i8* %35, align 1, !dbg !1748
  %3201 = trunc i8 %3200 to i1, !dbg !1748
  %3202 = load i32, i32* @x.17
  %3203 = load i32, i32* @y.18
  %3204 = sub i32 %3202, 1
  %3205 = mul i32 %3202, %3204
  %3206 = urem i32 %3205, 2
  %3207 = icmp eq i32 %3206, 0
  %3208 = icmp slt i32 %3203, 10
  %3209 = or i1 %3207, %3208
  br i1 %3209, label %originalBBpart2836, label %originalBB834alteredBB

originalBBpart2836:                               ; preds = %originalBB834
  br i1 %3201, label %3210, label %3211, !dbg !1751

3210:                                             ; preds = %originalBBpart2836
  br label %5134, !dbg !1748

3211:                                             ; preds = %originalBBpart2836
  %3212 = load i32, i32* @x.17
  %3213 = load i32, i32* @y.18
  %3214 = sub i32 %3212, 1
  %3215 = mul i32 %3212, %3214
  %3216 = urem i32 %3215, 2
  %3217 = icmp eq i32 %3216, 0
  %3218 = icmp slt i32 %3213, 10
  %3219 = or i1 %3217, %3218
  br i1 %3219, label %originalBB838, label %originalBB838alteredBB

originalBB838:                                    ; preds = %3211, %originalBB838alteredBB
  store i8 1, i8* %42, align 1, !dbg !1751
  %3220 = load i32, i32* %23, align 4, !dbg !1752
  %3221 = icmp eq i32 %3220, 2, !dbg !1752
  %3222 = load i32, i32* @x.17
  %3223 = load i32, i32* @y.18
  %3224 = sub i32 %3222, 1
  %3225 = mul i32 %3222, %3224
  %3226 = urem i32 %3225, 2
  %3227 = icmp eq i32 %3226, 0
  %3228 = icmp slt i32 %3223, 10
  %3229 = or i1 %3227, %3228
  br i1 %3229, label %originalBBpart2840, label %originalBB838alteredBB

originalBBpart2840:                               ; preds = %originalBB838
  br i1 %3221, label %3230, label %3414, !dbg !1752

3230:                                             ; preds = %originalBBpart2840
  %3231 = load i8, i8* %36, align 1, !dbg !1752
  %3232 = trunc i8 %3231 to i1, !dbg !1752
  br i1 %3232, label %3414, label %3233, !dbg !1751

3233:                                             ; preds = %3230
  %3234 = load i32, i32* @x.17
  %3235 = load i32, i32* @y.18
  %3236 = sub i32 %3234, 1
  %3237 = mul i32 %3234, %3236
  %3238 = urem i32 %3237, 2
  %3239 = icmp eq i32 %3238, 0
  %3240 = icmp slt i32 %3235, 10
  %3241 = or i1 %3239, %3240
  br i1 %3241, label %originalBB842, label %originalBB842alteredBB

originalBB842:                                    ; preds = %3233, %originalBB842alteredBB
  %3242 = load i32, i32* @x.17
  %3243 = load i32, i32* @y.18
  %3244 = sub i32 %3242, 1
  %3245 = mul i32 %3242, %3244
  %3246 = urem i32 %3245, 2
  %3247 = icmp eq i32 %3246, 0
  %3248 = icmp slt i32 %3243, 10
  %3249 = or i1 %3247, %3248
  br i1 %3249, label %originalBBpart2844, label %originalBB842alteredBB

originalBBpart2844:                               ; preds = %originalBB842
  br label %3250, !dbg !1754

3250:                                             ; preds = %originalBBpart2844
  %3251 = load i32, i32* @x.17
  %3252 = load i32, i32* @y.18
  %3253 = sub i32 %3251, 1
  %3254 = mul i32 %3251, %3253
  %3255 = urem i32 %3254, 2
  %3256 = icmp eq i32 %3255, 0
  %3257 = icmp slt i32 %3252, 10
  %3258 = or i1 %3256, %3257
  br i1 %3258, label %originalBB846, label %originalBB846alteredBB

originalBB846:                                    ; preds = %3250, %originalBB846alteredBB
  %3259 = load i64, i64* %29, align 8, !dbg !1756
  %3260 = load i64, i64* %20, align 8, !dbg !1756
  %3261 = icmp ult i64 %3259, %3260, !dbg !1756
  %3262 = load i32, i32* @x.17
  %3263 = load i32, i32* @y.18
  %3264 = sub i32 %3262, 1
  %3265 = mul i32 %3262, %3264
  %3266 = urem i32 %3265, 2
  %3267 = icmp eq i32 %3266, 0
  %3268 = icmp slt i32 %3263, 10
  %3269 = or i1 %3267, %3268
  br i1 %3269, label %originalBBpart2848, label %originalBB846alteredBB

originalBBpart2848:                               ; preds = %originalBB846
  br i1 %3261, label %3270, label %3274, !dbg !1759

3270:                                             ; preds = %originalBBpart2848
  %3271 = load i8*, i8** %19, align 8, !dbg !1756
  %3272 = load i64, i64* %29, align 8, !dbg !1756
  %3273 = getelementptr inbounds i8, i8* %3271, i64 %3272, !dbg !1756
  store i8 39, i8* %3273, align 1, !dbg !1756
  br label %3274, !dbg !1756

3274:                                             ; preds = %3270, %originalBBpart2848
  %3275 = load i32, i32* @x.17
  %3276 = load i32, i32* @y.18
  %3277 = sub i32 %3275, 1
  %3278 = mul i32 %3275, %3277
  %3279 = urem i32 %3278, 2
  %3280 = icmp eq i32 %3279, 0
  %3281 = icmp slt i32 %3276, 10
  %3282 = or i1 %3280, %3281
  br i1 %3282, label %originalBB850, label %originalBB850alteredBB

originalBB850:                                    ; preds = %3274, %originalBB850alteredBB
  %3283 = load i64, i64* %29, align 8, !dbg !1759
  %3284 = add i64 %3283, 1, !dbg !1759
  store i64 %3284, i64* %29, align 8, !dbg !1759
  %3285 = load i32, i32* @x.17
  %3286 = load i32, i32* @y.18
  %3287 = sub i32 %3285, 1
  %3288 = mul i32 %3285, %3287
  %3289 = urem i32 %3288, 2
  %3290 = icmp eq i32 %3289, 0
  %3291 = icmp slt i32 %3286, 10
  %3292 = or i1 %3290, %3291
  br i1 %3292, label %originalBBpart2853, label %originalBB850alteredBB

originalBBpart2853:                               ; preds = %originalBB850
  br label %3293, !dbg !1759

3293:                                             ; preds = %originalBBpart2853
  %3294 = load i32, i32* @x.17
  %3295 = load i32, i32* @y.18
  %3296 = sub i32 %3294, 1
  %3297 = mul i32 %3294, %3296
  %3298 = urem i32 %3297, 2
  %3299 = icmp eq i32 %3298, 0
  %3300 = icmp slt i32 %3295, 10
  %3301 = or i1 %3299, %3300
  br i1 %3301, label %originalBB855, label %originalBB855alteredBB

originalBB855:                                    ; preds = %3293, %originalBB855alteredBB
  %3302 = load i32, i32* @x.17
  %3303 = load i32, i32* @y.18
  %3304 = sub i32 %3302, 1
  %3305 = mul i32 %3302, %3304
  %3306 = urem i32 %3305, 2
  %3307 = icmp eq i32 %3306, 0
  %3308 = icmp slt i32 %3303, 10
  %3309 = or i1 %3307, %3308
  br i1 %3309, label %originalBBpart2857, label %originalBB855alteredBB

originalBBpart2857:                               ; preds = %originalBB855
  br label %3310, !dbg !1754

3310:                                             ; preds = %originalBBpart2857
  %3311 = load i32, i32* @x.17
  %3312 = load i32, i32* @y.18
  %3313 = sub i32 %3311, 1
  %3314 = mul i32 %3311, %3313
  %3315 = urem i32 %3314, 2
  %3316 = icmp eq i32 %3315, 0
  %3317 = icmp slt i32 %3312, 10
  %3318 = or i1 %3316, %3317
  br i1 %3318, label %originalBB859, label %originalBB859alteredBB

originalBB859:                                    ; preds = %3310, %originalBB859alteredBB
  %3319 = load i64, i64* %29, align 8, !dbg !1760
  %3320 = load i64, i64* %20, align 8, !dbg !1760
  %3321 = icmp ult i64 %3319, %3320, !dbg !1760
  %3322 = load i32, i32* @x.17
  %3323 = load i32, i32* @y.18
  %3324 = sub i32 %3322, 1
  %3325 = mul i32 %3322, %3324
  %3326 = urem i32 %3325, 2
  %3327 = icmp eq i32 %3326, 0
  %3328 = icmp slt i32 %3323, 10
  %3329 = or i1 %3327, %3328
  br i1 %3329, label %originalBBpart2861, label %originalBB859alteredBB

originalBBpart2861:                               ; preds = %originalBB859
  br i1 %3321, label %3330, label %3334, !dbg !1763

3330:                                             ; preds = %originalBBpart2861
  %3331 = load i8*, i8** %19, align 8, !dbg !1760
  %3332 = load i64, i64* %29, align 8, !dbg !1760
  %3333 = getelementptr inbounds i8, i8* %3331, i64 %3332, !dbg !1760
  store i8 36, i8* %3333, align 1, !dbg !1760
  br label %3334, !dbg !1760

3334:                                             ; preds = %3330, %originalBBpart2861
  %3335 = load i64, i64* %29, align 8, !dbg !1763
  %3336 = add i64 %3335, 1, !dbg !1763
  store i64 %3336, i64* %29, align 8, !dbg !1763
  br label %3337, !dbg !1763

3337:                                             ; preds = %3334
  %3338 = load i32, i32* @x.17
  %3339 = load i32, i32* @y.18
  %3340 = sub i32 %3338, 1
  %3341 = mul i32 %3338, %3340
  %3342 = urem i32 %3341, 2
  %3343 = icmp eq i32 %3342, 0
  %3344 = icmp slt i32 %3339, 10
  %3345 = or i1 %3343, %3344
  br i1 %3345, label %originalBB863, label %originalBB863alteredBB

originalBB863:                                    ; preds = %3337, %originalBB863alteredBB
  %3346 = load i32, i32* @x.17
  %3347 = load i32, i32* @y.18
  %3348 = sub i32 %3346, 1
  %3349 = mul i32 %3346, %3348
  %3350 = urem i32 %3349, 2
  %3351 = icmp eq i32 %3350, 0
  %3352 = icmp slt i32 %3347, 10
  %3353 = or i1 %3351, %3352
  br i1 %3353, label %originalBBpart2865, label %originalBB863alteredBB

originalBBpart2865:                               ; preds = %originalBB863
  br label %3354, !dbg !1754

3354:                                             ; preds = %originalBBpart2865
  %3355 = load i32, i32* @x.17
  %3356 = load i32, i32* @y.18
  %3357 = sub i32 %3355, 1
  %3358 = mul i32 %3355, %3357
  %3359 = urem i32 %3358, 2
  %3360 = icmp eq i32 %3359, 0
  %3361 = icmp slt i32 %3356, 10
  %3362 = or i1 %3360, %3361
  br i1 %3362, label %originalBB867, label %originalBB867alteredBB

originalBB867:                                    ; preds = %3354, %originalBB867alteredBB
  %3363 = load i64, i64* %29, align 8, !dbg !1764
  %3364 = load i64, i64* %20, align 8, !dbg !1764
  %3365 = icmp ult i64 %3363, %3364, !dbg !1764
  %3366 = load i32, i32* @x.17
  %3367 = load i32, i32* @y.18
  %3368 = sub i32 %3366, 1
  %3369 = mul i32 %3366, %3368
  %3370 = urem i32 %3369, 2
  %3371 = icmp eq i32 %3370, 0
  %3372 = icmp slt i32 %3367, 10
  %3373 = or i1 %3371, %3372
  br i1 %3373, label %originalBBpart2869, label %originalBB867alteredBB

originalBBpart2869:                               ; preds = %originalBB867
  br i1 %3365, label %3374, label %3378, !dbg !1767

3374:                                             ; preds = %originalBBpart2869
  %3375 = load i8*, i8** %19, align 8, !dbg !1764
  %3376 = load i64, i64* %29, align 8, !dbg !1764
  %3377 = getelementptr inbounds i8, i8* %3375, i64 %3376, !dbg !1764
  store i8 39, i8* %3377, align 1, !dbg !1764
  br label %3378, !dbg !1764

3378:                                             ; preds = %3374, %originalBBpart2869
  %3379 = load i32, i32* @x.17
  %3380 = load i32, i32* @y.18
  %3381 = sub i32 %3379, 1
  %3382 = mul i32 %3379, %3381
  %3383 = urem i32 %3382, 2
  %3384 = icmp eq i32 %3383, 0
  %3385 = icmp slt i32 %3380, 10
  %3386 = or i1 %3384, %3385
  br i1 %3386, label %originalBB871, label %originalBB871alteredBB

originalBB871:                                    ; preds = %3378, %originalBB871alteredBB
  %3387 = load i64, i64* %29, align 8, !dbg !1767
  %3388 = add i64 %3387, 1, !dbg !1767
  store i64 %3388, i64* %29, align 8, !dbg !1767
  %3389 = load i32, i32* @x.17
  %3390 = load i32, i32* @y.18
  %3391 = sub i32 %3389, 1
  %3392 = mul i32 %3389, %3391
  %3393 = urem i32 %3392, 2
  %3394 = icmp eq i32 %3393, 0
  %3395 = icmp slt i32 %3390, 10
  %3396 = or i1 %3394, %3395
  br i1 %3396, label %originalBBpart2878, label %originalBB871alteredBB

originalBBpart2878:                               ; preds = %originalBB871
  br label %3397, !dbg !1767

3397:                                             ; preds = %originalBBpart2878
  %3398 = load i32, i32* @x.17
  %3399 = load i32, i32* @y.18
  %3400 = sub i32 %3398, 1
  %3401 = mul i32 %3398, %3400
  %3402 = urem i32 %3401, 2
  %3403 = icmp eq i32 %3402, 0
  %3404 = icmp slt i32 %3399, 10
  %3405 = or i1 %3403, %3404
  br i1 %3405, label %originalBB880, label %originalBB880alteredBB

originalBB880:                                    ; preds = %3397, %originalBB880alteredBB
  store i8 1, i8* %36, align 1, !dbg !1754
  %3406 = load i32, i32* @x.17
  %3407 = load i32, i32* @y.18
  %3408 = sub i32 %3406, 1
  %3409 = mul i32 %3406, %3408
  %3410 = urem i32 %3409, 2
  %3411 = icmp eq i32 %3410, 0
  %3412 = icmp slt i32 %3407, 10
  %3413 = or i1 %3411, %3412
  br i1 %3413, label %originalBBpart2882, label %originalBB880alteredBB

originalBBpart2882:                               ; preds = %originalBB880
  br label %3414, !dbg !1754

3414:                                             ; preds = %originalBBpart2882, %3230, %originalBBpart2840
  %3415 = load i32, i32* @x.17
  %3416 = load i32, i32* @y.18
  %3417 = sub i32 %3415, 1
  %3418 = mul i32 %3415, %3417
  %3419 = urem i32 %3418, 2
  %3420 = icmp eq i32 %3419, 0
  %3421 = icmp slt i32 %3416, 10
  %3422 = or i1 %3420, %3421
  br i1 %3422, label %originalBB884, label %originalBB884alteredBB

originalBB884:                                    ; preds = %3414, %originalBB884alteredBB
  %3423 = load i32, i32* @x.17
  %3424 = load i32, i32* @y.18
  %3425 = sub i32 %3423, 1
  %3426 = mul i32 %3423, %3425
  %3427 = urem i32 %3426, 2
  %3428 = icmp eq i32 %3427, 0
  %3429 = icmp slt i32 %3424, 10
  %3430 = or i1 %3428, %3429
  br i1 %3430, label %originalBBpart2886, label %originalBB884alteredBB

originalBBpart2886:                               ; preds = %originalBB884
  br label %3431, !dbg !1751

3431:                                             ; preds = %originalBBpart2886
  %3432 = load i64, i64* %29, align 8, !dbg !1768
  %3433 = load i64, i64* %20, align 8, !dbg !1768
  %3434 = icmp ult i64 %3432, %3433, !dbg !1768
  br i1 %3434, label %3435, label %3439, !dbg !1771

3435:                                             ; preds = %3431
  %3436 = load i8*, i8** %19, align 8, !dbg !1768
  %3437 = load i64, i64* %29, align 8, !dbg !1768
  %3438 = getelementptr inbounds i8, i8* %3436, i64 %3437, !dbg !1768
  store i8 92, i8* %3438, align 1, !dbg !1768
  br label %3439, !dbg !1768

3439:                                             ; preds = %3435, %3431
  %3440 = load i32, i32* @x.17
  %3441 = load i32, i32* @y.18
  %3442 = sub i32 %3440, 1
  %3443 = mul i32 %3440, %3442
  %3444 = urem i32 %3443, 2
  %3445 = icmp eq i32 %3444, 0
  %3446 = icmp slt i32 %3441, 10
  %3447 = or i1 %3445, %3446
  br i1 %3447, label %originalBB888, label %originalBB888alteredBB

originalBB888:                                    ; preds = %3439, %originalBB888alteredBB
  %3448 = load i64, i64* %29, align 8, !dbg !1771
  %3449 = add i64 %3448, 1, !dbg !1771
  store i64 %3449, i64* %29, align 8, !dbg !1771
  %3450 = load i32, i32* @x.17
  %3451 = load i32, i32* @y.18
  %3452 = sub i32 %3450, 1
  %3453 = mul i32 %3450, %3452
  %3454 = urem i32 %3453, 2
  %3455 = icmp eq i32 %3454, 0
  %3456 = icmp slt i32 %3451, 10
  %3457 = or i1 %3455, %3456
  br i1 %3457, label %originalBBpart2900, label %originalBB888alteredBB

originalBBpart2900:                               ; preds = %originalBB888
  br label %3458, !dbg !1771

3458:                                             ; preds = %originalBBpart2900
  %3459 = load i32, i32* @x.17
  %3460 = load i32, i32* @y.18
  %3461 = sub i32 %3459, 1
  %3462 = mul i32 %3459, %3461
  %3463 = urem i32 %3462, 2
  %3464 = icmp eq i32 %3463, 0
  %3465 = icmp slt i32 %3460, 10
  %3466 = or i1 %3464, %3465
  br i1 %3466, label %originalBB902, label %originalBB902alteredBB

originalBB902:                                    ; preds = %3458, %originalBB902alteredBB
  %3467 = load i32, i32* @x.17
  %3468 = load i32, i32* @y.18
  %3469 = sub i32 %3467, 1
  %3470 = mul i32 %3467, %3469
  %3471 = urem i32 %3470, 2
  %3472 = icmp eq i32 %3471, 0
  %3473 = icmp slt i32 %3468, 10
  %3474 = or i1 %3472, %3473
  br i1 %3474, label %originalBBpart2904, label %originalBB902alteredBB

originalBBpart2904:                               ; preds = %originalBB902
  br label %3475, !dbg !1751

3475:                                             ; preds = %originalBBpart2904
  %3476 = load i32, i32* @x.17
  %3477 = load i32, i32* @y.18
  %3478 = sub i32 %3476, 1
  %3479 = mul i32 %3476, %3478
  %3480 = urem i32 %3479, 2
  %3481 = icmp eq i32 %3480, 0
  %3482 = icmp slt i32 %3477, 10
  %3483 = or i1 %3481, %3482
  br i1 %3483, label %originalBB906, label %originalBB906alteredBB

originalBB906:                                    ; preds = %3475, %originalBB906alteredBB
  %3484 = load i32, i32* @x.17
  %3485 = load i32, i32* @y.18
  %3486 = sub i32 %3484, 1
  %3487 = mul i32 %3484, %3486
  %3488 = urem i32 %3487, 2
  %3489 = icmp eq i32 %3488, 0
  %3490 = icmp slt i32 %3485, 10
  %3491 = or i1 %3489, %3490
  br i1 %3491, label %originalBBpart2908, label %originalBB906alteredBB

originalBBpart2908:                               ; preds = %originalBB906
  br label %3492, !dbg !1772

3492:                                             ; preds = %originalBBpart2908
  %3493 = load i32, i32* @x.17
  %3494 = load i32, i32* @y.18
  %3495 = sub i32 %3493, 1
  %3496 = mul i32 %3493, %3495
  %3497 = urem i32 %3496, 2
  %3498 = icmp eq i32 %3497, 0
  %3499 = icmp slt i32 %3494, 10
  %3500 = or i1 %3498, %3499
  br i1 %3500, label %originalBB910, label %originalBB910alteredBB

originalBB910:                                    ; preds = %3492, %originalBB910alteredBB
  %3501 = load i64, i64* %29, align 8, !dbg !1773
  %3502 = load i64, i64* %20, align 8, !dbg !1773
  %3503 = icmp ult i64 %3501, %3502, !dbg !1773
  %3504 = load i32, i32* @x.17
  %3505 = load i32, i32* @y.18
  %3506 = sub i32 %3504, 1
  %3507 = mul i32 %3504, %3506
  %3508 = urem i32 %3507, 2
  %3509 = icmp eq i32 %3508, 0
  %3510 = icmp slt i32 %3505, 10
  %3511 = or i1 %3509, %3510
  br i1 %3511, label %originalBBpart2912, label %originalBB910alteredBB

originalBBpart2912:                               ; preds = %originalBB910
  br i1 %3503, label %3512, label %3537, !dbg !1776

3512:                                             ; preds = %originalBBpart2912
  %3513 = load i32, i32* @x.17
  %3514 = load i32, i32* @y.18
  %3515 = sub i32 %3513, 1
  %3516 = mul i32 %3513, %3515
  %3517 = urem i32 %3516, 2
  %3518 = icmp eq i32 %3517, 0
  %3519 = icmp slt i32 %3514, 10
  %3520 = or i1 %3518, %3519
  br i1 %3520, label %originalBB914, label %originalBB914alteredBB

originalBB914:                                    ; preds = %3512, %originalBB914alteredBB
  %3521 = load i8, i8* %39, align 1, !dbg !1773
  %3522 = zext i8 %3521 to i32, !dbg !1773
  %3523 = ashr i32 %3522, 6, !dbg !1773
  %3524 = add nsw i32 48, %3523, !dbg !1773
  %3525 = trunc i32 %3524 to i8, !dbg !1773
  %3526 = load i8*, i8** %19, align 8, !dbg !1773
  %3527 = load i64, i64* %29, align 8, !dbg !1773
  %3528 = getelementptr inbounds i8, i8* %3526, i64 %3527, !dbg !1773
  store i8 %3525, i8* %3528, align 1, !dbg !1773
  %3529 = load i32, i32* @x.17
  %3530 = load i32, i32* @y.18
  %3531 = sub i32 %3529, 1
  %3532 = mul i32 %3529, %3531
  %3533 = urem i32 %3532, 2
  %3534 = icmp eq i32 %3533, 0
  %3535 = icmp slt i32 %3530, 10
  %3536 = or i1 %3534, %3535
  br i1 %3536, label %originalBBpart2935, label %originalBB914alteredBB

originalBBpart2935:                               ; preds = %originalBB914
  br label %3537, !dbg !1773

3537:                                             ; preds = %originalBBpart2935, %originalBBpart2912
  %3538 = load i32, i32* @x.17
  %3539 = load i32, i32* @y.18
  %3540 = sub i32 %3538, 1
  %3541 = mul i32 %3538, %3540
  %3542 = urem i32 %3541, 2
  %3543 = icmp eq i32 %3542, 0
  %3544 = icmp slt i32 %3539, 10
  %3545 = or i1 %3543, %3544
  br i1 %3545, label %originalBB937, label %originalBB937alteredBB

originalBB937:                                    ; preds = %3537, %originalBB937alteredBB
  %3546 = load i64, i64* %29, align 8, !dbg !1776
  %3547 = add i64 %3546, 1, !dbg !1776
  store i64 %3547, i64* %29, align 8, !dbg !1776
  %3548 = load i32, i32* @x.17
  %3549 = load i32, i32* @y.18
  %3550 = sub i32 %3548, 1
  %3551 = mul i32 %3548, %3550
  %3552 = urem i32 %3551, 2
  %3553 = icmp eq i32 %3552, 0
  %3554 = icmp slt i32 %3549, 10
  %3555 = or i1 %3553, %3554
  br i1 %3555, label %originalBBpart2954, label %originalBB937alteredBB

originalBBpart2954:                               ; preds = %originalBB937
  br label %3556, !dbg !1776

3556:                                             ; preds = %originalBBpart2954
  %3557 = load i32, i32* @x.17
  %3558 = load i32, i32* @y.18
  %3559 = sub i32 %3557, 1
  %3560 = mul i32 %3557, %3559
  %3561 = urem i32 %3560, 2
  %3562 = icmp eq i32 %3561, 0
  %3563 = icmp slt i32 %3558, 10
  %3564 = or i1 %3562, %3563
  br i1 %3564, label %originalBB956, label %originalBB956alteredBB

originalBB956:                                    ; preds = %3556, %originalBB956alteredBB
  %3565 = load i32, i32* @x.17
  %3566 = load i32, i32* @y.18
  %3567 = sub i32 %3565, 1
  %3568 = mul i32 %3565, %3567
  %3569 = urem i32 %3568, 2
  %3570 = icmp eq i32 %3569, 0
  %3571 = icmp slt i32 %3566, 10
  %3572 = or i1 %3570, %3571
  br i1 %3572, label %originalBBpart2958, label %originalBB956alteredBB

originalBBpart2958:                               ; preds = %originalBB956
  br label %3573, !dbg !1777

3573:                                             ; preds = %originalBBpart2958
  %3574 = load i32, i32* @x.17
  %3575 = load i32, i32* @y.18
  %3576 = sub i32 %3574, 1
  %3577 = mul i32 %3574, %3576
  %3578 = urem i32 %3577, 2
  %3579 = icmp eq i32 %3578, 0
  %3580 = icmp slt i32 %3575, 10
  %3581 = or i1 %3579, %3580
  br i1 %3581, label %originalBB960, label %originalBB960alteredBB

originalBB960:                                    ; preds = %3573, %originalBB960alteredBB
  %3582 = load i64, i64* %29, align 8, !dbg !1778
  %3583 = load i64, i64* %20, align 8, !dbg !1778
  %3584 = icmp ult i64 %3582, %3583, !dbg !1778
  %3585 = load i32, i32* @x.17
  %3586 = load i32, i32* @y.18
  %3587 = sub i32 %3585, 1
  %3588 = mul i32 %3585, %3587
  %3589 = urem i32 %3588, 2
  %3590 = icmp eq i32 %3589, 0
  %3591 = icmp slt i32 %3586, 10
  %3592 = or i1 %3590, %3591
  br i1 %3592, label %originalBBpart2962, label %originalBB960alteredBB

originalBBpart2962:                               ; preds = %originalBB960
  br i1 %3584, label %3593, label %3619, !dbg !1781

3593:                                             ; preds = %originalBBpart2962
  %3594 = load i32, i32* @x.17
  %3595 = load i32, i32* @y.18
  %3596 = sub i32 %3594, 1
  %3597 = mul i32 %3594, %3596
  %3598 = urem i32 %3597, 2
  %3599 = icmp eq i32 %3598, 0
  %3600 = icmp slt i32 %3595, 10
  %3601 = or i1 %3599, %3600
  br i1 %3601, label %originalBB964, label %originalBB964alteredBB

originalBB964:                                    ; preds = %3593, %originalBB964alteredBB
  %3602 = load i8, i8* %39, align 1, !dbg !1778
  %3603 = zext i8 %3602 to i32, !dbg !1778
  %3604 = ashr i32 %3603, 3, !dbg !1778
  %3605 = and i32 %3604, 7, !dbg !1778
  %3606 = add nsw i32 48, %3605, !dbg !1778
  %3607 = trunc i32 %3606 to i8, !dbg !1778
  %3608 = load i8*, i8** %19, align 8, !dbg !1778
  %3609 = load i64, i64* %29, align 8, !dbg !1778
  %3610 = getelementptr inbounds i8, i8* %3608, i64 %3609, !dbg !1778
  store i8 %3607, i8* %3610, align 1, !dbg !1778
  %3611 = load i32, i32* @x.17
  %3612 = load i32, i32* @y.18
  %3613 = sub i32 %3611, 1
  %3614 = mul i32 %3611, %3613
  %3615 = urem i32 %3614, 2
  %3616 = icmp eq i32 %3615, 0
  %3617 = icmp slt i32 %3612, 10
  %3618 = or i1 %3616, %3617
  br i1 %3618, label %originalBBpart2983, label %originalBB964alteredBB

originalBBpart2983:                               ; preds = %originalBB964
  br label %3619, !dbg !1778

3619:                                             ; preds = %originalBBpart2983, %originalBBpart2962
  %3620 = load i32, i32* @x.17
  %3621 = load i32, i32* @y.18
  %3622 = sub i32 %3620, 1
  %3623 = mul i32 %3620, %3622
  %3624 = urem i32 %3623, 2
  %3625 = icmp eq i32 %3624, 0
  %3626 = icmp slt i32 %3621, 10
  %3627 = or i1 %3625, %3626
  br i1 %3627, label %originalBB985, label %originalBB985alteredBB

originalBB985:                                    ; preds = %3619, %originalBB985alteredBB
  %3628 = load i64, i64* %29, align 8, !dbg !1781
  %3629 = add i64 %3628, 1, !dbg !1781
  store i64 %3629, i64* %29, align 8, !dbg !1781
  %3630 = load i32, i32* @x.17
  %3631 = load i32, i32* @y.18
  %3632 = sub i32 %3630, 1
  %3633 = mul i32 %3630, %3632
  %3634 = urem i32 %3633, 2
  %3635 = icmp eq i32 %3634, 0
  %3636 = icmp slt i32 %3631, 10
  %3637 = or i1 %3635, %3636
  br i1 %3637, label %originalBBpart2995, label %originalBB985alteredBB

originalBBpart2995:                               ; preds = %originalBB985
  br label %3638, !dbg !1781

3638:                                             ; preds = %originalBBpart2995
  %3639 = load i32, i32* @x.17
  %3640 = load i32, i32* @y.18
  %3641 = sub i32 %3639, 1
  %3642 = mul i32 %3639, %3641
  %3643 = urem i32 %3642, 2
  %3644 = icmp eq i32 %3643, 0
  %3645 = icmp slt i32 %3640, 10
  %3646 = or i1 %3644, %3645
  br i1 %3646, label %originalBB997, label %originalBB997alteredBB

originalBB997:                                    ; preds = %3638, %originalBB997alteredBB
  %3647 = load i8, i8* %39, align 1, !dbg !1782
  %3648 = zext i8 %3647 to i32, !dbg !1782
  %3649 = and i32 %3648, 7, !dbg !1783
  %3650 = add nsw i32 48, %3649, !dbg !1784
  %3651 = trunc i32 %3650 to i8, !dbg !1785
  store i8 %3651, i8* %39, align 1, !dbg !1786
  %3652 = load i32, i32* @x.17
  %3653 = load i32, i32* @y.18
  %3654 = sub i32 %3652, 1
  %3655 = mul i32 %3652, %3654
  %3656 = urem i32 %3655, 2
  %3657 = icmp eq i32 %3656, 0
  %3658 = icmp slt i32 %3653, 10
  %3659 = or i1 %3657, %3658
  br i1 %3659, label %originalBBpart21021, label %originalBB997alteredBB

originalBBpart21021:                              ; preds = %originalBB997
  br label %3741, !dbg !1787

3660:                                             ; preds = %originalBBpart2832, %originalBBpart2828
  %3661 = load i8, i8* %41, align 1, !dbg !1788
  %3662 = trunc i8 %3661 to i1, !dbg !1788
  br i1 %3662, label %3663, label %3740, !dbg !1790

3663:                                             ; preds = %3660
  %3664 = load i32, i32* @x.17
  %3665 = load i32, i32* @y.18
  %3666 = sub i32 %3664, 1
  %3667 = mul i32 %3664, %3666
  %3668 = urem i32 %3667, 2
  %3669 = icmp eq i32 %3668, 0
  %3670 = icmp slt i32 %3665, 10
  %3671 = or i1 %3669, %3670
  br i1 %3671, label %originalBB1023, label %originalBB1023alteredBB

originalBB1023:                                   ; preds = %3663, %originalBB1023alteredBB
  %3672 = load i32, i32* @x.17
  %3673 = load i32, i32* @y.18
  %3674 = sub i32 %3672, 1
  %3675 = mul i32 %3672, %3674
  %3676 = urem i32 %3675, 2
  %3677 = icmp eq i32 %3676, 0
  %3678 = icmp slt i32 %3673, 10
  %3679 = or i1 %3677, %3678
  br i1 %3679, label %originalBBpart21025, label %originalBB1023alteredBB

originalBBpart21025:                              ; preds = %originalBB1023
  br label %3680, !dbg !1791

3680:                                             ; preds = %originalBBpart21025
  %3681 = load i32, i32* @x.17
  %3682 = load i32, i32* @y.18
  %3683 = sub i32 %3681, 1
  %3684 = mul i32 %3681, %3683
  %3685 = urem i32 %3684, 2
  %3686 = icmp eq i32 %3685, 0
  %3687 = icmp slt i32 %3682, 10
  %3688 = or i1 %3686, %3687
  br i1 %3688, label %originalBB1027, label %originalBB1027alteredBB

originalBB1027:                                   ; preds = %3680, %originalBB1027alteredBB
  %3689 = load i64, i64* %29, align 8, !dbg !1793
  %3690 = load i64, i64* %20, align 8, !dbg !1793
  %3691 = icmp ult i64 %3689, %3690, !dbg !1793
  %3692 = load i32, i32* @x.17
  %3693 = load i32, i32* @y.18
  %3694 = sub i32 %3692, 1
  %3695 = mul i32 %3692, %3694
  %3696 = urem i32 %3695, 2
  %3697 = icmp eq i32 %3696, 0
  %3698 = icmp slt i32 %3693, 10
  %3699 = or i1 %3697, %3698
  br i1 %3699, label %originalBBpart21029, label %originalBB1027alteredBB

originalBBpart21029:                              ; preds = %originalBB1027
  br i1 %3691, label %3700, label %3720, !dbg !1796

3700:                                             ; preds = %originalBBpart21029
  %3701 = load i32, i32* @x.17
  %3702 = load i32, i32* @y.18
  %3703 = sub i32 %3701, 1
  %3704 = mul i32 %3701, %3703
  %3705 = urem i32 %3704, 2
  %3706 = icmp eq i32 %3705, 0
  %3707 = icmp slt i32 %3702, 10
  %3708 = or i1 %3706, %3707
  br i1 %3708, label %originalBB1031, label %originalBB1031alteredBB

originalBB1031:                                   ; preds = %3700, %originalBB1031alteredBB
  %3709 = load i8*, i8** %19, align 8, !dbg !1793
  %3710 = load i64, i64* %29, align 8, !dbg !1793
  %3711 = getelementptr inbounds i8, i8* %3709, i64 %3710, !dbg !1793
  store i8 92, i8* %3711, align 1, !dbg !1793
  %3712 = load i32, i32* @x.17
  %3713 = load i32, i32* @y.18
  %3714 = sub i32 %3712, 1
  %3715 = mul i32 %3712, %3714
  %3716 = urem i32 %3715, 2
  %3717 = icmp eq i32 %3716, 0
  %3718 = icmp slt i32 %3713, 10
  %3719 = or i1 %3717, %3718
  br i1 %3719, label %originalBBpart21033, label %originalBB1031alteredBB

originalBBpart21033:                              ; preds = %originalBB1031
  br label %3720, !dbg !1793

3720:                                             ; preds = %originalBBpart21033, %originalBBpart21029
  %3721 = load i32, i32* @x.17
  %3722 = load i32, i32* @y.18
  %3723 = sub i32 %3721, 1
  %3724 = mul i32 %3721, %3723
  %3725 = urem i32 %3724, 2
  %3726 = icmp eq i32 %3725, 0
  %3727 = icmp slt i32 %3722, 10
  %3728 = or i1 %3726, %3727
  br i1 %3728, label %originalBB1035, label %originalBB1035alteredBB

originalBB1035:                                   ; preds = %3720, %originalBB1035alteredBB
  %3729 = load i64, i64* %29, align 8, !dbg !1796
  %3730 = add i64 %3729, 1, !dbg !1796
  store i64 %3730, i64* %29, align 8, !dbg !1796
  %3731 = load i32, i32* @x.17
  %3732 = load i32, i32* @y.18
  %3733 = sub i32 %3731, 1
  %3734 = mul i32 %3731, %3733
  %3735 = urem i32 %3734, 2
  %3736 = icmp eq i32 %3735, 0
  %3737 = icmp slt i32 %3732, 10
  %3738 = or i1 %3736, %3737
  br i1 %3738, label %originalBBpart21039, label %originalBB1035alteredBB

originalBBpart21039:                              ; preds = %originalBB1035
  br label %3739, !dbg !1796

3739:                                             ; preds = %originalBBpart21039
  store i8 0, i8* %41, align 1, !dbg !1797
  br label %3740, !dbg !1798

3740:                                             ; preds = %3739, %3660
  br label %3741

3741:                                             ; preds = %3740, %originalBBpart21021
  %3742 = load i32, i32* @x.17
  %3743 = load i32, i32* @y.18
  %3744 = sub i32 %3742, 1
  %3745 = mul i32 %3742, %3744
  %3746 = urem i32 %3745, 2
  %3747 = icmp eq i32 %3746, 0
  %3748 = icmp slt i32 %3743, 10
  %3749 = or i1 %3747, %3748
  br i1 %3749, label %originalBB1041, label %originalBB1041alteredBB

originalBB1041:                                   ; preds = %3741, %originalBB1041alteredBB
  %3750 = load i64, i64* %50, align 8, !dbg !1799
  %3751 = load i64, i64* %28, align 8, !dbg !1801
  %3752 = add i64 %3751, 1, !dbg !1802
  %3753 = icmp ule i64 %3750, %3752, !dbg !1803
  %3754 = load i32, i32* @x.17
  %3755 = load i32, i32* @y.18
  %3756 = sub i32 %3754, 1
  %3757 = mul i32 %3754, %3756
  %3758 = urem i32 %3757, 2
  %3759 = icmp eq i32 %3758, 0
  %3760 = icmp slt i32 %3755, 10
  %3761 = or i1 %3759, %3760
  br i1 %3761, label %originalBBpart21055, label %originalBB1041alteredBB

originalBBpart21055:                              ; preds = %originalBB1041
  br i1 %3753, label %3762, label %3763, !dbg !1804

3762:                                             ; preds = %originalBBpart21055
  br label %4007, !dbg !1805

3763:                                             ; preds = %originalBBpart21055
  %3764 = load i32, i32* @x.17
  %3765 = load i32, i32* @y.18
  %3766 = sub i32 %3764, 1
  %3767 = mul i32 %3764, %3766
  %3768 = urem i32 %3767, 2
  %3769 = icmp eq i32 %3768, 0
  %3770 = icmp slt i32 %3765, 10
  %3771 = or i1 %3769, %3770
  br i1 %3771, label %originalBB1057, label %originalBB1057alteredBB

originalBB1057:                                   ; preds = %3763, %originalBB1057alteredBB
  %3772 = load i32, i32* @x.17
  %3773 = load i32, i32* @y.18
  %3774 = sub i32 %3772, 1
  %3775 = mul i32 %3772, %3774
  %3776 = urem i32 %3775, 2
  %3777 = icmp eq i32 %3776, 0
  %3778 = icmp slt i32 %3773, 10
  %3779 = or i1 %3777, %3778
  br i1 %3779, label %originalBBpart21059, label %originalBB1057alteredBB

originalBBpart21059:                              ; preds = %originalBB1057
  br label %3780, !dbg !1806

3780:                                             ; preds = %originalBBpart21059
  %3781 = load i8, i8* %36, align 1, !dbg !1807
  %3782 = trunc i8 %3781 to i1, !dbg !1807
  br i1 %3782, label %3783, label %3891, !dbg !1807

3783:                                             ; preds = %3780
  %3784 = load i8, i8* %42, align 1, !dbg !1807
  %3785 = trunc i8 %3784 to i1, !dbg !1807
  br i1 %3785, label %3891, label %3786, !dbg !1810

3786:                                             ; preds = %3783
  %3787 = load i32, i32* @x.17
  %3788 = load i32, i32* @y.18
  %3789 = sub i32 %3787, 1
  %3790 = mul i32 %3787, %3789
  %3791 = urem i32 %3790, 2
  %3792 = icmp eq i32 %3791, 0
  %3793 = icmp slt i32 %3788, 10
  %3794 = or i1 %3792, %3793
  br i1 %3794, label %originalBB1061, label %originalBB1061alteredBB

originalBB1061:                                   ; preds = %3786, %originalBB1061alteredBB
  %3795 = load i32, i32* @x.17
  %3796 = load i32, i32* @y.18
  %3797 = sub i32 %3795, 1
  %3798 = mul i32 %3795, %3797
  %3799 = urem i32 %3798, 2
  %3800 = icmp eq i32 %3799, 0
  %3801 = icmp slt i32 %3796, 10
  %3802 = or i1 %3800, %3801
  br i1 %3802, label %originalBBpart21063, label %originalBB1061alteredBB

originalBBpart21063:                              ; preds = %originalBB1061
  br label %3803, !dbg !1811

3803:                                             ; preds = %originalBBpart21063
  %3804 = load i32, i32* @x.17
  %3805 = load i32, i32* @y.18
  %3806 = sub i32 %3804, 1
  %3807 = mul i32 %3804, %3806
  %3808 = urem i32 %3807, 2
  %3809 = icmp eq i32 %3808, 0
  %3810 = icmp slt i32 %3805, 10
  %3811 = or i1 %3809, %3810
  br i1 %3811, label %originalBB1065, label %originalBB1065alteredBB

originalBB1065:                                   ; preds = %3803, %originalBB1065alteredBB
  %3812 = load i64, i64* %29, align 8, !dbg !1813
  %3813 = load i64, i64* %20, align 8, !dbg !1813
  %3814 = icmp ult i64 %3812, %3813, !dbg !1813
  %3815 = load i32, i32* @x.17
  %3816 = load i32, i32* @y.18
  %3817 = sub i32 %3815, 1
  %3818 = mul i32 %3815, %3817
  %3819 = urem i32 %3818, 2
  %3820 = icmp eq i32 %3819, 0
  %3821 = icmp slt i32 %3816, 10
  %3822 = or i1 %3820, %3821
  br i1 %3822, label %originalBBpart21067, label %originalBB1065alteredBB

originalBBpart21067:                              ; preds = %originalBB1065
  br i1 %3814, label %3823, label %3827, !dbg !1816

3823:                                             ; preds = %originalBBpart21067
  %3824 = load i8*, i8** %19, align 8, !dbg !1813
  %3825 = load i64, i64* %29, align 8, !dbg !1813
  %3826 = getelementptr inbounds i8, i8* %3824, i64 %3825, !dbg !1813
  store i8 39, i8* %3826, align 1, !dbg !1813
  br label %3827, !dbg !1813

3827:                                             ; preds = %3823, %originalBBpart21067
  %3828 = load i32, i32* @x.17
  %3829 = load i32, i32* @y.18
  %3830 = sub i32 %3828, 1
  %3831 = mul i32 %3828, %3830
  %3832 = urem i32 %3831, 2
  %3833 = icmp eq i32 %3832, 0
  %3834 = icmp slt i32 %3829, 10
  %3835 = or i1 %3833, %3834
  br i1 %3835, label %originalBB1069, label %originalBB1069alteredBB

originalBB1069:                                   ; preds = %3827, %originalBB1069alteredBB
  %3836 = load i64, i64* %29, align 8, !dbg !1816
  %3837 = add i64 %3836, 1, !dbg !1816
  store i64 %3837, i64* %29, align 8, !dbg !1816
  %3838 = load i32, i32* @x.17
  %3839 = load i32, i32* @y.18
  %3840 = sub i32 %3838, 1
  %3841 = mul i32 %3838, %3840
  %3842 = urem i32 %3841, 2
  %3843 = icmp eq i32 %3842, 0
  %3844 = icmp slt i32 %3839, 10
  %3845 = or i1 %3843, %3844
  br i1 %3845, label %originalBBpart21074, label %originalBB1069alteredBB

originalBBpart21074:                              ; preds = %originalBB1069
  br label %3846, !dbg !1816

3846:                                             ; preds = %originalBBpart21074
  br label %3847, !dbg !1811

3847:                                             ; preds = %3846
  %3848 = load i64, i64* %29, align 8, !dbg !1817
  %3849 = load i64, i64* %20, align 8, !dbg !1817
  %3850 = icmp ult i64 %3848, %3849, !dbg !1817
  br i1 %3850, label %3851, label %3871, !dbg !1820

3851:                                             ; preds = %3847
  %3852 = load i32, i32* @x.17
  %3853 = load i32, i32* @y.18
  %3854 = sub i32 %3852, 1
  %3855 = mul i32 %3852, %3854
  %3856 = urem i32 %3855, 2
  %3857 = icmp eq i32 %3856, 0
  %3858 = icmp slt i32 %3853, 10
  %3859 = or i1 %3857, %3858
  br i1 %3859, label %originalBB1076, label %originalBB1076alteredBB

originalBB1076:                                   ; preds = %3851, %originalBB1076alteredBB
  %3860 = load i8*, i8** %19, align 8, !dbg !1817
  %3861 = load i64, i64* %29, align 8, !dbg !1817
  %3862 = getelementptr inbounds i8, i8* %3860, i64 %3861, !dbg !1817
  store i8 39, i8* %3862, align 1, !dbg !1817
  %3863 = load i32, i32* @x.17
  %3864 = load i32, i32* @y.18
  %3865 = sub i32 %3863, 1
  %3866 = mul i32 %3863, %3865
  %3867 = urem i32 %3866, 2
  %3868 = icmp eq i32 %3867, 0
  %3869 = icmp slt i32 %3864, 10
  %3870 = or i1 %3868, %3869
  br i1 %3870, label %originalBBpart21078, label %originalBB1076alteredBB

originalBBpart21078:                              ; preds = %originalBB1076
  br label %3871, !dbg !1817

3871:                                             ; preds = %originalBBpart21078, %3847
  %3872 = load i64, i64* %29, align 8, !dbg !1820
  %3873 = add i64 %3872, 1, !dbg !1820
  store i64 %3873, i64* %29, align 8, !dbg !1820
  br label %3874, !dbg !1820

3874:                                             ; preds = %3871
  %3875 = load i32, i32* @x.17
  %3876 = load i32, i32* @y.18
  %3877 = sub i32 %3875, 1
  %3878 = mul i32 %3875, %3877
  %3879 = urem i32 %3878, 2
  %3880 = icmp eq i32 %3879, 0
  %3881 = icmp slt i32 %3876, 10
  %3882 = or i1 %3880, %3881
  br i1 %3882, label %originalBB1080, label %originalBB1080alteredBB

originalBB1080:                                   ; preds = %3874, %originalBB1080alteredBB
  store i8 0, i8* %36, align 1, !dbg !1811
  %3883 = load i32, i32* @x.17
  %3884 = load i32, i32* @y.18
  %3885 = sub i32 %3883, 1
  %3886 = mul i32 %3883, %3885
  %3887 = urem i32 %3886, 2
  %3888 = icmp eq i32 %3887, 0
  %3889 = icmp slt i32 %3884, 10
  %3890 = or i1 %3888, %3889
  br i1 %3890, label %originalBBpart21082, label %originalBB1080alteredBB

originalBBpart21082:                              ; preds = %originalBB1080
  br label %3891, !dbg !1811

3891:                                             ; preds = %originalBBpart21082, %3783, %3780
  %3892 = load i32, i32* @x.17
  %3893 = load i32, i32* @y.18
  %3894 = sub i32 %3892, 1
  %3895 = mul i32 %3892, %3894
  %3896 = urem i32 %3895, 2
  %3897 = icmp eq i32 %3896, 0
  %3898 = icmp slt i32 %3893, 10
  %3899 = or i1 %3897, %3898
  br i1 %3899, label %originalBB1084, label %originalBB1084alteredBB

originalBB1084:                                   ; preds = %3891, %originalBB1084alteredBB
  %3900 = load i32, i32* @x.17
  %3901 = load i32, i32* @y.18
  %3902 = sub i32 %3900, 1
  %3903 = mul i32 %3900, %3902
  %3904 = urem i32 %3903, 2
  %3905 = icmp eq i32 %3904, 0
  %3906 = icmp slt i32 %3901, 10
  %3907 = or i1 %3905, %3906
  br i1 %3907, label %originalBBpart21086, label %originalBB1084alteredBB

originalBBpart21086:                              ; preds = %originalBB1084
  br label %3908, !dbg !1810

3908:                                             ; preds = %originalBBpart21086
  %3909 = load i32, i32* @x.17
  %3910 = load i32, i32* @y.18
  %3911 = sub i32 %3909, 1
  %3912 = mul i32 %3909, %3911
  %3913 = urem i32 %3912, 2
  %3914 = icmp eq i32 %3913, 0
  %3915 = icmp slt i32 %3910, 10
  %3916 = or i1 %3914, %3915
  br i1 %3916, label %originalBB1088, label %originalBB1088alteredBB

originalBB1088:                                   ; preds = %3908, %originalBB1088alteredBB
  %3917 = load i32, i32* @x.17
  %3918 = load i32, i32* @y.18
  %3919 = sub i32 %3917, 1
  %3920 = mul i32 %3917, %3919
  %3921 = urem i32 %3920, 2
  %3922 = icmp eq i32 %3921, 0
  %3923 = icmp slt i32 %3918, 10
  %3924 = or i1 %3922, %3923
  br i1 %3924, label %originalBBpart21090, label %originalBB1088alteredBB

originalBBpart21090:                              ; preds = %originalBB1088
  br label %3925, !dbg !1821

3925:                                             ; preds = %originalBBpart21090
  %3926 = load i32, i32* @x.17
  %3927 = load i32, i32* @y.18
  %3928 = sub i32 %3926, 1
  %3929 = mul i32 %3926, %3928
  %3930 = urem i32 %3929, 2
  %3931 = icmp eq i32 %3930, 0
  %3932 = icmp slt i32 %3927, 10
  %3933 = or i1 %3931, %3932
  br i1 %3933, label %originalBB1092, label %originalBB1092alteredBB

originalBB1092:                                   ; preds = %3925, %originalBB1092alteredBB
  %3934 = load i64, i64* %29, align 8, !dbg !1822
  %3935 = load i64, i64* %20, align 8, !dbg !1822
  %3936 = icmp ult i64 %3934, %3935, !dbg !1822
  %3937 = load i32, i32* @x.17
  %3938 = load i32, i32* @y.18
  %3939 = sub i32 %3937, 1
  %3940 = mul i32 %3937, %3939
  %3941 = urem i32 %3940, 2
  %3942 = icmp eq i32 %3941, 0
  %3943 = icmp slt i32 %3938, 10
  %3944 = or i1 %3942, %3943
  br i1 %3944, label %originalBBpart21094, label %originalBB1092alteredBB

originalBBpart21094:                              ; preds = %originalBB1092
  br i1 %3936, label %3945, label %3966, !dbg !1825

3945:                                             ; preds = %originalBBpart21094
  %3946 = load i32, i32* @x.17
  %3947 = load i32, i32* @y.18
  %3948 = sub i32 %3946, 1
  %3949 = mul i32 %3946, %3948
  %3950 = urem i32 %3949, 2
  %3951 = icmp eq i32 %3950, 0
  %3952 = icmp slt i32 %3947, 10
  %3953 = or i1 %3951, %3952
  br i1 %3953, label %originalBB1096, label %originalBB1096alteredBB

originalBB1096:                                   ; preds = %3945, %originalBB1096alteredBB
  %3954 = load i8, i8* %39, align 1, !dbg !1822
  %3955 = load i8*, i8** %19, align 8, !dbg !1822
  %3956 = load i64, i64* %29, align 8, !dbg !1822
  %3957 = getelementptr inbounds i8, i8* %3955, i64 %3956, !dbg !1822
  store i8 %3954, i8* %3957, align 1, !dbg !1822
  %3958 = load i32, i32* @x.17
  %3959 = load i32, i32* @y.18
  %3960 = sub i32 %3958, 1
  %3961 = mul i32 %3958, %3960
  %3962 = urem i32 %3961, 2
  %3963 = icmp eq i32 %3962, 0
  %3964 = icmp slt i32 %3959, 10
  %3965 = or i1 %3963, %3964
  br i1 %3965, label %originalBBpart21098, label %originalBB1096alteredBB

originalBBpart21098:                              ; preds = %originalBB1096
  br label %3966, !dbg !1822

3966:                                             ; preds = %originalBBpart21098, %originalBBpart21094
  %3967 = load i32, i32* @x.17
  %3968 = load i32, i32* @y.18
  %3969 = sub i32 %3967, 1
  %3970 = mul i32 %3967, %3969
  %3971 = urem i32 %3970, 2
  %3972 = icmp eq i32 %3971, 0
  %3973 = icmp slt i32 %3968, 10
  %3974 = or i1 %3972, %3973
  br i1 %3974, label %originalBB1100, label %originalBB1100alteredBB

originalBB1100:                                   ; preds = %3966, %originalBB1100alteredBB
  %3975 = load i64, i64* %29, align 8, !dbg !1825
  %3976 = add i64 %3975, 1, !dbg !1825
  store i64 %3976, i64* %29, align 8, !dbg !1825
  %3977 = load i32, i32* @x.17
  %3978 = load i32, i32* @y.18
  %3979 = sub i32 %3977, 1
  %3980 = mul i32 %3977, %3979
  %3981 = urem i32 %3980, 2
  %3982 = icmp eq i32 %3981, 0
  %3983 = icmp slt i32 %3978, 10
  %3984 = or i1 %3982, %3983
  br i1 %3984, label %originalBBpart21104, label %originalBB1100alteredBB

originalBBpart21104:                              ; preds = %originalBB1100
  br label %3985, !dbg !1825

3985:                                             ; preds = %originalBBpart21104
  %3986 = load i32, i32* @x.17
  %3987 = load i32, i32* @y.18
  %3988 = sub i32 %3986, 1
  %3989 = mul i32 %3986, %3988
  %3990 = urem i32 %3989, 2
  %3991 = icmp eq i32 %3990, 0
  %3992 = icmp slt i32 %3987, 10
  %3993 = or i1 %3991, %3992
  br i1 %3993, label %originalBB1106, label %originalBB1106alteredBB

originalBB1106:                                   ; preds = %3985, %originalBB1106alteredBB
  %3994 = load i8*, i8** %21, align 8, !dbg !1826
  %3995 = load i64, i64* %28, align 8, !dbg !1827
  %3996 = add i64 %3995, 1, !dbg !1827
  store i64 %3996, i64* %28, align 8, !dbg !1827
  %3997 = getelementptr inbounds i8, i8* %3994, i64 %3996, !dbg !1826
  %3998 = load i8, i8* %3997, align 1, !dbg !1826
  store i8 %3998, i8* %39, align 1, !dbg !1828
  %3999 = load i32, i32* @x.17
  %4000 = load i32, i32* @y.18
  %4001 = sub i32 %3999, 1
  %4002 = mul i32 %3999, %4001
  %4003 = urem i32 %4002, 2
  %4004 = icmp eq i32 %4003, 0
  %4005 = icmp slt i32 %4000, 10
  %4006 = or i1 %4004, %4005
  br i1 %4006, label %originalBBpart21118, label %originalBB1106alteredBB

originalBBpart21118:                              ; preds = %originalBB1106
  br label %3152, !dbg !1829, !llvm.loop !1830

4007:                                             ; preds = %3762
  %4008 = load i32, i32* @x.17
  %4009 = load i32, i32* @y.18
  %4010 = sub i32 %4008, 1
  %4011 = mul i32 %4008, %4010
  %4012 = urem i32 %4011, 2
  %4013 = icmp eq i32 %4012, 0
  %4014 = icmp slt i32 %4009, 10
  %4015 = or i1 %4013, %4014
  br i1 %4015, label %originalBB1120, label %originalBB1120alteredBB

originalBB1120:                                   ; preds = %4007, %originalBB1120alteredBB
  %4016 = load i32, i32* @x.17
  %4017 = load i32, i32* @y.18
  %4018 = sub i32 %4016, 1
  %4019 = mul i32 %4016, %4018
  %4020 = urem i32 %4019, 2
  %4021 = icmp eq i32 %4020, 0
  %4022 = icmp slt i32 %4017, 10
  %4023 = or i1 %4021, %4022
  br i1 %4023, label %originalBBpart21122, label %originalBB1120alteredBB

originalBBpart21122:                              ; preds = %originalBB1120
  br label %4454, !dbg !1833

4024:                                             ; preds = %3129, %3126
  %4025 = load i32, i32* @x.17
  %4026 = load i32, i32* @y.18
  %4027 = sub i32 %4025, 1
  %4028 = mul i32 %4025, %4027
  %4029 = urem i32 %4028, 2
  %4030 = icmp eq i32 %4029, 0
  %4031 = icmp slt i32 %4026, 10
  %4032 = or i1 %4030, %4031
  br i1 %4032, label %originalBB1124, label %originalBB1124alteredBB

originalBB1124:                                   ; preds = %4024, %originalBB1124alteredBB
  %4033 = load i32, i32* @x.17
  %4034 = load i32, i32* @y.18
  %4035 = sub i32 %4033, 1
  %4036 = mul i32 %4033, %4035
  %4037 = urem i32 %4036, 2
  %4038 = icmp eq i32 %4037, 0
  %4039 = icmp slt i32 %4034, 10
  %4040 = or i1 %4038, %4039
  br i1 %4040, label %originalBBpart21126, label %originalBB1124alteredBB

originalBBpart21126:                              ; preds = %originalBB1124
  br label %4041, !dbg !1834

4041:                                             ; preds = %originalBBpart21126, %originalBBpart2652, %originalBBpart2648, %2409, %originalBBpart2579, %2282, %originalBBpart2567, %originalBBpart2511, %originalBBpart2360
  %4042 = load i8, i8* %33, align 1, !dbg !1835
  %4043 = trunc i8 %4042 to i1, !dbg !1835
  br i1 %4043, label %4044, label %4063, !dbg !1837

4044:                                             ; preds = %4041
  %4045 = load i32, i32* @x.17
  %4046 = load i32, i32* @y.18
  %4047 = sub i32 %4045, 1
  %4048 = mul i32 %4045, %4047
  %4049 = urem i32 %4048, 2
  %4050 = icmp eq i32 %4049, 0
  %4051 = icmp slt i32 %4046, 10
  %4052 = or i1 %4050, %4051
  br i1 %4052, label %originalBB1128, label %originalBB1128alteredBB

originalBB1128:                                   ; preds = %4044, %originalBB1128alteredBB
  %4053 = load i32, i32* %23, align 4, !dbg !1838
  %4054 = icmp ne i32 %4053, 2, !dbg !1839
  %4055 = load i32, i32* @x.17
  %4056 = load i32, i32* @y.18
  %4057 = sub i32 %4055, 1
  %4058 = mul i32 %4055, %4057
  %4059 = urem i32 %4058, 2
  %4060 = icmp eq i32 %4059, 0
  %4061 = icmp slt i32 %4056, 10
  %4062 = or i1 %4060, %4061
  br i1 %4062, label %originalBBpart21130, label %originalBB1128alteredBB

originalBBpart21130:                              ; preds = %originalBB1128
  br i1 %4054, label %4066, label %4063, !dbg !1840

4063:                                             ; preds = %originalBBpart21130, %4041
  %4064 = load i8, i8* %35, align 1, !dbg !1841
  %4065 = trunc i8 %4064 to i1, !dbg !1841
  br i1 %4065, label %4066, label %4099, !dbg !1842

4066:                                             ; preds = %4063, %originalBBpart21130
  %4067 = load i32*, i32** %25, align 8, !dbg !1843
  %4068 = icmp ne i32* %4067, null, !dbg !1843
  br i1 %4068, label %4069, label %4099, !dbg !1844

4069:                                             ; preds = %4066
  %4070 = load i32, i32* @x.17
  %4071 = load i32, i32* @y.18
  %4072 = sub i32 %4070, 1
  %4073 = mul i32 %4070, %4072
  %4074 = urem i32 %4073, 2
  %4075 = icmp eq i32 %4074, 0
  %4076 = icmp slt i32 %4071, 10
  %4077 = or i1 %4075, %4076
  br i1 %4077, label %originalBB1132, label %originalBB1132alteredBB

originalBB1132:                                   ; preds = %4069, %originalBB1132alteredBB
  %4078 = load i32*, i32** %25, align 8, !dbg !1845
  %4079 = load i8, i8* %39, align 1, !dbg !1846
  %4080 = zext i8 %4079 to i64, !dbg !1846
  %4081 = udiv i64 %4080, 32, !dbg !1847
  %4082 = getelementptr inbounds i32, i32* %4078, i64 %4081, !dbg !1845
  %4083 = load i32, i32* %4082, align 4, !dbg !1845
  %4084 = load i8, i8* %39, align 1, !dbg !1848
  %4085 = zext i8 %4084 to i64, !dbg !1848
  %4086 = urem i64 %4085, 32, !dbg !1849
  %4087 = trunc i64 %4086 to i32, !dbg !1850
  %4088 = lshr i32 %4083, %4087, !dbg !1850
  %4089 = and i32 %4088, 1, !dbg !1851
  %4090 = icmp ne i32 %4089, 0, !dbg !1851
  %4091 = load i32, i32* @x.17
  %4092 = load i32, i32* @y.18
  %4093 = sub i32 %4091, 1
  %4094 = mul i32 %4091, %4093
  %4095 = urem i32 %4094, 2
  %4096 = icmp eq i32 %4095, 0
  %4097 = icmp slt i32 %4092, 10
  %4098 = or i1 %4096, %4097
  br i1 %4098, label %originalBBpart21163, label %originalBB1132alteredBB

originalBBpart21163:                              ; preds = %originalBB1132
  br i1 %4090, label %4119, label %4099, !dbg !1852

4099:                                             ; preds = %originalBBpart21163, %4066, %4063
  %4100 = load i8, i8* %41, align 1, !dbg !1853
  %4101 = trunc i8 %4100 to i1, !dbg !1853
  br i1 %4101, label %4119, label %4102, !dbg !1854

4102:                                             ; preds = %4099
  %4103 = load i32, i32* @x.17
  %4104 = load i32, i32* @y.18
  %4105 = sub i32 %4103, 1
  %4106 = mul i32 %4103, %4105
  %4107 = urem i32 %4106, 2
  %4108 = icmp eq i32 %4107, 0
  %4109 = icmp slt i32 %4104, 10
  %4110 = or i1 %4108, %4109
  br i1 %4110, label %originalBB1165, label %originalBB1165alteredBB

originalBB1165:                                   ; preds = %4102, %originalBB1165alteredBB
  %4111 = load i32, i32* @x.17
  %4112 = load i32, i32* @y.18
  %4113 = sub i32 %4111, 1
  %4114 = mul i32 %4111, %4113
  %4115 = urem i32 %4114, 2
  %4116 = icmp eq i32 %4115, 0
  %4117 = icmp slt i32 %4112, 10
  %4118 = or i1 %4116, %4117
  br i1 %4118, label %originalBBpart21167, label %originalBB1165alteredBB

originalBBpart21167:                              ; preds = %originalBB1165
  br label %4454, !dbg !1855

4119:                                             ; preds = %4099, %originalBBpart21163
  %4120 = load i32, i32* @x.17
  %4121 = load i32, i32* @y.18
  %4122 = sub i32 %4120, 1
  %4123 = mul i32 %4120, %4122
  %4124 = urem i32 %4123, 2
  %4125 = icmp eq i32 %4124, 0
  %4126 = icmp slt i32 %4121, 10
  %4127 = or i1 %4125, %4126
  br i1 %4127, label %originalBB1169, label %originalBB1169alteredBB

originalBB1169:                                   ; preds = %4119, %originalBB1169alteredBB
  %4128 = load i32, i32* @x.17
  %4129 = load i32, i32* @y.18
  %4130 = sub i32 %4128, 1
  %4131 = mul i32 %4128, %4130
  %4132 = urem i32 %4131, 2
  %4133 = icmp eq i32 %4132, 0
  %4134 = icmp slt i32 %4129, 10
  %4135 = or i1 %4133, %4134
  br i1 %4135, label %originalBBpart21171, label %originalBB1169alteredBB

originalBBpart21171:                              ; preds = %originalBB1169
  br label %4136, !dbg !1853

4136:                                             ; preds = %originalBBpart21171, %2235
  call void @llvm.dbg.label(metadata !1856), !dbg !1857
  %4137 = load i32, i32* @x.17
  %4138 = load i32, i32* @y.18
  %4139 = sub i32 %4137, 1
  %4140 = mul i32 %4137, %4139
  %4141 = urem i32 %4140, 2
  %4142 = icmp eq i32 %4141, 0
  %4143 = icmp slt i32 %4138, 10
  %4144 = or i1 %4142, %4143
  br i1 %4144, label %originalBB1173, label %originalBB1173alteredBB

originalBB1173:                                   ; preds = %4136, %originalBB1173alteredBB
  %4145 = load i32, i32* @x.17
  %4146 = load i32, i32* @y.18
  %4147 = sub i32 %4145, 1
  %4148 = mul i32 %4145, %4147
  %4149 = urem i32 %4148, 2
  %4150 = icmp eq i32 %4149, 0
  %4151 = icmp slt i32 %4146, 10
  %4152 = or i1 %4150, %4151
  br i1 %4152, label %originalBBpart21175, label %originalBB1173alteredBB

originalBBpart21175:                              ; preds = %originalBB1173
  br label %4153, !dbg !1858

4153:                                             ; preds = %originalBBpart21175
  %4154 = load i8, i8* %35, align 1, !dbg !1859
  %4155 = trunc i8 %4154 to i1, !dbg !1859
  br i1 %4155, label %4156, label %4173, !dbg !1862

4156:                                             ; preds = %4153
  %4157 = load i32, i32* @x.17
  %4158 = load i32, i32* @y.18
  %4159 = sub i32 %4157, 1
  %4160 = mul i32 %4157, %4159
  %4161 = urem i32 %4160, 2
  %4162 = icmp eq i32 %4161, 0
  %4163 = icmp slt i32 %4158, 10
  %4164 = or i1 %4162, %4163
  br i1 %4164, label %originalBB1177, label %originalBB1177alteredBB

originalBB1177:                                   ; preds = %4156, %originalBB1177alteredBB
  %4165 = load i32, i32* @x.17
  %4166 = load i32, i32* @y.18
  %4167 = sub i32 %4165, 1
  %4168 = mul i32 %4165, %4167
  %4169 = urem i32 %4168, 2
  %4170 = icmp eq i32 %4169, 0
  %4171 = icmp slt i32 %4166, 10
  %4172 = or i1 %4170, %4171
  br i1 %4172, label %originalBBpart21179, label %originalBB1177alteredBB

originalBBpart21179:                              ; preds = %originalBB1177
  br label %5134, !dbg !1859

4173:                                             ; preds = %4153
  %4174 = load i32, i32* @x.17
  %4175 = load i32, i32* @y.18
  %4176 = sub i32 %4174, 1
  %4177 = mul i32 %4174, %4176
  %4178 = urem i32 %4177, 2
  %4179 = icmp eq i32 %4178, 0
  %4180 = icmp slt i32 %4175, 10
  %4181 = or i1 %4179, %4180
  br i1 %4181, label %originalBB1181, label %originalBB1181alteredBB

originalBB1181:                                   ; preds = %4173, %originalBB1181alteredBB
  store i8 1, i8* %42, align 1, !dbg !1862
  %4182 = load i32, i32* %23, align 4, !dbg !1863
  %4183 = icmp eq i32 %4182, 2, !dbg !1863
  %4184 = load i32, i32* @x.17
  %4185 = load i32, i32* @y.18
  %4186 = sub i32 %4184, 1
  %4187 = mul i32 %4184, %4186
  %4188 = urem i32 %4187, 2
  %4189 = icmp eq i32 %4188, 0
  %4190 = icmp slt i32 %4185, 10
  %4191 = or i1 %4189, %4190
  br i1 %4191, label %originalBBpart21183, label %originalBB1181alteredBB

originalBBpart21183:                              ; preds = %originalBB1181
  br i1 %4183, label %4192, label %4376, !dbg !1863

4192:                                             ; preds = %originalBBpart21183
  %4193 = load i32, i32* @x.17
  %4194 = load i32, i32* @y.18
  %4195 = sub i32 %4193, 1
  %4196 = mul i32 %4193, %4195
  %4197 = urem i32 %4196, 2
  %4198 = icmp eq i32 %4197, 0
  %4199 = icmp slt i32 %4194, 10
  %4200 = or i1 %4198, %4199
  br i1 %4200, label %originalBB1185, label %originalBB1185alteredBB

originalBB1185:                                   ; preds = %4192, %originalBB1185alteredBB
  %4201 = load i8, i8* %36, align 1, !dbg !1863
  %4202 = trunc i8 %4201 to i1, !dbg !1863
  %4203 = load i32, i32* @x.17
  %4204 = load i32, i32* @y.18
  %4205 = sub i32 %4203, 1
  %4206 = mul i32 %4203, %4205
  %4207 = urem i32 %4206, 2
  %4208 = icmp eq i32 %4207, 0
  %4209 = icmp slt i32 %4204, 10
  %4210 = or i1 %4208, %4209
  br i1 %4210, label %originalBBpart21187, label %originalBB1185alteredBB

originalBBpart21187:                              ; preds = %originalBB1185
  br i1 %4202, label %4376, label %4211, !dbg !1862

4211:                                             ; preds = %originalBBpart21187
  %4212 = load i32, i32* @x.17
  %4213 = load i32, i32* @y.18
  %4214 = sub i32 %4212, 1
  %4215 = mul i32 %4212, %4214
  %4216 = urem i32 %4215, 2
  %4217 = icmp eq i32 %4216, 0
  %4218 = icmp slt i32 %4213, 10
  %4219 = or i1 %4217, %4218
  br i1 %4219, label %originalBB1189, label %originalBB1189alteredBB

originalBB1189:                                   ; preds = %4211, %originalBB1189alteredBB
  %4220 = load i32, i32* @x.17
  %4221 = load i32, i32* @y.18
  %4222 = sub i32 %4220, 1
  %4223 = mul i32 %4220, %4222
  %4224 = urem i32 %4223, 2
  %4225 = icmp eq i32 %4224, 0
  %4226 = icmp slt i32 %4221, 10
  %4227 = or i1 %4225, %4226
  br i1 %4227, label %originalBBpart21191, label %originalBB1189alteredBB

originalBBpart21191:                              ; preds = %originalBB1189
  br label %4228, !dbg !1865

4228:                                             ; preds = %originalBBpart21191
  %4229 = load i32, i32* @x.17
  %4230 = load i32, i32* @y.18
  %4231 = sub i32 %4229, 1
  %4232 = mul i32 %4229, %4231
  %4233 = urem i32 %4232, 2
  %4234 = icmp eq i32 %4233, 0
  %4235 = icmp slt i32 %4230, 10
  %4236 = or i1 %4234, %4235
  br i1 %4236, label %originalBB1193, label %originalBB1193alteredBB

originalBB1193:                                   ; preds = %4228, %originalBB1193alteredBB
  %4237 = load i64, i64* %29, align 8, !dbg !1867
  %4238 = load i64, i64* %20, align 8, !dbg !1867
  %4239 = icmp ult i64 %4237, %4238, !dbg !1867
  %4240 = load i32, i32* @x.17
  %4241 = load i32, i32* @y.18
  %4242 = sub i32 %4240, 1
  %4243 = mul i32 %4240, %4242
  %4244 = urem i32 %4243, 2
  %4245 = icmp eq i32 %4244, 0
  %4246 = icmp slt i32 %4241, 10
  %4247 = or i1 %4245, %4246
  br i1 %4247, label %originalBBpart21195, label %originalBB1193alteredBB

originalBBpart21195:                              ; preds = %originalBB1193
  br i1 %4239, label %4248, label %4268, !dbg !1870

4248:                                             ; preds = %originalBBpart21195
  %4249 = load i32, i32* @x.17
  %4250 = load i32, i32* @y.18
  %4251 = sub i32 %4249, 1
  %4252 = mul i32 %4249, %4251
  %4253 = urem i32 %4252, 2
  %4254 = icmp eq i32 %4253, 0
  %4255 = icmp slt i32 %4250, 10
  %4256 = or i1 %4254, %4255
  br i1 %4256, label %originalBB1197, label %originalBB1197alteredBB

originalBB1197:                                   ; preds = %4248, %originalBB1197alteredBB
  %4257 = load i8*, i8** %19, align 8, !dbg !1867
  %4258 = load i64, i64* %29, align 8, !dbg !1867
  %4259 = getelementptr inbounds i8, i8* %4257, i64 %4258, !dbg !1867
  store i8 39, i8* %4259, align 1, !dbg !1867
  %4260 = load i32, i32* @x.17
  %4261 = load i32, i32* @y.18
  %4262 = sub i32 %4260, 1
  %4263 = mul i32 %4260, %4262
  %4264 = urem i32 %4263, 2
  %4265 = icmp eq i32 %4264, 0
  %4266 = icmp slt i32 %4261, 10
  %4267 = or i1 %4265, %4266
  br i1 %4267, label %originalBBpart21199, label %originalBB1197alteredBB

originalBBpart21199:                              ; preds = %originalBB1197
  br label %4268, !dbg !1867

4268:                                             ; preds = %originalBBpart21199, %originalBBpart21195
  %4269 = load i32, i32* @x.17
  %4270 = load i32, i32* @y.18
  %4271 = sub i32 %4269, 1
  %4272 = mul i32 %4269, %4271
  %4273 = urem i32 %4272, 2
  %4274 = icmp eq i32 %4273, 0
  %4275 = icmp slt i32 %4270, 10
  %4276 = or i1 %4274, %4275
  br i1 %4276, label %originalBB1201, label %originalBB1201alteredBB

originalBB1201:                                   ; preds = %4268, %originalBB1201alteredBB
  %4277 = load i64, i64* %29, align 8, !dbg !1870
  %4278 = add i64 %4277, 1, !dbg !1870
  store i64 %4278, i64* %29, align 8, !dbg !1870
  %4279 = load i32, i32* @x.17
  %4280 = load i32, i32* @y.18
  %4281 = sub i32 %4279, 1
  %4282 = mul i32 %4279, %4281
  %4283 = urem i32 %4282, 2
  %4284 = icmp eq i32 %4283, 0
  %4285 = icmp slt i32 %4280, 10
  %4286 = or i1 %4284, %4285
  br i1 %4286, label %originalBBpart21208, label %originalBB1201alteredBB

originalBBpart21208:                              ; preds = %originalBB1201
  br label %4287, !dbg !1870

4287:                                             ; preds = %originalBBpart21208
  %4288 = load i32, i32* @x.17
  %4289 = load i32, i32* @y.18
  %4290 = sub i32 %4288, 1
  %4291 = mul i32 %4288, %4290
  %4292 = urem i32 %4291, 2
  %4293 = icmp eq i32 %4292, 0
  %4294 = icmp slt i32 %4289, 10
  %4295 = or i1 %4293, %4294
  br i1 %4295, label %originalBB1210, label %originalBB1210alteredBB

originalBB1210:                                   ; preds = %4287, %originalBB1210alteredBB
  %4296 = load i32, i32* @x.17
  %4297 = load i32, i32* @y.18
  %4298 = sub i32 %4296, 1
  %4299 = mul i32 %4296, %4298
  %4300 = urem i32 %4299, 2
  %4301 = icmp eq i32 %4300, 0
  %4302 = icmp slt i32 %4297, 10
  %4303 = or i1 %4301, %4302
  br i1 %4303, label %originalBBpart21212, label %originalBB1210alteredBB

originalBBpart21212:                              ; preds = %originalBB1210
  br label %4304, !dbg !1865

4304:                                             ; preds = %originalBBpart21212
  %4305 = load i64, i64* %29, align 8, !dbg !1871
  %4306 = load i64, i64* %20, align 8, !dbg !1871
  %4307 = icmp ult i64 %4305, %4306, !dbg !1871
  br i1 %4307, label %4308, label %4328, !dbg !1874

4308:                                             ; preds = %4304
  %4309 = load i32, i32* @x.17
  %4310 = load i32, i32* @y.18
  %4311 = sub i32 %4309, 1
  %4312 = mul i32 %4309, %4311
  %4313 = urem i32 %4312, 2
  %4314 = icmp eq i32 %4313, 0
  %4315 = icmp slt i32 %4310, 10
  %4316 = or i1 %4314, %4315
  br i1 %4316, label %originalBB1214, label %originalBB1214alteredBB

originalBB1214:                                   ; preds = %4308, %originalBB1214alteredBB
  %4317 = load i8*, i8** %19, align 8, !dbg !1871
  %4318 = load i64, i64* %29, align 8, !dbg !1871
  %4319 = getelementptr inbounds i8, i8* %4317, i64 %4318, !dbg !1871
  store i8 36, i8* %4319, align 1, !dbg !1871
  %4320 = load i32, i32* @x.17
  %4321 = load i32, i32* @y.18
  %4322 = sub i32 %4320, 1
  %4323 = mul i32 %4320, %4322
  %4324 = urem i32 %4323, 2
  %4325 = icmp eq i32 %4324, 0
  %4326 = icmp slt i32 %4321, 10
  %4327 = or i1 %4325, %4326
  br i1 %4327, label %originalBBpart21216, label %originalBB1214alteredBB

originalBBpart21216:                              ; preds = %originalBB1214
  br label %4328, !dbg !1871

4328:                                             ; preds = %originalBBpart21216, %4304
  %4329 = load i64, i64* %29, align 8, !dbg !1874
  %4330 = add i64 %4329, 1, !dbg !1874
  store i64 %4330, i64* %29, align 8, !dbg !1874
  br label %4331, !dbg !1874

4331:                                             ; preds = %4328
  br label %4332, !dbg !1865

4332:                                             ; preds = %4331
  %4333 = load i64, i64* %29, align 8, !dbg !1875
  %4334 = load i64, i64* %20, align 8, !dbg !1875
  %4335 = icmp ult i64 %4333, %4334, !dbg !1875
  br i1 %4335, label %4336, label %4340, !dbg !1878

4336:                                             ; preds = %4332
  %4337 = load i8*, i8** %19, align 8, !dbg !1875
  %4338 = load i64, i64* %29, align 8, !dbg !1875
  %4339 = getelementptr inbounds i8, i8* %4337, i64 %4338, !dbg !1875
  store i8 39, i8* %4339, align 1, !dbg !1875
  br label %4340, !dbg !1875

4340:                                             ; preds = %4336, %4332
  %4341 = load i32, i32* @x.17
  %4342 = load i32, i32* @y.18
  %4343 = sub i32 %4341, 1
  %4344 = mul i32 %4341, %4343
  %4345 = urem i32 %4344, 2
  %4346 = icmp eq i32 %4345, 0
  %4347 = icmp slt i32 %4342, 10
  %4348 = or i1 %4346, %4347
  br i1 %4348, label %originalBB1218, label %originalBB1218alteredBB

originalBB1218:                                   ; preds = %4340, %originalBB1218alteredBB
  %4349 = load i64, i64* %29, align 8, !dbg !1878
  %4350 = add i64 %4349, 1, !dbg !1878
  store i64 %4350, i64* %29, align 8, !dbg !1878
  %4351 = load i32, i32* @x.17
  %4352 = load i32, i32* @y.18
  %4353 = sub i32 %4351, 1
  %4354 = mul i32 %4351, %4353
  %4355 = urem i32 %4354, 2
  %4356 = icmp eq i32 %4355, 0
  %4357 = icmp slt i32 %4352, 10
  %4358 = or i1 %4356, %4357
  br i1 %4358, label %originalBBpart21227, label %originalBB1218alteredBB

originalBBpart21227:                              ; preds = %originalBB1218
  br label %4359, !dbg !1878

4359:                                             ; preds = %originalBBpart21227
  %4360 = load i32, i32* @x.17
  %4361 = load i32, i32* @y.18
  %4362 = sub i32 %4360, 1
  %4363 = mul i32 %4360, %4362
  %4364 = urem i32 %4363, 2
  %4365 = icmp eq i32 %4364, 0
  %4366 = icmp slt i32 %4361, 10
  %4367 = or i1 %4365, %4366
  br i1 %4367, label %originalBB1229, label %originalBB1229alteredBB

originalBB1229:                                   ; preds = %4359, %originalBB1229alteredBB
  store i8 1, i8* %36, align 1, !dbg !1865
  %4368 = load i32, i32* @x.17
  %4369 = load i32, i32* @y.18
  %4370 = sub i32 %4368, 1
  %4371 = mul i32 %4368, %4370
  %4372 = urem i32 %4371, 2
  %4373 = icmp eq i32 %4372, 0
  %4374 = icmp slt i32 %4369, 10
  %4375 = or i1 %4373, %4374
  br i1 %4375, label %originalBBpart21231, label %originalBB1229alteredBB

originalBBpart21231:                              ; preds = %originalBB1229
  br label %4376, !dbg !1865

4376:                                             ; preds = %originalBBpart21231, %originalBBpart21187, %originalBBpart21183
  %4377 = load i32, i32* @x.17
  %4378 = load i32, i32* @y.18
  %4379 = sub i32 %4377, 1
  %4380 = mul i32 %4377, %4379
  %4381 = urem i32 %4380, 2
  %4382 = icmp eq i32 %4381, 0
  %4383 = icmp slt i32 %4378, 10
  %4384 = or i1 %4382, %4383
  br i1 %4384, label %originalBB1233, label %originalBB1233alteredBB

originalBB1233:                                   ; preds = %4376, %originalBB1233alteredBB
  %4385 = load i32, i32* @x.17
  %4386 = load i32, i32* @y.18
  %4387 = sub i32 %4385, 1
  %4388 = mul i32 %4385, %4387
  %4389 = urem i32 %4388, 2
  %4390 = icmp eq i32 %4389, 0
  %4391 = icmp slt i32 %4386, 10
  %4392 = or i1 %4390, %4391
  br i1 %4392, label %originalBBpart21235, label %originalBB1233alteredBB

originalBBpart21235:                              ; preds = %originalBB1233
  br label %4393, !dbg !1862

4393:                                             ; preds = %originalBBpart21235
  %4394 = load i32, i32* @x.17
  %4395 = load i32, i32* @y.18
  %4396 = sub i32 %4394, 1
  %4397 = mul i32 %4394, %4396
  %4398 = urem i32 %4397, 2
  %4399 = icmp eq i32 %4398, 0
  %4400 = icmp slt i32 %4395, 10
  %4401 = or i1 %4399, %4400
  br i1 %4401, label %originalBB1237, label %originalBB1237alteredBB

originalBB1237:                                   ; preds = %4393, %originalBB1237alteredBB
  %4402 = load i64, i64* %29, align 8, !dbg !1879
  %4403 = load i64, i64* %20, align 8, !dbg !1879
  %4404 = icmp ult i64 %4402, %4403, !dbg !1879
  %4405 = load i32, i32* @x.17
  %4406 = load i32, i32* @y.18
  %4407 = sub i32 %4405, 1
  %4408 = mul i32 %4405, %4407
  %4409 = urem i32 %4408, 2
  %4410 = icmp eq i32 %4409, 0
  %4411 = icmp slt i32 %4406, 10
  %4412 = or i1 %4410, %4411
  br i1 %4412, label %originalBBpart21239, label %originalBB1237alteredBB

originalBBpart21239:                              ; preds = %originalBB1237
  br i1 %4404, label %4413, label %4433, !dbg !1882

4413:                                             ; preds = %originalBBpart21239
  %4414 = load i32, i32* @x.17
  %4415 = load i32, i32* @y.18
  %4416 = sub i32 %4414, 1
  %4417 = mul i32 %4414, %4416
  %4418 = urem i32 %4417, 2
  %4419 = icmp eq i32 %4418, 0
  %4420 = icmp slt i32 %4415, 10
  %4421 = or i1 %4419, %4420
  br i1 %4421, label %originalBB1241, label %originalBB1241alteredBB

originalBB1241:                                   ; preds = %4413, %originalBB1241alteredBB
  %4422 = load i8*, i8** %19, align 8, !dbg !1879
  %4423 = load i64, i64* %29, align 8, !dbg !1879
  %4424 = getelementptr inbounds i8, i8* %4422, i64 %4423, !dbg !1879
  store i8 92, i8* %4424, align 1, !dbg !1879
  %4425 = load i32, i32* @x.17
  %4426 = load i32, i32* @y.18
  %4427 = sub i32 %4425, 1
  %4428 = mul i32 %4425, %4427
  %4429 = urem i32 %4428, 2
  %4430 = icmp eq i32 %4429, 0
  %4431 = icmp slt i32 %4426, 10
  %4432 = or i1 %4430, %4431
  br i1 %4432, label %originalBBpart21243, label %originalBB1241alteredBB

originalBBpart21243:                              ; preds = %originalBB1241
  br label %4433, !dbg !1879

4433:                                             ; preds = %originalBBpart21243, %originalBBpart21239
  %4434 = load i32, i32* @x.17
  %4435 = load i32, i32* @y.18
  %4436 = sub i32 %4434, 1
  %4437 = mul i32 %4434, %4436
  %4438 = urem i32 %4437, 2
  %4439 = icmp eq i32 %4438, 0
  %4440 = icmp slt i32 %4435, 10
  %4441 = or i1 %4439, %4440
  br i1 %4441, label %originalBB1245, label %originalBB1245alteredBB

originalBB1245:                                   ; preds = %4433, %originalBB1245alteredBB
  %4442 = load i64, i64* %29, align 8, !dbg !1882
  %4443 = add i64 %4442, 1, !dbg !1882
  store i64 %4443, i64* %29, align 8, !dbg !1882
  %4444 = load i32, i32* @x.17
  %4445 = load i32, i32* @y.18
  %4446 = sub i32 %4444, 1
  %4447 = mul i32 %4444, %4446
  %4448 = urem i32 %4447, 2
  %4449 = icmp eq i32 %4448, 0
  %4450 = icmp slt i32 %4445, 10
  %4451 = or i1 %4449, %4450
  br i1 %4451, label %originalBBpart21249, label %originalBB1245alteredBB

originalBBpart21249:                              ; preds = %originalBB1245
  br label %4452, !dbg !1882

4452:                                             ; preds = %originalBBpart21249
  br label %4453, !dbg !1862

4453:                                             ; preds = %4452
  br label %4454, !dbg !1862

4454:                                             ; preds = %4453, %originalBBpart21167, %originalBBpart21122, %originalBBpart2547, %2100
  call void @llvm.dbg.label(metadata !1883), !dbg !1884
  %4455 = load i32, i32* @x.17
  %4456 = load i32, i32* @y.18
  %4457 = sub i32 %4455, 1
  %4458 = mul i32 %4455, %4457
  %4459 = urem i32 %4458, 2
  %4460 = icmp eq i32 %4459, 0
  %4461 = icmp slt i32 %4456, 10
  %4462 = or i1 %4460, %4461
  br i1 %4462, label %originalBB1251, label %originalBB1251alteredBB

originalBB1251:                                   ; preds = %4454, %originalBB1251alteredBB
  %4463 = load i32, i32* @x.17
  %4464 = load i32, i32* @y.18
  %4465 = sub i32 %4463, 1
  %4466 = mul i32 %4463, %4465
  %4467 = urem i32 %4466, 2
  %4468 = icmp eq i32 %4467, 0
  %4469 = icmp slt i32 %4464, 10
  %4470 = or i1 %4468, %4469
  br i1 %4470, label %originalBBpart21253, label %originalBB1251alteredBB

originalBBpart21253:                              ; preds = %originalBB1251
  br label %4471, !dbg !1885

4471:                                             ; preds = %originalBBpart21253
  %4472 = load i32, i32* @x.17
  %4473 = load i32, i32* @y.18
  %4474 = sub i32 %4472, 1
  %4475 = mul i32 %4472, %4474
  %4476 = urem i32 %4475, 2
  %4477 = icmp eq i32 %4476, 0
  %4478 = icmp slt i32 %4473, 10
  %4479 = or i1 %4477, %4478
  br i1 %4479, label %originalBB1255, label %originalBB1255alteredBB

originalBB1255:                                   ; preds = %4471, %originalBB1255alteredBB
  %4480 = load i8, i8* %36, align 1, !dbg !1886
  %4481 = trunc i8 %4480 to i1, !dbg !1886
  %4482 = load i32, i32* @x.17
  %4483 = load i32, i32* @y.18
  %4484 = sub i32 %4482, 1
  %4485 = mul i32 %4482, %4484
  %4486 = urem i32 %4485, 2
  %4487 = icmp eq i32 %4486, 0
  %4488 = icmp slt i32 %4483, 10
  %4489 = or i1 %4487, %4488
  br i1 %4489, label %originalBBpart21257, label %originalBB1255alteredBB

originalBBpart21257:                              ; preds = %originalBB1255
  br i1 %4481, label %4490, label %4662, !dbg !1886

4490:                                             ; preds = %originalBBpart21257
  %4491 = load i8, i8* %42, align 1, !dbg !1886
  %4492 = trunc i8 %4491 to i1, !dbg !1886
  br i1 %4492, label %4662, label %4493, !dbg !1889

4493:                                             ; preds = %4490
  %4494 = load i32, i32* @x.17
  %4495 = load i32, i32* @y.18
  %4496 = sub i32 %4494, 1
  %4497 = mul i32 %4494, %4496
  %4498 = urem i32 %4497, 2
  %4499 = icmp eq i32 %4498, 0
  %4500 = icmp slt i32 %4495, 10
  %4501 = or i1 %4499, %4500
  br i1 %4501, label %originalBB1259, label %originalBB1259alteredBB

originalBB1259:                                   ; preds = %4493, %originalBB1259alteredBB
  %4502 = load i32, i32* @x.17
  %4503 = load i32, i32* @y.18
  %4504 = sub i32 %4502, 1
  %4505 = mul i32 %4502, %4504
  %4506 = urem i32 %4505, 2
  %4507 = icmp eq i32 %4506, 0
  %4508 = icmp slt i32 %4503, 10
  %4509 = or i1 %4507, %4508
  br i1 %4509, label %originalBBpart21261, label %originalBB1259alteredBB

originalBBpart21261:                              ; preds = %originalBB1259
  br label %4510, !dbg !1890

4510:                                             ; preds = %originalBBpart21261
  %4511 = load i32, i32* @x.17
  %4512 = load i32, i32* @y.18
  %4513 = sub i32 %4511, 1
  %4514 = mul i32 %4511, %4513
  %4515 = urem i32 %4514, 2
  %4516 = icmp eq i32 %4515, 0
  %4517 = icmp slt i32 %4512, 10
  %4518 = or i1 %4516, %4517
  br i1 %4518, label %originalBB1263, label %originalBB1263alteredBB

originalBB1263:                                   ; preds = %4510, %originalBB1263alteredBB
  %4519 = load i64, i64* %29, align 8, !dbg !1892
  %4520 = load i64, i64* %20, align 8, !dbg !1892
  %4521 = icmp ult i64 %4519, %4520, !dbg !1892
  %4522 = load i32, i32* @x.17
  %4523 = load i32, i32* @y.18
  %4524 = sub i32 %4522, 1
  %4525 = mul i32 %4522, %4524
  %4526 = urem i32 %4525, 2
  %4527 = icmp eq i32 %4526, 0
  %4528 = icmp slt i32 %4523, 10
  %4529 = or i1 %4527, %4528
  br i1 %4529, label %originalBBpart21265, label %originalBB1263alteredBB

originalBBpart21265:                              ; preds = %originalBB1263
  br i1 %4521, label %4530, label %4550, !dbg !1895

4530:                                             ; preds = %originalBBpart21265
  %4531 = load i32, i32* @x.17
  %4532 = load i32, i32* @y.18
  %4533 = sub i32 %4531, 1
  %4534 = mul i32 %4531, %4533
  %4535 = urem i32 %4534, 2
  %4536 = icmp eq i32 %4535, 0
  %4537 = icmp slt i32 %4532, 10
  %4538 = or i1 %4536, %4537
  br i1 %4538, label %originalBB1267, label %originalBB1267alteredBB

originalBB1267:                                   ; preds = %4530, %originalBB1267alteredBB
  %4539 = load i8*, i8** %19, align 8, !dbg !1892
  %4540 = load i64, i64* %29, align 8, !dbg !1892
  %4541 = getelementptr inbounds i8, i8* %4539, i64 %4540, !dbg !1892
  store i8 39, i8* %4541, align 1, !dbg !1892
  %4542 = load i32, i32* @x.17
  %4543 = load i32, i32* @y.18
  %4544 = sub i32 %4542, 1
  %4545 = mul i32 %4542, %4544
  %4546 = urem i32 %4545, 2
  %4547 = icmp eq i32 %4546, 0
  %4548 = icmp slt i32 %4543, 10
  %4549 = or i1 %4547, %4548
  br i1 %4549, label %originalBBpart21269, label %originalBB1267alteredBB

originalBBpart21269:                              ; preds = %originalBB1267
  br label %4550, !dbg !1892

4550:                                             ; preds = %originalBBpart21269, %originalBBpart21265
  %4551 = load i32, i32* @x.17
  %4552 = load i32, i32* @y.18
  %4553 = sub i32 %4551, 1
  %4554 = mul i32 %4551, %4553
  %4555 = urem i32 %4554, 2
  %4556 = icmp eq i32 %4555, 0
  %4557 = icmp slt i32 %4552, 10
  %4558 = or i1 %4556, %4557
  br i1 %4558, label %originalBB1271, label %originalBB1271alteredBB

originalBB1271:                                   ; preds = %4550, %originalBB1271alteredBB
  %4559 = load i64, i64* %29, align 8, !dbg !1895
  %4560 = add i64 %4559, 1, !dbg !1895
  store i64 %4560, i64* %29, align 8, !dbg !1895
  %4561 = load i32, i32* @x.17
  %4562 = load i32, i32* @y.18
  %4563 = sub i32 %4561, 1
  %4564 = mul i32 %4561, %4563
  %4565 = urem i32 %4564, 2
  %4566 = icmp eq i32 %4565, 0
  %4567 = icmp slt i32 %4562, 10
  %4568 = or i1 %4566, %4567
  br i1 %4568, label %originalBBpart21286, label %originalBB1271alteredBB

originalBBpart21286:                              ; preds = %originalBB1271
  br label %4569, !dbg !1895

4569:                                             ; preds = %originalBBpart21286
  %4570 = load i32, i32* @x.17
  %4571 = load i32, i32* @y.18
  %4572 = sub i32 %4570, 1
  %4573 = mul i32 %4570, %4572
  %4574 = urem i32 %4573, 2
  %4575 = icmp eq i32 %4574, 0
  %4576 = icmp slt i32 %4571, 10
  %4577 = or i1 %4575, %4576
  br i1 %4577, label %originalBB1288, label %originalBB1288alteredBB

originalBB1288:                                   ; preds = %4569, %originalBB1288alteredBB
  %4578 = load i32, i32* @x.17
  %4579 = load i32, i32* @y.18
  %4580 = sub i32 %4578, 1
  %4581 = mul i32 %4578, %4580
  %4582 = urem i32 %4581, 2
  %4583 = icmp eq i32 %4582, 0
  %4584 = icmp slt i32 %4579, 10
  %4585 = or i1 %4583, %4584
  br i1 %4585, label %originalBBpart21290, label %originalBB1288alteredBB

originalBBpart21290:                              ; preds = %originalBB1288
  br label %4586, !dbg !1890

4586:                                             ; preds = %originalBBpart21290
  %4587 = load i32, i32* @x.17
  %4588 = load i32, i32* @y.18
  %4589 = sub i32 %4587, 1
  %4590 = mul i32 %4587, %4589
  %4591 = urem i32 %4590, 2
  %4592 = icmp eq i32 %4591, 0
  %4593 = icmp slt i32 %4588, 10
  %4594 = or i1 %4592, %4593
  br i1 %4594, label %originalBB1292, label %originalBB1292alteredBB

originalBB1292:                                   ; preds = %4586, %originalBB1292alteredBB
  %4595 = load i64, i64* %29, align 8, !dbg !1896
  %4596 = load i64, i64* %20, align 8, !dbg !1896
  %4597 = icmp ult i64 %4595, %4596, !dbg !1896
  %4598 = load i32, i32* @x.17
  %4599 = load i32, i32* @y.18
  %4600 = sub i32 %4598, 1
  %4601 = mul i32 %4598, %4600
  %4602 = urem i32 %4601, 2
  %4603 = icmp eq i32 %4602, 0
  %4604 = icmp slt i32 %4599, 10
  %4605 = or i1 %4603, %4604
  br i1 %4605, label %originalBBpart21294, label %originalBB1292alteredBB

originalBBpart21294:                              ; preds = %originalBB1292
  br i1 %4597, label %4606, label %4626, !dbg !1899

4606:                                             ; preds = %originalBBpart21294
  %4607 = load i32, i32* @x.17
  %4608 = load i32, i32* @y.18
  %4609 = sub i32 %4607, 1
  %4610 = mul i32 %4607, %4609
  %4611 = urem i32 %4610, 2
  %4612 = icmp eq i32 %4611, 0
  %4613 = icmp slt i32 %4608, 10
  %4614 = or i1 %4612, %4613
  br i1 %4614, label %originalBB1296, label %originalBB1296alteredBB

originalBB1296:                                   ; preds = %4606, %originalBB1296alteredBB
  %4615 = load i8*, i8** %19, align 8, !dbg !1896
  %4616 = load i64, i64* %29, align 8, !dbg !1896
  %4617 = getelementptr inbounds i8, i8* %4615, i64 %4616, !dbg !1896
  store i8 39, i8* %4617, align 1, !dbg !1896
  %4618 = load i32, i32* @x.17
  %4619 = load i32, i32* @y.18
  %4620 = sub i32 %4618, 1
  %4621 = mul i32 %4618, %4620
  %4622 = urem i32 %4621, 2
  %4623 = icmp eq i32 %4622, 0
  %4624 = icmp slt i32 %4619, 10
  %4625 = or i1 %4623, %4624
  br i1 %4625, label %originalBBpart21298, label %originalBB1296alteredBB

originalBBpart21298:                              ; preds = %originalBB1296
  br label %4626, !dbg !1896

4626:                                             ; preds = %originalBBpart21298, %originalBBpart21294
  %4627 = load i32, i32* @x.17
  %4628 = load i32, i32* @y.18
  %4629 = sub i32 %4627, 1
  %4630 = mul i32 %4627, %4629
  %4631 = urem i32 %4630, 2
  %4632 = icmp eq i32 %4631, 0
  %4633 = icmp slt i32 %4628, 10
  %4634 = or i1 %4632, %4633
  br i1 %4634, label %originalBB1300, label %originalBB1300alteredBB

originalBB1300:                                   ; preds = %4626, %originalBB1300alteredBB
  %4635 = load i64, i64* %29, align 8, !dbg !1899
  %4636 = add i64 %4635, 1, !dbg !1899
  store i64 %4636, i64* %29, align 8, !dbg !1899
  %4637 = load i32, i32* @x.17
  %4638 = load i32, i32* @y.18
  %4639 = sub i32 %4637, 1
  %4640 = mul i32 %4637, %4639
  %4641 = urem i32 %4640, 2
  %4642 = icmp eq i32 %4641, 0
  %4643 = icmp slt i32 %4638, 10
  %4644 = or i1 %4642, %4643
  br i1 %4644, label %originalBBpart21315, label %originalBB1300alteredBB

originalBBpart21315:                              ; preds = %originalBB1300
  br label %4645, !dbg !1899

4645:                                             ; preds = %originalBBpart21315
  %4646 = load i32, i32* @x.17
  %4647 = load i32, i32* @y.18
  %4648 = sub i32 %4646, 1
  %4649 = mul i32 %4646, %4648
  %4650 = urem i32 %4649, 2
  %4651 = icmp eq i32 %4650, 0
  %4652 = icmp slt i32 %4647, 10
  %4653 = or i1 %4651, %4652
  br i1 %4653, label %originalBB1317, label %originalBB1317alteredBB

originalBB1317:                                   ; preds = %4645, %originalBB1317alteredBB
  store i8 0, i8* %36, align 1, !dbg !1890
  %4654 = load i32, i32* @x.17
  %4655 = load i32, i32* @y.18
  %4656 = sub i32 %4654, 1
  %4657 = mul i32 %4654, %4656
  %4658 = urem i32 %4657, 2
  %4659 = icmp eq i32 %4658, 0
  %4660 = icmp slt i32 %4655, 10
  %4661 = or i1 %4659, %4660
  br i1 %4661, label %originalBBpart21319, label %originalBB1317alteredBB

originalBBpart21319:                              ; preds = %originalBB1317
  br label %4662, !dbg !1890

4662:                                             ; preds = %originalBBpart21319, %4490, %originalBBpart21257
  %4663 = load i32, i32* @x.17
  %4664 = load i32, i32* @y.18
  %4665 = sub i32 %4663, 1
  %4666 = mul i32 %4663, %4665
  %4667 = urem i32 %4666, 2
  %4668 = icmp eq i32 %4667, 0
  %4669 = icmp slt i32 %4664, 10
  %4670 = or i1 %4668, %4669
  br i1 %4670, label %originalBB1321, label %originalBB1321alteredBB

originalBB1321:                                   ; preds = %4662, %originalBB1321alteredBB
  %4671 = load i32, i32* @x.17
  %4672 = load i32, i32* @y.18
  %4673 = sub i32 %4671, 1
  %4674 = mul i32 %4671, %4673
  %4675 = urem i32 %4674, 2
  %4676 = icmp eq i32 %4675, 0
  %4677 = icmp slt i32 %4672, 10
  %4678 = or i1 %4676, %4677
  br i1 %4678, label %originalBBpart21323, label %originalBB1321alteredBB

originalBBpart21323:                              ; preds = %originalBB1321
  br label %4679, !dbg !1889

4679:                                             ; preds = %originalBBpart21323
  %4680 = load i32, i32* @x.17
  %4681 = load i32, i32* @y.18
  %4682 = sub i32 %4680, 1
  %4683 = mul i32 %4680, %4682
  %4684 = urem i32 %4683, 2
  %4685 = icmp eq i32 %4684, 0
  %4686 = icmp slt i32 %4681, 10
  %4687 = or i1 %4685, %4686
  br i1 %4687, label %originalBB1325, label %originalBB1325alteredBB

originalBB1325:                                   ; preds = %4679, %originalBB1325alteredBB
  %4688 = load i32, i32* @x.17
  %4689 = load i32, i32* @y.18
  %4690 = sub i32 %4688, 1
  %4691 = mul i32 %4688, %4690
  %4692 = urem i32 %4691, 2
  %4693 = icmp eq i32 %4692, 0
  %4694 = icmp slt i32 %4689, 10
  %4695 = or i1 %4693, %4694
  br i1 %4695, label %originalBBpart21327, label %originalBB1325alteredBB

originalBBpart21327:                              ; preds = %originalBB1325
  br label %4696, !dbg !1900

4696:                                             ; preds = %originalBBpart21327
  %4697 = load i32, i32* @x.17
  %4698 = load i32, i32* @y.18
  %4699 = sub i32 %4697, 1
  %4700 = mul i32 %4697, %4699
  %4701 = urem i32 %4700, 2
  %4702 = icmp eq i32 %4701, 0
  %4703 = icmp slt i32 %4698, 10
  %4704 = or i1 %4702, %4703
  br i1 %4704, label %originalBB1329, label %originalBB1329alteredBB

originalBB1329:                                   ; preds = %4696, %originalBB1329alteredBB
  %4705 = load i64, i64* %29, align 8, !dbg !1901
  %4706 = load i64, i64* %20, align 8, !dbg !1901
  %4707 = icmp ult i64 %4705, %4706, !dbg !1901
  %4708 = load i32, i32* @x.17
  %4709 = load i32, i32* @y.18
  %4710 = sub i32 %4708, 1
  %4711 = mul i32 %4708, %4710
  %4712 = urem i32 %4711, 2
  %4713 = icmp eq i32 %4712, 0
  %4714 = icmp slt i32 %4709, 10
  %4715 = or i1 %4713, %4714
  br i1 %4715, label %originalBBpart21331, label %originalBB1329alteredBB

originalBBpart21331:                              ; preds = %originalBB1329
  br i1 %4707, label %4716, label %4721, !dbg !1904

4716:                                             ; preds = %originalBBpart21331
  %4717 = load i8, i8* %39, align 1, !dbg !1901
  %4718 = load i8*, i8** %19, align 8, !dbg !1901
  %4719 = load i64, i64* %29, align 8, !dbg !1901
  %4720 = getelementptr inbounds i8, i8* %4718, i64 %4719, !dbg !1901
  store i8 %4717, i8* %4720, align 1, !dbg !1901
  br label %4721, !dbg !1901

4721:                                             ; preds = %4716, %originalBBpart21331
  %4722 = load i64, i64* %29, align 8, !dbg !1904
  %4723 = add i64 %4722, 1, !dbg !1904
  store i64 %4723, i64* %29, align 8, !dbg !1904
  br label %4724, !dbg !1904

4724:                                             ; preds = %4721
  %4725 = load i32, i32* @x.17
  %4726 = load i32, i32* @y.18
  %4727 = sub i32 %4725, 1
  %4728 = mul i32 %4725, %4727
  %4729 = urem i32 %4728, 2
  %4730 = icmp eq i32 %4729, 0
  %4731 = icmp slt i32 %4726, 10
  %4732 = or i1 %4730, %4731
  br i1 %4732, label %originalBB1333, label %originalBB1333alteredBB

originalBB1333:                                   ; preds = %4724, %originalBB1333alteredBB
  %4733 = load i8, i8* %43, align 1, !dbg !1905
  %4734 = trunc i8 %4733 to i1, !dbg !1905
  %4735 = load i32, i32* @x.17
  %4736 = load i32, i32* @y.18
  %4737 = sub i32 %4735, 1
  %4738 = mul i32 %4735, %4737
  %4739 = urem i32 %4738, 2
  %4740 = icmp eq i32 %4739, 0
  %4741 = icmp slt i32 %4736, 10
  %4742 = or i1 %4740, %4741
  br i1 %4742, label %originalBBpart21335, label %originalBB1333alteredBB

originalBBpart21335:                              ; preds = %originalBB1333
  br i1 %4734, label %4744, label %4743, !dbg !1907

4743:                                             ; preds = %originalBBpart21335
  store i8 0, i8* %38, align 1, !dbg !1908
  br label %4744, !dbg !1909

4744:                                             ; preds = %4743, %originalBBpart21335
  br label %4745, !dbg !1910

4745:                                             ; preds = %4744, %originalBBpart2352
  %4746 = load i64, i64* %28, align 8, !dbg !1911
  %4747 = add i64 %4746, 1, !dbg !1911
  store i64 %4747, i64* %28, align 8, !dbg !1911
  br label %586, !dbg !1912, !llvm.loop !1913

4748:                                             ; preds = %originalBBpart2147
  %4749 = load i32, i32* @x.17
  %4750 = load i32, i32* @y.18
  %4751 = sub i32 %4749, 1
  %4752 = mul i32 %4749, %4751
  %4753 = urem i32 %4752, 2
  %4754 = icmp eq i32 %4753, 0
  %4755 = icmp slt i32 %4750, 10
  %4756 = or i1 %4754, %4755
  br i1 %4756, label %originalBB1337, label %originalBB1337alteredBB

originalBB1337:                                   ; preds = %4748, %originalBB1337alteredBB
  %4757 = load i64, i64* %29, align 8, !dbg !1915
  %4758 = icmp eq i64 %4757, 0, !dbg !1917
  %4759 = load i32, i32* @x.17
  %4760 = load i32, i32* @y.18
  %4761 = sub i32 %4759, 1
  %4762 = mul i32 %4759, %4761
  %4763 = urem i32 %4762, 2
  %4764 = icmp eq i32 %4763, 0
  %4765 = icmp slt i32 %4760, 10
  %4766 = or i1 %4764, %4765
  br i1 %4766, label %originalBBpart21339, label %originalBB1337alteredBB

originalBBpart21339:                              ; preds = %originalBB1337
  br i1 %4758, label %4767, label %4806, !dbg !1918

4767:                                             ; preds = %originalBBpart21339
  %4768 = load i32, i32* @x.17
  %4769 = load i32, i32* @y.18
  %4770 = sub i32 %4768, 1
  %4771 = mul i32 %4768, %4770
  %4772 = urem i32 %4771, 2
  %4773 = icmp eq i32 %4772, 0
  %4774 = icmp slt i32 %4769, 10
  %4775 = or i1 %4773, %4774
  br i1 %4775, label %originalBB1341, label %originalBB1341alteredBB

originalBB1341:                                   ; preds = %4767, %originalBB1341alteredBB
  %4776 = load i32, i32* %23, align 4, !dbg !1919
  %4777 = icmp eq i32 %4776, 2, !dbg !1920
  %4778 = load i32, i32* @x.17
  %4779 = load i32, i32* @y.18
  %4780 = sub i32 %4778, 1
  %4781 = mul i32 %4778, %4780
  %4782 = urem i32 %4781, 2
  %4783 = icmp eq i32 %4782, 0
  %4784 = icmp slt i32 %4779, 10
  %4785 = or i1 %4783, %4784
  br i1 %4785, label %originalBBpart21343, label %originalBB1341alteredBB

originalBBpart21343:                              ; preds = %originalBB1341
  br i1 %4777, label %4786, label %4806, !dbg !1921

4786:                                             ; preds = %originalBBpart21343
  %4787 = load i32, i32* @x.17
  %4788 = load i32, i32* @y.18
  %4789 = sub i32 %4787, 1
  %4790 = mul i32 %4787, %4789
  %4791 = urem i32 %4790, 2
  %4792 = icmp eq i32 %4791, 0
  %4793 = icmp slt i32 %4788, 10
  %4794 = or i1 %4792, %4793
  br i1 %4794, label %originalBB1345, label %originalBB1345alteredBB

originalBB1345:                                   ; preds = %4786, %originalBB1345alteredBB
  %4795 = load i8, i8* %35, align 1, !dbg !1922
  %4796 = trunc i8 %4795 to i1, !dbg !1922
  %4797 = load i32, i32* @x.17
  %4798 = load i32, i32* @y.18
  %4799 = sub i32 %4797, 1
  %4800 = mul i32 %4797, %4799
  %4801 = urem i32 %4800, 2
  %4802 = icmp eq i32 %4801, 0
  %4803 = icmp slt i32 %4798, 10
  %4804 = or i1 %4802, %4803
  br i1 %4804, label %originalBBpart21347, label %originalBB1345alteredBB

originalBBpart21347:                              ; preds = %originalBB1345
  br i1 %4796, label %4805, label %4806, !dbg !1923

4805:                                             ; preds = %originalBBpart21347
  br label %5134, !dbg !1924

4806:                                             ; preds = %originalBBpart21347, %originalBBpart21343, %originalBBpart21339
  %4807 = load i32, i32* @x.17
  %4808 = load i32, i32* @y.18
  %4809 = sub i32 %4807, 1
  %4810 = mul i32 %4807, %4809
  %4811 = urem i32 %4810, 2
  %4812 = icmp eq i32 %4811, 0
  %4813 = icmp slt i32 %4808, 10
  %4814 = or i1 %4812, %4813
  br i1 %4814, label %originalBB1349, label %originalBB1349alteredBB

originalBB1349:                                   ; preds = %4806, %originalBB1349alteredBB
  %4815 = load i32, i32* %23, align 4, !dbg !1925
  %4816 = icmp eq i32 %4815, 2, !dbg !1927
  %4817 = load i32, i32* @x.17
  %4818 = load i32, i32* @y.18
  %4819 = sub i32 %4817, 1
  %4820 = mul i32 %4817, %4819
  %4821 = urem i32 %4820, 2
  %4822 = icmp eq i32 %4821, 0
  %4823 = icmp slt i32 %4818, 10
  %4824 = or i1 %4822, %4823
  br i1 %4824, label %originalBBpart21351, label %originalBB1349alteredBB

originalBBpart21351:                              ; preds = %originalBB1349
  br i1 %4816, label %4825, label %4934, !dbg !1928

4825:                                             ; preds = %originalBBpart21351
  %4826 = load i32, i32* @x.17
  %4827 = load i32, i32* @y.18
  %4828 = sub i32 %4826, 1
  %4829 = mul i32 %4826, %4828
  %4830 = urem i32 %4829, 2
  %4831 = icmp eq i32 %4830, 0
  %4832 = icmp slt i32 %4827, 10
  %4833 = or i1 %4831, %4832
  br i1 %4833, label %originalBB1353, label %originalBB1353alteredBB

originalBB1353:                                   ; preds = %4825, %originalBB1353alteredBB
  %4834 = load i8, i8* %35, align 1, !dbg !1929
  %4835 = trunc i8 %4834 to i1, !dbg !1929
  %4836 = load i32, i32* @x.17
  %4837 = load i32, i32* @y.18
  %4838 = sub i32 %4836, 1
  %4839 = mul i32 %4836, %4838
  %4840 = urem i32 %4839, 2
  %4841 = icmp eq i32 %4840, 0
  %4842 = icmp slt i32 %4837, 10
  %4843 = or i1 %4841, %4842
  br i1 %4843, label %originalBBpart21355, label %originalBB1353alteredBB

originalBBpart21355:                              ; preds = %originalBB1353
  br i1 %4835, label %4934, label %4844, !dbg !1930

4844:                                             ; preds = %originalBBpart21355
  %4845 = load i32, i32* @x.17
  %4846 = load i32, i32* @y.18
  %4847 = sub i32 %4845, 1
  %4848 = mul i32 %4845, %4847
  %4849 = urem i32 %4848, 2
  %4850 = icmp eq i32 %4849, 0
  %4851 = icmp slt i32 %4846, 10
  %4852 = or i1 %4850, %4851
  br i1 %4852, label %originalBB1357, label %originalBB1357alteredBB

originalBB1357:                                   ; preds = %4844, %originalBB1357alteredBB
  %4853 = load i8, i8* %37, align 1, !dbg !1931
  %4854 = trunc i8 %4853 to i1, !dbg !1931
  %4855 = load i32, i32* @x.17
  %4856 = load i32, i32* @y.18
  %4857 = sub i32 %4855, 1
  %4858 = mul i32 %4855, %4857
  %4859 = urem i32 %4858, 2
  %4860 = icmp eq i32 %4859, 0
  %4861 = icmp slt i32 %4856, 10
  %4862 = or i1 %4860, %4861
  br i1 %4862, label %originalBBpart21359, label %originalBB1357alteredBB

originalBBpart21359:                              ; preds = %originalBB1357
  br i1 %4854, label %4863, label %4934, !dbg !1932

4863:                                             ; preds = %originalBBpart21359
  %4864 = load i8, i8* %38, align 1, !dbg !1933
  %4865 = trunc i8 %4864 to i1, !dbg !1933
  br i1 %4865, label %4866, label %4892, !dbg !1936

4866:                                             ; preds = %4863
  %4867 = load i32, i32* @x.17
  %4868 = load i32, i32* @y.18
  %4869 = sub i32 %4867, 1
  %4870 = mul i32 %4867, %4869
  %4871 = urem i32 %4870, 2
  %4872 = icmp eq i32 %4871, 0
  %4873 = icmp slt i32 %4868, 10
  %4874 = or i1 %4872, %4873
  br i1 %4874, label %originalBB1361, label %originalBB1361alteredBB

originalBB1361:                                   ; preds = %4866, %originalBB1361alteredBB
  %4875 = load i8*, i8** %19, align 8, !dbg !1937
  %4876 = load i64, i64* %30, align 8, !dbg !1938
  %4877 = load i8*, i8** %21, align 8, !dbg !1939
  %4878 = load i64, i64* %22, align 8, !dbg !1940
  %4879 = load i32, i32* %24, align 4, !dbg !1941
  %4880 = load i32*, i32** %25, align 8, !dbg !1942
  %4881 = load i8*, i8** %26, align 8, !dbg !1943
  %4882 = load i8*, i8** %27, align 8, !dbg !1944
  %4883 = call i64 @quotearg_buffer_restyled(i8* %4875, i64 %4876, i8* %4877, i64 %4878, i32 5, i32 %4879, i32* %4880, i8* %4881, i8* %4882), !dbg !1945
  store i64 %4883, i64* %18, align 8, !dbg !1946
  %4884 = load i32, i32* @x.17
  %4885 = load i32, i32* @y.18
  %4886 = sub i32 %4884, 1
  %4887 = mul i32 %4884, %4886
  %4888 = urem i32 %4887, 2
  %4889 = icmp eq i32 %4888, 0
  %4890 = icmp slt i32 %4885, 10
  %4891 = or i1 %4889, %4890
  br i1 %4891, label %originalBBpart21363, label %originalBB1361alteredBB

originalBBpart21363:                              ; preds = %originalBB1361
  br label %5216, !dbg !1946

4892:                                             ; preds = %4863
  %4893 = load i64, i64* %20, align 8, !dbg !1947
  %4894 = icmp ne i64 %4893, 0, !dbg !1947
  br i1 %4894, label %4916, label %4895, !dbg !1949

4895:                                             ; preds = %4892
  %4896 = load i32, i32* @x.17
  %4897 = load i32, i32* @y.18
  %4898 = sub i32 %4896, 1
  %4899 = mul i32 %4896, %4898
  %4900 = urem i32 %4899, 2
  %4901 = icmp eq i32 %4900, 0
  %4902 = icmp slt i32 %4897, 10
  %4903 = or i1 %4901, %4902
  br i1 %4903, label %originalBB1365, label %originalBB1365alteredBB

originalBB1365:                                   ; preds = %4895, %originalBB1365alteredBB
  %4904 = load i64, i64* %30, align 8, !dbg !1950
  %4905 = icmp ne i64 %4904, 0, !dbg !1950
  %4906 = load i32, i32* @x.17
  %4907 = load i32, i32* @y.18
  %4908 = sub i32 %4906, 1
  %4909 = mul i32 %4906, %4908
  %4910 = urem i32 %4909, 2
  %4911 = icmp eq i32 %4910, 0
  %4912 = icmp slt i32 %4907, 10
  %4913 = or i1 %4911, %4912
  br i1 %4913, label %originalBBpart21367, label %originalBB1365alteredBB

originalBBpart21367:                              ; preds = %originalBB1365
  br i1 %4905, label %4914, label %4916, !dbg !1951

4914:                                             ; preds = %originalBBpart21367
  %4915 = load i64, i64* %30, align 8, !dbg !1952
  store i64 %4915, i64* %20, align 8, !dbg !1954
  store i64 0, i64* %29, align 8, !dbg !1955
  br label %66, !dbg !1956

4916:                                             ; preds = %originalBBpart21367, %4892
  %4917 = load i32, i32* @x.17
  %4918 = load i32, i32* @y.18
  %4919 = sub i32 %4917, 1
  %4920 = mul i32 %4917, %4919
  %4921 = urem i32 %4920, 2
  %4922 = icmp eq i32 %4921, 0
  %4923 = icmp slt i32 %4918, 10
  %4924 = or i1 %4922, %4923
  br i1 %4924, label %originalBB1369, label %originalBB1369alteredBB

originalBB1369:                                   ; preds = %4916, %originalBB1369alteredBB
  %4925 = load i32, i32* @x.17
  %4926 = load i32, i32* @y.18
  %4927 = sub i32 %4925, 1
  %4928 = mul i32 %4925, %4927
  %4929 = urem i32 %4928, 2
  %4930 = icmp eq i32 %4929, 0
  %4931 = icmp slt i32 %4926, 10
  %4932 = or i1 %4930, %4931
  br i1 %4932, label %originalBBpart21371, label %originalBB1369alteredBB

originalBBpart21371:                              ; preds = %originalBB1369
  br label %4933

4933:                                             ; preds = %originalBBpart21371
  br label %4934, !dbg !1957

4934:                                             ; preds = %4933, %originalBBpart21359, %originalBBpart21355, %originalBBpart21351
  %4935 = load i8*, i8** %31, align 8, !dbg !1958
  %4936 = icmp ne i8* %4935, null, !dbg !1958
  br i1 %4936, label %4937, label %5076, !dbg !1960

4937:                                             ; preds = %4934
  %4938 = load i8, i8* %35, align 1, !dbg !1961
  %4939 = trunc i8 %4938 to i1, !dbg !1961
  br i1 %4939, label %5076, label %4940, !dbg !1962

4940:                                             ; preds = %4937
  %4941 = load i32, i32* @x.17
  %4942 = load i32, i32* @y.18
  %4943 = sub i32 %4941, 1
  %4944 = mul i32 %4941, %4943
  %4945 = urem i32 %4944, 2
  %4946 = icmp eq i32 %4945, 0
  %4947 = icmp slt i32 %4942, 10
  %4948 = or i1 %4946, %4947
  br i1 %4948, label %originalBB1373, label %originalBB1373alteredBB

originalBB1373:                                   ; preds = %4940, %originalBB1373alteredBB
  %4949 = load i32, i32* @x.17
  %4950 = load i32, i32* @y.18
  %4951 = sub i32 %4949, 1
  %4952 = mul i32 %4949, %4951
  %4953 = urem i32 %4952, 2
  %4954 = icmp eq i32 %4953, 0
  %4955 = icmp slt i32 %4950, 10
  %4956 = or i1 %4954, %4955
  br i1 %4956, label %originalBBpart21375, label %originalBB1373alteredBB

originalBBpart21375:                              ; preds = %originalBB1373
  br label %4957, !dbg !1963

4957:                                             ; preds = %5056, %originalBBpart21375
  %4958 = load i32, i32* @x.17
  %4959 = load i32, i32* @y.18
  %4960 = sub i32 %4958, 1
  %4961 = mul i32 %4958, %4960
  %4962 = urem i32 %4961, 2
  %4963 = icmp eq i32 %4962, 0
  %4964 = icmp slt i32 %4959, 10
  %4965 = or i1 %4963, %4964
  br i1 %4965, label %originalBB1377, label %originalBB1377alteredBB

originalBB1377:                                   ; preds = %4957, %originalBB1377alteredBB
  %4966 = load i8*, i8** %31, align 8, !dbg !1964
  %4967 = load i8, i8* %4966, align 1, !dbg !1967
  %4968 = icmp ne i8 %4967, 0, !dbg !1968
  %4969 = load i32, i32* @x.17
  %4970 = load i32, i32* @y.18
  %4971 = sub i32 %4969, 1
  %4972 = mul i32 %4969, %4971
  %4973 = urem i32 %4972, 2
  %4974 = icmp eq i32 %4973, 0
  %4975 = icmp slt i32 %4970, 10
  %4976 = or i1 %4974, %4975
  br i1 %4976, label %originalBBpart21379, label %originalBB1377alteredBB

originalBBpart21379:                              ; preds = %originalBB1377
  br i1 %4968, label %4977, label %5059, !dbg !1968

4977:                                             ; preds = %originalBBpart21379
  br label %4978, !dbg !1969

4978:                                             ; preds = %4977
  %4979 = load i32, i32* @x.17
  %4980 = load i32, i32* @y.18
  %4981 = sub i32 %4979, 1
  %4982 = mul i32 %4979, %4981
  %4983 = urem i32 %4982, 2
  %4984 = icmp eq i32 %4983, 0
  %4985 = icmp slt i32 %4980, 10
  %4986 = or i1 %4984, %4985
  br i1 %4986, label %originalBB1381, label %originalBB1381alteredBB

originalBB1381:                                   ; preds = %4978, %originalBB1381alteredBB
  %4987 = load i64, i64* %29, align 8, !dbg !1970
  %4988 = load i64, i64* %20, align 8, !dbg !1970
  %4989 = icmp ult i64 %4987, %4988, !dbg !1970
  %4990 = load i32, i32* @x.17
  %4991 = load i32, i32* @y.18
  %4992 = sub i32 %4990, 1
  %4993 = mul i32 %4990, %4992
  %4994 = urem i32 %4993, 2
  %4995 = icmp eq i32 %4994, 0
  %4996 = icmp slt i32 %4991, 10
  %4997 = or i1 %4995, %4996
  br i1 %4997, label %originalBBpart21383, label %originalBB1381alteredBB

originalBBpart21383:                              ; preds = %originalBB1381
  br i1 %4989, label %4998, label %5020, !dbg !1973

4998:                                             ; preds = %originalBBpart21383
  %4999 = load i32, i32* @x.17
  %5000 = load i32, i32* @y.18
  %5001 = sub i32 %4999, 1
  %5002 = mul i32 %4999, %5001
  %5003 = urem i32 %5002, 2
  %5004 = icmp eq i32 %5003, 0
  %5005 = icmp slt i32 %5000, 10
  %5006 = or i1 %5004, %5005
  br i1 %5006, label %originalBB1385, label %originalBB1385alteredBB

originalBB1385:                                   ; preds = %4998, %originalBB1385alteredBB
  %5007 = load i8*, i8** %31, align 8, !dbg !1970
  %5008 = load i8, i8* %5007, align 1, !dbg !1970
  %5009 = load i8*, i8** %19, align 8, !dbg !1970
  %5010 = load i64, i64* %29, align 8, !dbg !1970
  %5011 = getelementptr inbounds i8, i8* %5009, i64 %5010, !dbg !1970
  store i8 %5008, i8* %5011, align 1, !dbg !1970
  %5012 = load i32, i32* @x.17
  %5013 = load i32, i32* @y.18
  %5014 = sub i32 %5012, 1
  %5015 = mul i32 %5012, %5014
  %5016 = urem i32 %5015, 2
  %5017 = icmp eq i32 %5016, 0
  %5018 = icmp slt i32 %5013, 10
  %5019 = or i1 %5017, %5018
  br i1 %5019, label %originalBBpart21387, label %originalBB1385alteredBB

originalBBpart21387:                              ; preds = %originalBB1385
  br label %5020, !dbg !1970

5020:                                             ; preds = %originalBBpart21387, %originalBBpart21383
  %5021 = load i32, i32* @x.17
  %5022 = load i32, i32* @y.18
  %5023 = sub i32 %5021, 1
  %5024 = mul i32 %5021, %5023
  %5025 = urem i32 %5024, 2
  %5026 = icmp eq i32 %5025, 0
  %5027 = icmp slt i32 %5022, 10
  %5028 = or i1 %5026, %5027
  br i1 %5028, label %originalBB1389, label %originalBB1389alteredBB

originalBB1389:                                   ; preds = %5020, %originalBB1389alteredBB
  %5029 = load i64, i64* %29, align 8, !dbg !1973
  %5030 = add i64 %5029, 1, !dbg !1973
  store i64 %5030, i64* %29, align 8, !dbg !1973
  %5031 = load i32, i32* @x.17
  %5032 = load i32, i32* @y.18
  %5033 = sub i32 %5031, 1
  %5034 = mul i32 %5031, %5033
  %5035 = urem i32 %5034, 2
  %5036 = icmp eq i32 %5035, 0
  %5037 = icmp slt i32 %5032, 10
  %5038 = or i1 %5036, %5037
  br i1 %5038, label %originalBBpart21397, label %originalBB1389alteredBB

originalBBpart21397:                              ; preds = %originalBB1389
  br label %5039, !dbg !1973

5039:                                             ; preds = %originalBBpart21397
  %5040 = load i32, i32* @x.17
  %5041 = load i32, i32* @y.18
  %5042 = sub i32 %5040, 1
  %5043 = mul i32 %5040, %5042
  %5044 = urem i32 %5043, 2
  %5045 = icmp eq i32 %5044, 0
  %5046 = icmp slt i32 %5041, 10
  %5047 = or i1 %5045, %5046
  br i1 %5047, label %originalBB1399, label %originalBB1399alteredBB

originalBB1399:                                   ; preds = %5039, %originalBB1399alteredBB
  %5048 = load i32, i32* @x.17
  %5049 = load i32, i32* @y.18
  %5050 = sub i32 %5048, 1
  %5051 = mul i32 %5048, %5050
  %5052 = urem i32 %5051, 2
  %5053 = icmp eq i32 %5052, 0
  %5054 = icmp slt i32 %5049, 10
  %5055 = or i1 %5053, %5054
  br i1 %5055, label %originalBBpart21401, label %originalBB1399alteredBB

originalBBpart21401:                              ; preds = %originalBB1399
  br label %5056, !dbg !1973

5056:                                             ; preds = %originalBBpart21401
  %5057 = load i8*, i8** %31, align 8, !dbg !1974
  %5058 = getelementptr inbounds i8, i8* %5057, i32 1, !dbg !1974
  store i8* %5058, i8** %31, align 8, !dbg !1974
  br label %4957, !dbg !1975, !llvm.loop !1976

5059:                                             ; preds = %originalBBpart21379
  %5060 = load i32, i32* @x.17
  %5061 = load i32, i32* @y.18
  %5062 = sub i32 %5060, 1
  %5063 = mul i32 %5060, %5062
  %5064 = urem i32 %5063, 2
  %5065 = icmp eq i32 %5064, 0
  %5066 = icmp slt i32 %5061, 10
  %5067 = or i1 %5065, %5066
  br i1 %5067, label %originalBB1403, label %originalBB1403alteredBB

originalBB1403:                                   ; preds = %5059, %originalBB1403alteredBB
  %5068 = load i32, i32* @x.17
  %5069 = load i32, i32* @y.18
  %5070 = sub i32 %5068, 1
  %5071 = mul i32 %5068, %5070
  %5072 = urem i32 %5071, 2
  %5073 = icmp eq i32 %5072, 0
  %5074 = icmp slt i32 %5069, 10
  %5075 = or i1 %5073, %5074
  br i1 %5075, label %originalBBpart21405, label %originalBB1403alteredBB

originalBBpart21405:                              ; preds = %originalBB1403
  br label %5076, !dbg !1977

5076:                                             ; preds = %originalBBpart21405, %4937, %4934
  %5077 = load i32, i32* @x.17
  %5078 = load i32, i32* @y.18
  %5079 = sub i32 %5077, 1
  %5080 = mul i32 %5077, %5079
  %5081 = urem i32 %5080, 2
  %5082 = icmp eq i32 %5081, 0
  %5083 = icmp slt i32 %5078, 10
  %5084 = or i1 %5082, %5083
  br i1 %5084, label %originalBB1407, label %originalBB1407alteredBB

originalBB1407:                                   ; preds = %5076, %originalBB1407alteredBB
  %5085 = load i64, i64* %29, align 8, !dbg !1978
  %5086 = load i64, i64* %20, align 8, !dbg !1980
  %5087 = icmp ult i64 %5085, %5086, !dbg !1981
  %5088 = load i32, i32* @x.17
  %5089 = load i32, i32* @y.18
  %5090 = sub i32 %5088, 1
  %5091 = mul i32 %5088, %5090
  %5092 = urem i32 %5091, 2
  %5093 = icmp eq i32 %5092, 0
  %5094 = icmp slt i32 %5089, 10
  %5095 = or i1 %5093, %5094
  br i1 %5095, label %originalBBpart21409, label %originalBB1407alteredBB

originalBBpart21409:                              ; preds = %originalBB1407
  br i1 %5087, label %5096, label %5116, !dbg !1982

5096:                                             ; preds = %originalBBpart21409
  %5097 = load i32, i32* @x.17
  %5098 = load i32, i32* @y.18
  %5099 = sub i32 %5097, 1
  %5100 = mul i32 %5097, %5099
  %5101 = urem i32 %5100, 2
  %5102 = icmp eq i32 %5101, 0
  %5103 = icmp slt i32 %5098, 10
  %5104 = or i1 %5102, %5103
  br i1 %5104, label %originalBB1411, label %originalBB1411alteredBB

originalBB1411:                                   ; preds = %5096, %originalBB1411alteredBB
  %5105 = load i8*, i8** %19, align 8, !dbg !1983
  %5106 = load i64, i64* %29, align 8, !dbg !1984
  %5107 = getelementptr inbounds i8, i8* %5105, i64 %5106, !dbg !1983
  store i8 0, i8* %5107, align 1, !dbg !1985
  %5108 = load i32, i32* @x.17
  %5109 = load i32, i32* @y.18
  %5110 = sub i32 %5108, 1
  %5111 = mul i32 %5108, %5110
  %5112 = urem i32 %5111, 2
  %5113 = icmp eq i32 %5112, 0
  %5114 = icmp slt i32 %5109, 10
  %5115 = or i1 %5113, %5114
  br i1 %5115, label %originalBBpart21413, label %originalBB1411alteredBB

originalBBpart21413:                              ; preds = %originalBB1411
  br label %5116, !dbg !1983

5116:                                             ; preds = %originalBBpart21413, %originalBBpart21409
  %5117 = load i32, i32* @x.17
  %5118 = load i32, i32* @y.18
  %5119 = sub i32 %5117, 1
  %5120 = mul i32 %5117, %5119
  %5121 = urem i32 %5120, 2
  %5122 = icmp eq i32 %5121, 0
  %5123 = icmp slt i32 %5118, 10
  %5124 = or i1 %5122, %5123
  br i1 %5124, label %originalBB1415, label %originalBB1415alteredBB

originalBB1415:                                   ; preds = %5116, %originalBB1415alteredBB
  %5125 = load i64, i64* %29, align 8, !dbg !1986
  store i64 %5125, i64* %18, align 8, !dbg !1987
  %5126 = load i32, i32* @x.17
  %5127 = load i32, i32* @y.18
  %5128 = sub i32 %5126, 1
  %5129 = mul i32 %5126, %5128
  %5130 = urem i32 %5129, 2
  %5131 = icmp eq i32 %5130, 0
  %5132 = icmp slt i32 %5127, 10
  %5133 = or i1 %5131, %5132
  br i1 %5133, label %originalBBpart21417, label %originalBB1415alteredBB

originalBBpart21417:                              ; preds = %originalBB1415
  br label %5216, !dbg !1987

5134:                                             ; preds = %4805, %originalBBpart21179, %3210, %2936, %originalBBpart2603, %originalBBpart2599, %2214, %originalBBpart2535, %1639, %originalBBpart2372, %originalBBpart2195, %originalBBpart2179
  call void @llvm.dbg.label(metadata !1988), !dbg !1989
  %5135 = load i32, i32* @x.17
  %5136 = load i32, i32* @y.18
  %5137 = sub i32 %5135, 1
  %5138 = mul i32 %5135, %5137
  %5139 = urem i32 %5138, 2
  %5140 = icmp eq i32 %5139, 0
  %5141 = icmp slt i32 %5136, 10
  %5142 = or i1 %5140, %5141
  br i1 %5142, label %originalBB1419, label %originalBB1419alteredBB

originalBB1419:                                   ; preds = %5134, %originalBB1419alteredBB
  %5143 = load i32, i32* %23, align 4, !dbg !1990
  %5144 = icmp eq i32 %5143, 2, !dbg !1992
  %5145 = load i32, i32* @x.17
  %5146 = load i32, i32* @y.18
  %5147 = sub i32 %5145, 1
  %5148 = mul i32 %5145, %5147
  %5149 = urem i32 %5148, 2
  %5150 = icmp eq i32 %5149, 0
  %5151 = icmp slt i32 %5146, 10
  %5152 = or i1 %5150, %5151
  br i1 %5152, label %originalBBpart21421, label %originalBB1419alteredBB

originalBBpart21421:                              ; preds = %originalBB1419
  br i1 %5144, label %5153, label %5189, !dbg !1993

5153:                                             ; preds = %originalBBpart21421
  %5154 = load i32, i32* @x.17
  %5155 = load i32, i32* @y.18
  %5156 = sub i32 %5154, 1
  %5157 = mul i32 %5154, %5156
  %5158 = urem i32 %5157, 2
  %5159 = icmp eq i32 %5158, 0
  %5160 = icmp slt i32 %5155, 10
  %5161 = or i1 %5159, %5160
  br i1 %5161, label %originalBB1423, label %originalBB1423alteredBB

originalBB1423:                                   ; preds = %5153, %originalBB1423alteredBB
  %5162 = load i8, i8* %33, align 1, !dbg !1994
  %5163 = trunc i8 %5162 to i1, !dbg !1994
  %5164 = load i32, i32* @x.17
  %5165 = load i32, i32* @y.18
  %5166 = sub i32 %5164, 1
  %5167 = mul i32 %5164, %5166
  %5168 = urem i32 %5167, 2
  %5169 = icmp eq i32 %5168, 0
  %5170 = icmp slt i32 %5165, 10
  %5171 = or i1 %5169, %5170
  br i1 %5171, label %originalBBpart21425, label %originalBB1423alteredBB

originalBBpart21425:                              ; preds = %originalBB1423
  br i1 %5163, label %5172, label %5189, !dbg !1995

5172:                                             ; preds = %originalBBpart21425
  %5173 = load i32, i32* @x.17
  %5174 = load i32, i32* @y.18
  %5175 = sub i32 %5173, 1
  %5176 = mul i32 %5173, %5175
  %5177 = urem i32 %5176, 2
  %5178 = icmp eq i32 %5177, 0
  %5179 = icmp slt i32 %5174, 10
  %5180 = or i1 %5178, %5179
  br i1 %5180, label %originalBB1427, label %originalBB1427alteredBB

originalBB1427:                                   ; preds = %5172, %originalBB1427alteredBB
  store i32 4, i32* %23, align 4, !dbg !1996
  %5181 = load i32, i32* @x.17
  %5182 = load i32, i32* @y.18
  %5183 = sub i32 %5181, 1
  %5184 = mul i32 %5181, %5183
  %5185 = urem i32 %5184, 2
  %5186 = icmp eq i32 %5185, 0
  %5187 = icmp slt i32 %5182, 10
  %5188 = or i1 %5186, %5187
  br i1 %5188, label %originalBBpart21429, label %originalBB1427alteredBB

originalBBpart21429:                              ; preds = %originalBB1427
  br label %5189, !dbg !1997

5189:                                             ; preds = %originalBBpart21429, %originalBBpart21425, %originalBBpart21421
  %5190 = load i32, i32* @x.17
  %5191 = load i32, i32* @y.18
  %5192 = sub i32 %5190, 1
  %5193 = mul i32 %5190, %5192
  %5194 = urem i32 %5193, 2
  %5195 = icmp eq i32 %5194, 0
  %5196 = icmp slt i32 %5191, 10
  %5197 = or i1 %5195, %5196
  br i1 %5197, label %originalBB1431, label %originalBB1431alteredBB

originalBB1431:                                   ; preds = %5189, %originalBB1431alteredBB
  %5198 = load i8*, i8** %19, align 8, !dbg !1998
  %5199 = load i64, i64* %20, align 8, !dbg !1999
  %5200 = load i8*, i8** %21, align 8, !dbg !2000
  %5201 = load i64, i64* %22, align 8, !dbg !2001
  %5202 = load i32, i32* %23, align 4, !dbg !2002
  %5203 = load i32, i32* %24, align 4, !dbg !2003
  %5204 = and i32 %5203, -3, !dbg !2004
  %5205 = load i8*, i8** %26, align 8, !dbg !2005
  %5206 = load i8*, i8** %27, align 8, !dbg !2006
  %5207 = call i64 @quotearg_buffer_restyled(i8* %5198, i64 %5199, i8* %5200, i64 %5201, i32 %5202, i32 %5204, i32* null, i8* %5205, i8* %5206), !dbg !2007
  store i64 %5207, i64* %18, align 8, !dbg !2008
  %5208 = load i32, i32* @x.17
  %5209 = load i32, i32* @y.18
  %5210 = sub i32 %5208, 1
  %5211 = mul i32 %5208, %5210
  %5212 = urem i32 %5211, 2
  %5213 = icmp eq i32 %5212, 0
  %5214 = icmp slt i32 %5209, 10
  %5215 = or i1 %5213, %5214
  br i1 %5215, label %originalBBpart21437, label %originalBB1431alteredBB

originalBBpart21437:                              ; preds = %originalBB1431
  br label %5216, !dbg !2008

5216:                                             ; preds = %originalBBpart21437, %originalBBpart21417, %originalBBpart21363
  %5217 = load i32, i32* @x.17
  %5218 = load i32, i32* @y.18
  %5219 = sub i32 %5217, 1
  %5220 = mul i32 %5217, %5219
  %5221 = urem i32 %5220, 2
  %5222 = icmp eq i32 %5221, 0
  %5223 = icmp slt i32 %5218, 10
  %5224 = or i1 %5222, %5223
  br i1 %5224, label %originalBB1439, label %originalBB1439alteredBB

originalBB1439:                                   ; preds = %5216, %originalBB1439alteredBB
  %5225 = load i64, i64* %18, align 8, !dbg !2009
  %5226 = load i32, i32* @x.17
  %5227 = load i32, i32* @y.18
  %5228 = sub i32 %5226, 1
  %5229 = mul i32 %5226, %5228
  %5230 = urem i32 %5229, 2
  %5231 = icmp eq i32 %5230, 0
  %5232 = icmp slt i32 %5227, 10
  %5233 = or i1 %5231, %5232
  br i1 %5233, label %originalBBpart21441, label %originalBB1439alteredBB

originalBBpart21441:                              ; preds = %originalBB1439
  ret i64 %5225, !dbg !2009

originalBBalteredBB:                              ; preds = %originalBB, %9
  %5234 = alloca i64, align 8
  %5235 = alloca i8*, align 8
  %5236 = alloca i64, align 8
  %5237 = alloca i8*, align 8
  %5238 = alloca i64, align 8
  %5239 = alloca i32, align 4
  %5240 = alloca i32, align 4
  %5241 = alloca i32*, align 8
  %5242 = alloca i8*, align 8
  %5243 = alloca i8*, align 8
  %5244 = alloca i64, align 8
  %5245 = alloca i64, align 8
  %5246 = alloca i64, align 8
  %5247 = alloca i8*, align 8
  %5248 = alloca i64, align 8
  %5249 = alloca i8, align 1
  %5250 = alloca i8, align 1
  %5251 = alloca i8, align 1
  %5252 = alloca i8, align 1
  %5253 = alloca i8, align 1
  %5254 = alloca i8, align 1
  %5255 = alloca i8, align 1
  %5256 = alloca i8, align 1
  %5257 = alloca i8, align 1
  %5258 = alloca i8, align 1
  %5259 = alloca i8, align 1
  %5260 = alloca i64, align 8
  %5261 = alloca i8, align 1
  %5262 = alloca %struct.__mbstate_t, align 4
  %5263 = alloca i32, align 4
  %5264 = alloca i64, align 8
  %5265 = alloca i64, align 8
  %5266 = alloca i64, align 8
  store i8* %0, i8** %5235, align 8
  call void @llvm.dbg.declare(metadata i8** %5235, metadata !2010, metadata !DIExpression()), !dbg !1130
  store i64 %1, i64* %5236, align 8
  call void @llvm.dbg.declare(metadata i64* %5236, metadata !2042, metadata !DIExpression()), !dbg !1132
  store i8* %2, i8** %5237, align 8
  call void @llvm.dbg.declare(metadata i8** %5237, metadata !2043, metadata !DIExpression()), !dbg !1134
  store i64 %3, i64* %5238, align 8
  call void @llvm.dbg.declare(metadata i64* %5238, metadata !2044, metadata !DIExpression()), !dbg !1136
  store i32 %4, i32* %5239, align 4
  call void @llvm.dbg.declare(metadata i32* %5239, metadata !2045, metadata !DIExpression()), !dbg !1138
  store i32 %5, i32* %5240, align 4
  call void @llvm.dbg.declare(metadata i32* %5240, metadata !2046, metadata !DIExpression()), !dbg !1140
  store i32* %6, i32** %5241, align 8
  call void @llvm.dbg.declare(metadata i32** %5241, metadata !2047, metadata !DIExpression()), !dbg !1142
  store i8* %7, i8** %5242, align 8
  call void @llvm.dbg.declare(metadata i8** %5242, metadata !2048, metadata !DIExpression()), !dbg !1144
  store i8* %8, i8** %5243, align 8
  call void @llvm.dbg.declare(metadata i8** %5243, metadata !2049, metadata !DIExpression()), !dbg !1146
  call void @llvm.dbg.declare(metadata i64* %5244, metadata !2050, metadata !DIExpression()), !dbg !1148
  call void @llvm.dbg.declare(metadata i64* %5245, metadata !2051, metadata !DIExpression()), !dbg !1150
  store i64 0, i64* %5245, align 8, !dbg !1150
  call void @llvm.dbg.declare(metadata i64* %5246, metadata !2052, metadata !DIExpression()), !dbg !1152
  store i64 0, i64* %5246, align 8, !dbg !1152
  call void @llvm.dbg.declare(metadata i8** %5247, metadata !2053, metadata !DIExpression()), !dbg !1154
  store i8* null, i8** %5247, align 8, !dbg !1154
  call void @llvm.dbg.declare(metadata i64* %5248, metadata !2054, metadata !DIExpression()), !dbg !1156
  store i64 0, i64* %5248, align 8, !dbg !1156
  call void @llvm.dbg.declare(metadata i8* %5249, metadata !2055, metadata !DIExpression()), !dbg !1158
  store i8 0, i8* %5249, align 1, !dbg !1158
  call void @llvm.dbg.declare(metadata i8* %5250, metadata !2056, metadata !DIExpression()), !dbg !1160
  %5267 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1161
  %5268 = icmp eq i64 %5267, 1, !dbg !1162
  %5269 = zext i1 %5268 to i8, !dbg !1160
  store i8 %5269, i8* %5250, align 1, !dbg !1160
  call void @llvm.dbg.declare(metadata i8* %5251, metadata !2057, metadata !DIExpression()), !dbg !1164
  %5270 = load i32, i32* %5240, align 4, !dbg !1165
  %_ = shl i32 %5270, 2
  %_1 = shl i32 %5270, 2
  %5271 = and i32 %5270, 2, !dbg !1166
  %5272 = icmp ne i32 %5271, 0, !dbg !1167
  %5273 = zext i1 %5272 to i8, !dbg !1164
  store i8 %5273, i8* %5251, align 1, !dbg !1164
  call void @llvm.dbg.declare(metadata i8* %5252, metadata !2058, metadata !DIExpression()), !dbg !1169
  store i8 0, i8* %5252, align 1, !dbg !1169
  call void @llvm.dbg.declare(metadata i8* %5253, metadata !2059, metadata !DIExpression()), !dbg !1171
  store i8 0, i8* %5253, align 1, !dbg !1171
  call void @llvm.dbg.declare(metadata i8* %5254, metadata !2060, metadata !DIExpression()), !dbg !1173
  store i8 1, i8* %5254, align 1, !dbg !1173
  br label %originalBB

originalBB2alteredBB:                             ; preds = %originalBB2, %66
  %5274 = load i32, i32* %23, align 4, !dbg !1177
  br label %originalBB2

originalBB6alteredBB:                             ; preds = %originalBB6, %84
  store i32 5, i32* %23, align 4, !dbg !1179
  store i8 1, i8* %35, align 1, !dbg !1181
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %101
  %5275 = load i8, i8* %35, align 1, !dbg !1183
  %5276 = trunc i8 %5275 to i1, !dbg !1183
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %121
  %5277 = load i64, i64* %29, align 8, !dbg !1187
  %5278 = load i64, i64* %20, align 8, !dbg !1187
  %5279 = icmp ult i64 %5277, %5278, !dbg !1187
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %148
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %165
  store i8 1, i8* %33, align 1, !dbg !1191
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.52, i64 0, i64 0), i8** %31, align 8, !dbg !1192
  store i64 1, i64* %32, align 8, !dbg !1193
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %182
  store i8 1, i8* %33, align 1, !dbg !1195
  store i8 0, i8* %35, align 1, !dbg !1196
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %202
  %5280 = load i32, i32* %23, align 4, !dbg !1203
  %5281 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.53, i64 0, i64 0), i32 %5280), !dbg !1205
  store i8* %5281, i8** %26, align 8, !dbg !1206
  %5282 = load i32, i32* %23, align 4, !dbg !1207
  %5283 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.54, i64 0, i64 0), i32 %5282), !dbg !1208
  store i8* %5283, i8** %27, align 8, !dbg !1209
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %223
  %5284 = load i8, i8* %35, align 1, !dbg !1211
  %5285 = trunc i8 %5284 to i1, !dbg !1211
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %244
  %5286 = load i8*, i8** %31, align 8, !dbg !1218
  %5287 = load i8, i8* %5286, align 1, !dbg !1220
  %5288 = icmp ne i8 %5287, 0, !dbg !1221
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %265
  %5289 = load i64, i64* %29, align 8, !dbg !1223
  %5290 = load i64, i64* %20, align 8, !dbg !1223
  %5291 = icmp ult i64 %5289, %5290, !dbg !1223
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %291
  %5292 = load i64, i64* %29, align 8, !dbg !1226
  %_47 = sub i64 %5292, 1
  %gen = mul i64 %_47, 1
  %_48 = shl i64 %5292, 1
  %_49 = shl i64 %5292, 1
  %_50 = shl i64 %5292, 1
  %_51 = shl i64 %5292, 1
  %_52 = sub i64 %5292, 1
  %gen53 = mul i64 %_52, 1
  %5293 = add i64 %5292, 1, !dbg !1226
  store i64 %5293, i64* %29, align 8, !dbg !1226
  br label %originalBB46

originalBB57alteredBB:                            ; preds = %originalBB57, %310
  br label %originalBB57

originalBB61alteredBB:                            ; preds = %originalBB61, %327
  %5294 = load i8*, i8** %31, align 8, !dbg !1227
  %5295 = getelementptr inbounds i8, i8* %5294, i32 1, !dbg !1227
  store i8* %5295, i8** %31, align 8, !dbg !1227
  br label %originalBB61

originalBB65alteredBB:                            ; preds = %originalBB65, %347
  store i8 1, i8* %33, align 1, !dbg !1231
  %5296 = load i8*, i8** %27, align 8, !dbg !1232
  store i8* %5296, i8** %31, align 8, !dbg !1233
  %5297 = load i8*, i8** %31, align 8, !dbg !1234
  %5298 = call i64 @strlen(i8* %5297) #13, !dbg !1235
  store i64 %5298, i64* %32, align 8, !dbg !1236
  br label %originalBB65

originalBB69alteredBB:                            ; preds = %originalBB69, %367
  store i8 1, i8* %33, align 1, !dbg !1238
  br label %originalBB69

originalBB73alteredBB:                            ; preds = %originalBB73, %385
  %5299 = load i8, i8* %35, align 1, !dbg !1242
  %5300 = trunc i8 %5299 to i1, !dbg !1242
  br label %originalBB73

originalBB77alteredBB:                            ; preds = %originalBB77, %404
  store i8 1, i8* %33, align 1, !dbg !1245
  br label %originalBB77

originalBB81alteredBB:                            ; preds = %originalBB81, %421
  br label %originalBB81

originalBB85alteredBB:                            ; preds = %originalBB85, %438
  store i32 2, i32* %23, align 4, !dbg !1248
  %5301 = load i8, i8* %35, align 1, !dbg !1249
  %5302 = trunc i8 %5301 to i1, !dbg !1249
  br label %originalBB85

originalBB89alteredBB:                            ; preds = %originalBB89, %458
  %5303 = load i64, i64* %29, align 8, !dbg !1253
  %5304 = load i64, i64* %20, align 8, !dbg !1253
  %5305 = icmp ult i64 %5303, %5304, !dbg !1253
  br label %originalBB89

originalBB93alteredBB:                            ; preds = %originalBB93, %478
  %5306 = load i8*, i8** %19, align 8, !dbg !1253
  %5307 = load i64, i64* %29, align 8, !dbg !1253
  %5308 = getelementptr inbounds i8, i8* %5306, i64 %5307, !dbg !1253
  store i8 39, i8* %5308, align 1, !dbg !1253
  br label %originalBB93

originalBB97alteredBB:                            ; preds = %originalBB97, %498
  %5309 = load i64, i64* %29, align 8, !dbg !1256
  %_98 = shl i64 %5309, 1
  %_99 = sub i64 %5309, 1
  %gen100 = mul i64 %_99, 1
  %_101 = sub i64 %5309, 1
  %gen102 = mul i64 %_101, 1
  %_103 = sub i64 %5309, 1
  %gen104 = mul i64 %_103, 1
  %_105 = sub i64 0, %5309
  %gen106 = add i64 %_105, 1
  %_107 = sub i64 0, %5309
  %gen108 = add i64 %_107, 1
  %_109 = shl i64 %5309, 1
  %_110 = sub i64 %5309, 1
  %gen111 = mul i64 %_110, 1
  %5310 = add i64 %5309, 1, !dbg !1256
  store i64 %5310, i64* %29, align 8, !dbg !1256
  br label %originalBB97

originalBB115alteredBB:                           ; preds = %originalBB115, %518
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.54, i64 0, i64 0), i8** %31, align 8, !dbg !1257
  store i64 1, i64* %32, align 8, !dbg !1258
  br label %originalBB115

originalBB119alteredBB:                           ; preds = %originalBB119, %535
  store i8 0, i8* %35, align 1, !dbg !1260
  br label %originalBB119

originalBB123alteredBB:                           ; preds = %originalBB123, %552
  call void @abort() #12, !dbg !1262
  br label %originalBB123

originalBB127alteredBB:                           ; preds = %originalBB127, %569
  store i64 0, i64* %28, align 8, !dbg !1263
  br label %originalBB127

originalBB131alteredBB:                           ; preds = %originalBB131, %586
  %5311 = load i64, i64* %22, align 8, !dbg !1266
  %5312 = icmp eq i64 %5311, -1, !dbg !1268
  br label %originalBB131

originalBB135alteredBB:                           ; preds = %originalBB135, %605
  %5313 = load i8*, i8** %21, align 8, !dbg !1269
  %5314 = load i64, i64* %28, align 8, !dbg !1270
  %5315 = getelementptr inbounds i8, i8* %5313, i64 %5314, !dbg !1269
  %5316 = load i8, i8* %5315, align 1, !dbg !1269
  %5317 = sext i8 %5316 to i32, !dbg !1269
  %5318 = icmp eq i32 %5317, 0, !dbg !1271
  %5319 = zext i1 %5318 to i32, !dbg !1271
  br label %originalBB135

originalBB139alteredBB:                           ; preds = %originalBB139, %629
  %5320 = load i64, i64* %28, align 8, !dbg !1272
  %5321 = load i64, i64* %22, align 8, !dbg !1273
  %5322 = icmp eq i64 %5320, %5321, !dbg !1274
  %5323 = zext i1 %5322 to i32, !dbg !1274
  br label %originalBB139

originalBB143alteredBB:                           ; preds = %originalBB143, %650
  %5324 = icmp ne i32 %651, 0, !dbg !1275
  %_144 = sub i1 false, %5324
  %gen145 = add i1 %_144, true
  %5325 = xor i1 %5324, true, !dbg !1275
  br label %originalBB143

originalBB149alteredBB:                           ; preds = %originalBB149, %676
  %5326 = load i64, i64* %32, align 8, !dbg !1294
  %5327 = icmp ne i64 %5326, 0, !dbg !1294
  br label %originalBB149

originalBB153alteredBB:                           ; preds = %originalBB153, %695
  %5328 = load i64, i64* %28, align 8, !dbg !1296
  %5329 = load i64, i64* %32, align 8, !dbg !1297
  %_154 = sub i64 %5328, %5329
  %gen155 = mul i64 %_154, %5329
  %_156 = shl i64 %5328, %5329
  %_157 = sub i64 %5328, %5329
  %gen158 = mul i64 %_157, %5329
  %_159 = sub i64 0, %5328
  %gen160 = add i64 %_159, %5329
  %_161 = shl i64 %5328, %5329
  %5330 = add i64 %5328, %5329, !dbg !1298
  %5331 = load i64, i64* %22, align 8, !dbg !1299
  %5332 = icmp eq i64 %5331, -1, !dbg !1300
  br label %originalBB153

originalBB165alteredBB:                           ; preds = %originalBB165, %717
  %5333 = load i64, i64* %32, align 8, !dbg !1302
  %5334 = icmp ult i64 1, %5333, !dbg !1303
  br label %originalBB165

originalBB169alteredBB:                           ; preds = %originalBB169, %736
  %5335 = load i8*, i8** %21, align 8, !dbg !1304
  %5336 = call i64 @strlen(i8* %5335) #13, !dbg !1305
  store i64 %5336, i64* %22, align 8, !dbg !1306
  br label %originalBB169

originalBB173alteredBB:                           ; preds = %originalBB173, %768
  %5337 = load i8, i8* %35, align 1, !dbg !1318
  %5338 = trunc i8 %5337 to i1, !dbg !1318
  br label %originalBB173

originalBB177alteredBB:                           ; preds = %originalBB177, %787
  br label %originalBB177

originalBB181alteredBB:                           ; preds = %originalBB181, %804
  store i8 1, i8* %41, align 1, !dbg !1323
  br label %originalBB181

originalBB185alteredBB:                           ; preds = %originalBB185, %821
  %5339 = load i8*, i8** %21, align 8, !dbg !1325
  %5340 = load i64, i64* %28, align 8, !dbg !1326
  %5341 = getelementptr inbounds i8, i8* %5339, i64 %5340, !dbg !1325
  %5342 = load i8, i8* %5341, align 1, !dbg !1325
  store i8 %5342, i8* %39, align 1, !dbg !1327
  %5343 = load i8, i8* %39, align 1, !dbg !1328
  %5344 = zext i8 %5343 to i32, !dbg !1328
  br label %originalBB185

originalBB189alteredBB:                           ; preds = %originalBB189, %848
  %5345 = load i8, i8* %35, align 1, !dbg !1336
  %5346 = trunc i8 %5345 to i1, !dbg !1336
  br label %originalBB189

originalBB193alteredBB:                           ; preds = %originalBB193, %867
  br label %originalBB193

originalBB197alteredBB:                           ; preds = %originalBB197, %887
  %5347 = load i8, i8* %36, align 1, !dbg !1340
  %5348 = trunc i8 %5347 to i1, !dbg !1340
  br label %originalBB197

originalBB201alteredBB:                           ; preds = %originalBB201, %906
  br label %originalBB201

originalBB205alteredBB:                           ; preds = %originalBB205, %923
  %5349 = load i64, i64* %29, align 8, !dbg !1344
  %5350 = load i64, i64* %20, align 8, !dbg !1344
  %5351 = icmp ult i64 %5349, %5350, !dbg !1344
  br label %originalBB205

originalBB209alteredBB:                           ; preds = %originalBB209, %947
  %5352 = load i64, i64* %29, align 8, !dbg !1347
  %_210 = sub i64 0, %5352
  %gen211 = add i64 %_210, 1
  %_212 = sub i64 0, %5352
  %gen213 = add i64 %_212, 1
  %_214 = shl i64 %5352, 1
  %_215 = shl i64 %5352, 1
  %_216 = sub i64 %5352, 1
  %gen217 = mul i64 %_216, 1
  %_218 = shl i64 %5352, 1
  %_219 = shl i64 %5352, 1
  %_220 = sub i64 %5352, 1
  %gen221 = mul i64 %_220, 1
  %5353 = add i64 %5352, 1, !dbg !1347
  store i64 %5353, i64* %29, align 8, !dbg !1347
  br label %originalBB209

originalBB225alteredBB:                           ; preds = %originalBB225, %966
  br label %originalBB225

originalBB229alteredBB:                           ; preds = %originalBB229, %987
  %5354 = load i8*, i8** %19, align 8, !dbg !1348
  %5355 = load i64, i64* %29, align 8, !dbg !1348
  %5356 = getelementptr inbounds i8, i8* %5354, i64 %5355, !dbg !1348
  store i8 36, i8* %5356, align 1, !dbg !1348
  br label %originalBB229

originalBB233alteredBB:                           ; preds = %originalBB233, %1007
  %5357 = load i64, i64* %29, align 8, !dbg !1351
  %_234 = sub i64 0, %5357
  %gen235 = add i64 %_234, 1
  %_236 = sub i64 %5357, 1
  %gen237 = mul i64 %_236, 1
  %_238 = sub i64 %5357, 1
  %gen239 = mul i64 %_238, 1
  %_240 = sub i64 0, %5357
  %gen241 = add i64 %_240, 1
  %5358 = add i64 %5357, 1, !dbg !1351
  store i64 %5358, i64* %29, align 8, !dbg !1351
  br label %originalBB233

originalBB245alteredBB:                           ; preds = %originalBB245, %1026
  br label %originalBB245

originalBB249alteredBB:                           ; preds = %originalBB249, %1047
  %5359 = load i8*, i8** %19, align 8, !dbg !1352
  %5360 = load i64, i64* %29, align 8, !dbg !1352
  %5361 = getelementptr inbounds i8, i8* %5359, i64 %5360, !dbg !1352
  store i8 39, i8* %5361, align 1, !dbg !1352
  br label %originalBB249

originalBB253alteredBB:                           ; preds = %originalBB253, %1067
  %5362 = load i64, i64* %29, align 8, !dbg !1355
  %_254 = sub i64 0, %5362
  %gen255 = add i64 %_254, 1
  %_256 = sub i64 0, %5362
  %gen257 = add i64 %_256, 1
  %_258 = shl i64 %5362, 1
  %5363 = add i64 %5362, 1, !dbg !1355
  store i64 %5363, i64* %29, align 8, !dbg !1355
  br label %originalBB253

originalBB262alteredBB:                           ; preds = %originalBB262, %1086
  store i8 1, i8* %36, align 1, !dbg !1342
  br label %originalBB262

originalBB266alteredBB:                           ; preds = %originalBB266, %1103
  br label %originalBB266

originalBB270alteredBB:                           ; preds = %originalBB270, %1132
  %5364 = load i32, i32* %23, align 4, !dbg !1360
  %5365 = icmp ne i32 %5364, 2, !dbg !1362
  br label %originalBB270

originalBB274alteredBB:                           ; preds = %originalBB274, %1151
  %5366 = load i64, i64* %28, align 8, !dbg !1364
  %_275 = sub i64 %5366, 1
  %gen276 = mul i64 %_275, 1
  %_277 = sub i64 0, %5366
  %gen278 = add i64 %_277, 1
  %5367 = add i64 %5366, 1, !dbg !1365
  %5368 = load i64, i64* %22, align 8, !dbg !1366
  %5369 = icmp ult i64 %5367, %5368, !dbg !1367
  br label %originalBB274

originalBB282alteredBB:                           ; preds = %originalBB282, %1172
  %5370 = load i8*, i8** %21, align 8, !dbg !1369
  %5371 = load i64, i64* %28, align 8, !dbg !1370
  %_283 = sub i64 %5371, 1
  %gen284 = mul i64 %_283, 1
  %_285 = sub i64 %5371, 1
  %gen286 = mul i64 %_285, 1
  %_287 = sub i64 0, %5371
  %gen288 = add i64 %_287, 1
  %5372 = add i64 %5371, 1, !dbg !1371
  %5373 = getelementptr inbounds i8, i8* %5370, i64 %5372, !dbg !1369
  %5374 = load i8, i8* %5373, align 1, !dbg !1369
  %5375 = sext i8 %5374 to i32, !dbg !1369
  %5376 = icmp sle i32 48, %5375, !dbg !1372
  br label %originalBB282

originalBB292alteredBB:                           ; preds = %originalBB292, %1196
  %5377 = load i8*, i8** %21, align 8, !dbg !1374
  %5378 = load i64, i64* %28, align 8, !dbg !1375
  %_293 = sub i64 %5378, 1
  %gen294 = mul i64 %_293, 1
  %5379 = add i64 %5378, 1, !dbg !1376
  %5380 = getelementptr inbounds i8, i8* %5377, i64 %5379, !dbg !1374
  %5381 = load i8, i8* %5380, align 1, !dbg !1374
  %5382 = sext i8 %5381 to i32, !dbg !1374
  %5383 = icmp sle i32 %5382, 57, !dbg !1377
  br label %originalBB292

originalBB298alteredBB:                           ; preds = %originalBB298, %1220
  br label %originalBB298

originalBB302alteredBB:                           ; preds = %originalBB302, %1237
  %5384 = load i64, i64* %29, align 8, !dbg !1381
  %5385 = load i64, i64* %20, align 8, !dbg !1381
  %5386 = icmp ult i64 %5384, %5385, !dbg !1381
  br label %originalBB302

originalBB306alteredBB:                           ; preds = %originalBB306, %1257
  %5387 = load i8*, i8** %19, align 8, !dbg !1381
  %5388 = load i64, i64* %29, align 8, !dbg !1381
  %5389 = getelementptr inbounds i8, i8* %5387, i64 %5388, !dbg !1381
  store i8 48, i8* %5389, align 1, !dbg !1381
  br label %originalBB306

originalBB310alteredBB:                           ; preds = %originalBB310, %1277
  %5390 = load i64, i64* %29, align 8, !dbg !1384
  %_311 = sub i64 0, %5390
  %gen312 = add i64 %_311, 1
  %_313 = sub i64 %5390, 1
  %gen314 = mul i64 %_313, 1
  %5391 = add i64 %5390, 1, !dbg !1384
  store i64 %5391, i64* %29, align 8, !dbg !1384
  br label %originalBB310

originalBB318alteredBB:                           ; preds = %originalBB318, %1296
  br label %originalBB318

originalBB322alteredBB:                           ; preds = %originalBB322, %1313
  %5392 = load i64, i64* %29, align 8, !dbg !1386
  %5393 = load i64, i64* %20, align 8, !dbg !1386
  %5394 = icmp ult i64 %5392, %5393, !dbg !1386
  br label %originalBB322

originalBB326alteredBB:                           ; preds = %originalBB326, %1333
  %5395 = load i8*, i8** %19, align 8, !dbg !1386
  %5396 = load i64, i64* %29, align 8, !dbg !1386
  %5397 = getelementptr inbounds i8, i8* %5395, i64 %5396, !dbg !1386
  store i8 48, i8* %5397, align 1, !dbg !1386
  br label %originalBB326

originalBB330alteredBB:                           ; preds = %originalBB330, %1353
  %5398 = load i64, i64* %29, align 8, !dbg !1389
  %_331 = sub i64 %5398, 1
  %gen332 = mul i64 %_331, 1
  %5399 = add i64 %5398, 1, !dbg !1389
  store i64 %5399, i64* %29, align 8, !dbg !1389
  br label %originalBB330

originalBB336alteredBB:                           ; preds = %originalBB336, %1372
  br label %originalBB336

originalBB340alteredBB:                           ; preds = %originalBB340, %1389
  store i8 48, i8* %39, align 1, !dbg !1391
  br label %originalBB340

originalBB344alteredBB:                           ; preds = %originalBB344, %1406
  %5400 = load i32, i32* %24, align 4, !dbg !1393
  %_345 = sub i32 0, %5400
  %gen346 = add i32 %_345, 1
  %5401 = and i32 %5400, 1, !dbg !1395
  %5402 = icmp ne i32 %5401, 0, !dbg !1395
  br label %originalBB344

originalBB350alteredBB:                           ; preds = %originalBB350, %1426
  br label %originalBB350

originalBB354alteredBB:                           ; preds = %originalBB354, %1443
  br label %originalBB354

originalBB358alteredBB:                           ; preds = %originalBB358, %1460
  br label %originalBB358

originalBB362alteredBB:                           ; preds = %originalBB362, %1477
  %5403 = load i32, i32* %23, align 4, !dbg !1399
  br label %originalBB362

originalBB366alteredBB:                           ; preds = %originalBB366, %1495
  %5404 = load i8, i8* %35, align 1, !dbg !1401
  %5405 = trunc i8 %5404 to i1, !dbg !1401
  br label %originalBB366

originalBB370alteredBB:                           ; preds = %originalBB370, %1514
  br label %originalBB370

originalBB374alteredBB:                           ; preds = %originalBB374, %1531
  br label %originalBB374

originalBB378alteredBB:                           ; preds = %originalBB378, %1548
  %5406 = load i32, i32* %24, align 4, !dbg !1407
  %_379 = sub i32 0, %5406
  %gen380 = add i32 %_379, 4
  %5407 = and i32 %5406, 4, !dbg !1409
  %5408 = icmp ne i32 %5407, 0, !dbg !1409
  br label %originalBB378

originalBB384alteredBB:                           ; preds = %originalBB384, %1568
  %5409 = load i64, i64* %28, align 8, !dbg !1411
  %_385 = sub i64 %5409, 2
  %gen386 = mul i64 %_385, 2
  %_387 = sub i64 %5409, 2
  %gen388 = mul i64 %_387, 2
  %_389 = sub i64 %5409, 2
  %gen390 = mul i64 %_389, 2
  %_391 = sub i64 %5409, 2
  %gen392 = mul i64 %_391, 2
  %_393 = sub i64 %5409, 2
  %gen394 = mul i64 %_393, 2
  %_395 = sub i64 0, %5409
  %gen396 = add i64 %_395, 2
  %_397 = shl i64 %5409, 2
  %5410 = add i64 %5409, 2, !dbg !1412
  %5411 = load i64, i64* %22, align 8, !dbg !1413
  %5412 = icmp ult i64 %5410, %5411, !dbg !1414
  br label %originalBB384

originalBB401alteredBB:                           ; preds = %originalBB401, %1589
  %5413 = load i8*, i8** %21, align 8, !dbg !1416
  %5414 = load i64, i64* %28, align 8, !dbg !1417
  %_402 = sub i64 0, %5414
  %gen403 = add i64 %_402, 1
  %_404 = shl i64 %5414, 1
  %_405 = sub i64 0, %5414
  %gen406 = add i64 %_405, 1
  %5415 = add i64 %5414, 1, !dbg !1418
  %5416 = getelementptr inbounds i8, i8* %5413, i64 %5415, !dbg !1416
  %5417 = load i8, i8* %5416, align 1, !dbg !1416
  %5418 = sext i8 %5417 to i32, !dbg !1416
  %5419 = icmp eq i32 %5418, 63, !dbg !1419
  br label %originalBB401

originalBB410alteredBB:                           ; preds = %originalBB410, %1620
  %5420 = load i8, i8* %35, align 1, !dbg !1425
  %5421 = trunc i8 %5420 to i1, !dbg !1425
  br label %originalBB410

originalBB414alteredBB:                           ; preds = %originalBB414, %1640
  %5422 = load i8*, i8** %21, align 8, !dbg !1430
  %5423 = load i64, i64* %28, align 8, !dbg !1431
  %_415 = sub i64 0, %5423
  %gen416 = add i64 %_415, 2
  %_417 = shl i64 %5423, 2
  %_418 = sub i64 %5423, 2
  %gen419 = mul i64 %_418, 2
  %_420 = sub i64 %5423, 2
  %gen421 = mul i64 %_420, 2
  %5424 = add i64 %5423, 2, !dbg !1432
  %5425 = getelementptr inbounds i8, i8* %5422, i64 %5424, !dbg !1430
  %5426 = load i8, i8* %5425, align 1, !dbg !1430
  store i8 %5426, i8* %39, align 1, !dbg !1433
  %5427 = load i64, i64* %28, align 8, !dbg !1434
  %_422 = shl i64 %5427, 2
  %5428 = add i64 %5427, 2, !dbg !1434
  store i64 %5428, i64* %28, align 8, !dbg !1434
  br label %originalBB414

originalBB426alteredBB:                           ; preds = %originalBB426, %1664
  %5429 = load i64, i64* %29, align 8, !dbg !1436
  %5430 = load i64, i64* %20, align 8, !dbg !1436
  %5431 = icmp ult i64 %5429, %5430, !dbg !1436
  br label %originalBB426

originalBB430alteredBB:                           ; preds = %originalBB430, %1688
  %5432 = load i64, i64* %29, align 8, !dbg !1439
  %_431 = shl i64 %5432, 1
  %5433 = add i64 %5432, 1, !dbg !1439
  store i64 %5433, i64* %29, align 8, !dbg !1439
  br label %originalBB430

originalBB435alteredBB:                           ; preds = %originalBB435, %1707
  br label %originalBB435

originalBB439alteredBB:                           ; preds = %originalBB439, %1728
  %5434 = load i8*, i8** %19, align 8, !dbg !1441
  %5435 = load i64, i64* %29, align 8, !dbg !1441
  %5436 = getelementptr inbounds i8, i8* %5434, i64 %5435, !dbg !1441
  store i8 34, i8* %5436, align 1, !dbg !1441
  br label %originalBB439

originalBB443alteredBB:                           ; preds = %originalBB443, %1748
  %5437 = load i64, i64* %29, align 8, !dbg !1444
  %_444 = sub i64 %5437, 1
  %gen445 = mul i64 %_444, 1
  %_446 = shl i64 %5437, 1
  %_447 = sub i64 0, %5437
  %gen448 = add i64 %_447, 1
  %_449 = sub i64 %5437, 1
  %gen450 = mul i64 %_449, 1
  %5438 = add i64 %5437, 1, !dbg !1444
  store i64 %5438, i64* %29, align 8, !dbg !1444
  br label %originalBB443

originalBB454alteredBB:                           ; preds = %originalBB454, %1767
  br label %originalBB454

originalBB458alteredBB:                           ; preds = %originalBB458, %1788
  %5439 = load i8*, i8** %19, align 8, !dbg !1446
  %5440 = load i64, i64* %29, align 8, !dbg !1446
  %5441 = getelementptr inbounds i8, i8* %5439, i64 %5440, !dbg !1446
  store i8 34, i8* %5441, align 1, !dbg !1446
  br label %originalBB458

originalBB462alteredBB:                           ; preds = %originalBB462, %1811
  br label %originalBB462

originalBB466alteredBB:                           ; preds = %originalBB466, %1828
  %5442 = load i64, i64* %29, align 8, !dbg !1451
  %5443 = load i64, i64* %20, align 8, !dbg !1451
  %5444 = icmp ult i64 %5442, %5443, !dbg !1451
  br label %originalBB466

originalBB470alteredBB:                           ; preds = %originalBB470, %1848
  %5445 = load i8*, i8** %19, align 8, !dbg !1451
  %5446 = load i64, i64* %29, align 8, !dbg !1451
  %5447 = getelementptr inbounds i8, i8* %5445, i64 %5446, !dbg !1451
  store i8 63, i8* %5447, align 1, !dbg !1451
  br label %originalBB470

originalBB474alteredBB:                           ; preds = %originalBB474, %1868
  %5448 = load i64, i64* %29, align 8, !dbg !1454
  %_475 = shl i64 %5448, 1
  %_476 = sub i64 %5448, 1
  %gen477 = mul i64 %_476, 1
  %_478 = shl i64 %5448, 1
  %_479 = shl i64 %5448, 1
  %_480 = sub i64 0, %5448
  %gen481 = add i64 %_480, 1
  %_482 = shl i64 %5448, 1
  %_483 = shl i64 %5448, 1
  %_484 = sub i64 0, %5448
  %gen485 = add i64 %_484, 1
  %5449 = add i64 %5448, 1, !dbg !1454
  store i64 %5449, i64* %29, align 8, !dbg !1454
  br label %originalBB474

originalBB489alteredBB:                           ; preds = %originalBB489, %1887
  br label %originalBB489

originalBB493alteredBB:                           ; preds = %originalBB493, %1904
  br label %originalBB493

originalBB497alteredBB:                           ; preds = %originalBB497, %1921
  br label %originalBB497

originalBB501alteredBB:                           ; preds = %originalBB501, %1938
  br label %originalBB501

originalBB505alteredBB:                           ; preds = %originalBB505, %1955
  br label %originalBB505

originalBB509alteredBB:                           ; preds = %originalBB509, %1972
  br label %originalBB509

originalBB513alteredBB:                           ; preds = %originalBB513, %1989
  store i8 97, i8* %40, align 1, !dbg !1461
  br label %originalBB513

originalBB517alteredBB:                           ; preds = %originalBB517, %2007
  store i8 102, i8* %40, align 1, !dbg !1465
  br label %originalBB517

originalBB521alteredBB:                           ; preds = %originalBB521, %2024
  store i8 110, i8* %40, align 1, !dbg !1467
  br label %originalBB521

originalBB525alteredBB:                           ; preds = %originalBB525, %2044
  %5450 = load i8, i8* %39, align 1, !dbg !1475
  store i8 %5450, i8* %40, align 1, !dbg !1476
  %5451 = load i32, i32* %23, align 4, !dbg !1477
  %5452 = icmp eq i32 %5451, 2, !dbg !1479
  br label %originalBB525

originalBB529alteredBB:                           ; preds = %originalBB529, %2064
  %5453 = load i8, i8* %35, align 1, !dbg !1481
  %5454 = trunc i8 %5453 to i1, !dbg !1481
  br label %originalBB529

originalBB533alteredBB:                           ; preds = %originalBB533, %2083
  br label %originalBB533

originalBB537alteredBB:                           ; preds = %originalBB537, %2101
  %5455 = load i8, i8* %33, align 1, !dbg !1487
  %5456 = trunc i8 %5455 to i1, !dbg !1487
  br label %originalBB537

originalBB541alteredBB:                           ; preds = %originalBB541, %2120
  %5457 = load i8, i8* %35, align 1, !dbg !1490
  %5458 = trunc i8 %5457 to i1, !dbg !1490
  br label %originalBB541

originalBB545alteredBB:                           ; preds = %originalBB545, %2142
  br label %originalBB545

originalBB549alteredBB:                           ; preds = %originalBB549, %2159
  br label %originalBB549

originalBB553alteredBB:                           ; preds = %originalBB553, %2176
  %5459 = load i32, i32* %23, align 4, !dbg !1497
  %5460 = icmp eq i32 %5459, 2, !dbg !1499
  br label %originalBB553

originalBB557alteredBB:                           ; preds = %originalBB557, %2195
  %5461 = load i8, i8* %35, align 1, !dbg !1501
  %5462 = trunc i8 %5461 to i1, !dbg !1501
  br label %originalBB557

originalBB561alteredBB:                           ; preds = %originalBB561, %2216
  %5463 = load i8, i8* %33, align 1, !dbg !1506
  %5464 = trunc i8 %5463 to i1, !dbg !1506
  br label %originalBB561

originalBB565alteredBB:                           ; preds = %originalBB565, %2237
  br label %originalBB565

originalBB569alteredBB:                           ; preds = %originalBB569, %2254
  %5465 = load i64, i64* %22, align 8, !dbg !1514
  %5466 = icmp eq i64 %5465, -1, !dbg !1516
  br label %originalBB569

originalBB573alteredBB:                           ; preds = %originalBB573, %2284
  %5467 = load i64, i64* %28, align 8, !dbg !1524
  %5468 = icmp ne i64 %5467, 0, !dbg !1526
  br label %originalBB573

originalBB577alteredBB:                           ; preds = %originalBB577, %2303
  br label %originalBB577

originalBB581alteredBB:                           ; preds = %originalBB581, %2320
  br label %originalBB581

originalBB585alteredBB:                           ; preds = %originalBB585, %2337
  store i8 1, i8* %43, align 1, !dbg !1530
  br label %originalBB585

originalBB589alteredBB:                           ; preds = %originalBB589, %2354
  %5469 = load i32, i32* %23, align 4, !dbg !1532
  %5470 = icmp eq i32 %5469, 2, !dbg !1534
  br label %originalBB589

originalBB593alteredBB:                           ; preds = %originalBB593, %2373
  %5471 = load i8, i8* %35, align 1, !dbg !1536
  %5472 = trunc i8 %5471 to i1, !dbg !1536
  br label %originalBB593

originalBB597alteredBB:                           ; preds = %originalBB597, %2392
  br label %originalBB597

originalBB601alteredBB:                           ; preds = %originalBB601, %2416
  br label %originalBB601

originalBB605alteredBB:                           ; preds = %originalBB605, %2439
  %5473 = load i64, i64* %20, align 8, !dbg !1556
  store i64 %5473, i64* %30, align 8, !dbg !1558
  store i64 0, i64* %20, align 8, !dbg !1559
  br label %originalBB605

originalBB609alteredBB:                           ; preds = %originalBB609, %2457
  br label %originalBB609

originalBB613alteredBB:                           ; preds = %originalBB613, %2482
  %5474 = load i64, i64* %29, align 8, !dbg !1565
  %_614 = shl i64 %5474, 1
  %_615 = sub i64 %5474, 1
  %gen616 = mul i64 %_615, 1
  %_617 = sub i64 %5474, 1
  %gen618 = mul i64 %_617, 1
  %_619 = shl i64 %5474, 1
  %_620 = shl i64 %5474, 1
  %_621 = sub i64 0, %5474
  %gen622 = add i64 %_621, 1
  %5475 = add i64 %5474, 1, !dbg !1565
  store i64 %5475, i64* %29, align 8, !dbg !1565
  br label %originalBB613

originalBB626alteredBB:                           ; preds = %originalBB626, %2501
  br label %originalBB626

originalBB630alteredBB:                           ; preds = %originalBB630, %2522
  %5476 = load i8*, i8** %19, align 8, !dbg !1567
  %5477 = load i64, i64* %29, align 8, !dbg !1567
  %5478 = getelementptr inbounds i8, i8* %5476, i64 %5477, !dbg !1567
  store i8 92, i8* %5478, align 1, !dbg !1567
  br label %originalBB630

originalBB634alteredBB:                           ; preds = %originalBB634, %2546
  %5479 = load i64, i64* %29, align 8, !dbg !1572
  %5480 = load i64, i64* %20, align 8, !dbg !1572
  %5481 = icmp ult i64 %5479, %5480, !dbg !1572
  br label %originalBB634

originalBB638alteredBB:                           ; preds = %originalBB638, %2566
  %5482 = load i8*, i8** %19, align 8, !dbg !1572
  %5483 = load i64, i64* %29, align 8, !dbg !1572
  %5484 = getelementptr inbounds i8, i8* %5482, i64 %5483, !dbg !1572
  store i8 39, i8* %5484, align 1, !dbg !1572
  br label %originalBB638

originalBB642alteredBB:                           ; preds = %originalBB642, %2589
  store i8 0, i8* %36, align 1, !dbg !1576
  br label %originalBB642

originalBB646alteredBB:                           ; preds = %originalBB646, %2606
  br label %originalBB646

originalBB650alteredBB:                           ; preds = %originalBB650, %2623
  store i8 1, i8* %43, align 1, !dbg !1579
  br label %originalBB650

originalBB654alteredBB:                           ; preds = %originalBB654, %2643
  store i64 1, i64* %44, align 8, !dbg !1589
  %5485 = call i16** @__ctype_b_loc() #15, !dbg !1591
  %5486 = load i16*, i16** %5485, align 8, !dbg !1591
  %5487 = load i8, i8* %39, align 1, !dbg !1591
  %5488 = zext i8 %5487 to i32, !dbg !1591
  %5489 = sext i32 %5488 to i64, !dbg !1591
  %5490 = getelementptr inbounds i16, i16* %5486, i64 %5489, !dbg !1591
  %5491 = load i16, i16* %5490, align 2, !dbg !1591
  %5492 = zext i16 %5491 to i32, !dbg !1591
  %_655 = sub i32 0, %5492
  %gen656 = add i32 %_655, 16384
  %5493 = and i32 %5492, 16384, !dbg !1591
  %5494 = icmp ne i32 %5493, 0, !dbg !1592
  %5495 = zext i1 %5494 to i8, !dbg !1593
  store i8 %5495, i8* %45, align 1, !dbg !1593
  br label %originalBB654

originalBB660alteredBB:                           ; preds = %originalBB660, %2671
  %5496 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !1613
  call void @llvm.memset.p0i8.i64(i8* align 4 %5496, i8 0, i64 8, i1 false), !dbg !1613
  store i64 0, i64* %44, align 8, !dbg !1614
  store i8 1, i8* %45, align 1, !dbg !1615
  %5497 = load i64, i64* %22, align 8, !dbg !1616
  %5498 = icmp eq i64 %5497, -1, !dbg !1618
  br label %originalBB660

originalBB664alteredBB:                           ; preds = %originalBB664, %2691
  %5499 = load i8*, i8** %21, align 8, !dbg !1620
  %5500 = call i64 @strlen(i8* %5499) #13, !dbg !1621
  store i64 %5500, i64* %22, align 8, !dbg !1622
  br label %originalBB664

originalBB668alteredBB:                           ; preds = %originalBB668, %2710
  br label %originalBB668

originalBB672alteredBB:                           ; preds = %originalBB672, %2727
  %5501 = load i8*, i8** %21, align 8, !dbg !1631
  %5502 = load i64, i64* %28, align 8, !dbg !1632
  %5503 = load i64, i64* %44, align 8, !dbg !1633
  %_673 = sub i64 %5502, %5503
  %gen674 = mul i64 %_673, %5503
  %_675 = sub i64 %5502, %5503
  %gen676 = mul i64 %_675, %5503
  %_677 = sub i64 %5502, %5503
  %gen678 = mul i64 %_677, %5503
  %5504 = add i64 %5502, %5503, !dbg !1634
  %5505 = getelementptr inbounds i8, i8* %5501, i64 %5504, !dbg !1631
  %5506 = load i64, i64* %22, align 8, !dbg !1635
  %5507 = load i64, i64* %28, align 8, !dbg !1636
  %5508 = load i64, i64* %44, align 8, !dbg !1637
  %_679 = sub i64 0, %5507
  %gen680 = add i64 %_679, %5508
  %_681 = sub i64 %5507, %5508
  %gen682 = mul i64 %_681, %5508
  %_683 = sub i64 0, %5507
  %gen684 = add i64 %_683, %5508
  %_685 = sub i64 0, %5507
  %gen686 = add i64 %_685, %5508
  %_687 = sub i64 0, %5507
  %gen688 = add i64 %_687, %5508
  %5509 = add i64 %5507, %5508, !dbg !1638
  %_689 = shl i64 %5506, %5509
  %_690 = sub i64 %5506, %5509
  %gen691 = mul i64 %_690, %5509
  %_692 = shl i64 %5506, %5509
  %_693 = shl i64 %5506, %5509
  %_694 = sub i64 %5506, %5509
  %gen695 = mul i64 %_694, %5509
  %_696 = shl i64 %5506, %5509
  %_697 = shl i64 %5506, %5509
  %5510 = sub i64 %5506, %5509, !dbg !1639
  %5511 = call i64 @rpl_mbrtowc(i32* %47, i8* %5505, i64 %5510, %struct.__mbstate_t* %46), !dbg !1640
  store i64 %5511, i64* %48, align 8, !dbg !1630
  %5512 = load i64, i64* %48, align 8, !dbg !1641
  %5513 = icmp eq i64 %5512, 0, !dbg !1643
  br label %originalBB672

originalBB701alteredBB:                           ; preds = %originalBB701, %2757
  br label %originalBB701

originalBB705alteredBB:                           ; preds = %originalBB705, %2778
  %5514 = load i64, i64* %48, align 8, !dbg !1653
  %5515 = icmp eq i64 %5514, -2, !dbg !1655
  br label %originalBB705

originalBB709alteredBB:                           ; preds = %originalBB709, %2798
  %5516 = load i64, i64* %28, align 8, !dbg !1660
  %5517 = load i64, i64* %44, align 8, !dbg !1661
  %_710 = sub i64 0, %5516
  %gen711 = add i64 %_710, %5517
  %_712 = sub i64 %5516, %5517
  %gen713 = mul i64 %_712, %5517
  %_714 = sub i64 0, %5516
  %gen715 = add i64 %_714, %5517
  %_716 = sub i64 %5516, %5517
  %gen717 = mul i64 %_716, %5517
  %_718 = shl i64 %5516, %5517
  %_719 = sub i64 0, %5516
  %gen720 = add i64 %_719, %5517
  %5518 = add i64 %5516, %5517, !dbg !1662
  %5519 = load i64, i64* %22, align 8, !dbg !1663
  %5520 = icmp ult i64 %5518, %5519, !dbg !1664
  br label %originalBB709

originalBB724alteredBB:                           ; preds = %originalBB724, %2831
  %5521 = load i64, i64* %44, align 8, !dbg !1671
  %5522 = add i64 %5521, 1, !dbg !1671
  store i64 %5522, i64* %44, align 8, !dbg !1671
  br label %originalBB724

originalBB728alteredBB:                           ; preds = %originalBB728, %2850
  br label %originalBB728

originalBB732alteredBB:                           ; preds = %originalBB732, %2867
  %5523 = load i8, i8* %35, align 1, !dbg !1674
  %5524 = trunc i8 %5523 to i1, !dbg !1674
  br label %originalBB732

originalBB736alteredBB:                           ; preds = %originalBB736, %2886
  %5525 = load i32, i32* %23, align 4, !dbg !1678
  %5526 = icmp eq i32 %5525, 2, !dbg !1679
  br label %originalBB736

originalBB740alteredBB:                           ; preds = %originalBB740, %2906
  %5527 = load i64, i64* %49, align 8, !dbg !1687
  %5528 = load i64, i64* %48, align 8, !dbg !1689
  %5529 = icmp ult i64 %5527, %5528, !dbg !1690
  br label %originalBB740

originalBB744alteredBB:                           ; preds = %originalBB744, %2937
  br label %originalBB744

originalBB748alteredBB:                           ; preds = %originalBB748, %2954
  br label %originalBB748

originalBB752alteredBB:                           ; preds = %originalBB752, %2971
  %5530 = load i64, i64* %49, align 8, !dbg !1703
  %_753 = sub i64 %5530, 1
  %gen754 = mul i64 %_753, 1
  %_755 = sub i64 %5530, 1
  %gen756 = mul i64 %_755, 1
  %_757 = sub i64 0, %5530
  %gen758 = add i64 %_757, 1
  %_759 = sub i64 0, %5530
  %gen760 = add i64 %_759, 1
  %_761 = sub i64 %5530, 1
  %gen762 = mul i64 %_761, 1
  %_763 = sub i64 %5530, 1
  %gen764 = mul i64 %_763, 1
  %_765 = sub i64 %5530, 1
  %gen766 = mul i64 %_765, 1
  %_767 = sub i64 %5530, 1
  %gen768 = mul i64 %_767, 1
  %_769 = shl i64 %5530, 1
  %5531 = add i64 %5530, 1, !dbg !1703
  store i64 %5531, i64* %49, align 8, !dbg !1703
  br label %originalBB752

originalBB773alteredBB:                           ; preds = %originalBB773, %2991
  %5532 = load i32, i32* %47, align 4, !dbg !1708
  %5533 = call i32 @iswprint(i32 %5532) #10, !dbg !1710
  %5534 = icmp ne i32 %5533, 0, !dbg !1710
  br label %originalBB773

originalBB777alteredBB:                           ; preds = %originalBB777, %3011
  store i8 0, i8* %45, align 1, !dbg !1712
  br label %originalBB777

originalBB781alteredBB:                           ; preds = %originalBB781, %3032
  br label %originalBB781

originalBB785alteredBB:                           ; preds = %originalBB785, %3049
  br label %originalBB785

originalBB789alteredBB:                           ; preds = %originalBB789, %3067
  %5535 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !1717
  %5536 = icmp ne i32 %5535, 0, !dbg !1718
  %_790 = sub i1 false, %5536
  %gen791 = add i1 %_790, true
  %_792 = sub i1 false, %5536
  %gen793 = add i1 %_792, true
  %_794 = sub i1 %5536, true
  %gen795 = mul i1 %_794, true
  %_796 = sub i1 false, %5536
  %gen797 = add i1 %_796, true
  %_798 = shl i1 %5536, true
  %5537 = xor i1 %5536, true, !dbg !1718
  br label %originalBB789

originalBB802alteredBB:                           ; preds = %originalBB802, %3087
  br label %originalBB802

originalBB806alteredBB:                           ; preds = %originalBB806, %3104
  %5538 = load i8, i8* %45, align 1, !dbg !1721
  %5539 = trunc i8 %5538 to i1, !dbg !1721
  %5540 = zext i1 %5539 to i8, !dbg !1722
  store i8 %5540, i8* %43, align 1, !dbg !1722
  %5541 = load i64, i64* %44, align 8, !dbg !1723
  %5542 = icmp ult i64 1, %5541, !dbg !1725
  br label %originalBB806

originalBB810alteredBB:                           ; preds = %originalBB810, %3132
  %5543 = load i64, i64* %28, align 8, !dbg !1734
  %5544 = load i64, i64* %44, align 8, !dbg !1735
  %_811 = sub i64 0, %5543
  %gen812 = add i64 %_811, %5544
  %_813 = sub i64 0, %5543
  %gen814 = add i64 %_813, %5544
  %_815 = sub i64 %5543, %5544
  %gen816 = mul i64 %_815, %5544
  %_817 = shl i64 %5543, %5544
  %_818 = shl i64 %5543, %5544
  %_819 = sub i64 0, %5543
  %gen820 = add i64 %_819, %5544
  %_821 = sub i64 0, %5543
  %gen822 = add i64 %_821, %5544
  %5545 = add i64 %5543, %5544, !dbg !1736
  store i64 %5545, i64* %50, align 8, !dbg !1733
  br label %originalBB810

originalBB826alteredBB:                           ; preds = %originalBB826, %3152
  %5546 = load i8, i8* %33, align 1, !dbg !1738
  %5547 = trunc i8 %5546 to i1, !dbg !1738
  br label %originalBB826

originalBB830alteredBB:                           ; preds = %originalBB830, %3171
  %5548 = load i8, i8* %45, align 1, !dbg !1744
  %5549 = trunc i8 %5548 to i1, !dbg !1744
  br label %originalBB830

originalBB834alteredBB:                           ; preds = %originalBB834, %3191
  %5550 = load i8, i8* %35, align 1, !dbg !1748
  %5551 = trunc i8 %5550 to i1, !dbg !1748
  br label %originalBB834

originalBB838alteredBB:                           ; preds = %originalBB838, %3211
  store i8 1, i8* %42, align 1, !dbg !1751
  %5552 = load i32, i32* %23, align 4, !dbg !1752
  %5553 = icmp eq i32 %5552, 2, !dbg !1752
  br label %originalBB838

originalBB842alteredBB:                           ; preds = %originalBB842, %3233
  br label %originalBB842

originalBB846alteredBB:                           ; preds = %originalBB846, %3250
  %5554 = load i64, i64* %29, align 8, !dbg !1756
  %5555 = load i64, i64* %20, align 8, !dbg !1756
  %5556 = icmp ult i64 %5554, %5555, !dbg !1756
  br label %originalBB846

originalBB850alteredBB:                           ; preds = %originalBB850, %3274
  %5557 = load i64, i64* %29, align 8, !dbg !1759
  %_851 = shl i64 %5557, 1
  %5558 = add i64 %5557, 1, !dbg !1759
  store i64 %5558, i64* %29, align 8, !dbg !1759
  br label %originalBB850

originalBB855alteredBB:                           ; preds = %originalBB855, %3293
  br label %originalBB855

originalBB859alteredBB:                           ; preds = %originalBB859, %3310
  %5559 = load i64, i64* %29, align 8, !dbg !1760
  %5560 = load i64, i64* %20, align 8, !dbg !1760
  %5561 = icmp ult i64 %5559, %5560, !dbg !1760
  br label %originalBB859

originalBB863alteredBB:                           ; preds = %originalBB863, %3337
  br label %originalBB863

originalBB867alteredBB:                           ; preds = %originalBB867, %3354
  %5562 = load i64, i64* %29, align 8, !dbg !1764
  %5563 = load i64, i64* %20, align 8, !dbg !1764
  %5564 = icmp ult i64 %5562, %5563, !dbg !1764
  br label %originalBB867

originalBB871alteredBB:                           ; preds = %originalBB871, %3378
  %5565 = load i64, i64* %29, align 8, !dbg !1767
  %_872 = sub i64 %5565, 1
  %gen873 = mul i64 %_872, 1
  %_874 = shl i64 %5565, 1
  %_875 = sub i64 0, %5565
  %gen876 = add i64 %_875, 1
  %5566 = add i64 %5565, 1, !dbg !1767
  store i64 %5566, i64* %29, align 8, !dbg !1767
  br label %originalBB871

originalBB880alteredBB:                           ; preds = %originalBB880, %3397
  store i8 1, i8* %36, align 1, !dbg !1754
  br label %originalBB880

originalBB884alteredBB:                           ; preds = %originalBB884, %3414
  br label %originalBB884

originalBB888alteredBB:                           ; preds = %originalBB888, %3439
  %5567 = load i64, i64* %29, align 8, !dbg !1771
  %_889 = sub i64 %5567, 1
  %gen890 = mul i64 %_889, 1
  %_891 = sub i64 %5567, 1
  %gen892 = mul i64 %_891, 1
  %_893 = sub i64 %5567, 1
  %gen894 = mul i64 %_893, 1
  %_895 = shl i64 %5567, 1
  %_896 = shl i64 %5567, 1
  %_897 = sub i64 %5567, 1
  %gen898 = mul i64 %_897, 1
  %5568 = add i64 %5567, 1, !dbg !1771
  store i64 %5568, i64* %29, align 8, !dbg !1771
  br label %originalBB888

originalBB902alteredBB:                           ; preds = %originalBB902, %3458
  br label %originalBB902

originalBB906alteredBB:                           ; preds = %originalBB906, %3475
  br label %originalBB906

originalBB910alteredBB:                           ; preds = %originalBB910, %3492
  %5569 = load i64, i64* %29, align 8, !dbg !1773
  %5570 = load i64, i64* %20, align 8, !dbg !1773
  %5571 = icmp ult i64 %5569, %5570, !dbg !1773
  br label %originalBB910

originalBB914alteredBB:                           ; preds = %originalBB914, %3512
  %5572 = load i8, i8* %39, align 1, !dbg !1773
  %5573 = zext i8 %5572 to i32, !dbg !1773
  %_915 = sub i32 0, %5573
  %gen916 = add i32 %_915, 6
  %_917 = sub i32 %5573, 6
  %gen918 = mul i32 %_917, 6
  %_919 = shl i32 %5573, 6
  %_920 = sub i32 0, %5573
  %gen921 = add i32 %_920, 6
  %5574 = ashr i32 %5573, 6, !dbg !1773
  %_922 = shl i32 48, %5574
  %_923 = sub i32 48, %5574
  %gen924 = mul i32 %_923, %5574
  %_925 = sub i32 48, %5574
  %gen926 = mul i32 %_925, %5574
  %_927 = sub i32 0, 48
  %gen928 = add i32 %_927, %5574
  %_929 = shl i32 48, %5574
  %_930 = sub i32 0, 48
  %gen931 = add i32 %_930, %5574
  %_932 = sub i32 0, 48
  %gen933 = add i32 %_932, %5574
  %5575 = add nsw i32 48, %5574, !dbg !1773
  %5576 = trunc i32 %5575 to i8, !dbg !1773
  %5577 = load i8*, i8** %19, align 8, !dbg !1773
  %5578 = load i64, i64* %29, align 8, !dbg !1773
  %5579 = getelementptr inbounds i8, i8* %5577, i64 %5578, !dbg !1773
  store i8 %5576, i8* %5579, align 1, !dbg !1773
  br label %originalBB914

originalBB937alteredBB:                           ; preds = %originalBB937, %3537
  %5580 = load i64, i64* %29, align 8, !dbg !1776
  %_938 = shl i64 %5580, 1
  %_939 = sub i64 0, %5580
  %gen940 = add i64 %_939, 1
  %_941 = sub i64 %5580, 1
  %gen942 = mul i64 %_941, 1
  %_943 = sub i64 %5580, 1
  %gen944 = mul i64 %_943, 1
  %_945 = sub i64 %5580, 1
  %gen946 = mul i64 %_945, 1
  %_947 = sub i64 %5580, 1
  %gen948 = mul i64 %_947, 1
  %_949 = sub i64 %5580, 1
  %gen950 = mul i64 %_949, 1
  %_951 = sub i64 %5580, 1
  %gen952 = mul i64 %_951, 1
  %5581 = add i64 %5580, 1, !dbg !1776
  store i64 %5581, i64* %29, align 8, !dbg !1776
  br label %originalBB937

originalBB956alteredBB:                           ; preds = %originalBB956, %3556
  br label %originalBB956

originalBB960alteredBB:                           ; preds = %originalBB960, %3573
  %5582 = load i64, i64* %29, align 8, !dbg !1778
  %5583 = load i64, i64* %20, align 8, !dbg !1778
  %5584 = icmp ult i64 %5582, %5583, !dbg !1778
  br label %originalBB960

originalBB964alteredBB:                           ; preds = %originalBB964, %3593
  %5585 = load i8, i8* %39, align 1, !dbg !1778
  %5586 = zext i8 %5585 to i32, !dbg !1778
  %_965 = shl i32 %5586, 3
  %_966 = sub i32 0, %5586
  %gen967 = add i32 %_966, 3
  %_968 = shl i32 %5586, 3
  %_969 = sub i32 %5586, 3
  %gen970 = mul i32 %_969, 3
  %_971 = shl i32 %5586, 3
  %5587 = ashr i32 %5586, 3, !dbg !1778
  %_972 = sub i32 0, %5587
  %gen973 = add i32 %_972, 7
  %_974 = shl i32 %5587, 7
  %_975 = shl i32 %5587, 7
  %_976 = sub i32 %5587, 7
  %gen977 = mul i32 %_976, 7
  %5588 = and i32 %5587, 7, !dbg !1778
  %_978 = sub i32 48, %5588
  %gen979 = mul i32 %_978, %5588
  %_980 = sub i32 0, 48
  %gen981 = add i32 %_980, %5588
  %5589 = add nsw i32 48, %5588, !dbg !1778
  %5590 = trunc i32 %5589 to i8, !dbg !1778
  %5591 = load i8*, i8** %19, align 8, !dbg !1778
  %5592 = load i64, i64* %29, align 8, !dbg !1778
  %5593 = getelementptr inbounds i8, i8* %5591, i64 %5592, !dbg !1778
  store i8 %5590, i8* %5593, align 1, !dbg !1778
  br label %originalBB964

originalBB985alteredBB:                           ; preds = %originalBB985, %3619
  %5594 = load i64, i64* %29, align 8, !dbg !1781
  %_986 = sub i64 %5594, 1
  %gen987 = mul i64 %_986, 1
  %_988 = sub i64 0, %5594
  %gen989 = add i64 %_988, 1
  %_990 = sub i64 %5594, 1
  %gen991 = mul i64 %_990, 1
  %_992 = sub i64 0, %5594
  %gen993 = add i64 %_992, 1
  %5595 = add i64 %5594, 1, !dbg !1781
  store i64 %5595, i64* %29, align 8, !dbg !1781
  br label %originalBB985

originalBB997alteredBB:                           ; preds = %originalBB997, %3638
  %5596 = load i8, i8* %39, align 1, !dbg !1782
  %5597 = zext i8 %5596 to i32, !dbg !1782
  %_998 = sub i32 %5597, 7
  %gen999 = mul i32 %_998, 7
  %_1000 = sub i32 %5597, 7
  %gen1001 = mul i32 %_1000, 7
  %_1002 = sub i32 0, %5597
  %gen1003 = add i32 %_1002, 7
  %_1004 = sub i32 %5597, 7
  %gen1005 = mul i32 %_1004, 7
  %5598 = and i32 %5597, 7, !dbg !1783
  %_1006 = sub i32 48, %5598
  %gen1007 = mul i32 %_1006, %5598
  %_1008 = sub i32 48, %5598
  %gen1009 = mul i32 %_1008, %5598
  %_1010 = sub i32 48, %5598
  %gen1011 = mul i32 %_1010, %5598
  %_1012 = sub i32 0, 48
  %gen1013 = add i32 %_1012, %5598
  %_1014 = sub i32 0, 48
  %gen1015 = add i32 %_1014, %5598
  %_1016 = sub i32 0, 48
  %gen1017 = add i32 %_1016, %5598
  %_1018 = sub i32 48, %5598
  %gen1019 = mul i32 %_1018, %5598
  %5599 = add nsw i32 48, %5598, !dbg !1784
  %5600 = trunc i32 %5599 to i8, !dbg !1785
  store i8 %5600, i8* %39, align 1, !dbg !1786
  br label %originalBB997

originalBB1023alteredBB:                          ; preds = %originalBB1023, %3663
  br label %originalBB1023

originalBB1027alteredBB:                          ; preds = %originalBB1027, %3680
  %5601 = load i64, i64* %29, align 8, !dbg !1793
  %5602 = load i64, i64* %20, align 8, !dbg !1793
  %5603 = icmp ult i64 %5601, %5602, !dbg !1793
  br label %originalBB1027

originalBB1031alteredBB:                          ; preds = %originalBB1031, %3700
  %5604 = load i8*, i8** %19, align 8, !dbg !1793
  %5605 = load i64, i64* %29, align 8, !dbg !1793
  %5606 = getelementptr inbounds i8, i8* %5604, i64 %5605, !dbg !1793
  store i8 92, i8* %5606, align 1, !dbg !1793
  br label %originalBB1031

originalBB1035alteredBB:                          ; preds = %originalBB1035, %3720
  %5607 = load i64, i64* %29, align 8, !dbg !1796
  %_1036 = sub i64 %5607, 1
  %gen1037 = mul i64 %_1036, 1
  %5608 = add i64 %5607, 1, !dbg !1796
  store i64 %5608, i64* %29, align 8, !dbg !1796
  br label %originalBB1035

originalBB1041alteredBB:                          ; preds = %originalBB1041, %3741
  %5609 = load i64, i64* %50, align 8, !dbg !1799
  %5610 = load i64, i64* %28, align 8, !dbg !1801
  %_1042 = sub i64 0, %5610
  %gen1043 = add i64 %_1042, 1
  %_1044 = shl i64 %5610, 1
  %_1045 = shl i64 %5610, 1
  %_1046 = sub i64 0, %5610
  %gen1047 = add i64 %_1046, 1
  %_1048 = shl i64 %5610, 1
  %_1049 = sub i64 %5610, 1
  %gen1050 = mul i64 %_1049, 1
  %_1051 = sub i64 0, %5610
  %gen1052 = add i64 %_1051, 1
  %_1053 = shl i64 %5610, 1
  %5611 = add i64 %5610, 1, !dbg !1802
  %5612 = icmp ule i64 %5609, %5611, !dbg !1803
  br label %originalBB1041

originalBB1057alteredBB:                          ; preds = %originalBB1057, %3763
  br label %originalBB1057

originalBB1061alteredBB:                          ; preds = %originalBB1061, %3786
  br label %originalBB1061

originalBB1065alteredBB:                          ; preds = %originalBB1065, %3803
  %5613 = load i64, i64* %29, align 8, !dbg !1813
  %5614 = load i64, i64* %20, align 8, !dbg !1813
  %5615 = icmp ult i64 %5613, %5614, !dbg !1813
  br label %originalBB1065

originalBB1069alteredBB:                          ; preds = %originalBB1069, %3827
  %5616 = load i64, i64* %29, align 8, !dbg !1816
  %_1070 = sub i64 %5616, 1
  %gen1071 = mul i64 %_1070, 1
  %_1072 = shl i64 %5616, 1
  %5617 = add i64 %5616, 1, !dbg !1816
  store i64 %5617, i64* %29, align 8, !dbg !1816
  br label %originalBB1069

originalBB1076alteredBB:                          ; preds = %originalBB1076, %3851
  %5618 = load i8*, i8** %19, align 8, !dbg !1817
  %5619 = load i64, i64* %29, align 8, !dbg !1817
  %5620 = getelementptr inbounds i8, i8* %5618, i64 %5619, !dbg !1817
  store i8 39, i8* %5620, align 1, !dbg !1817
  br label %originalBB1076

originalBB1080alteredBB:                          ; preds = %originalBB1080, %3874
  store i8 0, i8* %36, align 1, !dbg !1811
  br label %originalBB1080

originalBB1084alteredBB:                          ; preds = %originalBB1084, %3891
  br label %originalBB1084

originalBB1088alteredBB:                          ; preds = %originalBB1088, %3908
  br label %originalBB1088

originalBB1092alteredBB:                          ; preds = %originalBB1092, %3925
  %5621 = load i64, i64* %29, align 8, !dbg !1822
  %5622 = load i64, i64* %20, align 8, !dbg !1822
  %5623 = icmp ult i64 %5621, %5622, !dbg !1822
  br label %originalBB1092

originalBB1096alteredBB:                          ; preds = %originalBB1096, %3945
  %5624 = load i8, i8* %39, align 1, !dbg !1822
  %5625 = load i8*, i8** %19, align 8, !dbg !1822
  %5626 = load i64, i64* %29, align 8, !dbg !1822
  %5627 = getelementptr inbounds i8, i8* %5625, i64 %5626, !dbg !1822
  store i8 %5624, i8* %5627, align 1, !dbg !1822
  br label %originalBB1096

originalBB1100alteredBB:                          ; preds = %originalBB1100, %3966
  %5628 = load i64, i64* %29, align 8, !dbg !1825
  %_1101 = sub i64 %5628, 1
  %gen1102 = mul i64 %_1101, 1
  %5629 = add i64 %5628, 1, !dbg !1825
  store i64 %5629, i64* %29, align 8, !dbg !1825
  br label %originalBB1100

originalBB1106alteredBB:                          ; preds = %originalBB1106, %3985
  %5630 = load i8*, i8** %21, align 8, !dbg !1826
  %5631 = load i64, i64* %28, align 8, !dbg !1827
  %_1107 = sub i64 0, %5631
  %gen1108 = add i64 %_1107, 1
  %_1109 = sub i64 0, %5631
  %gen1110 = add i64 %_1109, 1
  %_1111 = sub i64 %5631, 1
  %gen1112 = mul i64 %_1111, 1
  %_1113 = sub i64 0, %5631
  %gen1114 = add i64 %_1113, 1
  %_1115 = sub i64 0, %5631
  %gen1116 = add i64 %_1115, 1
  %5632 = add i64 %5631, 1, !dbg !1827
  store i64 %5632, i64* %28, align 8, !dbg !1827
  %5633 = getelementptr inbounds i8, i8* %5630, i64 %5632, !dbg !1826
  %5634 = load i8, i8* %5633, align 1, !dbg !1826
  store i8 %5634, i8* %39, align 1, !dbg !1828
  br label %originalBB1106

originalBB1120alteredBB:                          ; preds = %originalBB1120, %4007
  br label %originalBB1120

originalBB1124alteredBB:                          ; preds = %originalBB1124, %4024
  br label %originalBB1124

originalBB1128alteredBB:                          ; preds = %originalBB1128, %4044
  %5635 = load i32, i32* %23, align 4, !dbg !1838
  %5636 = icmp ne i32 %5635, 2, !dbg !1839
  br label %originalBB1128

originalBB1132alteredBB:                          ; preds = %originalBB1132, %4069
  %5637 = load i32*, i32** %25, align 8, !dbg !1845
  %5638 = load i8, i8* %39, align 1, !dbg !1846
  %5639 = zext i8 %5638 to i64, !dbg !1846
  %_1133 = shl i64 %5639, 32
  %_1134 = shl i64 %5639, 32
  %_1135 = sub i64 0, %5639
  %gen1136 = add i64 %_1135, 32
  %_1137 = sub i64 %5639, 32
  %gen1138 = mul i64 %_1137, 32
  %_1139 = sub i64 0, %5639
  %gen1140 = add i64 %_1139, 32
  %5640 = udiv i64 %5639, 32, !dbg !1847
  %5641 = getelementptr inbounds i32, i32* %5637, i64 %5640, !dbg !1845
  %5642 = load i32, i32* %5641, align 4, !dbg !1845
  %5643 = load i8, i8* %39, align 1, !dbg !1848
  %5644 = zext i8 %5643 to i64, !dbg !1848
  %_1141 = sub i64 0, %5644
  %gen1142 = add i64 %_1141, 32
  %5645 = urem i64 %5644, 32, !dbg !1849
  %5646 = trunc i64 %5645 to i32, !dbg !1850
  %_1143 = sub i32 %5642, %5646
  %gen1144 = mul i32 %_1143, %5646
  %_1145 = shl i32 %5642, %5646
  %_1146 = sub i32 0, %5642
  %gen1147 = add i32 %_1146, %5646
  %_1148 = sub i32 0, %5642
  %gen1149 = add i32 %_1148, %5646
  %_1150 = shl i32 %5642, %5646
  %_1151 = shl i32 %5642, %5646
  %_1152 = sub i32 %5642, %5646
  %gen1153 = mul i32 %_1152, %5646
  %_1154 = sub i32 %5642, %5646
  %gen1155 = mul i32 %_1154, %5646
  %_1156 = sub i32 0, %5642
  %gen1157 = add i32 %_1156, %5646
  %_1158 = sub i32 0, %5642
  %gen1159 = add i32 %_1158, %5646
  %5647 = lshr i32 %5642, %5646, !dbg !1850
  %_1160 = sub i32 %5647, 1
  %gen1161 = mul i32 %_1160, 1
  %5648 = and i32 %5647, 1, !dbg !1851
  %5649 = icmp ne i32 %5648, 0, !dbg !1851
  br label %originalBB1132

originalBB1165alteredBB:                          ; preds = %originalBB1165, %4102
  br label %originalBB1165

originalBB1169alteredBB:                          ; preds = %originalBB1169, %4119
  br label %originalBB1169

originalBB1173alteredBB:                          ; preds = %originalBB1173, %4136
  br label %originalBB1173

originalBB1177alteredBB:                          ; preds = %originalBB1177, %4156
  br label %originalBB1177

originalBB1181alteredBB:                          ; preds = %originalBB1181, %4173
  store i8 1, i8* %42, align 1, !dbg !1862
  %5650 = load i32, i32* %23, align 4, !dbg !1863
  %5651 = icmp eq i32 %5650, 2, !dbg !1863
  br label %originalBB1181

originalBB1185alteredBB:                          ; preds = %originalBB1185, %4192
  %5652 = load i8, i8* %36, align 1, !dbg !1863
  %5653 = trunc i8 %5652 to i1, !dbg !1863
  br label %originalBB1185

originalBB1189alteredBB:                          ; preds = %originalBB1189, %4211
  br label %originalBB1189

originalBB1193alteredBB:                          ; preds = %originalBB1193, %4228
  %5654 = load i64, i64* %29, align 8, !dbg !1867
  %5655 = load i64, i64* %20, align 8, !dbg !1867
  %5656 = icmp ult i64 %5654, %5655, !dbg !1867
  br label %originalBB1193

originalBB1197alteredBB:                          ; preds = %originalBB1197, %4248
  %5657 = load i8*, i8** %19, align 8, !dbg !1867
  %5658 = load i64, i64* %29, align 8, !dbg !1867
  %5659 = getelementptr inbounds i8, i8* %5657, i64 %5658, !dbg !1867
  store i8 39, i8* %5659, align 1, !dbg !1867
  br label %originalBB1197

originalBB1201alteredBB:                          ; preds = %originalBB1201, %4268
  %5660 = load i64, i64* %29, align 8, !dbg !1870
  %_1202 = sub i64 %5660, 1
  %gen1203 = mul i64 %_1202, 1
  %_1204 = sub i64 %5660, 1
  %gen1205 = mul i64 %_1204, 1
  %_1206 = shl i64 %5660, 1
  %5661 = add i64 %5660, 1, !dbg !1870
  store i64 %5661, i64* %29, align 8, !dbg !1870
  br label %originalBB1201

originalBB1210alteredBB:                          ; preds = %originalBB1210, %4287
  br label %originalBB1210

originalBB1214alteredBB:                          ; preds = %originalBB1214, %4308
  %5662 = load i8*, i8** %19, align 8, !dbg !1871
  %5663 = load i64, i64* %29, align 8, !dbg !1871
  %5664 = getelementptr inbounds i8, i8* %5662, i64 %5663, !dbg !1871
  store i8 36, i8* %5664, align 1, !dbg !1871
  br label %originalBB1214

originalBB1218alteredBB:                          ; preds = %originalBB1218, %4340
  %5665 = load i64, i64* %29, align 8, !dbg !1878
  %_1219 = sub i64 %5665, 1
  %gen1220 = mul i64 %_1219, 1
  %_1221 = sub i64 0, %5665
  %gen1222 = add i64 %_1221, 1
  %_1223 = sub i64 %5665, 1
  %gen1224 = mul i64 %_1223, 1
  %_1225 = shl i64 %5665, 1
  %5666 = add i64 %5665, 1, !dbg !1878
  store i64 %5666, i64* %29, align 8, !dbg !1878
  br label %originalBB1218

originalBB1229alteredBB:                          ; preds = %originalBB1229, %4359
  store i8 1, i8* %36, align 1, !dbg !1865
  br label %originalBB1229

originalBB1233alteredBB:                          ; preds = %originalBB1233, %4376
  br label %originalBB1233

originalBB1237alteredBB:                          ; preds = %originalBB1237, %4393
  %5667 = load i64, i64* %29, align 8, !dbg !1879
  %5668 = load i64, i64* %20, align 8, !dbg !1879
  %5669 = icmp ult i64 %5667, %5668, !dbg !1879
  br label %originalBB1237

originalBB1241alteredBB:                          ; preds = %originalBB1241, %4413
  %5670 = load i8*, i8** %19, align 8, !dbg !1879
  %5671 = load i64, i64* %29, align 8, !dbg !1879
  %5672 = getelementptr inbounds i8, i8* %5670, i64 %5671, !dbg !1879
  store i8 92, i8* %5672, align 1, !dbg !1879
  br label %originalBB1241

originalBB1245alteredBB:                          ; preds = %originalBB1245, %4433
  %5673 = load i64, i64* %29, align 8, !dbg !1882
  %_1246 = sub i64 %5673, 1
  %gen1247 = mul i64 %_1246, 1
  %5674 = add i64 %5673, 1, !dbg !1882
  store i64 %5674, i64* %29, align 8, !dbg !1882
  br label %originalBB1245

originalBB1251alteredBB:                          ; preds = %originalBB1251, %4454
  br label %originalBB1251

originalBB1255alteredBB:                          ; preds = %originalBB1255, %4471
  %5675 = load i8, i8* %36, align 1, !dbg !1886
  %5676 = trunc i8 %5675 to i1, !dbg !1886
  br label %originalBB1255

originalBB1259alteredBB:                          ; preds = %originalBB1259, %4493
  br label %originalBB1259

originalBB1263alteredBB:                          ; preds = %originalBB1263, %4510
  %5677 = load i64, i64* %29, align 8, !dbg !1892
  %5678 = load i64, i64* %20, align 8, !dbg !1892
  %5679 = icmp ult i64 %5677, %5678, !dbg !1892
  br label %originalBB1263

originalBB1267alteredBB:                          ; preds = %originalBB1267, %4530
  %5680 = load i8*, i8** %19, align 8, !dbg !1892
  %5681 = load i64, i64* %29, align 8, !dbg !1892
  %5682 = getelementptr inbounds i8, i8* %5680, i64 %5681, !dbg !1892
  store i8 39, i8* %5682, align 1, !dbg !1892
  br label %originalBB1267

originalBB1271alteredBB:                          ; preds = %originalBB1271, %4550
  %5683 = load i64, i64* %29, align 8, !dbg !1895
  %_1272 = sub i64 0, %5683
  %gen1273 = add i64 %_1272, 1
  %_1274 = sub i64 %5683, 1
  %gen1275 = mul i64 %_1274, 1
  %_1276 = shl i64 %5683, 1
  %_1277 = shl i64 %5683, 1
  %_1278 = sub i64 0, %5683
  %gen1279 = add i64 %_1278, 1
  %_1280 = sub i64 %5683, 1
  %gen1281 = mul i64 %_1280, 1
  %_1282 = shl i64 %5683, 1
  %_1283 = sub i64 %5683, 1
  %gen1284 = mul i64 %_1283, 1
  %5684 = add i64 %5683, 1, !dbg !1895
  store i64 %5684, i64* %29, align 8, !dbg !1895
  br label %originalBB1271

originalBB1288alteredBB:                          ; preds = %originalBB1288, %4569
  br label %originalBB1288

originalBB1292alteredBB:                          ; preds = %originalBB1292, %4586
  %5685 = load i64, i64* %29, align 8, !dbg !1896
  %5686 = load i64, i64* %20, align 8, !dbg !1896
  %5687 = icmp ult i64 %5685, %5686, !dbg !1896
  br label %originalBB1292

originalBB1296alteredBB:                          ; preds = %originalBB1296, %4606
  %5688 = load i8*, i8** %19, align 8, !dbg !1896
  %5689 = load i64, i64* %29, align 8, !dbg !1896
  %5690 = getelementptr inbounds i8, i8* %5688, i64 %5689, !dbg !1896
  store i8 39, i8* %5690, align 1, !dbg !1896
  br label %originalBB1296

originalBB1300alteredBB:                          ; preds = %originalBB1300, %4626
  %5691 = load i64, i64* %29, align 8, !dbg !1899
  %_1301 = shl i64 %5691, 1
  %_1302 = sub i64 0, %5691
  %gen1303 = add i64 %_1302, 1
  %_1304 = sub i64 0, %5691
  %gen1305 = add i64 %_1304, 1
  %_1306 = sub i64 %5691, 1
  %gen1307 = mul i64 %_1306, 1
  %_1308 = sub i64 %5691, 1
  %gen1309 = mul i64 %_1308, 1
  %_1310 = sub i64 0, %5691
  %gen1311 = add i64 %_1310, 1
  %_1312 = shl i64 %5691, 1
  %_1313 = shl i64 %5691, 1
  %5692 = add i64 %5691, 1, !dbg !1899
  store i64 %5692, i64* %29, align 8, !dbg !1899
  br label %originalBB1300

originalBB1317alteredBB:                          ; preds = %originalBB1317, %4645
  store i8 0, i8* %36, align 1, !dbg !1890
  br label %originalBB1317

originalBB1321alteredBB:                          ; preds = %originalBB1321, %4662
  br label %originalBB1321

originalBB1325alteredBB:                          ; preds = %originalBB1325, %4679
  br label %originalBB1325

originalBB1329alteredBB:                          ; preds = %originalBB1329, %4696
  %5693 = load i64, i64* %29, align 8, !dbg !1901
  %5694 = load i64, i64* %20, align 8, !dbg !1901
  %5695 = icmp ult i64 %5693, %5694, !dbg !1901
  br label %originalBB1329

originalBB1333alteredBB:                          ; preds = %originalBB1333, %4724
  %5696 = load i8, i8* %43, align 1, !dbg !1905
  %5697 = trunc i8 %5696 to i1, !dbg !1905
  br label %originalBB1333

originalBB1337alteredBB:                          ; preds = %originalBB1337, %4748
  %5698 = load i64, i64* %29, align 8, !dbg !1915
  %5699 = icmp eq i64 %5698, 0, !dbg !1917
  br label %originalBB1337

originalBB1341alteredBB:                          ; preds = %originalBB1341, %4767
  %5700 = load i32, i32* %23, align 4, !dbg !1919
  %5701 = icmp eq i32 %5700, 2, !dbg !1920
  br label %originalBB1341

originalBB1345alteredBB:                          ; preds = %originalBB1345, %4786
  %5702 = load i8, i8* %35, align 1, !dbg !1922
  %5703 = trunc i8 %5702 to i1, !dbg !1922
  br label %originalBB1345

originalBB1349alteredBB:                          ; preds = %originalBB1349, %4806
  %5704 = load i32, i32* %23, align 4, !dbg !1925
  %5705 = icmp eq i32 %5704, 2, !dbg !1927
  br label %originalBB1349

originalBB1353alteredBB:                          ; preds = %originalBB1353, %4825
  %5706 = load i8, i8* %35, align 1, !dbg !1929
  %5707 = trunc i8 %5706 to i1, !dbg !1929
  br label %originalBB1353

originalBB1357alteredBB:                          ; preds = %originalBB1357, %4844
  %5708 = load i8, i8* %37, align 1, !dbg !1931
  %5709 = trunc i8 %5708 to i1, !dbg !1931
  br label %originalBB1357

originalBB1361alteredBB:                          ; preds = %originalBB1361, %4866
  %5710 = load i8*, i8** %19, align 8, !dbg !1937
  %5711 = load i64, i64* %30, align 8, !dbg !1938
  %5712 = load i8*, i8** %21, align 8, !dbg !1939
  %5713 = load i64, i64* %22, align 8, !dbg !1940
  %5714 = load i32, i32* %24, align 4, !dbg !1941
  %5715 = load i32*, i32** %25, align 8, !dbg !1942
  %5716 = load i8*, i8** %26, align 8, !dbg !1943
  %5717 = load i8*, i8** %27, align 8, !dbg !1944
  %5718 = call i64 @quotearg_buffer_restyled(i8* %5710, i64 %5711, i8* %5712, i64 %5713, i32 5, i32 %5714, i32* %5715, i8* %5716, i8* %5717), !dbg !1945
  store i64 %5718, i64* %18, align 8, !dbg !1946
  br label %originalBB1361

originalBB1365alteredBB:                          ; preds = %originalBB1365, %4895
  %5719 = load i64, i64* %30, align 8, !dbg !1950
  %5720 = icmp ne i64 %5719, 0, !dbg !1950
  br label %originalBB1365

originalBB1369alteredBB:                          ; preds = %originalBB1369, %4916
  br label %originalBB1369

originalBB1373alteredBB:                          ; preds = %originalBB1373, %4940
  br label %originalBB1373

originalBB1377alteredBB:                          ; preds = %originalBB1377, %4957
  %5721 = load i8*, i8** %31, align 8, !dbg !1964
  %5722 = load i8, i8* %5721, align 1, !dbg !1967
  %5723 = icmp ne i8 %5722, 0, !dbg !1968
  br label %originalBB1377

originalBB1381alteredBB:                          ; preds = %originalBB1381, %4978
  %5724 = load i64, i64* %29, align 8, !dbg !1970
  %5725 = load i64, i64* %20, align 8, !dbg !1970
  %5726 = icmp ult i64 %5724, %5725, !dbg !1970
  br label %originalBB1381

originalBB1385alteredBB:                          ; preds = %originalBB1385, %4998
  %5727 = load i8*, i8** %31, align 8, !dbg !1970
  %5728 = load i8, i8* %5727, align 1, !dbg !1970
  %5729 = load i8*, i8** %19, align 8, !dbg !1970
  %5730 = load i64, i64* %29, align 8, !dbg !1970
  %5731 = getelementptr inbounds i8, i8* %5729, i64 %5730, !dbg !1970
  store i8 %5728, i8* %5731, align 1, !dbg !1970
  br label %originalBB1385

originalBB1389alteredBB:                          ; preds = %originalBB1389, %5020
  %5732 = load i64, i64* %29, align 8, !dbg !1973
  %_1390 = shl i64 %5732, 1
  %_1391 = sub i64 %5732, 1
  %gen1392 = mul i64 %_1391, 1
  %_1393 = sub i64 %5732, 1
  %gen1394 = mul i64 %_1393, 1
  %_1395 = shl i64 %5732, 1
  %5733 = add i64 %5732, 1, !dbg !1973
  store i64 %5733, i64* %29, align 8, !dbg !1973
  br label %originalBB1389

originalBB1399alteredBB:                          ; preds = %originalBB1399, %5039
  br label %originalBB1399

originalBB1403alteredBB:                          ; preds = %originalBB1403, %5059
  br label %originalBB1403

originalBB1407alteredBB:                          ; preds = %originalBB1407, %5076
  %5734 = load i64, i64* %29, align 8, !dbg !1978
  %5735 = load i64, i64* %20, align 8, !dbg !1980
  %5736 = icmp ult i64 %5734, %5735, !dbg !1981
  br label %originalBB1407

originalBB1411alteredBB:                          ; preds = %originalBB1411, %5096
  %5737 = load i8*, i8** %19, align 8, !dbg !1983
  %5738 = load i64, i64* %29, align 8, !dbg !1984
  %5739 = getelementptr inbounds i8, i8* %5737, i64 %5738, !dbg !1983
  store i8 0, i8* %5739, align 1, !dbg !1985
  br label %originalBB1411

originalBB1415alteredBB:                          ; preds = %originalBB1415, %5116
  %5740 = load i64, i64* %29, align 8, !dbg !1986
  store i64 %5740, i64* %18, align 8, !dbg !1987
  br label %originalBB1415

originalBB1419alteredBB:                          ; preds = %originalBB1419, %5134
  %5741 = load i32, i32* %23, align 4, !dbg !1990
  %5742 = icmp eq i32 %5741, 2, !dbg !1992
  br label %originalBB1419

originalBB1423alteredBB:                          ; preds = %originalBB1423, %5153
  %5743 = load i8, i8* %33, align 1, !dbg !1994
  %5744 = trunc i8 %5743 to i1, !dbg !1994
  br label %originalBB1423

originalBB1427alteredBB:                          ; preds = %originalBB1427, %5172
  store i32 4, i32* %23, align 4, !dbg !1996
  br label %originalBB1427

originalBB1431alteredBB:                          ; preds = %originalBB1431, %5189
  %5745 = load i8*, i8** %19, align 8, !dbg !1998
  %5746 = load i64, i64* %20, align 8, !dbg !1999
  %5747 = load i8*, i8** %21, align 8, !dbg !2000
  %5748 = load i64, i64* %22, align 8, !dbg !2001
  %5749 = load i32, i32* %23, align 4, !dbg !2002
  %5750 = load i32, i32* %24, align 4, !dbg !2003
  %_1432 = sub i32 %5750, -3
  %gen1433 = mul i32 %_1432, -3
  %_1434 = sub i32 %5750, -3
  %gen1435 = mul i32 %_1434, -3
  %5751 = and i32 %5750, -3, !dbg !2004
  %5752 = load i8*, i8** %26, align 8, !dbg !2005
  %5753 = load i8*, i8** %27, align 8, !dbg !2006
  %5754 = call i64 @quotearg_buffer_restyled(i8* %5745, i64 %5746, i8* %5747, i64 %5748, i32 %5749, i32 %5751, i32* null, i8* %5752, i8* %5753), !dbg !2007
  store i64 %5754, i64* %18, align 8, !dbg !2008
  br label %originalBB1431

originalBB1439alteredBB:                          ; preds = %originalBB1439, %5216
  %5755 = load i64, i64* %18, align 8, !dbg !2009
  br label %originalBB1439
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #3

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gettext_quote(i8*, i32) #5 !dbg !2061 {
  %3 = load i32, i32* @x.19
  %4 = load i32, i32* @y.20
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2064, metadata !DIExpression()), !dbg !2065
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !2066, metadata !DIExpression()), !dbg !2067
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2068, metadata !DIExpression()), !dbg !2069
  %16 = load i8*, i8** %12, align 8, !dbg !2070
  %17 = call i8* @gettext(i8* %16) #10, !dbg !2070
  store i8* %17, i8** %14, align 8, !dbg !2069
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2071, metadata !DIExpression()), !dbg !2072
  %18 = load i8*, i8** %14, align 8, !dbg !2073
  %19 = load i8*, i8** %12, align 8, !dbg !2075
  %20 = icmp ne i8* %18, %19, !dbg !2076
  %21 = load i32, i32* @x.19
  %22 = load i32, i32* @y.20
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %20, label %29, label %47, !dbg !2077

29:                                               ; preds = %originalBBpart2
  %30 = load i32, i32* @x.19
  %31 = load i32, i32* @y.20
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i8*, i8** %14, align 8, !dbg !2078
  store i8* %38, i8** %11, align 8, !dbg !2079
  %39 = load i32, i32* @x.19
  %40 = load i32, i32* @y.20
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %141, !dbg !2079

47:                                               ; preds = %originalBBpart2
  %48 = load i32, i32* @x.19
  %49 = load i32, i32* @y.20
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = call i8* @locale_charset(), !dbg !2080
  store i8* %56, i8** %15, align 8, !dbg !2081
  %57 = load i8*, i8** %15, align 8, !dbg !2082
  %58 = call i32 @c_strcasecmp(i8* %57, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.55, i64 0, i64 0)) #13, !dbg !2082
  %59 = icmp eq i32 %58, 0, !dbg !2082
  %60 = load i32, i32* @x.19
  %61 = load i32, i32* @y.20
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %59, label %68, label %92, !dbg !2084

68:                                               ; preds = %originalBBpart28
  %69 = load i32, i32* @x.19
  %70 = load i32, i32* @y.20
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %68, %originalBB10alteredBB
  %77 = load i8*, i8** %12, align 8, !dbg !2085
  %78 = getelementptr inbounds i8, i8* %77, i64 0, !dbg !2085
  %79 = load i8, i8* %78, align 1, !dbg !2085
  %80 = sext i8 %79 to i32, !dbg !2085
  %81 = icmp eq i32 %80, 96, !dbg !2086
  %82 = zext i1 %81 to i64, !dbg !2085
  %83 = select i1 %81, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.56, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.57, i64 0, i64 0), !dbg !2085
  store i8* %83, i8** %11, align 8, !dbg !2087
  %84 = load i32, i32* @x.19
  %85 = load i32, i32* @y.20
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %141, !dbg !2087

92:                                               ; preds = %originalBBpart28
  %93 = load i8*, i8** %15, align 8, !dbg !2088
  %94 = call i32 @c_strcasecmp(i8* %93, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.58, i64 0, i64 0)) #13, !dbg !2088
  %95 = icmp eq i32 %94, 0, !dbg !2088
  br i1 %95, label %96, label %120, !dbg !2090

96:                                               ; preds = %92
  %97 = load i32, i32* @x.19
  %98 = load i32, i32* @y.20
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %96, %originalBB14alteredBB
  %105 = load i8*, i8** %12, align 8, !dbg !2091
  %106 = getelementptr inbounds i8, i8* %105, i64 0, !dbg !2091
  %107 = load i8, i8* %106, align 1, !dbg !2091
  %108 = sext i8 %107 to i32, !dbg !2091
  %109 = icmp eq i32 %108, 96, !dbg !2092
  %110 = zext i1 %109 to i64, !dbg !2091
  %111 = select i1 %109, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.59, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.60, i64 0, i64 0), !dbg !2091
  store i8* %111, i8** %11, align 8, !dbg !2093
  %112 = load i32, i32* @x.19
  %113 = load i32, i32* @y.20
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %141, !dbg !2093

120:                                              ; preds = %92
  %121 = load i32, i32* @x.19
  %122 = load i32, i32* @y.20
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %120, %originalBB18alteredBB
  %129 = load i32, i32* %13, align 4, !dbg !2094
  %130 = icmp eq i32 %129, 9, !dbg !2095
  %131 = zext i1 %130 to i64, !dbg !2094
  %132 = select i1 %130, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.52, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.54, i64 0, i64 0), !dbg !2094
  store i8* %132, i8** %11, align 8, !dbg !2096
  %133 = load i32, i32* @x.19
  %134 = load i32, i32* @y.20
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %141, !dbg !2096

141:                                              ; preds = %originalBBpart220, %originalBBpart216, %originalBBpart212, %originalBBpart24
  %142 = load i8*, i8** %11, align 8, !dbg !2097
  ret i8* %142, !dbg !2097

originalBBalteredBB:                              ; preds = %originalBB, %2
  %143 = alloca i8*, align 8
  %144 = alloca i8*, align 8
  %145 = alloca i32, align 4
  %146 = alloca i8*, align 8
  %147 = alloca i8*, align 8
  store i8* %0, i8** %144, align 8
  call void @llvm.dbg.declare(metadata i8** %144, metadata !2098, metadata !DIExpression()), !dbg !2065
  store i32 %1, i32* %145, align 4
  call void @llvm.dbg.declare(metadata i32* %145, metadata !2130, metadata !DIExpression()), !dbg !2067
  call void @llvm.dbg.declare(metadata i8** %146, metadata !2131, metadata !DIExpression()), !dbg !2069
  %148 = load i8*, i8** %144, align 8, !dbg !2070
  %149 = call i8* @gettext(i8* %148) #10, !dbg !2070
  store i8* %149, i8** %146, align 8, !dbg !2069
  call void @llvm.dbg.declare(metadata i8** %147, metadata !2132, metadata !DIExpression()), !dbg !2072
  %150 = load i8*, i8** %146, align 8, !dbg !2073
  %151 = load i8*, i8** %144, align 8, !dbg !2075
  %152 = icmp ne i8* %150, %151, !dbg !2076
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %153 = load i8*, i8** %14, align 8, !dbg !2078
  store i8* %153, i8** %11, align 8, !dbg !2079
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %154 = call i8* @locale_charset(), !dbg !2080
  store i8* %154, i8** %15, align 8, !dbg !2081
  %155 = load i8*, i8** %15, align 8, !dbg !2082
  %156 = call i32 @c_strcasecmp(i8* %155, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.55, i64 0, i64 0)) #13, !dbg !2082
  %157 = icmp eq i32 %156, 0, !dbg !2082
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %68
  %158 = load i8*, i8** %12, align 8, !dbg !2085
  %159 = getelementptr inbounds i8, i8* %158, i64 0, !dbg !2085
  %160 = load i8, i8* %159, align 1, !dbg !2085
  %161 = sext i8 %160 to i32, !dbg !2085
  %162 = icmp eq i32 %161, 96, !dbg !2086
  %163 = zext i1 %162 to i64, !dbg !2085
  %164 = select i1 %162, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.56, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.57, i64 0, i64 0), !dbg !2085
  store i8* %164, i8** %11, align 8, !dbg !2087
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %96
  %165 = load i8*, i8** %12, align 8, !dbg !2091
  %166 = getelementptr inbounds i8, i8* %165, i64 0, !dbg !2091
  %167 = load i8, i8* %166, align 1, !dbg !2091
  %168 = sext i8 %167 to i32, !dbg !2091
  %169 = icmp eq i32 %168, 96, !dbg !2092
  %170 = zext i1 %169 to i64, !dbg !2091
  %171 = select i1 %169, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.59, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.60, i64 0, i64 0), !dbg !2091
  store i8* %171, i8** %11, align 8, !dbg !2093
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %120
  %172 = load i32, i32* %13, align 4, !dbg !2094
  %173 = icmp eq i32 %172, 9, !dbg !2095
  %174 = zext i1 %173 to i64, !dbg !2094
  %175 = select i1 %173, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.52, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.54, i64 0, i64 0), !dbg !2094
  store i8* %175, i8** %11, align 8, !dbg !2096
  br label %originalBB18
}

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #7

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #7

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #3

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char(i8*, i8 signext) #5 !dbg !2133 {
  %3 = load i32, i32* @x.21
  %4 = load i32, i32* @y.22
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8, align 1
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2136, metadata !DIExpression()), !dbg !2137
  store i8 %1, i8* %12, align 1
  call void @llvm.dbg.declare(metadata i8* %12, metadata !2138, metadata !DIExpression()), !dbg !2139
  %13 = load i8*, i8** %11, align 8, !dbg !2140
  %14 = load i8, i8* %12, align 1, !dbg !2141
  %15 = call i8* @quotearg_char_mem(i8* %13, i64 -1, i8 signext %14), !dbg !2142
  %16 = load i32, i32* @x.21
  %17 = load i32, i32* @y.22
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !2143

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i8*, align 8
  %25 = alloca i8, align 1
  store i8* %0, i8** %24, align 8
  call void @llvm.dbg.declare(metadata i8** %24, metadata !2144, metadata !DIExpression()), !dbg !2137
  store i8 %1, i8* %25, align 1
  call void @llvm.dbg.declare(metadata i8* %25, metadata !2176, metadata !DIExpression()), !dbg !2139
  %26 = load i8*, i8** %24, align 8, !dbg !2140
  %27 = load i8, i8* %25, align 1, !dbg !2141
  %28 = call i8* @quotearg_char_mem(i8* %26, i64 -1, i8 signext %27), !dbg !2142
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_colon(i8*) #5 !dbg !2177 {
  %2 = load i32, i32* @x.23
  %3 = load i32, i32* @y.24
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !2180, metadata !DIExpression()), !dbg !2181
  %11 = load i8*, i8** %10, align 8, !dbg !2182
  %12 = call i8* @quotearg_char(i8* %11, i8 signext 58), !dbg !2183
  %13 = load i32, i32* @x.23
  %14 = load i32, i32* @y.24
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !2184

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !2185, metadata !DIExpression()), !dbg !2181
  %22 = load i8*, i8** %21, align 8, !dbg !2182
  %23 = call i8* @quotearg_char(i8* %22, i8 signext 58), !dbg !2183
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_arn(%struct._IO_FILE*, i8*, i8*, i8*, i8**, i64) #5 !dbg !2217 {
  %7 = alloca %struct._IO_FILE*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8**, align 8
  %12 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %7, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %7, metadata !2277, metadata !DIExpression()), !dbg !2278
  store i8* %1, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !2279, metadata !DIExpression()), !dbg !2280
  store i8* %2, i8** %9, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !2281, metadata !DIExpression()), !dbg !2282
  store i8* %3, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !2283, metadata !DIExpression()), !dbg !2284
  store i8** %4, i8*** %11, align 8
  call void @llvm.dbg.declare(metadata i8*** %11, metadata !2285, metadata !DIExpression()), !dbg !2286
  store i64 %5, i64* %12, align 8
  call void @llvm.dbg.declare(metadata i64* %12, metadata !2287, metadata !DIExpression()), !dbg !2288
  %13 = load i8*, i8** %8, align 8, !dbg !2289
  %14 = icmp ne i8* %13, null, !dbg !2289
  br i1 %14, label %15, label %37, !dbg !2291

15:                                               ; preds = %6
  %16 = load i32, i32* @x.25
  %17 = load i32, i32* @y.26
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %15, %originalBBalteredBB
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2292
  %25 = load i8*, i8** %8, align 8, !dbg !2293
  %26 = load i8*, i8** %9, align 8, !dbg !2294
  %27 = load i8*, i8** %10, align 8, !dbg !2295
  %28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.63, i64 0, i64 0), i8* %25, i8* %26, i8* %27), !dbg !2296
  %29 = load i32, i32* @x.25
  %30 = load i32, i32* @y.26
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %58, !dbg !2296

37:                                               ; preds = %6
  %38 = load i32, i32* @x.25
  %39 = load i32, i32* @y.26
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2297
  %47 = load i8*, i8** %9, align 8, !dbg !2298
  %48 = load i8*, i8** %10, align 8, !dbg !2299
  %49 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.64, i64 0, i64 0), i8* %47, i8* %48), !dbg !2300
  %50 = load i32, i32* @x.25
  %51 = load i32, i32* @y.26
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %58

58:                                               ; preds = %originalBBpart24, %originalBBpart2
  %59 = load i32, i32* @x.25
  %60 = load i32, i32* @y.26
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %58, %originalBB6alteredBB
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2301
  %68 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.65, i64 0, i64 0)) #10, !dbg !2302
  %69 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %67, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %68, i32 2020), !dbg !2303
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2304
  %71 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.66, i64 0, i64 0), %struct._IO_FILE* %70), !dbg !2304
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2305
  %73 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.67, i64 0, i64 0)) #10, !dbg !2306
  %74 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* %73, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.68, i64 0, i64 0)), !dbg !2307
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2308
  %76 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.66, i64 0, i64 0), %struct._IO_FILE* %75), !dbg !2308
  %77 = load i64, i64* %12, align 8, !dbg !2309
  %78 = load i32, i32* @x.25
  %79 = load i32, i32* @y.26
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  switch i64 %77, label %370 [
    i64 0, label %86
    i64 1, label %103
    i64 2, label %126
    i64 3, label %152
    i64 4, label %181
    i64 5, label %197
    i64 6, label %216
    i64 7, label %254
    i64 8, label %279
    i64 9, label %323
  ], !dbg !2310

86:                                               ; preds = %originalBBpart28
  %87 = load i32, i32* @x.25
  %88 = load i32, i32* @y.26
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %86, %originalBB10alteredBB
  %95 = load i32, i32* @x.25
  %96 = load i32, i32* @y.26
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %401, !dbg !2311

103:                                              ; preds = %originalBBpart28
  %104 = load i32, i32* @x.25
  %105 = load i32, i32* @y.26
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %103, %originalBB14alteredBB
  %112 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2313
  %113 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.69, i64 0, i64 0)) #10, !dbg !2314
  %114 = load i8**, i8*** %11, align 8, !dbg !2315
  %115 = getelementptr inbounds i8*, i8** %114, i64 0, !dbg !2315
  %116 = load i8*, i8** %115, align 8, !dbg !2315
  %117 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %112, i8* %113, i8* %116), !dbg !2316
  %118 = load i32, i32* @x.25
  %119 = load i32, i32* @y.26
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %401, !dbg !2317

126:                                              ; preds = %originalBBpart28
  %127 = load i32, i32* @x.25
  %128 = load i32, i32* @y.26
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %126, %originalBB18alteredBB
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2318
  %136 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.70, i64 0, i64 0)) #10, !dbg !2319
  %137 = load i8**, i8*** %11, align 8, !dbg !2320
  %138 = getelementptr inbounds i8*, i8** %137, i64 0, !dbg !2320
  %139 = load i8*, i8** %138, align 8, !dbg !2320
  %140 = load i8**, i8*** %11, align 8, !dbg !2321
  %141 = getelementptr inbounds i8*, i8** %140, i64 1, !dbg !2321
  %142 = load i8*, i8** %141, align 8, !dbg !2321
  %143 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %135, i8* %136, i8* %139, i8* %142), !dbg !2322
  %144 = load i32, i32* @x.25
  %145 = load i32, i32* @y.26
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %401, !dbg !2323

152:                                              ; preds = %originalBBpart28
  %153 = load i32, i32* @x.25
  %154 = load i32, i32* @y.26
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %152, %originalBB22alteredBB
  %161 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2324
  %162 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.71, i64 0, i64 0)) #10, !dbg !2325
  %163 = load i8**, i8*** %11, align 8, !dbg !2326
  %164 = getelementptr inbounds i8*, i8** %163, i64 0, !dbg !2326
  %165 = load i8*, i8** %164, align 8, !dbg !2326
  %166 = load i8**, i8*** %11, align 8, !dbg !2327
  %167 = getelementptr inbounds i8*, i8** %166, i64 1, !dbg !2327
  %168 = load i8*, i8** %167, align 8, !dbg !2327
  %169 = load i8**, i8*** %11, align 8, !dbg !2328
  %170 = getelementptr inbounds i8*, i8** %169, i64 2, !dbg !2328
  %171 = load i8*, i8** %170, align 8, !dbg !2328
  %172 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %161, i8* %162, i8* %165, i8* %168, i8* %171), !dbg !2329
  %173 = load i32, i32* @x.25
  %174 = load i32, i32* @y.26
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %401, !dbg !2330

181:                                              ; preds = %originalBBpart28
  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2331
  %183 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.72, i64 0, i64 0)) #10, !dbg !2332
  %184 = load i8**, i8*** %11, align 8, !dbg !2333
  %185 = getelementptr inbounds i8*, i8** %184, i64 0, !dbg !2333
  %186 = load i8*, i8** %185, align 8, !dbg !2333
  %187 = load i8**, i8*** %11, align 8, !dbg !2334
  %188 = getelementptr inbounds i8*, i8** %187, i64 1, !dbg !2334
  %189 = load i8*, i8** %188, align 8, !dbg !2334
  %190 = load i8**, i8*** %11, align 8, !dbg !2335
  %191 = getelementptr inbounds i8*, i8** %190, i64 2, !dbg !2335
  %192 = load i8*, i8** %191, align 8, !dbg !2335
  %193 = load i8**, i8*** %11, align 8, !dbg !2336
  %194 = getelementptr inbounds i8*, i8** %193, i64 3, !dbg !2336
  %195 = load i8*, i8** %194, align 8, !dbg !2336
  %196 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %182, i8* %183, i8* %186, i8* %189, i8* %192, i8* %195), !dbg !2337
  br label %401, !dbg !2338

197:                                              ; preds = %originalBBpart28
  %198 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2339
  %199 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.73, i64 0, i64 0)) #10, !dbg !2340
  %200 = load i8**, i8*** %11, align 8, !dbg !2341
  %201 = getelementptr inbounds i8*, i8** %200, i64 0, !dbg !2341
  %202 = load i8*, i8** %201, align 8, !dbg !2341
  %203 = load i8**, i8*** %11, align 8, !dbg !2342
  %204 = getelementptr inbounds i8*, i8** %203, i64 1, !dbg !2342
  %205 = load i8*, i8** %204, align 8, !dbg !2342
  %206 = load i8**, i8*** %11, align 8, !dbg !2343
  %207 = getelementptr inbounds i8*, i8** %206, i64 2, !dbg !2343
  %208 = load i8*, i8** %207, align 8, !dbg !2343
  %209 = load i8**, i8*** %11, align 8, !dbg !2344
  %210 = getelementptr inbounds i8*, i8** %209, i64 3, !dbg !2344
  %211 = load i8*, i8** %210, align 8, !dbg !2344
  %212 = load i8**, i8*** %11, align 8, !dbg !2345
  %213 = getelementptr inbounds i8*, i8** %212, i64 4, !dbg !2345
  %214 = load i8*, i8** %213, align 8, !dbg !2345
  %215 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %198, i8* %199, i8* %202, i8* %205, i8* %208, i8* %211, i8* %214), !dbg !2346
  br label %401, !dbg !2347

216:                                              ; preds = %originalBBpart28
  %217 = load i32, i32* @x.25
  %218 = load i32, i32* @y.26
  %219 = sub i32 %217, 1
  %220 = mul i32 %217, %219
  %221 = urem i32 %220, 2
  %222 = icmp eq i32 %221, 0
  %223 = icmp slt i32 %218, 10
  %224 = or i1 %222, %223
  br i1 %224, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %216, %originalBB26alteredBB
  %225 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2348
  %226 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.74, i64 0, i64 0)) #10, !dbg !2349
  %227 = load i8**, i8*** %11, align 8, !dbg !2350
  %228 = getelementptr inbounds i8*, i8** %227, i64 0, !dbg !2350
  %229 = load i8*, i8** %228, align 8, !dbg !2350
  %230 = load i8**, i8*** %11, align 8, !dbg !2351
  %231 = getelementptr inbounds i8*, i8** %230, i64 1, !dbg !2351
  %232 = load i8*, i8** %231, align 8, !dbg !2351
  %233 = load i8**, i8*** %11, align 8, !dbg !2352
  %234 = getelementptr inbounds i8*, i8** %233, i64 2, !dbg !2352
  %235 = load i8*, i8** %234, align 8, !dbg !2352
  %236 = load i8**, i8*** %11, align 8, !dbg !2353
  %237 = getelementptr inbounds i8*, i8** %236, i64 3, !dbg !2353
  %238 = load i8*, i8** %237, align 8, !dbg !2353
  %239 = load i8**, i8*** %11, align 8, !dbg !2354
  %240 = getelementptr inbounds i8*, i8** %239, i64 4, !dbg !2354
  %241 = load i8*, i8** %240, align 8, !dbg !2354
  %242 = load i8**, i8*** %11, align 8, !dbg !2355
  %243 = getelementptr inbounds i8*, i8** %242, i64 5, !dbg !2355
  %244 = load i8*, i8** %243, align 8, !dbg !2355
  %245 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %225, i8* %226, i8* %229, i8* %232, i8* %235, i8* %238, i8* %241, i8* %244), !dbg !2356
  %246 = load i32, i32* @x.25
  %247 = load i32, i32* @y.26
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %401, !dbg !2357

254:                                              ; preds = %originalBBpart28
  %255 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2358
  %256 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.75, i64 0, i64 0)) #10, !dbg !2359
  %257 = load i8**, i8*** %11, align 8, !dbg !2360
  %258 = getelementptr inbounds i8*, i8** %257, i64 0, !dbg !2360
  %259 = load i8*, i8** %258, align 8, !dbg !2360
  %260 = load i8**, i8*** %11, align 8, !dbg !2361
  %261 = getelementptr inbounds i8*, i8** %260, i64 1, !dbg !2361
  %262 = load i8*, i8** %261, align 8, !dbg !2361
  %263 = load i8**, i8*** %11, align 8, !dbg !2362
  %264 = getelementptr inbounds i8*, i8** %263, i64 2, !dbg !2362
  %265 = load i8*, i8** %264, align 8, !dbg !2362
  %266 = load i8**, i8*** %11, align 8, !dbg !2363
  %267 = getelementptr inbounds i8*, i8** %266, i64 3, !dbg !2363
  %268 = load i8*, i8** %267, align 8, !dbg !2363
  %269 = load i8**, i8*** %11, align 8, !dbg !2364
  %270 = getelementptr inbounds i8*, i8** %269, i64 4, !dbg !2364
  %271 = load i8*, i8** %270, align 8, !dbg !2364
  %272 = load i8**, i8*** %11, align 8, !dbg !2365
  %273 = getelementptr inbounds i8*, i8** %272, i64 5, !dbg !2365
  %274 = load i8*, i8** %273, align 8, !dbg !2365
  %275 = load i8**, i8*** %11, align 8, !dbg !2366
  %276 = getelementptr inbounds i8*, i8** %275, i64 6, !dbg !2366
  %277 = load i8*, i8** %276, align 8, !dbg !2366
  %278 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %255, i8* %256, i8* %259, i8* %262, i8* %265, i8* %268, i8* %271, i8* %274, i8* %277), !dbg !2367
  br label %401, !dbg !2368

279:                                              ; preds = %originalBBpart28
  %280 = load i32, i32* @x.25
  %281 = load i32, i32* @y.26
  %282 = sub i32 %280, 1
  %283 = mul i32 %280, %282
  %284 = urem i32 %283, 2
  %285 = icmp eq i32 %284, 0
  %286 = icmp slt i32 %281, 10
  %287 = or i1 %285, %286
  br i1 %287, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %279, %originalBB30alteredBB
  %288 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2369
  %289 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.76, i64 0, i64 0)) #10, !dbg !2370
  %290 = load i8**, i8*** %11, align 8, !dbg !2371
  %291 = getelementptr inbounds i8*, i8** %290, i64 0, !dbg !2371
  %292 = load i8*, i8** %291, align 8, !dbg !2371
  %293 = load i8**, i8*** %11, align 8, !dbg !2372
  %294 = getelementptr inbounds i8*, i8** %293, i64 1, !dbg !2372
  %295 = load i8*, i8** %294, align 8, !dbg !2372
  %296 = load i8**, i8*** %11, align 8, !dbg !2373
  %297 = getelementptr inbounds i8*, i8** %296, i64 2, !dbg !2373
  %298 = load i8*, i8** %297, align 8, !dbg !2373
  %299 = load i8**, i8*** %11, align 8, !dbg !2374
  %300 = getelementptr inbounds i8*, i8** %299, i64 3, !dbg !2374
  %301 = load i8*, i8** %300, align 8, !dbg !2374
  %302 = load i8**, i8*** %11, align 8, !dbg !2375
  %303 = getelementptr inbounds i8*, i8** %302, i64 4, !dbg !2375
  %304 = load i8*, i8** %303, align 8, !dbg !2375
  %305 = load i8**, i8*** %11, align 8, !dbg !2376
  %306 = getelementptr inbounds i8*, i8** %305, i64 5, !dbg !2376
  %307 = load i8*, i8** %306, align 8, !dbg !2376
  %308 = load i8**, i8*** %11, align 8, !dbg !2377
  %309 = getelementptr inbounds i8*, i8** %308, i64 6, !dbg !2377
  %310 = load i8*, i8** %309, align 8, !dbg !2377
  %311 = load i8**, i8*** %11, align 8, !dbg !2378
  %312 = getelementptr inbounds i8*, i8** %311, i64 7, !dbg !2378
  %313 = load i8*, i8** %312, align 8, !dbg !2378
  %314 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %288, i8* %289, i8* %292, i8* %295, i8* %298, i8* %301, i8* %304, i8* %307, i8* %310, i8* %313), !dbg !2379
  %315 = load i32, i32* @x.25
  %316 = load i32, i32* @y.26
  %317 = sub i32 %315, 1
  %318 = mul i32 %315, %317
  %319 = urem i32 %318, 2
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %320, %321
  br i1 %322, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %401, !dbg !2380

323:                                              ; preds = %originalBBpart28
  %324 = load i32, i32* @x.25
  %325 = load i32, i32* @y.26
  %326 = sub i32 %324, 1
  %327 = mul i32 %324, %326
  %328 = urem i32 %327, 2
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %329, %330
  br i1 %331, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %323, %originalBB34alteredBB
  %332 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2381
  %333 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.77, i64 0, i64 0)) #10, !dbg !2382
  %334 = load i8**, i8*** %11, align 8, !dbg !2383
  %335 = getelementptr inbounds i8*, i8** %334, i64 0, !dbg !2383
  %336 = load i8*, i8** %335, align 8, !dbg !2383
  %337 = load i8**, i8*** %11, align 8, !dbg !2384
  %338 = getelementptr inbounds i8*, i8** %337, i64 1, !dbg !2384
  %339 = load i8*, i8** %338, align 8, !dbg !2384
  %340 = load i8**, i8*** %11, align 8, !dbg !2385
  %341 = getelementptr inbounds i8*, i8** %340, i64 2, !dbg !2385
  %342 = load i8*, i8** %341, align 8, !dbg !2385
  %343 = load i8**, i8*** %11, align 8, !dbg !2386
  %344 = getelementptr inbounds i8*, i8** %343, i64 3, !dbg !2386
  %345 = load i8*, i8** %344, align 8, !dbg !2386
  %346 = load i8**, i8*** %11, align 8, !dbg !2387
  %347 = getelementptr inbounds i8*, i8** %346, i64 4, !dbg !2387
  %348 = load i8*, i8** %347, align 8, !dbg !2387
  %349 = load i8**, i8*** %11, align 8, !dbg !2388
  %350 = getelementptr inbounds i8*, i8** %349, i64 5, !dbg !2388
  %351 = load i8*, i8** %350, align 8, !dbg !2388
  %352 = load i8**, i8*** %11, align 8, !dbg !2389
  %353 = getelementptr inbounds i8*, i8** %352, i64 6, !dbg !2389
  %354 = load i8*, i8** %353, align 8, !dbg !2389
  %355 = load i8**, i8*** %11, align 8, !dbg !2390
  %356 = getelementptr inbounds i8*, i8** %355, i64 7, !dbg !2390
  %357 = load i8*, i8** %356, align 8, !dbg !2390
  %358 = load i8**, i8*** %11, align 8, !dbg !2391
  %359 = getelementptr inbounds i8*, i8** %358, i64 8, !dbg !2391
  %360 = load i8*, i8** %359, align 8, !dbg !2391
  %361 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %332, i8* %333, i8* %336, i8* %339, i8* %342, i8* %345, i8* %348, i8* %351, i8* %354, i8* %357, i8* %360), !dbg !2392
  %362 = load i32, i32* @x.25
  %363 = load i32, i32* @y.26
  %364 = sub i32 %362, 1
  %365 = mul i32 %362, %364
  %366 = urem i32 %365, 2
  %367 = icmp eq i32 %366, 0
  %368 = icmp slt i32 %363, 10
  %369 = or i1 %367, %368
  br i1 %369, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %401, !dbg !2393

370:                                              ; preds = %originalBBpart28
  %371 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2394
  %372 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.78, i64 0, i64 0)) #10, !dbg !2395
  %373 = load i8**, i8*** %11, align 8, !dbg !2396
  %374 = getelementptr inbounds i8*, i8** %373, i64 0, !dbg !2396
  %375 = load i8*, i8** %374, align 8, !dbg !2396
  %376 = load i8**, i8*** %11, align 8, !dbg !2397
  %377 = getelementptr inbounds i8*, i8** %376, i64 1, !dbg !2397
  %378 = load i8*, i8** %377, align 8, !dbg !2397
  %379 = load i8**, i8*** %11, align 8, !dbg !2398
  %380 = getelementptr inbounds i8*, i8** %379, i64 2, !dbg !2398
  %381 = load i8*, i8** %380, align 8, !dbg !2398
  %382 = load i8**, i8*** %11, align 8, !dbg !2399
  %383 = getelementptr inbounds i8*, i8** %382, i64 3, !dbg !2399
  %384 = load i8*, i8** %383, align 8, !dbg !2399
  %385 = load i8**, i8*** %11, align 8, !dbg !2400
  %386 = getelementptr inbounds i8*, i8** %385, i64 4, !dbg !2400
  %387 = load i8*, i8** %386, align 8, !dbg !2400
  %388 = load i8**, i8*** %11, align 8, !dbg !2401
  %389 = getelementptr inbounds i8*, i8** %388, i64 5, !dbg !2401
  %390 = load i8*, i8** %389, align 8, !dbg !2401
  %391 = load i8**, i8*** %11, align 8, !dbg !2402
  %392 = getelementptr inbounds i8*, i8** %391, i64 6, !dbg !2402
  %393 = load i8*, i8** %392, align 8, !dbg !2402
  %394 = load i8**, i8*** %11, align 8, !dbg !2403
  %395 = getelementptr inbounds i8*, i8** %394, i64 7, !dbg !2403
  %396 = load i8*, i8** %395, align 8, !dbg !2403
  %397 = load i8**, i8*** %11, align 8, !dbg !2404
  %398 = getelementptr inbounds i8*, i8** %397, i64 8, !dbg !2404
  %399 = load i8*, i8** %398, align 8, !dbg !2404
  %400 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %371, i8* %372, i8* %375, i8* %378, i8* %381, i8* %384, i8* %387, i8* %390, i8* %393, i8* %396, i8* %399), !dbg !2405
  br label %401, !dbg !2406

401:                                              ; preds = %370, %originalBBpart236, %originalBBpart232, %254, %originalBBpart228, %197, %181, %originalBBpart224, %originalBBpart220, %originalBBpart216, %originalBBpart212
  %402 = load i32, i32* @x.25
  %403 = load i32, i32* @y.26
  %404 = sub i32 %402, 1
  %405 = mul i32 %402, %404
  %406 = urem i32 %405, 2
  %407 = icmp eq i32 %406, 0
  %408 = icmp slt i32 %403, 10
  %409 = or i1 %407, %408
  br i1 %409, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %401, %originalBB38alteredBB
  %410 = load i32, i32* @x.25
  %411 = load i32, i32* @y.26
  %412 = sub i32 %410, 1
  %413 = mul i32 %410, %412
  %414 = urem i32 %413, 2
  %415 = icmp eq i32 %414, 0
  %416 = icmp slt i32 %411, 10
  %417 = or i1 %415, %416
  br i1 %417, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  ret void, !dbg !2407

originalBBalteredBB:                              ; preds = %originalBB, %15
  %418 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2292
  %419 = load i8*, i8** %8, align 8, !dbg !2293
  %420 = load i8*, i8** %9, align 8, !dbg !2294
  %421 = load i8*, i8** %10, align 8, !dbg !2295
  %422 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %418, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.63, i64 0, i64 0), i8* %419, i8* %420, i8* %421), !dbg !2296
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %423 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2297
  %424 = load i8*, i8** %9, align 8, !dbg !2298
  %425 = load i8*, i8** %10, align 8, !dbg !2299
  %426 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %423, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.64, i64 0, i64 0), i8* %424, i8* %425), !dbg !2300
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %58
  %427 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2301
  %428 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.65, i64 0, i64 0)) #10, !dbg !2302
  %429 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %427, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %428, i32 2020), !dbg !2303
  %430 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2304
  %431 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.66, i64 0, i64 0), %struct._IO_FILE* %430), !dbg !2304
  %432 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2305
  %433 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.67, i64 0, i64 0)) #10, !dbg !2306
  %434 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %432, i8* %433, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.68, i64 0, i64 0)), !dbg !2307
  %435 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2308
  %436 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.66, i64 0, i64 0), %struct._IO_FILE* %435), !dbg !2308
  %437 = load i64, i64* %12, align 8, !dbg !2309
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %86
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %103
  %438 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2313
  %439 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.69, i64 0, i64 0)) #10, !dbg !2314
  %440 = load i8**, i8*** %11, align 8, !dbg !2315
  %441 = getelementptr inbounds i8*, i8** %440, i64 0, !dbg !2315
  %442 = load i8*, i8** %441, align 8, !dbg !2315
  %443 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %438, i8* %439, i8* %442), !dbg !2316
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %126
  %444 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2318
  %445 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.70, i64 0, i64 0)) #10, !dbg !2319
  %446 = load i8**, i8*** %11, align 8, !dbg !2320
  %447 = getelementptr inbounds i8*, i8** %446, i64 0, !dbg !2320
  %448 = load i8*, i8** %447, align 8, !dbg !2320
  %449 = load i8**, i8*** %11, align 8, !dbg !2321
  %450 = getelementptr inbounds i8*, i8** %449, i64 1, !dbg !2321
  %451 = load i8*, i8** %450, align 8, !dbg !2321
  %452 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %444, i8* %445, i8* %448, i8* %451), !dbg !2322
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %152
  %453 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2324
  %454 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.71, i64 0, i64 0)) #10, !dbg !2325
  %455 = load i8**, i8*** %11, align 8, !dbg !2326
  %456 = getelementptr inbounds i8*, i8** %455, i64 0, !dbg !2326
  %457 = load i8*, i8** %456, align 8, !dbg !2326
  %458 = load i8**, i8*** %11, align 8, !dbg !2327
  %459 = getelementptr inbounds i8*, i8** %458, i64 1, !dbg !2327
  %460 = load i8*, i8** %459, align 8, !dbg !2327
  %461 = load i8**, i8*** %11, align 8, !dbg !2328
  %462 = getelementptr inbounds i8*, i8** %461, i64 2, !dbg !2328
  %463 = load i8*, i8** %462, align 8, !dbg !2328
  %464 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %453, i8* %454, i8* %457, i8* %460, i8* %463), !dbg !2329
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %216
  %465 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2348
  %466 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.74, i64 0, i64 0)) #10, !dbg !2349
  %467 = load i8**, i8*** %11, align 8, !dbg !2350
  %468 = getelementptr inbounds i8*, i8** %467, i64 0, !dbg !2350
  %469 = load i8*, i8** %468, align 8, !dbg !2350
  %470 = load i8**, i8*** %11, align 8, !dbg !2351
  %471 = getelementptr inbounds i8*, i8** %470, i64 1, !dbg !2351
  %472 = load i8*, i8** %471, align 8, !dbg !2351
  %473 = load i8**, i8*** %11, align 8, !dbg !2352
  %474 = getelementptr inbounds i8*, i8** %473, i64 2, !dbg !2352
  %475 = load i8*, i8** %474, align 8, !dbg !2352
  %476 = load i8**, i8*** %11, align 8, !dbg !2353
  %477 = getelementptr inbounds i8*, i8** %476, i64 3, !dbg !2353
  %478 = load i8*, i8** %477, align 8, !dbg !2353
  %479 = load i8**, i8*** %11, align 8, !dbg !2354
  %480 = getelementptr inbounds i8*, i8** %479, i64 4, !dbg !2354
  %481 = load i8*, i8** %480, align 8, !dbg !2354
  %482 = load i8**, i8*** %11, align 8, !dbg !2355
  %483 = getelementptr inbounds i8*, i8** %482, i64 5, !dbg !2355
  %484 = load i8*, i8** %483, align 8, !dbg !2355
  %485 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %465, i8* %466, i8* %469, i8* %472, i8* %475, i8* %478, i8* %481, i8* %484), !dbg !2356
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %279
  %486 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2369
  %487 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.76, i64 0, i64 0)) #10, !dbg !2370
  %488 = load i8**, i8*** %11, align 8, !dbg !2371
  %489 = getelementptr inbounds i8*, i8** %488, i64 0, !dbg !2371
  %490 = load i8*, i8** %489, align 8, !dbg !2371
  %491 = load i8**, i8*** %11, align 8, !dbg !2372
  %492 = getelementptr inbounds i8*, i8** %491, i64 1, !dbg !2372
  %493 = load i8*, i8** %492, align 8, !dbg !2372
  %494 = load i8**, i8*** %11, align 8, !dbg !2373
  %495 = getelementptr inbounds i8*, i8** %494, i64 2, !dbg !2373
  %496 = load i8*, i8** %495, align 8, !dbg !2373
  %497 = load i8**, i8*** %11, align 8, !dbg !2374
  %498 = getelementptr inbounds i8*, i8** %497, i64 3, !dbg !2374
  %499 = load i8*, i8** %498, align 8, !dbg !2374
  %500 = load i8**, i8*** %11, align 8, !dbg !2375
  %501 = getelementptr inbounds i8*, i8** %500, i64 4, !dbg !2375
  %502 = load i8*, i8** %501, align 8, !dbg !2375
  %503 = load i8**, i8*** %11, align 8, !dbg !2376
  %504 = getelementptr inbounds i8*, i8** %503, i64 5, !dbg !2376
  %505 = load i8*, i8** %504, align 8, !dbg !2376
  %506 = load i8**, i8*** %11, align 8, !dbg !2377
  %507 = getelementptr inbounds i8*, i8** %506, i64 6, !dbg !2377
  %508 = load i8*, i8** %507, align 8, !dbg !2377
  %509 = load i8**, i8*** %11, align 8, !dbg !2378
  %510 = getelementptr inbounds i8*, i8** %509, i64 7, !dbg !2378
  %511 = load i8*, i8** %510, align 8, !dbg !2378
  %512 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %486, i8* %487, i8* %490, i8* %493, i8* %496, i8* %499, i8* %502, i8* %505, i8* %508, i8* %511), !dbg !2379
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %323
  %513 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2381
  %514 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.77, i64 0, i64 0)) #10, !dbg !2382
  %515 = load i8**, i8*** %11, align 8, !dbg !2383
  %516 = getelementptr inbounds i8*, i8** %515, i64 0, !dbg !2383
  %517 = load i8*, i8** %516, align 8, !dbg !2383
  %518 = load i8**, i8*** %11, align 8, !dbg !2384
  %519 = getelementptr inbounds i8*, i8** %518, i64 1, !dbg !2384
  %520 = load i8*, i8** %519, align 8, !dbg !2384
  %521 = load i8**, i8*** %11, align 8, !dbg !2385
  %522 = getelementptr inbounds i8*, i8** %521, i64 2, !dbg !2385
  %523 = load i8*, i8** %522, align 8, !dbg !2385
  %524 = load i8**, i8*** %11, align 8, !dbg !2386
  %525 = getelementptr inbounds i8*, i8** %524, i64 3, !dbg !2386
  %526 = load i8*, i8** %525, align 8, !dbg !2386
  %527 = load i8**, i8*** %11, align 8, !dbg !2387
  %528 = getelementptr inbounds i8*, i8** %527, i64 4, !dbg !2387
  %529 = load i8*, i8** %528, align 8, !dbg !2387
  %530 = load i8**, i8*** %11, align 8, !dbg !2388
  %531 = getelementptr inbounds i8*, i8** %530, i64 5, !dbg !2388
  %532 = load i8*, i8** %531, align 8, !dbg !2388
  %533 = load i8**, i8*** %11, align 8, !dbg !2389
  %534 = getelementptr inbounds i8*, i8** %533, i64 6, !dbg !2389
  %535 = load i8*, i8** %534, align 8, !dbg !2389
  %536 = load i8**, i8*** %11, align 8, !dbg !2390
  %537 = getelementptr inbounds i8*, i8** %536, i64 7, !dbg !2390
  %538 = load i8*, i8** %537, align 8, !dbg !2390
  %539 = load i8**, i8*** %11, align 8, !dbg !2391
  %540 = getelementptr inbounds i8*, i8** %539, i64 8, !dbg !2391
  %541 = load i8*, i8** %540, align 8, !dbg !2391
  %542 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %513, i8* %514, i8* %517, i8* %520, i8* %523, i8* %526, i8* %529, i8* %532, i8* %535, i8* %538, i8* %541), !dbg !2392
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %401
  br label %originalBB38
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_va(%struct._IO_FILE*, i8*, i8*, i8*, %struct.__va_list_tag*) #5 !dbg !2408 {
  %6 = load i32, i32* @x.27
  %7 = load i32, i32* @y.28
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = alloca %struct._IO_FILE*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca %struct.__va_list_tag*, align 8
  %19 = alloca i64, align 8
  %20 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %14, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %14, metadata !2418, metadata !DIExpression()), !dbg !2419
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2420, metadata !DIExpression()), !dbg !2421
  store i8* %2, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !2422, metadata !DIExpression()), !dbg !2423
  store i8* %3, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !2424, metadata !DIExpression()), !dbg !2425
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %18, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %18, metadata !2426, metadata !DIExpression()), !dbg !2427
  call void @llvm.dbg.declare(metadata i64* %19, metadata !2428, metadata !DIExpression()), !dbg !2429
  call void @llvm.dbg.declare(metadata [10 x i8*]* %20, metadata !2430, metadata !DIExpression()), !dbg !2432
  store i64 0, i64* %19, align 8, !dbg !2433
  %21 = load i32, i32* @x.27
  %22 = load i32, i32* @y.28
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %29, !dbg !2435

29:                                               ; preds = %originalBBpart241, %originalBBpart2
  %30 = load i32, i32* @x.27
  %31 = load i32, i32* @y.28
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i64, i64* %19, align 8, !dbg !2436
  %39 = icmp ult i64 %38, 10, !dbg !2438
  %40 = load i32, i32* @x.27
  %41 = load i32, i32* @y.28
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %39, label %48, label %118, !dbg !2439

48:                                               ; preds = %originalBBpart24
  %49 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !2440
  %50 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %49, i32 0, i32 0, !dbg !2440
  %51 = load i32, i32* %50, align 8, !dbg !2440
  %52 = icmp ule i32 %51, 40, !dbg !2440
  br i1 %52, label %53, label %75, !dbg !2440

53:                                               ; preds = %48
  %54 = load i32, i32* @x.27
  %55 = load i32, i32* @y.28
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %49, i32 0, i32 3, !dbg !2440
  %63 = load i8*, i8** %62, align 8, !dbg !2440
  %64 = getelementptr i8, i8* %63, i32 %51, !dbg !2440
  %65 = bitcast i8* %64 to i8**, !dbg !2440
  %66 = add i32 %51, 8, !dbg !2440
  store i32 %66, i32* %50, align 8, !dbg !2440
  %67 = load i32, i32* @x.27
  %68 = load i32, i32* @y.28
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart216, label %originalBB6alteredBB

originalBBpart216:                                ; preds = %originalBB6
  br label %96, !dbg !2440

75:                                               ; preds = %48
  %76 = load i32, i32* @x.27
  %77 = load i32, i32* @y.28
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %75, %originalBB18alteredBB
  %84 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %49, i32 0, i32 2, !dbg !2440
  %85 = load i8*, i8** %84, align 8, !dbg !2440
  %86 = bitcast i8* %85 to i8**, !dbg !2440
  %87 = getelementptr i8, i8* %85, i32 8, !dbg !2440
  store i8* %87, i8** %84, align 8, !dbg !2440
  %88 = load i32, i32* @x.27
  %89 = load i32, i32* @y.28
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %96, !dbg !2440

96:                                               ; preds = %originalBBpart220, %originalBBpart216
  %97 = phi i8** [ %65, %originalBBpart216 ], [ %86, %originalBBpart220 ], !dbg !2440
  %98 = load i32, i32* @x.27
  %99 = load i32, i32* @y.28
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %96, %originalBB22alteredBB
  %106 = load i8*, i8** %97, align 8, !dbg !2440
  %107 = load i64, i64* %19, align 8, !dbg !2441
  %108 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %107, !dbg !2442
  store i8* %106, i8** %108, align 8, !dbg !2443
  %109 = icmp ne i8* %106, null, !dbg !2444
  %110 = load i32, i32* @x.27
  %111 = load i32, i32* @y.28
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %118

118:                                              ; preds = %originalBBpart224, %originalBBpart24
  %119 = phi i1 [ false, %originalBBpart24 ], [ %109, %originalBBpart224 ], !dbg !2445
  br i1 %119, label %120, label %156, !dbg !2446

120:                                              ; preds = %118
  %121 = load i32, i32* @x.27
  %122 = load i32, i32* @y.28
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %120, %originalBB26alteredBB
  %129 = load i32, i32* @x.27
  %130 = load i32, i32* @y.28
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %137, !dbg !2446

137:                                              ; preds = %originalBBpart228
  %138 = load i32, i32* @x.27
  %139 = load i32, i32* @y.28
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %137, %originalBB30alteredBB
  %146 = load i64, i64* %19, align 8, !dbg !2447
  %147 = add i64 %146, 1, !dbg !2447
  store i64 %147, i64* %19, align 8, !dbg !2447
  %148 = load i32, i32* @x.27
  %149 = load i32, i32* @y.28
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBBpart241, label %originalBB30alteredBB

originalBBpart241:                                ; preds = %originalBB30
  br label %29, !dbg !2448, !llvm.loop !2449

156:                                              ; preds = %118
  %157 = load i32, i32* @x.27
  %158 = load i32, i32* @y.28
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %156, %originalBB43alteredBB
  %165 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !2451
  %166 = load i8*, i8** %15, align 8, !dbg !2452
  %167 = load i8*, i8** %16, align 8, !dbg !2453
  %168 = load i8*, i8** %17, align 8, !dbg !2454
  %169 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !2455
  %170 = load i64, i64* %19, align 8, !dbg !2456
  call void @version_etc_arn(%struct._IO_FILE* %165, i8* %166, i8* %167, i8* %168, i8** %169, i64 %170), !dbg !2457
  %171 = load i32, i32* @x.27
  %172 = load i32, i32* @y.28
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBBpart245, label %originalBB43alteredBB

originalBBpart245:                                ; preds = %originalBB43
  ret void, !dbg !2458

originalBBalteredBB:                              ; preds = %originalBB, %5
  %179 = alloca %struct._IO_FILE*, align 8
  %180 = alloca i8*, align 8
  %181 = alloca i8*, align 8
  %182 = alloca i8*, align 8
  %183 = alloca %struct.__va_list_tag*, align 8
  %184 = alloca i64, align 8
  %185 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %179, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %179, metadata !2459, metadata !DIExpression()), !dbg !2419
  store i8* %1, i8** %180, align 8
  call void @llvm.dbg.declare(metadata i8** %180, metadata !2505, metadata !DIExpression()), !dbg !2421
  store i8* %2, i8** %181, align 8
  call void @llvm.dbg.declare(metadata i8** %181, metadata !2506, metadata !DIExpression()), !dbg !2423
  store i8* %3, i8** %182, align 8
  call void @llvm.dbg.declare(metadata i8** %182, metadata !2507, metadata !DIExpression()), !dbg !2425
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %183, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %183, metadata !2508, metadata !DIExpression()), !dbg !2427
  call void @llvm.dbg.declare(metadata i64* %184, metadata !2509, metadata !DIExpression()), !dbg !2429
  call void @llvm.dbg.declare(metadata [10 x i8*]* %185, metadata !2510, metadata !DIExpression()), !dbg !2432
  store i64 0, i64* %184, align 8, !dbg !2433
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %186 = load i64, i64* %19, align 8, !dbg !2436
  %187 = icmp ult i64 %186, 10, !dbg !2438
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  %188 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %49, i32 0, i32 3, !dbg !2440
  %189 = load i8*, i8** %188, align 8, !dbg !2440
  %190 = getelementptr i8, i8* %189, i32 %51, !dbg !2440
  %191 = bitcast i8* %190 to i8**, !dbg !2440
  %_ = shl i32 %51, 8
  %_7 = sub i32 %51, 8
  %gen = mul i32 %_7, 8
  %_8 = sub i32 0, %51
  %gen9 = add i32 %_8, 8
  %_10 = sub i32 %51, 8
  %gen11 = mul i32 %_10, 8
  %_12 = shl i32 %51, 8
  %_13 = sub i32 0, %51
  %gen14 = add i32 %_13, 8
  %192 = add i32 %51, 8, !dbg !2440
  store i32 %192, i32* %50, align 8, !dbg !2440
  br label %originalBB6

originalBB18alteredBB:                            ; preds = %originalBB18, %75
  %193 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %49, i32 0, i32 2, !dbg !2440
  %194 = load i8*, i8** %193, align 8, !dbg !2440
  %195 = bitcast i8* %194 to i8**, !dbg !2440
  %196 = getelementptr i8, i8* %194, i32 8, !dbg !2440
  store i8* %196, i8** %193, align 8, !dbg !2440
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %96
  %197 = load i8*, i8** %97, align 8, !dbg !2440
  %198 = load i64, i64* %19, align 8, !dbg !2441
  %199 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %198, !dbg !2442
  store i8* %197, i8** %199, align 8, !dbg !2443
  %200 = icmp ne i8* %197, null, !dbg !2444
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %120
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %137
  %201 = load i64, i64* %19, align 8, !dbg !2447
  %_31 = sub i64 %201, 1
  %gen32 = mul i64 %_31, 1
  %_33 = shl i64 %201, 1
  %_34 = shl i64 %201, 1
  %_35 = shl i64 %201, 1
  %_36 = sub i64 0, %201
  %gen37 = add i64 %_36, 1
  %_38 = sub i64 %201, 1
  %gen39 = mul i64 %_38, 1
  %202 = add i64 %201, 1, !dbg !2447
  store i64 %202, i64* %19, align 8, !dbg !2447
  br label %originalBB30

originalBB43alteredBB:                            ; preds = %originalBB43, %156
  %203 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !2451
  %204 = load i8*, i8** %15, align 8, !dbg !2452
  %205 = load i8*, i8** %16, align 8, !dbg !2453
  %206 = load i8*, i8** %17, align 8, !dbg !2454
  %207 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !2455
  %208 = load i64, i64* %19, align 8, !dbg !2456
  call void @version_etc_arn(%struct._IO_FILE* %203, i8* %204, i8* %205, i8* %206, i8** %207, i64 %208), !dbg !2457
  br label %originalBB43
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc(%struct._IO_FILE*, i8*, i8*, i8*, ...) #5 !dbg !2511 {
  %5 = load i32, i32* @x.29
  %6 = load i32, i32* @y.30
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !2514, metadata !DIExpression()), !dbg !2515
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2516, metadata !DIExpression()), !dbg !2517
  store i8* %2, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2518, metadata !DIExpression()), !dbg !2519
  store i8* %3, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !2520, metadata !DIExpression()), !dbg !2521
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %17, metadata !2522, metadata !DIExpression()), !dbg !2529
  %18 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !2530
  %19 = bitcast %struct.__va_list_tag* %18 to i8*, !dbg !2530
  call void @llvm.va_start(i8* %19), !dbg !2530
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !2531
  %21 = load i8*, i8** %14, align 8, !dbg !2532
  %22 = load i8*, i8** %15, align 8, !dbg !2533
  %23 = load i8*, i8** %16, align 8, !dbg !2534
  %24 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !2535
  call void @version_etc_va(%struct._IO_FILE* %20, i8* %21, i8* %22, i8* %23, %struct.__va_list_tag* %24), !dbg !2536
  %25 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !2537
  %26 = bitcast %struct.__va_list_tag* %25 to i8*, !dbg !2537
  call void @llvm.va_end(i8* %26), !dbg !2537
  %27 = load i32, i32* @x.29
  %28 = load i32, i32* @y.30
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !2538

originalBBalteredBB:                              ; preds = %originalBB, %4
  %35 = alloca %struct._IO_FILE*, align 8
  %36 = alloca i8*, align 8
  %37 = alloca i8*, align 8
  %38 = alloca i8*, align 8
  %39 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %35, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %35, metadata !2539, metadata !DIExpression()), !dbg !2515
  store i8* %1, i8** %36, align 8
  call void @llvm.dbg.declare(metadata i8** %36, metadata !2578, metadata !DIExpression()), !dbg !2517
  store i8* %2, i8** %37, align 8
  call void @llvm.dbg.declare(metadata i8** %37, metadata !2579, metadata !DIExpression()), !dbg !2519
  store i8* %3, i8** %38, align 8
  call void @llvm.dbg.declare(metadata i8** %38, metadata !2580, metadata !DIExpression()), !dbg !2521
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %39, metadata !2581, metadata !DIExpression()), !dbg !2529
  %40 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !2530
  %41 = bitcast %struct.__va_list_tag* %40 to i8*, !dbg !2530
  call void @llvm.va_start(i8* %41), !dbg !2530
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %35, align 8, !dbg !2531
  %43 = load i8*, i8** %36, align 8, !dbg !2532
  %44 = load i8*, i8** %37, align 8, !dbg !2533
  %45 = load i8*, i8** %38, align 8, !dbg !2534
  %46 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !2535
  call void @version_etc_va(%struct._IO_FILE* %42, i8* %43, i8* %44, i8* %45, %struct.__va_list_tag* %46), !dbg !2536
  %47 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !2537
  %48 = bitcast %struct.__va_list_tag* %47 to i8*, !dbg !2537
  call void @llvm.va_end(i8* %48), !dbg !2537
  br label %originalBB
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xmalloc(i64) #5 !dbg !2592 {
  %2 = load i32, i32* @x.31
  %3 = load i32, i32* @y.32
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !2596, metadata !DIExpression()), !dbg !2597
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2598, metadata !DIExpression()), !dbg !2599
  %12 = load i64, i64* %10, align 8, !dbg !2600
  %13 = call noalias i8* @malloc(i64 %12) #10, !dbg !2601
  store i8* %13, i8** %11, align 8, !dbg !2599
  %14 = load i8*, i8** %11, align 8, !dbg !2602
  %15 = icmp ne i8* %14, null, !dbg !2602
  %16 = load i32, i32* @x.31
  %17 = load i32, i32* @y.32
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %60, label %24, !dbg !2604

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.31
  %26 = load i32, i32* @y.32
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i64, i64* %10, align 8, !dbg !2605
  %34 = icmp ne i64 %33, 0, !dbg !2606
  %35 = load i32, i32* @x.31
  %36 = load i32, i32* @y.32
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %60, !dbg !2607

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x.31
  %45 = load i32, i32* @y.32
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  call void @xalloc_die() #14, !dbg !2608
  %52 = load i32, i32* @x.31
  %53 = load i32, i32* @y.32
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !2608

60:                                               ; preds = %originalBBpart24, %originalBBpart2
  %61 = load i32, i32* @x.31
  %62 = load i32, i32* @y.32
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  %69 = load i8*, i8** %11, align 8, !dbg !2609
  %70 = load i32, i32* @x.31
  %71 = load i32, i32* @y.32
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %69, !dbg !2610

originalBBalteredBB:                              ; preds = %originalBB, %1
  %78 = alloca i64, align 8
  %79 = alloca i8*, align 8
  store i64 %0, i64* %78, align 8
  call void @llvm.dbg.declare(metadata i64* %78, metadata !2611, metadata !DIExpression()), !dbg !2597
  call void @llvm.dbg.declare(metadata i8** %79, metadata !2614, metadata !DIExpression()), !dbg !2599
  %80 = load i64, i64* %78, align 8, !dbg !2600
  %81 = call noalias i8* @malloc(i64 %80) #10, !dbg !2601
  store i8* %81, i8** %79, align 8, !dbg !2599
  %82 = load i8*, i8** %79, align 8, !dbg !2602
  %83 = icmp ne i8* %82, null, !dbg !2602
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %84 = load i64, i64* %10, align 8, !dbg !2605
  %85 = icmp ne i64 %84, 0, !dbg !2606
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  call void @xalloc_die() #14, !dbg !2608
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  %86 = load i8*, i8** %11, align 8, !dbg !2609
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xrealloc(i8*, i64) #5 !dbg !2615 {
  %3 = load i32, i32* @x.33
  %4 = load i32, i32* @y.34
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2618, metadata !DIExpression()), !dbg !2619
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !2620, metadata !DIExpression()), !dbg !2621
  %14 = load i64, i64* %13, align 8, !dbg !2622
  %15 = icmp ne i64 %14, 0, !dbg !2622
  %16 = load i32, i32* @x.33
  %17 = load i32, i32* @y.34
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %45, label %24, !dbg !2624

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.33
  %26 = load i32, i32* @y.34
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i8*, i8** %12, align 8, !dbg !2625
  %34 = icmp ne i8* %33, null, !dbg !2625
  %35 = load i32, i32* @x.33
  %36 = load i32, i32* @y.34
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %45, !dbg !2626

43:                                               ; preds = %originalBBpart24
  %44 = load i8*, i8** %12, align 8, !dbg !2627
  call void @free(i8* %44) #10, !dbg !2629
  store i8* null, i8** %11, align 8, !dbg !2630
  br label %105, !dbg !2630

45:                                               ; preds = %originalBBpart24, %originalBBpart2
  %46 = load i32, i32* @x.33
  %47 = load i32, i32* @y.34
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %45, %originalBB6alteredBB
  %54 = load i8*, i8** %12, align 8, !dbg !2631
  %55 = load i64, i64* %13, align 8, !dbg !2632
  %56 = call i8* @realloc(i8* %54, i64 %55) #10, !dbg !2633
  store i8* %56, i8** %12, align 8, !dbg !2634
  %57 = load i8*, i8** %12, align 8, !dbg !2635
  %58 = icmp ne i8* %57, null, !dbg !2635
  %59 = load i32, i32* @x.33
  %60 = load i32, i32* @y.34
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %58, label %103, label %67, !dbg !2637

67:                                               ; preds = %originalBBpart28
  %68 = load i32, i32* @x.33
  %69 = load i32, i32* @y.34
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %67, %originalBB10alteredBB
  %76 = load i64, i64* %13, align 8, !dbg !2638
  %77 = icmp ne i64 %76, 0, !dbg !2638
  %78 = load i32, i32* @x.33
  %79 = load i32, i32* @y.34
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %77, label %86, label %103, !dbg !2639

86:                                               ; preds = %originalBBpart212
  %87 = load i32, i32* @x.33
  %88 = load i32, i32* @y.34
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %86, %originalBB14alteredBB
  call void @xalloc_die() #14, !dbg !2640
  %95 = load i32, i32* @x.33
  %96 = load i32, i32* @y.34
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  unreachable, !dbg !2640

103:                                              ; preds = %originalBBpart212, %originalBBpart28
  %104 = load i8*, i8** %12, align 8, !dbg !2641
  store i8* %104, i8** %11, align 8, !dbg !2642
  br label %105, !dbg !2642

105:                                              ; preds = %103, %43
  %106 = load i8*, i8** %11, align 8, !dbg !2643
  ret i8* %106, !dbg !2643

originalBBalteredBB:                              ; preds = %originalBB, %2
  %107 = alloca i8*, align 8
  %108 = alloca i8*, align 8
  %109 = alloca i64, align 8
  store i8* %0, i8** %108, align 8
  call void @llvm.dbg.declare(metadata i8** %108, metadata !2644, metadata !DIExpression()), !dbg !2619
  store i64 %1, i64* %109, align 8
  call void @llvm.dbg.declare(metadata i64* %109, metadata !2647, metadata !DIExpression()), !dbg !2621
  %110 = load i64, i64* %109, align 8, !dbg !2622
  %111 = icmp ne i64 %110, 0, !dbg !2622
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %112 = load i8*, i8** %12, align 8, !dbg !2625
  %113 = icmp ne i8* %112, null, !dbg !2625
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %45
  %114 = load i8*, i8** %12, align 8, !dbg !2631
  %115 = load i64, i64* %13, align 8, !dbg !2632
  %116 = call i8* @realloc(i8* %114, i64 %115) #10, !dbg !2633
  store i8* %116, i8** %12, align 8, !dbg !2634
  %117 = load i8*, i8** %12, align 8, !dbg !2635
  %118 = icmp ne i8* %117, null, !dbg !2635
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %67
  %119 = load i64, i64* %13, align 8, !dbg !2638
  %120 = icmp ne i64 %119, 0, !dbg !2638
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %86
  call void @xalloc_die() #14, !dbg !2640
  br label %originalBB14
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xcharalloc(i64) #5 !dbg !2648 {
  %2 = load i32, i32* @x.35
  %3 = load i32, i32* @y.36
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !2652, metadata !DIExpression()), !dbg !2653
  %11 = load i64, i64* %10, align 8, !dbg !2654
  %12 = call noalias i8* @xmalloc(i64 %11), !dbg !2654
  %13 = load i32, i32* @x.35
  %14 = load i32, i32* @y.36
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !2655

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i64, align 8
  store i64 %0, i64* %21, align 8
  call void @llvm.dbg.declare(metadata i64* %21, metadata !2656, metadata !DIExpression()), !dbg !2653
  %22 = load i64, i64* %21, align 8, !dbg !2654
  %23 = call noalias i8* @xmalloc(i64 %22), !dbg !2654
  br label %originalBB
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @xalloc_die() #0 !dbg !2659 {
  %1 = load volatile i32, i32* @exit_failure, align 4, !dbg !2661
  %2 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.89, i64 0, i64 0)) #10, !dbg !2662
  call void (i32, i32, i8*, ...) @error(i32 %1, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.90, i64 0, i64 0), i8* %2), !dbg !2663
  call void @abort() #12, !dbg !2664
  unreachable, !dbg !2664
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @rpl_mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #5 !dbg !2665 {
  %5 = load i32, i32* @x.39
  %6 = load i32, i32* @y.40
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i64, align 8
  %14 = alloca i32*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i64, align 8
  %17 = alloca %struct.__mbstate_t*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i32, align 4
  %20 = alloca i8, align 1
  store i32* %0, i32** %14, align 8
  call void @llvm.dbg.declare(metadata i32** %14, metadata !2681, metadata !DIExpression()), !dbg !2682
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2683, metadata !DIExpression()), !dbg !2684
  store i64 %2, i64* %16, align 8
  call void @llvm.dbg.declare(metadata i64* %16, metadata !2685, metadata !DIExpression()), !dbg !2686
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %17, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %17, metadata !2687, metadata !DIExpression()), !dbg !2688
  call void @llvm.dbg.declare(metadata i64* %18, metadata !2689, metadata !DIExpression()), !dbg !2690
  call void @llvm.dbg.declare(metadata i32* %19, metadata !2691, metadata !DIExpression()), !dbg !2692
  %21 = load i32*, i32** %14, align 8, !dbg !2693
  %22 = icmp ne i32* %21, null, !dbg !2693
  %23 = load i32, i32* @x.39
  %24 = load i32, i32* @y.40
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %32, label %31, !dbg !2695

31:                                               ; preds = %originalBBpart2
  store i32* %19, i32** %14, align 8, !dbg !2696
  br label %32, !dbg !2697

32:                                               ; preds = %31, %originalBBpart2
  %33 = load i32, i32* @x.39
  %34 = load i32, i32* @y.40
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load i32*, i32** %14, align 8, !dbg !2698
  %42 = load i8*, i8** %15, align 8, !dbg !2699
  %43 = load i64, i64* %16, align 8, !dbg !2700
  %44 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !2701
  %45 = call i64 @mbrtowc(i32* %41, i8* %42, i64 %43, %struct.__mbstate_t* %44) #10, !dbg !2702
  store i64 %45, i64* %18, align 8, !dbg !2703
  %46 = load i64, i64* %18, align 8, !dbg !2704
  %47 = icmp ule i64 -2, %46, !dbg !2706
  %48 = load i32, i32* @x.39
  %49 = load i32, i32* @y.40
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %115, !dbg !2707

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.39
  %58 = load i32, i32* @y.40
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load i64, i64* %16, align 8, !dbg !2708
  %66 = icmp ne i64 %65, 0, !dbg !2709
  %67 = load i32, i32* @x.39
  %68 = load i32, i32* @y.40
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %75, label %115, !dbg !2710

75:                                               ; preds = %originalBBpart28
  %76 = load i32, i32* @x.39
  %77 = load i32, i32* @y.40
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = call zeroext i1 @hard_locale(i32 0), !dbg !2711
  %85 = load i32, i32* @x.39
  %86 = load i32, i32* @y.40
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %84, label %115, label %93, !dbg !2712

93:                                               ; preds = %originalBBpart212
  call void @llvm.dbg.declare(metadata i8* %20, metadata !2713, metadata !DIExpression()), !dbg !2715
  %94 = load i32, i32* @x.39
  %95 = load i32, i32* @y.40
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %93, %originalBB14alteredBB
  %102 = load i8*, i8** %15, align 8, !dbg !2716
  %103 = load i8, i8* %102, align 1, !dbg !2717
  store i8 %103, i8* %20, align 1, !dbg !2715
  %104 = load i8, i8* %20, align 1, !dbg !2718
  %105 = zext i8 %104 to i32, !dbg !2718
  %106 = load i32*, i32** %14, align 8, !dbg !2719
  store i32 %105, i32* %106, align 4, !dbg !2720
  store i64 1, i64* %13, align 8, !dbg !2721
  %107 = load i32, i32* @x.39
  %108 = load i32, i32* @y.40
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %133, !dbg !2721

115:                                              ; preds = %originalBBpart212, %originalBBpart28, %originalBBpart24
  %116 = load i32, i32* @x.39
  %117 = load i32, i32* @y.40
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %115, %originalBB18alteredBB
  %124 = load i64, i64* %18, align 8, !dbg !2722
  store i64 %124, i64* %13, align 8, !dbg !2723
  %125 = load i32, i32* @x.39
  %126 = load i32, i32* @y.40
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %133, !dbg !2723

133:                                              ; preds = %originalBBpart220, %originalBBpart216
  %134 = load i64, i64* %13, align 8, !dbg !2724
  ret i64 %134, !dbg !2724

originalBBalteredBB:                              ; preds = %originalBB, %4
  %135 = alloca i64, align 8
  %136 = alloca i32*, align 8
  %137 = alloca i8*, align 8
  %138 = alloca i64, align 8
  %139 = alloca %struct.__mbstate_t*, align 8
  %140 = alloca i64, align 8
  %141 = alloca i32, align 4
  %142 = alloca i8, align 1
  store i32* %0, i32** %136, align 8
  call void @llvm.dbg.declare(metadata i32** %136, metadata !2725, metadata !DIExpression()), !dbg !2682
  store i8* %1, i8** %137, align 8
  call void @llvm.dbg.declare(metadata i8** %137, metadata !2741, metadata !DIExpression()), !dbg !2684
  store i64 %2, i64* %138, align 8
  call void @llvm.dbg.declare(metadata i64* %138, metadata !2742, metadata !DIExpression()), !dbg !2686
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %139, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %139, metadata !2743, metadata !DIExpression()), !dbg !2688
  call void @llvm.dbg.declare(metadata i64* %140, metadata !2744, metadata !DIExpression()), !dbg !2690
  call void @llvm.dbg.declare(metadata i32* %141, metadata !2745, metadata !DIExpression()), !dbg !2692
  %143 = load i32*, i32** %136, align 8, !dbg !2693
  %144 = icmp ne i32* %143, null, !dbg !2693
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  %145 = load i32*, i32** %14, align 8, !dbg !2698
  %146 = load i8*, i8** %15, align 8, !dbg !2699
  %147 = load i64, i64* %16, align 8, !dbg !2700
  %148 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !2701
  %149 = call i64 @mbrtowc(i32* %145, i8* %146, i64 %147, %struct.__mbstate_t* %148) #10, !dbg !2702
  store i64 %149, i64* %18, align 8, !dbg !2703
  %150 = load i64, i64* %18, align 8, !dbg !2704
  %151 = icmp ule i64 -2, %150, !dbg !2706
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %152 = load i64, i64* %16, align 8, !dbg !2708
  %153 = icmp ne i64 %152, 0, !dbg !2709
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %154 = call zeroext i1 @hard_locale(i32 0), !dbg !2711
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %93
  %155 = load i8*, i8** %15, align 8, !dbg !2716
  %156 = load i8, i8* %155, align 1, !dbg !2717
  store i8 %156, i8* %20, align 1, !dbg !2715
  %157 = load i8, i8* %20, align 1, !dbg !2718
  %158 = zext i8 %157 to i32, !dbg !2718
  %159 = load i32*, i32** %14, align 8, !dbg !2719
  store i32 %158, i32* %159, align 4, !dbg !2720
  store i64 1, i64* %13, align 8, !dbg !2721
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %115
  %160 = load i64, i64* %18, align 8, !dbg !2722
  store i64 %160, i64* %13, align 8, !dbg !2723
  br label %originalBB18
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #3

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @c_strcasecmp(i8*, i8*) #11 !dbg !2746 {
  %3 = load i32, i32* @x.41
  %4 = load i32, i32* @y.42
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2750, metadata !DIExpression()), !dbg !2751
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !2752, metadata !DIExpression()), !dbg !2753
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2754, metadata !DIExpression()), !dbg !2755
  %18 = load i8*, i8** %12, align 8, !dbg !2756
  store i8* %18, i8** %14, align 8, !dbg !2755
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2757, metadata !DIExpression()), !dbg !2758
  %19 = load i8*, i8** %13, align 8, !dbg !2759
  store i8* %19, i8** %15, align 8, !dbg !2758
  call void @llvm.dbg.declare(metadata i8* %16, metadata !2760, metadata !DIExpression()), !dbg !2761
  call void @llvm.dbg.declare(metadata i8* %17, metadata !2762, metadata !DIExpression()), !dbg !2763
  %20 = load i8*, i8** %14, align 8, !dbg !2764
  %21 = load i8*, i8** %15, align 8, !dbg !2766
  %22 = icmp eq i8* %20, %21, !dbg !2767
  %23 = load i32, i32* @x.41
  %24 = load i32, i32* @y.42
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %32, !dbg !2768

31:                                               ; preds = %originalBBpart2
  store i32 0, i32* %11, align 4, !dbg !2769
  br label %113, !dbg !2769

32:                                               ; preds = %originalBBpart2
  br label %33, !dbg !2770

33:                                               ; preds = %originalBBpart212, %32
  %34 = load i32, i32* @x.41
  %35 = load i32, i32* @y.42
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %33, %originalBB1alteredBB
  %42 = load i8*, i8** %14, align 8, !dbg !2771
  %43 = load i8, i8* %42, align 1, !dbg !2773
  %44 = zext i8 %43 to i32, !dbg !2773
  %45 = call i32 @c_tolower(i32 %44), !dbg !2774
  %46 = trunc i32 %45 to i8, !dbg !2774
  store i8 %46, i8* %16, align 1, !dbg !2775
  %47 = load i8*, i8** %15, align 8, !dbg !2776
  %48 = load i8, i8* %47, align 1, !dbg !2777
  %49 = zext i8 %48 to i32, !dbg !2777
  %50 = call i32 @c_tolower(i32 %49), !dbg !2778
  %51 = trunc i32 %50 to i8, !dbg !2778
  store i8 %51, i8* %17, align 1, !dbg !2779
  %52 = load i8, i8* %16, align 1, !dbg !2780
  %53 = zext i8 %52 to i32, !dbg !2780
  %54 = icmp eq i32 %53, 0, !dbg !2782
  %55 = load i32, i32* @x.41
  %56 = load i32, i32* @y.42
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %54, label %63, label %64, !dbg !2783

63:                                               ; preds = %originalBBpart24
  br label %107, !dbg !2784

64:                                               ; preds = %originalBBpart24
  %65 = load i32, i32* @x.41
  %66 = load i32, i32* @y.42
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %64, %originalBB6alteredBB
  %73 = load i8*, i8** %14, align 8, !dbg !2785
  %74 = getelementptr inbounds i8, i8* %73, i32 1, !dbg !2785
  store i8* %74, i8** %14, align 8, !dbg !2785
  %75 = load i8*, i8** %15, align 8, !dbg !2786
  %76 = getelementptr inbounds i8, i8* %75, i32 1, !dbg !2786
  store i8* %76, i8** %15, align 8, !dbg !2786
  %77 = load i32, i32* @x.41
  %78 = load i32, i32* @y.42
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %85, !dbg !2787

85:                                               ; preds = %originalBBpart28
  %86 = load i32, i32* @x.41
  %87 = load i32, i32* @y.42
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %85, %originalBB10alteredBB
  %94 = load i8, i8* %16, align 1, !dbg !2788
  %95 = zext i8 %94 to i32, !dbg !2788
  %96 = load i8, i8* %17, align 1, !dbg !2789
  %97 = zext i8 %96 to i32, !dbg !2789
  %98 = icmp eq i32 %95, %97, !dbg !2790
  %99 = load i32, i32* @x.41
  %100 = load i32, i32* @y.42
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %98, label %33, label %107, !dbg !2787, !llvm.loop !2791

107:                                              ; preds = %originalBBpart212, %63
  %108 = load i8, i8* %16, align 1, !dbg !2793
  %109 = zext i8 %108 to i32, !dbg !2793
  %110 = load i8, i8* %17, align 1, !dbg !2795
  %111 = zext i8 %110 to i32, !dbg !2795
  %112 = sub nsw i32 %109, %111, !dbg !2796
  store i32 %112, i32* %11, align 4, !dbg !2797
  br label %113, !dbg !2797

113:                                              ; preds = %107, %31
  %114 = load i32, i32* @x.41
  %115 = load i32, i32* @y.42
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %113, %originalBB14alteredBB
  %122 = load i32, i32* %11, align 4, !dbg !2798
  %123 = load i32, i32* @x.41
  %124 = load i32, i32* @y.42
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i32 %122, !dbg !2798

originalBBalteredBB:                              ; preds = %originalBB, %2
  %131 = alloca i32, align 4
  %132 = alloca i8*, align 8
  %133 = alloca i8*, align 8
  %134 = alloca i8*, align 8
  %135 = alloca i8*, align 8
  %136 = alloca i8, align 1
  %137 = alloca i8, align 1
  store i8* %0, i8** %132, align 8
  call void @llvm.dbg.declare(metadata i8** %132, metadata !2799, metadata !DIExpression()), !dbg !2751
  store i8* %1, i8** %133, align 8
  call void @llvm.dbg.declare(metadata i8** %133, metadata !2802, metadata !DIExpression()), !dbg !2753
  call void @llvm.dbg.declare(metadata i8** %134, metadata !2803, metadata !DIExpression()), !dbg !2755
  %138 = load i8*, i8** %132, align 8, !dbg !2756
  store i8* %138, i8** %134, align 8, !dbg !2755
  call void @llvm.dbg.declare(metadata i8** %135, metadata !2804, metadata !DIExpression()), !dbg !2758
  %139 = load i8*, i8** %133, align 8, !dbg !2759
  store i8* %139, i8** %135, align 8, !dbg !2758
  call void @llvm.dbg.declare(metadata i8* %136, metadata !2805, metadata !DIExpression()), !dbg !2761
  call void @llvm.dbg.declare(metadata i8* %137, metadata !2806, metadata !DIExpression()), !dbg !2763
  %140 = load i8*, i8** %134, align 8, !dbg !2764
  %141 = load i8*, i8** %135, align 8, !dbg !2766
  %142 = icmp eq i8* %140, %141, !dbg !2767
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %33
  %143 = load i8*, i8** %14, align 8, !dbg !2771
  %144 = load i8, i8* %143, align 1, !dbg !2773
  %145 = zext i8 %144 to i32, !dbg !2773
  %146 = call i32 @c_tolower(i32 %145), !dbg !2774
  %147 = trunc i32 %146 to i8, !dbg !2774
  store i8 %147, i8* %16, align 1, !dbg !2775
  %148 = load i8*, i8** %15, align 8, !dbg !2776
  %149 = load i8, i8* %148, align 1, !dbg !2777
  %150 = zext i8 %149 to i32, !dbg !2777
  %151 = call i32 @c_tolower(i32 %150), !dbg !2778
  %152 = trunc i32 %151 to i8, !dbg !2778
  store i8 %152, i8* %17, align 1, !dbg !2779
  %153 = load i8, i8* %16, align 1, !dbg !2780
  %154 = zext i8 %153 to i32, !dbg !2780
  %155 = icmp eq i32 %154, 0, !dbg !2782
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %64
  %156 = load i8*, i8** %14, align 8, !dbg !2785
  %157 = getelementptr inbounds i8, i8* %156, i32 1, !dbg !2785
  store i8* %157, i8** %14, align 8, !dbg !2785
  %158 = load i8*, i8** %15, align 8, !dbg !2786
  %159 = getelementptr inbounds i8, i8* %158, i32 1, !dbg !2786
  store i8* %159, i8** %15, align 8, !dbg !2786
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %85
  %160 = load i8, i8* %16, align 1, !dbg !2788
  %161 = zext i8 %160 to i32, !dbg !2788
  %162 = load i8, i8* %17, align 1, !dbg !2789
  %163 = zext i8 %162 to i32, !dbg !2789
  %164 = icmp eq i32 %161, %163, !dbg !2790
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %113
  %165 = load i32, i32* %11, align 4, !dbg !2798
  br label %originalBB14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @close_stream(%struct._IO_FILE*) #5 !dbg !2807 {
  %2 = load i32, i32* @x.43
  %3 = load i32, i32* @y.44
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !2845, metadata !DIExpression()), !dbg !2846
  call void @llvm.dbg.declare(metadata i8* %12, metadata !2847, metadata !DIExpression()), !dbg !2849
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !2850
  %16 = call i64 @__fpending(%struct._IO_FILE* %15) #10, !dbg !2851
  %17 = icmp ne i64 %16, 0, !dbg !2852
  %18 = zext i1 %17 to i8, !dbg !2849
  store i8 %18, i8* %12, align 1, !dbg !2849
  call void @llvm.dbg.declare(metadata i8* %13, metadata !2853, metadata !DIExpression()), !dbg !2854
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !2855
  %20 = call i32 @ferror_unlocked(%struct._IO_FILE* %19) #10, !dbg !2855
  %21 = icmp ne i32 %20, 0, !dbg !2856
  %22 = zext i1 %21 to i8, !dbg !2854
  store i8 %22, i8* %13, align 1, !dbg !2854
  call void @llvm.dbg.declare(metadata i8* %14, metadata !2857, metadata !DIExpression()), !dbg !2858
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !2859
  %24 = call i32 @rpl_fclose(%struct._IO_FILE* %23), !dbg !2860
  %25 = icmp ne i32 %24, 0, !dbg !2861
  %26 = zext i1 %25 to i8, !dbg !2858
  store i8 %26, i8* %14, align 1, !dbg !2858
  %27 = load i8, i8* %13, align 1, !dbg !2862
  %28 = trunc i8 %27 to i1, !dbg !2862
  %29 = load i32, i32* @x.43
  %30 = load i32, i32* @y.44
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %28, label %79, label %37, !dbg !2864

37:                                               ; preds = %originalBBpart2
  %38 = load i32, i32* @x.43
  %39 = load i32, i32* @y.44
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %46 = load i8, i8* %14, align 1, !dbg !2865
  %47 = trunc i8 %46 to i1, !dbg !2865
  %48 = load i32, i32* @x.43
  %49 = load i32, i32* @y.44
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %117, !dbg !2866

56:                                               ; preds = %originalBBpart24
  %57 = load i8, i8* %12, align 1, !dbg !2867
  %58 = trunc i8 %57 to i1, !dbg !2867
  br i1 %58, label %79, label %59, !dbg !2868

59:                                               ; preds = %56
  %60 = load i32, i32* @x.43
  %61 = load i32, i32* @y.44
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %59, %originalBB6alteredBB
  %68 = call i32* @__errno_location() #15, !dbg !2869
  %69 = load i32, i32* %68, align 4, !dbg !2869
  %70 = icmp ne i32 %69, 9, !dbg !2870
  %71 = load i32, i32* @x.43
  %72 = load i32, i32* @y.44
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %70, label %79, label %117, !dbg !2871

79:                                               ; preds = %originalBBpart28, %56, %originalBBpart2
  %80 = load i8, i8* %14, align 1, !dbg !2872
  %81 = trunc i8 %80 to i1, !dbg !2872
  br i1 %81, label %100, label %82, !dbg !2875

82:                                               ; preds = %79
  %83 = load i32, i32* @x.43
  %84 = load i32, i32* @y.44
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %82, %originalBB10alteredBB
  %91 = call i32* @__errno_location() #15, !dbg !2876
  store i32 0, i32* %91, align 4, !dbg !2877
  %92 = load i32, i32* @x.43
  %93 = load i32, i32* @y.44
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %100, !dbg !2876

100:                                              ; preds = %originalBBpart212, %79
  %101 = load i32, i32* @x.43
  %102 = load i32, i32* @y.44
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %100, %originalBB14alteredBB
  store i32 -1, i32* %10, align 4, !dbg !2878
  %109 = load i32, i32* @x.43
  %110 = load i32, i32* @y.44
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %134, !dbg !2878

117:                                              ; preds = %originalBBpart28, %originalBBpart24
  %118 = load i32, i32* @x.43
  %119 = load i32, i32* @y.44
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %117, %originalBB18alteredBB
  store i32 0, i32* %10, align 4, !dbg !2879
  %126 = load i32, i32* @x.43
  %127 = load i32, i32* @y.44
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %134, !dbg !2879

134:                                              ; preds = %originalBBpart220, %originalBBpart216
  %135 = load i32, i32* %10, align 4, !dbg !2880
  ret i32 %135, !dbg !2880

originalBBalteredBB:                              ; preds = %originalBB, %1
  %136 = alloca i32, align 4
  %137 = alloca %struct._IO_FILE*, align 8
  %138 = alloca i8, align 1
  %139 = alloca i8, align 1
  %140 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %137, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %137, metadata !2881, metadata !DIExpression()), !dbg !2846
  call void @llvm.dbg.declare(metadata i8* %138, metadata !2920, metadata !DIExpression()), !dbg !2849
  %141 = load %struct._IO_FILE*, %struct._IO_FILE** %137, align 8, !dbg !2850
  %142 = call i64 @__fpending(%struct._IO_FILE* %141) #10, !dbg !2851
  %143 = icmp ne i64 %142, 0, !dbg !2852
  %144 = zext i1 %143 to i8, !dbg !2849
  store i8 %144, i8* %138, align 1, !dbg !2849
  call void @llvm.dbg.declare(metadata i8* %139, metadata !2921, metadata !DIExpression()), !dbg !2854
  %145 = load %struct._IO_FILE*, %struct._IO_FILE** %137, align 8, !dbg !2855
  %146 = call i32 @ferror_unlocked(%struct._IO_FILE* %145) #10, !dbg !2855
  %147 = icmp ne i32 %146, 0, !dbg !2856
  %148 = zext i1 %147 to i8, !dbg !2854
  store i8 %148, i8* %139, align 1, !dbg !2854
  call void @llvm.dbg.declare(metadata i8* %140, metadata !2922, metadata !DIExpression()), !dbg !2858
  %149 = load %struct._IO_FILE*, %struct._IO_FILE** %137, align 8, !dbg !2859
  %150 = call i32 @rpl_fclose(%struct._IO_FILE* %149), !dbg !2860
  %151 = icmp ne i32 %150, 0, !dbg !2861
  %152 = zext i1 %151 to i8, !dbg !2858
  store i8 %152, i8* %140, align 1, !dbg !2858
  %153 = load i8, i8* %139, align 1, !dbg !2862
  %154 = trunc i8 %153 to i1, !dbg !2862
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %155 = load i8, i8* %14, align 1, !dbg !2865
  %156 = trunc i8 %155 to i1, !dbg !2865
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %59
  %157 = call i32* @__errno_location() #15, !dbg !2869
  %158 = load i32, i32* %157, align 4, !dbg !2869
  %159 = icmp ne i32 %158, 9, !dbg !2870
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %82
  %160 = call i32* @__errno_location() #15, !dbg !2876
  store i32 0, i32* %160, align 4, !dbg !2877
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %100
  store i32 -1, i32* %10, align 4, !dbg !2878
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %117
  store i32 0, i32* %10, align 4, !dbg !2879
  br label %originalBB18
}

; Function Attrs: nounwind
declare dso_local i64 @__fpending(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @hard_locale(i32) #5 !dbg !2923 {
  %2 = load i32, i32* @x.45
  %3 = load i32, i32* @y.46
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i1, align 1
  %11 = alloca i32, align 4
  %12 = alloca [257 x i8], align 16
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !2927, metadata !DIExpression()), !dbg !2928
  call void @llvm.dbg.declare(metadata [257 x i8]* %12, metadata !2929, metadata !DIExpression()), !dbg !2933
  %13 = load i32, i32* %11, align 4, !dbg !2934
  %14 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !2936
  %15 = call i32 @setlocale_null_r(i32 %13, i8* %14, i64 257), !dbg !2937
  %16 = icmp ne i32 %15, 0, !dbg !2937
  %17 = load i32, i32* @x.45
  %18 = load i32, i32* @y.46
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %26, !dbg !2938

25:                                               ; preds = %originalBBpart2
  store i1 false, i1* %10, align 1, !dbg !2939
  br label %53, !dbg !2939

26:                                               ; preds = %originalBBpart2
  %27 = load i32, i32* @x.45
  %28 = load i32, i32* @y.46
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !2940
  %36 = call i32 @strcmp(i8* %35, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.99, i64 0, i64 0)) #13, !dbg !2941
  %37 = icmp eq i32 %36, 0, !dbg !2942
  %38 = load i32, i32* @x.45
  %39 = load i32, i32* @y.46
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %37, label %50, label %46, !dbg !2943

46:                                               ; preds = %originalBBpart24
  %47 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !2944
  %48 = call i32 @strcmp(i8* %47, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.100, i64 0, i64 0)) #13, !dbg !2945
  %49 = icmp eq i32 %48, 0, !dbg !2946
  br label %50, !dbg !2943

50:                                               ; preds = %46, %originalBBpart24
  %51 = phi i1 [ true, %originalBBpart24 ], [ %49, %46 ]
  %52 = xor i1 %51, true, !dbg !2947
  store i1 %52, i1* %10, align 1, !dbg !2948
  br label %53, !dbg !2948

53:                                               ; preds = %50, %25
  %54 = load i32, i32* @x.45
  %55 = load i32, i32* @y.46
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = load i1, i1* %10, align 1, !dbg !2949
  %63 = load i32, i32* @x.45
  %64 = load i32, i32* @y.46
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i1 %62, !dbg !2949

originalBBalteredBB:                              ; preds = %originalBB, %1
  %71 = alloca i1, align 1
  %72 = alloca i32, align 4
  %73 = alloca [257 x i8], align 16
  store i32 %0, i32* %72, align 4
  call void @llvm.dbg.declare(metadata i32* %72, metadata !2950, metadata !DIExpression()), !dbg !2928
  call void @llvm.dbg.declare(metadata [257 x i8]* %73, metadata !2953, metadata !DIExpression()), !dbg !2933
  %74 = load i32, i32* %72, align 4, !dbg !2934
  %75 = getelementptr inbounds [257 x i8], [257 x i8]* %73, i64 0, i64 0, !dbg !2936
  %76 = call i32 @setlocale_null_r(i32 %74, i8* %75, i64 257), !dbg !2937
  %77 = icmp ne i32 %76, 0, !dbg !2937
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %78 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !2940
  %79 = call i32 @strcmp(i8* %78, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.99, i64 0, i64 0)) #13, !dbg !2941
  %80 = icmp eq i32 %79, 0, !dbg !2942
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  %81 = load i1, i1* %10, align 1, !dbg !2949
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @locale_charset() #5 !dbg !2954 {
  %1 = load i32, i32* @x.47
  %2 = load i32, i32* @y.48
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !2958, metadata !DIExpression()), !dbg !2959
  %10 = call i8* @nl_langinfo(i32 14) #10, !dbg !2960
  store i8* %10, i8** %9, align 8, !dbg !2961
  %11 = load i8*, i8** %9, align 8, !dbg !2962
  %12 = icmp eq i8* %11, null, !dbg !2964
  %13 = load i32, i32* @x.47
  %14 = load i32, i32* @y.48
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %38, !dbg !2965

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.47
  %23 = load i32, i32* @y.48
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.103, i64 0, i64 0), i8** %9, align 8, !dbg !2966
  %30 = load i32, i32* @x.47
  %31 = load i32, i32* @y.48
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %38, !dbg !2967

38:                                               ; preds = %originalBBpart24, %originalBBpart2
  %39 = load i8*, i8** %9, align 8, !dbg !2968
  %40 = getelementptr inbounds i8, i8* %39, i64 0, !dbg !2968
  %41 = load i8, i8* %40, align 1, !dbg !2968
  %42 = sext i8 %41 to i32, !dbg !2968
  %43 = icmp eq i32 %42, 0, !dbg !2972
  br i1 %43, label %44, label %61, !dbg !2973

44:                                               ; preds = %38
  %45 = load i32, i32* @x.47
  %46 = load i32, i32* @y.48
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.104, i64 0, i64 0), i8** %9, align 8, !dbg !2974
  %53 = load i32, i32* @x.47
  %54 = load i32, i32* @y.48
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %61, !dbg !2975

61:                                               ; preds = %originalBBpart28, %38
  %62 = load i32, i32* @x.47
  %63 = load i32, i32* @y.48
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load i8*, i8** %9, align 8, !dbg !2976
  %71 = load i32, i32* @x.47
  %72 = load i32, i32* @y.48
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %70, !dbg !2977

originalBBalteredBB:                              ; preds = %originalBB, %0
  %79 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %79, metadata !2978, metadata !DIExpression()), !dbg !2959
  %80 = call i8* @nl_langinfo(i32 14) #10, !dbg !2960
  store i8* %80, i8** %79, align 8, !dbg !2961
  %81 = load i8*, i8** %79, align 8, !dbg !2962
  %82 = icmp eq i8* %81, null, !dbg !2964
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.103, i64 0, i64 0), i8** %9, align 8, !dbg !2966
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.104, i64 0, i64 0), i8** %9, align 8, !dbg !2974
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %83 = load i8*, i8** %9, align 8, !dbg !2976
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_r(i32, i8* nonnull, i64) #5 !dbg !2981 {
  %4 = load i32, i32* @x.49
  %5 = load i32, i32* @y.50
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !2985, metadata !DIExpression()), !dbg !2986
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !2987, metadata !DIExpression()), !dbg !2988
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !2989, metadata !DIExpression()), !dbg !2990
  %15 = load i32, i32* %12, align 4, !dbg !2991
  %16 = load i8*, i8** %13, align 8, !dbg !2992
  %17 = load i64, i64* %14, align 8, !dbg !2993
  %18 = call i32 @setlocale_null_unlocked(i32 %15, i8* %16, i64 %17), !dbg !2994
  %19 = load i32, i32* @x.49
  %20 = load i32, i32* @y.50
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i32 %18, !dbg !2995

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !2996, metadata !DIExpression()), !dbg !2986
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !2999, metadata !DIExpression()), !dbg !2988
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !3000, metadata !DIExpression()), !dbg !2990
  %30 = load i32, i32* %27, align 4, !dbg !2991
  %31 = load i8*, i8** %28, align 8, !dbg !2992
  %32 = load i64, i64* %29, align 8, !dbg !2993
  %33 = call i32 @setlocale_null_unlocked(i32 %30, i8* %31, i64 %32), !dbg !2994
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_unlocked(i32, i8*, i64) #5 !dbg !3001 {
  %4 = load i32, i32* @x.51
  %5 = load i32, i32* @y.52
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !3002, metadata !DIExpression()), !dbg !3003
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3004, metadata !DIExpression()), !dbg !3005
  store i64 %2, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !3006, metadata !DIExpression()), !dbg !3007
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3008, metadata !DIExpression()), !dbg !3009
  %18 = load i32, i32* %13, align 4, !dbg !3010
  %19 = call i8* @setlocale_null_androidfix(i32 %18), !dbg !3011
  store i8* %19, i8** %16, align 8, !dbg !3009
  %20 = load i8*, i8** %16, align 8, !dbg !3012
  %21 = icmp eq i8* %20, null, !dbg !3014
  %22 = load i32, i32* @x.51
  %23 = load i32, i32* @y.52
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %69, !dbg !3015

30:                                               ; preds = %originalBBpart2
  %31 = load i64, i64* %15, align 8, !dbg !3016
  %32 = icmp ugt i64 %31, 0, !dbg !3019
  br i1 %32, label %33, label %52, !dbg !3020

33:                                               ; preds = %30
  %34 = load i32, i32* @x.51
  %35 = load i32, i32* @y.52
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %33, %originalBB1alteredBB
  %42 = load i8*, i8** %14, align 8, !dbg !3021
  %43 = getelementptr inbounds i8, i8* %42, i64 0, !dbg !3021
  store i8 0, i8* %43, align 1, !dbg !3022
  %44 = load i32, i32* @x.51
  %45 = load i32, i32* @y.52
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %52, !dbg !3021

52:                                               ; preds = %originalBBpart24, %30
  %53 = load i32, i32* @x.51
  %54 = load i32, i32* @y.52
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %52, %originalBB6alteredBB
  store i32 22, i32* %12, align 4, !dbg !3023
  %61 = load i32, i32* @x.51
  %62 = load i32, i32* @y.52
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %173, !dbg !3023

69:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i64* %17, metadata !3024, metadata !DIExpression()), !dbg !3026
  %70 = load i32, i32* @x.51
  %71 = load i32, i32* @y.52
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %69, %originalBB10alteredBB
  %78 = load i8*, i8** %16, align 8, !dbg !3027
  %79 = call i64 @strlen(i8* %78) #13, !dbg !3028
  store i64 %79, i64* %17, align 8, !dbg !3026
  %80 = load i64, i64* %17, align 8, !dbg !3029
  %81 = load i64, i64* %15, align 8, !dbg !3031
  %82 = icmp ult i64 %80, %81, !dbg !3032
  %83 = load i32, i32* @x.51
  %84 = load i32, i32* @y.52
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %82, label %91, label %112, !dbg !3033

91:                                               ; preds = %originalBBpart212
  %92 = load i32, i32* @x.51
  %93 = load i32, i32* @y.52
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %91, %originalBB14alteredBB
  %100 = load i8*, i8** %14, align 8, !dbg !3034
  %101 = load i8*, i8** %16, align 8, !dbg !3036
  %102 = load i64, i64* %17, align 8, !dbg !3037
  %103 = add i64 %102, 1, !dbg !3038
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %100, i8* align 1 %101, i64 %103, i1 false), !dbg !3039
  store i32 0, i32* %12, align 4, !dbg !3040
  %104 = load i32, i32* @x.51
  %105 = load i32, i32* @y.52
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %173, !dbg !3040

112:                                              ; preds = %originalBBpart212
  %113 = load i32, i32* @x.51
  %114 = load i32, i32* @y.52
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %112, %originalBB18alteredBB
  %121 = load i64, i64* %15, align 8, !dbg !3041
  %122 = icmp ugt i64 %121, 0, !dbg !3044
  %123 = load i32, i32* @x.51
  %124 = load i32, i32* @y.52
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %122, label %131, label %156, !dbg !3045

131:                                              ; preds = %originalBBpart220
  %132 = load i32, i32* @x.51
  %133 = load i32, i32* @y.52
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %131, %originalBB22alteredBB
  %140 = load i8*, i8** %14, align 8, !dbg !3046
  %141 = load i8*, i8** %16, align 8, !dbg !3048
  %142 = load i64, i64* %15, align 8, !dbg !3049
  %143 = sub i64 %142, 1, !dbg !3050
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %140, i8* align 1 %141, i64 %143, i1 false), !dbg !3051
  %144 = load i8*, i8** %14, align 8, !dbg !3052
  %145 = load i64, i64* %15, align 8, !dbg !3053
  %146 = sub i64 %145, 1, !dbg !3054
  %147 = getelementptr inbounds i8, i8* %144, i64 %146, !dbg !3052
  store i8 0, i8* %147, align 1, !dbg !3055
  %148 = load i32, i32* @x.51
  %149 = load i32, i32* @y.52
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBBpart231, label %originalBB22alteredBB

originalBBpart231:                                ; preds = %originalBB22
  br label %156, !dbg !3056

156:                                              ; preds = %originalBBpart231, %originalBBpart220
  %157 = load i32, i32* @x.51
  %158 = load i32, i32* @y.52
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %156, %originalBB33alteredBB
  store i32 34, i32* %12, align 4, !dbg !3057
  %165 = load i32, i32* @x.51
  %166 = load i32, i32* @y.52
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br label %173, !dbg !3057

173:                                              ; preds = %originalBBpart235, %originalBBpart216, %originalBBpart28
  %174 = load i32, i32* @x.51
  %175 = load i32, i32* @y.52
  %176 = sub i32 %174, 1
  %177 = mul i32 %174, %176
  %178 = urem i32 %177, 2
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %179, %180
  br i1 %181, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %173, %originalBB37alteredBB
  %182 = load i32, i32* %12, align 4, !dbg !3058
  %183 = load i32, i32* @x.51
  %184 = load i32, i32* @y.52
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  ret i32 %182, !dbg !3058

originalBBalteredBB:                              ; preds = %originalBB, %3
  %191 = alloca i32, align 4
  %192 = alloca i32, align 4
  %193 = alloca i8*, align 8
  %194 = alloca i64, align 8
  %195 = alloca i8*, align 8
  %196 = alloca i64, align 8
  store i32 %0, i32* %192, align 4
  call void @llvm.dbg.declare(metadata i32* %192, metadata !3059, metadata !DIExpression()), !dbg !3003
  store i8* %1, i8** %193, align 8
  call void @llvm.dbg.declare(metadata i8** %193, metadata !3062, metadata !DIExpression()), !dbg !3005
  store i64 %2, i64* %194, align 8
  call void @llvm.dbg.declare(metadata i64* %194, metadata !3063, metadata !DIExpression()), !dbg !3007
  call void @llvm.dbg.declare(metadata i8** %195, metadata !3064, metadata !DIExpression()), !dbg !3009
  %197 = load i32, i32* %192, align 4, !dbg !3010
  %198 = call i8* @setlocale_null_androidfix(i32 %197), !dbg !3011
  store i8* %198, i8** %195, align 8, !dbg !3009
  %199 = load i8*, i8** %195, align 8, !dbg !3012
  %200 = icmp eq i8* %199, null, !dbg !3014
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %33
  %201 = load i8*, i8** %14, align 8, !dbg !3021
  %202 = getelementptr inbounds i8, i8* %201, i64 0, !dbg !3021
  store i8 0, i8* %202, align 1, !dbg !3022
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %52
  store i32 22, i32* %12, align 4, !dbg !3023
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %69
  %203 = load i8*, i8** %16, align 8, !dbg !3027
  %204 = call i64 @strlen(i8* %203) #13, !dbg !3028
  store i64 %204, i64* %17, align 8, !dbg !3026
  %205 = load i64, i64* %17, align 8, !dbg !3029
  %206 = load i64, i64* %15, align 8, !dbg !3031
  %207 = icmp ult i64 %205, %206, !dbg !3032
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %91
  %208 = load i8*, i8** %14, align 8, !dbg !3034
  %209 = load i8*, i8** %16, align 8, !dbg !3036
  %210 = load i64, i64* %17, align 8, !dbg !3037
  %_ = sub i64 0, %210
  %gen = add i64 %_, 1
  %211 = add i64 %210, 1, !dbg !3038
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %208, i8* align 1 %209, i64 %211, i1 false), !dbg !3039
  store i32 0, i32* %12, align 4, !dbg !3040
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %112
  %212 = load i64, i64* %15, align 8, !dbg !3041
  %213 = icmp ugt i64 %212, 0, !dbg !3044
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %131
  %214 = load i8*, i8** %14, align 8, !dbg !3046
  %215 = load i8*, i8** %16, align 8, !dbg !3048
  %216 = load i64, i64* %15, align 8, !dbg !3049
  %_23 = sub i64 0, %216
  %gen24 = add i64 %_23, 1
  %217 = sub i64 %216, 1, !dbg !3050
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %214, i8* align 1 %215, i64 %217, i1 false), !dbg !3051
  %218 = load i8*, i8** %14, align 8, !dbg !3052
  %219 = load i64, i64* %15, align 8, !dbg !3053
  %_25 = shl i64 %219, 1
  %_26 = sub i64 0, %219
  %gen27 = add i64 %_26, 1
  %_28 = sub i64 %219, 1
  %gen29 = mul i64 %_28, 1
  %220 = sub i64 %219, 1, !dbg !3054
  %221 = getelementptr inbounds i8, i8* %218, i64 %220, !dbg !3052
  store i8 0, i8* %221, align 1, !dbg !3055
  br label %originalBB22

originalBB33alteredBB:                            ; preds = %originalBB33, %156
  store i32 34, i32* %12, align 4, !dbg !3057
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %173
  %222 = load i32, i32* %12, align 4, !dbg !3058
  br label %originalBB37
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @setlocale_null_androidfix(i32) #5 !dbg !3065 {
  %2 = load i32, i32* @x.53
  %3 = load i32, i32* @y.54
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !3068, metadata !DIExpression()), !dbg !3069
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3070, metadata !DIExpression()), !dbg !3071
  %12 = load i32, i32* %10, align 4, !dbg !3072
  %13 = call i8* @setlocale(i32 %12, i8* null) #10, !dbg !3073
  store i8* %13, i8** %11, align 8, !dbg !3071
  %14 = load i8*, i8** %11, align 8, !dbg !3074
  %15 = load i32, i32* @x.53
  %16 = load i32, i32* @y.54
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !3075

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32, align 4
  %24 = alloca i8*, align 8
  store i32 %0, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !3076, metadata !DIExpression()), !dbg !3069
  call void @llvm.dbg.declare(metadata i8** %24, metadata !3079, metadata !DIExpression()), !dbg !3071
  %25 = load i32, i32* %23, align 4, !dbg !3072
  %26 = call i8* @setlocale(i32 %25, i8* null) #10, !dbg !3073
  store i8* %26, i8** %24, align 8, !dbg !3071
  %27 = load i8*, i8** %24, align 8, !dbg !3074
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fclose(%struct._IO_FILE* nonnull) #5 !dbg !3080 {
  %2 = alloca i32, align 4
  %3 = alloca %struct._IO_FILE*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %3, metadata !3118, metadata !DIExpression()), !dbg !3119
  call void @llvm.dbg.declare(metadata i32* %4, metadata !3120, metadata !DIExpression()), !dbg !3121
  store i32 0, i32* %4, align 4, !dbg !3121
  call void @llvm.dbg.declare(metadata i32* %5, metadata !3122, metadata !DIExpression()), !dbg !3123
  call void @llvm.dbg.declare(metadata i32* %6, metadata !3124, metadata !DIExpression()), !dbg !3125
  store i32 0, i32* %6, align 4, !dbg !3125
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3126
  %8 = call i32 @fileno(%struct._IO_FILE* %7) #10, !dbg !3127
  store i32 %8, i32* %5, align 4, !dbg !3128
  %9 = load i32, i32* %5, align 4, !dbg !3129
  %10 = icmp slt i32 %9, 0, !dbg !3131
  br i1 %10, label %11, label %30, !dbg !3132

11:                                               ; preds = %1
  %12 = load i32, i32* @x.55
  %13 = load i32, i32* @y.56
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %11, %originalBBalteredBB
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3133
  %21 = call i32 @fclose(%struct._IO_FILE* %20), !dbg !3134
  store i32 %21, i32* %2, align 4, !dbg !3135
  %22 = load i32, i32* @x.55
  %23 = load i32, i32* @y.56
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %136, !dbg !3135

30:                                               ; preds = %1
  %31 = load i32, i32* @x.55
  %32 = load i32, i32* @y.56
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3136
  %40 = call i32 @__freading(%struct._IO_FILE* %39) #10, !dbg !3136
  %41 = icmp ne i32 %40, 0, !dbg !3136
  %42 = load i32, i32* @x.55
  %43 = load i32, i32* @y.56
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %41, label %50, label %71, !dbg !3138

50:                                               ; preds = %originalBBpart24
  %51 = load i32, i32* @x.55
  %52 = load i32, i32* @y.56
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %50, %originalBB6alteredBB
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3139
  %60 = call i32 @fileno(%struct._IO_FILE* %59) #10, !dbg !3140
  %61 = call i64 @lseek(i32 %60, i64 0, i32 1) #10, !dbg !3141
  %62 = icmp ne i64 %61, -1, !dbg !3142
  %63 = load i32, i32* @x.55
  %64 = load i32, i32* @y.56
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %62, label %71, label %94, !dbg !3143

71:                                               ; preds = %originalBBpart28, %originalBBpart24
  %72 = load i32, i32* @x.55
  %73 = load i32, i32* @y.56
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %71, %originalBB10alteredBB
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3144
  %81 = call i32 @rpl_fflush(%struct._IO_FILE* %80), !dbg !3145
  %82 = icmp ne i32 %81, 0, !dbg !3145
  %83 = load i32, i32* @x.55
  %84 = load i32, i32* @y.56
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %82, label %91, label %94, !dbg !3146

91:                                               ; preds = %originalBBpart212
  %92 = call i32* @__errno_location() #15, !dbg !3147
  %93 = load i32, i32* %92, align 4, !dbg !3147
  store i32 %93, i32* %4, align 4, !dbg !3148
  br label %94, !dbg !3149

94:                                               ; preds = %91, %originalBBpart212, %originalBBpart28
  %95 = load i32, i32* @x.55
  %96 = load i32, i32* @y.56
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %94, %originalBB14alteredBB
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3150
  %104 = call i32 @fclose(%struct._IO_FILE* %103), !dbg !3151
  store i32 %104, i32* %6, align 4, !dbg !3152
  %105 = load i32, i32* %4, align 4, !dbg !3153
  %106 = icmp ne i32 %105, 0, !dbg !3155
  %107 = load i32, i32* @x.55
  %108 = load i32, i32* @y.56
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %106, label %115, label %118, !dbg !3156

115:                                              ; preds = %originalBBpart216
  %116 = load i32, i32* %4, align 4, !dbg !3157
  %117 = call i32* @__errno_location() #15, !dbg !3159
  store i32 %116, i32* %117, align 4, !dbg !3160
  store i32 -1, i32* %6, align 4, !dbg !3161
  br label %118, !dbg !3162

118:                                              ; preds = %115, %originalBBpart216
  %119 = load i32, i32* @x.55
  %120 = load i32, i32* @y.56
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %118, %originalBB18alteredBB
  %127 = load i32, i32* %6, align 4, !dbg !3163
  store i32 %127, i32* %2, align 4, !dbg !3164
  %128 = load i32, i32* @x.55
  %129 = load i32, i32* @y.56
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %136, !dbg !3164

136:                                              ; preds = %originalBBpart220, %originalBBpart2
  %137 = load i32, i32* @x.55
  %138 = load i32, i32* @y.56
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %136, %originalBB22alteredBB
  %145 = load i32, i32* %2, align 4, !dbg !3165
  %146 = load i32, i32* @x.55
  %147 = load i32, i32* @y.56
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret i32 %145, !dbg !3165

originalBBalteredBB:                              ; preds = %originalBB, %11
  %154 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3133
  %155 = call i32 @fclose(%struct._IO_FILE* %154), !dbg !3134
  store i32 %155, i32* %2, align 4, !dbg !3135
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %156 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3136
  %157 = call i32 @__freading(%struct._IO_FILE* %156) #10, !dbg !3136
  %158 = icmp ne i32 %157, 0, !dbg !3136
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %50
  %159 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3139
  %160 = call i32 @fileno(%struct._IO_FILE* %159) #10, !dbg !3140
  %161 = call i64 @lseek(i32 %160, i64 0, i32 1) #10, !dbg !3141
  %162 = icmp ne i64 %161, -1, !dbg !3142
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %71
  %163 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3144
  %164 = call i32 @rpl_fflush(%struct._IO_FILE* %163), !dbg !3145
  %165 = icmp ne i32 %164, 0, !dbg !3145
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %94
  %166 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3150
  %167 = call i32 @fclose(%struct._IO_FILE* %166), !dbg !3151
  store i32 %167, i32* %6, align 4, !dbg !3152
  %168 = load i32, i32* %4, align 4, !dbg !3153
  %169 = icmp ne i32 %168, 0, !dbg !3155
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %118
  %170 = load i32, i32* %6, align 4, !dbg !3163
  store i32 %170, i32* %2, align 4, !dbg !3164
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %136
  %171 = load i32, i32* %2, align 4, !dbg !3165
  br label %originalBB22
}

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #3

declare dso_local i32 @fclose(%struct._IO_FILE*) #4

; Function Attrs: nounwind
declare dso_local i32 @__freading(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fflush(%struct._IO_FILE*) #5 !dbg !3166 {
  %2 = load i32, i32* @x.57
  %3 = load i32, i32* @y.58
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !3204, metadata !DIExpression()), !dbg !3205
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3206
  %13 = icmp eq %struct._IO_FILE* %12, null, !dbg !3208
  %14 = load i32, i32* @x.57
  %15 = load i32, i32* @y.58
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %13, label %42, label %22, !dbg !3209

22:                                               ; preds = %originalBBpart2
  %23 = load i32, i32* @x.57
  %24 = load i32, i32* @y.58
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3210
  %32 = call i32 @__freading(%struct._IO_FILE* %31) #10, !dbg !3210
  %33 = icmp ne i32 %32, 0, !dbg !3210
  %34 = load i32, i32* @x.57
  %35 = load i32, i32* @y.58
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %33, label %61, label %42, !dbg !3211

42:                                               ; preds = %originalBBpart24, %originalBBpart2
  %43 = load i32, i32* @x.57
  %44 = load i32, i32* @y.58
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3212
  %52 = call i32 @fflush(%struct._IO_FILE* %51), !dbg !3213
  store i32 %52, i32* %10, align 4, !dbg !3214
  %53 = load i32, i32* @x.57
  %54 = load i32, i32* @y.58
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !3214

61:                                               ; preds = %originalBBpart24
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3215
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %62), !dbg !3216
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3217
  %64 = call i32 @fflush(%struct._IO_FILE* %63), !dbg !3218
  store i32 %64, i32* %10, align 4, !dbg !3219
  br label %65, !dbg !3219

65:                                               ; preds = %61, %originalBBpart28
  %66 = load i32, i32* @x.57
  %67 = load i32, i32* @y.58
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %74 = load i32, i32* %10, align 4, !dbg !3220
  %75 = load i32, i32* @x.57
  %76 = load i32, i32* @y.58
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i32 %74, !dbg !3220

originalBBalteredBB:                              ; preds = %originalBB, %1
  %83 = alloca i32, align 4
  %84 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %84, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %84, metadata !3221, metadata !DIExpression()), !dbg !3205
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** %84, align 8, !dbg !3206
  %86 = icmp eq %struct._IO_FILE* %85, null, !dbg !3208
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %87 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3210
  %88 = call i32 @__freading(%struct._IO_FILE* %87) #10, !dbg !3210
  %89 = icmp ne i32 %88, 0, !dbg !3210
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3212
  %91 = call i32 @fflush(%struct._IO_FILE* %90), !dbg !3213
  store i32 %91, i32* %10, align 4, !dbg !3214
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %92 = load i32, i32* %10, align 4, !dbg !3220
  br label %originalBB10
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE*) #5 !dbg !3260 {
  %2 = load i32, i32* @x.59
  %3 = load i32, i32* @y.60
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %10, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %10, metadata !3263, metadata !DIExpression()), !dbg !3264
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3265
  %12 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %11, i32 0, i32 0, !dbg !3267
  %13 = load i32, i32* %12, align 8, !dbg !3267
  %14 = and i32 %13, 256, !dbg !3268
  %15 = icmp ne i32 %14, 0, !dbg !3268
  %16 = load i32, i32* @x.59
  %17 = load i32, i32* @y.60
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %43, !dbg !3269

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.59
  %26 = load i32, i32* @y.60
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %24, %originalBB10alteredBB
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3270
  %34 = call i32 @rpl_fseeko(%struct._IO_FILE* %33, i64 0, i32 1), !dbg !3271
  %35 = load i32, i32* @x.59
  %36 = load i32, i32* @y.60
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %43, !dbg !3271

43:                                               ; preds = %originalBBpart212, %originalBBpart2
  %44 = load i32, i32* @x.59
  %45 = load i32, i32* @y.60
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %43, %originalBB14alteredBB
  %52 = load i32, i32* @x.59
  %53 = load i32, i32* @y.60
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret void, !dbg !3272

originalBBalteredBB:                              ; preds = %originalBB, %1
  %60 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %60, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %60, metadata !3273, metadata !DIExpression()), !dbg !3264
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** %60, align 8, !dbg !3265
  %62 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %61, i32 0, i32 0, !dbg !3267
  %63 = load i32, i32* %62, align 8, !dbg !3267
  %_ = sub i32 0, %63
  %gen = add i32 %_, 256
  %_1 = sub i32 0, %63
  %gen2 = add i32 %_1, 256
  %_3 = sub i32 %63, 256
  %gen4 = mul i32 %_3, 256
  %_5 = shl i32 %63, 256
  %_6 = sub i32 %63, 256
  %gen7 = mul i32 %_6, 256
  %_8 = sub i32 %63, 256
  %gen9 = mul i32 %_8, 256
  %64 = and i32 %63, 256, !dbg !3268
  %65 = icmp ne i32 %64, 0, !dbg !3268
  br label %originalBB

originalBB10alteredBB:                            ; preds = %originalBB10, %24
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3270
  %67 = call i32 @rpl_fseeko(%struct._IO_FILE* %66, i64 0, i32 1), !dbg !3271
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %43
  br label %originalBB14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fseeko(%struct._IO_FILE* nonnull, i64, i32) #5 !dbg !3312 {
  %4 = alloca i32, align 4
  %5 = alloca %struct._IO_FILE*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %5, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %5, metadata !3351, metadata !DIExpression()), !dbg !3352
  store i64 %1, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !3353, metadata !DIExpression()), !dbg !3354
  store i32 %2, i32* %7, align 4
  call void @llvm.dbg.declare(metadata i32* %7, metadata !3355, metadata !DIExpression()), !dbg !3356
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !3357
  %10 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %9, i32 0, i32 2, !dbg !3359
  %11 = load i8*, i8** %10, align 8, !dbg !3359
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !3360
  %13 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %12, i32 0, i32 1, !dbg !3361
  %14 = load i8*, i8** %13, align 8, !dbg !3361
  %15 = icmp eq i8* %11, %14, !dbg !3362
  br i1 %15, label %16, label %126, !dbg !3363

16:                                               ; preds = %3
  %17 = load i32, i32* @x.61
  %18 = load i32, i32* @y.62
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %16, %originalBBalteredBB
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !3364
  %26 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %25, i32 0, i32 5, !dbg !3365
  %27 = load i8*, i8** %26, align 8, !dbg !3365
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !3366
  %29 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %28, i32 0, i32 4, !dbg !3367
  %30 = load i8*, i8** %29, align 8, !dbg !3367
  %31 = icmp eq i8* %27, %30, !dbg !3368
  %32 = load i32, i32* @x.61
  %33 = load i32, i32* @y.62
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %31, label %40, label %126, !dbg !3369

40:                                               ; preds = %originalBBpart2
  %41 = load i32, i32* @x.61
  %42 = load i32, i32* @y.62
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %40, %originalBB1alteredBB
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !3370
  %50 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %49, i32 0, i32 9, !dbg !3371
  %51 = load i8*, i8** %50, align 8, !dbg !3371
  %52 = icmp eq i8* %51, null, !dbg !3372
  %53 = load i32, i32* @x.61
  %54 = load i32, i32* @y.62
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %52, label %61, label %126, !dbg !3373

61:                                               ; preds = %originalBBpart24
  call void @llvm.dbg.declare(metadata i64* %8, metadata !3374, metadata !DIExpression()), !dbg !3376
  %62 = load i32, i32* @x.61
  %63 = load i32, i32* @y.62
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %61, %originalBB6alteredBB
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !3377
  %71 = call i32 @fileno(%struct._IO_FILE* %70) #10, !dbg !3378
  %72 = load i64, i64* %6, align 8, !dbg !3379
  %73 = load i32, i32* %7, align 4, !dbg !3380
  %74 = call i64 @lseek(i32 %71, i64 %72, i32 %73) #10, !dbg !3381
  store i64 %74, i64* %8, align 8, !dbg !3376
  %75 = load i64, i64* %8, align 8, !dbg !3382
  %76 = icmp eq i64 %75, -1, !dbg !3384
  %77 = load i32, i32* @x.61
  %78 = load i32, i32* @y.62
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %76, label %85, label %102, !dbg !3385

85:                                               ; preds = %originalBBpart28
  %86 = load i32, i32* @x.61
  %87 = load i32, i32* @y.62
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %85, %originalBB10alteredBB
  store i32 -1, i32* %4, align 4, !dbg !3386
  %94 = load i32, i32* @x.61
  %95 = load i32, i32* @y.62
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %147, !dbg !3386

102:                                              ; preds = %originalBBpart28
  %103 = load i32, i32* @x.61
  %104 = load i32, i32* @y.62
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %102, %originalBB14alteredBB
  %111 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !3388
  %112 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %111, i32 0, i32 0, !dbg !3389
  %113 = load i32, i32* %112, align 8, !dbg !3390
  %114 = and i32 %113, -17, !dbg !3390
  store i32 %114, i32* %112, align 8, !dbg !3390
  %115 = load i64, i64* %8, align 8, !dbg !3391
  %116 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !3392
  %117 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %116, i32 0, i32 21, !dbg !3393
  store i64 %115, i64* %117, align 8, !dbg !3394
  store i32 0, i32* %4, align 4, !dbg !3395
  %118 = load i32, i32* @x.61
  %119 = load i32, i32* @y.62
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBBpart217, label %originalBB14alteredBB

originalBBpart217:                                ; preds = %originalBB14
  br label %147, !dbg !3395

126:                                              ; preds = %originalBBpart24, %originalBBpart2, %3
  %127 = load i32, i32* @x.61
  %128 = load i32, i32* @y.62
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %126, %originalBB19alteredBB
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !3396
  %136 = load i64, i64* %6, align 8, !dbg !3397
  %137 = load i32, i32* %7, align 4, !dbg !3398
  %138 = call i32 @fseeko(%struct._IO_FILE* %135, i64 %136, i32 %137), !dbg !3399
  store i32 %138, i32* %4, align 4, !dbg !3400
  %139 = load i32, i32* @x.61
  %140 = load i32, i32* @y.62
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br label %147, !dbg !3400

147:                                              ; preds = %originalBBpart221, %originalBBpart217, %originalBBpart212
  %148 = load i32, i32* @x.61
  %149 = load i32, i32* @y.62
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %147, %originalBB23alteredBB
  %156 = load i32, i32* %4, align 4, !dbg !3401
  %157 = load i32, i32* @x.61
  %158 = load i32, i32* @y.62
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  ret i32 %156, !dbg !3401

originalBBalteredBB:                              ; preds = %originalBB, %16
  %165 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !3364
  %166 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %165, i32 0, i32 5, !dbg !3365
  %167 = load i8*, i8** %166, align 8, !dbg !3365
  %168 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !3366
  %169 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %168, i32 0, i32 4, !dbg !3367
  %170 = load i8*, i8** %169, align 8, !dbg !3367
  %171 = icmp eq i8* %167, %170, !dbg !3368
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %40
  %172 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !3370
  %173 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %172, i32 0, i32 9, !dbg !3371
  %174 = load i8*, i8** %173, align 8, !dbg !3371
  %175 = icmp eq i8* %174, null, !dbg !3372
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %61
  %176 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !3377
  %177 = call i32 @fileno(%struct._IO_FILE* %176) #10, !dbg !3378
  %178 = load i64, i64* %6, align 8, !dbg !3379
  %179 = load i32, i32* %7, align 4, !dbg !3380
  %180 = call i64 @lseek(i32 %177, i64 %178, i32 %179) #10, !dbg !3381
  store i64 %180, i64* %8, align 8, !dbg !3376
  %181 = load i64, i64* %8, align 8, !dbg !3382
  %182 = icmp eq i64 %181, -1, !dbg !3384
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %85
  store i32 -1, i32* %4, align 4, !dbg !3386
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %102
  %183 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !3388
  %184 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %183, i32 0, i32 0, !dbg !3389
  %185 = load i32, i32* %184, align 8, !dbg !3390
  %_ = shl i32 %185, -17
  %_15 = shl i32 %185, -17
  %186 = and i32 %185, -17, !dbg !3390
  store i32 %186, i32* %184, align 8, !dbg !3390
  %187 = load i64, i64* %8, align 8, !dbg !3391
  %188 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !3392
  %189 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %188, i32 0, i32 21, !dbg !3393
  store i64 %187, i64* %189, align 8, !dbg !3394
  store i32 0, i32* %4, align 4, !dbg !3395
  br label %originalBB14

originalBB19alteredBB:                            ; preds = %originalBB19, %126
  %190 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !3396
  %191 = load i64, i64* %6, align 8, !dbg !3397
  %192 = load i32, i32* %7, align 4, !dbg !3398
  %193 = call i32 @fseeko(%struct._IO_FILE* %190, i64 %191, i32 %192), !dbg !3399
  store i32 %193, i32* %4, align 4, !dbg !3400
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %147
  %194 = load i32, i32* %4, align 4, !dbg !3401
  br label %originalBB23
}

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @c_tolower(i32) #5 !dbg !3402 {
  %2 = load i32, i32* @x.63
  %3 = load i32, i32* @y.64
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3406, metadata !DIExpression()), !dbg !3407
  %12 = load i32, i32* %11, align 4, !dbg !3408
  %13 = load i32, i32* @x.63
  %14 = load i32, i32* @y.64
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %12, label %25 [
    i32 65, label %21
    i32 66, label %21
    i32 67, label %21
    i32 68, label %21
    i32 69, label %21
    i32 70, label %21
    i32 71, label %21
    i32 72, label %21
    i32 73, label %21
    i32 74, label %21
    i32 75, label %21
    i32 76, label %21
    i32 77, label %21
    i32 78, label %21
    i32 79, label %21
    i32 80, label %21
    i32 81, label %21
    i32 82, label %21
    i32 83, label %21
    i32 84, label %21
    i32 85, label %21
    i32 86, label %21
    i32 87, label %21
    i32 88, label %21
    i32 89, label %21
    i32 90, label %21
  ], !dbg !3409

21:                                               ; preds = %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2
  %22 = load i32, i32* %11, align 4, !dbg !3410
  %23 = sub nsw i32 %22, 65, !dbg !3412
  %24 = add nsw i32 %23, 97, !dbg !3413
  store i32 %24, i32* %10, align 4, !dbg !3414
  br label %43, !dbg !3414

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.63
  %27 = load i32, i32* @y.64
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  %34 = load i32, i32* %11, align 4, !dbg !3415
  store i32 %34, i32* %10, align 4, !dbg !3416
  %35 = load i32, i32* @x.63
  %36 = load i32, i32* @y.64
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %43, !dbg !3416

43:                                               ; preds = %originalBBpart24, %21
  %44 = load i32, i32* @x.63
  %45 = load i32, i32* @y.64
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  %52 = load i32, i32* %10, align 4, !dbg !3417
  %53 = load i32, i32* @x.63
  %54 = load i32, i32* @y.64
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i32 %52, !dbg !3417

originalBBalteredBB:                              ; preds = %originalBB, %1
  %61 = alloca i32, align 4
  %62 = alloca i32, align 4
  store i32 %0, i32* %62, align 4
  call void @llvm.dbg.declare(metadata i32* %62, metadata !3418, metadata !DIExpression()), !dbg !3407
  %63 = load i32, i32* %62, align 4, !dbg !3408
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  %64 = load i32, i32* %11, align 4, !dbg !3415
  store i32 %64, i32* %10, align 4, !dbg !3416
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  %65 = load i32, i32* %10, align 4, !dbg !3417
  br label %originalBB6
}

define private i32 @controle(i8*, i32) {
  %3 = load i32, i32* @inVal0
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %2
  call void @srand(i32 %1)
  %6 = call i32 @rand()
  %7 = srem i32 %6, 50000
  %8 = add i32 %7, 2
  ret i32 %8

9:                                                ; preds = %2
  %10 = getelementptr inbounds [1 x i8], [1 x i8]* @.compVal2, i32 0, i32 0
  %11 = call i32 @strcmp(i8* %10, i8* %0)
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %48

13:                                               ; preds = %9
  %14 = load i32, i32* @x.65
  %15 = load i32, i32* @y.66
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %13, %originalBBalteredBB
  %22 = icmp eq i32 %1, 0
  %23 = load i32, i32* @x.65
  %24 = load i32, i32* @y.66
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %48

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.65
  %33 = load i32, i32* @y.66
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  %40 = load i32, i32* @x.65
  %41 = load i32, i32* @y.66
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  ret i32 5

48:                                               ; preds = %originalBBpart2, %9
  %49 = load i32, i32* @x.65
  %50 = load i32, i32* @y.66
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = getelementptr inbounds [2 x i8], [2 x i8]* @.compVal1, i32 0, i32 0
  %58 = call i32 @strcmp(i8* %57, i8* %0)
  %59 = icmp eq i32 %58, 0
  %60 = load i32, i32* @x.65
  %61 = load i32, i32* @y.66
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %59, label %68, label %87

68:                                               ; preds = %originalBBpart28
  %69 = icmp eq i32 %1, 0
  br i1 %69, label %70, label %87

70:                                               ; preds = %68
  %71 = load i32, i32* @x.65
  %72 = load i32, i32* @y.66
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %70, %originalBB10alteredBB
  %79 = load i32, i32* @x.65
  %80 = load i32, i32* @y.66
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i32 3

87:                                               ; preds = %68, %originalBBpart28
  %88 = load i32, i32* @x.65
  %89 = load i32, i32* @y.66
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %87, %originalBB14alteredBB
  %96 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %97 = call i32 @strcmp(i8* %96, i8* %0)
  %98 = icmp eq i32 %97, 0
  %99 = load i32, i32* @x.65
  %100 = load i32, i32* @y.66
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %98, label %107, label %142

107:                                              ; preds = %originalBBpart216
  %108 = load i32, i32* @x.65
  %109 = load i32, i32* @y.66
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %107, %originalBB18alteredBB
  %116 = icmp eq i32 %1, 0
  %117 = load i32, i32* @x.65
  %118 = load i32, i32* @y.66
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %116, label %125, label %142

125:                                              ; preds = %originalBBpart220
  %126 = load i32, i32* @x.65
  %127 = load i32, i32* @y.66
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %125, %originalBB22alteredBB
  %134 = load i32, i32* @x.65
  %135 = load i32, i32* @y.66
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret i32 3

142:                                              ; preds = %originalBBpart220, %originalBBpart216
  %143 = load i32, i32* @x.65
  %144 = load i32, i32* @y.66
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %142, %originalBB26alteredBB
  %151 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %152 = call i32 @strcmp(i8* %151, i8* %0)
  %153 = icmp eq i32 %152, 0
  %154 = load i32, i32* @x.65
  %155 = load i32, i32* @y.66
  %156 = sub i32 %154, 1
  %157 = mul i32 %154, %156
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %159, %160
  br i1 %161, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %153, label %162, label %197

162:                                              ; preds = %originalBBpart228
  %163 = load i32, i32* @x.65
  %164 = load i32, i32* @y.66
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %162, %originalBB30alteredBB
  %171 = icmp eq i32 %1, 2
  %172 = load i32, i32* @x.65
  %173 = load i32, i32* @y.66
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %171, label %180, label %197

180:                                              ; preds = %originalBBpart232
  %181 = load i32, i32* @x.65
  %182 = load i32, i32* @y.66
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %180, %originalBB34alteredBB
  %189 = load i32, i32* @x.65
  %190 = load i32, i32* @y.66
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  ret i32 5

197:                                              ; preds = %originalBBpart232, %originalBBpart228
  %198 = load i32, i32* @x.65
  %199 = load i32, i32* @y.66
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %197, %originalBB38alteredBB
  call void @srand(i32 %1)
  %206 = call i32 @rand()
  %207 = srem i32 %206, 50000
  %208 = add i32 %207, 2
  %209 = load i32, i32* @x.65
  %210 = load i32, i32* @y.66
  %211 = sub i32 %209, 1
  %212 = mul i32 %209, %211
  %213 = urem i32 %212, 2
  %214 = icmp eq i32 %213, 0
  %215 = icmp slt i32 %210, 10
  %216 = or i1 %214, %215
  br i1 %216, label %originalBBpart249, label %originalBB38alteredBB

originalBBpart249:                                ; preds = %originalBB38
  ret i32 %208

originalBBalteredBB:                              ; preds = %originalBB, %13
  %217 = icmp eq i32 %1, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %218 = getelementptr inbounds [2 x i8], [2 x i8]* @.compVal1, i32 0, i32 0
  %219 = call i32 @strcmp(i8* %218, i8* %0)
  %220 = icmp eq i32 %219, 0
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %70
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %87
  %221 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %222 = call i32 @strcmp(i8* %221, i8* %0)
  %223 = icmp eq i32 %222, 0
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %107
  %224 = icmp eq i32 %1, 0
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %125
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %142
  %225 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %226 = call i32 @strcmp(i8* %225, i8* %0)
  %227 = icmp eq i32 %226, 0
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %162
  %228 = icmp eq i32 %1, 2
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %180
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %197
  call void @srand(i32 %1)
  %229 = call i32 @rand()
  %230 = srem i32 %229, 50000
  %_ = shl i32 %230, 2
  %_39 = sub i32 0, %230
  %gen = add i32 %_39, 2
  %_40 = sub i32 %230, 2
  %gen41 = mul i32 %_40, 2
  %_42 = sub i32 %230, 2
  %gen43 = mul i32 %_42, 2
  %_44 = sub i32 0, %230
  %gen45 = add i32 %_44, 2
  %_46 = sub i32 0, %230
  %gen47 = add i32 %_46, 2
  %231 = add i32 %230, 2
  br label %originalBB38
}

declare void @srand(i32)

declare i32 @rand()

attributes #0 = { noinline noreturn nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noinline nounwind optnone readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { noreturn }
attributes #15 = { nounwind readnone }

!llvm.dbg.cu = !{!111, !2, !11, !20, !28, !37, !114, !104, !117, !120, !122, !125, !131, !133, !135, !137, !139, !141, !143, !145}
!llvm.ident = !{!147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147, !147}
!llvm.module.flags = !{!148, !149, !150, !151, !152}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "Version", scope: !2, file: !3, line: 2, type: !6, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5, nameTableKind: None)
!3 = !DIFile(filename: "src/version.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4 = !{}
!5 = !{!0}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8)
!8 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!9 = !DIGlobalVariableExpression(var: !10, expr: !DIExpression())
!10 = distinct !DIGlobalVariable(name: "ignore_EPIPE", scope: !11, file: !16, line: 56, type: !17, isLocal: true, isDefinition: true)
!11 = distinct !DICompileUnit(language: DW_LANG_C99, file: !12, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !13, nameTableKind: None)
!12 = !DIFile(filename: "./lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!13 = !{!14, !9}
!14 = !DIGlobalVariableExpression(var: !15, expr: !DIExpression())
!15 = distinct !DIGlobalVariable(name: "file_name", scope: !11, file: !16, line: 46, type: !6, isLocal: true, isDefinition: true)
!16 = !DIFile(filename: "lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!17 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!18 = !DIGlobalVariableExpression(var: !19, expr: !DIExpression())
!19 = distinct !DIGlobalVariable(name: "exit_failure", scope: !20, file: !23, line: 24, type: !24, isLocal: false, isDefinition: true)
!20 = distinct !DICompileUnit(language: DW_LANG_C99, file: !21, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !22, nameTableKind: None)
!21 = !DIFile(filename: "./lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!22 = !{!18}
!23 = !DIFile(filename: "lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!24 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !25)
!25 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(name: "program_name", scope: !28, file: !34, line: 33, type: !6, isLocal: false, isDefinition: true)
!28 = distinct !DICompileUnit(language: DW_LANG_C99, file: !29, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !30, globals: !33, nameTableKind: None)
!29 = !DIFile(filename: "./lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!30 = !{!31, !32}
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!32 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!33 = !{!26}
!34 = !DIFile(filename: "lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !37, file: !63, line: 116, type: !76, isLocal: true, isDefinition: true)
!37 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !60, nameTableKind: None)
!38 = !DIFile(filename: "./lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!39 = !{!40}
!40 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "quoting_style", file: !41, line: 32, baseType: !42, size: 32, elements: !43)
!41 = !DIFile(filename: "./lib/quotearg.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!42 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!43 = !{!44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54}
!44 = !DIEnumerator(name: "literal_quoting_style", value: 0, isUnsigned: true)
!45 = !DIEnumerator(name: "shell_quoting_style", value: 1, isUnsigned: true)
!46 = !DIEnumerator(name: "shell_always_quoting_style", value: 2, isUnsigned: true)
!47 = !DIEnumerator(name: "shell_escape_quoting_style", value: 3, isUnsigned: true)
!48 = !DIEnumerator(name: "shell_escape_always_quoting_style", value: 4, isUnsigned: true)
!49 = !DIEnumerator(name: "c_quoting_style", value: 5, isUnsigned: true)
!50 = !DIEnumerator(name: "c_maybe_quoting_style", value: 6, isUnsigned: true)
!51 = !DIEnumerator(name: "escape_quoting_style", value: 7, isUnsigned: true)
!52 = !DIEnumerator(name: "locale_quoting_style", value: 8, isUnsigned: true)
!53 = !DIEnumerator(name: "clocale_quoting_style", value: 9, isUnsigned: true)
!54 = !DIEnumerator(name: "custom_quoting_style", value: 10, isUnsigned: true)
!55 = !{!25, !56, !57}
!56 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!57 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !58, line: 46, baseType: !59)
!58 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stddef.h", directory: "")
!59 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!60 = !{!61, !68, !74, !35, !86, !91, !98, !100}
!61 = !DIGlobalVariableExpression(var: !62, expr: !DIExpression())
!62 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !37, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!63 = !DIFile(filename: "lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!64 = !DICompositeType(tag: DW_TAG_array_type, baseType: !65, size: 704, elements: !66)
!65 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6)
!66 = !{!67}
!67 = !DISubrange(count: 11)
!68 = !DIGlobalVariableExpression(var: !69, expr: !DIExpression())
!69 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !37, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!70 = !DICompositeType(tag: DW_TAG_array_type, baseType: !71, size: 320, elements: !72)
!71 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !40)
!72 = !{!73}
!73 = !DISubrange(count: 10)
!74 = !DIGlobalVariableExpression(var: !75, expr: !DIExpression())
!75 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !37, file: !63, line: 1052, type: !76, isLocal: false, isDefinition: true)
!76 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !77)
!77 = !{!78, !79, !80, !84, !85}
!78 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !76, file: !63, line: 68, baseType: !40, size: 32)
!79 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !76, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!80 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !76, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!81 = !DICompositeType(tag: DW_TAG_array_type, baseType: !42, size: 256, elements: !82)
!82 = !{!83}
!83 = !DISubrange(count: 8)
!84 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !76, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!85 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !76, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!86 = !DIGlobalVariableExpression(var: !87, expr: !DIExpression())
!87 = distinct !DIGlobalVariable(name: "slot0", scope: !37, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!88 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2048, elements: !89)
!89 = !{!90}
!90 = !DISubrange(count: 256)
!91 = !DIGlobalVariableExpression(var: !92, expr: !DIExpression())
!92 = distinct !DIGlobalVariable(name: "slotvec", scope: !37, file: !63, line: 845, type: !93, isLocal: true, isDefinition: true)
!93 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !94, size: 64)
!94 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !95)
!95 = !{!96, !97}
!96 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !94, file: !63, line: 836, baseType: !57, size: 64)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !94, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!98 = !DIGlobalVariableExpression(var: !99, expr: !DIExpression())
!99 = distinct !DIGlobalVariable(name: "nslots", scope: !37, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!100 = !DIGlobalVariableExpression(var: !101, expr: !DIExpression())
!101 = distinct !DIGlobalVariable(name: "slotvec0", scope: !37, file: !63, line: 844, type: !94, isLocal: true, isDefinition: true)
!102 = !DIGlobalVariableExpression(var: !103, expr: !DIExpression())
!103 = distinct !DIGlobalVariable(name: "version_etc_copyright", scope: !104, file: !107, line: 26, type: !108, isLocal: false, isDefinition: true)
!104 = distinct !DICompileUnit(language: DW_LANG_C99, file: !105, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !106, nameTableKind: None)
!105 = !DIFile(filename: "./lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!106 = !{!102}
!107 = !DIFile(filename: "lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!108 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 376, elements: !109)
!109 = !{!110}
!110 = !DISubrange(count: 47)
!111 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!112 = !DIFile(filename: "src/echo.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!113 = !{!32, !31, !25, !56}
!114 = distinct !DICompileUnit(language: DW_LANG_C99, file: !115, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!115 = !DIFile(filename: "./lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!116 = !{!31}
!117 = distinct !DICompileUnit(language: DW_LANG_C99, file: !118, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !119, nameTableKind: None)
!118 = !DIFile(filename: "./lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!119 = !{!57, !32, !31}
!120 = distinct !DICompileUnit(language: DW_LANG_C99, file: !121, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!121 = !DIFile(filename: "./lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!122 = distinct !DICompileUnit(language: DW_LANG_C99, file: !123, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !124, nameTableKind: None)
!123 = !DIFile(filename: "./lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!124 = !{!57}
!125 = distinct !DICompileUnit(language: DW_LANG_C99, file: !126, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !127, nameTableKind: None)
!126 = !DIFile(filename: "./lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!127 = !{!128}
!128 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !129, size: 64)
!129 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !130)
!130 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!131 = distinct !DICompileUnit(language: DW_LANG_C99, file: !132, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!132 = !DIFile(filename: "./lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!133 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!134 = !DIFile(filename: "./lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!135 = distinct !DICompileUnit(language: DW_LANG_C99, file: !136, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!136 = !DIFile(filename: "./lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!137 = distinct !DICompileUnit(language: DW_LANG_C99, file: !138, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!138 = !DIFile(filename: "./lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!139 = distinct !DICompileUnit(language: DW_LANG_C99, file: !140, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!140 = !DIFile(filename: "./lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!141 = distinct !DICompileUnit(language: DW_LANG_C99, file: !142, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!142 = !DIFile(filename: "./lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!143 = distinct !DICompileUnit(language: DW_LANG_C99, file: !144, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!144 = !DIFile(filename: "./lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!145 = distinct !DICompileUnit(language: DW_LANG_C99, file: !146, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!146 = !DIFile(filename: "./lib/c-ctype.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!147 = !{!"clang version 9.0.1-12 "}
!148 = !{i32 2, !"Dwarf Version", i32 4}
!149 = !{i32 2, !"Debug Info Version", i32 3}
!150 = !{i32 1, !"wchar_size", i32 4}
!151 = !{i32 1, !"ThinLTO", i32 0}
!152 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!153 = distinct !DISubprogram(name: "usage", scope: !112, file: !112, line: 36, type: !154, scopeLine: 37, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !111, retainedNodes: !4)
!154 = !DISubroutineType(types: !155)
!155 = !{null, !25}
!156 = !DILocalVariable(name: "status", arg: 1, scope: !153, file: !112, line: 36, type: !25)
!157 = !DILocation(line: 36, column: 12, scope: !153)
!158 = !DILocation(line: 40, column: 3, scope: !159)
!159 = distinct !DILexicalBlock(scope: !160, file: !112, line: 40, column: 3)
!160 = distinct !DILexicalBlock(scope: !153, file: !112, line: 40, column: 3)
!161 = !DILocation(line: 40, column: 3, scope: !160)
!162 = !DILocation(line: 42, column: 11, scope: !153)
!163 = !DILocation(line: 45, column: 5, scope: !153)
!164 = !DILocation(line: 45, column: 19, scope: !153)
!165 = !DILocation(line: 42, column: 3, scope: !153)
!166 = !DILocation(line: 46, column: 3, scope: !153)
!167 = !DILocation(line: 51, column: 3, scope: !153)
!168 = !DILocation(line: 59, column: 3, scope: !153)
!169 = !DILocation(line: 60, column: 3, scope: !153)
!170 = !DILocation(line: 61, column: 3, scope: !153)
!171 = !DILocation(line: 66, column: 3, scope: !153)
!172 = !DILocation(line: 78, column: 3, scope: !153)
!173 = !DILocation(line: 82, column: 11, scope: !153)
!174 = !DILocation(line: 82, column: 3, scope: !153)
!175 = !DILocation(line: 83, column: 3, scope: !153)
!176 = !DILocation(line: 84, column: 9, scope: !153)
!177 = !DILocation(line: 84, column: 3, scope: !153)
!178 = !DILocalVariable(name: "status", arg: 1, scope: !179, file: !112, line: 36, type: !25)
!179 = distinct !DISubprogram(name: "usage", scope: !112, file: !112, line: 36, type: !154, scopeLine: 37, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !180, retainedNodes: !4)
!180 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!181 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !182, file: !182, line: 634, type: !183, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !111, retainedNodes: !4)
!182 = !DIFile(filename: "src/system.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!183 = !DISubroutineType(types: !184)
!184 = !{null, !6}
!185 = !DILocalVariable(name: "program", arg: 1, scope: !181, file: !182, line: 634, type: !6)
!186 = !DILocation(line: 634, column: 34, scope: !181)
!187 = !DILocalVariable(name: "infomap", scope: !181, file: !182, line: 636, type: !188)
!188 = !DICompositeType(tag: DW_TAG_array_type, baseType: !189, size: 896, elements: !194)
!189 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !190)
!190 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !181, file: !182, line: 636, size: 128, elements: !191)
!191 = !{!192, !193}
!192 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !190, file: !182, line: 636, baseType: !6, size: 64)
!193 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !190, file: !182, line: 636, baseType: !6, size: 64, offset: 64)
!194 = !{!195}
!195 = !DISubrange(count: 7)
!196 = !DILocation(line: 636, column: 67, scope: !181)
!197 = !DILocalVariable(name: "node", scope: !181, file: !182, line: 646, type: !6)
!198 = !DILocation(line: 646, column: 15, scope: !181)
!199 = !DILocation(line: 646, column: 22, scope: !181)
!200 = !DILocalVariable(name: "map_prog", scope: !181, file: !182, line: 647, type: !201)
!201 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !189, size: 64)
!202 = !DILocation(line: 647, column: 25, scope: !181)
!203 = !DILocation(line: 647, column: 36, scope: !181)
!204 = !DILocation(line: 649, column: 3, scope: !181)
!205 = !DILocation(line: 649, column: 10, scope: !181)
!206 = !DILocation(line: 649, column: 20, scope: !181)
!207 = !DILocation(line: 649, column: 28, scope: !181)
!208 = !DILocation(line: 649, column: 33, scope: !181)
!209 = !DILocation(line: 649, column: 31, scope: !181)
!210 = !DILocation(line: 0, scope: !181)
!211 = !DILocation(line: 650, column: 13, scope: !181)
!212 = distinct !{!212, !204, !211}
!213 = !DILocation(line: 652, column: 7, scope: !214)
!214 = distinct !DILexicalBlock(scope: !181, file: !182, line: 652, column: 7)
!215 = !DILocation(line: 652, column: 17, scope: !214)
!216 = !DILocation(line: 652, column: 7, scope: !181)
!217 = !DILocation(line: 653, column: 12, scope: !214)
!218 = !DILocation(line: 653, column: 22, scope: !214)
!219 = !DILocation(line: 653, column: 10, scope: !214)
!220 = !DILocation(line: 653, column: 5, scope: !214)
!221 = !DILocation(line: 655, column: 11, scope: !181)
!222 = !DILocation(line: 655, column: 3, scope: !181)
!223 = !DILocalVariable(name: "lc_messages", scope: !181, file: !182, line: 659, type: !6)
!224 = !DILocation(line: 659, column: 15, scope: !181)
!225 = !DILocation(line: 659, column: 29, scope: !181)
!226 = !DILocation(line: 660, column: 7, scope: !227)
!227 = distinct !DILexicalBlock(scope: !181, file: !182, line: 660, column: 7)
!228 = !DILocation(line: 660, column: 19, scope: !227)
!229 = !DILocation(line: 660, column: 22, scope: !227)
!230 = !DILocation(line: 660, column: 7, scope: !181)
!231 = !DILocation(line: 666, column: 7, scope: !232)
!232 = distinct !DILexicalBlock(scope: !227, file: !182, line: 661, column: 5)
!233 = !DILocation(line: 668, column: 5, scope: !232)
!234 = !DILocation(line: 669, column: 11, scope: !181)
!235 = !DILocation(line: 670, column: 24, scope: !181)
!236 = !DILocation(line: 669, column: 3, scope: !181)
!237 = !DILocation(line: 671, column: 11, scope: !181)
!238 = !DILocation(line: 672, column: 11, scope: !181)
!239 = !DILocation(line: 672, column: 17, scope: !181)
!240 = !DILocation(line: 672, column: 25, scope: !181)
!241 = !DILocation(line: 672, column: 22, scope: !181)
!242 = !DILocation(line: 671, column: 3, scope: !181)
!243 = !DILocation(line: 673, column: 1, scope: !181)
!244 = !DILocalVariable(name: "program", arg: 1, scope: !245, file: !182, line: 634, type: !6)
!245 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !182, file: !182, line: 634, type: !183, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !246, retainedNodes: !4)
!246 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!247 = !DILocalVariable(name: "infomap", scope: !245, file: !182, line: 636, type: !248)
!248 = !DICompositeType(tag: DW_TAG_array_type, baseType: !249, size: 896, elements: !194)
!249 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !250)
!250 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !245, file: !182, line: 636, size: 128, elements: !251)
!251 = !{!252, !253}
!252 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !250, file: !182, line: 636, baseType: !6, size: 64)
!253 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !250, file: !182, line: 636, baseType: !6, size: 64, offset: 64)
!254 = !DILocalVariable(name: "node", scope: !245, file: !182, line: 646, type: !6)
!255 = !DILocalVariable(name: "map_prog", scope: !245, file: !182, line: 647, type: !256)
!256 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !249, size: 64)
!257 = !DILocalVariable(name: "lc_messages", scope: !258, file: !182, line: 659, type: !6)
!258 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !182, file: !182, line: 634, type: !183, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !259, retainedNodes: !4)
!259 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!260 = distinct !DISubprogram(name: "main", scope: !112, file: !112, line: 108, type: !261, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !111, retainedNodes: !4)
!261 = !DISubroutineType(types: !262)
!262 = !{!25, !25, !263}
!263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !32, size: 64)
!264 = !DILocalVariable(name: "argc", arg: 1, scope: !260, file: !112, line: 108, type: !25)
!265 = !DILocation(line: 108, column: 11, scope: !260)
!266 = !DILocalVariable(name: "argv", arg: 2, scope: !260, file: !112, line: 108, type: !263)
!267 = !DILocation(line: 108, column: 24, scope: !260)
!268 = !DILocalVariable(name: "display_return", scope: !260, file: !112, line: 110, type: !17)
!269 = !DILocation(line: 110, column: 8, scope: !260)
!270 = !DILocalVariable(name: "posixly_correct", scope: !260, file: !112, line: 111, type: !17)
!271 = !DILocation(line: 111, column: 8, scope: !260)
!272 = !DILocation(line: 111, column: 26, scope: !260)
!273 = !DILocalVariable(name: "allow_options", scope: !260, file: !112, line: 112, type: !17)
!274 = !DILocation(line: 112, column: 8, scope: !260)
!275 = !DILocation(line: 113, column: 8, scope: !260)
!276 = !DILocation(line: 114, column: 6, scope: !260)
!277 = !DILocation(line: 114, column: 39, scope: !260)
!278 = !DILocation(line: 114, column: 37, scope: !260)
!279 = !DILocation(line: 114, column: 44, scope: !260)
!280 = !DILocation(line: 114, column: 47, scope: !260)
!281 = !DILocation(line: 0, scope: !260)
!282 = !DILocalVariable(name: "do_v9", scope: !260, file: !112, line: 119, type: !17)
!283 = !DILocation(line: 119, column: 8, scope: !260)
!284 = !DILocation(line: 122, column: 21, scope: !260)
!285 = !DILocation(line: 122, column: 3, scope: !260)
!286 = !DILocation(line: 123, column: 3, scope: !260)
!287 = !DILocation(line: 124, column: 3, scope: !260)
!288 = !DILocation(line: 125, column: 3, scope: !260)
!289 = !DILocation(line: 127, column: 3, scope: !260)
!290 = !DILocation(line: 131, column: 7, scope: !291)
!291 = distinct !DILexicalBlock(scope: !260, file: !112, line: 131, column: 7)
!292 = !DILocation(line: 131, column: 21, scope: !291)
!293 = !DILocation(line: 131, column: 24, scope: !291)
!294 = !DILocation(line: 131, column: 29, scope: !291)
!295 = !DILocation(line: 133, column: 11, scope: !296)
!296 = distinct !DILexicalBlock(scope: !297, file: !112, line: 133, column: 11)
!297 = distinct !DILexicalBlock(scope: !291, file: !112, line: 132, column: 5)
!298 = !DILocation(line: 134, column: 9, scope: !296)
!299 = !DILocation(line: 136, column: 11, scope: !300)
!300 = distinct !DILexicalBlock(scope: !297, file: !112, line: 136, column: 11)
!301 = !DILocation(line: 138, column: 24, scope: !302)
!302 = distinct !DILexicalBlock(scope: !300, file: !112, line: 137, column: 9)
!303 = !DILocation(line: 138, column: 60, scope: !302)
!304 = !DILocation(line: 138, column: 11, scope: !302)
!305 = !DILocation(line: 140, column: 11, scope: !302)
!306 = !DILocation(line: 142, column: 5, scope: !297)
!307 = !DILocation(line: 144, column: 3, scope: !260)
!308 = !DILocation(line: 145, column: 3, scope: !260)
!309 = !DILocation(line: 147, column: 7, scope: !310)
!310 = distinct !DILexicalBlock(scope: !260, file: !112, line: 147, column: 7)
!311 = !DILocation(line: 147, column: 7, scope: !260)
!312 = !DILocation(line: 148, column: 5, scope: !310)
!313 = !DILocation(line: 148, column: 12, scope: !310)
!314 = !DILocation(line: 148, column: 17, scope: !310)
!315 = !DILocation(line: 148, column: 21, scope: !310)
!316 = !DILocation(line: 148, column: 25, scope: !310)
!317 = !DILocation(line: 148, column: 24, scope: !310)
!318 = !DILocation(line: 148, column: 33, scope: !310)
!319 = !DILocation(line: 0, scope: !310)
!320 = !DILocalVariable(name: "temp", scope: !321, file: !112, line: 150, type: !6)
!321 = distinct !DILexicalBlock(scope: !310, file: !112, line: 149, column: 7)
!322 = !DILocation(line: 150, column: 21, scope: !321)
!323 = !DILocation(line: 150, column: 28, scope: !321)
!324 = !DILocation(line: 150, column: 36, scope: !321)
!325 = !DILocalVariable(name: "i", scope: !321, file: !112, line: 151, type: !57)
!326 = !DILocation(line: 151, column: 16, scope: !321)
!327 = !DILocation(line: 157, column: 16, scope: !328)
!328 = distinct !DILexicalBlock(scope: !321, file: !112, line: 157, column: 9)
!329 = !DILocation(line: 157, column: 14, scope: !328)
!330 = !DILocation(line: 157, column: 21, scope: !331)
!331 = distinct !DILexicalBlock(scope: !328, file: !112, line: 157, column: 9)
!332 = !DILocation(line: 157, column: 26, scope: !331)
!333 = !DILocation(line: 157, column: 9, scope: !328)
!334 = !DILocation(line: 158, column: 19, scope: !331)
!335 = !DILocation(line: 158, column: 24, scope: !331)
!336 = !DILocation(line: 158, column: 11, scope: !331)
!337 = !DILocation(line: 161, column: 15, scope: !338)
!338 = distinct !DILexicalBlock(scope: !331, file: !112, line: 159, column: 13)
!339 = !DILocation(line: 163, column: 15, scope: !338)
!340 = !DILocation(line: 164, column: 13, scope: !338)
!341 = !DILocation(line: 157, column: 31, scope: !331)
!342 = !DILocation(line: 157, column: 9, scope: !331)
!343 = distinct !{!343, !333, !344}
!344 = !DILocation(line: 164, column: 13, scope: !328)
!345 = !DILocation(line: 166, column: 13, scope: !346)
!346 = distinct !DILexicalBlock(scope: !321, file: !112, line: 166, column: 13)
!347 = !DILocation(line: 166, column: 15, scope: !346)
!348 = !DILocation(line: 167, column: 11, scope: !346)
!349 = !DILocation(line: 171, column: 9, scope: !321)
!350 = !DILocation(line: 171, column: 17, scope: !321)
!351 = !DILocation(line: 171, column: 16, scope: !321)
!352 = !DILocation(line: 172, column: 24, scope: !321)
!353 = !DILocation(line: 172, column: 19, scope: !321)
!354 = !DILocation(line: 172, column: 11, scope: !321)
!355 = !DILocation(line: 175, column: 21, scope: !356)
!356 = distinct !DILexicalBlock(scope: !321, file: !112, line: 173, column: 13)
!357 = !DILocation(line: 176, column: 15, scope: !356)
!358 = !DILocation(line: 179, column: 21, scope: !356)
!359 = !DILocation(line: 180, column: 15, scope: !356)
!360 = !DILocation(line: 183, column: 30, scope: !356)
!361 = !DILocation(line: 184, column: 15, scope: !356)
!362 = distinct !{!362, !349, !363}
!363 = !DILocation(line: 185, column: 13, scope: !321)
!364 = !DILocation(line: 187, column: 13, scope: !321)
!365 = !DILocation(line: 188, column: 13, scope: !321)
!366 = distinct !{!366, !312, !367}
!367 = !DILocation(line: 189, column: 7, scope: !310)
!368 = !DILabel(scope: !260, name: "just_echo", file: !112, line: 191)
!369 = !DILocation(line: 191, column: 1, scope: !260)
!370 = !DILocation(line: 193, column: 7, scope: !371)
!371 = distinct !DILexicalBlock(scope: !260, file: !112, line: 193, column: 7)
!372 = !DILocation(line: 193, column: 13, scope: !371)
!373 = !DILocation(line: 193, column: 16, scope: !371)
!374 = !DILocation(line: 193, column: 7, scope: !260)
!375 = !DILocation(line: 195, column: 7, scope: !376)
!376 = distinct !DILexicalBlock(scope: !371, file: !112, line: 194, column: 5)
!377 = !DILocation(line: 195, column: 14, scope: !376)
!378 = !DILocation(line: 195, column: 19, scope: !376)
!379 = !DILocalVariable(name: "s", scope: !380, file: !112, line: 197, type: !6)
!380 = distinct !DILexicalBlock(scope: !376, file: !112, line: 196, column: 9)
!381 = !DILocation(line: 197, column: 23, scope: !380)
!382 = !DILocation(line: 197, column: 27, scope: !380)
!383 = !DILocalVariable(name: "c", scope: !380, file: !112, line: 198, type: !130)
!384 = !DILocation(line: 198, column: 25, scope: !380)
!385 = !DILocation(line: 200, column: 11, scope: !380)
!386 = !DILocation(line: 200, column: 25, scope: !380)
!387 = !DILocation(line: 200, column: 23, scope: !380)
!388 = !DILocation(line: 200, column: 21, scope: !380)
!389 = !DILocation(line: 202, column: 19, scope: !390)
!390 = distinct !DILexicalBlock(scope: !391, file: !112, line: 202, column: 19)
!391 = distinct !DILexicalBlock(scope: !380, file: !112, line: 201, column: 13)
!392 = !DILocation(line: 202, column: 21, scope: !390)
!393 = !DILocation(line: 202, column: 29, scope: !390)
!394 = !DILocation(line: 202, column: 33, scope: !390)
!395 = !DILocation(line: 202, column: 32, scope: !390)
!396 = !DILocation(line: 202, column: 19, scope: !391)
!397 = !DILocation(line: 204, column: 33, scope: !398)
!398 = distinct !DILexicalBlock(scope: !390, file: !112, line: 203, column: 17)
!399 = !DILocation(line: 204, column: 31, scope: !398)
!400 = !DILocation(line: 204, column: 29, scope: !398)
!401 = !DILocation(line: 204, column: 27, scope: !398)
!402 = !DILocation(line: 204, column: 19, scope: !398)
!403 = !DILocation(line: 206, column: 33, scope: !404)
!404 = distinct !DILexicalBlock(scope: !398, file: !112, line: 205, column: 21)
!405 = !DILocation(line: 206, column: 41, scope: !404)
!406 = !DILocation(line: 207, column: 33, scope: !404)
!407 = !DILocation(line: 207, column: 41, scope: !404)
!408 = !DILocation(line: 208, column: 31, scope: !404)
!409 = !DILocation(line: 209, column: 33, scope: !404)
!410 = !DILocation(line: 209, column: 43, scope: !404)
!411 = !DILocation(line: 210, column: 33, scope: !404)
!412 = !DILocation(line: 210, column: 41, scope: !404)
!413 = !DILocation(line: 211, column: 33, scope: !404)
!414 = !DILocation(line: 211, column: 41, scope: !404)
!415 = !DILocation(line: 212, column: 33, scope: !404)
!416 = !DILocation(line: 212, column: 41, scope: !404)
!417 = !DILocation(line: 213, column: 33, scope: !404)
!418 = !DILocation(line: 213, column: 41, scope: !404)
!419 = !DILocation(line: 214, column: 33, scope: !404)
!420 = !DILocation(line: 214, column: 41, scope: !404)
!421 = !DILocalVariable(name: "ch", scope: !422, file: !112, line: 217, type: !130)
!422 = distinct !DILexicalBlock(scope: !404, file: !112, line: 216, column: 23)
!423 = !DILocation(line: 217, column: 39, scope: !422)
!424 = !DILocation(line: 217, column: 45, scope: !422)
!425 = !DILocation(line: 217, column: 44, scope: !422)
!426 = !DILocation(line: 218, column: 31, scope: !427)
!427 = distinct !DILexicalBlock(scope: !422, file: !112, line: 218, column: 29)
!428 = !DILocation(line: 218, column: 29, scope: !422)
!429 = !DILocation(line: 219, column: 27, scope: !427)
!430 = !DILocation(line: 220, column: 26, scope: !422)
!431 = !DILocation(line: 221, column: 39, scope: !422)
!432 = !DILocation(line: 221, column: 29, scope: !422)
!433 = !DILocation(line: 221, column: 27, scope: !422)
!434 = !DILocation(line: 222, column: 31, scope: !422)
!435 = !DILocation(line: 222, column: 30, scope: !422)
!436 = !DILocation(line: 222, column: 28, scope: !422)
!437 = !DILocation(line: 223, column: 29, scope: !438)
!438 = distinct !DILexicalBlock(scope: !422, file: !112, line: 223, column: 29)
!439 = !DILocation(line: 223, column: 29, scope: !422)
!440 = !DILocation(line: 225, column: 30, scope: !441)
!441 = distinct !DILexicalBlock(scope: !438, file: !112, line: 224, column: 27)
!442 = !DILocation(line: 226, column: 33, scope: !441)
!443 = !DILocation(line: 226, column: 35, scope: !441)
!444 = !DILocation(line: 226, column: 52, scope: !441)
!445 = !DILocation(line: 226, column: 42, scope: !441)
!446 = !DILocation(line: 226, column: 40, scope: !441)
!447 = !DILocation(line: 226, column: 31, scope: !441)
!448 = !DILocation(line: 227, column: 27, scope: !441)
!449 = !DILocation(line: 229, column: 23, scope: !404)
!450 = !DILocation(line: 231, column: 25, scope: !404)
!451 = !DILocation(line: 232, column: 38, scope: !452)
!452 = distinct !DILexicalBlock(scope: !404, file: !112, line: 232, column: 27)
!453 = !DILocation(line: 232, column: 37, scope: !452)
!454 = !DILocation(line: 232, column: 34, scope: !452)
!455 = !DILocation(line: 232, column: 40, scope: !452)
!456 = !DILocation(line: 232, column: 44, scope: !452)
!457 = !DILocation(line: 232, column: 43, scope: !452)
!458 = !DILocation(line: 232, column: 46, scope: !452)
!459 = !DILocation(line: 232, column: 27, scope: !404)
!460 = !DILocation(line: 233, column: 25, scope: !452)
!461 = !DILocation(line: 234, column: 29, scope: !404)
!462 = !DILocation(line: 234, column: 27, scope: !404)
!463 = !DILocation(line: 234, column: 25, scope: !404)
!464 = !DILocation(line: 235, column: 23, scope: !404)
!465 = !DILocation(line: 238, column: 25, scope: !404)
!466 = !DILocation(line: 239, column: 35, scope: !467)
!467 = distinct !DILexicalBlock(scope: !404, file: !112, line: 239, column: 27)
!468 = !DILocation(line: 239, column: 34, scope: !467)
!469 = !DILocation(line: 239, column: 31, scope: !467)
!470 = !DILocation(line: 239, column: 37, scope: !467)
!471 = !DILocation(line: 239, column: 41, scope: !467)
!472 = !DILocation(line: 239, column: 40, scope: !467)
!473 = !DILocation(line: 239, column: 43, scope: !467)
!474 = !DILocation(line: 239, column: 27, scope: !404)
!475 = !DILocation(line: 240, column: 29, scope: !467)
!476 = !DILocation(line: 240, column: 31, scope: !467)
!477 = !DILocation(line: 240, column: 40, scope: !467)
!478 = !DILocation(line: 240, column: 38, scope: !467)
!479 = !DILocation(line: 240, column: 43, scope: !467)
!480 = !DILocation(line: 240, column: 35, scope: !467)
!481 = !DILocation(line: 240, column: 27, scope: !467)
!482 = !DILocation(line: 240, column: 25, scope: !467)
!483 = !DILocation(line: 241, column: 35, scope: !484)
!484 = distinct !DILexicalBlock(scope: !404, file: !112, line: 241, column: 27)
!485 = !DILocation(line: 241, column: 34, scope: !484)
!486 = !DILocation(line: 241, column: 31, scope: !484)
!487 = !DILocation(line: 241, column: 37, scope: !484)
!488 = !DILocation(line: 241, column: 41, scope: !484)
!489 = !DILocation(line: 241, column: 40, scope: !484)
!490 = !DILocation(line: 241, column: 43, scope: !484)
!491 = !DILocation(line: 241, column: 27, scope: !404)
!492 = !DILocation(line: 242, column: 29, scope: !484)
!493 = !DILocation(line: 242, column: 31, scope: !484)
!494 = !DILocation(line: 242, column: 40, scope: !484)
!495 = !DILocation(line: 242, column: 38, scope: !484)
!496 = !DILocation(line: 242, column: 43, scope: !484)
!497 = !DILocation(line: 242, column: 35, scope: !484)
!498 = !DILocation(line: 242, column: 27, scope: !484)
!499 = !DILocation(line: 242, column: 25, scope: !484)
!500 = !DILocation(line: 243, column: 23, scope: !404)
!501 = !DILocation(line: 244, column: 32, scope: !404)
!502 = !DILabel(scope: !404, name: "not_an_escape", file: !112, line: 246)
!503 = !DILocation(line: 246, column: 21, scope: !404)
!504 = !DILocation(line: 247, column: 31, scope: !404)
!505 = !DILocation(line: 247, column: 47, scope: !404)
!506 = !DILocation(line: 249, column: 17, scope: !398)
!507 = !DILocation(line: 250, column: 15, scope: !391)
!508 = distinct !{!508, !385, !509}
!509 = !DILocation(line: 251, column: 13, scope: !380)
!510 = !DILocation(line: 252, column: 15, scope: !380)
!511 = !DILocation(line: 253, column: 15, scope: !380)
!512 = !DILocation(line: 254, column: 15, scope: !513)
!513 = distinct !DILexicalBlock(scope: !380, file: !112, line: 254, column: 15)
!514 = !DILocation(line: 254, column: 20, scope: !513)
!515 = !DILocation(line: 254, column: 15, scope: !380)
!516 = !DILocation(line: 255, column: 13, scope: !513)
!517 = distinct !{!517, !375, !518}
!518 = !DILocation(line: 256, column: 9, scope: !376)
!519 = !DILocation(line: 257, column: 5, scope: !376)
!520 = !DILocation(line: 260, column: 7, scope: !521)
!521 = distinct !DILexicalBlock(scope: !371, file: !112, line: 259, column: 5)
!522 = !DILocation(line: 260, column: 14, scope: !521)
!523 = !DILocation(line: 260, column: 19, scope: !521)
!524 = !DILocation(line: 262, column: 11, scope: !525)
!525 = distinct !DILexicalBlock(scope: !521, file: !112, line: 261, column: 9)
!526 = !DILocation(line: 263, column: 15, scope: !525)
!527 = !DILocation(line: 264, column: 15, scope: !525)
!528 = !DILocation(line: 265, column: 15, scope: !529)
!529 = distinct !DILexicalBlock(scope: !525, file: !112, line: 265, column: 15)
!530 = !DILocation(line: 265, column: 20, scope: !529)
!531 = !DILocation(line: 265, column: 15, scope: !525)
!532 = !DILocation(line: 266, column: 13, scope: !529)
!533 = distinct !{!533, !520, !534}
!534 = !DILocation(line: 267, column: 9, scope: !521)
!535 = !DILocation(line: 270, column: 7, scope: !536)
!536 = distinct !DILexicalBlock(scope: !260, file: !112, line: 270, column: 7)
!537 = !DILocation(line: 270, column: 7, scope: !260)
!538 = !DILocation(line: 271, column: 5, scope: !536)
!539 = !DILocation(line: 272, column: 3, scope: !260)
!540 = !DILocation(line: 273, column: 1, scope: !260)
!541 = !DILocalVariable(name: "argc", arg: 1, scope: !542, file: !112, line: 108, type: !25)
!542 = distinct !DISubprogram(name: "main", scope: !112, file: !112, line: 108, type: !261, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !543, retainedNodes: !4)
!543 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!544 = !DILocalVariable(name: "argv", arg: 2, scope: !542, file: !112, line: 108, type: !263)
!545 = !DILocalVariable(name: "display_return", scope: !542, file: !112, line: 110, type: !17)
!546 = !DILocalVariable(name: "posixly_correct", scope: !542, file: !112, line: 111, type: !17)
!547 = !DILocalVariable(name: "allow_options", scope: !542, file: !112, line: 112, type: !17)
!548 = !DILocalVariable(name: "do_v9", scope: !549, file: !112, line: 119, type: !17)
!549 = distinct !DISubprogram(name: "main", scope: !112, file: !112, line: 108, type: !261, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !550, retainedNodes: !4)
!550 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!551 = !DILocalVariable(name: "i", scope: !552, file: !112, line: 151, type: !57)
!552 = distinct !DILexicalBlock(scope: !553, file: !112, line: 149, column: 7)
!553 = distinct !DILexicalBlock(scope: !554, file: !112, line: 147, column: 7)
!554 = distinct !DISubprogram(name: "main", scope: !112, file: !112, line: 108, type: !261, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !555, retainedNodes: !4)
!555 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!556 = !DILocalVariable(name: "c", scope: !557, file: !112, line: 198, type: !130)
!557 = distinct !DILexicalBlock(scope: !558, file: !112, line: 196, column: 9)
!558 = distinct !DILexicalBlock(scope: !559, file: !112, line: 194, column: 5)
!559 = distinct !DILexicalBlock(scope: !560, file: !112, line: 193, column: 7)
!560 = distinct !DISubprogram(name: "main", scope: !112, file: !112, line: 108, type: !261, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !561, retainedNodes: !4)
!561 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!562 = distinct !DISubprogram(name: "hextobin", scope: !112, file: !112, line: 89, type: !563, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !111, retainedNodes: !4)
!563 = !DISubroutineType(types: !564)
!564 = !{!25, !130}
!565 = !DILocalVariable(name: "c", arg: 1, scope: !562, file: !112, line: 89, type: !130)
!566 = !DILocation(line: 89, column: 25, scope: !562)
!567 = !DILocation(line: 91, column: 11, scope: !562)
!568 = !DILocation(line: 91, column: 3, scope: !562)
!569 = !DILocation(line: 93, column: 21, scope: !570)
!570 = distinct !DILexicalBlock(scope: !562, file: !112, line: 92, column: 5)
!571 = !DILocation(line: 93, column: 23, scope: !570)
!572 = !DILocation(line: 93, column: 14, scope: !570)
!573 = !DILocation(line: 94, column: 25, scope: !570)
!574 = !DILocation(line: 95, column: 25, scope: !570)
!575 = !DILocation(line: 96, column: 25, scope: !570)
!576 = !DILocation(line: 97, column: 25, scope: !570)
!577 = !DILocation(line: 98, column: 25, scope: !570)
!578 = !DILocation(line: 99, column: 25, scope: !570)
!579 = !DILocation(line: 101, column: 1, scope: !562)
!580 = !DILocalVariable(name: "c", arg: 1, scope: !581, file: !112, line: 89, type: !130)
!581 = distinct !DISubprogram(name: "hextobin", scope: !112, file: !112, line: 89, type: !563, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !582, retainedNodes: !4)
!582 = distinct !DICompileUnit(language: DW_LANG_C99, file: !112, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !113, nameTableKind: None)
!583 = distinct !DISubprogram(name: "close_stdout", scope: !16, file: !16, line: 117, type: !584, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !11, retainedNodes: !4)
!584 = !DISubroutineType(types: !585)
!585 = !{null}
!586 = !DILocation(line: 119, column: 21, scope: !587)
!587 = distinct !DILexicalBlock(scope: !583, file: !16, line: 119, column: 7)
!588 = !DILocation(line: 119, column: 7, scope: !587)
!589 = !DILocation(line: 119, column: 29, scope: !587)
!590 = !DILocation(line: 120, column: 7, scope: !587)
!591 = !DILocation(line: 120, column: 12, scope: !587)
!592 = !DILocation(line: 120, column: 25, scope: !587)
!593 = !DILocation(line: 120, column: 28, scope: !587)
!594 = !DILocation(line: 120, column: 34, scope: !587)
!595 = !DILocation(line: 119, column: 7, scope: !583)
!596 = !DILocalVariable(name: "write_error", scope: !597, file: !16, line: 122, type: !6)
!597 = distinct !DILexicalBlock(scope: !587, file: !16, line: 121, column: 5)
!598 = !DILocation(line: 122, column: 19, scope: !597)
!599 = !DILocation(line: 122, column: 33, scope: !597)
!600 = !DILocation(line: 123, column: 11, scope: !601)
!601 = distinct !DILexicalBlock(scope: !597, file: !16, line: 123, column: 11)
!602 = !DILocation(line: 123, column: 11, scope: !597)
!603 = !DILocation(line: 124, column: 19, scope: !601)
!604 = !DILocation(line: 124, column: 52, scope: !601)
!605 = !DILocation(line: 124, column: 36, scope: !601)
!606 = !DILocation(line: 125, column: 16, scope: !601)
!607 = !DILocation(line: 124, column: 9, scope: !601)
!608 = !DILocation(line: 127, column: 19, scope: !601)
!609 = !DILocation(line: 127, column: 32, scope: !601)
!610 = !DILocation(line: 127, column: 9, scope: !601)
!611 = !DILocation(line: 129, column: 14, scope: !597)
!612 = !DILocation(line: 129, column: 7, scope: !597)
!613 = !DILocation(line: 134, column: 42, scope: !614)
!614 = distinct !DILexicalBlock(scope: !583, file: !16, line: 134, column: 7)
!615 = !DILocation(line: 134, column: 28, scope: !614)
!616 = !DILocation(line: 134, column: 50, scope: !614)
!617 = !DILocation(line: 134, column: 7, scope: !583)
!618 = !DILocation(line: 135, column: 12, scope: !614)
!619 = !DILocation(line: 135, column: 5, scope: !614)
!620 = !DILocation(line: 136, column: 1, scope: !583)
!621 = distinct !DISubprogram(name: "set_program_name", scope: !34, file: !34, line: 39, type: !183, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !28, retainedNodes: !4)
!622 = !DILocalVariable(name: "argv0", arg: 1, scope: !621, file: !34, line: 39, type: !6)
!623 = !DILocation(line: 39, column: 31, scope: !621)
!624 = !DILocalVariable(name: "slash", scope: !621, file: !34, line: 46, type: !6)
!625 = !DILocation(line: 46, column: 15, scope: !621)
!626 = !DILocalVariable(name: "base", scope: !621, file: !34, line: 47, type: !6)
!627 = !DILocation(line: 47, column: 15, scope: !621)
!628 = !DILocation(line: 51, column: 7, scope: !629)
!629 = distinct !DILexicalBlock(scope: !621, file: !34, line: 51, column: 7)
!630 = !DILocation(line: 51, column: 13, scope: !629)
!631 = !DILocation(line: 51, column: 7, scope: !621)
!632 = !DILocation(line: 55, column: 14, scope: !633)
!633 = distinct !DILexicalBlock(scope: !629, file: !34, line: 52, column: 5)
!634 = !DILocation(line: 54, column: 7, scope: !633)
!635 = !DILocation(line: 56, column: 7, scope: !633)
!636 = !DILocation(line: 59, column: 20, scope: !621)
!637 = !DILocation(line: 59, column: 11, scope: !621)
!638 = !DILocation(line: 59, column: 9, scope: !621)
!639 = !DILocation(line: 60, column: 11, scope: !621)
!640 = !DILocation(line: 60, column: 17, scope: !621)
!641 = !DILocation(line: 60, column: 27, scope: !621)
!642 = !DILocation(line: 60, column: 33, scope: !621)
!643 = !DILocation(line: 60, column: 39, scope: !621)
!644 = !DILocation(line: 60, column: 8, scope: !621)
!645 = !DILocation(line: 61, column: 7, scope: !646)
!646 = distinct !DILexicalBlock(scope: !621, file: !34, line: 61, column: 7)
!647 = !DILocation(line: 61, column: 14, scope: !646)
!648 = !DILocation(line: 61, column: 12, scope: !646)
!649 = !DILocation(line: 61, column: 20, scope: !646)
!650 = !DILocation(line: 61, column: 25, scope: !646)
!651 = !DILocation(line: 61, column: 37, scope: !646)
!652 = !DILocation(line: 61, column: 42, scope: !646)
!653 = !DILocation(line: 61, column: 28, scope: !646)
!654 = !DILocation(line: 61, column: 61, scope: !646)
!655 = !DILocation(line: 61, column: 7, scope: !621)
!656 = !DILocation(line: 63, column: 15, scope: !657)
!657 = distinct !DILexicalBlock(scope: !646, file: !34, line: 62, column: 5)
!658 = !DILocation(line: 63, column: 13, scope: !657)
!659 = !DILocation(line: 64, column: 20, scope: !660)
!660 = distinct !DILexicalBlock(scope: !657, file: !34, line: 64, column: 11)
!661 = !DILocation(line: 64, column: 11, scope: !660)
!662 = !DILocation(line: 64, column: 36, scope: !660)
!663 = !DILocation(line: 64, column: 11, scope: !657)
!664 = !DILocation(line: 66, column: 19, scope: !665)
!665 = distinct !DILexicalBlock(scope: !660, file: !34, line: 65, column: 9)
!666 = !DILocation(line: 66, column: 24, scope: !665)
!667 = !DILocation(line: 66, column: 17, scope: !665)
!668 = !DILocation(line: 70, column: 52, scope: !665)
!669 = !DILocation(line: 70, column: 41, scope: !665)
!670 = !DILocation(line: 72, column: 9, scope: !665)
!671 = !DILocation(line: 73, column: 5, scope: !657)
!672 = !DILocation(line: 84, column: 18, scope: !621)
!673 = !DILocation(line: 84, column: 16, scope: !621)
!674 = !DILocation(line: 90, column: 38, scope: !621)
!675 = !DILocation(line: 90, column: 27, scope: !621)
!676 = !DILocation(line: 92, column: 1, scope: !621)
!677 = !DILocalVariable(name: "argv0", arg: 1, scope: !678, file: !34, line: 39, type: !6)
!678 = distinct !DISubprogram(name: "set_program_name", scope: !34, file: !34, line: 39, type: !183, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !679, retainedNodes: !4)
!679 = distinct !DICompileUnit(language: DW_LANG_C99, file: !29, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !30, globals: !680, nameTableKind: None)
!680 = !{!681}
!681 = !DIGlobalVariableExpression(var: !682, expr: !DIExpression())
!682 = distinct !DIGlobalVariable(name: "program_name", scope: !679, file: !34, line: 33, type: !6, isLocal: false, isDefinition: true)
!683 = !DILocalVariable(name: "slash", scope: !678, file: !34, line: 46, type: !6)
!684 = !DILocalVariable(name: "base", scope: !678, file: !34, line: 47, type: !6)
!685 = distinct !DISubprogram(name: "set_char_quoting", scope: !63, file: !63, line: 152, type: !686, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !37, retainedNodes: !4)
!686 = !DISubroutineType(types: !687)
!687 = !{!25, !688, !8, !25}
!688 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !76, size: 64)
!689 = !DILocalVariable(name: "o", arg: 1, scope: !685, file: !63, line: 152, type: !688)
!690 = !DILocation(line: 152, column: 43, scope: !685)
!691 = !DILocalVariable(name: "c", arg: 2, scope: !685, file: !63, line: 152, type: !8)
!692 = !DILocation(line: 152, column: 51, scope: !685)
!693 = !DILocalVariable(name: "i", arg: 3, scope: !685, file: !63, line: 152, type: !25)
!694 = !DILocation(line: 152, column: 58, scope: !685)
!695 = !DILocalVariable(name: "uc", scope: !685, file: !63, line: 154, type: !130)
!696 = !DILocation(line: 154, column: 17, scope: !685)
!697 = !DILocation(line: 154, column: 22, scope: !685)
!698 = !DILocalVariable(name: "p", scope: !685, file: !63, line: 155, type: !699)
!699 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !42, size: 64)
!700 = !DILocation(line: 155, column: 17, scope: !685)
!701 = !DILocation(line: 156, column: 6, scope: !685)
!702 = !DILocation(line: 156, column: 10, scope: !685)
!703 = !DILocation(line: 156, column: 41, scope: !685)
!704 = !DILocation(line: 156, column: 5, scope: !685)
!705 = !DILocation(line: 156, column: 59, scope: !685)
!706 = !DILocation(line: 156, column: 62, scope: !685)
!707 = !DILocation(line: 156, column: 57, scope: !685)
!708 = !DILocalVariable(name: "shift", scope: !685, file: !63, line: 157, type: !25)
!709 = !DILocation(line: 157, column: 7, scope: !685)
!710 = !DILocation(line: 157, column: 15, scope: !685)
!711 = !DILocation(line: 157, column: 18, scope: !685)
!712 = !DILocalVariable(name: "r", scope: !685, file: !63, line: 158, type: !25)
!713 = !DILocation(line: 158, column: 7, scope: !685)
!714 = !DILocation(line: 158, column: 13, scope: !685)
!715 = !DILocation(line: 158, column: 12, scope: !685)
!716 = !DILocation(line: 158, column: 18, scope: !685)
!717 = !DILocation(line: 158, column: 15, scope: !685)
!718 = !DILocation(line: 158, column: 25, scope: !685)
!719 = !DILocation(line: 159, column: 11, scope: !685)
!720 = !DILocation(line: 159, column: 13, scope: !685)
!721 = !DILocation(line: 159, column: 20, scope: !685)
!722 = !DILocation(line: 159, column: 18, scope: !685)
!723 = !DILocation(line: 159, column: 26, scope: !685)
!724 = !DILocation(line: 159, column: 23, scope: !685)
!725 = !DILocation(line: 159, column: 4, scope: !685)
!726 = !DILocation(line: 159, column: 6, scope: !685)
!727 = !DILocation(line: 160, column: 10, scope: !685)
!728 = !DILocation(line: 160, column: 3, scope: !685)
!729 = !DILocalVariable(name: "o", arg: 1, scope: !730, file: !63, line: 152, type: !733)
!730 = distinct !DISubprogram(name: "set_char_quoting", scope: !63, file: !63, line: 152, type: !731, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !741, retainedNodes: !4)
!731 = !DISubroutineType(types: !732)
!732 = !{!25, !733, !8, !25}
!733 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !734, size: 64)
!734 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !735)
!735 = !{!736, !737, !738, !739, !740}
!736 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !734, file: !63, line: 68, baseType: !40, size: 32)
!737 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !734, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!738 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !734, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!739 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !734, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!740 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !734, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!741 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !742, nameTableKind: None)
!742 = !{!743, !745, !747, !749, !751, !753, !760, !762}
!743 = !DIGlobalVariableExpression(var: !744, expr: !DIExpression())
!744 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !741, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!745 = !DIGlobalVariableExpression(var: !746, expr: !DIExpression())
!746 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !741, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!747 = !DIGlobalVariableExpression(var: !748, expr: !DIExpression())
!748 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !741, file: !63, line: 1052, type: !734, isLocal: false, isDefinition: true)
!749 = !DIGlobalVariableExpression(var: !750, expr: !DIExpression())
!750 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !741, file: !63, line: 116, type: !734, isLocal: true, isDefinition: true)
!751 = !DIGlobalVariableExpression(var: !752, expr: !DIExpression())
!752 = distinct !DIGlobalVariable(name: "slot0", scope: !741, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!753 = !DIGlobalVariableExpression(var: !754, expr: !DIExpression())
!754 = distinct !DIGlobalVariable(name: "slotvec", scope: !741, file: !63, line: 845, type: !755, isLocal: true, isDefinition: true)
!755 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !756, size: 64)
!756 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !757)
!757 = !{!758, !759}
!758 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !756, file: !63, line: 836, baseType: !57, size: 64)
!759 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !756, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!760 = !DIGlobalVariableExpression(var: !761, expr: !DIExpression())
!761 = distinct !DIGlobalVariable(name: "nslots", scope: !741, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!762 = !DIGlobalVariableExpression(var: !763, expr: !DIExpression())
!763 = distinct !DIGlobalVariable(name: "slotvec0", scope: !741, file: !63, line: 844, type: !756, isLocal: true, isDefinition: true)
!764 = !DILocalVariable(name: "c", arg: 2, scope: !730, file: !63, line: 152, type: !8)
!765 = !DILocalVariable(name: "i", arg: 3, scope: !730, file: !63, line: 152, type: !25)
!766 = !DILocalVariable(name: "uc", scope: !730, file: !63, line: 154, type: !130)
!767 = !DILocalVariable(name: "p", scope: !730, file: !63, line: 155, type: !699)
!768 = !DILocalVariable(name: "shift", scope: !769, file: !63, line: 157, type: !25)
!769 = distinct !DISubprogram(name: "set_char_quoting", scope: !63, file: !63, line: 152, type: !770, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !780, retainedNodes: !4)
!770 = !DISubroutineType(types: !771)
!771 = !{!25, !772, !8, !25}
!772 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !773, size: 64)
!773 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !774)
!774 = !{!775, !776, !777, !778, !779}
!775 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !773, file: !63, line: 68, baseType: !40, size: 32)
!776 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !773, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!777 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !773, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!778 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !773, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!779 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !773, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!780 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !781, nameTableKind: None)
!781 = !{!782, !784, !786, !788, !790, !792, !799, !801}
!782 = !DIGlobalVariableExpression(var: !783, expr: !DIExpression())
!783 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !780, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!784 = !DIGlobalVariableExpression(var: !785, expr: !DIExpression())
!785 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !780, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!786 = !DIGlobalVariableExpression(var: !787, expr: !DIExpression())
!787 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !780, file: !63, line: 1052, type: !773, isLocal: false, isDefinition: true)
!788 = !DIGlobalVariableExpression(var: !789, expr: !DIExpression())
!789 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !780, file: !63, line: 116, type: !773, isLocal: true, isDefinition: true)
!790 = !DIGlobalVariableExpression(var: !791, expr: !DIExpression())
!791 = distinct !DIGlobalVariable(name: "slot0", scope: !780, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!792 = !DIGlobalVariableExpression(var: !793, expr: !DIExpression())
!793 = distinct !DIGlobalVariable(name: "slotvec", scope: !780, file: !63, line: 845, type: !794, isLocal: true, isDefinition: true)
!794 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !795, size: 64)
!795 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !796)
!796 = !{!797, !798}
!797 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !795, file: !63, line: 836, baseType: !57, size: 64)
!798 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !795, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!799 = !DIGlobalVariableExpression(var: !800, expr: !DIExpression())
!800 = distinct !DIGlobalVariable(name: "nslots", scope: !780, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!801 = !DIGlobalVariableExpression(var: !802, expr: !DIExpression())
!802 = distinct !DIGlobalVariable(name: "slotvec0", scope: !780, file: !63, line: 844, type: !795, isLocal: true, isDefinition: true)
!803 = !DILocalVariable(name: "r", scope: !769, file: !63, line: 158, type: !25)
!804 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !63, file: !63, line: 982, type: !805, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !37, retainedNodes: !4)
!805 = !DISubroutineType(types: !806)
!806 = !{!32, !6, !57, !8}
!807 = !DILocalVariable(name: "arg", arg: 1, scope: !804, file: !63, line: 982, type: !6)
!808 = !DILocation(line: 982, column: 32, scope: !804)
!809 = !DILocalVariable(name: "argsize", arg: 2, scope: !804, file: !63, line: 982, type: !57)
!810 = !DILocation(line: 982, column: 44, scope: !804)
!811 = !DILocalVariable(name: "ch", arg: 3, scope: !804, file: !63, line: 982, type: !8)
!812 = !DILocation(line: 982, column: 58, scope: !804)
!813 = !DILocalVariable(name: "options", scope: !804, file: !63, line: 984, type: !76)
!814 = !DILocation(line: 984, column: 26, scope: !804)
!815 = !DILocation(line: 985, column: 13, scope: !804)
!816 = !DILocation(line: 986, column: 31, scope: !804)
!817 = !DILocation(line: 986, column: 3, scope: !804)
!818 = !DILocation(line: 987, column: 33, scope: !804)
!819 = !DILocation(line: 987, column: 38, scope: !804)
!820 = !DILocation(line: 987, column: 10, scope: !804)
!821 = !DILocation(line: 987, column: 3, scope: !804)
!822 = !DILocalVariable(name: "arg", arg: 1, scope: !823, file: !63, line: 982, type: !6)
!823 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !63, file: !63, line: 982, type: !805, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !824, retainedNodes: !4)
!824 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !825, nameTableKind: None)
!825 = !{!826, !828, !830, !839, !841, !843, !850, !852}
!826 = !DIGlobalVariableExpression(var: !827, expr: !DIExpression())
!827 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !824, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!828 = !DIGlobalVariableExpression(var: !829, expr: !DIExpression())
!829 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !824, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!830 = !DIGlobalVariableExpression(var: !831, expr: !DIExpression())
!831 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !824, file: !63, line: 1052, type: !832, isLocal: false, isDefinition: true)
!832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !833)
!833 = !{!834, !835, !836, !837, !838}
!834 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !832, file: !63, line: 68, baseType: !40, size: 32)
!835 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !832, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!836 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !832, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!837 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !832, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!838 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !832, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!839 = !DIGlobalVariableExpression(var: !840, expr: !DIExpression())
!840 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !824, file: !63, line: 116, type: !832, isLocal: true, isDefinition: true)
!841 = !DIGlobalVariableExpression(var: !842, expr: !DIExpression())
!842 = distinct !DIGlobalVariable(name: "slot0", scope: !824, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!843 = !DIGlobalVariableExpression(var: !844, expr: !DIExpression())
!844 = distinct !DIGlobalVariable(name: "slotvec", scope: !824, file: !63, line: 845, type: !845, isLocal: true, isDefinition: true)
!845 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !846, size: 64)
!846 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !847)
!847 = !{!848, !849}
!848 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !846, file: !63, line: 836, baseType: !57, size: 64)
!849 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !846, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!850 = !DIGlobalVariableExpression(var: !851, expr: !DIExpression())
!851 = distinct !DIGlobalVariable(name: "nslots", scope: !824, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!852 = !DIGlobalVariableExpression(var: !853, expr: !DIExpression())
!853 = distinct !DIGlobalVariable(name: "slotvec0", scope: !824, file: !63, line: 844, type: !846, isLocal: true, isDefinition: true)
!854 = !DILocalVariable(name: "argsize", arg: 2, scope: !823, file: !63, line: 982, type: !57)
!855 = !DILocalVariable(name: "ch", arg: 3, scope: !823, file: !63, line: 982, type: !8)
!856 = !DILocalVariable(name: "options", scope: !823, file: !63, line: 984, type: !832)
!857 = distinct !DISubprogram(name: "quotearg_n_options", scope: !63, file: !63, line: 877, type: !858, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !37, retainedNodes: !4)
!858 = !DISubroutineType(types: !859)
!859 = !{!32, !25, !6, !57, !860}
!860 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !861, size: 64)
!861 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !76)
!862 = !DILocalVariable(name: "n", arg: 1, scope: !857, file: !63, line: 877, type: !25)
!863 = !DILocation(line: 877, column: 25, scope: !857)
!864 = !DILocalVariable(name: "arg", arg: 2, scope: !857, file: !63, line: 877, type: !6)
!865 = !DILocation(line: 877, column: 40, scope: !857)
!866 = !DILocalVariable(name: "argsize", arg: 3, scope: !857, file: !63, line: 877, type: !57)
!867 = !DILocation(line: 877, column: 52, scope: !857)
!868 = !DILocalVariable(name: "options", arg: 4, scope: !857, file: !63, line: 878, type: !860)
!869 = !DILocation(line: 878, column: 51, scope: !857)
!870 = !DILocalVariable(name: "e", scope: !857, file: !63, line: 880, type: !25)
!871 = !DILocation(line: 880, column: 7, scope: !857)
!872 = !DILocation(line: 880, column: 11, scope: !857)
!873 = !DILocalVariable(name: "sv", scope: !857, file: !63, line: 882, type: !93)
!874 = !DILocation(line: 882, column: 19, scope: !857)
!875 = !DILocation(line: 882, column: 24, scope: !857)
!876 = !DILocation(line: 884, column: 7, scope: !877)
!877 = distinct !DILexicalBlock(scope: !857, file: !63, line: 884, column: 7)
!878 = !DILocation(line: 884, column: 9, scope: !877)
!879 = !DILocation(line: 884, column: 7, scope: !857)
!880 = !DILocation(line: 885, column: 5, scope: !877)
!881 = !DILocation(line: 887, column: 7, scope: !882)
!882 = distinct !DILexicalBlock(scope: !857, file: !63, line: 887, column: 7)
!883 = !DILocation(line: 887, column: 17, scope: !882)
!884 = !DILocation(line: 887, column: 14, scope: !882)
!885 = !DILocation(line: 887, column: 7, scope: !857)
!886 = !DILocalVariable(name: "preallocated", scope: !887, file: !63, line: 889, type: !17)
!887 = distinct !DILexicalBlock(scope: !882, file: !63, line: 888, column: 5)
!888 = !DILocation(line: 889, column: 12, scope: !887)
!889 = !DILocation(line: 889, column: 28, scope: !887)
!890 = !DILocation(line: 889, column: 31, scope: !887)
!891 = !DILocalVariable(name: "nmax", scope: !887, file: !63, line: 890, type: !25)
!892 = !DILocation(line: 890, column: 11, scope: !887)
!893 = !DILocation(line: 892, column: 11, scope: !894)
!894 = distinct !DILexicalBlock(scope: !887, file: !63, line: 892, column: 11)
!895 = !DILocation(line: 892, column: 18, scope: !894)
!896 = !DILocation(line: 892, column: 16, scope: !894)
!897 = !DILocation(line: 892, column: 11, scope: !887)
!898 = !DILocation(line: 893, column: 9, scope: !894)
!899 = !DILocation(line: 895, column: 32, scope: !887)
!900 = !DILocation(line: 895, column: 54, scope: !887)
!901 = !DILocation(line: 895, column: 59, scope: !887)
!902 = !DILocation(line: 895, column: 61, scope: !887)
!903 = !DILocation(line: 895, column: 58, scope: !887)
!904 = !DILocation(line: 895, column: 66, scope: !887)
!905 = !DILocation(line: 895, column: 22, scope: !887)
!906 = !DILocation(line: 895, column: 20, scope: !887)
!907 = !DILocation(line: 895, column: 15, scope: !887)
!908 = !DILocation(line: 896, column: 11, scope: !909)
!909 = distinct !DILexicalBlock(scope: !887, file: !63, line: 896, column: 11)
!910 = !DILocation(line: 896, column: 11, scope: !887)
!911 = !DILocation(line: 897, column: 10, scope: !909)
!912 = !DILocation(line: 897, column: 15, scope: !909)
!913 = !DILocation(line: 897, column: 9, scope: !909)
!914 = !DILocation(line: 898, column: 15, scope: !887)
!915 = !DILocation(line: 898, column: 20, scope: !887)
!916 = !DILocation(line: 898, column: 18, scope: !887)
!917 = !DILocation(line: 898, column: 7, scope: !887)
!918 = !DILocation(line: 898, column: 32, scope: !887)
!919 = !DILocation(line: 898, column: 34, scope: !887)
!920 = !DILocation(line: 898, column: 40, scope: !887)
!921 = !DILocation(line: 898, column: 38, scope: !887)
!922 = !DILocation(line: 898, column: 31, scope: !887)
!923 = !DILocation(line: 898, column: 48, scope: !887)
!924 = !DILocation(line: 899, column: 16, scope: !887)
!925 = !DILocation(line: 899, column: 18, scope: !887)
!926 = !DILocation(line: 899, column: 14, scope: !887)
!927 = !DILocation(line: 900, column: 5, scope: !887)
!928 = !DILocalVariable(name: "size", scope: !929, file: !63, line: 903, type: !57)
!929 = distinct !DILexicalBlock(scope: !857, file: !63, line: 902, column: 3)
!930 = !DILocation(line: 903, column: 12, scope: !929)
!931 = !DILocation(line: 903, column: 19, scope: !929)
!932 = !DILocation(line: 903, column: 22, scope: !929)
!933 = !DILocation(line: 903, column: 25, scope: !929)
!934 = !DILocalVariable(name: "val", scope: !929, file: !63, line: 904, type: !32)
!935 = !DILocation(line: 904, column: 11, scope: !929)
!936 = !DILocation(line: 904, column: 17, scope: !929)
!937 = !DILocation(line: 904, column: 20, scope: !929)
!938 = !DILocation(line: 904, column: 23, scope: !929)
!939 = !DILocalVariable(name: "flags", scope: !929, file: !63, line: 906, type: !25)
!940 = !DILocation(line: 906, column: 9, scope: !929)
!941 = !DILocation(line: 906, column: 17, scope: !929)
!942 = !DILocation(line: 906, column: 26, scope: !929)
!943 = !DILocation(line: 906, column: 32, scope: !929)
!944 = !DILocalVariable(name: "qsize", scope: !929, file: !63, line: 907, type: !57)
!945 = !DILocation(line: 907, column: 12, scope: !929)
!946 = !DILocation(line: 907, column: 46, scope: !929)
!947 = !DILocation(line: 907, column: 51, scope: !929)
!948 = !DILocation(line: 907, column: 57, scope: !929)
!949 = !DILocation(line: 907, column: 62, scope: !929)
!950 = !DILocation(line: 908, column: 46, scope: !929)
!951 = !DILocation(line: 908, column: 55, scope: !929)
!952 = !DILocation(line: 908, column: 62, scope: !929)
!953 = !DILocation(line: 909, column: 46, scope: !929)
!954 = !DILocation(line: 909, column: 55, scope: !929)
!955 = !DILocation(line: 910, column: 46, scope: !929)
!956 = !DILocation(line: 910, column: 55, scope: !929)
!957 = !DILocation(line: 911, column: 46, scope: !929)
!958 = !DILocation(line: 911, column: 55, scope: !929)
!959 = !DILocation(line: 907, column: 20, scope: !929)
!960 = !DILocation(line: 913, column: 9, scope: !961)
!961 = distinct !DILexicalBlock(scope: !929, file: !63, line: 913, column: 9)
!962 = !DILocation(line: 913, column: 17, scope: !961)
!963 = !DILocation(line: 913, column: 14, scope: !961)
!964 = !DILocation(line: 913, column: 9, scope: !929)
!965 = !DILocation(line: 915, column: 29, scope: !966)
!966 = distinct !DILexicalBlock(scope: !961, file: !63, line: 914, column: 7)
!967 = !DILocation(line: 915, column: 35, scope: !966)
!968 = !DILocation(line: 915, column: 27, scope: !966)
!969 = !DILocation(line: 915, column: 9, scope: !966)
!970 = !DILocation(line: 915, column: 12, scope: !966)
!971 = !DILocation(line: 915, column: 15, scope: !966)
!972 = !DILocation(line: 915, column: 20, scope: !966)
!973 = !DILocation(line: 916, column: 13, scope: !974)
!974 = distinct !DILexicalBlock(scope: !966, file: !63, line: 916, column: 13)
!975 = !DILocation(line: 916, column: 17, scope: !974)
!976 = !DILocation(line: 916, column: 13, scope: !966)
!977 = !DILocation(line: 917, column: 17, scope: !974)
!978 = !DILocation(line: 917, column: 11, scope: !974)
!979 = !DILocation(line: 918, column: 39, scope: !966)
!980 = !DILocation(line: 918, column: 27, scope: !966)
!981 = !DILocation(line: 918, column: 25, scope: !966)
!982 = !DILocation(line: 918, column: 9, scope: !966)
!983 = !DILocation(line: 918, column: 12, scope: !966)
!984 = !DILocation(line: 918, column: 15, scope: !966)
!985 = !DILocation(line: 918, column: 19, scope: !966)
!986 = !DILocation(line: 919, column: 35, scope: !966)
!987 = !DILocation(line: 919, column: 40, scope: !966)
!988 = !DILocation(line: 919, column: 46, scope: !966)
!989 = !DILocation(line: 919, column: 51, scope: !966)
!990 = !DILocation(line: 919, column: 60, scope: !966)
!991 = !DILocation(line: 919, column: 69, scope: !966)
!992 = !DILocation(line: 920, column: 35, scope: !966)
!993 = !DILocation(line: 920, column: 42, scope: !966)
!994 = !DILocation(line: 920, column: 51, scope: !966)
!995 = !DILocation(line: 921, column: 35, scope: !966)
!996 = !DILocation(line: 921, column: 44, scope: !966)
!997 = !DILocation(line: 922, column: 35, scope: !966)
!998 = !DILocation(line: 922, column: 44, scope: !966)
!999 = !DILocation(line: 919, column: 9, scope: !966)
!1000 = !DILocation(line: 923, column: 7, scope: !966)
!1001 = !DILocation(line: 925, column: 13, scope: !929)
!1002 = !DILocation(line: 925, column: 5, scope: !929)
!1003 = !DILocation(line: 925, column: 11, scope: !929)
!1004 = !DILocation(line: 926, column: 12, scope: !929)
!1005 = !DILocation(line: 926, column: 5, scope: !929)
!1006 = !DILocalVariable(name: "n", arg: 1, scope: !1007, file: !63, line: 877, type: !25)
!1007 = distinct !DISubprogram(name: "quotearg_n_options", scope: !63, file: !63, line: 877, type: !1008, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1019, retainedNodes: !4)
!1008 = !DISubroutineType(types: !1009)
!1009 = !{!32, !25, !6, !57, !1010}
!1010 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1011, size: 64)
!1011 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1012)
!1012 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !1013)
!1013 = !{!1014, !1015, !1016, !1017, !1018}
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1012, file: !63, line: 68, baseType: !40, size: 32)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1012, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1012, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1012, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1012, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!1019 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !1020, nameTableKind: None)
!1020 = !{!1021, !1023, !1025, !1027, !1029, !1031, !1038, !1040}
!1021 = !DIGlobalVariableExpression(var: !1022, expr: !DIExpression())
!1022 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1019, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!1023 = !DIGlobalVariableExpression(var: !1024, expr: !DIExpression())
!1024 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1019, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!1025 = !DIGlobalVariableExpression(var: !1026, expr: !DIExpression())
!1026 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1019, file: !63, line: 1052, type: !1012, isLocal: false, isDefinition: true)
!1027 = !DIGlobalVariableExpression(var: !1028, expr: !DIExpression())
!1028 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1019, file: !63, line: 116, type: !1012, isLocal: true, isDefinition: true)
!1029 = !DIGlobalVariableExpression(var: !1030, expr: !DIExpression())
!1030 = distinct !DIGlobalVariable(name: "slot0", scope: !1019, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!1031 = !DIGlobalVariableExpression(var: !1032, expr: !DIExpression())
!1032 = distinct !DIGlobalVariable(name: "slotvec", scope: !1019, file: !63, line: 845, type: !1033, isLocal: true, isDefinition: true)
!1033 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1034, size: 64)
!1034 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !1035)
!1035 = !{!1036, !1037}
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1034, file: !63, line: 836, baseType: !57, size: 64)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1034, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!1038 = !DIGlobalVariableExpression(var: !1039, expr: !DIExpression())
!1039 = distinct !DIGlobalVariable(name: "nslots", scope: !1019, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!1040 = !DIGlobalVariableExpression(var: !1041, expr: !DIExpression())
!1041 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1019, file: !63, line: 844, type: !1034, isLocal: true, isDefinition: true)
!1042 = !DILocalVariable(name: "arg", arg: 2, scope: !1007, file: !63, line: 877, type: !6)
!1043 = !DILocalVariable(name: "argsize", arg: 3, scope: !1007, file: !63, line: 877, type: !57)
!1044 = !DILocalVariable(name: "options", arg: 4, scope: !1007, file: !63, line: 878, type: !1010)
!1045 = !DILocalVariable(name: "e", scope: !1007, file: !63, line: 880, type: !25)
!1046 = !DILocalVariable(name: "sv", scope: !1007, file: !63, line: 882, type: !1033)
!1047 = !DILocalVariable(name: "nmax", scope: !1048, file: !63, line: 890, type: !25)
!1048 = distinct !DILexicalBlock(scope: !1049, file: !63, line: 888, column: 5)
!1049 = distinct !DILexicalBlock(scope: !1050, file: !63, line: 887, column: 7)
!1050 = distinct !DISubprogram(name: "quotearg_n_options", scope: !63, file: !63, line: 877, type: !1051, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1062, retainedNodes: !4)
!1051 = !DISubroutineType(types: !1052)
!1052 = !{!32, !25, !6, !57, !1053}
!1053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1054, size: 64)
!1054 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1055)
!1055 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !1056)
!1056 = !{!1057, !1058, !1059, !1060, !1061}
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1055, file: !63, line: 68, baseType: !40, size: 32)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1055, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1055, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1055, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1055, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!1062 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !1063, nameTableKind: None)
!1063 = !{!1064, !1066, !1068, !1070, !1072, !1074, !1081, !1083}
!1064 = !DIGlobalVariableExpression(var: !1065, expr: !DIExpression())
!1065 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1062, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!1066 = !DIGlobalVariableExpression(var: !1067, expr: !DIExpression())
!1067 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1062, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!1068 = !DIGlobalVariableExpression(var: !1069, expr: !DIExpression())
!1069 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1062, file: !63, line: 1052, type: !1055, isLocal: false, isDefinition: true)
!1070 = !DIGlobalVariableExpression(var: !1071, expr: !DIExpression())
!1071 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1062, file: !63, line: 116, type: !1055, isLocal: true, isDefinition: true)
!1072 = !DIGlobalVariableExpression(var: !1073, expr: !DIExpression())
!1073 = distinct !DIGlobalVariable(name: "slot0", scope: !1062, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!1074 = !DIGlobalVariableExpression(var: !1075, expr: !DIExpression())
!1075 = distinct !DIGlobalVariable(name: "slotvec", scope: !1062, file: !63, line: 845, type: !1076, isLocal: true, isDefinition: true)
!1076 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1077, size: 64)
!1077 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !1078)
!1078 = !{!1079, !1080}
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1077, file: !63, line: 836, baseType: !57, size: 64)
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1077, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!1081 = !DIGlobalVariableExpression(var: !1082, expr: !DIExpression())
!1082 = distinct !DIGlobalVariable(name: "nslots", scope: !1062, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!1083 = !DIGlobalVariableExpression(var: !1084, expr: !DIExpression())
!1084 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1062, file: !63, line: 844, type: !1077, isLocal: true, isDefinition: true)
!1085 = !DILocalVariable(name: "val", scope: !1086, file: !63, line: 904, type: !32)
!1086 = distinct !DILexicalBlock(scope: !1087, file: !63, line: 902, column: 3)
!1087 = distinct !DISubprogram(name: "quotearg_n_options", scope: !63, file: !63, line: 877, type: !1088, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1099, retainedNodes: !4)
!1088 = !DISubroutineType(types: !1089)
!1089 = !{!32, !25, !6, !57, !1090}
!1090 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1091, size: 64)
!1091 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1092)
!1092 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !1093)
!1093 = !{!1094, !1095, !1096, !1097, !1098}
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1092, file: !63, line: 68, baseType: !40, size: 32)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1092, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1092, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1092, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1092, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!1099 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !1100, nameTableKind: None)
!1100 = !{!1101, !1103, !1105, !1107, !1109, !1111, !1118, !1120}
!1101 = !DIGlobalVariableExpression(var: !1102, expr: !DIExpression())
!1102 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1099, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!1103 = !DIGlobalVariableExpression(var: !1104, expr: !DIExpression())
!1104 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1099, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!1105 = !DIGlobalVariableExpression(var: !1106, expr: !DIExpression())
!1106 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1099, file: !63, line: 1052, type: !1092, isLocal: false, isDefinition: true)
!1107 = !DIGlobalVariableExpression(var: !1108, expr: !DIExpression())
!1108 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1099, file: !63, line: 116, type: !1092, isLocal: true, isDefinition: true)
!1109 = !DIGlobalVariableExpression(var: !1110, expr: !DIExpression())
!1110 = distinct !DIGlobalVariable(name: "slot0", scope: !1099, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!1111 = !DIGlobalVariableExpression(var: !1112, expr: !DIExpression())
!1112 = distinct !DIGlobalVariable(name: "slotvec", scope: !1099, file: !63, line: 845, type: !1113, isLocal: true, isDefinition: true)
!1113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1114, size: 64)
!1114 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !1115)
!1115 = !{!1116, !1117}
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1114, file: !63, line: 836, baseType: !57, size: 64)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1114, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!1118 = !DIGlobalVariableExpression(var: !1119, expr: !DIExpression())
!1119 = distinct !DIGlobalVariable(name: "nslots", scope: !1099, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!1120 = !DIGlobalVariableExpression(var: !1121, expr: !DIExpression())
!1121 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1099, file: !63, line: 844, type: !1114, isLocal: true, isDefinition: true)
!1122 = !DILocalVariable(name: "flags", scope: !1086, file: !63, line: 906, type: !25)
!1123 = !DILocalVariable(name: "qsize", scope: !1086, file: !63, line: 907, type: !57)
!1124 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !63, file: !63, line: 256, type: !1125, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !37, retainedNodes: !4)
!1125 = !DISubroutineType(types: !1126)
!1126 = !{!57, !32, !57, !6, !57, !40, !25, !1127, !6, !6}
!1127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1128, size: 64)
!1128 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !42)
!1129 = !DILocalVariable(name: "buffer", arg: 1, scope: !1124, file: !63, line: 256, type: !32)
!1130 = !DILocation(line: 256, column: 33, scope: !1124)
!1131 = !DILocalVariable(name: "buffersize", arg: 2, scope: !1124, file: !63, line: 256, type: !57)
!1132 = !DILocation(line: 256, column: 48, scope: !1124)
!1133 = !DILocalVariable(name: "arg", arg: 3, scope: !1124, file: !63, line: 257, type: !6)
!1134 = !DILocation(line: 257, column: 39, scope: !1124)
!1135 = !DILocalVariable(name: "argsize", arg: 4, scope: !1124, file: !63, line: 257, type: !57)
!1136 = !DILocation(line: 257, column: 51, scope: !1124)
!1137 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !1124, file: !63, line: 258, type: !40)
!1138 = !DILocation(line: 258, column: 46, scope: !1124)
!1139 = !DILocalVariable(name: "flags", arg: 6, scope: !1124, file: !63, line: 258, type: !25)
!1140 = !DILocation(line: 258, column: 65, scope: !1124)
!1141 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !1124, file: !63, line: 259, type: !1127)
!1142 = !DILocation(line: 259, column: 47, scope: !1124)
!1143 = !DILocalVariable(name: "left_quote", arg: 8, scope: !1124, file: !63, line: 260, type: !6)
!1144 = !DILocation(line: 260, column: 39, scope: !1124)
!1145 = !DILocalVariable(name: "right_quote", arg: 9, scope: !1124, file: !63, line: 261, type: !6)
!1146 = !DILocation(line: 261, column: 39, scope: !1124)
!1147 = !DILocalVariable(name: "i", scope: !1124, file: !63, line: 263, type: !57)
!1148 = !DILocation(line: 263, column: 10, scope: !1124)
!1149 = !DILocalVariable(name: "len", scope: !1124, file: !63, line: 264, type: !57)
!1150 = !DILocation(line: 264, column: 10, scope: !1124)
!1151 = !DILocalVariable(name: "orig_buffersize", scope: !1124, file: !63, line: 265, type: !57)
!1152 = !DILocation(line: 265, column: 10, scope: !1124)
!1153 = !DILocalVariable(name: "quote_string", scope: !1124, file: !63, line: 266, type: !6)
!1154 = !DILocation(line: 266, column: 15, scope: !1124)
!1155 = !DILocalVariable(name: "quote_string_len", scope: !1124, file: !63, line: 267, type: !57)
!1156 = !DILocation(line: 267, column: 10, scope: !1124)
!1157 = !DILocalVariable(name: "backslash_escapes", scope: !1124, file: !63, line: 268, type: !17)
!1158 = !DILocation(line: 268, column: 8, scope: !1124)
!1159 = !DILocalVariable(name: "unibyte_locale", scope: !1124, file: !63, line: 269, type: !17)
!1160 = !DILocation(line: 269, column: 8, scope: !1124)
!1161 = !DILocation(line: 269, column: 25, scope: !1124)
!1162 = !DILocation(line: 269, column: 36, scope: !1124)
!1163 = !DILocalVariable(name: "elide_outer_quotes", scope: !1124, file: !63, line: 270, type: !17)
!1164 = !DILocation(line: 270, column: 8, scope: !1124)
!1165 = !DILocation(line: 270, column: 30, scope: !1124)
!1166 = !DILocation(line: 270, column: 36, scope: !1124)
!1167 = !DILocation(line: 270, column: 61, scope: !1124)
!1168 = !DILocalVariable(name: "pending_shell_escape_end", scope: !1124, file: !63, line: 271, type: !17)
!1169 = !DILocation(line: 271, column: 8, scope: !1124)
!1170 = !DILocalVariable(name: "encountered_single_quote", scope: !1124, file: !63, line: 272, type: !17)
!1171 = !DILocation(line: 272, column: 8, scope: !1124)
!1172 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !1124, file: !63, line: 273, type: !17)
!1173 = !DILocation(line: 273, column: 8, scope: !1124)
!1174 = !DILocation(line: 273, column: 3, scope: !1124)
!1175 = !DILabel(scope: !1124, name: "process_input", file: !63, line: 314)
!1176 = !DILocation(line: 314, column: 2, scope: !1124)
!1177 = !DILocation(line: 316, column: 11, scope: !1124)
!1178 = !DILocation(line: 316, column: 3, scope: !1124)
!1179 = !DILocation(line: 319, column: 21, scope: !1180)
!1180 = distinct !DILexicalBlock(scope: !1124, file: !63, line: 317, column: 5)
!1181 = !DILocation(line: 320, column: 26, scope: !1180)
!1182 = !DILocation(line: 321, column: 7, scope: !1180)
!1183 = !DILocation(line: 323, column: 12, scope: !1184)
!1184 = distinct !DILexicalBlock(scope: !1180, file: !63, line: 323, column: 11)
!1185 = !DILocation(line: 323, column: 11, scope: !1180)
!1186 = !DILocation(line: 324, column: 9, scope: !1184)
!1187 = !DILocation(line: 324, column: 9, scope: !1188)
!1188 = distinct !DILexicalBlock(scope: !1189, file: !63, line: 324, column: 9)
!1189 = distinct !DILexicalBlock(scope: !1184, file: !63, line: 324, column: 9)
!1190 = !DILocation(line: 324, column: 9, scope: !1189)
!1191 = !DILocation(line: 325, column: 25, scope: !1180)
!1192 = !DILocation(line: 326, column: 20, scope: !1180)
!1193 = !DILocation(line: 327, column: 24, scope: !1180)
!1194 = !DILocation(line: 328, column: 7, scope: !1180)
!1195 = !DILocation(line: 331, column: 25, scope: !1180)
!1196 = !DILocation(line: 332, column: 26, scope: !1180)
!1197 = !DILocation(line: 333, column: 7, scope: !1180)
!1198 = !DILocation(line: 339, column: 13, scope: !1199)
!1199 = distinct !DILexicalBlock(scope: !1200, file: !63, line: 339, column: 13)
!1200 = distinct !DILexicalBlock(scope: !1180, file: !63, line: 338, column: 7)
!1201 = !DILocation(line: 339, column: 27, scope: !1199)
!1202 = !DILocation(line: 339, column: 13, scope: !1200)
!1203 = !DILocation(line: 362, column: 50, scope: !1204)
!1204 = distinct !DILexicalBlock(scope: !1199, file: !63, line: 340, column: 11)
!1205 = !DILocation(line: 362, column: 26, scope: !1204)
!1206 = !DILocation(line: 362, column: 24, scope: !1204)
!1207 = !DILocation(line: 363, column: 51, scope: !1204)
!1208 = !DILocation(line: 363, column: 27, scope: !1204)
!1209 = !DILocation(line: 363, column: 25, scope: !1204)
!1210 = !DILocation(line: 364, column: 11, scope: !1204)
!1211 = !DILocation(line: 365, column: 14, scope: !1212)
!1212 = distinct !DILexicalBlock(scope: !1200, file: !63, line: 365, column: 13)
!1213 = !DILocation(line: 365, column: 13, scope: !1200)
!1214 = !DILocation(line: 366, column: 31, scope: !1215)
!1215 = distinct !DILexicalBlock(scope: !1212, file: !63, line: 366, column: 11)
!1216 = !DILocation(line: 366, column: 29, scope: !1215)
!1217 = !DILocation(line: 366, column: 16, scope: !1215)
!1218 = !DILocation(line: 366, column: 44, scope: !1219)
!1219 = distinct !DILexicalBlock(scope: !1215, file: !63, line: 366, column: 11)
!1220 = !DILocation(line: 366, column: 43, scope: !1219)
!1221 = !DILocation(line: 366, column: 11, scope: !1215)
!1222 = !DILocation(line: 367, column: 13, scope: !1219)
!1223 = !DILocation(line: 367, column: 13, scope: !1224)
!1224 = distinct !DILexicalBlock(scope: !1225, file: !63, line: 367, column: 13)
!1225 = distinct !DILexicalBlock(scope: !1219, file: !63, line: 367, column: 13)
!1226 = !DILocation(line: 367, column: 13, scope: !1225)
!1227 = !DILocation(line: 366, column: 70, scope: !1219)
!1228 = !DILocation(line: 366, column: 11, scope: !1219)
!1229 = distinct !{!1229, !1221, !1230}
!1230 = !DILocation(line: 367, column: 13, scope: !1215)
!1231 = !DILocation(line: 368, column: 27, scope: !1200)
!1232 = !DILocation(line: 369, column: 24, scope: !1200)
!1233 = !DILocation(line: 369, column: 22, scope: !1200)
!1234 = !DILocation(line: 370, column: 36, scope: !1200)
!1235 = !DILocation(line: 370, column: 28, scope: !1200)
!1236 = !DILocation(line: 370, column: 26, scope: !1200)
!1237 = !DILocation(line: 372, column: 7, scope: !1180)
!1238 = !DILocation(line: 375, column: 25, scope: !1180)
!1239 = !DILocation(line: 376, column: 7, scope: !1180)
!1240 = !DILocation(line: 378, column: 26, scope: !1180)
!1241 = !DILocation(line: 379, column: 7, scope: !1180)
!1242 = !DILocation(line: 381, column: 12, scope: !1243)
!1243 = distinct !DILexicalBlock(scope: !1180, file: !63, line: 381, column: 11)
!1244 = !DILocation(line: 381, column: 11, scope: !1180)
!1245 = !DILocation(line: 382, column: 27, scope: !1243)
!1246 = !DILocation(line: 382, column: 9, scope: !1243)
!1247 = !DILocation(line: 383, column: 7, scope: !1180)
!1248 = !DILocation(line: 385, column: 21, scope: !1180)
!1249 = !DILocation(line: 386, column: 12, scope: !1250)
!1250 = distinct !DILexicalBlock(scope: !1180, file: !63, line: 386, column: 11)
!1251 = !DILocation(line: 386, column: 11, scope: !1180)
!1252 = !DILocation(line: 387, column: 9, scope: !1250)
!1253 = !DILocation(line: 387, column: 9, scope: !1254)
!1254 = distinct !DILexicalBlock(scope: !1255, file: !63, line: 387, column: 9)
!1255 = distinct !DILexicalBlock(scope: !1250, file: !63, line: 387, column: 9)
!1256 = !DILocation(line: 387, column: 9, scope: !1255)
!1257 = !DILocation(line: 388, column: 20, scope: !1180)
!1258 = !DILocation(line: 389, column: 24, scope: !1180)
!1259 = !DILocation(line: 390, column: 7, scope: !1180)
!1260 = !DILocation(line: 393, column: 26, scope: !1180)
!1261 = !DILocation(line: 394, column: 7, scope: !1180)
!1262 = !DILocation(line: 397, column: 7, scope: !1180)
!1263 = !DILocation(line: 400, column: 10, scope: !1264)
!1264 = distinct !DILexicalBlock(scope: !1124, file: !63, line: 400, column: 3)
!1265 = !DILocation(line: 400, column: 8, scope: !1264)
!1266 = !DILocation(line: 400, column: 19, scope: !1267)
!1267 = distinct !DILexicalBlock(scope: !1264, file: !63, line: 400, column: 3)
!1268 = !DILocation(line: 400, column: 27, scope: !1267)
!1269 = !DILocation(line: 400, column: 41, scope: !1267)
!1270 = !DILocation(line: 400, column: 45, scope: !1267)
!1271 = !DILocation(line: 400, column: 48, scope: !1267)
!1272 = !DILocation(line: 400, column: 58, scope: !1267)
!1273 = !DILocation(line: 400, column: 63, scope: !1267)
!1274 = !DILocation(line: 400, column: 60, scope: !1267)
!1275 = !DILocation(line: 400, column: 16, scope: !1267)
!1276 = !DILocation(line: 400, column: 3, scope: !1264)
!1277 = !DILocalVariable(name: "c", scope: !1278, file: !63, line: 402, type: !130)
!1278 = distinct !DILexicalBlock(scope: !1267, file: !63, line: 401, column: 5)
!1279 = !DILocation(line: 402, column: 21, scope: !1278)
!1280 = !DILocalVariable(name: "esc", scope: !1278, file: !63, line: 403, type: !130)
!1281 = !DILocation(line: 403, column: 21, scope: !1278)
!1282 = !DILocalVariable(name: "is_right_quote", scope: !1278, file: !63, line: 404, type: !17)
!1283 = !DILocation(line: 404, column: 12, scope: !1278)
!1284 = !DILocalVariable(name: "escaping", scope: !1278, file: !63, line: 405, type: !17)
!1285 = !DILocation(line: 405, column: 12, scope: !1278)
!1286 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !1278, file: !63, line: 406, type: !17)
!1287 = !DILocation(line: 406, column: 12, scope: !1278)
!1288 = !DILocation(line: 408, column: 11, scope: !1289)
!1289 = distinct !DILexicalBlock(scope: !1278, file: !63, line: 408, column: 11)
!1290 = !DILocation(line: 409, column: 11, scope: !1289)
!1291 = !DILocation(line: 409, column: 14, scope: !1289)
!1292 = !DILocation(line: 409, column: 28, scope: !1289)
!1293 = !DILocation(line: 410, column: 11, scope: !1289)
!1294 = !DILocation(line: 410, column: 14, scope: !1289)
!1295 = !DILocation(line: 411, column: 11, scope: !1289)
!1296 = !DILocation(line: 411, column: 15, scope: !1289)
!1297 = !DILocation(line: 411, column: 19, scope: !1289)
!1298 = !DILocation(line: 411, column: 17, scope: !1289)
!1299 = !DILocation(line: 412, column: 19, scope: !1289)
!1300 = !DILocation(line: 412, column: 27, scope: !1289)
!1301 = !DILocation(line: 412, column: 39, scope: !1289)
!1302 = !DILocation(line: 412, column: 46, scope: !1289)
!1303 = !DILocation(line: 412, column: 44, scope: !1289)
!1304 = !DILocation(line: 416, column: 40, scope: !1289)
!1305 = !DILocation(line: 416, column: 32, scope: !1289)
!1306 = !DILocation(line: 416, column: 30, scope: !1289)
!1307 = !DILocation(line: 416, column: 48, scope: !1289)
!1308 = !DILocation(line: 412, column: 15, scope: !1289)
!1309 = !DILocation(line: 417, column: 11, scope: !1289)
!1310 = !DILocation(line: 417, column: 22, scope: !1289)
!1311 = !DILocation(line: 417, column: 28, scope: !1289)
!1312 = !DILocation(line: 417, column: 26, scope: !1289)
!1313 = !DILocation(line: 417, column: 31, scope: !1289)
!1314 = !DILocation(line: 417, column: 45, scope: !1289)
!1315 = !DILocation(line: 417, column: 14, scope: !1289)
!1316 = !DILocation(line: 417, column: 63, scope: !1289)
!1317 = !DILocation(line: 408, column: 11, scope: !1278)
!1318 = !DILocation(line: 419, column: 15, scope: !1319)
!1319 = distinct !DILexicalBlock(scope: !1320, file: !63, line: 419, column: 15)
!1320 = distinct !DILexicalBlock(scope: !1289, file: !63, line: 418, column: 9)
!1321 = !DILocation(line: 419, column: 15, scope: !1320)
!1322 = !DILocation(line: 420, column: 13, scope: !1319)
!1323 = !DILocation(line: 421, column: 26, scope: !1320)
!1324 = !DILocation(line: 422, column: 9, scope: !1320)
!1325 = !DILocation(line: 424, column: 11, scope: !1278)
!1326 = !DILocation(line: 424, column: 15, scope: !1278)
!1327 = !DILocation(line: 424, column: 9, scope: !1278)
!1328 = !DILocation(line: 425, column: 15, scope: !1278)
!1329 = !DILocation(line: 425, column: 7, scope: !1278)
!1330 = !DILocation(line: 428, column: 15, scope: !1331)
!1331 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 428, column: 15)
!1332 = distinct !DILexicalBlock(scope: !1278, file: !63, line: 426, column: 9)
!1333 = !DILocation(line: 428, column: 15, scope: !1332)
!1334 = !DILocation(line: 430, column: 15, scope: !1335)
!1335 = distinct !DILexicalBlock(scope: !1331, file: !63, line: 429, column: 13)
!1336 = !DILocation(line: 430, column: 15, scope: !1337)
!1337 = distinct !DILexicalBlock(scope: !1338, file: !63, line: 430, column: 15)
!1338 = distinct !DILexicalBlock(scope: !1335, file: !63, line: 430, column: 15)
!1339 = !DILocation(line: 430, column: 15, scope: !1338)
!1340 = !DILocation(line: 430, column: 15, scope: !1341)
!1341 = distinct !DILexicalBlock(scope: !1338, file: !63, line: 430, column: 15)
!1342 = !DILocation(line: 430, column: 15, scope: !1343)
!1343 = distinct !DILexicalBlock(scope: !1341, file: !63, line: 430, column: 15)
!1344 = !DILocation(line: 430, column: 15, scope: !1345)
!1345 = distinct !DILexicalBlock(scope: !1346, file: !63, line: 430, column: 15)
!1346 = distinct !DILexicalBlock(scope: !1343, file: !63, line: 430, column: 15)
!1347 = !DILocation(line: 430, column: 15, scope: !1346)
!1348 = !DILocation(line: 430, column: 15, scope: !1349)
!1349 = distinct !DILexicalBlock(scope: !1350, file: !63, line: 430, column: 15)
!1350 = distinct !DILexicalBlock(scope: !1343, file: !63, line: 430, column: 15)
!1351 = !DILocation(line: 430, column: 15, scope: !1350)
!1352 = !DILocation(line: 430, column: 15, scope: !1353)
!1353 = distinct !DILexicalBlock(scope: !1354, file: !63, line: 430, column: 15)
!1354 = distinct !DILexicalBlock(scope: !1343, file: !63, line: 430, column: 15)
!1355 = !DILocation(line: 430, column: 15, scope: !1354)
!1356 = !DILocation(line: 430, column: 15, scope: !1357)
!1357 = distinct !DILexicalBlock(scope: !1358, file: !63, line: 430, column: 15)
!1358 = distinct !DILexicalBlock(scope: !1338, file: !63, line: 430, column: 15)
!1359 = !DILocation(line: 430, column: 15, scope: !1358)
!1360 = !DILocation(line: 437, column: 19, scope: !1361)
!1361 = distinct !DILexicalBlock(scope: !1335, file: !63, line: 437, column: 19)
!1362 = !DILocation(line: 437, column: 33, scope: !1361)
!1363 = !DILocation(line: 438, column: 19, scope: !1361)
!1364 = !DILocation(line: 438, column: 22, scope: !1361)
!1365 = !DILocation(line: 438, column: 24, scope: !1361)
!1366 = !DILocation(line: 438, column: 30, scope: !1361)
!1367 = !DILocation(line: 438, column: 28, scope: !1361)
!1368 = !DILocation(line: 438, column: 38, scope: !1361)
!1369 = !DILocation(line: 438, column: 48, scope: !1361)
!1370 = !DILocation(line: 438, column: 52, scope: !1361)
!1371 = !DILocation(line: 438, column: 54, scope: !1361)
!1372 = !DILocation(line: 438, column: 45, scope: !1361)
!1373 = !DILocation(line: 438, column: 59, scope: !1361)
!1374 = !DILocation(line: 438, column: 62, scope: !1361)
!1375 = !DILocation(line: 438, column: 66, scope: !1361)
!1376 = !DILocation(line: 438, column: 68, scope: !1361)
!1377 = !DILocation(line: 438, column: 73, scope: !1361)
!1378 = !DILocation(line: 437, column: 19, scope: !1335)
!1379 = !DILocation(line: 440, column: 19, scope: !1380)
!1380 = distinct !DILexicalBlock(scope: !1361, file: !63, line: 439, column: 17)
!1381 = !DILocation(line: 440, column: 19, scope: !1382)
!1382 = distinct !DILexicalBlock(scope: !1383, file: !63, line: 440, column: 19)
!1383 = distinct !DILexicalBlock(scope: !1380, file: !63, line: 440, column: 19)
!1384 = !DILocation(line: 440, column: 19, scope: !1383)
!1385 = !DILocation(line: 441, column: 19, scope: !1380)
!1386 = !DILocation(line: 441, column: 19, scope: !1387)
!1387 = distinct !DILexicalBlock(scope: !1388, file: !63, line: 441, column: 19)
!1388 = distinct !DILexicalBlock(scope: !1380, file: !63, line: 441, column: 19)
!1389 = !DILocation(line: 441, column: 19, scope: !1388)
!1390 = !DILocation(line: 442, column: 17, scope: !1380)
!1391 = !DILocation(line: 443, column: 17, scope: !1335)
!1392 = !DILocation(line: 448, column: 13, scope: !1335)
!1393 = !DILocation(line: 449, column: 20, scope: !1394)
!1394 = distinct !DILexicalBlock(scope: !1331, file: !63, line: 449, column: 20)
!1395 = !DILocation(line: 449, column: 26, scope: !1394)
!1396 = !DILocation(line: 449, column: 20, scope: !1331)
!1397 = !DILocation(line: 450, column: 13, scope: !1394)
!1398 = !DILocation(line: 451, column: 11, scope: !1332)
!1399 = !DILocation(line: 454, column: 19, scope: !1332)
!1400 = !DILocation(line: 454, column: 11, scope: !1332)
!1401 = !DILocation(line: 457, column: 19, scope: !1402)
!1402 = distinct !DILexicalBlock(scope: !1403, file: !63, line: 457, column: 19)
!1403 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 455, column: 13)
!1404 = !DILocation(line: 457, column: 19, scope: !1403)
!1405 = !DILocation(line: 458, column: 17, scope: !1402)
!1406 = !DILocation(line: 459, column: 15, scope: !1403)
!1407 = !DILocation(line: 462, column: 20, scope: !1408)
!1408 = distinct !DILexicalBlock(scope: !1403, file: !63, line: 462, column: 19)
!1409 = !DILocation(line: 462, column: 26, scope: !1408)
!1410 = !DILocation(line: 463, column: 19, scope: !1408)
!1411 = !DILocation(line: 463, column: 22, scope: !1408)
!1412 = !DILocation(line: 463, column: 24, scope: !1408)
!1413 = !DILocation(line: 463, column: 30, scope: !1408)
!1414 = !DILocation(line: 463, column: 28, scope: !1408)
!1415 = !DILocation(line: 463, column: 38, scope: !1408)
!1416 = !DILocation(line: 463, column: 41, scope: !1408)
!1417 = !DILocation(line: 463, column: 45, scope: !1408)
!1418 = !DILocation(line: 463, column: 47, scope: !1408)
!1419 = !DILocation(line: 463, column: 52, scope: !1408)
!1420 = !DILocation(line: 462, column: 19, scope: !1403)
!1421 = !DILocation(line: 464, column: 25, scope: !1408)
!1422 = !DILocation(line: 464, column: 29, scope: !1408)
!1423 = !DILocation(line: 464, column: 31, scope: !1408)
!1424 = !DILocation(line: 464, column: 17, scope: !1408)
!1425 = !DILocation(line: 471, column: 25, scope: !1426)
!1426 = distinct !DILexicalBlock(scope: !1427, file: !63, line: 471, column: 25)
!1427 = distinct !DILexicalBlock(scope: !1408, file: !63, line: 465, column: 19)
!1428 = !DILocation(line: 471, column: 25, scope: !1427)
!1429 = !DILocation(line: 472, column: 23, scope: !1426)
!1430 = !DILocation(line: 473, column: 25, scope: !1427)
!1431 = !DILocation(line: 473, column: 29, scope: !1427)
!1432 = !DILocation(line: 473, column: 31, scope: !1427)
!1433 = !DILocation(line: 473, column: 23, scope: !1427)
!1434 = !DILocation(line: 474, column: 23, scope: !1427)
!1435 = !DILocation(line: 475, column: 21, scope: !1427)
!1436 = !DILocation(line: 475, column: 21, scope: !1437)
!1437 = distinct !DILexicalBlock(scope: !1438, file: !63, line: 475, column: 21)
!1438 = distinct !DILexicalBlock(scope: !1427, file: !63, line: 475, column: 21)
!1439 = !DILocation(line: 475, column: 21, scope: !1438)
!1440 = !DILocation(line: 476, column: 21, scope: !1427)
!1441 = !DILocation(line: 476, column: 21, scope: !1442)
!1442 = distinct !DILexicalBlock(scope: !1443, file: !63, line: 476, column: 21)
!1443 = distinct !DILexicalBlock(scope: !1427, file: !63, line: 476, column: 21)
!1444 = !DILocation(line: 476, column: 21, scope: !1443)
!1445 = !DILocation(line: 477, column: 21, scope: !1427)
!1446 = !DILocation(line: 477, column: 21, scope: !1447)
!1447 = distinct !DILexicalBlock(scope: !1448, file: !63, line: 477, column: 21)
!1448 = distinct !DILexicalBlock(scope: !1427, file: !63, line: 477, column: 21)
!1449 = !DILocation(line: 477, column: 21, scope: !1448)
!1450 = !DILocation(line: 478, column: 21, scope: !1427)
!1451 = !DILocation(line: 478, column: 21, scope: !1452)
!1452 = distinct !DILexicalBlock(scope: !1453, file: !63, line: 478, column: 21)
!1453 = distinct !DILexicalBlock(scope: !1427, file: !63, line: 478, column: 21)
!1454 = !DILocation(line: 478, column: 21, scope: !1453)
!1455 = !DILocation(line: 479, column: 21, scope: !1427)
!1456 = !DILocation(line: 482, column: 21, scope: !1427)
!1457 = !DILocation(line: 483, column: 19, scope: !1427)
!1458 = !DILocation(line: 484, column: 15, scope: !1403)
!1459 = !DILocation(line: 487, column: 15, scope: !1403)
!1460 = !DILocation(line: 489, column: 11, scope: !1332)
!1461 = !DILocation(line: 491, column: 24, scope: !1332)
!1462 = !DILocation(line: 491, column: 31, scope: !1332)
!1463 = !DILocation(line: 492, column: 24, scope: !1332)
!1464 = !DILocation(line: 492, column: 31, scope: !1332)
!1465 = !DILocation(line: 493, column: 24, scope: !1332)
!1466 = !DILocation(line: 493, column: 31, scope: !1332)
!1467 = !DILocation(line: 494, column: 24, scope: !1332)
!1468 = !DILocation(line: 494, column: 31, scope: !1332)
!1469 = !DILocation(line: 495, column: 24, scope: !1332)
!1470 = !DILocation(line: 495, column: 31, scope: !1332)
!1471 = !DILocation(line: 496, column: 24, scope: !1332)
!1472 = !DILocation(line: 496, column: 31, scope: !1332)
!1473 = !DILocation(line: 497, column: 24, scope: !1332)
!1474 = !DILocation(line: 497, column: 31, scope: !1332)
!1475 = !DILocation(line: 498, column: 26, scope: !1332)
!1476 = !DILocation(line: 498, column: 24, scope: !1332)
!1477 = !DILocation(line: 500, column: 15, scope: !1478)
!1478 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 500, column: 15)
!1479 = !DILocation(line: 500, column: 29, scope: !1478)
!1480 = !DILocation(line: 500, column: 15, scope: !1332)
!1481 = !DILocation(line: 502, column: 19, scope: !1482)
!1482 = distinct !DILexicalBlock(scope: !1483, file: !63, line: 502, column: 19)
!1483 = distinct !DILexicalBlock(scope: !1478, file: !63, line: 501, column: 13)
!1484 = !DILocation(line: 502, column: 19, scope: !1483)
!1485 = !DILocation(line: 503, column: 17, scope: !1482)
!1486 = !DILocation(line: 504, column: 15, scope: !1483)
!1487 = !DILocation(line: 509, column: 15, scope: !1488)
!1488 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 509, column: 15)
!1489 = !DILocation(line: 509, column: 33, scope: !1488)
!1490 = !DILocation(line: 509, column: 36, scope: !1488)
!1491 = !DILocation(line: 509, column: 55, scope: !1488)
!1492 = !DILocation(line: 509, column: 58, scope: !1488)
!1493 = !DILocation(line: 509, column: 15, scope: !1332)
!1494 = !DILocation(line: 510, column: 13, scope: !1488)
!1495 = !DILabel(scope: !1332, name: "c_and_shell_escape", file: !63, line: 512)
!1496 = !DILocation(line: 512, column: 9, scope: !1332)
!1497 = !DILocation(line: 513, column: 15, scope: !1498)
!1498 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 513, column: 15)
!1499 = !DILocation(line: 513, column: 29, scope: !1498)
!1500 = !DILocation(line: 514, column: 15, scope: !1498)
!1501 = !DILocation(line: 514, column: 18, scope: !1498)
!1502 = !DILocation(line: 513, column: 15, scope: !1332)
!1503 = !DILocation(line: 515, column: 13, scope: !1498)
!1504 = !DILabel(scope: !1332, name: "c_escape", file: !63, line: 517)
!1505 = !DILocation(line: 517, column: 9, scope: !1332)
!1506 = !DILocation(line: 518, column: 15, scope: !1507)
!1507 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 518, column: 15)
!1508 = !DILocation(line: 518, column: 15, scope: !1332)
!1509 = !DILocation(line: 520, column: 19, scope: !1510)
!1510 = distinct !DILexicalBlock(scope: !1507, file: !63, line: 519, column: 13)
!1511 = !DILocation(line: 520, column: 17, scope: !1510)
!1512 = !DILocation(line: 521, column: 15, scope: !1510)
!1513 = !DILocation(line: 523, column: 11, scope: !1332)
!1514 = !DILocation(line: 526, column: 18, scope: !1515)
!1515 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 526, column: 15)
!1516 = !DILocation(line: 526, column: 26, scope: !1515)
!1517 = !DILocation(line: 526, column: 15, scope: !1332)
!1518 = !DILocation(line: 526, column: 40, scope: !1515)
!1519 = !DILocation(line: 526, column: 47, scope: !1515)
!1520 = !DILocation(line: 526, column: 57, scope: !1515)
!1521 = !DILocation(line: 526, column: 65, scope: !1515)
!1522 = !DILocation(line: 527, column: 13, scope: !1515)
!1523 = !DILocation(line: 528, column: 11, scope: !1332)
!1524 = !DILocation(line: 530, column: 15, scope: !1525)
!1525 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 530, column: 15)
!1526 = !DILocation(line: 530, column: 17, scope: !1525)
!1527 = !DILocation(line: 530, column: 15, scope: !1332)
!1528 = !DILocation(line: 531, column: 13, scope: !1525)
!1529 = !DILocation(line: 532, column: 11, scope: !1332)
!1530 = !DILocation(line: 534, column: 36, scope: !1332)
!1531 = !DILocation(line: 535, column: 11, scope: !1332)
!1532 = !DILocation(line: 548, column: 15, scope: !1533)
!1533 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 548, column: 15)
!1534 = !DILocation(line: 548, column: 29, scope: !1533)
!1535 = !DILocation(line: 549, column: 15, scope: !1533)
!1536 = !DILocation(line: 549, column: 18, scope: !1533)
!1537 = !DILocation(line: 548, column: 15, scope: !1332)
!1538 = !DILocation(line: 550, column: 13, scope: !1533)
!1539 = !DILocation(line: 551, column: 11, scope: !1332)
!1540 = !DILocation(line: 554, column: 36, scope: !1332)
!1541 = !DILocation(line: 555, column: 36, scope: !1332)
!1542 = !DILocation(line: 556, column: 15, scope: !1543)
!1543 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 556, column: 15)
!1544 = !DILocation(line: 556, column: 29, scope: !1543)
!1545 = !DILocation(line: 556, column: 15, scope: !1332)
!1546 = !DILocation(line: 558, column: 19, scope: !1547)
!1547 = distinct !DILexicalBlock(scope: !1548, file: !63, line: 558, column: 19)
!1548 = distinct !DILexicalBlock(scope: !1543, file: !63, line: 557, column: 13)
!1549 = !DILocation(line: 558, column: 19, scope: !1548)
!1550 = !DILocation(line: 559, column: 17, scope: !1547)
!1551 = !DILocation(line: 561, column: 19, scope: !1552)
!1552 = distinct !DILexicalBlock(scope: !1548, file: !63, line: 561, column: 19)
!1553 = !DILocation(line: 561, column: 30, scope: !1552)
!1554 = !DILocation(line: 561, column: 35, scope: !1552)
!1555 = !DILocation(line: 561, column: 19, scope: !1548)
!1556 = !DILocation(line: 566, column: 37, scope: !1557)
!1557 = distinct !DILexicalBlock(scope: !1552, file: !63, line: 562, column: 17)
!1558 = !DILocation(line: 566, column: 35, scope: !1557)
!1559 = !DILocation(line: 567, column: 30, scope: !1557)
!1560 = !DILocation(line: 568, column: 17, scope: !1557)
!1561 = !DILocation(line: 570, column: 15, scope: !1548)
!1562 = !DILocation(line: 570, column: 15, scope: !1563)
!1563 = distinct !DILexicalBlock(scope: !1564, file: !63, line: 570, column: 15)
!1564 = distinct !DILexicalBlock(scope: !1548, file: !63, line: 570, column: 15)
!1565 = !DILocation(line: 570, column: 15, scope: !1564)
!1566 = !DILocation(line: 571, column: 15, scope: !1548)
!1567 = !DILocation(line: 571, column: 15, scope: !1568)
!1568 = distinct !DILexicalBlock(scope: !1569, file: !63, line: 571, column: 15)
!1569 = distinct !DILexicalBlock(scope: !1548, file: !63, line: 571, column: 15)
!1570 = !DILocation(line: 571, column: 15, scope: !1569)
!1571 = !DILocation(line: 572, column: 15, scope: !1548)
!1572 = !DILocation(line: 572, column: 15, scope: !1573)
!1573 = distinct !DILexicalBlock(scope: !1574, file: !63, line: 572, column: 15)
!1574 = distinct !DILexicalBlock(scope: !1548, file: !63, line: 572, column: 15)
!1575 = !DILocation(line: 572, column: 15, scope: !1574)
!1576 = !DILocation(line: 573, column: 40, scope: !1548)
!1577 = !DILocation(line: 574, column: 13, scope: !1548)
!1578 = !DILocation(line: 575, column: 11, scope: !1332)
!1579 = !DILocation(line: 599, column: 36, scope: !1332)
!1580 = !DILocation(line: 600, column: 11, scope: !1332)
!1581 = !DILocalVariable(name: "m", scope: !1582, file: !63, line: 610, type: !57)
!1582 = distinct !DILexicalBlock(scope: !1332, file: !63, line: 608, column: 11)
!1583 = !DILocation(line: 610, column: 20, scope: !1582)
!1584 = !DILocalVariable(name: "printable", scope: !1582, file: !63, line: 612, type: !17)
!1585 = !DILocation(line: 612, column: 18, scope: !1582)
!1586 = !DILocation(line: 614, column: 17, scope: !1587)
!1587 = distinct !DILexicalBlock(scope: !1582, file: !63, line: 614, column: 17)
!1588 = !DILocation(line: 614, column: 17, scope: !1582)
!1589 = !DILocation(line: 616, column: 19, scope: !1590)
!1590 = distinct !DILexicalBlock(scope: !1587, file: !63, line: 615, column: 15)
!1591 = !DILocation(line: 617, column: 29, scope: !1590)
!1592 = !DILocation(line: 617, column: 41, scope: !1590)
!1593 = !DILocation(line: 617, column: 27, scope: !1590)
!1594 = !DILocation(line: 618, column: 15, scope: !1590)
!1595 = !DILocalVariable(name: "mbstate", scope: !1596, file: !63, line: 621, type: !1597)
!1596 = distinct !DILexicalBlock(scope: !1587, file: !63, line: 620, column: 15)
!1597 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1598, line: 6, baseType: !1599)
!1598 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "")
!1599 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1600, line: 21, baseType: !1601)
!1600 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "")
!1601 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1600, line: 13, size: 64, elements: !1602)
!1602 = !{!1603, !1604}
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !1601, file: !1600, line: 15, baseType: !25, size: 32)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !1601, file: !1600, line: 20, baseType: !1605, size: 32, offset: 32)
!1605 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1601, file: !1600, line: 16, size: 32, elements: !1606)
!1606 = !{!1607, !1608}
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !1605, file: !1600, line: 18, baseType: !42, size: 32)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !1605, file: !1600, line: 19, baseType: !1609, size: 32)
!1609 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 32, elements: !1610)
!1610 = !{!1611}
!1611 = !DISubrange(count: 4)
!1612 = !DILocation(line: 621, column: 27, scope: !1596)
!1613 = !DILocation(line: 622, column: 17, scope: !1596)
!1614 = !DILocation(line: 624, column: 19, scope: !1596)
!1615 = !DILocation(line: 625, column: 27, scope: !1596)
!1616 = !DILocation(line: 626, column: 21, scope: !1617)
!1617 = distinct !DILexicalBlock(scope: !1596, file: !63, line: 626, column: 21)
!1618 = !DILocation(line: 626, column: 29, scope: !1617)
!1619 = !DILocation(line: 626, column: 21, scope: !1596)
!1620 = !DILocation(line: 627, column: 37, scope: !1617)
!1621 = !DILocation(line: 627, column: 29, scope: !1617)
!1622 = !DILocation(line: 627, column: 27, scope: !1617)
!1623 = !DILocation(line: 627, column: 19, scope: !1617)
!1624 = !DILocation(line: 629, column: 17, scope: !1596)
!1625 = !DILocalVariable(name: "w", scope: !1626, file: !63, line: 631, type: !1627)
!1626 = distinct !DILexicalBlock(scope: !1596, file: !63, line: 630, column: 19)
!1627 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !58, line: 74, baseType: !25)
!1628 = !DILocation(line: 631, column: 29, scope: !1626)
!1629 = !DILocalVariable(name: "bytes", scope: !1626, file: !63, line: 632, type: !57)
!1630 = !DILocation(line: 632, column: 28, scope: !1626)
!1631 = !DILocation(line: 632, column: 50, scope: !1626)
!1632 = !DILocation(line: 632, column: 54, scope: !1626)
!1633 = !DILocation(line: 632, column: 58, scope: !1626)
!1634 = !DILocation(line: 632, column: 56, scope: !1626)
!1635 = !DILocation(line: 633, column: 45, scope: !1626)
!1636 = !DILocation(line: 633, column: 56, scope: !1626)
!1637 = !DILocation(line: 633, column: 60, scope: !1626)
!1638 = !DILocation(line: 633, column: 58, scope: !1626)
!1639 = !DILocation(line: 633, column: 53, scope: !1626)
!1640 = !DILocation(line: 632, column: 36, scope: !1626)
!1641 = !DILocation(line: 634, column: 25, scope: !1642)
!1642 = distinct !DILexicalBlock(scope: !1626, file: !63, line: 634, column: 25)
!1643 = !DILocation(line: 634, column: 31, scope: !1642)
!1644 = !DILocation(line: 634, column: 25, scope: !1626)
!1645 = !DILocation(line: 635, column: 23, scope: !1642)
!1646 = !DILocation(line: 636, column: 30, scope: !1647)
!1647 = distinct !DILexicalBlock(scope: !1642, file: !63, line: 636, column: 30)
!1648 = !DILocation(line: 636, column: 36, scope: !1647)
!1649 = !DILocation(line: 636, column: 30, scope: !1642)
!1650 = !DILocation(line: 638, column: 35, scope: !1651)
!1651 = distinct !DILexicalBlock(scope: !1647, file: !63, line: 637, column: 23)
!1652 = !DILocation(line: 639, column: 25, scope: !1651)
!1653 = !DILocation(line: 641, column: 30, scope: !1654)
!1654 = distinct !DILexicalBlock(scope: !1647, file: !63, line: 641, column: 30)
!1655 = !DILocation(line: 641, column: 36, scope: !1654)
!1656 = !DILocation(line: 641, column: 30, scope: !1647)
!1657 = !DILocation(line: 643, column: 35, scope: !1658)
!1658 = distinct !DILexicalBlock(scope: !1654, file: !63, line: 642, column: 23)
!1659 = !DILocation(line: 644, column: 25, scope: !1658)
!1660 = !DILocation(line: 644, column: 32, scope: !1658)
!1661 = !DILocation(line: 644, column: 36, scope: !1658)
!1662 = !DILocation(line: 644, column: 34, scope: !1658)
!1663 = !DILocation(line: 644, column: 40, scope: !1658)
!1664 = !DILocation(line: 644, column: 38, scope: !1658)
!1665 = !DILocation(line: 644, column: 48, scope: !1658)
!1666 = !DILocation(line: 644, column: 51, scope: !1658)
!1667 = !DILocation(line: 644, column: 55, scope: !1658)
!1668 = !DILocation(line: 644, column: 59, scope: !1658)
!1669 = !DILocation(line: 644, column: 57, scope: !1658)
!1670 = !DILocation(line: 0, scope: !1658)
!1671 = !DILocation(line: 645, column: 28, scope: !1658)
!1672 = distinct !{!1672, !1659, !1671}
!1673 = !DILocation(line: 646, column: 25, scope: !1658)
!1674 = !DILocation(line: 654, column: 44, scope: !1675)
!1675 = distinct !DILexicalBlock(scope: !1676, file: !63, line: 654, column: 29)
!1676 = distinct !DILexicalBlock(scope: !1654, file: !63, line: 649, column: 23)
!1677 = !DILocation(line: 655, column: 29, scope: !1675)
!1678 = !DILocation(line: 655, column: 32, scope: !1675)
!1679 = !DILocation(line: 655, column: 46, scope: !1675)
!1680 = !DILocation(line: 654, column: 29, scope: !1676)
!1681 = !DILocalVariable(name: "j", scope: !1682, file: !63, line: 657, type: !57)
!1682 = distinct !DILexicalBlock(scope: !1675, file: !63, line: 656, column: 27)
!1683 = !DILocation(line: 657, column: 36, scope: !1682)
!1684 = !DILocation(line: 658, column: 36, scope: !1685)
!1685 = distinct !DILexicalBlock(scope: !1682, file: !63, line: 658, column: 29)
!1686 = !DILocation(line: 658, column: 34, scope: !1685)
!1687 = !DILocation(line: 658, column: 41, scope: !1688)
!1688 = distinct !DILexicalBlock(scope: !1685, file: !63, line: 658, column: 29)
!1689 = !DILocation(line: 658, column: 45, scope: !1688)
!1690 = !DILocation(line: 658, column: 43, scope: !1688)
!1691 = !DILocation(line: 658, column: 29, scope: !1685)
!1692 = !DILocation(line: 659, column: 39, scope: !1688)
!1693 = !DILocation(line: 659, column: 43, scope: !1688)
!1694 = !DILocation(line: 659, column: 47, scope: !1688)
!1695 = !DILocation(line: 659, column: 45, scope: !1688)
!1696 = !DILocation(line: 659, column: 51, scope: !1688)
!1697 = !DILocation(line: 659, column: 49, scope: !1688)
!1698 = !DILocation(line: 659, column: 31, scope: !1688)
!1699 = !DILocation(line: 663, column: 35, scope: !1700)
!1700 = distinct !DILexicalBlock(scope: !1688, file: !63, line: 660, column: 33)
!1701 = !DILocation(line: 666, column: 35, scope: !1700)
!1702 = !DILocation(line: 667, column: 33, scope: !1700)
!1703 = !DILocation(line: 658, column: 53, scope: !1688)
!1704 = !DILocation(line: 658, column: 29, scope: !1688)
!1705 = distinct !{!1705, !1691, !1706}
!1706 = !DILocation(line: 667, column: 33, scope: !1685)
!1707 = !DILocation(line: 668, column: 27, scope: !1682)
!1708 = !DILocation(line: 670, column: 41, scope: !1709)
!1709 = distinct !DILexicalBlock(scope: !1676, file: !63, line: 670, column: 29)
!1710 = !DILocation(line: 670, column: 31, scope: !1709)
!1711 = !DILocation(line: 670, column: 29, scope: !1676)
!1712 = !DILocation(line: 671, column: 37, scope: !1709)
!1713 = !DILocation(line: 671, column: 27, scope: !1709)
!1714 = !DILocation(line: 672, column: 30, scope: !1676)
!1715 = !DILocation(line: 672, column: 27, scope: !1676)
!1716 = !DILocation(line: 674, column: 19, scope: !1626)
!1717 = !DILocation(line: 675, column: 26, scope: !1596)
!1718 = !DILocation(line: 675, column: 24, scope: !1596)
!1719 = distinct !{!1719, !1624, !1720}
!1720 = !DILocation(line: 675, column: 44, scope: !1596)
!1721 = !DILocation(line: 678, column: 40, scope: !1582)
!1722 = !DILocation(line: 678, column: 38, scope: !1582)
!1723 = !DILocation(line: 680, column: 21, scope: !1724)
!1724 = distinct !DILexicalBlock(scope: !1582, file: !63, line: 680, column: 17)
!1725 = !DILocation(line: 680, column: 19, scope: !1724)
!1726 = !DILocation(line: 680, column: 23, scope: !1724)
!1727 = !DILocation(line: 680, column: 27, scope: !1724)
!1728 = !DILocation(line: 680, column: 45, scope: !1724)
!1729 = !DILocation(line: 680, column: 50, scope: !1724)
!1730 = !DILocation(line: 680, column: 17, scope: !1582)
!1731 = !DILocalVariable(name: "ilim", scope: !1732, file: !63, line: 684, type: !57)
!1732 = distinct !DILexicalBlock(scope: !1724, file: !63, line: 681, column: 15)
!1733 = !DILocation(line: 684, column: 24, scope: !1732)
!1734 = !DILocation(line: 684, column: 31, scope: !1732)
!1735 = !DILocation(line: 684, column: 35, scope: !1732)
!1736 = !DILocation(line: 684, column: 33, scope: !1732)
!1737 = !DILocation(line: 686, column: 17, scope: !1732)
!1738 = !DILocation(line: 688, column: 25, scope: !1739)
!1739 = distinct !DILexicalBlock(scope: !1740, file: !63, line: 688, column: 25)
!1740 = distinct !DILexicalBlock(scope: !1741, file: !63, line: 687, column: 19)
!1741 = distinct !DILexicalBlock(scope: !1742, file: !63, line: 686, column: 17)
!1742 = distinct !DILexicalBlock(scope: !1732, file: !63, line: 686, column: 17)
!1743 = !DILocation(line: 688, column: 43, scope: !1739)
!1744 = !DILocation(line: 688, column: 48, scope: !1739)
!1745 = !DILocation(line: 688, column: 25, scope: !1740)
!1746 = !DILocation(line: 690, column: 25, scope: !1747)
!1747 = distinct !DILexicalBlock(scope: !1739, file: !63, line: 689, column: 23)
!1748 = !DILocation(line: 690, column: 25, scope: !1749)
!1749 = distinct !DILexicalBlock(scope: !1750, file: !63, line: 690, column: 25)
!1750 = distinct !DILexicalBlock(scope: !1747, file: !63, line: 690, column: 25)
!1751 = !DILocation(line: 690, column: 25, scope: !1750)
!1752 = !DILocation(line: 690, column: 25, scope: !1753)
!1753 = distinct !DILexicalBlock(scope: !1750, file: !63, line: 690, column: 25)
!1754 = !DILocation(line: 690, column: 25, scope: !1755)
!1755 = distinct !DILexicalBlock(scope: !1753, file: !63, line: 690, column: 25)
!1756 = !DILocation(line: 690, column: 25, scope: !1757)
!1757 = distinct !DILexicalBlock(scope: !1758, file: !63, line: 690, column: 25)
!1758 = distinct !DILexicalBlock(scope: !1755, file: !63, line: 690, column: 25)
!1759 = !DILocation(line: 690, column: 25, scope: !1758)
!1760 = !DILocation(line: 690, column: 25, scope: !1761)
!1761 = distinct !DILexicalBlock(scope: !1762, file: !63, line: 690, column: 25)
!1762 = distinct !DILexicalBlock(scope: !1755, file: !63, line: 690, column: 25)
!1763 = !DILocation(line: 690, column: 25, scope: !1762)
!1764 = !DILocation(line: 690, column: 25, scope: !1765)
!1765 = distinct !DILexicalBlock(scope: !1766, file: !63, line: 690, column: 25)
!1766 = distinct !DILexicalBlock(scope: !1755, file: !63, line: 690, column: 25)
!1767 = !DILocation(line: 690, column: 25, scope: !1766)
!1768 = !DILocation(line: 690, column: 25, scope: !1769)
!1769 = distinct !DILexicalBlock(scope: !1770, file: !63, line: 690, column: 25)
!1770 = distinct !DILexicalBlock(scope: !1750, file: !63, line: 690, column: 25)
!1771 = !DILocation(line: 690, column: 25, scope: !1770)
!1772 = !DILocation(line: 691, column: 25, scope: !1747)
!1773 = !DILocation(line: 691, column: 25, scope: !1774)
!1774 = distinct !DILexicalBlock(scope: !1775, file: !63, line: 691, column: 25)
!1775 = distinct !DILexicalBlock(scope: !1747, file: !63, line: 691, column: 25)
!1776 = !DILocation(line: 691, column: 25, scope: !1775)
!1777 = !DILocation(line: 692, column: 25, scope: !1747)
!1778 = !DILocation(line: 692, column: 25, scope: !1779)
!1779 = distinct !DILexicalBlock(scope: !1780, file: !63, line: 692, column: 25)
!1780 = distinct !DILexicalBlock(scope: !1747, file: !63, line: 692, column: 25)
!1781 = !DILocation(line: 692, column: 25, scope: !1780)
!1782 = !DILocation(line: 693, column: 36, scope: !1747)
!1783 = !DILocation(line: 693, column: 38, scope: !1747)
!1784 = !DILocation(line: 693, column: 33, scope: !1747)
!1785 = !DILocation(line: 693, column: 29, scope: !1747)
!1786 = !DILocation(line: 693, column: 27, scope: !1747)
!1787 = !DILocation(line: 694, column: 23, scope: !1747)
!1788 = !DILocation(line: 695, column: 30, scope: !1789)
!1789 = distinct !DILexicalBlock(scope: !1739, file: !63, line: 695, column: 30)
!1790 = !DILocation(line: 695, column: 30, scope: !1739)
!1791 = !DILocation(line: 697, column: 25, scope: !1792)
!1792 = distinct !DILexicalBlock(scope: !1789, file: !63, line: 696, column: 23)
!1793 = !DILocation(line: 697, column: 25, scope: !1794)
!1794 = distinct !DILexicalBlock(scope: !1795, file: !63, line: 697, column: 25)
!1795 = distinct !DILexicalBlock(scope: !1792, file: !63, line: 697, column: 25)
!1796 = !DILocation(line: 697, column: 25, scope: !1795)
!1797 = !DILocation(line: 698, column: 40, scope: !1792)
!1798 = !DILocation(line: 699, column: 23, scope: !1792)
!1799 = !DILocation(line: 700, column: 25, scope: !1800)
!1800 = distinct !DILexicalBlock(scope: !1740, file: !63, line: 700, column: 25)
!1801 = !DILocation(line: 700, column: 33, scope: !1800)
!1802 = !DILocation(line: 700, column: 35, scope: !1800)
!1803 = !DILocation(line: 700, column: 30, scope: !1800)
!1804 = !DILocation(line: 700, column: 25, scope: !1740)
!1805 = !DILocation(line: 701, column: 23, scope: !1800)
!1806 = !DILocation(line: 702, column: 21, scope: !1740)
!1807 = !DILocation(line: 702, column: 21, scope: !1808)
!1808 = distinct !DILexicalBlock(scope: !1809, file: !63, line: 702, column: 21)
!1809 = distinct !DILexicalBlock(scope: !1740, file: !63, line: 702, column: 21)
!1810 = !DILocation(line: 702, column: 21, scope: !1809)
!1811 = !DILocation(line: 702, column: 21, scope: !1812)
!1812 = distinct !DILexicalBlock(scope: !1808, file: !63, line: 702, column: 21)
!1813 = !DILocation(line: 702, column: 21, scope: !1814)
!1814 = distinct !DILexicalBlock(scope: !1815, file: !63, line: 702, column: 21)
!1815 = distinct !DILexicalBlock(scope: !1812, file: !63, line: 702, column: 21)
!1816 = !DILocation(line: 702, column: 21, scope: !1815)
!1817 = !DILocation(line: 702, column: 21, scope: !1818)
!1818 = distinct !DILexicalBlock(scope: !1819, file: !63, line: 702, column: 21)
!1819 = distinct !DILexicalBlock(scope: !1812, file: !63, line: 702, column: 21)
!1820 = !DILocation(line: 702, column: 21, scope: !1819)
!1821 = !DILocation(line: 703, column: 21, scope: !1740)
!1822 = !DILocation(line: 703, column: 21, scope: !1823)
!1823 = distinct !DILexicalBlock(scope: !1824, file: !63, line: 703, column: 21)
!1824 = distinct !DILexicalBlock(scope: !1740, file: !63, line: 703, column: 21)
!1825 = !DILocation(line: 703, column: 21, scope: !1824)
!1826 = !DILocation(line: 704, column: 25, scope: !1740)
!1827 = !DILocation(line: 704, column: 29, scope: !1740)
!1828 = !DILocation(line: 704, column: 23, scope: !1740)
!1829 = !DILocation(line: 686, column: 17, scope: !1741)
!1830 = distinct !{!1830, !1831, !1832}
!1831 = !DILocation(line: 686, column: 17, scope: !1742)
!1832 = !DILocation(line: 705, column: 19, scope: !1742)
!1833 = !DILocation(line: 707, column: 17, scope: !1732)
!1834 = !DILocation(line: 710, column: 9, scope: !1332)
!1835 = !DILocation(line: 712, column: 16, scope: !1836)
!1836 = distinct !DILexicalBlock(scope: !1278, file: !63, line: 712, column: 11)
!1837 = !DILocation(line: 712, column: 34, scope: !1836)
!1838 = !DILocation(line: 712, column: 37, scope: !1836)
!1839 = !DILocation(line: 712, column: 51, scope: !1836)
!1840 = !DILocation(line: 713, column: 15, scope: !1836)
!1841 = !DILocation(line: 713, column: 18, scope: !1836)
!1842 = !DILocation(line: 714, column: 14, scope: !1836)
!1843 = !DILocation(line: 714, column: 17, scope: !1836)
!1844 = !DILocation(line: 715, column: 14, scope: !1836)
!1845 = !DILocation(line: 715, column: 17, scope: !1836)
!1846 = !DILocation(line: 715, column: 33, scope: !1836)
!1847 = !DILocation(line: 715, column: 35, scope: !1836)
!1848 = !DILocation(line: 715, column: 51, scope: !1836)
!1849 = !DILocation(line: 715, column: 53, scope: !1836)
!1850 = !DILocation(line: 715, column: 47, scope: !1836)
!1851 = !DILocation(line: 715, column: 65, scope: !1836)
!1852 = !DILocation(line: 716, column: 11, scope: !1836)
!1853 = !DILocation(line: 716, column: 15, scope: !1836)
!1854 = !DILocation(line: 712, column: 11, scope: !1278)
!1855 = !DILocation(line: 717, column: 9, scope: !1836)
!1856 = !DILabel(scope: !1278, name: "store_escape", file: !63, line: 719)
!1857 = !DILocation(line: 719, column: 5, scope: !1278)
!1858 = !DILocation(line: 720, column: 7, scope: !1278)
!1859 = !DILocation(line: 720, column: 7, scope: !1860)
!1860 = distinct !DILexicalBlock(scope: !1861, file: !63, line: 720, column: 7)
!1861 = distinct !DILexicalBlock(scope: !1278, file: !63, line: 720, column: 7)
!1862 = !DILocation(line: 720, column: 7, scope: !1861)
!1863 = !DILocation(line: 720, column: 7, scope: !1864)
!1864 = distinct !DILexicalBlock(scope: !1861, file: !63, line: 720, column: 7)
!1865 = !DILocation(line: 720, column: 7, scope: !1866)
!1866 = distinct !DILexicalBlock(scope: !1864, file: !63, line: 720, column: 7)
!1867 = !DILocation(line: 720, column: 7, scope: !1868)
!1868 = distinct !DILexicalBlock(scope: !1869, file: !63, line: 720, column: 7)
!1869 = distinct !DILexicalBlock(scope: !1866, file: !63, line: 720, column: 7)
!1870 = !DILocation(line: 720, column: 7, scope: !1869)
!1871 = !DILocation(line: 720, column: 7, scope: !1872)
!1872 = distinct !DILexicalBlock(scope: !1873, file: !63, line: 720, column: 7)
!1873 = distinct !DILexicalBlock(scope: !1866, file: !63, line: 720, column: 7)
!1874 = !DILocation(line: 720, column: 7, scope: !1873)
!1875 = !DILocation(line: 720, column: 7, scope: !1876)
!1876 = distinct !DILexicalBlock(scope: !1877, file: !63, line: 720, column: 7)
!1877 = distinct !DILexicalBlock(scope: !1866, file: !63, line: 720, column: 7)
!1878 = !DILocation(line: 720, column: 7, scope: !1877)
!1879 = !DILocation(line: 720, column: 7, scope: !1880)
!1880 = distinct !DILexicalBlock(scope: !1881, file: !63, line: 720, column: 7)
!1881 = distinct !DILexicalBlock(scope: !1861, file: !63, line: 720, column: 7)
!1882 = !DILocation(line: 720, column: 7, scope: !1881)
!1883 = !DILabel(scope: !1278, name: "store_c", file: !63, line: 722)
!1884 = !DILocation(line: 722, column: 5, scope: !1278)
!1885 = !DILocation(line: 723, column: 7, scope: !1278)
!1886 = !DILocation(line: 723, column: 7, scope: !1887)
!1887 = distinct !DILexicalBlock(scope: !1888, file: !63, line: 723, column: 7)
!1888 = distinct !DILexicalBlock(scope: !1278, file: !63, line: 723, column: 7)
!1889 = !DILocation(line: 723, column: 7, scope: !1888)
!1890 = !DILocation(line: 723, column: 7, scope: !1891)
!1891 = distinct !DILexicalBlock(scope: !1887, file: !63, line: 723, column: 7)
!1892 = !DILocation(line: 723, column: 7, scope: !1893)
!1893 = distinct !DILexicalBlock(scope: !1894, file: !63, line: 723, column: 7)
!1894 = distinct !DILexicalBlock(scope: !1891, file: !63, line: 723, column: 7)
!1895 = !DILocation(line: 723, column: 7, scope: !1894)
!1896 = !DILocation(line: 723, column: 7, scope: !1897)
!1897 = distinct !DILexicalBlock(scope: !1898, file: !63, line: 723, column: 7)
!1898 = distinct !DILexicalBlock(scope: !1891, file: !63, line: 723, column: 7)
!1899 = !DILocation(line: 723, column: 7, scope: !1898)
!1900 = !DILocation(line: 724, column: 7, scope: !1278)
!1901 = !DILocation(line: 724, column: 7, scope: !1902)
!1902 = distinct !DILexicalBlock(scope: !1903, file: !63, line: 724, column: 7)
!1903 = distinct !DILexicalBlock(scope: !1278, file: !63, line: 724, column: 7)
!1904 = !DILocation(line: 724, column: 7, scope: !1903)
!1905 = !DILocation(line: 726, column: 13, scope: !1906)
!1906 = distinct !DILexicalBlock(scope: !1278, file: !63, line: 726, column: 11)
!1907 = !DILocation(line: 726, column: 11, scope: !1278)
!1908 = !DILocation(line: 727, column: 38, scope: !1906)
!1909 = !DILocation(line: 727, column: 9, scope: !1906)
!1910 = !DILocation(line: 728, column: 5, scope: !1278)
!1911 = !DILocation(line: 400, column: 75, scope: !1267)
!1912 = !DILocation(line: 400, column: 3, scope: !1267)
!1913 = distinct !{!1913, !1276, !1914}
!1914 = !DILocation(line: 728, column: 5, scope: !1264)
!1915 = !DILocation(line: 730, column: 7, scope: !1916)
!1916 = distinct !DILexicalBlock(scope: !1124, file: !63, line: 730, column: 7)
!1917 = !DILocation(line: 730, column: 11, scope: !1916)
!1918 = !DILocation(line: 730, column: 16, scope: !1916)
!1919 = !DILocation(line: 730, column: 19, scope: !1916)
!1920 = !DILocation(line: 730, column: 33, scope: !1916)
!1921 = !DILocation(line: 731, column: 7, scope: !1916)
!1922 = !DILocation(line: 731, column: 10, scope: !1916)
!1923 = !DILocation(line: 730, column: 7, scope: !1124)
!1924 = !DILocation(line: 732, column: 5, scope: !1916)
!1925 = !DILocation(line: 738, column: 7, scope: !1926)
!1926 = distinct !DILexicalBlock(scope: !1124, file: !63, line: 738, column: 7)
!1927 = !DILocation(line: 738, column: 21, scope: !1926)
!1928 = !DILocation(line: 738, column: 51, scope: !1926)
!1929 = !DILocation(line: 738, column: 56, scope: !1926)
!1930 = !DILocation(line: 739, column: 7, scope: !1926)
!1931 = !DILocation(line: 739, column: 10, scope: !1926)
!1932 = !DILocation(line: 738, column: 7, scope: !1124)
!1933 = !DILocation(line: 741, column: 11, scope: !1934)
!1934 = distinct !DILexicalBlock(scope: !1935, file: !63, line: 741, column: 11)
!1935 = distinct !DILexicalBlock(scope: !1926, file: !63, line: 740, column: 5)
!1936 = !DILocation(line: 741, column: 11, scope: !1935)
!1937 = !DILocation(line: 742, column: 42, scope: !1934)
!1938 = !DILocation(line: 742, column: 50, scope: !1934)
!1939 = !DILocation(line: 742, column: 67, scope: !1934)
!1940 = !DILocation(line: 742, column: 72, scope: !1934)
!1941 = !DILocation(line: 744, column: 42, scope: !1934)
!1942 = !DILocation(line: 744, column: 49, scope: !1934)
!1943 = !DILocation(line: 745, column: 42, scope: !1934)
!1944 = !DILocation(line: 745, column: 54, scope: !1934)
!1945 = !DILocation(line: 742, column: 16, scope: !1934)
!1946 = !DILocation(line: 742, column: 9, scope: !1934)
!1947 = !DILocation(line: 746, column: 18, scope: !1948)
!1948 = distinct !DILexicalBlock(scope: !1934, file: !63, line: 746, column: 16)
!1949 = !DILocation(line: 746, column: 29, scope: !1948)
!1950 = !DILocation(line: 746, column: 32, scope: !1948)
!1951 = !DILocation(line: 746, column: 16, scope: !1934)
!1952 = !DILocation(line: 749, column: 24, scope: !1953)
!1953 = distinct !DILexicalBlock(scope: !1948, file: !63, line: 747, column: 9)
!1954 = !DILocation(line: 749, column: 22, scope: !1953)
!1955 = !DILocation(line: 750, column: 15, scope: !1953)
!1956 = !DILocation(line: 751, column: 11, scope: !1953)
!1957 = !DILocation(line: 753, column: 5, scope: !1935)
!1958 = !DILocation(line: 755, column: 7, scope: !1959)
!1959 = distinct !DILexicalBlock(scope: !1124, file: !63, line: 755, column: 7)
!1960 = !DILocation(line: 755, column: 20, scope: !1959)
!1961 = !DILocation(line: 755, column: 24, scope: !1959)
!1962 = !DILocation(line: 755, column: 7, scope: !1124)
!1963 = !DILocation(line: 756, column: 5, scope: !1959)
!1964 = !DILocation(line: 756, column: 13, scope: !1965)
!1965 = distinct !DILexicalBlock(scope: !1966, file: !63, line: 756, column: 5)
!1966 = distinct !DILexicalBlock(scope: !1959, file: !63, line: 756, column: 5)
!1967 = !DILocation(line: 756, column: 12, scope: !1965)
!1968 = !DILocation(line: 756, column: 5, scope: !1966)
!1969 = !DILocation(line: 757, column: 7, scope: !1965)
!1970 = !DILocation(line: 757, column: 7, scope: !1971)
!1971 = distinct !DILexicalBlock(scope: !1972, file: !63, line: 757, column: 7)
!1972 = distinct !DILexicalBlock(scope: !1965, file: !63, line: 757, column: 7)
!1973 = !DILocation(line: 757, column: 7, scope: !1972)
!1974 = !DILocation(line: 756, column: 39, scope: !1965)
!1975 = !DILocation(line: 756, column: 5, scope: !1965)
!1976 = distinct !{!1976, !1968, !1977}
!1977 = !DILocation(line: 757, column: 7, scope: !1966)
!1978 = !DILocation(line: 759, column: 7, scope: !1979)
!1979 = distinct !DILexicalBlock(scope: !1124, file: !63, line: 759, column: 7)
!1980 = !DILocation(line: 759, column: 13, scope: !1979)
!1981 = !DILocation(line: 759, column: 11, scope: !1979)
!1982 = !DILocation(line: 759, column: 7, scope: !1124)
!1983 = !DILocation(line: 760, column: 5, scope: !1979)
!1984 = !DILocation(line: 760, column: 12, scope: !1979)
!1985 = !DILocation(line: 760, column: 17, scope: !1979)
!1986 = !DILocation(line: 761, column: 10, scope: !1124)
!1987 = !DILocation(line: 761, column: 3, scope: !1124)
!1988 = !DILabel(scope: !1124, name: "force_outer_quoting_style", file: !63, line: 763)
!1989 = !DILocation(line: 763, column: 2, scope: !1124)
!1990 = !DILocation(line: 766, column: 7, scope: !1991)
!1991 = distinct !DILexicalBlock(scope: !1124, file: !63, line: 766, column: 7)
!1992 = !DILocation(line: 766, column: 21, scope: !1991)
!1993 = !DILocation(line: 766, column: 51, scope: !1991)
!1994 = !DILocation(line: 766, column: 54, scope: !1991)
!1995 = !DILocation(line: 766, column: 7, scope: !1124)
!1996 = !DILocation(line: 767, column: 19, scope: !1991)
!1997 = !DILocation(line: 767, column: 5, scope: !1991)
!1998 = !DILocation(line: 768, column: 36, scope: !1124)
!1999 = !DILocation(line: 768, column: 44, scope: !1124)
!2000 = !DILocation(line: 768, column: 56, scope: !1124)
!2001 = !DILocation(line: 768, column: 61, scope: !1124)
!2002 = !DILocation(line: 769, column: 36, scope: !1124)
!2003 = !DILocation(line: 770, column: 36, scope: !1124)
!2004 = !DILocation(line: 770, column: 42, scope: !1124)
!2005 = !DILocation(line: 771, column: 36, scope: !1124)
!2006 = !DILocation(line: 771, column: 48, scope: !1124)
!2007 = !DILocation(line: 768, column: 10, scope: !1124)
!2008 = !DILocation(line: 768, column: 3, scope: !1124)
!2009 = !DILocation(line: 772, column: 1, scope: !1124)
!2010 = !DILocalVariable(name: "buffer", arg: 1, scope: !2011, file: !63, line: 256, type: !32)
!2011 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !63, file: !63, line: 256, type: !1125, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2012, retainedNodes: !4)
!2012 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !2013, nameTableKind: None)
!2013 = !{!2014, !2016, !2018, !2027, !2029, !2031, !2038, !2040}
!2014 = !DIGlobalVariableExpression(var: !2015, expr: !DIExpression())
!2015 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2012, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!2016 = !DIGlobalVariableExpression(var: !2017, expr: !DIExpression())
!2017 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2012, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!2018 = !DIGlobalVariableExpression(var: !2019, expr: !DIExpression())
!2019 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2012, file: !63, line: 1052, type: !2020, isLocal: false, isDefinition: true)
!2020 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !2021)
!2021 = !{!2022, !2023, !2024, !2025, !2026}
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2020, file: !63, line: 68, baseType: !40, size: 32)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2020, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2020, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2020, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2020, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!2027 = !DIGlobalVariableExpression(var: !2028, expr: !DIExpression())
!2028 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2012, file: !63, line: 116, type: !2020, isLocal: true, isDefinition: true)
!2029 = !DIGlobalVariableExpression(var: !2030, expr: !DIExpression())
!2030 = distinct !DIGlobalVariable(name: "slot0", scope: !2012, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!2031 = !DIGlobalVariableExpression(var: !2032, expr: !DIExpression())
!2032 = distinct !DIGlobalVariable(name: "slotvec", scope: !2012, file: !63, line: 845, type: !2033, isLocal: true, isDefinition: true)
!2033 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2034, size: 64)
!2034 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !2035)
!2035 = !{!2036, !2037}
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2034, file: !63, line: 836, baseType: !57, size: 64)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2034, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!2038 = !DIGlobalVariableExpression(var: !2039, expr: !DIExpression())
!2039 = distinct !DIGlobalVariable(name: "nslots", scope: !2012, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!2040 = !DIGlobalVariableExpression(var: !2041, expr: !DIExpression())
!2041 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2012, file: !63, line: 844, type: !2034, isLocal: true, isDefinition: true)
!2042 = !DILocalVariable(name: "buffersize", arg: 2, scope: !2011, file: !63, line: 256, type: !57)
!2043 = !DILocalVariable(name: "arg", arg: 3, scope: !2011, file: !63, line: 257, type: !6)
!2044 = !DILocalVariable(name: "argsize", arg: 4, scope: !2011, file: !63, line: 257, type: !57)
!2045 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !2011, file: !63, line: 258, type: !40)
!2046 = !DILocalVariable(name: "flags", arg: 6, scope: !2011, file: !63, line: 258, type: !25)
!2047 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !2011, file: !63, line: 259, type: !1127)
!2048 = !DILocalVariable(name: "left_quote", arg: 8, scope: !2011, file: !63, line: 260, type: !6)
!2049 = !DILocalVariable(name: "right_quote", arg: 9, scope: !2011, file: !63, line: 261, type: !6)
!2050 = !DILocalVariable(name: "i", scope: !2011, file: !63, line: 263, type: !57)
!2051 = !DILocalVariable(name: "len", scope: !2011, file: !63, line: 264, type: !57)
!2052 = !DILocalVariable(name: "orig_buffersize", scope: !2011, file: !63, line: 265, type: !57)
!2053 = !DILocalVariable(name: "quote_string", scope: !2011, file: !63, line: 266, type: !6)
!2054 = !DILocalVariable(name: "quote_string_len", scope: !2011, file: !63, line: 267, type: !57)
!2055 = !DILocalVariable(name: "backslash_escapes", scope: !2011, file: !63, line: 268, type: !17)
!2056 = !DILocalVariable(name: "unibyte_locale", scope: !2011, file: !63, line: 269, type: !17)
!2057 = !DILocalVariable(name: "elide_outer_quotes", scope: !2011, file: !63, line: 270, type: !17)
!2058 = !DILocalVariable(name: "pending_shell_escape_end", scope: !2011, file: !63, line: 271, type: !17)
!2059 = !DILocalVariable(name: "encountered_single_quote", scope: !2011, file: !63, line: 272, type: !17)
!2060 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !2011, file: !63, line: 273, type: !17)
!2061 = distinct !DISubprogram(name: "gettext_quote", scope: !63, file: !63, line: 207, type: !2062, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !37, retainedNodes: !4)
!2062 = !DISubroutineType(types: !2063)
!2063 = !{!6, !6, !40}
!2064 = !DILocalVariable(name: "msgid", arg: 1, scope: !2061, file: !63, line: 207, type: !6)
!2065 = !DILocation(line: 207, column: 28, scope: !2061)
!2066 = !DILocalVariable(name: "s", arg: 2, scope: !2061, file: !63, line: 207, type: !40)
!2067 = !DILocation(line: 207, column: 54, scope: !2061)
!2068 = !DILocalVariable(name: "translation", scope: !2061, file: !63, line: 209, type: !6)
!2069 = !DILocation(line: 209, column: 15, scope: !2061)
!2070 = !DILocation(line: 209, column: 29, scope: !2061)
!2071 = !DILocalVariable(name: "locale_code", scope: !2061, file: !63, line: 210, type: !6)
!2072 = !DILocation(line: 210, column: 15, scope: !2061)
!2073 = !DILocation(line: 212, column: 7, scope: !2074)
!2074 = distinct !DILexicalBlock(scope: !2061, file: !63, line: 212, column: 7)
!2075 = !DILocation(line: 212, column: 22, scope: !2074)
!2076 = !DILocation(line: 212, column: 19, scope: !2074)
!2077 = !DILocation(line: 212, column: 7, scope: !2061)
!2078 = !DILocation(line: 213, column: 12, scope: !2074)
!2079 = !DILocation(line: 213, column: 5, scope: !2074)
!2080 = !DILocation(line: 233, column: 17, scope: !2061)
!2081 = !DILocation(line: 233, column: 15, scope: !2061)
!2082 = !DILocation(line: 234, column: 7, scope: !2083)
!2083 = distinct !DILexicalBlock(scope: !2061, file: !63, line: 234, column: 7)
!2084 = !DILocation(line: 234, column: 7, scope: !2061)
!2085 = !DILocation(line: 235, column: 12, scope: !2083)
!2086 = !DILocation(line: 235, column: 21, scope: !2083)
!2087 = !DILocation(line: 235, column: 5, scope: !2083)
!2088 = !DILocation(line: 236, column: 7, scope: !2089)
!2089 = distinct !DILexicalBlock(scope: !2061, file: !63, line: 236, column: 7)
!2090 = !DILocation(line: 236, column: 7, scope: !2061)
!2091 = !DILocation(line: 237, column: 12, scope: !2089)
!2092 = !DILocation(line: 237, column: 21, scope: !2089)
!2093 = !DILocation(line: 237, column: 5, scope: !2089)
!2094 = !DILocation(line: 239, column: 11, scope: !2061)
!2095 = !DILocation(line: 239, column: 13, scope: !2061)
!2096 = !DILocation(line: 239, column: 3, scope: !2061)
!2097 = !DILocation(line: 240, column: 1, scope: !2061)
!2098 = !DILocalVariable(name: "msgid", arg: 1, scope: !2099, file: !63, line: 207, type: !6)
!2099 = distinct !DISubprogram(name: "gettext_quote", scope: !63, file: !63, line: 207, type: !2062, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2100, retainedNodes: !4)
!2100 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !2101, nameTableKind: None)
!2101 = !{!2102, !2104, !2106, !2115, !2117, !2119, !2126, !2128}
!2102 = !DIGlobalVariableExpression(var: !2103, expr: !DIExpression())
!2103 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2100, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!2104 = !DIGlobalVariableExpression(var: !2105, expr: !DIExpression())
!2105 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2100, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!2106 = !DIGlobalVariableExpression(var: !2107, expr: !DIExpression())
!2107 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2100, file: !63, line: 1052, type: !2108, isLocal: false, isDefinition: true)
!2108 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !2109)
!2109 = !{!2110, !2111, !2112, !2113, !2114}
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2108, file: !63, line: 68, baseType: !40, size: 32)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2108, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2108, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2108, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2108, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!2115 = !DIGlobalVariableExpression(var: !2116, expr: !DIExpression())
!2116 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2100, file: !63, line: 116, type: !2108, isLocal: true, isDefinition: true)
!2117 = !DIGlobalVariableExpression(var: !2118, expr: !DIExpression())
!2118 = distinct !DIGlobalVariable(name: "slot0", scope: !2100, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!2119 = !DIGlobalVariableExpression(var: !2120, expr: !DIExpression())
!2120 = distinct !DIGlobalVariable(name: "slotvec", scope: !2100, file: !63, line: 845, type: !2121, isLocal: true, isDefinition: true)
!2121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2122, size: 64)
!2122 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !2123)
!2123 = !{!2124, !2125}
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2122, file: !63, line: 836, baseType: !57, size: 64)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2122, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!2126 = !DIGlobalVariableExpression(var: !2127, expr: !DIExpression())
!2127 = distinct !DIGlobalVariable(name: "nslots", scope: !2100, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!2128 = !DIGlobalVariableExpression(var: !2129, expr: !DIExpression())
!2129 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2100, file: !63, line: 844, type: !2122, isLocal: true, isDefinition: true)
!2130 = !DILocalVariable(name: "s", arg: 2, scope: !2099, file: !63, line: 207, type: !40)
!2131 = !DILocalVariable(name: "translation", scope: !2099, file: !63, line: 209, type: !6)
!2132 = !DILocalVariable(name: "locale_code", scope: !2099, file: !63, line: 210, type: !6)
!2133 = distinct !DISubprogram(name: "quotearg_char", scope: !63, file: !63, line: 991, type: !2134, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !37, retainedNodes: !4)
!2134 = !DISubroutineType(types: !2135)
!2135 = !{!32, !6, !8}
!2136 = !DILocalVariable(name: "arg", arg: 1, scope: !2133, file: !63, line: 991, type: !6)
!2137 = !DILocation(line: 991, column: 28, scope: !2133)
!2138 = !DILocalVariable(name: "ch", arg: 2, scope: !2133, file: !63, line: 991, type: !8)
!2139 = !DILocation(line: 991, column: 38, scope: !2133)
!2140 = !DILocation(line: 993, column: 29, scope: !2133)
!2141 = !DILocation(line: 993, column: 44, scope: !2133)
!2142 = !DILocation(line: 993, column: 10, scope: !2133)
!2143 = !DILocation(line: 993, column: 3, scope: !2133)
!2144 = !DILocalVariable(name: "arg", arg: 1, scope: !2145, file: !63, line: 991, type: !6)
!2145 = distinct !DISubprogram(name: "quotearg_char", scope: !63, file: !63, line: 991, type: !2134, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2146, retainedNodes: !4)
!2146 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !2147, nameTableKind: None)
!2147 = !{!2148, !2150, !2152, !2161, !2163, !2165, !2172, !2174}
!2148 = !DIGlobalVariableExpression(var: !2149, expr: !DIExpression())
!2149 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2146, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!2150 = !DIGlobalVariableExpression(var: !2151, expr: !DIExpression())
!2151 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2146, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!2152 = !DIGlobalVariableExpression(var: !2153, expr: !DIExpression())
!2153 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2146, file: !63, line: 1052, type: !2154, isLocal: false, isDefinition: true)
!2154 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !2155)
!2155 = !{!2156, !2157, !2158, !2159, !2160}
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2154, file: !63, line: 68, baseType: !40, size: 32)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2154, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2154, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2154, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2154, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!2161 = !DIGlobalVariableExpression(var: !2162, expr: !DIExpression())
!2162 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2146, file: !63, line: 116, type: !2154, isLocal: true, isDefinition: true)
!2163 = !DIGlobalVariableExpression(var: !2164, expr: !DIExpression())
!2164 = distinct !DIGlobalVariable(name: "slot0", scope: !2146, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!2165 = !DIGlobalVariableExpression(var: !2166, expr: !DIExpression())
!2166 = distinct !DIGlobalVariable(name: "slotvec", scope: !2146, file: !63, line: 845, type: !2167, isLocal: true, isDefinition: true)
!2167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2168, size: 64)
!2168 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !2169)
!2169 = !{!2170, !2171}
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2168, file: !63, line: 836, baseType: !57, size: 64)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2168, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!2172 = !DIGlobalVariableExpression(var: !2173, expr: !DIExpression())
!2173 = distinct !DIGlobalVariable(name: "nslots", scope: !2146, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!2174 = !DIGlobalVariableExpression(var: !2175, expr: !DIExpression())
!2175 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2146, file: !63, line: 844, type: !2168, isLocal: true, isDefinition: true)
!2176 = !DILocalVariable(name: "ch", arg: 2, scope: !2145, file: !63, line: 991, type: !8)
!2177 = distinct !DISubprogram(name: "quotearg_colon", scope: !63, file: !63, line: 997, type: !2178, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !37, retainedNodes: !4)
!2178 = !DISubroutineType(types: !2179)
!2179 = !{!32, !6}
!2180 = !DILocalVariable(name: "arg", arg: 1, scope: !2177, file: !63, line: 997, type: !6)
!2181 = !DILocation(line: 997, column: 29, scope: !2177)
!2182 = !DILocation(line: 999, column: 25, scope: !2177)
!2183 = !DILocation(line: 999, column: 10, scope: !2177)
!2184 = !DILocation(line: 999, column: 3, scope: !2177)
!2185 = !DILocalVariable(name: "arg", arg: 1, scope: !2186, file: !63, line: 997, type: !6)
!2186 = distinct !DISubprogram(name: "quotearg_colon", scope: !63, file: !63, line: 997, type: !2178, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2187, retainedNodes: !4)
!2187 = distinct !DICompileUnit(language: DW_LANG_C99, file: !38, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !39, retainedTypes: !55, globals: !2188, nameTableKind: None)
!2188 = !{!2189, !2191, !2193, !2202, !2204, !2206, !2213, !2215}
!2189 = !DIGlobalVariableExpression(var: !2190, expr: !DIExpression())
!2190 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2187, file: !63, line: 85, type: !64, isLocal: false, isDefinition: true)
!2191 = !DIGlobalVariableExpression(var: !2192, expr: !DIExpression())
!2192 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2187, file: !63, line: 101, type: !70, isLocal: false, isDefinition: true)
!2193 = !DIGlobalVariableExpression(var: !2194, expr: !DIExpression())
!2194 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2187, file: !63, line: 1052, type: !2195, isLocal: false, isDefinition: true)
!2195 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !63, line: 65, size: 448, elements: !2196)
!2196 = !{!2197, !2198, !2199, !2200, !2201}
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2195, file: !63, line: 68, baseType: !40, size: 32)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2195, file: !63, line: 71, baseType: !25, size: 32, offset: 32)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2195, file: !63, line: 75, baseType: !81, size: 256, offset: 64)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2195, file: !63, line: 78, baseType: !6, size: 64, offset: 320)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2195, file: !63, line: 81, baseType: !6, size: 64, offset: 384)
!2202 = !DIGlobalVariableExpression(var: !2203, expr: !DIExpression())
!2203 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2187, file: !63, line: 116, type: !2195, isLocal: true, isDefinition: true)
!2204 = !DIGlobalVariableExpression(var: !2205, expr: !DIExpression())
!2205 = distinct !DIGlobalVariable(name: "slot0", scope: !2187, file: !63, line: 842, type: !88, isLocal: true, isDefinition: true)
!2206 = !DIGlobalVariableExpression(var: !2207, expr: !DIExpression())
!2207 = distinct !DIGlobalVariable(name: "slotvec", scope: !2187, file: !63, line: 845, type: !2208, isLocal: true, isDefinition: true)
!2208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2209, size: 64)
!2209 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !63, line: 834, size: 128, elements: !2210)
!2210 = !{!2211, !2212}
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2209, file: !63, line: 836, baseType: !57, size: 64)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2209, file: !63, line: 837, baseType: !32, size: 64, offset: 64)
!2213 = !DIGlobalVariableExpression(var: !2214, expr: !DIExpression())
!2214 = distinct !DIGlobalVariable(name: "nslots", scope: !2187, file: !63, line: 843, type: !25, isLocal: true, isDefinition: true)
!2215 = !DIGlobalVariableExpression(var: !2216, expr: !DIExpression())
!2216 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2187, file: !63, line: 844, type: !2209, isLocal: true, isDefinition: true)
!2217 = distinct !DISubprogram(name: "version_etc_arn", scope: !2218, file: !2218, line: 61, type: !2219, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !114, retainedNodes: !4)
!2218 = !DIFile(filename: "lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2219 = !DISubroutineType(types: !2220)
!2220 = !{null, !2221, !6, !6, !6, !2276, !57}
!2221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2222, size: 64)
!2222 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2223, line: 7, baseType: !2224)
!2223 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2224 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2225, line: 49, size: 1728, elements: !2226)
!2225 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2226 = !{!2227, !2228, !2229, !2230, !2231, !2232, !2233, !2234, !2235, !2236, !2237, !2238, !2239, !2242, !2244, !2245, !2246, !2250, !2251, !2253, !2257, !2260, !2262, !2265, !2268, !2269, !2270, !2271, !2272}
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2224, file: !2225, line: 51, baseType: !25, size: 32)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2224, file: !2225, line: 54, baseType: !32, size: 64, offset: 64)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2224, file: !2225, line: 55, baseType: !32, size: 64, offset: 128)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2224, file: !2225, line: 56, baseType: !32, size: 64, offset: 192)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2224, file: !2225, line: 57, baseType: !32, size: 64, offset: 256)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2224, file: !2225, line: 58, baseType: !32, size: 64, offset: 320)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2224, file: !2225, line: 59, baseType: !32, size: 64, offset: 384)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2224, file: !2225, line: 60, baseType: !32, size: 64, offset: 448)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2224, file: !2225, line: 61, baseType: !32, size: 64, offset: 512)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2224, file: !2225, line: 64, baseType: !32, size: 64, offset: 576)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2224, file: !2225, line: 65, baseType: !32, size: 64, offset: 640)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2224, file: !2225, line: 66, baseType: !32, size: 64, offset: 704)
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2224, file: !2225, line: 68, baseType: !2240, size: 64, offset: 768)
!2240 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2241, size: 64)
!2241 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2225, line: 36, flags: DIFlagFwdDecl)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2224, file: !2225, line: 70, baseType: !2243, size: 64, offset: 832)
!2243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2224, size: 64)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2224, file: !2225, line: 72, baseType: !25, size: 32, offset: 896)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2224, file: !2225, line: 73, baseType: !25, size: 32, offset: 928)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2224, file: !2225, line: 74, baseType: !2247, size: 64, offset: 960)
!2247 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2248, line: 152, baseType: !2249)
!2248 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2249 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2224, file: !2225, line: 77, baseType: !56, size: 16, offset: 1024)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2224, file: !2225, line: 78, baseType: !2252, size: 8, offset: 1040)
!2252 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2224, file: !2225, line: 79, baseType: !2254, size: 8, offset: 1048)
!2254 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 8, elements: !2255)
!2255 = !{!2256}
!2256 = !DISubrange(count: 1)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2224, file: !2225, line: 81, baseType: !2258, size: 64, offset: 1088)
!2258 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2259, size: 64)
!2259 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2225, line: 43, baseType: null)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2224, file: !2225, line: 89, baseType: !2261, size: 64, offset: 1152)
!2261 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2248, line: 153, baseType: !2249)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2224, file: !2225, line: 91, baseType: !2263, size: 64, offset: 1216)
!2263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2264, size: 64)
!2264 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2225, line: 37, flags: DIFlagFwdDecl)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2224, file: !2225, line: 92, baseType: !2266, size: 64, offset: 1280)
!2266 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2267, size: 64)
!2267 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2225, line: 38, flags: DIFlagFwdDecl)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2224, file: !2225, line: 93, baseType: !2243, size: 64, offset: 1344)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2224, file: !2225, line: 94, baseType: !31, size: 64, offset: 1408)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2224, file: !2225, line: 95, baseType: !57, size: 64, offset: 1472)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2224, file: !2225, line: 96, baseType: !25, size: 32, offset: 1536)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2224, file: !2225, line: 98, baseType: !2273, size: 160, offset: 1568)
!2273 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 160, elements: !2274)
!2274 = !{!2275}
!2275 = !DISubrange(count: 20)
!2276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !65, size: 64)
!2277 = !DILocalVariable(name: "stream", arg: 1, scope: !2217, file: !2218, line: 61, type: !2221)
!2278 = !DILocation(line: 61, column: 24, scope: !2217)
!2279 = !DILocalVariable(name: "command_name", arg: 2, scope: !2217, file: !2218, line: 62, type: !6)
!2280 = !DILocation(line: 62, column: 30, scope: !2217)
!2281 = !DILocalVariable(name: "package", arg: 3, scope: !2217, file: !2218, line: 62, type: !6)
!2282 = !DILocation(line: 62, column: 56, scope: !2217)
!2283 = !DILocalVariable(name: "version", arg: 4, scope: !2217, file: !2218, line: 63, type: !6)
!2284 = !DILocation(line: 63, column: 30, scope: !2217)
!2285 = !DILocalVariable(name: "authors", arg: 5, scope: !2217, file: !2218, line: 64, type: !2276)
!2286 = !DILocation(line: 64, column: 39, scope: !2217)
!2287 = !DILocalVariable(name: "n_authors", arg: 6, scope: !2217, file: !2218, line: 64, type: !57)
!2288 = !DILocation(line: 64, column: 55, scope: !2217)
!2289 = !DILocation(line: 66, column: 7, scope: !2290)
!2290 = distinct !DILexicalBlock(scope: !2217, file: !2218, line: 66, column: 7)
!2291 = !DILocation(line: 66, column: 7, scope: !2217)
!2292 = !DILocation(line: 67, column: 14, scope: !2290)
!2293 = !DILocation(line: 67, column: 38, scope: !2290)
!2294 = !DILocation(line: 67, column: 52, scope: !2290)
!2295 = !DILocation(line: 67, column: 61, scope: !2290)
!2296 = !DILocation(line: 67, column: 5, scope: !2290)
!2297 = !DILocation(line: 69, column: 14, scope: !2290)
!2298 = !DILocation(line: 69, column: 33, scope: !2290)
!2299 = !DILocation(line: 69, column: 42, scope: !2290)
!2300 = !DILocation(line: 69, column: 5, scope: !2290)
!2301 = !DILocation(line: 83, column: 12, scope: !2217)
!2302 = !DILocation(line: 83, column: 43, scope: !2217)
!2303 = !DILocation(line: 83, column: 3, scope: !2217)
!2304 = !DILocation(line: 85, column: 3, scope: !2217)
!2305 = !DILocation(line: 88, column: 12, scope: !2217)
!2306 = !DILocation(line: 88, column: 20, scope: !2217)
!2307 = !DILocation(line: 88, column: 3, scope: !2217)
!2308 = !DILocation(line: 95, column: 3, scope: !2217)
!2309 = !DILocation(line: 97, column: 11, scope: !2217)
!2310 = !DILocation(line: 97, column: 3, scope: !2217)
!2311 = !DILocation(line: 102, column: 7, scope: !2312)
!2312 = distinct !DILexicalBlock(scope: !2217, file: !2218, line: 98, column: 5)
!2313 = !DILocation(line: 105, column: 16, scope: !2312)
!2314 = !DILocation(line: 105, column: 24, scope: !2312)
!2315 = !DILocation(line: 105, column: 47, scope: !2312)
!2316 = !DILocation(line: 105, column: 7, scope: !2312)
!2317 = !DILocation(line: 106, column: 7, scope: !2312)
!2318 = !DILocation(line: 109, column: 16, scope: !2312)
!2319 = !DILocation(line: 109, column: 24, scope: !2312)
!2320 = !DILocation(line: 109, column: 54, scope: !2312)
!2321 = !DILocation(line: 109, column: 66, scope: !2312)
!2322 = !DILocation(line: 109, column: 7, scope: !2312)
!2323 = !DILocation(line: 110, column: 7, scope: !2312)
!2324 = !DILocation(line: 113, column: 16, scope: !2312)
!2325 = !DILocation(line: 113, column: 24, scope: !2312)
!2326 = !DILocation(line: 114, column: 16, scope: !2312)
!2327 = !DILocation(line: 114, column: 28, scope: !2312)
!2328 = !DILocation(line: 114, column: 40, scope: !2312)
!2329 = !DILocation(line: 113, column: 7, scope: !2312)
!2330 = !DILocation(line: 115, column: 7, scope: !2312)
!2331 = !DILocation(line: 120, column: 16, scope: !2312)
!2332 = !DILocation(line: 120, column: 24, scope: !2312)
!2333 = !DILocation(line: 121, column: 16, scope: !2312)
!2334 = !DILocation(line: 121, column: 28, scope: !2312)
!2335 = !DILocation(line: 121, column: 40, scope: !2312)
!2336 = !DILocation(line: 121, column: 52, scope: !2312)
!2337 = !DILocation(line: 120, column: 7, scope: !2312)
!2338 = !DILocation(line: 122, column: 7, scope: !2312)
!2339 = !DILocation(line: 127, column: 16, scope: !2312)
!2340 = !DILocation(line: 127, column: 24, scope: !2312)
!2341 = !DILocation(line: 128, column: 16, scope: !2312)
!2342 = !DILocation(line: 128, column: 28, scope: !2312)
!2343 = !DILocation(line: 128, column: 40, scope: !2312)
!2344 = !DILocation(line: 128, column: 52, scope: !2312)
!2345 = !DILocation(line: 128, column: 64, scope: !2312)
!2346 = !DILocation(line: 127, column: 7, scope: !2312)
!2347 = !DILocation(line: 129, column: 7, scope: !2312)
!2348 = !DILocation(line: 134, column: 16, scope: !2312)
!2349 = !DILocation(line: 134, column: 24, scope: !2312)
!2350 = !DILocation(line: 135, column: 16, scope: !2312)
!2351 = !DILocation(line: 135, column: 28, scope: !2312)
!2352 = !DILocation(line: 135, column: 40, scope: !2312)
!2353 = !DILocation(line: 135, column: 52, scope: !2312)
!2354 = !DILocation(line: 135, column: 64, scope: !2312)
!2355 = !DILocation(line: 136, column: 16, scope: !2312)
!2356 = !DILocation(line: 134, column: 7, scope: !2312)
!2357 = !DILocation(line: 137, column: 7, scope: !2312)
!2358 = !DILocation(line: 142, column: 16, scope: !2312)
!2359 = !DILocation(line: 142, column: 24, scope: !2312)
!2360 = !DILocation(line: 143, column: 16, scope: !2312)
!2361 = !DILocation(line: 143, column: 28, scope: !2312)
!2362 = !DILocation(line: 143, column: 40, scope: !2312)
!2363 = !DILocation(line: 143, column: 52, scope: !2312)
!2364 = !DILocation(line: 143, column: 64, scope: !2312)
!2365 = !DILocation(line: 144, column: 16, scope: !2312)
!2366 = !DILocation(line: 144, column: 28, scope: !2312)
!2367 = !DILocation(line: 142, column: 7, scope: !2312)
!2368 = !DILocation(line: 145, column: 7, scope: !2312)
!2369 = !DILocation(line: 150, column: 16, scope: !2312)
!2370 = !DILocation(line: 150, column: 24, scope: !2312)
!2371 = !DILocation(line: 152, column: 17, scope: !2312)
!2372 = !DILocation(line: 152, column: 29, scope: !2312)
!2373 = !DILocation(line: 152, column: 41, scope: !2312)
!2374 = !DILocation(line: 152, column: 53, scope: !2312)
!2375 = !DILocation(line: 152, column: 65, scope: !2312)
!2376 = !DILocation(line: 153, column: 17, scope: !2312)
!2377 = !DILocation(line: 153, column: 29, scope: !2312)
!2378 = !DILocation(line: 153, column: 41, scope: !2312)
!2379 = !DILocation(line: 150, column: 7, scope: !2312)
!2380 = !DILocation(line: 154, column: 7, scope: !2312)
!2381 = !DILocation(line: 159, column: 16, scope: !2312)
!2382 = !DILocation(line: 159, column: 24, scope: !2312)
!2383 = !DILocation(line: 161, column: 16, scope: !2312)
!2384 = !DILocation(line: 161, column: 28, scope: !2312)
!2385 = !DILocation(line: 161, column: 40, scope: !2312)
!2386 = !DILocation(line: 161, column: 52, scope: !2312)
!2387 = !DILocation(line: 161, column: 64, scope: !2312)
!2388 = !DILocation(line: 162, column: 16, scope: !2312)
!2389 = !DILocation(line: 162, column: 28, scope: !2312)
!2390 = !DILocation(line: 162, column: 40, scope: !2312)
!2391 = !DILocation(line: 162, column: 52, scope: !2312)
!2392 = !DILocation(line: 159, column: 7, scope: !2312)
!2393 = !DILocation(line: 163, column: 7, scope: !2312)
!2394 = !DILocation(line: 170, column: 16, scope: !2312)
!2395 = !DILocation(line: 170, column: 24, scope: !2312)
!2396 = !DILocation(line: 172, column: 17, scope: !2312)
!2397 = !DILocation(line: 172, column: 29, scope: !2312)
!2398 = !DILocation(line: 172, column: 41, scope: !2312)
!2399 = !DILocation(line: 172, column: 53, scope: !2312)
!2400 = !DILocation(line: 172, column: 65, scope: !2312)
!2401 = !DILocation(line: 173, column: 17, scope: !2312)
!2402 = !DILocation(line: 173, column: 29, scope: !2312)
!2403 = !DILocation(line: 173, column: 41, scope: !2312)
!2404 = !DILocation(line: 173, column: 53, scope: !2312)
!2405 = !DILocation(line: 170, column: 7, scope: !2312)
!2406 = !DILocation(line: 174, column: 7, scope: !2312)
!2407 = !DILocation(line: 176, column: 1, scope: !2217)
!2408 = distinct !DISubprogram(name: "version_etc_va", scope: !2218, file: !2218, line: 199, type: !2409, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !114, retainedNodes: !4)
!2409 = !DISubroutineType(types: !2410)
!2410 = !{null, !2221, !6, !6, !6, !2411}
!2411 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2412, size: 64)
!2412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !115, line: 192, size: 192, elements: !2413)
!2413 = !{!2414, !2415, !2416, !2417}
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2412, file: !115, line: 192, baseType: !42, size: 32)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2412, file: !115, line: 192, baseType: !42, size: 32, offset: 32)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2412, file: !115, line: 192, baseType: !31, size: 64, offset: 64)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2412, file: !115, line: 192, baseType: !31, size: 64, offset: 128)
!2418 = !DILocalVariable(name: "stream", arg: 1, scope: !2408, file: !2218, line: 199, type: !2221)
!2419 = !DILocation(line: 199, column: 23, scope: !2408)
!2420 = !DILocalVariable(name: "command_name", arg: 2, scope: !2408, file: !2218, line: 200, type: !6)
!2421 = !DILocation(line: 200, column: 29, scope: !2408)
!2422 = !DILocalVariable(name: "package", arg: 3, scope: !2408, file: !2218, line: 200, type: !6)
!2423 = !DILocation(line: 200, column: 55, scope: !2408)
!2424 = !DILocalVariable(name: "version", arg: 4, scope: !2408, file: !2218, line: 201, type: !6)
!2425 = !DILocation(line: 201, column: 29, scope: !2408)
!2426 = !DILocalVariable(name: "authors", arg: 5, scope: !2408, file: !2218, line: 201, type: !2411)
!2427 = !DILocation(line: 201, column: 46, scope: !2408)
!2428 = !DILocalVariable(name: "n_authors", scope: !2408, file: !2218, line: 203, type: !57)
!2429 = !DILocation(line: 203, column: 10, scope: !2408)
!2430 = !DILocalVariable(name: "authtab", scope: !2408, file: !2218, line: 204, type: !2431)
!2431 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 640, elements: !72)
!2432 = !DILocation(line: 204, column: 15, scope: !2408)
!2433 = !DILocation(line: 206, column: 18, scope: !2434)
!2434 = distinct !DILexicalBlock(scope: !2408, file: !2218, line: 206, column: 3)
!2435 = !DILocation(line: 206, column: 8, scope: !2434)
!2436 = !DILocation(line: 207, column: 8, scope: !2437)
!2437 = distinct !DILexicalBlock(scope: !2434, file: !2218, line: 206, column: 3)
!2438 = !DILocation(line: 207, column: 18, scope: !2437)
!2439 = !DILocation(line: 208, column: 10, scope: !2437)
!2440 = !DILocation(line: 208, column: 35, scope: !2437)
!2441 = !DILocation(line: 208, column: 22, scope: !2437)
!2442 = !DILocation(line: 208, column: 14, scope: !2437)
!2443 = !DILocation(line: 208, column: 33, scope: !2437)
!2444 = !DILocation(line: 208, column: 67, scope: !2437)
!2445 = !DILocation(line: 0, scope: !2437)
!2446 = !DILocation(line: 206, column: 3, scope: !2434)
!2447 = !DILocation(line: 209, column: 17, scope: !2437)
!2448 = !DILocation(line: 206, column: 3, scope: !2437)
!2449 = distinct !{!2449, !2446, !2450}
!2450 = !DILocation(line: 210, column: 5, scope: !2434)
!2451 = !DILocation(line: 211, column: 20, scope: !2408)
!2452 = !DILocation(line: 211, column: 28, scope: !2408)
!2453 = !DILocation(line: 211, column: 42, scope: !2408)
!2454 = !DILocation(line: 211, column: 51, scope: !2408)
!2455 = !DILocation(line: 212, column: 20, scope: !2408)
!2456 = !DILocation(line: 212, column: 29, scope: !2408)
!2457 = !DILocation(line: 211, column: 3, scope: !2408)
!2458 = !DILocation(line: 213, column: 1, scope: !2408)
!2459 = !DILocalVariable(name: "stream", arg: 1, scope: !2460, file: !2218, line: 199, type: !2463)
!2460 = distinct !DISubprogram(name: "version_etc_va", scope: !2218, file: !2218, line: 199, type: !2461, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2504, retainedNodes: !4)
!2461 = !DISubroutineType(types: !2462)
!2462 = !{null, !2463, !6, !6, !6, !2497}
!2463 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2464, size: 64)
!2464 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2223, line: 7, baseType: !2465)
!2465 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2225, line: 49, size: 1728, elements: !2466)
!2466 = !{!2467, !2468, !2469, !2470, !2471, !2472, !2473, !2474, !2475, !2476, !2477, !2478, !2479, !2480, !2482, !2483, !2484, !2485, !2486, !2487, !2488, !2489, !2490, !2491, !2492, !2493, !2494, !2495, !2496}
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2465, file: !2225, line: 51, baseType: !25, size: 32)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2465, file: !2225, line: 54, baseType: !32, size: 64, offset: 64)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2465, file: !2225, line: 55, baseType: !32, size: 64, offset: 128)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2465, file: !2225, line: 56, baseType: !32, size: 64, offset: 192)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2465, file: !2225, line: 57, baseType: !32, size: 64, offset: 256)
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2465, file: !2225, line: 58, baseType: !32, size: 64, offset: 320)
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2465, file: !2225, line: 59, baseType: !32, size: 64, offset: 384)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2465, file: !2225, line: 60, baseType: !32, size: 64, offset: 448)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2465, file: !2225, line: 61, baseType: !32, size: 64, offset: 512)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2465, file: !2225, line: 64, baseType: !32, size: 64, offset: 576)
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2465, file: !2225, line: 65, baseType: !32, size: 64, offset: 640)
!2478 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2465, file: !2225, line: 66, baseType: !32, size: 64, offset: 704)
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2465, file: !2225, line: 68, baseType: !2240, size: 64, offset: 768)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2465, file: !2225, line: 70, baseType: !2481, size: 64, offset: 832)
!2481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2465, size: 64)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2465, file: !2225, line: 72, baseType: !25, size: 32, offset: 896)
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2465, file: !2225, line: 73, baseType: !25, size: 32, offset: 928)
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2465, file: !2225, line: 74, baseType: !2247, size: 64, offset: 960)
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2465, file: !2225, line: 77, baseType: !56, size: 16, offset: 1024)
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2465, file: !2225, line: 78, baseType: !2252, size: 8, offset: 1040)
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2465, file: !2225, line: 79, baseType: !2254, size: 8, offset: 1048)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2465, file: !2225, line: 81, baseType: !2258, size: 64, offset: 1088)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2465, file: !2225, line: 89, baseType: !2261, size: 64, offset: 1152)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2465, file: !2225, line: 91, baseType: !2263, size: 64, offset: 1216)
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2465, file: !2225, line: 92, baseType: !2266, size: 64, offset: 1280)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2465, file: !2225, line: 93, baseType: !2481, size: 64, offset: 1344)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2465, file: !2225, line: 94, baseType: !31, size: 64, offset: 1408)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2465, file: !2225, line: 95, baseType: !57, size: 64, offset: 1472)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2465, file: !2225, line: 96, baseType: !25, size: 32, offset: 1536)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2465, file: !2225, line: 98, baseType: !2273, size: 160, offset: 1568)
!2497 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2498, size: 64)
!2498 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !115, line: 192, size: 192, elements: !2499)
!2499 = !{!2500, !2501, !2502, !2503}
!2500 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2498, file: !115, line: 192, baseType: !42, size: 32)
!2501 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2498, file: !115, line: 192, baseType: !42, size: 32, offset: 32)
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2498, file: !115, line: 192, baseType: !31, size: 64, offset: 64)
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2498, file: !115, line: 192, baseType: !31, size: 64, offset: 128)
!2504 = distinct !DICompileUnit(language: DW_LANG_C99, file: !115, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!2505 = !DILocalVariable(name: "command_name", arg: 2, scope: !2460, file: !2218, line: 200, type: !6)
!2506 = !DILocalVariable(name: "package", arg: 3, scope: !2460, file: !2218, line: 200, type: !6)
!2507 = !DILocalVariable(name: "version", arg: 4, scope: !2460, file: !2218, line: 201, type: !6)
!2508 = !DILocalVariable(name: "authors", arg: 5, scope: !2460, file: !2218, line: 201, type: !2497)
!2509 = !DILocalVariable(name: "n_authors", scope: !2460, file: !2218, line: 203, type: !57)
!2510 = !DILocalVariable(name: "authtab", scope: !2460, file: !2218, line: 204, type: !2431)
!2511 = distinct !DISubprogram(name: "version_etc", scope: !2218, file: !2218, line: 230, type: !2512, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !114, retainedNodes: !4)
!2512 = !DISubroutineType(types: !2513)
!2513 = !{null, !2221, !6, !6, !6, null}
!2514 = !DILocalVariable(name: "stream", arg: 1, scope: !2511, file: !2218, line: 230, type: !2221)
!2515 = !DILocation(line: 230, column: 20, scope: !2511)
!2516 = !DILocalVariable(name: "command_name", arg: 2, scope: !2511, file: !2218, line: 231, type: !6)
!2517 = !DILocation(line: 231, column: 26, scope: !2511)
!2518 = !DILocalVariable(name: "package", arg: 3, scope: !2511, file: !2218, line: 231, type: !6)
!2519 = !DILocation(line: 231, column: 52, scope: !2511)
!2520 = !DILocalVariable(name: "version", arg: 4, scope: !2511, file: !2218, line: 232, type: !6)
!2521 = !DILocation(line: 232, column: 26, scope: !2511)
!2522 = !DILocalVariable(name: "authors", scope: !2511, file: !2218, line: 234, type: !2523)
!2523 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !2524, line: 52, baseType: !2525)
!2524 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!2525 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !2526, line: 32, baseType: !2527)
!2526 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stdarg.h", directory: "")
!2527 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !115, line: 234, baseType: !2528)
!2528 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2412, size: 192, elements: !2255)
!2529 = !DILocation(line: 234, column: 11, scope: !2511)
!2530 = !DILocation(line: 236, column: 3, scope: !2511)
!2531 = !DILocation(line: 237, column: 19, scope: !2511)
!2532 = !DILocation(line: 237, column: 27, scope: !2511)
!2533 = !DILocation(line: 237, column: 41, scope: !2511)
!2534 = !DILocation(line: 237, column: 50, scope: !2511)
!2535 = !DILocation(line: 237, column: 59, scope: !2511)
!2536 = !DILocation(line: 237, column: 3, scope: !2511)
!2537 = !DILocation(line: 238, column: 3, scope: !2511)
!2538 = !DILocation(line: 239, column: 1, scope: !2511)
!2539 = !DILocalVariable(name: "stream", arg: 1, scope: !2540, file: !2218, line: 230, type: !2543)
!2540 = distinct !DISubprogram(name: "version_etc", scope: !2218, file: !2218, line: 230, type: !2541, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2577, retainedNodes: !4)
!2541 = !DISubroutineType(types: !2542)
!2542 = !{null, !2543, !6, !6, !6, null}
!2543 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2544, size: 64)
!2544 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2223, line: 7, baseType: !2545)
!2545 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2225, line: 49, size: 1728, elements: !2546)
!2546 = !{!2547, !2548, !2549, !2550, !2551, !2552, !2553, !2554, !2555, !2556, !2557, !2558, !2559, !2560, !2562, !2563, !2564, !2565, !2566, !2567, !2568, !2569, !2570, !2571, !2572, !2573, !2574, !2575, !2576}
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2545, file: !2225, line: 51, baseType: !25, size: 32)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2545, file: !2225, line: 54, baseType: !32, size: 64, offset: 64)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2545, file: !2225, line: 55, baseType: !32, size: 64, offset: 128)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2545, file: !2225, line: 56, baseType: !32, size: 64, offset: 192)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2545, file: !2225, line: 57, baseType: !32, size: 64, offset: 256)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2545, file: !2225, line: 58, baseType: !32, size: 64, offset: 320)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2545, file: !2225, line: 59, baseType: !32, size: 64, offset: 384)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2545, file: !2225, line: 60, baseType: !32, size: 64, offset: 448)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2545, file: !2225, line: 61, baseType: !32, size: 64, offset: 512)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2545, file: !2225, line: 64, baseType: !32, size: 64, offset: 576)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2545, file: !2225, line: 65, baseType: !32, size: 64, offset: 640)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2545, file: !2225, line: 66, baseType: !32, size: 64, offset: 704)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2545, file: !2225, line: 68, baseType: !2240, size: 64, offset: 768)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2545, file: !2225, line: 70, baseType: !2561, size: 64, offset: 832)
!2561 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2545, size: 64)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2545, file: !2225, line: 72, baseType: !25, size: 32, offset: 896)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2545, file: !2225, line: 73, baseType: !25, size: 32, offset: 928)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2545, file: !2225, line: 74, baseType: !2247, size: 64, offset: 960)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2545, file: !2225, line: 77, baseType: !56, size: 16, offset: 1024)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2545, file: !2225, line: 78, baseType: !2252, size: 8, offset: 1040)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2545, file: !2225, line: 79, baseType: !2254, size: 8, offset: 1048)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2545, file: !2225, line: 81, baseType: !2258, size: 64, offset: 1088)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2545, file: !2225, line: 89, baseType: !2261, size: 64, offset: 1152)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2545, file: !2225, line: 91, baseType: !2263, size: 64, offset: 1216)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2545, file: !2225, line: 92, baseType: !2266, size: 64, offset: 1280)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2545, file: !2225, line: 93, baseType: !2561, size: 64, offset: 1344)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2545, file: !2225, line: 94, baseType: !31, size: 64, offset: 1408)
!2574 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2545, file: !2225, line: 95, baseType: !57, size: 64, offset: 1472)
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2545, file: !2225, line: 96, baseType: !25, size: 32, offset: 1536)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2545, file: !2225, line: 98, baseType: !2273, size: 160, offset: 1568)
!2577 = distinct !DICompileUnit(language: DW_LANG_C99, file: !115, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!2578 = !DILocalVariable(name: "command_name", arg: 2, scope: !2540, file: !2218, line: 231, type: !6)
!2579 = !DILocalVariable(name: "package", arg: 3, scope: !2540, file: !2218, line: 231, type: !6)
!2580 = !DILocalVariable(name: "version", arg: 4, scope: !2540, file: !2218, line: 232, type: !6)
!2581 = !DILocalVariable(name: "authors", scope: !2540, file: !2218, line: 234, type: !2582)
!2582 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !2524, line: 52, baseType: !2583)
!2583 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !2526, line: 32, baseType: !2584)
!2584 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !115, line: 234, baseType: !2585)
!2585 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2586, size: 192, elements: !2255)
!2586 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !115, line: 192, size: 192, elements: !2587)
!2587 = !{!2588, !2589, !2590, !2591}
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2586, file: !115, line: 192, baseType: !42, size: 32)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2586, file: !115, line: 192, baseType: !42, size: 32, offset: 32)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2586, file: !115, line: 192, baseType: !31, size: 64, offset: 64)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2586, file: !115, line: 192, baseType: !31, size: 64, offset: 128)
!2592 = distinct !DISubprogram(name: "xmalloc", scope: !2593, file: !2593, line: 39, type: !2594, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !117, retainedNodes: !4)
!2593 = !DIFile(filename: "lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2594 = !DISubroutineType(types: !2595)
!2595 = !{!31, !57}
!2596 = !DILocalVariable(name: "n", arg: 1, scope: !2592, file: !2593, line: 39, type: !57)
!2597 = !DILocation(line: 39, column: 17, scope: !2592)
!2598 = !DILocalVariable(name: "p", scope: !2592, file: !2593, line: 41, type: !31)
!2599 = !DILocation(line: 41, column: 9, scope: !2592)
!2600 = !DILocation(line: 41, column: 21, scope: !2592)
!2601 = !DILocation(line: 41, column: 13, scope: !2592)
!2602 = !DILocation(line: 42, column: 8, scope: !2603)
!2603 = distinct !DILexicalBlock(scope: !2592, file: !2593, line: 42, column: 7)
!2604 = !DILocation(line: 42, column: 10, scope: !2603)
!2605 = !DILocation(line: 42, column: 13, scope: !2603)
!2606 = !DILocation(line: 42, column: 15, scope: !2603)
!2607 = !DILocation(line: 42, column: 7, scope: !2592)
!2608 = !DILocation(line: 43, column: 5, scope: !2603)
!2609 = !DILocation(line: 44, column: 10, scope: !2592)
!2610 = !DILocation(line: 44, column: 3, scope: !2592)
!2611 = !DILocalVariable(name: "n", arg: 1, scope: !2612, file: !2593, line: 39, type: !57)
!2612 = distinct !DISubprogram(name: "xmalloc", scope: !2593, file: !2593, line: 39, type: !2594, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2613, retainedNodes: !4)
!2613 = distinct !DICompileUnit(language: DW_LANG_C99, file: !118, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !119, nameTableKind: None)
!2614 = !DILocalVariable(name: "p", scope: !2612, file: !2593, line: 41, type: !31)
!2615 = distinct !DISubprogram(name: "xrealloc", scope: !2593, file: !2593, line: 51, type: !2616, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !117, retainedNodes: !4)
!2616 = !DISubroutineType(types: !2617)
!2617 = !{!31, !31, !57}
!2618 = !DILocalVariable(name: "p", arg: 1, scope: !2615, file: !2593, line: 51, type: !31)
!2619 = !DILocation(line: 51, column: 17, scope: !2615)
!2620 = !DILocalVariable(name: "n", arg: 2, scope: !2615, file: !2593, line: 51, type: !57)
!2621 = !DILocation(line: 51, column: 27, scope: !2615)
!2622 = !DILocation(line: 53, column: 8, scope: !2623)
!2623 = distinct !DILexicalBlock(scope: !2615, file: !2593, line: 53, column: 7)
!2624 = !DILocation(line: 53, column: 10, scope: !2623)
!2625 = !DILocation(line: 53, column: 13, scope: !2623)
!2626 = !DILocation(line: 53, column: 7, scope: !2615)
!2627 = !DILocation(line: 57, column: 13, scope: !2628)
!2628 = distinct !DILexicalBlock(scope: !2623, file: !2593, line: 54, column: 5)
!2629 = !DILocation(line: 57, column: 7, scope: !2628)
!2630 = !DILocation(line: 58, column: 7, scope: !2628)
!2631 = !DILocation(line: 61, column: 16, scope: !2615)
!2632 = !DILocation(line: 61, column: 19, scope: !2615)
!2633 = !DILocation(line: 61, column: 7, scope: !2615)
!2634 = !DILocation(line: 61, column: 5, scope: !2615)
!2635 = !DILocation(line: 62, column: 8, scope: !2636)
!2636 = distinct !DILexicalBlock(scope: !2615, file: !2593, line: 62, column: 7)
!2637 = !DILocation(line: 62, column: 10, scope: !2636)
!2638 = !DILocation(line: 62, column: 13, scope: !2636)
!2639 = !DILocation(line: 62, column: 7, scope: !2615)
!2640 = !DILocation(line: 63, column: 5, scope: !2636)
!2641 = !DILocation(line: 64, column: 10, scope: !2615)
!2642 = !DILocation(line: 64, column: 3, scope: !2615)
!2643 = !DILocation(line: 65, column: 1, scope: !2615)
!2644 = !DILocalVariable(name: "p", arg: 1, scope: !2645, file: !2593, line: 51, type: !31)
!2645 = distinct !DISubprogram(name: "xrealloc", scope: !2593, file: !2593, line: 51, type: !2616, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2646, retainedNodes: !4)
!2646 = distinct !DICompileUnit(language: DW_LANG_C99, file: !118, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !119, nameTableKind: None)
!2647 = !DILocalVariable(name: "n", arg: 2, scope: !2645, file: !2593, line: 51, type: !57)
!2648 = distinct !DISubprogram(name: "xcharalloc", scope: !2649, file: !2649, line: 216, type: !2650, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !117, retainedNodes: !4)
!2649 = !DIFile(filename: "./lib/xalloc.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2650 = !DISubroutineType(types: !2651)
!2651 = !{!32, !57}
!2652 = !DILocalVariable(name: "n", arg: 1, scope: !2648, file: !2649, line: 216, type: !57)
!2653 = !DILocation(line: 216, column: 20, scope: !2648)
!2654 = !DILocation(line: 218, column: 10, scope: !2648)
!2655 = !DILocation(line: 218, column: 3, scope: !2648)
!2656 = !DILocalVariable(name: "n", arg: 1, scope: !2657, file: !2649, line: 216, type: !57)
!2657 = distinct !DISubprogram(name: "xcharalloc", scope: !2649, file: !2649, line: 216, type: !2650, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2658, retainedNodes: !4)
!2658 = distinct !DICompileUnit(language: DW_LANG_C99, file: !118, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !119, nameTableKind: None)
!2659 = distinct !DISubprogram(name: "xalloc_die", scope: !2660, file: !2660, line: 32, type: !584, scopeLine: 33, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !120, retainedNodes: !4)
!2660 = !DIFile(filename: "lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2661 = !DILocation(line: 34, column: 10, scope: !2659)
!2662 = !DILocation(line: 34, column: 33, scope: !2659)
!2663 = !DILocation(line: 34, column: 3, scope: !2659)
!2664 = !DILocation(line: 40, column: 3, scope: !2659)
!2665 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !2666, file: !2666, line: 86, type: !2667, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !122, retainedNodes: !4)
!2666 = !DIFile(filename: "lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2667 = !DISubroutineType(types: !2668)
!2668 = !{!57, !2669, !6, !57, !2670}
!2669 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1627, size: 64)
!2670 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2671, size: 64)
!2671 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1598, line: 6, baseType: !2672)
!2672 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1600, line: 21, baseType: !2673)
!2673 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1600, line: 13, size: 64, elements: !2674)
!2674 = !{!2675, !2676}
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !2673, file: !1600, line: 15, baseType: !25, size: 32)
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !2673, file: !1600, line: 20, baseType: !2677, size: 32, offset: 32)
!2677 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2673, file: !1600, line: 16, size: 32, elements: !2678)
!2678 = !{!2679, !2680}
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !2677, file: !1600, line: 18, baseType: !42, size: 32)
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !2677, file: !1600, line: 19, baseType: !1609, size: 32)
!2681 = !DILocalVariable(name: "pwc", arg: 1, scope: !2665, file: !2666, line: 86, type: !2669)
!2682 = !DILocation(line: 86, column: 23, scope: !2665)
!2683 = !DILocalVariable(name: "s", arg: 2, scope: !2665, file: !2666, line: 86, type: !6)
!2684 = !DILocation(line: 86, column: 40, scope: !2665)
!2685 = !DILocalVariable(name: "n", arg: 3, scope: !2665, file: !2666, line: 86, type: !57)
!2686 = !DILocation(line: 86, column: 50, scope: !2665)
!2687 = !DILocalVariable(name: "ps", arg: 4, scope: !2665, file: !2666, line: 86, type: !2670)
!2688 = !DILocation(line: 86, column: 64, scope: !2665)
!2689 = !DILocalVariable(name: "ret", scope: !2665, file: !2666, line: 88, type: !57)
!2690 = !DILocation(line: 88, column: 10, scope: !2665)
!2691 = !DILocalVariable(name: "wc", scope: !2665, file: !2666, line: 89, type: !1627)
!2692 = !DILocation(line: 89, column: 11, scope: !2665)
!2693 = !DILocation(line: 105, column: 9, scope: !2694)
!2694 = distinct !DILexicalBlock(scope: !2665, file: !2666, line: 105, column: 7)
!2695 = !DILocation(line: 105, column: 7, scope: !2665)
!2696 = !DILocation(line: 106, column: 9, scope: !2694)
!2697 = !DILocation(line: 106, column: 5, scope: !2694)
!2698 = !DILocation(line: 145, column: 18, scope: !2665)
!2699 = !DILocation(line: 145, column: 23, scope: !2665)
!2700 = !DILocation(line: 145, column: 26, scope: !2665)
!2701 = !DILocation(line: 145, column: 29, scope: !2665)
!2702 = !DILocation(line: 145, column: 9, scope: !2665)
!2703 = !DILocation(line: 145, column: 7, scope: !2665)
!2704 = !DILocation(line: 154, column: 22, scope: !2705)
!2705 = distinct !DILexicalBlock(scope: !2665, file: !2666, line: 154, column: 7)
!2706 = !DILocation(line: 154, column: 19, scope: !2705)
!2707 = !DILocation(line: 154, column: 26, scope: !2705)
!2708 = !DILocation(line: 154, column: 29, scope: !2705)
!2709 = !DILocation(line: 154, column: 31, scope: !2705)
!2710 = !DILocation(line: 154, column: 36, scope: !2705)
!2711 = !DILocation(line: 154, column: 41, scope: !2705)
!2712 = !DILocation(line: 154, column: 7, scope: !2665)
!2713 = !DILocalVariable(name: "uc", scope: !2714, file: !2666, line: 156, type: !130)
!2714 = distinct !DILexicalBlock(scope: !2705, file: !2666, line: 155, column: 5)
!2715 = !DILocation(line: 156, column: 21, scope: !2714)
!2716 = !DILocation(line: 156, column: 27, scope: !2714)
!2717 = !DILocation(line: 156, column: 26, scope: !2714)
!2718 = !DILocation(line: 157, column: 14, scope: !2714)
!2719 = !DILocation(line: 157, column: 8, scope: !2714)
!2720 = !DILocation(line: 157, column: 12, scope: !2714)
!2721 = !DILocation(line: 158, column: 7, scope: !2714)
!2722 = !DILocation(line: 162, column: 10, scope: !2665)
!2723 = !DILocation(line: 162, column: 3, scope: !2665)
!2724 = !DILocation(line: 163, column: 1, scope: !2665)
!2725 = !DILocalVariable(name: "pwc", arg: 1, scope: !2726, file: !2666, line: 86, type: !2669)
!2726 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !2666, file: !2666, line: 86, type: !2727, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2740, retainedNodes: !4)
!2727 = !DISubroutineType(types: !2728)
!2728 = !{!57, !2669, !6, !57, !2729}
!2729 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2730, size: 64)
!2730 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1598, line: 6, baseType: !2731)
!2731 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1600, line: 21, baseType: !2732)
!2732 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1600, line: 13, size: 64, elements: !2733)
!2733 = !{!2734, !2735}
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !2732, file: !1600, line: 15, baseType: !25, size: 32)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !2732, file: !1600, line: 20, baseType: !2736, size: 32, offset: 32)
!2736 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2732, file: !1600, line: 16, size: 32, elements: !2737)
!2737 = !{!2738, !2739}
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !2736, file: !1600, line: 18, baseType: !42, size: 32)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !2736, file: !1600, line: 19, baseType: !1609, size: 32)
!2740 = distinct !DICompileUnit(language: DW_LANG_C99, file: !123, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !124, nameTableKind: None)
!2741 = !DILocalVariable(name: "s", arg: 2, scope: !2726, file: !2666, line: 86, type: !6)
!2742 = !DILocalVariable(name: "n", arg: 3, scope: !2726, file: !2666, line: 86, type: !57)
!2743 = !DILocalVariable(name: "ps", arg: 4, scope: !2726, file: !2666, line: 86, type: !2729)
!2744 = !DILocalVariable(name: "ret", scope: !2726, file: !2666, line: 88, type: !57)
!2745 = !DILocalVariable(name: "wc", scope: !2726, file: !2666, line: 89, type: !1627)
!2746 = distinct !DISubprogram(name: "c_strcasecmp", scope: !2747, file: !2747, line: 27, type: !2748, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !125, retainedNodes: !4)
!2747 = !DIFile(filename: "lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2748 = !DISubroutineType(types: !2749)
!2749 = !{!25, !6, !6}
!2750 = !DILocalVariable(name: "s1", arg: 1, scope: !2746, file: !2747, line: 27, type: !6)
!2751 = !DILocation(line: 27, column: 27, scope: !2746)
!2752 = !DILocalVariable(name: "s2", arg: 2, scope: !2746, file: !2747, line: 27, type: !6)
!2753 = !DILocation(line: 27, column: 43, scope: !2746)
!2754 = !DILocalVariable(name: "p1", scope: !2746, file: !2747, line: 29, type: !128)
!2755 = !DILocation(line: 29, column: 33, scope: !2746)
!2756 = !DILocation(line: 29, column: 62, scope: !2746)
!2757 = !DILocalVariable(name: "p2", scope: !2746, file: !2747, line: 30, type: !128)
!2758 = !DILocation(line: 30, column: 33, scope: !2746)
!2759 = !DILocation(line: 30, column: 62, scope: !2746)
!2760 = !DILocalVariable(name: "c1", scope: !2746, file: !2747, line: 31, type: !130)
!2761 = !DILocation(line: 31, column: 17, scope: !2746)
!2762 = !DILocalVariable(name: "c2", scope: !2746, file: !2747, line: 31, type: !130)
!2763 = !DILocation(line: 31, column: 21, scope: !2746)
!2764 = !DILocation(line: 33, column: 7, scope: !2765)
!2765 = distinct !DILexicalBlock(scope: !2746, file: !2747, line: 33, column: 7)
!2766 = !DILocation(line: 33, column: 13, scope: !2765)
!2767 = !DILocation(line: 33, column: 10, scope: !2765)
!2768 = !DILocation(line: 33, column: 7, scope: !2746)
!2769 = !DILocation(line: 34, column: 5, scope: !2765)
!2770 = !DILocation(line: 36, column: 3, scope: !2746)
!2771 = !DILocation(line: 38, column: 24, scope: !2772)
!2772 = distinct !DILexicalBlock(scope: !2746, file: !2747, line: 37, column: 5)
!2773 = !DILocation(line: 38, column: 23, scope: !2772)
!2774 = !DILocation(line: 38, column: 12, scope: !2772)
!2775 = !DILocation(line: 38, column: 10, scope: !2772)
!2776 = !DILocation(line: 39, column: 24, scope: !2772)
!2777 = !DILocation(line: 39, column: 23, scope: !2772)
!2778 = !DILocation(line: 39, column: 12, scope: !2772)
!2779 = !DILocation(line: 39, column: 10, scope: !2772)
!2780 = !DILocation(line: 41, column: 11, scope: !2781)
!2781 = distinct !DILexicalBlock(scope: !2772, file: !2747, line: 41, column: 11)
!2782 = !DILocation(line: 41, column: 14, scope: !2781)
!2783 = !DILocation(line: 41, column: 11, scope: !2772)
!2784 = !DILocation(line: 42, column: 9, scope: !2781)
!2785 = !DILocation(line: 44, column: 7, scope: !2772)
!2786 = !DILocation(line: 45, column: 7, scope: !2772)
!2787 = !DILocation(line: 46, column: 5, scope: !2772)
!2788 = !DILocation(line: 47, column: 10, scope: !2746)
!2789 = !DILocation(line: 47, column: 16, scope: !2746)
!2790 = !DILocation(line: 47, column: 13, scope: !2746)
!2791 = distinct !{!2791, !2770, !2792}
!2792 = !DILocation(line: 47, column: 18, scope: !2746)
!2793 = !DILocation(line: 50, column: 12, scope: !2794)
!2794 = distinct !DILexicalBlock(scope: !2746, file: !2747, line: 49, column: 7)
!2795 = !DILocation(line: 50, column: 17, scope: !2794)
!2796 = !DILocation(line: 50, column: 15, scope: !2794)
!2797 = !DILocation(line: 50, column: 5, scope: !2794)
!2798 = !DILocation(line: 56, column: 1, scope: !2746)
!2799 = !DILocalVariable(name: "s1", arg: 1, scope: !2800, file: !2747, line: 27, type: !6)
!2800 = distinct !DISubprogram(name: "c_strcasecmp", scope: !2747, file: !2747, line: 27, type: !2748, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2801, retainedNodes: !4)
!2801 = distinct !DICompileUnit(language: DW_LANG_C99, file: !126, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !127, nameTableKind: None)
!2802 = !DILocalVariable(name: "s2", arg: 2, scope: !2800, file: !2747, line: 27, type: !6)
!2803 = !DILocalVariable(name: "p1", scope: !2800, file: !2747, line: 29, type: !128)
!2804 = !DILocalVariable(name: "p2", scope: !2800, file: !2747, line: 30, type: !128)
!2805 = !DILocalVariable(name: "c1", scope: !2800, file: !2747, line: 31, type: !130)
!2806 = !DILocalVariable(name: "c2", scope: !2800, file: !2747, line: 31, type: !130)
!2807 = distinct !DISubprogram(name: "close_stream", scope: !2808, file: !2808, line: 56, type: !2809, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !131, retainedNodes: !4)
!2808 = !DIFile(filename: "lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2809 = !DISubroutineType(types: !2810)
!2810 = !{!25, !2811}
!2811 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2812, size: 64)
!2812 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2223, line: 7, baseType: !2813)
!2813 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2225, line: 49, size: 1728, elements: !2814)
!2814 = !{!2815, !2816, !2817, !2818, !2819, !2820, !2821, !2822, !2823, !2824, !2825, !2826, !2827, !2828, !2830, !2831, !2832, !2833, !2834, !2835, !2836, !2837, !2838, !2839, !2840, !2841, !2842, !2843, !2844}
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2813, file: !2225, line: 51, baseType: !25, size: 32)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2813, file: !2225, line: 54, baseType: !32, size: 64, offset: 64)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2813, file: !2225, line: 55, baseType: !32, size: 64, offset: 128)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2813, file: !2225, line: 56, baseType: !32, size: 64, offset: 192)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2813, file: !2225, line: 57, baseType: !32, size: 64, offset: 256)
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2813, file: !2225, line: 58, baseType: !32, size: 64, offset: 320)
!2821 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2813, file: !2225, line: 59, baseType: !32, size: 64, offset: 384)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2813, file: !2225, line: 60, baseType: !32, size: 64, offset: 448)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2813, file: !2225, line: 61, baseType: !32, size: 64, offset: 512)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2813, file: !2225, line: 64, baseType: !32, size: 64, offset: 576)
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2813, file: !2225, line: 65, baseType: !32, size: 64, offset: 640)
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2813, file: !2225, line: 66, baseType: !32, size: 64, offset: 704)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2813, file: !2225, line: 68, baseType: !2240, size: 64, offset: 768)
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2813, file: !2225, line: 70, baseType: !2829, size: 64, offset: 832)
!2829 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2813, size: 64)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2813, file: !2225, line: 72, baseType: !25, size: 32, offset: 896)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2813, file: !2225, line: 73, baseType: !25, size: 32, offset: 928)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2813, file: !2225, line: 74, baseType: !2247, size: 64, offset: 960)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2813, file: !2225, line: 77, baseType: !56, size: 16, offset: 1024)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2813, file: !2225, line: 78, baseType: !2252, size: 8, offset: 1040)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2813, file: !2225, line: 79, baseType: !2254, size: 8, offset: 1048)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2813, file: !2225, line: 81, baseType: !2258, size: 64, offset: 1088)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2813, file: !2225, line: 89, baseType: !2261, size: 64, offset: 1152)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2813, file: !2225, line: 91, baseType: !2263, size: 64, offset: 1216)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2813, file: !2225, line: 92, baseType: !2266, size: 64, offset: 1280)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2813, file: !2225, line: 93, baseType: !2829, size: 64, offset: 1344)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2813, file: !2225, line: 94, baseType: !31, size: 64, offset: 1408)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2813, file: !2225, line: 95, baseType: !57, size: 64, offset: 1472)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2813, file: !2225, line: 96, baseType: !25, size: 32, offset: 1536)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2813, file: !2225, line: 98, baseType: !2273, size: 160, offset: 1568)
!2845 = !DILocalVariable(name: "stream", arg: 1, scope: !2807, file: !2808, line: 56, type: !2811)
!2846 = !DILocation(line: 56, column: 21, scope: !2807)
!2847 = !DILocalVariable(name: "some_pending", scope: !2807, file: !2808, line: 58, type: !2848)
!2848 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !17)
!2849 = !DILocation(line: 58, column: 14, scope: !2807)
!2850 = !DILocation(line: 58, column: 42, scope: !2807)
!2851 = !DILocation(line: 58, column: 30, scope: !2807)
!2852 = !DILocation(line: 58, column: 50, scope: !2807)
!2853 = !DILocalVariable(name: "prev_fail", scope: !2807, file: !2808, line: 59, type: !2848)
!2854 = !DILocation(line: 59, column: 14, scope: !2807)
!2855 = !DILocation(line: 59, column: 27, scope: !2807)
!2856 = !DILocation(line: 59, column: 43, scope: !2807)
!2857 = !DILocalVariable(name: "fclose_fail", scope: !2807, file: !2808, line: 60, type: !2848)
!2858 = !DILocation(line: 60, column: 14, scope: !2807)
!2859 = !DILocation(line: 60, column: 37, scope: !2807)
!2860 = !DILocation(line: 60, column: 29, scope: !2807)
!2861 = !DILocation(line: 60, column: 45, scope: !2807)
!2862 = !DILocation(line: 70, column: 7, scope: !2863)
!2863 = distinct !DILexicalBlock(scope: !2807, file: !2808, line: 70, column: 7)
!2864 = !DILocation(line: 70, column: 17, scope: !2863)
!2865 = !DILocation(line: 70, column: 21, scope: !2863)
!2866 = !DILocation(line: 70, column: 33, scope: !2863)
!2867 = !DILocation(line: 70, column: 37, scope: !2863)
!2868 = !DILocation(line: 70, column: 50, scope: !2863)
!2869 = !DILocation(line: 70, column: 53, scope: !2863)
!2870 = !DILocation(line: 70, column: 59, scope: !2863)
!2871 = !DILocation(line: 70, column: 7, scope: !2807)
!2872 = !DILocation(line: 72, column: 13, scope: !2873)
!2873 = distinct !DILexicalBlock(scope: !2874, file: !2808, line: 72, column: 11)
!2874 = distinct !DILexicalBlock(scope: !2863, file: !2808, line: 71, column: 5)
!2875 = !DILocation(line: 72, column: 11, scope: !2874)
!2876 = !DILocation(line: 73, column: 9, scope: !2873)
!2877 = !DILocation(line: 73, column: 15, scope: !2873)
!2878 = !DILocation(line: 74, column: 7, scope: !2874)
!2879 = !DILocation(line: 77, column: 3, scope: !2807)
!2880 = !DILocation(line: 78, column: 1, scope: !2807)
!2881 = !DILocalVariable(name: "stream", arg: 1, scope: !2882, file: !2808, line: 56, type: !2885)
!2882 = distinct !DISubprogram(name: "close_stream", scope: !2808, file: !2808, line: 56, type: !2883, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2919, retainedNodes: !4)
!2883 = !DISubroutineType(types: !2884)
!2884 = !{!25, !2885}
!2885 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2886, size: 64)
!2886 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2223, line: 7, baseType: !2887)
!2887 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2225, line: 49, size: 1728, elements: !2888)
!2888 = !{!2889, !2890, !2891, !2892, !2893, !2894, !2895, !2896, !2897, !2898, !2899, !2900, !2901, !2902, !2904, !2905, !2906, !2907, !2908, !2909, !2910, !2911, !2912, !2913, !2914, !2915, !2916, !2917, !2918}
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2887, file: !2225, line: 51, baseType: !25, size: 32)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2887, file: !2225, line: 54, baseType: !32, size: 64, offset: 64)
!2891 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2887, file: !2225, line: 55, baseType: !32, size: 64, offset: 128)
!2892 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2887, file: !2225, line: 56, baseType: !32, size: 64, offset: 192)
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2887, file: !2225, line: 57, baseType: !32, size: 64, offset: 256)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2887, file: !2225, line: 58, baseType: !32, size: 64, offset: 320)
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2887, file: !2225, line: 59, baseType: !32, size: 64, offset: 384)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2887, file: !2225, line: 60, baseType: !32, size: 64, offset: 448)
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2887, file: !2225, line: 61, baseType: !32, size: 64, offset: 512)
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2887, file: !2225, line: 64, baseType: !32, size: 64, offset: 576)
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2887, file: !2225, line: 65, baseType: !32, size: 64, offset: 640)
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2887, file: !2225, line: 66, baseType: !32, size: 64, offset: 704)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2887, file: !2225, line: 68, baseType: !2240, size: 64, offset: 768)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2887, file: !2225, line: 70, baseType: !2903, size: 64, offset: 832)
!2903 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2887, size: 64)
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2887, file: !2225, line: 72, baseType: !25, size: 32, offset: 896)
!2905 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2887, file: !2225, line: 73, baseType: !25, size: 32, offset: 928)
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2887, file: !2225, line: 74, baseType: !2247, size: 64, offset: 960)
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2887, file: !2225, line: 77, baseType: !56, size: 16, offset: 1024)
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2887, file: !2225, line: 78, baseType: !2252, size: 8, offset: 1040)
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2887, file: !2225, line: 79, baseType: !2254, size: 8, offset: 1048)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2887, file: !2225, line: 81, baseType: !2258, size: 64, offset: 1088)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2887, file: !2225, line: 89, baseType: !2261, size: 64, offset: 1152)
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2887, file: !2225, line: 91, baseType: !2263, size: 64, offset: 1216)
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2887, file: !2225, line: 92, baseType: !2266, size: 64, offset: 1280)
!2914 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2887, file: !2225, line: 93, baseType: !2903, size: 64, offset: 1344)
!2915 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2887, file: !2225, line: 94, baseType: !31, size: 64, offset: 1408)
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2887, file: !2225, line: 95, baseType: !57, size: 64, offset: 1472)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2887, file: !2225, line: 96, baseType: !25, size: 32, offset: 1536)
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2887, file: !2225, line: 98, baseType: !2273, size: 160, offset: 1568)
!2919 = distinct !DICompileUnit(language: DW_LANG_C99, file: !132, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!2920 = !DILocalVariable(name: "some_pending", scope: !2882, file: !2808, line: 58, type: !2848)
!2921 = !DILocalVariable(name: "prev_fail", scope: !2882, file: !2808, line: 59, type: !2848)
!2922 = !DILocalVariable(name: "fclose_fail", scope: !2882, file: !2808, line: 60, type: !2848)
!2923 = distinct !DISubprogram(name: "hard_locale", scope: !2924, file: !2924, line: 27, type: !2925, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!2924 = !DIFile(filename: "lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2925 = !DISubroutineType(types: !2926)
!2926 = !{!17, !25}
!2927 = !DILocalVariable(name: "category", arg: 1, scope: !2923, file: !2924, line: 27, type: !25)
!2928 = !DILocation(line: 27, column: 18, scope: !2923)
!2929 = !DILocalVariable(name: "locale", scope: !2923, file: !2924, line: 29, type: !2930)
!2930 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2056, elements: !2931)
!2931 = !{!2932}
!2932 = !DISubrange(count: 257)
!2933 = !DILocation(line: 29, column: 8, scope: !2923)
!2934 = !DILocation(line: 31, column: 25, scope: !2935)
!2935 = distinct !DILexicalBlock(scope: !2923, file: !2924, line: 31, column: 7)
!2936 = !DILocation(line: 31, column: 35, scope: !2935)
!2937 = !DILocation(line: 31, column: 7, scope: !2935)
!2938 = !DILocation(line: 31, column: 7, scope: !2923)
!2939 = !DILocation(line: 32, column: 5, scope: !2935)
!2940 = !DILocation(line: 34, column: 20, scope: !2923)
!2941 = !DILocation(line: 34, column: 12, scope: !2923)
!2942 = !DILocation(line: 34, column: 33, scope: !2923)
!2943 = !DILocation(line: 34, column: 38, scope: !2923)
!2944 = !DILocation(line: 34, column: 49, scope: !2923)
!2945 = !DILocation(line: 34, column: 41, scope: !2923)
!2946 = !DILocation(line: 34, column: 66, scope: !2923)
!2947 = !DILocation(line: 34, column: 10, scope: !2923)
!2948 = !DILocation(line: 34, column: 3, scope: !2923)
!2949 = !DILocation(line: 35, column: 1, scope: !2923)
!2950 = !DILocalVariable(name: "category", arg: 1, scope: !2951, file: !2924, line: 27, type: !25)
!2951 = distinct !DISubprogram(name: "hard_locale", scope: !2924, file: !2924, line: 27, type: !2925, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2952, retainedNodes: !4)
!2952 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!2953 = !DILocalVariable(name: "locale", scope: !2951, file: !2924, line: 29, type: !2930)
!2954 = distinct !DISubprogram(name: "locale_charset", scope: !2955, file: !2955, line: 831, type: !2956, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !135, retainedNodes: !4)
!2955 = !DIFile(filename: "lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2956 = !DISubroutineType(types: !2957)
!2957 = !{!6}
!2958 = !DILocalVariable(name: "codeset", scope: !2954, file: !2955, line: 833, type: !6)
!2959 = !DILocation(line: 833, column: 15, scope: !2954)
!2960 = !DILocation(line: 847, column: 13, scope: !2954)
!2961 = !DILocation(line: 847, column: 11, scope: !2954)
!2962 = !DILocation(line: 911, column: 7, scope: !2963)
!2963 = distinct !DILexicalBlock(scope: !2954, file: !2955, line: 911, column: 7)
!2964 = !DILocation(line: 911, column: 15, scope: !2963)
!2965 = !DILocation(line: 911, column: 7, scope: !2954)
!2966 = !DILocation(line: 913, column: 13, scope: !2963)
!2967 = !DILocation(line: 913, column: 5, scope: !2963)
!2968 = !DILocation(line: 1070, column: 13, scope: !2969)
!2969 = distinct !DILexicalBlock(scope: !2970, file: !2955, line: 1070, column: 13)
!2970 = distinct !DILexicalBlock(scope: !2971, file: !2955, line: 1060, column: 7)
!2971 = distinct !DILexicalBlock(scope: !2954, file: !2955, line: 1019, column: 3)
!2972 = !DILocation(line: 1070, column: 24, scope: !2969)
!2973 = !DILocation(line: 1070, column: 13, scope: !2970)
!2974 = !DILocation(line: 1071, column: 19, scope: !2969)
!2975 = !DILocation(line: 1071, column: 11, scope: !2969)
!2976 = !DILocation(line: 1158, column: 10, scope: !2954)
!2977 = !DILocation(line: 1158, column: 3, scope: !2954)
!2978 = !DILocalVariable(name: "codeset", scope: !2979, file: !2955, line: 833, type: !6)
!2979 = distinct !DISubprogram(name: "locale_charset", scope: !2955, file: !2955, line: 831, type: !2956, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2980, retainedNodes: !4)
!2980 = distinct !DICompileUnit(language: DW_LANG_C99, file: !136, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!2981 = distinct !DISubprogram(name: "setlocale_null_r", scope: !2982, file: !2982, line: 269, type: !2983, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !137, retainedNodes: !4)
!2982 = !DIFile(filename: "lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2983 = !DISubroutineType(types: !2984)
!2984 = !{!25, !25, !32, !57}
!2985 = !DILocalVariable(name: "category", arg: 1, scope: !2981, file: !2982, line: 269, type: !25)
!2986 = !DILocation(line: 269, column: 23, scope: !2981)
!2987 = !DILocalVariable(name: "buf", arg: 2, scope: !2981, file: !2982, line: 269, type: !32)
!2988 = !DILocation(line: 269, column: 39, scope: !2981)
!2989 = !DILocalVariable(name: "bufsize", arg: 3, scope: !2981, file: !2982, line: 269, type: !57)
!2990 = !DILocation(line: 269, column: 51, scope: !2981)
!2991 = !DILocation(line: 274, column: 35, scope: !2981)
!2992 = !DILocation(line: 274, column: 45, scope: !2981)
!2993 = !DILocation(line: 274, column: 50, scope: !2981)
!2994 = !DILocation(line: 274, column: 10, scope: !2981)
!2995 = !DILocation(line: 274, column: 3, scope: !2981)
!2996 = !DILocalVariable(name: "category", arg: 1, scope: !2997, file: !2982, line: 269, type: !25)
!2997 = distinct !DISubprogram(name: "setlocale_null_r", scope: !2982, file: !2982, line: 269, type: !2983, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2998, retainedNodes: !4)
!2998 = distinct !DICompileUnit(language: DW_LANG_C99, file: !138, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!2999 = !DILocalVariable(name: "buf", arg: 2, scope: !2997, file: !2982, line: 269, type: !32)
!3000 = !DILocalVariable(name: "bufsize", arg: 3, scope: !2997, file: !2982, line: 269, type: !57)
!3001 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !2982, file: !2982, line: 91, type: !2983, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !4)
!3002 = !DILocalVariable(name: "category", arg: 1, scope: !3001, file: !2982, line: 91, type: !25)
!3003 = !DILocation(line: 91, column: 30, scope: !3001)
!3004 = !DILocalVariable(name: "buf", arg: 2, scope: !3001, file: !2982, line: 91, type: !32)
!3005 = !DILocation(line: 91, column: 46, scope: !3001)
!3006 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3001, file: !2982, line: 91, type: !57)
!3007 = !DILocation(line: 91, column: 58, scope: !3001)
!3008 = !DILocalVariable(name: "result", scope: !3001, file: !2982, line: 140, type: !6)
!3009 = !DILocation(line: 140, column: 15, scope: !3001)
!3010 = !DILocation(line: 140, column: 51, scope: !3001)
!3011 = !DILocation(line: 140, column: 24, scope: !3001)
!3012 = !DILocation(line: 142, column: 7, scope: !3013)
!3013 = distinct !DILexicalBlock(scope: !3001, file: !2982, line: 142, column: 7)
!3014 = !DILocation(line: 142, column: 14, scope: !3013)
!3015 = !DILocation(line: 142, column: 7, scope: !3001)
!3016 = !DILocation(line: 145, column: 11, scope: !3017)
!3017 = distinct !DILexicalBlock(scope: !3018, file: !2982, line: 145, column: 11)
!3018 = distinct !DILexicalBlock(scope: !3013, file: !2982, line: 143, column: 5)
!3019 = !DILocation(line: 145, column: 19, scope: !3017)
!3020 = !DILocation(line: 145, column: 11, scope: !3018)
!3021 = !DILocation(line: 149, column: 9, scope: !3017)
!3022 = !DILocation(line: 149, column: 16, scope: !3017)
!3023 = !DILocation(line: 150, column: 7, scope: !3018)
!3024 = !DILocalVariable(name: "length", scope: !3025, file: !2982, line: 154, type: !57)
!3025 = distinct !DILexicalBlock(scope: !3013, file: !2982, line: 153, column: 5)
!3026 = !DILocation(line: 154, column: 14, scope: !3025)
!3027 = !DILocation(line: 154, column: 31, scope: !3025)
!3028 = !DILocation(line: 154, column: 23, scope: !3025)
!3029 = !DILocation(line: 155, column: 11, scope: !3030)
!3030 = distinct !DILexicalBlock(scope: !3025, file: !2982, line: 155, column: 11)
!3031 = !DILocation(line: 155, column: 20, scope: !3030)
!3032 = !DILocation(line: 155, column: 18, scope: !3030)
!3033 = !DILocation(line: 155, column: 11, scope: !3025)
!3034 = !DILocation(line: 157, column: 19, scope: !3035)
!3035 = distinct !DILexicalBlock(scope: !3030, file: !2982, line: 156, column: 9)
!3036 = !DILocation(line: 157, column: 24, scope: !3035)
!3037 = !DILocation(line: 157, column: 32, scope: !3035)
!3038 = !DILocation(line: 157, column: 39, scope: !3035)
!3039 = !DILocation(line: 157, column: 11, scope: !3035)
!3040 = !DILocation(line: 158, column: 11, scope: !3035)
!3041 = !DILocation(line: 162, column: 15, scope: !3042)
!3042 = distinct !DILexicalBlock(scope: !3043, file: !2982, line: 162, column: 15)
!3043 = distinct !DILexicalBlock(scope: !3030, file: !2982, line: 161, column: 9)
!3044 = !DILocation(line: 162, column: 23, scope: !3042)
!3045 = !DILocation(line: 162, column: 15, scope: !3043)
!3046 = !DILocation(line: 167, column: 23, scope: !3047)
!3047 = distinct !DILexicalBlock(scope: !3042, file: !2982, line: 163, column: 13)
!3048 = !DILocation(line: 167, column: 28, scope: !3047)
!3049 = !DILocation(line: 167, column: 36, scope: !3047)
!3050 = !DILocation(line: 167, column: 44, scope: !3047)
!3051 = !DILocation(line: 167, column: 15, scope: !3047)
!3052 = !DILocation(line: 168, column: 15, scope: !3047)
!3053 = !DILocation(line: 168, column: 19, scope: !3047)
!3054 = !DILocation(line: 168, column: 27, scope: !3047)
!3055 = !DILocation(line: 168, column: 32, scope: !3047)
!3056 = !DILocation(line: 169, column: 13, scope: !3047)
!3057 = !DILocation(line: 170, column: 11, scope: !3043)
!3058 = !DILocation(line: 174, column: 1, scope: !3001)
!3059 = !DILocalVariable(name: "category", arg: 1, scope: !3060, file: !2982, line: 91, type: !25)
!3060 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !2982, file: !2982, line: 91, type: !2983, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3061, retainedNodes: !4)
!3061 = distinct !DICompileUnit(language: DW_LANG_C99, file: !138, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!3062 = !DILocalVariable(name: "buf", arg: 2, scope: !3060, file: !2982, line: 91, type: !32)
!3063 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3060, file: !2982, line: 91, type: !57)
!3064 = !DILocalVariable(name: "result", scope: !3060, file: !2982, line: 140, type: !6)
!3065 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !2982, file: !2982, line: 60, type: !3066, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !4)
!3066 = !DISubroutineType(types: !3067)
!3067 = !{!6, !25}
!3068 = !DILocalVariable(name: "category", arg: 1, scope: !3065, file: !2982, line: 60, type: !25)
!3069 = !DILocation(line: 60, column: 32, scope: !3065)
!3070 = !DILocalVariable(name: "result", scope: !3065, file: !2982, line: 62, type: !6)
!3071 = !DILocation(line: 62, column: 15, scope: !3065)
!3072 = !DILocation(line: 62, column: 35, scope: !3065)
!3073 = !DILocation(line: 62, column: 24, scope: !3065)
!3074 = !DILocation(line: 87, column: 10, scope: !3065)
!3075 = !DILocation(line: 87, column: 3, scope: !3065)
!3076 = !DILocalVariable(name: "category", arg: 1, scope: !3077, file: !2982, line: 60, type: !25)
!3077 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !2982, file: !2982, line: 60, type: !3066, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3078, retainedNodes: !4)
!3078 = distinct !DICompileUnit(language: DW_LANG_C99, file: !138, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!3079 = !DILocalVariable(name: "result", scope: !3077, file: !2982, line: 62, type: !6)
!3080 = distinct !DISubprogram(name: "rpl_fclose", scope: !3081, file: !3081, line: 58, type: !3082, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !139, retainedNodes: !4)
!3081 = !DIFile(filename: "lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3082 = !DISubroutineType(types: !3083)
!3083 = !{!25, !3084}
!3084 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3085, size: 64)
!3085 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2223, line: 7, baseType: !3086)
!3086 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2225, line: 49, size: 1728, elements: !3087)
!3087 = !{!3088, !3089, !3090, !3091, !3092, !3093, !3094, !3095, !3096, !3097, !3098, !3099, !3100, !3101, !3103, !3104, !3105, !3106, !3107, !3108, !3109, !3110, !3111, !3112, !3113, !3114, !3115, !3116, !3117}
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3086, file: !2225, line: 51, baseType: !25, size: 32)
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3086, file: !2225, line: 54, baseType: !32, size: 64, offset: 64)
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3086, file: !2225, line: 55, baseType: !32, size: 64, offset: 128)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3086, file: !2225, line: 56, baseType: !32, size: 64, offset: 192)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3086, file: !2225, line: 57, baseType: !32, size: 64, offset: 256)
!3093 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3086, file: !2225, line: 58, baseType: !32, size: 64, offset: 320)
!3094 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3086, file: !2225, line: 59, baseType: !32, size: 64, offset: 384)
!3095 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3086, file: !2225, line: 60, baseType: !32, size: 64, offset: 448)
!3096 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3086, file: !2225, line: 61, baseType: !32, size: 64, offset: 512)
!3097 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3086, file: !2225, line: 64, baseType: !32, size: 64, offset: 576)
!3098 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3086, file: !2225, line: 65, baseType: !32, size: 64, offset: 640)
!3099 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3086, file: !2225, line: 66, baseType: !32, size: 64, offset: 704)
!3100 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3086, file: !2225, line: 68, baseType: !2240, size: 64, offset: 768)
!3101 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3086, file: !2225, line: 70, baseType: !3102, size: 64, offset: 832)
!3102 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3086, size: 64)
!3103 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3086, file: !2225, line: 72, baseType: !25, size: 32, offset: 896)
!3104 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3086, file: !2225, line: 73, baseType: !25, size: 32, offset: 928)
!3105 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3086, file: !2225, line: 74, baseType: !2247, size: 64, offset: 960)
!3106 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3086, file: !2225, line: 77, baseType: !56, size: 16, offset: 1024)
!3107 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3086, file: !2225, line: 78, baseType: !2252, size: 8, offset: 1040)
!3108 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3086, file: !2225, line: 79, baseType: !2254, size: 8, offset: 1048)
!3109 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3086, file: !2225, line: 81, baseType: !2258, size: 64, offset: 1088)
!3110 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3086, file: !2225, line: 89, baseType: !2261, size: 64, offset: 1152)
!3111 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3086, file: !2225, line: 91, baseType: !2263, size: 64, offset: 1216)
!3112 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3086, file: !2225, line: 92, baseType: !2266, size: 64, offset: 1280)
!3113 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3086, file: !2225, line: 93, baseType: !3102, size: 64, offset: 1344)
!3114 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3086, file: !2225, line: 94, baseType: !31, size: 64, offset: 1408)
!3115 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3086, file: !2225, line: 95, baseType: !57, size: 64, offset: 1472)
!3116 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3086, file: !2225, line: 96, baseType: !25, size: 32, offset: 1536)
!3117 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3086, file: !2225, line: 98, baseType: !2273, size: 160, offset: 1568)
!3118 = !DILocalVariable(name: "fp", arg: 1, scope: !3080, file: !3081, line: 58, type: !3084)
!3119 = !DILocation(line: 58, column: 19, scope: !3080)
!3120 = !DILocalVariable(name: "saved_errno", scope: !3080, file: !3081, line: 60, type: !25)
!3121 = !DILocation(line: 60, column: 7, scope: !3080)
!3122 = !DILocalVariable(name: "fd", scope: !3080, file: !3081, line: 61, type: !25)
!3123 = !DILocation(line: 61, column: 7, scope: !3080)
!3124 = !DILocalVariable(name: "result", scope: !3080, file: !3081, line: 62, type: !25)
!3125 = !DILocation(line: 62, column: 7, scope: !3080)
!3126 = !DILocation(line: 65, column: 16, scope: !3080)
!3127 = !DILocation(line: 65, column: 8, scope: !3080)
!3128 = !DILocation(line: 65, column: 6, scope: !3080)
!3129 = !DILocation(line: 66, column: 7, scope: !3130)
!3130 = distinct !DILexicalBlock(scope: !3080, file: !3081, line: 66, column: 7)
!3131 = !DILocation(line: 66, column: 10, scope: !3130)
!3132 = !DILocation(line: 66, column: 7, scope: !3080)
!3133 = !DILocation(line: 67, column: 28, scope: !3130)
!3134 = !DILocation(line: 67, column: 12, scope: !3130)
!3135 = !DILocation(line: 67, column: 5, scope: !3130)
!3136 = !DILocation(line: 72, column: 9, scope: !3137)
!3137 = distinct !DILexicalBlock(scope: !3080, file: !3081, line: 72, column: 7)
!3138 = !DILocation(line: 72, column: 23, scope: !3137)
!3139 = !DILocation(line: 72, column: 41, scope: !3137)
!3140 = !DILocation(line: 72, column: 33, scope: !3137)
!3141 = !DILocation(line: 72, column: 26, scope: !3137)
!3142 = !DILocation(line: 72, column: 59, scope: !3137)
!3143 = !DILocation(line: 73, column: 7, scope: !3137)
!3144 = !DILocation(line: 73, column: 18, scope: !3137)
!3145 = !DILocation(line: 73, column: 10, scope: !3137)
!3146 = !DILocation(line: 72, column: 7, scope: !3080)
!3147 = !DILocation(line: 74, column: 19, scope: !3137)
!3148 = !DILocation(line: 74, column: 17, scope: !3137)
!3149 = !DILocation(line: 74, column: 5, scope: !3137)
!3150 = !DILocation(line: 100, column: 28, scope: !3080)
!3151 = !DILocation(line: 100, column: 12, scope: !3080)
!3152 = !DILocation(line: 100, column: 10, scope: !3080)
!3153 = !DILocation(line: 105, column: 7, scope: !3154)
!3154 = distinct !DILexicalBlock(scope: !3080, file: !3081, line: 105, column: 7)
!3155 = !DILocation(line: 105, column: 19, scope: !3154)
!3156 = !DILocation(line: 105, column: 7, scope: !3080)
!3157 = !DILocation(line: 107, column: 15, scope: !3158)
!3158 = distinct !DILexicalBlock(scope: !3154, file: !3081, line: 106, column: 5)
!3159 = !DILocation(line: 107, column: 7, scope: !3158)
!3160 = !DILocation(line: 107, column: 13, scope: !3158)
!3161 = !DILocation(line: 108, column: 14, scope: !3158)
!3162 = !DILocation(line: 109, column: 5, scope: !3158)
!3163 = !DILocation(line: 111, column: 10, scope: !3080)
!3164 = !DILocation(line: 111, column: 3, scope: !3080)
!3165 = !DILocation(line: 112, column: 1, scope: !3080)
!3166 = distinct !DISubprogram(name: "rpl_fflush", scope: !3167, file: !3167, line: 129, type: !3168, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !141, retainedNodes: !4)
!3167 = !DIFile(filename: "lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3168 = !DISubroutineType(types: !3169)
!3169 = !{!25, !3170}
!3170 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3171, size: 64)
!3171 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2223, line: 7, baseType: !3172)
!3172 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2225, line: 49, size: 1728, elements: !3173)
!3173 = !{!3174, !3175, !3176, !3177, !3178, !3179, !3180, !3181, !3182, !3183, !3184, !3185, !3186, !3187, !3189, !3190, !3191, !3192, !3193, !3194, !3195, !3196, !3197, !3198, !3199, !3200, !3201, !3202, !3203}
!3174 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3172, file: !2225, line: 51, baseType: !25, size: 32)
!3175 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3172, file: !2225, line: 54, baseType: !32, size: 64, offset: 64)
!3176 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3172, file: !2225, line: 55, baseType: !32, size: 64, offset: 128)
!3177 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3172, file: !2225, line: 56, baseType: !32, size: 64, offset: 192)
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3172, file: !2225, line: 57, baseType: !32, size: 64, offset: 256)
!3179 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3172, file: !2225, line: 58, baseType: !32, size: 64, offset: 320)
!3180 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3172, file: !2225, line: 59, baseType: !32, size: 64, offset: 384)
!3181 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3172, file: !2225, line: 60, baseType: !32, size: 64, offset: 448)
!3182 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3172, file: !2225, line: 61, baseType: !32, size: 64, offset: 512)
!3183 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3172, file: !2225, line: 64, baseType: !32, size: 64, offset: 576)
!3184 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3172, file: !2225, line: 65, baseType: !32, size: 64, offset: 640)
!3185 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3172, file: !2225, line: 66, baseType: !32, size: 64, offset: 704)
!3186 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3172, file: !2225, line: 68, baseType: !2240, size: 64, offset: 768)
!3187 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3172, file: !2225, line: 70, baseType: !3188, size: 64, offset: 832)
!3188 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3172, size: 64)
!3189 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3172, file: !2225, line: 72, baseType: !25, size: 32, offset: 896)
!3190 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3172, file: !2225, line: 73, baseType: !25, size: 32, offset: 928)
!3191 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3172, file: !2225, line: 74, baseType: !2247, size: 64, offset: 960)
!3192 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3172, file: !2225, line: 77, baseType: !56, size: 16, offset: 1024)
!3193 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3172, file: !2225, line: 78, baseType: !2252, size: 8, offset: 1040)
!3194 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3172, file: !2225, line: 79, baseType: !2254, size: 8, offset: 1048)
!3195 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3172, file: !2225, line: 81, baseType: !2258, size: 64, offset: 1088)
!3196 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3172, file: !2225, line: 89, baseType: !2261, size: 64, offset: 1152)
!3197 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3172, file: !2225, line: 91, baseType: !2263, size: 64, offset: 1216)
!3198 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3172, file: !2225, line: 92, baseType: !2266, size: 64, offset: 1280)
!3199 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3172, file: !2225, line: 93, baseType: !3188, size: 64, offset: 1344)
!3200 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3172, file: !2225, line: 94, baseType: !31, size: 64, offset: 1408)
!3201 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3172, file: !2225, line: 95, baseType: !57, size: 64, offset: 1472)
!3202 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3172, file: !2225, line: 96, baseType: !25, size: 32, offset: 1536)
!3203 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3172, file: !2225, line: 98, baseType: !2273, size: 160, offset: 1568)
!3204 = !DILocalVariable(name: "stream", arg: 1, scope: !3166, file: !3167, line: 129, type: !3170)
!3205 = !DILocation(line: 129, column: 19, scope: !3166)
!3206 = !DILocation(line: 150, column: 7, scope: !3207)
!3207 = distinct !DILexicalBlock(scope: !3166, file: !3167, line: 150, column: 7)
!3208 = !DILocation(line: 150, column: 14, scope: !3207)
!3209 = !DILocation(line: 150, column: 22, scope: !3207)
!3210 = !DILocation(line: 150, column: 27, scope: !3207)
!3211 = !DILocation(line: 150, column: 7, scope: !3166)
!3212 = !DILocation(line: 151, column: 20, scope: !3207)
!3213 = !DILocation(line: 151, column: 12, scope: !3207)
!3214 = !DILocation(line: 151, column: 5, scope: !3207)
!3215 = !DILocation(line: 156, column: 44, scope: !3166)
!3216 = !DILocation(line: 156, column: 3, scope: !3166)
!3217 = !DILocation(line: 158, column: 18, scope: !3166)
!3218 = !DILocation(line: 158, column: 10, scope: !3166)
!3219 = !DILocation(line: 158, column: 3, scope: !3166)
!3220 = !DILocation(line: 235, column: 1, scope: !3166)
!3221 = !DILocalVariable(name: "stream", arg: 1, scope: !3222, file: !3167, line: 129, type: !3225)
!3222 = distinct !DISubprogram(name: "rpl_fflush", scope: !3167, file: !3167, line: 129, type: !3223, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3259, retainedNodes: !4)
!3223 = !DISubroutineType(types: !3224)
!3224 = !{!25, !3225}
!3225 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3226, size: 64)
!3226 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2223, line: 7, baseType: !3227)
!3227 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2225, line: 49, size: 1728, elements: !3228)
!3228 = !{!3229, !3230, !3231, !3232, !3233, !3234, !3235, !3236, !3237, !3238, !3239, !3240, !3241, !3242, !3244, !3245, !3246, !3247, !3248, !3249, !3250, !3251, !3252, !3253, !3254, !3255, !3256, !3257, !3258}
!3229 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3227, file: !2225, line: 51, baseType: !25, size: 32)
!3230 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3227, file: !2225, line: 54, baseType: !32, size: 64, offset: 64)
!3231 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3227, file: !2225, line: 55, baseType: !32, size: 64, offset: 128)
!3232 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3227, file: !2225, line: 56, baseType: !32, size: 64, offset: 192)
!3233 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3227, file: !2225, line: 57, baseType: !32, size: 64, offset: 256)
!3234 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3227, file: !2225, line: 58, baseType: !32, size: 64, offset: 320)
!3235 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3227, file: !2225, line: 59, baseType: !32, size: 64, offset: 384)
!3236 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3227, file: !2225, line: 60, baseType: !32, size: 64, offset: 448)
!3237 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3227, file: !2225, line: 61, baseType: !32, size: 64, offset: 512)
!3238 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3227, file: !2225, line: 64, baseType: !32, size: 64, offset: 576)
!3239 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3227, file: !2225, line: 65, baseType: !32, size: 64, offset: 640)
!3240 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3227, file: !2225, line: 66, baseType: !32, size: 64, offset: 704)
!3241 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3227, file: !2225, line: 68, baseType: !2240, size: 64, offset: 768)
!3242 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3227, file: !2225, line: 70, baseType: !3243, size: 64, offset: 832)
!3243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3227, size: 64)
!3244 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3227, file: !2225, line: 72, baseType: !25, size: 32, offset: 896)
!3245 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3227, file: !2225, line: 73, baseType: !25, size: 32, offset: 928)
!3246 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3227, file: !2225, line: 74, baseType: !2247, size: 64, offset: 960)
!3247 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3227, file: !2225, line: 77, baseType: !56, size: 16, offset: 1024)
!3248 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3227, file: !2225, line: 78, baseType: !2252, size: 8, offset: 1040)
!3249 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3227, file: !2225, line: 79, baseType: !2254, size: 8, offset: 1048)
!3250 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3227, file: !2225, line: 81, baseType: !2258, size: 64, offset: 1088)
!3251 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3227, file: !2225, line: 89, baseType: !2261, size: 64, offset: 1152)
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3227, file: !2225, line: 91, baseType: !2263, size: 64, offset: 1216)
!3253 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3227, file: !2225, line: 92, baseType: !2266, size: 64, offset: 1280)
!3254 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3227, file: !2225, line: 93, baseType: !3243, size: 64, offset: 1344)
!3255 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3227, file: !2225, line: 94, baseType: !31, size: 64, offset: 1408)
!3256 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3227, file: !2225, line: 95, baseType: !57, size: 64, offset: 1472)
!3257 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3227, file: !2225, line: 96, baseType: !25, size: 32, offset: 1536)
!3258 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3227, file: !2225, line: 98, baseType: !2273, size: 160, offset: 1568)
!3259 = distinct !DICompileUnit(language: DW_LANG_C99, file: !142, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!3260 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !3167, file: !3167, line: 41, type: !3261, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !141, retainedNodes: !4)
!3261 = !DISubroutineType(types: !3262)
!3262 = !{null, !3170}
!3263 = !DILocalVariable(name: "fp", arg: 1, scope: !3260, file: !3167, line: 41, type: !3170)
!3264 = !DILocation(line: 41, column: 48, scope: !3260)
!3265 = !DILocation(line: 43, column: 7, scope: !3266)
!3266 = distinct !DILexicalBlock(scope: !3260, file: !3167, line: 43, column: 7)
!3267 = !DILocation(line: 43, column: 11, scope: !3266)
!3268 = !DILocation(line: 43, column: 18, scope: !3266)
!3269 = !DILocation(line: 43, column: 7, scope: !3260)
!3270 = !DILocation(line: 45, column: 13, scope: !3266)
!3271 = !DILocation(line: 45, column: 5, scope: !3266)
!3272 = !DILocation(line: 46, column: 1, scope: !3260)
!3273 = !DILocalVariable(name: "fp", arg: 1, scope: !3274, file: !3167, line: 41, type: !3277)
!3274 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !3167, file: !3167, line: 41, type: !3275, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3311, retainedNodes: !4)
!3275 = !DISubroutineType(types: !3276)
!3276 = !{null, !3277}
!3277 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3278, size: 64)
!3278 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2223, line: 7, baseType: !3279)
!3279 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2225, line: 49, size: 1728, elements: !3280)
!3280 = !{!3281, !3282, !3283, !3284, !3285, !3286, !3287, !3288, !3289, !3290, !3291, !3292, !3293, !3294, !3296, !3297, !3298, !3299, !3300, !3301, !3302, !3303, !3304, !3305, !3306, !3307, !3308, !3309, !3310}
!3281 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3279, file: !2225, line: 51, baseType: !25, size: 32)
!3282 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3279, file: !2225, line: 54, baseType: !32, size: 64, offset: 64)
!3283 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3279, file: !2225, line: 55, baseType: !32, size: 64, offset: 128)
!3284 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3279, file: !2225, line: 56, baseType: !32, size: 64, offset: 192)
!3285 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3279, file: !2225, line: 57, baseType: !32, size: 64, offset: 256)
!3286 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3279, file: !2225, line: 58, baseType: !32, size: 64, offset: 320)
!3287 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3279, file: !2225, line: 59, baseType: !32, size: 64, offset: 384)
!3288 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3279, file: !2225, line: 60, baseType: !32, size: 64, offset: 448)
!3289 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3279, file: !2225, line: 61, baseType: !32, size: 64, offset: 512)
!3290 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3279, file: !2225, line: 64, baseType: !32, size: 64, offset: 576)
!3291 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3279, file: !2225, line: 65, baseType: !32, size: 64, offset: 640)
!3292 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3279, file: !2225, line: 66, baseType: !32, size: 64, offset: 704)
!3293 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3279, file: !2225, line: 68, baseType: !2240, size: 64, offset: 768)
!3294 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3279, file: !2225, line: 70, baseType: !3295, size: 64, offset: 832)
!3295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3279, size: 64)
!3296 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3279, file: !2225, line: 72, baseType: !25, size: 32, offset: 896)
!3297 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3279, file: !2225, line: 73, baseType: !25, size: 32, offset: 928)
!3298 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3279, file: !2225, line: 74, baseType: !2247, size: 64, offset: 960)
!3299 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3279, file: !2225, line: 77, baseType: !56, size: 16, offset: 1024)
!3300 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3279, file: !2225, line: 78, baseType: !2252, size: 8, offset: 1040)
!3301 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3279, file: !2225, line: 79, baseType: !2254, size: 8, offset: 1048)
!3302 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3279, file: !2225, line: 81, baseType: !2258, size: 64, offset: 1088)
!3303 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3279, file: !2225, line: 89, baseType: !2261, size: 64, offset: 1152)
!3304 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3279, file: !2225, line: 91, baseType: !2263, size: 64, offset: 1216)
!3305 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3279, file: !2225, line: 92, baseType: !2266, size: 64, offset: 1280)
!3306 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3279, file: !2225, line: 93, baseType: !3295, size: 64, offset: 1344)
!3307 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3279, file: !2225, line: 94, baseType: !31, size: 64, offset: 1408)
!3308 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3279, file: !2225, line: 95, baseType: !57, size: 64, offset: 1472)
!3309 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3279, file: !2225, line: 96, baseType: !25, size: 32, offset: 1536)
!3310 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3279, file: !2225, line: 98, baseType: !2273, size: 160, offset: 1568)
!3311 = distinct !DICompileUnit(language: DW_LANG_C99, file: !142, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !116, nameTableKind: None)
!3312 = distinct !DISubprogram(name: "rpl_fseeko", scope: !3313, file: !3313, line: 28, type: !3314, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !143, retainedNodes: !4)
!3313 = !DIFile(filename: "lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3314 = !DISubroutineType(types: !3315)
!3315 = !{!25, !3316, !3350, !25}
!3316 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3317, size: 64)
!3317 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2223, line: 7, baseType: !3318)
!3318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2225, line: 49, size: 1728, elements: !3319)
!3319 = !{!3320, !3321, !3322, !3323, !3324, !3325, !3326, !3327, !3328, !3329, !3330, !3331, !3332, !3333, !3335, !3336, !3337, !3338, !3339, !3340, !3341, !3342, !3343, !3344, !3345, !3346, !3347, !3348, !3349}
!3320 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3318, file: !2225, line: 51, baseType: !25, size: 32)
!3321 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3318, file: !2225, line: 54, baseType: !32, size: 64, offset: 64)
!3322 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3318, file: !2225, line: 55, baseType: !32, size: 64, offset: 128)
!3323 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3318, file: !2225, line: 56, baseType: !32, size: 64, offset: 192)
!3324 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3318, file: !2225, line: 57, baseType: !32, size: 64, offset: 256)
!3325 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3318, file: !2225, line: 58, baseType: !32, size: 64, offset: 320)
!3326 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3318, file: !2225, line: 59, baseType: !32, size: 64, offset: 384)
!3327 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3318, file: !2225, line: 60, baseType: !32, size: 64, offset: 448)
!3328 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3318, file: !2225, line: 61, baseType: !32, size: 64, offset: 512)
!3329 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3318, file: !2225, line: 64, baseType: !32, size: 64, offset: 576)
!3330 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3318, file: !2225, line: 65, baseType: !32, size: 64, offset: 640)
!3331 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3318, file: !2225, line: 66, baseType: !32, size: 64, offset: 704)
!3332 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3318, file: !2225, line: 68, baseType: !2240, size: 64, offset: 768)
!3333 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3318, file: !2225, line: 70, baseType: !3334, size: 64, offset: 832)
!3334 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3318, size: 64)
!3335 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3318, file: !2225, line: 72, baseType: !25, size: 32, offset: 896)
!3336 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3318, file: !2225, line: 73, baseType: !25, size: 32, offset: 928)
!3337 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3318, file: !2225, line: 74, baseType: !2247, size: 64, offset: 960)
!3338 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3318, file: !2225, line: 77, baseType: !56, size: 16, offset: 1024)
!3339 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3318, file: !2225, line: 78, baseType: !2252, size: 8, offset: 1040)
!3340 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3318, file: !2225, line: 79, baseType: !2254, size: 8, offset: 1048)
!3341 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3318, file: !2225, line: 81, baseType: !2258, size: 64, offset: 1088)
!3342 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3318, file: !2225, line: 89, baseType: !2261, size: 64, offset: 1152)
!3343 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3318, file: !2225, line: 91, baseType: !2263, size: 64, offset: 1216)
!3344 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3318, file: !2225, line: 92, baseType: !2266, size: 64, offset: 1280)
!3345 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3318, file: !2225, line: 93, baseType: !3334, size: 64, offset: 1344)
!3346 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3318, file: !2225, line: 94, baseType: !31, size: 64, offset: 1408)
!3347 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3318, file: !2225, line: 95, baseType: !57, size: 64, offset: 1472)
!3348 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3318, file: !2225, line: 96, baseType: !25, size: 32, offset: 1536)
!3349 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3318, file: !2225, line: 98, baseType: !2273, size: 160, offset: 1568)
!3350 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !2524, line: 63, baseType: !2247)
!3351 = !DILocalVariable(name: "fp", arg: 1, scope: !3312, file: !3313, line: 28, type: !3316)
!3352 = !DILocation(line: 28, column: 15, scope: !3312)
!3353 = !DILocalVariable(name: "offset", arg: 2, scope: !3312, file: !3313, line: 28, type: !3350)
!3354 = !DILocation(line: 28, column: 25, scope: !3312)
!3355 = !DILocalVariable(name: "whence", arg: 3, scope: !3312, file: !3313, line: 28, type: !25)
!3356 = !DILocation(line: 28, column: 37, scope: !3312)
!3357 = !DILocation(line: 52, column: 7, scope: !3358)
!3358 = distinct !DILexicalBlock(scope: !3312, file: !3313, line: 52, column: 7)
!3359 = !DILocation(line: 52, column: 11, scope: !3358)
!3360 = !DILocation(line: 52, column: 27, scope: !3358)
!3361 = !DILocation(line: 52, column: 31, scope: !3358)
!3362 = !DILocation(line: 52, column: 24, scope: !3358)
!3363 = !DILocation(line: 53, column: 7, scope: !3358)
!3364 = !DILocation(line: 53, column: 10, scope: !3358)
!3365 = !DILocation(line: 53, column: 14, scope: !3358)
!3366 = !DILocation(line: 53, column: 31, scope: !3358)
!3367 = !DILocation(line: 53, column: 35, scope: !3358)
!3368 = !DILocation(line: 53, column: 28, scope: !3358)
!3369 = !DILocation(line: 54, column: 7, scope: !3358)
!3370 = !DILocation(line: 54, column: 10, scope: !3358)
!3371 = !DILocation(line: 54, column: 14, scope: !3358)
!3372 = !DILocation(line: 54, column: 28, scope: !3358)
!3373 = !DILocation(line: 52, column: 7, scope: !3312)
!3374 = !DILocalVariable(name: "pos", scope: !3375, file: !3313, line: 117, type: !3350)
!3375 = distinct !DILexicalBlock(scope: !3358, file: !3313, line: 113, column: 5)
!3376 = !DILocation(line: 117, column: 13, scope: !3375)
!3377 = !DILocation(line: 117, column: 34, scope: !3375)
!3378 = !DILocation(line: 117, column: 26, scope: !3375)
!3379 = !DILocation(line: 117, column: 39, scope: !3375)
!3380 = !DILocation(line: 117, column: 47, scope: !3375)
!3381 = !DILocation(line: 117, column: 19, scope: !3375)
!3382 = !DILocation(line: 118, column: 11, scope: !3383)
!3383 = distinct !DILexicalBlock(scope: !3375, file: !3313, line: 118, column: 11)
!3384 = !DILocation(line: 118, column: 15, scope: !3383)
!3385 = !DILocation(line: 118, column: 11, scope: !3375)
!3386 = !DILocation(line: 124, column: 11, scope: !3387)
!3387 = distinct !DILexicalBlock(scope: !3383, file: !3313, line: 119, column: 9)
!3388 = !DILocation(line: 129, column: 7, scope: !3375)
!3389 = !DILocation(line: 129, column: 11, scope: !3375)
!3390 = !DILocation(line: 129, column: 18, scope: !3375)
!3391 = !DILocation(line: 130, column: 21, scope: !3375)
!3392 = !DILocation(line: 130, column: 7, scope: !3375)
!3393 = !DILocation(line: 130, column: 11, scope: !3375)
!3394 = !DILocation(line: 130, column: 19, scope: !3375)
!3395 = !DILocation(line: 161, column: 7, scope: !3375)
!3396 = !DILocation(line: 163, column: 18, scope: !3312)
!3397 = !DILocation(line: 163, column: 22, scope: !3312)
!3398 = !DILocation(line: 163, column: 30, scope: !3312)
!3399 = !DILocation(line: 163, column: 10, scope: !3312)
!3400 = !DILocation(line: 163, column: 3, scope: !3312)
!3401 = !DILocation(line: 164, column: 1, scope: !3312)
!3402 = distinct !DISubprogram(name: "c_tolower", scope: !3403, file: !3403, line: 337, type: !3404, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !145, retainedNodes: !4)
!3403 = !DIFile(filename: "./lib/c-ctype.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3404 = !DISubroutineType(types: !3405)
!3405 = !{!25, !25}
!3406 = !DILocalVariable(name: "c", arg: 1, scope: !3402, file: !3403, line: 337, type: !25)
!3407 = !DILocation(line: 337, column: 16, scope: !3402)
!3408 = !DILocation(line: 339, column: 11, scope: !3402)
!3409 = !DILocation(line: 339, column: 3, scope: !3402)
!3410 = !DILocation(line: 342, column: 14, scope: !3411)
!3411 = distinct !DILexicalBlock(scope: !3402, file: !3403, line: 340, column: 5)
!3412 = !DILocation(line: 342, column: 16, scope: !3411)
!3413 = !DILocation(line: 342, column: 22, scope: !3411)
!3414 = !DILocation(line: 342, column: 7, scope: !3411)
!3415 = !DILocation(line: 344, column: 14, scope: !3411)
!3416 = !DILocation(line: 344, column: 7, scope: !3411)
!3417 = !DILocation(line: 346, column: 1, scope: !3402)
!3418 = !DILocalVariable(name: "c", arg: 1, scope: !3419, file: !3403, line: 337, type: !25)
!3419 = distinct !DISubprogram(name: "c_tolower", scope: !3403, file: !3403, line: 337, type: !3404, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3420, retainedNodes: !4)
!3420 = distinct !DICompileUnit(language: DW_LANG_C99, file: !146, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
